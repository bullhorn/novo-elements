import * as i0 from '@angular/core';
import { Component, ViewChild, ChangeDetectionStrategy, inject, ViewEncapsulation, viewChild, Input, NgModule, Injectable, HostBinding, ViewContainerRef } from '@angular/core';
import * as i1$1 from 'novo-elements';
import { CalendarEventResponse, TextBoxControl, PickerControl, PickerResults, RemoteDataTableService, Helpers, StaticDataTableService, AbstractConditionFieldDef, Operator, CriteriaBuilderComponent, Conjunction, QuickNoteResults, TilesControl, CheckboxControl, RadioControl, SelectControl, DateTimeControl, FieldInteractionApi, NOVO_VALUE_THEME, MixedMultiPickerResults, GroupedMultiPickerResults, EntityPickerResults, ChecklistPickerResults, ReadOnlyControl, TextAreaControl, QuickNoteControl, AceEditorControl, EntityPickerResult, FileControl, SwitchControl, CheckListControl, DateControl, TimeControl, TimezoneControl, AddressControl, findByCountryId, NovoLabelService, NovoFormExtrasModule, NovoPipesModule, NovoElementsModule } from 'novo-elements';
import * as i1 from '@angular/forms';
import { UntypedFormControl, Validators, FormGroup, FormControl, FormsModule, ReactiveFormsModule } from '@angular/forms';
import * as i2 from '@angular/common';
import { CommonModule } from '@angular/common';
import * as i2$1 from 'novo-elements/elements';
import { startWith, map, delay, debounceTime, distinctUntilChanged, takeUntil, take, filter } from 'rxjs/operators';
import { ENTER, COMMA } from '@angular/cdk/keycodes';
import * as dateFns from 'date-fns';
import { Subject, of, ReplaySubject, BehaviorSubject } from 'rxjs';
import * as i2$2 from '@angular/cdk/scrolling';
import { HttpClient } from '@angular/common/http';
import * as i3 from 'novo-elements/addons';
import * as Icons from '@bullhorn/bullhorn-icons';
import * as i1$3 from '@angular/router';
import { RouterModule } from '@angular/router';
import * as i3$1 from '@angular/cdk/portal';
import { ComponentPortal, PortalModule } from '@angular/cdk/portal';
import * as i1$2 from '@angular/platform-browser';
import * as i1$4 from 'angular-split';
import { AngularSplitModule } from 'angular-split';

const colors = {
    red: {
        primary: '#ad2121',
        secondary: '#FAE3E3',
    },
    blue: {
        primary: '#1e90ff',
        secondary: '#D1E8FF',
    },
    yellow: {
        primary: '#e3bc08',
        secondary: '#FDF1BA',
    },
    green: {
        primary: '#8CC152',
        secondary: '#37BC9B',
    },
};
/**
 * @title Agenda Example
 */
class AgendaExample {
    constructor() {
        this.views = [
            {
                label: 'Month',
                value: 'month',
            },
            {
                label: 'Week',
                value: 'week',
            },
            {
                label: 'Day',
                value: 'day',
            },
        ];
        this.view = 'month';
        this.viewDate = new Date();
        this.events = [
            {
                title: 'Interview',
                description: 'with @bvkimball',
                color: colors.green,
                start: new Date(),
                response: CalendarEventResponse.Rejected,
                type: 'Interview',
            },
            {
                title: 'Client Visit',
                description: 'with @asibilia',
                color: colors.red,
                start: new Date(Date.now() + 60000 * 30),
                response: CalendarEventResponse.Accepted,
                type: 'Visit',
            },
            {
                title: 'Interview',
                description: 'with @johndoe',
                color: colors.green,
                start: new Date(Date.now() + 60000 * 90),
                response: CalendarEventResponse.Accepted,
                type: 'Interview',
            },
            {
                title: 'Phone Interview',
                description: 'with @johnsully83',
                color: colors.green,
                start: new Date(Date.now() + 60000 * 90),
                end: new Date(Date.now() + 60000 * 180),
                response: CalendarEventResponse.Accepted,
                type: 'Interview',
            },
            {
                title: 'Interview',
                description: 'with @johnsully83',
                color: colors.green,
                start: new Date(Date.now() + 60000 * 90),
                end: new Date(Date.now() + 60000 * 150),
                response: CalendarEventResponse.Accepted,
                type: 'Interview',
            },
            {
                title: 'Final Interview',
                description: 'with @johnsully83',
                color: colors.green,
                start: new Date(Date.now() + 60000 * 90),
                end: new Date(Date.now() + 60000 * 120),
                response: CalendarEventResponse.Accepted,
                type: 'Interview',
            },
            {
                title: 'Phone Interview',
                description: 'with @johnsully83',
                color: colors.green,
                start: new Date(Date.now() + 60000 * 90),
                end: new Date(Date.now() + 60000 * 180),
                response: CalendarEventResponse.Accepted,
                type: 'Interview',
            },
            {
                title: 'Interview',
                description: 'with @johnsully83',
                color: colors.green,
                start: new Date(Date.now() + 60000 * 90),
                end: new Date(Date.now() + 60000 * 150),
                response: CalendarEventResponse.Accepted,
                type: 'Interview',
            },
            {
                title: 'Final Interview',
                description: 'with @johnsully83',
                color: colors.green,
                start: new Date(Date.now() + 60000 * 90),
                end: new Date(Date.now() + 60000 * 120),
                response: CalendarEventResponse.Accepted,
                type: 'Interview',
            },
            {
                title: 'Phone Interview',
                description: 'with @johnsully83',
                color: colors.green,
                start: new Date(Date.now() + 60000 * 90),
                end: new Date(Date.now() + 60000 * 180),
                response: CalendarEventResponse.Accepted,
                type: 'Interview',
            },
            {
                title: 'Interview',
                description: 'with @johnsully83',
                color: colors.green,
                start: new Date(Date.now() + 60000 * 90),
                end: new Date(Date.now() + 60000 * 150),
                response: CalendarEventResponse.Accepted,
                type: 'Interview',
            },
            {
                title: 'Final Interview',
                description: 'with @johnsully83',
                color: colors.green,
                start: new Date(Date.now() + 60000 * 90),
                end: new Date(Date.now() + 60000 * 120),
                response: CalendarEventResponse.Accepted,
                type: 'Interview',
            },
            {
                title: 'Phone Interview',
                description: 'with @johnsully83',
                color: colors.green,
                start: new Date(Date.now() + 60000 * 75),
                end: new Date(Date.now() + 60000 * 120),
                response: CalendarEventResponse.Accepted,
                type: 'Interview',
            },
            {
                title: 'Phone Interview',
                description: 'with @johnsully83',
                color: colors.green,
                start: new Date(Date.now() + 60000 * 75),
                end: new Date(Date.now() + 60000 * 150),
                response: CalendarEventResponse.Accepted,
                type: 'Interview',
            },
            {
                title: 'Interview',
                description: 'with @johnsully83',
                color: colors.green,
                start: new Date(Date.now() + 60000 * 270),
                end: new Date(Date.now() + 60000 * 300),
                response: CalendarEventResponse.Accepted,
                type: 'Interview',
            },
            {
                title: 'Final Interview',
                description: 'with @johnsully83',
                color: colors.green,
                start: new Date(Date.now() + 60000 * 270),
                end: new Date(Date.now() + 60000 * 360),
                response: CalendarEventResponse.Accepted,
                type: 'Interview',
            },
            {
                title: 'Final Interview',
                description: 'with @johnsully83',
                color: colors.green,
                start: new Date(Date.now() + 60000 * 270),
                end: new Date(Date.now() + 60000 * 2880000),
                response: CalendarEventResponse.Accepted,
                type: 'Interview',
            },
        ];
    }
    getNewEvent(date, color, type) {
        const evt = {
            title: 'Meeting',
            description: 'with @jgodi',
            color,
            start: date,
            response: type,
            type: 'Meeting',
        };
        return evt;
    }
    dayClicked(date) {
        const evt = this.getNewEvent(date, colors.blue, CalendarEventResponse.Maybe);
        this.events.push(evt);
        this.events = [...this.events];
    }
    addShift(event) {
        const evt = this.getNewEvent(event.day.date, colors.blue, CalendarEventResponse.Maybe);
        this.events.push(evt);
        this.events = [...this.events];
    }
    removeShift(event) {
        this.events.splice(event.day.events.indexOf(event.event), 1);
    }
    toggleAvailable(event) {
        let evt;
        if (!event.day.events.length) {
            evt = this.getNewEvent(event.day.date, colors.green, CalendarEventResponse.Accepted);
            this.events.push(evt);
            this.events = [...this.events];
        }
        else {
            evt = event.day.events[0];
            switch (evt.response) {
                case CalendarEventResponse.Accepted:
                    evt.response = CalendarEventResponse.Rejected;
                    break;
                case CalendarEventResponse.Rejected:
                    event.day.events = [];
                    break;
                default:
                    break;
            }
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: AgendaExample, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: AgendaExample, isStandalone: false, selector: "agenda-example", ngImport: i0, template: "<div>\n  <novo-agenda-date-change [view]=\"view\" [(viewDate)]=\"viewDate\">\n  </novo-agenda-date-change>\n\n  <novo-tiles [options]=\"views\" [(ngModel)]=\"view\"></novo-tiles>\n</div>\n<div [ngSwitch]=\"view\" class=\"cal-demo-content\">\n  <novo-agenda-month *ngSwitchCase=\"'month'\" [(viewDate)]=\"viewDate\" [events]=\"events\"\n    (dayClicked)=\"dayClicked($event.day.date)\">\n  </novo-agenda-month>\n\n  <novo-agenda-week *ngSwitchCase=\"'week'\" [(viewDate)]=\"viewDate\" [events]=\"events\"\n    (dayClicked)=\"dayClicked($event.date)\" [dayStartHour]=\"0\" [dayEndHour]=\"23\">\n  </novo-agenda-week>\n\n  <novo-agenda-day *ngSwitchCase=\"'day'\" [(viewDate)]=\"viewDate\" [events]=\"events\" [dayStartHour]=\"0\" [dayEndHour]=\"23\">\n  </novo-agenda-day>\n</div>", styles: [""], dependencies: [{ kind: "directive", type: i1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i1.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "directive", type: i2.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { kind: "directive", type: i2.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { kind: "component", type: i2$1.NovoAgendaMonthViewElement, selector: "novo-agenda-month", inputs: ["viewDate", "events", "excludeDays", "dayModifier", "refresh", "locale", "tooltipPosition", "weekStartsOn", "headerTemplate", "cellTemplate"], outputs: ["dayClicked", "eventClicked", "eventTimesChanged", "viewDateChange"] }, { kind: "component", type: i2$1.NovoAgendaWeekViewElement, selector: "novo-agenda-week", inputs: ["viewDate", "events", "excludeDays", "refresh", "locale", "tooltipPosition", "weekStartsOn", "headerTemplate", "eventTemplate", "precision", "hourSegments", "dayStartHour", "dayStartMinute", "dayEndHour", "dayEndMinute", "hourSegmentTemplate"], outputs: ["hourSegmentClicked", "dayClicked", "eventClicked", "eventTimesChanged"] }, { kind: "component", type: i2$1.NovoAgendaDayViewElement, selector: "novo-agenda-day", inputs: ["viewDate", "events", "hourSegments", "dayStartHour", "dayStartMinute", "dayEndHour", "dayEndMinute", "eventWidth", "refresh", "locale", "hourSegmentModifier", "eventSnapSize", "tooltipPosition", "hourSegmentTemplate", "allDayEventTemplate", "eventTemplate"], outputs: ["eventClicked", "hourSegmentClicked", "eventTimesChanged"] }, { kind: "component", type: i2$1.NovoAgendaDateChangeElement, selector: "novo-agenda-date-change", inputs: ["view", "viewDate", "locale"], outputs: ["viewDateChange"] }, { kind: "component", type: i2$1.NovoTilesElement, selector: "novo-tiles", inputs: ["name", "options", "required", "controlDisabled"], outputs: ["onChange", "onSelectedOptionClick", "onDisabledOptionClick"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: AgendaExample, decorators: [{
            type: Component,
            args: [{ selector: 'agenda-example', standalone: false, template: "<div>\n  <novo-agenda-date-change [view]=\"view\" [(viewDate)]=\"viewDate\">\n  </novo-agenda-date-change>\n\n  <novo-tiles [options]=\"views\" [(ngModel)]=\"view\"></novo-tiles>\n</div>\n<div [ngSwitch]=\"view\" class=\"cal-demo-content\">\n  <novo-agenda-month *ngSwitchCase=\"'month'\" [(viewDate)]=\"viewDate\" [events]=\"events\"\n    (dayClicked)=\"dayClicked($event.day.date)\">\n  </novo-agenda-month>\n\n  <novo-agenda-week *ngSwitchCase=\"'week'\" [(viewDate)]=\"viewDate\" [events]=\"events\"\n    (dayClicked)=\"dayClicked($event.date)\" [dayStartHour]=\"0\" [dayEndHour]=\"23\">\n  </novo-agenda-week>\n\n  <novo-agenda-day *ngSwitchCase=\"'day'\" [(viewDate)]=\"viewDate\" [events]=\"events\" [dayStartHour]=\"0\" [dayEndHour]=\"23\">\n  </novo-agenda-day>\n</div>" }]
        }] });

class AsideFormDemo {
    constructor(ref, formUtils) {
        this.ref = ref;
        this.formUtils = formUtils;
    }
    ngOnInit() {
        this.textControl = new TextBoxControl({ key: 'text', label: 'Text Box' });
        this.emailControl = new TextBoxControl({ type: 'email', key: 'email', label: 'Email' });
        this.numberControl = new TextBoxControl({ type: 'number', key: 'number', label: 'Number' });
        this.pickerControl = new PickerControl({
            key: 'picker',
            multiple: false,
            label: 'Picker',
            required: true,
            config: {
                resultsTemplate: PickerResults,
                options: ['Apple', 'Banana', 'Grapes', 'Orange', 'Pear'],
            },
        });
        this.textForm = this.formUtils.toFormGroup([this.textControl, this.emailControl, this.numberControl, this.pickerControl]);
    }
    close() {
        this.ref.close();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: AsideFormDemo, deps: [{ token: i1$1.NovoAsideRef }, { token: i1$1.FormUtils }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: AsideFormDemo, isStandalone: false, selector: "aside-form-demo", host: { properties: { "style.display": "'block'", "style.width.%": "'100'" } }, ngImport: i0, template: `
    <header title="Add Contact" icon="person" theme="contact">
      <utils>
        <util-action icon="times" (click)="close()"></util-action>
      </utils>
    </header>
    <section padding="lg">
      <novo-form [form]="textForm">
        <div class="novo-form-row">
          <novo-control [form]="textForm" [control]="textControl"></novo-control>
        </div>
        <div class="novo-form-row">
          <novo-control [form]="textForm" [control]="emailControl"></novo-control>
        </div>
        <div class="novo-form-row">
          <novo-control [form]="textForm" [control]="numberControl"></novo-control>
        </div>
        <div class="novo-form-row">
          <novo-control [form]="textForm" [control]="pickerControl"></novo-control>
        </div>
      </novo-form>
    </section>
    <button theme="standard" (click)="close()">Cancel</button>
    <button theme="primary" color="success" icon="check" (click)="close()">Save</button>
  `, isInline: true, dependencies: [{ kind: "component", type: i2$1.NovoButtonElement, selector: "novo-button,button[theme]", inputs: ["color", "side", "size", "theme", "loading", "icon", "secondIcon", "disabled"] }, { kind: "component", type: i2$1.NovoHeaderComponent, selector: "novo-header,header[theme],header[accent]", inputs: ["condensed", "title", "subTitle", "icon", "size", "theme"] }, { kind: "component", type: i2$1.NovoUtilActionComponent, selector: "util-action, novo-action", inputs: ["icon", "size", "inverse", "disabled"] }, { kind: "component", type: i2$1.NovoUtilsComponent, selector: "utils" }, { kind: "component", type: i2$1.NovoControlElement, selector: "novo-control", inputs: ["control", "form", "condensed", "autoFocus"], outputs: ["change", "edit", "save", "delete", "upload", "blur", "focus"] }, { kind: "component", type: i2$1.NovoFormElement, selector: "novo-form", inputs: ["form", "layout", "hideHeader"] }, { kind: "directive", type: i2$1.PaddingDirective, selector: "[p],[padding],[paddingTop],[paddingRight],[paddingBottom],[paddingLeft],[paddingX],[paddingY],[pt],[pr],[pb],[pl],[px],[py]", inputs: ["padding", "p", "paddingLeft", "pl", "paddingRight", "pr", "paddingTop", "pt", "paddingBottom", "pb", "paddingX", "px", "paddingY", "py"] }, { kind: "directive", type: i2$1.ThemeColorDirective, selector: "[theme]", inputs: ["theme"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: AsideFormDemo, decorators: [{
            type: Component,
            args: [{
                    selector: 'aside-form-demo',
                    template: `
    <header title="Add Contact" icon="person" theme="contact">
      <utils>
        <util-action icon="times" (click)="close()"></util-action>
      </utils>
    </header>
    <section padding="lg">
      <novo-form [form]="textForm">
        <div class="novo-form-row">
          <novo-control [form]="textForm" [control]="textControl"></novo-control>
        </div>
        <div class="novo-form-row">
          <novo-control [form]="textForm" [control]="emailControl"></novo-control>
        </div>
        <div class="novo-form-row">
          <novo-control [form]="textForm" [control]="numberControl"></novo-control>
        </div>
        <div class="novo-form-row">
          <novo-control [form]="textForm" [control]="pickerControl"></novo-control>
        </div>
      </novo-form>
    </section>
    <button theme="standard" (click)="close()">Cancel</button>
    <button theme="primary" color="success" icon="check" (click)="close()">Save</button>
  `,
                    host: {
                        // tslint:disable-next-line: quotemark
                        '[style.display]': "'block'",
                        // tslint:disable-next-line: quotemark
                        '[style.width.%]': "'100'",
                    },
                    standalone: false
                }]
        }], ctorParameters: () => [{ type: i1$1.NovoAsideRef }, { type: i1$1.FormUtils }] });
/**
 * @title Aside Form Example
 */
class AsideFormExample {
    constructor(aside) {
        this.aside = aside;
    }
    showAside() {
        this.aside.open(AsideFormDemo);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: AsideFormExample, deps: [{ token: i1$1.NovoAsideService }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: AsideFormExample, isStandalone: false, selector: "aside-form-example", ngImport: i0, template: "<button data-automation-id=\"modal-trigger\" theme=\"secondary\" (click)=\"showAside()\">Show Me :)</button>", styles: [":host{display:block;background:#0000008c;padding:35px 0;position:relative;text-align:center}\n"], dependencies: [{ kind: "component", type: i2$1.NovoButtonElement, selector: "novo-button,button[theme]", inputs: ["color", "side", "size", "theme", "loading", "icon", "secondIcon", "disabled"] }, { kind: "directive", type: i2$1.ThemeColorDirective, selector: "[theme]", inputs: ["theme"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: AsideFormExample, decorators: [{
            type: Component,
            args: [{ selector: 'aside-form-example', standalone: false, template: "<button data-automation-id=\"modal-trigger\" theme=\"secondary\" (click)=\"showAside()\">Show Me :)</button>", styles: [":host{display:block;background:#0000008c;padding:35px 0;position:relative;text-align:center}\n"] }]
        }], ctorParameters: () => [{ type: i1$1.NovoAsideService }] });

class AsideCustomDemo {
    constructor(ref) {
        this.ref = ref;
        this.values = [
            { label: 'Status', data: 'Open' },
            { label: 'Phone', data: '555-555-5555' },
            { label: 'Address', data: 'Boston, MA' },
        ];
    }
    close() {
        this.ref.close(`successfully closed: ${this.ref.params.name}`);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: AsideCustomDemo, deps: [{ token: i1$1.NovoAsideRef }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: AsideCustomDemo, isStandalone: false, selector: "aside-custom-demo", host: { properties: { "style.display": "'block'", "style.width.%": "'100'" } }, ngImport: i0, template: `
    <novo-toolbar>
      <novo-toolbar-row accent="candidate" gap="md">
        <novo-icon>candidate</novo-icon>
        <novo-title>{{ ref.params.name }}</novo-title>
        <span class="example-spacer" flex="1"></span>
        <novo-action icon="times" (click)="close()" aria-label="close the aside icon"></novo-action>
      </novo-toolbar-row>
      <novo-toolbar-row>
        <novo-nav [outlet]="nav">
          <novo-tab>Overview</novo-tab>
          <novo-tab>Activity</novo-tab>
          <novo-tab>Files</novo-tab>
        </novo-nav>
      </novo-toolbar-row>
    </novo-toolbar>
    <section padding="lg">
      <novo-nav-outlet #nav>
        <novo-nav-content>
          <novo-card padding="md">
            <novo-card-header>
              <novo-icon color="neutral">move</novo-icon>
              <novo-title>Details</novo-title>
              <novo-action icon="refresh" tooltip="Refresh Card Data"></novo-action>
              <novo-action icon="times" tooltip="Remove Card"></novo-action>
            </novo-card-header>
            <novo-card-content condensed>
              <novo-list class="bgc-off-white-striped" direction="vertical">
                <novo-value row *ngFor="let value of values" [label]="value.label" [data]="value.data"></novo-value>
              </novo-list>
            </novo-card-content>
          </novo-card>
        </novo-nav-content>
        <novo-nav-content>
          <h1>Tab 2 Content</h1>
        </novo-nav-content>
      </novo-nav-outlet>
    </section>
  `, isInline: true, dependencies: [{ kind: "directive", type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "component", type: i2$1.CardElement, selector: "novo-card", inputs: ["padding", "config", "title", "message", "messageIcon", "icon", "iconTooltip", "refresh", "close", "move", "loading", "inline", "inset"], outputs: ["onClose", "onRefresh"] }, { kind: "component", type: i2$1.CardContentElement, selector: "novo-card-content, [novo-card-content], [novoCardContent]", inputs: ["condensed"] }, { kind: "component", type: i2$1.CardHeaderElement, selector: "novo-card-header, [novo-card-header], [novoCardHeader]" }, { kind: "directive", type: i2$1.TooltipDirective, selector: "[tooltip]", inputs: ["tooltip", "tooltipPosition", "tooltipType", "tooltipSize", "tooltipBounce", "tooltipNoAnimate", "tooltipRounded", "tooltipAlways", "tooltipPreline", "removeTooltipArrow", "tooltipAutoPosition", "tooltipIsHTML", "tooltipCloseOnClick", "tooltipOnOverflow", "tooltipActive"] }, { kind: "component", type: i2$1.NovoUtilActionComponent, selector: "util-action, novo-action", inputs: ["icon", "size", "inverse", "disabled"] }, { kind: "component", type: i2$1.NovoNavElement, selector: "novo-nav", inputs: ["theme", "direction", "outlet", "router", "condensed", "selectedIndex"], outputs: ["selectedIndexChange"] }, { kind: "component", type: i2$1.NovoTabElement, selector: "novo-tab", inputs: ["active", "color", "disabled"], outputs: ["activeChange"] }, { kind: "component", type: i2$1.NovoNavOutletElement, selector: "novo-nav-outlet" }, { kind: "component", type: i2$1.NovoNavContentElement, selector: "novo-nav-content", inputs: ["active"] }, { kind: "component", type: i2$1.NovoListElement, selector: "novo-list", inputs: ["theme", "direction"] }, { kind: "component", type: i2$1.NovoValueElement, selector: "novo-value", inputs: ["data", "meta", "theme", "row", "label", "type", "icon"] }, { kind: "component", type: i2$1.NovoIconComponent, selector: "novo-icon", inputs: ["raised", "theme", "shape", "color", "size", "smaller", "larger", "alt", "name"] }, { kind: "component", type: i2$1.NovoTitle, selector: "novo-title,[novo-title]" }, { kind: "directive", type: i2$1.PaddingDirective, selector: "[p],[padding],[paddingTop],[paddingRight],[paddingBottom],[paddingLeft],[paddingX],[paddingY],[pt],[pr],[pb],[pl],[px],[py]", inputs: ["padding", "p", "paddingLeft", "pl", "paddingRight", "pr", "paddingTop", "pt", "paddingBottom", "pb", "paddingX", "px", "paddingY", "py"] }, { kind: "directive", type: i2$1.GapDirective, selector: "[gap]", inputs: ["gap"] }, { kind: "directive", type: i2$1.AccentColorDirective, selector: "[accent]", inputs: ["accent"] }, { kind: "directive", type: i2$1.FlexDirective, selector: "[flex]", inputs: ["flex"] }, { kind: "component", type: i2$1.NovoToolbar, selector: "novo-toolbar", inputs: ["color", "gap"] }, { kind: "directive", type: i2$1.NovoToolbarRow, selector: "novo-toolbar-row", inputs: ["color", "gap"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: AsideCustomDemo, decorators: [{
            type: Component,
            args: [{
                    selector: 'aside-custom-demo',
                    template: `
    <novo-toolbar>
      <novo-toolbar-row accent="candidate" gap="md">
        <novo-icon>candidate</novo-icon>
        <novo-title>{{ ref.params.name }}</novo-title>
        <span class="example-spacer" flex="1"></span>
        <novo-action icon="times" (click)="close()" aria-label="close the aside icon"></novo-action>
      </novo-toolbar-row>
      <novo-toolbar-row>
        <novo-nav [outlet]="nav">
          <novo-tab>Overview</novo-tab>
          <novo-tab>Activity</novo-tab>
          <novo-tab>Files</novo-tab>
        </novo-nav>
      </novo-toolbar-row>
    </novo-toolbar>
    <section padding="lg">
      <novo-nav-outlet #nav>
        <novo-nav-content>
          <novo-card padding="md">
            <novo-card-header>
              <novo-icon color="neutral">move</novo-icon>
              <novo-title>Details</novo-title>
              <novo-action icon="refresh" tooltip="Refresh Card Data"></novo-action>
              <novo-action icon="times" tooltip="Remove Card"></novo-action>
            </novo-card-header>
            <novo-card-content condensed>
              <novo-list class="bgc-off-white-striped" direction="vertical">
                <novo-value row *ngFor="let value of values" [label]="value.label" [data]="value.data"></novo-value>
              </novo-list>
            </novo-card-content>
          </novo-card>
        </novo-nav-content>
        <novo-nav-content>
          <h1>Tab 2 Content</h1>
        </novo-nav-content>
      </novo-nav-outlet>
    </section>
  `,
                    host: {
                        '[style.display]': "'block'",
                        '[style.width.%]': "'100'",
                    },
                    standalone: false
                }]
        }], ctorParameters: () => [{ type: i1$1.NovoAsideRef }] });
/**
 * @title Aside Usage Example
 */
class AsideUsageExample {
    constructor(aside) {
        this.aside = aside;
    }
    showAside() {
        const ref = this.aside.open(AsideCustomDemo, { id: 100, name: 'Ferdinand del Toro' });
        ref.onClosed.then((result) => {
            console.log('Aside has been closed, with result:', result);
        });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: AsideUsageExample, deps: [{ token: i1$1.NovoAsideService }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: AsideUsageExample, isStandalone: false, selector: "aside-usage-example", ngImport: i0, template: "<button data-automation-id=\"aside-trigger\" theme=\"secondary\" (click)=\"showAside()\">Show Me :)</button>", styles: [":host{display:block;background:#0000008c;padding:35px 0;position:relative;text-align:center}.example-spacer{flex:1 1 100%}\n"], dependencies: [{ kind: "component", type: i2$1.NovoButtonElement, selector: "novo-button,button[theme]", inputs: ["color", "side", "size", "theme", "loading", "icon", "secondIcon", "disabled"] }, { kind: "directive", type: i2$1.ThemeColorDirective, selector: "[theme]", inputs: ["theme"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: AsideUsageExample, decorators: [{
            type: Component,
            args: [{ selector: 'aside-usage-example', standalone: false, template: "<button data-automation-id=\"aside-trigger\" theme=\"secondary\" (click)=\"showAside()\">Show Me :)</button>", styles: [":host{display:block;background:#0000008c;padding:35px 0;position:relative;text-align:center}.example-spacer{flex:1 1 100%}\n"] }]
        }], ctorParameters: () => [{ type: i1$1.NovoAsideService }] });

/**
 * @title Autocomplete Stacked Chips
 */
class AutocompleteStackedChipsExample {
    constructor() {
        this.allShifts = ALL_SHIFTS;
        this.searchCtrl = new UntypedFormControl();
        this.shiftCtrl = new UntypedFormControl(ALL_SHIFTS.slice(0, 3));
        this.filteredShifts = this.searchCtrl.valueChanges.pipe(startWith(null), map((shift) => (shift ? this._filter(shift) : this.allShifts.slice())));
    }
    add(event) { }
    remove(shift) { }
    selected(event) { }
    compareById(o1, o2) {
        return o1.id === o2.id;
    }
    _filter(value) {
        const filterValue = value.toLowerCase();
        return this.allShifts.filter((shift) => shift.startTime.toLowerCase().indexOf(filterValue) === 0);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: AutocompleteStackedChipsExample, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: AutocompleteStackedChipsExample, isStandalone: false, selector: "autocomplete-stacked-chips-example", ngImport: i0, template: "<novo-field class=\"example-chip-list\">\n  <novo-label>Shifts</novo-label>\n  <novo-chip-list\n    #chipList\n    stacked\n    aria-label=\"Shift selection\"\n    [formControl]=\"shiftCtrl\"\n    [compareWith]=\"compareById\">\n    <novo-chip\n      *ngFor=\"let shift of chipList.value\"\n      (removed)=\"remove(shift)\">\n      <novo-flex gap=\"1rem\">\n        <novo-text>\n          <novo-icon>calendar</novo-icon>\n          {{shift.startTime | isoDate}}\n        </novo-text>\n        <novo-text>\n          <novo-icon>clock</novo-icon>\n          {{[shift.startTime, shift.endTime] | isoTimeRange}}\n        </novo-text>\n        <novo-text>\n          <novo-icon>candidate-circle</novo-icon>\n          {{shift.numAssigned}} / {{shift.openings}}\n        </novo-text>\n      </novo-flex>\n      <novo-icon novoChipRemove>delete</novo-icon>\n    </novo-chip>\n    <input\n      novoChipInput\n      #searchInput\n      autocomplete=\"off\"\n      placeholder=\"add shift...\"\n      [formControl]=\"searchCtrl\"\n      (novoChipInputTokenEnd)=\"add($event)\" />\n  </novo-chip-list>\n  <novo-autocomplete (optionSelected)=\"selected($event)\" multiple>\n    <novo-option *ngFor=\"let shift of filteredShifts | async\" [value]=\"shift\">\n      <novo-text>\n        <novo-icon>calendar</novo-icon>\n        {{shift.startTime | isoDate}}\n        {{[shift.startTime, shift.endTime] | isoTimeRange}}\n      </novo-text>\n    </novo-option>\n  </novo-autocomplete>\n</novo-field>\n\n<div>{{chipList.value}}</div>", styles: [""], dependencies: [{ kind: "directive", type: i1.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i1.FormControlDirective, selector: "[formControl]", inputs: ["formControl", "disabled", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { kind: "directive", type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "component", type: i2$1.NovoAutocompleteElement, selector: "novo-autocomplete", inputs: ["tabIndex", "triggerOn", "displayWith", "aria-label", "multiple", "disabled", "makeFirstItemActive"], outputs: ["optionSelected", "optionActivated"], exportAs: ["novoAutocomplete"] }, { kind: "component", type: i2$1.NovoFlexElement, selector: "novo-flex,novo-row", inputs: ["direction", "align", "justify", "wrap", "gap"] }, { kind: "component", type: i2$1.NovoChipElement, selector: "novo-chip, [novo-chip]", inputs: ["color", "tabIndex", "size", "type", "selected", "value", "selectable", "disabled", "removable"], outputs: ["selectionChange", "destroyed", "removed"] }, { kind: "directive", type: i2$1.NovoChipRemove, selector: "[novoChipRemove]" }, { kind: "directive", type: i2$1.NovoChipInput, selector: "input[novoChipInput]", inputs: ["novoChipInputAddOnBlur", "novoChipInputSeparatorKeyCodes", "placeholder", "id", "disabled"], outputs: ["novoChipInputTokenEnd"], exportAs: ["novoChipInput", "novoChipInputFor"] }, { kind: "component", type: i2$1.NovoChipList, selector: "novo-chip-list", inputs: ["errorStateMatcher", "multiple", "chipsToggleable", "stacked", "compareWith", "value", "required", "placeholder", "disabled", "aria-orientation", "selectable", "tabIndex"], outputs: ["change", "valueChange"], exportAs: ["novoChipList"] }, { kind: "component", type: i2$1.NovoIconComponent, selector: "novo-icon", inputs: ["raised", "theme", "shape", "color", "size", "smaller", "larger", "alt", "name"] }, { kind: "component", type: i2$1.NovoText, selector: "novo-text,[novo-text]", inputs: ["block"] }, { kind: "component", type: i2$1.NovoLabel, selector: "novo-label,[novo-label]", inputs: ["id"] }, { kind: "directive", type: i2$1.GapDirective, selector: "[gap]", inputs: ["gap"] }, { kind: "component", type: i2$1.NovoOption, selector: "novo-option", inputs: ["selected", "keepOpen", "novoInert", "value", "disabled"], exportAs: ["novoOption"] }, { kind: "component", type: i2$1.NovoFieldElement, selector: "novo-field", inputs: ["layout", "appearance", "customOverlayOrigin", "width"], outputs: ["valueChanges", "stateChanges"] }, { kind: "pipe", type: i2.AsyncPipe, name: "async" }, { kind: "pipe", type: i1$1.IsoDatePipe, name: "isoDate" }, { kind: "pipe", type: i1$1.IsoTimeRangePipe, name: "isoTimeRange" }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: AutocompleteStackedChipsExample, decorators: [{
            type: Component,
            args: [{ selector: 'autocomplete-stacked-chips-example', standalone: false, template: "<novo-field class=\"example-chip-list\">\n  <novo-label>Shifts</novo-label>\n  <novo-chip-list\n    #chipList\n    stacked\n    aria-label=\"Shift selection\"\n    [formControl]=\"shiftCtrl\"\n    [compareWith]=\"compareById\">\n    <novo-chip\n      *ngFor=\"let shift of chipList.value\"\n      (removed)=\"remove(shift)\">\n      <novo-flex gap=\"1rem\">\n        <novo-text>\n          <novo-icon>calendar</novo-icon>\n          {{shift.startTime | isoDate}}\n        </novo-text>\n        <novo-text>\n          <novo-icon>clock</novo-icon>\n          {{[shift.startTime, shift.endTime] | isoTimeRange}}\n        </novo-text>\n        <novo-text>\n          <novo-icon>candidate-circle</novo-icon>\n          {{shift.numAssigned}} / {{shift.openings}}\n        </novo-text>\n      </novo-flex>\n      <novo-icon novoChipRemove>delete</novo-icon>\n    </novo-chip>\n    <input\n      novoChipInput\n      #searchInput\n      autocomplete=\"off\"\n      placeholder=\"add shift...\"\n      [formControl]=\"searchCtrl\"\n      (novoChipInputTokenEnd)=\"add($event)\" />\n  </novo-chip-list>\n  <novo-autocomplete (optionSelected)=\"selected($event)\" multiple>\n    <novo-option *ngFor=\"let shift of filteredShifts | async\" [value]=\"shift\">\n      <novo-text>\n        <novo-icon>calendar</novo-icon>\n        {{shift.startTime | isoDate}}\n        {{[shift.startTime, shift.endTime] | isoTimeRange}}\n      </novo-text>\n    </novo-option>\n  </novo-autocomplete>\n</novo-field>\n\n<div>{{chipList.value}}</div>" }]
        }], ctorParameters: () => [] });
const ALL_SHIFTS = [
    {
        id: 101,
        startTime: '2021-02-23T11:00-05:00',
        endTime: '2021-02-23T15:00-05:00',
        numAssigned: 2,
        openings: 5,
    },
    {
        id: 102,
        startTime: '2021-02-24T11:00-05:00',
        endTime: '2021-02-24T15:00-05:00',
        numAssigned: 1,
        openings: 2,
    },
    {
        id: 103,
        startTime: '2021-02-25T11:00-05:00',
        endTime: '2021-02-25T15:00-05:00',
        numAssigned: 0,
        openings: 1,
    },
    {
        id: 104,
        startTime: '2021-02-26T11:00-05:00',
        endTime: '2021-02-26T15:00-05:00',
        numAssigned: 3,
        openings: 3,
    },
    {
        id: 105,
        startTime: '2021-02-27T11:00-05:00',
        endTime: '2021-02-27T15:00-05:00',
        numAssigned: 2,
        openings: 4,
    },
    {
        id: 106,
        startTime: '2021-02-28T11:00-05:00',
        endTime: '2021-02-28T15:00-05:00',
        numAssigned: 22,
        openings: 50,
    },
];

/**
 * @title Autocomplete Usage
 */
class AutocompleteUsageExample {
    constructor() {
        this.myControl = new UntypedFormControl();
        this.options = ['One', 'Two', 'Three'];
    }
    ngOnInit() {
        this.filteredOptions = this.myControl.valueChanges.pipe(startWith(''), map((value) => this._filter(value)));
    }
    _filter(value) {
        const filterValue = value.toLowerCase();
        return this.options.filter((option) => option.toLowerCase().includes(filterValue));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: AutocompleteUsageExample, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: AutocompleteUsageExample, isStandalone: false, selector: "autocomplete-usage-example", ngImport: i0, template: "<form class=\"example-form\">\n  <novo-field class=\"example-full-width\">\n    <novo-label>Number</novo-label>\n    <input type=\"text\"\n      novoInput\n      [formControl]=\"myControl\"\n      placeholder=\"Pick one\"\n      autocomplete=\"off\" />\n    <novo-autocomplete #auto>\n      <novo-option *ngFor=\"let option of filteredOptions | async\" [value]=\"option\">\n        {{option}}\n      </novo-option>\n    </novo-autocomplete>\n  </novo-field>\n</form>", styles: [""], dependencies: [{ kind: "directive", type: i1.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { kind: "directive", type: i1.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i1.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { kind: "directive", type: i1.NgForm, selector: "form:not([ngNoForm]):not([formGroup]),ng-form,[ngForm]", inputs: ["ngFormOptions"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { kind: "directive", type: i1.FormControlDirective, selector: "[formControl]", inputs: ["formControl", "disabled", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { kind: "directive", type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "component", type: i2$1.NovoAutocompleteElement, selector: "novo-autocomplete", inputs: ["tabIndex", "triggerOn", "displayWith", "aria-label", "multiple", "disabled", "makeFirstItemActive"], outputs: ["optionSelected", "optionActivated"], exportAs: ["novoAutocomplete"] }, { kind: "component", type: i2$1.NovoLabel, selector: "novo-label,[novo-label]", inputs: ["id"] }, { kind: "component", type: i2$1.NovoOption, selector: "novo-option", inputs: ["selected", "keepOpen", "novoInert", "value", "disabled"], exportAs: ["novoOption"] }, { kind: "component", type: i2$1.NovoFieldElement, selector: "novo-field", inputs: ["layout", "appearance", "customOverlayOrigin", "width"], outputs: ["valueChanges", "stateChanges"] }, { kind: "directive", type: i2$1.NovoInput, selector: "input[novoInput], textarea[novoInput], select[novoInput]", inputs: ["disabled", "id", "placeholder", "required", "type", "value", "readonly"], outputs: ["onSelect"] }, { kind: "pipe", type: i2.AsyncPipe, name: "async" }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: AutocompleteUsageExample, decorators: [{
            type: Component,
            args: [{ selector: 'autocomplete-usage-example', standalone: false, template: "<form class=\"example-form\">\n  <novo-field class=\"example-full-width\">\n    <novo-label>Number</novo-label>\n    <input type=\"text\"\n      novoInput\n      [formControl]=\"myControl\"\n      placeholder=\"Pick one\"\n      autocomplete=\"off\" />\n    <novo-autocomplete #auto>\n      <novo-option *ngFor=\"let option of filteredOptions | async\" [value]=\"option\">\n        {{option}}\n      </novo-option>\n    </novo-autocomplete>\n  </novo-field>\n</form>" }]
        }] });

/**
 * @title Autocomplete With Chips
 */
class AutocompleteWithChipsExample {
    constructor() {
        this.visible = true;
        this.selectable = true;
        this.removable = true;
        this.separatorKeysCodes = [ENTER, COMMA];
        this.searchCtrl = new UntypedFormControl();
        this.fieldCtrl = new UntypedFormControl(['Lemon']);
        this.allFruits = ['Apple', 'Lemon', 'Lime', 'Orange', 'Strawberry'];
        this.filteredFruits = this.searchCtrl.valueChanges.pipe(startWith(null), map((fruit) => (fruit ? this._filter(fruit) : this.allFruits.slice())));
    }
    add(event) { }
    remove(fruit) { }
    selected(event) { }
    _filter(value) {
        const filterValue = value.toLowerCase();
        return this.allFruits.filter((fruit) => fruit.toLowerCase().indexOf(filterValue) === 0);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: AutocompleteWithChipsExample, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: AutocompleteWithChipsExample, isStandalone: false, selector: "autocomplete-with-chips-example", viewQueries: [{ propertyName: "chipInput", first: true, predicate: ["chipInput"], descendants: true }], ngImport: i0, template: "<novo-field class=\"example-chip-list\">\n  <novo-label>Favorite Fruits</novo-label>\n  <novo-chip-list #chipList aria-label=\"Fruit selection\" [formControl]=\"fieldCtrl\">\n    <novo-chip\n      *ngFor=\"let fruit of chipList.value\"\n      [value]=\"fruit\"\n      (removed)=\"remove(fruit)\">\n      {{fruit}}\n      <novo-icon novoChipRemove>close</novo-icon>\n    </novo-chip>\n    <input\n      #chipInput\n      novoChipInput\n      placeholder=\"New fruit...\"\n      autocomplete=\"off\"\n      [formControl]=\"searchCtrl\"\n      [novoChipInputSeparatorKeyCodes]=\"separatorKeysCodes\"\n      (novoChipInputTokenEnd)=\"add($event)\" />\n  </novo-chip-list>\n  <novo-autocomplete makeFirstItemActive (optionSelected)=\"selected($event)\" multiple>\n    <novo-option *ngFor=\"let fruit of filteredFruits | async\" [value]=\"fruit\">\n      {{fruit}}\n    </novo-option>\n  </novo-autocomplete>\n</novo-field>\n\n<div>Chip List Value: {{fieldCtrl.value}}</div>\n<div>Search Input Control Value: {{searchCtrl.value}}</div>", styles: [""], dependencies: [{ kind: "directive", type: i1.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i1.FormControlDirective, selector: "[formControl]", inputs: ["formControl", "disabled", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { kind: "directive", type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "component", type: i2$1.NovoAutocompleteElement, selector: "novo-autocomplete", inputs: ["tabIndex", "triggerOn", "displayWith", "aria-label", "multiple", "disabled", "makeFirstItemActive"], outputs: ["optionSelected", "optionActivated"], exportAs: ["novoAutocomplete"] }, { kind: "component", type: i2$1.NovoChipElement, selector: "novo-chip, [novo-chip]", inputs: ["color", "tabIndex", "size", "type", "selected", "value", "selectable", "disabled", "removable"], outputs: ["selectionChange", "destroyed", "removed"] }, { kind: "directive", type: i2$1.NovoChipRemove, selector: "[novoChipRemove]" }, { kind: "directive", type: i2$1.NovoChipInput, selector: "input[novoChipInput]", inputs: ["novoChipInputAddOnBlur", "novoChipInputSeparatorKeyCodes", "placeholder", "id", "disabled"], outputs: ["novoChipInputTokenEnd"], exportAs: ["novoChipInput", "novoChipInputFor"] }, { kind: "component", type: i2$1.NovoChipList, selector: "novo-chip-list", inputs: ["errorStateMatcher", "multiple", "chipsToggleable", "stacked", "compareWith", "value", "required", "placeholder", "disabled", "aria-orientation", "selectable", "tabIndex"], outputs: ["change", "valueChange"], exportAs: ["novoChipList"] }, { kind: "component", type: i2$1.NovoIconComponent, selector: "novo-icon", inputs: ["raised", "theme", "shape", "color", "size", "smaller", "larger", "alt", "name"] }, { kind: "component", type: i2$1.NovoLabel, selector: "novo-label,[novo-label]", inputs: ["id"] }, { kind: "component", type: i2$1.NovoOption, selector: "novo-option", inputs: ["selected", "keepOpen", "novoInert", "value", "disabled"], exportAs: ["novoOption"] }, { kind: "component", type: i2$1.NovoFieldElement, selector: "novo-field", inputs: ["layout", "appearance", "customOverlayOrigin", "width"], outputs: ["valueChanges", "stateChanges"] }, { kind: "pipe", type: i2.AsyncPipe, name: "async" }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: AutocompleteWithChipsExample, decorators: [{
            type: Component,
            args: [{ selector: 'autocomplete-with-chips-example', standalone: false, template: "<novo-field class=\"example-chip-list\">\n  <novo-label>Favorite Fruits</novo-label>\n  <novo-chip-list #chipList aria-label=\"Fruit selection\" [formControl]=\"fieldCtrl\">\n    <novo-chip\n      *ngFor=\"let fruit of chipList.value\"\n      [value]=\"fruit\"\n      (removed)=\"remove(fruit)\">\n      {{fruit}}\n      <novo-icon novoChipRemove>close</novo-icon>\n    </novo-chip>\n    <input\n      #chipInput\n      novoChipInput\n      placeholder=\"New fruit...\"\n      autocomplete=\"off\"\n      [formControl]=\"searchCtrl\"\n      [novoChipInputSeparatorKeyCodes]=\"separatorKeysCodes\"\n      (novoChipInputTokenEnd)=\"add($event)\" />\n  </novo-chip-list>\n  <novo-autocomplete makeFirstItemActive (optionSelected)=\"selected($event)\" multiple>\n    <novo-option *ngFor=\"let fruit of filteredFruits | async\" [value]=\"fruit\">\n      {{fruit}}\n    </novo-option>\n  </novo-autocomplete>\n</novo-field>\n\n<div>Chip List Value: {{fieldCtrl.value}}</div>\n<div>Search Input Control Value: {{searchCtrl.value}}</div>" }]
        }], ctorParameters: () => [], propDecorators: { chipInput: [{
                type: ViewChild,
                args: ['chipInput']
            }] } });

/**
 * @title Avatar Stack Usage
 */
class AvatarStackUsageExample {
    constructor() {
        this.profiles = [
            {
                title: 'Central Bank',
                name: 'Central Bank',
                email: 'new-bank-inquiries@centralbank.com',
                phone: '(651) 555-1234',
                address: { city: 'Washington', state: 'DC' },
                searchEntity: 'ClientCorporation',
                type: 'company',
            },
            {
                title: 'Federal Bank',
                name: 'Federal Bank',
                email: 'info@federalbank.com',
                phone: '(545) 555-1212',
                address: { city: 'Arlington', state: 'VA' },
                searchEntity: 'ClientCorporation',
                type: 'company',
            },
            {
                title: 'Aaron Burr',
                firstName: 'Aaron',
                lastName: 'Burr',
                name: 'Aaron Burr',
                companyName: 'Central Bank',
                email: 'aburr@centralbank.com',
                phone: '(333) 555-3434',
                address: { city: 'Washington', state: 'DC' },
                status: 'Hold',
                searchEntity: 'ClientContact',
                type: 'person',
            },
            {
                title: 'Alexander Hamilton',
                firstName: 'Alexander',
                lastName: 'Hamilton',
                name: 'Alexander Hamilton',
                companyName: 'Federal Bank',
                email: 'ahamilton@federalbank.com',
                phone: '(333) 555-2222',
                address: { city: 'Arlington', state: 'VA' },
                status: 'Active',
                searchEntity: 'ClientContact',
                type: 'person',
            },
            {
                title: 'Ben Franklin',
                firstName: 'Ben',
                lastName: 'Franklin',
                name: 'Ben Franklin',
                email: 'bfranklin@gmail.com',
                phone: '(654) 525-2222',
                address: { city: 'Boston', state: 'MA' },
                status: 'Interviewing',
                searchEntity: 'Candidate',
                type: 'candidate',
            },
            {
                title: 'Thomas Jefferson',
                firstName: 'Thomas',
                lastName: 'Jefferson',
                name: 'Thomas Jefferson',
                email: 'tjefferson@usa.com',
                phone: '(123) 542-1234',
                address: { city: 'Arlington', state: 'VA' },
                status: 'New Lead',
                searchEntity: 'Candidate',
                type: 'candidate',
            },
        ];
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: AvatarStackUsageExample, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: AvatarStackUsageExample, isStandalone: false, selector: "avatar-stack-usage-example", ngImport: i0, template: "<novo-avatar-stack>\n  <novo-avatar *ngFor=\"let profile of profiles\" [source]=\"profile\"></novo-avatar>\n</novo-avatar-stack>", styles: [""], dependencies: [{ kind: "directive", type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "component", type: i2$1.NovoAvatarElement, selector: "novo-avatar", inputs: ["source", "label", "theme", "image", "size", "shape", "color"] }, { kind: "component", type: i2$1.NovoAvatarStackElement, selector: "novo-avatar-stack", inputs: ["total"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: AvatarStackUsageExample, decorators: [{
            type: Component,
            args: [{ selector: 'avatar-stack-usage-example', standalone: false, template: "<novo-avatar-stack>\n  <novo-avatar *ngFor=\"let profile of profiles\" [source]=\"profile\"></novo-avatar>\n</novo-avatar-stack>" }]
        }] });

/**
 * @title Avatar Usage
 */
class AvatarUsageExample {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: AvatarUsageExample, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: AvatarUsageExample, isStandalone: false, selector: "avatar-usage-example", ngImport: i0, template: "<novo-avatar [source]=\"{name: 'Brian Kimball'}\" [menu]=\"menu\"></novo-avatar>\n<novo-avatar image=\"https://robohash.org/jgodi\" color=\"bittersweet\"></novo-avatar>\n<novo-avatar image=\"https://www.bullhorn.com/wp-content/uploads/2021/08/bullhorn_bull.svg\" shape=\"square\"></novo-avatar>\n\n\n<!-- Menu Template -->\n<novo-menu #menu>\n  <novo-option *menuItem>\n    <novo-icon>person-circle</novo-icon>\n    <novo-text>My Profile</novo-text>\n  </novo-option>\n  <novo-option *menuItem>\n    <novo-icon>rate</novo-icon>\n    <novo-text>Billing</novo-text>\n  </novo-option>\n  <novo-option *menuItem>\n    <novo-icon>bell</novo-icon>\n    <novo-text>Notifications</novo-text>\n  </novo-option>\n  <novo-divider *menuItem></novo-divider>\n  <novo-option *menuItem>\n    <novo-icon>configure</novo-icon>\n    <novo-text>My Settings</novo-text>\n  </novo-option>\n  <novo-option *menuItem>\n    <novo-icon>company</novo-icon>\n    <novo-text>Org Settings</novo-text>\n  </novo-option>\n  <novo-divider *menuItem></novo-divider>\n  <novo-option *menuItem>\n    <novo-icon>logout</novo-icon>\n    <novo-text>Log out</novo-text>\n  </novo-option>\n</novo-menu>", styles: [":host{display:flex;gap:1rem}\n"], dependencies: [{ kind: "component", type: i2$1.NovoAvatarElement, selector: "novo-avatar", inputs: ["source", "label", "theme", "image", "size", "shape", "color"] }, { kind: "component", type: i2$1.NovoDividerComponent, selector: "novo-divider", inputs: ["vertical", "inset"] }, { kind: "component", type: i2$1.NovoIconComponent, selector: "novo-icon", inputs: ["raised", "theme", "shape", "color", "size", "smaller", "larger", "alt", "name"] }, { kind: "component", type: i2$1.NovoText, selector: "novo-text,[novo-text]", inputs: ["block"] }, { kind: "component", type: i2$1.NovoOption, selector: "novo-option", inputs: ["selected", "keepOpen", "novoInert", "value", "disabled"], exportAs: ["novoOption"] }, { kind: "directive", type: i2$1.MenuDirective, selector: "[menu]", inputs: ["menuContext", "menu", "menuContent", "waitWhenOpen", "capture", "anchor", "trigger"] }, { kind: "component", type: i2$1.MenuComponent, selector: "novo-menu", inputs: ["menuClass", "autoFocus", "disabled"], outputs: ["close", "open"] }, { kind: "directive", type: i2$1.MenuItemDirective, selector: "[menuItem]", inputs: ["menuItemEnabled", "menuItemVisible"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: AvatarUsageExample, decorators: [{
            type: Component,
            args: [{ selector: 'avatar-usage-example', standalone: false, template: "<novo-avatar [source]=\"{name: 'Brian Kimball'}\" [menu]=\"menu\"></novo-avatar>\n<novo-avatar image=\"https://robohash.org/jgodi\" color=\"bittersweet\"></novo-avatar>\n<novo-avatar image=\"https://www.bullhorn.com/wp-content/uploads/2021/08/bullhorn_bull.svg\" shape=\"square\"></novo-avatar>\n\n\n<!-- Menu Template -->\n<novo-menu #menu>\n  <novo-option *menuItem>\n    <novo-icon>person-circle</novo-icon>\n    <novo-text>My Profile</novo-text>\n  </novo-option>\n  <novo-option *menuItem>\n    <novo-icon>rate</novo-icon>\n    <novo-text>Billing</novo-text>\n  </novo-option>\n  <novo-option *menuItem>\n    <novo-icon>bell</novo-icon>\n    <novo-text>Notifications</novo-text>\n  </novo-option>\n  <novo-divider *menuItem></novo-divider>\n  <novo-option *menuItem>\n    <novo-icon>configure</novo-icon>\n    <novo-text>My Settings</novo-text>\n  </novo-option>\n  <novo-option *menuItem>\n    <novo-icon>company</novo-icon>\n    <novo-text>Org Settings</novo-text>\n  </novo-option>\n  <novo-divider *menuItem></novo-divider>\n  <novo-option *menuItem>\n    <novo-icon>logout</novo-icon>\n    <novo-text>Log out</novo-text>\n  </novo-option>\n</novo-menu>", styles: [":host{display:flex;gap:1rem}\n"] }]
        }] });

/**
 * @title Breadcrumb Usage Example
 */
class BreadcrumbUsageExample {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: BreadcrumbUsageExample, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: BreadcrumbUsageExample, isStandalone: false, selector: "breadcrumb-usage-example", ngImport: i0, template: "<section>\n  <novo-breadcrumb>\n    <novo-breadcrumb-item>\n      <a routerLink=\"/components/get-start\">Home</a>\n    </novo-breadcrumb-item>\n    <novo-breadcrumb-item>\n      <span>Components</span>\n    </novo-breadcrumb-item>\n  </novo-breadcrumb>\n</section>", styles: [""], dependencies: [{ kind: "component", type: i2$1.BreadcrumbElement, selector: "novo-breadcrumb", inputs: ["separatorIcon", "source"] }, { kind: "component", type: i2$1.BreadcrumbItemElement, selector: "novo-breadcrumb-item", inputs: ["showMenu", "customMenuTemplate", "menuList", "isSearch"], outputs: ["toggleEvent"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: BreadcrumbUsageExample, decorators: [{
            type: Component,
            args: [{ selector: 'breadcrumb-usage-example', standalone: false, template: "<section>\n  <novo-breadcrumb>\n    <novo-breadcrumb-item>\n      <a routerLink=\"/components/get-start\">Home</a>\n    </novo-breadcrumb-item>\n    <novo-breadcrumb-item>\n      <span>Components</span>\n    </novo-breadcrumb-item>\n  </novo-breadcrumb>\n</section>" }]
        }] });

/**
 * @title Dialogue buttons
 */
class ButtonDialogueExample {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: ButtonDialogueExample, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: ButtonDialogueExample, isStandalone: false, selector: "button-dialogue-example", ngImport: i0, template: "<section>\n  <div class=\"example-label\">Default</div>\n  <div class=\"example-button-row\">\n    <button theme=\"dialogue\" icon=\"addcard\">Add Card</button>\n    <button theme=\"dialogue\" icon=\"check\" color=\"success\">Dialogue</button>\n    <button theme=\"dialogue\" disabled>Dialogue</button>\n  </div>\n</section>\n\n<novo-divider></novo-divider>\n\n<section>\n  <div class=\"example-label\">Small</div>\n  <div class=\"example-button-row\">\n    <button theme=\"dialogue\" icon=\"addcard\" size=\"small\">Add Card</button>\n    <button theme=\"dialogue\" icon=\"check\" color=\"success\" size=\"small\">Dialogue</button>\n    <button theme=\"dialogue\" size=\"small\" disabled>Dialogue</button>\n  </div>\n</section>\n\n<novo-divider></novo-divider>\n\n<section>\n  <div class=\"example-label\">Large</div>\n  <div class=\"example-button-row\">\n    <button theme=\"dialogue\" icon=\"addcard\" size=\"large\">Add Card</button>\n    <button theme=\"dialogue\" icon=\"check\" color=\"success\" size=\"large\">Dialogue</button>\n    <button theme=\"dialogue\" size=\"large\" disabled>Dialogue</button>\n  </div>\n</section>\n\n<novo-divider></novo-divider>\n\n<section class=\"bgc-ocean\">\n  <div class=\"example-label tc-white\">Inverse</div>\n  <div class=\"example-button-row\">\n    <button theme=\"dialogue\" icon=\"list-o\" side=\"left\" color=\"white\" inverse>Add/Remove</button>\n    <button theme=\"dialogue\" icon=\"addcard\" color=\"white\" inverse>Add Card</button>\n    <button theme=\"dialogue\" icon=\"check\" color=\"success\" inverse>Dialogue</button>\n    <button theme=\"dialogue\" color=\"white\" inverse disabled>Dialogue</button>\n  </div>\n</section>", styles: ["section{display:table}.example-label{display:table-cell;font-size:14px;margin-left:8px;min-width:120px;padding-left:8px}.example-button-row{display:table-cell;width:490px}.example-button-row .novo-button{margin:8px 8px 8px 0}.example-flex-container{display:flex;justify-content:space-between;flex-wrap:wrap}.example-button-container{display:flex;justify-content:center;width:120px}\n"], dependencies: [{ kind: "component", type: i2$1.NovoButtonElement, selector: "novo-button,button[theme]", inputs: ["color", "side", "size", "theme", "loading", "icon", "secondIcon", "disabled"] }, { kind: "component", type: i2$1.NovoDividerComponent, selector: "novo-divider", inputs: ["vertical", "inset"] }, { kind: "directive", type: i2$1.ThemeColorDirective, selector: "[theme]", inputs: ["theme"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: ButtonDialogueExample, decorators: [{
            type: Component,
            args: [{ selector: 'button-dialogue-example', standalone: false, template: "<section>\n  <div class=\"example-label\">Default</div>\n  <div class=\"example-button-row\">\n    <button theme=\"dialogue\" icon=\"addcard\">Add Card</button>\n    <button theme=\"dialogue\" icon=\"check\" color=\"success\">Dialogue</button>\n    <button theme=\"dialogue\" disabled>Dialogue</button>\n  </div>\n</section>\n\n<novo-divider></novo-divider>\n\n<section>\n  <div class=\"example-label\">Small</div>\n  <div class=\"example-button-row\">\n    <button theme=\"dialogue\" icon=\"addcard\" size=\"small\">Add Card</button>\n    <button theme=\"dialogue\" icon=\"check\" color=\"success\" size=\"small\">Dialogue</button>\n    <button theme=\"dialogue\" size=\"small\" disabled>Dialogue</button>\n  </div>\n</section>\n\n<novo-divider></novo-divider>\n\n<section>\n  <div class=\"example-label\">Large</div>\n  <div class=\"example-button-row\">\n    <button theme=\"dialogue\" icon=\"addcard\" size=\"large\">Add Card</button>\n    <button theme=\"dialogue\" icon=\"check\" color=\"success\" size=\"large\">Dialogue</button>\n    <button theme=\"dialogue\" size=\"large\" disabled>Dialogue</button>\n  </div>\n</section>\n\n<novo-divider></novo-divider>\n\n<section class=\"bgc-ocean\">\n  <div class=\"example-label tc-white\">Inverse</div>\n  <div class=\"example-button-row\">\n    <button theme=\"dialogue\" icon=\"list-o\" side=\"left\" color=\"white\" inverse>Add/Remove</button>\n    <button theme=\"dialogue\" icon=\"addcard\" color=\"white\" inverse>Add Card</button>\n    <button theme=\"dialogue\" icon=\"check\" color=\"success\" inverse>Dialogue</button>\n    <button theme=\"dialogue\" color=\"white\" inverse disabled>Dialogue</button>\n  </div>\n</section>", styles: ["section{display:table}.example-label{display:table-cell;font-size:14px;margin-left:8px;min-width:120px;padding-left:8px}.example-button-row{display:table-cell;width:490px}.example-button-row .novo-button{margin:8px 8px 8px 0}.example-flex-container{display:flex;justify-content:space-between;flex-wrap:wrap}.example-button-container{display:flex;justify-content:center;width:120px}\n"] }]
        }] });

/**
 * @title Dynamic buttons
 */
class ButtonDynamicExample {
    constructor() {
        this.theme = 'primary';
        this.isChecked = false;
        this.negativeColor = 'negative';
        this.color = 'blue';
    }
    changeTheme() {
        const i = Math.floor(Math.random() * 4);
        this.theme = ['primary', 'secondary', 'dialogue', 'standard', 'icon'][i];
        console.log('changed theme to', this.theme);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: ButtonDynamicExample, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: ButtonDynamicExample, isStandalone: false, selector: "button-dynamic-example", ngImport: i0, template: "<novo-checkbox label=\"Disabled?\" [(ngModel)]=\"isChecked\"></novo-checkbox>\n<button [theme]=\"theme\" [icon]=\"isChecked ? 'check' : 'times'\" (click)=\"changeTheme()\" [disabled]=\"isChecked\">Change\n  Theme</button>", styles: [""], dependencies: [{ kind: "directive", type: i1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i1.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "component", type: i2$1.NovoButtonElement, selector: "novo-button,button[theme]", inputs: ["color", "side", "size", "theme", "loading", "icon", "secondIcon", "disabled"] }, { kind: "component", type: i2$1.NovoCheckboxElement, selector: "novo-checkbox", inputs: ["aria-label", "aria-labelledby", "aria-describedby", "id", "name", "label", "disabled", "layoutOptions", "color", "value", "tabIndex", "required", "checked", "indeterminate"], outputs: ["change", "indeterminateChange", "onSelect"] }, { kind: "directive", type: i2$1.ThemeColorDirective, selector: "[theme]", inputs: ["theme"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: ButtonDynamicExample, decorators: [{
            type: Component,
            args: [{ selector: 'button-dynamic-example', standalone: false, template: "<novo-checkbox label=\"Disabled?\" [(ngModel)]=\"isChecked\"></novo-checkbox>\n<button [theme]=\"theme\" [icon]=\"isChecked ? 'check' : 'times'\" (click)=\"changeTheme()\" [disabled]=\"isChecked\">Change\n  Theme</button>" }]
        }] });

/**
 * @title Basic buttons
 */
class ButtonFabExample {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: ButtonFabExample, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: ButtonFabExample, isStandalone: false, selector: "button-fab-example", ngImport: i0, template: "<button theme=\"fab\" color=\"success\" icon=\"check\"></button>\n<button theme=\"fab\" color=\"warning\" icon=\"caution-o\"></button>\n<button theme=\"fab\" color=\"pulse\" icon=\"next\"></button>\n<button theme=\"fab\" color=\"grapefruit\" icon=\"print\" inverse></button>\n<button theme=\"fab\" icon=\"neutral\" inverse disabled></button>\n", styles: [""], dependencies: [{ kind: "component", type: i2$1.NovoButtonElement, selector: "novo-button,button[theme]", inputs: ["color", "side", "size", "theme", "loading", "icon", "secondIcon", "disabled"] }, { kind: "directive", type: i2$1.ThemeColorDirective, selector: "[theme]", inputs: ["theme"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: ButtonFabExample, decorators: [{
            type: Component,
            args: [{ selector: 'button-fab-example', standalone: false, template: "<button theme=\"fab\" color=\"success\" icon=\"check\"></button>\n<button theme=\"fab\" color=\"warning\" icon=\"caution-o\"></button>\n<button theme=\"fab\" color=\"pulse\" icon=\"next\"></button>\n<button theme=\"fab\" color=\"grapefruit\" icon=\"print\" inverse></button>\n<button theme=\"fab\" icon=\"neutral\" inverse disabled></button>\n" }]
        }] });

/**
 * @title Icon buttons
 */
class ButtonIconExample {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: ButtonIconExample, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: ButtonIconExample, isStandalone: false, selector: "button-icon-example", ngImport: i0, template: "<button theme=\"icon\" icon=\"print\"></button>\n<button theme=\"icon\" icon=\"print\"></button>\n", styles: [""], dependencies: [{ kind: "component", type: i2$1.NovoButtonElement, selector: "novo-button,button[theme]", inputs: ["color", "side", "size", "theme", "loading", "icon", "secondIcon", "disabled"] }, { kind: "directive", type: i2$1.ThemeColorDirective, selector: "[theme]", inputs: ["theme"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: ButtonIconExample, decorators: [{
            type: Component,
            args: [{ selector: 'button-icon-example', standalone: false, template: "<button theme=\"icon\" icon=\"print\"></button>\n<button theme=\"icon\" icon=\"print\"></button>\n" }]
        }] });

/**
 * @title Invers buttons
 */
class ButtonInverseExample {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: ButtonInverseExample, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: ButtonInverseExample, isStandalone: false, selector: "button-inverse-example", ngImport: i0, template: "<div class=\"background candidate\">\n  <button theme=\"secondary\" icon=\"collapse\" inverse>Actions</button>\n  <button theme=\"secondary\" icon=\"convert\" inverse>Convert</button>\n  <button theme=\"secondary\" icon=\"convert\" inverse disabled>Convert</button>\n</div>\n", styles: [""], dependencies: [{ kind: "component", type: i2$1.NovoButtonElement, selector: "novo-button,button[theme]", inputs: ["color", "side", "size", "theme", "loading", "icon", "secondIcon", "disabled"] }, { kind: "directive", type: i2$1.ThemeColorDirective, selector: "[theme]", inputs: ["theme"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: ButtonInverseExample, decorators: [{
            type: Component,
            args: [{ selector: 'button-inverse-example', standalone: false, template: "<div class=\"background candidate\">\n  <button theme=\"secondary\" icon=\"collapse\" inverse>Actions</button>\n  <button theme=\"secondary\" icon=\"convert\" inverse>Convert</button>\n  <button theme=\"secondary\" icon=\"convert\" inverse disabled>Convert</button>\n</div>\n" }]
        }] });

/**
 * @title Loading buttons
 */
class ButtonLoadingExample {
    constructor() {
        this.loading = false;
        this.loadingButtonText = 'Delete';
    }
    fakeRequest() {
        console.log('making fake request');
        this.loading = true;
        this.loadingButtonText = this.loading ? 'Removing... ' : 'Delete';
        setTimeout(() => {
            this.loading = false;
            this.loadingButtonText = this.loading ? 'Removing... ' : 'Delete';
        }, 5000);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: ButtonLoadingExample, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: ButtonLoadingExample, isStandalone: false, selector: "button-loading-example", ngImport: i0, template: "<button theme=\"primary\" icon=\"times\" [loading]=\"loading\" (click)=\"fakeRequest()\">{{loadingButtonText}}</button>\n", styles: [""], dependencies: [{ kind: "component", type: i2$1.NovoButtonElement, selector: "novo-button,button[theme]", inputs: ["color", "side", "size", "theme", "loading", "icon", "secondIcon", "disabled"] }, { kind: "directive", type: i2$1.ThemeColorDirective, selector: "[theme]", inputs: ["theme"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: ButtonLoadingExample, decorators: [{
            type: Component,
            args: [{ selector: 'button-loading-example', standalone: false, template: "<button theme=\"primary\" icon=\"times\" [loading]=\"loading\" (click)=\"fakeRequest()\">{{loadingButtonText}}</button>\n" }]
        }] });

/**
 * @title Basic buttons
 */
class ButtonOverviewExample {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: ButtonOverviewExample, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: ButtonOverviewExample, isStandalone: false, selector: "button-overview-example", ngImport: i0, template: "<!-- <button theme=\"primary\" icon=\"next\">Primary</button>\n<button theme=\"secondary\">Secondary</button>\n<button theme=\"standard\" color=\"success\" icon=\"check\">Standard</button>\n<button theme=\"dialogue\" color=\"pulse\" icon=\"send\">Dialogue</button>\n<button theme=\"icon\" color=\"warning\" icon=\"caution-o\"></button> -->\n\n\n<section>\n  <div class=\"example-label\">Basic</div>\n  <div class=\"example-button-row\">\n    <button theme=\"dialogue\">Default</button>\n    <button theme=\"dialogue\" color=\"success\">Success</button>\n    <button theme=\"dialogue\" color=\"negative\">Error</button>\n    <button theme=\"dialogue\" color=\"warning\">Warning</button>\n    <button theme=\"dialogue\" disabled>Disabled</button>\n  </div>\n</section>\n\n<novo-divider></novo-divider>\n\n<section>\n  <div class=\"example-label\">Primary</div>\n  <div class=\"example-button-row\">\n    <button theme=\"primary\">Default</button>\n    <button theme=\"primary\" color=\"success\">Success</button>\n    <button theme=\"primary\" color=\"negative\">Error</button>\n    <button theme=\"primary\" color=\"warning\">Warning</button>\n    <button theme=\"primary\" disabled>Disabled</button>\n  </div>\n</section>\n\n<novo-divider></novo-divider>\n\n<section>\n  <div class=\"example-label\">Secondary</div>\n  <div class=\"example-button-row\">\n    <button theme=\"secondary\">Default</button>\n    <button theme=\"secondary\" color=\"success\">Success</button>\n    <button theme=\"secondary\" color=\"negative\">Error</button>\n    <button theme=\"secondary\" color=\"warning\">Warning</button>\n    <button theme=\"secondary\" disabled>Disabled</button>\n  </div>\n</section>\n\n<novo-divider></novo-divider>\n\n<section>\n  <div class=\"example-label\">Icon</div>\n  <div class=\"example-button-row\">\n    <button theme=\"icon\" icon=\"print\"></button>\n    <button theme=\"icon\" icon=\"check\" color=\"success\"></button>\n    <button theme=\"icon\" icon=\"bell\" color=\"negative\"></button>\n    <button theme=\"icon\" icon=\"caution\" color=\"warning\"></button>\n    <button theme=\"icon\" icon=\"rocket\" disabled></button>\n  </div>\n</section>\n\n<novo-divider></novo-divider>\n\n<section>\n  <div class=\"example-label\">Fab</div>\n  <div class=\"example-button-row\">\n    <button theme=\"fab\">\n      <novo-icon>print</novo-icon>\n    </button>\n    <button theme=\"fab\" color=\"success\">\n      <novo-icon>check</novo-icon>\n    </button>\n    <button theme=\"fab\" icon=\"bell\" color=\"negative\"></button>\n    <button theme=\"fab\" icon=\"caution-o\" color=\"warning\"></button>\n    <button theme=\"fab\" icon=\"rocket\" disabled></button>\n  </div>\n</section>", styles: ["section{display:table}.example-label{display:table-cell;font-size:14px;margin-left:8px;min-width:120px;padding-left:8px}.example-button-row{display:table-cell;width:490px}.example-button-row .novo-button{margin:8px 8px 8px 0}.example-flex-container{display:flex;justify-content:space-between;flex-wrap:wrap}.example-button-container{display:flex;justify-content:center;width:120px}\n"], dependencies: [{ kind: "component", type: i2$1.NovoButtonElement, selector: "novo-button,button[theme]", inputs: ["color", "side", "size", "theme", "loading", "icon", "secondIcon", "disabled"] }, { kind: "component", type: i2$1.NovoDividerComponent, selector: "novo-divider", inputs: ["vertical", "inset"] }, { kind: "component", type: i2$1.NovoIconComponent, selector: "novo-icon", inputs: ["raised", "theme", "shape", "color", "size", "smaller", "larger", "alt", "name"] }, { kind: "directive", type: i2$1.ThemeColorDirective, selector: "[theme]", inputs: ["theme"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: ButtonOverviewExample, decorators: [{
            type: Component,
            args: [{ selector: 'button-overview-example', standalone: false, template: "<!-- <button theme=\"primary\" icon=\"next\">Primary</button>\n<button theme=\"secondary\">Secondary</button>\n<button theme=\"standard\" color=\"success\" icon=\"check\">Standard</button>\n<button theme=\"dialogue\" color=\"pulse\" icon=\"send\">Dialogue</button>\n<button theme=\"icon\" color=\"warning\" icon=\"caution-o\"></button> -->\n\n\n<section>\n  <div class=\"example-label\">Basic</div>\n  <div class=\"example-button-row\">\n    <button theme=\"dialogue\">Default</button>\n    <button theme=\"dialogue\" color=\"success\">Success</button>\n    <button theme=\"dialogue\" color=\"negative\">Error</button>\n    <button theme=\"dialogue\" color=\"warning\">Warning</button>\n    <button theme=\"dialogue\" disabled>Disabled</button>\n  </div>\n</section>\n\n<novo-divider></novo-divider>\n\n<section>\n  <div class=\"example-label\">Primary</div>\n  <div class=\"example-button-row\">\n    <button theme=\"primary\">Default</button>\n    <button theme=\"primary\" color=\"success\">Success</button>\n    <button theme=\"primary\" color=\"negative\">Error</button>\n    <button theme=\"primary\" color=\"warning\">Warning</button>\n    <button theme=\"primary\" disabled>Disabled</button>\n  </div>\n</section>\n\n<novo-divider></novo-divider>\n\n<section>\n  <div class=\"example-label\">Secondary</div>\n  <div class=\"example-button-row\">\n    <button theme=\"secondary\">Default</button>\n    <button theme=\"secondary\" color=\"success\">Success</button>\n    <button theme=\"secondary\" color=\"negative\">Error</button>\n    <button theme=\"secondary\" color=\"warning\">Warning</button>\n    <button theme=\"secondary\" disabled>Disabled</button>\n  </div>\n</section>\n\n<novo-divider></novo-divider>\n\n<section>\n  <div class=\"example-label\">Icon</div>\n  <div class=\"example-button-row\">\n    <button theme=\"icon\" icon=\"print\"></button>\n    <button theme=\"icon\" icon=\"check\" color=\"success\"></button>\n    <button theme=\"icon\" icon=\"bell\" color=\"negative\"></button>\n    <button theme=\"icon\" icon=\"caution\" color=\"warning\"></button>\n    <button theme=\"icon\" icon=\"rocket\" disabled></button>\n  </div>\n</section>\n\n<novo-divider></novo-divider>\n\n<section>\n  <div class=\"example-label\">Fab</div>\n  <div class=\"example-button-row\">\n    <button theme=\"fab\">\n      <novo-icon>print</novo-icon>\n    </button>\n    <button theme=\"fab\" color=\"success\">\n      <novo-icon>check</novo-icon>\n    </button>\n    <button theme=\"fab\" icon=\"bell\" color=\"negative\"></button>\n    <button theme=\"fab\" icon=\"caution-o\" color=\"warning\"></button>\n    <button theme=\"fab\" icon=\"rocket\" disabled></button>\n  </div>\n</section>", styles: ["section{display:table}.example-label{display:table-cell;font-size:14px;margin-left:8px;min-width:120px;padding-left:8px}.example-button-row{display:table-cell;width:490px}.example-button-row .novo-button{margin:8px 8px 8px 0}.example-flex-container{display:flex;justify-content:space-between;flex-wrap:wrap}.example-button-container{display:flex;justify-content:center;width:120px}\n"] }]
        }] });

/**
 * @title Primary buttons
 */
class ButtonPrimaryExample {
    constructor() {
        this.negativeColor = 'negative';
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: ButtonPrimaryExample, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: ButtonPrimaryExample, isStandalone: false, selector: "button-primary-example", ngImport: i0, template: "<section>\n  <div class=\"example-label\">Default</div>\n  <div class=\"example-button-row\">\n    <button theme=\"primary\" icon=\"next\">Next</button>\n    <button theme=\"primary\" [color]=\"negativeColor\" icon=\"times\">Cancel</button>\n    <button theme=\"primary\" color=\"success\" icon=\"check\">Save</button>\n    <button theme=\"primary\" color=\"warning\" icon=\"caution-o\">Caution</button>\n    <button theme=\"primary\" color=\"pulse\" icon=\"send\" disabled>Submit</button>\n  </div>\n</section>\n\n<novo-divider></novo-divider>\n\n<section>\n  <div class=\"example-label\">Small</div>\n  <div class=\"example-button-row\">\n    <button theme=\"primary\" icon=\"next\" size=\"small\">Next</button>\n    <button theme=\"primary\" [color]=\"negativeColor\" icon=\"x\" size=\"small\">Cancel</button>\n    <button theme=\"primary\" color=\"success\" icon=\"check\" size=\"small\">Save</button>\n    <button theme=\"primary\" color=\"warning\" icon=\"caution-o\" size=\"small\">Caution</button>\n    <button theme=\"primary\" color=\"pulse\" icon=\"send\" size=\"small\" disabled>Submit</button>\n  </div>\n</section>\n\n<novo-divider></novo-divider>\n\n<section>\n  <div class=\"example-label\">Large</div>\n  <div class=\"example-button-row\">\n    <button theme=\"primary\" icon=\"next\" size=\"large\">Next</button>\n    <button theme=\"primary\" [color]=\"negativeColor\" icon=\"times\" size=\"large\">Cancel</button>\n    <button theme=\"primary\" color=\"success\" icon=\"check\" size=\"large\">Save</button>\n    <button theme=\"primary\" color=\"warning\" icon=\"caution-o\" size=\"large\">Caution</button>\n    <button theme=\"primary\" color=\"pulse\" icon=\"send\" size=\"large\" disabled>Submit</button>\n  </div>\n</section>", styles: ["section{display:table}.example-label{display:table-cell;font-size:14px;margin-left:8px;min-width:120px;padding-left:8px}.example-button-row{display:table-cell;width:490px}.example-button-row .novo-button{margin:8px 8px 8px 0}.example-flex-container{display:flex;justify-content:space-between;flex-wrap:wrap}.example-button-container{display:flex;justify-content:center;width:120px}\n"], dependencies: [{ kind: "component", type: i2$1.NovoButtonElement, selector: "novo-button,button[theme]", inputs: ["color", "side", "size", "theme", "loading", "icon", "secondIcon", "disabled"] }, { kind: "component", type: i2$1.NovoDividerComponent, selector: "novo-divider", inputs: ["vertical", "inset"] }, { kind: "directive", type: i2$1.ThemeColorDirective, selector: "[theme]", inputs: ["theme"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: ButtonPrimaryExample, decorators: [{
            type: Component,
            args: [{ selector: 'button-primary-example', standalone: false, template: "<section>\n  <div class=\"example-label\">Default</div>\n  <div class=\"example-button-row\">\n    <button theme=\"primary\" icon=\"next\">Next</button>\n    <button theme=\"primary\" [color]=\"negativeColor\" icon=\"times\">Cancel</button>\n    <button theme=\"primary\" color=\"success\" icon=\"check\">Save</button>\n    <button theme=\"primary\" color=\"warning\" icon=\"caution-o\">Caution</button>\n    <button theme=\"primary\" color=\"pulse\" icon=\"send\" disabled>Submit</button>\n  </div>\n</section>\n\n<novo-divider></novo-divider>\n\n<section>\n  <div class=\"example-label\">Small</div>\n  <div class=\"example-button-row\">\n    <button theme=\"primary\" icon=\"next\" size=\"small\">Next</button>\n    <button theme=\"primary\" [color]=\"negativeColor\" icon=\"x\" size=\"small\">Cancel</button>\n    <button theme=\"primary\" color=\"success\" icon=\"check\" size=\"small\">Save</button>\n    <button theme=\"primary\" color=\"warning\" icon=\"caution-o\" size=\"small\">Caution</button>\n    <button theme=\"primary\" color=\"pulse\" icon=\"send\" size=\"small\" disabled>Submit</button>\n  </div>\n</section>\n\n<novo-divider></novo-divider>\n\n<section>\n  <div class=\"example-label\">Large</div>\n  <div class=\"example-button-row\">\n    <button theme=\"primary\" icon=\"next\" size=\"large\">Next</button>\n    <button theme=\"primary\" [color]=\"negativeColor\" icon=\"times\" size=\"large\">Cancel</button>\n    <button theme=\"primary\" color=\"success\" icon=\"check\" size=\"large\">Save</button>\n    <button theme=\"primary\" color=\"warning\" icon=\"caution-o\" size=\"large\">Caution</button>\n    <button theme=\"primary\" color=\"pulse\" icon=\"send\" size=\"large\" disabled>Submit</button>\n  </div>\n</section>", styles: ["section{display:table}.example-label{display:table-cell;font-size:14px;margin-left:8px;min-width:120px;padding-left:8px}.example-button-row{display:table-cell;width:490px}.example-button-row .novo-button{margin:8px 8px 8px 0}.example-flex-container{display:flex;justify-content:space-between;flex-wrap:wrap}.example-button-container{display:flex;justify-content:center;width:120px}\n"] }]
        }] });

/**
 * @title Basic buttons
 */
class ButtonSecondaryExample {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: ButtonSecondaryExample, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: ButtonSecondaryExample, isStandalone: false, selector: "button-secondary-example", ngImport: i0, template: "<section>\n  <div class=\"example-label\">Default</div>\n  <div class=\"example-button-row\">\n    <button theme=\"secondary\">Secondary</button>\n    <button theme=\"secondary\" disabled>Secondary</button>\n  </div>\n</section>\n\n<novo-divider></novo-divider>\n\n<section>\n  <div class=\"example-label\">Small</div>\n  <div class=\"example-button-row\">\n    <button theme=\"secondary\" size=\"small\">Secondary</button>\n    <button theme=\"secondary\" size=\"small\" disabled>Secondary</button>\n  </div>\n</section>\n\n<novo-divider></novo-divider>\n\n<section>\n  <div class=\"example-label\">Large</div>\n  <div class=\"example-button-row\">\n    <button theme=\"secondary\" size=\"large\">Secondary</button>\n    <button theme=\"secondary\" size=\"large\" disabled>Secondary</button>\n  </div>\n</section>\n\n<section class=\"bgc-ocean\">\n  <div class=\"example-label tc-white\">Inverse</div>\n  <div class=\"example-button-row\">\n    <button theme=\"secondary\" inverse>Actions</button>\n    <button theme=\"secondary\" color=\"negative\" inverse>Issues</button>\n    <button theme=\"secondary\" icon=\"convert\" inverse disabled>Convert</button>\n  </div>\n</section>", styles: ["section{display:table}.example-label{display:table-cell;font-size:14px;margin-left:8px;min-width:120px;padding-left:8px}.example-button-row{display:table-cell;width:490px}.example-button-row .novo-button{margin:8px 8px 8px 0}.example-flex-container{display:flex;justify-content:space-between;flex-wrap:wrap}.example-button-container{display:flex;justify-content:center;width:120px}\n"], dependencies: [{ kind: "component", type: i2$1.NovoButtonElement, selector: "novo-button,button[theme]", inputs: ["color", "side", "size", "theme", "loading", "icon", "secondIcon", "disabled"] }, { kind: "component", type: i2$1.NovoDividerComponent, selector: "novo-divider", inputs: ["vertical", "inset"] }, { kind: "directive", type: i2$1.ThemeColorDirective, selector: "[theme]", inputs: ["theme"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: ButtonSecondaryExample, decorators: [{
            type: Component,
            args: [{ selector: 'button-secondary-example', standalone: false, template: "<section>\n  <div class=\"example-label\">Default</div>\n  <div class=\"example-button-row\">\n    <button theme=\"secondary\">Secondary</button>\n    <button theme=\"secondary\" disabled>Secondary</button>\n  </div>\n</section>\n\n<novo-divider></novo-divider>\n\n<section>\n  <div class=\"example-label\">Small</div>\n  <div class=\"example-button-row\">\n    <button theme=\"secondary\" size=\"small\">Secondary</button>\n    <button theme=\"secondary\" size=\"small\" disabled>Secondary</button>\n  </div>\n</section>\n\n<novo-divider></novo-divider>\n\n<section>\n  <div class=\"example-label\">Large</div>\n  <div class=\"example-button-row\">\n    <button theme=\"secondary\" size=\"large\">Secondary</button>\n    <button theme=\"secondary\" size=\"large\" disabled>Secondary</button>\n  </div>\n</section>\n\n<section class=\"bgc-ocean\">\n  <div class=\"example-label tc-white\">Inverse</div>\n  <div class=\"example-button-row\">\n    <button theme=\"secondary\" inverse>Actions</button>\n    <button theme=\"secondary\" color=\"negative\" inverse>Issues</button>\n    <button theme=\"secondary\" icon=\"convert\" inverse disabled>Convert</button>\n  </div>\n</section>", styles: ["section{display:table}.example-label{display:table-cell;font-size:14px;margin-left:8px;min-width:120px;padding-left:8px}.example-button-row{display:table-cell;width:490px}.example-button-row .novo-button{margin:8px 8px 8px 0}.example-flex-container{display:flex;justify-content:space-between;flex-wrap:wrap}.example-button-container{display:flex;justify-content:center;width:120px}\n"] }]
        }] });

/**
 * @title Basic buttons
 */
class ButtonStandardExample {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: ButtonStandardExample, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: ButtonStandardExample, isStandalone: false, selector: "button-standard-example", ngImport: i0, template: "<button theme=\"standard\">Standard</button>\n<button theme=\"standard\" color=\"light\">Standard</button>\n<button theme=\"standard\" color=\"light\" disabled>Standard</button>\n", styles: [""], dependencies: [{ kind: "component", type: i2$1.NovoButtonElement, selector: "novo-button,button[theme]", inputs: ["color", "side", "size", "theme", "loading", "icon", "secondIcon", "disabled"] }, { kind: "directive", type: i2$1.ThemeColorDirective, selector: "[theme]", inputs: ["theme"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: ButtonStandardExample, decorators: [{
            type: Component,
            args: [{ selector: 'button-standard-example', standalone: false, template: "<button theme=\"standard\">Standard</button>\n<button theme=\"standard\" color=\"light\">Standard</button>\n<button theme=\"standard\" color=\"light\" disabled>Standard</button>\n" }]
        }] });

/**
 * @title Icon buttons
 */
class ButtonTwoIconExample {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: ButtonTwoIconExample, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: ButtonTwoIconExample, isStandalone: false, selector: "button-two-icon-example", ngImport: i0, template: "<button theme=\"primary\" icon=\"edit\" secondIcon=\"arrow-right\">Two Icons</button>\n<button theme=\"primary\" icon=\"bolt\" secondIcon=\"configure-o\" side=\"right\">Two Icons</button>\n", styles: ["button{margin:1rem}\n"], dependencies: [{ kind: "component", type: i2$1.NovoButtonElement, selector: "novo-button,button[theme]", inputs: ["color", "side", "size", "theme", "loading", "icon", "secondIcon", "disabled"] }, { kind: "directive", type: i2$1.ThemeColorDirective, selector: "[theme]", inputs: ["theme"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: ButtonTwoIconExample, decorators: [{
            type: Component,
            args: [{ selector: 'button-two-icon-example', standalone: false, template: "<button theme=\"primary\" icon=\"edit\" secondIcon=\"arrow-right\">Two Icons</button>\n<button theme=\"primary\" icon=\"bolt\" secondIcon=\"configure-o\" side=\"right\">Two Icons</button>\n", styles: ["button{margin:1rem}\n"] }]
        }] });

/**
 * @title Calendar Example
 */
class CalendarExample {
    constructor() {
        this.activeDate = new Date();
        this.selection = [];
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: CalendarExample, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: CalendarExample, isStandalone: false, selector: "calendar-example", ngImport: i0, template: "<novo-stack>\n  <novo-calendar\n    [activeDate]=\"activeDate\"\n    [(selected)]=\"selection\"\n    [mode]=\"mode.value\"\n    [numberOfMonths]=\"months.value\"\n    [weekStartsOn]=\"weekStart.value\"></novo-calendar>\n\n  <novo-label>Selected Values:</novo-label>\n  <div>{{selection | json}}</div>\n</novo-stack>\n<div>\n  <novo-label>Selection mode</novo-label>\n  <novo-radio-group #mode appearance=\"vertical\" value=\"single\">\n    <novo-radio name=\"mode\" value=\"single\">single</novo-radio>\n    <novo-radio name=\"mode\" value=\"multiple\">multiple</novo-radio>\n    <novo-radio name=\"mode\" value=\"range\">range</novo-radio>\n    <novo-radio name=\"mode\" value=\"week\">week</novo-radio>\n  </novo-radio-group>\n\n  <novo-label># of Months</novo-label>\n  <novo-radio-group #months appearance=\"vertical\" value=\"1\">\n    <novo-radio name=\"months\" value=\"1\">1</novo-radio>\n    <novo-radio name=\"months\" value=\"2\">2</novo-radio>\n  </novo-radio-group>\n\n  <novo-label>Week Start</novo-label>\n  <novo-radio-group #weekStart appearance=\"vertical\" value=\"0\">\n    <novo-radio name=\"weekStart\" value=\"0\">Sun</novo-radio>\n    <novo-radio name=\"weekStart\" value=\"1\">Mon</novo-radio>\n  </novo-radio-group>\n</div>", styles: [":host{display:grid;grid-template-columns:1fr 1fr;gap:2rem}\n"], dependencies: [{ kind: "component", type: i2$1.NovoCalendarElement, selector: "novo-calendar", inputs: ["minYear", "maxYear", "minDate", "maxDate", "activeView", "layout", "selected", "preview", "overlays", "disabledDateMessage", "activeDate", "weekStartsOn", "numberOfMonths", "mode"], outputs: ["selectedChange", "previewChange", "activeDateChange"] }, { kind: "component", type: i2$1.NovoStackElement, selector: "novo-stack,novo-column", inputs: ["direction", "align"] }, { kind: "component", type: i2$1.NovoRadioElement, selector: "novo-radio", inputs: ["id", "name", "tabindex", "vertical", "label", "button", "theme", "size", "icon", "color", "disabled", "checked", "value"], outputs: ["change", "blur", "focus"] }, { kind: "component", type: i2$1.NovoRadioGroup, selector: "novo-radio-group", inputs: ["id", "tabindex", "errorStateMatcher", "appearance", "value", "name", "disabled", "required", "placeholder"], outputs: ["change", "blur"] }, { kind: "component", type: i2$1.NovoLabel, selector: "novo-label,[novo-label]", inputs: ["id"] }, { kind: "pipe", type: i2.JsonPipe, name: "json" }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: CalendarExample, decorators: [{
            type: Component,
            args: [{ selector: 'calendar-example', standalone: false, template: "<novo-stack>\n  <novo-calendar\n    [activeDate]=\"activeDate\"\n    [(selected)]=\"selection\"\n    [mode]=\"mode.value\"\n    [numberOfMonths]=\"months.value\"\n    [weekStartsOn]=\"weekStart.value\"></novo-calendar>\n\n  <novo-label>Selected Values:</novo-label>\n  <div>{{selection | json}}</div>\n</novo-stack>\n<div>\n  <novo-label>Selection mode</novo-label>\n  <novo-radio-group #mode appearance=\"vertical\" value=\"single\">\n    <novo-radio name=\"mode\" value=\"single\">single</novo-radio>\n    <novo-radio name=\"mode\" value=\"multiple\">multiple</novo-radio>\n    <novo-radio name=\"mode\" value=\"range\">range</novo-radio>\n    <novo-radio name=\"mode\" value=\"week\">week</novo-radio>\n  </novo-radio-group>\n\n  <novo-label># of Months</novo-label>\n  <novo-radio-group #months appearance=\"vertical\" value=\"1\">\n    <novo-radio name=\"months\" value=\"1\">1</novo-radio>\n    <novo-radio name=\"months\" value=\"2\">2</novo-radio>\n  </novo-radio-group>\n\n  <novo-label>Week Start</novo-label>\n  <novo-radio-group #weekStart appearance=\"vertical\" value=\"0\">\n    <novo-radio name=\"weekStart\" value=\"0\">Sun</novo-radio>\n    <novo-radio name=\"weekStart\" value=\"1\">Mon</novo-radio>\n  </novo-radio-group>\n</div>", styles: [":host{display:grid;grid-template-columns:1fr 1fr;gap:2rem}\n"] }]
        }] });

/**
 * @title Time Example
 */
class TimeExample {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: TimeExample, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: TimeExample, isStandalone: false, selector: "time-example", ngImport: i0, template: "<div class=\"calendar-demo-side-by-side\">\n    <p>\n        <label>Value</label> {{(time | date:'mediumTime') || 'N/A'}}\n    </p>\n    <novo-time-picker [(ngModel)]=\"time\"></novo-time-picker>\n    <novo-time-picker [(ngModel)]=\"time\" military=\"true\"></novo-time-picker>\n</div>\n", styles: [""], dependencies: [{ kind: "directive", type: i1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i1.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "component", type: i2$1.NovoTimePickerElement, selector: "novo-time-picker", inputs: ["military", "analog", "inline", "step", "hasButtons", "saveDisabled"], outputs: ["onSelect", "onSave", "onCancel"] }, { kind: "pipe", type: i2.DatePipe, name: "date" }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: TimeExample, decorators: [{
            type: Component,
            args: [{ selector: 'time-example', standalone: false, template: "<div class=\"calendar-demo-side-by-side\">\n    <p>\n        <label>Value</label> {{(time | date:'mediumTime') || 'N/A'}}\n    </p>\n    <novo-time-picker [(ngModel)]=\"time\"></novo-time-picker>\n    <novo-time-picker [(ngModel)]=\"time\" military=\"true\"></novo-time-picker>\n</div>\n" }]
        }] });

/**
 * @title Configure Columns Modal Example
 */
class ConfigureColumnsModal {
    constructor(modalRef, params) {
        this.modalRef = modalRef;
        this.params = params;
        this.columns = params.columns;
    }
    close() {
        this.modalRef.close();
    }
    save() {
        this.modalRef.close(this.columns);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: ConfigureColumnsModal, deps: [{ token: i1$1.NovoModalRef }, { token: i1$1.NovoModalParams }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: ConfigureColumnsModal, isStandalone: false, selector: "configure-columns-modal-example", ngImport: i0, template: `
    <novo-modal>
      <header title="Configure Columns" theme="contact">
        <utils>
          <util-action icon="times" (click)="close()"></util-action>
        </utils>
      </header>
      <section>
        <novo-list direction="vertical">
          <novo-list-item *ngFor="let column of columns">
            <item-header>
              <item-title>{{ column.id }}</item-title>
              <item-header-end>
                <novo-checkbox [(ngModel)]="column.enabled"></novo-checkbox>
              </item-header-end>
            </item-header>
          </novo-list-item>
        </novo-list>
      </section>
      <button theme="standard" (click)="close()">Cancel</button>
      <button theme="primary" color="success" icon="check" (click)="save()">Save</button>
    </novo-modal>
  `, isInline: true, dependencies: [{ kind: "directive", type: i1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i1.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "directive", type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "component", type: i2$1.NovoButtonElement, selector: "novo-button,button[theme]", inputs: ["color", "side", "size", "theme", "loading", "icon", "secondIcon", "disabled"] }, { kind: "component", type: i2$1.NovoCheckboxElement, selector: "novo-checkbox", inputs: ["aria-label", "aria-labelledby", "aria-describedby", "id", "name", "label", "disabled", "layoutOptions", "color", "value", "tabIndex", "required", "checked", "indeterminate"], outputs: ["change", "indeterminateChange", "onSelect"] }, { kind: "component", type: i2$1.NovoHeaderComponent, selector: "novo-header,header[theme],header[accent]", inputs: ["condensed", "title", "subTitle", "icon", "size", "theme"] }, { kind: "component", type: i2$1.NovoUtilActionComponent, selector: "util-action, novo-action", inputs: ["icon", "size", "inverse", "disabled"] }, { kind: "component", type: i2$1.NovoUtilsComponent, selector: "utils" }, { kind: "component", type: i2$1.NovoModalElement, selector: "novo-modal" }, { kind: "component", type: i2$1.NovoListElement, selector: "novo-list", inputs: ["theme", "direction"] }, { kind: "component", type: i2$1.NovoListItemElement, selector: "novo-list-item, a[list-item], button[list-item]" }, { kind: "component", type: i2$1.NovoItemTitleElement, selector: "item-title, novo-item-title" }, { kind: "component", type: i2$1.NovoItemHeaderElement, selector: "item-header, novo-item-header" }, { kind: "component", type: i2$1.NovoItemDateElement, selector: "item-header-end, novo-item-header-end" }, { kind: "directive", type: i2$1.ThemeColorDirective, selector: "[theme]", inputs: ["theme"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: ConfigureColumnsModal, decorators: [{
            type: Component,
            args: [{
                    selector: 'configure-columns-modal-example',
                    template: `
    <novo-modal>
      <header title="Configure Columns" theme="contact">
        <utils>
          <util-action icon="times" (click)="close()"></util-action>
        </utils>
      </header>
      <section>
        <novo-list direction="vertical">
          <novo-list-item *ngFor="let column of columns">
            <item-header>
              <item-title>{{ column.id }}</item-title>
              <item-header-end>
                <novo-checkbox [(ngModel)]="column.enabled"></novo-checkbox>
              </item-header-end>
            </item-header>
          </novo-list-item>
        </novo-list>
      </section>
      <button theme="standard" (click)="close()">Cancel</button>
      <button theme="primary" color="success" icon="check" (click)="save()">Save</button>
    </novo-modal>
  `,
                    standalone: false
                }]
        }], ctorParameters: () => [{ type: i1$1.NovoModalRef }, { type: i1$1.NovoModalParams }] });

/**
 * @title Remote Data Table Example
 */
class DataTableRemoteExample {
    constructor(ref, modalService) {
        this.ref = ref;
        this.modalService = modalService;
        // Table configuration
        this.dataSetOptions = [
            { label: 'Dataset #1', value: 1 },
            { label: 'Dataset #2', value: 2 },
            { label: 'Dataset #3', value: 3 },
        ];
        this.loadedDataSet = 1;
        this.paginationTypeOptions = [
            { label: 'Standard', value: 'standard' },
            { label: 'Basic', value: 'basic' },
        ];
        this.loadedPaginationType = 'standard';
        this.paginationPlacementOptions = [
            { label: 'Top', value: false },
            { label: 'Bottom', value: true },
        ];
        this.loadedPaginationPlacement = false;
        this.globalSearchOptions = [
            { label: 'Show', value: true },
            { label: 'Hide', value: false },
        ];
        this.loadedGlobalSearch = false;
        // Shared configuration
        this.sharedColumns = [
            {
                id: 'preview',
                type: 'action',
                enabled: true,
                handlers: {
                    click: this.log.bind(this),
                },
                action: {
                    icon: 'preview',
                },
            },
            {
                id: 'actions',
                type: 'action',
                label: 'Actions',
                enabled: true,
                action: {
                    options: [
                        { label: 'Action 1', handlers: { click: this.log.bind(this) } },
                        { label: 'Action 2', handlers: { click: this.log.bind(this) }, disabled: true },
                        { label: 'Action 3', handlers: { click: this.log.bind(this) }, disabledFunc: this.checkDisabled.bind(this) },
                    ],
                },
            },
            {
                id: 'id',
                label: 'ID',
                enabled: true,
                type: 'text',
                filterable: {
                    type: 'number',
                },
                sortable: true,
            },
            {
                id: 'telephone',
                label: 'Phone',
                type: 'link:tel',
                attributes: {
                    target: '_blank',
                },
            },
            {
                id: 'email',
                label: 'Email',
                type: 'link:mailto',
                attributes: {
                    target: '_blank',
                },
            },
            {
                id: 'address',
                label: 'Address',
                type: 'text',
                format: ['$city, $state', '$city', '$state'],
            },
            {
                id: 'embeddedObj',
                label: 'Embedded (hard)',
                enabled: true,
                format: ['$another.id', '$firstName $lastName'],
                type: 'link',
                handlers: {
                    click: this.log.bind(this),
                },
                filterable: true,
            },
            {
                id: 'simpleEmbeddedObj',
                label: 'Embedded (simple)',
                enabled: true,
                format: '$id',
                type: 'text',
                filterable: true,
                sortable: true,
            },
            {
                id: 'date',
                label: 'Date',
                enabled: true,
                type: 'date',
                filterable: {
                    type: 'date',
                    allowCustomRange: true,
                },
                sortable: true,
            },
            {
                id: 'dateTime',
                label: 'DateTime',
                enabled: false,
                type: 'datetime',
            },
            {
                id: 'time',
                label: 'Time',
                enabled: false,
                type: 'time',
            },
            {
                id: 'money',
                label: 'Money',
                enabled: false,
                type: 'currency',
                filterable: true,
                sortable: true,
            },
            {
                id: 'percent',
                label: 'Percent',
                enabled: true,
                type: 'percent',
                filterable: true,
                sortable: true,
            },
            {
                id: 'name',
                label: 'Name',
                labelIcon: 'bull',
                enabled: true,
                type: 'text',
                template: 'custom',
            },
            {
                id: 'status',
                label: 'Status',
                enabled: true,
                type: 'text',
                filterable: true,
                sortable: true,
            },
            {
                id: 'priority',
                label: 'Priority',
                enabled: true,
                type: 'text',
                filterable: {
                    type: 'multi-select',
                    options: this.getPriorityOptions(),
                },
                sortable: true,
            },
            {
                id: 'enabled',
                label: 'Enabled',
                enabled: true,
                type: 'text',
                sortable: true,
                filterable: {
                    type: 'select',
                    options: [
                        { value: true, label: 'True' },
                        { value: false, label: 'False' },
                    ],
                },
            },
            {
                id: 'edit',
                type: 'action',
                enabled: true,
                disabled: true,
                handlers: {
                    click: this.log.bind(this),
                },
                action: {
                    icon: 'edit',
                },
            },
        ];
        this.sharedDisplayColumns = [
            'selection',
            'expand',
            'preview',
            'actions',
            'id',
            'date',
            'name',
            'telephone',
            'email',
            'simpleEmbeddedObj',
            'status',
            'priority',
            'percent',
            'embeddedObj',
            'edit',
        ];
        this.sharedPaginationOptions = {
            theme: 'standard',
            pageSize: 10,
            pageSizeOptions: [10, 50, 100, 250, 500],
        };
        this.widePaginationOptions = {
            theme: 'basic-wide',
            pageSize: 10,
            pageSizeOptions: [10, 50, 100, 250, 500],
        };
        this.sharedSearchOptions = {
            placeholder: 'Search for things...',
            tooltip: 'HELLO',
        };
        this.sharedDefaultSort = {
            id: 'id',
            value: 'asc',
        };
        this.globalSearchEnabled = false;
        this.refreshSubject = new Subject();
        this.staticDataSet1 = [];
        for (let i = 0; i < 1000; i++) {
            const day = i < 500 ? dateFns.subDays(new Date(), i) : dateFns.addDays(new Date(), i - 500);
            this.staticDataSet1.push({
                id: i,
                embeddedObj: { id: i, test: `HMM ${i}`, another: { id: 777 } },
                simpleEmbeddedObj: { id: i },
                name: `(1) Name ${i}`,
                status: `(1) Status ${i}`,
                priority: this.getPriority(),
                enabled: i % 2 === 0,
                date: day,
                dateTime: day,
                time: day,
                money: i + 10,
                percent: i / 100,
                telephone: '555-555-5555',
                email: 'test@google.com',
                address: { city: 'City', state: null },
            });
        }
        this.remoteService = new RemoteMockDataService([...this.staticDataSet1.slice(0, 10)]);
    }
    getPriority() {
        const x = Math.round(Math.random() * 50);
        return 'test ' + x.toString();
    }
    getPriorityOptions() {
        const options = new Array();
        let i;
        for (i = 0; i < 49; i++) {
            options.push('test ' + i.toString());
        }
        return options;
    }
    switchPaginationType(type) {
        this.sharedPaginationOptions = Object.assign({}, this.sharedPaginationOptions, { theme: type });
        this.ref.detectChanges();
    }
    switchPaginationPlacement(onFooter) {
        this.sharedPaginationOptions = Object.assign({}, this.sharedPaginationOptions, { onFooter });
        this.ref.detectChanges();
    }
    toggleGlobalSearch(toggle) {
        this.globalSearchEnabled = toggle;
        this.ref.detectChanges();
    }
    log(event) {
        console.log('[DataTable] Event Triggered!', event); // tslint:disable-line
    }
    checkDisabled(row) {
        return true;
    }
    configureColumns() {
        this.modalService
            .open(ConfigureColumnsModal, { columns: this.sharedColumns })
            .onClosed.then((columns) => {
            if (columns) {
                const enabledColumns = columns.filter((column) => column.enabled);
                this.sharedDisplayColumns = ['selection', 'expand', ...enabledColumns.map((column) => column.id)];
                this.ref.markForCheck();
            }
        });
    }
    onPreferencesChanged(event) {
        console.log('Preferences changed (persist manually):', event); // tslint:disable-line
    }
    refresh() {
        this.refreshSubject.next();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: DataTableRemoteExample, deps: [{ token: i0.ChangeDetectorRef }, { token: i1$1.NovoModalService }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: DataTableRemoteExample, isStandalone: false, selector: "data-table-remote-example", ngImport: i0, template: "<novo-data-table [dataTableService]=\"remoteService\"\n                 [columns]=\"sharedColumns\"\n                 [allowMultipleFilters]=\"true\"\n                 [hideGlobalSearch]=\"!globalSearchEnabled\"\n                 [displayedColumns]=\"sharedDisplayColumns\"\n                 [paginationOptions]=\"widePaginationOptions\"\n                 [fixedHeader]=\"true\">\n  <!-- Custom Cell -- passed with template property on Column -->\n  <ng-template novoTemplate=\"custom\"\n               let-row\n               let-col=\"col\">\n    <b>CUSTOM</b>&nbsp; {{ row.name }}\n  </ng-template>\n</novo-data-table>\n", styles: [":host{min-height:460px;display:flex}\n"], dependencies: [{ kind: "component", type: i2$1.NovoDataTable, selector: "novo-data-table", inputs: ["displayedColumns", "paginationOptions", "searchOptions", "selectionOptions", "defaultSort", "name", "allowMultipleFilters", "rowIdentifier", "activeRowIdentifier", "trackByFn", "templates", "fixedHeader", "paginatorDataFeatureId", "maxSelected", "canSelectAll", "allMatchingSelected", "overrideTotal", "paginationRefreshSubject", "dataTableService", "rows", "outsideFilter", "refreshSubject", "columns", "customFilter", "hasExandedRows", "forceShowHeader", "hideGlobalSearch", "listInteractions"], outputs: ["resized", "preferencesChanged", "allSelected", "toggledFilter"] }, { kind: "directive", type: i2$1.NovoTemplate, selector: "[novoTemplate]", inputs: ["type", "novoTemplate"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: DataTableRemoteExample, decorators: [{
            type: Component,
            args: [{ selector: 'data-table-remote-example', changeDetection: ChangeDetectionStrategy.OnPush, standalone: false, template: "<novo-data-table [dataTableService]=\"remoteService\"\n                 [columns]=\"sharedColumns\"\n                 [allowMultipleFilters]=\"true\"\n                 [hideGlobalSearch]=\"!globalSearchEnabled\"\n                 [displayedColumns]=\"sharedDisplayColumns\"\n                 [paginationOptions]=\"widePaginationOptions\"\n                 [fixedHeader]=\"true\">\n  <!-- Custom Cell -- passed with template property on Column -->\n  <ng-template novoTemplate=\"custom\"\n               let-row\n               let-col=\"col\">\n    <b>CUSTOM</b>&nbsp; {{ row.name }}\n  </ng-template>\n</novo-data-table>\n", styles: [":host{min-height:460px;display:flex}\n"] }]
        }], ctorParameters: () => [{ type: i0.ChangeDetectorRef }, { type: i1$1.NovoModalService }] });
class RemoteMockDataService extends RemoteDataTableService {
    constructor(data) {
        super();
        this.data = data;
    }
    getTableResults(sort, filter, page, pageSize, globalSearch) {
        const whereQuery = this.buildWhereClause(filter);
        const sortQuery = this.buildSortColumn(sort);
        const pageQuery = this.buildStart(page, pageSize);
        this.url = `http://mock-api.com?where=${whereQuery}&sort=${sortQuery}&pageSize=${pageSize}&page=${pageQuery}`;
        return of({ results: this.data, total: this.data.length }).pipe(delay(5000));
    }
    buildWhereClause(filter) {
        const query = {};
        if (filter) {
            const filters = Helpers.convertToArray(filter);
            filters.forEach((aFilter) => {
                query[aFilter.id] = aFilter.transform ? aFilter.transform(aFilter.value) : aFilter.value;
            });
        }
        return this.toQuerySyntax(query);
    }
    buildSortColumn(sort) {
        if (sort) {
            let value = sort.id;
            if (sort.transform) {
                value = sort.transform(value);
            }
            return sort.value === 'asc' ? value : `-${value}`;
        }
        return '';
    }
    buildStart(page, pageSize) {
        return (page || 0) * pageSize;
    }
    toQuerySyntax(data) {
        const queries = [];
        for (const key in data) {
            const value = data[key];
            if (key === 'or') {
                queries.push(`(${this.toQuerySyntax(value).replace(/ AND /g, ' OR ')})`);
            }
            else {
                queries.push(this.parseQueryValue(key, value));
            }
        }
        return queries.join(' AND ');
    }
    parseQueryValue(key, value, isNot = false) {
        const clauses = [], IN = isNot ? ' NOT IN ' : ' IN ', EQ = isNot ? '<>' : '=', GT = isNot ? '<' : '>=', LT = isNot ? '>=' : '<';
        if (Array.isArray(value)) {
            clauses.push(`${key}${IN}(${this.writeQueryValues(value)})`);
        }
        else if (value instanceof Object) {
            if (typeof value.isNull === 'boolean') {
                const query = value.isNull ? 'IS NULL' : 'IS NOT NULL';
                clauses.push(`${key} ${query}`);
            }
            if (value.min !== null && value.min !== undefined) {
                clauses.push(`${key}${GT}${this.writeQueryValue(value.min)}`);
            }
            if (value.max !== null && value.max !== undefined) {
                clauses.push(`${key}${LT}${this.writeQueryValue(value.max)}`);
            }
            if (value.any && Array.isArray(value.any)) {
                clauses.push(`${key}${IN}(${this.writeQueryValues(value.any)})`);
            }
            if (value.all && Array.isArray(value.all)) {
                clauses.push(`${key}${IN}(${this.writeQueryValues(value.all)})`);
            }
            if (value.not !== null && value.not !== undefined) {
                clauses.push(this.parseQueryValue(key, value.not, true));
            }
            if (value.like !== null && value.like !== undefined) {
                clauses.push(`${key} like '%${value.like}%'`);
            }
            if (value.lookup !== null && value.lookup !== undefined) {
                const obj = {};
                obj[key] = value.lookup;
                clauses.push(this.toQuerySyntax(obj));
            }
            if (value.with !== null && value.with !== undefined) {
                clauses.push(`${key} IS NOT EMPTY`);
            }
            if (value.without !== null && value.without !== undefined) {
                clauses.push(`${key} IS EMPTY`);
            }
            if (value.or !== null && value.or !== undefined) {
                const obj = {};
                obj[key] = value.or;
                clauses.push(this.toQuerySyntax(obj).replace('AND', 'OR'));
            }
            for (const subkey in value) {
                if (['min', 'max', 'any', 'all', 'not', 'or', 'like', 'lookup', 'with', 'without', 'isNull'].indexOf(subkey) < 0) {
                    const subvalue = value[subkey];
                    clauses.push(this.parseQueryValue(`${key}.${subkey}`, subvalue));
                }
            }
        }
        else {
            clauses.push(`${key}${EQ}${this.writeQueryValue(value)}`);
        }
        return clauses.join(' AND ');
    }
    writeQueryValues(values) {
        if (typeof values[0] === 'number' || typeof values[0] === 'boolean') {
            return `${values.join(',')}`;
        }
        else {
            return `'${values.join(`','`)}'`;
        }
    }
    writeQueryValue(value) {
        if (value instanceof Date) {
            return value.getTime();
        }
        else if (typeof value === 'number' || typeof value === 'boolean') {
            return `${value}`;
        }
        else {
            return `'${value.replace(/\*/g, '')}'`;
        }
    }
}

/**
 * @title Rows Data Table Example
 */
class DataTableRowsExample {
    ngAfterViewInit() {
        this.table.cellHeaders.get(2).setWidth(120);
    }
    constructor(ref, modalService) {
        this.ref = ref;
        this.modalService = modalService;
        // Table configuration
        this.dataSetOptions = [
            { label: 'Dataset #1', value: 1 },
            { label: 'Dataset #2', value: 2 },
            { label: 'Dataset #3', value: 3 },
        ];
        this.loadedDataSet = 1;
        this.paginationTypeOptions = [
            { label: 'Standard', value: 'standard' },
            { label: 'Basic', value: 'basic' },
        ];
        this.paginationPlacementOptions = [
            { label: 'Top', value: false },
            { label: 'Bottom', value: true },
        ];
        this.loadedPaginationPlacement = false;
        this.selectionOptions = [];
        this.loadedPaginationType = 'standard';
        this.globalSearchOptions = [
            { label: 'Show', value: true },
            { label: 'Hide', value: false },
        ];
        this.loadedGlobalSearch = false;
        this.customStatusColumnValue = '';
        this.customStatusColumnOptions = [
            {
                label: 'Has A 5 in status',
                value: '5',
            },
            {
                label: 'All',
                value: '',
            },
        ];
        this.retentionEnabled = false;
        // Shared configuration
        this.sharedColumns = [
            {
                id: 'preview',
                type: 'action',
                enabled: true,
                handlers: {
                    click: this.preview.bind(this),
                },
                action: {
                    icon: 'preview',
                },
            },
            {
                id: 'actions',
                type: 'action',
                label: 'Actions',
                enabled: true,
                action: {
                    options: [
                        { label: 'Action 1', handlers: { click: this.log.bind(this) } },
                        { label: 'Action 2', handlers: { click: this.log.bind(this) }, disabled: true },
                        { label: 'Action 3', handlers: { click: this.log.bind(this) }, disabledFunc: this.checkDisabled.bind(this) },
                    ],
                },
            },
            {
                id: 'id',
                label: 'ID',
                enabled: true,
                type: 'text',
                filterable: {
                    type: 'number',
                },
                sortable: true,
                resizable: true,
            },
            {
                id: 'telephone',
                label: 'Phone',
                type: 'link:tel',
                resizable: true,
                attributes: {
                    target: '_blank',
                },
            },
            {
                id: 'email',
                label: 'Email',
                type: 'link:mailto',
                attributes: {
                    target: '_blank',
                },
                resizable: true,
            },
            {
                id: 'address',
                label: 'Address',
                type: 'text',
                format: ['$city, $state', '$city', '$state'],
            },
            {
                id: 'embeddedObj',
                label: 'Embedded (hard)',
                enabled: true,
                format: ['$another.id', '$firstName $lastName'],
                type: 'link',
                handlers: {
                    click: this.log.bind(this),
                },
                filterable: true,
                resizable: true,
            },
            {
                id: 'simpleEmbeddedObj',
                label: 'Embedded (simple)',
                enabled: true,
                format: '$id',
                type: 'text',
                filterable: true,
                sortable: true,
                resizable: true,
            },
            {
                id: 'date',
                label: 'Date',
                enabled: true,
                type: 'date',
                filterable: {
                    type: 'date',
                    allowCustomRange: true,
                },
                sortable: true,
                format: '$year-$month-$day $hour:$minute',
                resizable: true,
            },
            {
                id: 'dateTime',
                label: 'DateTime',
                enabled: false,
                type: 'datetime',
            },
            {
                id: 'time',
                label: 'Time',
                enabled: false,
                type: 'time',
            },
            {
                id: 'money',
                label: 'Money',
                enabled: false,
                type: 'currency',
                filterable: true,
                sortable: true,
                resizable: true,
                rightAlignCellContent: true,
            },
            {
                id: 'percent',
                label: 'Percent',
                enabled: true,
                type: 'percent',
                filterable: true,
                sortable: true,
                resizable: true,
            },
            {
                id: 'bigdecimal',
                label: 'BigDecimal',
                enabled: true,
                type: 'bigdecimal',
                filterable: true,
                sortable: true,
                resizable: true,
            },
            {
                id: 'name',
                label: 'Name',
                labelIcon: 'bull',
                enabled: true,
                type: 'text',
                template: 'custom',
                resizable: true,
            },
            {
                id: 'status',
                label: 'Status',
                enabled: true,
                type: 'text',
                filterable: { type: 'custom' },
                sortable: true,
                resizable: true,
            },
            {
                id: 'favoriteColor',
                label: 'Favorite Color',
                enabled: true,
                type: 'text',
                filterable: { type: 'custom' },
                sortable: true,
                resizable: true,
            },
            {
                id: 'priority',
                label: 'Priority',
                enabled: true,
                type: 'text',
                filterable: {
                    type: 'multi-select',
                    options: this.getPriorityOptions(),
                },
                sortable: true,
                resizable: true,
            },
            {
                id: 'enabled',
                label: 'Enabled',
                enabled: true,
                type: 'text',
                sortable: true,
                resizable: true,
                filterable: {
                    type: 'select',
                    options: [
                        { value: true, label: 'True' },
                        { value: false, label: 'False' },
                    ],
                },
            },
            {
                id: 'edit',
                type: 'action',
                enabled: true,
                disabled: true,
                handlers: {
                    click: this.log.bind(this),
                },
                action: {
                    icon: 'edit',
                },
            },
        ];
        this.sharedDisplayColumns = [
            'selection',
            'expand',
            'preview',
            'actions',
            'id',
            'date',
            'name',
            'telephone',
            'email',
            'simpleEmbeddedObj',
            'status',
            'favoriteColor',
            'priority',
            'percent',
            'bigdecimal',
            'embeddedObj',
            'edit',
            'enabled',
        ];
        this.sharedPaginationOptions = {
            theme: 'standard',
            pageSize: 10,
            pageSizeOptions: [10, 50, 100, 250, 500],
        };
        this.widePaginationOptions = {
            theme: 'basic-wide',
            pageSize: 10,
            pageSizeOptions: [10, 50, 100, 250, 500],
        };
        this.sharedSearchOptions = {
            placeholder: 'Search for things...',
            tooltip: 'HELLO',
        };
        this.sharedDefaultSort = {
            id: 'id',
            value: 'asc',
        };
        this.globalSearchEnabled = false;
        this.refreshSubject = new Subject();
        this.staticDataSet1 = [];
        this.staticDataSet2 = [];
        this.staticDataSet3 = [];
        this.selectedRecordId = '';
        for (let i = 0; i < 1000; i++) {
            const day = i < 500 ? dateFns.subDays(new Date(), i) : dateFns.addDays(new Date(), i - 500);
            this.staticDataSet1.push({
                id: i,
                embeddedObj: { id: i, test: `HMM ${i}`, another: { id: 777 } },
                simpleEmbeddedObj: { id: i },
                name: `(1) Name ${i}`,
                status: `(1) Status ${i}`,
                priority: this.getPriority(),
                enabled: i % 2 === 0,
                date: day,
                dateTime: day,
                time: day,
                money: i + 10,
                percent: i / 100,
                telephone: '555-555-5555',
                email: 'test@google.com',
                address: { city: 'City', state: null },
                bigdecimal: 3.25 * (i + 1) * (i % 5 === 1 ? -1 : 1),
                favoriteColor: 'blue',
            });
            this.staticDataSet2.push({
                id: i + 1001,
                embeddedObj: { id: i, test: `HMM ${i}`, another: { id: 777 } },
                simpleEmbeddedObj: { id: i },
                name: `(2) Name ${i}`,
                status: `(2) Status ${i}`,
                priority: this.getPriority(),
                enabled: i % 2 === 0,
                date: day,
                dateTime: day,
                time: day,
                money: i + 10,
                percent: i / 100,
                telephone: '555-555-5555',
                email: 'test@google.com',
                address: { city: 'City', state: 'State' },
                bigdecimal: -75,
                favoriteColor: 'white',
            });
        }
        this.basicRows = [...this.staticDataSet1];
    }
    getPriority() {
        const x = Math.round(Math.random() * 50);
        return 'test ' + x.toString();
    }
    getPriorityOptions() {
        const options = new Array();
        let i;
        for (i = 0; i < 49; i++) {
            options.push('test ' + i.toString());
        }
        return options;
    }
    switchPaginationType(type) {
        this.sharedPaginationOptions = Object.assign({}, this.sharedPaginationOptions, { theme: type });
        this.ref.detectChanges();
    }
    switchPaginationPlacement(onFooter) {
        this.sharedPaginationOptions = Object.assign({}, this.sharedPaginationOptions, { onFooter });
        this.ref.detectChanges();
    }
    loadDataset(setIndex) {
        switch (setIndex) {
            case 1:
                this.basicRows = [...this.staticDataSet1];
                break;
            case 2:
                this.basicRows = [...this.staticDataSet2];
                break;
            case 3:
                this.basicRows = [...this.staticDataSet3];
                break;
            default:
                break;
        }
    }
    toggleGlobalSearch(toggle) {
        this.globalSearchEnabled = toggle;
        this.ref.detectChanges();
    }
    log(event) {
        console.log('[DataTable] Event Triggered!', event); // tslint:disable-line
    }
    preview(event) {
        this.selectedRecordId = event.row.id.toString();
        this.log(event);
    }
    checkDisabled() {
        return true;
    }
    configureColumns() {
        this.modalService
            .open(ConfigureColumnsModal, { columns: this.sharedColumns })
            .onClosed.then((columns) => {
            if (columns) {
                const enabledColumns = columns.filter((column) => column.enabled);
                this.sharedDisplayColumns = ['selection', 'expand', ...enabledColumns.map((column) => column.id)];
                this.ref.markForCheck();
            }
        });
    }
    onPreferencesChanged(event) {
        console.log('Preferences changed (persist manually):', event); // tslint:disable-line
    }
    resized(event) {
        console.log('Column Width changed (persist manually): ', event); // tslint:disable-line
    }
    refresh() {
        this.table.state.reset();
        this.refreshSubject.next();
    }
    toggleRowDetails(expand) {
        this.table.expandRows(expand);
    }
    filterList(value, field = 'status') {
        this.table.state.filter = { id: field, type: 'text', value };
        this.table.state.updates.next({
            globalSearch: this.table.state.globalSearch,
            filter: this.table.state.filter,
            sort: this.table.state.sort,
        });
        this.ref.markForCheck();
    }
    processCustomFilter(columnName) {
        if (columnName === 'favoriteColor') {
            const colorFilter = prompt('Favorite Color has been configured with a custom filter but no template. The table emitted a (toggledFilter) event which lets this function handle it as desired.\nEnter a favorite color:');
            this.filterList(colorFilter, 'favoriteColor');
        }
    }
    toggle(event) {
        if (event) {
            this.selectionOptions = [{ label: 'page' }];
        }
        else {
            this.selectionOptions = [];
        }
        this.table.state.selectionOptions = this.selectionOptions;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: DataTableRowsExample, deps: [{ token: i0.ChangeDetectorRef }, { token: i1$1.NovoModalService }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: DataTableRowsExample, isStandalone: false, selector: "data-table-rows-example", viewQueries: [{ propertyName: "table", first: true, predicate: ["basic"], descendants: true }], ngImport: i0, template: "<h6>Change Dataset</h6>\n<novo-tiles [options]=\"dataSetOptions\" (onChange)=\"loadDataset($event)\" [(ngModel)]=\"loadedDataSet\"></novo-tiles>\n<h6>Change Pagination Style</h6>\n<novo-tiles [options]=\"paginationTypeOptions\" (onChange)=\"switchPaginationType($event)\"\n  [(ngModel)]=\"loadedPaginationType\"></novo-tiles>\n<h6>Change Pagination Placement</h6>\n<novo-tiles [options]=\"paginationPlacementOptions\" (onChange)=\"switchPaginationPlacement($event)\"\n  [(ngModel)]=\"loadedPaginationPlacement\"></novo-tiles>\n<h6>Toggle Global Search</h6>\n<novo-tiles [options]=\"globalSearchOptions\" (onChange)=\"toggleGlobalSearch($event)\" [(ngModel)]=\"loadedGlobalSearch\">\n</novo-tiles>\n<h6>Configure Columns</h6>\n<button theme=\"primary\" (click)=\"configureColumns()\">Configure Columns</button>\n<h6>Configure Columns</h6>\n<button theme=\"primary\" (click)=\"toggleRowDetails(true)\">Show Row Details (first table)</button>\n<button theme=\"primary\" (click)=\"toggleRowDetails(false)\">Hide Row Details (first table)</button>\n<h6>Enable Selection Retention</h6>\n<novo-checkbox label=\"Paginated Selection Retention Enabled\" [(ngModel)]=\"retentionEnabled\"\n  (ngModelChange)=\"toggle($event)\"></novo-checkbox>\nSelection retention can be configured to keep records selected across pagination, sorting, and filtering\n\n<div class=\"fixedWindowSize\">\n  <novo-data-table [rows]=\"basicRows\"\n    [columns]=\"sharedColumns\"\n    [allowMultipleFilters]=\"true\"\n    [hideGlobalSearch]=\"!globalSearchEnabled\"\n    [displayedColumns]=\"sharedDisplayColumns\"\n    [paginationOptions]=\"sharedPaginationOptions\"\n    [selectionOptions]=\"selectionOptions\"\n    name=\"demo-basic-rows\"\n    [refreshSubject]=\"refreshSubject\"\n    (preferencesChanged)=\"onPreferencesChanged($event)\"\n    (resized)=\"resized($event)\"\n    (toggledFilter)=\"processCustomFilter($event)\"\n    [activeRowIdentifier]=\"selectedRecordId\"\n    [fixedHeader]=\"true\"\n    #basic>\n    <!-- Custom Header -->\n    <ng-template novoTemplate=\"customHeader\">\n      <div class=\"custom-header-buttons\">\n        <button theme=\"secondary\"\n        (click)=\"configureColumns()\">Config</button>\n        <span>Total: {{ basic.dataSource.currentTotal }}</span>\n      </div>\n    </ng-template>\n    <!-- Custom Actions -->\n    <ng-template novoTemplate=\"customActions\">\n      <novo-data-table-clear-button *ngIf=\"basic.state.userFiltered\"></novo-data-table-clear-button>\n      <button theme=\"secondary\"\n        (click)=\"refresh()\">Refresh</button>\n      <novo-dropdown side=\"right\">\n        <button theme=\"primary\"\n          icon=\"collapse\"\n          inverse>\n          <span *ngIf=\"basic.state.selected.length === 0\">Actions</span>\n          <span *ngIf=\"basic.state.selected.length !== 0\">{{ basic.state.selected.length }}!</span>\n        </button>\n        <list>\n          <item>Action 1</item>\n          <item>Action 2</item>\n          <item [disabled]=\"basic.state.selected.length === 0\">Action 3</item>\n        </list>\n      </novo-dropdown>\n    </ng-template>\n    <!-- Custom Empty Message -->\n    <ng-template novoTemplate=\"emptyMessage\">Yo! No Records!</ng-template>\n    <!-- Custom No Results Message -->\n    <ng-template novoTemplate=\"noResultsMessage\">Yo! That search is really complex, no data matches that!</ng-template>\n    <!-- Custom Cell for ID Column -->\n    <ng-template novoTemplate=\"id\"\n      let-row\n      let-col=\"col\">\n      <i class=\"bhi-bull\"></i> {{ row.id }}\n    </ng-template>\n    <!-- Custom Cell -- passed with template property on Column -->\n    <ng-template novoTemplate=\"custom\"\n      let-row\n      let-col=\"col\">\n      <b>CUSTOM</b>&nbsp; {{ row.name }}\n    </ng-template>\n    <!-- Row Details Template -->\n    <ng-template novoTemplate=\"expandedRow\"\n      let-row>\n      Why look at that, you clicked the details!\n    </ng-template>\n    <!-- Custom Status Filter -->\n    <ng-template novoTemplate=\"column-filter-status\">\n      <novo-tiles [options]=\"customStatusColumnOptions\" (onChange)=\"filterList($event)\" padding=\"md\"\n        [(ngModel)]=\"customStatusColumnValue\"></novo-tiles>\n    </ng-template>\n  </novo-data-table>\n</div>", styles: [".fixedWindowSize{height:450px}novo-data-table{height:100%}.custom-header-buttons{display:flex;align-items:center}.custom-header-buttons>*{margin-right:.2rem}\n"], dependencies: [{ kind: "directive", type: i1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i1.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i2$1.NovoButtonElement, selector: "novo-button,button[theme]", inputs: ["color", "side", "size", "theme", "loading", "icon", "secondIcon", "disabled"] }, { kind: "component", type: i2$1.NovoCheckboxElement, selector: "novo-checkbox", inputs: ["aria-label", "aria-labelledby", "aria-describedby", "id", "name", "label", "disabled", "layoutOptions", "color", "value", "tabIndex", "required", "checked", "indeterminate"], outputs: ["change", "indeterminateChange", "onSelect"] }, { kind: "component", type: i2$1.NovoTilesElement, selector: "novo-tiles", inputs: ["name", "options", "required", "controlDisabled"], outputs: ["onChange", "onSelectedOptionClick", "onDisabledOptionClick"] }, { kind: "component", type: i2$1.NovoDropdownElement, selector: "novo-dropdown", inputs: ["parentScrollSelector", "parentScrollAction", "containerClass", "side", "scrollStrategy", "keepOpen", "height", "width", "appendToBody", "multiple", "scrollToActiveItemOnOpen"], outputs: ["toggled"] }, { kind: "component", type: i2$1.NovoItemElement, selector: "item", inputs: ["disabled", "keepOpen"], outputs: ["action"] }, { kind: "component", type: i2$1.NovoDropdownListElement, selector: "list" }, { kind: "component", type: i2$1.NovoDataTable, selector: "novo-data-table", inputs: ["displayedColumns", "paginationOptions", "searchOptions", "selectionOptions", "defaultSort", "name", "allowMultipleFilters", "rowIdentifier", "activeRowIdentifier", "trackByFn", "templates", "fixedHeader", "paginatorDataFeatureId", "maxSelected", "canSelectAll", "allMatchingSelected", "overrideTotal", "paginationRefreshSubject", "dataTableService", "rows", "outsideFilter", "refreshSubject", "columns", "customFilter", "hasExandedRows", "forceShowHeader", "hideGlobalSearch", "listInteractions"], outputs: ["resized", "preferencesChanged", "allSelected", "toggledFilter"] }, { kind: "component", type: i2$1.NovoDataTableClearButton, selector: "novo-data-table-clear-button", outputs: ["selectedClear", "sortClear", "filterClear", "queryClear", "allClear"] }, { kind: "directive", type: i2$1.NovoTemplate, selector: "[novoTemplate]", inputs: ["type", "novoTemplate"] }, { kind: "directive", type: i2$1.PaddingDirective, selector: "[p],[padding],[paddingTop],[paddingRight],[paddingBottom],[paddingLeft],[paddingX],[paddingY],[pt],[pr],[pb],[pl],[px],[py]", inputs: ["padding", "p", "paddingLeft", "pl", "paddingRight", "pr", "paddingTop", "pt", "paddingBottom", "pb", "paddingX", "px", "paddingY", "py"] }, { kind: "directive", type: i2$1.ThemeColorDirective, selector: "[theme]", inputs: ["theme"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: DataTableRowsExample, decorators: [{
            type: Component,
            args: [{ selector: 'data-table-rows-example', changeDetection: ChangeDetectionStrategy.OnPush, standalone: false, template: "<h6>Change Dataset</h6>\n<novo-tiles [options]=\"dataSetOptions\" (onChange)=\"loadDataset($event)\" [(ngModel)]=\"loadedDataSet\"></novo-tiles>\n<h6>Change Pagination Style</h6>\n<novo-tiles [options]=\"paginationTypeOptions\" (onChange)=\"switchPaginationType($event)\"\n  [(ngModel)]=\"loadedPaginationType\"></novo-tiles>\n<h6>Change Pagination Placement</h6>\n<novo-tiles [options]=\"paginationPlacementOptions\" (onChange)=\"switchPaginationPlacement($event)\"\n  [(ngModel)]=\"loadedPaginationPlacement\"></novo-tiles>\n<h6>Toggle Global Search</h6>\n<novo-tiles [options]=\"globalSearchOptions\" (onChange)=\"toggleGlobalSearch($event)\" [(ngModel)]=\"loadedGlobalSearch\">\n</novo-tiles>\n<h6>Configure Columns</h6>\n<button theme=\"primary\" (click)=\"configureColumns()\">Configure Columns</button>\n<h6>Configure Columns</h6>\n<button theme=\"primary\" (click)=\"toggleRowDetails(true)\">Show Row Details (first table)</button>\n<button theme=\"primary\" (click)=\"toggleRowDetails(false)\">Hide Row Details (first table)</button>\n<h6>Enable Selection Retention</h6>\n<novo-checkbox label=\"Paginated Selection Retention Enabled\" [(ngModel)]=\"retentionEnabled\"\n  (ngModelChange)=\"toggle($event)\"></novo-checkbox>\nSelection retention can be configured to keep records selected across pagination, sorting, and filtering\n\n<div class=\"fixedWindowSize\">\n  <novo-data-table [rows]=\"basicRows\"\n    [columns]=\"sharedColumns\"\n    [allowMultipleFilters]=\"true\"\n    [hideGlobalSearch]=\"!globalSearchEnabled\"\n    [displayedColumns]=\"sharedDisplayColumns\"\n    [paginationOptions]=\"sharedPaginationOptions\"\n    [selectionOptions]=\"selectionOptions\"\n    name=\"demo-basic-rows\"\n    [refreshSubject]=\"refreshSubject\"\n    (preferencesChanged)=\"onPreferencesChanged($event)\"\n    (resized)=\"resized($event)\"\n    (toggledFilter)=\"processCustomFilter($event)\"\n    [activeRowIdentifier]=\"selectedRecordId\"\n    [fixedHeader]=\"true\"\n    #basic>\n    <!-- Custom Header -->\n    <ng-template novoTemplate=\"customHeader\">\n      <div class=\"custom-header-buttons\">\n        <button theme=\"secondary\"\n        (click)=\"configureColumns()\">Config</button>\n        <span>Total: {{ basic.dataSource.currentTotal }}</span>\n      </div>\n    </ng-template>\n    <!-- Custom Actions -->\n    <ng-template novoTemplate=\"customActions\">\n      <novo-data-table-clear-button *ngIf=\"basic.state.userFiltered\"></novo-data-table-clear-button>\n      <button theme=\"secondary\"\n        (click)=\"refresh()\">Refresh</button>\n      <novo-dropdown side=\"right\">\n        <button theme=\"primary\"\n          icon=\"collapse\"\n          inverse>\n          <span *ngIf=\"basic.state.selected.length === 0\">Actions</span>\n          <span *ngIf=\"basic.state.selected.length !== 0\">{{ basic.state.selected.length }}!</span>\n        </button>\n        <list>\n          <item>Action 1</item>\n          <item>Action 2</item>\n          <item [disabled]=\"basic.state.selected.length === 0\">Action 3</item>\n        </list>\n      </novo-dropdown>\n    </ng-template>\n    <!-- Custom Empty Message -->\n    <ng-template novoTemplate=\"emptyMessage\">Yo! No Records!</ng-template>\n    <!-- Custom No Results Message -->\n    <ng-template novoTemplate=\"noResultsMessage\">Yo! That search is really complex, no data matches that!</ng-template>\n    <!-- Custom Cell for ID Column -->\n    <ng-template novoTemplate=\"id\"\n      let-row\n      let-col=\"col\">\n      <i class=\"bhi-bull\"></i> {{ row.id }}\n    </ng-template>\n    <!-- Custom Cell -- passed with template property on Column -->\n    <ng-template novoTemplate=\"custom\"\n      let-row\n      let-col=\"col\">\n      <b>CUSTOM</b>&nbsp; {{ row.name }}\n    </ng-template>\n    <!-- Row Details Template -->\n    <ng-template novoTemplate=\"expandedRow\"\n      let-row>\n      Why look at that, you clicked the details!\n    </ng-template>\n    <!-- Custom Status Filter -->\n    <ng-template novoTemplate=\"column-filter-status\">\n      <novo-tiles [options]=\"customStatusColumnOptions\" (onChange)=\"filterList($event)\" padding=\"md\"\n        [(ngModel)]=\"customStatusColumnValue\"></novo-tiles>\n    </ng-template>\n  </novo-data-table>\n</div>", styles: [".fixedWindowSize{height:450px}novo-data-table{height:100%}.custom-header-buttons{display:flex;align-items:center}.custom-header-buttons>*{margin-right:.2rem}\n"] }]
        }], ctorParameters: () => [{ type: i0.ChangeDetectorRef }, { type: i1$1.NovoModalService }], propDecorators: { table: [{
                type: ViewChild,
                args: ['basic']
            }] } });

/**
 * @title Data Table Service Example
 */
class DataTableServiceExample {
    constructor(ref, modalService) {
        this.ref = ref;
        this.modalService = modalService;
        // Table configuration
        this.dataSetOptions = [
            { label: 'Dataset #1', value: 1 },
            { label: 'Dataset #2', value: 2 },
            { label: 'Dataset #3', value: 3 },
        ];
        this.loadedDataSet = 1;
        this.paginationTypeOptions = [
            { label: 'Standard', value: 'standard' },
            { label: 'Basic', value: 'basic' },
        ];
        this.loadedPaginationType = 'standard';
        this.paginationPlacementOptions = [
            { label: 'Top', value: false },
            { label: 'Bottom', value: true },
        ];
        this.loadedPaginationPlacement = false;
        this.globalSearchOptions = [
            { label: 'Show', value: true },
            { label: 'Hide', value: false },
        ];
        this.loadedGlobalSearch = false;
        // Shared configuration
        this.sharedColumns = [
            {
                id: 'preview',
                type: 'action',
                enabled: true,
                handlers: {
                    click: this.log.bind(this),
                },
                action: {
                    icon: 'preview',
                },
            },
            {
                id: 'actions',
                type: 'action',
                label: 'Actions',
                enabled: true,
                action: {
                    options: [
                        { label: 'Action 1', handlers: { click: this.log.bind(this) } },
                        { label: 'Action 2', handlers: { click: this.log.bind(this) }, disabled: true },
                        { label: 'Action 3', handlers: { click: this.log.bind(this) }, disabledFunc: this.checkDisabled.bind(this) },
                    ],
                },
            },
            {
                id: 'id',
                label: 'ID',
                enabled: true,
                type: 'text',
                filterable: {
                    type: 'number',
                },
                sortable: true,
            },
            {
                id: 'telephone',
                label: 'Phone',
                type: 'link:tel',
                attributes: {
                    target: '_blank',
                },
            },
            {
                id: 'email',
                label: 'Email',
                type: 'link:mailto',
                attributes: {
                    target: '_blank',
                },
            },
            {
                id: 'address',
                label: 'Address',
                type: 'text',
                format: ['$city, $state', '$city', '$state'],
            },
            {
                id: 'embeddedObj',
                label: 'Embedded (hard)',
                enabled: true,
                format: ['$another.id', '$firstName $lastName'],
                type: 'link',
                handlers: {
                    click: this.log.bind(this),
                },
                filterable: true,
            },
            {
                id: 'simpleEmbeddedObj',
                label: 'Embedded (simple)',
                enabled: true,
                format: '$id',
                type: 'text',
                filterable: true,
                sortable: true,
            },
            {
                id: 'date',
                label: 'Date',
                enabled: true,
                type: 'date',
                filterable: {
                    type: 'date',
                    allowCustomRange: true,
                },
                sortable: true,
            },
            {
                id: 'dateTime',
                label: 'DateTime',
                enabled: false,
                type: 'datetime',
            },
            {
                id: 'time',
                label: 'Time',
                enabled: false,
                type: 'time',
            },
            {
                id: 'money',
                label: 'Money',
                enabled: false,
                type: 'currency',
                filterable: true,
                sortable: true,
            },
            {
                id: 'percent',
                label: 'Percent',
                enabled: true,
                type: 'percent',
                filterable: true,
                sortable: true,
            },
            {
                id: 'name',
                label: 'Name',
                labelIcon: 'bull',
                enabled: true,
                type: 'text',
                template: 'custom',
            },
            {
                id: 'status',
                label: 'Status',
                enabled: true,
                type: 'text',
                filterable: true,
                sortable: true,
            },
            {
                id: 'priority',
                label: 'Priority',
                enabled: true,
                type: 'text',
                filterable: {
                    type: 'multi-select',
                    options: this.getPriorityOptions(),
                },
                sortable: true,
            },
            {
                id: 'enabled',
                label: 'Enabled',
                enabled: true,
                type: 'text',
                sortable: true,
                filterable: {
                    type: 'select',
                    options: [
                        { value: true, label: 'True' },
                        { value: false, label: 'False' },
                    ],
                },
            },
            {
                id: 'edit',
                type: 'action',
                enabled: true,
                disabled: true,
                handlers: {
                    click: this.log.bind(this),
                },
                action: {
                    icon: 'edit',
                },
            },
        ];
        this.sharedDisplayColumns = [
            'selection',
            'expand',
            'preview',
            'actions',
            'id',
            'date',
            'name',
            'telephone',
            'email',
            'simpleEmbeddedObj',
            'status',
            'priority',
            'percent',
            'embeddedObj',
            'edit',
        ];
        this.sharedPaginationOptions = {
            theme: 'standard',
            pageSize: 10,
            pageSizeOptions: [10, 50, 100, 250, 500],
        };
        this.widePaginationOptions = {
            theme: 'basic-wide',
            pageSize: 10,
            pageSizeOptions: [10, 50, 100, 250, 500],
        };
        this.sharedSearchOptions = {
            placeholder: 'Search for things...',
            tooltip: 'HELLO',
        };
        this.sharedDefaultSort = {
            id: 'id',
            value: 'asc',
        };
        this.globalSearchEnabled = false;
        this.refreshSubject = new Subject();
        this.staticDataSet1 = [];
        this.staticDataSet2 = [];
        this.staticDataSet3 = [];
        for (let i = 0; i < 1000; i++) {
            const day = i < 500 ? dateFns.subDays(new Date(), i) : dateFns.addDays(new Date(), i - 500);
            this.staticDataSet1.push({
                id: i,
                embeddedObj: { id: i, test: `HMM ${i}`, another: { id: 777 } },
                simpleEmbeddedObj: { id: i },
                name: `(1) Name ${i}`,
                status: `(1) Status ${i}`,
                priority: this.getPriority(),
                enabled: i % 2 === 0,
                date: day,
                dateTime: day,
                time: day,
                money: i + 10,
                percent: i / 100,
                telephone: '555-555-5555',
                email: 'test@google.com',
                address: { city: 'City', state: null },
            });
            this.staticDataSet2.push({
                id: i + 1001,
                embeddedObj: { id: i, test: `HMM ${i}`, another: { id: 777 } },
                simpleEmbeddedObj: { id: i },
                name: `(2) Name ${i}`,
                status: `(2) Status ${i}`,
                priority: this.getPriority(),
                enabled: i % 2 === 0,
                date: day,
                dateTime: day,
                time: day,
                money: i + 10,
                percent: i / 100,
                telephone: '555-555-5555',
                email: 'test@google.com',
                address: { city: 'City', state: 'State' },
            });
        }
        this.basicService = new StaticDataTableService([...this.staticDataSet1]);
    }
    getPriority() {
        const x = Math.round(Math.random() * 50);
        return 'test ' + x.toString();
    }
    getPriorityOptions() {
        const options = new Array();
        let i;
        for (i = 0; i < 49; i++) {
            options.push('test ' + i.toString());
        }
        return options;
    }
    switchPaginationType(type) {
        this.sharedPaginationOptions = Object.assign({}, this.sharedPaginationOptions, { theme: type });
        this.ref.detectChanges();
    }
    switchPaginationPlacement(onFooter) {
        this.sharedPaginationOptions = Object.assign({}, this.sharedPaginationOptions, { onFooter });
        this.ref.detectChanges();
    }
    loadDataset(setIndex) {
        switch (setIndex) {
            case 1:
                this.basicService = new StaticDataTableService([...this.staticDataSet1]);
                break;
            case 2:
                this.basicService = new StaticDataTableService([...this.staticDataSet2]);
                break;
            case 3:
                this.basicService = new StaticDataTableService([...this.staticDataSet3]);
                break;
            default:
                break;
        }
    }
    toggleGlobalSearch(toggle) {
        this.globalSearchEnabled = toggle;
        this.ref.detectChanges();
    }
    log(event) {
        console.log('[DataTable] Event Triggered!', event); // tslint:disable-line
    }
    checkDisabled() {
        return true;
    }
    configureColumns() {
        this.modalService
            .open(ConfigureColumnsModal, { columns: this.sharedColumns })
            .onClosed.then((columns) => {
            if (columns) {
                const enabledColumns = columns.filter((column) => column.enabled);
                this.sharedDisplayColumns = ['selection', 'expand', ...enabledColumns.map((column) => column.id)];
                this.ref.markForCheck();
            }
        });
    }
    onPreferencesChanged(event) {
        console.log('Preferences changed (persist manually):', event); // tslint:disable-line
    }
    refresh() {
        this.refreshSubject.next();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: DataTableServiceExample, deps: [{ token: i0.ChangeDetectorRef }, { token: i1$1.NovoModalService }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: DataTableServiceExample, isStandalone: false, selector: "data-table-service-example", ngImport: i0, template: "<novo-data-table [dataTableService]=\"basicService\"\n                 [columns]=\"sharedColumns\"\n                 [allowMultipleFilters]=\"true\"\n                 [hideGlobalSearch]=\"!globalSearchEnabled\"\n                 [displayedColumns]=\"sharedDisplayColumns\"\n                 [paginationOptions]=\"sharedPaginationOptions\">\n  <!-- Custom Cell -- passed with template property on Column -->\n  <ng-template novoTemplate=\"custom\"\n               let-row\n               let-col=\"col\">\n    <b>CUSTOM</b>&nbsp; {{ row.name }}\n  </ng-template>\n</novo-data-table>\n", styles: [":host{min-height:400px}\n"], dependencies: [{ kind: "component", type: i2$1.NovoDataTable, selector: "novo-data-table", inputs: ["displayedColumns", "paginationOptions", "searchOptions", "selectionOptions", "defaultSort", "name", "allowMultipleFilters", "rowIdentifier", "activeRowIdentifier", "trackByFn", "templates", "fixedHeader", "paginatorDataFeatureId", "maxSelected", "canSelectAll", "allMatchingSelected", "overrideTotal", "paginationRefreshSubject", "dataTableService", "rows", "outsideFilter", "refreshSubject", "columns", "customFilter", "hasExandedRows", "forceShowHeader", "hideGlobalSearch", "listInteractions"], outputs: ["resized", "preferencesChanged", "allSelected", "toggledFilter"] }, { kind: "directive", type: i2$1.NovoTemplate, selector: "[novoTemplate]", inputs: ["type", "novoTemplate"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: DataTableServiceExample, decorators: [{
            type: Component,
            args: [{ selector: 'data-table-service-example', changeDetection: ChangeDetectionStrategy.OnPush, standalone: false, template: "<novo-data-table [dataTableService]=\"basicService\"\n                 [columns]=\"sharedColumns\"\n                 [allowMultipleFilters]=\"true\"\n                 [hideGlobalSearch]=\"!globalSearchEnabled\"\n                 [displayedColumns]=\"sharedDisplayColumns\"\n                 [paginationOptions]=\"sharedPaginationOptions\">\n  <!-- Custom Cell -- passed with template property on Column -->\n  <ng-template novoTemplate=\"custom\"\n               let-row\n               let-col=\"col\">\n    <b>CUSTOM</b>&nbsp; {{ row.name }}\n  </ng-template>\n</novo-data-table>\n", styles: [":host{min-height:400px}\n"] }]
        }], ctorParameters: () => [{ type: i0.ChangeDetectorRef }, { type: i1$1.NovoModalService }] });

/**
 * @title Basic Drop Down
 */
class BasicDropDownExample {
    constructor() {
        this.asyncItems = [];
    }
    clickMe(event) {
        console.log(event);
    }
    async ngAfterContentInit() {
        this.asyncItems = await this.getAsyncItems();
    }
    async getAsyncItems() {
        return [...Array(10).keys()].map((it) => `Action ${it}`);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: BasicDropDownExample, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: BasicDropDownExample, isStandalone: false, selector: "basic-drop-down-example", ngImport: i0, template: "<novo-dropdown>\n  <novo-button theme=\"secondary\" icon=\"collapse\">Actions</novo-button>\n  <novo-optgroup label=\"Engage\">\n    <novo-option (click)=\"clickMe('Hello!')\">Send Email</novo-option>\n    <novo-option (click)=\"clickMe('Another!')\">Send SMS</novo-option>\n    <novo-option tooltip=\"Test tooltip :)\"\n      tooltipPosition=\"right\"\n      (click)=\"clickMe()\"\n      disabled>Advertise Shifts</novo-option>\n  </novo-optgroup>\n  <novo-optgroup label=\"Manage\">\n    <novo-option (click)=\"clickMe('Hello!')\">Find Matching Jobs</novo-option>\n    <novo-option (click)=\"clickMe('Another!')\">Update Record</novo-option>\n    <novo-option tooltip=\"Test tooltip :)\"\n      tooltipPosition=\"right\"\n      (click)=\"clickMe()\"\n      disabled>Delete Record</novo-option>\n  </novo-optgroup>\n</novo-dropdown>\n\n<novo-dropdown side=\"right\">\n  <novo-button theme=\"icon\" icon=\"menu\"></novo-button>\n  <novo-optgroup>\n    <novo-option *ngFor=\"let action of asyncItems\" (click)=\"clickMe(action)\">{{action}}</novo-option>\n    <novo-divider></novo-divider>\n    <novo-option>Menu Item With Lots of Text in it to Show Dynamic Width</novo-option>\n  </novo-optgroup>\n</novo-dropdown>", styles: [":host{display:flex;flex-flow:row nowrap;justify-content:space-between}\n"], dependencies: [{ kind: "directive", type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "component", type: i2$1.NovoButtonElement, selector: "novo-button,button[theme]", inputs: ["color", "side", "size", "theme", "loading", "icon", "secondIcon", "disabled"] }, { kind: "component", type: i2$1.NovoDividerComponent, selector: "novo-divider", inputs: ["vertical", "inset"] }, { kind: "directive", type: i2$1.TooltipDirective, selector: "[tooltip]", inputs: ["tooltip", "tooltipPosition", "tooltipType", "tooltipSize", "tooltipBounce", "tooltipNoAnimate", "tooltipRounded", "tooltipAlways", "tooltipPreline", "removeTooltipArrow", "tooltipAutoPosition", "tooltipIsHTML", "tooltipCloseOnClick", "tooltipOnOverflow", "tooltipActive"] }, { kind: "component", type: i2$1.NovoDropdownElement, selector: "novo-dropdown", inputs: ["parentScrollSelector", "parentScrollAction", "containerClass", "side", "scrollStrategy", "keepOpen", "height", "width", "appendToBody", "multiple", "scrollToActiveItemOnOpen"], outputs: ["toggled"] }, { kind: "directive", type: i2$1.ThemeColorDirective, selector: "[theme]", inputs: ["theme"] }, { kind: "component", type: i2$1.NovoOption, selector: "novo-option", inputs: ["selected", "keepOpen", "novoInert", "value", "disabled"], exportAs: ["novoOption"] }, { kind: "component", type: i2$1.NovoOptgroup, selector: "novo-optgroup", inputs: ["disabled", "label"], exportAs: ["novoOptgroup"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: BasicDropDownExample, decorators: [{
            type: Component,
            args: [{ selector: 'basic-drop-down-example', standalone: false, template: "<novo-dropdown>\n  <novo-button theme=\"secondary\" icon=\"collapse\">Actions</novo-button>\n  <novo-optgroup label=\"Engage\">\n    <novo-option (click)=\"clickMe('Hello!')\">Send Email</novo-option>\n    <novo-option (click)=\"clickMe('Another!')\">Send SMS</novo-option>\n    <novo-option tooltip=\"Test tooltip :)\"\n      tooltipPosition=\"right\"\n      (click)=\"clickMe()\"\n      disabled>Advertise Shifts</novo-option>\n  </novo-optgroup>\n  <novo-optgroup label=\"Manage\">\n    <novo-option (click)=\"clickMe('Hello!')\">Find Matching Jobs</novo-option>\n    <novo-option (click)=\"clickMe('Another!')\">Update Record</novo-option>\n    <novo-option tooltip=\"Test tooltip :)\"\n      tooltipPosition=\"right\"\n      (click)=\"clickMe()\"\n      disabled>Delete Record</novo-option>\n  </novo-optgroup>\n</novo-dropdown>\n\n<novo-dropdown side=\"right\">\n  <novo-button theme=\"icon\" icon=\"menu\"></novo-button>\n  <novo-optgroup>\n    <novo-option *ngFor=\"let action of asyncItems\" (click)=\"clickMe(action)\">{{action}}</novo-option>\n    <novo-divider></novo-divider>\n    <novo-option>Menu Item With Lots of Text in it to Show Dynamic Width</novo-option>\n  </novo-optgroup>\n</novo-dropdown>", styles: [":host{display:flex;flex-flow:row nowrap;justify-content:space-between}\n"] }]
        }] });

/**
 * @title Custom Drop Down
 */
class CustomDropDownExample {
    clickMe(event) {
        window.alert(event);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: CustomDropDownExample, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: CustomDropDownExample, isStandalone: false, selector: "custom-drop-down-example", ngImport: i0, template: "<novo-dropdown containerClass=\"custom-class\"\n  scrollStrategy=\"close\">\n  <button type=\"button\"\n    theme=\"secondary\"\n    icon=\"collapse\"\n    inverse>I Have A Custom Class!</button>\n  <novo-optgroup>\n    <novo-option (action)=\"clickMe('Hello!')\">Action 1</novo-option>\n    <novo-option (action)=\"clickMe('Another!')\">Action 2</novo-option>\n  </novo-optgroup>\n</novo-dropdown>", styles: [""], dependencies: [{ kind: "component", type: i2$1.NovoButtonElement, selector: "novo-button,button[theme]", inputs: ["color", "side", "size", "theme", "loading", "icon", "secondIcon", "disabled"] }, { kind: "component", type: i2$1.NovoDropdownElement, selector: "novo-dropdown", inputs: ["parentScrollSelector", "parentScrollAction", "containerClass", "side", "scrollStrategy", "keepOpen", "height", "width", "appendToBody", "multiple", "scrollToActiveItemOnOpen"], outputs: ["toggled"] }, { kind: "directive", type: i2$1.ThemeColorDirective, selector: "[theme]", inputs: ["theme"] }, { kind: "component", type: i2$1.NovoOption, selector: "novo-option", inputs: ["selected", "keepOpen", "novoInert", "value", "disabled"], exportAs: ["novoOption"] }, { kind: "component", type: i2$1.NovoOptgroup, selector: "novo-optgroup", inputs: ["disabled", "label"], exportAs: ["novoOptgroup"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: CustomDropDownExample, decorators: [{
            type: Component,
            args: [{ selector: 'custom-drop-down-example', standalone: false, template: "<novo-dropdown containerClass=\"custom-class\"\n  scrollStrategy=\"close\">\n  <button type=\"button\"\n    theme=\"secondary\"\n    icon=\"collapse\"\n    inverse>I Have A Custom Class!</button>\n  <novo-optgroup>\n    <novo-option (action)=\"clickMe('Hello!')\">Action 1</novo-option>\n    <novo-option (action)=\"clickMe('Another!')\">Action 2</novo-option>\n  </novo-optgroup>\n</novo-dropdown>" }]
        }] });

/**
 * @title Large Drop Down
 */
class LargeDropDownExample {
    constructor() {
        this.MOCK_WORDS = [
            'lorem',
            'ipsum',
            'dolor',
            'sit',
            'amet',
            'consectetur',
            'adipiscing',
            'elit',
            'curabitur',
            'vel',
            'hendrerit',
            'libero',
            'eleifend',
            'blandit',
            'nunc',
            'ornare',
            'odio',
            'ut',
            'orci',
            'gravida',
            'imperdiet',
            'nullam',
            'purus',
            'lacinia',
            'a',
            'pretium',
            'quis',
            'congue',
            'praesent',
            'sagittis',
            'laoreet',
            'auctor',
            'mauris',
            'non',
            'velit',
            'eros',
            'dictum',
            'proin',
            'accumsan',
            'sapien',
            'nec',
            'massa',
            'volutpat',
            'venenatis',
            'sed',
            'eu',
            'molestie',
            'lacus',
            'quisque',
            'porttitor',
            'ligula',
            'dui',
            'mollis',
            'tempus',
            'at',
            'magna',
            'vestibulum',
            'turpis',
            'ac',
            'diam',
            'tincidunt',
            'id',
            'condimentum',
            'enim',
            'sodales',
            'in',
            'hac',
            'habitasse',
            'platea',
            'dictumst',
            'aenean',
            'neque',
            'fusce',
            'augue',
            'leo',
            'eget',
            'semper',
            'mattis',
            'tortor',
            'scelerisque',
            'nulla',
            'interdum',
            'tellus',
            'malesuada',
            'rhoncus',
            'porta',
            'sem',
            'aliquet',
            'et',
            'nam',
            'suspendisse',
            'potenti',
            'vivamus',
            'luctus',
            'fringilla',
            'erat',
            'donec',
            'justo',
            'vehicula',
            'ultricies',
            'varius',
            'ante',
            'primis',
            'faucibus',
            'ultrices',
            'posuere',
            'cubilia',
            'curae',
            'etiam',
            'cursus',
            'aliquam',
            'quam',
            'dapibus',
            'nisl',
            'feugiat',
            'egestas',
            'class',
            'aptent',
            'taciti',
            'sociosqu',
            'ad',
            'litora',
            'torquent',
            'per',
            'conubia',
            'nostra',
            'inceptos',
            'himenaeos',
            'phasellus',
            'nibh',
            'pulvinar',
            'vitae',
            'urna',
            'iaculis',
            'lobortis',
            'nisi',
            'viverra',
            'arcu',
            'morbi',
            'pellentesque',
            'metus',
            'commodo',
            'ut',
            'facilisis',
            'felis',
            'tristique',
            'ullamcorper',
            'placerat',
            'aenean',
            'convallis',
            'sollicitudin',
            'integer',
            'rutrum',
            'duis',
            'est',
            'etiam',
            'bibendum',
            'donec',
            'pharetra',
            'vulputate',
            'maecenas',
            'mi',
            'fermentum',
            'consequat',
            'suscipit',
            'aliquam',
            'habitant',
            'senectus',
            'netus',
            'fames',
            'quisque',
            'euismod',
            'curabitur',
            'lectus',
            'elementum',
            'tempor',
            'risus',
            'cras',
        ];
    }
    clickMe(data) {
        console.log('CLICKED!', data); // tslint:disable-line
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: LargeDropDownExample, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: LargeDropDownExample, isStandalone: false, selector: "large-drop-down-example", ngImport: i0, template: "<novo-dropdown height=\"250\">\n  <button type=\"button\"\n    theme=\"secondary\"\n    icon=\"collapse\"\n    inverse>Lots of Data Points!</button>\n  <novo-optgroup>\n    <novo-option *ngFor=\"let name of MOCK_WORDS\"\n      (action)=\"clickMe(name)\">{{ name }}</novo-option>\n  </novo-optgroup>\n</novo-dropdown>", styles: [""], dependencies: [{ kind: "directive", type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "component", type: i2$1.NovoButtonElement, selector: "novo-button,button[theme]", inputs: ["color", "side", "size", "theme", "loading", "icon", "secondIcon", "disabled"] }, { kind: "component", type: i2$1.NovoDropdownElement, selector: "novo-dropdown", inputs: ["parentScrollSelector", "parentScrollAction", "containerClass", "side", "scrollStrategy", "keepOpen", "height", "width", "appendToBody", "multiple", "scrollToActiveItemOnOpen"], outputs: ["toggled"] }, { kind: "directive", type: i2$1.ThemeColorDirective, selector: "[theme]", inputs: ["theme"] }, { kind: "component", type: i2$1.NovoOption, selector: "novo-option", inputs: ["selected", "keepOpen", "novoInert", "value", "disabled"], exportAs: ["novoOption"] }, { kind: "component", type: i2$1.NovoOptgroup, selector: "novo-optgroup", inputs: ["disabled", "label"], exportAs: ["novoOptgroup"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: LargeDropDownExample, decorators: [{
            type: Component,
            args: [{ selector: 'large-drop-down-example', standalone: false, template: "<novo-dropdown height=\"250\">\n  <button type=\"button\"\n    theme=\"secondary\"\n    icon=\"collapse\"\n    inverse>Lots of Data Points!</button>\n  <novo-optgroup>\n    <novo-option *ngFor=\"let name of MOCK_WORDS\"\n      (action)=\"clickMe(name)\">{{ name }}</novo-option>\n  </novo-optgroup>\n</novo-dropdown>" }]
        }] });

/**
 * @title Multi Drop Down
 */
class MultiDropDownExample {
    clickMe(data) {
        console.log('CLICKED!', data); // tslint:disable-line
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: MultiDropDownExample, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: MultiDropDownExample, isStandalone: false, selector: "multi-drop-down-example", ngImport: i0, template: "<novo-dropdown keepOpen>\n  <novo-button type=\"button\"\n    theme=\"secondary\"\n    icon=\"collapse\"\n    inverse>Keep Open</novo-button>\n  <novo-field class=\"dropdown-search\">\n    <input novoInput placeholder=\"Search...\" type=\"search\" width=\"100%\" />\n    <novo-icon novoPrefix>search</novo-icon>\n  </novo-field>\n  <novo-divider></novo-divider>\n  <novo-optgroup>\n    <novo-option (click)=\"clickMe('Hello!')\">Action 1</novo-option>\n    <novo-option (click)=\"clickMe('Another!')\">Action 2</novo-option>\n  </novo-optgroup>\n  <novo-divider></novo-divider>\n  <div class=\"dropdown-footer\">\n    <button theme=\"dialogue\" icon=\"add-thin\">Add</button>\n  </div>\n</novo-dropdown>\n\n<novo-dropdown side=\"right\" multiple>\n  <novo-button theme=\"secondary\" icon=\"overview\" side=\"left\">Hide/Show</novo-button>\n  <novo-option>Action 1</novo-option>\n  <novo-option tooltip=\"Test tooltip :)\" tooltipPosition=\"left\">Action 2</novo-option>\n  <novo-option>Action 3</novo-option>\n  <novo-option>Action 4</novo-option>\n  <novo-option>Action 5</novo-option>\n  <novo-option>Action 6</novo-option>\n  <novo-option>Action 7</novo-option>\n  <novo-option>Action 8</novo-option>\n  <novo-option>Action 9</novo-option>\n  <novo-option>Action 10</novo-option>\n</novo-dropdown>", styles: [":host{display:flex;flex-flow:row nowrap;justify-content:space-between}.dropdown-search{padding:1rem}.dropdown-footer{padding:.5rem}\n"], dependencies: [{ kind: "component", type: i2$1.NovoButtonElement, selector: "novo-button,button[theme]", inputs: ["color", "side", "size", "theme", "loading", "icon", "secondIcon", "disabled"] }, { kind: "component", type: i2$1.NovoDividerComponent, selector: "novo-divider", inputs: ["vertical", "inset"] }, { kind: "directive", type: i2$1.TooltipDirective, selector: "[tooltip]", inputs: ["tooltip", "tooltipPosition", "tooltipType", "tooltipSize", "tooltipBounce", "tooltipNoAnimate", "tooltipRounded", "tooltipAlways", "tooltipPreline", "removeTooltipArrow", "tooltipAutoPosition", "tooltipIsHTML", "tooltipCloseOnClick", "tooltipOnOverflow", "tooltipActive"] }, { kind: "component", type: i2$1.NovoDropdownElement, selector: "novo-dropdown", inputs: ["parentScrollSelector", "parentScrollAction", "containerClass", "side", "scrollStrategy", "keepOpen", "height", "width", "appendToBody", "multiple", "scrollToActiveItemOnOpen"], outputs: ["toggled"] }, { kind: "component", type: i2$1.NovoIconComponent, selector: "novo-icon", inputs: ["raised", "theme", "shape", "color", "size", "smaller", "larger", "alt", "name"] }, { kind: "directive", type: i2$1.ThemeColorDirective, selector: "[theme]", inputs: ["theme"] }, { kind: "component", type: i2$1.NovoOption, selector: "novo-option", inputs: ["selected", "keepOpen", "novoInert", "value", "disabled"], exportAs: ["novoOption"] }, { kind: "component", type: i2$1.NovoOptgroup, selector: "novo-optgroup", inputs: ["disabled", "label"], exportAs: ["novoOptgroup"] }, { kind: "component", type: i2$1.NovoFieldElement, selector: "novo-field", inputs: ["layout", "appearance", "customOverlayOrigin", "width"], outputs: ["valueChanges", "stateChanges"] }, { kind: "directive", type: i2$1.NovoInput, selector: "input[novoInput], textarea[novoInput], select[novoInput]", inputs: ["disabled", "id", "placeholder", "required", "type", "value", "readonly"], outputs: ["onSelect"] }, { kind: "directive", type: i2$1.NovoFieldPrefixDirective, selector: "[novoPrefix]" }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: MultiDropDownExample, decorators: [{
            type: Component,
            args: [{ selector: 'multi-drop-down-example', standalone: false, template: "<novo-dropdown keepOpen>\n  <novo-button type=\"button\"\n    theme=\"secondary\"\n    icon=\"collapse\"\n    inverse>Keep Open</novo-button>\n  <novo-field class=\"dropdown-search\">\n    <input novoInput placeholder=\"Search...\" type=\"search\" width=\"100%\" />\n    <novo-icon novoPrefix>search</novo-icon>\n  </novo-field>\n  <novo-divider></novo-divider>\n  <novo-optgroup>\n    <novo-option (click)=\"clickMe('Hello!')\">Action 1</novo-option>\n    <novo-option (click)=\"clickMe('Another!')\">Action 2</novo-option>\n  </novo-optgroup>\n  <novo-divider></novo-divider>\n  <div class=\"dropdown-footer\">\n    <button theme=\"dialogue\" icon=\"add-thin\">Add</button>\n  </div>\n</novo-dropdown>\n\n<novo-dropdown side=\"right\" multiple>\n  <novo-button theme=\"secondary\" icon=\"overview\" side=\"left\">Hide/Show</novo-button>\n  <novo-option>Action 1</novo-option>\n  <novo-option tooltip=\"Test tooltip :)\" tooltipPosition=\"left\">Action 2</novo-option>\n  <novo-option>Action 3</novo-option>\n  <novo-option>Action 4</novo-option>\n  <novo-option>Action 5</novo-option>\n  <novo-option>Action 6</novo-option>\n  <novo-option>Action 7</novo-option>\n  <novo-option>Action 8</novo-option>\n  <novo-option>Action 9</novo-option>\n  <novo-option>Action 10</novo-option>\n</novo-dropdown>", styles: [":host{display:flex;flex-flow:row nowrap;justify-content:space-between}.dropdown-search{padding:1rem}.dropdown-footer{padding:.5rem}\n"] }]
        }] });

/**
 * @title Drop Down Positions
 */
class PositionDropDownExample {
    constructor() {
        this.POSITION_OPTIONS = [
            {
                name: 'default (left)',
                description: 'Prefer bottom-left, with fallback positions (in order): top-left, bottom-right, top-right, center-left, center-right',
            },
            {
                name: 'right',
                description: 'Prefer bottom-right, with fallback positions (in order): top-right, bottom-left, top-left, center-left, center-right',
            },
            {
                name: 'above-below',
                description: 'Prefer bottom-left, with fallback positions (in order): top-left, bottom-right, top-right (no center)',
            },
            {
                name: 'right-above-below',
                description: 'Prefer bottom-left, with fallback positions (in order): top-left, bottom-right, top-right (no center)',
            },
            { name: 'center', description: 'Prefer center-left, with fallback positions above and below, but always covering the dropdown' },
            { name: 'bottom', description: 'Prefer bottom-left, with fallback position of bottom-right' },
            { name: 'bottom-left', description: 'Always popup to the bottom-left' },
            { name: 'bottom-right', description: 'Always popup to the bottom-right' },
            { name: 'top-left', description: 'Always popup to the top-left' },
            { name: 'top-right', description: 'Always popup to the top-right' },
        ];
    }
    clickMe(data) {
        console.log('CLICKED!', data); // tslint:disable-line
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: PositionDropDownExample, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: PositionDropDownExample, isStandalone: false, selector: "position-drop-down-example", ngImport: i0, template: "<novo-dropdown side=\"default\">\n  <button type=\"button\"\n    theme=\"secondary\"\n    icon=\"collapse\"\n    inverse>Default</button>\n  <novo-optgroup>\n    <novo-option>Five</novo-option>\n    <novo-option>Items</novo-option>\n    <novo-option>For</novo-option>\n    <novo-option>Position</novo-option>\n    <novo-option>Test</novo-option>\n  </novo-optgroup>\n</novo-dropdown>\n<novo-dropdown side=\"right\">\n  <button type=\"button\"\n    theme=\"secondary\"\n    icon=\"collapse\"\n    inverse>Right</button>\n  <novo-optgroup>\n    <novo-option>Five</novo-option>\n    <novo-option>Items</novo-option>\n    <novo-option>For</novo-option>\n    <novo-option>Position</novo-option>\n    <novo-option>Test</novo-option>\n  </novo-optgroup>\n</novo-dropdown>\n<novo-dropdown side=\"above-below\">\n  <button type=\"button\"\n    theme=\"secondary\"\n    icon=\"collapse\"\n    inverse>Above-below</button>\n  <novo-optgroup>\n    <novo-option>Five</novo-option>\n    <novo-option>Items</novo-option>\n    <novo-option>For</novo-option>\n    <novo-option>Position</novo-option>\n    <novo-option>Test</novo-option>\n  </novo-optgroup>\n</novo-dropdown>\n<novo-dropdown side=\"right-above-below\">\n  <button type=\"button\"\n    theme=\"secondary\"\n    icon=\"collapse\"\n    inverse>Right-Above-Below</button>\n  <novo-optgroup>\n    <novo-option>Five</novo-option>\n    <novo-option>Items</novo-option>\n    <novo-option>For</novo-option>\n    <novo-option>Position</novo-option>\n    <novo-option>Test</novo-option>\n  </novo-optgroup>\n</novo-dropdown>\n<novo-dropdown side=\"center\">\n  <button type=\"button\"\n    theme=\"secondary\"\n    icon=\"collapse\"\n    inverse>Center</button>\n  <novo-optgroup>\n    <novo-option>Five</novo-option>\n    <novo-option>Items</novo-option>\n    <novo-option>For</novo-option>\n    <novo-option>Position</novo-option>\n    <novo-option>Test</novo-option>\n  </novo-optgroup>\n</novo-dropdown>\n<novo-dropdown side=\"bottom\">\n  <button type=\"button\"\n    theme=\"secondary\"\n    icon=\"collapse\"\n    inverse>Bottom</button>\n  <novo-optgroup>\n    <novo-option>Five</novo-option>\n    <novo-option>Items</novo-option>\n    <novo-option>For</novo-option>\n    <novo-option>Position</novo-option>\n    <novo-option>Test</novo-option>\n  </novo-optgroup>\n</novo-dropdown>\n<novo-dropdown side=\"bottom-left\">\n  <button type=\"button\"\n    theme=\"secondary\"\n    icon=\"collapse\"\n    inverse>Bottom-Left</button>\n  <novo-optgroup>\n    <novo-option>Five</novo-option>\n    <novo-option>Items</novo-option>\n    <novo-option>For</novo-option>\n    <novo-option>Position</novo-option>\n    <novo-option>Test</novo-option>\n  </novo-optgroup>\n</novo-dropdown>\n<novo-dropdown side=\"bottom-right\">\n  <button type=\"button\"\n    theme=\"secondary\"\n    icon=\"collapse\"\n    inverse>Bottom-Right</button>\n  <novo-optgroup>\n    <novo-option>Five</novo-option>\n    <novo-option>Items</novo-option>\n    <novo-option>For</novo-option>\n    <novo-option>Position</novo-option>\n    <novo-option>Test</novo-option>\n  </novo-optgroup>\n</novo-dropdown>\n<novo-dropdown side=\"top-left\">\n  <button type=\"button\"\n    theme=\"secondary\"\n    icon=\"collapse\"\n    inverse>Top-Left</button>\n  <novo-optgroup>\n    <novo-option>Five</novo-option>\n    <novo-option>Items</novo-option>\n    <novo-option>For</novo-option>\n    <novo-option>Position</novo-option>\n    <novo-option>Test</novo-option>\n  </novo-optgroup>\n</novo-dropdown>\n<novo-dropdown side=\"top-right\">\n  <button type=\"button\"\n    theme=\"secondary\"\n    icon=\"collapse\"\n    inverse>Top-Right</button>\n  <novo-optgroup>\n    <novo-option>Five</novo-option>\n    <novo-option>Items</novo-option>\n    <novo-option>For</novo-option>\n    <novo-option>Position</novo-option>\n    <novo-option>Test</novo-option>\n  </novo-optgroup>\n</novo-dropdown>", styles: [":host{background:#4a89dc;padding:1rem;display:flex;justify-content:space-between;align-items:center;flex-wrap:wrap;padding:.5rem}:host novo-dropdown{margin:.5rem}\n"], dependencies: [{ kind: "component", type: i2$1.NovoButtonElement, selector: "novo-button,button[theme]", inputs: ["color", "side", "size", "theme", "loading", "icon", "secondIcon", "disabled"] }, { kind: "component", type: i2$1.NovoDropdownElement, selector: "novo-dropdown", inputs: ["parentScrollSelector", "parentScrollAction", "containerClass", "side", "scrollStrategy", "keepOpen", "height", "width", "appendToBody", "multiple", "scrollToActiveItemOnOpen"], outputs: ["toggled"] }, { kind: "directive", type: i2$1.ThemeColorDirective, selector: "[theme]", inputs: ["theme"] }, { kind: "component", type: i2$1.NovoOption, selector: "novo-option", inputs: ["selected", "keepOpen", "novoInert", "value", "disabled"], exportAs: ["novoOption"] }, { kind: "component", type: i2$1.NovoOptgroup, selector: "novo-optgroup", inputs: ["disabled", "label"], exportAs: ["novoOptgroup"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: PositionDropDownExample, decorators: [{
            type: Component,
            args: [{ selector: 'position-drop-down-example', standalone: false, template: "<novo-dropdown side=\"default\">\n  <button type=\"button\"\n    theme=\"secondary\"\n    icon=\"collapse\"\n    inverse>Default</button>\n  <novo-optgroup>\n    <novo-option>Five</novo-option>\n    <novo-option>Items</novo-option>\n    <novo-option>For</novo-option>\n    <novo-option>Position</novo-option>\n    <novo-option>Test</novo-option>\n  </novo-optgroup>\n</novo-dropdown>\n<novo-dropdown side=\"right\">\n  <button type=\"button\"\n    theme=\"secondary\"\n    icon=\"collapse\"\n    inverse>Right</button>\n  <novo-optgroup>\n    <novo-option>Five</novo-option>\n    <novo-option>Items</novo-option>\n    <novo-option>For</novo-option>\n    <novo-option>Position</novo-option>\n    <novo-option>Test</novo-option>\n  </novo-optgroup>\n</novo-dropdown>\n<novo-dropdown side=\"above-below\">\n  <button type=\"button\"\n    theme=\"secondary\"\n    icon=\"collapse\"\n    inverse>Above-below</button>\n  <novo-optgroup>\n    <novo-option>Five</novo-option>\n    <novo-option>Items</novo-option>\n    <novo-option>For</novo-option>\n    <novo-option>Position</novo-option>\n    <novo-option>Test</novo-option>\n  </novo-optgroup>\n</novo-dropdown>\n<novo-dropdown side=\"right-above-below\">\n  <button type=\"button\"\n    theme=\"secondary\"\n    icon=\"collapse\"\n    inverse>Right-Above-Below</button>\n  <novo-optgroup>\n    <novo-option>Five</novo-option>\n    <novo-option>Items</novo-option>\n    <novo-option>For</novo-option>\n    <novo-option>Position</novo-option>\n    <novo-option>Test</novo-option>\n  </novo-optgroup>\n</novo-dropdown>\n<novo-dropdown side=\"center\">\n  <button type=\"button\"\n    theme=\"secondary\"\n    icon=\"collapse\"\n    inverse>Center</button>\n  <novo-optgroup>\n    <novo-option>Five</novo-option>\n    <novo-option>Items</novo-option>\n    <novo-option>For</novo-option>\n    <novo-option>Position</novo-option>\n    <novo-option>Test</novo-option>\n  </novo-optgroup>\n</novo-dropdown>\n<novo-dropdown side=\"bottom\">\n  <button type=\"button\"\n    theme=\"secondary\"\n    icon=\"collapse\"\n    inverse>Bottom</button>\n  <novo-optgroup>\n    <novo-option>Five</novo-option>\n    <novo-option>Items</novo-option>\n    <novo-option>For</novo-option>\n    <novo-option>Position</novo-option>\n    <novo-option>Test</novo-option>\n  </novo-optgroup>\n</novo-dropdown>\n<novo-dropdown side=\"bottom-left\">\n  <button type=\"button\"\n    theme=\"secondary\"\n    icon=\"collapse\"\n    inverse>Bottom-Left</button>\n  <novo-optgroup>\n    <novo-option>Five</novo-option>\n    <novo-option>Items</novo-option>\n    <novo-option>For</novo-option>\n    <novo-option>Position</novo-option>\n    <novo-option>Test</novo-option>\n  </novo-optgroup>\n</novo-dropdown>\n<novo-dropdown side=\"bottom-right\">\n  <button type=\"button\"\n    theme=\"secondary\"\n    icon=\"collapse\"\n    inverse>Bottom-Right</button>\n  <novo-optgroup>\n    <novo-option>Five</novo-option>\n    <novo-option>Items</novo-option>\n    <novo-option>For</novo-option>\n    <novo-option>Position</novo-option>\n    <novo-option>Test</novo-option>\n  </novo-optgroup>\n</novo-dropdown>\n<novo-dropdown side=\"top-left\">\n  <button type=\"button\"\n    theme=\"secondary\"\n    icon=\"collapse\"\n    inverse>Top-Left</button>\n  <novo-optgroup>\n    <novo-option>Five</novo-option>\n    <novo-option>Items</novo-option>\n    <novo-option>For</novo-option>\n    <novo-option>Position</novo-option>\n    <novo-option>Test</novo-option>\n  </novo-optgroup>\n</novo-dropdown>\n<novo-dropdown side=\"top-right\">\n  <button type=\"button\"\n    theme=\"secondary\"\n    icon=\"collapse\"\n    inverse>Top-Right</button>\n  <novo-optgroup>\n    <novo-option>Five</novo-option>\n    <novo-option>Items</novo-option>\n    <novo-option>For</novo-option>\n    <novo-option>Position</novo-option>\n    <novo-option>Test</novo-option>\n  </novo-optgroup>\n</novo-dropdown>", styles: [":host{background:#4a89dc;padding:1rem;display:flex;justify-content:space-between;align-items:center;flex-wrap:wrap;padding:.5rem}:host novo-dropdown{margin:.5rem}\n"] }]
        }] });

/**
 * @title Scrollable Drop Down
 */
class ScrollableDropDownExample {
    clickMe(event) {
        window.alert(event);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: ScrollableDropDownExample, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: ScrollableDropDownExample, isStandalone: false, selector: "scrollable-drop-down-example", ngImport: i0, template: "<div class=\"scrollable-container\" cdkScrollable>\n  <div class=\"scrollable-content\">\n    <novo-dropdown>\n      <novo-button\n        theme=\"secondary\"\n        icon=\"collapse\"\n        inverse>Inside a Scrollable Container</novo-button>\n      <novo-optgroup>\n        <novo-option (click)=\"clickMe('This')\"\n          keepOpen=\"true\">This</novo-option>\n        <novo-option (click)=\"clickMe('Scrolls!')\"\n          keepOpen=\"true\">Scrolls!</novo-option>\n      </novo-optgroup>\n    </novo-dropdown>\n  </div>\n</div>", styles: [":host{background:#4a89dc;display:block;justify-content:space-between;align-items:center;padding:.5rem}:host .scrollable-container{max-height:10rem;overflow:scroll}:host .scrollable-container .scrollable-content{height:30em}:host novo-dropdown{margin:5rem}\n"], dependencies: [{ kind: "component", type: i2$1.NovoButtonElement, selector: "novo-button,button[theme]", inputs: ["color", "side", "size", "theme", "loading", "icon", "secondIcon", "disabled"] }, { kind: "component", type: i2$1.NovoDropdownElement, selector: "novo-dropdown", inputs: ["parentScrollSelector", "parentScrollAction", "containerClass", "side", "scrollStrategy", "keepOpen", "height", "width", "appendToBody", "multiple", "scrollToActiveItemOnOpen"], outputs: ["toggled"] }, { kind: "directive", type: i2$2.CdkScrollable, selector: "[cdk-scrollable], [cdkScrollable]" }, { kind: "directive", type: i2$1.ThemeColorDirective, selector: "[theme]", inputs: ["theme"] }, { kind: "component", type: i2$1.NovoOption, selector: "novo-option", inputs: ["selected", "keepOpen", "novoInert", "value", "disabled"], exportAs: ["novoOption"] }, { kind: "component", type: i2$1.NovoOptgroup, selector: "novo-optgroup", inputs: ["disabled", "label"], exportAs: ["novoOptgroup"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: ScrollableDropDownExample, decorators: [{
            type: Component,
            args: [{ selector: 'scrollable-drop-down-example', standalone: false, template: "<div class=\"scrollable-container\" cdkScrollable>\n  <div class=\"scrollable-content\">\n    <novo-dropdown>\n      <novo-button\n        theme=\"secondary\"\n        icon=\"collapse\"\n        inverse>Inside a Scrollable Container</novo-button>\n      <novo-optgroup>\n        <novo-option (click)=\"clickMe('This')\"\n          keepOpen=\"true\">This</novo-option>\n        <novo-option (click)=\"clickMe('Scrolls!')\"\n          keepOpen=\"true\">Scrolls!</novo-option>\n      </novo-optgroup>\n    </novo-dropdown>\n  </div>\n</div>", styles: [":host{background:#4a89dc;display:block;justify-content:space-between;align-items:center;padding:.5rem}:host .scrollable-container{max-height:10rem;overflow:scroll}:host .scrollable-container .scrollable-content{height:30em}:host novo-dropdown{margin:5rem}\n"] }]
        }] });

/**
 * @title Scrollable Drop Down
 */
class ScrollToItemDropDownExample {
    constructor() {
        this.selectedWord = '';
        this.MOCK_WORDS = [
            'lorem',
            'ipsum',
            'dolor',
            'sit',
            'amet',
            'consectetur',
            'adipiscing',
            'elit',
            'curabitur',
            'vel',
            'hendrerit',
            'libero',
            'eleifend',
            'blandit',
            'nunc',
            'ornare',
            'odio',
            'ut',
            'orci',
            'gravida',
            'imperdiet',
            'nullam',
            'purus',
            'lacinia',
            'a',
            'pretium',
            'quis',
            'congue',
            'praesent',
            'sagittis',
            'laoreet',
            'auctor',
            'mauris',
            'non',
            'velit',
            'eros',
            'dictum',
            'proin',
            'accumsan',
            'sapien',
            'nec',
            'massa',
            'volutpat',
            'venenatis',
            'sed',
            'eu',
            'molestie',
            'lacus',
            'quisque',
            'porttitor',
            'ligula',
            'dui',
            'mollis',
            'tempus',
            'at',
            'magna',
            'vestibulum',
            'turpis',
            'ac',
            'diam',
            'tincidunt',
            'id',
            'condimentum',
            'enim',
            'sodales',
            'in',
            'hac',
            'habitasse',
            'platea',
            'dictumst',
            'aenean',
            'neque',
            'fusce',
            'augue',
            'leo',
            'eget',
            'semper',
            'mattis',
            'tortor',
            'scelerisque',
            'nulla',
            'interdum',
            'tellus',
            'malesuada',
            'rhoncus',
            'porta',
            'sem',
            'aliquet',
            'et',
            'nam',
            'suspendisse',
            'potenti',
            'vivamus',
            'luctus',
            'fringilla',
            'erat',
            'donec',
            'justo',
            'vehicula',
            'ultricies',
            'varius',
            'ante',
            'primis',
            'faucibus',
            'ultrices',
            'posuere',
            'cubilia',
            'curae',
            'etiam',
            'cursus',
            'aliquam',
            'quam',
            'dapibus',
            'nisl',
            'feugiat',
            'egestas',
            'class',
            'aptent',
            'taciti',
            'sociosqu',
            'ad',
            'litora',
            'torquent',
            'per',
            'conubia',
            'nostra',
            'inceptos',
            'himenaeos',
            'phasellus',
            'nibh',
            'pulvinar',
            'vitae',
            'urna',
            'iaculis',
            'lobortis',
            'nisi',
            'viverra',
            'arcu',
            'morbi',
            'pellentesque',
            'metus',
            'commodo',
            'ut',
            'facilisis',
            'felis',
            'tristique',
            'ullamcorper',
            'placerat',
            'aenean',
            'convallis',
            'sollicitudin',
            'integer',
            'rutrum',
            'duis',
            'est',
            'etiam',
            'bibendum',
            'donec',
            'pharetra',
            'vulputate',
            'maecenas',
            'mi',
            'fermentum',
            'consequat',
            'suscipit',
            'aliquam',
            'habitant',
            'senectus',
            'netus',
            'fames',
            'quisque',
            'euismod',
            'curabitur',
            'lectus',
            'elementum',
            'tempor',
            'risus',
            'cras',
        ];
    }
    clickMe(event) {
        this.selectedWord = event;
        window.alert(event);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: ScrollToItemDropDownExample, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: ScrollToItemDropDownExample, isStandalone: false, selector: "scroll-to-item-drop-down-example", ngImport: i0, template: "<novo-dropdown side=\"default\" height=\"300\" [scrollToActiveItemOnOpen]=\"true\">\n  <novo-stack dropdownTrigger [style.width.px]=\"160\" align=\"stretch\" gap=\"sm\">\n    <novo-row class=\"button-row\" justify=\"space-between\">\n      <novo-label>{{ 'Selected Word:' }}</novo-label>\n    </novo-row>\n    <novo-row class=\"button-row\" justify=\"space-between\">\n      <novo-text>{{ selectedWord }}</novo-text>\n      <novo-icon size=\"sm\">collapse</novo-icon>\n    </novo-row>\n  </novo-stack>\n  <novo-optgroup>\n    <novo-option *ngFor=\"let word of MOCK_WORDS; index as i\"\n                 (click)=\"clickMe(word)\">\n      <span class=\"value\">{{ word }}</span>\n      <span class=\"value-active\">\n        <i class=\"bhi-check ng-star-inserted\"\n           [style.visibility]=\"word !== selectedWord ? 'hidden' : 'visible'\"></i>\n      </span>\n    </novo-option>\n  </novo-optgroup>\n</novo-dropdown>\n", styles: [":host{display:flex;align-items:center;white-space:normal}.value{flex-basis:0;flex-grow:1;max-width:100%}.value-active{flex:0 0 auto;width:auto;max-width:none;margin-left:1rem}\n"], dependencies: [{ kind: "directive", type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "component", type: i2$1.NovoFlexElement, selector: "novo-flex,novo-row", inputs: ["direction", "align", "justify", "wrap", "gap"] }, { kind: "component", type: i2$1.NovoStackElement, selector: "novo-stack,novo-column", inputs: ["direction", "align"] }, { kind: "component", type: i2$1.NovoDropdownElement, selector: "novo-dropdown", inputs: ["parentScrollSelector", "parentScrollAction", "containerClass", "side", "scrollStrategy", "keepOpen", "height", "width", "appendToBody", "multiple", "scrollToActiveItemOnOpen"], outputs: ["toggled"] }, { kind: "directive", type: i2$1.NovoDropDownTrigger, selector: "[dropdownTrigger]" }, { kind: "component", type: i2$1.NovoIconComponent, selector: "novo-icon", inputs: ["raised", "theme", "shape", "color", "size", "smaller", "larger", "alt", "name"] }, { kind: "component", type: i2$1.NovoText, selector: "novo-text,[novo-text]", inputs: ["block"] }, { kind: "component", type: i2$1.NovoLabel, selector: "novo-label,[novo-label]", inputs: ["id"] }, { kind: "directive", type: i2$1.GapDirective, selector: "[gap]", inputs: ["gap"] }, { kind: "component", type: i2$1.NovoOption, selector: "novo-option", inputs: ["selected", "keepOpen", "novoInert", "value", "disabled"], exportAs: ["novoOption"] }, { kind: "component", type: i2$1.NovoOptgroup, selector: "novo-optgroup", inputs: ["disabled", "label"], exportAs: ["novoOptgroup"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: ScrollToItemDropDownExample, decorators: [{
            type: Component,
            args: [{ selector: 'scroll-to-item-drop-down-example', standalone: false, template: "<novo-dropdown side=\"default\" height=\"300\" [scrollToActiveItemOnOpen]=\"true\">\n  <novo-stack dropdownTrigger [style.width.px]=\"160\" align=\"stretch\" gap=\"sm\">\n    <novo-row class=\"button-row\" justify=\"space-between\">\n      <novo-label>{{ 'Selected Word:' }}</novo-label>\n    </novo-row>\n    <novo-row class=\"button-row\" justify=\"space-between\">\n      <novo-text>{{ selectedWord }}</novo-text>\n      <novo-icon size=\"sm\">collapse</novo-icon>\n    </novo-row>\n  </novo-stack>\n  <novo-optgroup>\n    <novo-option *ngFor=\"let word of MOCK_WORDS; index as i\"\n                 (click)=\"clickMe(word)\">\n      <span class=\"value\">{{ word }}</span>\n      <span class=\"value-active\">\n        <i class=\"bhi-check ng-star-inserted\"\n           [style.visibility]=\"word !== selectedWord ? 'hidden' : 'visible'\"></i>\n      </span>\n    </novo-option>\n  </novo-optgroup>\n</novo-dropdown>\n", styles: [":host{display:flex;align-items:center;white-space:normal}.value{flex-basis:0;flex-grow:1;max-width:100%}.value-active{flex:0 0 auto;width:auto;max-width:none;margin-left:1rem}\n"] }]
        }] });

/**
 * @title Field Anatomy Example
 */
class FieldAnatomyExample {
    constructor() {
        this.hide = true;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: FieldAnatomyExample, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: FieldAnatomyExample, isStandalone: false, selector: "field-anatomy-example", ngImport: i0, template: "<div class=\"example-container\">\n  <novo-field layout=\"horizontal\">\n    <novo-label>Enter your password</novo-label>\n    <input novoInput [type]=\"hide ? 'password' : 'text'\" />\n    <novo-icon (click)=\"hide = !hide\">{{hide ? 'overview' : 'hidden'}}</novo-icon>\n  </novo-field>\n\n  <novo-field layout=\"horizontal\">\n    <novo-label>Amount</novo-label>\n    <input novoInput type=\"number\" class=\"example-right-align\" />\n    <span novoPrefix>$&nbsp;</span>\n    <span novoSuffix>.00</span>\n    <novo-hint>Enter some money</novo-hint>\n  </novo-field>\n\n</div>", styles: [".example-right-align{text-align:right}\n"], dependencies: [{ kind: "component", type: i2$1.NovoIconComponent, selector: "novo-icon", inputs: ["raised", "theme", "shape", "color", "size", "smaller", "larger", "alt", "name"] }, { kind: "component", type: i2$1.NovoLabel, selector: "novo-label,[novo-label]", inputs: ["id"] }, { kind: "component", type: i2$1.NovoFieldElement, selector: "novo-field", inputs: ["layout", "appearance", "customOverlayOrigin", "width"], outputs: ["valueChanges", "stateChanges"] }, { kind: "component", type: i2$1.NovoHintElement, selector: "novo-hint", inputs: ["align", "id"] }, { kind: "directive", type: i2$1.NovoInput, selector: "input[novoInput], textarea[novoInput], select[novoInput]", inputs: ["disabled", "id", "placeholder", "required", "type", "value", "readonly"], outputs: ["onSelect"] }, { kind: "directive", type: i2$1.NovoFieldPrefixDirective, selector: "[novoPrefix]" }, { kind: "directive", type: i2$1.NovoFieldSuffixDirective, selector: "[novoSuffix]" }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: FieldAnatomyExample, decorators: [{
            type: Component,
            args: [{ selector: 'field-anatomy-example', standalone: false, template: "<div class=\"example-container\">\n  <novo-field layout=\"horizontal\">\n    <novo-label>Enter your password</novo-label>\n    <input novoInput [type]=\"hide ? 'password' : 'text'\" />\n    <novo-icon (click)=\"hide = !hide\">{{hide ? 'overview' : 'hidden'}}</novo-icon>\n  </novo-field>\n\n  <novo-field layout=\"horizontal\">\n    <novo-label>Amount</novo-label>\n    <input novoInput type=\"number\" class=\"example-right-align\" />\n    <span novoPrefix>$&nbsp;</span>\n    <span novoSuffix>.00</span>\n    <novo-hint>Enter some money</novo-hint>\n  </novo-field>\n\n</div>", styles: [".example-right-align{text-align:right}\n"] }]
        }] });

/**
 * @title Field Native Example
 */
class FieldNativeExample {
    constructor() {
        this.appearance = 'standard';
        this.direction = 'horizontal';
        this.fullWidth = false;
        this.hide = true;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: FieldNativeExample, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: FieldNativeExample, isStandalone: false, selector: "field-native-example", ngImport: i0, template: "<div class=\"example-container\">\n\n  <novo-label>Appearance</novo-label>\n  <novo-radio-group [(ngModel)]=\"appearance\">\n    <novo-radio value=\"standard\">Standard</novo-radio>\n    <novo-radio value=\"fill\">Filled</novo-radio>\n    <novo-radio value=\"outline\">Outlined</novo-radio>\n    <novo-radio value=\"list\">List</novo-radio>\n  </novo-radio-group>\n\n  <novo-label>Layout</novo-label>\n  <novo-radio-group [(ngModel)]=\"direction\">\n    <novo-radio value=\"horizontal\">Horizontal</novo-radio>\n    <novo-radio value=\"vertical\">Vertical</novo-radio>\n  </novo-radio-group>\n\n\n  <novo-fields [appearance]=\"appearance\" [layout]=\"direction\" [fullWidth]=\"fullWidth\">\n    <novo-field>\n      <novo-label>Full Width?</novo-label>\n      <novo-radio-group [(ngModel)]=\"fullWidth\">\n        <novo-radio [value]=\"false\">Condensed</novo-radio>\n        <novo-radio [value]=\"true\">Full Width</novo-radio>\n      </novo-radio-group>\n    </novo-field>\n\n    <novo-field>\n      <novo-label>Username</novo-label>\n      <input novoInput type=\"text\" />\n    </novo-field>\n\n    <novo-field>\n      <novo-label>Email</novo-label>\n      <input novoInput type=\"email\" />\n    </novo-field>\n\n    <novo-field>\n      <novo-label>Enter your password</novo-label>\n      <input novoInput [type]=\"hide ? 'password' : 'text'\" />\n      <novo-icon (click)=\"hide = !hide\">{{hide ? 'overview' : 'hidden'}}</novo-icon>\n    </novo-field>\n\n    <novo-field>\n      <novo-label>Select your favorite color?</novo-label>\n      <select required novoInput>\n        <option value=\"pink\">Pink</option>\n        <option value=\"purple\">Purple</option>\n        <option value=\"sparkles\">Sparkles</option>\n      </select>\n    </novo-field>\n\n    <novo-field>\n      <novo-label>Short description...</novo-label>\n      <textarea novoInput></textarea>\n    </novo-field>\n\n    <novo-field>\n      <novo-label>Choose your favorite color?</novo-label>\n      <input novoInput type=\"color\" />\n    </novo-field>\n\n    <novo-field>\n      <novo-label>Set Volume</novo-label>\n      <input novoInput type=\"range\" min=\"0\" max=\"100\" value=\"90\" step=\"10\" />\n    </novo-field>\n\n    <novo-field>\n      <novo-label>Birthday</novo-label>\n      <input novoInput type=\"date\" />\n    </novo-field>\n\n    <novo-field>\n      <novo-label>Scheduled End Time</novo-label>\n      <input novoInput type=\"time\" />\n    </novo-field>\n\n    <novo-field>\n      <novo-label>Next Appointment Time?</novo-label>\n      <input novoInput type=\"datetime-local\" />\n    </novo-field>\n  </novo-fields>\n</div>", styles: [".example-right-align{text-align:right}\n"], dependencies: [{ kind: "directive", type: i1.NgSelectOption, selector: "option", inputs: ["ngValue", "value"] }, { kind: "directive", type: i1.ɵNgSelectMultipleOption, selector: "option", inputs: ["ngValue", "value"] }, { kind: "directive", type: i1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i1.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "component", type: i2$1.NovoRadioElement, selector: "novo-radio", inputs: ["id", "name", "tabindex", "vertical", "label", "button", "theme", "size", "icon", "color", "disabled", "checked", "value"], outputs: ["change", "blur", "focus"] }, { kind: "component", type: i2$1.NovoRadioGroup, selector: "novo-radio-group", inputs: ["id", "tabindex", "errorStateMatcher", "appearance", "value", "name", "disabled", "required", "placeholder"], outputs: ["change", "blur"] }, { kind: "component", type: i2$1.NovoIconComponent, selector: "novo-icon", inputs: ["raised", "theme", "shape", "color", "size", "smaller", "larger", "alt", "name"] }, { kind: "component", type: i2$1.NovoLabel, selector: "novo-label,[novo-label]", inputs: ["id"] }, { kind: "component", type: i2$1.NovoFieldElement, selector: "novo-field", inputs: ["layout", "appearance", "customOverlayOrigin", "width"], outputs: ["valueChanges", "stateChanges"] }, { kind: "directive", type: i2$1.NovoInput, selector: "input[novoInput], textarea[novoInput], select[novoInput]", inputs: ["disabled", "id", "placeholder", "required", "type", "value", "readonly"], outputs: ["onSelect"] }, { kind: "component", type: i2$1.NovoFieldsElement, selector: "novo-fields", inputs: ["layout", "appearance", "fullWidth"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: FieldNativeExample, decorators: [{
            type: Component,
            args: [{ selector: 'field-native-example', standalone: false, template: "<div class=\"example-container\">\n\n  <novo-label>Appearance</novo-label>\n  <novo-radio-group [(ngModel)]=\"appearance\">\n    <novo-radio value=\"standard\">Standard</novo-radio>\n    <novo-radio value=\"fill\">Filled</novo-radio>\n    <novo-radio value=\"outline\">Outlined</novo-radio>\n    <novo-radio value=\"list\">List</novo-radio>\n  </novo-radio-group>\n\n  <novo-label>Layout</novo-label>\n  <novo-radio-group [(ngModel)]=\"direction\">\n    <novo-radio value=\"horizontal\">Horizontal</novo-radio>\n    <novo-radio value=\"vertical\">Vertical</novo-radio>\n  </novo-radio-group>\n\n\n  <novo-fields [appearance]=\"appearance\" [layout]=\"direction\" [fullWidth]=\"fullWidth\">\n    <novo-field>\n      <novo-label>Full Width?</novo-label>\n      <novo-radio-group [(ngModel)]=\"fullWidth\">\n        <novo-radio [value]=\"false\">Condensed</novo-radio>\n        <novo-radio [value]=\"true\">Full Width</novo-radio>\n      </novo-radio-group>\n    </novo-field>\n\n    <novo-field>\n      <novo-label>Username</novo-label>\n      <input novoInput type=\"text\" />\n    </novo-field>\n\n    <novo-field>\n      <novo-label>Email</novo-label>\n      <input novoInput type=\"email\" />\n    </novo-field>\n\n    <novo-field>\n      <novo-label>Enter your password</novo-label>\n      <input novoInput [type]=\"hide ? 'password' : 'text'\" />\n      <novo-icon (click)=\"hide = !hide\">{{hide ? 'overview' : 'hidden'}}</novo-icon>\n    </novo-field>\n\n    <novo-field>\n      <novo-label>Select your favorite color?</novo-label>\n      <select required novoInput>\n        <option value=\"pink\">Pink</option>\n        <option value=\"purple\">Purple</option>\n        <option value=\"sparkles\">Sparkles</option>\n      </select>\n    </novo-field>\n\n    <novo-field>\n      <novo-label>Short description...</novo-label>\n      <textarea novoInput></textarea>\n    </novo-field>\n\n    <novo-field>\n      <novo-label>Choose your favorite color?</novo-label>\n      <input novoInput type=\"color\" />\n    </novo-field>\n\n    <novo-field>\n      <novo-label>Set Volume</novo-label>\n      <input novoInput type=\"range\" min=\"0\" max=\"100\" value=\"90\" step=\"10\" />\n    </novo-field>\n\n    <novo-field>\n      <novo-label>Birthday</novo-label>\n      <input novoInput type=\"date\" />\n    </novo-field>\n\n    <novo-field>\n      <novo-label>Scheduled End Time</novo-label>\n      <input novoInput type=\"time\" />\n    </novo-field>\n\n    <novo-field>\n      <novo-label>Next Appointment Time?</novo-label>\n      <input novoInput type=\"datetime-local\" />\n    </novo-field>\n  </novo-fields>\n</div>", styles: [".example-right-align{text-align:right}\n"] }]
        }] });

/**
 * @title Field Usage Example
 */
class FieldUsageExample {
    constructor() {
        this.time = '14:00';
        this.date = new Date();
        this.datetime = new Date();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: FieldUsageExample, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: FieldUsageExample, isStandalone: false, selector: "field-usage-example", ngImport: i0, template: "<h4>Basic Field Usage</h4>\n\n<novo-field>\n  <novo-label>Favorite food</novo-label>\n  <input novoInput placeholder=\"Ex. Pizza\" value=\"Sushi\" />\n</novo-field>\n\n<novo-field>\n  <novo-label>Leave a comment</novo-label>\n  <textarea novoInput placeholder=\"Ex. It makes me feel...\"></textarea>\n</novo-field>\n\n<novo-field>\n  <novo-label>Set an Alarm</novo-label>\n  <input novoInput [(ngModel)]=\"time\" timeFormat=\"iso8601\" [picker]=\"timepicker\" />\n  <novo-picker-toggle novoSuffix icon=\"clock\">\n    <novo-time-picker #timepicker></novo-time-picker>\n  </novo-picker-toggle>\n  <novo-hint>value is: {{time}}</novo-hint>\n</novo-field>\n\n<novo-field>\n  <novo-label>Date of Birth</novo-label>\n  <input novoInput dateFormat=\"iso8601\" [picker]=\"datepicker\" [(ngModel)]=\"date\" />\n  <novo-picker-toggle novoSuffix icon=\"calendar\">\n    <novo-date-picker #datepicker></novo-date-picker>\n  </novo-picker-toggle>\n  <novo-hint>value is: {{date}}</novo-hint>\n\n</novo-field>\n\n<novo-field>\n  <novo-label>Datetime</novo-label>\n  <input novoInput dateFormat=\"iso8601\" [picker]=\"datetimepicker\" [(ngModel)]=\"datetime\" />\n  <novo-picker-toggle novoSuffix icon=\"calendar\">\n    <novo-date-time-picker #datetimepicker></novo-date-time-picker>\n  </novo-picker-toggle>\n  <novo-hint>value is: {{datetime}}</novo-hint>\n\n</novo-field>\n\n<novo-field>\n  <novo-label>Need a Vacation?</novo-label>\n  <input novoInput dateRangeFormat=\"iso8601\" [picker]=\"daterangepicker\" [(ngModel)]=\"daterange\" />\n  <novo-picker-toggle novoSuffix icon=\"calendar\">\n    <novo-date-picker #daterangepicker mode=\"range\" numberOfMonths=\"2\"></novo-date-picker>\n  </novo-picker-toggle>\n  <novo-hint>value is: {{daterange}}</novo-hint>\n\n</novo-field>\n\n\n\n<novo-fieldset-header icon=\"calendar\" title=\"Add Day Of Week\"></novo-fieldset-header>\n\n<novo-field>\n  <novo-label>Date of Birth</novo-label>\n  <novo-text novoPrefix mr=\"sm\">{{date2 | date : 'EEE' }}</novo-text>\n  <input novoInput dateFormat=\"iso8601\" [picker]=\"datepicker2\" [(ngModel)]=\"date2\" disabled readonly />\n  <novo-picker-toggle novoSuffix icon=\"calendar\">\n    <novo-date-picker #datepicker2></novo-date-picker>\n  </novo-picker-toggle>\n  <novo-hint>value is: {{date2}}</novo-hint>\n</novo-field>\n\n<novo-fieldset-header icon=\"section\" title=\"Section Header\"></novo-fieldset-header>\n\n<novo-field>\n  <novo-label>\n    <novo-flex justify=\"space-between\">\n      <span>Effective On</span>\n      <novo-chip size=\"sm\" accent=\"success\">current</novo-chip>\n    </novo-flex>\n  </novo-label>\n  <novo-select value=\"08/01/2021\">\n    <novo-option value=\"08/01/2021\">\n      <novo-text>08/01/2021</novo-text>\n      <novo-chip accent=\"success\">current</novo-chip>\n    </novo-option>\n    <novo-option value=\"09/01/2021\">\n      <novo-text>09/01/2021</novo-text>\n    </novo-option>\n  </novo-select>\n  <novo-icon novoPrefix>previous</novo-icon>\n  <novo-icon novoSuffix>next</novo-icon>\n</novo-field>", styles: [":host{display:flex;flex-flow:column;gap:1rem}\n"], dependencies: [{ kind: "directive", type: i1.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i1.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "component", type: i2$1.NovoFlexElement, selector: "novo-flex,novo-row", inputs: ["direction", "align", "justify", "wrap", "gap"] }, { kind: "component", type: i2$1.NovoSelectElement, selector: "novo-select", inputs: ["disabled", "required", "tabIndex", "id", "name", "placeholder", "readonly", "headerConfig", "position", "overlayWidth", "overlayHeight", "displayIcon", "displayWith", "compareWith", "hideLegacyOptions", "value", "multiple", "options"], outputs: ["onSelect", "selectionChange", "valueChange", "openedChange", "opened", "closed"] }, { kind: "component", type: i2$1.NovoChipElement, selector: "novo-chip, [novo-chip]", inputs: ["color", "tabIndex", "size", "type", "selected", "value", "selectable", "disabled", "removable"], outputs: ["selectionChange", "destroyed", "removed"] }, { kind: "component", type: i2$1.NovoDatePickerElement, selector: "novo-date-picker", inputs: ["minYear", "maxYear", "start", "end", "inline", "weekStart", "preselected", "hideOverflowDays", "hideFooter", "hideToday", "disabledDateMessage", "dateForInitialView", "numberOfMonths", "mode", "range", "weekRangeSelect"], outputs: ["onSelect"] }, { kind: "component", type: i2$1.NovoTimePickerElement, selector: "novo-time-picker", inputs: ["military", "analog", "inline", "step", "hasButtons", "saveDisabled"], outputs: ["onSelect", "onSave", "onCancel"] }, { kind: "component", type: i2$1.NovoDateTimePickerElement, selector: "novo-date-time-picker", inputs: ["defaultTime", "minYear", "maxYear", "start", "end", "military", "weekStart", "disabledDateMessage"], outputs: ["onSelect"] }, { kind: "component", type: i2$1.NovoFieldsetHeaderElement, selector: "novo-fieldset-header", inputs: ["title", "icon"] }, { kind: "component", type: i2$1.NovoIconComponent, selector: "novo-icon", inputs: ["raised", "theme", "shape", "color", "size", "smaller", "larger", "alt", "name"] }, { kind: "component", type: i2$1.NovoText, selector: "novo-text,[novo-text]", inputs: ["block"] }, { kind: "component", type: i2$1.NovoLabel, selector: "novo-label,[novo-label]", inputs: ["id"] }, { kind: "directive", type: i2$1.MarginDirective, selector: "[m],[margin],[marginTop],[marginRight],[marginBottom],[marginLeft],[marginX],[marginY],[mt],[mr],[mb],[ml],[mx],[my]", inputs: ["margin", "m", "marginLeft", "ml", "marginRight", "mr", "marginTop", "mt", "marginBottom", "mb", "marginX", "mx", "marginY", "my"] }, { kind: "directive", type: i2$1.AccentColorDirective, selector: "[accent]", inputs: ["accent"] }, { kind: "component", type: i2$1.NovoOption, selector: "novo-option", inputs: ["selected", "keepOpen", "novoInert", "value", "disabled"], exportAs: ["novoOption"] }, { kind: "component", type: i2$1.NovoFieldElement, selector: "novo-field", inputs: ["layout", "appearance", "customOverlayOrigin", "width"], outputs: ["valueChanges", "stateChanges"] }, { kind: "component", type: i2$1.NovoHintElement, selector: "novo-hint", inputs: ["align", "id"] }, { kind: "directive", type: i2$1.NovoInput, selector: "input[novoInput], textarea[novoInput], select[novoInput]", inputs: ["disabled", "id", "placeholder", "required", "type", "value", "readonly"], outputs: ["onSelect"] }, { kind: "directive", type: i2$1.NovoFieldPrefixDirective, selector: "[novoPrefix]" }, { kind: "directive", type: i2$1.NovoFieldSuffixDirective, selector: "[novoSuffix]" }, { kind: "directive", type: i2$1.NovoTimeFormatDirective, selector: "input[timeFormat]", inputs: ["military", "timeFormat"] }, { kind: "directive", type: i2$1.NovoDateFormatDirective, selector: "input[dateFormat]", inputs: ["dateFormat"] }, { kind: "directive", type: i2$1.NovoDateRangeFormatDirective, selector: "input[dateRangeFormat]", inputs: ["dateRangeFormat"] }, { kind: "component", type: i2$1.NovoPickerToggleElement, selector: "novo-picker-toggle", inputs: ["for", "icon", "tabIndex", "aria-label", "triggerOnFocus", "overlayId", "width", "disabled"], exportAs: ["novoPickerToggle"] }, { kind: "directive", type: i2$1.NovoPickerDirective, selector: "input[picker]", inputs: ["picker", "autocomplete"] }, { kind: "pipe", type: i2.DatePipe, name: "date" }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: FieldUsageExample, decorators: [{
            type: Component,
            args: [{ selector: 'field-usage-example', standalone: false, template: "<h4>Basic Field Usage</h4>\n\n<novo-field>\n  <novo-label>Favorite food</novo-label>\n  <input novoInput placeholder=\"Ex. Pizza\" value=\"Sushi\" />\n</novo-field>\n\n<novo-field>\n  <novo-label>Leave a comment</novo-label>\n  <textarea novoInput placeholder=\"Ex. It makes me feel...\"></textarea>\n</novo-field>\n\n<novo-field>\n  <novo-label>Set an Alarm</novo-label>\n  <input novoInput [(ngModel)]=\"time\" timeFormat=\"iso8601\" [picker]=\"timepicker\" />\n  <novo-picker-toggle novoSuffix icon=\"clock\">\n    <novo-time-picker #timepicker></novo-time-picker>\n  </novo-picker-toggle>\n  <novo-hint>value is: {{time}}</novo-hint>\n</novo-field>\n\n<novo-field>\n  <novo-label>Date of Birth</novo-label>\n  <input novoInput dateFormat=\"iso8601\" [picker]=\"datepicker\" [(ngModel)]=\"date\" />\n  <novo-picker-toggle novoSuffix icon=\"calendar\">\n    <novo-date-picker #datepicker></novo-date-picker>\n  </novo-picker-toggle>\n  <novo-hint>value is: {{date}}</novo-hint>\n\n</novo-field>\n\n<novo-field>\n  <novo-label>Datetime</novo-label>\n  <input novoInput dateFormat=\"iso8601\" [picker]=\"datetimepicker\" [(ngModel)]=\"datetime\" />\n  <novo-picker-toggle novoSuffix icon=\"calendar\">\n    <novo-date-time-picker #datetimepicker></novo-date-time-picker>\n  </novo-picker-toggle>\n  <novo-hint>value is: {{datetime}}</novo-hint>\n\n</novo-field>\n\n<novo-field>\n  <novo-label>Need a Vacation?</novo-label>\n  <input novoInput dateRangeFormat=\"iso8601\" [picker]=\"daterangepicker\" [(ngModel)]=\"daterange\" />\n  <novo-picker-toggle novoSuffix icon=\"calendar\">\n    <novo-date-picker #daterangepicker mode=\"range\" numberOfMonths=\"2\"></novo-date-picker>\n  </novo-picker-toggle>\n  <novo-hint>value is: {{daterange}}</novo-hint>\n\n</novo-field>\n\n\n\n<novo-fieldset-header icon=\"calendar\" title=\"Add Day Of Week\"></novo-fieldset-header>\n\n<novo-field>\n  <novo-label>Date of Birth</novo-label>\n  <novo-text novoPrefix mr=\"sm\">{{date2 | date : 'EEE' }}</novo-text>\n  <input novoInput dateFormat=\"iso8601\" [picker]=\"datepicker2\" [(ngModel)]=\"date2\" disabled readonly />\n  <novo-picker-toggle novoSuffix icon=\"calendar\">\n    <novo-date-picker #datepicker2></novo-date-picker>\n  </novo-picker-toggle>\n  <novo-hint>value is: {{date2}}</novo-hint>\n</novo-field>\n\n<novo-fieldset-header icon=\"section\" title=\"Section Header\"></novo-fieldset-header>\n\n<novo-field>\n  <novo-label>\n    <novo-flex justify=\"space-between\">\n      <span>Effective On</span>\n      <novo-chip size=\"sm\" accent=\"success\">current</novo-chip>\n    </novo-flex>\n  </novo-label>\n  <novo-select value=\"08/01/2021\">\n    <novo-option value=\"08/01/2021\">\n      <novo-text>08/01/2021</novo-text>\n      <novo-chip accent=\"success\">current</novo-chip>\n    </novo-option>\n    <novo-option value=\"09/01/2021\">\n      <novo-text>09/01/2021</novo-text>\n    </novo-option>\n  </novo-select>\n  <novo-icon novoPrefix>previous</novo-icon>\n  <novo-icon novoSuffix>next</novo-icon>\n</novo-field>", styles: [":host{display:flex;flex-flow:column;gap:1rem}\n"] }]
        }] });

/**
 * @title Form Usage Example
 */
class FormUsageExample {
    constructor(fb) {
        this.numberControl = new UntypedFormControl(16, Validators.min(10));
        this.timeControl = new UntypedFormControl(new Date());
        this.dateControl = new UntypedFormControl(new Date());
        this.dateTimeControl = new UntypedFormControl(new Date());
        this.post = '';
        this.options = fb.group({
            number: this.numberControl,
            time: this.timeControl,
            date: this.dateControl,
            dateTime: this.dateTimeControl,
        });
    }
    onSubmit(post) {
        this.post = post;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: FormUsageExample, deps: [{ token: i1.UntypedFormBuilder }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: FormUsageExample, isStandalone: false, selector: "form-usage-example", ngImport: i0, template: "<form class=\"example-container\" [formGroup]=\"options\">\n  <novo-fields>\n    <novo-field>\n      <novo-label>Pick a Number?</novo-label>\n      <input novoInput type=\"number\" placeholder=\"Ex. 12\" [formControl]=\"numberControl\" min=\"10\" />\n      <novo-error *ngIf=\"numberControl.invalid\">Minimum: 10</novo-error>\n    </novo-field>\n\n    <novo-field>\n      <novo-label>Set an Alarm</novo-label>\n      <input novoInput timeFormat [picker]=\"timepicker\" [formControl]=\"timeControl\" />\n      <novo-picker-toggle novoSuffix icon=\"clock\">\n        <novo-time-picker #timepicker></novo-time-picker>\n      </novo-picker-toggle>\n    </novo-field>\n\n    <novo-field>\n      <novo-label>Date of Birth</novo-label>\n      <input novoInput dateFormat [picker]=\"datepicker\" [formControl]=\"dateControl\" disabled=\"true\" readonly />\n      <novo-picker-toggle novoSuffix icon=\"calendar\">\n        <novo-date-picker #datepicker></novo-date-picker>\n      </novo-picker-toggle>\n    </novo-field>\n\n    <novo-field>\n      <novo-label>Appointment</novo-label>\n      <input novoInput dateTimeFormat [picker]=\"datetimepicker\" [military]=\"false\" [formControl]=\"dateTimeControl\" readonly />\n      <novo-picker-toggle novoSuffix icon=\"calendar\">\n        <novo-date-time-picker #datetimepicker></novo-date-time-picker>\n      </novo-picker-toggle>\n    </novo-field>\n\n    <button theme=\"primary\" [disabled]=\"!options.valid\" (click)=\"onSubmit(options.value)\">Submit\n      Form</button>\n  </novo-fields>\n</form>\n\n<div class=\"example-container\">\n  {{ post | json }}\n</div>", styles: [""], dependencies: [{ kind: "directive", type: i1.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { kind: "directive", type: i1.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i1.NumberValueAccessor, selector: "input[type=number][formControlName],input[type=number][formControl],input[type=number][ngModel]" }, { kind: "directive", type: i1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i1.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { kind: "directive", type: i1.MinValidator, selector: "input[type=number][min][formControlName],input[type=number][min][formControl],input[type=number][min][ngModel]", inputs: ["min"] }, { kind: "directive", type: i1.FormControlDirective, selector: "[formControl]", inputs: ["formControl", "disabled", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { kind: "directive", type: i1.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i2$1.NovoButtonElement, selector: "novo-button,button[theme]", inputs: ["color", "side", "size", "theme", "loading", "icon", "secondIcon", "disabled"] }, { kind: "component", type: i2$1.NovoDatePickerElement, selector: "novo-date-picker", inputs: ["minYear", "maxYear", "start", "end", "inline", "weekStart", "preselected", "hideOverflowDays", "hideFooter", "hideToday", "disabledDateMessage", "dateForInitialView", "numberOfMonths", "mode", "range", "weekRangeSelect"], outputs: ["onSelect"] }, { kind: "component", type: i2$1.NovoTimePickerElement, selector: "novo-time-picker", inputs: ["military", "analog", "inline", "step", "hasButtons", "saveDisabled"], outputs: ["onSelect", "onSave", "onCancel"] }, { kind: "component", type: i2$1.NovoDateTimePickerElement, selector: "novo-date-time-picker", inputs: ["defaultTime", "minYear", "maxYear", "start", "end", "military", "weekStart", "disabledDateMessage"], outputs: ["onSelect"] }, { kind: "component", type: i2$1.NovoLabel, selector: "novo-label,[novo-label]", inputs: ["id"] }, { kind: "directive", type: i2$1.ThemeColorDirective, selector: "[theme]", inputs: ["theme"] }, { kind: "component", type: i2$1.NovoFieldElement, selector: "novo-field", inputs: ["layout", "appearance", "customOverlayOrigin", "width"], outputs: ["valueChanges", "stateChanges"] }, { kind: "component", type: i2$1.NovoErrorElement, selector: "novo-error" }, { kind: "directive", type: i2$1.NovoInput, selector: "input[novoInput], textarea[novoInput], select[novoInput]", inputs: ["disabled", "id", "placeholder", "required", "type", "value", "readonly"], outputs: ["onSelect"] }, { kind: "directive", type: i2$1.NovoFieldSuffixDirective, selector: "[novoSuffix]" }, { kind: "component", type: i2$1.NovoFieldsElement, selector: "novo-fields", inputs: ["layout", "appearance", "fullWidth"] }, { kind: "directive", type: i2$1.NovoTimeFormatDirective, selector: "input[timeFormat]", inputs: ["military", "timeFormat"] }, { kind: "directive", type: i2$1.NovoDateFormatDirective, selector: "input[dateFormat]", inputs: ["dateFormat"] }, { kind: "directive", type: i2$1.NovoDateTimeFormatDirective, selector: "input[dateTimeFormat]", inputs: ["military", "dateTimeFormat"] }, { kind: "component", type: i2$1.NovoPickerToggleElement, selector: "novo-picker-toggle", inputs: ["for", "icon", "tabIndex", "aria-label", "triggerOnFocus", "overlayId", "width", "disabled"], exportAs: ["novoPickerToggle"] }, { kind: "directive", type: i2$1.NovoPickerDirective, selector: "input[picker]", inputs: ["picker", "autocomplete"] }, { kind: "pipe", type: i2.JsonPipe, name: "json" }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: FormUsageExample, decorators: [{
            type: Component,
            args: [{ selector: 'form-usage-example', standalone: false, template: "<form class=\"example-container\" [formGroup]=\"options\">\n  <novo-fields>\n    <novo-field>\n      <novo-label>Pick a Number?</novo-label>\n      <input novoInput type=\"number\" placeholder=\"Ex. 12\" [formControl]=\"numberControl\" min=\"10\" />\n      <novo-error *ngIf=\"numberControl.invalid\">Minimum: 10</novo-error>\n    </novo-field>\n\n    <novo-field>\n      <novo-label>Set an Alarm</novo-label>\n      <input novoInput timeFormat [picker]=\"timepicker\" [formControl]=\"timeControl\" />\n      <novo-picker-toggle novoSuffix icon=\"clock\">\n        <novo-time-picker #timepicker></novo-time-picker>\n      </novo-picker-toggle>\n    </novo-field>\n\n    <novo-field>\n      <novo-label>Date of Birth</novo-label>\n      <input novoInput dateFormat [picker]=\"datepicker\" [formControl]=\"dateControl\" disabled=\"true\" readonly />\n      <novo-picker-toggle novoSuffix icon=\"calendar\">\n        <novo-date-picker #datepicker></novo-date-picker>\n      </novo-picker-toggle>\n    </novo-field>\n\n    <novo-field>\n      <novo-label>Appointment</novo-label>\n      <input novoInput dateTimeFormat [picker]=\"datetimepicker\" [military]=\"false\" [formControl]=\"dateTimeControl\" readonly />\n      <novo-picker-toggle novoSuffix icon=\"calendar\">\n        <novo-date-time-picker #datetimepicker></novo-date-time-picker>\n      </novo-picker-toggle>\n    </novo-field>\n\n    <button theme=\"primary\" [disabled]=\"!options.valid\" (click)=\"onSubmit(options.value)\">Submit\n      Form</button>\n  </novo-fields>\n</form>\n\n<div class=\"example-container\">\n  {{ post | json }}\n</div>" }]
        }], ctorParameters: () => [{ type: i1.UntypedFormBuilder }] });

/**
 * @title Basic Icons
 */
class BasicIconsExample {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: BasicIconsExample, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: BasicIconsExample, isStandalone: false, selector: "basic-icons-example", ngImport: i0, template: "<novo-icon>candidate</novo-icon>\n<novo-icon>job</novo-icon>\n<novo-icon>company</novo-icon>\n<novo-icon>lead</novo-icon>\n<novo-icon>opportunity</novo-icon>\n<br />\n<i class=\"bhi-candidate\"></i>\n<i class=\"bhi-person\"></i>\n<i class=\"bhi-job\"></i>\n<i class=\"bhi-company\"></i>\n<i class=\"bhi-lead\"></i>\n<i class=\"bhi-opportunity\"></i>", styles: [""], dependencies: [{ kind: "component", type: i2$1.NovoIconComponent, selector: "novo-icon", inputs: ["raised", "theme", "shape", "color", "size", "smaller", "larger", "alt", "name"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: BasicIconsExample, decorators: [{
            type: Component,
            args: [{ selector: 'basic-icons-example', standalone: false, template: "<novo-icon>candidate</novo-icon>\n<novo-icon>job</novo-icon>\n<novo-icon>company</novo-icon>\n<novo-icon>lead</novo-icon>\n<novo-icon>opportunity</novo-icon>\n<br />\n<i class=\"bhi-candidate\"></i>\n<i class=\"bhi-person\"></i>\n<i class=\"bhi-job\"></i>\n<i class=\"bhi-company\"></i>\n<i class=\"bhi-lead\"></i>\n<i class=\"bhi-opportunity\"></i>" }]
        }] });

/**
 * @title Raised Icons
 */
class RaisedIconsExample {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: RaisedIconsExample, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: RaisedIconsExample, isStandalone: false, selector: "raised-icons-example", ngImport: i0, template: "<novo-icon theme=\"candidate\" raised=\"true\">candidate</novo-icon>\n<novo-icon theme=\"job\" raised=\"true\">job</novo-icon>\n<novo-icon theme=\"company\" raised=\"true\">company</novo-icon>\n<novo-icon theme=\"submission\" raised=\"true\">star-o</novo-icon>\n<novo-icon theme=\"placement\" raised=\"true\">star</novo-icon>\n", styles: [""], dependencies: [{ kind: "component", type: i2$1.NovoIconComponent, selector: "novo-icon", inputs: ["raised", "theme", "shape", "color", "size", "smaller", "larger", "alt", "name"] }, { kind: "directive", type: i2$1.ThemeColorDirective, selector: "[theme]", inputs: ["theme"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: RaisedIconsExample, decorators: [{
            type: Component,
            args: [{ selector: 'raised-icons-example', standalone: false, template: "<novo-icon theme=\"candidate\" raised=\"true\">candidate</novo-icon>\n<novo-icon theme=\"job\" raised=\"true\">job</novo-icon>\n<novo-icon theme=\"company\" raised=\"true\">company</novo-icon>\n<novo-icon theme=\"submission\" raised=\"true\">star-o</novo-icon>\n<novo-icon theme=\"placement\" raised=\"true\">star</novo-icon>\n" }]
        }] });

/**
 * @title Themed Icons
 */
class ThemedIconsExample {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: ThemedIconsExample, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: ThemedIconsExample, isStandalone: false, selector: "themed-icons-example", ngImport: i0, template: "<novo-icon color=\"candidate\">candidate</novo-icon>\n<novo-icon color=\"job\">job</novo-icon>\n<novo-icon color=\"company\">company</novo-icon>\n<novo-icon color=\"submission\">star-o</novo-icon>\n<novo-icon color=\"placement\">star</novo-icon>\n<br />\n<novo-icon theme=\"candidate\">candidate</novo-icon>\n<novo-icon theme=\"job\">job</novo-icon>\n<novo-icon theme=\"company\">company</novo-icon>\n<novo-icon theme=\"submission\">star-o</novo-icon>\n<novo-icon theme=\"placement\">star</novo-icon>", styles: [""], dependencies: [{ kind: "component", type: i2$1.NovoIconComponent, selector: "novo-icon", inputs: ["raised", "theme", "shape", "color", "size", "smaller", "larger", "alt", "name"] }, { kind: "directive", type: i2$1.ThemeColorDirective, selector: "[theme]", inputs: ["theme"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: ThemedIconsExample, decorators: [{
            type: Component,
            args: [{ selector: 'themed-icons-example', standalone: false, template: "<novo-icon color=\"candidate\">candidate</novo-icon>\n<novo-icon color=\"job\">job</novo-icon>\n<novo-icon color=\"company\">company</novo-icon>\n<novo-icon color=\"submission\">star-o</novo-icon>\n<novo-icon color=\"placement\">star</novo-icon>\n<br />\n<novo-icon theme=\"candidate\">candidate</novo-icon>\n<novo-icon theme=\"job\">job</novo-icon>\n<novo-icon theme=\"company\">company</novo-icon>\n<novo-icon theme=\"submission\">star-o</novo-icon>\n<novo-icon theme=\"placement\">star</novo-icon>" }]
        }] });

/**
 * @title Circular Loading Symbol
 */
class LoadingCircleExample {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: LoadingCircleExample, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: LoadingCircleExample, isStandalone: false, selector: "loading-circle-example", ngImport: i0, template: "<novo-spinner [size]=\"size.value\" [color]=\"color.value\"></novo-spinner>\n\n<section>\n  <novo-label>Size</novo-label>\n  <novo-radio-group #size appearance=\"vertical\" value=\"medium\">\n    <novo-radio name=\"size\" value=\"small\">small</novo-radio>\n    <novo-radio name=\"size\" value=\"medium\">medium</novo-radio>\n    <novo-radio name=\"size\" value=\"large\">large</novo-radio>\n  </novo-radio-group>\n\n  <novo-label>Color</novo-label>\n  <novo-radio-group #color appearance=\"vertical\">\n    <novo-radio name=\"color\" value=\"grapefruit\">grapefruit</novo-radio>\n    <novo-radio name=\"color\" value=\"aqua\">aqua</novo-radio>\n    <novo-radio name=\"color\" value=\"mint\">mint</novo-radio>\n    <novo-radio name=\"color\" value=\"ocean\">ocean</novo-radio>\n  </novo-radio-group>\n\n</section>", styles: [":host{display:grid;grid-template-columns:1fr 1fr;gap:2rem}\n"], dependencies: [{ kind: "component", type: i2$1.NovoSpinnerElement, selector: "novo-spinner", inputs: ["theme", "color", "size", "inverse"] }, { kind: "component", type: i2$1.NovoRadioElement, selector: "novo-radio", inputs: ["id", "name", "tabindex", "vertical", "label", "button", "theme", "size", "icon", "color", "disabled", "checked", "value"], outputs: ["change", "blur", "focus"] }, { kind: "component", type: i2$1.NovoRadioGroup, selector: "novo-radio-group", inputs: ["id", "tabindex", "errorStateMatcher", "appearance", "value", "name", "disabled", "required", "placeholder"], outputs: ["change", "blur"] }, { kind: "component", type: i2$1.NovoLabel, selector: "novo-label,[novo-label]", inputs: ["id"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: LoadingCircleExample, decorators: [{
            type: Component,
            args: [{ selector: 'loading-circle-example', standalone: false, template: "<novo-spinner [size]=\"size.value\" [color]=\"color.value\"></novo-spinner>\n\n<section>\n  <novo-label>Size</novo-label>\n  <novo-radio-group #size appearance=\"vertical\" value=\"medium\">\n    <novo-radio name=\"size\" value=\"small\">small</novo-radio>\n    <novo-radio name=\"size\" value=\"medium\">medium</novo-radio>\n    <novo-radio name=\"size\" value=\"large\">large</novo-radio>\n  </novo-radio-group>\n\n  <novo-label>Color</novo-label>\n  <novo-radio-group #color appearance=\"vertical\">\n    <novo-radio name=\"color\" value=\"grapefruit\">grapefruit</novo-radio>\n    <novo-radio name=\"color\" value=\"aqua\">aqua</novo-radio>\n    <novo-radio name=\"color\" value=\"mint\">mint</novo-radio>\n    <novo-radio name=\"color\" value=\"ocean\">ocean</novo-radio>\n  </novo-radio-group>\n\n</section>", styles: [":host{display:grid;grid-template-columns:1fr 1fr;gap:2rem}\n"] }]
        }] });

/**
 * @title Linear Loading Symbol
 */
class LoadingLineExample {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: LoadingLineExample, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: LoadingLineExample, isStandalone: false, selector: "loading-line-example", ngImport: i0, template: "<novo-loading [size]=\"size.value\" [color]=\"color.value\"></novo-loading>\n\n<section>\n  <novo-label>Size</novo-label>\n  <novo-radio-group #size appearance=\"vertical\" value=\"medium\">\n    <novo-radio name=\"size\" value=\"small\">small</novo-radio>\n    <novo-radio name=\"size\" value=\"medium\">medium</novo-radio>\n    <novo-radio name=\"size\" value=\"large\">large</novo-radio>\n  </novo-radio-group>\n\n  <novo-label>Color</novo-label>\n  <novo-radio-group #color appearance=\"vertical\">\n    <novo-radio name=\"color\" value=\"grapefruit\">grapefruit</novo-radio>\n    <novo-radio name=\"color\" value=\"aqua\">aqua</novo-radio>\n    <novo-radio name=\"color\" value=\"mint\">mint</novo-radio>\n    <novo-radio name=\"color\" value=\"ocean\">ocean</novo-radio>\n  </novo-radio-group>\n</section>", styles: [":host{display:grid;grid-template-columns:1fr 1fr;gap:2rem}\n"], dependencies: [{ kind: "component", type: i2$1.NovoLoadingElement, selector: "novo-loading", inputs: ["theme", "color", "size"] }, { kind: "component", type: i2$1.NovoRadioElement, selector: "novo-radio", inputs: ["id", "name", "tabindex", "vertical", "label", "button", "theme", "size", "icon", "color", "disabled", "checked", "value"], outputs: ["change", "blur", "focus"] }, { kind: "component", type: i2$1.NovoRadioGroup, selector: "novo-radio-group", inputs: ["id", "tabindex", "errorStateMatcher", "appearance", "value", "name", "disabled", "required", "placeholder"], outputs: ["change", "blur"] }, { kind: "component", type: i2$1.NovoLabel, selector: "novo-label,[novo-label]", inputs: ["id"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: LoadingLineExample, decorators: [{
            type: Component,
            args: [{ selector: 'loading-line-example', standalone: false, template: "<novo-loading [size]=\"size.value\" [color]=\"color.value\"></novo-loading>\n\n<section>\n  <novo-label>Size</novo-label>\n  <novo-radio-group #size appearance=\"vertical\" value=\"medium\">\n    <novo-radio name=\"size\" value=\"small\">small</novo-radio>\n    <novo-radio name=\"size\" value=\"medium\">medium</novo-radio>\n    <novo-radio name=\"size\" value=\"large\">large</novo-radio>\n  </novo-radio-group>\n\n  <novo-label>Color</novo-label>\n  <novo-radio-group #color appearance=\"vertical\">\n    <novo-radio name=\"color\" value=\"grapefruit\">grapefruit</novo-radio>\n    <novo-radio name=\"color\" value=\"aqua\">aqua</novo-radio>\n    <novo-radio name=\"color\" value=\"mint\">mint</novo-radio>\n    <novo-radio name=\"color\" value=\"ocean\">ocean</novo-radio>\n  </novo-radio-group>\n</section>", styles: [":host{display:grid;grid-template-columns:1fr 1fr;gap:2rem}\n"] }]
        }] });

/**
 * @title Basic Menu
 */
class BasicMenuExample {
    clickMe(event) {
        window.alert(event);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: BasicMenuExample, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: BasicMenuExample, isStandalone: false, selector: "basic-menu-example", ngImport: i0, template: "<novo-button theme=\"secondary\" icon=\"collapse\" [menu]=\"menu\">Actions</novo-button>\n\n<!-- Menu Template -->\n<novo-menu #menu>\n  <novo-option id=\"mi-preview\" *menuItem (click)=\"clickMe($event)\">Preview</novo-option>\n  <novo-option id=\"mi-edit\" *menuItem (click)=\"clickMe($event)\">Edit</novo-option>\n  <novo-option id=\"mi-disabled\" *menuItem (click)=\"clickMe($event)\" disabled>Disabled</novo-option>\n  <novo-divider *menuItem></novo-divider>\n  <novo-option id=\"mi-delete\" *menuItem (click)=\"clickMe($event)\">\n    <span>Delete</span>\n    <novo-icon novoSuffix>delete-o</novo-icon>\n  </novo-option>\n</novo-menu>\n\n\n<novo-button theme=\"icon\" icon=\"more\" [menu]=\"icons\"></novo-button>\n\n<!-- Menu Template -->\n<novo-menu #icons>\n  <novo-option *menuItem (click)=\"clickMe($event)\">\n    <novo-icon>preview</novo-icon>\n    <span>Preview</span>\n  </novo-option>\n  <novo-option *menuItem (click)=\"clickMe($event)\">\n    <novo-icon>edit</novo-icon>\n    <span>Edit</span>\n  </novo-option>\n  <novo-divider *menuItem></novo-divider>\n  <novo-option *menuItem class=\"red\" (click)=\"clickMe($event)\">\n    <novo-icon>delete-o</novo-icon>\n    <span>Delete</span>\n  </novo-option>\n</novo-menu>", styles: [""], dependencies: [{ kind: "component", type: i2$1.NovoButtonElement, selector: "novo-button,button[theme]", inputs: ["color", "side", "size", "theme", "loading", "icon", "secondIcon", "disabled"] }, { kind: "component", type: i2$1.NovoDividerComponent, selector: "novo-divider", inputs: ["vertical", "inset"] }, { kind: "component", type: i2$1.NovoIconComponent, selector: "novo-icon", inputs: ["raised", "theme", "shape", "color", "size", "smaller", "larger", "alt", "name"] }, { kind: "directive", type: i2$1.ThemeColorDirective, selector: "[theme]", inputs: ["theme"] }, { kind: "component", type: i2$1.NovoOption, selector: "novo-option", inputs: ["selected", "keepOpen", "novoInert", "value", "disabled"], exportAs: ["novoOption"] }, { kind: "directive", type: i2$1.NovoFieldSuffixDirective, selector: "[novoSuffix]" }, { kind: "directive", type: i2$1.MenuDirective, selector: "[menu]", inputs: ["menuContext", "menu", "menuContent", "waitWhenOpen", "capture", "anchor", "trigger"] }, { kind: "component", type: i2$1.MenuComponent, selector: "novo-menu", inputs: ["menuClass", "autoFocus", "disabled"], outputs: ["close", "open"] }, { kind: "directive", type: i2$1.MenuItemDirective, selector: "[menuItem]", inputs: ["menuItemEnabled", "menuItemVisible"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: BasicMenuExample, decorators: [{
            type: Component,
            args: [{ selector: 'basic-menu-example', standalone: false, template: "<novo-button theme=\"secondary\" icon=\"collapse\" [menu]=\"menu\">Actions</novo-button>\n\n<!-- Menu Template -->\n<novo-menu #menu>\n  <novo-option id=\"mi-preview\" *menuItem (click)=\"clickMe($event)\">Preview</novo-option>\n  <novo-option id=\"mi-edit\" *menuItem (click)=\"clickMe($event)\">Edit</novo-option>\n  <novo-option id=\"mi-disabled\" *menuItem (click)=\"clickMe($event)\" disabled>Disabled</novo-option>\n  <novo-divider *menuItem></novo-divider>\n  <novo-option id=\"mi-delete\" *menuItem (click)=\"clickMe($event)\">\n    <span>Delete</span>\n    <novo-icon novoSuffix>delete-o</novo-icon>\n  </novo-option>\n</novo-menu>\n\n\n<novo-button theme=\"icon\" icon=\"more\" [menu]=\"icons\"></novo-button>\n\n<!-- Menu Template -->\n<novo-menu #icons>\n  <novo-option *menuItem (click)=\"clickMe($event)\">\n    <novo-icon>preview</novo-icon>\n    <span>Preview</span>\n  </novo-option>\n  <novo-option *menuItem (click)=\"clickMe($event)\">\n    <novo-icon>edit</novo-icon>\n    <span>Edit</span>\n  </novo-option>\n  <novo-divider *menuItem></novo-divider>\n  <novo-option *menuItem class=\"red\" (click)=\"clickMe($event)\">\n    <novo-icon>delete-o</novo-icon>\n    <span>Delete</span>\n  </novo-option>\n</novo-menu>" }]
        }] });

/**
 * @title Menu Context
 */
class MenuContextExample {
    constructor() {
        this.apple = 'Context is Apples';
        this.orange = 'Context is Orange';
        this.isOrange = (item) => item === this.orange;
    }
    clickMe(event) {
        window.alert(event);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: MenuContextExample, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: MenuContextExample, isStandalone: false, selector: "menu-context-example", ngImport: i0, template: "<button type=\"button\" theme=\"secondary\" icon=\"collapse\" [menu]=\"menu\" [menuContext]=\"apple\">Apples</button>\n<button type=\"button\" theme=\"secondary\" icon=\"collapse\" [menu]=\"menu\" [menuContext]=\"orange\">Oranges</button>\n<!-- Menu Template -->\n<novo-menu #menu>\n  <novo-option *menuItem=\"let item\" (click)=\"clickMe(item)\">Preview</novo-option>\n  <novo-option *menuItem=\"let item\" (click)=\"clickMe(item)\">Edit</novo-option>\n  <novo-option *menuItem=\"let item\" (click)=\"clickMe(item)\">Delete</novo-option>\n  <novo-option *menuItem=\"let item\" [disabled]=\"isOrange(item)\">Disabled if Orange</novo-option>\n  <novo-option *menuItem=\"let item;visible:isOrange;\">Visible if Orange</novo-option>\n</novo-menu>", styles: ["span[tooltip]{margin-left:10px}\n"], dependencies: [{ kind: "component", type: i2$1.NovoButtonElement, selector: "novo-button,button[theme]", inputs: ["color", "side", "size", "theme", "loading", "icon", "secondIcon", "disabled"] }, { kind: "directive", type: i2$1.ThemeColorDirective, selector: "[theme]", inputs: ["theme"] }, { kind: "component", type: i2$1.NovoOption, selector: "novo-option", inputs: ["selected", "keepOpen", "novoInert", "value", "disabled"], exportAs: ["novoOption"] }, { kind: "directive", type: i2$1.MenuDirective, selector: "[menu]", inputs: ["menuContext", "menu", "menuContent", "waitWhenOpen", "capture", "anchor", "trigger"] }, { kind: "component", type: i2$1.MenuComponent, selector: "novo-menu", inputs: ["menuClass", "autoFocus", "disabled"], outputs: ["close", "open"] }, { kind: "directive", type: i2$1.MenuItemDirective, selector: "[menuItem]", inputs: ["menuItemEnabled", "menuItemVisible"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: MenuContextExample, decorators: [{
            type: Component,
            args: [{ selector: 'menu-context-example', standalone: false, template: "<button type=\"button\" theme=\"secondary\" icon=\"collapse\" [menu]=\"menu\" [menuContext]=\"apple\">Apples</button>\n<button type=\"button\" theme=\"secondary\" icon=\"collapse\" [menu]=\"menu\" [menuContext]=\"orange\">Oranges</button>\n<!-- Menu Template -->\n<novo-menu #menu>\n  <novo-option *menuItem=\"let item\" (click)=\"clickMe(item)\">Preview</novo-option>\n  <novo-option *menuItem=\"let item\" (click)=\"clickMe(item)\">Edit</novo-option>\n  <novo-option *menuItem=\"let item\" (click)=\"clickMe(item)\">Delete</novo-option>\n  <novo-option *menuItem=\"let item\" [disabled]=\"isOrange(item)\">Disabled if Orange</novo-option>\n  <novo-option *menuItem=\"let item;visible:isOrange;\">Visible if Orange</novo-option>\n</novo-menu>", styles: ["span[tooltip]{margin-left:10px}\n"] }]
        }] });

/**
 * @title Nested Menu
 */
class NestedMenuExample {
    clickMe(event) {
        window.alert(event);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: NestedMenuExample, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: NestedMenuExample, isStandalone: false, selector: "nested-menu-example", ngImport: i0, template: "<button type=\"button\" theme=\"secondary\" icon=\"collapse\" [menu]=\"menu\">Actions</button>\n\n<!-- Menu Template -->\n<novo-menu #menu>\n  <novo-option *menuItem (click)=\"clickMe($event)\">Preview</novo-option>\n  <novo-option *menuItem (click)=\"clickMe($event)\">Edit</novo-option>\n  <novo-option *menuItem [menu]=\"subMenu\">Choose...</novo-option>\n  <novo-menu #subMenu>\n    <novo-option *menuItem (click)=\"clickMe($event)\">Available</novo-option>\n    <novo-option *menuItem (click)=\"clickMe($event)\">Not Available</novo-option>\n  </novo-menu>\n</novo-menu>", styles: ["span[tooltip]{margin-left:10px}\n"], dependencies: [{ kind: "component", type: i2$1.NovoButtonElement, selector: "novo-button,button[theme]", inputs: ["color", "side", "size", "theme", "loading", "icon", "secondIcon", "disabled"] }, { kind: "directive", type: i2$1.ThemeColorDirective, selector: "[theme]", inputs: ["theme"] }, { kind: "component", type: i2$1.NovoOption, selector: "novo-option", inputs: ["selected", "keepOpen", "novoInert", "value", "disabled"], exportAs: ["novoOption"] }, { kind: "directive", type: i2$1.MenuDirective, selector: "[menu]", inputs: ["menuContext", "menu", "menuContent", "waitWhenOpen", "capture", "anchor", "trigger"] }, { kind: "component", type: i2$1.MenuComponent, selector: "novo-menu", inputs: ["menuClass", "autoFocus", "disabled"], outputs: ["close", "open"] }, { kind: "directive", type: i2$1.MenuItemDirective, selector: "[menuItem]", inputs: ["menuItemEnabled", "menuItemVisible"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: NestedMenuExample, decorators: [{
            type: Component,
            args: [{ selector: 'nested-menu-example', standalone: false, template: "<button type=\"button\" theme=\"secondary\" icon=\"collapse\" [menu]=\"menu\">Actions</button>\n\n<!-- Menu Template -->\n<novo-menu #menu>\n  <novo-option *menuItem (click)=\"clickMe($event)\">Preview</novo-option>\n  <novo-option *menuItem (click)=\"clickMe($event)\">Edit</novo-option>\n  <novo-option *menuItem [menu]=\"subMenu\">Choose...</novo-option>\n  <novo-menu #subMenu>\n    <novo-option *menuItem (click)=\"clickMe($event)\">Available</novo-option>\n    <novo-option *menuItem (click)=\"clickMe($event)\">Not Available</novo-option>\n  </novo-menu>\n</novo-menu>", styles: ["span[tooltip]{margin-left:10px}\n"] }]
        }] });

class ModalCustomDemo {
    constructor(modalRef) {
        this.modalRef = modalRef;
    }
    close() {
        this.modalRef.close();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: ModalCustomDemo, deps: [{ token: i1$1.NovoModalRef }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: ModalCustomDemo, isStandalone: false, selector: "modal-custom-demo", ngImport: i0, template: `
    <novo-notification type="custom" icon="trending-up">
      <h1>I have a trending icon!</h1>
      <h2>This notification type allows for any Bullhorn Icon</h2>
      <button theme="primary" icon="check" (click)="close()">Sweet.</button>
    </novo-notification>
  `, isInline: true, dependencies: [{ kind: "component", type: i2$1.NovoButtonElement, selector: "novo-button,button[theme]", inputs: ["color", "side", "size", "theme", "loading", "icon", "secondIcon", "disabled"] }, { kind: "component", type: i2$1.NovoModalNotificationElement, selector: "novo-notification", inputs: ["type", "icon"], outputs: ["cancel"] }, { kind: "directive", type: i2$1.ThemeColorDirective, selector: "[theme]", inputs: ["theme"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: ModalCustomDemo, decorators: [{
            type: Component,
            args: [{
                    selector: 'modal-custom-demo',
                    template: `
    <novo-notification type="custom" icon="trending-up">
      <h1>I have a trending icon!</h1>
      <h2>This notification type allows for any Bullhorn Icon</h2>
      <button theme="primary" icon="check" (click)="close()">Sweet.</button>
    </novo-notification>
  `,
                    standalone: false
                }]
        }], ctorParameters: () => [{ type: i1$1.NovoModalRef }] });
/**
 * @title Custom Modal Example
 */
class CustomModalExample {
    constructor(modalService) {
        this.modalService = modalService;
    }
    showModal() {
        this.modalService.open(ModalCustomDemo);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: CustomModalExample, deps: [{ token: i1$1.NovoModalService }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: CustomModalExample, isStandalone: false, selector: "custom-modal-example", ngImport: i0, template: "<button data-automation-id=\"modal-trigger\" theme=\"secondary\" (click)=\"showModal()\">Show Me :)</button>\n", styles: [":host{display:block;background:#0000008c;padding:35px 0;position:relative;text-align:center}\n"], dependencies: [{ kind: "component", type: i2$1.NovoButtonElement, selector: "novo-button,button[theme]", inputs: ["color", "side", "size", "theme", "loading", "icon", "secondIcon", "disabled"] }, { kind: "directive", type: i2$1.ThemeColorDirective, selector: "[theme]", inputs: ["theme"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: CustomModalExample, decorators: [{
            type: Component,
            args: [{ selector: 'custom-modal-example', standalone: false, template: "<button data-automation-id=\"modal-trigger\" theme=\"secondary\" (click)=\"showModal()\">Show Me :)</button>\n", styles: [":host{display:block;background:#0000008c;padding:35px 0;position:relative;text-align:center}\n"] }]
        }], ctorParameters: () => [{ type: i1$1.NovoModalService }] });

class ModalErrorDemo {
    constructor(modalRef) {
        this.modalRef = modalRef;
    }
    close() {
        this.modalRef.close();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: ModalErrorDemo, deps: [{ token: i1$1.NovoModalRef }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: ModalErrorDemo, isStandalone: false, selector: "modal-error-demo", ngImport: i0, template: `
    <novo-notification type="error">
      <h1>Sorry, something went wrong.</h1>
      <h2>You did not have 1.21 gigawatts of power.</h2>
      <button theme="primary" icon="refresh-o" (click)="close()">Refresh this page</button>
    </novo-notification>
  `, isInline: true, dependencies: [{ kind: "component", type: i2$1.NovoButtonElement, selector: "novo-button,button[theme]", inputs: ["color", "side", "size", "theme", "loading", "icon", "secondIcon", "disabled"] }, { kind: "component", type: i2$1.NovoModalNotificationElement, selector: "novo-notification", inputs: ["type", "icon"], outputs: ["cancel"] }, { kind: "directive", type: i2$1.ThemeColorDirective, selector: "[theme]", inputs: ["theme"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: ModalErrorDemo, decorators: [{
            type: Component,
            args: [{
                    selector: 'modal-error-demo',
                    template: `
    <novo-notification type="error">
      <h1>Sorry, something went wrong.</h1>
      <h2>You did not have 1.21 gigawatts of power.</h2>
      <button theme="primary" icon="refresh-o" (click)="close()">Refresh this page</button>
    </novo-notification>
  `,
                    standalone: false
                }]
        }], ctorParameters: () => [{ type: i1$1.NovoModalRef }] });
/**
 * @title Error Modal Example
 */
class ErrorModalExample {
    constructor(modalService) {
        this.modalService = modalService;
    }
    showModal() {
        this.modalService.open(ModalErrorDemo);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: ErrorModalExample, deps: [{ token: i1$1.NovoModalService }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: ErrorModalExample, isStandalone: false, selector: "error-modal-example", ngImport: i0, template: "<button data-automation-id=\"modal-trigger\" theme=\"secondary\" (click)=\"showModal()\">Show Me :)</button>\n", styles: [":host{display:block;background:#0000008c;padding:35px 0;position:relative;text-align:center}\n"], dependencies: [{ kind: "component", type: i2$1.NovoButtonElement, selector: "novo-button,button[theme]", inputs: ["color", "side", "size", "theme", "loading", "icon", "secondIcon", "disabled"] }, { kind: "directive", type: i2$1.ThemeColorDirective, selector: "[theme]", inputs: ["theme"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: ErrorModalExample, decorators: [{
            type: Component,
            args: [{ selector: 'error-modal-example', standalone: false, template: "<button data-automation-id=\"modal-trigger\" theme=\"secondary\" (click)=\"showModal()\">Show Me :)</button>\n", styles: [":host{display:block;background:#0000008c;padding:35px 0;position:relative;text-align:center}\n"] }]
        }], ctorParameters: () => [{ type: i1$1.NovoModalService }] });

class ModalAddFormDemo {
    constructor(modalRef, formUtils) {
        this.modalRef = modalRef;
        this.formUtils = formUtils;
    }
    ngOnInit() {
        this.textControl = new TextBoxControl({ key: 'text', label: 'Text Box' });
        this.emailControl = new TextBoxControl({ type: 'email', key: 'email', label: 'Email' });
        this.numberControl = new TextBoxControl({ type: 'number', key: 'number', label: 'Number' });
        this.pickerControl = new PickerControl({
            key: 'picker',
            multiple: false,
            label: 'Picker',
            required: true,
            config: {
                resultsTemplate: PickerResults,
                options: ['Apple', 'Banana', 'Grapes', 'Orange', 'Pear'],
            },
        });
        this.textForm = this.formUtils.toFormGroup([this.textControl, this.emailControl, this.numberControl, this.pickerControl]);
    }
    close() {
        this.modalRef.close();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: ModalAddFormDemo, deps: [{ token: i1$1.NovoModalRef }, { token: i1$1.FormUtils }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: ModalAddFormDemo, isStandalone: false, selector: "modal-edit-form-demo", ngImport: i0, template: `
    <novo-modal>
      <header theme="contact">
        <novo-icon>person</novo-icon>
        <novo-title>Add Contact</novo-title>
        <novo-action icon="times" (click)="close()"></novo-action>
      </header>
      <section>
        <novo-form [form]="textForm">
          <div class="novo-form-row">
            <novo-control [form]="textForm" [control]="textControl"></novo-control>
          </div>
          <div class="novo-form-row">
            <novo-control [form]="textForm" [control]="emailControl"></novo-control>
          </div>
          <div class="novo-form-row">
            <novo-control [form]="textForm" [control]="numberControl"></novo-control>
          </div>
          <div class="novo-form-row">
            <novo-control [form]="textForm" [control]="pickerControl"></novo-control>
          </div>
        </novo-form>
      </section>
      <button theme="standard" (click)="close()">Cancel</button>
      <button theme="primary" icon="check" (click)="close()">Save</button>
    </novo-modal>
  `, isInline: true, dependencies: [{ kind: "component", type: i2$1.NovoButtonElement, selector: "novo-button,button[theme]", inputs: ["color", "side", "size", "theme", "loading", "icon", "secondIcon", "disabled"] }, { kind: "component", type: i2$1.NovoHeaderComponent, selector: "novo-header,header[theme],header[accent]", inputs: ["condensed", "title", "subTitle", "icon", "size", "theme"] }, { kind: "component", type: i2$1.NovoUtilActionComponent, selector: "util-action, novo-action", inputs: ["icon", "size", "inverse", "disabled"] }, { kind: "component", type: i2$1.NovoModalElement, selector: "novo-modal" }, { kind: "component", type: i2$1.NovoControlElement, selector: "novo-control", inputs: ["control", "form", "condensed", "autoFocus"], outputs: ["change", "edit", "save", "delete", "upload", "blur", "focus"] }, { kind: "component", type: i2$1.NovoFormElement, selector: "novo-form", inputs: ["form", "layout", "hideHeader"] }, { kind: "component", type: i2$1.NovoIconComponent, selector: "novo-icon", inputs: ["raised", "theme", "shape", "color", "size", "smaller", "larger", "alt", "name"] }, { kind: "component", type: i2$1.NovoTitle, selector: "novo-title,[novo-title]" }, { kind: "directive", type: i2$1.ThemeColorDirective, selector: "[theme]", inputs: ["theme"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: ModalAddFormDemo, decorators: [{
            type: Component,
            args: [{
                    selector: 'modal-edit-form-demo',
                    template: `
    <novo-modal>
      <header theme="contact">
        <novo-icon>person</novo-icon>
        <novo-title>Add Contact</novo-title>
        <novo-action icon="times" (click)="close()"></novo-action>
      </header>
      <section>
        <novo-form [form]="textForm">
          <div class="novo-form-row">
            <novo-control [form]="textForm" [control]="textControl"></novo-control>
          </div>
          <div class="novo-form-row">
            <novo-control [form]="textForm" [control]="emailControl"></novo-control>
          </div>
          <div class="novo-form-row">
            <novo-control [form]="textForm" [control]="numberControl"></novo-control>
          </div>
          <div class="novo-form-row">
            <novo-control [form]="textForm" [control]="pickerControl"></novo-control>
          </div>
        </novo-form>
      </section>
      <button theme="standard" (click)="close()">Cancel</button>
      <button theme="primary" icon="check" (click)="close()">Save</button>
    </novo-modal>
  `,
                    standalone: false
                }]
        }], ctorParameters: () => [{ type: i1$1.NovoModalRef }, { type: i1$1.FormUtils }] });
/**
 * @title Modal Add Form Example
 */
class ModalAddFormExample {
    constructor(modalService) {
        this.modalService = modalService;
    }
    showModal() {
        this.modalService.open(ModalAddFormDemo);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: ModalAddFormExample, deps: [{ token: i1$1.NovoModalService }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: ModalAddFormExample, isStandalone: false, selector: "modal-add-form-example", ngImport: i0, template: "<button data-automation-id=\"modal-trigger\" theme=\"secondary\" (click)=\"showModal()\">Show Me :)</button>\n", styles: [":host{display:block;background:#0000008c;padding:35px 0;position:relative;text-align:center}\n"], dependencies: [{ kind: "component", type: i2$1.NovoButtonElement, selector: "novo-button,button[theme]", inputs: ["color", "side", "size", "theme", "loading", "icon", "secondIcon", "disabled"] }, { kind: "directive", type: i2$1.ThemeColorDirective, selector: "[theme]", inputs: ["theme"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: ModalAddFormExample, decorators: [{
            type: Component,
            args: [{ selector: 'modal-add-form-example', standalone: false, template: "<button data-automation-id=\"modal-trigger\" theme=\"secondary\" (click)=\"showModal()\">Show Me :)</button>\n", styles: [":host{display:block;background:#0000008c;padding:35px 0;position:relative;text-align:center}\n"] }]
        }], ctorParameters: () => [{ type: i1$1.NovoModalService }] });

class ModalEditFormDemo {
    constructor(modalRef, formUtils) {
        this.modalRef = modalRef;
        this.formUtils = formUtils;
        this.formUtils = formUtils;
        this.modalRef = modalRef;
    }
    ngOnInit() {
        this.textControl = new TextBoxControl({ key: 'text', label: 'Text Box' });
        this.emailControl = new TextBoxControl({ type: 'email', key: 'email', label: 'Email' });
        this.numberControl = new TextBoxControl({ type: 'number', key: 'number', label: 'Number' });
        this.pickerControl = new PickerControl({
            key: 'picker',
            multiple: true,
            label: 'Picker',
            required: true,
            config: {
                resultsTemplate: PickerResults,
                options: ['Apple', 'Banana', 'Grapes', 'Orange', 'Pear'],
            },
        });
        this.textForm = this.formUtils.toFormGroup([this.textControl, this.emailControl, this.numberControl, this.pickerControl]);
    }
    close() {
        this.modalRef.close();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: ModalEditFormDemo, deps: [{ token: i1$1.NovoModalRef }, { token: i1$1.FormUtils }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: ModalEditFormDemo, isStandalone: false, selector: "modal-edit-form-demo", ngImport: i0, template: `
    <novo-modal>
      <header theme="candidate">
        <novo-icon>candidate</novo-icon>
        <novo-title>Ferdinand del Toro</novo-title>
        <novo-action icon="times" (click)="close()"></novo-action>
      </header>
      <section>
        <novo-form [form]="textForm">
          <div class="novo-form-row">
            <novo-control [form]="textForm" [control]="textControl"></novo-control>
          </div>
          <div class="novo-form-row">
            <novo-control [form]="textForm" [control]="emailControl"></novo-control>
          </div>
          <div class="novo-form-row">
            <novo-control [form]="textForm" [control]="numberControl"></novo-control>
          </div>
          <div class="novo-form-row">
            <novo-control [form]="textForm" [control]="pickerControl"></novo-control>
          </div>
        </novo-form>
      </section>
      <button theme="standard" (click)="close()">Cancel</button>
      <button theme="primary" icon="check" (click)="close()">Save</button>
    </novo-modal>
  `, isInline: true, dependencies: [{ kind: "component", type: i2$1.NovoButtonElement, selector: "novo-button,button[theme]", inputs: ["color", "side", "size", "theme", "loading", "icon", "secondIcon", "disabled"] }, { kind: "component", type: i2$1.NovoHeaderComponent, selector: "novo-header,header[theme],header[accent]", inputs: ["condensed", "title", "subTitle", "icon", "size", "theme"] }, { kind: "component", type: i2$1.NovoUtilActionComponent, selector: "util-action, novo-action", inputs: ["icon", "size", "inverse", "disabled"] }, { kind: "component", type: i2$1.NovoModalElement, selector: "novo-modal" }, { kind: "component", type: i2$1.NovoControlElement, selector: "novo-control", inputs: ["control", "form", "condensed", "autoFocus"], outputs: ["change", "edit", "save", "delete", "upload", "blur", "focus"] }, { kind: "component", type: i2$1.NovoFormElement, selector: "novo-form", inputs: ["form", "layout", "hideHeader"] }, { kind: "component", type: i2$1.NovoIconComponent, selector: "novo-icon", inputs: ["raised", "theme", "shape", "color", "size", "smaller", "larger", "alt", "name"] }, { kind: "component", type: i2$1.NovoTitle, selector: "novo-title,[novo-title]" }, { kind: "directive", type: i2$1.ThemeColorDirective, selector: "[theme]", inputs: ["theme"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: ModalEditFormDemo, decorators: [{
            type: Component,
            args: [{
                    selector: 'modal-edit-form-demo',
                    template: `
    <novo-modal>
      <header theme="candidate">
        <novo-icon>candidate</novo-icon>
        <novo-title>Ferdinand del Toro</novo-title>
        <novo-action icon="times" (click)="close()"></novo-action>
      </header>
      <section>
        <novo-form [form]="textForm">
          <div class="novo-form-row">
            <novo-control [form]="textForm" [control]="textControl"></novo-control>
          </div>
          <div class="novo-form-row">
            <novo-control [form]="textForm" [control]="emailControl"></novo-control>
          </div>
          <div class="novo-form-row">
            <novo-control [form]="textForm" [control]="numberControl"></novo-control>
          </div>
          <div class="novo-form-row">
            <novo-control [form]="textForm" [control]="pickerControl"></novo-control>
          </div>
        </novo-form>
      </section>
      <button theme="standard" (click)="close()">Cancel</button>
      <button theme="primary" icon="check" (click)="close()">Save</button>
    </novo-modal>
  `,
                    standalone: false
                }]
        }], ctorParameters: () => [{ type: i1$1.NovoModalRef }, { type: i1$1.FormUtils }] });
/**
 * @title Modal Edit Form Example
 */
class ModalEditFormExample {
    constructor(modalService) {
        this.modalService = modalService;
    }
    showModal() {
        this.modalService.open(ModalEditFormDemo);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: ModalEditFormExample, deps: [{ token: i1$1.NovoModalService }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: ModalEditFormExample, isStandalone: false, selector: "modal-edit-form-example", ngImport: i0, template: "<button data-automation-id=\"modal-trigger\" theme=\"secondary\" (click)=\"showModal()\">Show Me :)</button>\n", styles: [":host{display:block;background:#0000008c;padding:35px 0;position:relative;text-align:center}\n"], dependencies: [{ kind: "component", type: i2$1.NovoButtonElement, selector: "novo-button,button[theme]", inputs: ["color", "side", "size", "theme", "loading", "icon", "secondIcon", "disabled"] }, { kind: "directive", type: i2$1.ThemeColorDirective, selector: "[theme]", inputs: ["theme"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: ModalEditFormExample, decorators: [{
            type: Component,
            args: [{ selector: 'modal-edit-form-example', standalone: false, template: "<button data-automation-id=\"modal-trigger\" theme=\"secondary\" (click)=\"showModal()\">Show Me :)</button>\n", styles: [":host{display:block;background:#0000008c;padding:35px 0;position:relative;text-align:center}\n"] }]
        }], ctorParameters: () => [{ type: i1$1.NovoModalService }] });

class ModalSuccessDemo {
    constructor(modalRef) {
        this.modalRef = modalRef;
    }
    close() {
        this.modalRef.close();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: ModalSuccessDemo, deps: [{ token: i1$1.NovoModalRef }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: ModalSuccessDemo, isStandalone: false, selector: "modal-success-demo", ngImport: i0, template: `
    <novo-notification type="success">
      <h1>Woooo!</h1>
      <h2>You did something awesome!</h2>
      <button theme="primary" icon="check" (click)="close()">I'm awesome</button>
    </novo-notification>
  `, isInline: true, dependencies: [{ kind: "component", type: i2$1.NovoButtonElement, selector: "novo-button,button[theme]", inputs: ["color", "side", "size", "theme", "loading", "icon", "secondIcon", "disabled"] }, { kind: "component", type: i2$1.NovoModalNotificationElement, selector: "novo-notification", inputs: ["type", "icon"], outputs: ["cancel"] }, { kind: "directive", type: i2$1.ThemeColorDirective, selector: "[theme]", inputs: ["theme"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: ModalSuccessDemo, decorators: [{
            type: Component,
            args: [{
                    selector: 'modal-success-demo',
                    template: `
    <novo-notification type="success">
      <h1>Woooo!</h1>
      <h2>You did something awesome!</h2>
      <button theme="primary" icon="check" (click)="close()">I'm awesome</button>
    </novo-notification>
  `,
                    standalone: false
                }]
        }], ctorParameters: () => [{ type: i1$1.NovoModalRef }] });
/**
 * @title Success Modal Example
 */
class SuccessModalExample {
    constructor(modalService) {
        this.modalService = modalService;
    }
    showModal() {
        this.modalService.open(ModalSuccessDemo);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: SuccessModalExample, deps: [{ token: i1$1.NovoModalService }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: SuccessModalExample, isStandalone: false, selector: "success-modal-example", ngImport: i0, template: "<button data-automation-id=\"modal-trigger\" theme=\"secondary\" (click)=\"showModal()\">Show Me :)</button>\n", styles: [":host{display:block;background:#0000008c;padding:35px 0;position:relative;text-align:center}\n"], dependencies: [{ kind: "component", type: i2$1.NovoButtonElement, selector: "novo-button,button[theme]", inputs: ["color", "side", "size", "theme", "loading", "icon", "secondIcon", "disabled"] }, { kind: "directive", type: i2$1.ThemeColorDirective, selector: "[theme]", inputs: ["theme"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: SuccessModalExample, decorators: [{
            type: Component,
            args: [{ selector: 'success-modal-example', standalone: false, template: "<button data-automation-id=\"modal-trigger\" theme=\"secondary\" (click)=\"showModal()\">Show Me :)</button>\n", styles: [":host{display:block;background:#0000008c;padding:35px 0;position:relative;text-align:center}\n"] }]
        }], ctorParameters: () => [{ type: i1$1.NovoModalService }] });

class ModalWarningDemo {
    constructor(modalRef) {
        this.modalRef = modalRef;
    }
    close() {
        this.modalRef.close();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: ModalWarningDemo, deps: [{ token: i1$1.NovoModalRef }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: ModalWarningDemo, isStandalone: false, selector: "modal-warning-demo", ngImport: i0, template: `
    <novo-notification type="warning">
      <h1>This action will delete 25 records.</h1>
      <h2>Are you sure you wish to continue?</h2>
      <button theme="standard" (click)="close()">Cancel</button>
      <button theme="primary" color="negative" icon="delete" (click)="close()">Delete</button>
    </novo-notification>
  `, isInline: true, dependencies: [{ kind: "component", type: i2$1.NovoButtonElement, selector: "novo-button,button[theme]", inputs: ["color", "side", "size", "theme", "loading", "icon", "secondIcon", "disabled"] }, { kind: "component", type: i2$1.NovoModalNotificationElement, selector: "novo-notification", inputs: ["type", "icon"], outputs: ["cancel"] }, { kind: "directive", type: i2$1.ThemeColorDirective, selector: "[theme]", inputs: ["theme"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: ModalWarningDemo, decorators: [{
            type: Component,
            args: [{
                    selector: 'modal-warning-demo',
                    template: `
    <novo-notification type="warning">
      <h1>This action will delete 25 records.</h1>
      <h2>Are you sure you wish to continue?</h2>
      <button theme="standard" (click)="close()">Cancel</button>
      <button theme="primary" color="negative" icon="delete" (click)="close()">Delete</button>
    </novo-notification>
  `,
                    standalone: false
                }]
        }], ctorParameters: () => [{ type: i1$1.NovoModalRef }] });
/**
 * @title Warning Modal Example
 */
class WarningModalExample {
    constructor(modalService) {
        this.modalService = modalService;
    }
    showModal() {
        this.modalService.open(ModalWarningDemo);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: WarningModalExample, deps: [{ token: i1$1.NovoModalService }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: WarningModalExample, isStandalone: false, selector: "warning-modal-example", ngImport: i0, template: "<button data-automation-id=\"modal-trigger\" theme=\"secondary\" (click)=\"showModal()\">Show Me :)</button>\n", styles: [":host{display:block;background:#0000008c;padding:35px 0;position:relative;text-align:center}\n"], dependencies: [{ kind: "component", type: i2$1.NovoButtonElement, selector: "novo-button,button[theme]", inputs: ["color", "side", "size", "theme", "loading", "icon", "secondIcon", "disabled"] }, { kind: "directive", type: i2$1.ThemeColorDirective, selector: "[theme]", inputs: ["theme"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: WarningModalExample, decorators: [{
            type: Component,
            args: [{ selector: 'warning-modal-example', standalone: false, template: "<button data-automation-id=\"modal-trigger\" theme=\"secondary\" (click)=\"showModal()\">Show Me :)</button>\n", styles: [":host{display:block;background:#0000008c;padding:35px 0;position:relative;text-align:center}\n"] }]
        }], ctorParameters: () => [{ type: i1$1.NovoModalService }] });

/**
 * @title Non Ideal State Usage
 */
class NonIdealStateUsageExample {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: NonIdealStateUsageExample, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: NonIdealStateUsageExample, isStandalone: false, selector: "non-ideal-state-usage-example", ngImport: i0, template: "<novo-non-ideal-state icon=\"file\" title=\"This folder is empty\" description=\"Upload a new file to populate the folder.\">\n  <button theme=\"primary\" icon=\"upload\">Upload</button>\n</novo-non-ideal-state>\n\n<novo-non-ideal-state>\n  <novo-icon size=\"xl\" color=\"grapefruit\">file</novo-icon>\n  <novo-title>This folder is empty</novo-title>\n  <novo-text>Upload a new file to populate the folder.</novo-text>\n  <novo-tip-well>\n    <novo-text>Sed sodales ligula et fermentum bibendum. Aliquam tincidunt sagittis leo eget auctor. Fusce eu sagittis\n      metus, ut viverra magna. Mauris mollis nisl nec libero tincidunt posuere.</novo-text>\n  </novo-tip-well>\n  <button theme=\"primary\" icon=\"upload\">Upload</button>\n</novo-non-ideal-state>", styles: ["span[ng-reflect-tooltip]{margin-left:10px}\n"], dependencies: [{ kind: "component", type: i2$1.NovoButtonElement, selector: "novo-button,button[theme]", inputs: ["color", "side", "size", "theme", "loading", "icon", "secondIcon", "disabled"] }, { kind: "component", type: i2$1.NovoTipWellElement, selector: "novo-tip-well", inputs: ["name", "tip", "buttonText", "button", "icon", "sanitize"], outputs: ["confirmed"] }, { kind: "component", type: i2$1.NovoIconComponent, selector: "novo-icon", inputs: ["raised", "theme", "shape", "color", "size", "smaller", "larger", "alt", "name"] }, { kind: "component", type: i2$1.NovoText, selector: "novo-text,[novo-text]", inputs: ["block"] }, { kind: "component", type: i2$1.NovoTitle, selector: "novo-title,[novo-title]" }, { kind: "directive", type: i2$1.ThemeColorDirective, selector: "[theme]", inputs: ["theme"] }, { kind: "component", type: i2$1.NonIdealStateElement, selector: "novo-non-ideal-state", inputs: ["theme", "icon", "title", "description"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: NonIdealStateUsageExample, decorators: [{
            type: Component,
            args: [{ selector: 'non-ideal-state-usage-example', standalone: false, template: "<novo-non-ideal-state icon=\"file\" title=\"This folder is empty\" description=\"Upload a new file to populate the folder.\">\n  <button theme=\"primary\" icon=\"upload\">Upload</button>\n</novo-non-ideal-state>\n\n<novo-non-ideal-state>\n  <novo-icon size=\"xl\" color=\"grapefruit\">file</novo-icon>\n  <novo-title>This folder is empty</novo-title>\n  <novo-text>Upload a new file to populate the folder.</novo-text>\n  <novo-tip-well>\n    <novo-text>Sed sodales ligula et fermentum bibendum. Aliquam tincidunt sagittis leo eget auctor. Fusce eu sagittis\n      metus, ut viverra magna. Mauris mollis nisl nec libero tincidunt posuere.</novo-text>\n  </novo-tip-well>\n  <button theme=\"primary\" icon=\"upload\">Upload</button>\n</novo-non-ideal-state>", styles: ["span[ng-reflect-tooltip]{margin-left:10px}\n"] }]
        }] });

/**
 * @title PopOver with Automatic Positioning Example
 */
class PopOverAutoPlacementExample {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: PopOverAutoPlacementExample, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: PopOverAutoPlacementExample, isStandalone: false, selector: "pop-over-auto-placement-example", ngImport: i0, template: "<span novoPopover=\"If the placement of the PopOver will make it appear off-screen, then it will be automatically adjusted to appear on the opposite side. For example: this PopOver should appear below the element.&#13;&#10; &#13;&#10; &#13;&#10;Need to make extra space so this PopOver would actually appear below the screen.\"\n    popoverTitle=\"PopOver Moves to Top if near Bottom of Screen\"\n    popoverPlacement=\"bottom\"\n    [popoverOnHover]=\"true\">\n    Hover Me\n</span>\n<span novoPopover=\"Too small to drop below screen.\"\n    popoverTitle=\"PopOver Won't Change\"\n    popoverPlacement=\"bottom\"\n    [popoverOnHover]=\"true\">\n    Hover Me Next\n</span>\n", styles: [":host{margin:auto;padding:20px 30px;position:relative;display:flex}:host>span{cursor:pointer;margin:auto}\n"], dependencies: [{ kind: "directive", type: i2$1.PopOverDirective, selector: "[popover], [novoPopover]", inputs: ["popover", "novoPopover", "popoverHtmlContent", "popoverDisabled", "popoverAlways", "popoverAnimation", "popoverPlacement", "popoverTitle", "popoverOnHover", "popoverDismissTimeout"], outputs: ["onShown", "onHidden"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: PopOverAutoPlacementExample, decorators: [{
            type: Component,
            args: [{ selector: 'pop-over-auto-placement-example', standalone: false, template: "<span novoPopover=\"If the placement of the PopOver will make it appear off-screen, then it will be automatically adjusted to appear on the opposite side. For example: this PopOver should appear below the element.&#13;&#10; &#13;&#10; &#13;&#10;Need to make extra space so this PopOver would actually appear below the screen.\"\n    popoverTitle=\"PopOver Moves to Top if near Bottom of Screen\"\n    popoverPlacement=\"bottom\"\n    [popoverOnHover]=\"true\">\n    Hover Me\n</span>\n<span novoPopover=\"Too small to drop below screen.\"\n    popoverTitle=\"PopOver Won't Change\"\n    popoverPlacement=\"bottom\"\n    [popoverOnHover]=\"true\">\n    Hover Me Next\n</span>\n", styles: [":host{margin:auto;padding:20px 30px;position:relative;display:flex}:host>span{cursor:pointer;margin:auto}\n"] }]
        }] });

/**
 * @title PopOver Behaviors Example
 */
class PopOverBehaviorsExample {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: PopOverBehaviorsExample, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: PopOverBehaviorsExample, isStandalone: false, selector: "pop-over-behaviors-example", ngImport: i0, template: "<span class=\"popover-element\"\n    novoPopover=\"PopOver appears when hovering over the element. When the mouse is no longer over the element or the PopOver, then it will be dismissed.\"\n    popoverTitle=\"ON HOVER\"\n    popoverPlacement=\"right\"\n    [popoverOnHover]=\"true\">\nON HOVER\n</span>\n\n<span class=\"popover-element\"\n    novoPopover=\"PopOver appears when clicking on the element. Dismiss it by clicking the element again.\"\n    popoverTitle=\"ON CLICK\"\n    popoverPlacement=\"right\">\nON CLICK\n</span>\n\n<span class=\"popover-element\"\n    novoPopover=\"This PopOver has a 2000 ms or 2 second timeout on it. Dismiss it by clicking on the element or waiting for the timeout.\"\n    popoverTitle=\"ON CLICK WITH TIMEOUT\"\n    popoverPlacement=\"right\"\n    [popoverDismissTimeout]=\"2000\">\nON CLICK WITH TIMEOUT\n</span>\n\n<span class=\"popover-element\"\n    novoPopover=\"This PopOver will never appear when clicking on the element or when hovering over the element.\"\n    popoverTitle=\"popoverDisabled\"\n    popoverPlacement=\"right\"\n    [popoverDisabled]=\"true\">\nDISABLED POPOVER\n</span>\n", styles: [":host{margin:auto;padding:20px 30px;position:relative;display:flex}:host>span{cursor:pointer;margin:auto}\n"], dependencies: [{ kind: "directive", type: i2$1.PopOverDirective, selector: "[popover], [novoPopover]", inputs: ["popover", "novoPopover", "popoverHtmlContent", "popoverDisabled", "popoverAlways", "popoverAnimation", "popoverPlacement", "popoverTitle", "popoverOnHover", "popoverDismissTimeout"], outputs: ["onShown", "onHidden"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: PopOverBehaviorsExample, decorators: [{
            type: Component,
            args: [{ selector: 'pop-over-behaviors-example', standalone: false, template: "<span class=\"popover-element\"\n    novoPopover=\"PopOver appears when hovering over the element. When the mouse is no longer over the element or the PopOver, then it will be dismissed.\"\n    popoverTitle=\"ON HOVER\"\n    popoverPlacement=\"right\"\n    [popoverOnHover]=\"true\">\nON HOVER\n</span>\n\n<span class=\"popover-element\"\n    novoPopover=\"PopOver appears when clicking on the element. Dismiss it by clicking the element again.\"\n    popoverTitle=\"ON CLICK\"\n    popoverPlacement=\"right\">\nON CLICK\n</span>\n\n<span class=\"popover-element\"\n    novoPopover=\"This PopOver has a 2000 ms or 2 second timeout on it. Dismiss it by clicking on the element or waiting for the timeout.\"\n    popoverTitle=\"ON CLICK WITH TIMEOUT\"\n    popoverPlacement=\"right\"\n    [popoverDismissTimeout]=\"2000\">\nON CLICK WITH TIMEOUT\n</span>\n\n<span class=\"popover-element\"\n    novoPopover=\"This PopOver will never appear when clicking on the element or when hovering over the element.\"\n    popoverTitle=\"popoverDisabled\"\n    popoverPlacement=\"right\"\n    [popoverDisabled]=\"true\">\nDISABLED POPOVER\n</span>\n", styles: [":host{margin:auto;padding:20px 30px;position:relative;display:flex}:host>span{cursor:pointer;margin:auto}\n"] }]
        }] });

/**
 * @title PopOver with Dynamic HTML Template Example
 */
class PopOverDynamicExample {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: PopOverDynamicExample, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: PopOverDynamicExample, isStandalone: false, selector: "pop-over-dynamic-example", ngImport: i0, template: "<popover-content\n  #dynamicHtmlPopOver\n  title=\"this header can be omitted\"\n  placement=\"right\">\n\n  <b>Very</b> <span [style.color]=\"'#C21F39'\">Dynamic</span> <span [style.color]=\"'#00b3ee'\">Reusable</span>\n  <b><i><span [style.color]=\"'#ffc520'\">Popover With</span></i></b> <small>Html support</small>. Click outside of this\n  popover and it will be dismissed automatically.\n  <u (click)=\"dynamicHtmlPopOver.hide()\" [style.cursor]=\"'pointer'\">Or click here to close it</u> and can listen to the\n  onHidden or onShown events to perform additional tasks.\n</popover-content>\n\n<span [novoPopover]=\"dynamicHtmlPopOver\">Click to see a popover with dynamic html</span>", styles: [":host{margin:auto;padding:20px 30px;position:relative;display:flex}:host>span{cursor:pointer;margin:auto}\n"], dependencies: [{ kind: "component", type: i2$1.PopOverContent, selector: "popover-content", inputs: ["content", "htmlContent", "placement", "title", "animation"] }, { kind: "directive", type: i2$1.PopOverDirective, selector: "[popover], [novoPopover]", inputs: ["popover", "novoPopover", "popoverHtmlContent", "popoverDisabled", "popoverAlways", "popoverAnimation", "popoverPlacement", "popoverTitle", "popoverOnHover", "popoverDismissTimeout"], outputs: ["onShown", "onHidden"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: PopOverDynamicExample, decorators: [{
            type: Component,
            args: [{ selector: 'pop-over-dynamic-example', standalone: false, template: "<popover-content\n  #dynamicHtmlPopOver\n  title=\"this header can be omitted\"\n  placement=\"right\">\n\n  <b>Very</b> <span [style.color]=\"'#C21F39'\">Dynamic</span> <span [style.color]=\"'#00b3ee'\">Reusable</span>\n  <b><i><span [style.color]=\"'#ffc520'\">Popover With</span></i></b> <small>Html support</small>. Click outside of this\n  popover and it will be dismissed automatically.\n  <u (click)=\"dynamicHtmlPopOver.hide()\" [style.cursor]=\"'pointer'\">Or click here to close it</u> and can listen to the\n  onHidden or onShown events to perform additional tasks.\n</popover-content>\n\n<span [novoPopover]=\"dynamicHtmlPopOver\">Click to see a popover with dynamic html</span>", styles: [":host{margin:auto;padding:20px 30px;position:relative;display:flex}:host>span{cursor:pointer;margin:auto}\n"] }]
        }] });

/**
 * @title PopOvers with Horizontal Positioning
 */
class PopOverHorizontalExample {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: PopOverHorizontalExample, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: PopOverHorizontalExample, isStandalone: false, selector: "pop-over-horizontal-example", ngImport: i0, template: "<span novoPopover=\"Popover is on the top side and to the right of the element. Can also apply 'left' to 'top' placement PopOvers.\"\n    popoverTitle=\"Top-Right PopOver\"\n    popoverPlacement=\"top-right\"\n    [popoverOnHover]=\"true\">\n    TOP-RIGHT\n</span>\n<span novoPopover=\"Popover is on the bottom side and to the left of the element. Can also apply 'right' to 'bottom' placement PopOvers.\"\n    popoverTitle=\"Bottom-Left PopOver\"\n    popoverPlacement=\"bottom-left\"\n    [popoverOnHover]=\"true\">\n    BOTTOM-LEFT\n</span>\n", styles: [":host{margin:auto;padding:20px 30px;position:relative;display:flex}:host>span{cursor:pointer;margin:auto}\n"], dependencies: [{ kind: "directive", type: i2$1.PopOverDirective, selector: "[popover], [novoPopover]", inputs: ["popover", "novoPopover", "popoverHtmlContent", "popoverDisabled", "popoverAlways", "popoverAnimation", "popoverPlacement", "popoverTitle", "popoverOnHover", "popoverDismissTimeout"], outputs: ["onShown", "onHidden"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: PopOverHorizontalExample, decorators: [{
            type: Component,
            args: [{ selector: 'pop-over-horizontal-example', standalone: false, template: "<span novoPopover=\"Popover is on the top side and to the right of the element. Can also apply 'left' to 'top' placement PopOvers.\"\n    popoverTitle=\"Top-Right PopOver\"\n    popoverPlacement=\"top-right\"\n    [popoverOnHover]=\"true\">\n    TOP-RIGHT\n</span>\n<span novoPopover=\"Popover is on the bottom side and to the left of the element. Can also apply 'right' to 'bottom' placement PopOvers.\"\n    popoverTitle=\"Bottom-Left PopOver\"\n    popoverPlacement=\"bottom-left\"\n    [popoverOnHover]=\"true\">\n    BOTTOM-LEFT\n</span>\n", styles: [":host{margin:auto;padding:20px 30px;position:relative;display:flex}:host>span{cursor:pointer;margin:auto}\n"] }]
        }] });

/**
 * @title PopOver Placement Example
 */
class PopOverPlacementExample {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: PopOverPlacementExample, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: PopOverPlacementExample, isStandalone: false, selector: "pop-over-placement-example", ngImport: i0, template: "<span novoPopover=\"Popover is to left of element\" popoverTitle=\"Left PopOver\" popoverPlacement=\"left\" [popoverOnHover]=\"true\">LEFT</span>\n<span novoPopover=\"Popover is to right of element\" popoverTitle=\"Right PopOver\" popoverPlacement=\"right\" [popoverOnHover]=\"true\">RIGHT</span>\n<span novoPopover=\"Popover is above the element\" popoverTitle=\"Top PopOver\" popoverPlacement=\"top\" [popoverOnHover]=\"true\">TOP</span>\n<span novoPopover=\"Popover is below the element\" popoverTitle=\"Bottom PopOver\" popoverPlacement=\"bottom\" [popoverOnHover]=\"true\">BOTTOM</span>\n", styles: [":host{margin:auto;padding:20px 30px;position:relative;display:flex}:host>span{cursor:pointer;margin:auto}\n"], dependencies: [{ kind: "directive", type: i2$1.PopOverDirective, selector: "[popover], [novoPopover]", inputs: ["popover", "novoPopover", "popoverHtmlContent", "popoverDisabled", "popoverAlways", "popoverAnimation", "popoverPlacement", "popoverTitle", "popoverOnHover", "popoverDismissTimeout"], outputs: ["onShown", "onHidden"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: PopOverPlacementExample, decorators: [{
            type: Component,
            args: [{ selector: 'pop-over-placement-example', standalone: false, template: "<span novoPopover=\"Popover is to left of element\" popoverTitle=\"Left PopOver\" popoverPlacement=\"left\" [popoverOnHover]=\"true\">LEFT</span>\n<span novoPopover=\"Popover is to right of element\" popoverTitle=\"Right PopOver\" popoverPlacement=\"right\" [popoverOnHover]=\"true\">RIGHT</span>\n<span novoPopover=\"Popover is above the element\" popoverTitle=\"Top PopOver\" popoverPlacement=\"top\" [popoverOnHover]=\"true\">TOP</span>\n<span novoPopover=\"Popover is below the element\" popoverTitle=\"Bottom PopOver\" popoverPlacement=\"bottom\" [popoverOnHover]=\"true\">BOTTOM</span>\n", styles: [":host{margin:auto;padding:20px 30px;position:relative;display:flex}:host>span{cursor:pointer;margin:auto}\n"] }]
        }] });

/**
 * @title PopOvers with Vertical Positioning
 */
class PopOverVerticalExample {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: PopOverVerticalExample, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: PopOverVerticalExample, isStandalone: false, selector: "pop-over-vertical-example", ngImport: i0, template: "<span novoPopover=\"Popover is on the right side and below the element. Can also apply 'top' to 'right' placement PopOvers.\"\n    popoverTitle=\"Right-Bottom PopOver\"\n    popoverPlacement=\"right-bottom\"\n    [popoverOnHover]=\"true\">\n    RIGHT-BOTTOM\n</span>\n<span novoPopover=\"Popover is on the left side and above the element. Can also apply 'bottom' to 'left' placement PopOvers.\"\n    popoverTitle=\"Left-Top PopOver\"\n    popoverPlacement=\"left-top\"\n    [popoverOnHover]=\"true\">\n    LEFT-TOP\n</span>\n", styles: [":host{margin:auto;padding:20px 30px;position:relative;display:flex}:host>span{cursor:pointer;margin:auto}\n"], dependencies: [{ kind: "directive", type: i2$1.PopOverDirective, selector: "[popover], [novoPopover]", inputs: ["popover", "novoPopover", "popoverHtmlContent", "popoverDisabled", "popoverAlways", "popoverAnimation", "popoverPlacement", "popoverTitle", "popoverOnHover", "popoverDismissTimeout"], outputs: ["onShown", "onHidden"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: PopOverVerticalExample, decorators: [{
            type: Component,
            args: [{ selector: 'pop-over-vertical-example', standalone: false, template: "<span novoPopover=\"Popover is on the right side and below the element. Can also apply 'top' to 'right' placement PopOvers.\"\n    popoverTitle=\"Right-Bottom PopOver\"\n    popoverPlacement=\"right-bottom\"\n    [popoverOnHover]=\"true\">\n    RIGHT-BOTTOM\n</span>\n<span novoPopover=\"Popover is on the left side and above the element. Can also apply 'bottom' to 'left' placement PopOvers.\"\n    popoverTitle=\"Left-Top PopOver\"\n    popoverPlacement=\"left-top\"\n    [popoverOnHover]=\"true\">\n    LEFT-TOP\n</span>\n", styles: [":host{margin:auto;padding:20px 30px;position:relative;display:flex}:host>span{cursor:pointer;margin:auto}\n"] }]
        }] });

/**
 * @title Radial Progress Bars Usage
 */
class ProgressBarRadialUsageExample {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: ProgressBarRadialUsageExample, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: ProgressBarRadialUsageExample, isStandalone: false, selector: "progress-bar-radial-usage-example", ngImport: i0, template: "<novo-progress appearance=\"radial\">\n  <novo-progress-bar value=\"70\"></novo-progress-bar>\n</novo-progress>\n\n<br />\n\n<novo-progress appearance=\"radial\" total=\"60\">\n  <novo-progress-bar value=\"50\" color=\"success\"></novo-progress-bar>\n  <novo-progress-bar value=\"40\" color=\"negative\"></novo-progress-bar>\n  <novo-progress-bar value=\"30\" color=\"warning\"></novo-progress-bar>\n</novo-progress>", styles: ["span[tooltip]{margin-left:10px}\n"], dependencies: [{ kind: "component", type: i2$1.NovoProgressBarElement, selector: "novo-progress-bar", inputs: ["id", "name", "tabindex", "label", "theme", "color", "indeterminate", "striped", "animated", "flash", "value", "disabled"], outputs: ["change", "blur", "focus"] }, { kind: "component", type: i2$1.NovoProgressElement, selector: "novo-progress", inputs: ["color", "theme", "total", "radius", "striped", "appearance", "disabled"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: ProgressBarRadialUsageExample, decorators: [{
            type: Component,
            args: [{ selector: 'progress-bar-radial-usage-example', standalone: false, template: "<novo-progress appearance=\"radial\">\n  <novo-progress-bar value=\"70\"></novo-progress-bar>\n</novo-progress>\n\n<br />\n\n<novo-progress appearance=\"radial\" total=\"60\">\n  <novo-progress-bar value=\"50\" color=\"success\"></novo-progress-bar>\n  <novo-progress-bar value=\"40\" color=\"negative\"></novo-progress-bar>\n  <novo-progress-bar value=\"30\" color=\"warning\"></novo-progress-bar>\n</novo-progress>", styles: ["span[tooltip]{margin-left:10px}\n"] }]
        }] });

/**
 * @title Progress Bar Usage
 */
class ProgressBarUsageExample {
    constructor() {
        this.largeTooltip = `Lorem Ipsum\n\n is simply dummy text of the printing and typesetting industry. \n Learn more <a>here</a>`;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: ProgressBarUsageExample, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: ProgressBarUsageExample, isStandalone: false, selector: "progess-bar-usage-example", ngImport: i0, template: "<div class=\"resizable\">\n  <novo-progress>\n    <novo-progress-bar flash=\"true\"></novo-progress-bar>\n  </novo-progress>\n</div>\n\n<br />\n\n<novo-progress>\n  <novo-progress-bar indeterminate=\"true\"></novo-progress-bar>\n</novo-progress>\n\n<br />\n\n<novo-progress striped=\"true\">\n  <novo-progress-bar value=\"40\"></novo-progress-bar>\n</novo-progress>\n\n<br />\n\n<novo-progress total=\"300\">\n  <novo-progress-bar value=\"120\" color=\"success\" [tooltip]=\"largeTooltip\" tooltipSize=\"large\"></novo-progress-bar>\n  <novo-progress-bar value=\"40\" color=\"negative\"></novo-progress-bar>\n</novo-progress>", styles: ["span[tooltip]{margin-left:10px}.resizable{resize:horizontal;overflow:auto;width:200px}\n"], dependencies: [{ kind: "directive", type: i2$1.TooltipDirective, selector: "[tooltip]", inputs: ["tooltip", "tooltipPosition", "tooltipType", "tooltipSize", "tooltipBounce", "tooltipNoAnimate", "tooltipRounded", "tooltipAlways", "tooltipPreline", "removeTooltipArrow", "tooltipAutoPosition", "tooltipIsHTML", "tooltipCloseOnClick", "tooltipOnOverflow", "tooltipActive"] }, { kind: "component", type: i2$1.NovoProgressBarElement, selector: "novo-progress-bar", inputs: ["id", "name", "tabindex", "label", "theme", "color", "indeterminate", "striped", "animated", "flash", "value", "disabled"], outputs: ["change", "blur", "focus"] }, { kind: "component", type: i2$1.NovoProgressElement, selector: "novo-progress", inputs: ["color", "theme", "total", "radius", "striped", "appearance", "disabled"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: ProgressBarUsageExample, decorators: [{
            type: Component,
            args: [{ selector: 'progess-bar-usage-example', standalone: false, template: "<div class=\"resizable\">\n  <novo-progress>\n    <novo-progress-bar flash=\"true\"></novo-progress-bar>\n  </novo-progress>\n</div>\n\n<br />\n\n<novo-progress>\n  <novo-progress-bar indeterminate=\"true\"></novo-progress-bar>\n</novo-progress>\n\n<br />\n\n<novo-progress striped=\"true\">\n  <novo-progress-bar value=\"40\"></novo-progress-bar>\n</novo-progress>\n\n<br />\n\n<novo-progress total=\"300\">\n  <novo-progress-bar value=\"120\" color=\"success\" [tooltip]=\"largeTooltip\" tooltipSize=\"large\"></novo-progress-bar>\n  <novo-progress-bar value=\"40\" color=\"negative\"></novo-progress-bar>\n</novo-progress>", styles: ["span[tooltip]{margin-left:10px}.resizable{resize:horizontal;overflow:auto;width:200px}\n"] }]
        }] });

const MockCandidateMeta = {
    entity: 'Candidate',
    entityMetaUrl: '/meta/Candidate?fields=*',
    label: 'Candidate',
    dateLastModified: '1651869983246',
    fields: [
        {
            name: 'id',
            type: 'ID',
            dataType: 'id',
            label: 'ID',
            optional: false,
        },
        {
            name: 'activePlacements',
            type: 'TO_MANY',
            dataSpecialization: 'SYSTEM',
            confidential: false,
            optional: true,
            label: 'Active Placements',
            required: false,
            readOnly: true,
            multiValue: false,
            optionsType: 'Placement',
            optionsUrl: '/options/Placement',
            hideFromSearch: false,
            sortOrder: 10000,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
            associatedEntity: {
                entity: 'Placement',
                entityMetaUrl: '/meta/Placement?fields=*',
                label: 'Placement',
                dateLastModified: '1651869984162',
                fields: [
                    {
                        name: 'id',
                        type: 'ID',
                        dataType: 'Integer',
                        optional: false,
                    },
                ],
            },
        },
        {
            name: 'address',
            type: 'COMPOSITE',
            dataType: 'Address',
            dataSpecialization: 'ADDRESS_BLOCK',
            confidential: false,
            optional: true,
            label: 'Street Address',
            required: false,
            readOnly: false,
            multiValue: false,
            hideFromSearch: false,
            sortOrder: 10000,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
            fields: [
                {
                    name: 'address1',
                    type: 'SCALAR',
                    dataType: 'String',
                    maxLength: 100,
                    confidential: false,
                    optional: true,
                    label: 'Address 1',
                    required: false,
                    readOnly: false,
                    multiValue: false,
                    hideFromSearch: false,
                    sortOrder: 320,
                    hint: '',
                    description: '',
                    systemRequired: false,
                    shouldAddCustomEntityLabel: false,
                },
                {
                    name: 'address2',
                    type: 'SCALAR',
                    dataType: 'String',
                    maxLength: 100,
                    confidential: false,
                    optional: true,
                    label: 'Address 2',
                    required: false,
                    readOnly: false,
                    multiValue: false,
                    hideFromSearch: false,
                    sortOrder: 330,
                    hint: '',
                    description: '',
                    systemRequired: false,
                    shouldAddCustomEntityLabel: false,
                },
                {
                    name: 'city',
                    type: 'SCALAR',
                    dataType: 'String',
                    maxLength: 100,
                    confidential: false,
                    optional: true,
                    label: 'City',
                    required: false,
                    readOnly: false,
                    multiValue: false,
                    hideFromSearch: false,
                    sortOrder: 340,
                    hint: '',
                    description: '',
                    systemRequired: false,
                    shouldAddCustomEntityLabel: false,
                },
                {
                    name: 'countryCode',
                    type: 'SCALAR',
                    dataType: 'String',
                    maxLength: 0,
                    optional: true,
                },
                {
                    name: 'countryID',
                    type: 'SCALAR',
                    dataType: 'Integer',
                    confidential: false,
                    optional: false,
                    label: 'Country',
                    required: false,
                    readOnly: false,
                    multiValue: false,
                    inputType: 'SELECT',
                    optionsType: 'Country',
                    optionsUrl: '/options/Country',
                    defaultValue: 1,
                    hideFromSearch: false,
                    sortOrder: 361,
                    hint: '',
                    description: '',
                    systemRequired: false,
                    shouldAddCustomEntityLabel: false,
                },
                {
                    name: 'countryName',
                    type: 'SCALAR',
                    dataType: 'String',
                    maxLength: 0,
                    optional: true,
                },
                {
                    name: 'state',
                    type: 'SCALAR',
                    dataType: 'String',
                    maxLength: 100,
                    confidential: false,
                    optional: true,
                    label: 'State',
                    required: false,
                    readOnly: false,
                    multiValue: false,
                    inputType: 'SELECT',
                    optionsType: 'NorthAmericaState',
                    optionsUrl: '/options/NorthAmericaState',
                    options: [
                        {
                            value: 'Alabama',
                            label: 'Alabama',
                        },
                        {
                            value: 'Alaska',
                            label: 'Alaska',
                        },
                        {
                            value: 'Arizona',
                            label: 'Arizona',
                        },
                        {
                            value: 'Arkansas',
                            label: 'Arkansas',
                        },
                        {
                            value: 'California',
                            label: 'California',
                        },
                        {
                            value: 'Colorado',
                            label: 'Colorado',
                        },
                        {
                            value: 'Connecticut',
                            label: 'Connecticut',
                        },
                        {
                            value: 'Delaware',
                            label: 'Delaware',
                        },
                        {
                            value: 'District of Columbia',
                            label: 'District of Columbia',
                        },
                        {
                            value: 'Florida',
                            label: 'Florida',
                        },
                        {
                            value: 'Georgia',
                            label: 'Georgia',
                        },
                        {
                            value: 'Hawaii',
                            label: 'Hawaii',
                        },
                        {
                            value: 'Idaho',
                            label: 'Idaho',
                        },
                        {
                            value: 'Illinois',
                            label: 'Illinois',
                        },
                        {
                            value: 'Indiana',
                            label: 'Indiana',
                        },
                        {
                            value: 'Iowa',
                            label: 'Iowa',
                        },
                        {
                            value: 'Kansas',
                            label: 'Kansas',
                        },
                        {
                            value: 'Kentucky',
                            label: 'Kentucky',
                        },
                        {
                            value: 'Louisiana',
                            label: 'Louisiana',
                        },
                        {
                            value: 'Maine',
                            label: 'Maine',
                        },
                        {
                            value: 'Maryland',
                            label: 'Maryland',
                        },
                        {
                            value: 'Massachusetts',
                            label: 'Massachusetts',
                        },
                        {
                            value: 'Michigan',
                            label: 'Michigan',
                        },
                        {
                            value: 'Minnesota',
                            label: 'Minnesota',
                        },
                        {
                            value: 'Mississippi',
                            label: 'Mississippi',
                        },
                        {
                            value: 'Missouri',
                            label: 'Missouri',
                        },
                        {
                            value: 'Montana',
                            label: 'Montana',
                        },
                        {
                            value: 'Nebraska',
                            label: 'Nebraska',
                        },
                        {
                            value: 'Nevada',
                            label: 'Nevada',
                        },
                        {
                            value: 'New Hampshire',
                            label: 'New Hampshire',
                        },
                        {
                            value: 'New Jersey',
                            label: 'New Jersey',
                        },
                        {
                            value: 'New Mexico',
                            label: 'New Mexico',
                        },
                        {
                            value: 'New York',
                            label: 'New York',
                        },
                        {
                            value: 'North Carolina',
                            label: 'North Carolina',
                        },
                        {
                            value: 'North Dakota',
                            label: 'North Dakota',
                        },
                        {
                            value: 'Ohio',
                            label: 'Ohio',
                        },
                        {
                            value: 'Oklahoma',
                            label: 'Oklahoma',
                        },
                        {
                            value: 'Oregon',
                            label: 'Oregon',
                        },
                        {
                            value: 'Pennsylvania',
                            label: 'Pennsylvania',
                        },
                        {
                            value: 'Rhode Island',
                            label: 'Rhode Island',
                        },
                        {
                            value: 'South Carolina',
                            label: 'South Carolina',
                        },
                        {
                            value: 'South Dakota',
                            label: 'South Dakota',
                        },
                        {
                            value: 'Tennessee',
                            label: 'Tennessee',
                        },
                        {
                            value: 'Texas',
                            label: 'Texas',
                        },
                        {
                            value: 'Utah',
                            label: 'Utah',
                        },
                        {
                            value: 'Vermont',
                            label: 'Vermont',
                        },
                        {
                            value: 'Virginia',
                            label: 'Virginia',
                        },
                        {
                            value: 'Washington',
                            label: 'Washington',
                        },
                        {
                            value: 'West Virginia',
                            label: 'West Virginia',
                        },
                        {
                            value: 'Wisconsin',
                            label: 'Wisconsin',
                        },
                        {
                            value: 'Wyoming',
                            label: 'Wyoming',
                        },
                    ],
                    hideFromSearch: false,
                    sortOrder: 350,
                    hint: '',
                    description: '',
                    systemRequired: false,
                    shouldAddCustomEntityLabel: false,
                },
                {
                    name: 'timezone',
                    type: 'SCALAR',
                    dataType: 'String',
                    maxLength: 0,
                    optional: true,
                },
                {
                    name: 'zip',
                    type: 'SCALAR',
                    dataType: 'String',
                    maxLength: 15,
                    confidential: false,
                    optional: true,
                    label: 'Zip',
                    required: false,
                    readOnly: false,
                    multiValue: false,
                    hideFromSearch: false,
                    sortOrder: 360,
                    hint: '',
                    description: '',
                    systemRequired: false,
                    shouldAddCustomEntityLabel: false,
                },
            ],
        },
        {
            name: 'addressSourceLocation',
            type: 'TO_ONE',
            dataSpecialization: 'SYSTEM',
            confidential: false,
            optional: true,
            label: 'Address Source Location',
            required: false,
            readOnly: true,
            multiValue: false,
            optionsType: 'Location',
            optionsUrl: '/options/Location',
            hideFromSearch: false,
            sortOrder: 10000,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
            associatedEntity: {
                entity: 'Location',
                entityMetaUrl: '/meta/Location?fields=*',
                label: 'Location',
                dateLastModified: '1651869984379',
                fields: [
                    {
                        name: 'id',
                        type: 'ID',
                        dataType: 'Integer',
                        optional: false,
                    },
                    {
                        name: 'clientCorporation',
                        type: 'TO_ONE',
                        dataSpecialization: 'SYSTEM',
                        confidential: false,
                        optional: true,
                        label: 'clientCorporationID',
                        required: false,
                        readOnly: true,
                        multiValue: false,
                        optionsType: 'ClientCorporation',
                        optionsUrl: '/options/ClientCorporation',
                        hideFromSearch: false,
                        sortOrder: 40,
                        hint: '',
                        description: '',
                        systemRequired: false,
                        shouldAddCustomEntityLabel: false,
                        associatedEntity: {
                            entity: 'ClientCorporation',
                            entityMetaUrl: '/meta/ClientCorporation?fields=*',
                            label: 'Company',
                            dateLastModified: '1651869984427',
                            fields: [
                                {
                                    name: 'id',
                                    type: 'ID',
                                    dataType: 'Integer',
                                    optional: false,
                                },
                                {
                                    name: 'name',
                                    type: 'SCALAR',
                                    dataType: 'String',
                                    maxLength: 100,
                                    confidential: false,
                                    optional: false,
                                    label: 'Company Name',
                                    required: true,
                                    readOnly: false,
                                    multiValue: false,
                                    hideFromSearch: false,
                                    sortOrder: 10,
                                    hint: '',
                                    description: '',
                                    systemRequired: false,
                                    shouldAddCustomEntityLabel: false,
                                },
                            ],
                        },
                    },
                    {
                        name: 'candidate',
                        type: 'TO_ONE',
                        dataSpecialization: 'SYSTEM',
                        confidential: false,
                        optional: true,
                        label: 'candidateUserID',
                        required: false,
                        readOnly: true,
                        multiValue: false,
                        optionsType: 'Candidate',
                        optionsUrl: '/options/Candidate',
                        hideFromSearch: false,
                        sortOrder: 41,
                        hint: '',
                        description: '',
                        systemRequired: false,
                        shouldAddCustomEntityLabel: false,
                        associatedEntity: {
                            entity: 'Candidate',
                            entityMetaUrl: '/meta/Candidate?fields=*',
                            label: 'Candidate',
                            dateLastModified: '1651869983246',
                            fields: [
                                {
                                    name: 'id',
                                    type: 'ID',
                                    dataType: 'Integer',
                                    optional: false,
                                },
                                {
                                    name: 'firstName',
                                    type: 'SCALAR',
                                    dataType: 'String',
                                    maxLength: 50,
                                    confidential: false,
                                    optional: true,
                                    label: 'First Name',
                                    required: true,
                                    readOnly: false,
                                    multiValue: false,
                                    hideFromSearch: false,
                                    sortOrder: 210,
                                    hint: '',
                                    description: '',
                                    systemRequired: false,
                                    shouldAddCustomEntityLabel: false,
                                },
                                {
                                    name: 'lastName',
                                    type: 'SCALAR',
                                    dataType: 'String',
                                    maxLength: 50,
                                    confidential: false,
                                    optional: true,
                                    label: 'Last Name',
                                    required: true,
                                    readOnly: false,
                                    multiValue: false,
                                    hideFromSearch: false,
                                    sortOrder: 220,
                                    hint: '',
                                    description: '',
                                    systemRequired: false,
                                    shouldAddCustomEntityLabel: false,
                                },
                            ],
                        },
                    },
                    {
                        name: 'title',
                        type: 'SCALAR',
                        dataType: 'String',
                        maxLength: 100,
                        confidential: false,
                        optional: false,
                        label: 'Title',
                        required: true,
                        readOnly: false,
                        multiValue: false,
                        hideFromSearch: false,
                        sortOrder: 60,
                        hint: '',
                        description: '',
                        systemRequired: false,
                        shouldAddCustomEntityLabel: false,
                    },
                    {
                        name: 'effectiveDate',
                        type: 'SCALAR',
                        dataType: 'Date',
                        dataSpecialization: 'DATE',
                        confidential: false,
                        optional: false,
                        label: 'Effective Date',
                        required: true,
                        readOnly: false,
                        multiValue: false,
                        hideFromSearch: false,
                        sortOrder: 20,
                        hint: '',
                        description: '',
                        systemRequired: false,
                        shouldAddCustomEntityLabel: false,
                    },
                    {
                        name: 'effectiveEndDate',
                        type: 'SCALAR',
                        dataType: 'Date',
                        dataSpecialization: 'SYSTEM',
                        confidential: false,
                        optional: true,
                        label: 'effectiveEndDate',
                        required: false,
                        readOnly: true,
                        multiValue: false,
                        hideFromSearch: false,
                        sortOrder: 21,
                        hint: '',
                        description: '',
                        systemRequired: false,
                        shouldAddCustomEntityLabel: false,
                    },
                    {
                        name: 'versionID',
                        type: 'SCALAR',
                        dataType: 'Integer',
                        dataSpecialization: 'SYSTEM',
                        confidential: false,
                        optional: false,
                        label: 'LocationVersionID',
                        required: false,
                        readOnly: false,
                        multiValue: false,
                        hideFromSearch: false,
                        sortOrder: 30,
                        hint: '',
                        description: '',
                        systemRequired: false,
                        shouldAddCustomEntityLabel: false,
                    },
                    {
                        name: 'externalID',
                        type: 'SCALAR',
                        dataType: 'String',
                        maxLength: 100,
                        confidential: false,
                        optional: true,
                        label: 'Location Code',
                        required: true,
                        readOnly: false,
                        multiValue: false,
                        hideFromSearch: false,
                        sortOrder: 50,
                        hint: '',
                        description: '',
                        systemRequired: false,
                        shouldAddCustomEntityLabel: false,
                    },
                    {
                        name: 'address',
                        type: 'COMPOSITE',
                        dataType: 'AddressWithStateID',
                        dataSpecialization: 'ADDRESS_BLOCK',
                        confidential: false,
                        optional: true,
                        label: 'Address',
                        required: false,
                        readOnly: false,
                        multiValue: false,
                        hideFromSearch: false,
                        sortOrder: 135,
                        hint: '',
                        description: '',
                        systemRequired: false,
                        shouldAddCustomEntityLabel: false,
                        fields: [
                            {
                                name: 'address1',
                                type: 'SCALAR',
                                dataType: 'String',
                                maxLength: 100,
                                confidential: false,
                                optional: true,
                                label: 'Address 1',
                                required: false,
                                readOnly: false,
                                multiValue: false,
                                hideFromSearch: false,
                                sortOrder: 140,
                                hint: '',
                                description: '',
                                systemRequired: false,
                                shouldAddCustomEntityLabel: false,
                            },
                            {
                                name: 'address2',
                                type: 'SCALAR',
                                dataType: 'String',
                                maxLength: 100,
                                confidential: false,
                                optional: true,
                                label: 'Address 2',
                                required: false,
                                readOnly: false,
                                multiValue: false,
                                hideFromSearch: false,
                                sortOrder: 150,
                                hint: '',
                                description: '',
                                systemRequired: false,
                                shouldAddCustomEntityLabel: false,
                            },
                            {
                                name: 'city',
                                type: 'SCALAR',
                                dataType: 'String',
                                maxLength: 100,
                                confidential: false,
                                optional: true,
                                label: 'City',
                                required: false,
                                readOnly: false,
                                multiValue: false,
                                hideFromSearch: false,
                                sortOrder: 160,
                                hint: '',
                                description: '',
                                systemRequired: false,
                                shouldAddCustomEntityLabel: false,
                            },
                            {
                                name: 'state',
                                type: 'SCALAR',
                                dataType: 'String',
                                maxLength: 100,
                                dataSpecialization: 'STATE_ID',
                                confidential: false,
                                optional: true,
                                label: 'State',
                                required: false,
                                readOnly: false,
                                multiValue: false,
                                inputType: 'SELECT',
                                optionsType: 'State',
                                optionsUrl: '/options/State',
                                hideFromSearch: false,
                                sortOrder: 170,
                                hint: '',
                                description: '',
                                systemRequired: false,
                                shouldAddCustomEntityLabel: false,
                            },
                            {
                                name: 'zip',
                                type: 'SCALAR',
                                dataType: 'String',
                                maxLength: 100,
                                confidential: false,
                                optional: true,
                                label: 'Zip',
                                required: false,
                                readOnly: false,
                                multiValue: false,
                                hideFromSearch: false,
                                sortOrder: 180,
                                hint: '',
                                description: '',
                                systemRequired: false,
                                shouldAddCustomEntityLabel: false,
                            },
                            {
                                name: 'countryID',
                                type: 'SCALAR',
                                dataType: 'Integer',
                                confidential: false,
                                optional: false,
                                label: 'Country',
                                required: false,
                                readOnly: false,
                                multiValue: false,
                                inputType: 'SELECT',
                                optionsType: 'Country',
                                optionsUrl: '/options/Country',
                                hideFromSearch: false,
                                sortOrder: 190,
                                hint: '',
                                description: '',
                                systemRequired: false,
                                shouldAddCustomEntityLabel: false,
                            },
                            {
                                name: 'countryCode',
                                type: 'SCALAR',
                                dataType: 'String',
                                maxLength: 0,
                                optional: true,
                            },
                            {
                                name: 'countryName',
                                type: 'SCALAR',
                                dataType: 'String',
                                maxLength: 0,
                                optional: true,
                            },
                            {
                                name: 'stateID',
                                type: 'SCALAR',
                                dataType: 'Integer',
                                optional: true,
                            },
                            {
                                name: 'stateName',
                                type: 'SCALAR',
                                dataType: 'String',
                                maxLength: 0,
                                optional: true,
                            },
                        ],
                    },
                ],
            },
        },
        {
            name: 'availability',
            type: 'TO_MANY',
            dataSpecialization: 'SYSTEM',
            confidential: false,
            optional: true,
            label: 'Availability',
            required: false,
            readOnly: true,
            multiValue: false,
            optionsType: 'CandidateAvailability',
            optionsUrl: '/options/CandidateAvailability',
            hideFromSearch: false,
            sortOrder: 29010,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
            hasBeginsWith: true,
            associatedEntity: {
                entity: 'CandidateAvailability',
                entityMetaUrl: '/meta/CandidateAvailability?fields=*',
                label: 'Candidate Availability',
                dateLastModified: '1651869984653',
                fields: [
                    {
                        name: 'id',
                        type: 'ID',
                        dataType: 'Integer',
                        optional: false,
                    },
                ],
            },
        },
        {
            name: 'branch',
            type: 'TO_ONE',
            dataSpecialization: 'SYSTEM',
            confidential: false,
            optional: true,
            label: 'Branch ID',
            required: false,
            readOnly: true,
            multiValue: false,
            optionsType: 'Branch',
            optionsUrl: '/options/Branch',
            hideFromSearch: false,
            sortOrder: 26000,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
            associatedEntity: {
                entity: 'Branch',
                entityMetaUrl: '/meta/Branch?fields=*',
                label: 'Branch',
                dateLastModified: '1651869984682',
                fields: [
                    {
                        name: 'id',
                        type: 'ID',
                        dataType: 'Integer',
                        optional: false,
                    },
                ],
            },
        },
        {
            name: 'businessSectors',
            type: 'TO_MANY',
            confidential: false,
            optional: true,
            label: 'Industry',
            required: false,
            readOnly: true,
            multiValue: true,
            inputType: 'SELECT',
            optionsType: 'BusinessSector',
            options: [
                {
                    value: 'Agriculture',
                    label: 'Agriculture',
                },
                {
                    value: 'Nursing',
                    label: 'Nursing',
                },
                {
                    value: 'Finance',
                    label: 'Finance',
                },
            ],
            hideFromSearch: false,
            sortOrder: 760,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
            associatedEntity: {
                entity: 'BusinessSector',
                entityMetaUrl: '/meta/BusinessSector?fields=*',
                label: 'Business Sector',
                dateLastModified: '1651869984703',
                fields: [
                    {
                        name: 'id',
                        type: 'ID',
                        dataType: 'Integer',
                        optional: false,
                    },
                    {
                        name: 'name',
                        type: 'SCALAR',
                        dataType: 'String',
                        maxLength: 100,
                        confidential: false,
                        optional: false,
                        label: 'Name',
                        required: false,
                        readOnly: false,
                        multiValue: false,
                        hideFromSearch: false,
                        systemRequired: false,
                        shouldAddCustomEntityLabel: false,
                    },
                ],
            },
        },
        {
            name: 'canEnterTime',
            type: 'SCALAR',
            dataType: 'Boolean',
            dataSpecialization: 'SYSTEM',
            confidential: false,
            optional: false,
            label: 'Can Enter Time',
            required: false,
            readOnly: true,
            multiValue: false,
            hideFromSearch: false,
            sortOrder: 110,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'candidateSource',
            type: 'TO_ONE',
            confidential: false,
            optional: true,
            label: '3rd Party',
            required: false,
            readOnly: true,
            multiValue: false,
            inputType: 'SELECT',
            optionsType: 'CandidateSource',
            optionsUrl: '/options/CandidateSource',
            hideFromSearch: false,
            sortOrder: 250,
            hint: '',
            description: 'If you selected "Referral" or "Third Party" from above, please specify from the list below.',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
            associatedEntity: {
                entity: 'CandidateSource',
                entityMetaUrl: '/meta/CandidateSource?fields=*',
                label: 'Candidate Source',
                dateLastModified: '1651869984724',
                fields: [
                    {
                        name: 'id',
                        type: 'ID',
                        dataType: 'Integer',
                        optional: false,
                    },
                ],
            },
        },
        {
            name: 'categories',
            type: 'TO_MANY',
            confidential: false,
            optional: true,
            label: 'Type of work',
            required: false,
            readOnly: false,
            multiValue: true,
            inputType: 'SELECT',
            optionsType: 'Category',
            optionsUrl: '/options/Category',
            hideFromSearch: false,
            sortOrder: 710,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
            associatedEntity: {
                entity: 'Category',
                entityMetaUrl: '/meta/Category?fields=*',
                label: 'Category',
                dateLastModified: '1651869984749',
                fields: [
                    {
                        name: 'id',
                        type: 'ID',
                        dataType: 'Integer',
                        optional: false,
                    },
                    {
                        name: 'name',
                        type: 'SCALAR',
                        dataType: 'String',
                        maxLength: 100,
                        confidential: false,
                        optional: false,
                        label: 'Name',
                        required: false,
                        readOnly: false,
                        multiValue: false,
                        hideFromSearch: false,
                        systemRequired: false,
                        shouldAddCustomEntityLabel: false,
                    },
                ],
            },
        },
        {
            name: 'category',
            type: 'TO_ONE',
            dataSpecialization: 'SYSTEM',
            confidential: false,
            optional: false,
            label: 'Category',
            required: false,
            readOnly: true,
            multiValue: false,
            optionsType: 'Category',
            optionsUrl: '/options/Category',
            hideFromSearch: false,
            sortOrder: 110,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
            associatedEntity: {
                entity: 'Category',
                entityMetaUrl: '/meta/Category?fields=*',
                label: 'Category',
                dateLastModified: '1651869984749',
                fields: [
                    {
                        name: 'id',
                        type: 'ID',
                        dataType: 'Integer',
                        optional: false,
                    },
                    {
                        name: 'name',
                        type: 'SCALAR',
                        dataType: 'String',
                        maxLength: 100,
                        confidential: false,
                        optional: false,
                        label: 'Name',
                        required: false,
                        readOnly: false,
                        multiValue: false,
                        hideFromSearch: false,
                        systemRequired: false,
                        shouldAddCustomEntityLabel: false,
                    },
                ],
            },
        },
        {
            name: 'certificationList',
            type: 'TO_MANY',
            confidential: false,
            optional: true,
            label: 'Certifications',
            required: false,
            readOnly: true,
            multiValue: false,
            optionsType: 'CandidateCertification',
            optionsUrl: '/options/CandidateCertification',
            hideFromSearch: false,
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
            associatedEntity: {
                entity: 'CandidateCertification',
                entityMetaUrl: '/meta/CandidateCertification?fields=*',
                label: 'Candidate Certification',
                dateLastModified: '1651869984775',
                fields: [
                    {
                        name: 'id',
                        type: 'ID',
                        dataType: 'Integer',
                        optional: false,
                    },
                    {
                        name: 'status',
                        type: 'SCALAR',
                        dataType: 'String',
                        maxLength: 30,
                        confidential: false,
                        optional: true,
                        label: 'Status',
                        required: true,
                        readOnly: false,
                        multiValue: false,
                        inputType: 'SELECT',
                        options: [
                            {
                                value: 'Current',
                                label: 'Current',
                            },
                            {
                                value: 'Expired',
                                label: 'Expired',
                            },
                            {
                                value: 'Unknown',
                                label: 'Unknown',
                            },
                        ],
                        hideFromSearch: false,
                        sortOrder: 100,
                        hint: '',
                        description: '',
                        systemRequired: false,
                        shouldAddCustomEntityLabel: false,
                    },
                    {
                        name: 'name',
                        type: 'SCALAR',
                        dataType: 'String',
                        maxLength: 100,
                        confidential: false,
                        optional: true,
                        label: 'Credential',
                        required: true,
                        readOnly: false,
                        multiValue: false,
                        hideFromSearch: false,
                        sortOrder: 10,
                        hint: '',
                        description: '',
                        systemRequired: false,
                        shouldAddCustomEntityLabel: false,
                    },
                    {
                        name: 'isDeleted',
                        type: 'SCALAR',
                        dataType: 'Boolean',
                        dataSpecialization: 'SYSTEM',
                        confidential: false,
                        optional: false,
                        label: 'isDeleted',
                        required: false,
                        readOnly: true,
                        multiValue: false,
                        hideFromSearch: false,
                        sortOrder: 1000,
                        hint: '',
                        description: '',
                        systemRequired: false,
                        shouldAddCustomEntityLabel: false,
                    },
                    {
                        name: 'dateExpiration',
                        type: 'SCALAR',
                        dataType: 'Timestamp',
                        dataSpecialization: 'DATE',
                        confidential: false,
                        optional: true,
                        label: 'Expiration Date',
                        required: true,
                        readOnly: false,
                        multiValue: false,
                        hideFromSearch: false,
                        sortOrder: 70,
                        hint: '',
                        description: '',
                        systemRequired: false,
                        shouldAddCustomEntityLabel: false,
                    },
                ],
            },
        },
        {
            name: 'certifications',
            type: 'SCALAR',
            dataType: 'String',
            maxLength: 2147483647,
            confidential: false,
            optional: true,
            label: 'Certifications 2',
            required: false,
            readOnly: false,
            multiValue: true,
            inputType: 'SELECT',
            optionsType: 'CertificationText',
            optionsUrl: '/options/CertificationText',
            options: [
                {
                    value: 'CCM',
                    label: 'CCM',
                },
                {
                    value: 'CFA',
                    label: 'CFA',
                },
                {
                    value: 'Chartered Accountant',
                    label: 'Chartered Accountant',
                },
                {
                    value: 'CMA',
                    label: 'CMA',
                },
                {
                    value: 'CAN',
                    label: 'CAN',
                },
                {
                    value: 'CNE',
                    label: 'CNE',
                },
                {
                    value: 'CPA',
                    label: 'CPA',
                },
                {
                    value: 'MCE',
                    label: 'MCE',
                },
                {
                    value: 'MCSE',
                    label: 'MCSE',
                },
                {
                    value: 'MCSE',
                    label: 'MCSE',
                },
                {
                    value: 'MS SQL Server Administration',
                    label: 'MS SQL Server Administration',
                },
                {
                    value: 'Notary Public',
                    label: 'Notary Public',
                },
                {
                    value: 'Oracle',
                    label: 'Oracle',
                },
                {
                    value: 'Paralegal',
                    label: 'Paralegal',
                },
                {
                    value: 'Series 63',
                    label: 'Series 63',
                },
                {
                    value: 'Series 7',
                    label: 'Series 7',
                },
                {
                    value: 'Unix system Administration',
                    label: 'Unix system Administration',
                },
                {
                    value: 'Unix System Programming',
                    label: 'Unix System Programming',
                },
            ],
            hideFromSearch: false,
            sortOrder: 456,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'clientCorporationBlackList',
            type: 'TO_MANY',
            confidential: false,
            optional: true,
            label: 'Clients ineligible to work for',
            required: false,
            readOnly: false,
            multiValue: true,
            inputType: 'SELECT',
            optionsType: 'ClientCorporation',
            optionsUrl: '/options/ClientCorporation',
            hideFromSearch: false,
            sortOrder: 905,
            hint: 'Select list of corporations where candidate cannot be placed',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
            associatedEntity: {
                entity: 'ClientCorporation',
                entityMetaUrl: '/meta/ClientCorporation?fields=*',
                label: 'Company',
                dateLastModified: '1651869984427',
                fields: [
                    {
                        name: 'id',
                        type: 'ID',
                        dataType: 'Integer',
                        optional: false,
                    },
                    {
                        name: 'name',
                        type: 'SCALAR',
                        dataType: 'String',
                        maxLength: 100,
                        confidential: false,
                        optional: false,
                        label: 'Company Name',
                        required: true,
                        readOnly: false,
                        multiValue: false,
                        hideFromSearch: false,
                        sortOrder: 10,
                        hint: '',
                        description: '',
                        systemRequired: false,
                        shouldAddCustomEntityLabel: false,
                    },
                ],
            },
        },
        {
            name: 'clientCorporationWhiteList',
            type: 'TO_MANY',
            confidential: false,
            optional: true,
            label: 'Whitelist',
            required: false,
            readOnly: true,
            multiValue: true,
            inputType: 'SELECT',
            optionsType: 'ClientCorporation',
            optionsUrl: '/options/ClientCorporation',
            hideFromSearch: false,
            sortOrder: 522,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
            associatedEntity: {
                entity: 'ClientCorporation',
                entityMetaUrl: '/meta/ClientCorporation?fields=*',
                label: 'Company',
                dateLastModified: '1651869984427',
                fields: [
                    {
                        name: 'id',
                        type: 'ID',
                        dataType: 'Integer',
                        optional: false,
                    },
                    {
                        name: 'name',
                        type: 'SCALAR',
                        dataType: 'String',
                        maxLength: 100,
                        confidential: false,
                        optional: false,
                        label: 'Company Name',
                        required: true,
                        readOnly: false,
                        multiValue: false,
                        hideFromSearch: false,
                        sortOrder: 10,
                        hint: '',
                        description: '',
                        systemRequired: false,
                        shouldAddCustomEntityLabel: false,
                    },
                ],
            },
        },
        {
            name: 'comments',
            type: 'SCALAR',
            dataType: 'String',
            maxLength: 2147483647,
            confidential: false,
            optional: false,
            label: 'General Candidate Comments',
            required: false,
            readOnly: true,
            multiValue: false,
            inputType: 'TEXTAREA',
            hideFromSearch: false,
            sortOrder: 530,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'companyName',
            type: 'SCALAR',
            dataType: 'String',
            maxLength: 100,
            confidential: false,
            optional: true,
            label: 'Company Name',
            required: true,
            readOnly: true,
            multiValue: false,
            inputType: 'SELECT',
            optionsType: 'ClientCorporationText',
            optionsUrl: '/options/ClientCorporationText',
            hideFromSearch: false,
            sortOrder: 14,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'companyURL',
            type: 'SCALAR',
            dataType: 'String',
            maxLength: 100,
            confidential: false,
            optional: true,
            label: 'Personal URL',
            required: false,
            readOnly: true,
            multiValue: false,
            hideFromSearch: false,
            sortOrder: 310,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'customDate1',
            type: 'SCALAR',
            dataType: 'Timestamp',
            dataSpecialization: 'DATETIME',
            confidential: false,
            optional: true,
            label: 'DateRange',
            required: false,
            readOnly: true,
            multiValue: false,
            hideFromSearch: false,
            sortOrder: 435,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'customDate10',
            type: 'SCALAR',
            dataType: 'Timestamp',
            dataSpecialization: 'DATE',
            confidential: false,
            optional: true,
            label: 'Custom Date 10',
            required: false,
            readOnly: true,
            multiValue: false,
            hideFromSearch: false,
            sortOrder: 8000,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'customDate11',
            type: 'SCALAR',
            dataType: 'Timestamp',
            dataSpecialization: 'DATE',
            confidential: false,
            optional: true,
            label: 'Custom Date 11',
            required: false,
            readOnly: true,
            multiValue: false,
            hideFromSearch: false,
            sortOrder: 8000,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'customDate12',
            type: 'SCALAR',
            dataType: 'Timestamp',
            dataSpecialization: 'DATE',
            confidential: false,
            optional: true,
            label: 'Custom Date 12',
            required: false,
            readOnly: true,
            multiValue: false,
            hideFromSearch: false,
            sortOrder: 8000,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'customDate13',
            type: 'SCALAR',
            dataType: 'Timestamp',
            dataSpecialization: 'DATE',
            confidential: false,
            optional: true,
            label: 'Custom Date 13',
            required: false,
            readOnly: true,
            multiValue: false,
            hideFromSearch: false,
            sortOrder: 8000,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'customDate2',
            type: 'SCALAR',
            dataType: 'Timestamp',
            dataSpecialization: 'DATETIME',
            confidential: false,
            optional: true,
            label: 'Time Available',
            required: false,
            readOnly: true,
            multiValue: false,
            hideFromSearch: false,
            sortOrder: 239,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'customDate3',
            type: 'SCALAR',
            dataType: 'Timestamp',
            dataSpecialization: 'DATETIME',
            confidential: false,
            optional: true,
            label: 'Got the time?',
            required: false,
            readOnly: true,
            multiValue: false,
            hideFromSearch: false,
            sortOrder: 436,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'customDate4',
            type: 'SCALAR',
            dataType: 'Timestamp',
            dataSpecialization: 'DATE',
            confidential: false,
            optional: true,
            label: 'Custom Date 4',
            required: false,
            readOnly: true,
            multiValue: false,
            hideFromSearch: false,
            sortOrder: 8000,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'customDate5',
            type: 'SCALAR',
            dataType: 'Timestamp',
            dataSpecialization: 'DATE',
            confidential: false,
            optional: true,
            label: 'Custom Date 5',
            required: false,
            readOnly: true,
            multiValue: false,
            hideFromSearch: false,
            sortOrder: 8000,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'customDate6',
            type: 'SCALAR',
            dataType: 'Timestamp',
            dataSpecialization: 'DATE',
            confidential: false,
            optional: true,
            label: 'Custom Date 6',
            required: false,
            readOnly: true,
            multiValue: false,
            hideFromSearch: false,
            sortOrder: 8000,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'customDate7',
            type: 'SCALAR',
            dataType: 'Timestamp',
            dataSpecialization: 'DATE',
            confidential: false,
            optional: true,
            label: 'Custom Date 7',
            required: false,
            readOnly: true,
            multiValue: false,
            hideFromSearch: false,
            sortOrder: 8000,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'customDate8',
            type: 'SCALAR',
            dataType: 'Timestamp',
            dataSpecialization: 'DATE',
            confidential: false,
            optional: true,
            label: 'Custom Date 8',
            required: false,
            readOnly: true,
            multiValue: false,
            hideFromSearch: false,
            sortOrder: 8000,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'customDate9',
            type: 'SCALAR',
            dataType: 'Timestamp',
            dataSpecialization: 'DATE',
            confidential: false,
            optional: true,
            label: 'Custom Date 9',
            required: false,
            readOnly: true,
            multiValue: false,
            hideFromSearch: false,
            sortOrder: 8000,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'customEncryptedText1',
            type: 'SCALAR',
            dataType: 'String',
            maxLength: 2147483647,
            confidential: false,
            optional: true,
            label: 'Custom Encrypted Text 1',
            required: false,
            readOnly: true,
            multiValue: false,
            inputType: 'TEXTAREA',
            hideFromSearch: false,
            sortOrder: 1000,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'customEncryptedText10',
            type: 'SCALAR',
            dataType: 'String',
            maxLength: 2147483647,
            confidential: false,
            optional: true,
            label: 'Custom Encrypted Text 10',
            required: false,
            readOnly: true,
            multiValue: false,
            inputType: 'TEXTAREA',
            hideFromSearch: false,
            sortOrder: 1000,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'customEncryptedText2',
            type: 'SCALAR',
            dataType: 'String',
            maxLength: 2147483647,
            confidential: false,
            optional: true,
            label: 'Custom Encrypted Text 2',
            required: false,
            readOnly: true,
            multiValue: false,
            inputType: 'TEXTAREA',
            hideFromSearch: false,
            sortOrder: 1000,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'customEncryptedText3',
            type: 'SCALAR',
            dataType: 'String',
            maxLength: 2147483647,
            confidential: false,
            optional: true,
            label: 'Custom Encrypted Text 3',
            required: false,
            readOnly: true,
            multiValue: false,
            inputType: 'TEXTAREA',
            hideFromSearch: false,
            sortOrder: 1000,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'customEncryptedText4',
            type: 'SCALAR',
            dataType: 'String',
            maxLength: 2147483647,
            confidential: false,
            optional: true,
            label: 'Custom Encrypted Text 4',
            required: false,
            readOnly: true,
            multiValue: false,
            inputType: 'TEXTAREA',
            hideFromSearch: false,
            sortOrder: 1000,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'customEncryptedText5',
            type: 'SCALAR',
            dataType: 'String',
            maxLength: 2147483647,
            confidential: false,
            optional: true,
            label: 'Custom Encrypted Text 5',
            required: false,
            readOnly: true,
            multiValue: false,
            inputType: 'TEXTAREA',
            hideFromSearch: false,
            sortOrder: 1000,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'customEncryptedText6',
            type: 'SCALAR',
            dataType: 'String',
            maxLength: 2147483647,
            confidential: false,
            optional: true,
            label: 'Custom Encrypted Text 6',
            required: false,
            readOnly: true,
            multiValue: false,
            inputType: 'TEXTAREA',
            hideFromSearch: false,
            sortOrder: 1000,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'customEncryptedText7',
            type: 'SCALAR',
            dataType: 'String',
            maxLength: 2147483647,
            confidential: false,
            optional: true,
            label: 'Custom Encrypted Text 7',
            required: false,
            readOnly: true,
            multiValue: false,
            inputType: 'TEXTAREA',
            hideFromSearch: false,
            sortOrder: 1000,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'customEncryptedText8',
            type: 'SCALAR',
            dataType: 'String',
            maxLength: 2147483647,
            confidential: false,
            optional: true,
            label: 'Custom Encrypted Text 8',
            required: false,
            readOnly: true,
            multiValue: false,
            inputType: 'TEXTAREA',
            hideFromSearch: false,
            sortOrder: 1000,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'customEncryptedText9',
            type: 'SCALAR',
            dataType: 'String',
            maxLength: 2147483647,
            confidential: false,
            optional: true,
            label: 'Custom Encrypted Text 9',
            required: false,
            readOnly: true,
            multiValue: false,
            inputType: 'TEXTAREA',
            hideFromSearch: false,
            sortOrder: 1000,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'customFloat1',
            type: 'SCALAR',
            dataType: 'Double',
            dataSpecialization: 'FLOAT',
            confidential: false,
            optional: true,
            label: 'Salary High',
            required: false,
            readOnly: true,
            multiValue: false,
            hideFromSearch: false,
            sortOrder: 1575,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'customFloat10',
            type: 'SCALAR',
            dataType: 'Double',
            dataSpecialization: 'FLOAT',
            confidential: false,
            optional: true,
            label: 'Custom Float 10',
            required: false,
            readOnly: true,
            multiValue: false,
            hideFromSearch: false,
            sortOrder: 8000,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'customFloat11',
            type: 'SCALAR',
            dataType: 'Double',
            dataSpecialization: 'FLOAT',
            confidential: false,
            optional: true,
            label: 'Custom Float 11',
            required: false,
            readOnly: true,
            multiValue: false,
            hideFromSearch: false,
            sortOrder: 8000,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'customFloat12',
            type: 'SCALAR',
            dataType: 'Double',
            dataSpecialization: 'FLOAT',
            confidential: false,
            optional: true,
            label: 'Custom Float 12',
            required: false,
            readOnly: true,
            multiValue: false,
            hideFromSearch: false,
            sortOrder: 8000,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'customFloat13',
            type: 'SCALAR',
            dataType: 'Double',
            dataSpecialization: 'FLOAT',
            confidential: false,
            optional: true,
            label: 'Custom Float 13',
            required: false,
            readOnly: true,
            multiValue: false,
            hideFromSearch: false,
            sortOrder: 8000,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'customFloat14',
            type: 'SCALAR',
            dataType: 'Double',
            dataSpecialization: 'FLOAT',
            confidential: false,
            optional: true,
            label: 'Custom Float 14',
            required: false,
            readOnly: true,
            multiValue: false,
            hideFromSearch: false,
            sortOrder: 8000,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'customFloat15',
            type: 'SCALAR',
            dataType: 'Double',
            dataSpecialization: 'FLOAT',
            confidential: false,
            optional: true,
            label: 'Custom Float 15',
            required: false,
            readOnly: true,
            multiValue: false,
            hideFromSearch: false,
            sortOrder: 8000,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'customFloat16',
            type: 'SCALAR',
            dataType: 'Double',
            dataSpecialization: 'FLOAT',
            confidential: false,
            optional: true,
            label: 'Custom Float 16',
            required: false,
            readOnly: true,
            multiValue: false,
            hideFromSearch: false,
            sortOrder: 8000,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'customFloat17',
            type: 'SCALAR',
            dataType: 'Double',
            dataSpecialization: 'FLOAT',
            confidential: false,
            optional: true,
            label: 'Custom Float 17',
            required: false,
            readOnly: true,
            multiValue: false,
            hideFromSearch: false,
            sortOrder: 8000,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'customFloat18',
            type: 'SCALAR',
            dataType: 'Double',
            dataSpecialization: 'FLOAT',
            confidential: false,
            optional: true,
            label: 'Custom Float 18',
            required: false,
            readOnly: true,
            multiValue: false,
            hideFromSearch: false,
            sortOrder: 8000,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'customFloat19',
            type: 'SCALAR',
            dataType: 'Double',
            dataSpecialization: 'FLOAT',
            confidential: false,
            optional: true,
            label: 'Custom Float 19',
            required: false,
            readOnly: true,
            multiValue: false,
            hideFromSearch: false,
            sortOrder: 8000,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'customFloat2',
            type: 'SCALAR',
            dataType: 'Double',
            confidential: false,
            optional: true,
            label: 'grade',
            required: false,
            readOnly: true,
            multiValue: false,
            inputType: 'SELECT',
            options: [
                {
                    value: 1,
                    label: 'A',
                },
                {
                    value: 2,
                    label: 'B',
                },
                {
                    value: 3,
                    label: 'C',
                },
                {
                    value: 4,
                    label: 'D',
                },
            ],
            hideFromSearch: false,
            sortOrder: 16,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'customFloat20',
            type: 'SCALAR',
            dataType: 'Double',
            dataSpecialization: 'FLOAT',
            confidential: false,
            optional: true,
            label: 'Custom Float 20',
            required: false,
            readOnly: true,
            multiValue: false,
            hideFromSearch: false,
            sortOrder: 8000,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'customFloat21',
            type: 'SCALAR',
            dataType: 'Double',
            dataSpecialization: 'FLOAT',
            confidential: false,
            optional: true,
            label: 'Custom Float 21',
            required: false,
            readOnly: true,
            multiValue: false,
            hideFromSearch: false,
            sortOrder: 8000,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'customFloat22',
            type: 'SCALAR',
            dataType: 'Double',
            dataSpecialization: 'FLOAT',
            confidential: false,
            optional: true,
            label: 'Custom Float 22',
            required: false,
            readOnly: true,
            multiValue: false,
            hideFromSearch: false,
            sortOrder: 8000,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'customFloat23',
            type: 'SCALAR',
            dataType: 'Double',
            dataSpecialization: 'FLOAT',
            confidential: false,
            optional: true,
            label: 'Custom Float 23',
            required: false,
            readOnly: true,
            multiValue: false,
            hideFromSearch: false,
            sortOrder: 8000,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'customFloat3',
            type: 'SCALAR',
            dataType: 'Double',
            dataSpecialization: 'FLOAT',
            confidential: false,
            optional: true,
            label: 'customFloat3',
            required: false,
            readOnly: true,
            multiValue: false,
            hideFromSearch: false,
            sortOrder: 442,
            hint: '',
            description: 'smile!',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'customFloat4',
            type: 'SCALAR',
            dataType: 'Double',
            dataSpecialization: 'FLOAT',
            confidential: false,
            optional: true,
            label: 'Custom Float 4',
            required: false,
            readOnly: true,
            multiValue: false,
            hideFromSearch: false,
            sortOrder: 8000,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'customFloat5',
            type: 'SCALAR',
            dataType: 'Double',
            dataSpecialization: 'FLOAT',
            confidential: false,
            optional: true,
            label: 'Custom Float 5',
            required: false,
            readOnly: true,
            multiValue: false,
            hideFromSearch: false,
            sortOrder: 8000,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'customFloat6',
            type: 'SCALAR',
            dataType: 'Double',
            dataSpecialization: 'FLOAT',
            confidential: false,
            optional: true,
            label: 'Custom Float 6',
            required: false,
            readOnly: true,
            multiValue: false,
            hideFromSearch: false,
            sortOrder: 8000,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'customFloat7',
            type: 'SCALAR',
            dataType: 'Double',
            dataSpecialization: 'FLOAT',
            confidential: false,
            optional: true,
            label: 'Custom Float 7',
            required: false,
            readOnly: true,
            multiValue: false,
            hideFromSearch: false,
            sortOrder: 8000,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'customFloat8',
            type: 'SCALAR',
            dataType: 'Double',
            dataSpecialization: 'FLOAT',
            confidential: false,
            optional: true,
            label: 'Custom Float 8',
            required: false,
            readOnly: true,
            multiValue: false,
            hideFromSearch: false,
            sortOrder: 8000,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'customFloat9',
            type: 'SCALAR',
            dataType: 'Double',
            dataSpecialization: 'FLOAT',
            confidential: false,
            optional: true,
            label: 'Custom Float 9',
            required: false,
            readOnly: true,
            multiValue: false,
            hideFromSearch: false,
            sortOrder: 8000,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'customInt1',
            type: 'SCALAR',
            dataType: 'Integer',
            dataSpecialization: 'INTEGER',
            confidential: false,
            optional: true,
            label: 'customInt1',
            required: false,
            readOnly: true,
            multiValue: false,
            hideFromSearch: false,
            sortOrder: 5160,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'customInt10',
            type: 'SCALAR',
            dataType: 'Integer',
            dataSpecialization: 'INTEGER',
            confidential: false,
            optional: true,
            label: 'Custom Int 10',
            required: false,
            readOnly: true,
            multiValue: false,
            hideFromSearch: false,
            sortOrder: 8000,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'customInt11',
            type: 'SCALAR',
            dataType: 'Integer',
            dataSpecialization: 'INTEGER',
            confidential: false,
            optional: true,
            label: 'Custom Int 11',
            required: false,
            readOnly: true,
            multiValue: false,
            hideFromSearch: false,
            sortOrder: 8000,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'customInt12',
            type: 'SCALAR',
            dataType: 'Integer',
            dataSpecialization: 'INTEGER',
            confidential: false,
            optional: true,
            label: 'Custom Int 12',
            required: false,
            readOnly: true,
            multiValue: false,
            hideFromSearch: false,
            sortOrder: 8000,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'customInt13',
            type: 'SCALAR',
            dataType: 'Integer',
            dataSpecialization: 'INTEGER',
            confidential: false,
            optional: true,
            label: 'Custom Int 13',
            required: false,
            readOnly: true,
            multiValue: false,
            hideFromSearch: false,
            sortOrder: 8000,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'customInt14',
            type: 'SCALAR',
            dataType: 'Integer',
            dataSpecialization: 'INTEGER',
            confidential: false,
            optional: true,
            label: 'Custom Int 14',
            required: false,
            readOnly: true,
            multiValue: false,
            hideFromSearch: false,
            sortOrder: 8000,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'customInt15',
            type: 'SCALAR',
            dataType: 'Integer',
            dataSpecialization: 'INTEGER',
            confidential: false,
            optional: true,
            label: 'Custom Int 15',
            required: false,
            readOnly: true,
            multiValue: false,
            hideFromSearch: false,
            sortOrder: 8000,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'customInt16',
            type: 'SCALAR',
            dataType: 'Integer',
            dataSpecialization: 'INTEGER',
            confidential: false,
            optional: true,
            label: 'Custom Int 16',
            required: false,
            readOnly: true,
            multiValue: false,
            hideFromSearch: false,
            sortOrder: 8000,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'customInt17',
            type: 'SCALAR',
            dataType: 'Integer',
            dataSpecialization: 'INTEGER',
            confidential: false,
            optional: true,
            label: 'Custom Int 17',
            required: false,
            readOnly: true,
            multiValue: false,
            hideFromSearch: false,
            sortOrder: 8000,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'customInt18',
            type: 'SCALAR',
            dataType: 'Integer',
            dataSpecialization: 'INTEGER',
            confidential: false,
            optional: true,
            label: 'Custom Int 18',
            required: false,
            readOnly: true,
            multiValue: false,
            hideFromSearch: false,
            sortOrder: 8000,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'customInt19',
            type: 'SCALAR',
            dataType: 'Integer',
            dataSpecialization: 'INTEGER',
            confidential: false,
            optional: true,
            label: 'Custom Int 19',
            required: false,
            readOnly: true,
            multiValue: false,
            hideFromSearch: false,
            sortOrder: 8000,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'customInt2',
            type: 'SCALAR',
            dataType: 'Integer',
            confidential: false,
            optional: true,
            label: 'customInt2',
            required: false,
            readOnly: true,
            multiValue: false,
            inputType: 'SELECT',
            options: [
                {
                    value: 0,
                    label: '0',
                },
                {
                    value: 1,
                    label: '1',
                },
                {
                    value: 2,
                    label: '2',
                },
            ],
            hideFromSearch: false,
            sortOrder: 5170,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'customInt20',
            type: 'SCALAR',
            dataType: 'Integer',
            dataSpecialization: 'INTEGER',
            confidential: false,
            optional: true,
            label: 'Custom Int 20',
            required: false,
            readOnly: true,
            multiValue: false,
            hideFromSearch: false,
            sortOrder: 8000,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'customInt21',
            type: 'SCALAR',
            dataType: 'Integer',
            dataSpecialization: 'INTEGER',
            confidential: false,
            optional: true,
            label: 'Custom Int 21',
            required: false,
            readOnly: true,
            multiValue: false,
            hideFromSearch: false,
            sortOrder: 8000,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'customInt22',
            type: 'SCALAR',
            dataType: 'Integer',
            dataSpecialization: 'INTEGER',
            confidential: false,
            optional: true,
            label: 'Custom Int 22',
            required: false,
            readOnly: true,
            multiValue: false,
            hideFromSearch: false,
            sortOrder: 8000,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'customInt23',
            type: 'SCALAR',
            dataType: 'Integer',
            dataSpecialization: 'INTEGER',
            confidential: false,
            optional: true,
            label: 'Custom Int 23',
            required: false,
            readOnly: true,
            multiValue: false,
            hideFromSearch: false,
            sortOrder: 8000,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'customInt3',
            type: 'SCALAR',
            dataType: 'Integer',
            dataSpecialization: 'INTEGER',
            confidential: false,
            optional: true,
            label: 'customInt3',
            required: false,
            readOnly: true,
            multiValue: false,
            hideFromSearch: false,
            sortOrder: 5180,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'customInt4',
            type: 'SCALAR',
            dataType: 'Integer',
            dataSpecialization: 'INTEGER',
            confidential: false,
            optional: true,
            label: 'Custom Int 4',
            required: false,
            readOnly: true,
            multiValue: false,
            hideFromSearch: false,
            sortOrder: 8000,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'customInt5',
            type: 'SCALAR',
            dataType: 'Integer',
            dataSpecialization: 'INTEGER',
            confidential: false,
            optional: true,
            label: 'Custom Int 5',
            required: false,
            readOnly: true,
            multiValue: false,
            hideFromSearch: false,
            sortOrder: 8000,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'customInt6',
            type: 'SCALAR',
            dataType: 'Integer',
            dataSpecialization: 'INTEGER',
            confidential: false,
            optional: true,
            label: 'Custom Int 6',
            required: false,
            readOnly: true,
            multiValue: false,
            hideFromSearch: false,
            sortOrder: 8000,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'customInt7',
            type: 'SCALAR',
            dataType: 'Integer',
            dataSpecialization: 'INTEGER',
            confidential: false,
            optional: true,
            label: 'Custom Int 7',
            required: false,
            readOnly: true,
            multiValue: false,
            hideFromSearch: false,
            sortOrder: 8000,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'customInt8',
            type: 'SCALAR',
            dataType: 'Integer',
            dataSpecialization: 'INTEGER',
            confidential: false,
            optional: true,
            label: 'Custom Int 8',
            required: false,
            readOnly: true,
            multiValue: false,
            hideFromSearch: false,
            sortOrder: 8000,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'customInt9',
            type: 'SCALAR',
            dataType: 'Integer',
            dataSpecialization: 'INTEGER',
            confidential: false,
            optional: true,
            label: 'Custom Int 9',
            required: false,
            readOnly: true,
            multiValue: false,
            hideFromSearch: false,
            sortOrder: 8000,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'customObject1s',
            type: 'TO_MANY',
            confidential: false,
            optional: true,
            label: 'Custom Object1s',
            required: false,
            readOnly: true,
            multiValue: false,
            optionsType: 'PersonCustomObjectInstance1',
            optionsUrl: '/options/PersonCustomObjectInstance1',
            hideFromSearch: false,
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
            associatedEntity: {
                entity: 'PersonCustomObjectInstance1',
                entityMetaUrl: '/meta/PersonCustomObjectInstance1?fields=*',
                label: 'Availability',
                dateLastModified: '1651869984930',
                fields: [
                    {
                        name: 'id',
                        type: 'ID',
                        dataType: 'Integer',
                        optional: false,
                    },
                ],
                staticTemplateName: 'Availability',
                tabName: 'Availability',
            },
        },
        {
            name: 'customText1',
            type: 'SCALAR',
            dataType: 'String',
            maxLength: 100,
            confidential: false,
            optional: true,
            label: 'Availability',
            required: false,
            readOnly: false,
            multiValue: true,
            inputType: 'SELECT',
            options: [
                {
                    value: 'Anytime except nights',
                    label: 'Anytime except nights',
                },
                {
                    value: 'Week days office hours',
                    label: 'Week days office hours',
                },
                {
                    value: 'Week days anytime',
                    label: 'Week days anytime',
                },
                {
                    value: 'Week day evenings',
                    label: 'Week day evenings',
                },
                {
                    value: 'Weekends',
                    label: 'Weekends',
                },
            ],
            hideFromSearch: false,
            sortOrder: 745,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'customText10',
            type: 'SCALAR',
            dataType: 'String',
            maxLength: 100,
            confidential: false,
            optional: true,
            label: 'customText10',
            required: false,
            readOnly: true,
            multiValue: false,
            inputType: 'SELECT',
            options: [
                {
                    value: 'permament',
                    label: 'permament',
                },
                {
                    value: 'temp',
                    label: 'temp',
                },
            ],
            hideFromSearch: false,
            sortOrder: 237,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'customText11',
            type: 'SCALAR',
            dataType: 'String',
            maxLength: 100,
            confidential: false,
            optional: true,
            label: 'Test State',
            required: false,
            readOnly: true,
            multiValue: false,
            inputType: 'SELECT',
            optionsType: 'NorthAmericaState',
            optionsUrl: '/options/NorthAmericaState',
            options: [
                {
                    value: 'Ontario',
                    label: 'Ontario',
                },
                {
                    value: 'Quebec',
                    label: 'Quebec',
                },
                {
                    value: 'Alberta',
                    label: 'Alberta',
                },
                {
                    value: 'British Columbia',
                    label: 'British Columbia',
                },
                {
                    value: 'Manitoba',
                    label: 'Manitoba',
                },
                {
                    value: 'New Brunswick',
                    label: 'New Brunswick',
                },
                {
                    value: 'Newfoundland',
                    label: 'Newfoundland',
                },
                {
                    value: 'Northwest Territories',
                    label: 'Northwest Territories',
                },
                {
                    value: 'Nova Scotia',
                    label: 'Nova Scotia',
                },
                {
                    value: 'PEI',
                    label: 'PEI',
                },
                {
                    value: 'Saskatchewan',
                    label: 'Saskatchewan',
                },
                {
                    value: 'Nunavut',
                    label: 'Nunavut',
                },
                {
                    value: 'Yukon',
                    label: 'Yukon',
                },
                {
                    value: '----------',
                    label: '----------',
                },
                {
                    value: 'Alabama',
                    label: 'Alabama',
                },
                {
                    value: 'Alaska',
                    label: 'Alaska',
                },
                {
                    value: 'Arizona',
                    label: 'Arizona',
                },
                {
                    value: 'Arkansas',
                    label: 'Arkansas',
                },
                {
                    value: 'California',
                    label: 'California',
                },
                {
                    value: 'Colorado',
                    label: 'Colorado',
                },
                {
                    value: 'Connecticut',
                    label: 'Connecticut',
                },
                {
                    value: 'Delaware',
                    label: 'Delaware',
                },
                {
                    value: 'District of Columbia',
                    label: 'District of Columbia',
                },
                {
                    value: 'Florida',
                    label: 'Florida',
                },
                {
                    value: 'Georgia',
                    label: 'Georgia',
                },
                {
                    value: 'Hawaii',
                    label: 'Hawaii',
                },
                {
                    value: 'Idaho',
                    label: 'Idaho',
                },
                {
                    value: 'Illinois',
                    label: 'Illinois',
                },
                {
                    value: 'Indiana',
                    label: 'Indiana',
                },
                {
                    value: 'Iowa',
                    label: 'Iowa',
                },
                {
                    value: 'Kansas',
                    label: 'Kansas',
                },
                {
                    value: 'Kentucky',
                    label: 'Kentucky',
                },
                {
                    value: 'Louisiana',
                    label: 'Louisiana',
                },
                {
                    value: 'Maine',
                    label: 'Maine',
                },
                {
                    value: 'Maryland',
                    label: 'Maryland',
                },
                {
                    value: 'Massachusetts',
                    label: 'Massachusetts',
                },
                {
                    value: 'Michigan',
                    label: 'Michigan',
                },
                {
                    value: 'Minnesota',
                    label: 'Minnesota',
                },
                {
                    value: 'Mississippi',
                    label: 'Mississippi',
                },
                {
                    value: 'Missouri',
                    label: 'Missouri',
                },
                {
                    value: 'Montana',
                    label: 'Montana',
                },
                {
                    value: 'Nebraska',
                    label: 'Nebraska',
                },
                {
                    value: 'Nevada',
                    label: 'Nevada',
                },
                {
                    value: 'New Hampshire',
                    label: 'New Hampshire',
                },
                {
                    value: 'New Jersey',
                    label: 'New Jersey',
                },
                {
                    value: 'New Mexico',
                    label: 'New Mexico',
                },
                {
                    value: 'New York',
                    label: 'New York',
                },
                {
                    value: 'North Carolina',
                    label: 'North Carolina',
                },
                {
                    value: 'North Dakota',
                    label: 'North Dakota',
                },
                {
                    value: 'Ohio',
                    label: 'Ohio',
                },
                {
                    value: 'Oklahoma',
                    label: 'Oklahoma',
                },
                {
                    value: 'Oregon',
                    label: 'Oregon',
                },
                {
                    value: 'Pennsylvania',
                    label: 'Pennsylvania',
                },
                {
                    value: 'Rhode Island',
                    label: 'Rhode Island',
                },
                {
                    value: 'South Carolina',
                    label: 'South Carolina',
                },
                {
                    value: 'South Dakota',
                    label: 'South Dakota',
                },
                {
                    value: 'Tennessee',
                    label: 'Tennessee',
                },
                {
                    value: 'Texas',
                    label: 'Texas',
                },
                {
                    value: 'Utah',
                    label: 'Utah',
                },
                {
                    value: 'Vermont',
                    label: 'Vermont',
                },
                {
                    value: 'Virginia',
                    label: 'Virginia',
                },
                {
                    value: 'Washington',
                    label: 'Washington',
                },
                {
                    value: 'West Virginia',
                    label: 'West Virginia',
                },
                {
                    value: 'Wisconsin',
                    label: 'Wisconsin',
                },
                {
                    value: 'Wyoming',
                    label: 'Wyoming',
                },
            ],
            hideFromSearch: false,
            sortOrder: 8000,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'customText12',
            type: 'SCALAR',
            dataType: 'String',
            maxLength: 100,
            confidential: false,
            optional: true,
            label: 'customText12',
            required: false,
            readOnly: true,
            multiValue: false,
            hideFromSearch: false,
            sortOrder: 200,
            hint: 'DO NOT USE   DO NOT ENTER DATA IN THIS FIELD',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'customText13',
            type: 'SCALAR',
            dataType: 'String',
            maxLength: 100,
            confidential: false,
            optional: true,
            label: 'customText13',
            required: false,
            readOnly: true,
            multiValue: false,
            inputType: 'SELECT',
            optionsType: 'ClientCorporationText',
            optionsUrl: '/options/ClientCorporationText',
            hideFromSearch: false,
            sortOrder: 223,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'customText14',
            type: 'SCALAR',
            dataType: 'String',
            maxLength: 100,
            confidential: false,
            optional: true,
            label: 'Add to Hotlist',
            required: false,
            readOnly: true,
            multiValue: false,
            inputType: 'SELECT',
            options: [
                {
                    value: 'No',
                    label: 'No',
                },
                {
                    value: 'Yes',
                    label: 'Yes',
                },
                {
                    value: 'Yes-New',
                    label: 'Yes-New',
                },
                {
                    value: 'Prospect',
                    label: 'Prospect',
                },
            ],
            hideFromSearch: false,
            sortOrder: 295,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'customText15',
            type: 'SCALAR',
            dataType: 'String',
            maxLength: 100,
            confidential: false,
            optional: true,
            label: 'customText15',
            required: false,
            readOnly: true,
            multiValue: true,
            inputType: 'SELECT',
            options: [
                {
                    value: 'Test',
                    label: 'Test',
                },
                {
                    value: 'Test 1',
                    label: 'Test 1',
                },
                {
                    value: 'Test2',
                    label: 'Test2',
                },
                {
                    value: 'qwertyuiopasdfghjklzzxcvbasdasfd',
                    label: 'qwertyuiopasdfghjklzzxcvbasdasfd',
                },
            ],
            hideFromSearch: false,
            sortOrder: 21,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'customText16',
            type: 'SCALAR',
            dataType: 'String',
            maxLength: 100,
            confidential: false,
            optional: true,
            label: 'pat test',
            required: false,
            readOnly: true,
            multiValue: false,
            defaultValue: 'test',
            hideFromSearch: false,
            sortOrder: 1555,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'customText17',
            type: 'SCALAR',
            dataType: 'String',
            maxLength: 100,
            confidential: false,
            optional: true,
            label: 'Test Picker',
            required: false,
            readOnly: true,
            multiValue: true,
            inputType: 'SELECT',
            optionsType: 'ClientCorporationText',
            optionsUrl: '/options/ClientCorporationText',
            hideFromSearch: false,
            sortOrder: 557,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'customText18',
            type: 'SCALAR',
            dataType: 'String',
            maxLength: 100,
            confidential: false,
            optional: true,
            label: 'Test Country Code',
            required: false,
            readOnly: true,
            multiValue: false,
            inputType: 'SELECT',
            optionsType: 'Country',
            optionsUrl: '/options/Country',
            hideFromSearch: false,
            sortOrder: 558,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'customText19',
            type: 'SCALAR',
            dataType: 'String',
            maxLength: 100,
            confidential: false,
            optional: true,
            label: 'customText19',
            required: false,
            readOnly: true,
            multiValue: false,
            inputType: 'RADIO',
            options: [
                {
                    value: '1',
                    label: '1',
                },
                {
                    value: '0',
                    label: '0',
                },
            ],
            hideFromSearch: false,
            sortOrder: 169,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'customText2',
            type: 'SCALAR',
            dataType: 'String',
            maxLength: 100,
            confidential: false,
            optional: true,
            label: 'URL',
            required: false,
            readOnly: true,
            multiValue: false,
            hideFromSearch: false,
            sortOrder: 441,
            hint: 'test',
            description: 'Please select all applicable response for candidate.',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'customText20',
            type: 'SCALAR',
            dataType: 'String',
            maxLength: 100,
            confidential: false,
            optional: true,
            label: 'Skills Picker',
            required: false,
            readOnly: true,
            multiValue: true,
            inputType: 'SELECT',
            optionsType: 'SkillText',
            optionsUrl: '/options/SkillText',
            hideFromSearch: false,
            sortOrder: 761,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'customText21',
            type: 'SCALAR',
            dataType: 'String',
            maxLength: 100,
            confidential: false,
            optional: true,
            label: 'Custom Text 21',
            required: false,
            readOnly: true,
            multiValue: false,
            hideFromSearch: false,
            sortOrder: 8000,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'customText22',
            type: 'SCALAR',
            dataType: 'String',
            maxLength: 100,
            confidential: false,
            optional: true,
            label: 'Custom Text 22',
            required: false,
            readOnly: true,
            multiValue: false,
            hideFromSearch: false,
            sortOrder: 8000,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'customText23',
            type: 'SCALAR',
            dataType: 'String',
            maxLength: 100,
            confidential: false,
            optional: true,
            label: 'Custom Text 23',
            required: false,
            readOnly: true,
            multiValue: false,
            hideFromSearch: false,
            sortOrder: 8000,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'customText24',
            type: 'SCALAR',
            dataType: 'String',
            maxLength: 100,
            confidential: false,
            optional: true,
            label: 'Custom Text 24',
            required: false,
            readOnly: true,
            multiValue: false,
            hideFromSearch: false,
            sortOrder: 8000,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'customText25',
            type: 'SCALAR',
            dataType: 'String',
            maxLength: 100,
            confidential: false,
            optional: true,
            label: 'Custom Text 25',
            required: false,
            readOnly: true,
            multiValue: false,
            hideFromSearch: false,
            sortOrder: 8000,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'customText26',
            type: 'SCALAR',
            dataType: 'String',
            maxLength: 100,
            confidential: false,
            optional: true,
            label: 'Custom Text 26',
            required: false,
            readOnly: true,
            multiValue: false,
            hideFromSearch: false,
            sortOrder: 8000,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'customText27',
            type: 'SCALAR',
            dataType: 'String',
            maxLength: 100,
            confidential: false,
            optional: true,
            label: 'Custom Text 27',
            required: false,
            readOnly: true,
            multiValue: false,
            hideFromSearch: false,
            sortOrder: 8000,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'customText28',
            type: 'SCALAR',
            dataType: 'String',
            maxLength: 100,
            confidential: false,
            optional: true,
            label: 'Custom Text 28',
            required: false,
            readOnly: true,
            multiValue: false,
            hideFromSearch: false,
            sortOrder: 8000,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'customText29',
            type: 'SCALAR',
            dataType: 'String',
            maxLength: 100,
            confidential: false,
            optional: true,
            label: 'Custom Text 29',
            required: false,
            readOnly: true,
            multiValue: false,
            hideFromSearch: false,
            sortOrder: 8000,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'customText3',
            type: 'SCALAR',
            dataType: 'String',
            maxLength: 100,
            confidential: false,
            optional: true,
            label: 'Tester for Links',
            required: false,
            readOnly: true,
            multiValue: false,
            hideFromSearch: false,
            sortOrder: 263,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'customText30',
            type: 'SCALAR',
            dataType: 'String',
            maxLength: 100,
            confidential: false,
            optional: true,
            label: 'Custom Text 30',
            required: false,
            readOnly: true,
            multiValue: false,
            hideFromSearch: false,
            sortOrder: 8000,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'customText31',
            type: 'SCALAR',
            dataType: 'String',
            maxLength: 100,
            confidential: false,
            optional: true,
            label: 'Custom Text 31',
            required: false,
            readOnly: true,
            multiValue: false,
            hideFromSearch: false,
            sortOrder: 8000,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'customText32',
            type: 'SCALAR',
            dataType: 'String',
            maxLength: 100,
            confidential: false,
            optional: true,
            label: 'Custom Text 32',
            required: false,
            readOnly: true,
            multiValue: false,
            hideFromSearch: false,
            sortOrder: 8000,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'customText33',
            type: 'SCALAR',
            dataType: 'String',
            maxLength: 100,
            confidential: false,
            optional: true,
            label: 'Custom Text 33',
            required: false,
            readOnly: true,
            multiValue: false,
            hideFromSearch: false,
            sortOrder: 8000,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'customText34',
            type: 'SCALAR',
            dataType: 'String',
            maxLength: 100,
            confidential: false,
            optional: true,
            label: 'Custom Text 34',
            required: false,
            readOnly: true,
            multiValue: false,
            hideFromSearch: false,
            sortOrder: 8000,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'customText35',
            type: 'SCALAR',
            dataType: 'String',
            maxLength: 100,
            confidential: false,
            optional: true,
            label: 'Custom Text 35',
            required: false,
            readOnly: true,
            multiValue: false,
            hideFromSearch: false,
            sortOrder: 8000,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'customText36',
            type: 'SCALAR',
            dataType: 'String',
            maxLength: 100,
            confidential: false,
            optional: true,
            label: 'Custom Text 36',
            required: false,
            readOnly: true,
            multiValue: false,
            hideFromSearch: false,
            sortOrder: 8000,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'customText37',
            type: 'SCALAR',
            dataType: 'String',
            maxLength: 100,
            confidential: false,
            optional: true,
            label: 'Custom Text 37',
            required: false,
            readOnly: true,
            multiValue: false,
            hideFromSearch: false,
            sortOrder: 8000,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'customText38',
            type: 'SCALAR',
            dataType: 'String',
            maxLength: 100,
            confidential: false,
            optional: true,
            label: 'Custom Text 38',
            required: false,
            readOnly: true,
            multiValue: false,
            hideFromSearch: false,
            sortOrder: 8000,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'customText39',
            type: 'SCALAR',
            dataType: 'String',
            maxLength: 100,
            confidential: false,
            optional: true,
            label: 'Custom Text 39',
            required: false,
            readOnly: true,
            multiValue: false,
            hideFromSearch: false,
            sortOrder: 8000,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'customText4',
            type: 'SCALAR',
            dataType: 'String',
            maxLength: 100,
            confidential: false,
            optional: true,
            label: "Candidate's Car",
            required: false,
            readOnly: true,
            multiValue: false,
            inputType: 'SELECT',
            options: [
                {
                    value: '1',
                    label: 'Please Select',
                },
                {
                    value: '2',
                    label: 'Nissan',
                },
                {
                    value: '3',
                    label: 'Honda',
                },
                {
                    value: '4',
                    label: 'BMW',
                },
                {
                    value: '5',
                    label: 'Acura',
                },
            ],
            defaultValue: '1',
            hideFromSearch: false,
            sortOrder: 264,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'customText40',
            type: 'SCALAR',
            dataType: 'String',
            maxLength: 100,
            confidential: false,
            optional: true,
            label: 'Custom Text 40',
            required: false,
            readOnly: true,
            multiValue: false,
            hideFromSearch: false,
            sortOrder: 8000,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'customText5',
            type: 'SCALAR',
            dataType: 'String',
            maxLength: 100,
            confidential: false,
            optional: true,
            label: 'Magic Country',
            required: false,
            readOnly: true,
            multiValue: false,
            inputType: 'SELECT',
            optionsType: 'Country',
            optionsUrl: '/options/Country',
            hideFromSearch: false,
            sortOrder: 485,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'customText6',
            type: 'SCALAR',
            dataType: 'String',
            maxLength: 100,
            confidential: false,
            optional: true,
            label: 'Text Category',
            required: false,
            readOnly: true,
            multiValue: true,
            inputType: 'SELECT',
            optionsType: 'CategoryText',
            optionsUrl: '/options/CategoryText',
            options: [
                {
                    value: '100',
                    label: '100 - Home Office',
                },
                {
                    value: '102',
                    label: '102 - Insurance Relief',
                },
                {
                    value: '110PSF',
                    label: '110 - Home Office PSF',
                },
                {
                    value: '201',
                    label: '201 - Fresno',
                },
                {
                    value: '201PSF',
                    label: '201 - Fresno PSF',
                },
                {
                    value: '203',
                    label: '203 - Modesto',
                },
                {
                    value: '203PSF',
                    label: '203 - Modesto PSF',
                },
                {
                    value: '204',
                    label: '204 - Stockton',
                },
                {
                    value: '204PSF',
                    label: '204 - Stockton PSF',
                },
                {
                    value: '205',
                    label: '205 - Pleasanton',
                },
                {
                    value: '207',
                    label: '207 - San Jose',
                },
                {
                    value: '207PSF',
                    label: '207 - San Jose PSF',
                },
                {
                    value: '210',
                    label: '210 - San Mateo',
                },
                {
                    value: '212',
                    label: '212 - San Ramon',
                },
                {
                    value: '215',
                    label: '215 - Sacramento',
                },
                {
                    value: '217',
                    label: '217 - Sacramento East',
                },
                {
                    value: '260',
                    label: '260 - Portland',
                },
                {
                    value: '275',
                    label: '275 - South Seattle',
                },
                {
                    value: '276',
                    label: '276 - Bellevue',
                },
                {
                    value: '302',
                    label: '302 - South Orange County - Irvine',
                },
                {
                    value: '303',
                    label: '303 - Long Beach',
                },
                {
                    value: '306',
                    label: '306 - Rancho Cucamonga',
                },
                {
                    value: '307',
                    label: '307 - Long Beach',
                },
                {
                    value: '308',
                    label: '308 - LA Culver City',
                },
                {
                    value: '309',
                    label: '309 - South Orange County - Mission Viejo',
                },
                {
                    value: '310',
                    label: '310 - Thousand Oaks',
                },
                {
                    value: '311',
                    label: '311 - Brea',
                },
                {
                    value: '312',
                    label: '312 - South Riverside County',
                },
                {
                    value: '351',
                    label: '351 - San Diego',
                },
                {
                    value: '351PSF',
                    label: '351 - San Diego PSF',
                },
                {
                    value: '352',
                    label: '352 - Carlsbad',
                },
                {
                    value: '352PSF',
                    label: '352 - Carlsbad PSF',
                },
                {
                    value: '380',
                    label: '380 - Las Vegas',
                },
                {
                    value: '405',
                    label: '405 - Columbia',
                },
                {
                    value: '408',
                    label: '408 - Greenville',
                },
                {
                    value: '412',
                    label: '412 - Raleigh',
                },
                {
                    value: '415',
                    label: '415 - Charlotte',
                },
                {
                    value: '416',
                    label: '416 - Charlotte Southeast',
                },
                {
                    value: '418',
                    label: '418 - Charlotte North',
                },
                {
                    value: '429',
                    label: '429 - Atlanta (North)',
                },
                {
                    value: '429PSF',
                    label: '429 - Atlanta (North) PSF',
                },
                {
                    value: '431',
                    label: '431 - Atlanta East',
                },
                {
                    value: '432',
                    label: '432 - Atlanta Gwinnett',
                },
                {
                    value: '444',
                    label: '444 - Miami West',
                },
                {
                    value: '445',
                    label: '445 - Manasota',
                },
                {
                    value: '446',
                    label: '446 - Orlando',
                },
                {
                    value: '447',
                    label: '447 - Orlando Southwest',
                },
                {
                    value: '448',
                    label: '448 - West Palm Beach',
                },
                {
                    value: '448PSF',
                    label: '448 - West Palm Beach PSF',
                },
                {
                    value: '452',
                    label: '452 - Ft. Lauderdale',
                },
                {
                    value: '455',
                    label: '455 - Miami',
                },
                {
                    value: '475',
                    label: '475 - Nashville',
                },
                {
                    value: '480',
                    label: '480 - Memphis',
                },
                {
                    value: '480PSF',
                    label: '480 - Memphis PSF',
                },
                {
                    value: '502',
                    label: '502 - Hurst',
                },
                {
                    value: '503',
                    label: '503 - Ft. Worth',
                },
                {
                    value: '504',
                    label: '504 - Dallas Metro',
                },
                {
                    value: '505',
                    label: '505 - North Dallas',
                },
                {
                    value: '505PSF',
                    label: '505 - North Dallas PSF',
                },
                {
                    value: '509',
                    label: '509 - East Dallas',
                },
                {
                    value: '515',
                    label: '515 - Austin',
                },
                {
                    value: '516',
                    label: '516 - Austin South',
                },
                {
                    value: '520',
                    label: '520 - Greenspoint',
                },
                {
                    value: '521',
                    label: '521 - Southwest Houston',
                },
                {
                    value: '523',
                    label: '523 - Houston Northwest',
                },
                {
                    value: '525',
                    label: '525 - Houston Southeast',
                },
                {
                    value: '575',
                    label: '575 - Hattiesburg',
                },
                {
                    value: '575PSF',
                    label: '575 - Hattiesburg PSF',
                },
                {
                    value: '576',
                    label: '576 - Gulfport',
                },
                {
                    value: '576PSF',
                    label: '576 - Gulfport PSF',
                },
                {
                    value: '590',
                    label: '590 - Tuscaloosa',
                },
                {
                    value: '595',
                    label: '595 - Birmingham South',
                },
                {
                    value: '600',
                    label: '600 - Phoenix',
                },
                {
                    value: '601',
                    label: '601 - Mesa',
                },
                {
                    value: '602',
                    label: '602 - Biltmore',
                },
                {
                    value: '603',
                    label: '603 - Scottsdale',
                },
                {
                    value: '604',
                    label: '604 - Tempe',
                },
                {
                    value: '604PSF',
                    label: '604 - Tempe PSF',
                },
                {
                    value: '607',
                    label: '607 - Scottsdale',
                },
                {
                    value: '610',
                    label: '610 - Tucson',
                },
                {
                    value: '630',
                    label: '630 - Southeast Denver',
                },
                {
                    value: '631',
                    label: '631 - South Denver',
                },
                {
                    value: '632',
                    label: '632 - Denver Northwest',
                },
                {
                    value: '650',
                    label: '650 - South Salt Lake City',
                },
                {
                    value: '651',
                    label: '651 - Salt Lake City North',
                },
                {
                    value: '702',
                    label: '702 - Louisville',
                },
                {
                    value: '702PSF',
                    label: '702 - Louisville PSF',
                },
                {
                    value: '705',
                    label: '705 - Northern Kentucky',
                },
                {
                    value: '754',
                    label: '754 - Downtown Cincinnati',
                },
                {
                    value: '754PSF',
                    label: '754 - Downtown Cincinnati PSF',
                },
                {
                    value: '755',
                    label: '755 - East Cincinnati',
                },
                {
                    value: '755PSF',
                    label: '755 - East Cincinnati PSF',
                },
                {
                    value: '757',
                    label: '757 - Northwest Cincinnati',
                },
                {
                    value: '775',
                    label: '775 - Akron',
                },
                {
                    value: '814',
                    label: '814 - Princeton',
                },
                {
                    value: '815',
                    label: '815 - Paramus',
                },
                {
                    value: '821',
                    label: '821 - Montgomery Co.',
                },
                {
                    value: '822',
                    label: '822 - Lehigh Valley',
                },
                {
                    value: '825',
                    label: '825 - North Pittsburgh',
                },
                {
                    value: '840',
                    label: '840 - Melville',
                },
                {
                    value: '909',
                    label: '909 - St. Louis Metro',
                },
                {
                    value: '909PSF',
                    label: '909 - St. Louis Metro PSF',
                },
                {
                    value: '910',
                    label: '910 - St. Louis',
                },
                {
                    value: '912',
                    label: '912 - St. Louis South/West',
                },
                {
                    value: '915',
                    label: '915 - Independence',
                },
                {
                    value: '940',
                    label: '940 - Bloomington',
                },
                {
                    value: '945',
                    label: '945 - St. Louis Metro East',
                },
                {
                    value: '956',
                    label: '956 - Naperville',
                },
                {
                    value: '962',
                    label: '962 - Chicagoland W-SW',
                },
                {
                    value: '962PSF',
                    label: '962 - Chicagoland W-SW PSF',
                },
                {
                    value: '999',
                    label: '999 - Training',
                },
            ],
            hideFromSearch: false,
            sortOrder: 355,
            hint: '',
            description: 'lala',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'customText7',
            type: 'SCALAR',
            dataType: 'String',
            maxLength: 100,
            confidential: false,
            optional: true,
            label: 'Custom text 7',
            required: false,
            readOnly: true,
            multiValue: false,
            inputType: 'SELECT',
            options: [
                {
                    value: '0+',
                    label: '0+',
                },
                {
                    value: '1+',
                    label: '1+',
                },
                {
                    value: '2+',
                    label: '2+',
                },
                {
                    value: '3+',
                    label: '3+',
                },
                {
                    value: '4+',
                    label: '4+',
                },
                {
                    value: '5+',
                    label: '5+',
                },
                {
                    value: '6+',
                    label: '6+',
                },
                {
                    value: '7+',
                    label: '7+',
                },
                {
                    value: '8+',
                    label: '8+',
                },
                {
                    value: '9+',
                    label: '9+',
                },
                {
                    value: '10+',
                    label: '10+',
                },
                {
                    value: '15+',
                    label: '15+',
                },
                {
                    value: '20+',
                    label: '20+',
                },
                {
                    value: '30+',
                    label: '30+',
                },
            ],
            hideFromSearch: false,
            sortOrder: 8000,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'customText8',
            type: 'SCALAR',
            dataType: 'String',
            maxLength: 100,
            confidential: false,
            optional: true,
            label: 'customText8',
            required: false,
            readOnly: true,
            multiValue: false,
            hideFromSearch: false,
            sortOrder: 8000,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'customText9',
            type: 'SCALAR',
            dataType: 'String',
            maxLength: 100,
            confidential: false,
            optional: true,
            label: 'Specialty picker customText9',
            required: false,
            readOnly: true,
            multiValue: true,
            inputType: 'SELECT',
            optionsType: 'SpecialtyText',
            optionsUrl: '/options/SpecialtyText',
            hideFromSearch: false,
            sortOrder: 721,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'customTextBlock1',
            type: 'SCALAR',
            dataType: 'String',
            maxLength: 2147483647,
            confidential: false,
            optional: true,
            label: 'CustomTextBlock1',
            required: false,
            readOnly: true,
            multiValue: true,
            inputType: 'TEXTAREA',
            hideFromSearch: false,
            sortOrder: 262,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'customTextBlock10',
            type: 'SCALAR',
            dataType: 'String',
            maxLength: 2147483647,
            confidential: false,
            optional: true,
            label: 'Custom Text Block 10',
            required: false,
            readOnly: true,
            multiValue: false,
            inputType: 'TEXTAREA',
            hideFromSearch: false,
            sortOrder: 8000,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'customTextBlock2',
            type: 'SCALAR',
            dataType: 'String',
            maxLength: 2147483647,
            dataSpecialization: 'HTML',
            confidential: false,
            optional: true,
            label: 'CustomTextBlock2',
            required: false,
            readOnly: true,
            multiValue: true,
            options: [
                {
                    value: 'Major consulting firm experience',
                    label: '1',
                },
                {
                    value: 'Boutique consulting firm experience',
                    label: '2',
                },
                {
                    value: 'Independent consulting experience',
                    label: '3',
                },
                {
                    value: 'Internal corporate consulting experience',
                    label: '4',
                },
                {
                    value: 'No consulting experience',
                    label: '5',
                },
            ],
            defaultValue: ['Boutique consulting firm experience'],
            hideFromSearch: false,
            sortOrder: 1,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'customTextBlock3',
            type: 'SCALAR',
            dataType: 'String',
            maxLength: 2147483647,
            confidential: false,
            optional: true,
            label: 'dropdown ticket test',
            required: false,
            readOnly: true,
            multiValue: true,
            inputType: 'SELECT',
            options: [
                {
                    value: 'In2_BldgControl/Security',
                    label: 'In2_BldgControl/Security',
                },
                {
                    value: 'Security',
                    label: 'Security',
                },
                {
                    value: 'In2_BldgControl',
                    label: 'In2_BldgControl',
                },
            ],
            hideFromSearch: false,
            sortOrder: 5070,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'customTextBlock4',
            type: 'SCALAR',
            dataType: 'String',
            maxLength: 2147483647,
            confidential: false,
            optional: true,
            label: 'Job Posting picker',
            required: false,
            readOnly: true,
            multiValue: true,
            inputType: 'SELECT',
            optionsType: 'JobOrderText',
            optionsUrl: '/options/JobOrderText',
            hideFromSearch: false,
            sortOrder: 263,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'customTextBlock5',
            type: 'SCALAR',
            dataType: 'String',
            maxLength: 2147483647,
            confidential: false,
            optional: true,
            label: 'Text Block Picker',
            required: false,
            readOnly: true,
            multiValue: true,
            inputType: 'SELECT',
            options: [
                {
                    value: '1',
                    label: 'a',
                },
                {
                    value: '2',
                    label: 'b',
                },
                {
                    value: '3',
                    label: 'c',
                },
            ],
            hideFromSearch: false,
            sortOrder: 222,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'customTextBlock6',
            type: 'SCALAR',
            dataType: 'String',
            maxLength: 2147483647,
            confidential: false,
            optional: true,
            label: 'Custom Text Block 6',
            required: false,
            readOnly: true,
            multiValue: false,
            inputType: 'TEXTAREA',
            hideFromSearch: false,
            sortOrder: 8000,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'customTextBlock7',
            type: 'SCALAR',
            dataType: 'String',
            maxLength: 2147483647,
            confidential: false,
            optional: true,
            label: 'Custom Text Block 7',
            required: false,
            readOnly: true,
            multiValue: false,
            inputType: 'TEXTAREA',
            hideFromSearch: false,
            sortOrder: 8000,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'customTextBlock8',
            type: 'SCALAR',
            dataType: 'String',
            maxLength: 2147483647,
            confidential: false,
            optional: true,
            label: 'Custom Text Block 8',
            required: false,
            readOnly: true,
            multiValue: false,
            inputType: 'TEXTAREA',
            hideFromSearch: false,
            sortOrder: 8000,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'customTextBlock9',
            type: 'SCALAR',
            dataType: 'String',
            maxLength: 2147483647,
            confidential: false,
            optional: true,
            label: 'Custom Text Block 9',
            required: false,
            readOnly: true,
            multiValue: false,
            inputType: 'TEXTAREA',
            hideFromSearch: false,
            sortOrder: 8000,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'dateAdded',
            type: 'SCALAR',
            dataType: 'Timestamp',
            dataSpecialization: 'SYSTEM',
            confidential: false,
            optional: false,
            label: 'Date Added',
            required: false,
            readOnly: true,
            multiValue: false,
            hideFromSearch: false,
            sortOrder: 10000,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'dateAvailable',
            type: 'SCALAR',
            dataType: 'Timestamp',
            dataSpecialization: 'DATE',
            confidential: false,
            optional: true,
            label: 'Date Available',
            required: false,
            readOnly: true,
            multiValue: false,
            hideFromSearch: false,
            sortOrder: 238,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'dateAvailableEnd',
            type: 'SCALAR',
            dataType: 'Timestamp',
            dataSpecialization: 'DATETIME',
            confidential: false,
            optional: true,
            label: 'Available Until',
            required: false,
            readOnly: true,
            multiValue: false,
            hideFromSearch: false,
            sortOrder: 240,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'dateI9Expiration',
            type: 'SCALAR',
            dataType: 'Timestamp',
            dataSpecialization: 'SYSTEM',
            confidential: false,
            optional: true,
            label: 'Date I9 Expiration',
            required: false,
            readOnly: true,
            multiValue: false,
            hideFromSearch: false,
            sortOrder: 110,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'dateLastComment',
            type: 'SCALAR',
            dataType: 'Timestamp',
            dataSpecialization: 'SYSTEM',
            confidential: false,
            optional: true,
            label: 'Last Note',
            required: false,
            readOnly: true,
            multiValue: false,
            hideFromSearch: false,
            sortOrder: 10000,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'dateLastModified',
            type: 'SCALAR',
            dataType: 'Timestamp',
            dataSpecialization: 'SYSTEM',
            confidential: false,
            optional: true,
            label: 'Date Last Modified',
            required: false,
            readOnly: true,
            multiValue: false,
            hideFromSearch: false,
            sortOrder: 10,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'dateLastPayrollProviderSync',
            type: 'SCALAR',
            dataType: 'Timestamp',
            dataSpecialization: 'DATETIME',
            confidential: false,
            optional: true,
            label: 'Date Last Payroll Provider Sync',
            required: false,
            readOnly: true,
            multiValue: false,
            hideFromSearch: false,
            sortOrder: 12100,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'dateNextCall',
            type: 'SCALAR',
            dataType: 'Timestamp',
            dataSpecialization: 'SYSTEM',
            confidential: false,
            optional: true,
            label: 'Date Next Call',
            required: false,
            readOnly: true,
            multiValue: false,
            hideFromSearch: false,
            sortOrder: 110,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'dateOfBirth',
            type: 'SCALAR',
            dataType: 'Timestamp',
            dataSpecialization: 'DATE',
            confidential: false,
            optional: true,
            label: 'Birthday',
            required: false,
            readOnly: true,
            multiValue: false,
            hideFromSearch: false,
            sortOrder: 390,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'dayRate',
            type: 'SCALAR',
            dataType: 'BigDecimal',
            dataSpecialization: 'MONEY',
            confidential: false,
            optional: false,
            label: 'Day Rate',
            required: false,
            readOnly: false,
            multiValue: false,
            hideFromSearch: false,
            sortOrder: 450,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'dayRateLow',
            type: 'SCALAR',
            dataType: 'BigDecimal',
            dataSpecialization: 'MONEY',
            confidential: false,
            optional: true,
            label: 'dayRateLow',
            required: false,
            readOnly: true,
            multiValue: false,
            hideFromSearch: false,
            sortOrder: 6020,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'degreeList',
            type: 'SCALAR',
            dataType: 'String',
            maxLength: 2147483647,
            confidential: false,
            optional: true,
            label: 'DegreeList',
            required: false,
            readOnly: true,
            multiValue: true,
            inputType: 'SELECT',
            options: [
                {
                    value: 'Associate',
                    label: 'Associate',
                },
                {
                    value: 'BA',
                    label: 'BA',
                },
                {
                    value: 'BBA',
                    label: 'BBA',
                },
                {
                    value: 'BFA',
                    label: 'BFA',
                },
                {
                    value: 'BS',
                    label: 'BS',
                },
                {
                    value: 'MA',
                    label: 'MA',
                },
                {
                    value: 'MBA',
                    label: 'MBA',
                },
                {
                    value: 'MS',
                    label: 'MS',
                },
                {
                    value: 'MD',
                    label: 'MD',
                },
                {
                    value: 'Paralegal Certificate',
                    label: 'Paralegal Certificate',
                },
                {
                    value: 'Phd',
                    label: 'Phd',
                },
            ],
            hideFromSearch: false,
            sortOrder: 453,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'description',
            type: 'SCALAR',
            dataType: 'String',
            maxLength: 2147483647,
            dataSpecialization: 'HTML',
            confidential: false,
            optional: true,
            label: 'About',
            required: false,
            readOnly: false,
            multiValue: false,
            hideFromSearch: false,
            sortOrder: 900,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'desiredLocations',
            type: 'SCALAR',
            dataType: 'String',
            maxLength: 2147483647,
            confidential: false,
            optional: true,
            label: 'Desired Locations',
            required: false,
            readOnly: true,
            multiValue: true,
            inputType: 'SELECT',
            options: [
                {
                    value: 'AL',
                    label: 'Alabama',
                },
                {
                    value: 'AK',
                    label: 'Alaska',
                },
                {
                    value: 'AZ',
                    label: 'Arizona',
                },
                {
                    value: 'AR',
                    label: 'Arkansas',
                },
                {
                    value: 'CA',
                    label: 'California',
                },
                {
                    value: 'CO',
                    label: 'Colorado',
                },
                {
                    value: 'CT',
                    label: 'Connecticut',
                },
                {
                    value: 'DE',
                    label: 'Delaware',
                },
                {
                    value: 'DC',
                    label: 'District of Columbia',
                },
                {
                    value: 'FL',
                    label: 'Florida',
                },
                {
                    value: 'GA',
                    label: 'Georgia',
                },
                {
                    value: 'HI',
                    label: 'Hawaii',
                },
                {
                    value: 'ID',
                    label: 'Idaho',
                },
                {
                    value: 'IL',
                    label: 'Illinois',
                },
                {
                    value: 'IN',
                    label: 'Indiana',
                },
                {
                    value: 'IA',
                    label: 'Iowa',
                },
                {
                    value: 'KS',
                    label: 'Kansas',
                },
                {
                    value: 'KY',
                    label: 'Kentucky',
                },
                {
                    value: 'LA',
                    label: 'Louisiana',
                },
                {
                    value: 'ME',
                    label: 'Maine',
                },
                {
                    value: 'MD',
                    label: 'Maryland',
                },
                {
                    value: 'MA',
                    label: 'Massachusetts',
                },
                {
                    value: 'MI',
                    label: 'Michigan',
                },
                {
                    value: 'MN',
                    label: 'Minnesota',
                },
                {
                    value: 'MS',
                    label: 'Mississippi',
                },
                {
                    value: 'MO',
                    label: 'Missouri',
                },
                {
                    value: 'MT',
                    label: 'Montana',
                },
                {
                    value: 'NE',
                    label: 'Nebraska',
                },
                {
                    value: 'NV',
                    label: 'Nevada',
                },
                {
                    value: 'NH',
                    label: 'New Hampshire',
                },
                {
                    value: 'NJ',
                    label: 'New Jersey',
                },
                {
                    value: 'NM',
                    label: 'New Mexico',
                },
                {
                    value: 'NY',
                    label: 'New York',
                },
                {
                    value: 'NC',
                    label: 'North Carolina',
                },
                {
                    value: 'ND',
                    label: 'North Dakota',
                },
                {
                    value: 'OH',
                    label: 'Ohio',
                },
                {
                    value: 'OK',
                    label: 'Oklahoma',
                },
                {
                    value: 'OR',
                    label: 'Oregon',
                },
                {
                    value: 'PA',
                    label: 'Pennsylvania',
                },
                {
                    value: 'PR',
                    label: 'Puerto Rico',
                },
                {
                    value: 'RI',
                    label: 'Rhode Island',
                },
                {
                    value: 'SC',
                    label: 'South Carolina',
                },
                {
                    value: 'SD',
                    label: 'South Dakota',
                },
                {
                    value: 'TN',
                    label: 'Tennessee',
                },
                {
                    value: 'TX',
                    label: 'Texas',
                },
                {
                    value: 'UT',
                    label: 'Utah',
                },
                {
                    value: 'VT',
                    label: 'Vermont',
                },
                {
                    value: 'VA',
                    label: 'Virginia',
                },
                {
                    value: 'WA',
                    label: 'Washington',
                },
                {
                    value: 'WV',
                    label: 'West Virginia',
                },
                {
                    value: 'WI',
                    label: 'Wisconsin',
                },
                {
                    value: 'WY',
                    label: 'Wyoming',
                },
                {
                    value: 'AB',
                    label: 'Alberta',
                },
                {
                    value: 'BC',
                    label: 'British Columbia',
                },
                {
                    value: 'MB',
                    label: 'Manitoba',
                },
                {
                    value: 'NB',
                    label: 'New Brunswick',
                },
                {
                    value: 'NF',
                    label: 'Newfoundland',
                },
                {
                    value: 'NT',
                    label: 'Northwest Territories',
                },
                {
                    value: 'NS',
                    label: 'Nova Scotia',
                },
                {
                    value: 'NU',
                    label: 'Nunavut',
                },
                {
                    value: 'ON',
                    label: 'Ontario',
                },
                {
                    value: 'PE',
                    label: 'Prince Edward Island',
                },
                {
                    value: 'QC',
                    label: 'Quebec',
                },
                {
                    value: 'SK',
                    label: 'Saskatchewan',
                },
                {
                    value: 'YT',
                    label: 'Yukon',
                },
            ],
            hideFromSearch: false,
            sortOrder: 480,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'disability',
            type: 'SCALAR',
            dataType: 'String',
            maxLength: 1,
            confidential: false,
            optional: true,
            label: 'Disability',
            required: false,
            readOnly: false,
            multiValue: false,
            inputType: 'SELECT',
            options: [
                {
                    value: 'U',
                    label: 'Unknown',
                },
                {
                    value: 'Y',
                    label: 'Yes',
                },
                {
                    value: 'N',
                    label: 'No',
                },
            ],
            hideFromSearch: false,
            sortOrder: 8040,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'distributionLists',
            type: 'TO_MANY',
            dataSpecialization: 'SYSTEM',
            confidential: false,
            optional: true,
            label: 'Distribution Lists',
            required: false,
            readOnly: false,
            multiValue: true,
            optionsType: 'DistributionList',
            optionsUrl: '/options/DistributionList',
            hideFromSearch: false,
            sortOrder: 50,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
            associatedEntity: {
                entity: 'DistributionList',
                entityMetaUrl: '/meta/DistributionList?fields=*',
                label: 'Distribution List',
                dateLastModified: '1651869985168',
                fields: [
                    {
                        name: 'id',
                        type: 'ID',
                        dataType: 'Integer',
                        optional: false,
                    },
                    {
                        name: 'name',
                        type: 'SCALAR',
                        dataType: 'String',
                        maxLength: 100,
                        confidential: false,
                        optional: false,
                        label: 'Name',
                        required: true,
                        readOnly: false,
                        multiValue: false,
                        hideFromSearch: false,
                        sortOrder: 10,
                        hint: '',
                        description: '',
                        systemRequired: false,
                        shouldAddCustomEntityLabel: false,
                    },
                ],
            },
        },
        {
            name: 'educationDegree',
            type: 'SCALAR',
            dataType: 'String',
            maxLength: 2147483647,
            confidential: false,
            optional: true,
            label: 'Education Level',
            required: false,
            readOnly: true,
            multiValue: false,
            inputType: 'SELECT',
            options: [
                {
                    value: 'Not Specified',
                    label: 'Not Specified',
                },
                {
                    value: 'Associate',
                    label: 'Associate',
                },
                {
                    value: 'Bachelor',
                    label: 'Bachelor',
                },
                {
                    value: 'Masters',
                    label: 'Masters',
                },
                {
                    value: 'Doctoral',
                    label: 'Doctoral',
                },
                {
                    value: 'Post Doctoral',
                    label: 'Post Doctoral',
                },
                {
                    value: 'High School',
                    label: 'High School',
                },
                {
                    value: 'Some College',
                    label: 'Some College',
                },
                {
                    value: 'Technical College',
                    label: 'Technical College',
                },
            ],
            hideFromSearch: false,
            sortOrder: 450,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'educations',
            type: 'TO_MANY',
            confidential: false,
            optional: true,
            label: 'Education',
            required: false,
            readOnly: true,
            multiValue: false,
            optionsType: 'CandidateEducation',
            optionsUrl: '/options/CandidateEducation',
            hideFromSearch: false,
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
            associatedEntity: {
                entity: 'CandidateEducation',
                entityMetaUrl: '/meta/CandidateEducation?fields=*',
                label: 'Education',
                dateLastModified: '1651869985196',
                fields: [
                    {
                        name: 'id',
                        type: 'ID',
                        dataType: 'Integer',
                        optional: false,
                    },
                ],
            },
        },
        {
            name: 'email',
            type: 'SCALAR',
            dataType: 'String',
            maxLength: 100,
            confidential: false,
            optional: true,
            label: 'Email',
            required: false,
            readOnly: false,
            multiValue: false,
            hideFromSearch: false,
            sortOrder: 290,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'email2',
            type: 'SCALAR',
            dataType: 'String',
            maxLength: 100,
            confidential: false,
            optional: true,
            label: 'Email Address 2',
            required: false,
            readOnly: true,
            multiValue: false,
            hideFromSearch: false,
            sortOrder: 291,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'email3',
            type: 'SCALAR',
            dataType: 'String',
            maxLength: 100,
            confidential: false,
            optional: true,
            label: 'Email 3',
            required: false,
            readOnly: true,
            multiValue: false,
            hideFromSearch: false,
            sortOrder: 292,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'employeeType',
            type: 'SCALAR',
            dataType: 'String',
            maxLength: 30,
            confidential: false,
            optional: false,
            label: 'Employee Type',
            required: false,
            readOnly: false,
            multiValue: true,
            inputType: 'SELECT',
            options: [
                {
                    value: 'IC',
                    label: 'IC',
                },
                {
                    value: 'W4',
                    label: 'W4',
                },
                {
                    value: 'Employee',
                    label: 'Employee',
                },
                {
                    value: 'test',
                    label: 'test',
                },
            ],
            hideFromSearch: false,
            sortOrder: 430,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'employmentPreference',
            type: 'SCALAR',
            dataType: 'String',
            maxLength: 200,
            confidential: false,
            optional: true,
            label: 'Employment Preference',
            required: false,
            readOnly: true,
            multiValue: true,
            inputType: 'SELECT',
            options: [
                {
                    value: 'Permanent',
                    label: 'Permanent',
                },
                {
                    value: 'Contract',
                    label: 'Contract',
                },
                {
                    value: 'Temporary',
                    label: 'Temporary',
                },
                {
                    value: 'Part-time',
                    label: 'Part-time',
                },
            ],
            hideFromSearch: false,
            sortOrder: 1580,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'estaffGUID',
            type: 'SCALAR',
            dataType: 'String',
            maxLength: 36,
            dataSpecialization: 'SYSTEM',
            confidential: false,
            optional: true,
            label: 'eStaff GUID',
            required: false,
            readOnly: true,
            multiValue: false,
            hideFromSearch: false,
            sortOrder: 11080,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'ethnicity',
            type: 'SCALAR',
            dataType: 'String',
            maxLength: 50,
            confidential: true,
            optional: true,
            label: 'Ethnicity',
            required: false,
            readOnly: false,
            multiValue: false,
            inputType: 'SELECT',
            options: [
                {
                    value: 'Unknown',
                    label: 'Unknown',
                },
                {
                    value: 'American Indian/Alaskan Native',
                    label: 'American Indian/Alaskan Native',
                },
                {
                    value: 'Asian/Pacific Islander',
                    label: 'Asian/Pacific Islander',
                },
                {
                    value: 'Black',
                    label: 'Black',
                },
                {
                    value: 'Hispanic',
                    label: 'Hispanic',
                },
                {
                    value: 'White',
                    label: 'White',
                },
            ],
            hideFromSearch: false,
            sortOrder: 8010,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'experience',
            type: 'SCALAR',
            dataType: 'Integer',
            dataSpecialization: 'INTEGER',
            confidential: false,
            optional: true,
            label: 'Experience',
            required: false,
            readOnly: true,
            multiValue: false,
            defaultValue: 101,
            hideFromSearch: false,
            sortOrder: 10,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'externalID',
            type: 'SCALAR',
            dataType: 'String',
            maxLength: 100,
            confidential: false,
            optional: true,
            label: 'External ID',
            required: false,
            readOnly: true,
            multiValue: false,
            hideFromSearch: false,
            sortOrder: 241,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'fax',
            type: 'SCALAR',
            dataType: 'String',
            maxLength: 50,
            confidential: false,
            optional: true,
            label: 'Fax',
            required: false,
            readOnly: true,
            multiValue: false,
            hideFromSearch: false,
            sortOrder: 400,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'fax2',
            type: 'SCALAR',
            dataType: 'String',
            maxLength: 50,
            confidential: false,
            optional: true,
            label: 'Fax 2',
            required: false,
            readOnly: true,
            multiValue: false,
            hideFromSearch: false,
            sortOrder: 411,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'fax3',
            type: 'SCALAR',
            dataType: 'String',
            maxLength: 50,
            confidential: false,
            optional: true,
            label: 'Fax 3',
            required: false,
            readOnly: true,
            multiValue: false,
            hideFromSearch: false,
            sortOrder: 412,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'federalAddtionalWitholdingsAmount',
            type: 'SCALAR',
            dataType: 'BigDecimal',
            dataSpecialization: 'SYSTEM',
            confidential: false,
            optional: true,
            label: 'Federal Addtional Witholdings Amount',
            required: false,
            readOnly: true,
            multiValue: false,
            hideFromSearch: false,
            sortOrder: 110,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'federalExemptions',
            type: 'SCALAR',
            dataType: 'Integer',
            dataSpecialization: 'SYSTEM',
            confidential: false,
            optional: true,
            label: 'Federal Exemptions',
            required: false,
            readOnly: true,
            multiValue: false,
            hideFromSearch: false,
            sortOrder: 110,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'federalExtraWithholdingAmount',
            type: 'SCALAR',
            dataType: 'BigDecimal',
            dataSpecialization: 'SYSTEM',
            confidential: false,
            optional: true,
            label: 'Federal Extra Withholding Amount (for each pay period)',
            required: false,
            readOnly: true,
            multiValue: false,
            hideFromSearch: false,
            sortOrder: 9960,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'federalFilingStatus',
            type: 'SCALAR',
            dataType: 'String',
            maxLength: 1,
            dataSpecialization: 'SYSTEM',
            confidential: false,
            optional: true,
            label: 'Federal Filing Status',
            required: false,
            readOnly: true,
            multiValue: false,
            hideFromSearch: false,
            sortOrder: 110,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'fileAttachments',
            type: 'TO_MANY',
            confidential: false,
            optional: true,
            label: 'File Attachments',
            required: false,
            readOnly: true,
            multiValue: false,
            optionsType: 'CandidateFileAttachment',
            optionsUrl: '/options/CandidateFileAttachment',
            hideFromSearch: false,
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
            associatedEntity: {
                entity: 'CandidateFileAttachment',
                entityMetaUrl: '/meta/CandidateFileAttachment?fields=*',
                label: 'File Attachments',
                dateLastModified: '1651869985230',
                fields: [
                    {
                        name: 'id',
                        type: 'ID',
                        dataType: 'Integer',
                        optional: false,
                    },
                ],
            },
        },
        {
            name: 'firstName',
            type: 'SCALAR',
            dataType: 'String',
            maxLength: 50,
            confidential: false,
            optional: true,
            label: 'First Name',
            required: true,
            readOnly: false,
            multiValue: false,
            hideFromSearch: false,
            sortOrder: 210,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'gender',
            type: 'SCALAR',
            dataType: 'String',
            maxLength: 1,
            confidential: false,
            optional: true,
            label: 'Gender',
            required: false,
            readOnly: false,
            multiValue: false,
            inputType: 'SELECT',
            options: [
                {
                    value: '_',
                    label: 'Unknown',
                },
                {
                    value: 'M',
                    label: 'Male',
                },
                {
                    value: 'F',
                    label: 'Female',
                },
            ],
            hideFromSearch: false,
            sortOrder: 8020,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'hourlyRate',
            type: 'SCALAR',
            dataType: 'BigDecimal',
            dataSpecialization: 'MONEY',
            confidential: false,
            optional: true,
            label: 'Pay Rate',
            required: false,
            readOnly: false,
            multiValue: false,
            hideFromSearch: false,
            sortOrder: 410,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'hourlyRateLow',
            type: 'SCALAR',
            dataType: 'BigDecimal',
            dataSpecialization: 'MONEY',
            confidential: false,
            optional: true,
            label: 'hourlyRateLow',
            required: false,
            readOnly: true,
            multiValue: false,
            hideFromSearch: false,
            sortOrder: 6010,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'i9OnFile',
            type: 'SCALAR',
            dataType: 'Integer',
            dataSpecialization: 'SYSTEM',
            confidential: false,
            optional: true,
            label: 'I9 On File',
            required: false,
            readOnly: true,
            multiValue: false,
            hideFromSearch: false,
            sortOrder: 110,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'interviews',
            type: 'TO_MANY',
            confidential: false,
            optional: true,
            label: 'Interviews',
            required: false,
            readOnly: true,
            multiValue: false,
            optionsType: 'Appointment',
            optionsUrl: '/options/Appointment',
            hideFromSearch: false,
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
            associatedEntity: {
                entity: 'Appointment',
                entityMetaUrl: '/meta/Appointment?fields=*',
                label: 'Appointment',
                dateLastModified: '1651869985261',
                fields: [
                    {
                        name: 'id',
                        type: 'ID',
                        dataType: 'Integer',
                        optional: false,
                    },
                ],
            },
        },
        {
            name: 'isAnonymized',
            type: 'SCALAR',
            dataType: 'Boolean',
            dataSpecialization: 'SYSTEM',
            confidential: false,
            optional: true,
            label: 'Is Anonymized',
            required: false,
            readOnly: true,
            multiValue: false,
            hideFromSearch: false,
            sortOrder: 29000,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'isDayLightSavings',
            type: 'SCALAR',
            dataType: 'Boolean',
            dataSpecialization: 'SYSTEM',
            confidential: false,
            optional: false,
            label: 'Is Daylight Savings',
            required: false,
            readOnly: true,
            multiValue: false,
            hideFromSearch: false,
            sortOrder: 110,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'isDeleted',
            type: 'SCALAR',
            dataType: 'Boolean',
            dataSpecialization: 'SYSTEM',
            confidential: false,
            optional: true,
            label: 'Is Deleted',
            required: false,
            readOnly: true,
            multiValue: false,
            hideFromSearch: false,
            sortOrder: 110,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'isEditable',
            type: 'SCALAR',
            dataType: 'Boolean',
            confidential: false,
            optional: false,
            label: 'Allow candidate to edit profile',
            required: false,
            readOnly: true,
            multiValue: false,
            inputType: 'RADIO',
            hideFromSearch: false,
            sortOrder: 600,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'isExempt',
            type: 'SCALAR',
            dataType: 'Boolean',
            dataSpecialization: 'SYSTEM',
            confidential: false,
            optional: true,
            label: 'Is Exempt',
            required: false,
            readOnly: true,
            multiValue: false,
            defaultValue: '0',
            hideFromSearch: false,
            sortOrder: 9910,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'isLockedOut',
            type: 'SCALAR',
            dataType: 'Boolean',
            dataSpecialization: 'SYSTEM',
            confidential: false,
            optional: true,
            label: 'Is Locked Out',
            required: false,
            readOnly: true,
            multiValue: false,
            hideFromSearch: false,
            sortOrder: 110,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'jobShiftAssignments',
            type: 'TO_MANY',
            confidential: false,
            optional: true,
            label: 'Job Shift Assignments',
            required: false,
            readOnly: true,
            multiValue: false,
            optionsType: 'JobShiftAssignment',
            optionsUrl: '/options/JobShiftAssignment',
            hideFromSearch: false,
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
            associatedEntity: {
                entity: 'JobShiftAssignment',
                entityMetaUrl: '/meta/JobShiftAssignment?fields=*',
                label: 'Assignment',
                dateLastModified: '1651869985320',
                fields: [
                    {
                        name: 'id',
                        type: 'ID',
                        dataType: 'Integer',
                        optional: false,
                    },
                ],
            },
        },
        {
            name: 'lastName',
            type: 'SCALAR',
            dataType: 'String',
            maxLength: 50,
            confidential: false,
            optional: true,
            label: 'Last Name',
            required: true,
            readOnly: false,
            multiValue: false,
            hideFromSearch: false,
            sortOrder: 220,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'latestComment',
            type: 'TO_MANY',
            dataSpecialization: 'SYSTEM',
            confidential: false,
            optional: true,
            label: 'Latest Comment',
            required: false,
            readOnly: true,
            multiValue: false,
            optionsType: 'CandidateComment',
            optionsUrl: '/options/CandidateComment',
            hideFromSearch: false,
            sortOrder: 50,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
            associatedEntity: {
                entity: 'CandidateComment',
                entityMetaUrl: '/meta/CandidateComment?fields=*',
                label: 'Candidate Comment',
                dateLastModified: '1651869985347',
                fields: [
                    {
                        name: 'id',
                        type: 'ID',
                        dataType: 'Integer',
                        optional: false,
                    },
                    {
                        name: 'name',
                        type: 'SCALAR',
                        dataType: 'String',
                        maxLength: 255,
                        confidential: false,
                        optional: true,
                        label: 'Name',
                        required: false,
                        readOnly: false,
                        multiValue: false,
                        hideFromSearch: false,
                        systemRequired: false,
                        shouldAddCustomEntityLabel: false,
                    },
                    {
                        name: 'comments',
                        type: 'SCALAR',
                        dataType: 'String',
                        maxLength: 2147483647,
                        confidential: false,
                        optional: true,
                        label: 'Comments',
                        required: false,
                        readOnly: false,
                        multiValue: false,
                        hideFromSearch: false,
                        systemRequired: false,
                        shouldAddCustomEntityLabel: false,
                    },
                    {
                        name: 'dateLastModified',
                        type: 'SCALAR',
                        dataType: 'Timestamp',
                        confidential: false,
                        optional: true,
                        label: 'Date Last Modified',
                        required: false,
                        readOnly: false,
                        multiValue: false,
                        hideFromSearch: false,
                        systemRequired: false,
                        shouldAddCustomEntityLabel: false,
                    },
                ],
            },
        },
        {
            name: 'leads',
            type: 'TO_MANY',
            dataSpecialization: 'SYSTEM',
            confidential: false,
            optional: true,
            label: 'Leads',
            required: false,
            readOnly: true,
            multiValue: false,
            optionsType: 'Lead',
            optionsUrl: '/options/Lead',
            hideFromSearch: false,
            sortOrder: 110,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
            associatedEntity: {
                entity: 'Lead',
                entityMetaUrl: '/meta/Lead?fields=*',
                label: 'Lead',
                dateLastModified: '1651869985367',
                fields: [
                    {
                        name: 'id',
                        type: 'ID',
                        dataType: 'Integer',
                        optional: false,
                    },
                    {
                        name: 'firstName',
                        type: 'SCALAR',
                        dataType: 'String',
                        maxLength: 50,
                        confidential: false,
                        optional: true,
                        label: 'First Name',
                        required: false,
                        readOnly: false,
                        multiValue: false,
                        hideFromSearch: false,
                        sortOrder: 10,
                        hint: '',
                        description: '',
                        systemRequired: false,
                        shouldAddCustomEntityLabel: false,
                    },
                    {
                        name: 'lastName',
                        type: 'SCALAR',
                        dataType: 'String',
                        maxLength: 50,
                        confidential: false,
                        optional: true,
                        label: 'Last Name',
                        required: false,
                        readOnly: false,
                        multiValue: false,
                        hideFromSearch: false,
                        sortOrder: 12,
                        hint: '',
                        description: '',
                        systemRequired: false,
                        shouldAddCustomEntityLabel: false,
                    },
                ],
            },
        },
        {
            name: 'linkedPerson',
            type: 'TO_ONE',
            dataSpecialization: 'SYSTEM',
            confidential: false,
            optional: true,
            label: 'Linked Person',
            required: false,
            readOnly: true,
            multiValue: false,
            optionsType: 'Person',
            optionsUrl: '/options/Person',
            hideFromSearch: false,
            sortOrder: 110,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
            associatedEntity: {
                entity: 'Person',
                entityMetaUrl: '/meta/Person?fields=*',
                label: 'Person',
                dateLastModified: '1651869985502',
                fields: [
                    {
                        name: 'id',
                        type: 'ID',
                        dataType: 'Integer',
                        optional: false,
                    },
                    {
                        name: 'firstName',
                        type: 'SCALAR',
                        dataType: 'String',
                        maxLength: 50,
                        confidential: false,
                        optional: true,
                        label: 'First Name',
                        required: false,
                        readOnly: false,
                        multiValue: false,
                        hideFromSearch: false,
                        systemRequired: false,
                        shouldAddCustomEntityLabel: false,
                    },
                    {
                        name: 'lastName',
                        type: 'SCALAR',
                        dataType: 'String',
                        maxLength: 50,
                        confidential: false,
                        optional: true,
                        label: 'Last Name',
                        required: false,
                        readOnly: false,
                        multiValue: false,
                        hideFromSearch: false,
                        systemRequired: false,
                        shouldAddCustomEntityLabel: false,
                    },
                ],
            },
        },
        {
            name: 'localAddtionalWitholdingsAmount',
            type: 'SCALAR',
            dataType: 'BigDecimal',
            dataSpecialization: 'SYSTEM',
            confidential: false,
            optional: true,
            label: 'Local Addtional Witholdings Amount',
            required: false,
            readOnly: true,
            multiValue: false,
            hideFromSearch: false,
            sortOrder: 110,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'localExemptions',
            type: 'SCALAR',
            dataType: 'Integer',
            dataSpecialization: 'SYSTEM',
            confidential: false,
            optional: true,
            label: 'Local Exemptions',
            required: false,
            readOnly: true,
            multiValue: false,
            hideFromSearch: false,
            sortOrder: 110,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'localFilingStatus',
            type: 'SCALAR',
            dataType: 'String',
            maxLength: 1,
            dataSpecialization: 'SYSTEM',
            confidential: false,
            optional: true,
            label: 'Local Filing Status',
            required: false,
            readOnly: true,
            multiValue: false,
            hideFromSearch: false,
            sortOrder: 110,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'localTaxCode',
            type: 'SCALAR',
            dataType: 'String',
            maxLength: 40,
            dataSpecialization: 'SYSTEM',
            confidential: false,
            optional: true,
            label: 'Local Tax Code',
            required: false,
            readOnly: true,
            multiValue: false,
            hideFromSearch: false,
            sortOrder: 110,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'locations',
            type: 'TO_MANY',
            confidential: false,
            optional: true,
            label: 'Locations',
            required: false,
            readOnly: true,
            multiValue: false,
            optionsType: 'Location',
            optionsUrl: '/options/Location',
            hideFromSearch: false,
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
            associatedEntity: {
                entity: 'Location',
                entityMetaUrl: '/meta/Location?fields=*',
                label: 'Location',
                dateLastModified: '1651869984379',
                fields: [
                    {
                        name: 'id',
                        type: 'ID',
                        dataType: 'Integer',
                        optional: false,
                    },
                    {
                        name: 'clientCorporation',
                        type: 'TO_ONE',
                        dataSpecialization: 'SYSTEM',
                        confidential: false,
                        optional: true,
                        label: 'clientCorporationID',
                        required: false,
                        readOnly: true,
                        multiValue: false,
                        optionsType: 'ClientCorporation',
                        optionsUrl: '/options/ClientCorporation',
                        hideFromSearch: false,
                        sortOrder: 40,
                        hint: '',
                        description: '',
                        systemRequired: false,
                        shouldAddCustomEntityLabel: false,
                        associatedEntity: {
                            entity: 'ClientCorporation',
                            entityMetaUrl: '/meta/ClientCorporation?fields=*',
                            label: 'Company',
                            dateLastModified: '1651869984427',
                            fields: [
                                {
                                    name: 'id',
                                    type: 'ID',
                                    dataType: 'Integer',
                                    optional: false,
                                },
                                {
                                    name: 'name',
                                    type: 'SCALAR',
                                    dataType: 'String',
                                    maxLength: 100,
                                    confidential: false,
                                    optional: false,
                                    label: 'Company Name',
                                    required: true,
                                    readOnly: false,
                                    multiValue: false,
                                    hideFromSearch: false,
                                    sortOrder: 10,
                                    hint: '',
                                    description: '',
                                    systemRequired: false,
                                    shouldAddCustomEntityLabel: false,
                                },
                            ],
                        },
                    },
                    {
                        name: 'candidate',
                        type: 'TO_ONE',
                        dataSpecialization: 'SYSTEM',
                        confidential: false,
                        optional: true,
                        label: 'candidateUserID',
                        required: false,
                        readOnly: true,
                        multiValue: false,
                        optionsType: 'Candidate',
                        optionsUrl: '/options/Candidate',
                        hideFromSearch: false,
                        sortOrder: 41,
                        hint: '',
                        description: '',
                        systemRequired: false,
                        shouldAddCustomEntityLabel: false,
                        associatedEntity: {
                            entity: 'Candidate',
                            entityMetaUrl: '/meta/Candidate?fields=*',
                            label: 'Candidate',
                            dateLastModified: '1651869983246',
                            fields: [
                                {
                                    name: 'id',
                                    type: 'ID',
                                    dataType: 'Integer',
                                    optional: false,
                                },
                                {
                                    name: 'firstName',
                                    type: 'SCALAR',
                                    dataType: 'String',
                                    maxLength: 50,
                                    confidential: false,
                                    optional: true,
                                    label: 'First Name',
                                    required: true,
                                    readOnly: false,
                                    multiValue: false,
                                    hideFromSearch: false,
                                    sortOrder: 210,
                                    hint: '',
                                    description: '',
                                    systemRequired: false,
                                    shouldAddCustomEntityLabel: false,
                                },
                                {
                                    name: 'lastName',
                                    type: 'SCALAR',
                                    dataType: 'String',
                                    maxLength: 50,
                                    confidential: false,
                                    optional: true,
                                    label: 'Last Name',
                                    required: true,
                                    readOnly: false,
                                    multiValue: false,
                                    hideFromSearch: false,
                                    sortOrder: 220,
                                    hint: '',
                                    description: '',
                                    systemRequired: false,
                                    shouldAddCustomEntityLabel: false,
                                },
                            ],
                        },
                    },
                    {
                        name: 'title',
                        type: 'SCALAR',
                        dataType: 'String',
                        maxLength: 100,
                        confidential: false,
                        optional: false,
                        label: 'Title',
                        required: true,
                        readOnly: false,
                        multiValue: false,
                        hideFromSearch: false,
                        sortOrder: 60,
                        hint: '',
                        description: '',
                        systemRequired: false,
                        shouldAddCustomEntityLabel: false,
                    },
                    {
                        name: 'effectiveDate',
                        type: 'SCALAR',
                        dataType: 'Date',
                        dataSpecialization: 'DATE',
                        confidential: false,
                        optional: false,
                        label: 'Effective Date',
                        required: true,
                        readOnly: false,
                        multiValue: false,
                        hideFromSearch: false,
                        sortOrder: 20,
                        hint: '',
                        description: '',
                        systemRequired: false,
                        shouldAddCustomEntityLabel: false,
                    },
                    {
                        name: 'effectiveEndDate',
                        type: 'SCALAR',
                        dataType: 'Date',
                        dataSpecialization: 'SYSTEM',
                        confidential: false,
                        optional: true,
                        label: 'effectiveEndDate',
                        required: false,
                        readOnly: true,
                        multiValue: false,
                        hideFromSearch: false,
                        sortOrder: 21,
                        hint: '',
                        description: '',
                        systemRequired: false,
                        shouldAddCustomEntityLabel: false,
                    },
                    {
                        name: 'versionID',
                        type: 'SCALAR',
                        dataType: 'Integer',
                        dataSpecialization: 'SYSTEM',
                        confidential: false,
                        optional: false,
                        label: 'LocationVersionID',
                        required: false,
                        readOnly: false,
                        multiValue: false,
                        hideFromSearch: false,
                        sortOrder: 30,
                        hint: '',
                        description: '',
                        systemRequired: false,
                        shouldAddCustomEntityLabel: false,
                    },
                    {
                        name: 'externalID',
                        type: 'SCALAR',
                        dataType: 'String',
                        maxLength: 100,
                        confidential: false,
                        optional: true,
                        label: 'Location Code',
                        required: true,
                        readOnly: false,
                        multiValue: false,
                        hideFromSearch: false,
                        sortOrder: 50,
                        hint: '',
                        description: '',
                        systemRequired: false,
                        shouldAddCustomEntityLabel: false,
                    },
                    {
                        name: 'address',
                        type: 'COMPOSITE',
                        dataType: 'AddressWithStateID',
                        dataSpecialization: 'ADDRESS_BLOCK',
                        confidential: false,
                        optional: true,
                        label: 'Address',
                        required: false,
                        readOnly: false,
                        multiValue: false,
                        hideFromSearch: false,
                        sortOrder: 135,
                        hint: '',
                        description: '',
                        systemRequired: false,
                        shouldAddCustomEntityLabel: false,
                        fields: [
                            {
                                name: 'address1',
                                type: 'SCALAR',
                                dataType: 'String',
                                maxLength: 100,
                                confidential: false,
                                optional: true,
                                label: 'Address 1',
                                required: false,
                                readOnly: false,
                                multiValue: false,
                                hideFromSearch: false,
                                sortOrder: 140,
                                hint: '',
                                description: '',
                                systemRequired: false,
                                shouldAddCustomEntityLabel: false,
                            },
                            {
                                name: 'address2',
                                type: 'SCALAR',
                                dataType: 'String',
                                maxLength: 100,
                                confidential: false,
                                optional: true,
                                label: 'Address 2',
                                required: false,
                                readOnly: false,
                                multiValue: false,
                                hideFromSearch: false,
                                sortOrder: 150,
                                hint: '',
                                description: '',
                                systemRequired: false,
                                shouldAddCustomEntityLabel: false,
                            },
                            {
                                name: 'city',
                                type: 'SCALAR',
                                dataType: 'String',
                                maxLength: 100,
                                confidential: false,
                                optional: true,
                                label: 'City',
                                required: false,
                                readOnly: false,
                                multiValue: false,
                                hideFromSearch: false,
                                sortOrder: 160,
                                hint: '',
                                description: '',
                                systemRequired: false,
                                shouldAddCustomEntityLabel: false,
                            },
                            {
                                name: 'state',
                                type: 'SCALAR',
                                dataType: 'String',
                                maxLength: 100,
                                dataSpecialization: 'STATE_ID',
                                confidential: false,
                                optional: true,
                                label: 'State',
                                required: false,
                                readOnly: false,
                                multiValue: false,
                                inputType: 'SELECT',
                                optionsType: 'State',
                                optionsUrl: '/options/State',
                                hideFromSearch: false,
                                sortOrder: 170,
                                hint: '',
                                description: '',
                                systemRequired: false,
                                shouldAddCustomEntityLabel: false,
                            },
                            {
                                name: 'zip',
                                type: 'SCALAR',
                                dataType: 'String',
                                maxLength: 100,
                                confidential: false,
                                optional: true,
                                label: 'Zip',
                                required: false,
                                readOnly: false,
                                multiValue: false,
                                hideFromSearch: false,
                                sortOrder: 180,
                                hint: '',
                                description: '',
                                systemRequired: false,
                                shouldAddCustomEntityLabel: false,
                            },
                            {
                                name: 'countryID',
                                type: 'SCALAR',
                                dataType: 'Integer',
                                confidential: false,
                                optional: false,
                                label: 'Country',
                                required: false,
                                readOnly: false,
                                multiValue: false,
                                inputType: 'SELECT',
                                optionsType: 'Country',
                                optionsUrl: '/options/Country',
                                hideFromSearch: false,
                                sortOrder: 190,
                                hint: '',
                                description: '',
                                systemRequired: false,
                                shouldAddCustomEntityLabel: false,
                            },
                            {
                                name: 'countryCode',
                                type: 'SCALAR',
                                dataType: 'String',
                                maxLength: 0,
                                optional: true,
                            },
                            {
                                name: 'countryName',
                                type: 'SCALAR',
                                dataType: 'String',
                                maxLength: 0,
                                optional: true,
                            },
                            {
                                name: 'stateID',
                                type: 'SCALAR',
                                dataType: 'Integer',
                                optional: true,
                            },
                            {
                                name: 'stateName',
                                type: 'SCALAR',
                                dataType: 'String',
                                maxLength: 0,
                                optional: true,
                            },
                        ],
                    },
                ],
            },
        },
        {
            name: 'maritalStatus',
            type: 'SCALAR',
            dataType: 'String',
            maxLength: 100,
            confidential: false,
            optional: true,
            label: 'Marital Status',
            required: false,
            readOnly: true,
            multiValue: false,
            inputType: 'SELECT',
            hideFromSearch: false,
            sortOrder: 15010,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'massMailOptOut',
            type: 'SCALAR',
            dataType: 'Boolean',
            dataSpecialization: 'SYSTEM',
            confidential: false,
            optional: false,
            label: 'Opted Out',
            required: false,
            readOnly: false,
            multiValue: false,
            hideFromSearch: false,
            sortOrder: 81,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'masterUserID',
            type: 'SCALAR',
            dataType: 'Integer',
            dataSpecialization: 'SYSTEM',
            confidential: false,
            optional: true,
            label: 'Master User ID',
            required: false,
            readOnly: true,
            multiValue: false,
            hideFromSearch: false,
            sortOrder: 110,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'middleName',
            type: 'SCALAR',
            dataType: 'String',
            maxLength: 50,
            confidential: false,
            optional: true,
            label: 'Middle Name',
            required: false,
            readOnly: false,
            multiValue: false,
            hideFromSearch: false,
            sortOrder: 215,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'migrateGUID',
            type: 'SCALAR',
            dataType: 'String',
            maxLength: 36,
            dataSpecialization: 'SYSTEM',
            confidential: false,
            optional: true,
            label: 'Migrate GUID',
            required: false,
            readOnly: true,
            multiValue: false,
            hideFromSearch: false,
            sortOrder: 110,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'mobile',
            type: 'SCALAR',
            dataType: 'String',
            maxLength: 50,
            confidential: false,
            optional: true,
            label: 'Mobile Phone',
            required: false,
            readOnly: false,
            multiValue: false,
            hideFromSearch: false,
            sortOrder: 293,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'name',
            type: 'SCALAR',
            dataType: 'String',
            maxLength: 100,
            dataSpecialization: 'SYSTEM',
            confidential: false,
            optional: true,
            label: 'Name',
            required: false,
            readOnly: true,
            multiValue: false,
            hideFromSearch: false,
            sortOrder: 1000,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'namePrefix',
            type: 'SCALAR',
            dataType: 'String',
            maxLength: 20,
            confidential: false,
            optional: true,
            label: 'Name Prefix',
            required: false,
            readOnly: true,
            multiValue: false,
            inputType: 'SELECT',
            options: [
                {
                    value: '1',
                    label: 'Mr.',
                },
                {
                    value: '2',
                    label: 'Mrs.',
                },
                {
                    value: '3',
                    label: 'Ms.',
                },
                {
                    value: '4',
                    label: 'Dr.',
                },
                {
                    value: '5',
                    label: 'Miss',
                },
            ],
            hideFromSearch: false,
            sortOrder: 1,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'nameSuffix',
            type: 'SCALAR',
            dataType: 'String',
            maxLength: 5,
            confidential: false,
            optional: true,
            label: 'Name Suffix',
            required: false,
            readOnly: true,
            multiValue: false,
            inputType: 'SELECT',
            options: [
                {
                    value: 'Jr.',
                    label: 'Jr.',
                },
                {
                    value: 'III',
                    label: 'III',
                },
                {
                    value: 'IV',
                    label: 'IV',
                },
                {
                    value: 'V',
                    label: 'V',
                },
                {
                    value: 'PhD',
                    label: 'PhD',
                },
                {
                    value: 'Esq.',
                    label: 'Esq.',
                },
            ],
            hideFromSearch: false,
            sortOrder: 213,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'nickName',
            type: 'SCALAR',
            dataType: 'String',
            maxLength: 50,
            confidential: false,
            optional: true,
            label: 'nickName',
            required: false,
            readOnly: true,
            multiValue: false,
            hideFromSearch: false,
            sortOrder: 6030,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'notes',
            type: 'TO_MANY',
            confidential: false,
            optional: true,
            label: 'Notes',
            required: false,
            readOnly: true,
            multiValue: false,
            optionsType: 'Note',
            optionsUrl: '/options/Note',
            hideFromSearch: false,
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
            associatedEntity: {
                entity: 'Note',
                entityMetaUrl: '/meta/Note?fields=*',
                label: 'Note',
                dateLastModified: '1651869985741',
                fields: [
                    {
                        name: 'id',
                        type: 'ID',
                        dataType: 'Integer',
                        optional: false,
                    },
                ],
            },
        },
        {
            name: 'numCategories',
            type: 'SCALAR',
            dataType: 'Integer',
            dataSpecialization: 'SYSTEM',
            confidential: false,
            optional: true,
            label: 'Number of Categories',
            required: false,
            readOnly: true,
            multiValue: false,
            hideFromSearch: false,
            sortOrder: 110,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'numOwners',
            type: 'SCALAR',
            dataType: 'Integer',
            dataSpecialization: 'SYSTEM',
            confidential: false,
            optional: true,
            label: 'Number of Owners',
            required: false,
            readOnly: true,
            multiValue: false,
            hideFromSearch: false,
            sortOrder: 110,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'occupation',
            type: 'SCALAR',
            dataType: 'String',
            maxLength: 100,
            confidential: false,
            optional: true,
            label: 'Title',
            required: false,
            readOnly: false,
            multiValue: false,
            hideFromSearch: false,
            sortOrder: 235,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'onboardingDocumentReceivedCount',
            type: 'SCALAR',
            dataType: 'Integer',
            dataSpecialization: 'SYSTEM',
            confidential: false,
            optional: true,
            label: 'Onboarding Docs Received',
            required: false,
            readOnly: true,
            multiValue: false,
            hideFromSearch: false,
            sortOrder: 12045,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'onboardingDocumentSentCount',
            type: 'SCALAR',
            dataType: 'Integer',
            dataSpecialization: 'SYSTEM',
            confidential: false,
            optional: true,
            label: 'Onboarding Docs Sent',
            required: false,
            readOnly: true,
            multiValue: false,
            hideFromSearch: false,
            sortOrder: 12035,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'onboardingPercentComplete',
            type: 'SCALAR',
            dataType: 'Integer',
            dataSpecialization: 'SYSTEM',
            confidential: false,
            optional: true,
            label: '% Complete',
            required: false,
            readOnly: true,
            multiValue: false,
            hideFromSearch: false,
            sortOrder: 12025,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'onboardingReceivedSent',
            type: 'COMPOSITE',
            dataType: 'OnboardingReceivedSent',
            dataSpecialization: 'SYSTEM',
            confidential: false,
            optional: true,
            label: 'Onboarding Received Sent',
            required: false,
            readOnly: true,
            multiValue: false,
            hideFromSearch: false,
            sortOrder: 12025,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
            fields: [
                {
                    name: 'onboardingDocumentReceivedCount',
                    type: 'SCALAR',
                    dataType: 'Integer',
                    dataSpecialization: 'SYSTEM',
                    confidential: false,
                    optional: true,
                    label: 'Onboarding Docs Received',
                    required: false,
                    readOnly: true,
                    multiValue: false,
                    hideFromSearch: false,
                    sortOrder: 12045,
                    hint: '',
                    description: '',
                    systemRequired: false,
                    shouldAddCustomEntityLabel: false,
                },
                {
                    name: 'onboardingDocumentSentCount',
                    type: 'SCALAR',
                    dataType: 'Integer',
                    dataSpecialization: 'SYSTEM',
                    confidential: false,
                    optional: true,
                    label: 'Onboarding Docs Sent',
                    required: false,
                    readOnly: true,
                    multiValue: false,
                    hideFromSearch: false,
                    sortOrder: 12035,
                    hint: '',
                    description: '',
                    systemRequired: false,
                    shouldAddCustomEntityLabel: false,
                },
            ],
        },
        {
            name: 'onboardingStatus',
            type: 'SCALAR',
            dataType: 'String',
            maxLength: 100,
            dataSpecialization: 'SYSTEM',
            confidential: false,
            optional: true,
            label: 'Onboarding Status',
            required: false,
            readOnly: true,
            multiValue: false,
            hideFromSearch: false,
            sortOrder: 12015,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'otherDeductionsAmount',
            type: 'SCALAR',
            dataType: 'BigDecimal',
            dataSpecialization: 'SYSTEM',
            confidential: false,
            optional: true,
            label: 'Other Deductions Amount',
            required: false,
            readOnly: true,
            multiValue: false,
            hideFromSearch: false,
            sortOrder: 9950,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'otherIncomeAmount',
            type: 'SCALAR',
            dataType: 'BigDecimal',
            dataSpecialization: 'SYSTEM',
            confidential: false,
            optional: true,
            label: 'Other Income Amount',
            required: false,
            readOnly: true,
            multiValue: false,
            hideFromSearch: false,
            sortOrder: 9940,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'owner',
            type: 'TO_ONE',
            confidential: false,
            optional: false,
            label: 'Ownership',
            required: true,
            readOnly: false,
            multiValue: false,
            inputType: 'SELECT',
            optionsType: 'CorporateUser',
            optionsUrl: '/options/CorporateUser',
            hideFromSearch: false,
            sortOrder: 275,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
            associatedEntity: {
                entity: 'CorporateUser',
                entityMetaUrl: '/meta/CorporateUser?fields=*',
                label: 'Corporate User',
                dateLastModified: '1651869985785',
                fields: [
                    {
                        name: 'id',
                        type: 'ID',
                        dataType: 'Integer',
                        optional: false,
                    },
                    {
                        name: 'firstName',
                        type: 'SCALAR',
                        dataType: 'String',
                        maxLength: 50,
                        confidential: false,
                        optional: true,
                        label: 'First Name',
                        required: false,
                        readOnly: false,
                        multiValue: false,
                        hideFromSearch: false,
                        systemRequired: false,
                        shouldAddCustomEntityLabel: false,
                    },
                    {
                        name: 'lastName',
                        type: 'SCALAR',
                        dataType: 'String',
                        maxLength: 50,
                        confidential: false,
                        optional: true,
                        label: 'Last Name',
                        required: false,
                        readOnly: false,
                        multiValue: false,
                        hideFromSearch: false,
                        systemRequired: false,
                        shouldAddCustomEntityLabel: false,
                    },
                ],
            },
        },
        {
            name: 'ownerCorporation',
            type: 'TO_ONE',
            dataSpecialization: 'SYSTEM',
            confidential: false,
            optional: false,
            label: 'Owner Corporation',
            required: false,
            readOnly: true,
            multiValue: false,
            optionsType: 'Corporation',
            optionsUrl: '/options/Corporation',
            hideFromSearch: false,
            sortOrder: 110,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
            associatedEntity: {
                entity: 'Corporation',
                entityMetaUrl: '/meta/Corporation?fields=*',
                label: 'Corporation',
                dateLastModified: '1651869985828',
                fields: [
                    {
                        name: 'id',
                        type: 'ID',
                        dataType: 'Integer',
                        optional: false,
                    },
                ],
            },
        },
        {
            name: 'pager',
            type: 'SCALAR',
            dataType: 'String',
            maxLength: 50,
            confidential: false,
            optional: true,
            label: 'Pager',
            required: false,
            readOnly: true,
            multiValue: false,
            hideFromSearch: false,
            sortOrder: 410,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'paperWorkOnFile',
            type: 'SCALAR',
            dataType: 'String',
            maxLength: 2147483647,
            dataSpecialization: 'SYSTEM',
            confidential: false,
            optional: true,
            label: 'Paper Work On File',
            required: false,
            readOnly: true,
            multiValue: false,
            hideFromSearch: false,
            sortOrder: 110,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'password',
            type: 'SCALAR',
            dataType: 'String',
            maxLength: 200,
            dataSpecialization: 'SYSTEM',
            confidential: false,
            optional: false,
            label: 'Password',
            required: false,
            readOnly: true,
            multiValue: false,
            hideFromSearch: false,
            sortOrder: 110,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'payrollClientStartDate',
            type: 'SCALAR',
            dataType: 'Timestamp',
            dataSpecialization: 'DATE',
            confidential: false,
            optional: true,
            label: 'Payroll Client Start Date',
            required: false,
            readOnly: true,
            multiValue: false,
            hideFromSearch: false,
            sortOrder: 11080,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'payrollStatus',
            type: 'SCALAR',
            dataType: 'String',
            maxLength: 100,
            confidential: false,
            optional: true,
            label: 'Payroll Status',
            required: false,
            readOnly: true,
            multiValue: false,
            inputType: 'SELECT',
            hideFromSearch: false,
            sortOrder: 12005,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'personSubtype',
            type: 'SCALAR',
            dataType: 'String',
            maxLength: 100,
            dataSpecialization: 'SYSTEM',
            confidential: false,
            optional: true,
            label: 'Person Subtype',
            required: false,
            readOnly: true,
            multiValue: false,
            hideFromSearch: false,
            sortOrder: 110,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'phone',
            type: 'SCALAR',
            dataType: 'String',
            maxLength: 50,
            confidential: false,
            optional: true,
            label: 'Home Phone',
            required: false,
            readOnly: false,
            multiValue: false,
            hideFromSearch: false,
            sortOrder: 296,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'phone2',
            type: 'SCALAR',
            dataType: 'String',
            maxLength: 50,
            dataSpecialization: 'PHONE',
            confidential: false,
            optional: true,
            label: 'Phone 2',
            required: false,
            readOnly: true,
            multiValue: false,
            hideFromSearch: false,
            sortOrder: 381,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'phone3',
            type: 'SCALAR',
            dataType: 'String',
            maxLength: 50,
            dataSpecialization: 'PHONE',
            confidential: false,
            optional: true,
            label: 'Phone 3',
            required: false,
            readOnly: true,
            multiValue: false,
            hideFromSearch: false,
            sortOrder: 382,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'placements',
            type: 'TO_MANY',
            confidential: false,
            optional: true,
            label: 'Placements',
            required: false,
            readOnly: true,
            multiValue: false,
            optionsType: 'Placement',
            optionsUrl: '/options/Placement',
            hideFromSearch: false,
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
            associatedEntity: {
                entity: 'Placement',
                entityMetaUrl: '/meta/Placement?fields=*',
                label: 'Placement',
                dateLastModified: '1651869984162',
                fields: [
                    {
                        name: 'id',
                        type: 'ID',
                        dataType: 'Integer',
                        optional: false,
                    },
                ],
            },
        },
        {
            name: 'preferredContact',
            type: 'SCALAR',
            dataType: 'String',
            maxLength: 15,
            confidential: false,
            optional: false,
            label: 'Preferred Contact',
            required: false,
            readOnly: true,
            multiValue: false,
            inputType: 'SELECT',
            options: [
                {
                    value: 'Home',
                    label: 'Home',
                },
                {
                    value: 'Work',
                    label: 'Work',
                },
                {
                    value: 'Cell/Mobile',
                    label: 'Cell/Mobile',
                },
                {
                    value: 'Email',
                    label: 'Email',
                },
            ],
            hideFromSearch: false,
            sortOrder: 430,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'primarySkills',
            type: 'TO_MANY',
            confidential: false,
            optional: true,
            label: 'Skills',
            required: false,
            readOnly: false,
            multiValue: true,
            inputType: 'SELECT',
            optionsType: 'Skill',
            optionsUrl: '/options/Skill',
            hideFromSearch: false,
            sortOrder: 730,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
            associatedEntity: {
                entity: 'Skill',
                entityMetaUrl: '/meta/Skill?fields=*',
                label: 'Skill',
                dateLastModified: '1651869985864',
                fields: [
                    {
                        name: 'id',
                        type: 'ID',
                        dataType: 'Integer',
                        optional: false,
                    },
                    {
                        name: 'name',
                        type: 'SCALAR',
                        dataType: 'String',
                        maxLength: 100,
                        confidential: false,
                        optional: false,
                        label: 'Name',
                        required: false,
                        readOnly: false,
                        multiValue: false,
                        hideFromSearch: false,
                        systemRequired: false,
                        shouldAddCustomEntityLabel: false,
                    },
                ],
            },
        },
        {
            name: 'privateLabel',
            type: 'TO_ONE',
            dataSpecialization: 'SYSTEM',
            confidential: false,
            optional: false,
            label: 'Private Label',
            required: false,
            readOnly: true,
            multiValue: false,
            optionsType: 'PrivateLabel',
            optionsUrl: '/options/PrivateLabel',
            hideFromSearch: false,
            sortOrder: 110,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
            associatedEntity: {
                entity: 'PrivateLabel',
                entityMetaUrl: '/meta/PrivateLabel?fields=*',
                label: 'Private Label',
                dateLastModified: '1651869985884',
                fields: [
                    {
                        name: 'id',
                        type: 'ID',
                        dataType: 'Integer',
                        optional: false,
                    },
                    {
                        name: 'name',
                        type: 'SCALAR',
                        dataType: 'String',
                        maxLength: 100,
                        confidential: false,
                        optional: false,
                        label: 'Name',
                        required: false,
                        readOnly: false,
                        multiValue: false,
                        hideFromSearch: false,
                        systemRequired: false,
                        shouldAddCustomEntityLabel: false,
                    },
                ],
            },
        },
        {
            name: 'recentClientList',
            type: 'SCALAR',
            dataType: 'String',
            maxLength: 2147483647,
            confidential: false,
            optional: true,
            label: 'Recent Employers/Clients',
            required: false,
            readOnly: true,
            multiValue: true,
            hideFromSearch: false,
            sortOrder: 1590,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'references',
            type: 'TO_MANY',
            confidential: false,
            optional: true,
            label: 'References',
            required: false,
            readOnly: true,
            multiValue: false,
            optionsType: 'CandidateReference',
            optionsUrl: '/options/CandidateReference',
            hideFromSearch: false,
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
            associatedEntity: {
                entity: 'CandidateReference',
                entityMetaUrl: '/meta/CandidateReference?fields=*',
                label: 'Reference',
                dateLastModified: '1651869985903',
                fields: [
                    {
                        name: 'id',
                        type: 'ID',
                        dataType: 'Integer',
                        optional: false,
                    },
                ],
            },
        },
        {
            name: 'referredBy',
            type: 'SCALAR',
            dataType: 'String',
            maxLength: 50,
            confidential: false,
            optional: true,
            label: 'referredBy text',
            required: false,
            readOnly: true,
            multiValue: false,
            options: [
                {
                    value: 'dfbdf',
                    label: 'dfbdf',
                },
            ],
            hideFromSearch: false,
            sortOrder: 520,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'referredByPerson',
            type: 'TO_ONE',
            confidential: false,
            optional: true,
            label: 'Referred by dropdown',
            required: false,
            readOnly: true,
            multiValue: false,
            inputType: 'SELECT',
            optionsType: 'Person',
            optionsUrl: '/options/Person',
            hideFromSearch: false,
            sortOrder: 519,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
            associatedEntity: {
                entity: 'Person',
                entityMetaUrl: '/meta/Person?fields=*',
                label: 'Person',
                dateLastModified: '1651869985502',
                fields: [
                    {
                        name: 'id',
                        type: 'ID',
                        dataType: 'Integer',
                        optional: false,
                    },
                    {
                        name: 'firstName',
                        type: 'SCALAR',
                        dataType: 'String',
                        maxLength: 50,
                        confidential: false,
                        optional: true,
                        label: 'First Name',
                        required: false,
                        readOnly: false,
                        multiValue: false,
                        hideFromSearch: false,
                        systemRequired: false,
                        shouldAddCustomEntityLabel: false,
                    },
                    {
                        name: 'lastName',
                        type: 'SCALAR',
                        dataType: 'String',
                        maxLength: 50,
                        confidential: false,
                        optional: true,
                        label: 'Last Name',
                        required: false,
                        readOnly: false,
                        multiValue: false,
                        hideFromSearch: false,
                        systemRequired: false,
                        shouldAddCustomEntityLabel: false,
                    },
                ],
            },
        },
        {
            name: 'salary',
            type: 'SCALAR',
            dataType: 'BigDecimal',
            dataSpecialization: 'MONEY',
            confidential: false,
            optional: false,
            label: 'Salary',
            required: false,
            readOnly: false,
            multiValue: false,
            hideFromSearch: false,
            sortOrder: 420,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'salaryLow',
            type: 'SCALAR',
            dataType: 'BigDecimal',
            dataSpecialization: 'MONEY',
            confidential: false,
            optional: true,
            label: 'Salary Low',
            required: false,
            readOnly: true,
            multiValue: false,
            hideFromSearch: false,
            sortOrder: 1570,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'secondaryAddress',
            type: 'COMPOSITE',
            dataType: 'SecondaryAddress',
            dataSpecialization: 'ADDRESS_BLOCK',
            confidential: false,
            optional: true,
            label: 'Address',
            required: false,
            readOnly: false,
            multiValue: false,
            hideFromSearch: false,
            sortOrder: 10000,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
            fields: [
                {
                    name: 'address1',
                    type: 'SCALAR',
                    dataType: 'String',
                    maxLength: 100,
                    confidential: false,
                    optional: true,
                    label: 'Address',
                    required: false,
                    readOnly: true,
                    multiValue: false,
                    hideFromSearch: false,
                    sortOrder: 7010,
                    hint: '',
                    description: '',
                    systemRequired: false,
                    shouldAddCustomEntityLabel: false,
                },
                {
                    name: 'address2',
                    type: 'SCALAR',
                    dataType: 'String',
                    maxLength: 100,
                    confidential: false,
                    optional: true,
                    label: 'Address2',
                    required: false,
                    readOnly: true,
                    multiValue: false,
                    hideFromSearch: false,
                    sortOrder: 7020,
                    hint: '',
                    description: '',
                    systemRequired: false,
                    shouldAddCustomEntityLabel: false,
                },
                {
                    name: 'city',
                    type: 'SCALAR',
                    dataType: 'String',
                    maxLength: 100,
                    confidential: false,
                    optional: true,
                    label: 'City',
                    required: false,
                    readOnly: true,
                    multiValue: false,
                    hideFromSearch: false,
                    sortOrder: 7030,
                    hint: '',
                    description: '',
                    systemRequired: false,
                    shouldAddCustomEntityLabel: false,
                },
                {
                    name: 'state',
                    type: 'SCALAR',
                    dataType: 'String',
                    maxLength: 100,
                    confidential: false,
                    optional: true,
                    label: 'Secondary State',
                    required: false,
                    readOnly: true,
                    multiValue: false,
                    inputType: 'SELECT',
                    optionsType: 'NorthAmericaState',
                    optionsUrl: '/options/NorthAmericaState',
                    options: [
                        {
                            value: 'Other',
                            label: 'Other',
                        },
                        {
                            value: 'AL',
                            label: 'Alabama',
                        },
                        {
                            value: 'AK',
                            label: 'Alaska',
                        },
                        {
                            value: 'AZ',
                            label: 'Arizona',
                        },
                        {
                            value: 'AR',
                            label: 'Arkansas',
                        },
                        {
                            value: 'CA',
                            label: 'California',
                        },
                        {
                            value: 'CO',
                            label: 'Colorado',
                        },
                        {
                            value: 'CT',
                            label: 'Connecticut',
                        },
                        {
                            value: 'DE',
                            label: 'Delaware',
                        },
                        {
                            value: 'FL',
                            label: 'Florida',
                        },
                        {
                            value: 'GA',
                            label: 'Georgia',
                        },
                        {
                            value: 'HI',
                            label: 'Hawaii',
                        },
                        {
                            value: 'ID',
                            label: 'Idaho',
                        },
                        {
                            value: 'IL',
                            label: 'Illinois',
                        },
                        {
                            value: 'IN',
                            label: 'Indiana',
                        },
                        {
                            value: 'IA',
                            label: 'Iowa',
                        },
                        {
                            value: 'KS',
                            label: 'Kansas',
                        },
                        {
                            value: 'KY',
                            label: 'Kentucky',
                        },
                        {
                            value: 'LA',
                            label: 'Louisiana',
                        },
                        {
                            value: 'ME',
                            label: 'Maine',
                        },
                        {
                            value: 'MD',
                            label: 'Maryland',
                        },
                        {
                            value: 'MA',
                            label: 'Massachusetts',
                        },
                        {
                            value: 'MI',
                            label: 'Michigan',
                        },
                        {
                            value: 'MN',
                            label: 'Minnesota',
                        },
                        {
                            value: 'MS',
                            label: 'Mississippi',
                        },
                        {
                            value: 'MO',
                            label: 'Missouri',
                        },
                        {
                            value: 'MT',
                            label: 'Montana',
                        },
                        {
                            value: 'NE',
                            label: 'Nebraska',
                        },
                        {
                            value: 'NV',
                            label: 'Nevada',
                        },
                        {
                            value: 'NH',
                            label: 'New Hampshire',
                        },
                        {
                            value: 'NJ',
                            label: 'New Jersey',
                        },
                        {
                            value: 'NM',
                            label: 'New Mexico',
                        },
                        {
                            value: 'NY',
                            label: 'New York',
                        },
                        {
                            value: 'NC',
                            label: 'North Carolina',
                        },
                        {
                            value: 'ND',
                            label: 'North Dakota',
                        },
                        {
                            value: 'OH',
                            label: 'Ohio',
                        },
                        {
                            value: 'OK',
                            label: 'Oklahoma',
                        },
                        {
                            value: 'OR',
                            label: 'Oregon',
                        },
                        {
                            value: 'PA',
                            label: 'Pennsylvania',
                        },
                        {
                            value: 'RI',
                            label: 'Rhode Island',
                        },
                        {
                            value: 'SC',
                            label: 'South Carolina',
                        },
                        {
                            value: 'SD',
                            label: 'South Dakota',
                        },
                        {
                            value: 'TN',
                            label: 'Tennessee',
                        },
                        {
                            value: 'TX',
                            label: 'Texas',
                        },
                        {
                            value: 'UT',
                            label: 'Utah',
                        },
                        {
                            value: 'VT',
                            label: 'Vermont',
                        },
                        {
                            value: 'VA',
                            label: 'Virginia',
                        },
                        {
                            value: 'WA',
                            label: 'Washington',
                        },
                        {
                            value: 'WV',
                            label: 'West Virginia',
                        },
                        {
                            value: 'WI',
                            label: 'Wisconsin',
                        },
                        {
                            value: 'WY',
                            label: 'Wyoming',
                        },
                    ],
                    hideFromSearch: false,
                    sortOrder: 7040,
                    hint: '',
                    description: '',
                    systemRequired: false,
                    shouldAddCustomEntityLabel: false,
                },
                {
                    name: 'zip',
                    type: 'SCALAR',
                    dataType: 'String',
                    maxLength: 15,
                    confidential: false,
                    optional: true,
                    label: 'Zip',
                    required: false,
                    readOnly: true,
                    multiValue: false,
                    hideFromSearch: false,
                    sortOrder: 7050,
                    hint: '',
                    description: '',
                    systemRequired: false,
                    shouldAddCustomEntityLabel: false,
                },
                {
                    name: 'countryID',
                    type: 'SCALAR',
                    dataType: 'Integer',
                    confidential: false,
                    optional: true,
                    label: 'Country 2',
                    required: false,
                    readOnly: true,
                    multiValue: false,
                    inputType: 'SELECT',
                    optionsType: 'Country',
                    optionsUrl: '/options/Country',
                    defaultValue: 2202,
                    hideFromSearch: false,
                    sortOrder: 7060,
                    hint: '',
                    description: '',
                    systemRequired: false,
                    shouldAddCustomEntityLabel: false,
                },
                {
                    name: 'countryCode',
                    type: 'SCALAR',
                    dataType: 'String',
                    maxLength: 0,
                    optional: true,
                },
                {
                    name: 'countryName',
                    type: 'SCALAR',
                    dataType: 'String',
                    maxLength: 0,
                    optional: true,
                },
            ],
        },
        {
            name: 'secondaryOwners',
            type: 'TO_MANY',
            confidential: false,
            optional: true,
            label: 'Secondary Owners',
            required: false,
            readOnly: false,
            multiValue: true,
            inputType: 'SELECT',
            optionsType: 'CorporateUser',
            optionsUrl: '/options/CorporateUser',
            hideFromSearch: false,
            sortOrder: 275,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
            associatedEntity: {
                entity: 'CorporateUser',
                entityMetaUrl: '/meta/CorporateUser?fields=*',
                label: 'Corporate User',
                dateLastModified: '1651869985785',
                fields: [
                    {
                        name: 'id',
                        type: 'ID',
                        dataType: 'Integer',
                        optional: false,
                    },
                    {
                        name: 'firstName',
                        type: 'SCALAR',
                        dataType: 'String',
                        maxLength: 50,
                        confidential: false,
                        optional: true,
                        label: 'First Name',
                        required: false,
                        readOnly: false,
                        multiValue: false,
                        hideFromSearch: false,
                        systemRequired: false,
                        shouldAddCustomEntityLabel: false,
                    },
                    {
                        name: 'lastName',
                        type: 'SCALAR',
                        dataType: 'String',
                        maxLength: 50,
                        confidential: false,
                        optional: true,
                        label: 'Last Name',
                        required: false,
                        readOnly: false,
                        multiValue: false,
                        hideFromSearch: false,
                        systemRequired: false,
                        shouldAddCustomEntityLabel: false,
                    },
                ],
            },
        },
        {
            name: 'secondarySkills',
            type: 'TO_MANY',
            confidential: false,
            optional: true,
            label: 'Secondary Skills',
            required: false,
            readOnly: true,
            multiValue: true,
            inputType: 'SELECT',
            optionsType: 'Skill',
            optionsUrl: '/options/Skill',
            hideFromSearch: false,
            sortOrder: 1640,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
            associatedEntity: {
                entity: 'Skill',
                entityMetaUrl: '/meta/Skill?fields=*',
                label: 'Skill',
                dateLastModified: '1651869985864',
                fields: [
                    {
                        name: 'id',
                        type: 'ID',
                        dataType: 'Integer',
                        optional: false,
                    },
                    {
                        name: 'name',
                        type: 'SCALAR',
                        dataType: 'String',
                        maxLength: 100,
                        confidential: false,
                        optional: false,
                        label: 'Name',
                        required: false,
                        readOnly: false,
                        multiValue: false,
                        hideFromSearch: false,
                        systemRequired: false,
                        shouldAddCustomEntityLabel: false,
                    },
                ],
            },
        },
        {
            name: 'sendouts',
            type: 'TO_MANY',
            confidential: false,
            optional: true,
            label: 'Sendouts',
            required: false,
            readOnly: true,
            multiValue: false,
            optionsType: 'Sendout',
            optionsUrl: '/options/Sendout',
            hideFromSearch: false,
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
            associatedEntity: {
                entity: 'Sendout',
                entityMetaUrl: '/meta/Sendout?fields=*',
                label: 'Send Out',
                dateLastModified: '1651869986032',
                fields: [
                    {
                        name: 'id',
                        type: 'ID',
                        dataType: 'Integer',
                        optional: false,
                    },
                ],
            },
        },
        {
            name: 'shiftPreferences',
            type: 'TO_MANY',
            dataSpecialization: 'SYSTEM',
            confidential: false,
            optional: true,
            label: 'Shift Preferences',
            required: false,
            readOnly: true,
            multiValue: false,
            optionsType: 'CandidateShiftPreference',
            optionsUrl: '/options/CandidateShiftPreference',
            hideFromSearch: false,
            sortOrder: 29000,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
            associatedEntity: {
                entity: 'CandidateShiftPreference',
                entityMetaUrl: '/meta/CandidateShiftPreference?fields=*',
                label: 'Candidate Shift Preference',
                dateLastModified: '1651869986063',
                fields: [
                    {
                        name: 'id',
                        type: 'ID',
                        dataType: 'Integer',
                        optional: false,
                    },
                ],
            },
        },
        {
            name: 'shifts',
            type: 'TO_MANY',
            dataSpecialization: 'SYSTEM',
            confidential: false,
            optional: true,
            label: 'Shifts',
            required: false,
            readOnly: true,
            multiValue: false,
            optionsType: 'Shift',
            optionsUrl: '/options/Shift',
            hideFromSearch: false,
            sortOrder: 110,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
            associatedEntity: {
                entity: 'Shift',
                entityMetaUrl: '/meta/Shift?fields=*',
                label: 'Shift Definition',
                dateLastModified: '1651869986077',
                fields: [
                    {
                        name: 'id',
                        type: 'ID',
                        dataType: 'Integer',
                        optional: false,
                    },
                    {
                        name: 'name',
                        type: 'SCALAR',
                        dataType: 'String',
                        maxLength: 150,
                        confidential: false,
                        optional: true,
                        label: 'Name',
                        required: true,
                        readOnly: false,
                        multiValue: false,
                        hideFromSearch: false,
                        sortOrder: 30,
                        hint: '',
                        description: '',
                        systemRequired: false,
                        shouldAddCustomEntityLabel: false,
                    },
                ],
            },
        },
        {
            name: 'skillSet',
            type: 'SCALAR',
            dataType: 'String',
            maxLength: 2147483647,
            confidential: false,
            optional: true,
            label: 'Additional Skills',
            required: false,
            readOnly: true,
            multiValue: true,
            inputType: 'TEXTAREA',
            hideFromSearch: false,
            sortOrder: 1650,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'source',
            type: 'SCALAR',
            dataType: 'String',
            maxLength: 200,
            confidential: false,
            optional: true,
            label: 'Source',
            required: false,
            readOnly: false,
            multiValue: true,
            inputType: 'SELECT',
            options: [
                {
                    value: 'Newspaper',
                    label: 'Newspaper',
                },
                {
                    value: 'Employee Referral',
                    label: 'Employee Referral',
                },
                {
                    value: 'External Referral',
                    label: 'External Referral',
                },
            ],
            hideFromSearch: false,
            sortOrder: 236,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'specialties',
            type: 'TO_MANY',
            confidential: false,
            optional: true,
            label: 'Specialties',
            required: false,
            readOnly: false,
            multiValue: true,
            inputType: 'SELECT',
            optionsType: 'Specialty',
            optionsUrl: '/options/Specialty',
            hideFromSearch: false,
            sortOrder: 720,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
            associatedEntity: {
                entity: 'Specialty',
                entityMetaUrl: '/meta/Specialty?fields=*',
                label: 'Specialty',
                dateLastModified: '1651869986098',
                fields: [
                    {
                        name: 'id',
                        type: 'ID',
                        dataType: 'Integer',
                        optional: false,
                    },
                    {
                        name: 'name',
                        type: 'SCALAR',
                        dataType: 'String',
                        maxLength: 100,
                        confidential: false,
                        optional: false,
                        label: 'Name',
                        required: false,
                        readOnly: false,
                        multiValue: false,
                        hideFromSearch: false,
                        systemRequired: false,
                        shouldAddCustomEntityLabel: false,
                    },
                ],
            },
        },
        {
            name: 'ssn',
            type: 'SCALAR',
            dataType: 'String',
            maxLength: 18,
            dataSpecialization: 'SSN',
            confidential: true,
            optional: true,
            label: 'SSN',
            required: false,
            readOnly: true,
            multiValue: false,
            hideFromSearch: false,
            sortOrder: 510,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'stateAddtionalWitholdingsAmount',
            type: 'SCALAR',
            dataType: 'BigDecimal',
            dataSpecialization: 'SYSTEM',
            confidential: false,
            optional: true,
            label: 'State Addtional Witholdings Amount',
            required: false,
            readOnly: true,
            multiValue: false,
            hideFromSearch: false,
            sortOrder: 110,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'stateExemptions',
            type: 'SCALAR',
            dataType: 'Integer',
            dataSpecialization: 'SYSTEM',
            confidential: false,
            optional: true,
            label: 'State Exemptions',
            required: false,
            readOnly: true,
            multiValue: false,
            hideFromSearch: false,
            sortOrder: 110,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'stateFilingStatus',
            type: 'SCALAR',
            dataType: 'String',
            maxLength: 1,
            dataSpecialization: 'SYSTEM',
            confidential: false,
            optional: true,
            label: 'State Filing Status',
            required: false,
            readOnly: true,
            multiValue: false,
            hideFromSearch: false,
            sortOrder: 110,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'status',
            type: 'SCALAR',
            dataType: 'String',
            maxLength: 100,
            confidential: false,
            optional: true,
            label: 'Status',
            required: true,
            readOnly: false,
            multiValue: false,
            inputType: 'SELECT',
            options: [
                {
                    value: 'New Lead',
                    label: 'New Lead',
                },
                {
                    value: 'Active',
                    label: 'Active',
                },
                {
                    value: 'Placed',
                    label: 'Placed',
                },
                {
                    value: 'Unavailable',
                    label: 'Unavailable',
                },
                {
                    value: 'Archive',
                    label: 'Archive',
                },
                {
                    value: 'Private',
                    label: 'Private',
                },
            ],
            hideFromSearch: false,
            sortOrder: 225,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
            allowCustomFilterValues: true,
        },
        {
            name: 'submissions',
            type: 'TO_MANY',
            confidential: false,
            optional: true,
            label: 'Submissions',
            required: false,
            readOnly: true,
            multiValue: false,
            optionsType: 'JobSubmission',
            optionsUrl: '/options/JobSubmission',
            hideFromSearch: false,
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
            associatedEntity: {
                entity: 'JobSubmission',
                entityMetaUrl: '/meta/JobSubmission?fields=*',
                label: 'Submission',
                dateLastModified: '1651869986119',
                fields: [
                    {
                        name: 'id',
                        type: 'ID',
                        dataType: 'Integer',
                        optional: false,
                    },
                ],
            },
        },
        {
            name: 'tasks',
            type: 'TO_MANY',
            confidential: false,
            optional: true,
            label: 'Tasks',
            required: false,
            readOnly: true,
            multiValue: false,
            optionsType: 'Task',
            optionsUrl: '/options/Task',
            hideFromSearch: false,
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
            associatedEntity: {
                entity: 'Task',
                entityMetaUrl: '/meta/Task?fields=*',
                label: 'Task',
                dateLastModified: '1651869986197',
                fields: [
                    {
                        name: 'id',
                        type: 'ID',
                        dataType: 'Integer',
                        optional: false,
                    },
                ],
            },
        },
        {
            name: 'taxID',
            type: 'SCALAR',
            dataType: 'String',
            maxLength: 18,
            confidential: false,
            optional: true,
            label: 'Tax ID',
            required: false,
            readOnly: true,
            multiValue: false,
            options: [
                {
                    value: 'vvsd',
                    label: 'vvsd',
                },
            ],
            hideFromSearch: false,
            sortOrder: 490,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'taxState',
            type: 'SCALAR',
            dataType: 'String',
            maxLength: 100,
            dataSpecialization: 'SYSTEM',
            confidential: false,
            optional: true,
            label: 'Tax State',
            required: false,
            readOnly: true,
            multiValue: false,
            hideFromSearch: false,
            sortOrder: 110,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'tearsheets',
            type: 'TO_MANY',
            dataSpecialization: 'SYSTEM',
            confidential: false,
            optional: true,
            label: 'Tearsheets',
            required: false,
            readOnly: false,
            multiValue: false,
            optionsType: 'Tearsheet',
            optionsUrl: '/options/Tearsheet',
            hideFromSearch: false,
            sortOrder: 137,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
            associatedEntity: {
                entity: 'Tearsheet',
                entityMetaUrl: '/meta/Tearsheet?fields=*',
                label: 'Tearsheet',
                dateLastModified: '1651869986250',
                fields: [
                    {
                        name: 'id',
                        type: 'ID',
                        dataType: 'Integer',
                        optional: false,
                    },
                    {
                        name: 'name',
                        type: 'SCALAR',
                        dataType: 'String',
                        maxLength: 100,
                        dataSpecialization: 'SYSTEM',
                        confidential: false,
                        optional: false,
                        label: 'Name',
                        required: false,
                        readOnly: true,
                        multiValue: false,
                        hideFromSearch: false,
                        sortOrder: 10,
                        hint: '',
                        description: '',
                        systemRequired: false,
                        shouldAddCustomEntityLabel: false,
                    },
                ],
            },
        },
        {
            name: 'timeZoneOffsetEST',
            type: 'SCALAR',
            dataType: 'Integer',
            dataSpecialization: 'SYSTEM',
            confidential: false,
            optional: false,
            label: 'Time Zone Offset EST',
            required: false,
            readOnly: true,
            multiValue: false,
            hideFromSearch: false,
            sortOrder: 110,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'tobaccoUser',
            type: 'SCALAR',
            dataType: 'String',
            maxLength: 100,
            confidential: false,
            optional: true,
            label: 'Tobacco User',
            required: false,
            readOnly: true,
            multiValue: false,
            inputType: 'SELECT',
            hideFromSearch: false,
            sortOrder: 15010,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'totalDependentClaimAmount',
            type: 'SCALAR',
            dataType: 'BigDecimal',
            dataSpecialization: 'SYSTEM',
            confidential: false,
            optional: true,
            label: 'Total Dependent Claim Amount',
            required: false,
            readOnly: true,
            multiValue: false,
            hideFromSearch: false,
            sortOrder: 9930,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'travelLimit',
            type: 'SCALAR',
            dataType: 'Integer',
            dataSpecialization: 'INTEGER',
            confidential: false,
            optional: false,
            label: 'Max commute distance',
            required: false,
            readOnly: false,
            multiValue: false,
            options: [
                {
                    value: 1,
                    label: '1',
                },
                {
                    value: 2,
                    label: '2',
                },
                {
                    value: 3,
                    label: '3',
                },
                {
                    value: 4,
                    label: '4',
                },
                {
                    value: 5,
                    label: '5',
                },
                {
                    value: 6,
                    label: '6',
                },
                {
                    value: 7,
                    label: '7',
                },
                {
                    value: 8,
                    label: '8',
                },
                {
                    value: 10,
                    label: '10',
                },
                {
                    value: 15,
                    label: '15',
                },
                {
                    value: 20,
                    label: '20',
                },
                {
                    value: 25,
                    label: '25',
                },
                {
                    value: 30,
                    label: '30',
                },
                {
                    value: 40,
                    label: '40',
                },
                {
                    value: 50,
                    label: '50',
                },
                {
                    value: 60,
                    label: '60',
                },
                {
                    value: 75,
                    label: '75',
                },
            ],
            defaultValue: 10,
            hideFromSearch: false,
            sortOrder: 740,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'travelMethod',
            type: 'SCALAR',
            dataType: 'String',
            maxLength: 100,
            dataSpecialization: 'SYSTEM',
            confidential: false,
            optional: true,
            label: 'Travel Method',
            required: false,
            readOnly: true,
            multiValue: false,
            hideFromSearch: false,
            sortOrder: 110,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'twoJobs',
            type: 'SCALAR',
            dataType: 'Boolean',
            dataSpecialization: 'SYSTEM',
            confidential: false,
            optional: true,
            label: 'Two Jobs?',
            required: false,
            readOnly: true,
            multiValue: false,
            defaultValue: '0',
            hideFromSearch: false,
            sortOrder: 9920,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'type',
            type: 'SCALAR',
            dataType: 'String',
            maxLength: 100,
            confidential: false,
            optional: true,
            label: 'type',
            required: false,
            readOnly: true,
            multiValue: false,
            inputType: 'SELECT',
            options: [
                {
                    value: 'Staffing',
                    label: 'Staffing',
                },
                {
                    value: 'RFP/VOR',
                    label: 'RFP/VOR',
                },
                {
                    value: 'ICAP/Flextrack',
                    label: 'ICAP/Flextrack',
                },
            ],
            hideFromSearch: false,
            sortOrder: 239,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'userDateAdded',
            type: 'SCALAR',
            dataType: 'Timestamp',
            dataSpecialization: 'SYSTEM',
            confidential: false,
            optional: false,
            label: 'User Date Added',
            required: false,
            readOnly: true,
            multiValue: false,
            hideFromSearch: false,
            sortOrder: 1000,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'userIntegrations',
            type: 'TO_MANY',
            confidential: false,
            optional: true,
            label: 'User Integrations',
            required: false,
            readOnly: true,
            multiValue: false,
            optionsType: 'UserIntegration',
            optionsUrl: '/options/UserIntegration',
            hideFromSearch: false,
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
            associatedEntity: {
                entity: 'UserIntegration',
                entityMetaUrl: '/meta/UserIntegration?fields=*',
                label: 'User Integration',
                dateLastModified: '1651869986272',
                fields: [
                    {
                        name: 'id',
                        type: 'ID',
                        dataType: 'Integer',
                        optional: false,
                    },
                ],
            },
        },
        {
            name: 'userType',
            type: 'TO_ONE',
            dataSpecialization: 'SYSTEM',
            confidential: false,
            optional: false,
            label: 'User Type',
            required: false,
            readOnly: true,
            multiValue: false,
            optionsType: 'UserType',
            optionsUrl: '/options/UserType',
            hideFromSearch: false,
            sortOrder: 110,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
            associatedEntity: {
                entity: 'UserType',
                entityMetaUrl: '/meta/UserType?fields=*',
                label: 'User Type',
                dateLastModified: '1651869986304',
                fields: [
                    {
                        name: 'id',
                        type: 'ID',
                        dataType: 'Integer',
                        optional: false,
                    },
                    {
                        name: 'name',
                        type: 'SCALAR',
                        dataType: 'String',
                        maxLength: 100,
                        confidential: false,
                        optional: false,
                        label: 'Name',
                        required: false,
                        readOnly: false,
                        multiValue: false,
                        hideFromSearch: false,
                        systemRequired: false,
                        shouldAddCustomEntityLabel: false,
                    },
                ],
            },
        },
        {
            name: 'username',
            type: 'SCALAR',
            dataType: 'String',
            maxLength: 100,
            dataSpecialization: 'SYSTEM',
            confidential: false,
            optional: false,
            label: 'Username',
            required: false,
            readOnly: true,
            multiValue: false,
            hideFromSearch: false,
            sortOrder: 110,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'veteran',
            type: 'SCALAR',
            dataType: 'String',
            maxLength: 1,
            confidential: false,
            optional: true,
            label: 'Veteran',
            required: false,
            readOnly: false,
            multiValue: false,
            inputType: 'SELECT',
            options: [
                {
                    value: 'U',
                    label: 'Unknown',
                },
                {
                    value: 'Y',
                    label: 'Yes',
                },
                {
                    value: 'N',
                    label: 'No',
                },
            ],
            hideFromSearch: false,
            sortOrder: 8030,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'webResponses',
            type: 'TO_MANY',
            confidential: false,
            optional: true,
            label: 'Web Responses',
            required: false,
            readOnly: true,
            multiValue: false,
            optionsType: 'JobSubmission',
            optionsUrl: '/options/JobSubmission',
            hideFromSearch: false,
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
            associatedEntity: {
                entity: 'JobSubmission',
                entityMetaUrl: '/meta/JobSubmission?fields=*',
                label: 'Submission',
                dateLastModified: '1651869986119',
                fields: [
                    {
                        name: 'id',
                        type: 'ID',
                        dataType: 'Integer',
                        optional: false,
                    },
                ],
            },
        },
        {
            name: 'willRelocate',
            type: 'SCALAR',
            dataType: 'Boolean',
            confidential: false,
            optional: false,
            label: 'Willing to Relocate',
            required: false,
            readOnly: false,
            multiValue: false,
            inputType: 'RADIO',
            options: [
                {
                    value: true,
                    label: 'Open',
                },
                {
                    value: false,
                    label: 'Closed',
                },
            ],
            hideFromSearch: false,
            sortOrder: 470,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'workAuthorized',
            type: 'SCALAR',
            dataType: 'Boolean',
            confidential: false,
            optional: false,
            label: 'Eligible to work',
            required: false,
            readOnly: false,
            multiValue: false,
            inputType: 'RADIO',
            options: [
                {
                    value: false,
                    label: 'Yes',
                },
                {
                    value: false,
                    label: 'No',
                },
            ],
            hideFromSearch: false,
            sortOrder: 460,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'workHistories',
            type: 'TO_MANY',
            confidential: false,
            optional: true,
            label: 'Work History',
            required: false,
            readOnly: true,
            multiValue: false,
            optionsType: 'CandidateWorkHistory',
            optionsUrl: '/options/CandidateWorkHistory',
            hideFromSearch: false,
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
            associatedEntity: {
                entity: 'CandidateWorkHistory',
                entityMetaUrl: '/meta/CandidateWorkHistory?fields=*',
                label: 'Work History',
                dateLastModified: '1651869986328',
                fields: [
                    {
                        name: 'id',
                        type: 'ID',
                        dataType: 'Integer',
                        optional: false,
                    },
                ],
            },
        },
        {
            name: 'workPhone',
            type: 'SCALAR',
            dataType: 'String',
            maxLength: 50,
            confidential: false,
            optional: true,
            label: 'Work Phone',
            required: false,
            readOnly: true,
            multiValue: false,
            hideFromSearch: false,
            sortOrder: 20,
            hint: '',
            description: '',
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
        },
        {
            name: 'favoriteBeerHall',
            type: 'TO_ONE',
            dataSpecialization: 'SYSTEM',
            confidential: false,
            optional: false,
            label: 'Favorite Beer Hall',
            required: false,
            readOnly: true,
            multiValue: false,
            optionsType: 'Brewery',
            optionsUrl: '/options/Brewery',
            hideFromSearch: false,
            sortOrder: 110,
            hint: '',
            description: '',
            systemRequired: false,
            associatedEntity: {
                entity: 'Brewery',
                entityMetaUrl: '/meta/Brewery?fields=*',
                label: 'Brewery',
            },
        },
    ],
};
const MockNoteMeta = {
    entity: 'Note',
    entityMetaUrl: '/meta/Note?fields=*',
    label: 'Note',
    dateLastModified: '1651869983247',
    fields: [
        {
            name: 'notes.action',
            type: 'SCALAR',
            dataType: 'String',
            maxLength: 30,
            confidential: false,
            optional: true,
            label: 'Action',
            required: true,
            readOnly: false,
            multiValue: false,
            inputType: 'SELECT',
            options: [
                {
                    value: 'Outbound Call',
                    label: 'Outbound Call'
                },
                {
                    value: 'Inbound Call',
                    label: 'Inbound Call'
                },
                {
                    value: 'Left Message',
                    label: 'Left Message'
                },
                {
                    value: 'Email',
                    label: 'Email'
                },
                {
                    value: 'Appointment',
                    label: 'Appointment'
                },
                {
                    value: 'Recruiter Interview',
                    label: 'Recruiter Interview'
                },
                {
                    value: 'Technical Interview',
                    label: 'Technical Interview'
                },
                {
                    value: 'Manager Interview',
                    label: 'Manager Interview'
                },
                {
                    value: 'Reference Check',
                    label: 'Reference Check'
                },
            ],
            defaultValue: 'Outbound Call',
            hideFromSearch: false,
            sortOrder: 40,
            hint: 0,
            description: 0,
            systemRequired: false,
            shouldAddCustomEntityLabel: false
        },
        {
            name: 'notes.commentingPerson',
            type: 'TO_ONE',
            confidential: false,
            optional: false,
            label: 'Author',
            required: false,
            readOnly: false,
            multiValue: false,
            inputType: 'SELECT',
            optionsType: 'CorporateUser',
            optionsUrl: 'options/CorporateUser',
            hideFromSearch: false,
            sortOrder: 20,
            hint: 0,
            description: 0,
            systemRequired: false,
            shouldAddCustomEntityLabel: false,
            associatedEntity: {
                entity: 'Person',
                entityMetaUrl: 'meta/Person?fields=*',
                label: 'Person',
                dateLastModified: 1724848513984,
                fields: [
                    {
                        name: 'id',
                        type: 'ID',
                        dataType: 'Integer',
                        optional: false,
                        label: 'ID'
                    },
                    {
                        name: 'firstName',
                        type: 'SCALAR',
                        dataType: 'String',
                        maxLength: 50,
                        confidential: false,
                        optional: true,
                        label: 'First Name',
                        required: false,
                        readOnly: false,
                        multiValue: false,
                        hideFromSearch: false,
                        systemRequired: false,
                        shouldAddCustomEntityLabel: false
                    },
                    {
                        name: 'lastName',
                        type: 'SCALAR',
                        dataType: 'String',
                        maxLength: 50,
                        confidential: false,
                        optional: true,
                        label: 'Last Name',
                        required: false,
                        readOnly: false,
                        multiValue: false,
                        hideFromSearch: false,
                        systemRequired: false,
                        shouldAddCustomEntityLabel: false
                    }
                ]
            }
        },
        {
            name: 'notes.dateAdded',
            type: 'SCALAR',
            dataType: 'Timestamp',
            dataSpecialization: 'DATETIME',
            confidential: false,
            optional: false,
            label: 'Date Added',
            required: false,
            readOnly: false,
            multiValue: false,
            hideFromSearch: false,
            sortOrder: 10,
            hint: 0,
            description: 0,
            systemRequired: false,
            shouldAddCustomEntityLabel: false
        }
    ],
};

class CustomPickerConditionDef extends AbstractConditionFieldDef {
    constructor() {
        super(...arguments);
        this.defaultOperator = Operator.includeAny;
        this.searchCtrl = new UntypedFormControl();
        /** list of results filtered by search keyword */
        this.remoteResults = new ReplaySubject(1);
        /** Subject that emits when the component has been destroyed. */
        this._onDestroy = new Subject();
        this.http = inject(HttpClient);
    }
    ngOnInit() {
        super.ngOnInit();
        this.searchCtrl.valueChanges
            .pipe(
        // filter((res) => res.length > 2),
        // Time in milliseconds between key events
        debounceTime(500), 
        // If previous query is different from current
        distinctUntilChanged(), takeUntil(this._onDestroy))
            .subscribe((term) => {
            const extra = term.length ? `/autocomplete?query=${term}` : '';
            this.http.get(`https://api.openbrewerydb.org/breweries${extra}`).subscribe((response) => {
                this.remoteResults.next(response);
            });
        });
        this.searchCtrl.setValue('', { emitEvent: true });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: CustomPickerConditionDef, deps: null, target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: CustomPickerConditionDef, isStandalone: false, selector: "custom-picker-condition-def", usesInheritance: true, ngImport: i0, template: `
    <ng-container novoConditionFieldDef>
      <novo-field *novoConditionOperatorsDef="let formGroup" [formGroup]="formGroup">
        <novo-select placeholder="Operator..." formControlName="operator">
          <novo-option value="includeAny">Include Any</novo-option>
          <novo-option value="includeAll">Include All</novo-option>
          <novo-option value="excludeAny">Exclude</novo-option>
        </novo-select>
      </novo-field>
      <novo-field *novoConditionInputDef="let formGroup; fieldMeta as meta" [formGroup]="formGroup">
        <novo-select formControlName="value" placeholder="Select..." [multiple]="true">
          <novo-option>
            <novo-select-search [formControl]="searchCtrl"></novo-select-search>
          </novo-option>
          <novo-option *ngFor="let option of remoteResults | async" [value]="option.id">
            {{ option.name }}
          </novo-option>
        </novo-select>
      </novo-field>
    </ng-container>
  `, isInline: true, dependencies: [{ kind: "directive", type: i1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i1.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { kind: "directive", type: i1.FormControlDirective, selector: "[formControl]", inputs: ["formControl", "disabled", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { kind: "directive", type: i1.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { kind: "directive", type: i1.FormControlName, selector: "[formControlName]", inputs: ["formControlName", "disabled", "ngModel"], outputs: ["ngModelChange"] }, { kind: "directive", type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "component", type: i2$1.NovoSelectElement, selector: "novo-select", inputs: ["disabled", "required", "tabIndex", "id", "name", "placeholder", "readonly", "headerConfig", "position", "overlayWidth", "overlayHeight", "displayIcon", "displayWith", "compareWith", "hideLegacyOptions", "value", "multiple", "options"], outputs: ["onSelect", "selectionChange", "valueChange", "openedChange", "opened", "closed"] }, { kind: "component", type: i2$1.NovoOption, selector: "novo-option", inputs: ["selected", "keepOpen", "novoInert", "value", "disabled"], exportAs: ["novoOption"] }, { kind: "component", type: i2$1.NovoFieldElement, selector: "novo-field", inputs: ["layout", "appearance", "customOverlayOrigin", "width"], outputs: ["valueChanges", "stateChanges"] }, { kind: "component", type: i2$1.NovoSelectSearchComponent, selector: "novo-select-search", inputs: ["name", "placeholderLabel", "type", "noEntriesFoundLabel", "indexAndLengthScreenReaderText", "clearSearchInput", "searching", "disableInitialFocus", "enableClearOnEscapePressed", "allowDeselectDuringFilter", "preventHomeEndKeyPropagation", "disableScrollToActiveOnOptionsChanged", "ariaLabel", "showToggleAllCheckbox", "toggleAllCheckboxChecked", "toggleAllCheckboxIndeterminate", "toggleAllCheckboxTooltipMessage", "toogleAllCheckboxTooltipPosition", "hideClearSearchButton", "alwaysRestoreSelectedOptionsMulti"], outputs: ["toggleAll"] }, { kind: "directive", type: i2$1.NovoConditionOperatorsDef, selector: "[novoConditionOperatorsDef]" }, { kind: "directive", type: i2$1.NovoConditionInputDef, selector: "[novoConditionInputDef]" }, { kind: "directive", type: i2$1.NovoConditionFieldDef, selector: "[novoConditionFieldDef]" }, { kind: "pipe", type: i2.AsyncPipe, name: "async" }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: CustomPickerConditionDef, decorators: [{
            type: Component,
            args: [{
                    selector: 'custom-picker-condition-def',
                    template: `
    <ng-container novoConditionFieldDef>
      <novo-field *novoConditionOperatorsDef="let formGroup" [formGroup]="formGroup">
        <novo-select placeholder="Operator..." formControlName="operator">
          <novo-option value="includeAny">Include Any</novo-option>
          <novo-option value="includeAll">Include All</novo-option>
          <novo-option value="excludeAny">Exclude</novo-option>
        </novo-select>
      </novo-field>
      <novo-field *novoConditionInputDef="let formGroup; fieldMeta as meta" [formGroup]="formGroup">
        <novo-select formControlName="value" placeholder="Select..." [multiple]="true">
          <novo-option>
            <novo-select-search [formControl]="searchCtrl"></novo-select-search>
          </novo-option>
          <novo-option *ngFor="let option of remoteResults | async" [value]="option.id">
            {{ option.name }}
          </novo-option>
        </novo-select>
      </novo-field>
    </ng-container>
  `,
                    encapsulation: ViewEncapsulation.None,
                    changeDetection: ChangeDetectionStrategy.Default,
                    standalone: false
                }]
        }] });
/**
 * @title Just Criteria Example
 */
class JustCriteriaExample {
    constructor(formBuilder, cdr) {
        this.formBuilder = formBuilder;
        this.cdr = cdr;
        this.criteriaBuilder = viewChild(CriteriaBuilderComponent);
        this.config = null;
        this.and = [Conjunction.AND];
        this.andOr = [Conjunction.AND, Conjunction.OR];
        this.andOrNot = [Conjunction.AND, Conjunction.OR, Conjunction.NOT];
        this.addressConfig = {
            radiusEnabled: true,
            radiusUnits: 'miles'
        };
        this.addressRadiusEnabled = false;
        this.addressRadiusEnabledOptions = [
            { label: 'Yes', value: true },
            { label: 'No', value: false },
        ];
        this.useNoteMeta = false;
        this.useNoteMetaOptions = [
            { label: 'True', value: true },
            { label: 'False', value: false }
        ];
        this.hideFirstOperator = true;
        this.hideFirstOperatorOptions = [
            { label: 'True', value: true },
            { label: 'False', value: false }
        ];
        this.canBeEmpty = false;
        this.canBeEmptyOptions = [
            { label: 'True', value: true },
            { label: 'False', value: false }
        ];
        this.editTypeFn = (field) => {
            if (field.optionsType === 'Brewery')
                return 'custom';
            if (field.dataSpecialization === 'DATE') {
                return field.dataSpecialization;
            }
            return (field.inputType || field.dataType || field.type).toLowerCase();
        };
    }
    ngOnInit() {
        this.queryForm = this.formBuilder.group({ criteria: [] });
        this.getFieldConfig(this.useNoteMeta).then((fields) => {
            this.prepopulateForm();
            this.config = { fields };
            this.cdr.detectChanges();
        });
    }
    getFieldConfig(useNoteMeta) {
        const allMetas = useNoteMeta ? [MockCandidateMeta, MockNoteMeta] : [MockCandidateMeta];
        return Promise.all(allMetas).then((metas) => {
            return metas.map((it) => ({
                value: it.entity,
                entity: 'Person',
                label: it.label,
                options: it.fields,
                find: (name) => it.fields.find((f) => f.name === name),
                search: (term) => {
                    return it.fields.filter((f) => f.name.includes(term) || f.label.includes(term));
                },
            }));
        });
    }
    setFieldConfig(useNoteMeta) {
        this.resetQueryForm();
        this.getFieldConfig(useNoteMeta).then((fields) => {
            this.config = { fields };
            this.cdr.detectChanges();
        });
    }
    prepopulateForm(addAdditionalScope = false) {
        const prepopulatedData = [
            {
                $and: [
                    {
                        field: 'id',
                        operator: 'equalTo',
                        scope: 'Candidate',
                        entity: 'Person',
                        value: 123,
                    }, {
                        field: 'availability',
                        operator: 'includeAny',
                        scope: 'Candidate',
                        entity: 'Person',
                        value: ['test'],
                    }, {
                        field: 'customDate1',
                        operator: 'within',
                        scope: 'Candidate',
                        entity: 'Person',
                        value: '-30',
                    }, {
                        field: 'address',
                        operator: 'includeAny',
                        scope: 'Candidate',
                        entity: 'Person',
                        value: null,
                        supportingValue: 5,
                    }, {
                        field: 'status',
                        operator: 'includeAny',
                        scope: 'Candidate',
                        entity: 'Person',
                        value: null,
                    }
                ],
            },
        ];
        const prepopulatedNoteConditions = {
            $not: [
                {
                    field: 'notes.action',
                    operator: 'includeAny',
                    scope: 'Note',
                    value: ['Left Message'],
                }, {
                    field: 'notes.dateAdded',
                    operator: 'within',
                    scope: 'Note',
                    value: '-7',
                },
            ],
        };
        if (addAdditionalScope) {
            prepopulatedData.push(prepopulatedNoteConditions);
        }
        this.setQueryForm(prepopulatedData);
    }
    resetQueryForm(addAdditionalScope = false) {
        this.criteriaBuilder().clearAllConditions();
        this.prepopulateForm(addAdditionalScope);
    }
    setQueryForm(criteria) {
        this.queryForm.setValue({ criteria });
    }
    onSubmit() {
        console.log('Your form data : ', this.queryForm.value);
    }
    resetGroups() {
        this.criteriaBuilder().clearAllConditions();
        this.criteriaBuilder().addConditionGroup();
    }
    addressRadiusEnabledChanged(enabled) {
        this.addressConfig = Object.assign({}, this.addressConfig, { radiusEnabled: enabled });
    }
    addressRadiusUnitsSelected(units) {
        this.addressConfig = Object.assign({}, this.addressConfig, { radiusUnits: units });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: JustCriteriaExample, deps: [{ token: i1.UntypedFormBuilder }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.2.0", version: "19.2.15", type: JustCriteriaExample, isStandalone: false, selector: "just-criteria-example", viewQueries: [{ propertyName: "criteriaBuilder", first: true, predicate: CriteriaBuilderComponent, descendants: true, isSignal: true }], ngImport: i0, template: "<form [formGroup]=\"queryForm\" (ngSubmit)=\"onSubmit()\">\n  <novo-criteria-builder\n    #builder\n    controlName=\"criteria\"\n    [allowedGroupings]=\"mode.value\"\n    [config]=\"config\"\n    [editTypeFn]=\"editTypeFn\"\n    [hideFirstOperator]=\"hideFirstOperator\"\n    [canBeEmpty]=\"canBeEmpty\"\n    [addressConfig]=\"addressConfig\">\n    <custom-picker-condition-def name=\"CUSTOM\"></custom-picker-condition-def>\n  </novo-criteria-builder>\n\n  <novo-row gap=\"md\" justify=\"end\">\n    <button theme=\"primary\" size=\"sm\" *ngIf=\"!useNoteMeta\" (click)=\"builder.addConditionGroup()\">Add a group</button>\n    <button theme=\"secondary\" size=\"sm\" (click)=\"resetGroups()\">Reset</button>\n    <button theme=\"secondary\" size=\"sm\" (click)=\"resetQueryForm(useNoteMeta)\">Repopulate</button>\n  </novo-row>\n</form>\n\n<novo-row align=\"start\" gap=\"xl\" margin=\"xl\">\n  <section>\n    <novo-label>Join Operators</novo-label>\n    <novo-radio-group #mode [value]=\"andOrNot\">\n      <novo-radio name=\"mode\" [value]=\"and\">Only And</novo-radio>\n      <novo-radio name=\"mode\" [value]=\"andOr\">And, Or</novo-radio>\n      <novo-radio name=\"mode\" [value]=\"andOrNot\">And, Or, Not</novo-radio>\n    </novo-radio-group>\n  </section>\n</novo-row>\n\n<novo-row align=\"start\" gap=\"xl\" margin=\"xl\">\n  <section>\n    <novo-label marginRight=\"md\">Add Additional Scope\n      <span tooltip=\"Adding an additional entity scope to the searchable fields will change the behavior when adding a new condition\">\n        <novo-icon>info</novo-icon>\n      </span></novo-label>\n    <novo-tiles [options]=\"useNoteMetaOptions\" [(ngModel)]=\"useNoteMeta\" (onChange)=\"setFieldConfig($event)\"/>\n  </section>\n</novo-row>\n\n<novo-row align=\"start\" gap=\"xl\" margin=\"xl\">\n  <section>\n    <novo-label marginRight=\"md\">Hide First Operator\n      <span tooltip=\"Disabling will display the AND/OR/NOT operator in the first row. Enabling (default) will hide it\">\n        <novo-icon>info</novo-icon>\n      </span></novo-label>\n    <novo-tiles [options]=\"hideFirstOperatorOptions\" [(ngModel)]=\"hideFirstOperator\"/>\n  </section>\n</novo-row>\n\n<novo-row align=\"start\" gap=\"xl\" margin=\"xl\">\n  <section>\n    <novo-label marginRight=\"md\">Can Be Empty\n      <span tooltip=\"Enabling will allow you to delete a row if it is the only row in the criteria builder. Disabling (default) will keep the final row, and will instead clear it out\">\n        <novo-icon>info</novo-icon>\n      </span></novo-label>\n    <novo-tiles [options]=\"canBeEmptyOptions\" [(ngModel)]=\"canBeEmpty\"/>\n  </section>\n</novo-row>\n\n<novo-row align=\"start\" gap=\"xl\" margin=\"xl\">\n  <section>\n    <novo-label marginRight=\"md\">Address Radius\n      <span tooltip=\"Enabling will add a radius option to the full address criteria operator dropdown\">\n        <novo-icon>info</novo-icon>\n      </span>\n    </novo-label>\n    <novo-tiles [options]=\"addressRadiusEnabledOptions\" (onChange)=\"addressRadiusEnabledChanged($event)\"\n                [(ngModel)]=\"addressRadiusEnabled\"/>\n    <novo-row *ngIf=\"addressRadiusEnabled\" align=\"start\" gap=\"xl\" marginLeft=\"xl\">\n      <novo-label margin=\"lg\">Units:</novo-label>\n      <novo-select margin=\"lg\" value=\"miles\" (onSelect)=\"addressRadiusUnitsSelected($event.selected)\">\n        <novo-option value=\"miles\">Miles</novo-option>\n        <novo-option value=\"km\">Km</novo-option>\n      </novo-select>\n    </novo-row>\n  </section>\n</novo-row>\n\n<pre><code>{{ queryForm.value | json }}</code></pre>\n", styles: [""], dependencies: [{ kind: "directive", type: i1.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { kind: "directive", type: i1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i1.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { kind: "directive", type: i1.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "directive", type: i1.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i2$1.NovoButtonElement, selector: "novo-button,button[theme]", inputs: ["color", "side", "size", "theme", "loading", "icon", "secondIcon", "disabled"] }, { kind: "component", type: i2$1.NovoFlexElement, selector: "novo-flex,novo-row", inputs: ["direction", "align", "justify", "wrap", "gap"] }, { kind: "directive", type: i2$1.TooltipDirective, selector: "[tooltip]", inputs: ["tooltip", "tooltipPosition", "tooltipType", "tooltipSize", "tooltipBounce", "tooltipNoAnimate", "tooltipRounded", "tooltipAlways", "tooltipPreline", "removeTooltipArrow", "tooltipAutoPosition", "tooltipIsHTML", "tooltipCloseOnClick", "tooltipOnOverflow", "tooltipActive"] }, { kind: "component", type: i2$1.NovoTilesElement, selector: "novo-tiles", inputs: ["name", "options", "required", "controlDisabled"], outputs: ["onChange", "onSelectedOptionClick", "onDisabledOptionClick"] }, { kind: "component", type: i2$1.NovoRadioElement, selector: "novo-radio", inputs: ["id", "name", "tabindex", "vertical", "label", "button", "theme", "size", "icon", "color", "disabled", "checked", "value"], outputs: ["change", "blur", "focus"] }, { kind: "component", type: i2$1.NovoRadioGroup, selector: "novo-radio-group", inputs: ["id", "tabindex", "errorStateMatcher", "appearance", "value", "name", "disabled", "required", "placeholder"], outputs: ["change", "blur"] }, { kind: "component", type: i2$1.NovoSelectElement, selector: "novo-select", inputs: ["disabled", "required", "tabIndex", "id", "name", "placeholder", "readonly", "headerConfig", "position", "overlayWidth", "overlayHeight", "displayIcon", "displayWith", "compareWith", "hideLegacyOptions", "value", "multiple", "options"], outputs: ["onSelect", "selectionChange", "valueChange", "openedChange", "opened", "closed"] }, { kind: "component", type: i2$1.NovoIconComponent, selector: "novo-icon", inputs: ["raised", "theme", "shape", "color", "size", "smaller", "larger", "alt", "name"] }, { kind: "component", type: i2$1.NovoLabel, selector: "novo-label,[novo-label]", inputs: ["id"] }, { kind: "directive", type: i2$1.MarginDirective, selector: "[m],[margin],[marginTop],[marginRight],[marginBottom],[marginLeft],[marginX],[marginY],[mt],[mr],[mb],[ml],[mx],[my]", inputs: ["margin", "m", "marginLeft", "ml", "marginRight", "mr", "marginTop", "mt", "marginBottom", "mb", "marginX", "mx", "marginY", "my"] }, { kind: "directive", type: i2$1.GapDirective, selector: "[gap]", inputs: ["gap"] }, { kind: "directive", type: i2$1.ThemeColorDirective, selector: "[theme]", inputs: ["theme"] }, { kind: "component", type: i2$1.NovoOption, selector: "novo-option", inputs: ["selected", "keepOpen", "novoInert", "value", "disabled"], exportAs: ["novoOption"] }, { kind: "component", type: i2$1.CriteriaBuilderComponent, selector: "novo-criteria-builder", inputs: ["config", "controlName", "allowedGroupings", "editTypeFn", "addressConfig", "dateConfig", "canBeEmpty", "hideFirstOperator"] }, { kind: "component", type: CustomPickerConditionDef, selector: "custom-picker-condition-def" }, { kind: "pipe", type: i2.JsonPipe, name: "json" }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: JustCriteriaExample, decorators: [{
            type: Component,
            args: [{ selector: 'just-criteria-example', standalone: false, template: "<form [formGroup]=\"queryForm\" (ngSubmit)=\"onSubmit()\">\n  <novo-criteria-builder\n    #builder\n    controlName=\"criteria\"\n    [allowedGroupings]=\"mode.value\"\n    [config]=\"config\"\n    [editTypeFn]=\"editTypeFn\"\n    [hideFirstOperator]=\"hideFirstOperator\"\n    [canBeEmpty]=\"canBeEmpty\"\n    [addressConfig]=\"addressConfig\">\n    <custom-picker-condition-def name=\"CUSTOM\"></custom-picker-condition-def>\n  </novo-criteria-builder>\n\n  <novo-row gap=\"md\" justify=\"end\">\n    <button theme=\"primary\" size=\"sm\" *ngIf=\"!useNoteMeta\" (click)=\"builder.addConditionGroup()\">Add a group</button>\n    <button theme=\"secondary\" size=\"sm\" (click)=\"resetGroups()\">Reset</button>\n    <button theme=\"secondary\" size=\"sm\" (click)=\"resetQueryForm(useNoteMeta)\">Repopulate</button>\n  </novo-row>\n</form>\n\n<novo-row align=\"start\" gap=\"xl\" margin=\"xl\">\n  <section>\n    <novo-label>Join Operators</novo-label>\n    <novo-radio-group #mode [value]=\"andOrNot\">\n      <novo-radio name=\"mode\" [value]=\"and\">Only And</novo-radio>\n      <novo-radio name=\"mode\" [value]=\"andOr\">And, Or</novo-radio>\n      <novo-radio name=\"mode\" [value]=\"andOrNot\">And, Or, Not</novo-radio>\n    </novo-radio-group>\n  </section>\n</novo-row>\n\n<novo-row align=\"start\" gap=\"xl\" margin=\"xl\">\n  <section>\n    <novo-label marginRight=\"md\">Add Additional Scope\n      <span tooltip=\"Adding an additional entity scope to the searchable fields will change the behavior when adding a new condition\">\n        <novo-icon>info</novo-icon>\n      </span></novo-label>\n    <novo-tiles [options]=\"useNoteMetaOptions\" [(ngModel)]=\"useNoteMeta\" (onChange)=\"setFieldConfig($event)\"/>\n  </section>\n</novo-row>\n\n<novo-row align=\"start\" gap=\"xl\" margin=\"xl\">\n  <section>\n    <novo-label marginRight=\"md\">Hide First Operator\n      <span tooltip=\"Disabling will display the AND/OR/NOT operator in the first row. Enabling (default) will hide it\">\n        <novo-icon>info</novo-icon>\n      </span></novo-label>\n    <novo-tiles [options]=\"hideFirstOperatorOptions\" [(ngModel)]=\"hideFirstOperator\"/>\n  </section>\n</novo-row>\n\n<novo-row align=\"start\" gap=\"xl\" margin=\"xl\">\n  <section>\n    <novo-label marginRight=\"md\">Can Be Empty\n      <span tooltip=\"Enabling will allow you to delete a row if it is the only row in the criteria builder. Disabling (default) will keep the final row, and will instead clear it out\">\n        <novo-icon>info</novo-icon>\n      </span></novo-label>\n    <novo-tiles [options]=\"canBeEmptyOptions\" [(ngModel)]=\"canBeEmpty\"/>\n  </section>\n</novo-row>\n\n<novo-row align=\"start\" gap=\"xl\" margin=\"xl\">\n  <section>\n    <novo-label marginRight=\"md\">Address Radius\n      <span tooltip=\"Enabling will add a radius option to the full address criteria operator dropdown\">\n        <novo-icon>info</novo-icon>\n      </span>\n    </novo-label>\n    <novo-tiles [options]=\"addressRadiusEnabledOptions\" (onChange)=\"addressRadiusEnabledChanged($event)\"\n                [(ngModel)]=\"addressRadiusEnabled\"/>\n    <novo-row *ngIf=\"addressRadiusEnabled\" align=\"start\" gap=\"xl\" marginLeft=\"xl\">\n      <novo-label margin=\"lg\">Units:</novo-label>\n      <novo-select margin=\"lg\" value=\"miles\" (onSelect)=\"addressRadiusUnitsSelected($event.selected)\">\n        <novo-option value=\"miles\">Miles</novo-option>\n        <novo-option value=\"km\">Km</novo-option>\n      </novo-select>\n    </novo-row>\n  </section>\n</novo-row>\n\n<pre><code>{{ queryForm.value | json }}</code></pre>\n" }]
        }], ctorParameters: () => [{ type: i1.UntypedFormBuilder }, { type: i0.ChangeDetectorRef }] });

/**
 * @title Search Box Usage
 */
class SearchUsageExample {
    constructor() {
        this.test = 'TEST';
        this.geo = '';
        this.entity = '';
        this.searchResults = new Subject();
        this.searchData = [
            {
                data: {
                    title: 'Central Bank',
                    name: 'Central Bank',
                    email: 'new-bank-inquiries@centralbank.com',
                    phone: '(651) 555-1234',
                    address: { city: 'Washington', state: 'DC' },
                    searchEntity: 'ClientCorporation',
                    type: 'company',
                },
            },
            {
                data: {
                    title: 'Federal Bank',
                    name: 'Federal Bank',
                    email: 'info@federalbank.com',
                    phone: '(545) 555-1212',
                    address: { city: 'Arlington', state: 'VA' },
                    searchEntity: 'ClientCorporation',
                    type: 'company',
                },
            },
            {
                data: {
                    title: 'Aaron Burr',
                    firstName: 'Aaron',
                    lastName: 'Burr',
                    name: 'Aaron Burr',
                    companyName: 'Central Bank',
                    email: 'aburr@centralbank.com',
                    phone: '(333) 555-3434',
                    address: { city: 'Washington', state: 'DC' },
                    status: 'Hold',
                    searchEntity: 'ClientContact',
                    type: 'person',
                },
            },
            {
                data: {
                    title: 'Alexander Hamilton',
                    firstName: 'Alexander',
                    lastName: 'Hamilton',
                    name: 'Alexander Hamilton',
                    companyName: 'Federal Bank',
                    email: 'ahamilton@federalbank.com',
                    phone: '(333) 555-2222',
                    address: { city: 'Arlington', state: 'VA' },
                    status: 'Active',
                    searchEntity: 'ClientContact',
                    type: 'person',
                },
            },
            {
                data: {
                    title: 'Ben Franklin',
                    firstName: 'Ben',
                    lastName: 'Franklin',
                    name: 'Ben Franklin',
                    email: 'bfranklin@gmail.com',
                    phone: '(654) 525-2222',
                    address: { city: 'Boston', state: 'MA' },
                    status: 'Interviewing',
                    searchEntity: 'Candidate',
                    type: 'candidate',
                },
            },
            {
                data: {
                    title: 'Thomas Jefferson',
                    firstName: 'Thomas',
                    lastName: 'Jefferson',
                    name: 'Thomas Jefferson',
                    email: 'tjefferson@usa.com',
                    phone: '(123) 542-1234',
                    address: { city: 'Arlington', state: 'VA' },
                    status: 'New Lead',
                    searchEntity: 'Candidate',
                    type: 'candidate',
                },
            },
        ];
    }
    search(term) {
        this.searchResults.next(this.searchData.map((x) => x.data));
    }
    onSelectMatch(item) {
        this.test = item.name;
    }
    onSelectEntity(item) {
        this.entity = item.data.name;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: SearchUsageExample, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: SearchUsageExample, isStandalone: false, selector: "search-usage-example", ngImport: i0, template: "<novo-search></novo-search>\n\n<novo-search size=\"small\" placeholder=\"Small Search...\"></novo-search>\n\n<novo-search size=\"large\" placeholder=\"Large Search...\"></novo-search>\n\n<novo-search theme=\"positive\" [ngModel]=\"test\" (ngModelChange)=\"search($event)\">\n  <novo-list direction=\"vertical\">\n    <novo-list-item *ngFor=\"let item of searchResults | async\" (click)=\"onSelectMatch(item)\">\n      <item-header>\n        <item-avatar [icon]=\"item.type\"></item-avatar>\n        <item-title>{{item.name}}</item-title>\n      </item-header>\n    </novo-list-item>\n  </novo-list>\n</novo-search>\n\n<novo-search icon=\"location\" color=\"grapefruit\" alwaysOpen=\"true\" [(ngModel)]=\"geo\" displayField=\"formatted_address\" [closeOnSelect]=\"false\" hint=\"Search Google to find your address.\">\n  <google-places-list [(term)]=\"geo\"></google-places-list>\n</novo-search>\n<div>Value is: {{geo}}</div>\n\n<novo-search icon=\"candidate\" color=\"candidate\" alwaysOpen=\"true\" [(ngModel)]=\"entity\">\n  <entity-picker-results [matches]=\"searchData\" (select)=\"onSelectEntity($event)\"></entity-picker-results>\n</novo-search>", styles: [":host{display:flex;flex-flow:column;gap:2rem}\n"], dependencies: [{ kind: "directive", type: i1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i1.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "directive", type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "component", type: i2$1.NovoListElement, selector: "novo-list", inputs: ["theme", "direction"] }, { kind: "component", type: i2$1.NovoListItemElement, selector: "novo-list-item, a[list-item], button[list-item]" }, { kind: "component", type: i2$1.NovoItemAvatarElement, selector: "item-avatar, novo-item-avatar", inputs: ["icon", "color"] }, { kind: "component", type: i2$1.NovoItemTitleElement, selector: "item-title, novo-item-title" }, { kind: "component", type: i2$1.NovoItemHeaderElement, selector: "item-header, novo-item-header" }, { kind: "component", type: i2$1.EntityPickerResults, selector: "entity-picker-results", outputs: ["select"] }, { kind: "component", type: i2$1.NovoSearchBoxElement, selector: "novo-search", inputs: ["name", "icon", "position", "placeholder", "alwaysOpen", "theme", "color", "closeOnSelect", "displayField", "displayValue", "hint", "keepOpen", "hasBackdrop", "allowPropagation", "overrideElement"], outputs: ["searchChanged", "applySearch"] }, { kind: "component", type: i2$1.PlacesListComponent, selector: "google-places-list", inputs: ["userSettings"], outputs: ["termChange", "select"] }, { kind: "directive", type: i2$1.ThemeColorDirective, selector: "[theme]", inputs: ["theme"] }, { kind: "pipe", type: i2.AsyncPipe, name: "async" }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: SearchUsageExample, decorators: [{
            type: Component,
            args: [{ selector: 'search-usage-example', standalone: false, template: "<novo-search></novo-search>\n\n<novo-search size=\"small\" placeholder=\"Small Search...\"></novo-search>\n\n<novo-search size=\"large\" placeholder=\"Large Search...\"></novo-search>\n\n<novo-search theme=\"positive\" [ngModel]=\"test\" (ngModelChange)=\"search($event)\">\n  <novo-list direction=\"vertical\">\n    <novo-list-item *ngFor=\"let item of searchResults | async\" (click)=\"onSelectMatch(item)\">\n      <item-header>\n        <item-avatar [icon]=\"item.type\"></item-avatar>\n        <item-title>{{item.name}}</item-title>\n      </item-header>\n    </novo-list-item>\n  </novo-list>\n</novo-search>\n\n<novo-search icon=\"location\" color=\"grapefruit\" alwaysOpen=\"true\" [(ngModel)]=\"geo\" displayField=\"formatted_address\" [closeOnSelect]=\"false\" hint=\"Search Google to find your address.\">\n  <google-places-list [(term)]=\"geo\"></google-places-list>\n</novo-search>\n<div>Value is: {{geo}}</div>\n\n<novo-search icon=\"candidate\" color=\"candidate\" alwaysOpen=\"true\" [(ngModel)]=\"entity\">\n  <entity-picker-results [matches]=\"searchData\" (select)=\"onSelectEntity($event)\"></entity-picker-results>\n</novo-search>", styles: [":host{display:flex;flex-flow:column;gap:2rem}\n"] }]
        }] });

/**
 * @title Basic Slide Example
 */
class BasicSlideExample {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: BasicSlideExample, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: BasicSlideExample, isStandalone: false, selector: "basic-slide-example", ngImport: i0, template: "<novo-slider [slides]=\"2\">\n    <div slide=\"1\">\n        SLIDE #1\n    </div>\n    <div slide=\"2\">\n        SLIDE #2\n    </div>\n</novo-slider>\n", styles: [""], dependencies: [{ kind: "component", type: i2$1.NovoSliderElement, selector: "novo-slider", inputs: ["slides"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: BasicSlideExample, decorators: [{
            type: Component,
            args: [{ selector: 'basic-slide-example', standalone: false, template: "<novo-slider [slides]=\"2\">\n    <div slide=\"1\">\n        SLIDE #1\n    </div>\n    <div slide=\"2\">\n        SLIDE #2\n    </div>\n</novo-slider>\n" }]
        }] });

/**
 * @title Switch Usage Example
 */
class SwitchUsageExample {
    constructor() {
        this.toggleCount = 0;
        this.checked = true;
    }
    increment() {
        this.toggleCount++;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: SwitchUsageExample, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: SwitchUsageExample, isStandalone: false, selector: "switch-usage-example", ngImport: i0, template: "<label>\n  Toggled\n  <span>{{checked}}</span>\n</label>\n<novo-switch [(ngModel)]=\"checked\" (onChange)=\"increment()\"></novo-switch>\n<novo-switch [(ngModel)]=\"checked\" theme=\"grapefruit\"></novo-switch>\n<novo-switch [(ngModel)]=\"checked\" disabled>THIS IS DISABLED</novo-switch>", styles: [""], dependencies: [{ kind: "directive", type: i1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i1.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "component", type: i2$1.NovoSwitchElement, selector: "novo-switch", inputs: ["theme", "icons", "disabled"], outputs: ["onChange"] }, { kind: "directive", type: i2$1.ThemeColorDirective, selector: "[theme]", inputs: ["theme"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: SwitchUsageExample, decorators: [{
            type: Component,
            args: [{ selector: 'switch-usage-example', standalone: false, template: "<label>\n  Toggled\n  <span>{{checked}}</span>\n</label>\n<novo-switch [(ngModel)]=\"checked\" (onChange)=\"increment()\"></novo-switch>\n<novo-switch [(ngModel)]=\"checked\" theme=\"grapefruit\"></novo-switch>\n<novo-switch [(ngModel)]=\"checked\" disabled>THIS IS DISABLED</novo-switch>" }]
        }] });

/**
 * @title Tabbed Group Picker - Basic Example
 */
class TabbedGroupPickerNoSelectionExample {
    constructor() {
        this.getActions = () => ['Run', 'Jump', 'Swim', 'Climb', 'Walk', 'Fly'].map((name, index) => ({
            name,
            actionId: index + 1
        }));
        this.actionsTab = {
            typeName: 'actions',
            typeLabel: 'Actions',
            valueField: 'actionId',
            labelField: 'name',
            data: this.getActions(),
        };
        this.example_tab = [
            this.actionsTab
        ];
        this.example_buttonConfig = {
            theme: 'select',
            side: 'right',
            icon: 'collapse',
            label: 'Open action activation window',
            selector: 'buttonConfig',
        };
    }
    onActivation(selectedData) {
        this.lastSelection = selectedData.name;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: TabbedGroupPickerNoSelectionExample, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: TabbedGroupPickerNoSelectionExample, isStandalone: false, selector: "tabbed-group-picker-no-selection-example", ngImport: i0, template: "<div class=\"tabbed-group-picker-example\">\n  <novo-tabbed-group-picker\n    [tabs]=\"example_tab\"\n    [selectionEnabled]=\"false\"\n    [buttonConfig]=\"example_buttonConfig\"\n    (activation)=\"onActivation($event)\"\n  ></novo-tabbed-group-picker>\n  <div class=\"selected-data-wrapper\">\n    <h6>Last selection:</h6>\n    <div>{{ lastSelection }}</div>\n  </div>\n</div>\n", styles: [".tabbed-group-picker-example{display:flex;justify-content:space-between}.tabbed-group-picker-example novo-tabbed-group-picker{max-width:40%}.tabbed-group-picker-example .selected-data-wrapper{width:40%}\n"], dependencies: [{ kind: "component", type: i2$1.NovoTabbedGroupPickerElement, selector: "novo-tabbed-group-picker", inputs: ["buttonConfig", "tabs", "quickSelectConfig", "showFooter", "selectionEnabled"], outputs: ["activation", "selectionChange", "applyChange", "cancelChange"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: TabbedGroupPickerNoSelectionExample, decorators: [{
            type: Component,
            args: [{ selector: 'tabbed-group-picker-no-selection-example', standalone: false, template: "<div class=\"tabbed-group-picker-example\">\n  <novo-tabbed-group-picker\n    [tabs]=\"example_tab\"\n    [selectionEnabled]=\"false\"\n    [buttonConfig]=\"example_buttonConfig\"\n    (activation)=\"onActivation($event)\"\n  ></novo-tabbed-group-picker>\n  <div class=\"selected-data-wrapper\">\n    <h6>Last selection:</h6>\n    <div>{{ lastSelection }}</div>\n  </div>\n</div>\n", styles: [".tabbed-group-picker-example{display:flex;justify-content:space-between}.tabbed-group-picker-example novo-tabbed-group-picker{max-width:40%}.tabbed-group-picker-example .selected-data-wrapper{width:40%}\n"] }]
        }] });

/**
 * @title Tabbed Group Picker - Basic Example
 */
class TabbedGroupPickerBasicExample {
    constructor() {
        this.getAnimals = () => ['Dog', 'Cat', 'Mouse', 'Horse', 'Cow', 'Chicken', 'Pig', 'Sheep', 'Goat', 'Goose'].map((name, index) => ({
            name,
            animalId: index + 1,
        }));
        this.getPlaces = () => [
            ['Roma', 'Rome'],
            ['Firenze', 'Florence'],
            ['Munchen', 'Munich'],
            ['Paris', 'Paris'],
            ['Sevilla', 'Seville'],
            ['Athinai', 'Athens'],
        ].map(([localName, englishName]) => ({ localName, englishName }));
        this.getColors = () => [
            ['255,0,0', 'Red'],
            ['0,255,0', 'Green'],
            ['0,0,255', 'Blue'],
            ['0,0,0', 'Black'],
            ['255,255,255', 'White'],
        ].map(([rgb, colorName]) => ({ rgb, colorName }));
        this.animalTab = {
            typeName: 'animals',
            typeLabel: 'Animals',
            valueField: 'animalId',
            labelField: 'name',
            data: this.getAnimals(),
        };
        this.example_tab = [
            this.animalTab,
            {
                typeName: 'places',
                typeLabel: 'Places',
                valueField: 'localName',
                labelField: 'englishName',
                data: this.getPlaces(),
            },
            {
                typeName: 'colors',
                typeLabel: 'Colors',
                valueField: 'rgb',
                labelField: 'colorName',
                data: this.getColors(),
            },
        ];
        this.buttonLabel = 'Nothing Selected';
        this.example_buttonConfig = {
            theme: 'select',
            side: 'right',
            icon: 'collapse',
            label: this.buttonLabel,
            selector: 'buttonConfig',
        };
        this.selectedAnimals = [];
        this.selectedPlaces = [];
        this.selectedColors = [];
    }
    onSelectionChange(selectedData) {
        this.selectedAnimals = selectedData.find(({ typeName }) => typeName === 'animals').data.map(({ animalId }) => animalId);
        this.selectedPlaces = selectedData.find(({ typeName }) => typeName === 'places').data.map(({ localName }) => localName);
        this.selectedColors = selectedData.find(({ typeName }) => typeName === 'colors').data.map(({ rgb }) => rgb);
        this.example_buttonConfig.label = this.buildButtonLabel();
    }
    buildButtonLabel() {
        const labelParts = [];
        this.selectedAnimals.length ? labelParts.push(`Animals (${this.selectedAnimals.length})`) : '';
        this.selectedPlaces.length ? labelParts.push(`Places (${this.selectedPlaces.length})`) : '';
        this.selectedColors.length ? labelParts.push(`Colors (${this.selectedColors.length})`) : '';
        return labelParts.join(', ') || 'Nothing Selected';
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: TabbedGroupPickerBasicExample, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: TabbedGroupPickerBasicExample, isStandalone: false, selector: "tabbed-group-picker-basic-example", ngImport: i0, template: "<div class=\"tabbed-group-picker-example\">\n  <novo-tabbed-group-picker\n    [tabs]=\"example_tab\"\n    [buttonConfig]=\"example_buttonConfig\"\n    (selectionChange)=\"onSelectionChange($event)\"\n  ></novo-tabbed-group-picker>\n  <div class=\"selected-data-wrapper\">\n    <h6>Selected Animal IDs:</h6>\n    <div>{{ selectedAnimals.join(', ') }}</div>\n    <h6>Selected Local Place Names:</h6>\n    <div>{{ selectedPlaces.join(', ') }}</div>\n    <h6>Selected Colors:</h6>\n    <div>{{ selectedColors.join(' | ') }}</div>\n  </div>\n</div>\n", styles: [".tabbed-group-picker-example{display:flex;justify-content:space-between}.tabbed-group-picker-example novo-tabbed-group-picker{max-width:40%}.tabbed-group-picker-example .selected-data-wrapper{width:40%}\n"], dependencies: [{ kind: "component", type: i2$1.NovoTabbedGroupPickerElement, selector: "novo-tabbed-group-picker", inputs: ["buttonConfig", "tabs", "quickSelectConfig", "showFooter", "selectionEnabled"], outputs: ["activation", "selectionChange", "applyChange", "cancelChange"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: TabbedGroupPickerBasicExample, decorators: [{
            type: Component,
            args: [{ selector: 'tabbed-group-picker-basic-example', standalone: false, template: "<div class=\"tabbed-group-picker-example\">\n  <novo-tabbed-group-picker\n    [tabs]=\"example_tab\"\n    [buttonConfig]=\"example_buttonConfig\"\n    (selectionChange)=\"onSelectionChange($event)\"\n  ></novo-tabbed-group-picker>\n  <div class=\"selected-data-wrapper\">\n    <h6>Selected Animal IDs:</h6>\n    <div>{{ selectedAnimals.join(', ') }}</div>\n    <h6>Selected Local Place Names:</h6>\n    <div>{{ selectedPlaces.join(', ') }}</div>\n    <h6>Selected Colors:</h6>\n    <div>{{ selectedColors.join(' | ') }}</div>\n  </div>\n</div>\n", styles: [".tabbed-group-picker-example{display:flex;justify-content:space-between}.tabbed-group-picker-example novo-tabbed-group-picker{max-width:40%}.tabbed-group-picker-example .selected-data-wrapper{width:40%}\n"] }]
        }] });

/**
 * @title Tabbed Group Picker - Big Groups Example
 */
class TabbedGroupPickerBigGroupsExample {
    constructor() {
        this.example_tab = [
            {
                typeName: 'integers',
                typeLabel: 'Integers',
                valueField: 'value',
                labelField: 'label',
                data: Array(2000)
                    .fill(0)
                    .map((value, index) => index + 1)
                    .map((value) => ({ value, label: String(value) })),
            },
            {
                typeName: 'divisibles',
                typeLabel: 'Divisible By',
                valueField: 'v',
                labelField: 'l',
                childTypeName: 'integers',
                data: Array(100)
                    .fill(0)
                    .map((v, i) => i + 1)
                    .map((v) => ({
                    v,
                    l: `Divisible By ${v}`,
                    children: Array(2000)
                        .fill(0)
                        .map((value, index) => index + 1)
                        .filter((number) => number % v === 0)
                        .map((child) => ({ value: child, label: String(child) })),
                })),
            },
            {
                typeName: 'prime factorization',
                typeLabel: 'Prime Factors',
                valueField: 'v',
                labelField: 'l',
                childTypeName: 'integers',
                data: Array(100)
                    .fill(0)
                    .map((v, i) => i + 1990)
                    .map((parent) => ({
                    v: parent,
                    l: `Prime Factors of ${parent}`,
                    children: Array(2000)
                        .fill(0)
                        .map((value, index) => index + 1)
                        .filter((child) => parent % child === 0 && this.isPrime(child))
                        .map((child) => ({ value: child, label: String(child) })),
                })),
            },
        ];
        this.buttonLabel = 'Nothing Selected';
        this.example_buttonConfig = {
            theme: 'select',
            side: 'right',
            icon: 'collapse',
            label: this.buttonLabel,
            selector: 'buttonConfig',
        };
        this.selectedPrimeFactorizations = [];
        this.selectedDivisibles = [];
        this.selectedIntegers = [];
    }
    isPrime(number) {
        const squareRoot = Math.ceil(Math.sqrt(number));
        return !Array(squareRoot)
            .fill(0)
            .map((value, index) => index + 2)
            .some((divisor) => number % divisor === 0);
    }
    onSelectionChange(selectedData) {
        this.selectedIntegers = selectedData.find(({ typeName }) => typeName === 'integers').data.map(({ value }) => value);
        this.selectedDivisibles = selectedData.find(({ typeName }) => typeName === 'divisibles').data.map(({ v }) => v);
        this.selectedPrimeFactorizations = selectedData.find(({ typeName }) => typeName === 'prime factorization').data.map(({ v }) => v);
        this.example_buttonConfig.label = this.buildButtonLabel();
    }
    buildButtonLabel() {
        return this.selectedIntegers.length ? `Integers (${this.selectedIntegers.length})` : 'Nothing Selected';
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: TabbedGroupPickerBigGroupsExample, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: TabbedGroupPickerBigGroupsExample, isStandalone: false, selector: "tabbed-group-picker-big-groups-example", ngImport: i0, template: "<div class=\"tabbed-group-picker-example\">\n  <novo-tabbed-group-picker\n    [tabs]=\"example_tab\"\n    [buttonConfig]=\"example_buttonConfig\"\n    (selectionChange)=\"onSelectionChange($event)\"\n  ></novo-tabbed-group-picker>\n  <div class=\"selected-data-wrapper\">\n    <h6>Selected Integers:</h6>\n    <div>{{ selectedIntegers.join(', ') }}</div>\n    <h6>Selected Divisibles:</h6>\n    <div>{{ selectedDivisibles.join(', ') }}</div>\n    <h6>Selected Prime Factorizations:</h6>\n    <div>{{ selectedPrimeFactorizations.join(', ') }}</div>\n  </div>\n</div>\n", styles: [".tabbed-group-picker-example{display:flex;justify-content:space-between}.tabbed-group-picker-example novo-tabbed-group-picker{max-width:40%}.tabbed-group-picker-example .selected-data-wrapper{width:40%}\n"], dependencies: [{ kind: "component", type: i2$1.NovoTabbedGroupPickerElement, selector: "novo-tabbed-group-picker", inputs: ["buttonConfig", "tabs", "quickSelectConfig", "showFooter", "selectionEnabled"], outputs: ["activation", "selectionChange", "applyChange", "cancelChange"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: TabbedGroupPickerBigGroupsExample, decorators: [{
            type: Component,
            args: [{ selector: 'tabbed-group-picker-big-groups-example', standalone: false, template: "<div class=\"tabbed-group-picker-example\">\n  <novo-tabbed-group-picker\n    [tabs]=\"example_tab\"\n    [buttonConfig]=\"example_buttonConfig\"\n    (selectionChange)=\"onSelectionChange($event)\"\n  ></novo-tabbed-group-picker>\n  <div class=\"selected-data-wrapper\">\n    <h6>Selected Integers:</h6>\n    <div>{{ selectedIntegers.join(', ') }}</div>\n    <h6>Selected Divisibles:</h6>\n    <div>{{ selectedDivisibles.join(', ') }}</div>\n    <h6>Selected Prime Factorizations:</h6>\n    <div>{{ selectedPrimeFactorizations.join(', ') }}</div>\n  </div>\n</div>\n", styles: [".tabbed-group-picker-example{display:flex;justify-content:space-between}.tabbed-group-picker-example novo-tabbed-group-picker{max-width:40%}.tabbed-group-picker-example .selected-data-wrapper{width:40%}\n"] }]
        }] });

/**
 * @title Tabbed Group Picker - Footer Example
 */
class TabbedGroupPickerFooterExample {
    constructor() {
        this.getAnimals = () => ['Dog', 'Cat', 'Mouse', 'Horse', 'Cow', 'Chicken', 'Pig', 'Sheep', 'Goat', 'Goose'].map((name, index) => ({
            name,
            animalId: index + 1,
        }));
        this.getAnimalCategories = () => {
            const animals = this.getAnimals();
            const birds = ['Chicken', 'Goose'].map((name) => animals.find((animal) => animal.name === name));
            const livestock = ['Cow', 'Pig', 'Sheep', 'Goat'].map((name) => animals.find((animal) => animal.name === name));
            return [
                {
                    name: 'Birds',
                    groupId: 1,
                    children: birds,
                },
                {
                    name: 'Livestock',
                    groupId: 2,
                    children: livestock,
                },
            ];
        };
        this.example_tab = [
            {
                typeName: 'animals',
                typeLabel: 'Animals',
                valueField: 'animalId',
                labelField: 'name',
                data: this.getAnimals(),
            },
            {
                typeName: 'animalCategories',
                typeLabel: 'Animal Categories',
                valueField: 'groupId',
                labelField: 'name',
                childTypeName: 'animals',
                data: this.getAnimalCategories(),
            },
        ];
        this.example_quickSelectConfig = {
            label: 'Quick Select',
            items: [
                {
                    childTypeName: 'animals',
                    children: [2],
                    label: 'Pure Evil',
                },
                {
                    childTypeName: 'animals',
                    children: [1, 6, 9],
                    label: 'My Pets',
                },
                {
                    childTypeName: 'animals',
                    all: true,
                    label: 'All Animals',
                },
            ],
        };
        this.buttonLabel = 'Nothing Selected';
        this.example_buttonConfig = {
            theme: 'select',
            side: 'right',
            icon: 'collapse',
            label: this.buttonLabel,
            selector: 'buttonConfig',
        };
        this.selectedAnimals = [];
        this.selectedAnimalCategories = [];
    }
    onSelectionChange(selectedData) {
        this.selectedAnimals = selectedData.find(({ typeName }) => typeName === 'animals').data.map(({ animalId }) => animalId);
        this.selectedAnimalCategories = selectedData.find(({ typeName }) => typeName === 'animalCategories').data.map(({ groupId }) => groupId);
        this.example_buttonConfig.label = this.buildButtonLabel();
    }
    onCancelChange([animalsTab, animalCategoriesTab]) {
        this.selectedAnimals = animalsTab.data.filter((animal) => animal.selected).map(({ animalId }) => animalId);
        this.selectedAnimalCategories = animalCategoriesTab.data.filter((group) => group.selected).map(({ groupId }) => groupId);
        this.example_buttonConfig.label = this.buildButtonLabel();
    }
    buildButtonLabel() {
        return this.selectedAnimals.length ? `Animals (${this.selectedAnimals.length})` : 'Nothing Selected';
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: TabbedGroupPickerFooterExample, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: TabbedGroupPickerFooterExample, isStandalone: false, selector: "tabbed-group-picker-footer-example", ngImport: i0, template: "<div class=\"tabbed-group-picker-example\">\n  <novo-tabbed-group-picker\n    [tabs]=\"example_tab\"\n    [quickSelectConfig]=\"example_quickSelectConfig\"\n    [buttonConfig]=\"example_buttonConfig\"\n    (selectionChange)=\"onSelectionChange($event)\"\n    (cancelChange)=\"onCancelChange($event)\"\n    [showFooter]=\"true\"\n  ></novo-tabbed-group-picker>\n  <div class=\"selected-data-wrapper\">\n    <h6>Selected Animal IDs:</h6>\n    <div>{{ selectedAnimals.join(', ') }}</div>\n    <h6>Selected Animal Category IDs:</h6>\n    <div>{{ selectedAnimalCategories.join(', ') }}</div>\n  </div>\n</div>\n", styles: [".tabbed-group-picker-example{display:flex;justify-content:space-between}.tabbed-group-picker-example novo-tabbed-group-picker{max-width:40%}.tabbed-group-picker-example .selected-data-wrapper{width:40%}\n"], dependencies: [{ kind: "component", type: i2$1.NovoTabbedGroupPickerElement, selector: "novo-tabbed-group-picker", inputs: ["buttonConfig", "tabs", "quickSelectConfig", "showFooter", "selectionEnabled"], outputs: ["activation", "selectionChange", "applyChange", "cancelChange"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: TabbedGroupPickerFooterExample, decorators: [{
            type: Component,
            args: [{ selector: 'tabbed-group-picker-footer-example', standalone: false, template: "<div class=\"tabbed-group-picker-example\">\n  <novo-tabbed-group-picker\n    [tabs]=\"example_tab\"\n    [quickSelectConfig]=\"example_quickSelectConfig\"\n    [buttonConfig]=\"example_buttonConfig\"\n    (selectionChange)=\"onSelectionChange($event)\"\n    (cancelChange)=\"onCancelChange($event)\"\n    [showFooter]=\"true\"\n  ></novo-tabbed-group-picker>\n  <div class=\"selected-data-wrapper\">\n    <h6>Selected Animal IDs:</h6>\n    <div>{{ selectedAnimals.join(', ') }}</div>\n    <h6>Selected Animal Category IDs:</h6>\n    <div>{{ selectedAnimalCategories.join(', ') }}</div>\n  </div>\n</div>\n", styles: [".tabbed-group-picker-example{display:flex;justify-content:space-between}.tabbed-group-picker-example novo-tabbed-group-picker{max-width:40%}.tabbed-group-picker-example .selected-data-wrapper{width:40%}\n"] }]
        }] });

/**
 * @title Tabbed Group Picker - Groups Example
 */
class TabbedGroupPickerGroupsExample {
    constructor() {
        this.getAnimals = () => ['Dog', 'Cat', 'Mouse', 'Horse', 'Cow', 'Chicken', 'Pig', 'Sheep', 'Goat', 'Goose'].map((name, index) => ({
            name,
            animalId: index + 1,
        }));
        this.getAnimalCategories = () => {
            const animals = this.getAnimals();
            const birds = ['Chicken', 'Goose'].map((name) => animals.find((animal) => animal.name === name));
            const livestock = ['Cow', 'Pig', 'Sheep', 'Goat'].map((name) => animals.find((animal) => animal.name === name));
            return [
                {
                    name: 'Birds',
                    groupId: 1,
                    children: birds,
                },
                {
                    name: 'Livestock',
                    groupId: 2,
                    children: livestock,
                },
            ];
        };
        this.example_tab = [
            {
                typeName: 'animals',
                typeLabel: 'Animals',
                valueField: 'animalId',
                labelField: 'name',
                data: this.getAnimals(),
            },
            {
                typeName: 'animalCategories',
                typeLabel: 'Animal Categories',
                valueField: 'groupId',
                labelField: 'name',
                childTypeName: 'animals',
                data: this.getAnimalCategories(),
            },
        ];
        this.example_quickSelectConfig = {
            label: 'Quick Select',
            items: [
                {
                    childTypeName: 'animals',
                    children: [2],
                    label: 'Pure Evil',
                },
                {
                    childTypeName: 'animals',
                    children: [1, 6, 9],
                    label: 'My Pets',
                },
                {
                    childTypeName: 'animals',
                    all: true,
                    label: 'All Animals',
                },
            ],
        };
        this.buttonLabel = 'Nothing Selected';
        this.example_buttonConfig = {
            theme: 'select',
            side: 'right',
            icon: 'collapse',
            label: this.buttonLabel,
            selector: 'buttonConfig',
        };
        this.selectedAnimals = [];
        this.selectedAnimalCategories = [];
    }
    onSelectionChange(selectedData) {
        this.selectedAnimals = selectedData.find(({ typeName }) => typeName === 'animals').data.map(({ animalId }) => animalId);
        this.selectedAnimalCategories = selectedData.find(({ typeName }) => typeName === 'animalCategories').data.map(({ groupId }) => groupId);
        this.example_buttonConfig.label = this.buildButtonLabel();
    }
    buildButtonLabel() {
        return this.selectedAnimals.length ? `Animals (${this.selectedAnimals.length})` : 'Nothing Selected';
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: TabbedGroupPickerGroupsExample, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: TabbedGroupPickerGroupsExample, isStandalone: false, selector: "tabbed-group-picker-groups-example", ngImport: i0, template: "<div class=\"tabbed-group-picker-example\">\n  <novo-tabbed-group-picker\n    [tabs]=\"example_tab\"\n    [quickSelectConfig]=\"example_quickSelectConfig\"\n    [buttonConfig]=\"example_buttonConfig\"\n    (selectionChange)=\"onSelectionChange($event)\"\n  ></novo-tabbed-group-picker>\n  <div class=\"selected-data-wrapper\">\n    <h6>Selected Animal IDs:</h6>\n    <div>{{ selectedAnimals.join(', ') }}</div>\n    <h6>Selected Animal Category IDs:</h6>\n    <div>{{ selectedAnimalCategories.join(', ') }}</div>\n  </div>\n</div>\n", styles: [".tabbed-group-picker-example{display:flex;justify-content:space-between}.tabbed-group-picker-example novo-tabbed-group-picker{max-width:40%}.tabbed-group-picker-example .selected-data-wrapper{width:40%}\n"], dependencies: [{ kind: "component", type: i2$1.NovoTabbedGroupPickerElement, selector: "novo-tabbed-group-picker", inputs: ["buttonConfig", "tabs", "quickSelectConfig", "showFooter", "selectionEnabled"], outputs: ["activation", "selectionChange", "applyChange", "cancelChange"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: TabbedGroupPickerGroupsExample, decorators: [{
            type: Component,
            args: [{ selector: 'tabbed-group-picker-groups-example', standalone: false, template: "<div class=\"tabbed-group-picker-example\">\n  <novo-tabbed-group-picker\n    [tabs]=\"example_tab\"\n    [quickSelectConfig]=\"example_quickSelectConfig\"\n    [buttonConfig]=\"example_buttonConfig\"\n    (selectionChange)=\"onSelectionChange($event)\"\n  ></novo-tabbed-group-picker>\n  <div class=\"selected-data-wrapper\">\n    <h6>Selected Animal IDs:</h6>\n    <div>{{ selectedAnimals.join(', ') }}</div>\n    <h6>Selected Animal Category IDs:</h6>\n    <div>{{ selectedAnimalCategories.join(', ') }}</div>\n  </div>\n</div>\n", styles: [".tabbed-group-picker-example{display:flex;justify-content:space-between}.tabbed-group-picker-example novo-tabbed-group-picker{max-width:40%}.tabbed-group-picker-example .selected-data-wrapper{width:40%}\n"] }]
        }] });

/**
 * @title Tabbed Group Picker - Quick Select Example
 */
class TabbedGroupPickerQuickSelectExample {
    constructor() {
        this.getAnimals = () => ['Dog', 'Cat', 'Mouse', 'Horse', 'Cow', 'Chicken', 'Pig', 'Sheep', 'Goat', 'Goose'].map((name, index) => ({
            name,
            animalId: index + 1,
        }));
        this.example_tab = [
            {
                typeName: 'animals',
                typeLabel: 'Animals',
                valueField: 'animalId',
                labelField: 'name',
                data: this.getAnimals(),
            },
        ];
        this.example_quickSelectConfig = {
            label: 'Quick Select',
            items: [
                {
                    childTypeName: 'animals',
                    children: [2],
                    label: 'Pure Evil',
                },
                {
                    childTypeName: 'animals',
                    children: [1, 6, 9],
                    label: 'My Pets',
                },
                {
                    childTypeName: 'animals',
                    all: true,
                    label: 'All Animals',
                },
            ],
        };
        this.buttonLabel = 'Nothing Selected';
        this.example_buttonConfig = {
            theme: 'select',
            side: 'right',
            icon: 'collapse',
            label: this.buttonLabel,
            selector: 'buttonConfig',
        };
        this.selectedAnimals = [];
    }
    onSelectionChange(selectedData) {
        this.selectedAnimals = selectedData.find(({ typeName }) => typeName === 'animals').data.map(({ animalId }) => animalId);
        this.example_buttonConfig.label = this.buildButtonLabel();
    }
    buildButtonLabel() {
        return this.selectedAnimals.length ? `Animals (${this.selectedAnimals.length})` : 'Nothing Selected';
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: TabbedGroupPickerQuickSelectExample, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: TabbedGroupPickerQuickSelectExample, isStandalone: false, selector: "tabbed-group-picker-quick-select-example", ngImport: i0, template: "<div class=\"tabbed-group-picker-example\">\n  <novo-tabbed-group-picker\n    [tabs]=\"example_tab\"\n    [quickSelectConfig]=\"example_quickSelectConfig\"\n    [buttonConfig]=\"example_buttonConfig\"\n    (selectionChange)=\"onSelectionChange($event)\"\n  ></novo-tabbed-group-picker>\n  <div class=\"selected-data-wrapper\">\n    <h6>Selected Animal IDs:</h6>\n    <div>{{ selectedAnimals.join(', ') }}</div>\n  </div>\n</div>\n", styles: [".tabbed-group-picker-example{display:flex;justify-content:space-between}.tabbed-group-picker-example novo-tabbed-group-picker{max-width:40%}.tabbed-group-picker-example .selected-data-wrapper{width:40%}\n"], dependencies: [{ kind: "component", type: i2$1.NovoTabbedGroupPickerElement, selector: "novo-tabbed-group-picker", inputs: ["buttonConfig", "tabs", "quickSelectConfig", "showFooter", "selectionEnabled"], outputs: ["activation", "selectionChange", "applyChange", "cancelChange"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: TabbedGroupPickerQuickSelectExample, decorators: [{
            type: Component,
            args: [{ selector: 'tabbed-group-picker-quick-select-example', standalone: false, template: "<div class=\"tabbed-group-picker-example\">\n  <novo-tabbed-group-picker\n    [tabs]=\"example_tab\"\n    [quickSelectConfig]=\"example_quickSelectConfig\"\n    [buttonConfig]=\"example_buttonConfig\"\n    (selectionChange)=\"onSelectionChange($event)\"\n  ></novo-tabbed-group-picker>\n  <div class=\"selected-data-wrapper\">\n    <h6>Selected Animal IDs:</h6>\n    <div>{{ selectedAnimals.join(', ') }}</div>\n  </div>\n</div>\n", styles: [".tabbed-group-picker-example{display:flex;justify-content:space-between}.tabbed-group-picker-example novo-tabbed-group-picker{max-width:40%}.tabbed-group-picker-example .selected-data-wrapper{width:40%}\n"] }]
        }] });

/**
 * @title Basic Tip Well Example
 */
class BasicTipWellExample {
    constructor() {
        this.demoTip = 'Sed sodales ligula et fermentum bibendum. Aliquam tincidunt sagittis leo eget auctor. Fusce eu sagittis metus, ut viverra magna. Mauris mollis nisl nec libero tincidunt posuere.';
    }
    clearLocalStorage() {
        localStorage.removeItem('novo-tw_Demo');
        location.reload();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: BasicTipWellExample, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: BasicTipWellExample, isStandalone: false, selector: "basic-tip-well-example", ngImport: i0, template: "<novo-tip-well name=\"Demo\" [tip]=\"demoTip\"></novo-tip-well>\n\n<p>Did you hide the TipWell?</p>\n\n<button theme=\"secondary\" (click)=\"clearLocalStorage()\">Reset</button> localStorage and Reload\n", styles: [""], dependencies: [{ kind: "component", type: i2$1.NovoButtonElement, selector: "novo-button,button[theme]", inputs: ["color", "side", "size", "theme", "loading", "icon", "secondIcon", "disabled"] }, { kind: "component", type: i2$1.NovoTipWellElement, selector: "novo-tip-well", inputs: ["name", "tip", "buttonText", "button", "icon", "sanitize"], outputs: ["confirmed"] }, { kind: "directive", type: i2$1.ThemeColorDirective, selector: "[theme]", inputs: ["theme"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: BasicTipWellExample, decorators: [{
            type: Component,
            args: [{ selector: 'basic-tip-well-example', standalone: false, template: "<novo-tip-well name=\"Demo\" [tip]=\"demoTip\"></novo-tip-well>\n\n<p>Did you hide the TipWell?</p>\n\n<button theme=\"secondary\" (click)=\"clearLocalStorage()\">Reset</button> localStorage and Reload\n" }]
        }] });

/**
 * @title Tip Well with No Button Example
 */
class ButtonlessTipWellExample {
    constructor() {
        this.demoTip = 'Sed sodales ligula et fermentum bibendum. Aliquam tincidunt sagittis leo eget auctor. Fusce eu sagittis metus, ut viverra magna. Mauris mollis nisl nec libero tincidunt posuere.';
    }
    clearLocalStorage() {
        localStorage.removeItem('novo-tw_Demo');
        location.reload();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: ButtonlessTipWellExample, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: ButtonlessTipWellExample, isStandalone: false, selector: "buttonless-tip-well-example", ngImport: i0, template: "<novo-tip-well name=\"Demo\" [tip]=\"demoTip\" [button]=\"false\"></novo-tip-well>\n\n<p>Did you hide the TipWell?</p>\n\n<button theme=\"secondary\" (click)=\"clearLocalStorage()\">Reset</button> localStorage and Reload\n", styles: [""], dependencies: [{ kind: "component", type: i2$1.NovoButtonElement, selector: "novo-button,button[theme]", inputs: ["color", "side", "size", "theme", "loading", "icon", "secondIcon", "disabled"] }, { kind: "component", type: i2$1.NovoTipWellElement, selector: "novo-tip-well", inputs: ["name", "tip", "buttonText", "button", "icon", "sanitize"], outputs: ["confirmed"] }, { kind: "directive", type: i2$1.ThemeColorDirective, selector: "[theme]", inputs: ["theme"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: ButtonlessTipWellExample, decorators: [{
            type: Component,
            args: [{ selector: 'buttonless-tip-well-example', standalone: false, template: "<novo-tip-well name=\"Demo\" [tip]=\"demoTip\" [button]=\"false\"></novo-tip-well>\n\n<p>Did you hide the TipWell?</p>\n\n<button theme=\"secondary\" (click)=\"clearLocalStorage()\">Reset</button> localStorage and Reload\n" }]
        }] });

/**
 * @title Tip Well with HTML Example
 */
class HtmlTipWellExample {
    constructor() {
        this.demoHtmlTip = `
    <h2>Title</h2>
    <p>
      <div style="color:red">This text is RED</div>
      <div><b>This text is BOLD</b></div>
      <div><i>This text is ITALIC</i></div>
    </p>
    <table>
        <tr>
            <th width="305px">Firstname</th>
            <th width="305px">Lastname</th>
            <th>Age</th>
        </tr>
        <tr>
            <td>Jeff</td>
            <td>Smith</td>
            <td>20</td>
        </tr>
        <tr>
            <td>Steve</td>
            <td>White</td>
            <td>25</td>
        </tr>
    </table>`;
    }
    clearLocalStorage() {
        localStorage.removeItem('novo-tw_Demo');
        location.reload();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: HtmlTipWellExample, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: HtmlTipWellExample, isStandalone: false, selector: "html-tip-well-example", ngImport: i0, template: "<novo-tip-well name=\"Demo\" [sanitize]=\"false\" [tip]=\"demoHtmlTip\"></novo-tip-well>\n\n<p>Did you hide the TipWell?</p>\n\n<button theme=\"secondary\" (click)=\"clearLocalStorage()\">Reset</button> localStorage and Reload\n", styles: [""], dependencies: [{ kind: "component", type: i2$1.NovoButtonElement, selector: "novo-button,button[theme]", inputs: ["color", "side", "size", "theme", "loading", "icon", "secondIcon", "disabled"] }, { kind: "component", type: i2$1.NovoTipWellElement, selector: "novo-tip-well", inputs: ["name", "tip", "buttonText", "button", "icon", "sanitize"], outputs: ["confirmed"] }, { kind: "directive", type: i2$1.ThemeColorDirective, selector: "[theme]", inputs: ["theme"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: HtmlTipWellExample, decorators: [{
            type: Component,
            args: [{ selector: 'html-tip-well-example', standalone: false, template: "<novo-tip-well name=\"Demo\" [sanitize]=\"false\" [tip]=\"demoHtmlTip\"></novo-tip-well>\n\n<p>Did you hide the TipWell?</p>\n\n<button theme=\"secondary\" (click)=\"clearLocalStorage()\">Reset</button> localStorage and Reload\n" }]
        }] });

/**
 * @title Tip Well with Icon Example
 */
class IconTipWellExample {
    constructor() {
        this.demoTip = 'Sed sodales ligula et fermentum bibendum. Aliquam tincidunt sagittis leo eget auctor. Fusce eu sagittis metus, ut viverra magna. Mauris mollis nisl nec libero tincidunt posuere.';
    }
    clearLocalStorage() {
        localStorage.removeItem('novo-tw_Demo');
        location.reload();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: IconTipWellExample, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: IconTipWellExample, isStandalone: false, selector: "icon-tip-well-example", ngImport: i0, template: "<novo-tip-well name=\"Demo\" [tip]=\"demoTip\" icon=\"info\"></novo-tip-well>\n\n<p>Did you hide the TipWell?</p>\n\n<button theme=\"secondary\" (click)=\"clearLocalStorage()\">Reset</button> localStorage and Reload", styles: [""], dependencies: [{ kind: "component", type: i2$1.NovoButtonElement, selector: "novo-button,button[theme]", inputs: ["color", "side", "size", "theme", "loading", "icon", "secondIcon", "disabled"] }, { kind: "component", type: i2$1.NovoTipWellElement, selector: "novo-tip-well", inputs: ["name", "tip", "buttonText", "button", "icon", "sanitize"], outputs: ["confirmed"] }, { kind: "directive", type: i2$1.ThemeColorDirective, selector: "[theme]", inputs: ["theme"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: IconTipWellExample, decorators: [{
            type: Component,
            args: [{ selector: 'icon-tip-well-example', standalone: false, template: "<novo-tip-well name=\"Demo\" [tip]=\"demoTip\" icon=\"info\"></novo-tip-well>\n\n<p>Did you hide the TipWell?</p>\n\n<button theme=\"secondary\" (click)=\"clearLocalStorage()\">Reset</button> localStorage and Reload" }]
        }] });

/**
 * @title Toaster Actions Usage
 */
class ToastActionsExample {
    constructor(toaster) {
        this.toaster = toaster;
        this.options = {
            title: 'Title',
            message: 'Some Message...',
            action: 'Click Me',
        };
    }
    toastToggled(arg) {
        if (arg === 'top') {
            this.options = {
                title: 'Top',
                message: 'This positioning is fixedTop',
                action: 'Click Me',
                icon: 'coffee',
                theme: 'success',
                position: 'fixedTop',
            };
        }
        else if (arg === 'bottom') {
            this.options = {
                title: 'Bottom',
                message: 'This positioning is fixedBottom',
                action: 'Click Me',
                icon: 'check',
                theme: 'warning-outline',
                position: 'fixedBottom',
                hideDelay: 1000000,
            };
        }
        else if (arg === 'growlTopRight') {
            this.options = {
                title: 'Growl',
                message: 'This positioning is growlTopRight',
                action: 'Click Me',
                icon: 'times',
                theme: 'danger',
                position: 'growlTopRight',
                hideDelay: 100000000,
            };
        }
        else if (arg === 'growlTopLeft') {
            this.options = {
                title: 'Growl',
                message: 'This positioning is growlTopLeft',
                action: 'Click Me',
                icon: 'coffee',
                theme: 'ocean',
                position: 'growlTopLeft',
                hideDelay: 100000000,
            };
        }
        else if (arg === 'growlBottomRight') {
            this.options = {
                title: 'Growl',
                message: 'This positioning is growlTopRight',
                action: 'Click Me',
                icon: 'times',
                theme: 'danger',
                position: 'growlBottomRight',
            };
        }
        else if (arg === 'growlBottomLeft') {
            this.options = {
                title: 'Growl',
                message: 'This positioning is growlTopLeft',
                action: 'Click Me',
                icon: 'coffee',
                theme: 'ocean',
                position: 'growlBottomLeft',
            };
        }
        this.toaster.alert(this.options).then((toast) => {
            toast.onAction(() => {
                alert('Clicked Me');
            });
        });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: ToastActionsExample, deps: [{ token: i1$1.NovoToastService }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: ToastActionsExample, isStandalone: false, selector: "toast-actions-example", ngImport: i0, template: "<button theme=\"dialogue\" color=\"success\" icon=\"coffee\" (click)=\"toastToggled('top')\" data-automation-id=\"toast-trigger\">Fixed Top</button>\n<button theme=\"dialogue\" color=\"primary\" icon=\"check\" (click)=\"toastToggled('bottom')\">Fixed Bottom</button>\n<button theme=\"dialogue\" color=\"negative\" icon=\"times\" (click)=\"toastToggled('growlTopRight')\">Growl: Top Right</button>\n<button theme=\"dialogue\" color=\"primary\" icon=\"coffee\" (click)=\"toastToggled('growlTopLeft')\">Growl: Top Left</button>\n<button theme=\"dialogue\" color=\"negative\" icon=\"times\" (click)=\"toastToggled('growlBottomRight')\">Growl: Bottom Right</button>\n<button theme=\"dialogue\" color=\"primary\" icon=\"coffee\" (click)=\"toastToggled('growlBottomLeft')\">Growl: Bottom Left</button>\n", styles: [""], dependencies: [{ kind: "component", type: i2$1.NovoButtonElement, selector: "novo-button,button[theme]", inputs: ["color", "side", "size", "theme", "loading", "icon", "secondIcon", "disabled"] }, { kind: "directive", type: i2$1.ThemeColorDirective, selector: "[theme]", inputs: ["theme"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: ToastActionsExample, decorators: [{
            type: Component,
            args: [{ selector: 'toast-actions-example', standalone: false, template: "<button theme=\"dialogue\" color=\"success\" icon=\"coffee\" (click)=\"toastToggled('top')\" data-automation-id=\"toast-trigger\">Fixed Top</button>\n<button theme=\"dialogue\" color=\"primary\" icon=\"check\" (click)=\"toastToggled('bottom')\">Fixed Bottom</button>\n<button theme=\"dialogue\" color=\"negative\" icon=\"times\" (click)=\"toastToggled('growlTopRight')\">Growl: Top Right</button>\n<button theme=\"dialogue\" color=\"primary\" icon=\"coffee\" (click)=\"toastToggled('growlTopLeft')\">Growl: Top Left</button>\n<button theme=\"dialogue\" color=\"negative\" icon=\"times\" (click)=\"toastToggled('growlBottomRight')\">Growl: Bottom Right</button>\n<button theme=\"dialogue\" color=\"primary\" icon=\"coffee\" (click)=\"toastToggled('growlBottomLeft')\">Growl: Bottom Left</button>\n" }]
        }], ctorParameters: () => [{ type: i1$1.NovoToastService }] });

/**
 * @title Toast Options Example
 */
class ToastOptionsExample {
    constructor() {
        this.activeDate = new Date();
        this.selection = [];
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: ToastOptionsExample, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: ToastOptionsExample, isStandalone: false, selector: "toast-options-example", ngImport: i0, template: "<div class=\"bgc-light\">\n  <novo-toast\n    [theme]=\"style.value==='theme' ? color.value : null\"\n    [accent]=\"style.value==='accent' ? color.value : null\"\n    [appearance]=\"appearance.value\"\n    [icon]=\"icon.value\"\n    [title]=\"title.value ? 'Save Failed' : null\"\n    [margin]=\"margin.value ? '1rem' : 0\"\n    [isCloseable]=\"closeable.value\"\n    message=\"Oops! Looks like you're missing some required fields\"></novo-toast>\n</div>\n<novo-row gap=\"3rem\" align=\"flex-start\">\n  <novo-field>\n    <novo-label>Appearance</novo-label>\n    <novo-radio-group #appearance appearance=\"vertical\" value=\"banner\">\n      <novo-radio name=\"appearance\" value=\"banner\">banner</novo-radio>\n      <novo-radio name=\"appearance\" value=\"growl\">growl</novo-radio>\n    </novo-radio-group>\n  </novo-field>\n  <novo-field>\n    <novo-label>Style</novo-label>\n    <novo-radio-group #style appearance=\"vertical\" value=\"theme\">\n      <novo-radio name=\"style\" value=\"theme\">theme</novo-radio>\n      <novo-radio name=\"style\" value=\"accent\">accent</novo-radio>\n    </novo-radio-group>\n  </novo-field>\n  <novo-field>\n    <novo-label>Color</novo-label>\n    <novo-radio-group #color appearance=\"vertical\" value=\"info\">\n      <novo-radio name=\"color\" [value]=\"null\">none</novo-radio>\n      <novo-radio name=\"color\" value=\"info\">info</novo-radio>\n      <novo-radio name=\"color\" value=\"success\">success</novo-radio>\n      <novo-radio name=\"color\" value=\"warning\">warning</novo-radio>\n      <novo-radio name=\"color\" value=\"danger\">danger</novo-radio>\n    </novo-radio-group>\n  </novo-field>\n  <novo-field>\n    <novo-label>Icon</novo-label>\n    <novo-radio-group #icon appearance=\"vertical\" value=\"bell\">\n      <novo-radio name=\"icon\" [value]=\"null\">none</novo-radio>\n      <novo-radio name=\"icon\" value=\"check\">check</novo-radio>\n      <novo-radio name=\"icon\" value=\"bell\">bell</novo-radio>\n      <novo-radio name=\"icon\" value=\"caution\">caution</novo-radio>\n    </novo-radio-group>\n  </novo-field>\n  <novo-field>\n    <novo-label>Show Title</novo-label>\n    <novo-radio-group #title appearance=\"vertical\" [value]=\"true\">\n      <novo-radio name=\"title\" [value]=\"true\">Show</novo-radio>\n      <novo-radio name=\"title\" [value]=\"false\">Hide</novo-radio>\n    </novo-radio-group>\n  </novo-field>\n  <novo-field>\n    <novo-label>Margin</novo-label>\n    <novo-radio-group #margin appearance=\"vertical\" [value]=\"false\">\n      <novo-radio name=\"margin\" [value]=\"false\">none</novo-radio>\n      <novo-radio name=\"margin\" [value]=\"true\">inset</novo-radio>\n    </novo-radio-group>\n  </novo-field>\n  <novo-field>\n    <novo-label>Closeable</novo-label>\n    <novo-radio-group #closeable appearance=\"vertical\" [value]=\"false\">\n      <novo-radio name=\"margin\" [value]=\"false\">false</novo-radio>\n      <novo-radio name=\"margin\" [value]=\"true\">true</novo-radio>\n    </novo-radio-group>\n  </novo-field>\n</novo-row>\n", styles: [":host{display:grid;grid-template-rows:200px 1fr;gap:2rem}\n"], dependencies: [{ kind: "component", type: i2$1.NovoFlexElement, selector: "novo-flex,novo-row", inputs: ["direction", "align", "justify", "wrap", "gap"] }, { kind: "component", type: i2$1.NovoToastElement, selector: "novo-toast", inputs: ["appearance", "theme", "icon", "title", "action", "hasDialogue", "link", "isCloseable", "message"], outputs: ["closed"] }, { kind: "component", type: i2$1.NovoRadioElement, selector: "novo-radio", inputs: ["id", "name", "tabindex", "vertical", "label", "button", "theme", "size", "icon", "color", "disabled", "checked", "value"], outputs: ["change", "blur", "focus"] }, { kind: "component", type: i2$1.NovoRadioGroup, selector: "novo-radio-group", inputs: ["id", "tabindex", "errorStateMatcher", "appearance", "value", "name", "disabled", "required", "placeholder"], outputs: ["change", "blur"] }, { kind: "component", type: i2$1.NovoLabel, selector: "novo-label,[novo-label]", inputs: ["id"] }, { kind: "directive", type: i2$1.MarginDirective, selector: "[m],[margin],[marginTop],[marginRight],[marginBottom],[marginLeft],[marginX],[marginY],[mt],[mr],[mb],[ml],[mx],[my]", inputs: ["margin", "m", "marginLeft", "ml", "marginRight", "mr", "marginTop", "mt", "marginBottom", "mb", "marginX", "mx", "marginY", "my"] }, { kind: "directive", type: i2$1.GapDirective, selector: "[gap]", inputs: ["gap"] }, { kind: "directive", type: i2$1.AccentColorDirective, selector: "[accent]", inputs: ["accent"] }, { kind: "directive", type: i2$1.ThemeColorDirective, selector: "[theme]", inputs: ["theme"] }, { kind: "component", type: i2$1.NovoFieldElement, selector: "novo-field", inputs: ["layout", "appearance", "customOverlayOrigin", "width"], outputs: ["valueChanges", "stateChanges"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: ToastOptionsExample, decorators: [{
            type: Component,
            args: [{ selector: 'toast-options-example', standalone: false, template: "<div class=\"bgc-light\">\n  <novo-toast\n    [theme]=\"style.value==='theme' ? color.value : null\"\n    [accent]=\"style.value==='accent' ? color.value : null\"\n    [appearance]=\"appearance.value\"\n    [icon]=\"icon.value\"\n    [title]=\"title.value ? 'Save Failed' : null\"\n    [margin]=\"margin.value ? '1rem' : 0\"\n    [isCloseable]=\"closeable.value\"\n    message=\"Oops! Looks like you're missing some required fields\"></novo-toast>\n</div>\n<novo-row gap=\"3rem\" align=\"flex-start\">\n  <novo-field>\n    <novo-label>Appearance</novo-label>\n    <novo-radio-group #appearance appearance=\"vertical\" value=\"banner\">\n      <novo-radio name=\"appearance\" value=\"banner\">banner</novo-radio>\n      <novo-radio name=\"appearance\" value=\"growl\">growl</novo-radio>\n    </novo-radio-group>\n  </novo-field>\n  <novo-field>\n    <novo-label>Style</novo-label>\n    <novo-radio-group #style appearance=\"vertical\" value=\"theme\">\n      <novo-radio name=\"style\" value=\"theme\">theme</novo-radio>\n      <novo-radio name=\"style\" value=\"accent\">accent</novo-radio>\n    </novo-radio-group>\n  </novo-field>\n  <novo-field>\n    <novo-label>Color</novo-label>\n    <novo-radio-group #color appearance=\"vertical\" value=\"info\">\n      <novo-radio name=\"color\" [value]=\"null\">none</novo-radio>\n      <novo-radio name=\"color\" value=\"info\">info</novo-radio>\n      <novo-radio name=\"color\" value=\"success\">success</novo-radio>\n      <novo-radio name=\"color\" value=\"warning\">warning</novo-radio>\n      <novo-radio name=\"color\" value=\"danger\">danger</novo-radio>\n    </novo-radio-group>\n  </novo-field>\n  <novo-field>\n    <novo-label>Icon</novo-label>\n    <novo-radio-group #icon appearance=\"vertical\" value=\"bell\">\n      <novo-radio name=\"icon\" [value]=\"null\">none</novo-radio>\n      <novo-radio name=\"icon\" value=\"check\">check</novo-radio>\n      <novo-radio name=\"icon\" value=\"bell\">bell</novo-radio>\n      <novo-radio name=\"icon\" value=\"caution\">caution</novo-radio>\n    </novo-radio-group>\n  </novo-field>\n  <novo-field>\n    <novo-label>Show Title</novo-label>\n    <novo-radio-group #title appearance=\"vertical\" [value]=\"true\">\n      <novo-radio name=\"title\" [value]=\"true\">Show</novo-radio>\n      <novo-radio name=\"title\" [value]=\"false\">Hide</novo-radio>\n    </novo-radio-group>\n  </novo-field>\n  <novo-field>\n    <novo-label>Margin</novo-label>\n    <novo-radio-group #margin appearance=\"vertical\" [value]=\"false\">\n      <novo-radio name=\"margin\" [value]=\"false\">none</novo-radio>\n      <novo-radio name=\"margin\" [value]=\"true\">inset</novo-radio>\n    </novo-radio-group>\n  </novo-field>\n  <novo-field>\n    <novo-label>Closeable</novo-label>\n    <novo-radio-group #closeable appearance=\"vertical\" [value]=\"false\">\n      <novo-radio name=\"margin\" [value]=\"false\">false</novo-radio>\n      <novo-radio name=\"margin\" [value]=\"true\">true</novo-radio>\n    </novo-radio-group>\n  </novo-field>\n</novo-row>\n", styles: [":host{display:grid;grid-template-rows:200px 1fr;gap:2rem}\n"] }]
        }] });

/**
 * @title Toaster Service Usage
 */
class ToastServiceExample {
    constructor(toaster) {
        this.toaster = toaster;
        this.options = {
            title: 'Title',
            message: 'Some Message...',
        };
    }
    toastToggled(arg) {
        if (arg === 'top') {
            this.options = {
                title: 'Top',
                message: 'This positioning is fixedTop',
                icon: 'coffee',
                theme: 'success',
                position: 'fixedTop',
            };
        }
        else if (arg === 'topAccent') {
            this.options = {
                title: 'Top',
                message: 'This positioning is fixedTop with accent style and is closeable',
                icon: 'coffee',
                theme: '',
                accent: 'success',
                position: 'fixedTop',
                isCloseable: true,
                hideDelay: -1
            };
        }
        else if (arg === 'bottom') {
            this.options = {
                title: 'Bottom',
                message: 'This positioning is fixedBottom',
                icon: 'check',
                theme: 'warning-outline',
                position: 'fixedBottom',
                hideDelay: 1000000,
            };
        }
        else if (arg === 'growlTopRight') {
            this.options = {
                title: 'Growl',
                message: 'This positioning is growlTopRight',
                icon: 'times',
                theme: 'danger',
                position: 'growlTopRight',
                hideDelay: 100000000,
            };
        }
        else if (arg === 'growlTopLeft') {
            this.options = {
                title: 'Growl',
                message: 'This positioning is growlTopLeft',
                icon: 'coffee',
                theme: 'ocean',
                position: 'growlTopLeft',
                hideDelay: 100000000,
            };
        }
        else if (arg === 'growlBottomRight') {
            this.options = {
                title: 'Growl',
                message: 'This positioning is growlTopRight',
                icon: 'times',
                theme: 'danger',
                position: 'growlBottomRight',
                isCloseable: true,
            };
        }
        else if (arg === 'growlBottomLeft') {
            this.options = {
                title: 'Growl',
                message: 'This positioning is growlTopLeft',
                icon: 'coffee',
                theme: 'ocean',
                position: 'growlBottomLeft',
            };
        }
        this.toaster.alert(this.options);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: ToastServiceExample, deps: [{ token: i1$1.NovoToastService }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: ToastServiceExample, isStandalone: false, selector: "toast-service-example", ngImport: i0, template: "<button theme=\"dialogue\" color=\"success\" icon=\"coffee\" (click)=\"toastToggled('top')\" data-automation-id=\"toast-trigger\">Fixed Top</button>\n<button theme=\"dialogue\" color=\"primary\" icon=\"check\" (click)=\"toastToggled('bottom')\">Fixed Bottom</button>\n<button theme=\"dialogue\" color=\"negative\" icon=\"times\" (click)=\"toastToggled('growlTopRight')\">Growl: Top Right</button>\n<button theme=\"dialogue\" color=\"primary\" icon=\"coffee\" (click)=\"toastToggled('growlTopLeft')\">Growl: Top Left</button>\n<button theme=\"dialogue\" color=\"negative\" icon=\"times\" (click)=\"toastToggled('growlBottomRight')\">Growl: Bottom Right</button>\n<button theme=\"dialogue\" color=\"primary\" icon=\"coffee\" (click)=\"toastToggled('growlBottomLeft')\">Growl: Bottom Left</button>\n<button theme=\"dialogue\" color=\"success\" icon=\"coffee\" (click)=\"toastToggled('topAccent')\" data-automation-id=\"toast-trigger\">Fixed Top Accent</button>\n", styles: [""], dependencies: [{ kind: "component", type: i2$1.NovoButtonElement, selector: "novo-button,button[theme]", inputs: ["color", "side", "size", "theme", "loading", "icon", "secondIcon", "disabled"] }, { kind: "directive", type: i2$1.ThemeColorDirective, selector: "[theme]", inputs: ["theme"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: ToastServiceExample, decorators: [{
            type: Component,
            args: [{ selector: 'toast-service-example', standalone: false, template: "<button theme=\"dialogue\" color=\"success\" icon=\"coffee\" (click)=\"toastToggled('top')\" data-automation-id=\"toast-trigger\">Fixed Top</button>\n<button theme=\"dialogue\" color=\"primary\" icon=\"check\" (click)=\"toastToggled('bottom')\">Fixed Bottom</button>\n<button theme=\"dialogue\" color=\"negative\" icon=\"times\" (click)=\"toastToggled('growlTopRight')\">Growl: Top Right</button>\n<button theme=\"dialogue\" color=\"primary\" icon=\"coffee\" (click)=\"toastToggled('growlTopLeft')\">Growl: Top Left</button>\n<button theme=\"dialogue\" color=\"negative\" icon=\"times\" (click)=\"toastToggled('growlBottomRight')\">Growl: Bottom Right</button>\n<button theme=\"dialogue\" color=\"primary\" icon=\"coffee\" (click)=\"toastToggled('growlBottomLeft')\">Growl: Bottom Left</button>\n<button theme=\"dialogue\" color=\"success\" icon=\"coffee\" (click)=\"toastToggled('topAccent')\" data-automation-id=\"toast-trigger\">Fixed Top Accent</button>\n" }]
        }], ctorParameters: () => [{ type: i1$1.NovoToastService }] });

/**
 * @title Static Toast Usage
 */
class ToastUsageExample {
    constructor() {
        this.themes = ['default', 'success', 'info', 'warning', 'danger'];
        this.icons = ['add', 'check', 'clock', 'lock', 'caution'];
        this.toast = {
            theme: 'danger',
            icon: 'caution',
        };
    }
    changeToast() {
        this.toast = {
            theme: this.themes[(this.themes.indexOf(this.toast.theme) + 1) % this.themes.length],
            icon: this.icons[(this.icons.indexOf(this.toast.icon) + 1) % this.icons.length],
        };
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: ToastUsageExample, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: ToastUsageExample, isStandalone: false, selector: "toast-usage-example", ngImport: i0, template: "<div class=\"fake-card\">\n  <novo-header theme=\"job\">\n    <novo-title larger>\n      <novo-icon>job</novo-icon>\n      <span>Apply to Bull Rider</span>\n    </novo-title>\n    <novo-action icon=\"flag\"></novo-action>\n    <novo-action icon=\"refresh\"></novo-action>\n    <novo-action icon=\"times\"></novo-action>\n  </novo-header>\n  <novo-toast [accent]=\"toast.accent\" [theme]=\"toast.theme\" [icon]=\"toast.icon\" title=\"Save Failed\"\n    message=\"Oops! Looks like you're missing some required fields\"></novo-toast>\n  <div class=\"content\">\n    <p>\n      Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed\n      do eiusmod tempor incididunt ut labore et dolore\n      magna aliqua. Ut enim ad minim veniam, quis nostrud\n      exercitation ullamco laboris nisi ut aliquip ex ea\n      commodo consequat. Duis aute irure dolor in reprehenderit\n      in voluptate velit esse cillum dolore eu fugiat nulla\n      pariatur. Excepteur sint occaecat cupidatat non proident,\n      sunt in culpa qui officia deserunt mollit anim id\n      est laborum.\n    </p>\n    <button (click)=\"changeToast()\">Change toast!</button>\n  </div>\n</div>\n", styles: [""], dependencies: [{ kind: "component", type: i2$1.NovoToastElement, selector: "novo-toast", inputs: ["appearance", "theme", "icon", "title", "action", "hasDialogue", "link", "isCloseable", "message"], outputs: ["closed"] }, { kind: "component", type: i2$1.NovoHeaderComponent, selector: "novo-header,header[theme],header[accent]", inputs: ["condensed", "title", "subTitle", "icon", "size", "theme"] }, { kind: "component", type: i2$1.NovoUtilActionComponent, selector: "util-action, novo-action", inputs: ["icon", "size", "inverse", "disabled"] }, { kind: "component", type: i2$1.NovoIconComponent, selector: "novo-icon", inputs: ["raised", "theme", "shape", "color", "size", "smaller", "larger", "alt", "name"] }, { kind: "component", type: i2$1.NovoTitle, selector: "novo-title,[novo-title]" }, { kind: "directive", type: i2$1.AccentColorDirective, selector: "[accent]", inputs: ["accent"] }, { kind: "directive", type: i2$1.ThemeColorDirective, selector: "[theme]", inputs: ["theme"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: ToastUsageExample, decorators: [{
            type: Component,
            args: [{ selector: 'toast-usage-example', standalone: false, template: "<div class=\"fake-card\">\n  <novo-header theme=\"job\">\n    <novo-title larger>\n      <novo-icon>job</novo-icon>\n      <span>Apply to Bull Rider</span>\n    </novo-title>\n    <novo-action icon=\"flag\"></novo-action>\n    <novo-action icon=\"refresh\"></novo-action>\n    <novo-action icon=\"times\"></novo-action>\n  </novo-header>\n  <novo-toast [accent]=\"toast.accent\" [theme]=\"toast.theme\" [icon]=\"toast.icon\" title=\"Save Failed\"\n    message=\"Oops! Looks like you're missing some required fields\"></novo-toast>\n  <div class=\"content\">\n    <p>\n      Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed\n      do eiusmod tempor incididunt ut labore et dolore\n      magna aliqua. Ut enim ad minim veniam, quis nostrud\n      exercitation ullamco laboris nisi ut aliquip ex ea\n      commodo consequat. Duis aute irure dolor in reprehenderit\n      in voluptate velit esse cillum dolore eu fugiat nulla\n      pariatur. Excepteur sint occaecat cupidatat non proident,\n      sunt in culpa qui officia deserunt mollit anim id\n      est laborum.\n    </p>\n    <button (click)=\"changeToast()\">Change toast!</button>\n  </div>\n</div>\n" }]
        }] });

/**
 * @title Basic Toolbar Example
 */
class BasicToolbarExample {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: BasicToolbarExample, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: BasicToolbarExample, isStandalone: false, selector: "basic-toolbar-example", ngImport: i0, template: "<p>\n  <novo-toolbar>\n    <novo-title>My Application</novo-title>\n  </novo-toolbar>\n</p>\n\n<p>\n  <novo-toolbar accent=\"candidate\" gap=\"md\">\n    <novo-icon color=\"candidate\">candidate</novo-icon>\n    <novo-title>Ferdinand del Toro</novo-title>\n  </novo-toolbar>\n</p>\n\n\n<p>\n  <novo-toolbar color=\"company\" gap=\"1rem\">\n    <novo-icon>company</novo-icon>\n    <novo-title>Taurus Industries</novo-title>\n    <novo-nav theme=\"color\">\n      <novo-tab>Overview</novo-tab>\n      <novo-tab>Files</novo-tab>\n    </novo-nav>\n    <span class=\"example-spacer\"></span>\n    <novo-button theme=\"secondary\">Button</novo-button>\n    <novo-action icon=\"share\" tooltip=\"Share\"></novo-action>\n    <novo-action icon=\"print\" tooltip=\"Print\"></novo-action>\n    <novo-action icon=\"times\" tooltip=\"Close\"></novo-action>\n  </novo-toolbar>\n</p>\n\n<p>\n  <novo-toolbar color=\"navigation\">\n    <novo-action icon=\"menu\" tooltip=\"Main Menu\"></novo-action>\n    <novo-divider vertical></novo-divider>\n    <img src=\"assets/images/bullhorn-logo.svg\" width=\"120\" height=\"32\" />\n    <novo-divider vertical></novo-divider>\n    <novo-action icon=\"add-thin\" tooltip=\"Fast Add\"></novo-action>\n    <novo-divider vertical></novo-divider>\n    <novo-search></novo-search>\n\n    <span class=\"example-spacer\"></span>\n    <novo-divider vertical></novo-divider>\n    <novo-action icon=\"question\" tooltip=\"Support\"></novo-action>\n    <novo-divider vertical></novo-divider>\n    <novo-action icon=\"configure-o\" tooltip=\"Settings\"></novo-action>\n    <novo-divider vertical></novo-divider>\n    <novo-avatar image=\"https://robohash.org/bvkimball\" color=\"bittersweet\"></novo-avatar>\n  </novo-toolbar>\n</p>", styles: [".example-spacer{flex:1 1 auto}\n"], dependencies: [{ kind: "component", type: i2$1.NovoAvatarElement, selector: "novo-avatar", inputs: ["source", "label", "theme", "image", "size", "shape", "color"] }, { kind: "component", type: i2$1.NovoButtonElement, selector: "novo-button,button[theme]", inputs: ["color", "side", "size", "theme", "loading", "icon", "secondIcon", "disabled"] }, { kind: "component", type: i2$1.NovoDividerComponent, selector: "novo-divider", inputs: ["vertical", "inset"] }, { kind: "directive", type: i2$1.TooltipDirective, selector: "[tooltip]", inputs: ["tooltip", "tooltipPosition", "tooltipType", "tooltipSize", "tooltipBounce", "tooltipNoAnimate", "tooltipRounded", "tooltipAlways", "tooltipPreline", "removeTooltipArrow", "tooltipAutoPosition", "tooltipIsHTML", "tooltipCloseOnClick", "tooltipOnOverflow", "tooltipActive"] }, { kind: "component", type: i2$1.NovoUtilActionComponent, selector: "util-action, novo-action", inputs: ["icon", "size", "inverse", "disabled"] }, { kind: "component", type: i2$1.NovoNavElement, selector: "novo-nav", inputs: ["theme", "direction", "outlet", "router", "condensed", "selectedIndex"], outputs: ["selectedIndexChange"] }, { kind: "component", type: i2$1.NovoTabElement, selector: "novo-tab", inputs: ["active", "color", "disabled"], outputs: ["activeChange"] }, { kind: "component", type: i2$1.NovoSearchBoxElement, selector: "novo-search", inputs: ["name", "icon", "position", "placeholder", "alwaysOpen", "theme", "color", "closeOnSelect", "displayField", "displayValue", "hint", "keepOpen", "hasBackdrop", "allowPropagation", "overrideElement"], outputs: ["searchChanged", "applySearch"] }, { kind: "component", type: i2$1.NovoIconComponent, selector: "novo-icon", inputs: ["raised", "theme", "shape", "color", "size", "smaller", "larger", "alt", "name"] }, { kind: "component", type: i2$1.NovoTitle, selector: "novo-title,[novo-title]" }, { kind: "directive", type: i2$1.GapDirective, selector: "[gap]", inputs: ["gap"] }, { kind: "directive", type: i2$1.AccentColorDirective, selector: "[accent]", inputs: ["accent"] }, { kind: "directive", type: i2$1.ThemeColorDirective, selector: "[theme]", inputs: ["theme"] }, { kind: "component", type: i2$1.NovoToolbar, selector: "novo-toolbar", inputs: ["color", "gap"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: BasicToolbarExample, decorators: [{
            type: Component,
            args: [{ selector: 'basic-toolbar-example', standalone: false, template: "<p>\n  <novo-toolbar>\n    <novo-title>My Application</novo-title>\n  </novo-toolbar>\n</p>\n\n<p>\n  <novo-toolbar accent=\"candidate\" gap=\"md\">\n    <novo-icon color=\"candidate\">candidate</novo-icon>\n    <novo-title>Ferdinand del Toro</novo-title>\n  </novo-toolbar>\n</p>\n\n\n<p>\n  <novo-toolbar color=\"company\" gap=\"1rem\">\n    <novo-icon>company</novo-icon>\n    <novo-title>Taurus Industries</novo-title>\n    <novo-nav theme=\"color\">\n      <novo-tab>Overview</novo-tab>\n      <novo-tab>Files</novo-tab>\n    </novo-nav>\n    <span class=\"example-spacer\"></span>\n    <novo-button theme=\"secondary\">Button</novo-button>\n    <novo-action icon=\"share\" tooltip=\"Share\"></novo-action>\n    <novo-action icon=\"print\" tooltip=\"Print\"></novo-action>\n    <novo-action icon=\"times\" tooltip=\"Close\"></novo-action>\n  </novo-toolbar>\n</p>\n\n<p>\n  <novo-toolbar color=\"navigation\">\n    <novo-action icon=\"menu\" tooltip=\"Main Menu\"></novo-action>\n    <novo-divider vertical></novo-divider>\n    <img src=\"assets/images/bullhorn-logo.svg\" width=\"120\" height=\"32\" />\n    <novo-divider vertical></novo-divider>\n    <novo-action icon=\"add-thin\" tooltip=\"Fast Add\"></novo-action>\n    <novo-divider vertical></novo-divider>\n    <novo-search></novo-search>\n\n    <span class=\"example-spacer\"></span>\n    <novo-divider vertical></novo-divider>\n    <novo-action icon=\"question\" tooltip=\"Support\"></novo-action>\n    <novo-divider vertical></novo-divider>\n    <novo-action icon=\"configure-o\" tooltip=\"Settings\"></novo-action>\n    <novo-divider vertical></novo-divider>\n    <novo-avatar image=\"https://robohash.org/bvkimball\" color=\"bittersweet\"></novo-avatar>\n  </novo-toolbar>\n</p>", styles: [".example-spacer{flex:1 1 auto}\n"] }]
        }] });

/**
 * @title Multi Row Toolbar
 */
class MultiRowToolbarExample {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: MultiRowToolbarExample, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: MultiRowToolbarExample, isStandalone: false, selector: "multi-row-toolbar-example", ngImport: i0, template: "<novo-toolbar>\n  <novo-toolbar-row color=\"company\" gap=\"md\">\n    <novo-icon>company</novo-icon>\n    <novo-title>My App</novo-title>\n    <span class=\"example-spacer\"></span>\n    <novo-action icon=\"menu\" aria-label=\"Example icon-button with menu icon\"></novo-action>\n  </novo-toolbar-row>\n\n  <novo-toolbar-row>\n    <novo-nav>\n      <novo-tab>Overview</novo-tab>\n      <novo-tab>Activity</novo-tab>\n      <novo-tab>Files</novo-tab>\n    </novo-nav>\n    <span class=\"example-spacer\"></span>\n    <novo-divider vertical></novo-divider>\n    <novo-button theme=\"dialogue\">Layout</novo-button>\n  </novo-toolbar-row>\n</novo-toolbar>", styles: [".example-spacer{flex:1 1 auto}\n"], dependencies: [{ kind: "component", type: i2$1.NovoButtonElement, selector: "novo-button,button[theme]", inputs: ["color", "side", "size", "theme", "loading", "icon", "secondIcon", "disabled"] }, { kind: "component", type: i2$1.NovoDividerComponent, selector: "novo-divider", inputs: ["vertical", "inset"] }, { kind: "component", type: i2$1.NovoUtilActionComponent, selector: "util-action, novo-action", inputs: ["icon", "size", "inverse", "disabled"] }, { kind: "component", type: i2$1.NovoNavElement, selector: "novo-nav", inputs: ["theme", "direction", "outlet", "router", "condensed", "selectedIndex"], outputs: ["selectedIndexChange"] }, { kind: "component", type: i2$1.NovoTabElement, selector: "novo-tab", inputs: ["active", "color", "disabled"], outputs: ["activeChange"] }, { kind: "component", type: i2$1.NovoIconComponent, selector: "novo-icon", inputs: ["raised", "theme", "shape", "color", "size", "smaller", "larger", "alt", "name"] }, { kind: "component", type: i2$1.NovoTitle, selector: "novo-title,[novo-title]" }, { kind: "directive", type: i2$1.GapDirective, selector: "[gap]", inputs: ["gap"] }, { kind: "directive", type: i2$1.ThemeColorDirective, selector: "[theme]", inputs: ["theme"] }, { kind: "component", type: i2$1.NovoToolbar, selector: "novo-toolbar", inputs: ["color", "gap"] }, { kind: "directive", type: i2$1.NovoToolbarRow, selector: "novo-toolbar-row", inputs: ["color", "gap"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: MultiRowToolbarExample, decorators: [{
            type: Component,
            args: [{ selector: 'multi-row-toolbar-example', standalone: false, template: "<novo-toolbar>\n  <novo-toolbar-row color=\"company\" gap=\"md\">\n    <novo-icon>company</novo-icon>\n    <novo-title>My App</novo-title>\n    <span class=\"example-spacer\"></span>\n    <novo-action icon=\"menu\" aria-label=\"Example icon-button with menu icon\"></novo-action>\n  </novo-toolbar-row>\n\n  <novo-toolbar-row>\n    <novo-nav>\n      <novo-tab>Overview</novo-tab>\n      <novo-tab>Activity</novo-tab>\n      <novo-tab>Files</novo-tab>\n    </novo-nav>\n    <span class=\"example-spacer\"></span>\n    <novo-divider vertical></novo-divider>\n    <novo-button theme=\"dialogue\">Layout</novo-button>\n  </novo-toolbar-row>\n</novo-toolbar>", styles: [".example-spacer{flex:1 1 auto}\n"] }]
        }] });

/**
 * @title Tooltip Align Example
 */
class TooltipAlignExample {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: TooltipAlignExample, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: TooltipAlignExample, isStandalone: false, selector: "tooltip-align-example", ngImport: i0, template: "<span tooltip=\"bottom-left\" tooltipPosition=\"bottom-left\">Bottom Left</span>\n<span tooltip=\"bottom-right\" tooltipPosition=\"bottom-right\">Bottom Right</span>\n<span tooltip=\"top-left\" tooltipPosition=\"top-left\">Top Left</span>\n<span tooltip=\"top-right\" tooltipPosition=\"top-right\">Top Right</span>\n", styles: [":host{margin:auto;padding:20px 30px;position:relative;display:flex}:host>span{cursor:pointer;margin:auto}\n"], dependencies: [{ kind: "directive", type: i2$1.TooltipDirective, selector: "[tooltip]", inputs: ["tooltip", "tooltipPosition", "tooltipType", "tooltipSize", "tooltipBounce", "tooltipNoAnimate", "tooltipRounded", "tooltipAlways", "tooltipPreline", "removeTooltipArrow", "tooltipAutoPosition", "tooltipIsHTML", "tooltipCloseOnClick", "tooltipOnOverflow", "tooltipActive"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: TooltipAlignExample, decorators: [{
            type: Component,
            args: [{ selector: 'tooltip-align-example', standalone: false, template: "<span tooltip=\"bottom-left\" tooltipPosition=\"bottom-left\">Bottom Left</span>\n<span tooltip=\"bottom-right\" tooltipPosition=\"bottom-right\">Bottom Right</span>\n<span tooltip=\"top-left\" tooltipPosition=\"top-left\">Top Left</span>\n<span tooltip=\"top-right\" tooltipPosition=\"top-right\">Top Right</span>\n", styles: [":host{margin:auto;padding:20px 30px;position:relative;display:flex}:host>span{cursor:pointer;margin:auto}\n"] }]
        }] });

/**
 * @title Tooltip Options Example
 */
class TooltipOptionsExample {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: TooltipOptionsExample, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: TooltipOptionsExample, isStandalone: false, selector: "tooltip-options-example", ngImport: i0, template: "<span tooltip=\"ALWAYS\" tooltipAlways=\"true\">Always Shown</span>\n<span tooltip=\"ROUNDED\" tooltipRounded=\"true\">Rounded</span>\n<span tooltip=\"NO ANIMATE\" tooltipNoAnimate=\"true\">No Animation</span>\n<span tooltip=\"BOUNCE\" tooltipBounce=\"true\">Bounce</span>\n<span tooltip=\"<h2>Hello</h2><hr>I can <i>render</i><ul><li>HTML</li><li>CSS</li></ul>\" tooltipIsHTML=\"true\">HTML</span>\n", styles: [":host{margin:auto;padding:20px 30px;position:relative;display:flex}:host>span{cursor:pointer;margin:auto}\n"], dependencies: [{ kind: "directive", type: i2$1.TooltipDirective, selector: "[tooltip]", inputs: ["tooltip", "tooltipPosition", "tooltipType", "tooltipSize", "tooltipBounce", "tooltipNoAnimate", "tooltipRounded", "tooltipAlways", "tooltipPreline", "removeTooltipArrow", "tooltipAutoPosition", "tooltipIsHTML", "tooltipCloseOnClick", "tooltipOnOverflow", "tooltipActive"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: TooltipOptionsExample, decorators: [{
            type: Component,
            args: [{ selector: 'tooltip-options-example', standalone: false, template: "<span tooltip=\"ALWAYS\" tooltipAlways=\"true\">Always Shown</span>\n<span tooltip=\"ROUNDED\" tooltipRounded=\"true\">Rounded</span>\n<span tooltip=\"NO ANIMATE\" tooltipNoAnimate=\"true\">No Animation</span>\n<span tooltip=\"BOUNCE\" tooltipBounce=\"true\">Bounce</span>\n<span tooltip=\"<h2>Hello</h2><hr>I can <i>render</i><ul><li>HTML</li><li>CSS</li></ul>\" tooltipIsHTML=\"true\">HTML</span>\n", styles: [":host{margin:auto;padding:20px 30px;position:relative;display:flex}:host>span{cursor:pointer;margin:auto}\n"] }]
        }] });

/**
 * @title Tooltip Placement Example
 */
class TooltipPlacementExample {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: TooltipPlacementExample, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: TooltipPlacementExample, isStandalone: false, selector: "tooltip-placement-example", ngImport: i0, template: "<span tooltip=\"left\" tooltipPosition=\"left\">Left</span>\n<span tooltip=\"right\" tooltipPosition=\"right\">Right</span>\n<span tooltip=\"top\" tooltipPosition=\"top\">Top</span>\n<span tooltip=\"bottom\" tooltipPosition=\"bottom\">Bottom</span>\n", styles: [":host{margin:auto;padding:20px 30px;position:relative;display:flex}:host>span{cursor:pointer;margin:auto}\n"], dependencies: [{ kind: "directive", type: i2$1.TooltipDirective, selector: "[tooltip]", inputs: ["tooltip", "tooltipPosition", "tooltipType", "tooltipSize", "tooltipBounce", "tooltipNoAnimate", "tooltipRounded", "tooltipAlways", "tooltipPreline", "removeTooltipArrow", "tooltipAutoPosition", "tooltipIsHTML", "tooltipCloseOnClick", "tooltipOnOverflow", "tooltipActive"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: TooltipPlacementExample, decorators: [{
            type: Component,
            args: [{ selector: 'tooltip-placement-example', standalone: false, template: "<span tooltip=\"left\" tooltipPosition=\"left\">Left</span>\n<span tooltip=\"right\" tooltipPosition=\"right\">Right</span>\n<span tooltip=\"top\" tooltipPosition=\"top\">Top</span>\n<span tooltip=\"bottom\" tooltipPosition=\"bottom\">Bottom</span>\n", styles: [":host{margin:auto;padding:20px 30px;position:relative;display:flex}:host>span{cursor:pointer;margin:auto}\n"] }]
        }] });

/**
 * @title Tooltip Sizes Example
 */
class TooltipSizesExample {
    constructor() {
        this.mediumTooltip = `Lorem Ipsum\n\n is simply dummy text of the printing and typesetting industry.`;
        this.largeTooltip = `Lorem Ipsum\n\n is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.`;
        this.extraLargeTooltip = `Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis placerat nisi at elit molestie, eget dapibus erat mattis. Sed nec est sit amet dolor hendrerit placerat quis vitae sapien. Nulla non consectetur lorem, nec ultricies lacus. Ut maximus eget tortor a bibendum. Vivamus vel mollis magna. Nullam sit amet urna a elit sollicitudin ultrices. Donec scelerisque dolor vel lacus blandit aliquam. Morbi tellus nunc, interdum eget laoreet vitae, tristique a odio. Maecenas ligula nisl, volutpat id augue vel, sollicitudin bibendum massa. Aenean dapibus quam nec ante volutpat, id tincidunt mauris malesuada. Aliquam vitae consectetur justo.

    Nunc vel felis in quam iaculis vulputate eu non erat. Phasellus vel purus eget est elementum tempus a non mauris. Mauris cursus convallis enim, non malesuada felis suscipit vel. Maecenas nec hendrerit erat. Morbi vehicula condimentum mi non gravida. Aenean varius risus arcu. Sed blandit ipsum sit amet tincidunt convallis. Praesent consectetur elementum nisi, sit amet placerat diam commodo at. Vivamus aliquet sagittis libero, id efficitur nisl varius eget. Aenean tempor augue a erat tincidunt hendrerit. Cras et dictum nisl. Sed pulvinar leo quis urna malesuada tincidunt. Sed enim tortor, semper egestas orci pellentesque, scelerisque egestas eros. Aliquam in ex sit amet tortor fringilla convallis.

    Nam ac nulla accumsan, tristique orci tincidunt, condimentum nunc. Fusce eget neque dolor. Vestibulum volutpat, libero non maximus maximus, libero ante semper tellus, et commodo lectus mi nec orci. Donec pretium pharetra cursus. Nam a egestas augue. Sed et condimentum lectus. Sed vel justo semper, convallis ante id, tincidunt nisi. Aliquam non lorem commodo, laoreet diam nec, feugiat dolor.

    Aliquam orci diam, vestibulum et odio id, molestie interdum diam. Donec et molestie mi. Suspendisse potenti. Nam sit amet faucibus nulla. In tincidunt pharetra turpis, fringilla convallis dui scelerisque vel. Orci varius natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Fusce eget tellus sem. Donec ac maximus massa.

    Aliquam vehicula ligula justo, faucibus semper lorem sodales eu. Fusce nec augue quis diam iaculis dapibus. Cras consectetur eros ut nunc cursus, non laoreet dolor rhoncus. In luctus risus sed nunc feugiat, in imperdiet velit euismod. Curabitur sed nunc dapibus, convallis tortor sit amet, interdum sapien. Donec auctor mauris est, ac molestie diam sagittis id. Curabitur pretium metus et ante tincidunt convallis. Aenean quis mollis nulla.`;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: TooltipSizesExample, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: TooltipSizesExample, isStandalone: false, selector: "tooltip-sizes-example", ngImport: i0, template: "<span tooltip=\"Small Tooltip\" tooltipSize=\"small\" tooltipPosition=\"bottom\" tooltipPreline=\"true\">Small Tooltip</span>\n<span [tooltip]=\"mediumTooltip\" tooltipSize=\"medium\" tooltipPosition=\"left\" tooltipPreline=\"true\">Medium Tooltip</span>\n<span [tooltip]=\"largeTooltip\" tooltipSize=\"large\" tooltipPosition=\"top\" tooltipPreline=\"true\">Large Tooltip</span>\n<span [tooltip]=\"extraLargeTooltip\" tooltipSize=\"extra-large\" tooltipPosition=\"top\" tooltipPreline=\"true\" tooltipAutoPosition=\"true\">Extra-Large Tooltip</span>\n", styles: [":host{margin:auto;padding:20px 30px;position:relative;display:flex}:host>span{cursor:pointer;margin:auto}\n"], dependencies: [{ kind: "directive", type: i2$1.TooltipDirective, selector: "[tooltip]", inputs: ["tooltip", "tooltipPosition", "tooltipType", "tooltipSize", "tooltipBounce", "tooltipNoAnimate", "tooltipRounded", "tooltipAlways", "tooltipPreline", "removeTooltipArrow", "tooltipAutoPosition", "tooltipIsHTML", "tooltipCloseOnClick", "tooltipOnOverflow", "tooltipActive"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: TooltipSizesExample, decorators: [{
            type: Component,
            args: [{ selector: 'tooltip-sizes-example', standalone: false, template: "<span tooltip=\"Small Tooltip\" tooltipSize=\"small\" tooltipPosition=\"bottom\" tooltipPreline=\"true\">Small Tooltip</span>\n<span [tooltip]=\"mediumTooltip\" tooltipSize=\"medium\" tooltipPosition=\"left\" tooltipPreline=\"true\">Medium Tooltip</span>\n<span [tooltip]=\"largeTooltip\" tooltipSize=\"large\" tooltipPosition=\"top\" tooltipPreline=\"true\">Large Tooltip</span>\n<span [tooltip]=\"extraLargeTooltip\" tooltipSize=\"extra-large\" tooltipPosition=\"top\" tooltipPreline=\"true\" tooltipAutoPosition=\"true\">Extra-Large Tooltip</span>\n", styles: [":host{margin:auto;padding:20px 30px;position:relative;display:flex}:host>span{cursor:pointer;margin:auto}\n"] }]
        }] });

/**
 * @title Tooltip Toggle Example
 */
class TooltipToggleExample {
    toggleTooltip() {
        this.tooltipActive = !this.tooltipActive;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: TooltipToggleExample, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: TooltipToggleExample, isStandalone: false, selector: "tooltip-toggle-example", ngImport: i0, template: "<span tooltip=\"I HAVE A TOOLTIP!\" [tooltipActive]=\"tooltipActive\">\n    <span *ngIf=\"tooltipActive\">My tooltip can display!</span>\n    <span *ngIf=\"!tooltipActive\">My tooltip is disabled!</span>\n</span>\n<button theme=\"secondary\" (click)=\"toggleTooltip()\">Toggle</button>\n", styles: [":host{margin:auto;padding:20px 30px;position:relative;display:flex}:host>span{cursor:pointer;margin:auto}\n"], dependencies: [{ kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i2$1.NovoButtonElement, selector: "novo-button,button[theme]", inputs: ["color", "side", "size", "theme", "loading", "icon", "secondIcon", "disabled"] }, { kind: "directive", type: i2$1.TooltipDirective, selector: "[tooltip]", inputs: ["tooltip", "tooltipPosition", "tooltipType", "tooltipSize", "tooltipBounce", "tooltipNoAnimate", "tooltipRounded", "tooltipAlways", "tooltipPreline", "removeTooltipArrow", "tooltipAutoPosition", "tooltipIsHTML", "tooltipCloseOnClick", "tooltipOnOverflow", "tooltipActive"] }, { kind: "directive", type: i2$1.ThemeColorDirective, selector: "[theme]", inputs: ["theme"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: TooltipToggleExample, decorators: [{
            type: Component,
            args: [{ selector: 'tooltip-toggle-example', standalone: false, template: "<span tooltip=\"I HAVE A TOOLTIP!\" [tooltipActive]=\"tooltipActive\">\n    <span *ngIf=\"tooltipActive\">My tooltip can display!</span>\n    <span *ngIf=\"!tooltipActive\">My tooltip is disabled!</span>\n</span>\n<button theme=\"secondary\" (click)=\"toggleTooltip()\">Toggle</button>\n", styles: [":host{margin:auto;padding:20px 30px;position:relative;display:flex}:host>span{cursor:pointer;margin:auto}\n"] }]
        }] });

/**
 * @title Tooltip Types Example
 */
class TooltipTypesExample {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: TooltipTypesExample, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: TooltipTypesExample, isStandalone: false, selector: "tooltip-types-example", ngImport: i0, template: "<span tooltip=\"ERROR\" tooltipType=\"error\">Error</span>\n<span tooltip=\"INFO\" tooltipType=\"info\">Info</span>\n<span tooltip=\"WARNING\" tooltipType=\"warning\">Warning</span>\n<span tooltip=\"SUCCESS\" tooltipType=\"success\">Success</span>\n", styles: [":host{margin:auto;padding:20px 30px;position:relative;display:flex}:host>span{cursor:pointer;margin:auto}\n"], dependencies: [{ kind: "directive", type: i2$1.TooltipDirective, selector: "[tooltip]", inputs: ["tooltip", "tooltipPosition", "tooltipType", "tooltipSize", "tooltipBounce", "tooltipNoAnimate", "tooltipRounded", "tooltipAlways", "tooltipPreline", "removeTooltipArrow", "tooltipAutoPosition", "tooltipIsHTML", "tooltipCloseOnClick", "tooltipOnOverflow", "tooltipActive"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: TooltipTypesExample, decorators: [{
            type: Component,
            args: [{ selector: 'tooltip-types-example', standalone: false, template: "<span tooltip=\"ERROR\" tooltipType=\"error\">Error</span>\n<span tooltip=\"INFO\" tooltipType=\"info\">Info</span>\n<span tooltip=\"WARNING\" tooltipType=\"warning\">Warning</span>\n<span tooltip=\"SUCCESS\" tooltipType=\"success\">Success</span>\n", styles: [":host{margin:auto;padding:20px 30px;position:relative;display:flex}:host>span{cursor:pointer;margin:auto}\n"] }]
        }] });

const primaryColors = [
    {
        name: 'navigation',
        variables: ['navigation'],
        hex: '202945',
    },
    {
        name: 'positive',
        variables: ['positive'],
        hex: '4A89DC',
    },
    {
        name: 'dark',
        variables: ['dark'],
        hex: '3D464D',
    },
    {
        name: 'background',
        variables: ['background'],
        hex: 'F4F4F4',
    },
    {
        name: 'background dark',
        variables: ['background-dark'],
        hex: 'E2E2E2',
    },
    {
        name: 'neutral',
        variables: ['neutral'],
        hex: '4F5361',
    },
    {
        name: 'success',
        variables: ['success'],
        hex: '8CC152',
    },
    {
        name: 'negative',
        variables: ['negative'],
        hex: 'DA4453',
    },
    {
        name: 'warning',
        variables: ['warning'],
        hex: 'F6B042',
    },
    {
        name: 'empty',
        variables: ['empty'],
        hex: 'CCCDCC',
    },
    {
        name: 'sand',
        variables: ['sand'],
        hex: 'F4F4F4',
    },
    {
        name: 'silver',
        variables: ['silver'],
        hex: 'E2E2E2',
    },
    {
        name: 'stone',
        variables: ['stone'],
        hex: 'BEBEBE',
    },
    {
        name: 'ash',
        variables: ['ash'],
        hex: 'A0A0A0',
    },
    {
        name: 'slate',
        variables: ['slate'],
        hex: '707070',
    },
    {
        name: 'charcoal',
        variables: ['charcoal'],
        hex: '282828',
    },
];
const entityColors = [
    {
        name: 'lead',
        variables: ['lead'],
        hex: 'AA6699',
    },
    {
        name: 'contact',
        variables: ['contact'],
        hex: 'FFAA44',
    },
    {
        name: 'company',
        variables: ['company'],
        hex: '3399DD',
    },
    {
        name: 'candidate',
        variables: ['candidate'],
        hex: '44BB77',
    },
    {
        name: 'opportunity',
        variables: ['opportunity'],
        hex: '662255',
    },
    {
        name: 'job',
        variables: ['job'],
        hex: 'BB5566',
    },
    {
        name: 'job code',
        variables: ['jobCode'],
        hex: '696D79',
    },
    {
        name: 'earn code',
        variables: ['earnCode'],
        hex: '696D79',
    },
    {
        name: 'submission',
        variables: ['submission'],
        hex: 'A9ADBB',
    },
    {
        name: 'placement',
        variables: ['placement'],
        hex: '0B344F',
    },
    {
        name: 'sendout',
        variables: ['sendout'],
        hex: '747884',
    },
    {
        name: 'note',
        variables: ['note'],
        hex: '747884',
    },
    {
        name: 'contract',
        variables: ['contract'],
        hex: '454EA0',
    },
    {
        name: 'invoice statement',
        variables: ['invoiceStatement'],
        hex: '696D79',
    },
    {
        name: 'billable charge',
        variables: ['billableCharge'],
        hex: '696D79',
    },
    {
        name: 'payable charge',
        variables: ['payableCharge'],
        hex: '696D79',
    },
];
const analyticsColors = [
    {
        name: 'grapefruit',
        variables: ['grapefruit'],
        hex: 'DA4453',
    },
    {
        name: 'bittersweet',
        variables: ['bittersweet'],
        hex: 'EB6845',
    },
    {
        name: 'sunflower',
        variables: ['sunflower'],
        hex: 'F6B042',
    },
    {
        name: 'grass',
        variables: ['grass'],
        hex: '8CC152',
    },
    {
        name: 'mint',
        variables: ['mint'],
        hex: '37BC9B',
    },
    {
        name: 'aqua',
        variables: ['aqua'],
        hex: '3BAFDA',
    },
    {
        name: 'ocean',
        variables: ['ocean'],
        hex: '4A89DC',
    },
    {
        name: 'carnation',
        variables: ['carnation'],
        hex: 'D770AD',
    },
    {
        name: 'lavender',
        variables: ['lavender'],
        hex: '967ADC',
    },
    {
        name: 'mountain',
        variables: ['mountain'],
        hex: '9678B6',
    },
];
const allColors = [...primaryColors, ...entityColors, ...analyticsColors];

// NG2
/**
 * @title Analytics Colors
 */
class AnalyticsColorsExample {
    constructor(toaster) {
        this.toaster = toaster;
        this.analyticsColors = analyticsColors;
    }
    copyLink(color) {
        // Create dom element to copy from
        const copyFrom = document.createElement('textarea');
        copyFrom.textContent = `#${color.hex}`;
        const body = document.getElementsByTagName('body')[0];
        body.appendChild(copyFrom);
        copyFrom.select();
        // Copy text
        document.execCommand('copy');
        // Delete element
        body.removeChild(copyFrom);
        // Set toast options
        this.options = {
            title: `#${color.hex}`,
            message: 'Copied to your clipboard',
            theme: color.variables[0],
            icon: 'clipboard',
            position: 'growlTopRight',
        };
        if (color.name === 'action') {
            this.options.theme = 'ocean';
        }
        // Fire toast
        this.toaster.alert(this.options);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: AnalyticsColorsExample, deps: [{ token: i1$1.NovoToastService }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: AnalyticsColorsExample, isStandalone: false, selector: "analytics-colors-example", ngImport: i0, template: "<article class=\"color-blocks analytics-colors\">\n  <div *ngFor=\"let color of analyticsColors\" class=\"block\">\n      <div class=\"color-square bgc-{{color.variables[0]}}\" (click)=\"copyLink(color)\">\n        <h3 class=\"color-text\"><span>#</span>{{color.hex}}</h3>\n      </div>\n      <h6>{{color.name}}</h6>\n      <span class=\"vars\" *ngFor=\"let variable of color.variables\">${{variable}}</span>\n  </div>\n</article>\n", styles: [":host .color-blocks{display:flex;flex-direction:row;justify-content:flex-start;flex-wrap:wrap;align-items:flex-end;width:100%}:host .color-blocks .block{display:inline-block;text-align:center;width:25%;min-width:200px;position:relative;padding:20px}:host .color-blocks .block:active .color-square,:host .color-blocks .block:focus .color-square,:host .color-blocks .block:hover .color-square{transform:scale(1.125)}:host .color-blocks .block .color-square{border-radius:4px;height:150px;justify-content:center;align-items:center;display:flex;position:relative}:host .color-blocks .color-text:after{content:\"Click to copy\";position:absolute;color:#fff9;left:50%;bottom:40px;font-size:10px;text-transform:uppercase;transform:translate(-50%);width:100%}\n"], dependencies: [{ kind: "directive", type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: AnalyticsColorsExample, decorators: [{
            type: Component,
            args: [{ selector: 'analytics-colors-example', standalone: false, template: "<article class=\"color-blocks analytics-colors\">\n  <div *ngFor=\"let color of analyticsColors\" class=\"block\">\n      <div class=\"color-square bgc-{{color.variables[0]}}\" (click)=\"copyLink(color)\">\n        <h3 class=\"color-text\"><span>#</span>{{color.hex}}</h3>\n      </div>\n      <h6>{{color.name}}</h6>\n      <span class=\"vars\" *ngFor=\"let variable of color.variables\">${{variable}}</span>\n  </div>\n</article>\n", styles: [":host .color-blocks{display:flex;flex-direction:row;justify-content:flex-start;flex-wrap:wrap;align-items:flex-end;width:100%}:host .color-blocks .block{display:inline-block;text-align:center;width:25%;min-width:200px;position:relative;padding:20px}:host .color-blocks .block:active .color-square,:host .color-blocks .block:focus .color-square,:host .color-blocks .block:hover .color-square{transform:scale(1.125)}:host .color-blocks .block .color-square{border-radius:4px;height:150px;justify-content:center;align-items:center;display:flex;position:relative}:host .color-blocks .color-text:after{content:\"Click to copy\";position:absolute;color:#fff9;left:50%;bottom:40px;font-size:10px;text-transform:uppercase;transform:translate(-50%);width:100%}\n"] }]
        }], ctorParameters: () => [{ type: i1$1.NovoToastService }] });

// NG2
/**
 * @title Entity Colors
 */
class EntityColorsExample {
    constructor(toaster) {
        this.toaster = toaster;
        this.entityColors = entityColors;
    }
    copyLink(color) {
        // Create dom element to copy from
        const copyFrom = document.createElement('textarea');
        copyFrom.textContent = `#${color.hex}`;
        const body = document.getElementsByTagName('body')[0];
        body.appendChild(copyFrom);
        copyFrom.select();
        // Copy text
        document.execCommand('copy');
        // Delete element
        body.removeChild(copyFrom);
        // Set toast options
        this.options = {
            title: `#${color.hex}`,
            message: 'Copied to your clipboard',
            theme: color.variables[0],
            icon: 'clipboard',
            position: 'growlTopRight',
        };
        if (color.name === 'action') {
            this.options.theme = 'ocean';
        }
        // Fire toast
        this.toaster.alert(this.options);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: EntityColorsExample, deps: [{ token: i1$1.NovoToastService }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: EntityColorsExample, isStandalone: false, selector: "entity-colors-example", ngImport: i0, template: "<article class=\"color-blocks entity-colors\">\n  <div *ngFor=\"let color of entityColors\" class=\"block\">\n      <div class=\"color-square bgc-{{color.variables[0]}}\" (click)=\"copyLink(color)\">\n        <h3 class=\"color-text\"><span>#</span>{{color.hex}}</h3>\n      </div>\n      <h6>{{color.name}}</h6>\n      <span class=\"vars\" *ngFor=\"let variable of color.variables\">${{variable}}</span>\n  </div>\n</article>\n", styles: [":host .color-blocks{display:flex;flex-direction:row;justify-content:flex-start;flex-wrap:wrap;align-items:flex-end;width:100%}:host .color-blocks .block{display:inline-block;text-align:center;width:25%;min-width:200px;position:relative;padding:20px}:host .color-blocks .block:active .color-square,:host .color-blocks .block:focus .color-square,:host .color-blocks .block:hover .color-square{transform:scale(1.125)}:host .color-blocks .block .color-square{border-radius:4px;height:150px;justify-content:center;align-items:center;display:flex;position:relative}:host .color-blocks .color-text:after{content:\"Click to copy\";position:absolute;color:#fff9;left:50%;bottom:40px;font-size:10px;text-transform:uppercase;transform:translate(-50%);width:100%}\n"], dependencies: [{ kind: "directive", type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: EntityColorsExample, decorators: [{
            type: Component,
            args: [{ selector: 'entity-colors-example', standalone: false, template: "<article class=\"color-blocks entity-colors\">\n  <div *ngFor=\"let color of entityColors\" class=\"block\">\n      <div class=\"color-square bgc-{{color.variables[0]}}\" (click)=\"copyLink(color)\">\n        <h3 class=\"color-text\"><span>#</span>{{color.hex}}</h3>\n      </div>\n      <h6>{{color.name}}</h6>\n      <span class=\"vars\" *ngFor=\"let variable of color.variables\">${{variable}}</span>\n  </div>\n</article>\n", styles: [":host .color-blocks{display:flex;flex-direction:row;justify-content:flex-start;flex-wrap:wrap;align-items:flex-end;width:100%}:host .color-blocks .block{display:inline-block;text-align:center;width:25%;min-width:200px;position:relative;padding:20px}:host .color-blocks .block:active .color-square,:host .color-blocks .block:focus .color-square,:host .color-blocks .block:hover .color-square{transform:scale(1.125)}:host .color-blocks .block .color-square{border-radius:4px;height:150px;justify-content:center;align-items:center;display:flex;position:relative}:host .color-blocks .color-text:after{content:\"Click to copy\";position:absolute;color:#fff9;left:50%;bottom:40px;font-size:10px;text-transform:uppercase;transform:translate(-50%);width:100%}\n"] }]
        }], ctorParameters: () => [{ type: i1$1.NovoToastService }] });

// NG2
/**
 * @title Primary Colors
 */
class PrimaryColorsExample {
    constructor(toaster) {
        this.toaster = toaster;
        this.primaryColors = primaryColors;
    }
    copyLink(color) {
        // Create dom element to copy from
        const copyFrom = document.createElement('textarea');
        copyFrom.textContent = `#${color.hex}`;
        const body = document.getElementsByTagName('body')[0];
        body.appendChild(copyFrom);
        copyFrom.select();
        // Copy text
        document.execCommand('copy');
        // Delete element
        body.removeChild(copyFrom);
        // Set toast options
        this.options = {
            title: `#${color.hex}`,
            message: 'Copied to your clipboard',
            theme: color.variables[0],
            icon: 'clipboard',
            position: 'growlTopRight',
        };
        if (color.name === 'action') {
            this.options.theme = 'ocean';
        }
        // Fire toast
        this.toaster.alert(this.options);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: PrimaryColorsExample, deps: [{ token: i1$1.NovoToastService }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: PrimaryColorsExample, isStandalone: false, selector: "primary-colors-example", ngImport: i0, template: "<article class=\"color-blocks primary-colors\">\n  <div *ngFor=\"let color of primaryColors\" class=\"block\">\n      <div class=\"color-square bgc-{{color.variables[0]}}\" (click)=\"copyLink(color)\">\n        <h3 class=\"color-text\"><span>#</span>{{color.hex}}</h3>\n      </div>\n      <h6>{{color.name}}</h6>\n      <span class=\"vars\" *ngFor=\"let variable of color.variables\">${{variable}}</span>\n  </div>\n</article>\n", styles: [":host .color-blocks{display:flex;flex-direction:row;justify-content:flex-start;flex-wrap:wrap;align-items:flex-end;width:100%}:host .color-blocks .block{display:inline-block;text-align:center;width:25%;min-width:200px;position:relative;padding:20px}:host .color-blocks .block:active .color-square,:host .color-blocks .block:focus .color-square,:host .color-blocks .block:hover .color-square{transform:scale(1.125)}:host .color-blocks .block .color-square{border-radius:4px;height:150px;justify-content:center;align-items:center;display:flex;position:relative}:host .color-blocks .block .color-square.bgc-sand .color-text:after,:host .color-blocks .block .color-square.bgc-silver .color-text:after,:host .color-blocks .block .color-square.bgc-stone .color-text:after,:host .color-blocks .block .color-square.bgc-background .color-text:after,:host .color-blocks .block .color-square.bgc-background-dark .color-text:after,:host .color-blocks .block .color-square.bgc-empty .color-text:after{content:\"Click to copy\";position:absolute;color:#0009;left:50%;bottom:40px;font-size:10px;text-transform:uppercase;transform:translate(-50%);width:100%}:host .color-blocks .color-text:after{content:\"Click to copy\";position:absolute;color:#fff9;left:50%;bottom:40px;font-size:10px;text-transform:uppercase;transform:translate(-50%);width:100%}\n"], dependencies: [{ kind: "directive", type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: PrimaryColorsExample, decorators: [{
            type: Component,
            args: [{ selector: 'primary-colors-example', standalone: false, template: "<article class=\"color-blocks primary-colors\">\n  <div *ngFor=\"let color of primaryColors\" class=\"block\">\n      <div class=\"color-square bgc-{{color.variables[0]}}\" (click)=\"copyLink(color)\">\n        <h3 class=\"color-text\"><span>#</span>{{color.hex}}</h3>\n      </div>\n      <h6>{{color.name}}</h6>\n      <span class=\"vars\" *ngFor=\"let variable of color.variables\">${{variable}}</span>\n  </div>\n</article>\n", styles: [":host .color-blocks{display:flex;flex-direction:row;justify-content:flex-start;flex-wrap:wrap;align-items:flex-end;width:100%}:host .color-blocks .block{display:inline-block;text-align:center;width:25%;min-width:200px;position:relative;padding:20px}:host .color-blocks .block:active .color-square,:host .color-blocks .block:focus .color-square,:host .color-blocks .block:hover .color-square{transform:scale(1.125)}:host .color-blocks .block .color-square{border-radius:4px;height:150px;justify-content:center;align-items:center;display:flex;position:relative}:host .color-blocks .block .color-square.bgc-sand .color-text:after,:host .color-blocks .block .color-square.bgc-silver .color-text:after,:host .color-blocks .block .color-square.bgc-stone .color-text:after,:host .color-blocks .block .color-square.bgc-background .color-text:after,:host .color-blocks .block .color-square.bgc-background-dark .color-text:after,:host .color-blocks .block .color-square.bgc-empty .color-text:after{content:\"Click to copy\";position:absolute;color:#0009;left:50%;bottom:40px;font-size:10px;text-transform:uppercase;transform:translate(-50%);width:100%}:host .color-blocks .color-text:after{content:\"Click to copy\";position:absolute;color:#fff9;left:50%;bottom:40px;font-size:10px;text-transform:uppercase;transform:translate(-50%);width:100%}\n"] }]
        }], ctorParameters: () => [{ type: i1$1.NovoToastService }] });

/**
 * @title Security Example
 */
class SecurityExample {
    constructor(security) {
        this.security = security;
        this.perms = [];
    }
    shufflePermissions() {
        const numOfPerms = Math.floor(Math.random() * 2) + 1;
        this.perms = this.shuffle(['A', 'B', 'C']).slice(0, numOfPerms);
        this.security.clear();
        this.security.grant(this.perms);
    }
    shuffle(array) {
        let currentIndex = array.length;
        let temporaryValue;
        let randomIndex;
        // While there remain elements to shuffle...
        while (currentIndex !== 0) {
            // Pick a remaining element...
            randomIndex = Math.floor(Math.random() * currentIndex);
            currentIndex -= 1;
            // And swap it with the current element.
            temporaryValue = array[currentIndex];
            array[currentIndex] = array[randomIndex];
            array[randomIndex] = temporaryValue;
        }
        return array;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: SecurityExample, deps: [{ token: i1$1.Security }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: SecurityExample, isStandalone: false, selector: "security-example", ngImport: i0, template: "<div>\n    <p *bhUnless=\"'A'\">Shown if has permission <strong>A</strong></p>\n    <p *bhUnless=\"'B'\">Shown if has permission <strong>B</strong></p>\n    <p *bhUnless=\"'C'\">Shown if has permission <strong>C</strong></p>\n    <p *bhUnless=\"'A && B'\">Shown if has permissions <strong>A && B</strong></p>\n    <p *bhUnless=\"'A && C'\">Shown if has permissions <strong>A && C</strong></p>\n    <p *bhUnless=\"'A && B && C'\">Shown if has permissions <strong>A && B && C</strong></p>\n    <p *bhUnless=\"'A || B'\">Shown if has permissions <strong>A || B</strong></p>\n    <p> Permissions are : <strong>{{ perms | json }}</strong></p>\n    <button (click)=\"shufflePermissions()\">Shuffle</button>\n</div>\n", styles: [""], dependencies: [{ kind: "directive", type: i2$1.Unless, selector: "[bhUnless]", inputs: ["bhUnless"] }, { kind: "pipe", type: i2.JsonPipe, name: "json" }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: SecurityExample, decorators: [{
            type: Component,
            args: [{ selector: 'security-example', standalone: false, template: "<div>\n    <p *bhUnless=\"'A'\">Shown if has permission <strong>A</strong></p>\n    <p *bhUnless=\"'B'\">Shown if has permission <strong>B</strong></p>\n    <p *bhUnless=\"'C'\">Shown if has permission <strong>C</strong></p>\n    <p *bhUnless=\"'A && B'\">Shown if has permissions <strong>A && B</strong></p>\n    <p *bhUnless=\"'A && C'\">Shown if has permissions <strong>A && C</strong></p>\n    <p *bhUnless=\"'A && B && C'\">Shown if has permissions <strong>A && B && C</strong></p>\n    <p *bhUnless=\"'A || B'\">Shown if has permissions <strong>A || B</strong></p>\n    <p> Permissions are : <strong>{{ perms | json }}</strong></p>\n    <button (click)=\"shufflePermissions()\">Shuffle</button>\n</div>\n" }]
        }], ctorParameters: () => [{ type: i1$1.Security }] });

const DATA$1 = {
    tags: [
        { id: 1, name: 'OH YA!', test: 'TWO' },
        { id: 2, name: 'TAGGING!', test: 'ONE' },
    ],
    references: [
        { id: 1, title: 'Awesome Reference' },
        { id: 2, title: 'Angular2' },
    ],
};
class CustomQuickNoteResults extends QuickNoteResults {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: CustomQuickNoteResults, deps: null, target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: CustomQuickNoteResults, isStandalone: false, selector: "custom-quick-note-results", host: { classAttribute: "active quick-note-results" }, usesInheritance: true, ngImport: i0, template: `
    <novo-loading theme="line" *ngIf="isLoading && !matches.length"></novo-loading>
    <novo-list *ngIf="matches.length > 0">
      <novo-list-item
        *ngFor="let match of matches"
        (click)="selectMatch($event)"
        [class.active]="match === activeMatch"
        (mouseenter)="selectActive(match)"
      >
        <item-content> **CUSTOM** <b [innerHtml]="highlight(match.label, term)"></b> </item-content>
      </novo-list-item>
    </novo-list>
    <p class="picker-error" *ngIf="hasError">Oops! An error occured.</p>
    <p class="picker-null" *ngIf="!isLoading && !matches.length && !hasError">No results to display...</p>
  `, isInline: true, dependencies: [{ kind: "directive", type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i2$1.NovoLoadingElement, selector: "novo-loading", inputs: ["theme", "color", "size"] }, { kind: "component", type: i2$1.NovoListElement, selector: "novo-list", inputs: ["theme", "direction"] }, { kind: "component", type: i2$1.NovoListItemElement, selector: "novo-list-item, a[list-item], button[list-item]" }, { kind: "component", type: i2$1.NovoItemContentElement, selector: "item-content, novo-item-content", inputs: ["direction"] }, { kind: "directive", type: i2$1.ThemeColorDirective, selector: "[theme]", inputs: ["theme"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: CustomQuickNoteResults, decorators: [{
            type: Component,
            args: [{
                    selector: 'custom-quick-note-results',
                    host: {
                        class: 'active quick-note-results',
                    },
                    template: `
    <novo-loading theme="line" *ngIf="isLoading && !matches.length"></novo-loading>
    <novo-list *ngIf="matches.length > 0">
      <novo-list-item
        *ngFor="let match of matches"
        (click)="selectMatch($event)"
        [class.active]="match === activeMatch"
        (mouseenter)="selectActive(match)"
      >
        <item-content> **CUSTOM** <b [innerHtml]="highlight(match.label, term)"></b> </item-content>
      </novo-list-item>
    </novo-list>
    <p class="picker-error" *ngIf="hasError">Oops! An error occured.</p>
    <p class="picker-null" *ngIf="!isLoading && !matches.length && !hasError">No results to display...</p>
  `,
                    standalone: false
                }]
        }] });
/**
 * @title Custom Quick Note Results Example
 */
class CustomQuickNoteResultsExample {
    constructor() {
        this.placeholder = 'Enter your note text here. Reference people and distribution lists using @ (eg. @John Smith). Reference other records using # (e.g. #Project Manager)';
        this.customResults = {
            resultsTemplate: CustomQuickNoteResults,
            triggers: {
                names: '@',
                tags: '#',
            },
            options: {
                names: () => {
                    return new Promise((resolve) => {
                        setTimeout(() => {
                            resolve(DATA$1.tags);
                        }, 300);
                    });
                },
                tags: () => {
                    return new Promise((resolve) => {
                        setTimeout(() => {
                            resolve(DATA$1.references);
                        }, 300);
                    });
                },
            },
            format: {
                names: '$name',
                tags: '$title',
            },
            renderer: {
                names: (symbol, item) => {
                    return `<a href="http://www.bullhorn.com" class="names">${symbol}${item.label}</a>`;
                },
                tags: (symbol, item) => {
                    return `<a href="http://www.bullhorn.com" class="tags">${symbol}${item.label}</a>`;
                },
            },
        };
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: CustomQuickNoteResultsExample, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: CustomQuickNoteResultsExample, isStandalone: false, selector: "custom-quick-note-results-example", ngImport: i0, template: "<novo-quick-note [(ngModel)]=\"note\" [placeholder]=\"placeholder\" [config]=\"customResults\"></novo-quick-note>\n<div class=\"data\">\n    <p>Note: {{note | json}}</p>\n</div>\n", styles: [""], dependencies: [{ kind: "directive", type: i1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i1.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "component", type: i2$1.QuickNoteElement, selector: "novo-quick-note", inputs: ["config", "startupFocus", "placeholder"], outputs: ["focus", "blur", "change"] }, { kind: "pipe", type: i2.JsonPipe, name: "json" }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: CustomQuickNoteResultsExample, decorators: [{
            type: Component,
            args: [{ selector: 'custom-quick-note-results-example', standalone: false, template: "<novo-quick-note [(ngModel)]=\"note\" [placeholder]=\"placeholder\" [config]=\"customResults\"></novo-quick-note>\n<div class=\"data\">\n    <p>Note: {{note | json}}</p>\n</div>\n" }]
        }] });

const DATA = {
    tags: [
        { id: 1, name: 'OH YA!', test: 'TWO' },
        { id: 2, name: 'TAGGING!', test: 'ONE' },
    ],
    references: [
        { id: 1, title: 'Awesome Reference' },
        { id: 2, title: 'Angular2' },
    ],
};
/**
 * @title Custom Quick Note Example
 */
class CustomQuickNoteExample {
    constructor() {
        this.placeholder = 'Enter your note text here. Reference people and distribution lists using @ (eg. @John Smith). Reference other records using # (e.g. #Project Manager)';
        this.custom = {
            triggers: {
                whos: '@',
                whats: '#',
            },
            options: {
                whos: () => {
                    return new Promise((resolve) => {
                        setTimeout(() => {
                            resolve(DATA.tags);
                        }, 300);
                    });
                },
                whats: () => {
                    return new Promise((resolve) => {
                        setTimeout(() => {
                            resolve(DATA.references);
                        }, 300);
                    });
                },
            },
            format: {
                whos: '$name $test',
                whats: '$title',
            },
            renderer: {
                whos: (symbol, item) => {
                    return `<a href="http://www.bullhorn.com" class="WHOS">${symbol}${item.label}</a>`;
                },
                whats: (symbol, item) => {
                    return `<a href="http://www.bullhorn.com" class="tag">${symbol}${item.label}</a>`;
                },
            },
        };
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: CustomQuickNoteExample, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: CustomQuickNoteExample, isStandalone: false, selector: "custom-quick-note-example", ngImport: i0, template: "<novo-quick-note [(ngModel)]=\"note\" [placeholder]=\"placeholder\" [config]=\"custom\"></novo-quick-note>\n<div class=\"data\">\n    <p>Note: {{note | json}}</p>\n</div>\n", styles: [""], dependencies: [{ kind: "directive", type: i1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i1.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "component", type: i2$1.QuickNoteElement, selector: "novo-quick-note", inputs: ["config", "startupFocus", "placeholder"], outputs: ["focus", "blur", "change"] }, { kind: "pipe", type: i2.JsonPipe, name: "json" }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: CustomQuickNoteExample, decorators: [{
            type: Component,
            args: [{ selector: 'custom-quick-note-example', standalone: false, template: "<novo-quick-note [(ngModel)]=\"note\" [placeholder]=\"placeholder\" [config]=\"custom\"></novo-quick-note>\n<div class=\"data\">\n    <p>Note: {{note | json}}</p>\n</div>\n" }]
        }] });

/**
 * @title Basic Quick Note Example
 */
class BasicQuickNoteExample {
    constructor() {
        this.placeholder = 'Enter your note text here. Reference people and distribution lists using @ (eg. @John Smith). Reference other records using # (e.g. #Project Manager)';
        this.basic = {
            triggers: {
                tags: '@',
                references: '#',
                boos: '^',
            },
            options: {
                tags: ['First', 'Second', 'Space Between'],
                references: ['Third', 'Fourth'],
                boos: ['Test'],
            },
            renderer: {
                tags: (symbol, item) => {
                    return `<a href="https://www.google.com/search?q=bullhorn&oq=bullhorn">${symbol}${item.label}</a>`;
                },
                references: (symbol, item) => {
                    return `<a href="https://www.google.com/search?q=bullhorn&oq=bullhorn">${symbol}${item.label}</a>`;
                },
                boos: (symbol, item) => {
                    return `<strong>${symbol}${item.label}</strong>`;
                },
            },
        };
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: BasicQuickNoteExample, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: BasicQuickNoteExample, isStandalone: false, selector: "basic-quick-note-example", ngImport: i0, template: "<novo-quick-note [(ngModel)]=\"note\" [placeholder]=\"placeholder\" [config]=\"basic\"></novo-quick-note>\n<div class=\"data\">\n    <p>Note: {{note | json}}</p>\n</div>\n", styles: [""], dependencies: [{ kind: "directive", type: i1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i1.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "component", type: i2$1.QuickNoteElement, selector: "novo-quick-note", inputs: ["config", "startupFocus", "placeholder"], outputs: ["focus", "blur", "change"] }, { kind: "pipe", type: i2.JsonPipe, name: "json" }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: BasicQuickNoteExample, decorators: [{
            type: Component,
            args: [{ selector: 'basic-quick-note-example', standalone: false, template: "<novo-quick-note [(ngModel)]=\"note\" [placeholder]=\"placeholder\" [config]=\"basic\"></novo-quick-note>\n<div class=\"data\">\n    <p>Note: {{note | json}}</p>\n</div>\n" }]
        }] });

/**
 * @title Pluralize Example
 */
class PluralizeExample {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: PluralizeExample, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: PluralizeExample, isStandalone: false, selector: "pluralize-example", ngImport: i0, template: "<p>{{'Kitty' | plural}}</p>\n<p>{{'Cat' | plural}}</p>\n", styles: [""], dependencies: [{ kind: "pipe", type: i1$1.PluralPipe, name: "plural" }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: PluralizeExample, decorators: [{
            type: Component,
            args: [{ selector: 'pluralize-example', standalone: false, template: "<p>{{'Kitty' | plural}}</p>\n<p>{{'Cat' | plural}}</p>\n" }]
        }] });

/**
 * @title Fi Validation Example
 */
class FiValidationExample {
    constructor(formUtils) {
        this.formUtils = formUtils;
        this.form = {};
        this.controls = {};
        this.isUserModified = false;
        const validationFunction = (API) => {
            console.log('[FieldInteractionDemo] - validationFunction'); // tslint:disable-line
            const activeValue = API.getActiveValue();
            if (activeValue > 10) {
                API.markAsInvalid(API.getActiveKey(), 'Too high! Make it a lot lower!!');
            }
            this.isUserModified = !API.isInvokedOnInit;
        };
        // Validation Field Interactions
        this.controls.validationControl = new TextBoxControl({
            type: 'number',
            key: 'validation',
            value: 5,
            label: 'Validation Test',
            description: 'Try to input a number larger then 10!',
            interactions: [{ event: 'change', script: validationFunction, invokeOnInit: true }],
        });
        this.form = formUtils.toFormGroup([this.controls.validationControl]);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: FiValidationExample, deps: [{ token: i1$1.FormUtils }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: FiValidationExample, isStandalone: false, selector: "fi-validation-example", ngImport: i0, template: "<novo-form [form]=\"form\" layout=\"vertical\">\n    <div class=\"novo-form-row\">\n        <novo-control [form]=\"form\" [control]=\"controls.validationControl\"></novo-control>\n    </div>\n</novo-form>\n<div class=\"final-value\">Form Value - {{ form.value | json }}</div>\n<div class=\"final-value\">Form Dirty - {{ form.dirty | json }}</div>\n<div class=\"final-value\">Is Form Valid? - {{ form.valid | json }}</div>\n<div class=\"final-value\">Is User Modified? - {{ isUserModified }}</div>\n", styles: [""], dependencies: [{ kind: "component", type: i2$1.NovoControlElement, selector: "novo-control", inputs: ["control", "form", "condensed", "autoFocus"], outputs: ["change", "edit", "save", "delete", "upload", "blur", "focus"] }, { kind: "component", type: i2$1.NovoFormElement, selector: "novo-form", inputs: ["form", "layout", "hideHeader"] }, { kind: "pipe", type: i2.JsonPipe, name: "json" }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: FiValidationExample, decorators: [{
            type: Component,
            args: [{ selector: 'fi-validation-example', standalone: false, template: "<novo-form [form]=\"form\" layout=\"vertical\">\n    <div class=\"novo-form-row\">\n        <novo-control [form]=\"form\" [control]=\"controls.validationControl\"></novo-control>\n    </div>\n</novo-form>\n<div class=\"final-value\">Form Value - {{ form.value | json }}</div>\n<div class=\"final-value\">Form Dirty - {{ form.dirty | json }}</div>\n<div class=\"final-value\">Is Form Valid? - {{ form.valid | json }}</div>\n<div class=\"final-value\">Is User Modified? - {{ isUserModified }}</div>\n" }]
        }], ctorParameters: () => [{ type: i1$1.FormUtils }] });

/**
 * @title Fi Tooltip Example
 */
class FiTooltipExample {
    constructor(formUtils) {
        this.formUtils = formUtils;
        this.form = {};
        this.controls = {};
        const tooltipFunction = (API) => {
            console.log('[FieldInteractionDemo] - tooltipFunction'); // tslint:disable-line
            API.setTooltip(API.getActiveKey(), API.getActiveValue());
        };
        const tooltipUpdateFunction = (API) => {
            console.log('[FieldInteractionDemo] - tooltipUpdateFunction'); // tslint:disable-line
            API.getControl(this.controls.tooltipControl.key).tooltipSize = API.getValue(this.controls.tooltipSizeControl.key);
            API.getControl(this.controls.tooltipControl.key).tooltipPreline = API.getValue(this.controls.tooltipPrelineControl.key);
        };
        // Tooltip Field Interactions
        this.controls.tooltipControl = new TextBoxControl({
            type: 'text',
            key: 'toolTipValue',
            label: 'Tooltip',
            description: 'I will add a tooltip to this control as a value is typed',
            interactions: [{ event: 'change', script: tooltipFunction }],
        });
        this.controls.tooltipSizeControl = new TilesControl({
            key: 'tooltipSize',
            label: 'Tooltip Size',
            description: 'Changing me will set a fixed width on the tooltip',
            options: [
                { value: 'small', label: 'Small' },
                { value: 'medium', label: 'Medium' },
                { value: 'large', label: 'Large' },
            ],
            interactions: [{ event: 'change', script: tooltipUpdateFunction }],
        });
        this.controls.tooltipPrelineControl = new TilesControl({
            key: 'tooltipPreline',
            label: 'Tooltip Multiline',
            description: 'Should the tooltip be multiple lines tall or all on one line?',
            options: [
                { value: true, label: 'Yes' },
                { value: false, label: 'No' },
            ],
            interactions: [{ event: 'change', script: tooltipUpdateFunction }],
        });
        this.form = formUtils.toFormGroup([
            this.controls.tooltipControl,
            this.controls.tooltipSizeControl,
            this.controls.tooltipPrelineControl,
        ]);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: FiTooltipExample, deps: [{ token: i1$1.FormUtils }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: FiTooltipExample, isStandalone: false, selector: "fi-tooltip-example", ngImport: i0, template: "<novo-form [form]=\"form\" layout=\"vertical\">\n  <div class=\"novo-form-row\">\n      <novo-control [form]=\"form\" [control]=\"controls.tooltipControl\"></novo-control>\n  </div>\n  <div class=\"novo-form-row\">\n      <novo-control [form]=\"form\" [control]=\"controls.tooltipSizeControl\"></novo-control>\n  </div>\n  <div class=\"novo-form-row\">\n      <novo-control [form]=\"form\" [control]=\"controls.tooltipPrelineControl\"></novo-control>\n  </div>\n</novo-form>\n<div class=\"final-value\">Form Value - {{ form.value | json }}</div>\n<div class=\"final-value\">Form Dirty - {{ form.dirty | json }}</div>\n<div class=\"final-value\">Is Form Valid? - {{ form.valid | json }}</div>\n", styles: [""], dependencies: [{ kind: "component", type: i2$1.NovoControlElement, selector: "novo-control", inputs: ["control", "form", "condensed", "autoFocus"], outputs: ["change", "edit", "save", "delete", "upload", "blur", "focus"] }, { kind: "component", type: i2$1.NovoFormElement, selector: "novo-form", inputs: ["form", "layout", "hideHeader"] }, { kind: "pipe", type: i2.JsonPipe, name: "json" }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: FiTooltipExample, decorators: [{
            type: Component,
            args: [{ selector: 'fi-tooltip-example', standalone: false, template: "<novo-form [form]=\"form\" layout=\"vertical\">\n  <div class=\"novo-form-row\">\n      <novo-control [form]=\"form\" [control]=\"controls.tooltipControl\"></novo-control>\n  </div>\n  <div class=\"novo-form-row\">\n      <novo-control [form]=\"form\" [control]=\"controls.tooltipSizeControl\"></novo-control>\n  </div>\n  <div class=\"novo-form-row\">\n      <novo-control [form]=\"form\" [control]=\"controls.tooltipPrelineControl\"></novo-control>\n  </div>\n</novo-form>\n<div class=\"final-value\">Form Value - {{ form.value | json }}</div>\n<div class=\"final-value\">Form Dirty - {{ form.dirty | json }}</div>\n<div class=\"final-value\">Is Form Valid? - {{ form.valid | json }}</div>\n" }]
        }], ctorParameters: () => [{ type: i1$1.FormUtils }] });

/**
 * @title Fi Required Example
 */
class FiRequiredExample {
    constructor(formUtils) {
        this.form = {};
        this.controls = {};
        const requiredFunction = (API) => {
            console.log('[FieldInteractionDemo] - requiredFunction'); // tslint:disable-line
            const activeValue = API.getActiveValue();
            if (activeValue) {
                API.setRequired('required', true);
            }
            else {
                API.setRequired('required', false);
            }
        };
        // Required Field Interactions
        this.controls.requiredControl = new TextBoxControl({
            type: 'text',
            key: 'required',
            label: 'Test',
            description: 'I may or may not be required, play with the checkbox below!',
        });
        this.controls.toggleControl = new CheckboxControl({
            key: 'toggle',
            label: 'Required?',
            interactions: [{ event: 'change', script: requiredFunction }],
        });
        this.form = formUtils.toFormGroup([this.controls.requiredControl, this.controls.toggleControl]);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: FiRequiredExample, deps: [{ token: i1$1.FormUtils }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: FiRequiredExample, isStandalone: false, selector: "fi-required-example", ngImport: i0, template: "<novo-form [form]=\"form\" layout=\"vertical\">\n    <div class=\"novo-form-row\">\n        <novo-control [form]=\"form\" [control]=\"controls.requiredControl\"></novo-control>\n    </div>\n    <div class=\"novo-form-row\">\n        <novo-control [form]=\"form\" [control]=\"controls.toggleControl\"></novo-control>\n    </div>\n</novo-form>\n<div class=\"final-value\">Form Value - {{ form.value | json }}</div>\n<div class=\"final-value\">Form Dirty - {{ form.dirty | json }}</div>\n<div class=\"final-value\">Is Form Valid? - {{ form.valid | json }}</div>\n", styles: [""], dependencies: [{ kind: "component", type: i2$1.NovoControlElement, selector: "novo-control", inputs: ["control", "form", "condensed", "autoFocus"], outputs: ["change", "edit", "save", "delete", "upload", "blur", "focus"] }, { kind: "component", type: i2$1.NovoFormElement, selector: "novo-form", inputs: ["form", "layout", "hideHeader"] }, { kind: "pipe", type: i2.JsonPipe, name: "json" }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: FiRequiredExample, decorators: [{
            type: Component,
            args: [{ selector: 'fi-required-example', standalone: false, template: "<novo-form [form]=\"form\" layout=\"vertical\">\n    <div class=\"novo-form-row\">\n        <novo-control [form]=\"form\" [control]=\"controls.requiredControl\"></novo-control>\n    </div>\n    <div class=\"novo-form-row\">\n        <novo-control [form]=\"form\" [control]=\"controls.toggleControl\"></novo-control>\n    </div>\n</novo-form>\n<div class=\"final-value\">Form Value - {{ form.value | json }}</div>\n<div class=\"final-value\">Form Dirty - {{ form.dirty | json }}</div>\n<div class=\"final-value\">Is Form Valid? - {{ form.valid | json }}</div>\n" }]
        }], ctorParameters: () => [{ type: i1$1.FormUtils }] });

/**
 * @title Fi Popover Example
 */
class FiPopoverExample {
    constructor(formUtils) {
        this.formUtils = formUtils;
        this.form = {};
        this.controls = {};
        const popoverUpdateFunction = (API) => {
            console.log('[FieldInteractionDemo] - popoverUpdateFunction'); // tslint:disable-line
            for (const key in this.controls) {
                API.setPopOver(this.controls[key].key, {
                    title: API.getValue(this.controls.popoverTitleControl.key),
                    content: API.getValue(this.controls.popoverContentControl.key),
                    htmlContent: API.getValue(this.controls.popoverHtmlContentControl.key),
                    onHover: API.getValue(this.controls.popoverOnHoverControl.key),
                    placement: API.getValue(this.controls.popoverPlacementControl.key),
                });
            }
        };
        // Popover Field Interactions
        this.controls.popoverTitleControl = new TextBoxControl({
            type: 'text',
            key: 'popoverTitle',
            label: 'Title',
            value: 'Pop Over Title',
            description: 'I will add a popover title to the popover as a value is typed.',
            interactions: [{ event: 'change', invokeOnInit: true, script: popoverUpdateFunction }],
        });
        this.controls.popoverContentControl = new TextBoxControl({
            type: 'text',
            key: 'popoverContent',
            label: 'Content',
            value: 'Pop Over Content',
            description: 'I will add string content to the popover as a value is typed.',
            interactions: [{ event: 'change', script: popoverUpdateFunction }],
        });
        this.controls.popoverHtmlContentControl = new TextBoxControl({
            type: 'text',
            key: 'popoverHtmlContent',
            label: 'HTML Content',
            value: '',
            description: 'I will inject HTML content instead of the string content to the popover if specified.',
            interactions: [{ event: 'change', script: popoverUpdateFunction }],
        });
        this.controls.popoverOnHoverControl = new TilesControl({
            key: 'popoverOnHover',
            label: 'Popover On Hover',
            value: true,
            description: 'I will make the popover shown on hover over instead of on click.',
            options: [
                { value: true, label: 'Yes' },
                { value: false, label: 'No' },
            ],
            interactions: [{ event: 'change', script: popoverUpdateFunction }],
        });
        this.controls.popoverPlacementControl = new TilesControl({
            key: 'popoverPlacement',
            label: 'Popover Placement',
            description: 'I will change the positioning of the popover.',
            value: 'bottom',
            options: [
                { value: 'left', label: 'Left' },
                { value: 'right', label: 'Right' },
                { value: 'top', label: 'Top' },
                { value: 'bottom', label: 'Bottom' },
            ],
            interactions: [{ event: 'change', script: popoverUpdateFunction }],
        });
        this.form = formUtils.toFormGroup([
            this.controls.popoverTitleControl,
            this.controls.popoverContentControl,
            this.controls.popoverHtmlContentControl,
            this.controls.popoverOnHoverControl,
            this.controls.popoverPlacementControl,
        ]);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: FiPopoverExample, deps: [{ token: i1$1.FormUtils }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: FiPopoverExample, isStandalone: false, selector: "fi-popover-example", ngImport: i0, template: "<novo-form [form]=\"form\" layout=\"vertical\">\n  <div class=\"novo-form-row\">\n      <novo-control [form]=\"form\" [control]=\"controls.popoverTitleControl\"></novo-control>\n  </div>\n  <div class=\"novo-form-row\">\n      <novo-control [form]=\"form\" [control]=\"controls.popoverContentControl\"></novo-control>\n  </div>\n  <div class=\"novo-form-row\">\n      <novo-control [form]=\"form\" [control]=\"controls.popoverHtmlContentControl\"></novo-control>\n  </div>\n  <div class=\"novo-form-row\">\n      <novo-control [form]=\"form\" [control]=\"controls.popoverOnHoverControl\"></novo-control>\n  </div>\n  <div class=\"novo-form-row\">\n      <novo-control [form]=\"form\" [control]=\"controls.popoverPlacementControl\"></novo-control>\n  </div>\n</novo-form>\n<div class=\"final-value\">Form Value - {{ form.value | json }}</div>\n<div class=\"final-value\">Form Dirty - {{ form.dirty | json }}</div>\n<div class=\"final-value\">Is Form Valid? - {{ form.valid | json }}</div>\n", styles: [""], dependencies: [{ kind: "component", type: i2$1.NovoControlElement, selector: "novo-control", inputs: ["control", "form", "condensed", "autoFocus"], outputs: ["change", "edit", "save", "delete", "upload", "blur", "focus"] }, { kind: "component", type: i2$1.NovoFormElement, selector: "novo-form", inputs: ["form", "layout", "hideHeader"] }, { kind: "pipe", type: i2.JsonPipe, name: "json" }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: FiPopoverExample, decorators: [{
            type: Component,
            args: [{ selector: 'fi-popover-example', standalone: false, template: "<novo-form [form]=\"form\" layout=\"vertical\">\n  <div class=\"novo-form-row\">\n      <novo-control [form]=\"form\" [control]=\"controls.popoverTitleControl\"></novo-control>\n  </div>\n  <div class=\"novo-form-row\">\n      <novo-control [form]=\"form\" [control]=\"controls.popoverContentControl\"></novo-control>\n  </div>\n  <div class=\"novo-form-row\">\n      <novo-control [form]=\"form\" [control]=\"controls.popoverHtmlContentControl\"></novo-control>\n  </div>\n  <div class=\"novo-form-row\">\n      <novo-control [form]=\"form\" [control]=\"controls.popoverOnHoverControl\"></novo-control>\n  </div>\n  <div class=\"novo-form-row\">\n      <novo-control [form]=\"form\" [control]=\"controls.popoverPlacementControl\"></novo-control>\n  </div>\n</novo-form>\n<div class=\"final-value\">Form Value - {{ form.value | json }}</div>\n<div class=\"final-value\">Form Dirty - {{ form.dirty | json }}</div>\n<div class=\"final-value\">Is Form Valid? - {{ form.valid | json }}</div>\n" }]
        }], ctorParameters: () => [{ type: i1$1.FormUtils }] });

/**
 * @title Fi Nested Form Example
 */
class FiNestedExample {
    constructor(formUtils) {
        this.formUtils = formUtils;
        this.initialValue = [
            { selected: true, label: `First Shift`, multiplier: 1, payRate: 40 },
            { selected: false, label: ``, multiplier: 1.5, payRate: 60 },
            { selected: false, label: ``, multiplier: 2.0, payRate: 80 },
        ];
        const onMinMaxPayRateChanged = (API) => {
            // Validate the min/max range
            const minPayRate = Number(API.getValue('minPayRate'));
            const maxPayRate = Number(API.getValue('maxPayRate'));
            if (minPayRate > maxPayRate) {
                API.markAsInvalid(API.getActiveKey(), 'Range is invalid. Please ensure that the minimum does not exceed the maximum.');
                API.displayTip('minPayRate', 'Range is invalid. Please ensure that the minimum does not exceed the maximum.', 'caution');
            }
            else {
                // The API.form is equal the top level form since the min/max fields are directly on the form, not part of a nested form
                this.calculatePayRates(API, API.form);
                API.clearTip('minPayRate');
            }
        };
        const onSelectedChanged = (API) => {
            // If my row is selected, deselect other rows without causing cascading changes
            if (API.getActiveValue() === true) {
                API.getParent().controls.forEach((form) => {
                    if (API.getIndex() !== API.getIndex(form)) {
                        API.setValue(API.getActiveKey(), false, { emitEvent: false }, form);
                    }
                });
            }
        };
        const onLabelChanged = (API) => {
            // Update the labels for the Overtime/Double Time earn codes
            if (API.getIndex() === 0) {
                const overtimeForm = API.getParent().controls[1];
                const doubleTimeForm = API.getParent().controls[2];
                if (overtimeForm) {
                    API.setValue(API.getActiveKey(), API.getActiveValue() + ' - OT', { emitEvent: false }, overtimeForm);
                    // Highlight value to show that it has been automatically updated
                    API.highlight(API.getActiveKey(), true, overtimeForm);
                }
                if (doubleTimeForm) {
                    API.setValue(API.getActiveKey(), API.getActiveValue() + ' - DT', { emitEvent: false }, doubleTimeForm);
                    // Highlight value to show that it has been automatically updated
                    API.highlight(API.getActiveKey(), true, doubleTimeForm);
                }
            }
            else {
                // Remove highlight since it is being changed by the user. Highlights can be used for any purpose, it doesn't have to be as in this example.
                API.highlight(API.getActiveKey(), false);
            }
        };
        const onMultiplierChanged = (API) => {
            // Disable the base rate multiplier since it is fixed at one
            API.setReadOnly(API.getActiveKey(), API.getIndex() === 0);
            // The parent of this nested row form is the rows form array, and the grandparent is the main form object
            const rowsFormArray = API.getParent();
            const topLevelForm = API.getParent(rowsFormArray);
            this.calculatePayRates(API, topLevelForm);
        };
        const onPayRateChanged = (API) => {
            // Disable the non-base rate payRates since they are auto calculated
            API.setReadOnly(API.getActiveKey(), API.getIndex() > 0);
            // The parent of this nested row form is the rows form array, and the grandparent is the main form object
            const rowsFormArray = API.getParent();
            const topLevelForm = API.getParent(rowsFormArray);
            this.calculatePayRates(API, topLevelForm);
        };
        this.minPayRateControl = new TextBoxControl({
            key: 'minPayRate',
            type: 'currency',
            label: 'Minimum Pay Rate',
            value: 20,
            currencyFormat: '$ USD',
            interactions: [{ event: 'change', script: onMinMaxPayRateChanged }],
            tooltip: 'If the value of any pay rates are below this value then the form will be marked invalid.',
        });
        this.maxPayRateControl = new TextBoxControl({
            key: 'maxPayRate',
            type: 'currency',
            label: 'Maximum Pay Rate',
            value: 80,
            tooltip: 'If the value of any pay rates are above this value then the form will be marked invalid.',
            currencyFormat: '$ USD',
            interactions: [{ event: 'change', script: onMinMaxPayRateChanged }],
            tipWell: {
                tip: 'This form is interactive! Try adjusting the min/max and pay rates to see the custom form validation logic that is enabled by field interactions across nested forms.',
                icon: 'info',
            },
        });
        this.form = formUtils.toFormGroup([this.minPayRateControl, this.maxPayRateControl]);
        this.controls = [
            new RadioControl({
                key: 'selected',
                label: 'Selected',
                options: [{ label: '', value: true }],
                interactions: [{ event: 'change', script: onSelectedChanged }],
                tooltip: 'Selecting a radio button will de-select buttons on the other forms, making multiple nested forms appear as a single form.',
            }),
            new TextBoxControl({
                key: 'label',
                label: 'Earn Code',
                required: true,
                interactions: [{ invokeOnInit: true, event: 'change', script: onLabelChanged }],
                tooltip: 'Labels on other nested forms will be updated based on this label.',
            }),
            new TextBoxControl({
                key: 'multiplier',
                label: 'Multiplier',
                type: 'bigdecimal',
                required: true,
                interactions: [{ invokeOnInit: true, event: 'change', script: onMultiplierChanged }],
                tooltip: 'Updating the multiplier will auto calculate the resulting pay rate.',
            }),
            new TextBoxControl({
                key: 'payRate',
                label: 'Pay Rate',
                type: 'currency',
                required: true,
                interactions: [{ invokeOnInit: true, event: 'change', script: onPayRateChanged }],
                currencyFormat: '$ USD',
            }),
        ];
    }
    calculatePayRates(API, topLevelForm) {
        // Get values from the top level form controls
        const minPayRate = Number(API.getValue('minPayRate', topLevelForm));
        const maxPayRate = Number(API.getValue('maxPayRate', topLevelForm));
        // Walk down to the nested forms: 'rows' is the key input value passed to the NovoControlGroup for constructing the formArray
        const rowForms = API.getFormGroupArray('rows', topLevelForm);
        const baseRowForm = rowForms[0];
        const basePayRate = Number(API.getValue('payRate', baseRowForm));
        let isPayRateValid = true;
        rowForms.forEach((form) => {
            // Calculate the payRate for read only Overtime / Double time fields
            if (API.getIndex(form) > 0) {
                const multiplier = Number(API.getValue('multiplier', form));
                API.setValue('payRate', basePayRate * multiplier, { emitEvent: false }, form);
            }
            // Determine if each pay rate is valid. Put a tipWell on the invalid rows.
            const payRate = Number(API.getValue('payRate', form));
            if (payRate < minPayRate) {
                isPayRateValid = false;
                API.displayTip('payRate', 'rate is below the minimum', 'caution', false, false, form);
            }
            else if (payRate > maxPayRate) {
                isPayRateValid = false;
                API.displayTip('payRate', 'rate exceeds the maximum', 'caution', false, false, form);
            }
            else {
                API.clearTip('payRate', form);
            }
        });
        // Mark the editable row as invalid if any nested payRate form has a value outside of the min/max bounds
        if (isPayRateValid) {
            API.markAsValid('payRate', baseRowForm);
        }
        else {
            API.markAsInvalid('payRate', 'pay rate is less than the minimum pay rate', baseRowForm);
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: FiNestedExample, deps: [{ token: i1$1.FormUtils }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: FiNestedExample, isStandalone: false, selector: "fi-nested-example", ngImport: i0, template: "<novo-form [form]=\"form\">\n  <div class=\"novo-form-row\">\n    <novo-control [form]=\"form\" [control]=\"minPayRateControl\"></novo-control>\n  </div>\n  <div class=\"novo-form-row\">\n    <novo-control [form]=\"form\" [control]=\"maxPayRateControl\"></novo-control>\n  </div>\n  <novo-control-group [form]=\"form\"\n                      [controls]=\"controls\"\n                      [initialValue]=\"initialValue\"\n                      remove=\"false\"\n                      edit=\"false\"\n                      key=\"rows\"></novo-control-group>\n</novo-form>\n\n<div class=\"final-value\">Form Value - <pre>{{ form.value | json }}</pre></div>\n<div class=\"final-value\">Form Dirty - {{ form.dirty }}</div>\n<div class=\"final-value\">Is Form Valid? - {{ form.valid }}</div>\n", styles: [""], dependencies: [{ kind: "component", type: i2$1.NovoControlElement, selector: "novo-control", inputs: ["control", "form", "condensed", "autoFocus"], outputs: ["change", "edit", "save", "delete", "upload", "blur", "focus"] }, { kind: "component", type: i2$1.NovoFormElement, selector: "novo-form", inputs: ["form", "layout", "hideHeader"] }, { kind: "component", type: i2$1.NovoControlGroup, selector: "novo-control-group", inputs: ["appearance", "vertical", "stacked", "add", "remove", "edit", "collapsible", "form", "controls", "key", "label", "description", "emptyMessage", "icon", "editIcon", "removeIcon", "initialValue", "canEdit", "canRemove", "shouldRemove", "rowTemplate", "columnLabelTemplate"], outputs: ["onRemove", "onEdit", "onAdd", "change"] }, { kind: "pipe", type: i2.JsonPipe, name: "json" }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: FiNestedExample, decorators: [{
            type: Component,
            args: [{ selector: 'fi-nested-example', standalone: false, template: "<novo-form [form]=\"form\">\n  <div class=\"novo-form-row\">\n    <novo-control [form]=\"form\" [control]=\"minPayRateControl\"></novo-control>\n  </div>\n  <div class=\"novo-form-row\">\n    <novo-control [form]=\"form\" [control]=\"maxPayRateControl\"></novo-control>\n  </div>\n  <novo-control-group [form]=\"form\"\n                      [controls]=\"controls\"\n                      [initialValue]=\"initialValue\"\n                      remove=\"false\"\n                      edit=\"false\"\n                      key=\"rows\"></novo-control-group>\n</novo-form>\n\n<div class=\"final-value\">Form Value - <pre>{{ form.value | json }}</pre></div>\n<div class=\"final-value\">Form Dirty - {{ form.dirty }}</div>\n<div class=\"final-value\">Is Form Valid? - {{ form.valid }}</div>\n" }]
        }], ctorParameters: () => [{ type: i1$1.FormUtils }] });

/**
 * @title Fi Modify Options Example
 */
class FiModifyOptionsExample {
    constructor(formUtils) {
        this.formUtils = formUtils;
        this.form = {};
        this.controls = {};
        const modifyOptionsAddFunction = (API) => {
            console.log('[FieldInteractionDemo] - modifyOptionsAddFunction'); // tslint:disable-line
            const currentValue = API.getActiveValue();
            if (!currentValue) {
                API.removeStaticOption('select', 'NEW');
                API.removeStaticOption('picker', 'NEW');
            }
            else {
                API.addStaticOption('select', 'NEW');
                API.addStaticOption('select', 'NEW'); // Duplicate options will be ignored
                API.addStaticOption('picker', 'NEW');
            }
        };
        const modifyOptionsAsyncFunction = (API) => {
            console.log('[FieldInteractionDemo] - modifyOptionsAsyncFunction'); // tslint:disable-line
            const currentValue = API.getActiveValue();
            switch (currentValue) {
                case 1:
                    // Static
                    API.setProperty('picker', 'label', 'Static Picker');
                    API.modifyPickerConfig('picker', {
                        options: ['A', 'B', 'C'],
                    });
                    break;
                case 2:
                    // Async with Options URL
                    API.setProperty('picker', 'label', 'Async Picker (with options url)');
                    API.modifyPickerConfig('picker', {
                        format: '$name $test',
                        optionsUrl: 'http://novo-elements-mock.getsandbox.com/users',
                    }, function (result) {
                        result.test = 'Built with Options URL!';
                        return result;
                    });
                    break;
                case 3:
                    // Async with Options URL Builder
                    API.setProperty('picker', 'label', 'Async Picker (with options url builder)');
                    API.modifyPickerConfig('picker', {
                        format: '$name $test',
                        optionsUrlBuilder: (query) => {
                            return 'http://novo-elements-mock.getsandbox.com/users';
                        },
                    }, function (result) {
                        result.test = 'Built with Options URL Builder!';
                        return result;
                    });
                    break;
                case 4:
                    // Async with Options Promise
                    API.setProperty('picker', 'label', 'Async Picker (with options promise)');
                    API.modifyPickerConfig('picker', {
                        format: '$name $test',
                        optionsPromise(query, http) {
                            return new Promise(function (resolve, reject) {
                                if (query && query.length) {
                                    http
                                        .get('http://novo-elements-mock.getsandbox.com/users')
                                        .map(function (results) {
                                        return results.map((result) => {
                                            result.test = 'Built with Options Promise';
                                            return result;
                                        });
                                    })
                                        .subscribe(resolve, reject);
                                }
                                else {
                                    resolve(['DEFAULT']);
                                }
                            });
                        },
                    });
                    break;
                default:
                    break;
            }
        };
        // Modify Options Field Interactions
        this.controls.selectControl = new SelectControl({
            key: 'select',
            label: 'Select',
            options: ['A', 'B', 'C'],
        });
        this.controls.pickerControl = new PickerControl({
            key: 'picker',
            label: 'Static Picker',
            config: {
                options: ['A', 'B', 'C'],
            },
        });
        this.controls.toggleControl = new CheckboxControl({
            key: 'toggle',
            label: 'Add Option?',
            description: 'I will add options to the above field!',
            interactions: [{ event: 'change', script: modifyOptionsAddFunction }],
        });
        this.controls.makePickerAsyncControl = new SelectControl({
            key: 'async',
            label: 'Async Picker?',
            description: 'I will make the picker now hit a service!',
            value: 1,
            options: [
                { label: 'Not Async', value: 1 },
                { label: 'Async With Options URL', value: 2 },
                { label: 'Async With Options URL Builder', value: 3 },
                { label: 'Async With Options Promise', value: 4 },
            ],
            interactions: [{ event: 'change', script: modifyOptionsAsyncFunction }],
        });
        this.form = formUtils.toFormGroup([
            this.controls.selectControl,
            this.controls.pickerControl,
            this.controls.toggleControl,
            this.controls.makePickerAsyncControl,
        ]);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: FiModifyOptionsExample, deps: [{ token: i1$1.FormUtils }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: FiModifyOptionsExample, isStandalone: false, selector: "fi-modify-options-example", ngImport: i0, template: "<novo-form [form]=\"form\" layout=\"vertical\">\n    <div class=\"novo-form-row\">\n        <novo-control [form]=\"form\" [control]=\"controls.selectControl\"></novo-control>\n    </div>\n    <div class=\"novo-form-row\">\n        <novo-control [form]=\"form\" [control]=\"controls.pickerControl\"></novo-control>\n    </div>\n    <div class=\"novo-form-row\">\n        <novo-control [form]=\"form\" [control]=\"controls.toggleControl\"></novo-control>\n    </div>\n    <div class=\"novo-form-row\">\n        <novo-control [form]=\"form\" [control]=\"controls.makePickerAsyncControl\"></novo-control>\n    </div>\n</novo-form>\n<div class=\"final-value\">Form Value - {{ form.value | json }}</div>\n<div class=\"final-value\">Form Dirty - {{ form.dirty | json }}</div>\n<div class=\"final-value\">Is Form Valid? - {{ form.valid | json }}</div>\n", styles: [""], dependencies: [{ kind: "component", type: i2$1.NovoControlElement, selector: "novo-control", inputs: ["control", "form", "condensed", "autoFocus"], outputs: ["change", "edit", "save", "delete", "upload", "blur", "focus"] }, { kind: "component", type: i2$1.NovoFormElement, selector: "novo-form", inputs: ["form", "layout", "hideHeader"] }, { kind: "pipe", type: i2.JsonPipe, name: "json" }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: FiModifyOptionsExample, decorators: [{
            type: Component,
            args: [{ selector: 'fi-modify-options-example', standalone: false, template: "<novo-form [form]=\"form\" layout=\"vertical\">\n    <div class=\"novo-form-row\">\n        <novo-control [form]=\"form\" [control]=\"controls.selectControl\"></novo-control>\n    </div>\n    <div class=\"novo-form-row\">\n        <novo-control [form]=\"form\" [control]=\"controls.pickerControl\"></novo-control>\n    </div>\n    <div class=\"novo-form-row\">\n        <novo-control [form]=\"form\" [control]=\"controls.toggleControl\"></novo-control>\n    </div>\n    <div class=\"novo-form-row\">\n        <novo-control [form]=\"form\" [control]=\"controls.makePickerAsyncControl\"></novo-control>\n    </div>\n</novo-form>\n<div class=\"final-value\">Form Value - {{ form.value | json }}</div>\n<div class=\"final-value\">Form Dirty - {{ form.dirty | json }}</div>\n<div class=\"final-value\">Is Form Valid? - {{ form.valid | json }}</div>\n" }]
        }], ctorParameters: () => [{ type: i1$1.FormUtils }] });

/**
 * @title Fi Modify Added Picker Example
 */
class FiModifyAddedPickerExample {
    constructor(formUtils) {
        this.formUtils = formUtils;
        this.controls = {};
        // Adding / Removing Interactions
        const entityPickerFunction = (API) => {
            console.log('[FieldInteractionDemo] - entityPickerFunction'); // tslint:disable-line
            API.modifyPickerConfig('custom-entity-picker', {
                optionsPromise: (query, http) => {
                    return new Promise(function (resolve, reject) {
                        if (query && query.length) {
                            http
                                .get('http://novo-elements-mock.getsandbox.com/users')
                                .map(function (results) {
                                return results.map((result) => {
                                    // Setting the searchEntity on the item is important. We use it to format your display properly.
                                    // Valid options are: Candidate, ClientContact, ClientCorporation, CorporateUser, JobOrder, Lead, Opportunity, and Placement
                                    result.searchEntity = 'Candidate';
                                    return result;
                                });
                            })
                                .subscribe(resolve, reject);
                        }
                        else {
                            resolve(['DEFAULT']);
                        }
                    });
                },
                format: '$name',
                // This is how we set the picker to be of an entity type
                resultsTemplateType: 'entity-picker',
            });
        };
        this.controls.pickerControl = new PickerControl({
            key: 'custom-entity-picker',
            name: 'custom-entity-picker',
            config: {
                options: [],
            },
            label: 'Custom Entity Picker',
            interactions: [{ event: 'init', script: entityPickerFunction }],
        });
        this.form = this.formUtils.toFormGroup([this.controls.pickerControl]);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: FiModifyAddedPickerExample, deps: [{ token: i1$1.FormUtils }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: FiModifyAddedPickerExample, isStandalone: false, selector: "fi-modify-added-picker-example", ngImport: i0, template: "<novo-form [form]=\"form\" layout=\"vertical\">\n  <div class=\"novo-form-row\">\n    <novo-control [form]=\"form\" [control]=\"controls.pickerControl\"></novo-control>\n  </div>\n</novo-form>\n", styles: [""], dependencies: [{ kind: "component", type: i2$1.NovoControlElement, selector: "novo-control", inputs: ["control", "form", "condensed", "autoFocus"], outputs: ["change", "edit", "save", "delete", "upload", "blur", "focus"] }, { kind: "component", type: i2$1.NovoFormElement, selector: "novo-form", inputs: ["form", "layout", "hideHeader"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: FiModifyAddedPickerExample, decorators: [{
            type: Component,
            args: [{ selector: 'fi-modify-added-picker-example', standalone: false, template: "<novo-form [form]=\"form\" layout=\"vertical\">\n  <div class=\"novo-form-row\">\n    <novo-control [form]=\"form\" [control]=\"controls.pickerControl\"></novo-control>\n  </div>\n</novo-form>\n" }]
        }], ctorParameters: () => [{ type: i1$1.FormUtils }] });

/**
 * @title Fi Messaging Example
 */
class FiMessagingExample {
    constructor(formUtils) {
        this.formUtils = formUtils;
        this.form = {};
        this.controls = {};
        const messagingFunction = (API) => {
            console.log('[FieldInteractionDemo] - messagingFunction'); // tslint:disable-line
            if (API.getActiveKey() === 'toast') {
                API.displayToast({
                    title: 'New Value',
                    message: API.getActiveValue(),
                });
            }
            else if (API.getActiveKey() === 'tip' || API.getActiveKey() === 'tipHtml') {
                const sanitize = !API.getValue('tipHtml');
                API.displayTip('tip', API.getValue('tip'), 'info', true, sanitize);
            }
            else if (API.getActiveKey() === 'prompt') {
                API.promptUser(API.getActiveKey(), ['Update Fee Arrangement from Selected Company', 'Update DateLastModified to right now!']).then(function (result) {
                    if (result) {
                        console.log('PERFORM'); // tslint:disable-line
                    }
                    else {
                        console.log("DON'T PERFORM"); // tslint:disable-line
                    }
                });
            }
        };
        // Messaging Field Interactions
        this.controls.toastControl = new TextBoxControl({
            type: 'text',
            key: 'toast',
            label: 'Toast',
            description: 'I will trigger a toast as you change the value!',
            interactions: [{ event: 'change', script: messagingFunction }],
        });
        this.controls.tipControl = new TextBoxControl({
            type: 'text',
            key: 'tip',
            label: 'Tip',
            description: 'I will trigger a tip well as you change the value!',
            interactions: [{ event: 'change', script: messagingFunction }],
        });
        this.controls.tipHtmlControl = new CheckboxControl({
            key: 'tipHtml',
            label: 'Display Tip as HTML',
            description: 'Sets the API.displayTip() sanitize parameter to false.',
            value: false,
            interactions: [{ event: 'change', script: messagingFunction }],
        });
        this.controls.promptControl = new TextBoxControl({
            type: 'text',
            key: 'prompt',
            label: 'Prompt User of Downstream Changes',
            interactions: [{ event: 'change', script: messagingFunction }],
        });
        this.form = formUtils.toFormGroup([
            this.controls.toastControl,
            this.controls.tipControl,
            this.controls.tipHtmlControl,
            this.controls.promptControl,
        ]);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: FiMessagingExample, deps: [{ token: i1$1.FormUtils }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: FiMessagingExample, isStandalone: false, selector: "fi-messaging-example", ngImport: i0, template: "<novo-form [form]=\"form\" layout=\"vertical\">\n    <div class=\"novo-form-row\">\n        <novo-control [form]=\"form\" [control]=\"controls.tipControl\"></novo-control>\n    </div>\n    <div class=\"novo-form-row\">\n        <novo-control [form]=\"form\" [control]=\"controls.tipHtmlControl\"></novo-control>\n    </div>\n    <div class=\"novo-form-row\">\n        <novo-control [form]=\"form\" [control]=\"controls.toastControl\"></novo-control>\n    </div>\n    <div class=\"novo-form-row\">\n        <novo-control [form]=\"form\" [control]=\"controls.promptControl\"></novo-control>\n    </div>\n</novo-form>\n<div class=\"final-value\">Form Value - {{ form.value | json }}</div>\n<div class=\"final-value\">Form Dirty - {{ form.dirty | json }}</div>\n<div class=\"final-value\">Is Form Valid? - {{ form.valid | json }}</div>\n", styles: [""], dependencies: [{ kind: "component", type: i2$1.NovoControlElement, selector: "novo-control", inputs: ["control", "form", "condensed", "autoFocus"], outputs: ["change", "edit", "save", "delete", "upload", "blur", "focus"] }, { kind: "component", type: i2$1.NovoFormElement, selector: "novo-form", inputs: ["form", "layout", "hideHeader"] }, { kind: "pipe", type: i2.JsonPipe, name: "json" }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: FiMessagingExample, decorators: [{
            type: Component,
            args: [{ selector: 'fi-messaging-example', standalone: false, template: "<novo-form [form]=\"form\" layout=\"vertical\">\n    <div class=\"novo-form-row\">\n        <novo-control [form]=\"form\" [control]=\"controls.tipControl\"></novo-control>\n    </div>\n    <div class=\"novo-form-row\">\n        <novo-control [form]=\"form\" [control]=\"controls.tipHtmlControl\"></novo-control>\n    </div>\n    <div class=\"novo-form-row\">\n        <novo-control [form]=\"form\" [control]=\"controls.toastControl\"></novo-control>\n    </div>\n    <div class=\"novo-form-row\">\n        <novo-control [form]=\"form\" [control]=\"controls.promptControl\"></novo-control>\n    </div>\n</novo-form>\n<div class=\"final-value\">Form Value - {{ form.value | json }}</div>\n<div class=\"final-value\">Form Dirty - {{ form.dirty | json }}</div>\n<div class=\"final-value\">Is Form Valid? - {{ form.valid | json }}</div>\n" }]
        }], ctorParameters: () => [{ type: i1$1.FormUtils }] });

/**
 * @title Fi Hide Show Example
 */
class FiHideShowExample {
    constructor(formUtils) {
        this.formUtils = formUtils;
        this.form = {};
        this.controls = {};
        const hideShowFunction = (API) => {
            console.log('[FieldInteractionDemo] - hideShowFunction'); // tslint:disable-line
            const activeValue = API.getActiveValue();
            if (!activeValue) {
                API.show('text');
            }
            else {
                API.hide('text');
            }
        };
        // Hide/Show Field Interactions
        this.controls.textControl = new TextBoxControl({
            type: 'text',
            key: 'text',
            required: true,
            label: 'MyField',
        });
        this.controls.text2Control = new TextBoxControl({
            type: 'text',
            key: 'text2',
            label: 'MyField',
        });
        this.controls.toggleControl = new CheckboxControl({
            key: 'toggle',
            label: 'Hidden?',
            description: 'I will toggle the above field to display or not!',
            interactions: [{ event: 'change', script: hideShowFunction }],
        });
        this.form = formUtils.toFormGroup([this.controls.textControl, this.controls.text2Control, this.controls.toggleControl]);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: FiHideShowExample, deps: [{ token: i1$1.FormUtils }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: FiHideShowExample, isStandalone: false, selector: "fi-hide-show-example", ngImport: i0, template: "<novo-form [form]=\"form\" layout=\"vertical\">\n    <div class=\"novo-form-row\">\n        <novo-control [form]=\"form\" [control]=\"controls.textControl\"></novo-control>\n    </div>\n    <div class=\"novo-form-row\">\n        <novo-control [form]=\"form\" [control]=\"controls.text2Control\"></novo-control>\n    </div>\n    <div class=\"novo-form-row\">\n        <novo-control [form]=\"form\" [control]=\"controls.toggleControl\"></novo-control>\n    </div>\n</novo-form>\n<div class=\"final-value\">Form Value - {{ form.value | json }}</div>\n<div class=\"final-value\">Form Dirty - {{ form.dirty | json }}</div>\n<div class=\"final-value\">Is Form Valid? - {{ form.valid | json }}</div>\n", styles: [""], dependencies: [{ kind: "component", type: i2$1.NovoControlElement, selector: "novo-control", inputs: ["control", "form", "condensed", "autoFocus"], outputs: ["change", "edit", "save", "delete", "upload", "blur", "focus"] }, { kind: "component", type: i2$1.NovoFormElement, selector: "novo-form", inputs: ["form", "layout", "hideHeader"] }, { kind: "pipe", type: i2.JsonPipe, name: "json" }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: FiHideShowExample, decorators: [{
            type: Component,
            args: [{ selector: 'fi-hide-show-example', standalone: false, template: "<novo-form [form]=\"form\" layout=\"vertical\">\n    <div class=\"novo-form-row\">\n        <novo-control [form]=\"form\" [control]=\"controls.textControl\"></novo-control>\n    </div>\n    <div class=\"novo-form-row\">\n        <novo-control [form]=\"form\" [control]=\"controls.text2Control\"></novo-control>\n    </div>\n    <div class=\"novo-form-row\">\n        <novo-control [form]=\"form\" [control]=\"controls.toggleControl\"></novo-control>\n    </div>\n</novo-form>\n<div class=\"final-value\">Form Value - {{ form.value | json }}</div>\n<div class=\"final-value\">Form Dirty - {{ form.dirty | json }}</div>\n<div class=\"final-value\">Is Form Valid? - {{ form.valid | json }}</div>\n" }]
        }], ctorParameters: () => [{ type: i1$1.FormUtils }] });

/**
 * @title Fi Globals Example
 */
class FiGlobalsExample {
    constructor(formUtils) {
        this.formUtils = formUtils;
        this.form = {};
        this.controls = {};
        const globalsFunction = (API) => {
            console.log('[FieldInteractionDemo] - globalsFunction'); // tslint:disable-line
            API.setProperty(API.getActiveKey(), 'label', `${API.getProperty(API.getActiveKey(), 'label')} -- ${API.globals.TEST}`);
        };
        // Global Field Interactions
        this.controls.globalControl = new TextBoxControl({
            type: 'number',
            key: 'global',
            value: 5,
            label: 'Form Input',
            description: 'The label gets updated on load to use a global!',
            interactions: [{ event: 'init', script: globalsFunction, invokeOnInit: true }],
        });
        this.form = formUtils.toFormGroup([this.controls.globalControl]);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: FiGlobalsExample, deps: [{ token: i1$1.FormUtils }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: FiGlobalsExample, isStandalone: false, selector: "fi-globals-example", ngImport: i0, template: "<novo-form [form]=\"form\" layout=\"vertical\">\n    <div class=\"novo-form-row\">\n        <novo-control [form]=\"form\" [control]=\"controls.globalControl\"></novo-control>\n    </div>\n</novo-form>\n<div class=\"final-value\">Form Value - {{ form.value | json }}</div>\n<div class=\"final-value\">Form Dirty - {{ form.dirty | json }}</div>\n<div class=\"final-value\">Is Form Valid? - {{ form.valid | json }}</div>\n", styles: [""], dependencies: [{ kind: "component", type: i2$1.NovoControlElement, selector: "novo-control", inputs: ["control", "form", "condensed", "autoFocus"], outputs: ["change", "edit", "save", "delete", "upload", "blur", "focus"] }, { kind: "component", type: i2$1.NovoFormElement, selector: "novo-form", inputs: ["form", "layout", "hideHeader"] }, { kind: "pipe", type: i2.JsonPipe, name: "json" }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: FiGlobalsExample, decorators: [{
            type: Component,
            args: [{ selector: 'fi-globals-example', standalone: false, template: "<novo-form [form]=\"form\" layout=\"vertical\">\n    <div class=\"novo-form-row\">\n        <novo-control [form]=\"form\" [control]=\"controls.globalControl\"></novo-control>\n    </div>\n</novo-form>\n<div class=\"final-value\">Form Value - {{ form.value | json }}</div>\n<div class=\"final-value\">Form Dirty - {{ form.dirty | json }}</div>\n<div class=\"final-value\">Is Form Valid? - {{ form.valid | json }}</div>\n" }]
        }], ctorParameters: () => [{ type: i1$1.FormUtils }] });

/**
 * @title Fi Enable Disable Example
 */
class FiEnableDisableExample {
    constructor(formUtils) {
        this.formUtils = formUtils;
        this.controls = {};
        const enableDisableFunction = (API) => {
            console.log('[FieldInteractionDemo] - enableDisableFunction'); // tslint:disable-line
            const currentValue = API.getActiveValue();
            if (!currentValue) {
                API.enable('text');
            }
            else {
                API.disable('text');
            }
        };
        // Enable/Disable Field Interactions
        this.controls.textControl = new TextBoxControl({
            type: 'text',
            key: 'text',
            label: 'MyField',
        });
        this.controls.toggleControl = new CheckboxControl({
            key: 'toggle',
            label: 'Disable?',
            description: 'I will disable the above field!',
            interactions: [{ event: 'change', script: enableDisableFunction }],
        });
        this.form = formUtils.toFormGroup([this.controls.textControl, this.controls.toggleControl]);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: FiEnableDisableExample, deps: [{ token: i1$1.FormUtils }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: FiEnableDisableExample, isStandalone: false, selector: "fi-enable-disable-example", ngImport: i0, template: "<novo-form [form]=\"form\" layout=\"vertical\">\n    <div class=\"novo-form-row\">\n        <novo-control [form]=\"form\" [control]=\"controls.textControl\"></novo-control>\n    </div>\n    <div class=\"novo-form-row\">\n        <novo-control [form]=\"form\" [control]=\"controls.toggleControl\"></novo-control>\n    </div>\n</novo-form>\n<div class=\"final-value\">Form Value - {{ form.value | json }}</div>\n<div class=\"final-value\">Form Dirty - {{ form.dirty | json }}</div>\n<div class=\"final-value\">Is Form Valid? - {{ form.valid | json }}</div>\n", styles: [""], dependencies: [{ kind: "component", type: i2$1.NovoControlElement, selector: "novo-control", inputs: ["control", "form", "condensed", "autoFocus"], outputs: ["change", "edit", "save", "delete", "upload", "blur", "focus"] }, { kind: "component", type: i2$1.NovoFormElement, selector: "novo-form", inputs: ["form", "layout", "hideHeader"] }, { kind: "pipe", type: i2.JsonPipe, name: "json" }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: FiEnableDisableExample, decorators: [{
            type: Component,
            args: [{ selector: 'fi-enable-disable-example', standalone: false, template: "<novo-form [form]=\"form\" layout=\"vertical\">\n    <div class=\"novo-form-row\">\n        <novo-control [form]=\"form\" [control]=\"controls.textControl\"></novo-control>\n    </div>\n    <div class=\"novo-form-row\">\n        <novo-control [form]=\"form\" [control]=\"controls.toggleControl\"></novo-control>\n    </div>\n</novo-form>\n<div class=\"final-value\">Form Value - {{ form.value | json }}</div>\n<div class=\"final-value\">Form Dirty - {{ form.dirty | json }}</div>\n<div class=\"final-value\">Is Form Valid? - {{ form.valid | json }}</div>\n" }]
        }], ctorParameters: () => [{ type: i1$1.FormUtils }] });

/**
 * @title Fi Required Example
 */
class FiDescriptionExample {
    constructor(formUtils) {
        this.form = {};
        this.controls = {};
        const standardDescription = 'Toggle the checkbox below to toggle between an HTML description and a plain text description!';
        const htmlDescription = '<span><b>BOLD</b> description with a <a target="_blank" href="https://www.google.com">Google</a> Link</span>';
        const descriptionFunction = (API) => {
            console.log('[FieldInteractionDemo] - descriptionFunction'); // tslint:disable-line
            const activeValue = API.getActiveValue();
            if (activeValue) {
                API.setDescription('description', htmlDescription);
            }
            else {
                API.setDescription('description', standardDescription);
            }
        };
        // Required Field Interactions
        this.controls.descriptionControl = new TextBoxControl({
            type: 'text',
            key: 'description',
            label: 'Test',
            description: standardDescription,
        });
        this.controls.toggleControl = new CheckboxControl({
            key: 'toggle',
            label: 'Description has HTML?',
            interactions: [{ event: 'change', script: descriptionFunction }],
        });
        this.form = formUtils.toFormGroup([this.controls.descriptionControl, this.controls.toggleControl]);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: FiDescriptionExample, deps: [{ token: i1$1.FormUtils }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: FiDescriptionExample, isStandalone: false, selector: "fi-description-example", ngImport: i0, template: "<novo-form [form]=\"form\" layout=\"vertical\">\n    <div class=\"novo-form-row\">\n        <novo-control [form]=\"form\" [control]=\"controls.descriptionControl\"></novo-control>\n    </div>\n    <div class=\"novo-form-row\">\n        <novo-control [form]=\"form\" [control]=\"controls.toggleControl\"></novo-control>\n    </div>\n</novo-form>\n<div class=\"final-value\">Form Value - {{ form.value | json }}</div>\n<div class=\"final-value\">Form Dirty - {{ form.dirty | json }}</div>\n<div class=\"final-value\">Is Form Valid? - {{ form.valid | json }}</div>\n", styles: [""], dependencies: [{ kind: "component", type: i2$1.NovoControlElement, selector: "novo-control", inputs: ["control", "form", "condensed", "autoFocus"], outputs: ["change", "edit", "save", "delete", "upload", "blur", "focus"] }, { kind: "component", type: i2$1.NovoFormElement, selector: "novo-form", inputs: ["form", "layout", "hideHeader"] }, { kind: "pipe", type: i2.JsonPipe, name: "json" }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: FiDescriptionExample, decorators: [{
            type: Component,
            args: [{ selector: 'fi-description-example', standalone: false, template: "<novo-form [form]=\"form\" layout=\"vertical\">\n    <div class=\"novo-form-row\">\n        <novo-control [form]=\"form\" [control]=\"controls.descriptionControl\"></novo-control>\n    </div>\n    <div class=\"novo-form-row\">\n        <novo-control [form]=\"form\" [control]=\"controls.toggleControl\"></novo-control>\n    </div>\n</novo-form>\n<div class=\"final-value\">Form Value - {{ form.value | json }}</div>\n<div class=\"final-value\">Form Dirty - {{ form.dirty | json }}</div>\n<div class=\"final-value\">Is Form Valid? - {{ form.valid | json }}</div>\n" }]
        }], ctorParameters: () => [{ type: i1$1.FormUtils }] });

/**
 * @title Fi Confirm Example
 */
class FiConfirmExample {
    constructor(formUtils) {
        this.formUtils = formUtils;
        this.controls = {};
        const confirmFunction = (API) => {
            console.log('[FieldInteractionDemo] - confirmFunction'); // tslint:disable-line
            if (API.getActiveKey() === 'confirm1') {
                API.confirmChanges(API.getActiveKey());
            }
            else {
                API.confirmChanges(API.getActiveKey(), 'This is VERY serious!');
            }
        };
        // Confirm Interactions
        this.controls.confirm1Control = new TextBoxControl({
            type: 'text',
            key: 'confirm1',
            value: 'Hello!',
            label: 'Prompt!',
            description: 'As you take focus out of this field you will be prompted for changes!',
            interactions: [{ event: 'change', script: confirmFunction }],
        });
        this.controls.confirm2Control = new TextBoxControl({
            type: 'text',
            key: 'confirm2',
            value: 'Another!',
            label: 'Custom Promp!',
            description: 'You can provide a custom message!',
            interactions: [{ event: 'change', script: confirmFunction }],
        });
        this.form = formUtils.toFormGroup([this.controls.confirm1Control, this.controls.confirm2Control]);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: FiConfirmExample, deps: [{ token: i1$1.FormUtils }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: FiConfirmExample, isStandalone: false, selector: "fi-confirm-example", ngImport: i0, template: "<novo-form [form]=\"form\" layout=\"vertical\">\n    <div class=\"novo-form-row\">\n        <novo-control [form]=\"form\" [control]=\"controls.confirm1Control\"></novo-control>\n    </div>\n    <div class=\"novo-form-row\">\n        <novo-control [form]=\"form\" [control]=\"controls.confirm2Control\"></novo-control>\n    </div>\n</novo-form>\n<div class=\"final-value\">Form Value - {{ form.value | json }}</div>\n<div class=\"final-value\">Form Dirty - {{ form.dirty | json }}</div>\n<div class=\"final-value\">Is Form Valid? - {{ form.valid | json }}</div>\n", styles: [""], dependencies: [{ kind: "component", type: i2$1.NovoControlElement, selector: "novo-control", inputs: ["control", "form", "condensed", "autoFocus"], outputs: ["change", "edit", "save", "delete", "upload", "blur", "focus"] }, { kind: "component", type: i2$1.NovoFormElement, selector: "novo-form", inputs: ["form", "layout", "hideHeader"] }, { kind: "pipe", type: i2.JsonPipe, name: "json" }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: FiConfirmExample, decorators: [{
            type: Component,
            args: [{ selector: 'fi-confirm-example', standalone: false, template: "<novo-form [form]=\"form\" layout=\"vertical\">\n    <div class=\"novo-form-row\">\n        <novo-control [form]=\"form\" [control]=\"controls.confirm1Control\"></novo-control>\n    </div>\n    <div class=\"novo-form-row\">\n        <novo-control [form]=\"form\" [control]=\"controls.confirm2Control\"></novo-control>\n    </div>\n</novo-form>\n<div class=\"final-value\">Form Value - {{ form.value | json }}</div>\n<div class=\"final-value\">Form Dirty - {{ form.dirty | json }}</div>\n<div class=\"final-value\">Is Form Valid? - {{ form.valid | json }}</div>\n" }]
        }], ctorParameters: () => [{ type: i1$1.FormUtils }] });

/**
 * @title Fi Calculation Example
 */
class FiCalculationExample {
    constructor(formUtils) {
        this.formUtils = formUtils;
        this.controls = {};
        this.snippet = {};
        const calculationFunction = (API) => {
            console.log('[FieldInteractionDemo] - calculationFunction'); // tslint:disable-line
            const a = Number(API.getValue('a'));
            const b = Number(API.getValue('b'));
            API.setValue('sum', a + b);
            API.setValue('date', new Date());
        };
        // Calculation Field Interactions
        this.controls.aControl = new TextBoxControl({
            type: 'number',
            key: 'a',
            label: 'A',
            value: 1,
            interactions: [{ event: 'change', invokeOnInit: false, script: calculationFunction }],
        });
        this.controls.bControl = new TextBoxControl({
            type: 'number',
            key: 'b',
            label: 'B',
            value: 1,
            interactions: [{ event: 'change', invokeOnInit: false, script: calculationFunction }],
        });
        this.controls.sumControl = new TextBoxControl({
            type: 'number',
            key: 'sum',
            label: 'Sum',
            description: 'I am automatically set when you type in the boxes above me!',
            readOnly: true,
        });
        this.controls.dateModifiedControl = new DateTimeControl({
            key: 'date',
            label: 'Date Last Modified',
            value: new Date(),
        });
        this.form = formUtils.toFormGroup([
            this.controls.aControl,
            this.controls.bControl,
            this.controls.sumControl,
            this.controls.dateModifiedControl,
        ]);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: FiCalculationExample, deps: [{ token: i1$1.FormUtils }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: FiCalculationExample, isStandalone: false, selector: "fi-calculation-example", ngImport: i0, template: "<novo-form [form]=\"form\" layout=\"vertical\">\n    <div class=\"novo-form-row\">\n        <novo-control [form]=\"form\" [control]=\"controls.aControl\"></novo-control>\n    </div>\n    <div class=\"novo-form-row\">\n        <novo-control [form]=\"form\" [control]=\"controls.bControl\"></novo-control>\n    </div>\n    <div class=\"novo-form-row\">\n        <novo-control [form]=\"form\" [control]=\"controls.sumControl\"></novo-control>\n    </div>\n    <div class=\"novo-form-row\">\n        <novo-control [form]=\"form\" [control]=\"controls.dateModifiedControl\"></novo-control>\n    </div>\n</novo-form>\n<div class=\"final-value\">Form Value - {{ form.value | json }}</div>\n<div class=\"final-value\">\n    Form Dirty - {{ form.dirty | json }}</div>\n<div class=\"final-value\">Is Form Valid? - {{ form.valid | json }}</div>\n", styles: [""], dependencies: [{ kind: "component", type: i2$1.NovoControlElement, selector: "novo-control", inputs: ["control", "form", "condensed", "autoFocus"], outputs: ["change", "edit", "save", "delete", "upload", "blur", "focus"] }, { kind: "component", type: i2$1.NovoFormElement, selector: "novo-form", inputs: ["form", "layout", "hideHeader"] }, { kind: "pipe", type: i2.JsonPipe, name: "json" }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: FiCalculationExample, decorators: [{
            type: Component,
            args: [{ selector: 'fi-calculation-example', standalone: false, template: "<novo-form [form]=\"form\" layout=\"vertical\">\n    <div class=\"novo-form-row\">\n        <novo-control [form]=\"form\" [control]=\"controls.aControl\"></novo-control>\n    </div>\n    <div class=\"novo-form-row\">\n        <novo-control [form]=\"form\" [control]=\"controls.bControl\"></novo-control>\n    </div>\n    <div class=\"novo-form-row\">\n        <novo-control [form]=\"form\" [control]=\"controls.sumControl\"></novo-control>\n    </div>\n    <div class=\"novo-form-row\">\n        <novo-control [form]=\"form\" [control]=\"controls.dateModifiedControl\"></novo-control>\n    </div>\n</novo-form>\n<div class=\"final-value\">Form Value - {{ form.value | json }}</div>\n<div class=\"final-value\">\n    Form Dirty - {{ form.dirty | json }}</div>\n<div class=\"final-value\">Is Form Valid? - {{ form.valid | json }}</div>\n" }]
        }], ctorParameters: () => [{ type: i1$1.FormUtils }] });

/**
 * @title Fi Async Example
 */
class FiAsyncExample {
    constructor(formUtils) {
        this.formUtils = formUtils;
        this.controls = {};
        const asyncFunction = (API) => {
            console.log('[FieldInteractionDemo] - asyncFunction'); // tslint:disable-line
            if (API.getActiveKey() === 'async1') {
                API.setLoading(API.getActiveKey(), true);
                setTimeout(function () {
                    API.setLoading(API.getActiveKey(), false);
                }, 3000);
            }
            else {
                API.setLoading(API.getActiveKey(), true);
                setTimeout(function () {
                    API.setLoading(API.getActiveKey(), false);
                }, 15000);
            }
        };
        // Async Interactions
        this.controls.async1Control = new TextBoxControl({
            type: 'text',
            key: 'async1',
            value: 5,
            label: 'Async Validation',
            description: 'As you finish typing, the async check will mark the form as invalid',
            interactions: [{ event: 'change', script: asyncFunction }],
        });
        this.controls.async2Control = new TextBoxControl({
            type: 'text',
            key: 'async2',
            value: 5,
            label: 'Async Validation (takes too long)',
            description: 'This one will take too long and trigger the default timeout (10s)',
            interactions: [{ event: 'change', script: asyncFunction }],
        });
        this.form = formUtils.toFormGroup([this.controls.async1Control, this.controls.async2Control]);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: FiAsyncExample, deps: [{ token: i1$1.FormUtils }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: FiAsyncExample, isStandalone: false, selector: "fi-async-example", ngImport: i0, template: "<novo-form [form]=\"form\" layout=\"vertical\">\n    <div class=\"novo-form-row\">\n        <novo-control [form]=\"form\" [control]=\"controls.async1Control\"></novo-control>\n    </div>\n    <div class=\"novo-form-row\">\n        <novo-control [form]=\"form\" [control]=\"controls.async2Control\"></novo-control>\n    </div>\n</novo-form>\n<div class=\"final-value\">Form Value - {{ form.value | json }}</div>\n<div class=\"final-value\">Form Dirty - {{ form.dirty | json }}</div>\n<div class=\"final-value\">Is Form Valid? - {{ form.valid | json }}</div>\n", styles: [""], dependencies: [{ kind: "component", type: i2$1.NovoControlElement, selector: "novo-control", inputs: ["control", "form", "condensed", "autoFocus"], outputs: ["change", "edit", "save", "delete", "upload", "blur", "focus"] }, { kind: "component", type: i2$1.NovoFormElement, selector: "novo-form", inputs: ["form", "layout", "hideHeader"] }, { kind: "pipe", type: i2.JsonPipe, name: "json" }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: FiAsyncExample, decorators: [{
            type: Component,
            args: [{ selector: 'fi-async-example', standalone: false, template: "<novo-form [form]=\"form\" layout=\"vertical\">\n    <div class=\"novo-form-row\">\n        <novo-control [form]=\"form\" [control]=\"controls.async1Control\"></novo-control>\n    </div>\n    <div class=\"novo-form-row\">\n        <novo-control [form]=\"form\" [control]=\"controls.async2Control\"></novo-control>\n    </div>\n</novo-form>\n<div class=\"final-value\">Form Value - {{ form.value | json }}</div>\n<div class=\"final-value\">Form Dirty - {{ form.dirty | json }}</div>\n<div class=\"final-value\">Is Form Valid? - {{ form.valid | json }}</div>\n" }]
        }], ctorParameters: () => [{ type: i1$1.FormUtils }] });

const MockMeta$1 = {
    entity: 'ENTITY_NAME',
    entityMetaUrl: '',
    label: 'ENTIY_LABEL',
    fields: [
        {
            name: 'name',
            type: 'text',
            label: 'Name',
            sortOrder: 10,
        },
        {
            name: 'jersey-number',
            type: 'float',
            label: 'Jersey Number',
            description: 'There was a field below me!',
            sortOrder: 50,
        },
        {
            name: 'jersey-color',
            type: 'select',
            label: 'Jersey Color',
            options: ['Red', 'Blue', 'Green'],
            sortOrder: 51,
        },
        {
            name: 'cat',
            type: 'text',
            label: 'Favorite Cat',
            sortOrder: 550,
        },
        {
            name: 'remove-select',
            type: 'select',
            label: 'Remove the field below?',
            options: ['Yes', 'No'],
            sortOrder: 301,
        },
        {
            name: 'to-be-removed',
            type: 'text',
            label: 'This field will be removed',
            sortOrder: 302,
        },
    ],
};
const MockMetaHeaders$1 = {
    sectionHeaders: [
        {
            label: 'Cat Related',
            name: 'sectionHeader1',
            sortOrder: 500,
            enabled: true,
        },
        {
            label: 'Important',
            name: 'sectionHeader2',
            sortOrder: 45,
            enabled: true,
        },
        {
            label: 'Remove field on change',
            name: 'sectionHeader3',
            sortOrder: 300,
            enabled: true,
        },
    ],
};
Object.assign(MockMetaHeaders$1, MockMeta$1);

/**
 * @title Fi Adding Removing Example
 */
class FiAddingRemovingExample {
    constructor(formUtils) {
        this.formUtils = formUtils;
        this.controls = [];
        const addingRemovingFunction = (API) => {
            console.log('[FieldInteractionDemo] - addingRemovingFunction'); // tslint:disable-line
            // Control above field
            API.addControl('cat', {
                key: 'fieldAbove',
                type: 'text',
                label: 'Added Above Cat',
            }, FieldInteractionApi.FIELD_POSITIONS.ABOVE_FIELD, 'DEFAULT');
            // Control below field
            API.addControl('name', {
                key: 'fieldBelow',
                type: 'text',
                label: 'Added Below Name',
            }, FieldInteractionApi.FIELD_POSITIONS.BELOW_FIELD, ':)');
            // Control at the top of the form
            API.addControl('name', {
                key: 'top',
                type: 'text',
                label: 'Added To The Very Top',
            }, FieldInteractionApi.FIELD_POSITIONS.TOP_OF_FORM, 'HIGHEST');
            // Control at the bottom of the form
            API.addControl('name', {
                key: 'bottom',
                type: 'text',
                label: 'Added To The Very Bottom',
            }, FieldInteractionApi.FIELD_POSITIONS.BOTTOM_OF_FORM, 'LOWEST');
            // Remove the jersey color field
            API.removeControl('jersey-color');
        };
        const removeAddOnChangeFunction = (API) => {
            console.log('[FieldInteractionDemo] - removeAddOnChangeFunction'); // tslint:disable-line
            // Select control with a field interaction on change event
            const currentValue = API.getActiveValue();
            if (currentValue === 'Yes') {
                API.removeControl('to-be-removed');
            }
            else {
                API.addControl('remove-select', {
                    key: 'to-be-removed',
                    name: 'to-be-removed',
                    type: 'text',
                    label: 'This field will be removed',
                }, FieldInteractionApi.FIELD_POSITIONS.BELOW_FIELD);
            }
        };
        // Adding / Removing Interactions
        this.controls = formUtils.toFieldSets(MockMetaHeaders$1, '$ USD', {}, { token: 'TOKEN', military: true });
        this.controls[2].controls[0].interactions = [{ event: 'change', script: removeAddOnChangeFunction }];
        this.controls[0].controls[0].interactions = [{ event: 'init', script: addingRemovingFunction }];
        this.form = formUtils.toFormGroupFromFieldset(this.controls);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: FiAddingRemovingExample, deps: [{ token: i1$1.FormUtils }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: FiAddingRemovingExample, isStandalone: false, selector: "fi-adding-removing-example", ngImport: i0, template: "<novo-dynamic-form [fieldsets]=\"controls\" [(form)]=\"form\" layout=\"vertical\"></novo-dynamic-form>\n<div class=\"final-value\">Form Value - {{ form.value | json }}</div>\n<div class=\"final-value\">Form Dirty - {{ form.dirty | json }}</div>\n<div class=\"final-value\">Is Form Valid? - {{ form.valid | json }}</div>\n", styles: [""], dependencies: [{ kind: "component", type: i2$1.NovoDynamicFormElement, selector: "novo-dynamic-form", inputs: ["controls", "fieldsets", "form", "layout", "hideNonRequiredFields", "autoFocusFirstField"] }, { kind: "pipe", type: i2.JsonPipe, name: "json" }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: FiAddingRemovingExample, decorators: [{
            type: Component,
            args: [{ selector: 'fi-adding-removing-example', standalone: false, template: "<novo-dynamic-form [fieldsets]=\"controls\" [(form)]=\"form\" layout=\"vertical\"></novo-dynamic-form>\n<div class=\"final-value\">Form Value - {{ form.value | json }}</div>\n<div class=\"final-value\">Form Dirty - {{ form.dirty | json }}</div>\n<div class=\"final-value\">Is Form Valid? - {{ form.valid | json }}</div>\n" }]
        }], ctorParameters: () => [{ type: i1$1.FormUtils }] });

/**
 * @title Drag and Drop Example
 */
class DragDropExample {
    constructor() {
        this.objects = [
            { name: 'Object 1', headerText: 'Item 1', bgClass: 'bgc-grapefruit' },
            { name: 'Object 2', headerText: 'Item 2', bgClass: 'bgc-bittersweet' },
            { name: 'Object 3', headerText: 'Item 3', bgClass: 'bgc-sunflower' },
            { name: 'Object 4', headerText: 'Item 4', bgClass: 'bgc-grass' },
            { name: 'Object 5', headerText: 'Item 5', bgClass: 'bgc-mint' },
            { name: 'Object 6', headerText: 'Item 6', bgClass: 'bgc-aqua' },
            { name: 'Object 7', headerText: 'Item 7', bgClass: 'bgc-ocean' }
        ];
        this.objects2 = [
            { name: 'Object 11', headerText: 'Item 11', bgClass: 'bgc-grapefruit' },
            { name: 'Object 12', headerText: 'Item 12', bgClass: 'bgc-bittersweet' },
            { name: 'Object 13', headerText: 'Item 13', bgClass: 'bgc-sunflower' },
            { name: 'Object 14', headerText: 'Item 14', bgClass: 'bgc-grass' },
            { name: 'Object 15', headerText: 'Item 15', bgClass: 'bgc-mint' },
            { name: 'Object 16', headerText: 'Item 16', bgClass: 'bgc-aqua' },
            { name: 'Object 17', headerText: 'Item 17', bgClass: 'bgc-ocean' }
        ];
    }
    ngOnChanges(changes) {
        console.log('box processed changes', changes);
    }
    dragFinished(event) {
        this.objectMoved = event.draggedItem;
        this.objects = event.allItems;
    }
    dragFinished2(event) {
        this.objectMoved = event.draggedItem;
        this.objects2 = event.allItems;
    }
    addObject2() {
        this.objects2.push({ name: `Object ${this.objects.length}`, headerText: `Item ${this.objects2.length + 11}`, bgClass: 'bgc-lavender' });
    }
    removeObject(item) {
        this.objects.splice(this.objects.findIndex(a => a === item), 1);
    }
    removeObject2(item) {
        this.objects2.splice(this.objects2.findIndex(a => a === item), 1);
    }
    get objectsAsString() {
        return this.objects.map(obj => obj.name).join(', ');
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: DragDropExample, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: DragDropExample, isStandalone: false, selector: "drag-drop-example", usesOnChanges: true, ngImport: i0, template: "\n<p>Click and drag these buttons to place them in a new position. When rearranged, they emit an event to demonstrate the new order.</p>\n<div [novoDragDrop]=\"objects\" (novoDragDropFinish)=\"dragFinished($event)\" class=\"drag-box\">\n    <novo-card *ngFor=\"let item of objects\"\n        class=\"demo-drag-item\">\n        <novo-card-header class=\"novo-drag-target {{item.bgClass}}\">\n            <novo-title>{{item.headerText}}</novo-title>\n            <novo-action (click)=\"removeObject(item)\" icon=\"close\" tooltip=\"Close Item\"></novo-action>\n        </novo-card-header>\n        <novo-card-content>\n            <novo-caption novoPreventDrag>{{item.name}} (Non-draggable area)</novo-caption>\n        </novo-card-content>\n    </novo-card>\n</div>\n\n<p *ngIf=\"objectMoved\">{{objectMoved.name}} moved.</p>\n<p>Current object order is: {{objectsAsString}}</p>\n\n<h2>Dynamic list</h2>\n<novo-button (click)=\"addObject2()\">Add another object to list</novo-button>\n<div [novoDragDrop]=\"objects2\" (novoDragDropFinish)=\"dragFinished2($event)\" class=\"drag-box\">\n    <novo-card *ngFor=\"let item of objects2\"\n        class=\"demo-drag-item\">\n        <novo-card-header class=\"novo-drag-target {{item.bgClass}}\">\n            <novo-title>{{item.headerText}}</novo-title>\n            <novo-action (click)=\"removeObject2(item)\" icon=\"close\" tooltip=\"Close Item\"></novo-action>\n        </novo-card-header>\n        <novo-card-content>\n            <novo-caption novoPreventDrag>{{item.name}} (Non-draggable area)</novo-caption>\n        </novo-card-content>\n    </novo-card>\n</div>", styles: [".drag-box{width:500px;display:block}.demo-drag-item{display:inline-flex;text-align:center;margin:10px;width:122px;position:relative}\n"], dependencies: [{ kind: "directive", type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i2$1.NovoButtonElement, selector: "novo-button,button[theme]", inputs: ["color", "side", "size", "theme", "loading", "icon", "secondIcon", "disabled"] }, { kind: "component", type: i2$1.CardElement, selector: "novo-card", inputs: ["padding", "config", "title", "message", "messageIcon", "icon", "iconTooltip", "refresh", "close", "move", "loading", "inline", "inset"], outputs: ["onClose", "onRefresh"] }, { kind: "component", type: i2$1.CardContentElement, selector: "novo-card-content, [novo-card-content], [novoCardContent]", inputs: ["condensed"] }, { kind: "component", type: i2$1.CardHeaderElement, selector: "novo-card-header, [novo-card-header], [novoCardHeader]" }, { kind: "directive", type: i2$1.TooltipDirective, selector: "[tooltip]", inputs: ["tooltip", "tooltipPosition", "tooltipType", "tooltipSize", "tooltipBounce", "tooltipNoAnimate", "tooltipRounded", "tooltipAlways", "tooltipPreline", "removeTooltipArrow", "tooltipAutoPosition", "tooltipIsHTML", "tooltipCloseOnClick", "tooltipOnOverflow", "tooltipActive"] }, { kind: "component", type: i2$1.NovoUtilActionComponent, selector: "util-action, novo-action", inputs: ["icon", "size", "inverse", "disabled"] }, { kind: "directive", type: i2$1.NovoDragBoxParent, selector: "[novoDragDrop]", inputs: ["novoDragDrop"], outputs: ["novoDragDropFinish"] }, { kind: "component", type: i2$1.NovoTitle, selector: "novo-title,[novo-title]" }, { kind: "component", type: i2$1.NovoCaption, selector: "novo-caption,[novo-caption]" }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: DragDropExample, decorators: [{
            type: Component,
            args: [{ selector: 'drag-drop-example', standalone: false, template: "\n<p>Click and drag these buttons to place them in a new position. When rearranged, they emit an event to demonstrate the new order.</p>\n<div [novoDragDrop]=\"objects\" (novoDragDropFinish)=\"dragFinished($event)\" class=\"drag-box\">\n    <novo-card *ngFor=\"let item of objects\"\n        class=\"demo-drag-item\">\n        <novo-card-header class=\"novo-drag-target {{item.bgClass}}\">\n            <novo-title>{{item.headerText}}</novo-title>\n            <novo-action (click)=\"removeObject(item)\" icon=\"close\" tooltip=\"Close Item\"></novo-action>\n        </novo-card-header>\n        <novo-card-content>\n            <novo-caption novoPreventDrag>{{item.name}} (Non-draggable area)</novo-caption>\n        </novo-card-content>\n    </novo-card>\n</div>\n\n<p *ngIf=\"objectMoved\">{{objectMoved.name}} moved.</p>\n<p>Current object order is: {{objectsAsString}}</p>\n\n<h2>Dynamic list</h2>\n<novo-button (click)=\"addObject2()\">Add another object to list</novo-button>\n<div [novoDragDrop]=\"objects2\" (novoDragDropFinish)=\"dragFinished2($event)\" class=\"drag-box\">\n    <novo-card *ngFor=\"let item of objects2\"\n        class=\"demo-drag-item\">\n        <novo-card-header class=\"novo-drag-target {{item.bgClass}}\">\n            <novo-title>{{item.headerText}}</novo-title>\n            <novo-action (click)=\"removeObject2(item)\" icon=\"close\" tooltip=\"Close Item\"></novo-action>\n        </novo-card-header>\n        <novo-card-content>\n            <novo-caption novoPreventDrag>{{item.name}} (Non-draggable area)</novo-caption>\n        </novo-card-content>\n    </novo-card>\n</div>", styles: [".drag-box{width:500px;display:block}.demo-drag-item{display:inline-flex;text-align:center;margin:10px;width:122px;position:relative}\n"] }]
        }] });

/**
 * @title Basic Code Editor Example
 */
class BasicCodeExample {
    constructor() {
        this.value = `function myFunction() {
  console.log('Hello world!');
}`;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: BasicCodeExample, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: BasicCodeExample, isStandalone: false, selector: "basic-code-example", ngImport: i0, template: "<novo-code-editor [(ngModel)]=\"value\"></novo-code-editor>\n", styles: [""], dependencies: [{ kind: "directive", type: i1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i1.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "component", type: i3.NovoCodeEditor, selector: "novo-code-editor", inputs: ["theme", "lineNumbers", "name", "mode"], outputs: ["blur", "focus"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: BasicCodeExample, decorators: [{
            type: Component,
            args: [{ selector: 'basic-code-example', standalone: false, template: "<novo-code-editor [(ngModel)]=\"value\"></novo-code-editor>\n" }]
        }] });

/**
 * @title Basic Ace Editor Example
 */
class BasicAceExample {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: BasicAceExample, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: BasicAceExample, isStandalone: false, selector: "basic-ace-example", ngImport: i0, template: "<novo-ace-editor></novo-ace-editor>\n", styles: [""], dependencies: [{ kind: "component", type: i3.NovoAceEditor, selector: "novo-ace-editor", inputs: ["theme", "options", "mode", "name"], outputs: ["blur", "focus"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: BasicAceExample, decorators: [{
            type: Component,
            args: [{ selector: 'basic-ace-example', standalone: false, template: "<novo-ace-editor></novo-ace-editor>\n" }]
        }] });

const HEADER_THEMES$5 = ['company', 'job', 'candidate', 'contact', 'opportunity', 'lead', 'light', 'white'];
const HEADER_ICONS$5 = ['company', 'job', 'candidate', 'person', 'opportunity', 'lead', 'bolt', 'shield'];
/**
 * @title Basic Header Example
 */
class RecordHeaderExample {
    constructor(toaster) {
        this.toaster = toaster;
        this.theme = 'company';
        this.icon = 'company';
        this.options = {
            title: 'Title',
            message: 'Some Message...',
            theme: 'ocean',
            icon: 'clipboard',
            position: 'growlTopRight',
        };
        this.themeIndex = 0;
        this.refresh();
    }
    refresh() {
        this.values = undefined;
        this.tabs = undefined;
        this.record = undefined;
        setTimeout(() => {
            this.values = [
                { label: 'Status', data: 'Open' },
                { label: 'Phone', data: '555-555-5555' },
                { label: 'Address', data: 'Boston, MA' },
            ];
            this.tabs = ['Overview', 'Edit', 'Activity'];
            this.record = {
                id: 101,
                name: 'Acme Corporation, LLC',
            };
        }, 5000);
    }
    changeTheme() {
        this.themeIndex = this.themeIndex === HEADER_THEMES$5.length - 1 ? 0 : this.themeIndex + 1;
        this.theme = HEADER_THEMES$5[this.themeIndex];
        this.icon = HEADER_ICONS$5[this.themeIndex];
    }
    catchEv(type, ev) {
        // Set toast options
        this.options = {
            title: `${type}`,
            message: `${ev} fired...`,
            theme: 'ocean',
            icon: `${type}`,
            position: 'growlTopRight',
        };
        // Fire toast
        this.toaster.alert(this.options);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: RecordHeaderExample, deps: [{ token: i1$1.NovoToastService }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: RecordHeaderExample, isStandalone: false, selector: "record-header-example", ngImport: i0, template: "<header accent=\"company\">\n  <novo-icon>company</novo-icon>\n  <h1 novo-title>\n    <ng-container [isLoading]=\"record\">\n      <span *skeleton></span>\n      <span *loaded>{{record.id}} | {{record.name}}</span>\n    </ng-container>\n  </h1>\n  <novo-action icon=\"convert\" tooltip=\"Change Theme\" (click)=\"changeTheme()\"></novo-action>\n  <novo-action icon=\"refresh\" tooltip=\"Refresh\" (click)=\"refresh()\"></novo-action>\n  <novo-action icon=\"times\" tooltip=\"Show Popup\" (click)=\"catchEv('close', $event)\"></novo-action>\n  <section>\n    <button theme=\"icon\" icon=\"google\"></button>\n    <button theme=\"icon\" icon=\"linkedin-f\"></button>\n    <button theme=\"icon\" icon=\"location\"></button>\n  </section>\n  <novo-list class=\"bgc-off-white\" direction=\"horizontal\" [isLoading]=\"values\">\n    <novo-value *skeleton></novo-value>\n    <novo-value *skeleton></novo-value>\n    <novo-value *ngFor=\"let value of values\" [label]=\"value.label\" [data]=\"value.data\"></novo-value>\n  </novo-list>\n  <novo-nav direction=\"horizontal\" [isLoading]=\"tabs\">\n    <novo-tab *skeleton></novo-tab>\n    <novo-tab *skeleton></novo-tab>\n    <novo-tab *skeleton></novo-tab>\n    <novo-tab *ngFor=\"let tab of tabs\">\n      <span>{{tab}}</span>\n    </novo-tab>\n  </novo-nav>\n</header>", styles: [""], dependencies: [{ kind: "directive", type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "component", type: i2$1.NovoButtonElement, selector: "novo-button,button[theme]", inputs: ["color", "side", "size", "theme", "loading", "icon", "secondIcon", "disabled"] }, { kind: "directive", type: i2$1.NovoIsLoadingDirective, selector: "[isLoading]", inputs: ["isLoading"] }, { kind: "directive", type: i2$1.NovoLoadedDirective, selector: "[loaded]" }, { kind: "directive", type: i2$1.NovoSkeletonDirective, selector: "[skeleton]" }, { kind: "directive", type: i2$1.TooltipDirective, selector: "[tooltip]", inputs: ["tooltip", "tooltipPosition", "tooltipType", "tooltipSize", "tooltipBounce", "tooltipNoAnimate", "tooltipRounded", "tooltipAlways", "tooltipPreline", "removeTooltipArrow", "tooltipAutoPosition", "tooltipIsHTML", "tooltipCloseOnClick", "tooltipOnOverflow", "tooltipActive"] }, { kind: "component", type: i2$1.NovoHeaderComponent, selector: "novo-header,header[theme],header[accent]", inputs: ["condensed", "title", "subTitle", "icon", "size", "theme"] }, { kind: "component", type: i2$1.NovoUtilActionComponent, selector: "util-action, novo-action", inputs: ["icon", "size", "inverse", "disabled"] }, { kind: "component", type: i2$1.NovoNavElement, selector: "novo-nav", inputs: ["theme", "direction", "outlet", "router", "condensed", "selectedIndex"], outputs: ["selectedIndexChange"] }, { kind: "component", type: i2$1.NovoTabElement, selector: "novo-tab", inputs: ["active", "color", "disabled"], outputs: ["activeChange"] }, { kind: "component", type: i2$1.NovoListElement, selector: "novo-list", inputs: ["theme", "direction"] }, { kind: "component", type: i2$1.NovoValueElement, selector: "novo-value", inputs: ["data", "meta", "theme", "row", "label", "type", "icon"] }, { kind: "component", type: i2$1.NovoIconComponent, selector: "novo-icon", inputs: ["raised", "theme", "shape", "color", "size", "smaller", "larger", "alt", "name"] }, { kind: "component", type: i2$1.NovoTitle, selector: "novo-title,[novo-title]" }, { kind: "directive", type: i2$1.AccentColorDirective, selector: "[accent]", inputs: ["accent"] }, { kind: "directive", type: i2$1.ThemeColorDirective, selector: "[theme]", inputs: ["theme"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: RecordHeaderExample, decorators: [{
            type: Component,
            args: [{ selector: 'record-header-example', standalone: false, template: "<header accent=\"company\">\n  <novo-icon>company</novo-icon>\n  <h1 novo-title>\n    <ng-container [isLoading]=\"record\">\n      <span *skeleton></span>\n      <span *loaded>{{record.id}} | {{record.name}}</span>\n    </ng-container>\n  </h1>\n  <novo-action icon=\"convert\" tooltip=\"Change Theme\" (click)=\"changeTheme()\"></novo-action>\n  <novo-action icon=\"refresh\" tooltip=\"Refresh\" (click)=\"refresh()\"></novo-action>\n  <novo-action icon=\"times\" tooltip=\"Show Popup\" (click)=\"catchEv('close', $event)\"></novo-action>\n  <section>\n    <button theme=\"icon\" icon=\"google\"></button>\n    <button theme=\"icon\" icon=\"linkedin-f\"></button>\n    <button theme=\"icon\" icon=\"location\"></button>\n  </section>\n  <novo-list class=\"bgc-off-white\" direction=\"horizontal\" [isLoading]=\"values\">\n    <novo-value *skeleton></novo-value>\n    <novo-value *skeleton></novo-value>\n    <novo-value *ngFor=\"let value of values\" [label]=\"value.label\" [data]=\"value.data\"></novo-value>\n  </novo-list>\n  <novo-nav direction=\"horizontal\" [isLoading]=\"tabs\">\n    <novo-tab *skeleton></novo-tab>\n    <novo-tab *skeleton></novo-tab>\n    <novo-tab *skeleton></novo-tab>\n    <novo-tab *ngFor=\"let tab of tabs\">\n      <span>{{tab}}</span>\n    </novo-tab>\n  </novo-nav>\n</header>" }]
        }], ctorParameters: () => [{ type: i1$1.NovoToastService }] });

const HEADER_THEMES$4 = ['company', 'job', 'candidate', 'contact', 'opportunity', 'lead', 'light', 'white'];
const HEADER_ICONS$4 = ['company', 'job', 'candidate', 'person', 'opportunity', 'lead', 'bolt', 'shield'];
/**
 * @title Details Card Example
 */
class DetailsCardExample {
    constructor(toaster) {
        this.toaster = toaster;
        this.theme = 'company';
        this.icon = 'company';
        this.options = {
            title: 'Title',
            message: 'Some Message...',
            theme: 'ocean',
            icon: 'clipboard',
            position: 'growlTopRight',
        };
        this.themeIndex = 0;
        this.refresh();
    }
    refresh() {
        this.values = undefined;
        this.tabs = undefined;
        this.record = undefined;
        setTimeout(() => {
            this.values = [
                { label: 'Status', data: 'Open' },
                { label: 'Phone', data: '555-555-5555' },
                { label: 'Address', data: 'Boston, MA' },
            ];
            this.tabs = ['Overview', 'Edit', 'Activity'];
            this.record = {
                id: 101,
                name: 'Acme Corporation, LLC',
            };
        }, 200);
    }
    changeTheme() {
        this.themeIndex = this.themeIndex === HEADER_THEMES$4.length - 1 ? 0 : this.themeIndex + 1;
        this.theme = HEADER_THEMES$4[this.themeIndex];
        this.icon = HEADER_ICONS$4[this.themeIndex];
    }
    catchEv(type, ev) {
        // Set toast options
        this.options = {
            title: `${type}`,
            message: `${ev} fired...`,
            theme: 'ocean',
            icon: `${type}`,
            position: 'growlTopRight',
        };
        // Fire toast
        this.toaster.alert(this.options);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: DetailsCardExample, deps: [{ token: i1$1.NovoToastService }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: DetailsCardExample, isStandalone: false, selector: "details-card-example", ngImport: i0, template: "<novo-card [padding]=\"false\">\n  <novo-card-header>\n    <novo-icon color=\"neutral\">move</novo-icon>\n    <novo-title>Details</novo-title>\n    <novo-action icon=\"refresh\" tooltip=\"Refresh Card Data\"></novo-action>\n    <novo-action icon=\"times\" tooltip=\"Remove Card\"></novo-action>\n  </novo-card-header>\n  <novo-card-content condensed>\n    <novo-list class=\"bgc-off-white-striped\" direction=\"vertical\">\n      <novo-value row *ngFor=\"let value of values\" [label]=\"value.label\" [data]=\"value.data\"></novo-value>\n    </novo-list>\n  </novo-card-content>\n</novo-card>", styles: [""], dependencies: [{ kind: "directive", type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "component", type: i2$1.CardElement, selector: "novo-card", inputs: ["padding", "config", "title", "message", "messageIcon", "icon", "iconTooltip", "refresh", "close", "move", "loading", "inline", "inset"], outputs: ["onClose", "onRefresh"] }, { kind: "component", type: i2$1.CardContentElement, selector: "novo-card-content, [novo-card-content], [novoCardContent]", inputs: ["condensed"] }, { kind: "component", type: i2$1.CardHeaderElement, selector: "novo-card-header, [novo-card-header], [novoCardHeader]" }, { kind: "directive", type: i2$1.TooltipDirective, selector: "[tooltip]", inputs: ["tooltip", "tooltipPosition", "tooltipType", "tooltipSize", "tooltipBounce", "tooltipNoAnimate", "tooltipRounded", "tooltipAlways", "tooltipPreline", "removeTooltipArrow", "tooltipAutoPosition", "tooltipIsHTML", "tooltipCloseOnClick", "tooltipOnOverflow", "tooltipActive"] }, { kind: "component", type: i2$1.NovoUtilActionComponent, selector: "util-action, novo-action", inputs: ["icon", "size", "inverse", "disabled"] }, { kind: "component", type: i2$1.NovoListElement, selector: "novo-list", inputs: ["theme", "direction"] }, { kind: "component", type: i2$1.NovoValueElement, selector: "novo-value", inputs: ["data", "meta", "theme", "row", "label", "type", "icon"] }, { kind: "component", type: i2$1.NovoIconComponent, selector: "novo-icon", inputs: ["raised", "theme", "shape", "color", "size", "smaller", "larger", "alt", "name"] }, { kind: "component", type: i2$1.NovoTitle, selector: "novo-title,[novo-title]" }, { kind: "directive", type: i2$1.PaddingDirective, selector: "[p],[padding],[paddingTop],[paddingRight],[paddingBottom],[paddingLeft],[paddingX],[paddingY],[pt],[pr],[pb],[pl],[px],[py]", inputs: ["padding", "p", "paddingLeft", "pl", "paddingRight", "pr", "paddingTop", "pt", "paddingBottom", "pb", "paddingX", "px", "paddingY", "py"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: DetailsCardExample, decorators: [{
            type: Component,
            args: [{ selector: 'details-card-example', standalone: false, template: "<novo-card [padding]=\"false\">\n  <novo-card-header>\n    <novo-icon color=\"neutral\">move</novo-icon>\n    <novo-title>Details</novo-title>\n    <novo-action icon=\"refresh\" tooltip=\"Refresh Card Data\"></novo-action>\n    <novo-action icon=\"times\" tooltip=\"Remove Card\"></novo-action>\n  </novo-card-header>\n  <novo-card-content condensed>\n    <novo-list class=\"bgc-off-white-striped\" direction=\"vertical\">\n      <novo-value row *ngFor=\"let value of values\" [label]=\"value.label\" [data]=\"value.data\"></novo-value>\n    </novo-list>\n  </novo-card-content>\n</novo-card>" }]
        }], ctorParameters: () => [{ type: i1$1.NovoToastService }] });

/**
 * @title Card Form Example
 */
class CardFormExample {
    constructor() {
        this.recipientCtrl = new UntypedFormControl();
        this.recipients = [];
        this.allPeople = [
            {
                id: 1,
                name: 'Brian Kimball',
                email: 'bvkimball@bullhorn.com',
            },
            {
                id: 2,
                name: 'Josh Godi',
                email: 'jgodi@bullhorn.com',
            },
            {
                id: 3,
                name: 'Alec Sibilia',
                email: 'asibilia@bullhorn.com',
            },
            {
                id: 4,
                name: 'Jon Braun',
                email: 'jb@bullhorn.com',
            },
        ];
        this.filteredPeople = this.recipientCtrl.valueChanges.pipe(startWith(null), map((person) => (person ? this._filter(person) : this.allPeople.slice())));
    }
    add(event) {
        const input = event.input;
        const value = event.value;
        // Add our person
        if ((value || '').trim()) {
            this.recipients.push(value.trim());
        }
        // Reset the input value
        if (input) {
            input.value = '';
        }
        this.recipientCtrl.setValue(null);
    }
    remove(person) {
        const index = this.recipients.indexOf(person);
        if (index >= 0) {
            this.recipients.splice(index, 1);
        }
    }
    selected(event) {
        console.log(event.option);
        this.recipients.push(event.option.value);
        this.searchInput.nativeElement.value = '';
        this.recipientCtrl.setValue(null);
    }
    _filter(value) {
        const filterValue = value.name.toLowerCase();
        return this.allPeople.filter((person) => person.name.toLowerCase().indexOf(filterValue) === 0);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: CardFormExample, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: CardFormExample, isStandalone: false, selector: "card-form-example", viewQueries: [{ propertyName: "searchInput", first: true, predicate: ["searchInput"], descendants: true }], ngImport: i0, template: "<novo-card class=\"card-form-example\" [padding]=\"false\">\n  <novo-card-header theme=\"off-white\">\n    <novo-dropdown>\n      <button theme=\"dialogue\" icon=\"collapse\">Message Template</button>\n      <list>\n        <item>Message 1</item>\n        <item>Message 2</item>\n      </list>\n    </novo-dropdown>\n    <novo-dropdown>\n      <button theme=\"dialogue\" icon=\"collapse\">Personalize</button>\n      <list>\n        <item>First Name</item>\n        <item>Last Name</item>\n      </list>\n    </novo-dropdown>\n  </novo-card-header>\n  <novo-card-content>\n    <novo-fields appearance=\"list\" [fullWidth]=\"true\">\n      <!-- How do we deliver the message -->\n      <novo-field>\n        <novo-label>Delivery Method</novo-label>\n        <select required novoInput>\n          <option value=\"pink\">Candidate Preferred</option>\n          <option value=\"purple\">Email Only</option>\n          <option value=\"sparkles\">SMS</option>\n        </select>\n      </novo-field>\n      <!-- Who does the message come from -->\n      <novo-field>\n        <novo-label>From</novo-label>\n        <select required novoInput>\n          <option value=\"pink\">Candidate Owner</option>\n          <option value=\"purple\">Job Owner</option>\n          <option value=\"sparkles\">Me</option>\n        </select>\n      </novo-field>\n      <!-- Needs to be chip picker -->\n      <novo-field>\n        <novo-label>To</novo-label>\n        <novo-chip-list #chips aria-label=\"Recipients\">\n          <novo-chip\n            *ngFor=\"let person of recipients | slice:0\"\n            (removed)=\"remove(person)\">\n            {{person.name}}\n            <novo-icon novoChipRemove>box-times-o</novo-icon>\n          </novo-chip>\n          <input\n            novoChipInput\n            #searchInput\n            placeholder=\"Search...\"\n            autocomplete=\"off\"\n            [formControl]=\"recipientCtrl\"\n            (novoChipInputTokenEnd)=\"add($event)\" />\n          <novo-text *ngIf=\"recipients.length\">+{{recipients.length - 2}}</novo-text>\n        </novo-chip-list>\n        <novo-autocomplete (optionSelected)=\"selected($event)\">\n          <novo-option *ngFor=\"let person of filteredPeople | async\" [value]=\"person\">\n            <novo-flex gap=\"1rem\">\n              <novo-avatar [source]=\"person\"></novo-avatar>\n              <novo-flex direction=\"column\" align=\"start\">\n                <novo-text>{{person.name}}</novo-text>\n                <novo-caption>{{person.email}}</novo-caption>\n              </novo-flex>\n            </novo-flex>\n          </novo-option>\n        </novo-autocomplete>\n      </novo-field>\n      <!-- Email Subject Line -->\n      <novo-field>\n        <novo-label>Subject</novo-label>\n        <input novoInput type=\"text\" />\n      </novo-field>\n      <!-- PRE-HEADER -->\n      <novo-field>\n        <novo-label>Pre-Header</novo-label>\n        <input novoInput type=\"text\" />\n      </novo-field>\n      <!-- The message to deliver -->\n      <novo-field>\n        <textarea #message novoInput placeholder=\"Message...\"></textarea>\n        <novo-hint>{{message.value.length}} / 256</novo-hint>\n        <novo-hint align=\"end\">Messages over 140 characters may be sent as multiple messages.</novo-hint>\n      </novo-field>\n    </novo-fields>\n  </novo-card-content>\n</novo-card>", styles: [".card-form-example{max-width:48rem}\n"], dependencies: [{ kind: "directive", type: i1.NgSelectOption, selector: "option", inputs: ["ngValue", "value"] }, { kind: "directive", type: i1.ɵNgSelectMultipleOption, selector: "option", inputs: ["ngValue", "value"] }, { kind: "directive", type: i1.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i1.FormControlDirective, selector: "[formControl]", inputs: ["formControl", "disabled", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { kind: "directive", type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i2$1.NovoAutocompleteElement, selector: "novo-autocomplete", inputs: ["tabIndex", "triggerOn", "displayWith", "aria-label", "multiple", "disabled", "makeFirstItemActive"], outputs: ["optionSelected", "optionActivated"], exportAs: ["novoAutocomplete"] }, { kind: "component", type: i2$1.NovoAvatarElement, selector: "novo-avatar", inputs: ["source", "label", "theme", "image", "size", "shape", "color"] }, { kind: "component", type: i2$1.NovoButtonElement, selector: "novo-button,button[theme]", inputs: ["color", "side", "size", "theme", "loading", "icon", "secondIcon", "disabled"] }, { kind: "component", type: i2$1.CardElement, selector: "novo-card", inputs: ["padding", "config", "title", "message", "messageIcon", "icon", "iconTooltip", "refresh", "close", "move", "loading", "inline", "inset"], outputs: ["onClose", "onRefresh"] }, { kind: "component", type: i2$1.CardContentElement, selector: "novo-card-content, [novo-card-content], [novoCardContent]", inputs: ["condensed"] }, { kind: "component", type: i2$1.CardHeaderElement, selector: "novo-card-header, [novo-card-header], [novoCardHeader]" }, { kind: "component", type: i2$1.NovoFlexElement, selector: "novo-flex,novo-row", inputs: ["direction", "align", "justify", "wrap", "gap"] }, { kind: "component", type: i2$1.NovoDropdownElement, selector: "novo-dropdown", inputs: ["parentScrollSelector", "parentScrollAction", "containerClass", "side", "scrollStrategy", "keepOpen", "height", "width", "appendToBody", "multiple", "scrollToActiveItemOnOpen"], outputs: ["toggled"] }, { kind: "component", type: i2$1.NovoItemElement, selector: "item", inputs: ["disabled", "keepOpen"], outputs: ["action"] }, { kind: "component", type: i2$1.NovoDropdownListElement, selector: "list" }, { kind: "component", type: i2$1.NovoChipElement, selector: "novo-chip, [novo-chip]", inputs: ["color", "tabIndex", "size", "type", "selected", "value", "selectable", "disabled", "removable"], outputs: ["selectionChange", "destroyed", "removed"] }, { kind: "directive", type: i2$1.NovoChipRemove, selector: "[novoChipRemove]" }, { kind: "directive", type: i2$1.NovoChipInput, selector: "input[novoChipInput]", inputs: ["novoChipInputAddOnBlur", "novoChipInputSeparatorKeyCodes", "placeholder", "id", "disabled"], outputs: ["novoChipInputTokenEnd"], exportAs: ["novoChipInput", "novoChipInputFor"] }, { kind: "component", type: i2$1.NovoChipList, selector: "novo-chip-list", inputs: ["errorStateMatcher", "multiple", "chipsToggleable", "stacked", "compareWith", "value", "required", "placeholder", "disabled", "aria-orientation", "selectable", "tabIndex"], outputs: ["change", "valueChange"], exportAs: ["novoChipList"] }, { kind: "component", type: i2$1.NovoIconComponent, selector: "novo-icon", inputs: ["raised", "theme", "shape", "color", "size", "smaller", "larger", "alt", "name"] }, { kind: "component", type: i2$1.NovoText, selector: "novo-text,[novo-text]", inputs: ["block"] }, { kind: "component", type: i2$1.NovoCaption, selector: "novo-caption,[novo-caption]" }, { kind: "component", type: i2$1.NovoLabel, selector: "novo-label,[novo-label]", inputs: ["id"] }, { kind: "directive", type: i2$1.PaddingDirective, selector: "[p],[padding],[paddingTop],[paddingRight],[paddingBottom],[paddingLeft],[paddingX],[paddingY],[pt],[pr],[pb],[pl],[px],[py]", inputs: ["padding", "p", "paddingLeft", "pl", "paddingRight", "pr", "paddingTop", "pt", "paddingBottom", "pb", "paddingX", "px", "paddingY", "py"] }, { kind: "directive", type: i2$1.GapDirective, selector: "[gap]", inputs: ["gap"] }, { kind: "directive", type: i2$1.ThemeColorDirective, selector: "[theme]", inputs: ["theme"] }, { kind: "component", type: i2$1.NovoOption, selector: "novo-option", inputs: ["selected", "keepOpen", "novoInert", "value", "disabled"], exportAs: ["novoOption"] }, { kind: "component", type: i2$1.NovoFieldElement, selector: "novo-field", inputs: ["layout", "appearance", "customOverlayOrigin", "width"], outputs: ["valueChanges", "stateChanges"] }, { kind: "component", type: i2$1.NovoHintElement, selector: "novo-hint", inputs: ["align", "id"] }, { kind: "directive", type: i2$1.NovoInput, selector: "input[novoInput], textarea[novoInput], select[novoInput]", inputs: ["disabled", "id", "placeholder", "required", "type", "value", "readonly"], outputs: ["onSelect"] }, { kind: "component", type: i2$1.NovoFieldsElement, selector: "novo-fields", inputs: ["layout", "appearance", "fullWidth"] }, { kind: "pipe", type: i2.AsyncPipe, name: "async" }, { kind: "pipe", type: i2.SlicePipe, name: "slice" }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: CardFormExample, decorators: [{
            type: Component,
            args: [{ selector: 'card-form-example', standalone: false, template: "<novo-card class=\"card-form-example\" [padding]=\"false\">\n  <novo-card-header theme=\"off-white\">\n    <novo-dropdown>\n      <button theme=\"dialogue\" icon=\"collapse\">Message Template</button>\n      <list>\n        <item>Message 1</item>\n        <item>Message 2</item>\n      </list>\n    </novo-dropdown>\n    <novo-dropdown>\n      <button theme=\"dialogue\" icon=\"collapse\">Personalize</button>\n      <list>\n        <item>First Name</item>\n        <item>Last Name</item>\n      </list>\n    </novo-dropdown>\n  </novo-card-header>\n  <novo-card-content>\n    <novo-fields appearance=\"list\" [fullWidth]=\"true\">\n      <!-- How do we deliver the message -->\n      <novo-field>\n        <novo-label>Delivery Method</novo-label>\n        <select required novoInput>\n          <option value=\"pink\">Candidate Preferred</option>\n          <option value=\"purple\">Email Only</option>\n          <option value=\"sparkles\">SMS</option>\n        </select>\n      </novo-field>\n      <!-- Who does the message come from -->\n      <novo-field>\n        <novo-label>From</novo-label>\n        <select required novoInput>\n          <option value=\"pink\">Candidate Owner</option>\n          <option value=\"purple\">Job Owner</option>\n          <option value=\"sparkles\">Me</option>\n        </select>\n      </novo-field>\n      <!-- Needs to be chip picker -->\n      <novo-field>\n        <novo-label>To</novo-label>\n        <novo-chip-list #chips aria-label=\"Recipients\">\n          <novo-chip\n            *ngFor=\"let person of recipients | slice:0\"\n            (removed)=\"remove(person)\">\n            {{person.name}}\n            <novo-icon novoChipRemove>box-times-o</novo-icon>\n          </novo-chip>\n          <input\n            novoChipInput\n            #searchInput\n            placeholder=\"Search...\"\n            autocomplete=\"off\"\n            [formControl]=\"recipientCtrl\"\n            (novoChipInputTokenEnd)=\"add($event)\" />\n          <novo-text *ngIf=\"recipients.length\">+{{recipients.length - 2}}</novo-text>\n        </novo-chip-list>\n        <novo-autocomplete (optionSelected)=\"selected($event)\">\n          <novo-option *ngFor=\"let person of filteredPeople | async\" [value]=\"person\">\n            <novo-flex gap=\"1rem\">\n              <novo-avatar [source]=\"person\"></novo-avatar>\n              <novo-flex direction=\"column\" align=\"start\">\n                <novo-text>{{person.name}}</novo-text>\n                <novo-caption>{{person.email}}</novo-caption>\n              </novo-flex>\n            </novo-flex>\n          </novo-option>\n        </novo-autocomplete>\n      </novo-field>\n      <!-- Email Subject Line -->\n      <novo-field>\n        <novo-label>Subject</novo-label>\n        <input novoInput type=\"text\" />\n      </novo-field>\n      <!-- PRE-HEADER -->\n      <novo-field>\n        <novo-label>Pre-Header</novo-label>\n        <input novoInput type=\"text\" />\n      </novo-field>\n      <!-- The message to deliver -->\n      <novo-field>\n        <textarea #message novoInput placeholder=\"Message...\"></textarea>\n        <novo-hint>{{message.value.length}} / 256</novo-hint>\n        <novo-hint align=\"end\">Messages over 140 characters may be sent as multiple messages.</novo-hint>\n      </novo-field>\n    </novo-fields>\n  </novo-card-content>\n</novo-card>", styles: [".card-form-example{max-width:48rem}\n"] }]
        }], ctorParameters: () => [], propDecorators: { searchInput: [{
                type: ViewChild,
                args: ['searchInput']
            }] } });

/**
 * @title Activity Section
 */
class ActivitySectionExample {
    constructor() {
        this.isDisabled = true;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: ActivitySectionExample, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: ActivitySectionExample, isStandalone: false, selector: "activity-section-example", ngImport: i0, template: "<novo-expansion-panel theme=\"contact\">\n  <novo-expansion-panel-header>\n    <novo-panel-title>\n      <novo-icon>person</novo-icon>\n      <novo-title>Contacts</novo-title>\n    </novo-panel-title>\n  </novo-expansion-panel-header>\n\n  <p>This is the primary content of the panel.</p>\n\n</novo-expansion-panel>\n<novo-expansion-panel theme=\"job\" [hideToggle]=\"jp.expanded\" #jp>\n  <novo-expansion-panel-header>\n    <novo-panel-title>\n      <novo-icon>job</novo-icon>\n      <novo-title>Job Orders</novo-title>\n    </novo-panel-title>\n    <button theme=\"primary\" icon=\"add-thin\" [hidden]=\"!jp.expanded\">Add Job Order</button>\n  </novo-expansion-panel-header>\n\n  <p>This is the primary content of the panel.</p>\n\n</novo-expansion-panel>", styles: [""], dependencies: [{ kind: "component", type: i2$1.NovoButtonElement, selector: "novo-button,button[theme]", inputs: ["color", "side", "size", "theme", "loading", "icon", "secondIcon", "disabled"] }, { kind: "component", type: i2$1.NovoIconComponent, selector: "novo-icon", inputs: ["raised", "theme", "shape", "color", "size", "smaller", "larger", "alt", "name"] }, { kind: "component", type: i2$1.NovoExpansionPanel, selector: "novo-expansion-panel", inputs: ["hideToggle", "padding"], outputs: ["opened", "closed", "expandedChange"], exportAs: ["novoExpansionPanel"] }, { kind: "component", type: i2$1.NovoExpansionPanelHeader, selector: "novo-expansion-panel-header", inputs: ["expandedHeight", "collapsedHeight"] }, { kind: "directive", type: i2$1.NovoExpansionPanelTitle, selector: "novo-panel-title" }, { kind: "component", type: i2$1.NovoTitle, selector: "novo-title,[novo-title]" }, { kind: "directive", type: i2$1.ThemeColorDirective, selector: "[theme]", inputs: ["theme"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: ActivitySectionExample, decorators: [{
            type: Component,
            args: [{ selector: 'activity-section-example', standalone: false, template: "<novo-expansion-panel theme=\"contact\">\n  <novo-expansion-panel-header>\n    <novo-panel-title>\n      <novo-icon>person</novo-icon>\n      <novo-title>Contacts</novo-title>\n    </novo-panel-title>\n  </novo-expansion-panel-header>\n\n  <p>This is the primary content of the panel.</p>\n\n</novo-expansion-panel>\n<novo-expansion-panel theme=\"job\" [hideToggle]=\"jp.expanded\" #jp>\n  <novo-expansion-panel-header>\n    <novo-panel-title>\n      <novo-icon>job</novo-icon>\n      <novo-title>Job Orders</novo-title>\n    </novo-panel-title>\n    <button theme=\"primary\" icon=\"add-thin\" [hidden]=\"!jp.expanded\">Add Job Order</button>\n  </novo-expansion-panel-header>\n\n  <p>This is the primary content of the panel.</p>\n\n</novo-expansion-panel>" }]
        }], ctorParameters: () => [] });

/**
 * @title Vertical Tabs
 */
class TabsVerticalExample {
    tabSelected() {
        console.log('TAB SELECTED'); // tslint:disable-line
    }
    tabDeselected() {
        console.log('TAB DESELECTED'); // tslint:disable-line
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: TabsVerticalExample, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: TabsVerticalExample, isStandalone: false, selector: "tabs-vertical-example", ngImport: i0, template: "<novo-nav theme=\"white\" [outlet]=\"colorVert\" direction=\"vertical\">\n  <novo-tab>\n      <span>\n          <i class=\"bhi-person\"></i>Tab 1</span>\n  </novo-tab>\n  <novo-tab>\n      <span>\n          <i class=\"bhi-person\"></i>Tab 2</span>\n  </novo-tab>\n  <novo-tab [disabled]=\"true\">\n      <span>\n          <i class=\"bhi-person\"></i>Tab 3</span>\n  </novo-tab>\n</novo-nav>\n\n<novo-nav-outlet #colorVert>\n  <novo-nav-content>\n      <h1>Tab 1 Content</h1>\n\n      <p>\n          Synth polaroid bitters chillwave pickled. Vegan disrupt tousled,\n          Portland keffiyeh aesthetic food truck sriracha cornhole\n          single-origin coffee church-key roof party. Leggings\n          ethical McSweeney's, normcore you probably haven't\n          heard of them Marfa organic squid. Slow-carb 90's\n          ennui Godard pug asymmetrical, narwhal VHS Tonx High\n          Life. Retro dreamcatcher synth Godard pickled Etsy\n          jean shorts beard, pour-over fanny pack mumblecore.\n          Quinoa retro aesthetic polaroid, Williamsburg American\n          Apparel plaid small batch. Blue Bottle Vice fanny\n          pack, Williamsburg roof party Wes Anderson mlkshk\n          seitan brunch before they sold out lo-fi XOXO tofu\n          scenester small batch.\n      </p>\n  </novo-nav-content>\n  <novo-nav-content>\n      <h1>Tab 2 Content</h1>\n\n      <p>\n          Synth polaroid bitters chillwave pickled.\n      </p>\n  </novo-nav-content>\n</novo-nav-outlet>\n", styles: [""], dependencies: [{ kind: "component", type: i2$1.NovoNavElement, selector: "novo-nav", inputs: ["theme", "direction", "outlet", "router", "condensed", "selectedIndex"], outputs: ["selectedIndexChange"] }, { kind: "component", type: i2$1.NovoTabElement, selector: "novo-tab", inputs: ["active", "color", "disabled"], outputs: ["activeChange"] }, { kind: "component", type: i2$1.NovoNavOutletElement, selector: "novo-nav-outlet" }, { kind: "component", type: i2$1.NovoNavContentElement, selector: "novo-nav-content", inputs: ["active"] }, { kind: "directive", type: i2$1.ThemeColorDirective, selector: "[theme]", inputs: ["theme"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: TabsVerticalExample, decorators: [{
            type: Component,
            args: [{ selector: 'tabs-vertical-example', standalone: false, template: "<novo-nav theme=\"white\" [outlet]=\"colorVert\" direction=\"vertical\">\n  <novo-tab>\n      <span>\n          <i class=\"bhi-person\"></i>Tab 1</span>\n  </novo-tab>\n  <novo-tab>\n      <span>\n          <i class=\"bhi-person\"></i>Tab 2</span>\n  </novo-tab>\n  <novo-tab [disabled]=\"true\">\n      <span>\n          <i class=\"bhi-person\"></i>Tab 3</span>\n  </novo-tab>\n</novo-nav>\n\n<novo-nav-outlet #colorVert>\n  <novo-nav-content>\n      <h1>Tab 1 Content</h1>\n\n      <p>\n          Synth polaroid bitters chillwave pickled. Vegan disrupt tousled,\n          Portland keffiyeh aesthetic food truck sriracha cornhole\n          single-origin coffee church-key roof party. Leggings\n          ethical McSweeney's, normcore you probably haven't\n          heard of them Marfa organic squid. Slow-carb 90's\n          ennui Godard pug asymmetrical, narwhal VHS Tonx High\n          Life. Retro dreamcatcher synth Godard pickled Etsy\n          jean shorts beard, pour-over fanny pack mumblecore.\n          Quinoa retro aesthetic polaroid, Williamsburg American\n          Apparel plaid small batch. Blue Bottle Vice fanny\n          pack, Williamsburg roof party Wes Anderson mlkshk\n          seitan brunch before they sold out lo-fi XOXO tofu\n          scenester small batch.\n      </p>\n  </novo-nav-content>\n  <novo-nav-content>\n      <h1>Tab 2 Content</h1>\n\n      <p>\n          Synth polaroid bitters chillwave pickled.\n      </p>\n  </novo-nav-content>\n</novo-nav-outlet>\n" }]
        }] });

/**
 * @title Tabs for Navigation
 */
class TabsRouterExample {
    tabSelected() {
        console.log('TAB SELECTED'); // tslint:disable-line
    }
    tabDeselected() {
        console.log('TAB DESELECTED'); // tslint:disable-line
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: TabsRouterExample, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: TabsRouterExample, isStandalone: false, selector: "tabs-router-example", ngImport: i0, template: "<header>\n  <novo-nav theme=\"white\" router>\n      <novo-tab-link>\n          <span>\n              <i class=\"bhi-person\"></i>Tab 1</span>\n      </novo-tab-link>\n      <novo-tab-link>\n          <span>\n              <i class=\"bhi-person\"></i>Tab 2</span>\n      </novo-tab-link>\n       <novo-tab-link [disabled]=\"true\">\n          <span>\n              <i class=\"bhi-person\"></i>Tab 3</span>\n      </novo-tab-link>\n  </novo-nav>\n</header>\n", styles: [""], dependencies: [{ kind: "component", type: i2$1.NovoNavElement, selector: "novo-nav", inputs: ["theme", "direction", "outlet", "router", "condensed", "selectedIndex"], outputs: ["selectedIndexChange"] }, { kind: "component", type: i2$1.NovoTabLinkElement, selector: "novo-tab-link", inputs: ["active", "disabled", "spy"] }, { kind: "directive", type: i2$1.ThemeColorDirective, selector: "[theme]", inputs: ["theme"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: TabsRouterExample, decorators: [{
            type: Component,
            args: [{ selector: 'tabs-router-example', standalone: false, template: "<header>\n  <novo-nav theme=\"white\" router>\n      <novo-tab-link>\n          <span>\n              <i class=\"bhi-person\"></i>Tab 1</span>\n      </novo-tab-link>\n      <novo-tab-link>\n          <span>\n              <i class=\"bhi-person\"></i>Tab 2</span>\n      </novo-tab-link>\n       <novo-tab-link [disabled]=\"true\">\n          <span>\n              <i class=\"bhi-person\"></i>Tab 3</span>\n      </novo-tab-link>\n  </novo-nav>\n</header>\n" }]
        }] });

/**
 * @title Condensed Tabs
 */
class TabsCondensedExample {
    tabSelected() {
        console.log('TAB SELECTED'); // tslint:disable-line
    }
    tabDeselected() {
        console.log('TAB DESELECTED'); // tslint:disable-line
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: TabsCondensedExample, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: TabsCondensedExample, isStandalone: false, selector: "tabs-condensed-example", ngImport: i0, template: "<novo-nav theme=\"white\" [outlet]=\"condensed\" condensed=\"true\">\n  <novo-tab>\n      <span><i class=\"bhi-person\"></i>Tab 1</span>\n  </novo-tab>\n  <novo-tab>\n      <span><i class=\"bhi-person\"></i>Tab 2</span>\n  </novo-tab>\n  <novo-tab [disabled]=\"true\">\n      <span><i class=\"bhi-person\"></i>Tab 3</span>\n  </novo-tab>\n</novo-nav>\n\n\n<novo-nav-outlet #condensed>\n  <novo-nav-content>\n      <h1>Tab 1 Content</h1>\n  </novo-nav-content>\n  <novo-nav-content>\n      <h1>Tab 2 Content</h1>\n  </novo-nav-content>\n</novo-nav-outlet>\n", styles: [""], dependencies: [{ kind: "component", type: i2$1.NovoNavElement, selector: "novo-nav", inputs: ["theme", "direction", "outlet", "router", "condensed", "selectedIndex"], outputs: ["selectedIndexChange"] }, { kind: "component", type: i2$1.NovoTabElement, selector: "novo-tab", inputs: ["active", "color", "disabled"], outputs: ["activeChange"] }, { kind: "component", type: i2$1.NovoNavOutletElement, selector: "novo-nav-outlet" }, { kind: "component", type: i2$1.NovoNavContentElement, selector: "novo-nav-content", inputs: ["active"] }, { kind: "directive", type: i2$1.ThemeColorDirective, selector: "[theme]", inputs: ["theme"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: TabsCondensedExample, decorators: [{
            type: Component,
            args: [{ selector: 'tabs-condensed-example', standalone: false, template: "<novo-nav theme=\"white\" [outlet]=\"condensed\" condensed=\"true\">\n  <novo-tab>\n      <span><i class=\"bhi-person\"></i>Tab 1</span>\n  </novo-tab>\n  <novo-tab>\n      <span><i class=\"bhi-person\"></i>Tab 2</span>\n  </novo-tab>\n  <novo-tab [disabled]=\"true\">\n      <span><i class=\"bhi-person\"></i>Tab 3</span>\n  </novo-tab>\n</novo-nav>\n\n\n<novo-nav-outlet #condensed>\n  <novo-nav-content>\n      <h1>Tab 1 Content</h1>\n  </novo-nav-content>\n  <novo-nav-content>\n      <h1>Tab 2 Content</h1>\n  </novo-nav-content>\n</novo-nav-outlet>\n" }]
        }] });

/**
 * @title Colorful Tabs
 */
class TabsColorExample {
    constructor() {
        this.selected = 1;
    }
    tabSelected() {
        console.log('TAB SELECTED'); // tslint:disable-line
    }
    tabDeselected() {
        console.log('TAB DESELECTED'); // tslint:disable-line
    }
    updateTabIndex(value) {
        this.selected += value;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: TabsColorExample, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: TabsColorExample, isStandalone: false, selector: "tabs-color-example", ngImport: i0, template: "<novo-toolbar>\n  <novo-toolbar-row accent=\"orange\" gap=\"md\">\n    <novo-icon>bull</novo-icon>\n    <novo-title>Tab Example</novo-title>\n    <span class=\"example-spacer\"></span>\n    <novo-action icon=\"previous\" (click)=\"updateTabIndex(-1)\"></novo-action>\n    <novo-text>Selected Index: {{selected}}</novo-text>\n    <novo-action icon=\"next\" (click)=\"updateTabIndex(1)\"></novo-action>\n  </novo-toolbar-row>\n\n  <novo-toolbar-row>\n    <novo-nav [outlet]=\"outlet\" direction=\"horizontal\" [(selectedIndex)]=\"selected\">\n      <novo-tab>\n        <novo-icon>person</novo-icon>\n        <novo-label>Tab 1</novo-label>\n      </novo-tab>\n      <novo-tab>\n        <novo-icon>person</novo-icon>\n        <novo-label>Tab 2</novo-label>\n      </novo-tab>\n      <novo-tab disabled>\n        <novo-icon>person</novo-icon>\n        <novo-label>Tab 3</novo-label>\n      </novo-tab>\n    </novo-nav>\n  </novo-toolbar-row>\n</novo-toolbar>\n\n\n<novo-nav-outlet #outlet>\n  <novo-nav-content>\n    <h1>Tab 1 Content</h1>\n  </novo-nav-content>\n  <novo-nav-content>\n    <h1>Tab 2 Content</h1>\n  </novo-nav-content>\n  <novo-nav-content>\n    <h1>Tab 3 Content</h1>\n  </novo-nav-content>\n</novo-nav-outlet>", styles: [""], dependencies: [{ kind: "component", type: i2$1.NovoUtilActionComponent, selector: "util-action, novo-action", inputs: ["icon", "size", "inverse", "disabled"] }, { kind: "component", type: i2$1.NovoNavElement, selector: "novo-nav", inputs: ["theme", "direction", "outlet", "router", "condensed", "selectedIndex"], outputs: ["selectedIndexChange"] }, { kind: "component", type: i2$1.NovoTabElement, selector: "novo-tab", inputs: ["active", "color", "disabled"], outputs: ["activeChange"] }, { kind: "component", type: i2$1.NovoNavOutletElement, selector: "novo-nav-outlet" }, { kind: "component", type: i2$1.NovoNavContentElement, selector: "novo-nav-content", inputs: ["active"] }, { kind: "component", type: i2$1.NovoIconComponent, selector: "novo-icon", inputs: ["raised", "theme", "shape", "color", "size", "smaller", "larger", "alt", "name"] }, { kind: "component", type: i2$1.NovoText, selector: "novo-text,[novo-text]", inputs: ["block"] }, { kind: "component", type: i2$1.NovoTitle, selector: "novo-title,[novo-title]" }, { kind: "component", type: i2$1.NovoLabel, selector: "novo-label,[novo-label]", inputs: ["id"] }, { kind: "directive", type: i2$1.GapDirective, selector: "[gap]", inputs: ["gap"] }, { kind: "directive", type: i2$1.AccentColorDirective, selector: "[accent]", inputs: ["accent"] }, { kind: "component", type: i2$1.NovoToolbar, selector: "novo-toolbar", inputs: ["color", "gap"] }, { kind: "directive", type: i2$1.NovoToolbarRow, selector: "novo-toolbar-row", inputs: ["color", "gap"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: TabsColorExample, decorators: [{
            type: Component,
            args: [{ selector: 'tabs-color-example', standalone: false, template: "<novo-toolbar>\n  <novo-toolbar-row accent=\"orange\" gap=\"md\">\n    <novo-icon>bull</novo-icon>\n    <novo-title>Tab Example</novo-title>\n    <span class=\"example-spacer\"></span>\n    <novo-action icon=\"previous\" (click)=\"updateTabIndex(-1)\"></novo-action>\n    <novo-text>Selected Index: {{selected}}</novo-text>\n    <novo-action icon=\"next\" (click)=\"updateTabIndex(1)\"></novo-action>\n  </novo-toolbar-row>\n\n  <novo-toolbar-row>\n    <novo-nav [outlet]=\"outlet\" direction=\"horizontal\" [(selectedIndex)]=\"selected\">\n      <novo-tab>\n        <novo-icon>person</novo-icon>\n        <novo-label>Tab 1</novo-label>\n      </novo-tab>\n      <novo-tab>\n        <novo-icon>person</novo-icon>\n        <novo-label>Tab 2</novo-label>\n      </novo-tab>\n      <novo-tab disabled>\n        <novo-icon>person</novo-icon>\n        <novo-label>Tab 3</novo-label>\n      </novo-tab>\n    </novo-nav>\n  </novo-toolbar-row>\n</novo-toolbar>\n\n\n<novo-nav-outlet #outlet>\n  <novo-nav-content>\n    <h1>Tab 1 Content</h1>\n  </novo-nav-content>\n  <novo-nav-content>\n    <h1>Tab 2 Content</h1>\n  </novo-nav-content>\n  <novo-nav-content>\n    <h1>Tab 3 Content</h1>\n  </novo-nav-content>\n</novo-nav-outlet>" }]
        }] });

/**
 * @title Basic Tabs
 */
class TabsBasicExample {
    tabSelected() {
        console.log('TAB SELECTED'); // tslint:disable-line
    }
    tabDeselected() {
        console.log('TAB DESELECTED'); // tslint:disable-line
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: TabsBasicExample, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: TabsBasicExample, isStandalone: false, selector: "tabs-basic-example", ngImport: i0, template: "<novo-nav theme=\"white\" mx=\"xl\">\n  <novo-tab>Overview</novo-tab>\n  <novo-tab>Edit</novo-tab>\n  <novo-tab>Activity</novo-tab>\n  <novo-tab>Notes</novo-tab>\n  <novo-tab disabled>Disabled</novo-tab>\n</novo-nav>", styles: [""], dependencies: [{ kind: "component", type: i2$1.NovoNavElement, selector: "novo-nav", inputs: ["theme", "direction", "outlet", "router", "condensed", "selectedIndex"], outputs: ["selectedIndexChange"] }, { kind: "component", type: i2$1.NovoTabElement, selector: "novo-tab", inputs: ["active", "color", "disabled"], outputs: ["activeChange"] }, { kind: "directive", type: i2$1.MarginDirective, selector: "[m],[margin],[marginTop],[marginRight],[marginBottom],[marginLeft],[marginX],[marginY],[mt],[mr],[mb],[ml],[mx],[my]", inputs: ["margin", "m", "marginLeft", "ml", "marginRight", "mr", "marginTop", "mt", "marginBottom", "mb", "marginX", "mx", "marginY", "my"] }, { kind: "directive", type: i2$1.ThemeColorDirective, selector: "[theme]", inputs: ["theme"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: TabsBasicExample, decorators: [{
            type: Component,
            args: [{ selector: 'tabs-basic-example', standalone: false, template: "<novo-nav theme=\"white\" mx=\"xl\">\n  <novo-tab>Overview</novo-tab>\n  <novo-tab>Edit</novo-tab>\n  <novo-tab>Activity</novo-tab>\n  <novo-tab>Notes</novo-tab>\n  <novo-tab disabled>Disabled</novo-tab>\n</novo-nav>" }]
        }] });

/**
 * @title Stepper w/ Vertical Layout
 */
class StepperVerticalExample {
    constructor(_formBuilder) {
        this._formBuilder = _formBuilder;
        this.isLinear = true;
    }
    ngOnInit() {
        this.firstFormGroup = this._formBuilder.group({
            firstCtrl: ['', Validators.required],
        });
        this.secondFormGroup = this._formBuilder.group({
            secondCtrl: ['', Validators.required],
        });
    }
    next(stepper, step) {
        step.editable = false;
        stepper.next();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: StepperVerticalExample, deps: [{ token: i1.UntypedFormBuilder }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: StepperVerticalExample, isStandalone: false, selector: "stepper-vertical-example", ngImport: i0, template: "<novo-vertical-stepper [linear]=\"isLinear\" #stepper>\n  <novo-step [stepControl]=\"firstFormGroup\" theme=\"candidate\" icon=\"candidate\" #step1>\n    <form [formGroup]=\"firstFormGroup\">\n      <ng-template novoStepLabel>Fill out your name</ng-template>\n      <input placeholder=\"Last name, First name\" formControlName=\"firstCtrl\" required />\n      <div>\n        <!-- <button novo-button novoStepperNext>Next</button> -->\n        <button (click)=\"next(stepper, step1)\" [disabled]=\"!firstFormGroup?.valid\">Next</button>\n      </div>\n    </form>\n  </novo-step>\n  <novo-step [stepControl]=\"secondFormGroup\" theme=\"contact\" icon=\"person\">\n    <form [formGroup]=\"secondFormGroup\">\n      <ng-template novoStepLabel>Fill out your address</ng-template>\n      <input placeholder=\"Address\" formControlName=\"secondCtrl\" required />\n      <div>\n        <!-- <button novo-button novoStepperPrevious>Back</button>\n        <button novo-button novoStepperNext>Next</button> -->\n        <button (click)=\"stepper.previous()\">Back</button>\n        <button (click)=\"stepper.next()\">Next</button>\n      </div>\n    </form>\n  </novo-step>\n  <novo-step>\n    <ng-template novoStepLabel>Done</ng-template>\n    You are now done.\n    <div>\n      <button novo-button (click)=\"stepper.reset()\">Reset</button>\n    </div>\n  </novo-step>\n</novo-vertical-stepper>", styles: [""], dependencies: [{ kind: "directive", type: i1.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { kind: "directive", type: i1.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i1.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { kind: "directive", type: i1.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { kind: "directive", type: i1.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { kind: "directive", type: i1.FormControlName, selector: "[formControlName]", inputs: ["formControlName", "disabled", "ngModel"], outputs: ["ngModelChange"] }, { kind: "directive", type: i2$1.ThemeColorDirective, selector: "[theme]", inputs: ["theme"] }, { kind: "component", type: i2$1.NovoVerticalStepper, selector: "novo-vertical-stepper", exportAs: ["novoVerticalStepper"] }, { kind: "component", type: i2$1.NovoStep, selector: "novo-step", inputs: ["theme", "color", "icon"] }, { kind: "directive", type: i2$1.NovoStepLabel, selector: "[novoStepLabel]" }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: StepperVerticalExample, decorators: [{
            type: Component,
            args: [{ selector: 'stepper-vertical-example', standalone: false, template: "<novo-vertical-stepper [linear]=\"isLinear\" #stepper>\n  <novo-step [stepControl]=\"firstFormGroup\" theme=\"candidate\" icon=\"candidate\" #step1>\n    <form [formGroup]=\"firstFormGroup\">\n      <ng-template novoStepLabel>Fill out your name</ng-template>\n      <input placeholder=\"Last name, First name\" formControlName=\"firstCtrl\" required />\n      <div>\n        <!-- <button novo-button novoStepperNext>Next</button> -->\n        <button (click)=\"next(stepper, step1)\" [disabled]=\"!firstFormGroup?.valid\">Next</button>\n      </div>\n    </form>\n  </novo-step>\n  <novo-step [stepControl]=\"secondFormGroup\" theme=\"contact\" icon=\"person\">\n    <form [formGroup]=\"secondFormGroup\">\n      <ng-template novoStepLabel>Fill out your address</ng-template>\n      <input placeholder=\"Address\" formControlName=\"secondCtrl\" required />\n      <div>\n        <!-- <button novo-button novoStepperPrevious>Back</button>\n        <button novo-button novoStepperNext>Next</button> -->\n        <button (click)=\"stepper.previous()\">Back</button>\n        <button (click)=\"stepper.next()\">Next</button>\n      </div>\n    </form>\n  </novo-step>\n  <novo-step>\n    <ng-template novoStepLabel>Done</ng-template>\n    You are now done.\n    <div>\n      <button novo-button (click)=\"stepper.reset()\">Reset</button>\n    </div>\n  </novo-step>\n</novo-vertical-stepper>" }]
        }], ctorParameters: () => [{ type: i1.UntypedFormBuilder }] });

/**
 * @title Basic Stepper Component
 */
class StepperHorizontalExample {
    constructor(_formBuilder) {
        this._formBuilder = _formBuilder;
        this.isLinear = true;
    }
    ngOnInit() {
        this.firstFormGroup = this._formBuilder.group({
            firstCtrl: ['', Validators.required],
        });
        this.secondFormGroup = this._formBuilder.group({
            secondCtrl: ['', Validators.required],
        });
    }
    next(stepper, step) {
        step.editable = false;
        stepper.next();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: StepperHorizontalExample, deps: [{ token: i1.UntypedFormBuilder }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: StepperHorizontalExample, isStandalone: false, selector: "stepper-horizontal-example", ngImport: i0, template: "<novo-horizontal-stepper [linear]=\"isLinear\" #stepper>\n  <novo-step [stepControl]=\"firstFormGroup\" label=\"Fill out your name\" theme=\"candidate\" icon=\"candidate\" #step1>\n    <form [formGroup]=\"firstFormGroup\">\n      <input placeholder=\"Last name, First name\" formControlName=\"firstCtrl\" required />\n      <div>Form Valid? {{firstFormGroup?.valid}}</div>\n      <div>\n        <button (click)=\"next(stepper, step1)\">Next</button>\n      </div>\n    </form>\n  </novo-step>\n  <novo-step [stepControl]=\"secondFormGroup\" theme=\"contact\">\n    <form [formGroup]=\"secondFormGroup\">\n      <ng-template novoStepLabel>Fill out your address</ng-template>\n      <input placeholder=\"Address\" formControlName=\"secondCtrl\" required />\n      <div>\n        <button (click)=\"stepper.previous()\">Back</button>\n        <button (click)=\"stepper.next()\">Next</button>\n      </div>\n    </form>\n  </novo-step>\n  <novo-step>\n    <ng-template novoStepLabel>Done</ng-template>\n    You are now done.\n    <div>\n      <button novo-button (click)=\"stepper.previous()\">Back</button>\n      <button novo-button (click)=\"stepper.complete()\">Done</button>\n    </div>\n  </novo-step>\n</novo-horizontal-stepper>", styles: [""], dependencies: [{ kind: "directive", type: i1.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { kind: "directive", type: i1.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i1.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { kind: "directive", type: i1.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { kind: "directive", type: i1.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { kind: "directive", type: i1.FormControlName, selector: "[formControlName]", inputs: ["formControlName", "disabled", "ngModel"], outputs: ["ngModelChange"] }, { kind: "directive", type: i2$1.ThemeColorDirective, selector: "[theme]", inputs: ["theme"] }, { kind: "component", type: i2$1.NovoHorizontalStepper, selector: "novo-horizontal-stepper", exportAs: ["novoHorizontalStepper"] }, { kind: "component", type: i2$1.NovoStep, selector: "novo-step", inputs: ["theme", "color", "icon"] }, { kind: "directive", type: i2$1.NovoStepLabel, selector: "[novoStepLabel]" }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: StepperHorizontalExample, decorators: [{
            type: Component,
            args: [{ selector: 'stepper-horizontal-example', standalone: false, template: "<novo-horizontal-stepper [linear]=\"isLinear\" #stepper>\n  <novo-step [stepControl]=\"firstFormGroup\" label=\"Fill out your name\" theme=\"candidate\" icon=\"candidate\" #step1>\n    <form [formGroup]=\"firstFormGroup\">\n      <input placeholder=\"Last name, First name\" formControlName=\"firstCtrl\" required />\n      <div>Form Valid? {{firstFormGroup?.valid}}</div>\n      <div>\n        <button (click)=\"next(stepper, step1)\">Next</button>\n      </div>\n    </form>\n  </novo-step>\n  <novo-step [stepControl]=\"secondFormGroup\" theme=\"contact\">\n    <form [formGroup]=\"secondFormGroup\">\n      <ng-template novoStepLabel>Fill out your address</ng-template>\n      <input placeholder=\"Address\" formControlName=\"secondCtrl\" required />\n      <div>\n        <button (click)=\"stepper.previous()\">Back</button>\n        <button (click)=\"stepper.next()\">Next</button>\n      </div>\n    </form>\n  </novo-step>\n  <novo-step>\n    <ng-template novoStepLabel>Done</ng-template>\n    You are now done.\n    <div>\n      <button novo-button (click)=\"stepper.previous()\">Back</button>\n      <button novo-button (click)=\"stepper.complete()\">Done</button>\n    </div>\n  </novo-step>\n</novo-horizontal-stepper>" }]
        }], ctorParameters: () => [{ type: i1.UntypedFormBuilder }] });

/**
 * @title Basic Sidenav
 */
class BasicSidenavExample {
    constructor() {
        this.isMobile = false;
        this.collapsed = false;
        this.openWindows = [
            {
                type: 'record',
                accent: 'candidate',
                label: `101 | Ferdinand del Toro`,
            },
            {
                type: 'record',
                accent: 'job',
                label: `101 | Ferdinand del Toro`,
            },
            {
                type: 'list',
                accent: 'company',
                label: `Companies`,
            },
        ];
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: BasicSidenavExample, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: BasicSidenavExample, isStandalone: false, selector: "basic-sidenav-example", ngImport: i0, template: "<div class=\"sidenav-example\">\n  <novo-toolbar color=\"navigation\">\n    <novo-action icon=\"menu\" (click)=\"sidenav.toggle()\"></novo-action>\n    <novo-divider vertical></novo-divider>\n    <img class=\"logo\" src=\"assets/images/bullhorn-logo.svg\" width=\"120\" height=\"32\" />\n\n    <div flex=\"1 1 auto\"></div>\n    <novo-divider vertical></novo-divider>\n    <novo-action icon=\"question\" tooltip=\"Support\"></novo-action>\n    <novo-divider vertical></novo-divider>\n    <novo-action icon=\"configure-o\" tooltip=\"Settings\"></novo-action>\n    <novo-divider vertical></novo-divider>\n    <novo-avatar image=\"https://robohash.org/bvkimball\" color=\"grass\"></novo-avatar>\n  </novo-toolbar>\n\n  <novo-layout-container>\n    <novo-rail [class.expanded]=\"!collapsed\">\n      <ng-container *ngFor=\"let win of openWindows\">\n        <ng-container [ngSwitch]=\"win.type\">\n          <novo-option *ngSwitchCase=\"'record'\" [accent]=\"win.accent\">\n            <novo-icon>{{win.accent}}</novo-icon>\n            <novo-text>{{win.label}}</novo-text>\n            <novo-action icon=\"x\"></novo-action>\n          </novo-option>\n          <novo-option *ngSwitchCase=\"'list'\" [fill]=\"win.accent\">\n            <novo-icon>{{win.accent}}</novo-icon>\n            <novo-text>{{win.label}}</novo-text>\n            <novo-action icon=\"x\"></novo-action>\n          </novo-option>\n        </ng-container>\n      </ng-container>\n      <novo-option (click)=\"collapsed=!collapsed\">\n        <novo-icon>{{collapsed ? 'arrow-right' : 'arrow-left'}}</novo-icon>\n        <novo-text>Collapse All</novo-text>\n      </novo-option>\n    </novo-rail>\n\n    <novo-sidenav\n      #sidenav\n      [mode]=\"isMobile ? 'over' : 'side'\"\n      [opened]=\"!isMobile\"\n      [disableClose]=\"!isMobile\"\n      theme=\"navigation\">\n      <novo-header theme=\"navigation\" [condensed]=\"true\">\n        <div novo-title>Application Menu</div>\n      </novo-header>\n      <novo-list theme=\"navigation\" direction=\"vertical\">\n        <novo-divider></novo-divider>\n        <novo-list-item><a>Job Orders</a></novo-list-item>\n        <button list-item>Companies</button>\n        <novo-list-item>Placements</novo-list-item>\n        <novo-list-item>Contacts</novo-list-item>\n        <novo-list-item>Candidates</novo-list-item>\n        <novo-divider></novo-divider>\n        <novo-list-item>Reports</novo-list-item>\n        <novo-list-item>Settings</novo-list-item>\n        <novo-list-item>About</novo-list-item>\n        <a list-item>Users</a>\n\n      </novo-list>\n\n    </novo-sidenav>\n    <novo-layout-content>\n      <novo-toolbar accent=\"candidate\" gap=\"md\">\n        <novo-icon color=\"candidate\">candidate</novo-icon>\n        <novo-title>Ferdinand del Toro</novo-title>\n      </novo-toolbar>\n      <novo-toolbar gap=\"md\">\n        <novo-stack>\n          <novo-label>ID</novo-label>\n          <novo-text>101</novo-text>\n        </novo-stack>\n        <novo-stack>\n          <novo-label>Owner</novo-label>\n          <novo-text>Brian Kimball</novo-text>\n        </novo-stack>\n      </novo-toolbar>\n      <novo-toolbar gap=\"md\">\n        <novo-nav [outlet]=\"pages\">\n          <novo-tab>Overview</novo-tab>\n          <novo-tab>Activity</novo-tab>\n          <novo-tab>Files</novo-tab>\n        </novo-nav>\n      </novo-toolbar>\n      <novo-nav-outlet #pages>\n        <novo-nav-content>\n          <div>\n            SIDENAV CONTENT\n            <novo-label>Is Mobile?</novo-label>\n            <novo-switch [(ngModel)]=\"isMobile\"></novo-switch>\n          </div>\n        </novo-nav-content>\n        <novo-nav-content>\n          <h1>Tab 2 Content</h1>\n        </novo-nav-content>\n        <novo-nav-content>\n          <h1>Tab 3 Content</h1>\n        </novo-nav-content>\n      </novo-nav-outlet>\n\n    </novo-layout-content>\n  </novo-layout-container>\n</div>", styles: [".sidenav-example{height:640px;width:640px;display:grid;grid-template-rows:auto 1fr}.novo-rail{border-right:1px solid var(--border)}.novo-rail .novo-text{flex:1}.novo-rail:not(.expanded) .novo-text,.novo-rail:not(.expanded) .novo-action{display:none}\n"], dependencies: [{ kind: "directive", type: i1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i1.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "directive", type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i2.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { kind: "directive", type: i2.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { kind: "component", type: i2$1.NovoAvatarElement, selector: "novo-avatar", inputs: ["source", "label", "theme", "image", "size", "shape", "color"] }, { kind: "component", type: i2$1.NovoStackElement, selector: "novo-stack,novo-column", inputs: ["direction", "align"] }, { kind: "component", type: i2$1.NovoLayoutContainer, selector: "novo-layout-container", inputs: ["autosize", "hasBackdrop"], outputs: ["backdropClick"], exportAs: ["novoLayoutContainer"] }, { kind: "component", type: i2$1.NovoLayoutContent, selector: "novo-layout-content", exportAs: ["novoLayoutContent"] }, { kind: "component", type: i2$1.NovoSidenavComponent, selector: "novo-sidenav", inputs: ["fixedInViewport", "fixedTopGap", "fixedBottomGap", "position", "mode", "disableClose", "autoFocus", "opened"], outputs: ["openedChange", "opened", "openedStart", "closed", "closedStart", "positionChanged"], exportAs: ["novoSidenav"] }, { kind: "component", type: i2$1.NovoRailComponent, selector: "novo-rail" }, { kind: "component", type: i2$1.NovoDividerComponent, selector: "novo-divider", inputs: ["vertical", "inset"] }, { kind: "directive", type: i2$1.TooltipDirective, selector: "[tooltip]", inputs: ["tooltip", "tooltipPosition", "tooltipType", "tooltipSize", "tooltipBounce", "tooltipNoAnimate", "tooltipRounded", "tooltipAlways", "tooltipPreline", "removeTooltipArrow", "tooltipAutoPosition", "tooltipIsHTML", "tooltipCloseOnClick", "tooltipOnOverflow", "tooltipActive"] }, { kind: "component", type: i2$1.NovoHeaderComponent, selector: "novo-header,header[theme],header[accent]", inputs: ["condensed", "title", "subTitle", "icon", "size", "theme"] }, { kind: "component", type: i2$1.NovoUtilActionComponent, selector: "util-action, novo-action", inputs: ["icon", "size", "inverse", "disabled"] }, { kind: "component", type: i2$1.NovoNavElement, selector: "novo-nav", inputs: ["theme", "direction", "outlet", "router", "condensed", "selectedIndex"], outputs: ["selectedIndexChange"] }, { kind: "component", type: i2$1.NovoTabElement, selector: "novo-tab", inputs: ["active", "color", "disabled"], outputs: ["activeChange"] }, { kind: "component", type: i2$1.NovoNavOutletElement, selector: "novo-nav-outlet" }, { kind: "component", type: i2$1.NovoNavContentElement, selector: "novo-nav-content", inputs: ["active"] }, { kind: "component", type: i2$1.NovoListElement, selector: "novo-list", inputs: ["theme", "direction"] }, { kind: "component", type: i2$1.NovoListItemElement, selector: "novo-list-item, a[list-item], button[list-item]" }, { kind: "component", type: i2$1.NovoSwitchElement, selector: "novo-switch", inputs: ["theme", "icons", "disabled"], outputs: ["onChange"] }, { kind: "component", type: i2$1.NovoIconComponent, selector: "novo-icon", inputs: ["raised", "theme", "shape", "color", "size", "smaller", "larger", "alt", "name"] }, { kind: "component", type: i2$1.NovoText, selector: "novo-text,[novo-text]", inputs: ["block"] }, { kind: "component", type: i2$1.NovoTitle, selector: "novo-title,[novo-title]" }, { kind: "component", type: i2$1.NovoLabel, selector: "novo-label,[novo-label]", inputs: ["id"] }, { kind: "directive", type: i2$1.GapDirective, selector: "[gap]", inputs: ["gap"] }, { kind: "directive", type: i2$1.AccentColorDirective, selector: "[accent]", inputs: ["accent"] }, { kind: "directive", type: i2$1.FillColorDirective, selector: "[fill]", inputs: ["fill"] }, { kind: "directive", type: i2$1.FlexDirective, selector: "[flex]", inputs: ["flex"] }, { kind: "directive", type: i2$1.ThemeColorDirective, selector: "[theme]", inputs: ["theme"] }, { kind: "component", type: i2$1.NovoOption, selector: "novo-option", inputs: ["selected", "keepOpen", "novoInert", "value", "disabled"], exportAs: ["novoOption"] }, { kind: "component", type: i2$1.NovoToolbar, selector: "novo-toolbar", inputs: ["color", "gap"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: BasicSidenavExample, decorators: [{
            type: Component,
            args: [{ selector: 'basic-sidenav-example', standalone: false, template: "<div class=\"sidenav-example\">\n  <novo-toolbar color=\"navigation\">\n    <novo-action icon=\"menu\" (click)=\"sidenav.toggle()\"></novo-action>\n    <novo-divider vertical></novo-divider>\n    <img class=\"logo\" src=\"assets/images/bullhorn-logo.svg\" width=\"120\" height=\"32\" />\n\n    <div flex=\"1 1 auto\"></div>\n    <novo-divider vertical></novo-divider>\n    <novo-action icon=\"question\" tooltip=\"Support\"></novo-action>\n    <novo-divider vertical></novo-divider>\n    <novo-action icon=\"configure-o\" tooltip=\"Settings\"></novo-action>\n    <novo-divider vertical></novo-divider>\n    <novo-avatar image=\"https://robohash.org/bvkimball\" color=\"grass\"></novo-avatar>\n  </novo-toolbar>\n\n  <novo-layout-container>\n    <novo-rail [class.expanded]=\"!collapsed\">\n      <ng-container *ngFor=\"let win of openWindows\">\n        <ng-container [ngSwitch]=\"win.type\">\n          <novo-option *ngSwitchCase=\"'record'\" [accent]=\"win.accent\">\n            <novo-icon>{{win.accent}}</novo-icon>\n            <novo-text>{{win.label}}</novo-text>\n            <novo-action icon=\"x\"></novo-action>\n          </novo-option>\n          <novo-option *ngSwitchCase=\"'list'\" [fill]=\"win.accent\">\n            <novo-icon>{{win.accent}}</novo-icon>\n            <novo-text>{{win.label}}</novo-text>\n            <novo-action icon=\"x\"></novo-action>\n          </novo-option>\n        </ng-container>\n      </ng-container>\n      <novo-option (click)=\"collapsed=!collapsed\">\n        <novo-icon>{{collapsed ? 'arrow-right' : 'arrow-left'}}</novo-icon>\n        <novo-text>Collapse All</novo-text>\n      </novo-option>\n    </novo-rail>\n\n    <novo-sidenav\n      #sidenav\n      [mode]=\"isMobile ? 'over' : 'side'\"\n      [opened]=\"!isMobile\"\n      [disableClose]=\"!isMobile\"\n      theme=\"navigation\">\n      <novo-header theme=\"navigation\" [condensed]=\"true\">\n        <div novo-title>Application Menu</div>\n      </novo-header>\n      <novo-list theme=\"navigation\" direction=\"vertical\">\n        <novo-divider></novo-divider>\n        <novo-list-item><a>Job Orders</a></novo-list-item>\n        <button list-item>Companies</button>\n        <novo-list-item>Placements</novo-list-item>\n        <novo-list-item>Contacts</novo-list-item>\n        <novo-list-item>Candidates</novo-list-item>\n        <novo-divider></novo-divider>\n        <novo-list-item>Reports</novo-list-item>\n        <novo-list-item>Settings</novo-list-item>\n        <novo-list-item>About</novo-list-item>\n        <a list-item>Users</a>\n\n      </novo-list>\n\n    </novo-sidenav>\n    <novo-layout-content>\n      <novo-toolbar accent=\"candidate\" gap=\"md\">\n        <novo-icon color=\"candidate\">candidate</novo-icon>\n        <novo-title>Ferdinand del Toro</novo-title>\n      </novo-toolbar>\n      <novo-toolbar gap=\"md\">\n        <novo-stack>\n          <novo-label>ID</novo-label>\n          <novo-text>101</novo-text>\n        </novo-stack>\n        <novo-stack>\n          <novo-label>Owner</novo-label>\n          <novo-text>Brian Kimball</novo-text>\n        </novo-stack>\n      </novo-toolbar>\n      <novo-toolbar gap=\"md\">\n        <novo-nav [outlet]=\"pages\">\n          <novo-tab>Overview</novo-tab>\n          <novo-tab>Activity</novo-tab>\n          <novo-tab>Files</novo-tab>\n        </novo-nav>\n      </novo-toolbar>\n      <novo-nav-outlet #pages>\n        <novo-nav-content>\n          <div>\n            SIDENAV CONTENT\n            <novo-label>Is Mobile?</novo-label>\n            <novo-switch [(ngModel)]=\"isMobile\"></novo-switch>\n          </div>\n        </novo-nav-content>\n        <novo-nav-content>\n          <h1>Tab 2 Content</h1>\n        </novo-nav-content>\n        <novo-nav-content>\n          <h1>Tab 3 Content</h1>\n        </novo-nav-content>\n      </novo-nav-outlet>\n\n    </novo-layout-content>\n  </novo-layout-container>\n</div>", styles: [".sidenav-example{height:640px;width:640px;display:grid;grid-template-rows:auto 1fr}.novo-rail{border-right:1px solid var(--border)}.novo-rail .novo-text{flex:1}.novo-rail:not(.expanded) .novo-text,.novo-rail:not(.expanded) .novo-action{display:none}\n"] }]
        }], ctorParameters: () => [] });

/**
 * @title Themed List Example
 */
class ThemedListExample {
    constructor() {
        const ONE_HOUR = 60 * 60 * 1000;
        /* ms */
        const TWO_HOURS = ONE_HOUR * 2;
        const THREE_HOURS = ONE_HOUR * 3;
        const currentDate = new Date();
        const oneHourAgo = currentDate.getTime() - ONE_HOUR;
        const twoHoursAgo = currentDate.getTime() - TWO_HOURS;
        const threeHoursAgo = currentDate.getTime() - THREE_HOURS;
        /* "mockResponse[]" should represent a REST response with improperly formatted data.
        /  The "buildItems()" function is taking this data object and massaging it
        /  to build the list items appropriately via a new data object "pulseItems[]".
        /  In page1.html you can see how the new object builds a list of items.
        /  - @asibilia
        */
        const mockResponse = [
            {
                type: 'opportunity',
                dateCreated: oneHourAgo,
                sentiment: {
                    rating: 'negative',
                    type: 'engagement',
                    comment: 'No emails in last 10 days',
                },
                user: {
                    firstName: 'Steph',
                    lastName: 'Curry',
                    company: 'Wells Fargo',
                    location: 'Golden State, CA',
                },
            },
            {
                type: 'opportunity',
                dateCreated: twoHoursAgo,
                sentiment: {
                    rating: 'negative',
                    type: 'probability',
                    comment: 'Now has low probability to close',
                },
                user: {
                    firstName: 'Lebron',
                    lastName: 'James',
                    company: 'Amazon',
                    location: 'Cleveland, OH',
                },
            },
            {
                type: 'company',
                dateCreated: threeHoursAgo,
                sentiment: {
                    rating: 'positive',
                    type: 'connection',
                    comment: 'New connection',
                },
                user: {
                    firstName: 'Derrick',
                    lastName: 'Rose',
                    company: 'Walmart',
                    location: 'Chicago, IL',
                },
            },
        ];
        this.pulseItems = [];
        this.buildItems(mockResponse);
    }
    buildItems(resp) {
        for (const obj of resp) {
            const item = {};
            /*
            ||| This is the item structure to be pushed to pulseItems[] and used
            ||| to build the list & items.
            |
            |   item = {
            |       "name": '',
            |       "type": '',
            |       "icon": {
            |           "name": '',
            |           "sentiment": ''
            |       },
            |       "comment": '',
            |       "timeAgo": ''
            |    }
            |
            */
            item.name = obj.user.company;
            item.type = obj.type;
            item.icon = {};
            if (obj.sentiment.type === 'connection') {
                item.icon.name = 'bhi-add-o';
            }
            if (obj.sentiment.type === 'engagement') {
                item.icon.name = obj.sentiment.rating === 'positive' ? 'bhi-trending-up' : 'bhi-trending-down';
            }
            item.icon.sentiment = obj.sentiment.rating;
            item.comment = obj.sentiment.comment;
            item.timeAgo = obj.dateCreated;
            this.pulseItems.push(item);
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: ThemedListExample, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: ThemedListExample, isStandalone: false, selector: "themed-list-example", ngImport: i0, template: "<header>\n    <novo-list theme=\"navigation\" direction=\"vertical\">\n        <novo-list-item *ngFor=\"let item of pulseItems\">\n            <item-header>\n                <item-avatar [icon]=\"item.type\"></item-avatar>\n                <item-title>{{item.name}}</item-title>\n            </item-header>\n            <item-content direction=\"vertical\">\n                <p>\n                    <i *ngIf=\"item.icon.name\" class=\"{{item.icon.name}} {{item.icon.sentiment}}\"></i>\n                    {{item.comment}}\n                </p>\n                <span>\n                    <i class=\"bhi-clock\"></i>\n                    {{item.timeAgo | date: 'shortTime'}}\n                </span>\n            </item-content>\n            <item-end>\n                <i class=\"bhi-next\"></i>\n            </item-end>\n        </novo-list-item>\n    </novo-list>\n</header>\n", styles: [""], dependencies: [{ kind: "directive", type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i2$1.NovoListElement, selector: "novo-list", inputs: ["theme", "direction"] }, { kind: "component", type: i2$1.NovoListItemElement, selector: "novo-list-item, a[list-item], button[list-item]" }, { kind: "component", type: i2$1.NovoItemAvatarElement, selector: "item-avatar, novo-item-avatar", inputs: ["icon", "color"] }, { kind: "component", type: i2$1.NovoItemTitleElement, selector: "item-title, novo-item-title" }, { kind: "component", type: i2$1.NovoItemHeaderElement, selector: "item-header, novo-item-header" }, { kind: "component", type: i2$1.NovoItemContentElement, selector: "item-content, novo-item-content", inputs: ["direction"] }, { kind: "component", type: i2$1.NovoItemEndElement, selector: "item-end, novo-item-end" }, { kind: "directive", type: i2$1.ThemeColorDirective, selector: "[theme]", inputs: ["theme"] }, { kind: "pipe", type: i2.DatePipe, name: "date" }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: ThemedListExample, decorators: [{
            type: Component,
            args: [{ selector: 'themed-list-example', standalone: false, template: "<header>\n    <novo-list theme=\"navigation\" direction=\"vertical\">\n        <novo-list-item *ngFor=\"let item of pulseItems\">\n            <item-header>\n                <item-avatar [icon]=\"item.type\"></item-avatar>\n                <item-title>{{item.name}}</item-title>\n            </item-header>\n            <item-content direction=\"vertical\">\n                <p>\n                    <i *ngIf=\"item.icon.name\" class=\"{{item.icon.name}} {{item.icon.sentiment}}\"></i>\n                    {{item.comment}}\n                </p>\n                <span>\n                    <i class=\"bhi-clock\"></i>\n                    {{item.timeAgo | date: 'shortTime'}}\n                </span>\n            </item-content>\n            <item-end>\n                <i class=\"bhi-next\"></i>\n            </item-end>\n        </novo-list-item>\n    </novo-list>\n</header>\n" }]
        }], ctorParameters: () => [] });

/**
 * @title Basic List Layout
 */
class BasicListExample {
    constructor() {
        const ONE_HOUR = 60 * 60 * 1000;
        /* ms */
        const TWO_HOURS = ONE_HOUR * 2;
        const THREE_HOURS = ONE_HOUR * 3;
        const currentDate = new Date();
        const oneHourAgo = currentDate.getTime() - ONE_HOUR;
        const twoHoursAgo = currentDate.getTime() - TWO_HOURS;
        const threeHoursAgo = currentDate.getTime() - THREE_HOURS;
        /* "mockResponse[]" should represent a REST response with improperly formatted data.
        /  The "buildItems()" function is taking this data object and massaging it
        /  to build the list items appropriately via a new data object "pulseItems[]".
        /  In page1.html you can see how the new object builds a list of items.
        /  - @asibilia
        */
        const mockResponse = [
            {
                type: 'opportunity',
                dateCreated: oneHourAgo,
                sentiment: {
                    rating: 'negative',
                    type: 'engagement',
                    comment: 'No emails in last 10 days',
                },
                user: {
                    firstName: 'Steph',
                    lastName: 'Curry',
                    company: 'Wells Fargo',
                    location: 'Golden State, CA',
                },
            },
            {
                type: 'opportunity',
                dateCreated: twoHoursAgo,
                sentiment: {
                    rating: 'negative',
                    type: 'probability',
                    comment: 'Now has low probability to close',
                },
                user: {
                    firstName: 'Lebron',
                    lastName: 'James',
                    company: 'Amazon',
                    location: 'Cleveland, OH',
                },
            },
            {
                type: 'company',
                dateCreated: threeHoursAgo,
                sentiment: {
                    rating: 'positive',
                    type: 'connection',
                    comment: 'New connection',
                },
                user: {
                    firstName: 'Derrick',
                    lastName: 'Rose',
                    company: 'Walmart',
                    location: 'Chicago, IL',
                },
            },
        ];
        this.pulseItems = [];
        this.buildItems(mockResponse);
    }
    buildItems(resp) {
        for (const obj of resp) {
            const item = {};
            /*
            ||| This is the item structure to be pushed to pulseItems[] and used
            ||| to build the list & items.
            |
            |   item = {
            |       "name": '',
            |       "type": '',
            |       "icon": {
            |           "name": '',
            |           "sentiment": ''
            |       },
            |       "comment": '',
            |       "timeAgo": ''
            |    }
            |
            */
            item.name = obj.user.company;
            item.type = obj.type;
            item.icon = {};
            if (obj.sentiment.type === 'connection') {
                item.icon.name = 'bhi-add-o';
            }
            if (obj.sentiment.type === 'engagement') {
                item.icon.name = obj.sentiment.rating === 'positive' ? 'bhi-trending-up' : 'bhi-trending-down';
            }
            item.icon.sentiment = obj.sentiment.rating;
            item.comment = obj.sentiment.comment;
            item.timeAgo = obj.dateCreated;
            this.pulseItems.push(item);
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: BasicListExample, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: BasicListExample, isStandalone: false, selector: "basic-list-example", ngImport: i0, template: "<header>\n    <novo-list direction=\"vertical\">\n        <novo-list-item *ngFor=\"let item of pulseItems\">\n            <item-header>\n                <item-avatar [icon]=\"item.type\"></item-avatar>\n                <item-title>{{item.name}}</item-title>\n                <item-header-end>\n                    <span>\n                        <i class=\"bhi-clock\"></i>\n                        {{item.timeAgo | date: 'shortTime'}}\n                    </span>\n                </item-header-end>\n            </item-header>\n            <item-content direction=\"vertical\">\n                <p>\n                    <i *ngIf=\"item.icon.name\" class=\"{{item.icon.name}} {{item.icon.sentiment}}\"></i>\n                    {{item.comment}}\n                </p>\n            </item-content>\n        </novo-list-item>\n    </novo-list>\n</header>\n", styles: [""], dependencies: [{ kind: "directive", type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i2$1.NovoListElement, selector: "novo-list", inputs: ["theme", "direction"] }, { kind: "component", type: i2$1.NovoListItemElement, selector: "novo-list-item, a[list-item], button[list-item]" }, { kind: "component", type: i2$1.NovoItemAvatarElement, selector: "item-avatar, novo-item-avatar", inputs: ["icon", "color"] }, { kind: "component", type: i2$1.NovoItemTitleElement, selector: "item-title, novo-item-title" }, { kind: "component", type: i2$1.NovoItemHeaderElement, selector: "item-header, novo-item-header" }, { kind: "component", type: i2$1.NovoItemContentElement, selector: "item-content, novo-item-content", inputs: ["direction"] }, { kind: "component", type: i2$1.NovoItemDateElement, selector: "item-header-end, novo-item-header-end" }, { kind: "pipe", type: i2.DatePipe, name: "date" }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: BasicListExample, decorators: [{
            type: Component,
            args: [{ selector: 'basic-list-example', standalone: false, template: "<header>\n    <novo-list direction=\"vertical\">\n        <novo-list-item *ngFor=\"let item of pulseItems\">\n            <item-header>\n                <item-avatar [icon]=\"item.type\"></item-avatar>\n                <item-title>{{item.name}}</item-title>\n                <item-header-end>\n                    <span>\n                        <i class=\"bhi-clock\"></i>\n                        {{item.timeAgo | date: 'shortTime'}}\n                    </span>\n                </item-header-end>\n            </item-header>\n            <item-content direction=\"vertical\">\n                <p>\n                    <i *ngIf=\"item.icon.name\" class=\"{{item.icon.name}} {{item.icon.sentiment}}\"></i>\n                    {{item.comment}}\n                </p>\n            </item-content>\n        </novo-list-item>\n    </novo-list>\n</header>\n" }]
        }], ctorParameters: () => [] });

const HEADER_THEMES$3 = ['company', 'job', 'candidate', 'contact', 'opportunity', 'lead', 'light', 'white'];
const HEADER_ICONS$3 = ['company', 'job', 'candidate', 'person', 'opportunity', 'lead', 'bolt', 'shield'];
/**
 * @title Header with Subtitle Example
 */
class HeaderSubtitleExample {
    constructor(toaster) {
        this.toaster = toaster;
        this.theme = 'company';
        this.icon = 'company';
        this.themeIndex = 0;
        this.toaster = toaster;
        this.options = {
            title: 'Title',
            message: 'Some Message...',
            theme: 'ocean',
            icon: 'clipboard',
            position: 'growlTopRight',
        };
    }
    changeTheme() {
        this.themeIndex = this.themeIndex === HEADER_THEMES$3.length - 1 ? 0 : this.themeIndex + 1;
        this.theme = HEADER_THEMES$3[this.themeIndex];
        this.icon = HEADER_ICONS$3[this.themeIndex];
    }
    catchEv(type, ev) {
        // Set toast options
        this.options = {
            title: `${type}`,
            message: `${ev} fired...`,
            theme: 'ocean',
            icon: `${type}`,
            position: 'growlTopRight',
        };
        // Fire toast
        this.toaster.alert(this.options);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: HeaderSubtitleExample, deps: [{ token: i1$1.NovoToastService }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: HeaderSubtitleExample, isStandalone: false, selector: "header-subtitle-example", ngImport: i0, template: "<novo-header [theme]=\"theme\">\n  <novo-action icon=\"convert\" tooltip=\"Change Theme\" (click)=\"changeTheme()\"></novo-action>\n  <novo-action icon=\"refresh\" tooltip=\"Show Popup\" (click)=\"catchEv('refresh', $event)\"></novo-action>\n  <novo-action icon=\"times\" tooltip=\"Show Popup\" (click)=\"catchEv('close', $event)\"></novo-action>\n\n  <novo-icon>{{icon}}</novo-icon>\n  <novo-title>Header</novo-title>\n  <novo-title size=\"sm\">with subtitle</novo-title>\n</novo-header>", styles: [""], dependencies: [{ kind: "directive", type: i2$1.TooltipDirective, selector: "[tooltip]", inputs: ["tooltip", "tooltipPosition", "tooltipType", "tooltipSize", "tooltipBounce", "tooltipNoAnimate", "tooltipRounded", "tooltipAlways", "tooltipPreline", "removeTooltipArrow", "tooltipAutoPosition", "tooltipIsHTML", "tooltipCloseOnClick", "tooltipOnOverflow", "tooltipActive"] }, { kind: "component", type: i2$1.NovoHeaderComponent, selector: "novo-header,header[theme],header[accent]", inputs: ["condensed", "title", "subTitle", "icon", "size", "theme"] }, { kind: "component", type: i2$1.NovoUtilActionComponent, selector: "util-action, novo-action", inputs: ["icon", "size", "inverse", "disabled"] }, { kind: "component", type: i2$1.NovoIconComponent, selector: "novo-icon", inputs: ["raised", "theme", "shape", "color", "size", "smaller", "larger", "alt", "name"] }, { kind: "component", type: i2$1.NovoTitle, selector: "novo-title,[novo-title]" }, { kind: "directive", type: i2$1.ThemeColorDirective, selector: "[theme]", inputs: ["theme"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: HeaderSubtitleExample, decorators: [{
            type: Component,
            args: [{ selector: 'header-subtitle-example', standalone: false, template: "<novo-header [theme]=\"theme\">\n  <novo-action icon=\"convert\" tooltip=\"Change Theme\" (click)=\"changeTheme()\"></novo-action>\n  <novo-action icon=\"refresh\" tooltip=\"Show Popup\" (click)=\"catchEv('refresh', $event)\"></novo-action>\n  <novo-action icon=\"times\" tooltip=\"Show Popup\" (click)=\"catchEv('close', $event)\"></novo-action>\n\n  <novo-icon>{{icon}}</novo-icon>\n  <novo-title>Header</novo-title>\n  <novo-title size=\"sm\">with subtitle</novo-title>\n</novo-header>" }]
        }], ctorParameters: () => [{ type: i1$1.NovoToastService }] });

const HEADER_THEMES$2 = ['company', 'job', 'candidate', 'contact', 'opportunity', 'lead', 'light', 'white'];
const HEADER_ICONS$2 = ['company', 'job', 'candidate', 'person', 'opportunity', 'lead', 'bolt', 'shield'];
/**
 * @title Header with SearchBar Example
 */
class HeaderSearchbarExample {
    constructor(toaster) {
        this.toaster = toaster;
        this.theme = 'company';
        this.icon = 'company';
        this.themeIndex = 0;
        this.toaster = toaster;
        this.options = {
            title: 'Title',
            message: 'Some Message...',
            theme: 'ocean',
            icon: 'clipboard',
            position: 'growlTopRight',
        };
    }
    changeTheme() {
        this.themeIndex = this.themeIndex === HEADER_THEMES$2.length - 1 ? 0 : this.themeIndex + 1;
        this.theme = HEADER_THEMES$2[this.themeIndex];
        this.icon = HEADER_ICONS$2[this.themeIndex];
    }
    catchEv(type, ev) {
        // Set toast options
        this.options = {
            title: `${type}`,
            message: `${ev} fired...`,
            theme: 'ocean',
            icon: `${type}`,
            position: 'growlTopRight',
        };
        // Fire toast
        this.toaster.alert(this.options);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: HeaderSearchbarExample, deps: [{ token: i1$1.NovoToastService }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: HeaderSearchbarExample, isStandalone: false, selector: "header-searchbar-example", ngImport: i0, template: "<header [theme]=\"theme\">\n  <novo-icon size=\"2xl\">{{icon}}</novo-icon>\n  <novo-title size=\"2xl\">Header</novo-title>\n  <section class=\"header-content\">\n    <novo-search [theme]=\"theme\"></novo-search>\n  </section>\n\n  <novo-action icon=\"convert\" tooltip=\"Change Theme\" (click)=\"changeTheme()\"></novo-action>\n  <novo-action icon=\"refresh\" tooltip=\"Show Popup\" (click)=\"catchEv('refresh', $event)\"></novo-action>\n  <novo-action icon=\"times\" tooltip=\"Show Popup\" (click)=\"catchEv('close', $event)\"></novo-action>\n\n</header>\n<br />\n<novo-checkbox label=\"Always Open?\" [(ngModel)]=\"isChecked\"></novo-checkbox>", styles: [""], dependencies: [{ kind: "directive", type: i1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i1.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "component", type: i2$1.NovoCheckboxElement, selector: "novo-checkbox", inputs: ["aria-label", "aria-labelledby", "aria-describedby", "id", "name", "label", "disabled", "layoutOptions", "color", "value", "tabIndex", "required", "checked", "indeterminate"], outputs: ["change", "indeterminateChange", "onSelect"] }, { kind: "directive", type: i2$1.TooltipDirective, selector: "[tooltip]", inputs: ["tooltip", "tooltipPosition", "tooltipType", "tooltipSize", "tooltipBounce", "tooltipNoAnimate", "tooltipRounded", "tooltipAlways", "tooltipPreline", "removeTooltipArrow", "tooltipAutoPosition", "tooltipIsHTML", "tooltipCloseOnClick", "tooltipOnOverflow", "tooltipActive"] }, { kind: "component", type: i2$1.NovoHeaderComponent, selector: "novo-header,header[theme],header[accent]", inputs: ["condensed", "title", "subTitle", "icon", "size", "theme"] }, { kind: "component", type: i2$1.NovoUtilActionComponent, selector: "util-action, novo-action", inputs: ["icon", "size", "inverse", "disabled"] }, { kind: "component", type: i2$1.NovoSearchBoxElement, selector: "novo-search", inputs: ["name", "icon", "position", "placeholder", "alwaysOpen", "theme", "color", "closeOnSelect", "displayField", "displayValue", "hint", "keepOpen", "hasBackdrop", "allowPropagation", "overrideElement"], outputs: ["searchChanged", "applySearch"] }, { kind: "component", type: i2$1.NovoIconComponent, selector: "novo-icon", inputs: ["raised", "theme", "shape", "color", "size", "smaller", "larger", "alt", "name"] }, { kind: "component", type: i2$1.NovoTitle, selector: "novo-title,[novo-title]" }, { kind: "directive", type: i2$1.ThemeColorDirective, selector: "[theme]", inputs: ["theme"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: HeaderSearchbarExample, decorators: [{
            type: Component,
            args: [{ selector: 'header-searchbar-example', standalone: false, template: "<header [theme]=\"theme\">\n  <novo-icon size=\"2xl\">{{icon}}</novo-icon>\n  <novo-title size=\"2xl\">Header</novo-title>\n  <section class=\"header-content\">\n    <novo-search [theme]=\"theme\"></novo-search>\n  </section>\n\n  <novo-action icon=\"convert\" tooltip=\"Change Theme\" (click)=\"changeTheme()\"></novo-action>\n  <novo-action icon=\"refresh\" tooltip=\"Show Popup\" (click)=\"catchEv('refresh', $event)\"></novo-action>\n  <novo-action icon=\"times\" tooltip=\"Show Popup\" (click)=\"catchEv('close', $event)\"></novo-action>\n\n</header>\n<br />\n<novo-checkbox label=\"Always Open?\" [(ngModel)]=\"isChecked\"></novo-checkbox>" }]
        }], ctorParameters: () => [{ type: i1$1.NovoToastService }] });

const HEADER_THEMES$1 = ['company', 'job', 'candidate', 'contact', 'opportunity', 'lead', 'light', 'white'];
const HEADER_ICONS$1 = ['company', 'job', 'candidate', 'person', 'opportunity', 'lead', 'bolt', 'shield'];
/**
 * @title Condensed Header Example
 */
class CondensedHeaderExample {
    constructor(toaster) {
        this.toaster = toaster;
        this.theme = 'company';
        this.icon = 'company';
        this.themeIndex = 0;
        this.toaster = toaster;
        this.options = {
            title: 'Title',
            message: 'Some Message...',
            theme: 'ocean',
            icon: 'clipboard',
            position: 'growlTopRight',
        };
    }
    changeTheme() {
        this.themeIndex = this.themeIndex === HEADER_THEMES$1.length - 1 ? 0 : this.themeIndex + 1;
        this.theme = HEADER_THEMES$1[this.themeIndex];
        this.icon = HEADER_ICONS$1[this.themeIndex];
    }
    catchEv(type, ev) {
        // Set toast options
        this.options = {
            title: `${type}`,
            message: `${ev} fired...`,
            theme: 'ocean',
            icon: `${type}`,
            position: 'growlTopRight',
        };
        // Fire toast
        this.toaster.alert(this.options);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: CondensedHeaderExample, deps: [{ token: i1$1.NovoToastService }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: CondensedHeaderExample, isStandalone: false, selector: "condensed-header-example", ngImport: i0, template: "<header [theme]=\"theme\" condensed>\n  <novo-action icon=\"convert\" tooltip=\"Change Theme\" (click)=\"changeTheme()\"></novo-action>\n  <novo-action icon=\"refresh\" tooltip=\"Show Popup\" (click)=\"catchEv('refresh', $event)\"></novo-action>\n  <novo-action icon=\"times\" tooltip=\"Show Popup\" (click)=\"catchEv('close', $event)\"></novo-action>\n\n  <novo-icon color=\"white\" [name]=\"icon\">{{icon}}</novo-icon>\n  <novo-title>\n    <span class=\"id\">123456</span>\n    <novo-divider vertical></novo-divider>\n    <span class=\"name\">Steve Jobs</span>\n  </novo-title>\n  <section class=\"links\">\n    <button theme=\"icon\" color=\"white\" [icon]=\"'google'\"></button>\n    <button theme=\"icon\" color=\"white\" [icon]=\"'linkedin-f'\"></button>\n    <button theme=\"icon\" color=\"white\" [icon]=\"'location'\"></button>\n  </section>\n</header>\n<novo-nav theme=\"white\" direction=\"horizontal\">\n  <novo-tab>\n    <span>Overview</span>\n  </novo-tab>\n  <novo-tab>\n    <span>Activity</span>\n  </novo-tab>\n  <novo-tab>\n    <span>Email</span>\n  </novo-tab>\n</novo-nav>", styles: [""], dependencies: [{ kind: "component", type: i2$1.NovoButtonElement, selector: "novo-button,button[theme]", inputs: ["color", "side", "size", "theme", "loading", "icon", "secondIcon", "disabled"] }, { kind: "component", type: i2$1.NovoDividerComponent, selector: "novo-divider", inputs: ["vertical", "inset"] }, { kind: "directive", type: i2$1.TooltipDirective, selector: "[tooltip]", inputs: ["tooltip", "tooltipPosition", "tooltipType", "tooltipSize", "tooltipBounce", "tooltipNoAnimate", "tooltipRounded", "tooltipAlways", "tooltipPreline", "removeTooltipArrow", "tooltipAutoPosition", "tooltipIsHTML", "tooltipCloseOnClick", "tooltipOnOverflow", "tooltipActive"] }, { kind: "component", type: i2$1.NovoHeaderComponent, selector: "novo-header,header[theme],header[accent]", inputs: ["condensed", "title", "subTitle", "icon", "size", "theme"] }, { kind: "component", type: i2$1.NovoUtilActionComponent, selector: "util-action, novo-action", inputs: ["icon", "size", "inverse", "disabled"] }, { kind: "component", type: i2$1.NovoNavElement, selector: "novo-nav", inputs: ["theme", "direction", "outlet", "router", "condensed", "selectedIndex"], outputs: ["selectedIndexChange"] }, { kind: "component", type: i2$1.NovoTabElement, selector: "novo-tab", inputs: ["active", "color", "disabled"], outputs: ["activeChange"] }, { kind: "component", type: i2$1.NovoIconComponent, selector: "novo-icon", inputs: ["raised", "theme", "shape", "color", "size", "smaller", "larger", "alt", "name"] }, { kind: "component", type: i2$1.NovoTitle, selector: "novo-title,[novo-title]" }, { kind: "directive", type: i2$1.ThemeColorDirective, selector: "[theme]", inputs: ["theme"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: CondensedHeaderExample, decorators: [{
            type: Component,
            args: [{ selector: 'condensed-header-example', standalone: false, template: "<header [theme]=\"theme\" condensed>\n  <novo-action icon=\"convert\" tooltip=\"Change Theme\" (click)=\"changeTheme()\"></novo-action>\n  <novo-action icon=\"refresh\" tooltip=\"Show Popup\" (click)=\"catchEv('refresh', $event)\"></novo-action>\n  <novo-action icon=\"times\" tooltip=\"Show Popup\" (click)=\"catchEv('close', $event)\"></novo-action>\n\n  <novo-icon color=\"white\" [name]=\"icon\">{{icon}}</novo-icon>\n  <novo-title>\n    <span class=\"id\">123456</span>\n    <novo-divider vertical></novo-divider>\n    <span class=\"name\">Steve Jobs</span>\n  </novo-title>\n  <section class=\"links\">\n    <button theme=\"icon\" color=\"white\" [icon]=\"'google'\"></button>\n    <button theme=\"icon\" color=\"white\" [icon]=\"'linkedin-f'\"></button>\n    <button theme=\"icon\" color=\"white\" [icon]=\"'location'\"></button>\n  </section>\n</header>\n<novo-nav theme=\"white\" direction=\"horizontal\">\n  <novo-tab>\n    <span>Overview</span>\n  </novo-tab>\n  <novo-tab>\n    <span>Activity</span>\n  </novo-tab>\n  <novo-tab>\n    <span>Email</span>\n  </novo-tab>\n</novo-nav>" }]
        }], ctorParameters: () => [{ type: i1$1.NovoToastService }] });

const HEADER_THEMES = ['company', 'job', 'candidate', 'contact', 'opportunity', 'lead', 'light', 'white'];
const HEADER_ICONS = ['company', 'job', 'candidate', 'person', 'opportunity', 'lead', 'bolt', 'shield'];
/**
 * @title Basic Header Example
 */
class BasicHeaderExample {
    constructor(toaster) {
        this.toaster = toaster;
        this.theme = 'company';
        this.icon = 'company';
        this.themeIndex = 0;
        this.toaster = toaster;
        this.options = {
            title: 'Title',
            message: 'Some Message...',
            theme: 'ocean',
            icon: 'clipboard',
            position: 'growlTopRight',
        };
    }
    changeTheme() {
        this.themeIndex = this.themeIndex === HEADER_THEMES.length - 1 ? 0 : this.themeIndex + 1;
        this.theme = HEADER_THEMES[this.themeIndex];
        this.icon = HEADER_ICONS[this.themeIndex];
    }
    catchEv(type, ev) {
        // Set toast options
        this.options = {
            title: `${type}`,
            message: `${ev} fired...`,
            theme: 'ocean',
            icon: `${type}`,
            position: 'growlTopRight',
        };
        // Fire toast
        this.toaster.alert(this.options);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: BasicHeaderExample, deps: [{ token: i1$1.NovoToastService }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: BasicHeaderExample, isStandalone: false, selector: "basic-header-example", ngImport: i0, template: "<header [accent]=\"theme\">\n  <novo-action icon=\"convert\" tooltip=\"Change Theme\" (click)=\"changeTheme()\"></novo-action>\n  <novo-action icon=\"refresh\" tooltip=\"Show Popup\" (click)=\"catchEv('refresh', $event)\"></novo-action>\n  <novo-action icon=\"times\" tooltip=\"Show Popup\" (click)=\"catchEv('close', $event)\"></novo-action>\n\n  <!-- <novo-icon larger>{{icon}}</novo-icon> -->\n  <novo-title larger>\n    <novo-icon>{{icon}}</novo-icon>\n    <span>Ferdinand del Toro</span>\n  </novo-title>\n  <section>\n    Extra Info\n  </section>\n  <novo-nav direction=\"horizontal\">\n    <novo-tab>\n      <span>Overview</span>\n    </novo-tab>\n    <novo-tab>\n      <span>Activity</span>\n    </novo-tab>\n    <novo-tab>\n      <span>Email</span>\n    </novo-tab>\n  </novo-nav>\n</header>", styles: [""], dependencies: [{ kind: "directive", type: i2$1.TooltipDirective, selector: "[tooltip]", inputs: ["tooltip", "tooltipPosition", "tooltipType", "tooltipSize", "tooltipBounce", "tooltipNoAnimate", "tooltipRounded", "tooltipAlways", "tooltipPreline", "removeTooltipArrow", "tooltipAutoPosition", "tooltipIsHTML", "tooltipCloseOnClick", "tooltipOnOverflow", "tooltipActive"] }, { kind: "component", type: i2$1.NovoHeaderComponent, selector: "novo-header,header[theme],header[accent]", inputs: ["condensed", "title", "subTitle", "icon", "size", "theme"] }, { kind: "component", type: i2$1.NovoUtilActionComponent, selector: "util-action, novo-action", inputs: ["icon", "size", "inverse", "disabled"] }, { kind: "component", type: i2$1.NovoNavElement, selector: "novo-nav", inputs: ["theme", "direction", "outlet", "router", "condensed", "selectedIndex"], outputs: ["selectedIndexChange"] }, { kind: "component", type: i2$1.NovoTabElement, selector: "novo-tab", inputs: ["active", "color", "disabled"], outputs: ["activeChange"] }, { kind: "component", type: i2$1.NovoIconComponent, selector: "novo-icon", inputs: ["raised", "theme", "shape", "color", "size", "smaller", "larger", "alt", "name"] }, { kind: "component", type: i2$1.NovoTitle, selector: "novo-title,[novo-title]" }, { kind: "directive", type: i2$1.AccentColorDirective, selector: "[accent]", inputs: ["accent"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: BasicHeaderExample, decorators: [{
            type: Component,
            args: [{ selector: 'basic-header-example', standalone: false, template: "<header [accent]=\"theme\">\n  <novo-action icon=\"convert\" tooltip=\"Change Theme\" (click)=\"changeTheme()\"></novo-action>\n  <novo-action icon=\"refresh\" tooltip=\"Show Popup\" (click)=\"catchEv('refresh', $event)\"></novo-action>\n  <novo-action icon=\"times\" tooltip=\"Show Popup\" (click)=\"catchEv('close', $event)\"></novo-action>\n\n  <!-- <novo-icon larger>{{icon}}</novo-icon> -->\n  <novo-title larger>\n    <novo-icon>{{icon}}</novo-icon>\n    <span>Ferdinand del Toro</span>\n  </novo-title>\n  <section>\n    Extra Info\n  </section>\n  <novo-nav direction=\"horizontal\">\n    <novo-tab>\n      <span>Overview</span>\n    </novo-tab>\n    <novo-tab>\n      <span>Activity</span>\n    </novo-tab>\n    <novo-tab>\n      <span>Email</span>\n    </novo-tab>\n  </novo-nav>\n</header>" }]
        }], ctorParameters: () => [{ type: i1$1.NovoToastService }] });

/**
 * @title Lazy Instaniated Content with Expansion
 */
class LazyExpansionExample {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: LazyExpansionExample, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: LazyExpansionExample, isStandalone: false, selector: "lazy-expansion-example", ngImport: i0, template: "<novo-expansion-panel>\n    <novo-expansion-panel-header>\n      This is the expansion title\n    </novo-expansion-panel-header>\n\n    <ng-template matExpansionPanelContent>\n      Some deferred content\n    </ng-template>\n</novo-expansion-panel>\n", styles: [""], dependencies: [{ kind: "component", type: i2$1.NovoExpansionPanel, selector: "novo-expansion-panel", inputs: ["hideToggle", "padding"], outputs: ["opened", "closed", "expandedChange"], exportAs: ["novoExpansionPanel"] }, { kind: "component", type: i2$1.NovoExpansionPanelHeader, selector: "novo-expansion-panel-header", inputs: ["expandedHeight", "collapsedHeight"] }, { kind: "directive", type: i2$1.NovoExpansionPanelContent, selector: "ng-template[matExpansionPanelContent]" }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: LazyExpansionExample, decorators: [{
            type: Component,
            args: [{ selector: 'lazy-expansion-example', standalone: false, template: "<novo-expansion-panel>\n    <novo-expansion-panel-header>\n      This is the expansion title\n    </novo-expansion-panel-header>\n\n    <ng-template matExpansionPanelContent>\n      Some deferred content\n    </ng-template>\n</novo-expansion-panel>\n" }]
        }] });

/**
 * @title Dialogue buttons
 */
class BasicExpansionExample {
    constructor() {
        this.isDisabled = false;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: BasicExpansionExample, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: BasicExpansionExample, isStandalone: false, selector: "basic-expansion-example", ngImport: i0, template: "<novo-expansion-panel [disabled]=\"isDisabled\">\n  <novo-expansion-panel-header>\n    <novo-panel-title>\n      This is the expansion title\n    </novo-panel-title>\n    <novo-panel-description>\n      This is a summary of the content\n    </novo-panel-description>\n  </novo-expansion-panel-header>\n  <p>This is the primary content of the panel.</p>\n</novo-expansion-panel>\n<div>\n  <br/>\n  <span>Is Disabled?</span>\n  <novo-switch theme=\"grapefruit\" [(ngModel)]=\"isDisabled\"></novo-switch>\n</div>\n", styles: [""], dependencies: [{ kind: "directive", type: i1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i1.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "component", type: i2$1.NovoSwitchElement, selector: "novo-switch", inputs: ["theme", "icons", "disabled"], outputs: ["onChange"] }, { kind: "component", type: i2$1.NovoExpansionPanel, selector: "novo-expansion-panel", inputs: ["hideToggle", "padding"], outputs: ["opened", "closed", "expandedChange"], exportAs: ["novoExpansionPanel"] }, { kind: "component", type: i2$1.NovoExpansionPanelHeader, selector: "novo-expansion-panel-header", inputs: ["expandedHeight", "collapsedHeight"] }, { kind: "directive", type: i2$1.NovoExpansionPanelTitle, selector: "novo-panel-title" }, { kind: "directive", type: i2$1.NovoExpansionPanelDescription, selector: "novo-panel-description" }, { kind: "directive", type: i2$1.ThemeColorDirective, selector: "[theme]", inputs: ["theme"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: BasicExpansionExample, decorators: [{
            type: Component,
            args: [{ selector: 'basic-expansion-example', standalone: false, template: "<novo-expansion-panel [disabled]=\"isDisabled\">\n  <novo-expansion-panel-header>\n    <novo-panel-title>\n      This is the expansion title\n    </novo-panel-title>\n    <novo-panel-description>\n      This is a summary of the content\n    </novo-panel-description>\n  </novo-expansion-panel-header>\n  <p>This is the primary content of the panel.</p>\n</novo-expansion-panel>\n<div>\n  <br/>\n  <span>Is Disabled?</span>\n  <novo-switch theme=\"grapefruit\" [(ngModel)]=\"isDisabled\"></novo-switch>\n</div>\n" }]
        }] });

/**
 * @title Accordion Example
 */
class AccordionExample {
    constructor() {
        this.isFlat = false;
        this.isMulti = false;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: AccordionExample, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: AccordionExample, isStandalone: false, selector: "accordion-example", ngImport: i0, template: "<novo-accordion\n  [displayMode]=\"isFlat ? 'flat' : 'default'\"\n  [multi]=\"isMulti\">\n  <novo-expansion-panel>\n    <novo-expansion-panel-header>\n      This is the expansion 1 title\n    </novo-expansion-panel-header>\n    <section>\n      <novo-accordion\n        [displayMode]=\"isFlat ? 'flat' : 'default'\"\n        [multi]=\"isMulti\">\n        <novo-expansion-panel>\n          <novo-expansion-panel-header>\n            This is the expansion 1 title\n          </novo-expansion-panel-header>\n          <p>This the expansion 1 content</p>\n        </novo-expansion-panel>\n        <novo-expansion-panel>\n          <novo-expansion-panel-header>\n            This is the expansion 2 title\n          </novo-expansion-panel-header>\n          <p>This the expansion 2 content</p>\n        </novo-expansion-panel>\n\n      </novo-accordion>\n\n\n\n\n    </section>\n  </novo-expansion-panel>\n\n  <novo-expansion-panel>\n    <novo-expansion-panel-header>\n      This is the expansion 2 title\n    </novo-expansion-panel-header>\n    <p>This the expansion 2 content</p>\n  </novo-expansion-panel>\n</novo-accordion>\n<div>\n  <br />\n  <span>Flat Expansion</span>\n  <novo-switch theme=\"grapefruit\" [(ngModel)]=\"isFlat\"></novo-switch>\n  <span>Multiple Expansion</span>\n  <novo-switch theme=\"grapefruit\" [(ngModel)]=\"isMulti\"></novo-switch>\n</div>", styles: [""], dependencies: [{ kind: "directive", type: i1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i1.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "component", type: i2$1.NovoSwitchElement, selector: "novo-switch", inputs: ["theme", "icons", "disabled"], outputs: ["onChange"] }, { kind: "directive", type: i2$1.NovoAccordion, selector: "novo-accordion", inputs: ["hideToggle", "displayMode"], exportAs: ["novoAccordion"] }, { kind: "component", type: i2$1.NovoExpansionPanel, selector: "novo-expansion-panel", inputs: ["hideToggle", "padding"], outputs: ["opened", "closed", "expandedChange"], exportAs: ["novoExpansionPanel"] }, { kind: "component", type: i2$1.NovoExpansionPanelHeader, selector: "novo-expansion-panel-header", inputs: ["expandedHeight", "collapsedHeight"] }, { kind: "directive", type: i2$1.ThemeColorDirective, selector: "[theme]", inputs: ["theme"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: AccordionExample, decorators: [{
            type: Component,
            args: [{ selector: 'accordion-example', standalone: false, template: "<novo-accordion\n  [displayMode]=\"isFlat ? 'flat' : 'default'\"\n  [multi]=\"isMulti\">\n  <novo-expansion-panel>\n    <novo-expansion-panel-header>\n      This is the expansion 1 title\n    </novo-expansion-panel-header>\n    <section>\n      <novo-accordion\n        [displayMode]=\"isFlat ? 'flat' : 'default'\"\n        [multi]=\"isMulti\">\n        <novo-expansion-panel>\n          <novo-expansion-panel-header>\n            This is the expansion 1 title\n          </novo-expansion-panel-header>\n          <p>This the expansion 1 content</p>\n        </novo-expansion-panel>\n        <novo-expansion-panel>\n          <novo-expansion-panel-header>\n            This is the expansion 2 title\n          </novo-expansion-panel-header>\n          <p>This the expansion 2 content</p>\n        </novo-expansion-panel>\n\n      </novo-accordion>\n\n\n\n\n    </section>\n  </novo-expansion-panel>\n\n  <novo-expansion-panel>\n    <novo-expansion-panel-header>\n      This is the expansion 2 title\n    </novo-expansion-panel-header>\n    <p>This the expansion 2 content</p>\n  </novo-expansion-panel>\n</novo-accordion>\n<div>\n  <br />\n  <span>Flat Expansion</span>\n  <novo-switch theme=\"grapefruit\" [(ngModel)]=\"isFlat\"></novo-switch>\n  <span>Multiple Expansion</span>\n  <novo-switch theme=\"grapefruit\" [(ngModel)]=\"isMulti\"></novo-switch>\n</div>" }]
        }] });

/**
 * @title Card With Image
 */
class CardWithImageExample {
    constructor(toaster) {
        this.toaster = toaster;
        // Config for demos
        this.refresh = true;
        this.close = true;
        this.move = true;
        this.padding = true;
        this.loading = true;
        this.start = 2000;
        this.end = 2005;
        this.created = 1995;
        this.bestLabel = 'BEST TIME TO CONTACT';
        this.bestTime = '1-PM';
        this.bestDay = 'Friday';
        this.donutValue = 0.5;
        this.donutColor = '#662255';
        this.donutLabel = 'Probability of Win %';
    }
    onClose() {
        this.toaster.alert({
            theme: 'info',
            title: 'Cards',
            message: 'Close Clicked!',
        });
    }
    onRefresh() {
        this.toaster.alert({
            theme: 'success',
            title: 'Cards',
            message: 'Refresh Clicked!',
        });
    }
    toggleLoading() {
        this.loading = !this.loading;
    }
    toggleMessage() {
        if (!this.message) {
            this.message = 'NO DATA!';
            this.messageIcon = 'email';
        }
        else {
            this.message = undefined;
        }
    }
    singleAction() {
        window.alert('HELLO!');
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: CardWithImageExample, deps: [{ token: i1$1.NovoToastService }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: CardWithImageExample, isStandalone: false, selector: "card-with-image-example", ngImport: i0, template: "<novo-card class=\"example-card\">\n  <novo-card-header>\n    <novo-avatar tooltip=\"Ferdinand del Toro\"\n      [source]=\"{profileImage: 'https://www.eaglebrae.co.uk/wp-content/uploads/close-up-highland-cow.jpg'}\">\n    </novo-avatar>\n    <novo-title>Highland Cattle</novo-title>\n    <novo-caption>Breed of Rustic Cattle</novo-caption>\n    <novo-action icon=\"times\" tooltip=\"Close Card\"></novo-action>\n  </novo-card-header>\n  <img novo-card-image src=\"https://upload.wikimedia.org/wikipedia/commons/7/78/Highland_Cattle_4.jpg\"\n    alt=\"Photo of a Highland Calf\" />\n  <novo-card-content>\n    <novo-text>\n      The Highland (Scottish Gaelic: B\u00F2 Gh\u00E0idhealach; Scots: Hielan coo) is a Scottish breed of rustic cattle. It\n      originated in the <novo-link>Scottish Highlands</novo-link> and the Outer Hebrides islands of Scotland and has\n      long horns and a long shaggy coat. It is a hardy breed, bred to withstand the intemperate conditions in the\n      region. The first herd-book dates from 1885; two different types - a smaller island type, usually black, and a\n      larger mainland type, usually dun - were registered as a single breed. It is reared primarily for beef, and has\n      been exported to several other countries.<sup>[1]</sup>\n    </novo-text>\n  </novo-card-content>\n  <novo-card-footer>\n    <novo-button>\n      PIN <novo-icon>pin</novo-icon>\n    </novo-button>\n    <novo-button>\n      SHARE <novo-icon>share</novo-icon>\n    </novo-button>\n  </novo-card-footer>\n</novo-card>", styles: [".example-card{max-width:400px}.example-header-image{background-image:url(https://upload.wikimedia.org/wikipedia/commons/4/43/Cow_on_Pupers.jpg);background-size:cover}\n"], dependencies: [{ kind: "component", type: i2$1.NovoAvatarElement, selector: "novo-avatar", inputs: ["source", "label", "theme", "image", "size", "shape", "color"] }, { kind: "component", type: i2$1.NovoButtonElement, selector: "novo-button,button[theme]", inputs: ["color", "side", "size", "theme", "loading", "icon", "secondIcon", "disabled"] }, { kind: "component", type: i2$1.CardElement, selector: "novo-card", inputs: ["padding", "config", "title", "message", "messageIcon", "icon", "iconTooltip", "refresh", "close", "move", "loading", "inline", "inset"], outputs: ["onClose", "onRefresh"] }, { kind: "component", type: i2$1.CardContentElement, selector: "novo-card-content, [novo-card-content], [novoCardContent]", inputs: ["condensed"] }, { kind: "component", type: i2$1.CardHeaderElement, selector: "novo-card-header, [novo-card-header], [novoCardHeader]" }, { kind: "component", type: i2$1.CardFooterElement, selector: "novo-card-footer, [novo-card-footer], [novoCardFooter]" }, { kind: "directive", type: i2$1.TooltipDirective, selector: "[tooltip]", inputs: ["tooltip", "tooltipPosition", "tooltipType", "tooltipSize", "tooltipBounce", "tooltipNoAnimate", "tooltipRounded", "tooltipAlways", "tooltipPreline", "removeTooltipArrow", "tooltipAutoPosition", "tooltipIsHTML", "tooltipCloseOnClick", "tooltipOnOverflow", "tooltipActive"] }, { kind: "component", type: i2$1.NovoUtilActionComponent, selector: "util-action, novo-action", inputs: ["icon", "size", "inverse", "disabled"] }, { kind: "component", type: i2$1.NovoIconComponent, selector: "novo-icon", inputs: ["raised", "theme", "shape", "color", "size", "smaller", "larger", "alt", "name"] }, { kind: "component", type: i2$1.NovoText, selector: "novo-text,[novo-text]", inputs: ["block"] }, { kind: "component", type: i2$1.NovoTitle, selector: "novo-title,[novo-title]" }, { kind: "component", type: i2$1.NovoCaption, selector: "novo-caption,[novo-caption]" }, { kind: "component", type: i2$1.NovoLink, selector: "novo-link", inputs: ["href"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: CardWithImageExample, decorators: [{
            type: Component,
            args: [{ selector: 'card-with-image-example', standalone: false, template: "<novo-card class=\"example-card\">\n  <novo-card-header>\n    <novo-avatar tooltip=\"Ferdinand del Toro\"\n      [source]=\"{profileImage: 'https://www.eaglebrae.co.uk/wp-content/uploads/close-up-highland-cow.jpg'}\">\n    </novo-avatar>\n    <novo-title>Highland Cattle</novo-title>\n    <novo-caption>Breed of Rustic Cattle</novo-caption>\n    <novo-action icon=\"times\" tooltip=\"Close Card\"></novo-action>\n  </novo-card-header>\n  <img novo-card-image src=\"https://upload.wikimedia.org/wikipedia/commons/7/78/Highland_Cattle_4.jpg\"\n    alt=\"Photo of a Highland Calf\" />\n  <novo-card-content>\n    <novo-text>\n      The Highland (Scottish Gaelic: B\u00F2 Gh\u00E0idhealach; Scots: Hielan coo) is a Scottish breed of rustic cattle. It\n      originated in the <novo-link>Scottish Highlands</novo-link> and the Outer Hebrides islands of Scotland and has\n      long horns and a long shaggy coat. It is a hardy breed, bred to withstand the intemperate conditions in the\n      region. The first herd-book dates from 1885; two different types - a smaller island type, usually black, and a\n      larger mainland type, usually dun - were registered as a single breed. It is reared primarily for beef, and has\n      been exported to several other countries.<sup>[1]</sup>\n    </novo-text>\n  </novo-card-content>\n  <novo-card-footer>\n    <novo-button>\n      PIN <novo-icon>pin</novo-icon>\n    </novo-button>\n    <novo-button>\n      SHARE <novo-icon>share</novo-icon>\n    </novo-button>\n  </novo-card-footer>\n</novo-card>", styles: [".example-card{max-width:400px}.example-header-image{background-image:url(https://upload.wikimedia.org/wikipedia/commons/4/43/Cow_on_Pupers.jpg);background-size:cover}\n"] }]
        }], ctorParameters: () => [{ type: i1$1.NovoToastService }] });

// NG2
/**
 * @title Full Configuration Cards
 */
class CardConfigExample {
    constructor(toaster) {
        this.toaster = toaster;
        // Config for demos
        this.refresh = true;
        this.close = true;
        this.move = true;
        this.padding = true;
        this.loading = true;
        this.fullConfig = {
            refresh: false,
            icon: 'email',
            messageIcon: 'email',
            close: false,
            move: true,
            onClose: this.onClose.bind(this),
            onRefresh: this.onRefresh.bind(this),
            title: 'Test',
            loading: false,
            padding: true,
        };
        this.start = 2000;
        this.end = 2005;
        this.created = 1995;
        this.bestLabel = 'BEST TIME TO CONTACT';
        this.bestTime = '1-PM';
        this.bestDay = 'Friday';
        this.donutValue = 0.5;
        this.donutColor = '#662255';
        this.donutLabel = 'Probability of Win %';
    }
    onClose() {
        this.toaster.alert({
            theme: 'info',
            title: 'Cards',
            message: 'Close Clicked!',
        });
    }
    onRefresh() {
        this.toaster.alert({
            theme: 'success',
            title: 'Cards',
            message: 'Refresh Clicked!',
        });
    }
    toggleLoading() {
        this.loading = !this.loading;
    }
    toggleMessage() {
        if (!this.message) {
            this.message = 'NO DATA!';
            this.messageIcon = 'email';
        }
        else {
            this.message = undefined;
        }
    }
    toggleLoadingConfig() {
        this.fullConfig.loading = !this.fullConfig.loading;
    }
    toggleMessageConfig() {
        if (!this.fullConfig.message) {
            this.fullConfig.message = 'NO DATA!';
        }
        else {
            this.fullConfig.message = undefined;
        }
    }
    singleAction() {
        window.alert('HELLO!');
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: CardConfigExample, deps: [{ token: i1$1.NovoToastService }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: CardConfigExample, isStandalone: false, selector: "card-config-example", ngImport: i0, template: "<novo-card [config]=\"fullConfig\">\n  <novo-card-actions>\n      <button theme=\"icon\" icon=\"info\" (click)=\"singleAction()\"></button>\n  </novo-card-actions>\n  DEMO :)\n</novo-card>\n", styles: [""], dependencies: [{ kind: "component", type: i2$1.NovoButtonElement, selector: "novo-button,button[theme]", inputs: ["color", "side", "size", "theme", "loading", "icon", "secondIcon", "disabled"] }, { kind: "component", type: i2$1.CardElement, selector: "novo-card", inputs: ["padding", "config", "title", "message", "messageIcon", "icon", "iconTooltip", "refresh", "close", "move", "loading", "inline", "inset"], outputs: ["onClose", "onRefresh"] }, { kind: "component", type: i2$1.CardActionsElement, selector: "novo-card-actions" }, { kind: "directive", type: i2$1.ThemeColorDirective, selector: "[theme]", inputs: ["theme"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: CardConfigExample, decorators: [{
            type: Component,
            args: [{ selector: 'card-config-example', standalone: false, template: "<novo-card [config]=\"fullConfig\">\n  <novo-card-actions>\n      <button theme=\"icon\" icon=\"info\" (click)=\"singleAction()\"></button>\n  </novo-card-actions>\n  DEMO :)\n</novo-card>\n" }]
        }], ctorParameters: () => [{ type: i1$1.NovoToastService }] });

/**
 * @title Basic Cards
 */
class BasicCardExample {
    constructor(toaster) {
        this.toaster = toaster;
        // Config for demos
        this.refresh = true;
        this.close = true;
        this.move = true;
        this.padding = true;
        this.loading = true;
        this.start = 2000;
        this.end = 2005;
        this.created = 1995;
        this.bestLabel = 'BEST TIME TO CONTACT';
        this.bestTime = '1-PM';
        this.bestDay = 'Friday';
        this.donutValue = 0.5;
        this.donutColor = '#662255';
        this.donutLabel = 'Probability of Win %';
    }
    onClose() {
        this.toaster.alert({
            theme: 'info',
            title: 'Cards',
            message: 'Close Clicked!',
        });
    }
    onRefresh() {
        this.toaster.alert({
            theme: 'success',
            title: 'Cards',
            message: 'Refresh Clicked!',
        });
    }
    toggleLoading() {
        this.loading = !this.loading;
    }
    toggleMessage() {
        if (!this.message) {
            this.message = 'NO DATA!';
            this.messageIcon = 'email';
        }
        else {
            this.message = undefined;
        }
    }
    singleAction() {
        window.alert('HELLO!');
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: BasicCardExample, deps: [{ token: i1$1.NovoToastService }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: BasicCardExample, isStandalone: false, selector: "basic-card-example", ngImport: i0, template: "<novo-card [title]=\"'All Attributes'\"\n  icon=\"activity\"\n  [loading]=\"loading\"\n  [message]=\"message\"\n  [messageIcon]=\"messageIcon\"\n  [refresh]=\"refresh\"\n  [move]=\"move\"\n  [close]=\"close\"\n  (onRefresh)=\"onRefresh()\"\n  (onClose)=\"onClose()\"\n  [padding]=\"padding\">\n  This is the ALL attribute card content!\n</novo-card>\n\n\n<novo-row gap=\"lg\">\n  <novo-card inline padding=\"lg\">\n    <novo-stack align=\"center\">\n      <novo-title larger>500</novo-title>\n      <novo-caption>Interviews</novo-caption>\n    </novo-stack>\n  </novo-card>\n\n  <novo-card inline padding=\"lg\">\n    <novo-stack align=\"center\">\n      <novo-caption>1st Interviews to Placements</novo-caption>\n      <novo-title larger>10 : 1</novo-title>\n    </novo-stack>\n  </novo-card>\n\n  <novo-card inline padding=\"lg\">\n    <novo-stack align=\"center\">\n      <novo-caption>CVs Sent to 1st Interviews</novo-caption>\n      <novo-title larger>83%</novo-title>\n    </novo-stack>\n  </novo-card>\n\n</novo-row>\n\n<novo-card inline inset=\"large\">\n  <novo-row justify=\"space-between\">\n    <novo-text bold>Total Sales</novo-text>\n    <novo-text bold>$10k</novo-text>\n  </novo-row>\n  <novo-row align=\"center\">\n    <novo-caption>Target $50k</novo-caption>\n  </novo-row>\n  <novo-progress appearance=\"radial\" total=\"60\" mx=\"2xl\">\n    <novo-progress-bar value=\"50\" color=\"success\"></novo-progress-bar>\n    <novo-progress-bar value=\"40\" color=\"negative\"></novo-progress-bar>\n    <novo-progress-bar value=\"30\" color=\"warning\"></novo-progress-bar>\n  </novo-progress>\n  <novo-row justify=\"space-between\">\n    <novo-text><strong>$7,700</strong> ahead</novo-text>\n    <novo-icon>projects-square</novo-icon>\n  </novo-row>\n</novo-card>", styles: [":host{display:flex;flex-direction:column;gap:2rem}\n"], dependencies: [{ kind: "component", type: i2$1.CardElement, selector: "novo-card", inputs: ["padding", "config", "title", "message", "messageIcon", "icon", "iconTooltip", "refresh", "close", "move", "loading", "inline", "inset"], outputs: ["onClose", "onRefresh"] }, { kind: "component", type: i2$1.NovoFlexElement, selector: "novo-flex,novo-row", inputs: ["direction", "align", "justify", "wrap", "gap"] }, { kind: "component", type: i2$1.NovoStackElement, selector: "novo-stack,novo-column", inputs: ["direction", "align"] }, { kind: "component", type: i2$1.NovoProgressBarElement, selector: "novo-progress-bar", inputs: ["id", "name", "tabindex", "label", "theme", "color", "indeterminate", "striped", "animated", "flash", "value", "disabled"], outputs: ["change", "blur", "focus"] }, { kind: "component", type: i2$1.NovoProgressElement, selector: "novo-progress", inputs: ["color", "theme", "total", "radius", "striped", "appearance", "disabled"] }, { kind: "component", type: i2$1.NovoIconComponent, selector: "novo-icon", inputs: ["raised", "theme", "shape", "color", "size", "smaller", "larger", "alt", "name"] }, { kind: "component", type: i2$1.NovoText, selector: "novo-text,[novo-text]", inputs: ["block"] }, { kind: "component", type: i2$1.NovoTitle, selector: "novo-title,[novo-title]" }, { kind: "component", type: i2$1.NovoCaption, selector: "novo-caption,[novo-caption]" }, { kind: "directive", type: i2$1.MarginDirective, selector: "[m],[margin],[marginTop],[marginRight],[marginBottom],[marginLeft],[marginX],[marginY],[mt],[mr],[mb],[ml],[mx],[my]", inputs: ["margin", "m", "marginLeft", "ml", "marginRight", "mr", "marginTop", "mt", "marginBottom", "mb", "marginX", "mx", "marginY", "my"] }, { kind: "directive", type: i2$1.PaddingDirective, selector: "[p],[padding],[paddingTop],[paddingRight],[paddingBottom],[paddingLeft],[paddingX],[paddingY],[pt],[pr],[pb],[pl],[px],[py]", inputs: ["padding", "p", "paddingLeft", "pl", "paddingRight", "pr", "paddingTop", "pt", "paddingBottom", "pb", "paddingX", "px", "paddingY", "py"] }, { kind: "directive", type: i2$1.GapDirective, selector: "[gap]", inputs: ["gap"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: BasicCardExample, decorators: [{
            type: Component,
            args: [{ selector: 'basic-card-example', standalone: false, template: "<novo-card [title]=\"'All Attributes'\"\n  icon=\"activity\"\n  [loading]=\"loading\"\n  [message]=\"message\"\n  [messageIcon]=\"messageIcon\"\n  [refresh]=\"refresh\"\n  [move]=\"move\"\n  [close]=\"close\"\n  (onRefresh)=\"onRefresh()\"\n  (onClose)=\"onClose()\"\n  [padding]=\"padding\">\n  This is the ALL attribute card content!\n</novo-card>\n\n\n<novo-row gap=\"lg\">\n  <novo-card inline padding=\"lg\">\n    <novo-stack align=\"center\">\n      <novo-title larger>500</novo-title>\n      <novo-caption>Interviews</novo-caption>\n    </novo-stack>\n  </novo-card>\n\n  <novo-card inline padding=\"lg\">\n    <novo-stack align=\"center\">\n      <novo-caption>1st Interviews to Placements</novo-caption>\n      <novo-title larger>10 : 1</novo-title>\n    </novo-stack>\n  </novo-card>\n\n  <novo-card inline padding=\"lg\">\n    <novo-stack align=\"center\">\n      <novo-caption>CVs Sent to 1st Interviews</novo-caption>\n      <novo-title larger>83%</novo-title>\n    </novo-stack>\n  </novo-card>\n\n</novo-row>\n\n<novo-card inline inset=\"large\">\n  <novo-row justify=\"space-between\">\n    <novo-text bold>Total Sales</novo-text>\n    <novo-text bold>$10k</novo-text>\n  </novo-row>\n  <novo-row align=\"center\">\n    <novo-caption>Target $50k</novo-caption>\n  </novo-row>\n  <novo-progress appearance=\"radial\" total=\"60\" mx=\"2xl\">\n    <novo-progress-bar value=\"50\" color=\"success\"></novo-progress-bar>\n    <novo-progress-bar value=\"40\" color=\"negative\"></novo-progress-bar>\n    <novo-progress-bar value=\"30\" color=\"warning\"></novo-progress-bar>\n  </novo-progress>\n  <novo-row justify=\"space-between\">\n    <novo-text><strong>$7,700</strong> ahead</novo-text>\n    <novo-icon>projects-square</novo-icon>\n  </novo-row>\n</novo-card>", styles: [":host{display:flex;flex-direction:column;gap:2rem}\n"] }]
        }], ctorParameters: () => [{ type: i1$1.NovoToastService }] });

/**
 * @title Multi Option Value Example
 */
class MultiOptionValueExample {
    constructor() {
        this.theme = NOVO_VALUE_THEME.DEFAULT;
        this.data = ['1', '3'];
        this.meta = {
            name: 'status',
            label: 'Status',
            inputType: 'SELECT',
            options: [
                { label: 'New Lead', value: '1' },
                { label: 'Old Lead', value: '2' },
                { label: 'Active', value: '3' },
                { label: 'Archived', value: '4' },
            ],
        };
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: MultiOptionValueExample, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: MultiOptionValueExample, isStandalone: false, selector: "multi-option-value-example", ngImport: i0, template: "<novo-value [data]=\"data\" [meta]=\"meta\" [theme]=\"theme\"></novo-value>\n", styles: [""], dependencies: [{ kind: "component", type: i2$1.NovoValueElement, selector: "novo-value", inputs: ["data", "meta", "theme", "row", "label", "type", "icon"] }, { kind: "directive", type: i2$1.ThemeColorDirective, selector: "[theme]", inputs: ["theme"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: MultiOptionValueExample, decorators: [{
            type: Component,
            args: [{ selector: 'multi-option-value-example', standalone: false, template: "<novo-value [data]=\"data\" [meta]=\"meta\" [theme]=\"theme\"></novo-value>\n" }]
        }] });

/**
 * @title Icon Value Example
 */
class IconValueExample {
    constructor() {
        this.theme = NOVO_VALUE_THEME.DEFAULT;
        this.data = 'Approved';
        this.meta = {
            type: 'SCALAR',
            options: [
                {
                    value: 'Approved',
                    label: 'Approved',
                },
            ],
            name: 'status',
            label: 'Status',
            icons: [
                {
                    iconCls: 'next',
                    onIconClick: (data, meta) => window.alert('hey there'),
                },
                {
                    iconCls: 'close',
                    onIconClick: (data, meta) => window.alert('hey there'),
                },
            ],
        };
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: IconValueExample, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: IconValueExample, isStandalone: false, selector: "icon-value-example", ngImport: i0, template: "<novo-value [data]=\"data\" [meta]=\"meta\" [theme]=\"theme\"></novo-value>\n", styles: [""], dependencies: [{ kind: "component", type: i2$1.NovoValueElement, selector: "novo-value", inputs: ["data", "meta", "theme", "row", "label", "type", "icon"] }, { kind: "directive", type: i2$1.ThemeColorDirective, selector: "[theme]", inputs: ["theme"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: IconValueExample, decorators: [{
            type: Component,
            args: [{ selector: 'icon-value-example', standalone: false, template: "<novo-value [data]=\"data\" [meta]=\"meta\" [theme]=\"theme\"></novo-value>\n" }]
        }] });

/**
 * @title Formatter Value Example
 */
class FormatterValueExample {
    constructor() {
        this.theme = NOVO_VALUE_THEME.DEFAULT;
        this.data = {
            id: 123,
        };
        this.meta = {
            type: 'SCALAR',
            name: 'Placement',
            label: 'Placement',
            associatedEntity: {
                entity: 'Placement',
            },
            showEntityIcon: true,
            entityIconClass: 'candidate',
            formatter: (value, args) => {
                return `${args.label} #${(value && value.id) || ''}`;
            },
        };
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: FormatterValueExample, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: FormatterValueExample, isStandalone: false, selector: "formatter-value-example", ngImport: i0, template: "<novo-value [data]=\"data\" [meta]=\"meta\" [theme]=\"theme\"></novo-value>\n", styles: [""], dependencies: [{ kind: "component", type: i2$1.NovoValueElement, selector: "novo-value", inputs: ["data", "meta", "theme", "row", "label", "type", "icon"] }, { kind: "directive", type: i2$1.ThemeColorDirective, selector: "[theme]", inputs: ["theme"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: FormatterValueExample, decorators: [{
            type: Component,
            args: [{ selector: 'formatter-value-example', standalone: false, template: "<novo-value [data]=\"data\" [meta]=\"meta\" [theme]=\"theme\"></novo-value>\n" }]
        }] });

/**
 * @title Value with Extenal Links Example
 */
class ExternalLinkValueExample {
    constructor() {
        this.theme = NOVO_VALUE_THEME.MOBILE;
        this.data = 'www.bullhorn.com';
        this.meta = {
            type: 'SCALAR',
            name: 'companyUrl',
            label: 'Company URL',
        };
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: ExternalLinkValueExample, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: ExternalLinkValueExample, isStandalone: false, selector: "external-link-value-example", ngImport: i0, template: "<novo-value [data]=\"data\" [meta]=\"meta\" [theme]=\"theme\"></novo-value>\n", styles: [""], dependencies: [{ kind: "component", type: i2$1.NovoValueElement, selector: "novo-value", inputs: ["data", "meta", "theme", "row", "label", "type", "icon"] }, { kind: "directive", type: i2$1.ThemeColorDirective, selector: "[theme]", inputs: ["theme"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: ExternalLinkValueExample, decorators: [{
            type: Component,
            args: [{ selector: 'external-link-value-example', standalone: false, template: "<novo-value [data]=\"data\" [meta]=\"meta\" [theme]=\"theme\"></novo-value>\n" }]
        }] });

/**
 * @title Entity List Value Example
 */
class EntityListValueExample {
    constructor() {
        this.theme = NOVO_VALUE_THEME.DEFAULT;
        this.data = {
            data: [
                {
                    id: 1,
                    firstName: 'George',
                    lastName: 'Washington',
                    personSubtype: 'Candidate',
                    openLink: (data) => { },
                },
                {
                    id: 2,
                    firstName: 'John',
                    lastName: 'Adams',
                    personSubtype: 'ClientContact',
                    openLink: (data) => { },
                },
                {
                    id: 3,
                    firstName: 'Abraham',
                    lastName: 'Lincoln',
                    personSubtype: 'Lead',
                    openLink: (data) => { },
                },
            ],
        };
        this.meta = {
            type: 'TO_MANY',
            name: 'guests',
            label: 'Attendees',
            associatedEntity: {
                entity: 'CorporateUser',
            },
        };
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: EntityListValueExample, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: EntityListValueExample, isStandalone: false, selector: "entity-list-value-example", ngImport: i0, template: "<novo-value [data]=\"data\" [meta]=\"meta\" [theme]=\"theme\"></novo-value>\n", styles: [""], dependencies: [{ kind: "component", type: i2$1.NovoValueElement, selector: "novo-value", inputs: ["data", "meta", "theme", "row", "label", "type", "icon"] }, { kind: "directive", type: i2$1.ThemeColorDirective, selector: "[theme]", inputs: ["theme"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: EntityListValueExample, decorators: [{
            type: Component,
            args: [{ selector: 'entity-list-value-example', standalone: false, template: "<novo-value [data]=\"data\" [meta]=\"meta\" [theme]=\"theme\"></novo-value>\n" }]
        }] });

/**
 * @title Date Time Value Example
 */
class DateTimeValueExample {
    constructor() {
        this.theme = NOVO_VALUE_THEME.DEFAULT;
        this.data = new Date().getTime();
        this.meta = {
            type: 'SCALAR',
            dataSpecialization: 'DATETIME',
            label: 'Date',
        };
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: DateTimeValueExample, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: DateTimeValueExample, isStandalone: false, selector: "date-time-value-example", ngImport: i0, template: "<novo-value [data]=\"data\" [meta]=\"meta\" [theme]=\"theme\"></novo-value>\n", styles: [""], dependencies: [{ kind: "component", type: i2$1.NovoValueElement, selector: "novo-value", inputs: ["data", "meta", "theme", "row", "label", "type", "icon"] }, { kind: "directive", type: i2$1.ThemeColorDirective, selector: "[theme]", inputs: ["theme"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: DateTimeValueExample, decorators: [{
            type: Component,
            args: [{ selector: 'date-time-value-example', standalone: false, template: "<novo-value [data]=\"data\" [meta]=\"meta\" [theme]=\"theme\"></novo-value>\n" }]
        }] });

/**
 * @title Corporate User Value Example
 */
class CorporateUserValueExample {
    constructor() {
        this.theme = NOVO_VALUE_THEME.DEFAULT;
        this.data = {
            id: 123,
            firstName: 'Jack',
            lastName: 'White',
        };
        this.meta = {
            type: 'TO_ONE',
            name: 'user',
            label: 'Internal User',
            associatedEntity: {
                entity: 'CorporateUser',
            },
        };
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: CorporateUserValueExample, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: CorporateUserValueExample, isStandalone: false, selector: "corporate-user-value-example", ngImport: i0, template: "<novo-value [data]=\"data\" [meta]=\"meta\" [theme]=\"theme\"></novo-value>\n", styles: [""], dependencies: [{ kind: "component", type: i2$1.NovoValueElement, selector: "novo-value", inputs: ["data", "meta", "theme", "row", "label", "type", "icon"] }, { kind: "directive", type: i2$1.ThemeColorDirective, selector: "[theme]", inputs: ["theme"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: CorporateUserValueExample, decorators: [{
            type: Component,
            args: [{ selector: 'corporate-user-value-example', standalone: false, template: "<novo-value [data]=\"data\" [meta]=\"meta\" [theme]=\"theme\"></novo-value>\n" }]
        }] });

/**
 * @title Category Value Example
 */
class CategoryValueExample {
    constructor() {
        this.theme = NOVO_VALUE_THEME.DEFAULT;
        this.data = {
            value: 'stuff',
            label: 'Stuff Category',
        };
        this.meta = {
            type: 'TO_ONE',
            name: 'category',
            label: 'Category',
            associatedEntity: {
                entity: 'Category',
            },
        };
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: CategoryValueExample, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: CategoryValueExample, isStandalone: false, selector: "category-value-example", ngImport: i0, template: "<novo-value [data]=\"data\" [meta]=\"meta\" [theme]=\"theme\"></novo-value>\n", styles: [""], dependencies: [{ kind: "component", type: i2$1.NovoValueElement, selector: "novo-value", inputs: ["data", "meta", "theme", "row", "label", "type", "icon"] }, { kind: "directive", type: i2$1.ThemeColorDirective, selector: "[theme]", inputs: ["theme"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: CategoryValueExample, decorators: [{
            type: Component,
            args: [{ selector: 'category-value-example', standalone: false, template: "<novo-value [data]=\"data\" [meta]=\"meta\" [theme]=\"theme\"></novo-value>\n" }]
        }] });

/**
 * @title Basic Value Example
 */
class BasicValueExample {
    constructor() {
        this.theme = NOVO_VALUE_THEME.MOBILE;
        this.data = 1234567890;
        this.meta = {
            type: 'SCALAR',
            name: 'phone1',
            label: 'PH #',
        };
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: BasicValueExample, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: BasicValueExample, isStandalone: false, selector: "basic-value-example", ngImport: i0, template: "<novo-value [data]=\"data\" [meta]=\"meta\" [theme]=\"theme\"></novo-value>\n", styles: [""], dependencies: [{ kind: "component", type: i2$1.NovoValueElement, selector: "novo-value", inputs: ["data", "meta", "theme", "row", "label", "type", "icon"] }, { kind: "directive", type: i2$1.ThemeColorDirective, selector: "[theme]", inputs: ["theme"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: BasicValueExample, decorators: [{
            type: Component,
            args: [{ selector: 'basic-value-example', standalone: false, template: "<novo-value [data]=\"data\" [meta]=\"meta\" [theme]=\"theme\"></novo-value>\n" }]
        }] });

/**
 * @title Associated Value Example
 */
class AssociatedValueExample {
    constructor() {
        this.theme = NOVO_VALUE_THEME.DEFAULT;
        this.data = {
            id: 1,
            firstName: 'Alice',
            lastName: 'Wonderland',
        };
        this.meta = {
            type: 'TO_ONE',
            name: 'owner',
            label: 'Owner',
            associatedEntity: {
                entity: 'CorporateUser',
            },
        };
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: AssociatedValueExample, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: AssociatedValueExample, isStandalone: false, selector: "associated-value-example", ngImport: i0, template: "<novo-value [data]=\"data\" [meta]=\"meta\" [theme]=\"theme\"></novo-value>\n", styles: [""], dependencies: [{ kind: "component", type: i2$1.NovoValueElement, selector: "novo-value", inputs: ["data", "meta", "theme", "row", "label", "type", "icon"] }, { kind: "directive", type: i2$1.ThemeColorDirective, selector: "[theme]", inputs: ["theme"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: AssociatedValueExample, decorators: [{
            type: Component,
            args: [{ selector: 'associated-value-example', standalone: false, template: "<novo-value [data]=\"data\" [meta]=\"meta\" [theme]=\"theme\"></novo-value>\n" }]
        }] });

/**
 * @title Address Value Example
 */
class AddressValueExample {
    constructor() {
        this.theme = NOVO_VALUE_THEME.DEFAULT;
        this.data = {
            address1: '100 Summer Street',
            city: 'Boston',
            state: 'MA',
            zip: '02143',
            country: {
                name: 'United States',
            },
        };
        this.meta = {
            dataType: 'Address',
            type: 'Address',
            label: 'Address',
            name: 'address',
        };
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: AddressValueExample, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: AddressValueExample, isStandalone: false, selector: "address-value-example", ngImport: i0, template: "<novo-value [data]=\"data\" [meta]=\"meta\" [theme]=\"theme\"></novo-value>\n", styles: [""], dependencies: [{ kind: "component", type: i2$1.NovoValueElement, selector: "novo-value", inputs: ["data", "meta", "theme", "row", "label", "type", "icon"] }, { kind: "directive", type: i2$1.ThemeColorDirective, selector: "[theme]", inputs: ["theme"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: AddressValueExample, decorators: [{
            type: Component,
            args: [{ selector: 'address-value-example', standalone: false, template: "<novo-value [data]=\"data\" [meta]=\"meta\" [theme]=\"theme\"></novo-value>\n" }]
        }] });

/**
 * @title Basic Checkbox Usage
 */
class BasicTimezoneExample {
    constructor() {
        this.items = [
            {
                name: 'Unchecked',
                isChecked: false,
                disabled: false,
            },
            {
                name: 'Checked',
                isChecked: true,
                disabled: false,
            },
            {
                name: 'Indeterminate',
                isChecked: true,
                disabled: false,
                indeterminate: true,
            },
            {
                name: 'Disabled',
                isChecked: false,
                disabled: true,
            },
            {
                name: 'Disabled and Checked',
                isChecked: true,
                disabled: true,
            },
            {
                name: 'Disabled and Indeterminate',
                isChecked: true,
                disabled: true,
                indeterminate: true,
            },
        ];
    }
    onChange(change, item) {
        console.log('Checkbox Change:', change); // tslint:disable-line
        if (item.indeterminate) {
            item.indeterminate = false;
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: BasicTimezoneExample, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: BasicTimezoneExample, isStandalone: false, selector: "basic-timezone-example", ngImport: i0, template: "<div *ngFor=\"let item of items\">\n  <novo-checkbox\n    [label]=\"item.name\"\n    [(ngModel)]=\"item.isChecked\"\n    [disabled]=\"item.disabled\"\n    [indeterminate]=\"item.indeterminate\"\n    (onSelect)=\"onChange($event, item)\"></novo-checkbox>\n</div>", styles: [""], dependencies: [{ kind: "directive", type: i1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i1.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "directive", type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "component", type: i2$1.NovoCheckboxElement, selector: "novo-checkbox", inputs: ["aria-label", "aria-labelledby", "aria-describedby", "id", "name", "label", "disabled", "layoutOptions", "color", "value", "tabIndex", "required", "checked", "indeterminate"], outputs: ["change", "indeterminateChange", "onSelect"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: BasicTimezoneExample, decorators: [{
            type: Component,
            args: [{ selector: 'basic-timezone-example', standalone: false, template: "<div *ngFor=\"let item of items\">\n  <novo-checkbox\n    [label]=\"item.name\"\n    [(ngModel)]=\"item.isChecked\"\n    [disabled]=\"item.disabled\"\n    [indeterminate]=\"item.indeterminate\"\n    (onSelect)=\"onChange($event, item)\"></novo-checkbox>\n</div>" }]
        }] });

/**
 * @title Time Picker Example
 */
class TimePickerExample {
    constructor() {
        this.time1 = new Date();
        this.time2 = new Date();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: TimePickerExample, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: TimePickerExample, isStandalone: false, selector: "time-picker-example", ngImport: i0, template: "<novo-row gap=\"3rem\" align=\"space-between\">\n  <div flex>\n    <novo-time-picker-input\n      [military]=\"display.value\"\n      [disabled]=\"disabled.value\"\n      [analog]=\"appearance.value\"\n      [hasButtons]=\"hasButtons.value\"\n      [(ngModel)]=\"time1\"></novo-time-picker-input>\n    <novo-hint>value: {{time1}}</novo-hint>\n  </div>\n\n  <novo-divider vertical></novo-divider>\n\n  <novo-field flex>\n    <novo-label>Set an Alarm</novo-label>\n    <input novoInput [(ngModel)]=\"time2\" [timeFormat]=\"format.value\" [picker]=\"timepicker\" />\n    <novo-picker-toggle novoSuffix icon=\"clock\">\n      <novo-time-picker #timepicker></novo-time-picker>\n    </novo-picker-toggle>\n    <novo-hint>value: {{time2}}</novo-hint>\n    <novo-hint>The <code>timeFormat</code> attribute controls model.</novo-hint>\n  </novo-field>\n\n</novo-row>\n<novo-row class=\"bgc-bright\" align=\"flex-start\" gap=\"xl\" padding=\"md\">\n  <novo-field>\n    <novo-label>Display Format?</novo-label>\n    <novo-radio-group #display appearance=\"vertical\" [value]=\"true\">\n      <novo-radio name=\"display\" [value]=\"true\">HH:mm</novo-radio>\n      <novo-radio name=\"display\" [value]=\"false\">hh:mm A</novo-radio>\n    </novo-radio-group>\n  </novo-field>\n  <novo-field>\n    <novo-label>Value Format?</novo-label>\n    <novo-radio-group #format appearance=\"vertical\" value=\"iso8601\">\n      <novo-radio name=\"format\" value=\"date\">date</novo-radio>\n      <novo-radio name=\"format\" value=\"iso8601\">iso8601</novo-radio>\n      <novo-radio name=\"format\" value=\"string\">string</novo-radio>\n    </novo-radio-group>\n  </novo-field>\n  <novo-field>\n    <novo-label>Appearance</novo-label>\n    <novo-radio-group #appearance appearance=\"vertical\" [value]=\"false\">\n      <novo-radio name=\"appearance\" [value]=\"false\">Default</novo-radio>\n      <novo-radio name=\"appearance\" [value]=\"true\">Analog (deprecated)</novo-radio>\n    </novo-radio-group>\n  </novo-field>\n  <novo-field>\n    <novo-label>Disabled?</novo-label>\n    <novo-radio-group #disabled appearance=\"vertical\" [value]=\"false\">\n      <novo-radio name=\"disabled\" [value]=\"false\">Enabled</novo-radio>\n      <novo-radio name=\"disabled\" [value]=\"true\">Disabled</novo-radio>\n    </novo-radio-group>\n  </novo-field>\n  <novo-field>\n    <novo-label>Save/Cancel Buttons?</novo-label>\n    <novo-radio-group #hasButtons appearance=\"vertical\" [value]=\"false\">\n      <novo-radio name=\"disabled\" [value]=\"true\">Enabled</novo-radio>\n      <novo-radio name=\"disabled\" [value]=\"false\">Disabled</novo-radio>\n    </novo-radio-group>\n  </novo-field>\n</novo-row>", styles: [":host{display:grid;grid-template-rows:120px 1fr;gap:2rem}\n"], dependencies: [{ kind: "directive", type: i1.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i1.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "component", type: i2$1.NovoFlexElement, selector: "novo-flex,novo-row", inputs: ["direction", "align", "justify", "wrap", "gap"] }, { kind: "component", type: i2$1.NovoDividerComponent, selector: "novo-divider", inputs: ["vertical", "inset"] }, { kind: "component", type: i2$1.NovoRadioElement, selector: "novo-radio", inputs: ["id", "name", "tabindex", "vertical", "label", "button", "theme", "size", "icon", "color", "disabled", "checked", "value"], outputs: ["change", "blur", "focus"] }, { kind: "component", type: i2$1.NovoRadioGroup, selector: "novo-radio-group", inputs: ["id", "tabindex", "errorStateMatcher", "appearance", "value", "name", "disabled", "required", "placeholder"], outputs: ["change", "blur"] }, { kind: "component", type: i2$1.NovoTimePickerElement, selector: "novo-time-picker", inputs: ["military", "analog", "inline", "step", "hasButtons", "saveDisabled"], outputs: ["onSelect", "onSave", "onCancel"] }, { kind: "component", type: i2$1.NovoTimePickerInputElement, selector: "novo-time-picker-input", inputs: ["name", "placeholder", "military", "maskOptions", "disabled", "hasButtons", "saveDisabled", "overlayOnElement", "analog"], outputs: ["blurEvent", "focusEvent", "changeEvent", "onSave", "onCancel"] }, { kind: "component", type: i2$1.NovoLabel, selector: "novo-label,[novo-label]", inputs: ["id"] }, { kind: "directive", type: i2$1.PaddingDirective, selector: "[p],[padding],[paddingTop],[paddingRight],[paddingBottom],[paddingLeft],[paddingX],[paddingY],[pt],[pr],[pb],[pl],[px],[py]", inputs: ["padding", "p", "paddingLeft", "pl", "paddingRight", "pr", "paddingTop", "pt", "paddingBottom", "pb", "paddingX", "px", "paddingY", "py"] }, { kind: "directive", type: i2$1.GapDirective, selector: "[gap]", inputs: ["gap"] }, { kind: "directive", type: i2$1.FlexDirective, selector: "[flex]", inputs: ["flex"] }, { kind: "component", type: i2$1.NovoFieldElement, selector: "novo-field", inputs: ["layout", "appearance", "customOverlayOrigin", "width"], outputs: ["valueChanges", "stateChanges"] }, { kind: "component", type: i2$1.NovoHintElement, selector: "novo-hint", inputs: ["align", "id"] }, { kind: "directive", type: i2$1.NovoInput, selector: "input[novoInput], textarea[novoInput], select[novoInput]", inputs: ["disabled", "id", "placeholder", "required", "type", "value", "readonly"], outputs: ["onSelect"] }, { kind: "directive", type: i2$1.NovoFieldSuffixDirective, selector: "[novoSuffix]" }, { kind: "directive", type: i2$1.NovoTimeFormatDirective, selector: "input[timeFormat]", inputs: ["military", "timeFormat"] }, { kind: "component", type: i2$1.NovoPickerToggleElement, selector: "novo-picker-toggle", inputs: ["for", "icon", "tabIndex", "aria-label", "triggerOnFocus", "overlayId", "width", "disabled"], exportAs: ["novoPickerToggle"] }, { kind: "directive", type: i2$1.NovoPickerDirective, selector: "input[picker]", inputs: ["picker", "autocomplete"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: TimePickerExample, decorators: [{
            type: Component,
            args: [{ selector: 'time-picker-example', standalone: false, template: "<novo-row gap=\"3rem\" align=\"space-between\">\n  <div flex>\n    <novo-time-picker-input\n      [military]=\"display.value\"\n      [disabled]=\"disabled.value\"\n      [analog]=\"appearance.value\"\n      [hasButtons]=\"hasButtons.value\"\n      [(ngModel)]=\"time1\"></novo-time-picker-input>\n    <novo-hint>value: {{time1}}</novo-hint>\n  </div>\n\n  <novo-divider vertical></novo-divider>\n\n  <novo-field flex>\n    <novo-label>Set an Alarm</novo-label>\n    <input novoInput [(ngModel)]=\"time2\" [timeFormat]=\"format.value\" [picker]=\"timepicker\" />\n    <novo-picker-toggle novoSuffix icon=\"clock\">\n      <novo-time-picker #timepicker></novo-time-picker>\n    </novo-picker-toggle>\n    <novo-hint>value: {{time2}}</novo-hint>\n    <novo-hint>The <code>timeFormat</code> attribute controls model.</novo-hint>\n  </novo-field>\n\n</novo-row>\n<novo-row class=\"bgc-bright\" align=\"flex-start\" gap=\"xl\" padding=\"md\">\n  <novo-field>\n    <novo-label>Display Format?</novo-label>\n    <novo-radio-group #display appearance=\"vertical\" [value]=\"true\">\n      <novo-radio name=\"display\" [value]=\"true\">HH:mm</novo-radio>\n      <novo-radio name=\"display\" [value]=\"false\">hh:mm A</novo-radio>\n    </novo-radio-group>\n  </novo-field>\n  <novo-field>\n    <novo-label>Value Format?</novo-label>\n    <novo-radio-group #format appearance=\"vertical\" value=\"iso8601\">\n      <novo-radio name=\"format\" value=\"date\">date</novo-radio>\n      <novo-radio name=\"format\" value=\"iso8601\">iso8601</novo-radio>\n      <novo-radio name=\"format\" value=\"string\">string</novo-radio>\n    </novo-radio-group>\n  </novo-field>\n  <novo-field>\n    <novo-label>Appearance</novo-label>\n    <novo-radio-group #appearance appearance=\"vertical\" [value]=\"false\">\n      <novo-radio name=\"appearance\" [value]=\"false\">Default</novo-radio>\n      <novo-radio name=\"appearance\" [value]=\"true\">Analog (deprecated)</novo-radio>\n    </novo-radio-group>\n  </novo-field>\n  <novo-field>\n    <novo-label>Disabled?</novo-label>\n    <novo-radio-group #disabled appearance=\"vertical\" [value]=\"false\">\n      <novo-radio name=\"disabled\" [value]=\"false\">Enabled</novo-radio>\n      <novo-radio name=\"disabled\" [value]=\"true\">Disabled</novo-radio>\n    </novo-radio-group>\n  </novo-field>\n  <novo-field>\n    <novo-label>Save/Cancel Buttons?</novo-label>\n    <novo-radio-group #hasButtons appearance=\"vertical\" [value]=\"false\">\n      <novo-radio name=\"disabled\" [value]=\"true\">Enabled</novo-radio>\n      <novo-radio name=\"disabled\" [value]=\"false\">Disabled</novo-radio>\n    </novo-radio-group>\n  </novo-field>\n</novo-row>", styles: [":host{display:grid;grid-template-rows:120px 1fr;gap:2rem}\n"] }]
        }] });

/**
 * @title Tiles Usage Example
 */
class TilesUsageExample {
    constructor() {
        this.demoTilesDefault = [
            {
                label: 'Yes',
                value: 'yes',
            },
            {
                label: 'No',
                value: 'no',
            },
            {
                label: 'Maybe',
                value: 'maybe',
                disabled: true,
            },
        ];
        this.valueDefault = 'yes';
        this.demoTilesIcons = [
            {
                label: 'Include',
                value: 'include',
                icon: 'check',
            },
            {
                label: 'Exclude',
                value: 'exclude',
                icon: 'exclude',
            },
        ];
        this.valueIcons = 'exclude';
        this.demoTilesDisabled = [...this.demoTilesDefault];
        this.valueDisabled = 'yes';
        this.demoTilesColor = [
            {
                label: 'Good',
                value: 'good',
                color: 'success',
            },
            {
                label: 'Bad',
                value: 'bad',
                color: 'negative',
            },
        ];
        this.valueColor = 'good';
        this.addedTiles = 0;
    }
    select(demo, newValue) {
        this[`current${demo}`] = newValue;
    }
    addTile() {
        const randomColor = allColors[allColors.length * Math.random() | 0];
        this.demoTilesColor.push({
            label: randomColor.name.charAt(0).toUpperCase() + randomColor.name.slice(1),
            value: randomColor.variables[0] + this.addedTiles,
            color: randomColor.variables[0],
        });
        this.addedTiles++;
        this.demoTilesColor = [...this.demoTilesColor];
    }
    resetTiles() {
        this.demoTilesColor.length = 2;
        this.demoTilesColor = [...this.demoTilesColor];
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: TilesUsageExample, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: TilesUsageExample, isStandalone: false, selector: "tiles-usage-example", ngImport: i0, template: "Default:\n<br />\n<novo-tiles\n  [options]=\"demoTilesDefault\"\n  (onChange)=\"select('Default', $event)\"\n  [(ngModel)]=\"valueDefault\" />\n<hr />\nIcons:\n<br />\n<novo-tiles\n  [options]=\"demoTilesIcons\"\n  (onChange)=\"select('Icons', $event)\"\n  [(ngModel)]=\"valueIcons\" />\n<hr />\nDisabled:\n<br />\n<novo-tiles disabled\n  [options]=\"demoTilesDisabled\"\n  (onChange)=\"select('Disabled', $event)\"\n  [(ngModel)]=\"valueDisabled\" />\n<hr />\nCustom Colors:\n<br />\n<novo-tiles\n  [options]=\"demoTilesColor\"\n  (onChange)=\"select('Color', $event)\"\n  [(ngModel)]=\"valueColor\" />\n<novo-row gap=\"md\" justify=\"end\">\n    <button theme=\"primary\" type=\"button\" name=\"addButton\" (click)=\"addTile()\">Add Tile</button>\n    <button theme=\"secondary\" type=\"button\" name=\"resetButton\" (click)=\"resetTiles()\">Reset</button>\n</novo-row>\n", styles: [""], dependencies: [{ kind: "directive", type: i1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i1.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "component", type: i2$1.NovoButtonElement, selector: "novo-button,button[theme]", inputs: ["color", "side", "size", "theme", "loading", "icon", "secondIcon", "disabled"] }, { kind: "component", type: i2$1.NovoFlexElement, selector: "novo-flex,novo-row", inputs: ["direction", "align", "justify", "wrap", "gap"] }, { kind: "component", type: i2$1.NovoTilesElement, selector: "novo-tiles", inputs: ["name", "options", "required", "controlDisabled"], outputs: ["onChange", "onSelectedOptionClick", "onDisabledOptionClick"] }, { kind: "directive", type: i2$1.GapDirective, selector: "[gap]", inputs: ["gap"] }, { kind: "directive", type: i2$1.ThemeColorDirective, selector: "[theme]", inputs: ["theme"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: TilesUsageExample, decorators: [{
            type: Component,
            args: [{ selector: 'tiles-usage-example', standalone: false, template: "Default:\n<br />\n<novo-tiles\n  [options]=\"demoTilesDefault\"\n  (onChange)=\"select('Default', $event)\"\n  [(ngModel)]=\"valueDefault\" />\n<hr />\nIcons:\n<br />\n<novo-tiles\n  [options]=\"demoTilesIcons\"\n  (onChange)=\"select('Icons', $event)\"\n  [(ngModel)]=\"valueIcons\" />\n<hr />\nDisabled:\n<br />\n<novo-tiles disabled\n  [options]=\"demoTilesDisabled\"\n  (onChange)=\"select('Disabled', $event)\"\n  [(ngModel)]=\"valueDisabled\" />\n<hr />\nCustom Colors:\n<br />\n<novo-tiles\n  [options]=\"demoTilesColor\"\n  (onChange)=\"select('Color', $event)\"\n  [(ngModel)]=\"valueColor\" />\n<novo-row gap=\"md\" justify=\"end\">\n    <button theme=\"primary\" type=\"button\" name=\"addButton\" (click)=\"addTile()\">Add Tile</button>\n    <button theme=\"secondary\" type=\"button\" name=\"resetButton\" (click)=\"resetTiles()\">Reset</button>\n</novo-row>\n" }]
        }] });

const STATES = [
    { name: 'Alabama', abbr: 'Ala.', code: 'AL' },
    { name: 'Alaska', abbr: 'Alaska', code: 'AK' },
    { name: 'Arizona', abbr: 'Ariz.', code: 'AZ' },
    { name: 'Arkansas', abbr: 'Ark.', code: 'AR' },
    { name: 'California', abbr: 'Calif.', code: 'CA' },
    { name: 'Colorado', abbr: 'Colo.', code: 'CO' },
    { name: 'Connecticut', abbr: 'Conn.', code: 'CT' },
    { name: 'Delaware', abbr: 'Del.', code: 'DE' },
    { name: 'District of Columbia', abbr: 'D.C.', code: 'DC' },
    { name: 'Florida', abbr: 'Fla.', code: 'FL' },
    { name: 'Georgia', abbr: 'Ga.', code: 'GA' },
    { name: 'Hawaii', abbr: 'Hawaii', code: 'HI' },
    { name: 'Idaho', abbr: 'Idaho', code: 'ID' },
    { name: 'Illinois', abbr: 'Ill.', code: 'IL' },
    { name: 'Indiana', abbr: 'Ind.', code: 'IN' },
    { name: 'Iowa', abbr: 'Iowa', code: 'IA' },
    { name: 'Kansas', abbr: 'Kans.', code: 'KS' },
    { name: 'Kentucky', abbr: 'Ky.', code: 'KY' },
    { name: 'Louisiana', abbr: 'La.', code: 'LA' },
    { name: 'Maine', abbr: 'Maine', code: 'ME' },
    { name: 'Maryland', abbr: 'Md.', code: 'MD' },
    { name: 'Massachusetts', abbr: 'Mass.', code: 'MA' },
    { name: 'Michigan', abbr: 'Mich.', code: 'MI' },
    { name: 'Minnesota', abbr: 'Minn.', code: 'MN' },
    { name: 'Mississippi', abbr: 'Miss.', code: 'MS' },
    { name: 'Missouri', abbr: 'Mo.', code: 'MO' },
    { name: 'Montana', abbr: 'Mont.', code: 'MT' },
    { name: 'Nebraska', abbr: 'Nebr.', code: 'NE' },
    { name: 'Nevada', abbr: 'Nev.', code: 'NV' },
    { name: 'New Hampshire', abbr: 'N.H.', code: 'NH' },
    { name: 'New Jersey', abbr: 'N.J.', code: 'NJ' },
    { name: 'New Mexico', abbr: 'N.M.', code: 'NM' },
    { name: 'New York', abbr: 'N.Y.', code: 'NY' },
    { name: 'North Carolina', abbr: 'N.C.', code: 'NC' },
    { name: 'North Dakota', abbr: 'N.D.', code: 'ND' },
    { name: 'Ohio', abbr: 'Ohio', code: 'OH' },
    { name: 'Oklahoma', abbr: 'Okla.', code: 'OK' },
    { name: 'Oregon', abbr: 'Ore.', code: 'OR' },
    { name: 'Pennsylvania', abbr: 'Pa.', code: 'PA' },
    { name: 'Rhode Island', abbr: 'R.I.', code: 'RI' },
    { name: 'South Carolina', abbr: 'S.C.', code: 'SC' },
    { name: 'South Dakota', abbr: 'S.D.', code: 'SD' },
    { name: 'Tennessee', abbr: 'Tenn.', code: 'TN' },
    { name: 'Texas', abbr: 'Tex.', code: 'TX' },
    { name: 'Utah', abbr: 'Utah', code: 'UT' },
    { name: 'Vermont', abbr: 'Vt.', code: 'VT' },
    { name: 'Virginia', abbr: 'Va.', code: 'VA' },
    { name: 'Washington', abbr: 'Wash.', code: 'WA' },
    { name: 'West Virginia', abbr: 'W.Va.', code: 'WV' },
    { name: 'Wisconsin', abbr: 'Wis.', code: 'WI' },
    { name: 'Wyoming', abbr: 'Wyo.', code: 'WY' },
];

/**
 * @title Multiple Select With Search Example
 */
class MultipleSelectWithSearchExample {
    constructor() {
        /** list of states */
        this.states = STATES;
        /** control for the selected state for multi-selection */
        this.stateMultiCtrl = new UntypedFormControl();
        /** control for the NovoSelect filter keyword multi-selection */
        this.stateMultiFilterCtrl = new UntypedFormControl();
        /** list of states filtered by search keyword */
        this.filteredStatesMulti = new ReplaySubject(1);
        /** Subject that emits when the component has been destroyed. */
        this._onDestroy = new Subject();
    }
    ngOnInit() {
        // set initial selection
        this.stateMultiCtrl.setValue([this.states[10], this.states[11], this.states[12]]);
        // load the initial state list
        this.filteredStatesMulti.next(this.states.slice());
        // listen for search field value changes
        this.stateMultiFilterCtrl.valueChanges.pipe(takeUntil(this._onDestroy)).subscribe(() => {
            this.filterStatesMulti();
        });
    }
    ngAfterViewInit() {
        this.setInitialValue();
    }
    ngOnDestroy() {
        this._onDestroy.next();
        this._onDestroy.complete();
    }
    /**
     * Sets the initial value after the filteredStates are loaded initially
     */
    setInitialValue() {
        this.filteredStatesMulti.pipe(take(1), takeUntil(this._onDestroy)).subscribe(() => {
            // setting the compareWith property to a comparison function
            // triggers initializing the selection according to the initial value of
            // the form control (i.e. _initializeSelection())
            // this needs to be done after the filteredStates are loaded initially
            // and after the novo-option elements are available
            this.multiSelect.compareWith = (a, b) => a && b && a.code === b.code;
        });
    }
    filterStatesMulti() {
        if (!this.states) {
            return;
        }
        // get the search keyword
        let search = this.stateMultiFilterCtrl.value;
        if (!search) {
            this.filteredStatesMulti.next(this.states.slice());
            return;
        }
        else {
            search = search.toLowerCase();
        }
        // filter the states
        this.filteredStatesMulti.next(this.states.filter((state) => state.name.toLowerCase().indexOf(search) > -1));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: MultipleSelectWithSearchExample, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: MultipleSelectWithSearchExample, isStandalone: false, selector: "multiple-select-with-search-example", viewQueries: [{ propertyName: "multiSelect", first: true, predicate: ["multiSelect"], descendants: true, static: true }], ngImport: i0, template: "<h3>Multiple selection</h3>\n<p>\n  <novo-field>\n    <novo-select [formControl]=\"stateMultiCtrl\" placeholder=\"States\" [multiple]=\"true\" #multiSelect>\n      <novo-option>\n        <novo-select-search [formControl]=\"stateMultiFilterCtrl\"></novo-select-search>\n      </novo-option>\n      <novo-option *ngFor=\"let state of filteredStatesMulti | async\" [value]=\"state\">\n        {{state.name}}\n      </novo-option>\n    </novo-select>\n  </novo-field>\n</p>\n<p>\n  Selected States:\n</p>\n<ul *ngFor=\"let state of stateMultiCtrl?.value\">\n  <li>{{state.name}}</li>\n</ul>", styles: [""], dependencies: [{ kind: "directive", type: i1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i1.FormControlDirective, selector: "[formControl]", inputs: ["formControl", "disabled", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { kind: "directive", type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "component", type: i2$1.NovoSelectElement, selector: "novo-select", inputs: ["disabled", "required", "tabIndex", "id", "name", "placeholder", "readonly", "headerConfig", "position", "overlayWidth", "overlayHeight", "displayIcon", "displayWith", "compareWith", "hideLegacyOptions", "value", "multiple", "options"], outputs: ["onSelect", "selectionChange", "valueChange", "openedChange", "opened", "closed"] }, { kind: "component", type: i2$1.NovoOption, selector: "novo-option", inputs: ["selected", "keepOpen", "novoInert", "value", "disabled"], exportAs: ["novoOption"] }, { kind: "component", type: i2$1.NovoFieldElement, selector: "novo-field", inputs: ["layout", "appearance", "customOverlayOrigin", "width"], outputs: ["valueChanges", "stateChanges"] }, { kind: "component", type: i2$1.NovoSelectSearchComponent, selector: "novo-select-search", inputs: ["name", "placeholderLabel", "type", "noEntriesFoundLabel", "indexAndLengthScreenReaderText", "clearSearchInput", "searching", "disableInitialFocus", "enableClearOnEscapePressed", "allowDeselectDuringFilter", "preventHomeEndKeyPropagation", "disableScrollToActiveOnOptionsChanged", "ariaLabel", "showToggleAllCheckbox", "toggleAllCheckboxChecked", "toggleAllCheckboxIndeterminate", "toggleAllCheckboxTooltipMessage", "toogleAllCheckboxTooltipPosition", "hideClearSearchButton", "alwaysRestoreSelectedOptionsMulti"], outputs: ["toggleAll"] }, { kind: "pipe", type: i2.AsyncPipe, name: "async" }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: MultipleSelectWithSearchExample, decorators: [{
            type: Component,
            args: [{ selector: 'multiple-select-with-search-example', standalone: false, template: "<h3>Multiple selection</h3>\n<p>\n  <novo-field>\n    <novo-select [formControl]=\"stateMultiCtrl\" placeholder=\"States\" [multiple]=\"true\" #multiSelect>\n      <novo-option>\n        <novo-select-search [formControl]=\"stateMultiFilterCtrl\"></novo-select-search>\n      </novo-option>\n      <novo-option *ngFor=\"let state of filteredStatesMulti | async\" [value]=\"state\">\n        {{state.name}}\n      </novo-option>\n    </novo-select>\n  </novo-field>\n</p>\n<p>\n  Selected States:\n</p>\n<ul *ngFor=\"let state of stateMultiCtrl?.value\">\n  <li>{{state.name}}</li>\n</ul>" }]
        }], ctorParameters: () => [], propDecorators: { multiSelect: [{
                type: ViewChild,
                args: ['multiSelect', { static: true }]
            }] } });

/**
 * @title Multiple Select Example
 */
class MultipleSelectExample {
    constructor() {
        this.placeholder = 'Select...';
        this.states = [
            'Alabama',
            'Alaska',
            'Arizona',
            'Arkansas',
            'California',
            'Colorado',
            'Connecticut',
            'Delaware',
            'Florida',
            'Georgia',
            'Hawaii',
            'Idaho',
            'Illinois',
            'Indiana',
            'Iowa',
            'Kansas',
            'Kentucky',
            'Louisiana',
            'Maine',
            'Maryland',
            'Massachusetts',
            'Michigan',
            'Minnesota',
            'Mississippi',
            'Missouri',
            'Montana',
            'Nebraska',
            'Nevada',
            'New Hampshire',
            'New Jersey',
            'New Mexico',
            'New York',
            'North Dakota',
            'North Carolina',
            'Ohio',
            'Oklahoma',
            'Oregon',
            'Pennsylvania',
            'Rhode Island',
            'South Carolina',
            'South Dakota',
            'Tennessee',
            'Texas',
            'Utah',
            'Vermont',
            'Virginia',
            'Washington',
            'West Virginia',
            'Wisconsin',
            'Wyoming',
        ];
        this.selected = ['Missouri'];
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: MultipleSelectExample, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: MultipleSelectExample, isStandalone: false, selector: "multiple-select-example", ngImport: i0, template: "<novo-field>\n  <novo-label>Selected Value: <span class=\"caption\">{{selected}}</span></novo-label>\n  <novo-select [placeholder]=\"placeholder\" [(ngModel)]=\"selected\" multiple>\n    <novo-option *ngFor=\"let state of states\" [value]=\"state\">{{state}}</novo-option>\n  </novo-select>\n</novo-field>", styles: [""], dependencies: [{ kind: "directive", type: i1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i1.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "directive", type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "component", type: i2$1.NovoSelectElement, selector: "novo-select", inputs: ["disabled", "required", "tabIndex", "id", "name", "placeholder", "readonly", "headerConfig", "position", "overlayWidth", "overlayHeight", "displayIcon", "displayWith", "compareWith", "hideLegacyOptions", "value", "multiple", "options"], outputs: ["onSelect", "selectionChange", "valueChange", "openedChange", "opened", "closed"] }, { kind: "component", type: i2$1.NovoLabel, selector: "novo-label,[novo-label]", inputs: ["id"] }, { kind: "component", type: i2$1.NovoOption, selector: "novo-option", inputs: ["selected", "keepOpen", "novoInert", "value", "disabled"], exportAs: ["novoOption"] }, { kind: "component", type: i2$1.NovoFieldElement, selector: "novo-field", inputs: ["layout", "appearance", "customOverlayOrigin", "width"], outputs: ["valueChanges", "stateChanges"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: MultipleSelectExample, decorators: [{
            type: Component,
            args: [{ selector: 'multiple-select-example', standalone: false, template: "<novo-field>\n  <novo-label>Selected Value: <span class=\"caption\">{{selected}}</span></novo-label>\n  <novo-select [placeholder]=\"placeholder\" [(ngModel)]=\"selected\" multiple>\n    <novo-option *ngFor=\"let state of states\" [value]=\"state\">{{state}}</novo-option>\n  </novo-select>\n</novo-field>" }]
        }] });

/**
 * @title Long Select Example
 */
class LongSelectExample {
    constructor() {
        this.placeholder = 'Select...';
        this.states = [
            'Alabama',
            'Alaska',
            'Arizona',
            'Arkansas',
            'California',
            'Colorado',
            'Connecticut',
            'Delaware',
            'Florida',
            'Georgia',
            'Hawaii',
            'Idaho',
            'Illinois',
            'Indiana',
            'Iowa',
            'Kansas',
            'Kentucky',
            'Louisiana',
            'Maine',
            'Maryland',
            'Massachusetts',
            'Michigan',
            'Minnesota',
            'Mississippi',
            'Missouri',
            'Montana',
            'Nebraska',
            'Nevada',
            'New Hampshire',
            'New Jersey',
            'New Mexico',
            'New York',
            'North Dakota',
            'North Carolina',
            'Ohio',
            'Oklahoma',
            'Oregon',
            'Pennsylvania',
            'Rhode Island',
            'South Carolina',
            'South Dakota',
            'Tennessee',
            'Texas',
            'Utah',
            'Vermont',
            'Virginia',
            'Washington',
            'West Virginia',
            'Wisconsin',
            'Wyoming',
        ];
        this.state = 'Missouri';
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: LongSelectExample, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: LongSelectExample, isStandalone: false, selector: "long-select-example", ngImport: i0, template: "<novo-field>\n  <novo-label><span class=\"caption\">Selected Value:</span>{{state}}</novo-label>\n  <novo-select [options]=\"states\" [placeholder]=\"placeholder\" [(ngModel)]=\"state\"></novo-select>\n</novo-field>", styles: [""], dependencies: [{ kind: "directive", type: i1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i1.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "component", type: i2$1.NovoSelectElement, selector: "novo-select", inputs: ["disabled", "required", "tabIndex", "id", "name", "placeholder", "readonly", "headerConfig", "position", "overlayWidth", "overlayHeight", "displayIcon", "displayWith", "compareWith", "hideLegacyOptions", "value", "multiple", "options"], outputs: ["onSelect", "selectionChange", "valueChange", "openedChange", "opened", "closed"] }, { kind: "component", type: i2$1.NovoLabel, selector: "novo-label,[novo-label]", inputs: ["id"] }, { kind: "component", type: i2$1.NovoFieldElement, selector: "novo-field", inputs: ["layout", "appearance", "customOverlayOrigin", "width"], outputs: ["valueChanges", "stateChanges"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: LongSelectExample, decorators: [{
            type: Component,
            args: [{ selector: 'long-select-example', standalone: false, template: "<novo-field>\n  <novo-label><span class=\"caption\">Selected Value:</span>{{state}}</novo-label>\n  <novo-select [options]=\"states\" [placeholder]=\"placeholder\" [(ngModel)]=\"state\"></novo-select>\n</novo-field>" }]
        }] });

/**
 * @title Legacy Select Option Example
 */
class LegacySelectOptionExample {
    constructor() {
        this.placeholder = 'Select...';
        this.options = ['Alpha', 'Bravo', 'Charlie'];
        this.value = 'Delta';
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: LegacySelectOptionExample, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: LegacySelectOptionExample, isStandalone: false, selector: "legacy-select-option-example", ngImport: i0, template: "<novo-field>\n  <novo-label>\n    <span class=\"caption\">Selected Value:</span> {{value}}\n  </novo-label>\n  <novo-select [placeholder]=\"placeholder\" [(ngModel)]=\"value\">\n    <novo-option *ngFor=\"let option of options\" [value]=\"option\">\n      {{option}}\n    </novo-option>\n  </novo-select>\n</novo-field>", styles: [""], dependencies: [{ kind: "directive", type: i1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i1.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "directive", type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "component", type: i2$1.NovoSelectElement, selector: "novo-select", inputs: ["disabled", "required", "tabIndex", "id", "name", "placeholder", "readonly", "headerConfig", "position", "overlayWidth", "overlayHeight", "displayIcon", "displayWith", "compareWith", "hideLegacyOptions", "value", "multiple", "options"], outputs: ["onSelect", "selectionChange", "valueChange", "openedChange", "opened", "closed"] }, { kind: "component", type: i2$1.NovoLabel, selector: "novo-label,[novo-label]", inputs: ["id"] }, { kind: "component", type: i2$1.NovoOption, selector: "novo-option", inputs: ["selected", "keepOpen", "novoInert", "value", "disabled"], exportAs: ["novoOption"] }, { kind: "component", type: i2$1.NovoFieldElement, selector: "novo-field", inputs: ["layout", "appearance", "customOverlayOrigin", "width"], outputs: ["valueChanges", "stateChanges"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: LegacySelectOptionExample, decorators: [{
            type: Component,
            args: [{ selector: 'legacy-select-option-example', standalone: false, template: "<novo-field>\n  <novo-label>\n    <span class=\"caption\">Selected Value:</span> {{value}}\n  </novo-label>\n  <novo-select [placeholder]=\"placeholder\" [(ngModel)]=\"value\">\n    <novo-option *ngFor=\"let option of options\" [value]=\"option\">\n      {{option}}\n    </novo-option>\n  </novo-select>\n</novo-field>" }]
        }] });

/**
 * @title Basic Select With Search Example
 */
class BasicSelectWithSearchExample {
    constructor() {
        /** list of states */
        this.states = STATES;
        /** control for the selected state */
        this.stateCtrl = new UntypedFormControl();
        /** control for the MatSelect filter keyword */
        this.stateFilterCtrl = new UntypedFormControl();
        /** list of states filtered by search keyword */
        this.filteredStates = new ReplaySubject(1);
        /** Subject that emits when the component has been destroyed. */
        this._onDestroy = new Subject();
    }
    ngOnInit() {
        // set initial selection
        this.stateCtrl.setValue(this.states[10]);
        // load the initial state list
        this.filteredStates.next(this.states.slice());
        // listen for search field value changes
        this.stateFilterCtrl.valueChanges.pipe(takeUntil(this._onDestroy)).subscribe(() => {
            this.filterStates();
        });
    }
    ngAfterViewInit() {
        this.setInitialValue();
    }
    ngOnDestroy() {
        this._onDestroy.next();
        this._onDestroy.complete();
    }
    /**
     * Sets the initial value after the filteredStates are loaded initially
     */
    setInitialValue() {
        this.filteredStates.pipe(take(1), takeUntil(this._onDestroy)).subscribe(() => {
            // setting the compareWith property to a comparison function
            // triggers initializing the selection according to the initial value of
            // the form control (i.e. _initializeSelection())
            // this needs to be done after the filteredStates are loaded initially
            // and after the mat-option elements are available
            this.singleSelect.compareWith = (a, b) => a && b && a.code === b.code;
        });
    }
    filterStates() {
        if (!this.states) {
            return;
        }
        // get the search keyword
        let search = this.stateFilterCtrl.value;
        if (!search) {
            this.filteredStates.next(this.states.slice());
            return;
        }
        else {
            search = search.toLowerCase();
        }
        // filter the states
        this.filteredStates.next(this.states.filter((state) => state.name.toLowerCase().indexOf(search) > -1));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: BasicSelectWithSearchExample, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: BasicSelectWithSearchExample, isStandalone: false, selector: "basic-select-with-search-example", viewQueries: [{ propertyName: "singleSelect", first: true, predicate: ["singleSelect"], descendants: true, static: true }], ngImport: i0, template: "<h3>Single selection</h3>\n<p>\n  <novo-field>\n    <novo-label>State</novo-label>\n    <novo-select [formControl]=\"stateCtrl\" placeholder=\"Select\" displayIcon=\"globe-o\" #singleSelect>\n      <novo-option>\n        <novo-select-search [formControl]=\"stateFilterCtrl\"></novo-select-search>\n      </novo-option>\n\n      <novo-option *ngFor=\"let state of filteredStates | async\" [value]=\"state\">\n        {{state.name}}\n      </novo-option>\n    </novo-select>\n  </novo-field>\n</p>\n<p>\n  Selected Bank: {{stateCtrl.value?.name}}\n</p>\n", styles: [""], dependencies: [{ kind: "directive", type: i1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i1.FormControlDirective, selector: "[formControl]", inputs: ["formControl", "disabled", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { kind: "directive", type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "component", type: i2$1.NovoSelectElement, selector: "novo-select", inputs: ["disabled", "required", "tabIndex", "id", "name", "placeholder", "readonly", "headerConfig", "position", "overlayWidth", "overlayHeight", "displayIcon", "displayWith", "compareWith", "hideLegacyOptions", "value", "multiple", "options"], outputs: ["onSelect", "selectionChange", "valueChange", "openedChange", "opened", "closed"] }, { kind: "component", type: i2$1.NovoLabel, selector: "novo-label,[novo-label]", inputs: ["id"] }, { kind: "component", type: i2$1.NovoOption, selector: "novo-option", inputs: ["selected", "keepOpen", "novoInert", "value", "disabled"], exportAs: ["novoOption"] }, { kind: "component", type: i2$1.NovoFieldElement, selector: "novo-field", inputs: ["layout", "appearance", "customOverlayOrigin", "width"], outputs: ["valueChanges", "stateChanges"] }, { kind: "component", type: i2$1.NovoSelectSearchComponent, selector: "novo-select-search", inputs: ["name", "placeholderLabel", "type", "noEntriesFoundLabel", "indexAndLengthScreenReaderText", "clearSearchInput", "searching", "disableInitialFocus", "enableClearOnEscapePressed", "allowDeselectDuringFilter", "preventHomeEndKeyPropagation", "disableScrollToActiveOnOptionsChanged", "ariaLabel", "showToggleAllCheckbox", "toggleAllCheckboxChecked", "toggleAllCheckboxIndeterminate", "toggleAllCheckboxTooltipMessage", "toogleAllCheckboxTooltipPosition", "hideClearSearchButton", "alwaysRestoreSelectedOptionsMulti"], outputs: ["toggleAll"] }, { kind: "pipe", type: i2.AsyncPipe, name: "async" }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: BasicSelectWithSearchExample, decorators: [{
            type: Component,
            args: [{ selector: 'basic-select-with-search-example', standalone: false, template: "<h3>Single selection</h3>\n<p>\n  <novo-field>\n    <novo-label>State</novo-label>\n    <novo-select [formControl]=\"stateCtrl\" placeholder=\"Select\" displayIcon=\"globe-o\" #singleSelect>\n      <novo-option>\n        <novo-select-search [formControl]=\"stateFilterCtrl\"></novo-select-search>\n      </novo-option>\n\n      <novo-option *ngFor=\"let state of filteredStates | async\" [value]=\"state\">\n        {{state.name}}\n      </novo-option>\n    </novo-select>\n  </novo-field>\n</p>\n<p>\n  Selected Bank: {{stateCtrl.value?.name}}\n</p>\n" }]
        }], ctorParameters: () => [], propDecorators: { singleSelect: [{
                type: ViewChild,
                args: ['singleSelect', { static: true }]
            }] } });

/**
 * @title Basic Select Example
 */
class BasicSelectExample {
    constructor() {
        this.placeholder = 'Select...';
        this.options = ['Alpha', 'Bravo', 'Charlie'];
        this.value = 'Bravo';
        this.withNumbers = [
            { label: 'One', value: { id: 1, label: 'One' } },
            { label: 'Two', value: { id: 2, label: 'Two' } },
            { divider: true },
            { label: 'Zero', value: { id: 0, label: 'Zero' } },
            { label: 'Four', value: { id: 4, label: 'Four' }, readOnly: true },
            { divider: true },
            { label: 'Six', value: { id: 6, label: 'Six' } },
        ];
        this.withNumbersValue = { id: 25, label: 'Twenty Five' };
        this.withNumbersObject = { value: { id: 4, label: 'Four' } };
        this.withDisabledAndTooltip = [
            { label: 'One', value: { id: 1, label: 'One' } },
            { label: 'Two', value: { id: 2, label: 'Two' } },
            { label: 'Disabled', value: { id: 3, label: 'Three' }, disabled: true },
            { label: 'Disabled Tooltip', value: { id: 4, label: 'Four' }, disabled: true, tooltip: 'Tooltip on disabled item' },
            {
                label: 'Disabled Left Tooltip',
                value: { id: 5, label: 'Five' },
                disabled: true,
                tooltip: 'Left side tooltip on disabled item',
                tooltipPosition: 'left',
            },
            {
                label: 'Disabled Bottom Tooltip',
                value: { id: 6, label: 'Six' },
                disabled: true,
                tooltip: 'Bottom tooltip on disabled item',
                tooltipPosition: 'bottom',
            },
        ];
        this.disabledWithTooltipValue = 1;
        this.headerConfig = {
            label: 'Add New Item',
            placeholder: 'Enter item here',
            onSave: this.create.bind(this),
        };
    }
    create(opt) {
        this.options = [...this.options, opt];
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: BasicSelectExample, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: BasicSelectExample, isStandalone: false, selector: "basic-select-example", ngImport: i0, template: "<novo-field>\n  <novo-label>\n    <span class=\"caption\">Selected Value:</span> {{value}}\n  </novo-label>\n  <novo-select [placeholder]=\"placeholder\" [(ngModel)]=\"value\">\n    <novo-option *ngFor=\"let option of options\" [value]=\"option\">\n      {{option}}\n    </novo-option>\n  </novo-select>\n</novo-field>\n<novo-field>\n  <novo-label>\n    <span class=\"caption\">Selected Value:</span> {{withNumbersValue.label}}\n  </novo-label>\n  <novo-select [options]=\"withNumbers\" [(ngModel)]=\"withNumbersValue\"></novo-select>\n</novo-field>\n<novo-field>\n  <novo-label>\n    <span class=\"caption\">Disabled State</span>\n  </novo-label>\n  <novo-select [options]=\"options\" [placeholder]=\"placeholder\" [(ngModel)]=\"value\" disabled></novo-select>\n</novo-field>\n<novo-field>\n  <novo-label>\n    <span class=\"caption\">No Model With Header</span>\n  </novo-label>\n  <novo-select [options]=\"options\" [placeholder]=\"placeholder\" [headerConfig]=\"headerConfig\"></novo-select>\n</novo-field>", styles: [":host{padding:20px 30px;border-top-right-radius:3px;border-top-left-radius:3px;display:flex;flex-direction:row;flex-shrink:0;flex-grow:0;align-items:flex-start;flex-wrap:wrap;transition:background .46s ease-in-out}:host label{margin-bottom:10px;display:block}:host .caption{font-size:.9em;margin-right:5px}.select-example-container{margin:1em}\n"], dependencies: [{ kind: "directive", type: i1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i1.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "directive", type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "component", type: i2$1.NovoSelectElement, selector: "novo-select", inputs: ["disabled", "required", "tabIndex", "id", "name", "placeholder", "readonly", "headerConfig", "position", "overlayWidth", "overlayHeight", "displayIcon", "displayWith", "compareWith", "hideLegacyOptions", "value", "multiple", "options"], outputs: ["onSelect", "selectionChange", "valueChange", "openedChange", "opened", "closed"] }, { kind: "component", type: i2$1.NovoLabel, selector: "novo-label,[novo-label]", inputs: ["id"] }, { kind: "component", type: i2$1.NovoOption, selector: "novo-option", inputs: ["selected", "keepOpen", "novoInert", "value", "disabled"], exportAs: ["novoOption"] }, { kind: "component", type: i2$1.NovoFieldElement, selector: "novo-field", inputs: ["layout", "appearance", "customOverlayOrigin", "width"], outputs: ["valueChanges", "stateChanges"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: BasicSelectExample, decorators: [{
            type: Component,
            args: [{ selector: 'basic-select-example', standalone: false, template: "<novo-field>\n  <novo-label>\n    <span class=\"caption\">Selected Value:</span> {{value}}\n  </novo-label>\n  <novo-select [placeholder]=\"placeholder\" [(ngModel)]=\"value\">\n    <novo-option *ngFor=\"let option of options\" [value]=\"option\">\n      {{option}}\n    </novo-option>\n  </novo-select>\n</novo-field>\n<novo-field>\n  <novo-label>\n    <span class=\"caption\">Selected Value:</span> {{withNumbersValue.label}}\n  </novo-label>\n  <novo-select [options]=\"withNumbers\" [(ngModel)]=\"withNumbersValue\"></novo-select>\n</novo-field>\n<novo-field>\n  <novo-label>\n    <span class=\"caption\">Disabled State</span>\n  </novo-label>\n  <novo-select [options]=\"options\" [placeholder]=\"placeholder\" [(ngModel)]=\"value\" disabled></novo-select>\n</novo-field>\n<novo-field>\n  <novo-label>\n    <span class=\"caption\">No Model With Header</span>\n  </novo-label>\n  <novo-select [options]=\"options\" [placeholder]=\"placeholder\" [headerConfig]=\"headerConfig\"></novo-select>\n</novo-field>", styles: [":host{padding:20px 30px;border-top-right-radius:3px;border-top-left-radius:3px;display:flex;flex-direction:row;flex-shrink:0;flex-grow:0;align-items:flex-start;flex-wrap:wrap;transition:background .46s ease-in-out}:host label{margin-bottom:10px;display:block}:host .caption{font-size:.9em;margin-right:5px}.select-example-container{margin:1em}\n"] }]
        }] });

/**
 * @title Vertical Radio Buttons
 */
class VerticalRadioExample {
    onChange(change) {
        console.log('Radio Change:', change); // tslint:disable-line
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: VerticalRadioExample, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: VerticalRadioExample, isStandalone: false, selector: "vertical-radio-example", ngImport: i0, template: "<novo-radio-group appearance=\"vertical\">\n  <novo-radio [checked]=\"false\" name=\"vertical\" value=\"one\" (change)=\"onChange($event)\">Make me anything!</novo-radio>\n  <novo-radio [checked]=\"true\" name=\"vertical\" value=\"two\" (change)=\"onChange($event)\" [disabled]=\"true\">I'm disabled!</novo-radio>\n  <novo-radio [checked]=\"false\" name=\"vertical\" value=\"three\" (change)=\"onChange($event)\">REALLY!</novo-radio>\n</novo-radio-group>", styles: [""], dependencies: [{ kind: "component", type: i2$1.NovoRadioElement, selector: "novo-radio", inputs: ["id", "name", "tabindex", "vertical", "label", "button", "theme", "size", "icon", "color", "disabled", "checked", "value"], outputs: ["change", "blur", "focus"] }, { kind: "component", type: i2$1.NovoRadioGroup, selector: "novo-radio-group", inputs: ["id", "tabindex", "errorStateMatcher", "appearance", "value", "name", "disabled", "required", "placeholder"], outputs: ["change", "blur"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: VerticalRadioExample, decorators: [{
            type: Component,
            args: [{ selector: 'vertical-radio-example', standalone: false, template: "<novo-radio-group appearance=\"vertical\">\n  <novo-radio [checked]=\"false\" name=\"vertical\" value=\"one\" (change)=\"onChange($event)\">Make me anything!</novo-radio>\n  <novo-radio [checked]=\"true\" name=\"vertical\" value=\"two\" (change)=\"onChange($event)\" [disabled]=\"true\">I'm disabled!</novo-radio>\n  <novo-radio [checked]=\"false\" name=\"vertical\" value=\"three\" (change)=\"onChange($event)\">REALLY!</novo-radio>\n</novo-radio-group>" }]
        }] });

/**
 * @title Radio Buttons with Icons
 */
class IconRadioExample {
    onChange(change) {
        console.log('Radio Change:', change); // tslint:disable-line
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: IconRadioExample, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: IconRadioExample, isStandalone: false, selector: "icon-radio-example", ngImport: i0, template: "<novo-radio-group>\n  <novo-radio button=\"true\" theme=\"icon\" icon=\"company\" name=\"icon\" value=\"one\" (change)=\"onChange($event)\">\n  </novo-radio>\n  <novo-radio button=\"true\" theme=\"icon\" icon=\"job\" name=\"icon\" value=\"two\" (change)=\"onChange($event)\">\n  </novo-radio>\n  <novo-radio button=\"true\" theme=\"icon\" icon=\"candidate\" name=\"icon\" value=\"three\" (change)=\"onChange($event)\">\n  </novo-radio>\n  <novo-radio button=\"true\" theme=\"icon\" icon=\"opportunity\" name=\"icon\" value=\"disabled\" (change)=\"onChange($event)\" [disabled]=\"true\">\n  </novo-radio>\n  <novo-radio button=\"true\" theme=\"icon\" icon=\"lead\" name=\"icon\" value=\"alsoDisabled\" (change)=\"onChange($event)\" [checked]=\"true\" [disabled]=\"true\">\n  </novo-radio>\n</novo-radio-group>", styles: [""], dependencies: [{ kind: "component", type: i2$1.NovoRadioElement, selector: "novo-radio", inputs: ["id", "name", "tabindex", "vertical", "label", "button", "theme", "size", "icon", "color", "disabled", "checked", "value"], outputs: ["change", "blur", "focus"] }, { kind: "component", type: i2$1.NovoRadioGroup, selector: "novo-radio-group", inputs: ["id", "tabindex", "errorStateMatcher", "appearance", "value", "name", "disabled", "required", "placeholder"], outputs: ["change", "blur"] }, { kind: "directive", type: i2$1.ThemeColorDirective, selector: "[theme]", inputs: ["theme"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: IconRadioExample, decorators: [{
            type: Component,
            args: [{ selector: 'icon-radio-example', standalone: false, template: "<novo-radio-group>\n  <novo-radio button=\"true\" theme=\"icon\" icon=\"company\" name=\"icon\" value=\"one\" (change)=\"onChange($event)\">\n  </novo-radio>\n  <novo-radio button=\"true\" theme=\"icon\" icon=\"job\" name=\"icon\" value=\"two\" (change)=\"onChange($event)\">\n  </novo-radio>\n  <novo-radio button=\"true\" theme=\"icon\" icon=\"candidate\" name=\"icon\" value=\"three\" (change)=\"onChange($event)\">\n  </novo-radio>\n  <novo-radio button=\"true\" theme=\"icon\" icon=\"opportunity\" name=\"icon\" value=\"disabled\" (change)=\"onChange($event)\" [disabled]=\"true\">\n  </novo-radio>\n  <novo-radio button=\"true\" theme=\"icon\" icon=\"lead\" name=\"icon\" value=\"alsoDisabled\" (change)=\"onChange($event)\" [checked]=\"true\" [disabled]=\"true\">\n  </novo-radio>\n</novo-radio-group>" }]
        }] });

/**
 * @title Radio Button with Buttons
 */
class ButtonRadioExample {
    onChange(change) {
        console.log('Radio Change:', change); // tslint:disable-line
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: ButtonRadioExample, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: ButtonRadioExample, isStandalone: false, selector: "button-radio-example", ngImport: i0, template: "<novo-radio-group>\n  <novo-radio button=\"true\" [checked]=\"false\" name=\"button\" value=\"one\" (change)=\"onChange($event)\" label=\"One\">\n  </novo-radio>\n  <novo-radio button=\"true\" [checked]=\"true\" name=\"button\" value=\"two\" (change)=\"onChange($event)\" label=\"Two\">\n  </novo-radio>\n  <novo-radio button=\"true\" [checked]=\"false\" name=\"button\" value=\"three\" (change)=\"onChange($event)\" label=\"Three\">\n  </novo-radio>\n  <novo-radio button=\"true\" [checked]=\"false\" name=\"button\" value=\"disabled\" (change)=\"onChange($event)\" label=\"Disabled\" [disabled]=\"true\">\n  </novo-radio>\n  <novo-radio button=\"true\" [checked]=\"true\" name=\"button\" value=\"alsoDisabled\" (change)=\"onChange($event)\" label=\"Also Disabled\" [disabled]=\"true\">\n  </novo-radio>\n</novo-radio-group>", styles: [""], dependencies: [{ kind: "component", type: i2$1.NovoRadioElement, selector: "novo-radio", inputs: ["id", "name", "tabindex", "vertical", "label", "button", "theme", "size", "icon", "color", "disabled", "checked", "value"], outputs: ["change", "blur", "focus"] }, { kind: "component", type: i2$1.NovoRadioGroup, selector: "novo-radio-group", inputs: ["id", "tabindex", "errorStateMatcher", "appearance", "value", "name", "disabled", "required", "placeholder"], outputs: ["change", "blur"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: ButtonRadioExample, decorators: [{
            type: Component,
            args: [{ selector: 'button-radio-example', standalone: false, template: "<novo-radio-group>\n  <novo-radio button=\"true\" [checked]=\"false\" name=\"button\" value=\"one\" (change)=\"onChange($event)\" label=\"One\">\n  </novo-radio>\n  <novo-radio button=\"true\" [checked]=\"true\" name=\"button\" value=\"two\" (change)=\"onChange($event)\" label=\"Two\">\n  </novo-radio>\n  <novo-radio button=\"true\" [checked]=\"false\" name=\"button\" value=\"three\" (change)=\"onChange($event)\" label=\"Three\">\n  </novo-radio>\n  <novo-radio button=\"true\" [checked]=\"false\" name=\"button\" value=\"disabled\" (change)=\"onChange($event)\" label=\"Disabled\" [disabled]=\"true\">\n  </novo-radio>\n  <novo-radio button=\"true\" [checked]=\"true\" name=\"button\" value=\"alsoDisabled\" (change)=\"onChange($event)\" label=\"Also Disabled\" [disabled]=\"true\">\n  </novo-radio>\n</novo-radio-group>" }]
        }] });

/**
 * @title Basic Radio Button Usage
 */
class BasicRadioExample {
    constructor() {
        this.model = 'two';
    }
    onChange(change) {
        console.log('Radio Change:', change); // tslint:disable-line
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: BasicRadioExample, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: BasicRadioExample, isStandalone: false, selector: "basic-radio-example", ngImport: i0, template: "<!-- <novo-radio [checked]=\"false\" name=\"basic\" value=\"one\" (change)=\"onChange($event)\">Make me anything!</novo-radio>\n<novo-radio [checked]=\"true\" name=\"basic\" value=\"two\" (change)=\"onChange($event)\">I get transcluded in!</novo-radio>\n<novo-radio [checked]=\"false\" name=\"basic\" value=\"three\" (change)=\"onChange($event)\">REALLY!</novo-radio> -->\n\n<novo-radio-group [(ngModel)]=\"model\" (change)=\"onChange($event)\">\n  <novo-radio value=\"one\">Make me anything!</novo-radio>\n  <novo-radio value=\"two\" [disabled]=\"true\">I'm disabled!</novo-radio>\n  <novo-radio value=\"three\">TEST!</novo-radio>\n</novo-radio-group>", styles: [""], dependencies: [{ kind: "directive", type: i1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i1.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "component", type: i2$1.NovoRadioElement, selector: "novo-radio", inputs: ["id", "name", "tabindex", "vertical", "label", "button", "theme", "size", "icon", "color", "disabled", "checked", "value"], outputs: ["change", "blur", "focus"] }, { kind: "component", type: i2$1.NovoRadioGroup, selector: "novo-radio-group", inputs: ["id", "tabindex", "errorStateMatcher", "appearance", "value", "name", "disabled", "required", "placeholder"], outputs: ["change", "blur"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: BasicRadioExample, decorators: [{
            type: Component,
            args: [{ selector: 'basic-radio-example', standalone: false, template: "<!-- <novo-radio [checked]=\"false\" name=\"basic\" value=\"one\" (change)=\"onChange($event)\">Make me anything!</novo-radio>\n<novo-radio [checked]=\"true\" name=\"basic\" value=\"two\" (change)=\"onChange($event)\">I get transcluded in!</novo-radio>\n<novo-radio [checked]=\"false\" name=\"basic\" value=\"three\" (change)=\"onChange($event)\">REALLY!</novo-radio> -->\n\n<novo-radio-group [(ngModel)]=\"model\" (change)=\"onChange($event)\">\n  <novo-radio value=\"one\">Make me anything!</novo-radio>\n  <novo-radio value=\"two\" [disabled]=\"true\">I'm disabled!</novo-radio>\n  <novo-radio value=\"three\">TEST!</novo-radio>\n</novo-radio-group>" }]
        }] });

/**
 * @title Override Template Example
 */
class OverrideTemplateExample {
    constructor() {
        this.placeholder = 'Select...';
        const states = [
            'Alabama',
            'Alaska',
            'Arizona',
            'Arkansas',
            'California',
            'Colorado',
            'Connecticut',
            'Delaware',
            'Florida',
            'Georgia',
            'Hawaii',
            'Idaho',
            'Illinois',
            'Indiana',
            'Iowa',
            'Kansas',
            'Kentucky',
            'Louisiana',
            'Maine',
            'Maryland',
            'Massachusetts',
            'Michigan',
            'Minnesota',
            'Mississippi',
            'Missouri',
            'Montana',
            'Nebraska',
            'Nevada',
            'New Hampshire',
            'New Jersey',
            'New Mexico',
            'New York',
            'North Dakota',
            'North Carolina',
            'Ohio',
            'Oklahoma',
            'Oregon',
            'Pennsylvania',
            'Rhode Island',
            'South Carolina',
            'South Dakota',
            'Tennessee',
            'Texas',
            'Utah',
            'Vermont',
            'Virginia',
            'Washington',
            'West Virginia',
            'Wisconsin',
            'Wyoming',
        ];
        this.overrideDemo = {
            options: states,
            overrideTemplate: '<h1>{{ match | json }}</h1>',
        };
    }
    onChanged(event) {
        console.log('EVENT', event); // tslint:disable-line
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: OverrideTemplateExample, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: OverrideTemplateExample, isStandalone: false, selector: "override-template-example", ngImport: i0, template: "<div class=\"selected-value\">Selected Value: {{ overrideValue }}</div>\n<novo-picker [config]=\"overrideDemo\" [placeholder]=\"placeholder\" [(ngModel)]=\"overrideValue\"></novo-picker>\n", styles: [""], dependencies: [{ kind: "directive", type: i1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i1.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "component", type: i2$1.NovoPickerElement, selector: "novo-picker", inputs: ["config", "placeholder", "clearValueOnSelect", "closeOnSelect", "selected", "appendToBody", "parentScrollSelector", "parentScrollAction", "containerClass", "side", "autoSelectFirstOption", "overrideElement", "maxlength", "allowCustomValues", "width", "minWidth", "allowTabNavigation", "disablePickerInput"], outputs: ["changed", "select", "focus", "blur", "typing", "tab"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: OverrideTemplateExample, decorators: [{
            type: Component,
            args: [{ selector: 'override-template-example', standalone: false, template: "<div class=\"selected-value\">Selected Value: {{ overrideValue }}</div>\n<novo-picker [config]=\"overrideDemo\" [placeholder]=\"placeholder\" [(ngModel)]=\"overrideValue\"></novo-picker>\n" }]
        }], ctorParameters: () => [] });

/**
 * @title Mixed Picker Example
 */
class MixedPickerExample {
    constructor() {
        this.placeholder = 'Select...';
        this.setupMixedPickerDemo();
    }
    setupMixedPickerDemo() {
        this.mixedPicker = {
            options: [
                { value: 'p1', label: 'Option One - No Secondary Options' },
                {
                    value: 'p2',
                    label: 'Option Two - Static Secondary Options',
                    secondaryOptions: [
                        { value: 'p2s1', label: 'Static Secondary Option 1' },
                        { value: 'p2s2', label: 'Static Secondary Option 2' },
                    ],
                },
                {
                    value: 'p3',
                    label: 'Option Three - Async Secondary Options',
                    getSecondaryOptionsAsync: () => {
                        return new Promise((resolve) => {
                            setTimeout(() => {
                                resolve([
                                    { value: 'p3d1', label: 'Async Secondary Option 1' },
                                    { value: 'p3d2', label: 'Async Secondary Option 2' },
                                ]);
                            }, 1000);
                        });
                    },
                },
                { value: 'p4', label: 'Option Four - No Secondary Options' },
                {
                    value: 'p5',
                    label: 'Option Five - Async Secondary Options with Search',
                    showSearchOnSecondaryOptions: true,
                    getSecondaryOptionsAsync: () => {
                        return new Promise((resolve) => {
                            setTimeout(() => {
                                resolve([
                                    { value: 'p5d1', label: 'ABC - Async Secondary Option with Search 1' },
                                    { value: 'p5d2', label: 'DEF - Async Secondary Option with Search 2' },
                                ]);
                            }, 1000);
                        });
                    },
                },
            ],
            resultsTemplate: MixedMultiPickerResults,
        };
    }
    onChanged(event) {
        console.log('EVENT', event); // tslint:disable-line
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: MixedPickerExample, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: MixedPickerExample, isStandalone: false, selector: "mixed-picker-example", ngImport: i0, template: "<h6>Mixed Options Example</h6>\n<p>Some primary options have no secondary option, some have static secondary options, and some have dynamic secondary options</p>\n<div class=\"selected-value\">Selected Value: {{ mixedPickerValue | json }}</div>\n<novo-picker [config]=\"mixedPicker\" [placeholder]=\"placeholder\" [(ngModel)]=\"mixedPickerValue\" (changed)=\"onChanged($event)\"></novo-picker>\n", styles: [""], dependencies: [{ kind: "directive", type: i1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i1.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "component", type: i2$1.NovoPickerElement, selector: "novo-picker", inputs: ["config", "placeholder", "clearValueOnSelect", "closeOnSelect", "selected", "appendToBody", "parentScrollSelector", "parentScrollAction", "containerClass", "side", "autoSelectFirstOption", "overrideElement", "maxlength", "allowCustomValues", "width", "minWidth", "allowTabNavigation", "disablePickerInput"], outputs: ["changed", "select", "focus", "blur", "typing", "tab"] }, { kind: "pipe", type: i2.JsonPipe, name: "json" }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: MixedPickerExample, decorators: [{
            type: Component,
            args: [{ selector: 'mixed-picker-example', standalone: false, template: "<h6>Mixed Options Example</h6>\n<p>Some primary options have no secondary option, some have static secondary options, and some have dynamic secondary options</p>\n<div class=\"selected-value\">Selected Value: {{ mixedPickerValue | json }}</div>\n<novo-picker [config]=\"mixedPicker\" [placeholder]=\"placeholder\" [(ngModel)]=\"mixedPickerValue\" (changed)=\"onChanged($event)\"></novo-picker>\n" }]
        }], ctorParameters: () => [] });

/**
 * @title Grouped Picker Example
 */
class GroupedPickerExample {
    constructor() {
        this.placeholder = 'Select...';
        this.setupGroupedPickerDemo();
    }
    setupGroupedPickerDemo() {
        const categoryMap = new Map();
        for (let i = 0; i < 10; i++) {
            const items = [];
            for (let j = 0; j < 10; j++) {
                items.push({ value: `${i}-${j}`, label: `Category ${i} - Item ${j}` });
            }
            categoryMap.set(`${i}`, { value: `${i}`, label: `Category ${i}`, items });
        }
        const filterCategoryMap = new Map();
        for (let i = 0; i < 10; i++) {
            const items = [];
            for (let j = 0; j < 10; j++) {
                const filter = Math.random() >= 0.5;
                items.push({ value: `${i}-${j}`, label: `Category ${i} - Item ${j} - Data - ${filter}`, data: { filter } });
            }
            filterCategoryMap.set(`${i}`, { value: `${i}`, label: `Category ${i}`, items });
        }
        this.groupedPicker1 = {
            categoryMap,
            resultsTemplate: GroupedMultiPickerResults,
            displayAll: true,
        };
        this.groupedPicker2 = {
            categoryMap,
            resultsTemplate: GroupedMultiPickerResults,
        };
        this.groupedPicker3 = {
            categories: [
                { value: 'C1', label: 'Category 1' },
                { value: 'C2', label: 'Category 2' },
                { value: 'C3', label: 'Category 3' },
                { value: 'C4', label: 'Category 4' },
                { value: 'C5', label: 'Category 5' },
            ],
            getItemsForCategoryAsync: (category, customFilter) => {
                return new Promise((resolve) => {
                    setTimeout(() => {
                        resolve([
                            { value: 'A1', label: 'Async 1' },
                            { value: 'A2', label: 'Async 2' },
                            { value: 'A3', label: 'Async 3' },
                            { value: 'A4', label: 'Async 4' },
                            { value: 'A5', label: 'Async 5' },
                        ]);
                    }, 1000);
                });
            },
            resultsTemplate: GroupedMultiPickerResults,
        };
        this.groupedPicker4 = {
            entityIcon: 'company',
            categoryMap: filterCategoryMap,
            displayAll: true,
            placeholder: 'Filter things...',
            customFilter: {
                matchFunction: (item, value) => {
                    if (value) {
                        return item.data.filter === value;
                    }
                    return true;
                },
                defaultFilterValue: false,
                label: 'Custom Filter!',
            },
            resultsTemplate: GroupedMultiPickerResults,
        };
    }
    onChanged(event) {
        console.log('EVENT', event); // tslint:disable-line
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: GroupedPickerExample, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: GroupedPickerExample, isStandalone: false, selector: "grouped-picker-example", ngImport: i0, template: "<h6>Basic Static Example</h6>\n<p>Fully static data, optional \"all\" category</p>\n<div class=\"selected-value\">Selected Value: {{ groupedPicker1Value | json }}</div>\n<novo-picker [config]=\"groupedPicker1\" [placeholder]=\"placeholder\" [(ngModel)]=\"groupedPicker1Value\" (changed)=\"onChanged($event)\"></novo-picker>\n\n<br/>\n<br/>\n\n<h6>Custom Static Example</h6>\n<p>Fully static data, all category turned off</p>\n<div class=\"selected-value\">Selected Value: {{ groupedPicker2Value | json }}</div>\n<novo-picker [config]=\"groupedPicker2\" [placeholder]=\"placeholder\" [(ngModel)]=\"groupedPicker2Value\" (changed)=\"onChanged($event)\"></novo-picker>\n\n<br/>\n<br/>\n\n<h6>Basic Async Example</h6>\n<p>Category list is static (always has to be) with the items fetched via async call</p>\n<div class=\"selected-value\">Selected Value: {{ groupedPicker3Value | json }}</div>\n<novo-picker [config]=\"groupedPicker3\" [placeholder]=\"placeholder\" [(ngModel)]=\"groupedPicker3Value\" (changed)=\"onChanged($event)\"></novo-picker>\n<br/>\n<br/>\n\n<h6>Async Example w/ Custom Filter</h6>\n<p>You can also have a custom filter, limited to just a switch</p>\n<div class=\"selected-value\">Selected Value: {{ groupedPicker4Value | json }}</div>\n<novo-picker [config]=\"groupedPicker4\" [placeholder]=\"placeholder\" [(ngModel)]=\"groupedPicker4Value\" (changed)=\"onChanged($event)\"></novo-picker>\n", styles: [""], dependencies: [{ kind: "directive", type: i1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i1.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "component", type: i2$1.NovoPickerElement, selector: "novo-picker", inputs: ["config", "placeholder", "clearValueOnSelect", "closeOnSelect", "selected", "appendToBody", "parentScrollSelector", "parentScrollAction", "containerClass", "side", "autoSelectFirstOption", "overrideElement", "maxlength", "allowCustomValues", "width", "minWidth", "allowTabNavigation", "disablePickerInput"], outputs: ["changed", "select", "focus", "blur", "typing", "tab"] }, { kind: "pipe", type: i2.JsonPipe, name: "json" }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: GroupedPickerExample, decorators: [{
            type: Component,
            args: [{ selector: 'grouped-picker-example', standalone: false, template: "<h6>Basic Static Example</h6>\n<p>Fully static data, optional \"all\" category</p>\n<div class=\"selected-value\">Selected Value: {{ groupedPicker1Value | json }}</div>\n<novo-picker [config]=\"groupedPicker1\" [placeholder]=\"placeholder\" [(ngModel)]=\"groupedPicker1Value\" (changed)=\"onChanged($event)\"></novo-picker>\n\n<br/>\n<br/>\n\n<h6>Custom Static Example</h6>\n<p>Fully static data, all category turned off</p>\n<div class=\"selected-value\">Selected Value: {{ groupedPicker2Value | json }}</div>\n<novo-picker [config]=\"groupedPicker2\" [placeholder]=\"placeholder\" [(ngModel)]=\"groupedPicker2Value\" (changed)=\"onChanged($event)\"></novo-picker>\n\n<br/>\n<br/>\n\n<h6>Basic Async Example</h6>\n<p>Category list is static (always has to be) with the items fetched via async call</p>\n<div class=\"selected-value\">Selected Value: {{ groupedPicker3Value | json }}</div>\n<novo-picker [config]=\"groupedPicker3\" [placeholder]=\"placeholder\" [(ngModel)]=\"groupedPicker3Value\" (changed)=\"onChanged($event)\"></novo-picker>\n<br/>\n<br/>\n\n<h6>Async Example w/ Custom Filter</h6>\n<p>You can also have a custom filter, limited to just a switch</p>\n<div class=\"selected-value\">Selected Value: {{ groupedPicker4Value | json }}</div>\n<novo-picker [config]=\"groupedPicker4\" [placeholder]=\"placeholder\" [(ngModel)]=\"groupedPicker4Value\" (changed)=\"onChanged($event)\"></novo-picker>\n" }]
        }], ctorParameters: () => [] });

/**
 * @title Formatted Picker Example
 */
class FormattedPickerExample {
    constructor() {
        this.placeholder = 'Select...';
        const collaborators = [
            {
                id: 1,
                firstName: 'Brian',
                lastName: 'Kimball',
            },
            {
                id: 2,
                firstName: 'Josh',
                lastName: 'Godi',
            },
            {
                id: 3,
                firstName: 'Alec',
                lastName: 'Sibilia',
            },
            {
                id: 4,
                firstName: 'Kameron',
                lastName: 'Sween',
            },
        ];
        this.formatted = {
            field: 'id',
            format: `$firstName $lastName`,
            options: collaborators,
        };
    }
    onChanged(event) {
        console.log('EVENT', event); // tslint:disable-line
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: FormattedPickerExample, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: FormattedPickerExample, isStandalone: false, selector: "formatted-picker-example", ngImport: i0, template: "<div class=\"selected-value\">Selected Value: {{value}}</div>\n<novo-picker [config]=\"formatted\" [placeholder]=\"placeholder\" [(ngModel)]=\"value\"></novo-picker>\n", styles: [""], dependencies: [{ kind: "directive", type: i1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i1.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "component", type: i2$1.NovoPickerElement, selector: "novo-picker", inputs: ["config", "placeholder", "clearValueOnSelect", "closeOnSelect", "selected", "appendToBody", "parentScrollSelector", "parentScrollAction", "containerClass", "side", "autoSelectFirstOption", "overrideElement", "maxlength", "allowCustomValues", "width", "minWidth", "allowTabNavigation", "disablePickerInput"], outputs: ["changed", "select", "focus", "blur", "typing", "tab"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: FormattedPickerExample, decorators: [{
            type: Component,
            args: [{ selector: 'formatted-picker-example', standalone: false, template: "<div class=\"selected-value\">Selected Value: {{value}}</div>\n<novo-picker [config]=\"formatted\" [placeholder]=\"placeholder\" [(ngModel)]=\"value\"></novo-picker>\n" }]
        }], ctorParameters: () => [] });

/**
 * @title Entity Picker Example
 */
class EntityPickerExample {
    constructor() {
        this.placeholder = 'Select...';
        const collaborators = [
            {
                searchEntity: 'Candidate',
                id: 1,
                firstName: 'Brian',
                lastName: 'Kimball',
                companyName: 'Bullhorn',
                phone: '617-555-6789',
                address: { city: 'Boston', state: 'MA' },
                occupation: 'Developer',
                status: 'Active',
            },
            {
                searchEntity: 'ClientContact',
                id: 2,
                firstName: 'Josh',
                lastName: 'Godi',
                companyName: 'Not Bullhorn',
                phone: '617-555-6789',
                address: { city: 'St. Louis', state: 'MO' },
                occupation: 'Developer',
                status: 'Inactive',
            },
            {
                searchEntity: 'ClientContact',
                id: 3,
                firstName: 'Alec',
                lastName: 'Sibilia',
                companyName: 'Not Bullhorn',
                phone: '617-555-6789',
                address: { city: 'Seattle', state: 'WA' },
                occupation: 'Designer',
                status: 'Inactive',
            },
            {
                searchEntity: 'Candidate',
                id: 4,
                firstName: 'Jonathan',
                lastName: 'Braun',
                companyName: 'Bullhorn',
                phone: '617-555-6789',
                address: { city: 'Boston', state: 'MA' },
                occupation: 'Designer',
                status: 'Active',
            },
            {
                searchEntity: 'Candidate',
                id: 5,
                firstName: 'Dan',
                lastName: 'Voegelin',
                companyName: 'Bullhorn',
                phone: '617-555-6789',
                address: { city: 'A Mountain', state: 'NH' },
                occupation: 'Developer',
                status: 'Active',
            },
            {
                searchEntity: 'Candidate',
                id: 6,
                firstName: 'Charles',
                lastName: 'Barnes',
                companyName: 'Bullhorn',
                phone: '617-555-6789',
                address: { city: 'Boston', state: 'MA' },
                occupation: 'Developer',
                status: 'Active',
            },
        ];
        this.entityDemo = {
            options: collaborators,
            format: '$firstName $lastName',
            entityIcon: 'person',
            resultsTemplate: EntityPickerResults,
        };
    }
    onChanged(event) {
        console.log('EVENT', event); // tslint:disable-line
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: EntityPickerExample, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: EntityPickerExample, isStandalone: false, selector: "entity-picker-example", ngImport: i0, template: "<div class=\"selected-value\">Selected Value: {{entity}}</div>\n<novo-picker [config]=\"entityDemo\" [placeholder]=\"placeholder\" [(ngModel)]=\"entity\"></novo-picker>\n", styles: [""], dependencies: [{ kind: "directive", type: i1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i1.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "component", type: i2$1.NovoPickerElement, selector: "novo-picker", inputs: ["config", "placeholder", "clearValueOnSelect", "closeOnSelect", "selected", "appendToBody", "parentScrollSelector", "parentScrollAction", "containerClass", "side", "autoSelectFirstOption", "overrideElement", "maxlength", "allowCustomValues", "width", "minWidth", "allowTabNavigation", "disablePickerInput"], outputs: ["changed", "select", "focus", "blur", "typing", "tab"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: EntityPickerExample, decorators: [{
            type: Component,
            args: [{ selector: 'entity-picker-example', standalone: false, template: "<div class=\"selected-value\">Selected Value: {{entity}}</div>\n<novo-picker [config]=\"entityDemo\" [placeholder]=\"placeholder\" [(ngModel)]=\"entity\"></novo-picker>\n" }]
        }], ctorParameters: () => [] });

/**
 * @title Default Options Picker Example
 */
class DefaultOptionsPickerExample {
    constructor() {
        this.placeholder = 'Select...';
        const states = [
            'Alabama',
            'Alaska',
            'Arizona',
            'Arkansas',
            'California',
            'Colorado',
            'Connecticut',
            'Delaware',
            'Florida',
            'Georgia',
            'Hawaii',
            'Idaho',
            'Illinois',
            'Indiana',
            'Iowa',
            'Kansas',
            'Kentucky',
            'Louisiana',
            'Maine',
            'Maryland',
            'Massachusetts',
            'Michigan',
            'Minnesota',
            'Mississippi',
            'Missouri',
            'Montana',
            'Nebraska',
            'Nevada',
            'New Hampshire',
            'New Jersey',
            'New Mexico',
            'New York',
            'North Dakota',
            'North Carolina',
            'Ohio',
            'Oklahoma',
            'Oregon',
            'Pennsylvania',
            'Rhode Island',
            'South Carolina',
            'South Dakota',
            'Tennessee',
            'Texas',
            'Utah',
            'Vermont',
            'Virginia',
            'Washington',
            'West Virginia',
            'Wisconsin',
            'Wyoming',
        ];
        this.defaultArrayConfig = {
            defaultOptions: [states[0], states[1]],
            minSearchLength: 2,
            options: () => {
                return new Promise((resolve) => {
                    setTimeout(() => {
                        resolve(states);
                    }, 300);
                });
            },
        };
        this.defaultFunctionConfig = {
            minSearchLength: 2,
            defaultOptions: () => {
                return [states[2], states[3]];
            },
            options: () => {
                return new Promise((resolve) => {
                    setTimeout(() => {
                        resolve(states);
                    }, 300);
                });
            },
        };
    }
    onChanged(event) {
        console.log('EVENT', event); // tslint:disable-line
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: DefaultOptionsPickerExample, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: DefaultOptionsPickerExample, isStandalone: false, selector: "default-options-picker-example", ngImport: i0, template: "<div class=\"selected-value\">Selected Value: {{defaultArrayValue}}</div>\n<novo-picker [config]=\"defaultArrayConfig\" [placeholder]=\"placeholder\" [(ngModel)]=\"defaultArrayValue\"></novo-picker>\n<br/><br/>\n<div class=\"selected-value\">Selected Value: {{defaultFunctionValue}}</div>\n<novo-picker [config]=\"defaultFunctionConfig\" [placeholder]=\"placeholder\" [(ngModel)]=\"defaultFunctionValue\"></novo-picker>\n", styles: [""], dependencies: [{ kind: "directive", type: i1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i1.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "component", type: i2$1.NovoPickerElement, selector: "novo-picker", inputs: ["config", "placeholder", "clearValueOnSelect", "closeOnSelect", "selected", "appendToBody", "parentScrollSelector", "parentScrollAction", "containerClass", "side", "autoSelectFirstOption", "overrideElement", "maxlength", "allowCustomValues", "width", "minWidth", "allowTabNavigation", "disablePickerInput"], outputs: ["changed", "select", "focus", "blur", "typing", "tab"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: DefaultOptionsPickerExample, decorators: [{
            type: Component,
            args: [{ selector: 'default-options-picker-example', standalone: false, template: "<div class=\"selected-value\">Selected Value: {{defaultArrayValue}}</div>\n<novo-picker [config]=\"defaultArrayConfig\" [placeholder]=\"placeholder\" [(ngModel)]=\"defaultArrayValue\"></novo-picker>\n<br/><br/>\n<div class=\"selected-value\">Selected Value: {{defaultFunctionValue}}</div>\n<novo-picker [config]=\"defaultFunctionConfig\" [placeholder]=\"placeholder\" [(ngModel)]=\"defaultFunctionValue\"></novo-picker>\n" }]
        }], ctorParameters: () => [] });

class CustomPickerResults extends PickerResults {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: CustomPickerResults, deps: null, target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: CustomPickerResults, isStandalone: false, selector: "custom-picker-results", host: { classAttribute: "active picker-results" }, usesInheritance: true, ngImport: i0, template: `
    <novo-loading theme="line" *ngIf="isLoading && !matches.length"></novo-loading>
    <novo-list *ngIf="matches.length > 0" direction="vertical">
      <novo-list-item
        *ngFor="let match of matches"
        (click)="selectMatch($event)"
        [class.active]="match === activeMatch"
        (mouseenter)="selectActive(match)"
      >
        <item-content> **CUSTOM** <b [innerHtml]="highlight(match.label, term)"></b> </item-content>
      </novo-list-item>
    </novo-list>
    <p class="picker-error" *ngIf="hasError">Oops! An error occured.</p>
    <p class="picker-null" *ngIf="!isLoading && !matches.length && !hasError">No results to display...</p>
  `, isInline: true, dependencies: [{ kind: "directive", type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i2$1.NovoLoadingElement, selector: "novo-loading", inputs: ["theme", "color", "size"] }, { kind: "component", type: i2$1.NovoListElement, selector: "novo-list", inputs: ["theme", "direction"] }, { kind: "component", type: i2$1.NovoListItemElement, selector: "novo-list-item, a[list-item], button[list-item]" }, { kind: "component", type: i2$1.NovoItemContentElement, selector: "item-content, novo-item-content", inputs: ["direction"] }, { kind: "directive", type: i2$1.ThemeColorDirective, selector: "[theme]", inputs: ["theme"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: CustomPickerResults, decorators: [{
            type: Component,
            args: [{
                    selector: 'custom-picker-results',
                    host: {
                        class: 'active picker-results',
                    },
                    template: `
    <novo-loading theme="line" *ngIf="isLoading && !matches.length"></novo-loading>
    <novo-list *ngIf="matches.length > 0" direction="vertical">
      <novo-list-item
        *ngFor="let match of matches"
        (click)="selectMatch($event)"
        [class.active]="match === activeMatch"
        (mouseenter)="selectActive(match)"
      >
        <item-content> **CUSTOM** <b [innerHtml]="highlight(match.label, term)"></b> </item-content>
      </novo-list-item>
    </novo-list>
    <p class="picker-error" *ngIf="hasError">Oops! An error occured.</p>
    <p class="picker-null" *ngIf="!isLoading && !matches.length && !hasError">No results to display...</p>
  `,
                    standalone: false
                }]
        }] });
/**
 * @title Custom Picker Results Example
 */
class CustomPickerResultsExample {
    constructor() {
        this.placeholder = 'Select...';
        const collaborators = [
            {
                id: 1,
                firstName: 'Brian',
                lastName: 'Kimball',
            },
            {
                id: 2,
                firstName: 'Josh',
                lastName: 'Godi',
            },
            {
                id: 3,
                firstName: 'Alec',
                lastName: 'Sibilia',
            },
            {
                id: 4,
                firstName: 'Kameron',
                lastName: 'Sween',
            },
        ];
        this.custom = {
            resultsTemplate: CustomPickerResults,
            format: '$firstName $lastName',
            options: collaborators,
        };
        this.value = null;
    }
    onChanged(event) {
        console.log('EVENT', event); // tslint:disable-line
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: CustomPickerResultsExample, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: CustomPickerResultsExample, isStandalone: false, selector: "custom-picker-results-example", ngImport: i0, template: "<div class=\"selected-value\">Selected Value: {{value}}</div>\n<novo-picker [config]=\"custom\" [placeholder]=\"placeholder\" [(ngModel)]=\"value\"></novo-picker>\n", styles: [""], dependencies: [{ kind: "directive", type: i1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i1.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "component", type: i2$1.NovoPickerElement, selector: "novo-picker", inputs: ["config", "placeholder", "clearValueOnSelect", "closeOnSelect", "selected", "appendToBody", "parentScrollSelector", "parentScrollAction", "containerClass", "side", "autoSelectFirstOption", "overrideElement", "maxlength", "allowCustomValues", "width", "minWidth", "allowTabNavigation", "disablePickerInput"], outputs: ["changed", "select", "focus", "blur", "typing", "tab"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: CustomPickerResultsExample, decorators: [{
            type: Component,
            args: [{ selector: 'custom-picker-results-example', standalone: false, template: "<div class=\"selected-value\">Selected Value: {{value}}</div>\n<novo-picker [config]=\"custom\" [placeholder]=\"placeholder\" [(ngModel)]=\"value\"></novo-picker>\n" }]
        }], ctorParameters: () => [] });

/**
 * @title Basic Picker Example
 */
class BasicPickerExample {
    constructor() {
        this.placeholder = 'Select...';
        this.staticDemo = {
            options: [
                'Alabama',
                'Alaska',
                'Arizona',
                'Arkansas',
                'California',
                'Colorado',
                'Connecticut',
                'Delaware',
                'Florida',
                'Georgia',
                'Hawaii',
                'Idaho',
                'Illinois',
                'Indiana',
                'Iowa',
                'Kansas',
                'Kentucky',
                'Louisiana',
                'Maine',
                'Maryland',
                'Massachusetts',
                'Michigan',
                'Minnesota',
                'Mississippi',
                'Missouri',
                'Montana',
                'Nebraska',
                'Nevada',
                'New Hampshire',
                'New Jersey',
                'New Mexico',
                'New York',
                'North Dakota',
                'North Carolina',
                'Ohio',
                'Oklahoma',
                'Oregon',
                'Pennsylvania',
                'Rhode Island',
                'South Carolina',
                'South Dakota',
                'Tennessee',
                'Texas',
                'Utah',
                'Vermont',
                'Virginia',
                'Washington',
                'West Virginia',
                'Wisconsin',
                'Wyoming',
            ],
        };
    }
    onChanged(event) {
        console.log('EVENT', event); // tslint:disable-line
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: BasicPickerExample, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: BasicPickerExample, isStandalone: false, selector: "basic-picker-example", ngImport: i0, template: "<div class=\"selected-value\">Selected Value: {{value}}</div>\n<novo-picker [config]=\"staticDemo\" [placeholder]=\"placeholder\" [(ngModel)]=\"value\"></novo-picker>\n", styles: [""], dependencies: [{ kind: "directive", type: i1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i1.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "component", type: i2$1.NovoPickerElement, selector: "novo-picker", inputs: ["config", "placeholder", "clearValueOnSelect", "closeOnSelect", "selected", "appendToBody", "parentScrollSelector", "parentScrollAction", "containerClass", "side", "autoSelectFirstOption", "overrideElement", "maxlength", "allowCustomValues", "width", "minWidth", "allowTabNavigation", "disablePickerInput"], outputs: ["changed", "select", "focus", "blur", "typing", "tab"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: BasicPickerExample, decorators: [{
            type: Component,
            args: [{ selector: 'basic-picker-example', standalone: false, template: "<div class=\"selected-value\">Selected Value: {{value}}</div>\n<novo-picker [config]=\"staticDemo\" [placeholder]=\"placeholder\" [(ngModel)]=\"value\"></novo-picker>\n" }]
        }] });

/**
 * @title Async Picker Example
 */
class AsyncPickerExample {
    constructor() {
        this.placeholder = 'Select...';
        this.value = null;
        this.async = {
            enableInfiniteScroll: true,
            options: (term, page) => {
                return new Promise((resolve) => {
                    setTimeout(() => {
                        const arr = [];
                        for (let i = 0; i < 20; i++) {
                            arr.push({ value: `Page: ${page} - Item: ${i + 1}`, label: `Page: ${page} - Item: ${i + 1}` });
                        }
                        resolve(arr);
                    }, 1000);
                });
            },
        };
    }
    onChanged(event) {
        console.log('EVENT', event); // tslint:disable-line
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: AsyncPickerExample, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: AsyncPickerExample, isStandalone: false, selector: "async-picker-example", ngImport: i0, template: "<div class=\"selected-value\">Selected Value: {{value}}</div>\n<novo-picker [config]=\"async\" [placeholder]=\"placeholder\" [(ngModel)]=\"value\"></novo-picker>\n", styles: [""], dependencies: [{ kind: "directive", type: i1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i1.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "component", type: i2$1.NovoPickerElement, selector: "novo-picker", inputs: ["config", "placeholder", "clearValueOnSelect", "closeOnSelect", "selected", "appendToBody", "parentScrollSelector", "parentScrollAction", "containerClass", "side", "autoSelectFirstOption", "overrideElement", "maxlength", "allowCustomValues", "width", "minWidth", "allowTabNavigation", "disablePickerInput"], outputs: ["changed", "select", "focus", "blur", "typing", "tab"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: AsyncPickerExample, decorators: [{
            type: Component,
            args: [{ selector: 'async-picker-example', standalone: false, template: "<div class=\"selected-value\">Selected Value: {{value}}</div>\n<novo-picker [config]=\"async\" [placeholder]=\"placeholder\" [(ngModel)]=\"value\"></novo-picker>\n" }]
        }], ctorParameters: () => [] });

/**
 * @title Nested Multi Picker Example
 */
class NestedMultiPickerExample {
    constructor() {
        this.placeholder = 'Select...';
        const departments = [
            {
                id: 1,
                name: 'Sales',
            },
            {
                id: 2,
                name: 'Engineering',
            },
            {
                id: 3,
                name: 'Marketing',
            },
            {
                id: 4,
                name: 'Finance',
            },
            {
                id: 5,
                name: 'Nobody Works Here',
            },
        ];
        const users = [
            {
                id: 1,
                departments: [1, 2, 4],
                name: 'Bob Sales/Engineering/Fin',
            },
            {
                id: 2,
                departments: [4],
                name: 'Beth Fin',
            },
            {
                id: 3,
                departments: [2],
                name: 'Artemis Eng',
            },
            {
                id: 4,
                departments: [1],
                name: 'Andy Sales',
            },
            {
                id: 5,
                departments: [3],
                name: 'Zoe Marketing',
            },
            {
                id: 6,
                departments: [4, 2],
                name: 'Ziva Eng Fin',
            },
        ];
        this.parentChild = {
            options: [
                { type: 'departments', data: departments, format: '$name', field: 'id', isParentOf: 'users' },
                { type: 'users', data: users, format: '$name', field: 'id', isChildOf: 'departments' },
            ],
            resultsTemplate: ChecklistPickerResults,
            selectAllOption: false,
            strictRelationship: false,
            chipsCount: 6,
        };
        this.parentChildTypes = [
            { value: 'departments', isParentOf: true, singular: 'department' },
            { value: 'users', isChildOf: true, singular: 'user' },
        ];
        this.parentChildValue = { departments: [2, 3, 4], users: [4, 5] };
    }
    onChanged(event) { }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: NestedMultiPickerExample, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: NestedMultiPickerExample, isStandalone: false, selector: "nested-multi-picker-example", ngImport: i0, template: "<div class=\"selected-value\">Selected Departments: <span *ngFor=\"let item of parentChildValue.departments\">{{item}} </span>\n    Selected Users: <span *ngFor=\"let item of parentChildValue.users\">{{item}} </span></div>\n<multi-picker\n    [source]=\"parentChild\"\n    [placeholder]=\"placeholder\"\n    [types]=\"parentChildTypes\"\n    [(ngModel)]=\"parentChildValue\"\n    (changed)=\"onChanged($event)\">\n</multi-picker>\n", styles: [""], dependencies: [{ kind: "directive", type: i1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i1.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "directive", type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "component", type: i2$1.NovoMultiPickerElement, selector: "multi-picker", inputs: ["source", "placeholder", "types", "value"], outputs: ["changed", "focus", "blur"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: NestedMultiPickerExample, decorators: [{
            type: Component,
            args: [{ selector: 'nested-multi-picker-example', standalone: false, template: "<div class=\"selected-value\">Selected Departments: <span *ngFor=\"let item of parentChildValue.departments\">{{item}} </span>\n    Selected Users: <span *ngFor=\"let item of parentChildValue.users\">{{item}} </span></div>\n<multi-picker\n    [source]=\"parentChild\"\n    [placeholder]=\"placeholder\"\n    [types]=\"parentChildTypes\"\n    [(ngModel)]=\"parentChildValue\"\n    (changed)=\"onChanged($event)\">\n</multi-picker>\n" }]
        }], ctorParameters: () => [] });

/**
 * @title Basic Multi Picker Example
 */
class BasicMultiPickerExample {
    constructor() {
        this.placeholder = 'Select...';
        this.value = { states: ['Alabama'], collaborators: [1, 2, 3, 4] };
        this.types = [
            { value: 'states', singular: 'state' },
            { value: 'collaborators', singular: 'collaborator' },
        ];
        const states = [
            'Alabama',
            'Alaska',
            'Arizona',
            'Arkansas',
            'California',
            'Colorado',
            'Connecticut',
            'Delaware',
            'Florida',
            'Georgia',
            'Hawaii',
            'Idaho',
            'Illinois',
            'Indiana',
            'Iowa',
            'Kansas',
            'Kentucky',
            'Louisiana',
            'Maine',
            'Maryland',
            'Massachusetts',
            'Michigan',
            'Minnesota',
            'Mississippi',
            'Missouri',
            'Montana',
            'Nebraska',
            'Nevada',
            'New Hampshire',
            'New Jersey',
            'New Mexico',
            'New York',
            'North Dakota',
            'North Carolina',
            'Ohio',
            'Oklahoma',
            'Oregon',
            'Pennsylvania',
            'Rhode Island',
            'South Carolina',
            'South Dakota',
            'Tennessee',
            'Texas',
            'Utah',
            'Vermont',
            'Virginia',
            'Washington',
            'West Virginia',
            'Wisconsin',
            'Wyoming',
        ];
        const collaborators = [
            {
                id: 1,
                firstName: 'Brian',
                lastName: 'Kimball',
            },
            {
                id: 2,
                firstName: 'Josh',
                lastName: 'Godi',
            },
            {
                id: 3,
                firstName: 'Alec',
                lastName: 'Sibilia',
            },
            {
                id: 4,
                firstName: 'Kameron',
                lastName: 'Sween',
            },
        ];
        this.staticDemo = {
            options: [
                { type: 'collaborators', data: collaborators, format: '$firstName $lastName', field: 'id' },
                { type: 'states', data: states },
            ],
            resultsTemplate: ChecklistPickerResults,
            selectAllOption: true,
        };
    }
    onChanged($event) { }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: BasicMultiPickerExample, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: BasicMultiPickerExample, isStandalone: false, selector: "basic-multi-picker-example", ngImport: i0, template: "<div class=\"selected-value\">Selected States: <span *ngFor=\"let item of value.states\">{{item}} </span>\n    Selected Collaborators: <span *ngFor=\"let item of value.collaborators\">{{item}} </span></div>\n<multi-picker\n    [source]=\"staticDemo\"\n    [placeholder]=\"placeholder\"\n    [types]=\"types\"\n    [(ngModel)]=\"value\"\n    (changed)=\"onChanged($event)\">\n</multi-picker>\n", styles: [""], dependencies: [{ kind: "directive", type: i1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i1.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "directive", type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "component", type: i2$1.NovoMultiPickerElement, selector: "multi-picker", inputs: ["source", "placeholder", "types", "value"], outputs: ["changed", "focus", "blur"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: BasicMultiPickerExample, decorators: [{
            type: Component,
            args: [{ selector: 'basic-multi-picker-example', standalone: false, template: "<div class=\"selected-value\">Selected States: <span *ngFor=\"let item of value.states\">{{item}} </span>\n    Selected Collaborators: <span *ngFor=\"let item of value.collaborators\">{{item}} </span></div>\n<multi-picker\n    [source]=\"staticDemo\"\n    [placeholder]=\"placeholder\"\n    [types]=\"types\"\n    [(ngModel)]=\"value\"\n    (changed)=\"onChanged($event)\">\n</multi-picker>\n" }]
        }], ctorParameters: () => [] });

/**
 * @title Vertical Options Example
 */
class VerticalOptionsExample {
    constructor(formUtils) {
        this.formUtils = formUtils;
        this.controls = [];
        this.initialValue = [];
        this.initValue = [{ text: 'TEXT', percentage: 12, checkbox: true, test4: 'TEST' }];
        this.simpleAddConfig = {
            label: 'Add',
        };
        this.anotherAddConfig = {
            label: 'Add a new fancy thing!',
        };
        this.emptyMessage = 'There are no items...';
        // Grouped form demo
        this.setupGroupedFormDemo();
        // Setup function
        this.canEditFunction = this.canEdit.bind(this);
        this.canRemoveFunction = this.canRemove.bind(this);
    }
    onRemove(value) {
        console.log('REMOVING', value); // tslint:disable-line
    }
    onEdit(value) {
        console.log('EDITING', value); // tslint:disable-line
    }
    canEdit(value, index) {
        console.log('canEdit', value, index); // tslint:disable-line
        return index > 0;
    }
    canRemove(value, index) {
        console.log('canRemove', value, index); // tslint:disable-line
        return index === 0;
    }
    updateInitialValue() {
        this.initValue = [
            { text: 'TEXT 111', percentage: 100, checkbox: false, test4: 'TEST 111' },
            { text: 'TEXT 222', percentage: 5, checkbox: false, test4: 'TEST 222' },
            { text: 'TEXT 333', percentage: 60, checkbox: true, test4: 'TEST 333' },
        ];
    }
    customDelete(form, key, index) {
        console.log('DELETE', form, key, index); // tslint:disable-line
        const control = form.controls[key];
        control.removeAt(index);
    }
    customEdit(form, key, index) {
        console.log('EDIT', form, key, index); // tslint:disable-line
    }
    setupGroupedFormDemo() {
        this.formGroup = this.formUtils.emptyFormGroup();
        const label = new ReadOnlyControl({ key: 'label', value: 'Label :)' });
        const c1 = new SelectControl({ key: 'text', label: 'Text Box', options: [{ value: 'hello', label: 'Hello' }] });
        const c2 = new TextBoxControl({ type: 'percentage', key: 'percentage', label: 'Percent', required: true });
        const c3 = new CheckboxControl({ key: 'checkbox', label: 'Check Me!', width: 100 });
        const c4 = new TextBoxControl({ key: 'test4', label: 'TEST4' });
        this.controls.push(label);
        this.controls.push(c1);
        this.controls.push(c2);
        this.controls.push(c3);
        this.controls.push(c4);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: VerticalOptionsExample, deps: [{ token: i1$1.FormUtils }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: VerticalOptionsExample, isStandalone: false, selector: "vertical-options-example", ngImport: i0, template: "<novo-form [form]=\"formGroup\">\n    <novo-control-group [initialValue]=\"initialValue\" collapsible=\"true\" [add]=\"anotherAddConfig\" remove=\"true\" icon=\"idea\" label=\"Vertical\" key=\"vertical\" vertical=\"true\" description=\"Test Description\" [form]=\"formGroup\" [controls]=\"controls\" [emptyMessage]=\"emptyMessage\"></novo-control-group>\n</novo-form>\n<div class=\"final-value\">Initial Value: {{ initialValue | json }}</div>\n<div class=\"final-value\">Value: {{ formGroup.value | json }}</div>\n", styles: [""], dependencies: [{ kind: "component", type: i2$1.NovoFormElement, selector: "novo-form", inputs: ["form", "layout", "hideHeader"] }, { kind: "component", type: i2$1.NovoControlGroup, selector: "novo-control-group", inputs: ["appearance", "vertical", "stacked", "add", "remove", "edit", "collapsible", "form", "controls", "key", "label", "description", "emptyMessage", "icon", "editIcon", "removeIcon", "initialValue", "canEdit", "canRemove", "shouldRemove", "rowTemplate", "columnLabelTemplate"], outputs: ["onRemove", "onEdit", "onAdd", "change"] }, { kind: "pipe", type: i2.JsonPipe, name: "json" }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: VerticalOptionsExample, decorators: [{
            type: Component,
            args: [{ selector: 'vertical-options-example', standalone: false, template: "<novo-form [form]=\"formGroup\">\n    <novo-control-group [initialValue]=\"initialValue\" collapsible=\"true\" [add]=\"anotherAddConfig\" remove=\"true\" icon=\"idea\" label=\"Vertical\" key=\"vertical\" vertical=\"true\" description=\"Test Description\" [form]=\"formGroup\" [controls]=\"controls\" [emptyMessage]=\"emptyMessage\"></novo-control-group>\n</novo-form>\n<div class=\"final-value\">Initial Value: {{ initialValue | json }}</div>\n<div class=\"final-value\">Value: {{ formGroup.value | json }}</div>\n" }]
        }], ctorParameters: () => [{ type: i1$1.FormUtils }] });

/**
 * @title Vertical Example
 */
class VerticalExample {
    constructor(formUtils) {
        this.formUtils = formUtils;
        this.controls = [];
        this.initialValue = [];
        this.initValue = [{ text: 'TEXT', percentage: 12, checkbox: true, test4: 'TEST' }];
        this.simpleAddConfig = {
            label: 'Add',
        };
        this.anotherAddConfig = {
            label: 'Add a new fancy thing!',
        };
        this.emptyMessage = 'There are no items...';
        // Grouped form demo
        this.setupGroupedFormDemo();
        // Setup function
        this.canEditFunction = this.canEdit.bind(this);
        this.canRemoveFunction = this.canRemove.bind(this);
    }
    onRemove(value) {
        console.log('REMOVING', value); // tslint:disable-line
    }
    onEdit(value) {
        console.log('EDITING', value); // tslint:disable-line
    }
    canEdit(value, index) {
        console.log('canEdit', value, index); // tslint:disable-line
        return index > 0;
    }
    canRemove(value, index) {
        console.log('canRemove', value, index); // tslint:disable-line
        return index === 0;
    }
    updateInitialValue() {
        this.initValue = [
            { text: 'TEXT 111', percentage: 100, checkbox: false, test4: 'TEST 111' },
            { text: 'TEXT 222', percentage: 5, checkbox: false, test4: 'TEST 222' },
            { text: 'TEXT 333', percentage: 60, checkbox: true, test4: 'TEST 333' },
        ];
    }
    customDelete(form, key, index) {
        console.log('DELETE', form, key, index); // tslint:disable-line
        const control = form.controls[key];
        control.removeAt(index);
    }
    customEdit(form, key, index) {
        console.log('EDIT', form, key, index); // tslint:disable-line
    }
    setupGroupedFormDemo() {
        this.formGroup = this.formUtils.emptyFormGroup();
        const label = new ReadOnlyControl({ key: 'label', value: 'Label :)' });
        const c1 = new SelectControl({ key: 'text', label: 'Text Box', options: [{ value: 'hello', label: 'Hello' }] });
        const c2 = new TextBoxControl({ type: 'percentage', key: 'percentage', label: 'Percent', required: true });
        const c3 = new CheckboxControl({ key: 'checkbox', label: 'Check Me!', width: 100 });
        const c4 = new TextBoxControl({ key: 'test4', label: 'TEST4' });
        this.controls.push(label);
        this.controls.push(c1);
        this.controls.push(c2);
        this.controls.push(c3);
        this.controls.push(c4);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: VerticalExample, deps: [{ token: i1$1.FormUtils }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: VerticalExample, isStandalone: false, selector: "vertical-example", ngImport: i0, template: "<novo-form [form]=\"formGroup\">\n    <novo-control-group [initialValue]=\"initialValue\" [add]=\"simpleAddConfig\" remove=\"true\" icon=\"idea\" label=\"Vertical\" key=\"vertical\" vertical=\"true\" [form]=\"formGroup\" [controls]=\"controls\" [emptyMessage]=\"emptyMessage\"></novo-control-group>\n</novo-form>\n<div class=\"final-value\">Initial Value: {{ initialValue | json }}</div>\n<div class=\"final-value\">Value: {{ formGroup.value | json }}</div>\n", styles: [""], dependencies: [{ kind: "component", type: i2$1.NovoFormElement, selector: "novo-form", inputs: ["form", "layout", "hideHeader"] }, { kind: "component", type: i2$1.NovoControlGroup, selector: "novo-control-group", inputs: ["appearance", "vertical", "stacked", "add", "remove", "edit", "collapsible", "form", "controls", "key", "label", "description", "emptyMessage", "icon", "editIcon", "removeIcon", "initialValue", "canEdit", "canRemove", "shouldRemove", "rowTemplate", "columnLabelTemplate"], outputs: ["onRemove", "onEdit", "onAdd", "change"] }, { kind: "pipe", type: i2.JsonPipe, name: "json" }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: VerticalExample, decorators: [{
            type: Component,
            args: [{ selector: 'vertical-example', standalone: false, template: "<novo-form [form]=\"formGroup\">\n    <novo-control-group [initialValue]=\"initialValue\" [add]=\"simpleAddConfig\" remove=\"true\" icon=\"idea\" label=\"Vertical\" key=\"vertical\" vertical=\"true\" [form]=\"formGroup\" [controls]=\"controls\" [emptyMessage]=\"emptyMessage\"></novo-control-group>\n</novo-form>\n<div class=\"final-value\">Initial Value: {{ initialValue | json }}</div>\n<div class=\"final-value\">Value: {{ formGroup.value | json }}</div>\n" }]
        }], ctorParameters: () => [{ type: i1$1.FormUtils }] });

/**
 * @title Horizontal Options Example
 */
class HorizontalOptionsExample {
    constructor(formUtils) {
        this.formUtils = formUtils;
        this.controls = [];
        this.initialValue = [];
        this.initValue = [{ text: 'TEXT', percentage: 12, checkbox: true, test4: 'TEST' }];
        this.simpleAddConfig = {
            label: 'Add',
        };
        this.anotherAddConfig = {
            label: 'Add a new fancy thing!',
        };
        this.emptyMessage = 'There are no items...';
        // Grouped form demo
        this.setupGroupedFormDemo();
        // Setup function
        this.canEditFunction = this.canEdit.bind(this);
        this.canRemoveFunction = this.canRemove.bind(this);
    }
    onRemove(value) {
        console.log('REMOVING', value); // tslint:disable-line
    }
    onEdit(value) {
        console.log('EDITING', value); // tslint:disable-line
    }
    canEdit(value, index) {
        console.log('canEdit', value, index); // tslint:disable-line
        return index > 0;
    }
    canRemove(value, index) {
        console.log('canRemove', value, index); // tslint:disable-line
        return index === 0;
    }
    updateInitialValue() {
        this.initValue = [
            { text: 'TEXT 111', percentage: 100, checkbox: false, test4: 'TEST 111' },
            { text: 'TEXT 222', percentage: 5, checkbox: false, test4: 'TEST 222' },
            { text: 'TEXT 333', percentage: 60, checkbox: true, test4: 'TEST 333' },
        ];
    }
    customDelete(form, key, index) {
        console.log('DELETE', form, key, index); // tslint:disable-line
        const control = form.controls[key];
        control.removeAt(index);
    }
    customEdit(form, key, index) {
        console.log('EDIT', form, key, index); // tslint:disable-line
    }
    setupGroupedFormDemo() {
        this.formGroup = this.formUtils.emptyFormGroup();
        const label = new ReadOnlyControl({ key: 'label', value: 'Label :)' });
        const c1 = new SelectControl({ key: 'text', label: 'Text Box', options: [{ value: 'hello', label: 'Hello' }] });
        const c2 = new TextBoxControl({ type: 'percentage', key: 'percentage', label: 'Percent', required: true });
        const c3 = new CheckboxControl({ key: 'checkbox', label: 'Check Me!', width: 100 });
        const c4 = new TextBoxControl({ key: 'test4', label: 'TEST4' });
        this.controls.push(label);
        this.controls.push(c1);
        this.controls.push(c2);
        this.controls.push(c3);
        this.controls.push(c4);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: HorizontalOptionsExample, deps: [{ token: i1$1.FormUtils }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: HorizontalOptionsExample, isStandalone: false, selector: "horizontal-options-example", ngImport: i0, template: "<novo-form [form]=\"formGroup\">\n    <novo-control-group [initialValue]=\"initialValue\" collapsible=\"true\" [add]=\"anotherAddConfig\" remove=\"true\" label=\"Horizontal\" key=\"horizontal\" description=\"Test Description\" [form]=\"formGroup\" [controls]=\"controls\" [emptyMessage]=\"emptyMessage\"></novo-control-group>\n</novo-form>\n<div class=\"final-value\">Initial Value: {{ initialValue | json }}</div>\n<div class=\"final-value\">Value: {{ formGroup.value | json }}</div>\n", styles: [""], dependencies: [{ kind: "component", type: i2$1.NovoFormElement, selector: "novo-form", inputs: ["form", "layout", "hideHeader"] }, { kind: "component", type: i2$1.NovoControlGroup, selector: "novo-control-group", inputs: ["appearance", "vertical", "stacked", "add", "remove", "edit", "collapsible", "form", "controls", "key", "label", "description", "emptyMessage", "icon", "editIcon", "removeIcon", "initialValue", "canEdit", "canRemove", "shouldRemove", "rowTemplate", "columnLabelTemplate"], outputs: ["onRemove", "onEdit", "onAdd", "change"] }, { kind: "pipe", type: i2.JsonPipe, name: "json" }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: HorizontalOptionsExample, decorators: [{
            type: Component,
            args: [{ selector: 'horizontal-options-example', standalone: false, template: "<novo-form [form]=\"formGroup\">\n    <novo-control-group [initialValue]=\"initialValue\" collapsible=\"true\" [add]=\"anotherAddConfig\" remove=\"true\" label=\"Horizontal\" key=\"horizontal\" description=\"Test Description\" [form]=\"formGroup\" [controls]=\"controls\" [emptyMessage]=\"emptyMessage\"></novo-control-group>\n</novo-form>\n<div class=\"final-value\">Initial Value: {{ initialValue | json }}</div>\n<div class=\"final-value\">Value: {{ formGroup.value | json }}</div>\n" }]
        }], ctorParameters: () => [{ type: i1$1.FormUtils }] });

/**
 * @title Horizontal Example
 */
class HorizontalExample {
    constructor(formUtils) {
        this.formUtils = formUtils;
        this.controls = [];
        this.initialValue = [];
        this.initValue = [{ text: 'TEXT', percentage: 12, checkbox: true, test4: 'TEST' }];
        this.simpleAddConfig = {
            label: 'Add',
        };
        this.anotherAddConfig = {
            label: 'Add a new fancy thing!',
        };
        this.emptyMessage = 'There are no items...';
        // Grouped form demo
        this.setupGroupedFormDemo();
        // Setup function
        this.canEditFunction = this.canEdit.bind(this);
        this.canRemoveFunction = this.canRemove.bind(this);
    }
    onRemove(value) {
        console.log('REMOVING', value); // tslint:disable-line
    }
    onEdit(value) {
        console.log('EDITING', value); // tslint:disable-line
    }
    canEdit(value, index) {
        console.log('canEdit', value, index); // tslint:disable-line
        return index > 0;
    }
    canRemove(value, index) {
        console.log('canRemove', value, index); // tslint:disable-line
        return index === 0;
    }
    updateInitialValue() {
        this.initValue = [
            { text: 'hello', percentage: 100, checkbox: false, test4: 'TEST 111' },
            { text: 'TEXT 222', percentage: 5, checkbox: false, test4: 'TEST 222' },
            { text: 'TEXT 333', percentage: 60, checkbox: true, test4: 'TEST 333' },
        ];
    }
    customDelete(form, key, index) {
        console.log('DELETE', form, key, index); // tslint:disable-line
        const control = form.controls[key];
        control.removeAt(index);
    }
    customEdit(form, key, index) {
        console.log('EDIT', form, key, index); // tslint:disable-line
    }
    setupGroupedFormDemo() {
        this.formGroup = this.formUtils.emptyFormGroup();
        const label = new ReadOnlyControl({ key: 'label', value: 'Label :)' });
        const c1 = new SelectControl({ key: 'text', label: 'Text Box', options: [{ value: 'hello', label: 'Hello' }] });
        const c2 = new TextBoxControl({ type: 'percentage', key: 'percentage', label: 'Percent', required: true });
        const c3 = new CheckboxControl({ key: 'checkbox', label: 'Check Me!', width: 100 });
        const c4 = new TextBoxControl({ key: 'test4', label: 'TEST4' });
        this.controls.push(label);
        this.controls.push(c1);
        this.controls.push(c2);
        this.controls.push(c3);
        this.controls.push(c4);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: HorizontalExample, deps: [{ token: i1$1.FormUtils }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: HorizontalExample, isStandalone: false, selector: "horizontal-example", ngImport: i0, template: "<button theme=\"primary\" (click)=\"updateInitialValue()\">Update Initial Value</button>\n<br/>\n<br/>\n<novo-form [form]=\"formGroup\">\n    <novo-control-group [canEdit]=\"canEditFunction\" [canRemove]=\"canRemoveFunction\" (onRemove)=\"onRemove($event)\" (onEdit)=\"onEdit($event)\" [initialValue]=\"initValue\" [add]=\"simpleAddConfig\" remove=\"true\" edit=\"true\" label=\"Horizontal\" key=\"horizontal\" [form]=\"formGroup\" [controls]=\"controls\" [emptyMessage]=\"emptyMessage\"></novo-control-group>\n</novo-form>\n<div class=\"final-value\">Initial Value: {{ initValue | json }}</div>\n<div class=\"final-value\">Value: {{ formGroup.value | json }}</div>\n", styles: [""], dependencies: [{ kind: "component", type: i2$1.NovoButtonElement, selector: "novo-button,button[theme]", inputs: ["color", "side", "size", "theme", "loading", "icon", "secondIcon", "disabled"] }, { kind: "component", type: i2$1.NovoFormElement, selector: "novo-form", inputs: ["form", "layout", "hideHeader"] }, { kind: "component", type: i2$1.NovoControlGroup, selector: "novo-control-group", inputs: ["appearance", "vertical", "stacked", "add", "remove", "edit", "collapsible", "form", "controls", "key", "label", "description", "emptyMessage", "icon", "editIcon", "removeIcon", "initialValue", "canEdit", "canRemove", "shouldRemove", "rowTemplate", "columnLabelTemplate"], outputs: ["onRemove", "onEdit", "onAdd", "change"] }, { kind: "directive", type: i2$1.ThemeColorDirective, selector: "[theme]", inputs: ["theme"] }, { kind: "pipe", type: i2.JsonPipe, name: "json" }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: HorizontalExample, decorators: [{
            type: Component,
            args: [{ selector: 'horizontal-example', standalone: false, template: "<button theme=\"primary\" (click)=\"updateInitialValue()\">Update Initial Value</button>\n<br/>\n<br/>\n<novo-form [form]=\"formGroup\">\n    <novo-control-group [canEdit]=\"canEditFunction\" [canRemove]=\"canRemoveFunction\" (onRemove)=\"onRemove($event)\" (onEdit)=\"onEdit($event)\" [initialValue]=\"initValue\" [add]=\"simpleAddConfig\" remove=\"true\" edit=\"true\" label=\"Horizontal\" key=\"horizontal\" [form]=\"formGroup\" [controls]=\"controls\" [emptyMessage]=\"emptyMessage\"></novo-control-group>\n</novo-form>\n<div class=\"final-value\">Initial Value: {{ initValue | json }}</div>\n<div class=\"final-value\">Value: {{ formGroup.value | json }}</div>\n" }]
        }], ctorParameters: () => [{ type: i1$1.FormUtils }] });

/**
 * @title Custom Template Example
 */
class CustomTemplateExample {
    constructor(formUtils) {
        this.formUtils = formUtils;
        this.controls = [];
        this.initialValue = [];
        this.initValue = [{ text: 'TEXT', percentage: 12, checkbox: true, test4: 'TEST' }];
        this.simpleAddConfig = {
            label: 'Add',
        };
        this.anotherAddConfig = {
            label: 'Add a new fancy thing!',
        };
        this.emptyMessage = 'There are no items...';
        // Grouped form demo
        this.setupGroupedFormDemo();
        // Setup function
        this.canEditFunction = this.canEdit.bind(this);
        this.canRemoveFunction = this.canRemove.bind(this);
    }
    onRemove(value) {
        console.log('REMOVING', value); // tslint:disable-line
    }
    onEdit(value) {
        console.log('EDITING', value); // tslint:disable-line
    }
    canEdit(value, index) {
        console.log('canEdit', value, index); // tslint:disable-line
        return index > 0;
    }
    canRemove(value, index) {
        console.log('canRemove', value, index); // tslint:disable-line
        return index === 0;
    }
    updateInitialValue() {
        this.initValue = [
            { text: 'TEXT 111', percentage: 100, checkbox: false, test4: 'TEST 111' },
            { text: 'TEXT 222', percentage: 5, checkbox: false, test4: 'TEST 222' },
            { text: 'TEXT 333', percentage: 60, checkbox: true, test4: 'TEST 333' },
        ];
    }
    customDelete(form, key, index) {
        console.log('DELETE', form, key, index); // tslint:disable-line
        const control = form.controls[key];
        control.removeAt(index);
    }
    customEdit(form, key, index) {
        console.log('EDIT', form, key, index); // tslint:disable-line
    }
    setupGroupedFormDemo() {
        this.formGroup = this.formUtils.emptyFormGroup();
        const label = new ReadOnlyControl({ key: 'label', value: 'Label :)' });
        const c1 = new SelectControl({ key: 'text', label: 'Text Box', options: [{ value: 'hello', label: 'Hello' }] });
        const c2 = new TextBoxControl({ type: 'percentage', key: 'percentage', label: 'Percent', required: true });
        const c3 = new CheckboxControl({ key: 'checkbox', label: 'Check Me!', width: 100 });
        const c4 = new TextBoxControl({ key: 'test4', label: 'TEST4' });
        this.controls.push(label);
        this.controls.push(c1);
        this.controls.push(c2);
        this.controls.push(c3);
        this.controls.push(c4);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: CustomTemplateExample, deps: [{ token: i1$1.FormUtils }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: CustomTemplateExample, isStandalone: false, selector: "custom-template-example", ngImport: i0, template: "<ng-template #customRowTemplate let-form=\"form\" let-index=\"index\" let-key=\"key\" let-controls=\"controls\">\n    <div class=\"novo-control-group-control\">\n        <div *ngFor=\"let c of controls\" class=\"novo-control-container\" [class.is-label]=\"c.controlType === 'read-only'\" [style.max-width.px]=\"c.width\">\n            <novo-control [form]=\"form?.controls[key]['controls'][index]\" [control]=\"c\" [condensed]=\"true\"></novo-control>\n        </div>\n        <div class=\"novo-control-container last\">\n            <button tooltip=\"HI\" type=\"button\" (click)=\"customEdit(form, key, index)\" theme=\"icon\" icon=\"edit\" [attr.data-automation-id]=\"'novo-control-group-edit-' + key\" index=\"-1\"></button>\n        </div>\n        <div class=\"novo-control-container last\">\n            <button type=\"button\" (click)=\"customDelete(form, key, index)\" theme=\"icon\" icon=\"delete-o\" [attr.data-automation-id]=\"'novo-control-group-delete-' + key\" index=\"-1\"></button>\n        </div>\n    </div>\n</ng-template>\n\n<novo-form [form]=\"formGroup\">\n    <novo-control-group remove=\"true\" edit=\"true\" [initialValue]=\"initValue\" [controls]=\"controls\" [rowTemplate]=\"customRowTemplate\" [add]=\"simpleAddConfig\" label=\"Custom Template\" key=\"custom\" [form]=\"formGroup\" [emptyMessage]=\"emptyMessage\"></novo-control-group>\n</novo-form>\n\n<div class=\"final-value\">Initial Value: {{ initValue | json }}</div>\n<div class=\"final-value\">Value: {{ formGroup.value | json }}</div>\n", styles: [""], dependencies: [{ kind: "directive", type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "component", type: i2$1.NovoButtonElement, selector: "novo-button,button[theme]", inputs: ["color", "side", "size", "theme", "loading", "icon", "secondIcon", "disabled"] }, { kind: "directive", type: i2$1.TooltipDirective, selector: "[tooltip]", inputs: ["tooltip", "tooltipPosition", "tooltipType", "tooltipSize", "tooltipBounce", "tooltipNoAnimate", "tooltipRounded", "tooltipAlways", "tooltipPreline", "removeTooltipArrow", "tooltipAutoPosition", "tooltipIsHTML", "tooltipCloseOnClick", "tooltipOnOverflow", "tooltipActive"] }, { kind: "component", type: i2$1.NovoControlElement, selector: "novo-control", inputs: ["control", "form", "condensed", "autoFocus"], outputs: ["change", "edit", "save", "delete", "upload", "blur", "focus"] }, { kind: "component", type: i2$1.NovoFormElement, selector: "novo-form", inputs: ["form", "layout", "hideHeader"] }, { kind: "component", type: i2$1.NovoControlGroup, selector: "novo-control-group", inputs: ["appearance", "vertical", "stacked", "add", "remove", "edit", "collapsible", "form", "controls", "key", "label", "description", "emptyMessage", "icon", "editIcon", "removeIcon", "initialValue", "canEdit", "canRemove", "shouldRemove", "rowTemplate", "columnLabelTemplate"], outputs: ["onRemove", "onEdit", "onAdd", "change"] }, { kind: "directive", type: i2$1.ThemeColorDirective, selector: "[theme]", inputs: ["theme"] }, { kind: "pipe", type: i2.JsonPipe, name: "json" }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: CustomTemplateExample, decorators: [{
            type: Component,
            args: [{ selector: 'custom-template-example', standalone: false, template: "<ng-template #customRowTemplate let-form=\"form\" let-index=\"index\" let-key=\"key\" let-controls=\"controls\">\n    <div class=\"novo-control-group-control\">\n        <div *ngFor=\"let c of controls\" class=\"novo-control-container\" [class.is-label]=\"c.controlType === 'read-only'\" [style.max-width.px]=\"c.width\">\n            <novo-control [form]=\"form?.controls[key]['controls'][index]\" [control]=\"c\" [condensed]=\"true\"></novo-control>\n        </div>\n        <div class=\"novo-control-container last\">\n            <button tooltip=\"HI\" type=\"button\" (click)=\"customEdit(form, key, index)\" theme=\"icon\" icon=\"edit\" [attr.data-automation-id]=\"'novo-control-group-edit-' + key\" index=\"-1\"></button>\n        </div>\n        <div class=\"novo-control-container last\">\n            <button type=\"button\" (click)=\"customDelete(form, key, index)\" theme=\"icon\" icon=\"delete-o\" [attr.data-automation-id]=\"'novo-control-group-delete-' + key\" index=\"-1\"></button>\n        </div>\n    </div>\n</ng-template>\n\n<novo-form [form]=\"formGroup\">\n    <novo-control-group remove=\"true\" edit=\"true\" [initialValue]=\"initValue\" [controls]=\"controls\" [rowTemplate]=\"customRowTemplate\" [add]=\"simpleAddConfig\" label=\"Custom Template\" key=\"custom\" [form]=\"formGroup\" [emptyMessage]=\"emptyMessage\"></novo-control-group>\n</novo-form>\n\n<div class=\"final-value\">Initial Value: {{ initValue | json }}</div>\n<div class=\"final-value\">Value: {{ formGroup.value | json }}</div>\n" }]
        }], ctorParameters: () => [{ type: i1$1.FormUtils }] });

/**
 * @title Text Based Controls Example
 */
class TextBasedControlsExample {
    constructor(formUtils) {
        this.formUtils = formUtils;
        // Quick note config;
        this.quickNoteConfig = {
            triggers: {
                tags: '@',
                references: '#',
                boos: '^',
            },
            options: {
                tags: ['First', 'Second'],
                references: ['Third', 'Fourth'],
                boos: ['Test'],
            },
            renderer: {
                tags: (symbol, item) => {
                    return `<a class="tag">${symbol}${item.label}</a>`;
                },
                references: (symbol, item) => {
                    return `<a class="tag">${symbol}${item.label}</a>`;
                },
                boos: (symbol, item) => {
                    return `<strong>${symbol}${item.label}</strong>`;
                },
            },
        };
        // Text-based Controls
        this.textControl = new TextBoxControl({
            key: 'text',
            label: 'Text Box',
            tooltip: 'Textbox',
            readOnly: true,
            value: 'HI',
            required: true,
        });
        this.textMaskControl = new TextBoxControl({
            key: 'textmask',
            maxlength: 10,
            label: 'Text Control with Mask (hexadecimal)',
            textMaskEnabled: true,
            maskOptions: {
                mask: /^[\da-fA-F]{0,10}$/,
                keepCharPositions: false,
                guide: false
            },
            value: '9F'
        });
        this.textAreaControl = new TextAreaControl({
            key: 'textarea',
            label: 'Text Area',
            tooltip: 'Text Area',
            value: 'Bro ipsum dolor sit amet yard sale saddle pipe, poaching cork 360 punter ACL back country cornice Whistler.  Avie Ski taco mitt, manny first tracks yard sale caballerial heli fatty.  Epic dope grab, brain bucket japan air wack bowl  mute heli corn Snowboard Whistler giblets table top.  Crunchy Snowboard washboard line grab reverse camber.  Bump epic granny gear heli sketching wheelie huckfest face plant crank pow pow chain ring  dirtbag washboard.  Flow endo ski bum sucker hole, death cookies manny schwag pipe.  Dope heli stomp yard sale, saddle shreddin booter gear jammer grom bonk OTB brain bucket bonk japan air Whistler.Clipless pow pow pow, core shot corn butter bomb hole glades face plant dust on crust.  Poaching park face shots bump, Bike cornice death cookies.  Avie cruiser sucker hole face plant switch.  ACL snake bite bonk, twin tip euro rig nose press McTwist.  Ripping skinny trucks shreddin.  Apres pow line euro sharkbite gapers lid.Snake bite derailleur wheels bomb hole.  Huck apres steeps BB first tracks bowl  daffy park euro park rat euro.  North shore death cookies snake bite carve, freshies dirtbag huck reverse camber hellflip frozen chicken heads apres taco glove gnar face shots bro.  Ride flow twister cornice afterbang saddle first tracks rig berm bro face shots.  Ride stoked wack park twin tip trucks chillax shuttle Whistler gondy laps.  Grind berm schwag, table top face shots steed liftie afterbang taco glove frozen chicken heads free ride clean huck.  Rock-ectomy white room nose press avie.Frozen chicken heads gondy bail travel huckfest big ring phat clean.  Taco couloir piste derailleur wack scream backside steeps groomer glades pipe gondy switch skid lid.  Brain bucket betty bowl, moguls gondy Whistler air hardtail.  Flow euro granny gear, McTwist cruiser bonk grom chain suck.  Trucks line huck, stomp ripper washboard euro corduroy death cookies yard sale dope face plant shreddin chain suck.ACL T-bar hellflip, first tracks gondy hardtail rip wack dust on crust schwag frontside couloir laps presta backside.  Road rash Ski ski bum gnar wack flow carve lid.  Nose white room ollie rail table top grom back country washboard dust on crust chillax gear jammer bro stomp stoked.  Lid wheels nose press frontside, park ACL dirtbag huck epic bowl  taco glove OTB.  Fatty mute whip stunt, Whistler McTwist stoked Bike.  Endo brain bucket crank dust on crust back country line ollie gapers afterbang bump stoked taco road rash granny gear.  Deck dirtbag 360 gnar snake bite couloir Bike corduroy frontside crank lid bro.Air tele schwag ollie, hardtail betty crunchy epic  face shots.  Travel flowy misty huck Bike 180 schwag drop hellflip ripping bunny slope carbon roadie tele bail.  Cornice sharkbite 360 frozen chicken heads dope hellflip clipless.  Switch sketching grind brain bucket stunt taco daffy OTB ride liftie brain bucket air huckfest park 360.',
        });
        this.emailControl = new TextBoxControl({ type: 'email', key: 'email', label: 'Email', tooltip: 'Email' });
        this.numberControl = new TextBoxControl({ type: 'number', key: 'number', tooltip: 'Number', label: 'Number' });
        this.currencyControl = new TextBoxControl({
            type: 'currency',
            key: 'currency',
            tooltip: 'Currency',
            label: 'Currency',
            currencyFormat: '$ USD',
        });
        this.floatControl = new TextBoxControl({ type: 'float', key: 'float', tooltip: 'Float', label: 'Float' });
        this.percentageControl = new TextBoxControl({
            type: 'percentage',
            key: 'percentage',
            tooltip: 'Percent',
            label: 'Percent',
            required: true,
        });
        this.quickNoteControl = new QuickNoteControl({
            key: 'note',
            label: 'Note',
            config: this.quickNoteConfig,
            required: true,
            tooltip: 'Quicknote',
        });
        this.aceEditorControl = new AceEditorControl({ key: 'ace', label: 'CODE', tooltip: 'CODE', value: 'var i = 0;' });
        this.textForm = formUtils.toFormGroup([
            this.textControl,
            this.textMaskControl,
            this.emailControl,
            this.textAreaControl,
            this.numberControl,
            this.currencyControl,
            this.floatControl,
            this.percentageControl,
            this.quickNoteControl,
            this.aceEditorControl,
        ]);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: TextBasedControlsExample, deps: [{ token: i1$1.FormUtils }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: TextBasedControlsExample, isStandalone: false, selector: "text-based-controls-example", ngImport: i0, template: "<!--Check out the FormDemo.js for more information!-->\n<button theme=\"secondary\" (click)=\"form.showAllFields()\">Show All Fields</button>\n<button theme=\"secondary\" (click)=\"form.showOnlyRequired(false)\">Show Required Fields</button>\n<br/>\n<br/>\n<novo-form [form]=\"textForm\" #form>\n    <div class=\"novo-form-row\">\n        <novo-control [form]=\"textForm\" [control]=\"textControl\"></novo-control>\n    </div>\n    <div class=\"novo-form-row\">\n        <novo-control [form]=\"textForm\" [control]=\"textMaskControl\"></novo-control>\n    </div>\n    <div class=\"novo-form-row\">\n        <novo-control [autoFocus]=\"true\" [form]=\"textForm\" [control]=\"emailControl\"></novo-control>\n    </div>\n    <div class=\"novo-form-row\">\n        <novo-control [form]=\"textForm\" [control]=\"numberControl\"></novo-control>\n    </div>\n    <div class=\"novo-form-row\">\n        <novo-control [form]=\"textForm\" [control]=\"currencyControl\"></novo-control>\n    </div>\n    <div class=\"novo-form-row\">\n        <novo-control [form]=\"textForm\" [control]=\"floatControl\"></novo-control>\n    </div>\n    <div class=\"novo-form-row\">\n        <novo-control [form]=\"textForm\" [control]=\"percentageControl\"></novo-control>\n    </div>\n    <div class=\"novo-form-row\">\n        <novo-control [form]=\"textForm\" [control]=\"textAreaControl\"></novo-control>\n    </div>\n    <div class=\"novo-form-row\">\n        <novo-control [form]=\"textForm\" [control]=\"quickNoteControl\"></novo-control>\n    </div>\n    <div class=\"novo-form-row\">\n        <novo-control [form]=\"textForm\" [control]=\"aceEditorControl\"></novo-control>\n    </div>\n</novo-form>\n<div class=\"final-value\">Value: {{textForm.value | json}}</div>\n", styles: [""], dependencies: [{ kind: "component", type: i2$1.NovoButtonElement, selector: "novo-button,button[theme]", inputs: ["color", "side", "size", "theme", "loading", "icon", "secondIcon", "disabled"] }, { kind: "component", type: i2$1.NovoControlElement, selector: "novo-control", inputs: ["control", "form", "condensed", "autoFocus"], outputs: ["change", "edit", "save", "delete", "upload", "blur", "focus"] }, { kind: "component", type: i2$1.NovoFormElement, selector: "novo-form", inputs: ["form", "layout", "hideHeader"] }, { kind: "directive", type: i2$1.ThemeColorDirective, selector: "[theme]", inputs: ["theme"] }, { kind: "pipe", type: i2.JsonPipe, name: "json" }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: TextBasedControlsExample, decorators: [{
            type: Component,
            args: [{ selector: 'text-based-controls-example', standalone: false, template: "<!--Check out the FormDemo.js for more information!-->\n<button theme=\"secondary\" (click)=\"form.showAllFields()\">Show All Fields</button>\n<button theme=\"secondary\" (click)=\"form.showOnlyRequired(false)\">Show Required Fields</button>\n<br/>\n<br/>\n<novo-form [form]=\"textForm\" #form>\n    <div class=\"novo-form-row\">\n        <novo-control [form]=\"textForm\" [control]=\"textControl\"></novo-control>\n    </div>\n    <div class=\"novo-form-row\">\n        <novo-control [form]=\"textForm\" [control]=\"textMaskControl\"></novo-control>\n    </div>\n    <div class=\"novo-form-row\">\n        <novo-control [autoFocus]=\"true\" [form]=\"textForm\" [control]=\"emailControl\"></novo-control>\n    </div>\n    <div class=\"novo-form-row\">\n        <novo-control [form]=\"textForm\" [control]=\"numberControl\"></novo-control>\n    </div>\n    <div class=\"novo-form-row\">\n        <novo-control [form]=\"textForm\" [control]=\"currencyControl\"></novo-control>\n    </div>\n    <div class=\"novo-form-row\">\n        <novo-control [form]=\"textForm\" [control]=\"floatControl\"></novo-control>\n    </div>\n    <div class=\"novo-form-row\">\n        <novo-control [form]=\"textForm\" [control]=\"percentageControl\"></novo-control>\n    </div>\n    <div class=\"novo-form-row\">\n        <novo-control [form]=\"textForm\" [control]=\"textAreaControl\"></novo-control>\n    </div>\n    <div class=\"novo-form-row\">\n        <novo-control [form]=\"textForm\" [control]=\"quickNoteControl\"></novo-control>\n    </div>\n    <div class=\"novo-form-row\">\n        <novo-control [form]=\"textForm\" [control]=\"aceEditorControl\"></novo-control>\n    </div>\n</novo-form>\n<div class=\"final-value\">Value: {{textForm.value | json}}</div>\n" }]
        }], ctorParameters: () => [{ type: i1$1.FormUtils }] });

/**
 * @title Picker Controls Example
 */
class PickerControlsExample {
    constructor(formUtils) {
        this.formUtils = formUtils;
        const fruits = ['Apples', 'Oranges', 'Bananas', 'Grapes'];
        const cities = [
            {
                id: 1,
                name: 'Boston',
            },
            {
                id: 2,
                name: 'New York',
            },
            {
                id: 3,
                name: 'Washington D.C.',
            },
            {
                id: 4,
                name: 'Orlando',
            },
            {
                id: 5,
                name: 'Houston',
            },
            {
                id: 6,
                name: 'Chicago',
            },
        ];
        const states = [
            {
                value: 'ME',
                label: 'Maine',
            },
            {
                value: 'MD',
                label: 'Maryland',
            },
            {
                value: 'MA',
                label: 'Massachusetts',
            },
            {
                value: 'MI',
                label: 'Michigan',
            },
            {
                value: 'MN',
                label: 'Minnesota',
            },
            {
                value: 'MS',
                label: 'Mississippi',
            },
            {
                value: 'MO',
                label: 'Missouri',
            },
            {
                value: 'MT',
                label: 'Montana',
            },
        ];
        // Picker controls
        this.singlePickerControl = new PickerControl({
            key: 'singlePicker',
            tooltip: 'Single',
            label: 'Single',
            config: { options: ['One', 'Two', 'Three'] },
        });
        this.multiPickerControl = new PickerControl({
            key: 'multiPicker',
            tooltip: 'Multiple',
            label: 'Multiple',
            multiple: true,
            config: { options: ['One', 'Two', 'Three'], type: 'candidate' },
        });
        this.multiPickerWithCustomTextControl = new PickerControl({
            key: 'multiPickerWithCustomText',
            tooltip: 'Multiple With Custom Text',
            label: 'Multiple With Custom Text',
            multiple: true,
            config: { options: ['One', 'Two', 'Three'], type: 'candidate', allowCustomValues: true },
        });
        this.multiPickerControlWithMaxlength = new PickerControl({
            key: 'multiPickerWithMaxlength',
            tooltip: 'Multiple With Maxlength',
            label: 'Multiple With Maxlength',
            multiple: true,
            maxlength: 2,
            config: {
                options: fruits,
                type: 'candidate',
            },
        });
        this.multiPickerControlWithMaxlengthAndPreselects = new PickerControl({
            key: 'multiPickerControlWithMaxlengthAndPreselects',
            tooltip: 'Multiple With Maxlength and Preselects',
            label: 'Multiple With Maxlength & Preselects',
            readOnly: true,
            multiple: true,
            maxlength: 2,
            config: {
                options: fruits,
                type: 'candidate',
            },
        });
        this.entityMultiPickerControl = new PickerControl({
            key: 'entityMultiPicker',
            label: 'Entities',
            required: true,
            readOnly: false,
            multiple: true,
            tooltip: 'Entities',
            config: {
                resultsTemplate: EntityPickerResults,
                previewTemplate: EntityPickerResult,
                format: '$title',
                options: [
                    {
                        title: 'Central Bank',
                        name: 'Central Bank',
                        email: 'new-bank-inquiries@centralbank.com',
                        phone: '(651) 555-1234',
                        address: { city: 'Washington', state: 'DC' },
                        searchEntity: 'ClientCorporation',
                    },
                    {
                        title: 'Federal Bank',
                        name: 'Federal Bank',
                        email: 'info@federalbank.com',
                        phone: '(545) 555-1212',
                        address: { city: 'Arlington', state: 'VA' },
                        searchEntity: 'ClientCorporation',
                    },
                    {
                        title: 'Aaron Burr',
                        firstName: 'Aaron',
                        lastName: 'Burr',
                        name: 'Aaron Burr',
                        companyName: 'Central Bank',
                        email: 'aburr@centralbank.com',
                        phone: '(333) 555-3434',
                        address: { city: 'Washington', state: 'DC' },
                        status: 'Hold',
                        searchEntity: 'ClientContact',
                    },
                    {
                        title: 'Alexander Hamilton',
                        firstName: 'Alexander',
                        lastName: 'Hamilton',
                        name: 'Alexander Hamilton',
                        companyName: 'Federal Bank',
                        email: 'ahamilton@federalbank.com',
                        phone: '(333) 555-2222',
                        address: { city: 'Arlington', state: 'VA' },
                        status: 'Active',
                        searchEntity: 'ClientContact',
                    },
                    {
                        title: 'Ben Franklin',
                        firstName: 'Ben',
                        lastName: 'Franklin',
                        name: 'Ben Franklin',
                        email: 'bfranklin@gmail.com',
                        phone: '(654) 525-2222',
                        address: { city: 'Boston', state: 'MA' },
                        status: 'Interviewing',
                        searchEntity: 'Candidate',
                    },
                    {
                        title: 'Thomas Jefferson',
                        firstName: 'Thomas',
                        lastName: 'Jefferson',
                        name: 'Thomas Jefferson',
                        email: 'tjefferson@usa.com',
                        phone: '(123) 542-1234',
                        address: { city: 'Arlington', state: 'VA' },
                        status: 'New Lead',
                        searchEntity: 'Candidate',
                    },
                ],
            },
        });
        this.rowMultiPickerControl = new PickerControl({
            key: 'rowMultiPickerControl',
            tooltip: 'Multiple Rows',
            label: 'Multiple Rows',
            multiple: true,
            config: {
                format: '$name',
                options: cities,
                type: 'candidate',
                columns: [
                    {
                        label: 'Name',
                        data: (item) => {
                            return item.label;
                        },
                    },
                    {
                        label: 'Id',
                        data: (item) => {
                            return item.value.id;
                        },
                    },
                ],
            },
        });
        this.rowMultiPickerControlWithMaxlength = new PickerControl({
            key: 'rowMultiPickerControlWithMaxlength',
            tooltip: 'Multiple Rows With Maxlength',
            label: 'Multiple Rows With Maxlength',
            multiple: true,
            maxlength: 4,
            config: {
                format: '$name',
                options: cities,
                type: 'candidate',
                columns: [
                    {
                        label: 'Name',
                        data: (item) => {
                            return item.label;
                        },
                    },
                    {
                        label: 'Id',
                        data: (item) => {
                            return item.value.id;
                        },
                    },
                ],
            },
        });
        this.textPickerWithGetLabels = new PickerControl({
            key: 'textPickerWithGetLabels',
            tooltip: 'Text Value Picker with getLabels()',
            label: 'Text Value Picker with getLabels()',
            multiple: false,
            config: {
                field: 'value',
                format: '$label',
                options: states,
                useGetLabels: true,
                getLabels: (value) => {
                    return new Promise((resolve) => {
                        states.forEach((state) => {
                            if (state.value === value) {
                                resolve(state);
                            }
                        });
                    });
                },
            },
        });
        const controls = [
            this.singlePickerControl,
            this.multiPickerControl,
            this.multiPickerWithCustomTextControl,
            this.entityMultiPickerControl,
            this.multiPickerControlWithMaxlength,
            this.multiPickerControlWithMaxlengthAndPreselects,
            this.rowMultiPickerControl,
            // this.rowMultiPickerControlWithMaxlength,
            this.textPickerWithGetLabels,
        ];
        formUtils.setInitialValues(controls, {
            entityMultiPicker: [
                {
                    title: 'Federal Bank',
                    name: 'Federal Bank',
                    email: 'info@federalbank.com',
                    phone: '(545) 555-1212',
                    address: { city: 'Arlington', state: 'VA' },
                    searchEntity: 'ClientCorporation',
                },
            ],
            multiPickerControlWithMaxlengthAndPreselects: ['Oranges', 'Bananas'],
            rowMultiPickerControlWithMaxlength: [
                {
                    id: 1,
                    name: 'Boston',
                },
                {
                    id: 5,
                    name: 'Houston',
                },
                {
                    id: 6,
                    name: 'Chicago',
                },
            ],
            textPickerWithGetLabels: 'MD',
        });
        this.pickerForm = formUtils.toFormGroup(controls);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: PickerControlsExample, deps: [{ token: i1$1.FormUtils }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: PickerControlsExample, isStandalone: false, selector: "picker-controls-example", ngImport: i0, template: "<!--Check out the FormDemo.js for more information!-->\n<novo-form [form]=\"pickerForm\">\n    <div class=\"novo-form-row\">\n        <novo-control [form]=\"pickerForm\" [control]=\"singlePickerControl\"></novo-control>\n    </div>\n    <div class=\"novo-form-row\">\n        <novo-control [form]=\"pickerForm\" [control]=\"multiPickerControl\"></novo-control>\n    </div>\n    <div class=\"novo-form-row\">\n        <novo-control [form]=\"pickerForm\" [control]=\"multiPickerWithCustomTextControl\"></novo-control>\n    </div>\n    <div class=\"novo-form-row\">\n        <novo-control [form]=\"pickerForm\" [control]=\"entityMultiPickerControl\"></novo-control>\n    </div>\n    <div class=\"novo-form-row\">\n      <novo-control [form]=\"pickerForm\" [control]=\"rowMultiPickerControl\"></novo-control>\n    </div>\n    <div class=\"novo-form-row\">\n      <novo-control [form]=\"pickerForm\" [control]=\"multiPickerControlWithMaxlength\"></novo-control>\n    </div>\n    <div class=\"novo-form-row\">\n      <novo-control [form]=\"pickerForm\" [control]=\"multiPickerControlWithMaxlengthAndPreselects\"></novo-control>\n    </div>\n    <!-- Row picker with maxlength is implemented but currently turned off because it is not being used and there was no UI created for it.\n         To turn it back on, add '[maxlength]=\"control?.maxlength\"' to ControlTemplate.ts\n    <div class=\"novo-form-row\">\n      <novo-control [form]=\"pickerForm\" [control]=\"rowMultiPickerControlWithMaxlength\"></novo-control>\n    </div-->\n    <div class=\"novo-form-row\">\n      <novo-control [form]=\"pickerForm\" [control]=\"textPickerWithGetLabels\"></novo-control>\n    </div>\n</novo-form>\n<div class=\"final-value\">Value: {{pickerForm.value | json}}</div>\n", styles: [""], dependencies: [{ kind: "component", type: i2$1.NovoControlElement, selector: "novo-control", inputs: ["control", "form", "condensed", "autoFocus"], outputs: ["change", "edit", "save", "delete", "upload", "blur", "focus"] }, { kind: "component", type: i2$1.NovoFormElement, selector: "novo-form", inputs: ["form", "layout", "hideHeader"] }, { kind: "pipe", type: i2.JsonPipe, name: "json" }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: PickerControlsExample, decorators: [{
            type: Component,
            args: [{ selector: 'picker-controls-example', standalone: false, template: "<!--Check out the FormDemo.js for more information!-->\n<novo-form [form]=\"pickerForm\">\n    <div class=\"novo-form-row\">\n        <novo-control [form]=\"pickerForm\" [control]=\"singlePickerControl\"></novo-control>\n    </div>\n    <div class=\"novo-form-row\">\n        <novo-control [form]=\"pickerForm\" [control]=\"multiPickerControl\"></novo-control>\n    </div>\n    <div class=\"novo-form-row\">\n        <novo-control [form]=\"pickerForm\" [control]=\"multiPickerWithCustomTextControl\"></novo-control>\n    </div>\n    <div class=\"novo-form-row\">\n        <novo-control [form]=\"pickerForm\" [control]=\"entityMultiPickerControl\"></novo-control>\n    </div>\n    <div class=\"novo-form-row\">\n      <novo-control [form]=\"pickerForm\" [control]=\"rowMultiPickerControl\"></novo-control>\n    </div>\n    <div class=\"novo-form-row\">\n      <novo-control [form]=\"pickerForm\" [control]=\"multiPickerControlWithMaxlength\"></novo-control>\n    </div>\n    <div class=\"novo-form-row\">\n      <novo-control [form]=\"pickerForm\" [control]=\"multiPickerControlWithMaxlengthAndPreselects\"></novo-control>\n    </div>\n    <!-- Row picker with maxlength is implemented but currently turned off because it is not being used and there was no UI created for it.\n         To turn it back on, add '[maxlength]=\"control?.maxlength\"' to ControlTemplate.ts\n    <div class=\"novo-form-row\">\n      <novo-control [form]=\"pickerForm\" [control]=\"rowMultiPickerControlWithMaxlength\"></novo-control>\n    </div-->\n    <div class=\"novo-form-row\">\n      <novo-control [form]=\"pickerForm\" [control]=\"textPickerWithGetLabels\"></novo-control>\n    </div>\n</novo-form>\n<div class=\"final-value\">Value: {{pickerForm.value | json}}</div>\n" }]
        }], ctorParameters: () => [{ type: i1$1.FormUtils }] });

/**
 * @title Number Range Control Example
 */
class NumberRangeControlExample {
    constructor() {
        this.exampleForm = new FormGroup({
            numberRangeControl1: new FormControl(),
            numberRangeControl2: new FormControl()
        });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: NumberRangeControlExample, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: NumberRangeControlExample, isStandalone: false, selector: "number-range-control-example", ngImport: i0, template: "<div [formGroup]=\"exampleForm\">\n  <h3>Example Number Range Controls</h3>\n  <div class=\"row-wrapper\">\n    <div class=\"example-row\">\n      <novo-label>Between: </novo-label>\n      <novo-number-range formControlName=\"numberRangeControl1\"></novo-number-range>\n    </div>\n    <div class=\"example-row\">\n      <novo-label>Between: </novo-label>\n      <novo-number-range formControlName=\"numberRangeControl2\"></novo-number-range>\n    </div>\n  </div>\n</div>\n\n<pre class=\"final-value\">Value: {{exampleForm?.value | json}}</pre>\n", styles: [".row-wrapper{display:flex;flex-direction:column;gap:2rem;margin:2rem}.example-row{display:flex;gap:2rem}novo-label{align-content:flex-end}\n"], dependencies: [{ kind: "directive", type: i1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i1.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { kind: "directive", type: i1.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { kind: "directive", type: i1.FormControlName, selector: "[formControlName]", inputs: ["formControlName", "disabled", "ngModel"], outputs: ["ngModelChange"] }, { kind: "component", type: i1$1.NumberRangeComponent, selector: "novo-number-range" }, { kind: "component", type: i2$1.NovoLabel, selector: "novo-label,[novo-label]", inputs: ["id"] }, { kind: "pipe", type: i2.JsonPipe, name: "json" }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: NumberRangeControlExample, decorators: [{
            type: Component,
            args: [{ selector: 'number-range-control-example', standalone: false, template: "<div [formGroup]=\"exampleForm\">\n  <h3>Example Number Range Controls</h3>\n  <div class=\"row-wrapper\">\n    <div class=\"example-row\">\n      <novo-label>Between: </novo-label>\n      <novo-number-range formControlName=\"numberRangeControl1\"></novo-number-range>\n    </div>\n    <div class=\"example-row\">\n      <novo-label>Between: </novo-label>\n      <novo-number-range formControlName=\"numberRangeControl2\"></novo-number-range>\n    </div>\n  </div>\n</div>\n\n<pre class=\"final-value\">Value: {{exampleForm?.value | json}}</pre>\n", styles: [".row-wrapper{display:flex;flex-direction:column;gap:2rem;margin:2rem}.example-row{display:flex;gap:2rem}novo-label{align-content:flex-end}\n"] }]
        }], ctorParameters: () => [] });

/**
 * @title File Input Controls Example
 */
class FileInputControlsExample {
    constructor(formUtils) {
        this.formUtils = formUtils;
        // custom upload validation
        this.message = '';
        // File input controls
        this.fileControl = new FileControl({ key: 'file', name: 'myfile', label: 'File', tooltip: 'Files Control' });
        this.multiFileControl = new FileControl({
            key: 'files',
            name: 'myfiles',
            label: 'Multiple Files',
            tooltip: 'Multiple Files',
            multiple: true,
            layoutOptions: { order: 'displayFilesBelow', download: true, edit: true, customActions: true, labelStyle: 'no-box' },
            value: [{ name: 'yourFile.pdf', loaded: true, link: 'www.google.com', description: 'file description' }],
        });
        this.fileForm = formUtils.toFormGroup([this.fileControl, this.multiFileControl]);
        this.customValidationFileControl = new FileControl({
            key: 'customValidationFiles',
            name: 'customValidationFiles',
            label: 'Custom Validation',
            tooltip: 'Custom Validation Multiple Files',
            multiple: true,
            layoutOptions: {
                order: 'displayFilesBelow',
                download: true,
                edit: true,
                customActions: false,
                customValidation: [{ action: 'upload', fn: this.checkFileSize.bind(this) }],
            },
        });
        this.customValidationFileForm = formUtils.toFormGroup([this.customValidationFileControl]);
        this.multiFileControlMixRemove = new FileControl({
            key: 'mixDeleteFiles',
            name: 'mymixDeleteFiles',
            label: 'Multiple Files - Delete New Only',
            tooltip: 'Multiple Files - Delete New Only',
            multiple: true,
            layoutOptions: {
                order: 'displayFilesBelow',
                labelStyle: 'no-box',
                download: true,
                edit: false,
                removable: false,
                removableWhenNew: true,
            },
            value: [{ name: 'yourFile.pdf', loaded: true, link: 'www.google.com', description: 'file description' }],
        });
        this.fileForm = formUtils.toFormGroup([this.fileControl, this.multiFileControl, this.multiFileControlMixRemove]);
    }
    handleEdit(file) {
        console.log('This is an Edit Action!', file); // tslint:disable-line
    }
    handleSave(file) {
        console.log('This is a Save Action!', file); // tslint:disable-line
    }
    handleDelete(file) {
        console.log('This is a Delete Action!', file); // tslint:disable-line
    }
    handleUpload(files) {
        console.log('This is an upload Action!', files); // tslint:disable-line
    }
    checkFileSize(fileList) {
        const maxSizeKb = 5120; // (5 MB in KB)
        for (const file of fileList) {
            if (file.size > maxSizeKb * 1024) {
                this.message = 'File is bigger than the allowed 5MB';
                return false;
            }
        }
        return true;
    }
    clearFileLists() {
        this.fileForm.patchValue({ file: null, files: null, mixDeleteFiles: null });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: FileInputControlsExample, deps: [{ token: i1$1.FormUtils }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: FileInputControlsExample, isStandalone: false, selector: "file-input-controls-example", ngImport: i0, template: "<!--Check out the FormDemo.js for more information!-->\n<novo-form [form]=\"fileForm\" layout=\"vertical\">\n    <div class=\"novo-form-row\">\n        <novo-control [form]=\"fileForm\" [control]=\"fileControl\"></novo-control>\n    </div>\n    <div class=\"novo-form-row\">\n        <novo-control [form]=\"fileForm\" [control]=\"multiFileControl\" (edit)=\"handleEdit($event)\" (save)=\"handleSave($event)\" (delete)=\"handleDelete($event)\" (upload)=\"handleUpload($event)\"></novo-control>\n    </div>\n    <div class=\"novo-form-row\">\n        <novo-control [form]=\"fileForm\" [control]=\"multiFileControlMixRemove\"></novo-control>\n    </div>\n</novo-form>\n<div class=\"final-value\">Value: {{fileForm.value | json}}</div>\n<br />\n<button class=\"clear-files-button\" theme=\"secondary\" (click)=\"clearFileLists()\">Clear File Lists</button>\n<br />\n<br />\n<novo-form layout=\"vertical\" [form]=\"customValidationFileForm\">\n    <div class=\"novo-form-row\">\n        <novo-control [form]=\"customValidationFileForm\" [control]=\"customValidationFileControl\"></novo-control>\n    </div>\n</novo-form>\n<div>{{ message }}</div>\n", styles: [""], dependencies: [{ kind: "component", type: i2$1.NovoButtonElement, selector: "novo-button,button[theme]", inputs: ["color", "side", "size", "theme", "loading", "icon", "secondIcon", "disabled"] }, { kind: "component", type: i2$1.NovoControlElement, selector: "novo-control", inputs: ["control", "form", "condensed", "autoFocus"], outputs: ["change", "edit", "save", "delete", "upload", "blur", "focus"] }, { kind: "component", type: i2$1.NovoFormElement, selector: "novo-form", inputs: ["form", "layout", "hideHeader"] }, { kind: "directive", type: i2$1.ThemeColorDirective, selector: "[theme]", inputs: ["theme"] }, { kind: "pipe", type: i2.JsonPipe, name: "json" }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: FileInputControlsExample, decorators: [{
            type: Component,
            args: [{ selector: 'file-input-controls-example', standalone: false, template: "<!--Check out the FormDemo.js for more information!-->\n<novo-form [form]=\"fileForm\" layout=\"vertical\">\n    <div class=\"novo-form-row\">\n        <novo-control [form]=\"fileForm\" [control]=\"fileControl\"></novo-control>\n    </div>\n    <div class=\"novo-form-row\">\n        <novo-control [form]=\"fileForm\" [control]=\"multiFileControl\" (edit)=\"handleEdit($event)\" (save)=\"handleSave($event)\" (delete)=\"handleDelete($event)\" (upload)=\"handleUpload($event)\"></novo-control>\n    </div>\n    <div class=\"novo-form-row\">\n        <novo-control [form]=\"fileForm\" [control]=\"multiFileControlMixRemove\"></novo-control>\n    </div>\n</novo-form>\n<div class=\"final-value\">Value: {{fileForm.value | json}}</div>\n<br />\n<button class=\"clear-files-button\" theme=\"secondary\" (click)=\"clearFileLists()\">Clear File Lists</button>\n<br />\n<br />\n<novo-form layout=\"vertical\" [form]=\"customValidationFileForm\">\n    <div class=\"novo-form-row\">\n        <novo-control [form]=\"customValidationFileForm\" [control]=\"customValidationFileControl\"></novo-control>\n    </div>\n</novo-form>\n<div>{{ message }}</div>\n" }]
        }], ctorParameters: () => [{ type: i1$1.FormUtils }] });

/**
 * @title Custom Demo Control
 */
class CustomDemoControlExample {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: CustomDemoControlExample, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: CustomDemoControlExample, isStandalone: false, selector: "custom-demo-control-example", inputs: { control: "control", form: "form", edit: "edit", save: "save", delete: "delete", upload: "upload" }, ngImport: i0, template: `<div [formGroup]="form">
    My Custom Input <input [formControlName]="control.key" [id]="control.key" [type]="control.type" [placeholder]="control.placeholder" />
  </div>`, isInline: true, dependencies: [{ kind: "directive", type: i1.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i1.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { kind: "directive", type: i1.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { kind: "directive", type: i1.FormControlName, selector: "[formControlName]", inputs: ["formControlName", "disabled", "ngModel"], outputs: ["ngModelChange"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: CustomDemoControlExample, decorators: [{
            type: Component,
            args: [{
                    selector: 'custom-demo-control-example',
                    template: `<div [formGroup]="form">
    My Custom Input <input [formControlName]="control.key" [id]="control.key" [type]="control.type" [placeholder]="control.placeholder" />
  </div>`,
                    standalone: false
                }]
        }], propDecorators: { control: [{
                type: Input
            }], form: [{
                type: Input
            }], edit: [{
                type: Input
            }], save: [{
                type: Input
            }], delete: [{
                type: Input
            }], upload: [{
                type: Input
            }] } });

/**
 * @title Check Box Controls Example
 */
class CheckBoxControlsExample {
    constructor(formUtils) {
        this.formUtils = formUtils;
        // Check box controls
        this.switchControl = new SwitchControl({ key: 'switch', tooltip: 'Switch', label: 'Switch', checkboxLabel: 'Switch' });
        this.checkControl = new CheckboxControl({ key: 'check', tooltip: 'Checkbox', label: 'Checkbox', checkboxLabel: 'Checkbox' });
        this.checkListControl = new CheckListControl({
            key: 'checklist',
            label: 'Check List',
            options: ['One', 'Two', 'Three'],
            tooltip: 'CheckList',
            tooltipPosition: 'top',
        });
        this.tilesControl = new TilesControl({
            key: 'tiles',
            label: 'Tiles',
            options: [
                { value: 'one', label: 'One' },
                { value: 'two', label: 'Two' },
                { value: 'disabled', label: 'Disabled', disabled: true },
            ],
            tooltip: 'Tiles',
        });
        this.disabledTilesControl = new TilesControl({
            key: 'disabledTiles',
            label: 'Disabled Tiles',
            readOnly: true,
            options: [
                { value: 'one', label: 'One' },
                { value: 'two', label: 'Two' },
            ],
            tooltip: 'Tiles',
        });
        this.checkForm = formUtils.toFormGroup([
            this.switchControl,
            this.checkControl,
            this.checkListControl,
            this.tilesControl,
            this.disabledTilesControl,
        ]);
    }
    onChange(value) {
        console.log('I changed!', value); // tslint:disable-line
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: CheckBoxControlsExample, deps: [{ token: i1$1.FormUtils }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: CheckBoxControlsExample, isStandalone: false, selector: "check-box-controls-example", ngImport: i0, template: "<!--Check out the FormDemo.js for more information!-->\n<novo-form [form]=\"checkForm\">\n  <div class=\"novo-form-row\">\n    <novo-control [form]=\"checkForm\" [control]=\"checkControl\"></novo-control>\n  </div>\n  <div class=\"novo-form-row\">\n    <novo-control [form]=\"checkForm\" [control]=\"checkListControl\"></novo-control>\n  </div>\n  <div class=\"novo-form-row\">\n    <novo-control [form]=\"checkForm\" [control]=\"tilesControl\" (change)=\"onChange($event)\"></novo-control>\n  </div>\n  <div class=\"novo-form-row\">\n    <novo-control [form]=\"checkForm\" [control]=\"disabledTilesControl\" (change)=\"onChange($event)\"></novo-control>\n  </div>\n  <div class=\"novo-form-row\">\n    <novo-control [form]=\"checkForm\" [control]=\"switchControl\" (change)=\"onChange($event)\"></novo-control>\n  </div>\n</novo-form>\n<div class=\"final-value\">Value: {{checkForm.value | json}}</div>", styles: [""], dependencies: [{ kind: "component", type: i2$1.NovoControlElement, selector: "novo-control", inputs: ["control", "form", "condensed", "autoFocus"], outputs: ["change", "edit", "save", "delete", "upload", "blur", "focus"] }, { kind: "component", type: i2$1.NovoFormElement, selector: "novo-form", inputs: ["form", "layout", "hideHeader"] }, { kind: "pipe", type: i2.JsonPipe, name: "json" }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: CheckBoxControlsExample, decorators: [{
            type: Component,
            args: [{ selector: 'check-box-controls-example', standalone: false, template: "<!--Check out the FormDemo.js for more information!-->\n<novo-form [form]=\"checkForm\">\n  <div class=\"novo-form-row\">\n    <novo-control [form]=\"checkForm\" [control]=\"checkControl\"></novo-control>\n  </div>\n  <div class=\"novo-form-row\">\n    <novo-control [form]=\"checkForm\" [control]=\"checkListControl\"></novo-control>\n  </div>\n  <div class=\"novo-form-row\">\n    <novo-control [form]=\"checkForm\" [control]=\"tilesControl\" (change)=\"onChange($event)\"></novo-control>\n  </div>\n  <div class=\"novo-form-row\">\n    <novo-control [form]=\"checkForm\" [control]=\"disabledTilesControl\" (change)=\"onChange($event)\"></novo-control>\n  </div>\n  <div class=\"novo-form-row\">\n    <novo-control [form]=\"checkForm\" [control]=\"switchControl\" (change)=\"onChange($event)\"></novo-control>\n  </div>\n</novo-form>\n<div class=\"final-value\">Value: {{checkForm.value | json}}</div>" }]
        }], ctorParameters: () => [{ type: i1$1.FormUtils }] });

/**
 * @title Calendar Input Controls Example
 */
class CalendarInputControlsExample {
    constructor(formUtils) {
        this.formUtils = formUtils;
        // Calendar input controls
        this.dateControl = new DateControl({
            key: 'date',
            label: 'Date',
            tooltip: 'Date',
            startDate: new Date().setMonth(new Date().getMonth() - 1),
        });
        this.userDefinedDateControl = new DateControl({
            key: 'userDefinedFormat',
            label: 'User Defined Format',
            tooltip: 'Date',
            dateFormat: 'MMM Do YYYY (dd)',
            textMaskEnabled: false,
        });
        this.timeControl = new TimeControl({ key: 'time', label: 'Time', tooltip: 'Time' });
        this.dateTimeControl = new DateTimeControl({ key: 'dateTime', tooltip: 'Date Time', label: 'Date Time', military: true });
        this.timezoneControl = new TimezoneControl({ key: 'timezone', tooltip: 'Timezone', label: 'Timezone' });
        this.calendarForm = formUtils.toFormGroup([
            this.dateControl,
            this.userDefinedDateControl,
            this.timeControl,
            this.dateTimeControl,
            this.timezoneControl,
        ]);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: CalendarInputControlsExample, deps: [{ token: i1$1.FormUtils }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: CalendarInputControlsExample, isStandalone: false, selector: "calendar-input-controls-example", ngImport: i0, template: "<!--Check out the FormDemo.js for more information!-->\n<novo-form [form]=\"calendarForm\" layout=\"vertical\">\n  <div class=\"novo-form-row\">\n    <novo-control [form]=\"calendarForm\" [control]=\"dateControl\"></novo-control>\n  </div>\n  <div class=\"novo-form-row\">\n    <novo-control [form]=\"calendarForm\" [control]=\"userDefinedDateControl\"></novo-control>\n  </div>\n  <div class=\"novo-form-row\">\n    <novo-control [form]=\"calendarForm\" [control]=\"timeControl\"></novo-control>\n  </div>\n  <div class=\"novo-form-row\">\n    <novo-control [form]=\"calendarForm\" [control]=\"dateTimeControl\"></novo-control>\n  </div>\n  <div class=\"novo-form-row\">\n    <novo-control [form]=\"calendarForm\" [control]=\"timezoneControl\"></novo-control>\n  </div>\n</novo-form>\n<div class=\"final-value\">Value: {{calendarForm.value | json}}</div>", styles: [""], dependencies: [{ kind: "component", type: i2$1.NovoControlElement, selector: "novo-control", inputs: ["control", "form", "condensed", "autoFocus"], outputs: ["change", "edit", "save", "delete", "upload", "blur", "focus"] }, { kind: "component", type: i2$1.NovoFormElement, selector: "novo-form", inputs: ["form", "layout", "hideHeader"] }, { kind: "pipe", type: i2.JsonPipe, name: "json" }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: CalendarInputControlsExample, decorators: [{
            type: Component,
            args: [{ selector: 'calendar-input-controls-example', standalone: false, template: "<!--Check out the FormDemo.js for more information!-->\n<novo-form [form]=\"calendarForm\" layout=\"vertical\">\n  <div class=\"novo-form-row\">\n    <novo-control [form]=\"calendarForm\" [control]=\"dateControl\"></novo-control>\n  </div>\n  <div class=\"novo-form-row\">\n    <novo-control [form]=\"calendarForm\" [control]=\"userDefinedDateControl\"></novo-control>\n  </div>\n  <div class=\"novo-form-row\">\n    <novo-control [form]=\"calendarForm\" [control]=\"timeControl\"></novo-control>\n  </div>\n  <div class=\"novo-form-row\">\n    <novo-control [form]=\"calendarForm\" [control]=\"dateTimeControl\"></novo-control>\n  </div>\n  <div class=\"novo-form-row\">\n    <novo-control [form]=\"calendarForm\" [control]=\"timezoneControl\"></novo-control>\n  </div>\n</novo-form>\n<div class=\"final-value\">Value: {{calendarForm.value | json}}</div>" }]
        }], ctorParameters: () => [{ type: i1$1.FormUtils }] });

/**
 * @title Address Control Example
 */
class AddressControlExample {
    constructor(formUtils) {
        this.formUtils = formUtils;
        this.states = [
            {
                value: 'MA',
                label: 'Massachusetts',
                countryId: 1,
            },
            {
                value: 'NY',
                label: 'New York',
                countryId: 1,
            },
            {
                value: 'AB',
                label: 'Alberta',
                countryId: 2216,
            },
            {
                value: 'BC',
                label: 'British Columbia',
                countryId: 2216,
            },
            {
                value: 'MB',
                label: 'Manitoba',
                countryId: 2216,
            },
        ];
        // Address control
        this.addressControl = new AddressControl({
            key: 'address',
            name: 'address',
            label: 'Address',
            tooltip: 'Address',
            config: {
                address1: {
                    label: 'Address Line 1',
                    required: true,
                    maxlength: 20,
                },
                address2: {
                    label: 'Address Line 2',
                    required: true,
                    maxlength: 15,
                },
                state: {
                    label: 'State',
                    required: true,
                },
                countryID: {
                    label: 'Country',
                    required: true,
                },
                city: {
                    label: 'City',
                    required: true,
                },
                zip: {
                    label: 'Zipcode',
                    required: true,
                },
            },
            value: {
                address1: '321 Summer Street',
                address2: '11 Washington Street',
                city: 'Chicago',
                state: 'California',
                zip: 95133,
                countryID: 1,
            },
        });
        this.secondaryAddressControl = new AddressControl({
            key: 'secondaryAddress',
            name: 'secondaryAddress',
            label: 'Secondary Address',
            tooltip: 'Secondary Address',
            config: {
                address1: {
                    label: 'Address Line 1',
                    maxlength: 20,
                },
                address2: {
                    label: 'Address Line 2',
                    maxlength: 15,
                },
                state: {
                    label: 'State',
                    pickerConfig: {
                        field: 'value',
                        format: '$label',
                        options: (query, countryID) => {
                            return Promise.resolve(this.getStateOptions(query, countryID));
                        },
                        getLabels: (value) => {
                            return Promise.resolve(this.getStateLabel(value));
                        },
                    },
                },
                countryID: {
                    label: 'Country',
                    pickerConfig: {
                        field: 'value',
                        format: '$label',
                        options: (query) => {
                            return Promise.resolve(this.getCountryOptions(query));
                        },
                        getLabels: (value) => {
                            return new Promise((resolve) => {
                                const country = findByCountryId(value);
                                if (country) {
                                    resolve({ value: country.id, label: country.name });
                                }
                                else {
                                    resolve('');
                                }
                            });
                        },
                    },
                },
                city: {
                    label: 'City',
                },
                zip: {
                    label: 'Zipcode',
                },
            },
            value: {
                address1: '123 Summer Street',
                address2: '10 Washington Street and stuff',
                countryID: 2359,
            },
        });
        this.addressFormControls = [this.addressControl, this.secondaryAddressControl];
        this.addressForm = formUtils.toFormGroup(this.addressFormControls);
    }
    getStateOptions(filter = '', countryID) {
        let states = this.states;
        if (countryID) {
            states = states.filter((state) => state.countryId === countryID);
        }
        if (filter && filter.length) {
            states = states.filter((state) => new RegExp(`${filter}`, 'gi').test(state.label));
        }
        return states;
    }
    getStateLabel(value) {
        const state = this.states.find((s) => {
            return s.value === value;
        });
        if (state && state.label) {
            return state.label;
        }
        return '';
    }
    getCountryOptions(filter) {
        let countries = [
            {
                value: 2356,
                label: 'Uganda',
            },
            {
                value: 2357,
                label: 'Ukraine',
            },
            {
                value: 2358,
                label: 'United Arab Emirates',
            },
            {
                value: 2359,
                label: 'United Kingdom',
            },
            {
                value: 1,
                label: 'United States',
            },
            {
                value: 2443,
                label: 'United States Minor Outlying Islands',
            },
            {
                value: 2360,
                label: 'Uruguay',
            },
            {
                value: 2361,
                label: 'Uzbekistan',
            },
        ];
        if (filter && filter.length) {
            countries = countries.filter((country) => new RegExp(`${filter}`, 'gi').test(country.label));
        }
        return countries;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: AddressControlExample, deps: [{ token: i1$1.FormUtils }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: AddressControlExample, isStandalone: false, selector: "address-control-example", ngImport: i0, template: "<novo-form [form]=\"addressForm\">\n  <div class=\"novo-form-row\">\n    <novo-control [form]=\"addressForm\" [control]=\"addressControl\"></novo-control>\n  </div>\n  <div class=\"novo-form-row\">\n    <novo-control [form]=\"addressForm\" [control]=\"secondaryAddressControl\"></novo-control>\n  </div>\n</novo-form>\n\n<div class=\"final-value\">Value: {{addressForm.value | json}}</div>\n", styles: [""], dependencies: [{ kind: "component", type: i2$1.NovoControlElement, selector: "novo-control", inputs: ["control", "form", "condensed", "autoFocus"], outputs: ["change", "edit", "save", "delete", "upload", "blur", "focus"] }, { kind: "component", type: i2$1.NovoFormElement, selector: "novo-form", inputs: ["form", "layout", "hideHeader"] }, { kind: "pipe", type: i2.JsonPipe, name: "json" }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: AddressControlExample, decorators: [{
            type: Component,
            args: [{ selector: 'address-control-example', standalone: false, template: "<novo-form [form]=\"addressForm\">\n  <div class=\"novo-form-row\">\n    <novo-control [form]=\"addressForm\" [control]=\"addressControl\"></novo-control>\n  </div>\n  <div class=\"novo-form-row\">\n    <novo-control [form]=\"addressForm\" [control]=\"secondaryAddressControl\"></novo-control>\n  </div>\n</novo-form>\n\n<div class=\"final-value\">Value: {{addressForm.value | json}}</div>\n" }]
        }], ctorParameters: () => [{ type: i1$1.FormUtils }] });

const MockMeta = {
    entity: 'ENTITY_NAME',
    entityMetaUrl: '',
    label: 'ENTITY_LABEL',
    fields: [
        {
            name: 'firstName',
            type: 'text',
            label: 'Name',
            required: true,
            sortOrder: 10,
            maxLength: 10,
            description: 'First Name, Yo!',
        },
        {
            name: 'lastName',
            type: 'text',
            label: 'Name',
            hint: 'Last Name, Yo!',
            description: 'Last Name, Yo!',
            sortOrder: 10,
        },
        {
            name: 'groupedItems',
            type: 'group',
            label: 'Groupd Items',
            sortOrder: 11,
            icon: 'section',
            fields: [
                {
                    name: 'label',
                    type: 'text',
                    label: 'Label',
                    sortOrder: 10,
                    maxLength: 10,
                },
                {
                    name: 'description',
                    type: 'text',
                    label: 'Description',
                    sortOrder: 20,
                },
            ],
        },
        {
            name: 'number',
            type: 'number',
            label: 'Number',
            required: true,
            disabled: true,
            sortOrder: 40,
        },
        {
            name: 'dateFounded',
            type: 'number',
            label: 'Date Founded',
            dataSpecialization: 'YEAR',
            sortOrder: 40,
            description: 'Year when this company was founded',
        },
        {
            name: 'float',
            type: 'float',
            label: 'Float',
            required: true,
            sortOrder: 50,
            description: '<span><b>BOLD</b> description with a <a target="_blank" href="https://www.google.com">Google</a> Link</span>'
        },
        {
            name: 'currency',
            type: 'money',
            label: 'Cost',
            currencyFormat: 'USD',
            sortOrder: 60,
        },
        {
            name: 'percent',
            type: 'percentage',
            label: 'Percentage',
            required: true,
            sortOrder: 70,
        },
        {
            name: 'date',
            type: 'date',
            label: 'Date',
            required: true,
            sortOrder: 90,
            dateFormat: 'ddd MMM DD, YYYY', // Add this to your MetaData to override the dateFormat
            defaultValue: new Date(2016, 1, 1),
        },
        {
            name: 'time',
            type: 'time',
            label: 'Time',
            required: true,
            sortOrder: 100,
        },
        {
            name: 'native-time',
            type: 'native-time',
            label: 'Native Time',
            required: true,
            sortOrder: 101,
        },
        {
            name: 'native-datetime-local',
            type: 'native-datetime-local',
            label: 'Native Date Time Local',
            required: true,
            sortOrder: 102,
        },
        {
            name: 'datetime',
            type: 'date-time',
            label: 'DateTime',
            dataSpecialization: 'DATETIME',
            required: true,
            sortOrder: 110,
        },
        {
            name: 'status',
            type: 'select',
            dataType: 'String',
            maxLength: 200,
            confidential: false,
            required: true,
            hint: 'Placeholder Text',
            label: 'Status',
            options: [
                {
                    value: 'Open',
                    label: 'Open',
                },
                {
                    value: 'Qualifying',
                    label: 'Qualifying',
                },
                {
                    value: 'Negotiating',
                    label: 'Negotiating',
                },
                {
                    value: 'TRIGGER',
                    label: 'TRIGGER',
                },
            ],
            sortOrder: 120,
        },
        {
            name: 'nextAction',
            type: 'tiles',
            dataType: 'String',
            label: 'Next Action',
            required: true,
            options: [
                {
                    value: 'none',
                    label: 'None',
                },
                {
                    value: 'task',
                    label: 'Task',
                },
                {
                    value: 'appointment',
                    label: 'Appointment',
                },
            ],
            sortOrder: 130,
        },
        {
            name: 'state',
            type: 'picker',
            dataType: 'String',
            maxLength: 200,
            confidential: false,
            label: 'State',
            required: true,
            // TODO: Align picker with META by passing META obj into picker
            // options: [ /* flat array of states */ ]
            options: {
                options: [
                    'Alabama',
                    'Alaska',
                    'Arizona',
                    'Arkansas',
                    'California',
                    'Colorado',
                    'Connecticut',
                    'Delaware',
                    'Florida',
                    'Georgia',
                    'Hawaii',
                    'Idaho',
                    'Illinois',
                    'Indiana',
                    'Iowa',
                    'Kansas',
                    'Kentucky',
                    'Louisiana',
                    'Maine',
                    'Maryland',
                    'Massachusetts',
                    'Michigan',
                    'Minnesota',
                    'Mississippi',
                    'Missouri',
                    'Montana',
                    'Nebraska',
                    'Nevada',
                    'New Hampshire',
                    'New Jersey',
                    'New Mexico',
                    'New York',
                    'North Dakota',
                    'North Carolina',
                    'Ohio',
                    'Oklahoma',
                    'Oregon',
                    'Pennsylvania',
                    'Rhode Island',
                    'South Carolina',
                    'South Dakota',
                    'Tennessee',
                    'Texas',
                    'Utah',
                    'Vermont',
                    'Virginia',
                    'Washington',
                    'West Virginia',
                    'Wisconsin',
                    'Wyoming',
                ],
            },
            sortOrder: 530,
        },
        {
            name: 'startDate',
            type: 'datetime',
            dataType: 'Timestamp',
            label: 'Start Date',
            disabled: true,
            required: true,
            sortOrder: 540,
        },
        {
            name: 'quota',
            type: 'number',
            dataType: 'Integer',
            label: 'Quota',
            required: true,
            sortOrder: 550,
        },
        {
            name: 'secret',
            type: 'hidden',
            dataType: 'String',
            label: 'Top Secret',
            required: true,
            defaultValue: 'The secret code is: 08322',
            sortOrder: 560,
        },
        {
            name: 'categories',
            type: 'picker',
            confidential: false,
            optional: false,
            label: 'Categories',
            required: true,
            readOnly: false,
            multiValue: true,
            inputType: 'SELECT',
            options: [
                {
                    value: 'Open',
                    label: 'Open',
                },
                {
                    value: 'Qualifying',
                    label: 'Qualifying',
                },
                {
                    value: 'Negotiating',
                    label: 'Negotiating',
                },
                {
                    value: 'TRIGGER',
                    label: 'TRIGGER',
                },
            ],
            sortOrder: 570,
        },
        {
            name: 'owner',
            type: 'entity',
            confidential: false,
            optional: false,
            label: 'Owner',
            required: false,
            readOnly: true,
            multiValue: false,
            inputType: 'SELECT',
            optionsType: 'CorporateUser',
            optionsUrl: '/options/CorporateUser',
            hideFromSearch: false,
            associatedEntity: {
                entity: 'CorporateUser',
                label: 'Corporate User',
            },
            sortOrder: 580,
        },
        {
            name: 'address',
            type: 'address',
            dataType: 'Address',
            dataSpecialization: 'SYSTEM',
            confidential: false,
            optional: true,
            label: 'Address',
            required: false,
            readOnly: false,
            multiValue: false,
            hideFromSearch: true,
            tooltip: 'Address Block',
            fields: [
                {
                    name: 'address1',
                    type: 'SCALAR',
                    dataType: 'String',
                    maxLength: 40,
                    confidential: false,
                    optional: true,
                    label: 'Addressxxx',
                    required: true,
                    readOnly: false,
                    multiValue: false,
                    hideFromSearch: false,
                    defaultValue: '100 Summer St',
                },
                {
                    name: 'address2',
                    type: 'SCALAR',
                    dataType: 'String',
                    maxLength: 40,
                    confidential: false,
                    optional: true,
                    label: 'Address 2',
                    required: false,
                    readOnly: false,
                    multiValue: false,
                    hideFromSearch: false,
                    defaultValue: 'apt 25',
                },
                {
                    name: 'city',
                    type: 'SCALAR',
                    dataType: 'String',
                    maxLength: 40,
                    confidential: false,
                    optional: true,
                    label: 'City',
                    required: false,
                    readOnly: false,
                    multiValue: false,
                    hideFromSearch: false,
                },
                {
                    name: 'state',
                    type: 'SCALAR',
                    dataType: 'String',
                    maxLength: 30,
                    confidential: false,
                    optional: true,
                    label: 'State',
                    required: true,
                    readOnly: false,
                    multiValue: false,
                    inputType: 'SELECT',
                    hideFromSearch: false,
                },
                {
                    name: 'zip',
                    type: 'SCALAR',
                    dataType: 'String',
                    maxLength: 15,
                    confidential: false,
                    optional: true,
                    label: 'Zip',
                    required: false,
                    readOnly: false,
                    multiValue: false,
                    hideFromSearch: false,
                },
                {
                    name: 'countryID',
                    type: 'SCALAR',
                    dataType: 'Integer',
                    confidential: false,
                    optional: false,
                    label: 'Country',
                    required: false,
                    readOnly: false,
                    multiValue: false,
                    inputType: 'SELECT',
                    defaultValue: 2260,
                    hideFromSearch: false,
                },
                {
                    name: 'countryCode',
                    type: 'SCALAR',
                    dataType: 'String',
                    maxLength: 0,
                    optional: true,
                },
                {
                    name: 'countryName',
                    type: 'SCALAR',
                    dataType: 'String',
                    maxLength: 0,
                    optional: true,
                },
            ],
            sortOrder: 590,
        },
        {
            name: 'checkbox',
            type: 'checkbox',
            label: 'Checkbox',
            sortOrder: 600,
        },
        {
            name: 'checklist',
            type: 'checklist',
            label: 'CheckList',
            options: ['Morning', 'Day', 'Night', 'Overnight'],
            required: true,
            sortOrder: 610,
        },
        {
            name: 'attachments',
            type: 'file',
            label: 'Attachments',
            multiValue: true,
            required: true,
            sortOrder: 630,
        },
        {
            defaultValue: 'Cold',
            inputType: 'RADIO',
            label: 'Types/Ratings',
            maxLength: 100,
            multiValue: false,
            name: 'type',
            optional: true,
            options: [
                {
                    value: 'Hot',
                    label: 'Hot',
                },
                {
                    value: 'Cold',
                    label: 'Cold',
                },
                {
                    value: 'Eh...',
                    label: 'Eh...',
                },
            ],
            required: true,
            sortOrder: 9000,
        },
        {
            inputType: 'RADIO',
            label: 'Like?',
            maxLength: 100,
            multiValue: false,
            name: 'like',
            optional: true,
            options: [
                {
                    value: 'Yes',
                    label: 'Yes',
                    icon: 'check',
                },
                {
                    value: 'No',
                    label: 'No',
                    icon: 'times',
                },
            ],
            required: true,
            sortOrder: 9000,
        },
        {
            name: 'comments',
            type: 'textarea',
            label: 'Comments',
            required: true,
            sortOrder: 9010,
            maxLength: 150,
            description: 'Comments, Please',
        },
        {
            name: 'address',
            type: 'address',
            label: 'Address',
            required: true,
            sortOrder: 620,
        },
        {
            name: 'customfield',
            label: 'Custom Component',
            required: true,
            description: 'This is a custom component you can use instead',
        },
        {
            name: 'htmlFieldFullEditor',
            label: 'CK Editor - Full',
            required: true,
            sortOrder: 9011,
            dataSpecialization: 'HTML',
            type: 'SCALAR',
            dataType: 'String',
        },
        {
            name: 'htmlFieldMinimalEditor',
            label: 'CK Editor - Minimal',
            required: true,
            sortOrder: 9012,
            dataSpecialization: 'HTML-MINIMAL',
            type: 'SCALAR',
            dataType: 'String',
        },
    ],
};
const MockMetaHeaders = {
    sectionHeaders: [
        {
            label: 'Section With Custom Icon',
            name: 'sectionHeader3',
            sortOrder: 600,
            enabled: true,
            icon: 'bhi-certification',
        },
        {
            label: 'Section 2',
            name: 'sectionHeader2',
            sortOrder: 500,
            enabled: true,
        },
        {
            label: 'Section 1',
            name: 'sectionHeader1',
            sortOrder: 45,
            enabled: true,
        },
    ],
};
Object.assign(MockMetaHeaders, MockMeta);
const MockMetaForDisabledForm = {
    entity: 'ENTITY_NAME',
    entityMetaUrl: '',
    label: 'ENTITY_LABEL',
    fields: [
        {
            name: 'textbox',
            type: 'text',
            label: 'TextBox',
            required: true,
            sortOrder: 120,
            maxLength: 10,
        },
        {
            name: 'textarea',
            type: 'textarea',
            label: 'TextArea',
            required: true,
            sortOrder: 120,
            maxLength: 10,
        },
        {
            name: 'number',
            type: 'number',
            label: 'Number',
            required: true,
            sortOrder: 121,
        },
        {
            name: 'year',
            type: 'number',
            label: 'Year',
            dataSpecialization: 'YEAR',
            required: true,
            sortOrder: 122,
        },
        {
            name: 'float',
            type: 'float',
            label: 'Float',
            required: true,
            sortOrder: 123,
        },
        {
            name: 'currency',
            type: 'money',
            label: 'Currency',
            currencyFormat: 'USD',
            required: true,
            sortOrder: 124,
        },
        {
            name: 'percent',
            type: 'percentage',
            label: 'Percentage',
            required: true,
            sortOrder: 125,
        },
        {
            name: 'date',
            type: 'date',
            label: 'Date',
            required: true,
            sortOrder: 40,
            defaultValue: new Date(2016, 1, 1),
        },
        {
            name: 'time',
            type: 'time',
            label: 'Time',
            required: true,
            sortOrder: 140,
            defaultValue: new Date(2016, 1, 1, 9, 0, 0, 0),
        },
        {
            name: 'datetime',
            type: 'date-time',
            label: 'DateTime',
            dataSpecialization: 'DATETIME',
            required: true,
            sortOrder: 50,
            defaultValue: new Date(2016, 1, 1, 9, 0, 0, 0),
        },
        {
            name: 'select',
            type: 'select',
            dataType: 'String',
            maxLength: 200,
            confidential: false,
            label: 'Select',
            options: [
                {
                    value: 'Open',
                    label: 'Open',
                },
                {
                    value: 'disabledValue',
                    label: 'Disabled Value',
                },
            ],
            sortOrder: 100,
        },
        {
            name: 'tiles',
            type: 'tiles',
            dataType: 'String',
            label: 'Tiles',
            required: true,
            options: [
                {
                    value: 'None',
                    label: 'None',
                },
                {
                    value: 'Disabled',
                    label: 'Disabled',
                },
                {
                    value: 'Enabled',
                    label: 'Enabled',
                },
            ],
            sortOrder: 130,
        },
        {
            name: 'picker',
            type: 'picker',
            dataType: 'String',
            maxLength: 200,
            confidential: false,
            label: 'Picker',
            required: true,
            options: {
                options: ['Alabama', 'Alaska', 'Disabled Picker'],
            },
            sortOrder: 80,
        },
        {
            name: 'chips',
            type: 'picker',
            confidential: false,
            optional: false,
            label: 'Chips',
            required: true,
            readOnly: false,
            multiValue: true,
            inputType: 'SELECT',
            options: [
                {
                    value: 'Open',
                    label: 'Open',
                },
                {
                    value: 'Disabled',
                    label: 'Disabled',
                },
                {
                    value: 'Chip',
                    label: 'Chip',
                },
                {
                    value: 'TRIGGER',
                    label: 'TRIGGER',
                },
            ],
            sortOrder: 150,
        },
        {
            name: 'rowChips',
            type: 'TO_MANY',
            confidential: false,
            optional: false,
            label: 'Row Chips',
            required: true,
            readOnly: false,
            multiValue: false,
            options: [
                {
                    id: 1,
                    value: 'Disabled Row Chip',
                    description: 'This is a disabled Row Chip',
                },
            ],
            hideFromSearch: false,
            sortOrder: 160,
        },
        {
            name: 'address',
            type: 'COMPOSITE',
            dataType: 'Address',
            dataSpecialization: 'SYSTEM',
            confidential: false,
            optional: false,
            label: 'Address',
            required: true,
            readOnly: false,
            multiValue: false,
            hideFromSearch: true,
            tooltip: 'Address Block',
            fields: [
                {
                    name: 'address1',
                    type: 'SCALAR',
                    dataType: 'String',
                    maxLength: 40,
                    confidential: false,
                    optional: true,
                    label: 'Address 1',
                    required: true,
                    readOnly: false,
                    multiValue: false,
                    hideFromSearch: false,
                },
                {
                    name: 'address2',
                    type: 'SCALAR',
                    dataType: 'String',
                    maxLength: 40,
                    confidential: false,
                    optional: true,
                    label: 'Address 2',
                    required: false,
                    readOnly: false,
                    multiValue: false,
                    hideFromSearch: false,
                },
                {
                    name: 'city',
                    type: 'SCALAR',
                    dataType: 'String',
                    maxLength: 40,
                    confidential: false,
                    optional: true,
                    label: 'City',
                    required: false,
                    readOnly: false,
                    multiValue: false,
                    hideFromSearch: false,
                },
                {
                    name: 'state',
                    type: 'SCALAR',
                    dataType: 'String',
                    maxLength: 30,
                    confidential: false,
                    optional: true,
                    label: 'State',
                    required: true,
                    readOnly: false,
                    multiValue: false,
                    inputType: 'SELECT',
                    hideFromSearch: false,
                },
                {
                    name: 'zip',
                    type: 'SCALAR',
                    dataType: 'String',
                    maxLength: 15,
                    confidential: false,
                    optional: true,
                    label: 'Zip',
                    required: false,
                    readOnly: false,
                    multiValue: false,
                    hideFromSearch: false,
                },
                {
                    name: 'countryID',
                    type: 'SCALAR',
                    dataType: 'Integer',
                    confidential: false,
                    optional: false,
                    label: 'Country',
                    required: false,
                    readOnly: false,
                    multiValue: false,
                    inputType: 'SELECT',
                    defaultValue: 2260,
                    hideFromSearch: false,
                },
                {
                    name: 'countryCode',
                    type: 'SCALAR',
                    dataType: 'String',
                    maxLength: 0,
                    optional: true,
                },
                {
                    name: 'countryName',
                    type: 'SCALAR',
                    dataType: 'String',
                    maxLength: 0,
                    optional: true,
                },
            ],
            sortOrder: 10,
        },
        {
            name: 'checkbox',
            type: 'checkbox',
            label: 'Checkbox',
            defaultValue: true,
            sortOrder: 20,
        },
        {
            name: 'checklist',
            type: 'checklist',
            label: 'CheckList',
            options: [
                {
                    value: 'None',
                    label: 'None',
                },
                {
                    value: 'Disabled',
                    label: 'Disabled',
                },
                {
                    value: 'Enabled',
                    label: 'Enabled',
                },
            ],
            required: true,
            sortOrder: 30,
        },
        {
            name: 'file',
            type: 'file',
            label: 'File',
            multiValue: true,
            required: true,
            sortOrder: 70,
        },
        {
            defaultValue: 'disabled',
            inputType: 'RADIO',
            label: 'Radio',
            maxLength: 100,
            multiValue: false,
            name: 'type',
            optional: true,
            options: [
                {
                    value: 'none',
                    label: 'None',
                },
                {
                    value: 'disabled',
                    label: 'Disabled',
                },
                {
                    value: 'enabled',
                    label: 'Enabled',
                },
            ],
            required: true,
            sortOrder: 9000,
        },
        {
            inputType: 'RADIO',
            label: 'Radio',
            maxLength: 100,
            multiValue: false,
            name: 'radio',
            optional: true,
            options: [
                {
                    value: 'Yes',
                    label: 'Yes',
                    icon: 'check',
                },
                {
                    value: 'No',
                    label: 'No',
                    icon: 'times',
                },
            ],
            required: true,
            sortOrder: 9000,
        },
        {
            name: 'htmlFieldFullEditor',
            key: 'htmlFieldFullEditor',
            label: 'Editor',
            required: true,
            sortOrder: 60,
            dataSpecialization: 'HTML',
            type: 'SCALAR',
            dataType: 'String',
        },
    ],
};
const MockMetaForForm = {
    entity: 'ENTITY_NAME',
    entityMetaUrl: '',
    label: 'ENTITY_LABEL',
    fields: [
        {
            name: 'textbox1',
            type: 'text',
            label: 'TextBox 1',
            required: true,
            sortOrder: 110,
            maxLength: 10,
        },
        {
            name: 'textbox2',
            type: 'text',
            label: 'TextBox 2',
            required: true,
            sortOrder: 120,
            maxLength: 10,
        },
        {
            name: 'textbox3',
            type: 'text',
            label: 'TextBox 3',
            required: true,
            sortOrder: 130,
            maxLength: 10,
        },
    ],
};

/**
 * @title Vertical Dynamic Form Example
 */
class VerticalDynamicFormExample {
    constructor(formUtils) {
        this.formUtils = formUtils;
        // Dynamic
        this.dynamicVertical = formUtils.toControls(MockMeta, '$ USD', {}, { token: 'TOKEN', military: true });
        formUtils.setInitialValues(this.dynamicVertical, { number: 0, firstName: 'Bobby Flay' });
        this.dynamicVerticalForm = formUtils.toFormGroup(this.dynamicVertical);
    }
    save(form) {
        if (!form.isValid) {
            form.showOnlyRequired(true);
        }
        else {
            alert('SAVING');
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: VerticalDynamicFormExample, deps: [{ token: i1$1.FormUtils }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: VerticalDynamicFormExample, isStandalone: false, selector: "vertical-dynamic-form-example", ngImport: i0, template: "<button theme=\"secondary\" (click)=\"nomyform.showAllFields()\">Show All Fields</button>\n<button theme=\"secondary\" (click)=\"nomyform.showOnlyRequired(false)\">Show Required Fields</button>\n<novo-dynamic-form layout=\"vertical\" class=\"dynamic\" [controls]=\"dynamicVertical\" [(form)]=\"dynamicVerticalForm\" #nomyform>\n  <ng-template novoTemplate=\"custom-demo-component\" let-control let-form=\"form\">\n    <custom-demo-control-example [control]=\"control\" [form]=\"form\"></custom-demo-control-example>\n  </ng-template>\n</novo-dynamic-form>\n<div class=\"final-value\">Valid: {{nomyform.isValid | json}}</div>\n<div class=\"final-value\">Values: {{nomyform.values | json}}</div>\n<div class=\"final-value\">Updated Values: {{nomyform.updatedValues() | json}}</div>\n", styles: [""], dependencies: [{ kind: "component", type: i2$1.NovoButtonElement, selector: "novo-button,button[theme]", inputs: ["color", "side", "size", "theme", "loading", "icon", "secondIcon", "disabled"] }, { kind: "component", type: i2$1.NovoDynamicFormElement, selector: "novo-dynamic-form", inputs: ["controls", "fieldsets", "form", "layout", "hideNonRequiredFields", "autoFocusFirstField"] }, { kind: "directive", type: i2$1.NovoTemplate, selector: "[novoTemplate]", inputs: ["type", "novoTemplate"] }, { kind: "directive", type: i2$1.ThemeColorDirective, selector: "[theme]", inputs: ["theme"] }, { kind: "component", type: CustomDemoControlExample, selector: "custom-demo-control-example", inputs: ["control", "form", "edit", "save", "delete", "upload"] }, { kind: "pipe", type: i2.JsonPipe, name: "json" }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: VerticalDynamicFormExample, decorators: [{
            type: Component,
            args: [{ selector: 'vertical-dynamic-form-example', standalone: false, template: "<button theme=\"secondary\" (click)=\"nomyform.showAllFields()\">Show All Fields</button>\n<button theme=\"secondary\" (click)=\"nomyform.showOnlyRequired(false)\">Show Required Fields</button>\n<novo-dynamic-form layout=\"vertical\" class=\"dynamic\" [controls]=\"dynamicVertical\" [(form)]=\"dynamicVerticalForm\" #nomyform>\n  <ng-template novoTemplate=\"custom-demo-component\" let-control let-form=\"form\">\n    <custom-demo-control-example [control]=\"control\" [form]=\"form\"></custom-demo-control-example>\n  </ng-template>\n</novo-dynamic-form>\n<div class=\"final-value\">Valid: {{nomyform.isValid | json}}</div>\n<div class=\"final-value\">Values: {{nomyform.values | json}}</div>\n<div class=\"final-value\">Updated Values: {{nomyform.updatedValues() | json}}</div>\n" }]
        }], ctorParameters: () => [{ type: i1$1.FormUtils }] });

/**
 * @title Updating Form Example
 */
class UpdatingFormExample {
    constructor(formUtils) {
        this.formUtils = formUtils;
        this.required = false;
        this.disabled = true;
        // Text-based Controls
        this.textControl = new TextBoxControl({
            key: 'text',
            label: 'Text Box',
            tooltip: 'Textbox',
            readOnly: true,
            value: 'HI',
            required: true,
        });
        this.percentageControl = new TextBoxControl({
            type: 'percentage',
            key: 'percentage',
            tooltip: 'Percent',
            label: 'Percent',
            required: true,
        });
        // Check box controls
        this.checkControl = new CheckboxControl({ key: 'check', tooltip: 'Checkbox', label: 'Checkbox', checkboxLabel: 'Checkbox' });
        // Picker controls
        this.singlePickerControl = new PickerControl({
            key: 'singlePicker',
            tooltip: 'Single',
            label: 'Single',
            config: { options: ['One', 'Two', 'Three'] },
        });
        // File input controls
        this.fileControl = new FileControl({ key: 'file', name: 'myfile', label: 'File', tooltip: 'Files Control' });
        // Updating form
        this.updatingFormControls = [this.textControl, this.percentageControl, this.checkControl, this.singlePickerControl, this.fileControl];
        this.updatingForm = formUtils.toFormGroup(this.updatingFormControls);
    }
    toggleEnabled() {
        this.disabled = !this.disabled;
        Object.keys(this.updatingForm.controls).forEach((key) => {
            if (this.disabled) {
                this.updatingForm.controls[key].enable();
            }
            else {
                this.updatingForm.controls[key].disable();
            }
        });
    }
    toggleRequired() {
        this.required = !this.required;
        Object.keys(this.updatingForm.controls).forEach((key) => {
            this.updatingForm.controls[key].setRequired(this.required);
        });
    }
    markAsInvalid() {
        Object.keys(this.updatingForm.controls).forEach((key) => {
            this.updatingForm.controls[key].markAsInvalid('Custom Error!');
        });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: UpdatingFormExample, deps: [{ token: i1$1.FormUtils }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: UpdatingFormExample, isStandalone: false, selector: "updating-form-example", ngImport: i0, template: "<button theme=\"secondary\" (click)=\"toggleEnabled()\">Toggle Enabled</button>\n<button theme=\"secondary\" (click)=\"toggleRequired()\">Toggle Required</button>\n<button theme=\"secondary\" (click)=\"markAsInvalid()\">Mark As Invalid</button>\n<br/><br/>\n<novo-dynamic-form layout=\"vertical\" [controls]=\"updatingFormControls\" [(form)]=\"updatingForm\" #updatingFormRef></novo-dynamic-form>\n<div class=\"final-value\">Valid: {{updatingFormRef.isValid | json}}</div>\n<div class=\"final-value\">Values: {{updatingFormRef.values | json}}</div>\n<div class=\"final-value\">Updated Values: {{updatingFormRef.updatedValues() | json}}</div>\n", styles: [""], dependencies: [{ kind: "component", type: i2$1.NovoButtonElement, selector: "novo-button,button[theme]", inputs: ["color", "side", "size", "theme", "loading", "icon", "secondIcon", "disabled"] }, { kind: "component", type: i2$1.NovoDynamicFormElement, selector: "novo-dynamic-form", inputs: ["controls", "fieldsets", "form", "layout", "hideNonRequiredFields", "autoFocusFirstField"] }, { kind: "directive", type: i2$1.ThemeColorDirective, selector: "[theme]", inputs: ["theme"] }, { kind: "pipe", type: i2.JsonPipe, name: "json" }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: UpdatingFormExample, decorators: [{
            type: Component,
            args: [{ selector: 'updating-form-example', standalone: false, template: "<button theme=\"secondary\" (click)=\"toggleEnabled()\">Toggle Enabled</button>\n<button theme=\"secondary\" (click)=\"toggleRequired()\">Toggle Required</button>\n<button theme=\"secondary\" (click)=\"markAsInvalid()\">Mark As Invalid</button>\n<br/><br/>\n<novo-dynamic-form layout=\"vertical\" [controls]=\"updatingFormControls\" [(form)]=\"updatingForm\" #updatingFormRef></novo-dynamic-form>\n<div class=\"final-value\">Valid: {{updatingFormRef.isValid | json}}</div>\n<div class=\"final-value\">Values: {{updatingFormRef.values | json}}</div>\n<div class=\"final-value\">Updated Values: {{updatingFormRef.updatedValues() | json}}</div>\n" }]
        }], ctorParameters: () => [{ type: i1$1.FormUtils }] });

// NG
/**
 * @title Enable/Disable all Fields in Form Example
 */
class EnableDisableAllFieldsInFormExample {
    constructor(formUtils) {
        this.formUtils = formUtils;
        this.disabled = false;
        // Updating form
        this.controls = formUtils.toFieldSets(MockMetaForForm, '$ USD', {}, { token: 'TOKEN', military: true }, {});
        formUtils.setInitialValuesFieldsets(this.controls, {
            select: 'disabledValue',
        });
        this.form = formUtils.toFormGroupFromFieldset(this.controls);
    }
    toggleEnableDisableAllFields() {
        this.disabled = !this.disabled;
        if (this.disabled) {
            this.form.enableAllControls();
        }
        else {
            this.form.disableAllControls();
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: EnableDisableAllFieldsInFormExample, deps: [{ token: i1$1.FormUtils }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: EnableDisableAllFieldsInFormExample, isStandalone: false, selector: "enable-disable-all-fields-in-form-example", ngImport: i0, template: "<novo-dynamic-form class=\"dynamic\" [fieldsets]=\"controls\" [(form)]=\"form\" #myform></novo-dynamic-form>\n<button theme=\"primary\" (click)=\"toggleEnableDisableAllFields()\">Toggle fields</button>\n", styles: [""], dependencies: [{ kind: "component", type: i2$1.NovoButtonElement, selector: "novo-button,button[theme]", inputs: ["color", "side", "size", "theme", "loading", "icon", "secondIcon", "disabled"] }, { kind: "component", type: i2$1.NovoDynamicFormElement, selector: "novo-dynamic-form", inputs: ["controls", "fieldsets", "form", "layout", "hideNonRequiredFields", "autoFocusFirstField"] }, { kind: "directive", type: i2$1.ThemeColorDirective, selector: "[theme]", inputs: ["theme"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: EnableDisableAllFieldsInFormExample, decorators: [{
            type: Component,
            args: [{ selector: 'enable-disable-all-fields-in-form-example', standalone: false, template: "<novo-dynamic-form class=\"dynamic\" [fieldsets]=\"controls\" [(form)]=\"form\" #myform></novo-dynamic-form>\n<button theme=\"primary\" (click)=\"toggleEnableDisableAllFields()\">Toggle fields</button>\n" }]
        }], ctorParameters: () => [{ type: i1$1.FormUtils }] });

/**
 * @title Dynamic Form Field Sets Example
 */
class DynamicFormFieldSetsExample {
    constructor(formUtils) {
        this.formUtils = formUtils;
        // Dynamic + Fieldsets
        this.fieldsets = formUtils.toFieldSets(MockMetaHeaders, '$ USD', {}, { token: 'TOKEN' }, {
            customfield: {
                template: 'custom-demo-component',
            },
        });
        formUtils.setInitialValuesFieldsets(this.fieldsets, { firstName: 'Initial F Name', number: 12 });
        this.fieldsetsForm = formUtils.toFormGroupFromFieldset(this.fieldsets);
    }
    save(form) {
        if (!form.isValid) {
            form.showOnlyRequired(true);
        }
        else {
            alert('SAVING');
        }
    }
    clear() {
        this.fieldsets.forEach((fieldset) => {
            fieldset.controls.forEach((control) => {
                control.forceClear.emit();
            });
        });
    }
    onChange(value) {
        console.log('I changed!', value); // tslint:disable-line
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: DynamicFormFieldSetsExample, deps: [{ token: i1$1.FormUtils }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: DynamicFormFieldSetsExample, isStandalone: false, selector: "dynamic-form-field-sets-example", ngImport: i0, template: "<button theme=\"secondary\"\n  *ngIf=\"!myFieldsetsForm.showingAllFields && !(myFieldsetsForm.allFieldsRequired || myFieldsetsForm.allFieldsNotRequired)\"\n  (click)=\"myFieldsetsForm.showAllFields()\">Show All Fields</button>\n<button theme=\"secondary\"\n  *ngIf=\"!myFieldsetsForm.showingRequiredFields && !(myFieldsetsForm.allFieldsRequired || myFieldsetsForm.allFieldsNotRequired)\"\n  (click)=\"myFieldsetsForm.showOnlyRequired(false)\">Show Required Fields</button>\n<novo-dynamic-form class=\"dynamic\" layout=\"horizontal\" [fieldsets]=\"fieldsets\" [(form)]=\"fieldsetsForm\"\n  #myFieldsetsForm>\n  <ng-template novoTemplate=\"custom-demo-component\" let-control let-form=\"form\">\n    <custom-demo-control-example [control]=\"control\" [form]=\"form\"></custom-demo-control-example>\n  </ng-template>\n</novo-dynamic-form>\n<footer class=\"dynamic-demo-footer\">\n  <button (click)=\"save(myFieldsetsForm)\" theme=\"primary\" icon=\"check\">Save</button>\n  <button (click)=\"clear()\" theme=\"secondary\" icon=\"check\">Clear</button>\n</footer>\n<div class=\"final-value\">Valid: {{myFieldsetsForm.isValid | json}}</div>\n<div class=\"final-value\">Values: {{myFieldsetsForm.values | json}}</div>\n<div class=\"final-value\">Updated Values: {{myFieldsetsForm.updatedValues() | json}}</div>", styles: [""], dependencies: [{ kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i2$1.NovoButtonElement, selector: "novo-button,button[theme]", inputs: ["color", "side", "size", "theme", "loading", "icon", "secondIcon", "disabled"] }, { kind: "component", type: i2$1.NovoDynamicFormElement, selector: "novo-dynamic-form", inputs: ["controls", "fieldsets", "form", "layout", "hideNonRequiredFields", "autoFocusFirstField"] }, { kind: "directive", type: i2$1.NovoTemplate, selector: "[novoTemplate]", inputs: ["type", "novoTemplate"] }, { kind: "directive", type: i2$1.ThemeColorDirective, selector: "[theme]", inputs: ["theme"] }, { kind: "component", type: CustomDemoControlExample, selector: "custom-demo-control-example", inputs: ["control", "form", "edit", "save", "delete", "upload"] }, { kind: "pipe", type: i2.JsonPipe, name: "json" }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: DynamicFormFieldSetsExample, decorators: [{
            type: Component,
            args: [{ selector: 'dynamic-form-field-sets-example', standalone: false, template: "<button theme=\"secondary\"\n  *ngIf=\"!myFieldsetsForm.showingAllFields && !(myFieldsetsForm.allFieldsRequired || myFieldsetsForm.allFieldsNotRequired)\"\n  (click)=\"myFieldsetsForm.showAllFields()\">Show All Fields</button>\n<button theme=\"secondary\"\n  *ngIf=\"!myFieldsetsForm.showingRequiredFields && !(myFieldsetsForm.allFieldsRequired || myFieldsetsForm.allFieldsNotRequired)\"\n  (click)=\"myFieldsetsForm.showOnlyRequired(false)\">Show Required Fields</button>\n<novo-dynamic-form class=\"dynamic\" layout=\"horizontal\" [fieldsets]=\"fieldsets\" [(form)]=\"fieldsetsForm\"\n  #myFieldsetsForm>\n  <ng-template novoTemplate=\"custom-demo-component\" let-control let-form=\"form\">\n    <custom-demo-control-example [control]=\"control\" [form]=\"form\"></custom-demo-control-example>\n  </ng-template>\n</novo-dynamic-form>\n<footer class=\"dynamic-demo-footer\">\n  <button (click)=\"save(myFieldsetsForm)\" theme=\"primary\" icon=\"check\">Save</button>\n  <button (click)=\"clear()\" theme=\"secondary\" icon=\"check\">Clear</button>\n</footer>\n<div class=\"final-value\">Valid: {{myFieldsetsForm.isValid | json}}</div>\n<div class=\"final-value\">Values: {{myFieldsetsForm.values | json}}</div>\n<div class=\"final-value\">Updated Values: {{myFieldsetsForm.updatedValues() | json}}</div>" }]
        }], ctorParameters: () => [{ type: i1$1.FormUtils }] });

/**
 * @title Dynamic Form Example
 */
class DynamicFormExample {
    constructor(formUtils) {
        this.formUtils = formUtils;
        // Dynamic
        this.dynamic = formUtils.toFieldSets(MockMeta, '$ USD', {}, { token: 'TOKEN', military: true }, {
            customfield: {
                template: 'custom-demo-component',
            },
        });
        formUtils.setInitialValuesFieldsets(this.dynamic, { firstName: 'Initial F Name', number: 12 });
        this.dynamicForm = formUtils.toFormGroupFromFieldset(this.dynamic);
    }
    save(form) {
        if (!form.isValid) {
            form.showOnlyRequired(true);
        }
        else {
            alert('SAVING');
        }
    }
    clear() {
        this.dynamic[0].controls.forEach((control) => {
            control.forceClear.emit();
        });
    }
    onChange(value) {
        console.log('I changed!', value); // tslint:disable-line
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: DynamicFormExample, deps: [{ token: i1$1.FormUtils }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: DynamicFormExample, isStandalone: false, selector: "dynamic-form-example", ngImport: i0, template: "<button theme=\"secondary\" *ngIf=\"!myform.showingAllFields && !(myform.allFieldsRequired || myform.allFieldsNotRequired)\" (click)=\"myform.showAllFields()\">Show All Fields</button>\n<button theme=\"secondary\" *ngIf=\"!myform.showingRequiredFields && !(myform.allFieldsRequired || myform.allFieldsNotRequired)\" (click)=\"myform.showOnlyRequired(false)\">Show Required Fields</button>\n<novo-dynamic-form [autoFocusFirstField]=\"true\" class=\"dynamic\" [fieldsets]=\"dynamic\" [(form)]=\"dynamicForm\" #myform></novo-dynamic-form>\n<footer class=\"dynamic-demo-footer\">\n    <button (click)=\"save(myform)\" theme=\"primary\" icon=\"check\">Save</button>\n    <button (click)=\"clear()\" theme=\"secondary\" icon=\"check\">Clear</button>\n</footer>\n<div class=\"final-value\">Valid: {{myform.isValid | json}}</div>\n<div class=\"final-value\">Values: {{myform.values | json}}</div>\n<div class=\"final-value\">Updated Values: {{myform.updatedValues() | json}}</div>\n", styles: [""], dependencies: [{ kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i2$1.NovoButtonElement, selector: "novo-button,button[theme]", inputs: ["color", "side", "size", "theme", "loading", "icon", "secondIcon", "disabled"] }, { kind: "component", type: i2$1.NovoDynamicFormElement, selector: "novo-dynamic-form", inputs: ["controls", "fieldsets", "form", "layout", "hideNonRequiredFields", "autoFocusFirstField"] }, { kind: "directive", type: i2$1.ThemeColorDirective, selector: "[theme]", inputs: ["theme"] }, { kind: "pipe", type: i2.JsonPipe, name: "json" }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: DynamicFormExample, decorators: [{
            type: Component,
            args: [{ selector: 'dynamic-form-example', standalone: false, template: "<button theme=\"secondary\" *ngIf=\"!myform.showingAllFields && !(myform.allFieldsRequired || myform.allFieldsNotRequired)\" (click)=\"myform.showAllFields()\">Show All Fields</button>\n<button theme=\"secondary\" *ngIf=\"!myform.showingRequiredFields && !(myform.allFieldsRequired || myform.allFieldsNotRequired)\" (click)=\"myform.showOnlyRequired(false)\">Show Required Fields</button>\n<novo-dynamic-form [autoFocusFirstField]=\"true\" class=\"dynamic\" [fieldsets]=\"dynamic\" [(form)]=\"dynamicForm\" #myform></novo-dynamic-form>\n<footer class=\"dynamic-demo-footer\">\n    <button (click)=\"save(myform)\" theme=\"primary\" icon=\"check\">Save</button>\n    <button (click)=\"clear()\" theme=\"secondary\" icon=\"check\">Clear</button>\n</footer>\n<div class=\"final-value\">Valid: {{myform.isValid | json}}</div>\n<div class=\"final-value\">Values: {{myform.values | json}}</div>\n<div class=\"final-value\">Updated Values: {{myform.updatedValues() | json}}</div>\n" }]
        }], ctorParameters: () => [{ type: i1$1.FormUtils }] });

/**
 * @title Disabled Form Example
 */
class DisabledFormExample {
    constructor(formUtils) {
        this.formUtils = formUtils;
        this.required = false;
        this.disabled = true;
        this.placeholder = 'Placeholder';
        this.note = '';
        // Disabled Form
        const disabledOverrides = {
            address: {
                readOnly: true,
            },
            textbox: {
                readOnly: true,
            },
            number: {
                readOnly: true,
            },
            year: {
                readOnly: true,
            },
            float: {
                readOnly: true,
            },
            currency: {
                readOnly: true,
            },
            percent: {
                readOnly: true,
            },
            textarea: {
                readOnly: true,
            },
            date: {
                readOnly: true,
            },
            time: {
                readOnly: true,
            },
            datetime: {
                readOnly: true,
            },
            select: {
                readOnly: true,
            },
            tiles: {
                readOnly: true,
            },
            picker: {
                readOnly: true,
            },
            chips: {
                readOnly: true,
            },
            checkbox: {
                readOnly: true,
            },
            checklist: {
                readOnly: true,
            },
            file: {
                readOnly: true,
            },
            type: {
                readOnly: true,
            },
            radio: {
                readOnly: true,
            },
            htmlFieldFullEditor: {
                readOnly: true,
            },
            rowChips: {
                readOnly: true,
                label: 'Row Chips',
                columns: [
                    {
                        label: 'Value',
                        data: (item) => {
                            return item.value.value;
                        },
                    },
                    {
                        label: 'Description',
                        data: (item) => {
                            return item.value.description;
                        },
                    },
                ],
            },
        };
        // Updating form
        this.disabledControls = formUtils.toFieldSets(MockMetaForDisabledForm, '$ USD', {}, { token: 'TOKEN', military: true }, disabledOverrides);
        formUtils.setInitialValuesFieldsets(this.disabledControls, {
            textbox: 'Disabled TextBox',
            textarea: 'Disabled TextArea Disabled TextArea Disabled TextArea Disabled TextArea Disabled TextArea Disabled TextArea Disabled TextArea ',
            number: 42,
            year: 2000,
            float: 3.14,
            currency: 1000000,
            percent: 1.21,
            select: 'disabledValue',
            checklist: 'Disabled',
            tiles: 'Disabled',
            radio: 'Yes',
            chips: ['Disabled', 'Chip'],
            address: {
                address1: '100 Summer St',
                address2: 'apt 25',
                countryID: 1,
                state: 'Georgia',
                city: 'Atlanta',
                zip: '30312',
                countryName: 'United States',
                countryCode: 'US',
            },
            file: [{ name: 'yourFile.pdf', loaded: true, link: 'www.google.com', description: 'file description' }],
            htmlFieldFullEditor: `<h1>Disabled Editor</h1><br><ui><li>Disabled</li><li>Editor</li></ui>`,
            picker: 'Disabled Picker',
            rowChips: [{ id: 1, value: 'Disabled Row Chip', description: 'This is a disabled Row Chip' }],
        });
        this.disabledForm = formUtils.toFormGroupFromFieldset(this.disabledControls);
        this.disabledNote = 'Disabled QuickNote';
        this.disabledQuickNote = {
            triggers: {
                tags: '@',
                references: '#',
                boos: '^',
            },
            options: {
                tags: ['First', 'Second', 'Space Between'],
                references: ['Third', 'Fourth'],
                boos: ['Test'],
            },
            readOnly: true,
            renderer: {
                tags: (symbol, item) => {
                    return `<a href="https://www.google.com/search?q=bullhorn&oq=bullhorn">${symbol}${item.label}</a>`;
                },
                references: (symbol, item) => {
                    return `<a href="https://www.google.com/search?q=bullhorn&oq=bullhorn">${symbol}${item.label}</a>`;
                },
                boos: (symbol, item) => {
                    return `<strong>${symbol}${item.label}</strong>`;
                },
            },
        };
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: DisabledFormExample, deps: [{ token: i1$1.FormUtils }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: DisabledFormExample, isStandalone: false, selector: "disabled-form-example", ngImport: i0, template: "<novo-dynamic-form [autoFocusFirstField]=\"true\" class=\"dynamic\" [fieldsets]=\"disabledControls\" [(form)]=\"disabledForm\"\n  #myform></novo-dynamic-form>\n<div class=\"final-value\">Values: {{myform.values | json}}</div>\n<br />\n<h5>QUICK NOTE</h5>\n<br />\n<novo-quick-note [(ngModel)]=\"disabledNote\" [placeholder]=\"placeholder\" [config]=\"disabledQuickNote\"></novo-quick-note>\n<div class=\"data\">\n  <p>Note: {{note | json}}</p>\n</div>", styles: [""], dependencies: [{ kind: "directive", type: i1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i1.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "component", type: i2$1.QuickNoteElement, selector: "novo-quick-note", inputs: ["config", "startupFocus", "placeholder"], outputs: ["focus", "blur", "change"] }, { kind: "component", type: i2$1.NovoDynamicFormElement, selector: "novo-dynamic-form", inputs: ["controls", "fieldsets", "form", "layout", "hideNonRequiredFields", "autoFocusFirstField"] }, { kind: "pipe", type: i2.JsonPipe, name: "json" }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: DisabledFormExample, decorators: [{
            type: Component,
            args: [{ selector: 'disabled-form-example', standalone: false, template: "<novo-dynamic-form [autoFocusFirstField]=\"true\" class=\"dynamic\" [fieldsets]=\"disabledControls\" [(form)]=\"disabledForm\"\n  #myform></novo-dynamic-form>\n<div class=\"final-value\">Values: {{myform.values | json}}</div>\n<br />\n<h5>QUICK NOTE</h5>\n<br />\n<novo-quick-note [(ngModel)]=\"disabledNote\" [placeholder]=\"placeholder\" [config]=\"disabledQuickNote\"></novo-quick-note>\n<div class=\"data\">\n  <p>Note: {{note | json}}</p>\n</div>" }]
        }], ctorParameters: () => [{ type: i1$1.FormUtils }] });

/**
 * @title Date Time Input Example
 */
class DateTimeInputExample {
    constructor() {
        this.dateTimeInput = new Date('08/01/1983 12:57 PM');
        this.dateTimeInput2 = new Date('08/02/1984 12:57 PM');
        this.dateTimeInput3 = new Date('08/03/1985 12:57 PM');
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: DateTimeInputExample, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: DateTimeInputExample, isStandalone: false, selector: "date-time-input-example", ngImport: i0, template: "<div class=\"date-picker-demo-side-by-side\">\n    <p>\n        <label>Date-Time</label> {{(dateTimeInput | date:'medium') || 'N/A'}}\n        <label>Date-Time 2</label> {{(dateTimeInput2 | date:'medium') || 'N/A'}}\n    </p>\n    <div>\n        <novo-date-time-picker-input [(ngModel)]=\"dateTimeInput\"></novo-date-time-picker-input>\n        <novo-date-time-picker-input [(ngModel)]=\"dateTimeInput2\" [military]=\"true\"></novo-date-time-picker-input>\n    </div>\n    <novo-date-time-picker [(ngModel)]=\"dateTimeInput3\"></novo-date-time-picker> \n</div>\n", styles: [""], dependencies: [{ kind: "directive", type: i1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i1.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "component", type: i2$1.NovoDateTimePickerElement, selector: "novo-date-time-picker", inputs: ["defaultTime", "minYear", "maxYear", "start", "end", "military", "weekStart", "disabledDateMessage"], outputs: ["onSelect"] }, { kind: "component", type: i2$1.NovoDateTimePickerInputElement, selector: "novo-date-time-picker-input", inputs: ["name", "start", "end", "placeholder", "maskOptions", "military", "disabled", "format", "weekStart", "disabledDateMessage"], outputs: ["blurEvent", "focusEvent", "changeEvent"] }, { kind: "pipe", type: i2.DatePipe, name: "date" }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: DateTimeInputExample, decorators: [{
            type: Component,
            args: [{ selector: 'date-time-input-example', standalone: false, template: "<div class=\"date-picker-demo-side-by-side\">\n    <p>\n        <label>Date-Time</label> {{(dateTimeInput | date:'medium') || 'N/A'}}\n        <label>Date-Time 2</label> {{(dateTimeInput2 | date:'medium') || 'N/A'}}\n    </p>\n    <div>\n        <novo-date-time-picker-input [(ngModel)]=\"dateTimeInput\"></novo-date-time-picker-input>\n        <novo-date-time-picker-input [(ngModel)]=\"dateTimeInput2\" [military]=\"true\"></novo-date-time-picker-input>\n    </div>\n    <novo-date-time-picker [(ngModel)]=\"dateTimeInput3\"></novo-date-time-picker> \n</div>\n" }]
        }] });

/**
 * @title Week Start Example
 */
class WeekStartExample {
    constructor() {
        this.weekStartDate = new Date();
        this.weekStart = 0;
    }
    setWeekStart(num) {
        this.weekStart = num;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: WeekStartExample, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: WeekStartExample, isStandalone: false, selector: "week-start-example", ngImport: i0, template: "<button [theme]=\"weekStart === 0 ? 'primary' : 'secondary'\" (click)=\"setWeekStart(0)\">Sunday</button>\n<button [theme]=\"weekStart === 1 ? 'primary' : 'secondary'\" (click)=\"setWeekStart(1)\">Monday</button>\n<button [theme]=\"weekStart === 2 ? 'primary' : 'secondary'\" (click)=\"setWeekStart(2)\">Tuesday</button>\n<button [theme]=\"weekStart === 3 ? 'primary' : 'secondary'\" (click)=\"setWeekStart(3)\">Wednesday</button>\n<button [theme]=\"weekStart === 4 ? 'primary' : 'secondary'\" (click)=\"setWeekStart(4)\">Thursday</button>\n<button [theme]=\"weekStart === 5 ? 'primary' : 'secondary'\" (click)=\"setWeekStart(5)\">Friday</button>\n<button [theme]=\"weekStart === 6 ? 'primary' : 'secondary'\" (click)=\"setWeekStart(6)\">Saturday</button>\n<br/>\n<br/>\n<div class=\"date-picker-demo-side-by-side\">\n    <p>\n        <label>Value</label> {{(weekStartDate | date) || 'N/A'}}\n    </p>\n    <novo-date-picker [(ngModel)]=\"weekStartDate\" [weekStart]=\"weekStart\"></novo-date-picker>\n</div>\n", styles: [""], dependencies: [{ kind: "directive", type: i1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i1.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "component", type: i2$1.NovoButtonElement, selector: "novo-button,button[theme]", inputs: ["color", "side", "size", "theme", "loading", "icon", "secondIcon", "disabled"] }, { kind: "component", type: i2$1.NovoDatePickerElement, selector: "novo-date-picker", inputs: ["minYear", "maxYear", "start", "end", "inline", "weekStart", "preselected", "hideOverflowDays", "hideFooter", "hideToday", "disabledDateMessage", "dateForInitialView", "numberOfMonths", "mode", "range", "weekRangeSelect"], outputs: ["onSelect"] }, { kind: "directive", type: i2$1.ThemeColorDirective, selector: "[theme]", inputs: ["theme"] }, { kind: "pipe", type: i2.DatePipe, name: "date" }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: WeekStartExample, decorators: [{
            type: Component,
            args: [{ selector: 'week-start-example', standalone: false, template: "<button [theme]=\"weekStart === 0 ? 'primary' : 'secondary'\" (click)=\"setWeekStart(0)\">Sunday</button>\n<button [theme]=\"weekStart === 1 ? 'primary' : 'secondary'\" (click)=\"setWeekStart(1)\">Monday</button>\n<button [theme]=\"weekStart === 2 ? 'primary' : 'secondary'\" (click)=\"setWeekStart(2)\">Tuesday</button>\n<button [theme]=\"weekStart === 3 ? 'primary' : 'secondary'\" (click)=\"setWeekStart(3)\">Wednesday</button>\n<button [theme]=\"weekStart === 4 ? 'primary' : 'secondary'\" (click)=\"setWeekStart(4)\">Thursday</button>\n<button [theme]=\"weekStart === 5 ? 'primary' : 'secondary'\" (click)=\"setWeekStart(5)\">Friday</button>\n<button [theme]=\"weekStart === 6 ? 'primary' : 'secondary'\" (click)=\"setWeekStart(6)\">Saturday</button>\n<br/>\n<br/>\n<div class=\"date-picker-demo-side-by-side\">\n    <p>\n        <label>Value</label> {{(weekStartDate | date) || 'N/A'}}\n    </p>\n    <novo-date-picker [(ngModel)]=\"weekStartDate\" [weekStart]=\"weekStart\"></novo-date-picker>\n</div>\n" }]
        }] });

/**
 * @title Multiple Date Selection Example
 */
class MultiDateExample {
    constructor() {
        this.multi = [];
        this.input = [];
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: MultiDateExample, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: MultiDateExample, isStandalone: false, selector: "multi-date-example", ngImport: i0, template: "<div class=\"date-picker-demo-side-by-side\">\n  <section>\n    <p>\n      <label>Dates</label>\n      <span *ngFor=\"let dt of multi\">{{(dt | date) || 'N/A'}}</span>\n    </p>\n    <novo-date-picker [(ngModel)]=\"multi\" mode=\"multiple\"></novo-date-picker>\n  </section>\n  <section>\n    <novo-multi-date-input [(ngModel)]=\"input\"></novo-multi-date-input>\n  </section>\n</div>", styles: [".date-picker-demo-side-by-side{display:grid;grid-template-columns:1fr 1fr}\n"], dependencies: [{ kind: "directive", type: i1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i1.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "directive", type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "component", type: i2$1.NovoDatePickerElement, selector: "novo-date-picker", inputs: ["minYear", "maxYear", "start", "end", "inline", "weekStart", "preselected", "hideOverflowDays", "hideFooter", "hideToday", "disabledDateMessage", "dateForInitialView", "numberOfMonths", "mode", "range", "weekRangeSelect"], outputs: ["onSelect"] }, { kind: "component", type: i2$1.NovoMultiDateInputElement, selector: "novo-multi-date-input", inputs: ["name", "start", "end", "placeholder", "format", "allowInvalidDate", "weekStart", "chipsCount", "value", "disabled"], outputs: ["blurEvent", "focusEvent", "change", "blur", "focus"] }, { kind: "pipe", type: i2.DatePipe, name: "date" }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: MultiDateExample, decorators: [{
            type: Component,
            args: [{ selector: 'multi-date-example', standalone: false, template: "<div class=\"date-picker-demo-side-by-side\">\n  <section>\n    <p>\n      <label>Dates</label>\n      <span *ngFor=\"let dt of multi\">{{(dt | date) || 'N/A'}}</span>\n    </p>\n    <novo-date-picker [(ngModel)]=\"multi\" mode=\"multiple\"></novo-date-picker>\n  </section>\n  <section>\n    <novo-multi-date-input [(ngModel)]=\"input\"></novo-multi-date-input>\n  </section>\n</div>", styles: [".date-picker-demo-side-by-side{display:grid;grid-template-columns:1fr 1fr}\n"] }]
        }] });

/**
 * @title Date Time Example
 */
class DateTimeExample {
    constructor() {
        this.dateTime = new Date('12/04/1987');
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: DateTimeExample, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: DateTimeExample, isStandalone: false, selector: "date-time-example", ngImport: i0, template: "<div class=\"date-picker-demo-side-by-side\">\n  <section>\n    <p>\n      <label>Date-Time</label> {{(dateTime | date:'medium') || 'N/A'}}\n    </p>\n    <novo-date-time-picker [(ngModel)]=\"dateTime\"></novo-date-time-picker>\n  </section>\n  <section>\n    <label>24hr Time</label>\n    <novo-date-time-picker [(ngModel)]=\"dateTime\" military=\"true\"></novo-date-time-picker>\n  </section>\n</div>", styles: [".date-picker-demo-side-by-side{display:grid;grid-template-columns:1fr 1fr}\n"], dependencies: [{ kind: "directive", type: i1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i1.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "component", type: i2$1.NovoDateTimePickerElement, selector: "novo-date-time-picker", inputs: ["defaultTime", "minYear", "maxYear", "start", "end", "military", "weekStart", "disabledDateMessage"], outputs: ["onSelect"] }, { kind: "pipe", type: i2.DatePipe, name: "date" }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: DateTimeExample, decorators: [{
            type: Component,
            args: [{ selector: 'date-time-example', standalone: false, template: "<div class=\"date-picker-demo-side-by-side\">\n  <section>\n    <p>\n      <label>Date-Time</label> {{(dateTime | date:'medium') || 'N/A'}}\n    </p>\n    <novo-date-time-picker [(ngModel)]=\"dateTime\"></novo-date-time-picker>\n  </section>\n  <section>\n    <label>24hr Time</label>\n    <novo-date-time-picker [(ngModel)]=\"dateTime\" military=\"true\"></novo-date-time-picker>\n  </section>\n</div>", styles: [".date-picker-demo-side-by-side{display:grid;grid-template-columns:1fr 1fr}\n"] }]
        }] });

/**
 * @title Date Range Input Example
 */
class DateRangeInputExample {
    constructor() {
        this.selected = {
            startDate: null,
            endDate: null,
        };
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: DateRangeInputExample, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: DateRangeInputExample, isStandalone: false, selector: "date-range-input-example", ngImport: i0, template: "<novo-date-range-input\n  [(ngModel)]=\"selected\"\n  [format]=\"format.value\"\n  [mode]=\"mode.value\"\n  [weekStart]=\"weekStart.value\">\n</novo-date-range-input>\n\n<section>\n  <novo-label>Selected Values:</novo-label>\n  <div>{{selected | json}}</div>\n</section>\n\n<section>\n  <novo-label>Selection mode</novo-label>\n  <novo-radio-group #mode appearance=\"vertical\" value=\"week\">\n    <novo-radio name=\"mode\" value=\"week\">week</novo-radio>\n    <novo-radio name=\"mode\" value=\"range\">range</novo-radio>\n  </novo-radio-group>\n\n  <novo-label>Format</novo-label>\n  <novo-radio-group #format appearance=\"vertical\" value=\"MM-DD-YYYY\">\n    <novo-radio name=\"format\" value=\"MM-DD-YYYY\">MM-dd-YYYY</novo-radio>\n    <novo-radio name=\"format\" value=\"DD-MM-YYYY\">dd-MM-YYYY</novo-radio>\n  </novo-radio-group>\n\n  <novo-label>Week Start</novo-label>\n  <novo-radio-group #weekStart appearance=\"vertical\" value=\"0\">\n    <novo-radio name=\"weekStart\" value=\"0\">Sun</novo-radio>\n    <novo-radio name=\"weekStart\" value=\"1\">Mon</novo-radio>\n  </novo-radio-group>\n</section>", styles: [":host{display:grid;grid-template-columns:1fr 1fr 1fr;gap:2rem}\n"], dependencies: [{ kind: "directive", type: i1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i1.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "component", type: i2$1.NovoRadioElement, selector: "novo-radio", inputs: ["id", "name", "tabindex", "vertical", "label", "button", "theme", "size", "icon", "color", "disabled", "checked", "value"], outputs: ["change", "blur", "focus"] }, { kind: "component", type: i2$1.NovoRadioGroup, selector: "novo-radio-group", inputs: ["id", "tabindex", "errorStateMatcher", "appearance", "value", "name", "disabled", "required", "placeholder"], outputs: ["change", "blur"] }, { kind: "component", type: i2$1.NovoDateRangeInputElement, selector: "novo-date-range-input", inputs: ["name", "start", "end", "weekRangeSelect", "mode", "placeholder", "maskOptions", "format", "textMaskEnabled", "allowInvalidDate", "weekStart", "value", "disabled"], outputs: ["blurEvent", "focusEvent", "change", "blur", "focus"] }, { kind: "component", type: i2$1.NovoLabel, selector: "novo-label,[novo-label]", inputs: ["id"] }, { kind: "pipe", type: i2.JsonPipe, name: "json" }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: DateRangeInputExample, decorators: [{
            type: Component,
            args: [{ selector: 'date-range-input-example', standalone: false, template: "<novo-date-range-input\n  [(ngModel)]=\"selected\"\n  [format]=\"format.value\"\n  [mode]=\"mode.value\"\n  [weekStart]=\"weekStart.value\">\n</novo-date-range-input>\n\n<section>\n  <novo-label>Selected Values:</novo-label>\n  <div>{{selected | json}}</div>\n</section>\n\n<section>\n  <novo-label>Selection mode</novo-label>\n  <novo-radio-group #mode appearance=\"vertical\" value=\"week\">\n    <novo-radio name=\"mode\" value=\"week\">week</novo-radio>\n    <novo-radio name=\"mode\" value=\"range\">range</novo-radio>\n  </novo-radio-group>\n\n  <novo-label>Format</novo-label>\n  <novo-radio-group #format appearance=\"vertical\" value=\"MM-DD-YYYY\">\n    <novo-radio name=\"format\" value=\"MM-DD-YYYY\">MM-dd-YYYY</novo-radio>\n    <novo-radio name=\"format\" value=\"DD-MM-YYYY\">dd-MM-YYYY</novo-radio>\n  </novo-radio-group>\n\n  <novo-label>Week Start</novo-label>\n  <novo-radio-group #weekStart appearance=\"vertical\" value=\"0\">\n    <novo-radio name=\"weekStart\" value=\"0\">Sun</novo-radio>\n    <novo-radio name=\"weekStart\" value=\"1\">Mon</novo-radio>\n  </novo-radio-group>\n</section>", styles: [":host{display:grid;grid-template-columns:1fr 1fr 1fr;gap:2rem}\n"] }]
        }] });

/**
 * @title Date picker limits Example
 */
class DatePickerLimitsExample {
    constructor(formUtils) {
        this.formUtils = formUtils;
        this.startDate = new Date();
        this.endDate = new Date();
        this.tooltip = 'this is a disabled date tooltip';
        this.initValue = [{ tooltip: this.tooltip }];
        this.controls = [];
        this.formGroup = this.formUtils.emptyFormGroup();
        const c1 = new TextBoxControl({ key: 'tooltip', label: 'what should your tooltip be?' });
        this.controls.push(c1);
    }
    updateInitialValue() {
        this.tooltip = this.formGroup.value?.horizontal[0]?.tooltip;
        this.initValue = [{ tooltip: this.tooltip }];
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: DatePickerLimitsExample, deps: [{ token: i1$1.FormUtils }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: DatePickerLimitsExample, isStandalone: false, selector: "date-picker-limits-example", ngImport: i0, template: "<section>\n  <novo-label>EFFECTIVE START DATE</novo-label>\n  <novo-date-picker-input [(ngModel)]=\"startDate\"></novo-date-picker-input>\n  <br/>\n  <novo-label>EFFECTIVE END DATE</novo-label>\n  <novo-date-picker-input [(ngModel)]=\"endDate\"></novo-date-picker-input>\n</section>\n\n<section>\n  <section>\n    <novo-label>Effective Start Date Value:</novo-label>\n    <div>{{ startDate | json }}</div>\n  </section>\n  <br/>\n  <section>\n    <novo-label>Effective End Date Value:</novo-label>\n    <div>{{ endDate | json }}</div>\n  </section>\n</section>\n\n<section>\n  <novo-date-picker [start]=\"startDate\" [end]=\"endDate\" [disabledDateMessage]=\"tooltip\"></novo-date-picker>\n\n  <br/><br/>\n  <novo-form [form]=\"formGroup\">\n    <novo-control-group key=\"horizontal\" [initialValue]=\"initValue\" [form]=\"formGroup\" [controls]=\"controls\"></novo-control-group>\n  </novo-form>\n\n  <button theme=\"primary\" (click)=\"updateInitialValue()\">Update tooltip</button>\n</section>\n", styles: [":host{display:grid;grid-template-columns:1fr 1fr 1fr;gap:2rem}\n"], dependencies: [{ kind: "directive", type: i1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i1.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "component", type: i2$1.NovoButtonElement, selector: "novo-button,button[theme]", inputs: ["color", "side", "size", "theme", "loading", "icon", "secondIcon", "disabled"] }, { kind: "component", type: i2$1.NovoDatePickerElement, selector: "novo-date-picker", inputs: ["minYear", "maxYear", "start", "end", "inline", "weekStart", "preselected", "hideOverflowDays", "hideFooter", "hideToday", "disabledDateMessage", "dateForInitialView", "numberOfMonths", "mode", "range", "weekRangeSelect"], outputs: ["onSelect"] }, { kind: "component", type: i2$1.NovoDatePickerInputElement, selector: "novo-date-picker-input", inputs: ["name", "start", "end", "placeholder", "maskOptions", "format", "textMaskEnabled", "allowInvalidDate", "overlayOnElement", "hideFooter", "hideToday", "hasButtons", "disabled", "disabledDateMessage", "dateForInitialView", "weekStart"], outputs: ["blurEvent", "focusEvent", "changeEvent", "onSave", "onCancel", "valueCleared"] }, { kind: "component", type: i2$1.NovoFormElement, selector: "novo-form", inputs: ["form", "layout", "hideHeader"] }, { kind: "component", type: i2$1.NovoControlGroup, selector: "novo-control-group", inputs: ["appearance", "vertical", "stacked", "add", "remove", "edit", "collapsible", "form", "controls", "key", "label", "description", "emptyMessage", "icon", "editIcon", "removeIcon", "initialValue", "canEdit", "canRemove", "shouldRemove", "rowTemplate", "columnLabelTemplate"], outputs: ["onRemove", "onEdit", "onAdd", "change"] }, { kind: "component", type: i2$1.NovoLabel, selector: "novo-label,[novo-label]", inputs: ["id"] }, { kind: "directive", type: i2$1.ThemeColorDirective, selector: "[theme]", inputs: ["theme"] }, { kind: "pipe", type: i2.JsonPipe, name: "json" }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: DatePickerLimitsExample, decorators: [{
            type: Component,
            args: [{ selector: 'date-picker-limits-example', standalone: false, template: "<section>\n  <novo-label>EFFECTIVE START DATE</novo-label>\n  <novo-date-picker-input [(ngModel)]=\"startDate\"></novo-date-picker-input>\n  <br/>\n  <novo-label>EFFECTIVE END DATE</novo-label>\n  <novo-date-picker-input [(ngModel)]=\"endDate\"></novo-date-picker-input>\n</section>\n\n<section>\n  <section>\n    <novo-label>Effective Start Date Value:</novo-label>\n    <div>{{ startDate | json }}</div>\n  </section>\n  <br/>\n  <section>\n    <novo-label>Effective End Date Value:</novo-label>\n    <div>{{ endDate | json }}</div>\n  </section>\n</section>\n\n<section>\n  <novo-date-picker [start]=\"startDate\" [end]=\"endDate\" [disabledDateMessage]=\"tooltip\"></novo-date-picker>\n\n  <br/><br/>\n  <novo-form [form]=\"formGroup\">\n    <novo-control-group key=\"horizontal\" [initialValue]=\"initValue\" [form]=\"formGroup\" [controls]=\"controls\"></novo-control-group>\n  </novo-form>\n\n  <button theme=\"primary\" (click)=\"updateInitialValue()\">Update tooltip</button>\n</section>\n", styles: [":host{display:grid;grid-template-columns:1fr 1fr 1fr;gap:2rem}\n"] }]
        }], ctorParameters: () => [{ type: i1$1.FormUtils }] });

/**
 * @title Date Picker Input Example
 */
class DatePickerInputExample {
    constructor() {
        this.selected = new Date();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: DatePickerInputExample, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: DatePickerInputExample, isStandalone: false, selector: "date-picker-input-example", ngImport: i0, template: "<div>\n  <novo-date-picker-input\n    [(ngModel)]=\"selected\"\n    [format]=\"format.value\"\n    [weekStart]=\"weekStart.value\"\n    [disabled]=\"disabled.value\">\n  </novo-date-picker-input>\n</div>\n\n<section>\n  <novo-label>Selected Values:</novo-label>\n  <div>{{selected | json}}</div>\n</section>\n\n<section>\n  <novo-label>Format</novo-label>\n  <novo-radio-group #format appearance=\"vertical\" value=\"ddd MMM DD, YYYY\">\n    <novo-radio name=\"format\" value=\"MM-DD-YYYY\">MM-DD-YYYY</novo-radio>\n    <novo-radio name=\"format\" value=\"DD-MM-YYYY\">DD-MM-YYYY</novo-radio>\n    <novo-radio name=\"format\" value=\"MMM DD, YYYY\">MMM DD, YYYY</novo-radio>\n    <novo-radio name=\"format\" value=\"ddd MMM DD, YYYY\">ddd MMM DD, YYYY</novo-radio>\n  </novo-radio-group>\n\n  <novo-label>Week Start</novo-label>\n  <novo-radio-group #weekStart appearance=\"vertical\" value=\"0\">\n    <novo-radio name=\"weekStart\" value=\"0\">Sun</novo-radio>\n    <novo-radio name=\"weekStart\" value=\"1\">Mon</novo-radio>\n  </novo-radio-group>\n\n  <novo-label>Enabled</novo-label>\n  <novo-radio-group #disabled appearance=\"vertical\" [value]=\"false\">\n    <novo-radio name=\"disabled\" [value]=\"false\">Enabled</novo-radio>\n    <novo-radio name=\"disabled\" [value]=\"true\">Disabled</novo-radio>\n  </novo-radio-group>\n</section>", styles: [":host{display:grid;grid-template-columns:1fr 1fr 1fr;gap:2rem}\n"], dependencies: [{ kind: "directive", type: i1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i1.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "component", type: i2$1.NovoRadioElement, selector: "novo-radio", inputs: ["id", "name", "tabindex", "vertical", "label", "button", "theme", "size", "icon", "color", "disabled", "checked", "value"], outputs: ["change", "blur", "focus"] }, { kind: "component", type: i2$1.NovoRadioGroup, selector: "novo-radio-group", inputs: ["id", "tabindex", "errorStateMatcher", "appearance", "value", "name", "disabled", "required", "placeholder"], outputs: ["change", "blur"] }, { kind: "component", type: i2$1.NovoDatePickerInputElement, selector: "novo-date-picker-input", inputs: ["name", "start", "end", "placeholder", "maskOptions", "format", "textMaskEnabled", "allowInvalidDate", "overlayOnElement", "hideFooter", "hideToday", "hasButtons", "disabled", "disabledDateMessage", "dateForInitialView", "weekStart"], outputs: ["blurEvent", "focusEvent", "changeEvent", "onSave", "onCancel", "valueCleared"] }, { kind: "component", type: i2$1.NovoLabel, selector: "novo-label,[novo-label]", inputs: ["id"] }, { kind: "pipe", type: i2.JsonPipe, name: "json" }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: DatePickerInputExample, decorators: [{
            type: Component,
            args: [{ selector: 'date-picker-input-example', standalone: false, template: "<div>\n  <novo-date-picker-input\n    [(ngModel)]=\"selected\"\n    [format]=\"format.value\"\n    [weekStart]=\"weekStart.value\"\n    [disabled]=\"disabled.value\">\n  </novo-date-picker-input>\n</div>\n\n<section>\n  <novo-label>Selected Values:</novo-label>\n  <div>{{selected | json}}</div>\n</section>\n\n<section>\n  <novo-label>Format</novo-label>\n  <novo-radio-group #format appearance=\"vertical\" value=\"ddd MMM DD, YYYY\">\n    <novo-radio name=\"format\" value=\"MM-DD-YYYY\">MM-DD-YYYY</novo-radio>\n    <novo-radio name=\"format\" value=\"DD-MM-YYYY\">DD-MM-YYYY</novo-radio>\n    <novo-radio name=\"format\" value=\"MMM DD, YYYY\">MMM DD, YYYY</novo-radio>\n    <novo-radio name=\"format\" value=\"ddd MMM DD, YYYY\">ddd MMM DD, YYYY</novo-radio>\n  </novo-radio-group>\n\n  <novo-label>Week Start</novo-label>\n  <novo-radio-group #weekStart appearance=\"vertical\" value=\"0\">\n    <novo-radio name=\"weekStart\" value=\"0\">Sun</novo-radio>\n    <novo-radio name=\"weekStart\" value=\"1\">Mon</novo-radio>\n  </novo-radio-group>\n\n  <novo-label>Enabled</novo-label>\n  <novo-radio-group #disabled appearance=\"vertical\" [value]=\"false\">\n    <novo-radio name=\"disabled\" [value]=\"false\">Enabled</novo-radio>\n    <novo-radio name=\"disabled\" [value]=\"true\">Disabled</novo-radio>\n  </novo-radio-group>\n</section>", styles: [":host{display:grid;grid-template-columns:1fr 1fr 1fr;gap:2rem}\n"] }]
        }] });

//  Must add 'ExtendedLabelService' to your module file and
//  include it in the constructor of your component
class ExtendedLabelService extends NovoLabelService {
    constructor() {
        super(...arguments);
        this.dateFormat = 'dd/mm/yyyy';
        this.dateFormatPlaceholder = 'DD/MM/YYYY';
    }
}
/**
 * @title Date Example
 */
class DatePickerExample {
    constructor() {
        this.selectedDates = new Date();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: DatePickerExample, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: DatePickerExample, isStandalone: false, selector: "date-picker-example", ngImport: i0, template: "<novo-date-picker\n  inline=\"true\"\n  [(ngModel)]=\"selectedDates\"\n  [mode]=\"mode.value\"\n  [numberOfMonths]=\"months.value\"\n  [weekStart]=\"weekStart.value\">\n</novo-date-picker>\n\n<section>\n  <novo-label>Selected Values:</novo-label>\n  <div>{{selectedDates | json}}</div>\n</section>\n\n<section>\n  <novo-label>Selection mode</novo-label>\n  <novo-radio-group #mode appearance=\"vertical\" value=\"single\">\n    <novo-radio name=\"mode\" value=\"single\">single</novo-radio>\n    <novo-radio name=\"mode\" value=\"multiple\">multiple</novo-radio>\n    <novo-radio name=\"mode\" value=\"range\">range</novo-radio>\n    <novo-radio name=\"mode\" value=\"week\">week</novo-radio>\n  </novo-radio-group>\n\n  <novo-label># of Months</novo-label>\n  <novo-radio-group #months appearance=\"vertical\" value=\"1\">\n    <novo-radio name=\"months\" value=\"1\">1</novo-radio>\n    <novo-radio name=\"months\" value=\"2\">2</novo-radio>\n  </novo-radio-group>\n\n  <novo-label>Week Start</novo-label>\n  <novo-radio-group #weekStart appearance=\"vertical\" value=\"0\">\n    <novo-radio name=\"weekStart\" value=\"0\">Sun</novo-radio>\n    <novo-radio name=\"weekStart\" value=\"1\">Mon</novo-radio>\n  </novo-radio-group>\n</section>\n", styles: [":host{display:grid;grid-template-columns:1fr 1fr 1fr;gap:2rem}\n"], dependencies: [{ kind: "directive", type: i1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i1.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "component", type: i2$1.NovoRadioElement, selector: "novo-radio", inputs: ["id", "name", "tabindex", "vertical", "label", "button", "theme", "size", "icon", "color", "disabled", "checked", "value"], outputs: ["change", "blur", "focus"] }, { kind: "component", type: i2$1.NovoRadioGroup, selector: "novo-radio-group", inputs: ["id", "tabindex", "errorStateMatcher", "appearance", "value", "name", "disabled", "required", "placeholder"], outputs: ["change", "blur"] }, { kind: "component", type: i2$1.NovoDatePickerElement, selector: "novo-date-picker", inputs: ["minYear", "maxYear", "start", "end", "inline", "weekStart", "preselected", "hideOverflowDays", "hideFooter", "hideToday", "disabledDateMessage", "dateForInitialView", "numberOfMonths", "mode", "range", "weekRangeSelect"], outputs: ["onSelect"] }, { kind: "component", type: i2$1.NovoLabel, selector: "novo-label,[novo-label]", inputs: ["id"] }, { kind: "pipe", type: i2.JsonPipe, name: "json" }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: DatePickerExample, decorators: [{
            type: Component,
            args: [{ selector: 'date-picker-example', standalone: false, template: "<novo-date-picker\n  inline=\"true\"\n  [(ngModel)]=\"selectedDates\"\n  [mode]=\"mode.value\"\n  [numberOfMonths]=\"months.value\"\n  [weekStart]=\"weekStart.value\">\n</novo-date-picker>\n\n<section>\n  <novo-label>Selected Values:</novo-label>\n  <div>{{selectedDates | json}}</div>\n</section>\n\n<section>\n  <novo-label>Selection mode</novo-label>\n  <novo-radio-group #mode appearance=\"vertical\" value=\"single\">\n    <novo-radio name=\"mode\" value=\"single\">single</novo-radio>\n    <novo-radio name=\"mode\" value=\"multiple\">multiple</novo-radio>\n    <novo-radio name=\"mode\" value=\"range\">range</novo-radio>\n    <novo-radio name=\"mode\" value=\"week\">week</novo-radio>\n  </novo-radio-group>\n\n  <novo-label># of Months</novo-label>\n  <novo-radio-group #months appearance=\"vertical\" value=\"1\">\n    <novo-radio name=\"months\" value=\"1\">1</novo-radio>\n    <novo-radio name=\"months\" value=\"2\">2</novo-radio>\n  </novo-radio-group>\n\n  <novo-label>Week Start</novo-label>\n  <novo-radio-group #weekStart appearance=\"vertical\" value=\"0\">\n    <novo-radio name=\"weekStart\" value=\"0\">Sun</novo-radio>\n    <novo-radio name=\"weekStart\" value=\"1\">Mon</novo-radio>\n  </novo-radio-group>\n</section>\n", styles: [":host{display:grid;grid-template-columns:1fr 1fr 1fr;gap:2rem}\n"] }]
        }] });

/**
 * @title Color Picker Example
 */
class ColorPickerExample {
    constructor() {
        this.hex = '#4A89DC';
        this.rgb = { r: 218, g: 66, b: 83 };
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: ColorPickerExample, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: ColorPickerExample, isStandalone: false, selector: "color-picker-example", ngImport: i0, template: "<div class=\"demo-side-by-side\">\n  <novo-color-picker [(color)]=\"hex\"></novo-color-picker>\n  <novo-color-picker [(color)]=\"rgb\"></novo-color-picker>\n</div>", styles: [".demo-side-by-side{display:grid;grid-template-columns:1fr 1fr}\n"], dependencies: [{ kind: "component", type: i2$1.NovoColorPickerComponent, selector: "novo-color-picker", inputs: ["width", "colors", "color"], outputs: ["onChange", "onChangeComplete", "onSwatchHover"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: ColorPickerExample, decorators: [{
            type: Component,
            args: [{ selector: 'color-picker-example', standalone: false, template: "<div class=\"demo-side-by-side\">\n  <novo-color-picker [(color)]=\"hex\"></novo-color-picker>\n  <novo-color-picker [(color)]=\"rgb\"></novo-color-picker>\n</div>", styles: [".demo-side-by-side{display:grid;grid-template-columns:1fr 1fr}\n"] }]
        }] });

/**
 * @title Color Input Example
 */
class ColorInputExample {
    constructor() {
        this.hex = '#4A89DC';
        this.rgb = { r: 218, g: 66, b: 83 };
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: ColorInputExample, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: ColorInputExample, isStandalone: false, selector: "color-input-example", ngImport: i0, template: "<novo-color-input [(ngModel)]=\"hex\">\n</novo-color-input>\n\n<novo-color-input [(ngModel)]=\"rgb\">\n</novo-color-input>", styles: [""], dependencies: [{ kind: "directive", type: i1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i1.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "component", type: i2$1.NovoColorInputElement, selector: "novo-color-input", inputs: ["name", "placeholder", "value", "disabled"], outputs: ["blurEvent", "focusEvent", "change", "blur", "focus"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: ColorInputExample, decorators: [{
            type: Component,
            args: [{ selector: 'color-input-example', standalone: false, template: "<novo-color-input [(ngModel)]=\"hex\">\n</novo-color-input>\n\n<novo-color-input [(ngModel)]=\"rgb\">\n</novo-color-input>" }]
        }] });

/**
 * @title Minimal Editor Example
 */
class MinimalEditorExample {
    constructor() {
        this.editorValue = '<p>I AM A PRE-RENDERED VALUE</p><h1>TEST</h1>';
    }
    insertText(editor) {
        editor.insertText('Hello World');
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: MinimalEditorExample, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: MinimalEditorExample, isStandalone: false, selector: "minimal-editor-example", ngImport: i0, template: "<novo-editor [name]=\"'demoEditor'\" [(ngModel)]=\"editorValue\" [minimal]=\"true\" #editor></novo-editor>\n\n<button theme=\"primary\" (click)=\"insertText(editor)\">Insert \"Hello World\" at Cursor</button>\n\n<p>Value:</p>\n<p [innerHtml]=\"editorValue\"></p>\n\n<p>HTML:</p>\n<pre><code>{{editorValue}}</code></pre>\n", styles: [""], dependencies: [{ kind: "directive", type: i1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i1.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "component", type: i2$1.NovoButtonElement, selector: "novo-button,button[theme]", inputs: ["color", "side", "size", "theme", "loading", "icon", "secondIcon", "disabled"] }, { kind: "component", type: i3.NovoCKEditorElement, selector: "novo-editor", inputs: ["config", "debounce", "name", "minimal", "startupFocus", "fileBrowserImageUploadUrl", "disabled", "value"], outputs: ["change", "ready", "blur", "focus", "paste", "loaded"] }, { kind: "directive", type: i2$1.ThemeColorDirective, selector: "[theme]", inputs: ["theme"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: MinimalEditorExample, decorators: [{
            type: Component,
            args: [{ selector: 'minimal-editor-example', standalone: false, template: "<novo-editor [name]=\"'demoEditor'\" [(ngModel)]=\"editorValue\" [minimal]=\"true\" #editor></novo-editor>\n\n<button theme=\"primary\" (click)=\"insertText(editor)\">Insert \"Hello World\" at Cursor</button>\n\n<p>Value:</p>\n<p [innerHtml]=\"editorValue\"></p>\n\n<p>HTML:</p>\n<pre><code>{{editorValue}}</code></pre>\n" }]
        }] });

/**
 * @title Basic Editor Example
 */
class BasicEditorExample {
    constructor() {
        this.editorValue = '<p>I AM A PRE-RENDERED VALUE</p><h1>TEST</h1>';
    }
    insertText(editor) {
        editor.insertText('Hello World');
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: BasicEditorExample, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: BasicEditorExample, isStandalone: false, selector: "basic-editor-example", ngImport: i0, template: "<novo-editor [name]=\"'demoEditor'\" [(ngModel)]=\"editorValue\" #editor></novo-editor>\n\n<button theme=\"primary\" (click)=\"insertText(editor)\">Insert \"Hello World\" at Cursor</button>\n\n<p>Value:</p>\n<p [innerHtml]=\"editorValue\"></p>\n\n<p>HTML:</p>\n<pre><code>{{editorValue}}</code></pre>\n", styles: [""], dependencies: [{ kind: "directive", type: i1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i1.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "component", type: i2$1.NovoButtonElement, selector: "novo-button,button[theme]", inputs: ["color", "side", "size", "theme", "loading", "icon", "secondIcon", "disabled"] }, { kind: "component", type: i3.NovoCKEditorElement, selector: "novo-editor", inputs: ["config", "debounce", "name", "minimal", "startupFocus", "fileBrowserImageUploadUrl", "disabled", "value"], outputs: ["change", "ready", "blur", "focus", "paste", "loaded"] }, { kind: "directive", type: i2$1.ThemeColorDirective, selector: "[theme]", inputs: ["theme"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: BasicEditorExample, decorators: [{
            type: Component,
            args: [{ selector: 'basic-editor-example', standalone: false, template: "<novo-editor [name]=\"'demoEditor'\" [(ngModel)]=\"editorValue\" #editor></novo-editor>\n\n<button theme=\"primary\" (click)=\"insertText(editor)\">Insert \"Hello World\" at Cursor</button>\n\n<p>Value:</p>\n<p [innerHtml]=\"editorValue\"></p>\n\n<p>HTML:</p>\n<pre><code>{{editorValue}}</code></pre>\n" }]
        }] });

/**
 * @title Row Chips Example
 */
class RowChipsExample {
    constructor() {
        this.placeholder = 'Select...';
        const collaborators = [
            {
                id: 1,
                shiftDate: '2021-04-03',
                openings: 1,
                closing: true,
            },
            {
                id: 2,
                shiftDate: '2021-04-06',
                openings: 1,
                closing: true,
            },
            {
                id: 3,
                shiftDate: '2021-04-10',
                openings: 1,
                closing: false,
            },
            {
                id: 4,
                shiftDate: '2021-04-12',
                openings: 1,
                closing: false,
            },
        ];
        this.rowValue = [];
        this.rowDemo = {
            format: '$shiftDate',
            options: collaborators,
            columns: [
                {
                    label: 'Shift Date',
                    data: (item) => {
                        return item.label;
                    },
                },
                {
                    label: 'Openings',
                    editable: true,
                    type: 'number',
                    width: 80,
                    name: 'openings',
                    data: (item) => {
                        return item.value.openings;
                    },
                },
                {
                    label: 'Closing shift?',
                    editable: false,
                    type: 'checkbox',
                    width: 260,
                    name: 'closing',
                    data: (item) => {
                        return item.value.closing;
                    },
                },
            ],
        };
    }
    onChanged(event) {
        console.log('EVENT', event); // tslint:disable-line
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: RowChipsExample, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: RowChipsExample, isStandalone: false, selector: "row-chips-example", ngImport: i0, template: "<novo-row-chips [source]=\"rowDemo\" [placeholder]=\"placeholder\" [(ngModel)]=\"rowValue\" (changed)=\"onChanged($event)\">\n</novo-row-chips>\n\n<br />\n<div class=\"selected-value\">Selected Value: {{rowValue | json}}</div>", styles: [""], dependencies: [{ kind: "directive", type: i1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i1.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "component", type: i2$1.NovoRowChipsElement, selector: "novo-row-chips", inputs: ["closeOnSelect"] }, { kind: "pipe", type: i2.JsonPipe, name: "json" }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: RowChipsExample, decorators: [{
            type: Component,
            args: [{ selector: 'row-chips-example', standalone: false, template: "<novo-row-chips [source]=\"rowDemo\" [placeholder]=\"placeholder\" [(ngModel)]=\"rowValue\" (changed)=\"onChanged($event)\">\n</novo-row-chips>\n\n<br />\n<div class=\"selected-value\">Selected Value: {{rowValue | json}}</div>" }]
        }], ctorParameters: () => [] });

/**
 * @title Hide Chips Example
 */
class HideChipsExample {
    constructor() {
        this.placeholder = 'Select...';
        const collaborators = [
            {
                id: 1,
                firstName: 'Brian',
                lastName: 'Kimball',
                searchEntity: 'candidate',
            },
            {
                id: 2,
                firstName: 'Josh',
                lastName: 'Godi',
                searchEntity: 'contact',
            },
            {
                id: 3,
                firstName: 'Alec',
                lastName: 'Sibilia',
                searchEntity: 'candidate',
            },
            {
                id: 4,
                firstName: 'Kameron',
                lastName: 'Sween',
                searchEntity: 'candidate',
            },
            {
                id: 5,
                firstName: 'Emily',
                lastName: 'Jones',
                searchEntity: 'candidate',
            },
            {
                id: 6,
                firstName: 'Michael',
                lastName: 'Smith',
                searchEntity: 'contact',
            },
            {
                id: 7,
                firstName: 'Sophia',
                lastName: 'Johnson',
                searchEntity: 'candidate',
            },
            {
                id: 8,
                firstName: 'Ethan',
                lastName: 'Brown',
                searchEntity: 'contact',
            },
            {
                id: 9,
                firstName: 'Isabella',
                lastName: 'Williams',
                searchEntity: 'candidate',
            },
            {
                id: 10,
                firstName: 'Jacob',
                lastName: 'Davis',
                searchEntity: 'contact',
            },
            {
                id: 11,
                firstName: 'Mia',
                lastName: 'Miller',
                searchEntity: 'candidate',
            },
            {
                id: 12,
                firstName: 'Alexander',
                lastName: 'Wilson',
                searchEntity: 'contact',
            },
            {
                id: 13,
                firstName: 'Charlotte',
                lastName: 'Taylor',
                searchEntity: 'candidate',
            },
            {
                id: 14,
                firstName: 'William',
                lastName: 'Anderson',
                searchEntity: 'contact',
            },
            {
                id: 15,
                firstName: 'Amelia',
                lastName: 'Martinez',
                searchEntity: 'candidate',
            },
            {
                id: 16,
                firstName: 'Daniel',
                lastName: 'Jackson',
                searchEntity: 'contact',
            },
        ];
        this.hideDemo = {
            format: '$firstName $lastName',
            options: collaborators,
            hiddenChipsLimit: 3
        };
        this.model = [{
                id: 12,
                firstName: 'Alexander',
                lastName: 'Wilson',
                searchEntity: 'contact',
            },
            {
                id: 13,
                firstName: 'Charlotte',
                lastName: 'Taylor',
                searchEntity: 'candidate',
            },
            {
                id: 14,
                firstName: 'William',
                lastName: 'Anderson',
                searchEntity: 'contact',
            },
            {
                id: 15,
                firstName: 'Amelia',
                lastName: 'Martinez',
                searchEntity: 'candidate',
            },
            {
                id: 16,
                firstName: 'Daniel',
                lastName: 'Jackson',
                searchEntity: 'contact',
            }];
    }
    onChanged(event) {
        console.log('EVENT', event);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: HideChipsExample, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: HideChipsExample, isStandalone: false, selector: "hide-chips-example", ngImport: i0, template: "<novo-chips [source]=\"hideDemo\" [placeholder]=\"placeholder\" [(ngModel)]=\"model\" (changed)=\"onChanged($event)\">\n</novo-chips>\n", styles: [""], dependencies: [{ kind: "directive", type: i1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i1.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "component", type: i2$1.NovoChipsElement, selector: "chips,novo-chips", inputs: ["closeOnSelect", "placeholder", "source", "maxlength", "type", "allowCustomValues", "disablePickerInput", "overrideElement", "width", "minWidth", "size", "value"], outputs: ["changed", "focus", "blur", "typing"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: HideChipsExample, decorators: [{
            type: Component,
            args: [{ selector: 'hide-chips-example', standalone: false, template: "<novo-chips [source]=\"hideDemo\" [placeholder]=\"placeholder\" [(ngModel)]=\"model\" (changed)=\"onChanged($event)\">\n</novo-chips>\n" }]
        }], ctorParameters: () => [] });

/**
 * @title Grouped Multi Picker Example
 */
class GroupedMultiPickerExample {
    constructor() {
        this.placeholder = 'Select...';
        this.setupGroupedMultiPickerDemo();
    }
    setupGroupedMultiPickerDemo() {
        const categoryMap = new Map();
        for (let i = 0; i < 10; i++) {
            const items = [];
            for (let j = 0; j < 10; j++) {
                items.push({ value: `${i}-${j}`, label: `Category ${i} - Item ${j}` });
            }
            categoryMap.set(`${i}`, { value: `${i}`, label: `Category ${i}`, items });
        }
        this.groupedMultiPicker1 = {
            categoryMap,
            resultsTemplate: GroupedMultiPickerResults,
            displayAll: true,
        };
        this.groupedMultiPicker2 = {
            categoryMap,
            resultsTemplate: GroupedMultiPickerResults,
        };
        this.groupedMultiPicker3 = {
            categories: [
                { value: 'C1', label: 'Category 1' },
                { value: 'C2', label: 'Category 2' },
                { value: 'C3', label: 'Category 3' },
                { value: 'C4', label: 'Category 4' },
                { value: 'C5', label: 'Category 5' },
            ],
            getItemsForCategoryAsync: (category) => {
                return new Promise((resolve) => {
                    setTimeout(() => {
                        resolve([
                            { value: 'A1', label: 'Async 1' },
                            { value: 'A2', label: 'Async 2' },
                            { value: 'A3', label: 'Async 3' },
                            { value: 'A4', label: 'Async 4' },
                            { value: 'A5', label: 'Async 5' },
                        ]);
                    }, 1000);
                });
            },
            resultsTemplate: GroupedMultiPickerResults,
        };
    }
    onChanged(event) {
        console.log('EVENT', event); // tslint:disable-line
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: GroupedMultiPickerExample, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: GroupedMultiPickerExample, isStandalone: false, selector: "grouped-multi-picker-example", ngImport: i0, template: "<h6>Basic Static Example</h6>\n<p>Fully static data, optional \"all\" category</p>\n<div class=\"selected-value\">Selected Value: {{ groupedMultiPicker1Value }}</div>\n<novo-chips [source]=\"groupedMultiPicker1\" [placeholder]=\"placeholder\" [(ngModel)]=\"groupedMultiPicker1Value\" (changed)=\"onChanged($event)\"></novo-chips>\n\n<br/>\n<br/>\n\n<h6>Custom Static Example</h6>\n<p>Fully static data, all category turned off</p>\n<div class=\"selected-value\">Selected Value: {{ groupedMultiPicker2Value }}</div>\n<novo-chips [source]=\"groupedMultiPicker2\" [placeholder]=\"placeholder\" [(ngModel)]=\"groupedMultiPicker2Value\" (changed)=\"onChanged($event)\"></novo-chips>\n\n<br/>\n<br/>\n\n<h6>Basic Async Example</h6>\n<p>Category list is static (always has to be) with the items fetched via async call</p>\n<div class=\"selected-value\">Selected Value: {{ groupedMultiPicker3Value }}</div>\n<novo-chips [source]=\"groupedMultiPicker3\" [placeholder]=\"placeholder\" [(ngModel)]=\"groupedMultiPicker3Value\" (changed)=\"onChanged($event)\"></novo-chips>\n", styles: [""], dependencies: [{ kind: "directive", type: i1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i1.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "component", type: i2$1.NovoChipsElement, selector: "chips,novo-chips", inputs: ["closeOnSelect", "placeholder", "source", "maxlength", "type", "allowCustomValues", "disablePickerInput", "overrideElement", "width", "minWidth", "size", "value"], outputs: ["changed", "focus", "blur", "typing"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: GroupedMultiPickerExample, decorators: [{
            type: Component,
            args: [{ selector: 'grouped-multi-picker-example', standalone: false, template: "<h6>Basic Static Example</h6>\n<p>Fully static data, optional \"all\" category</p>\n<div class=\"selected-value\">Selected Value: {{ groupedMultiPicker1Value }}</div>\n<novo-chips [source]=\"groupedMultiPicker1\" [placeholder]=\"placeholder\" [(ngModel)]=\"groupedMultiPicker1Value\" (changed)=\"onChanged($event)\"></novo-chips>\n\n<br/>\n<br/>\n\n<h6>Custom Static Example</h6>\n<p>Fully static data, all category turned off</p>\n<div class=\"selected-value\">Selected Value: {{ groupedMultiPicker2Value }}</div>\n<novo-chips [source]=\"groupedMultiPicker2\" [placeholder]=\"placeholder\" [(ngModel)]=\"groupedMultiPicker2Value\" (changed)=\"onChanged($event)\"></novo-chips>\n\n<br/>\n<br/>\n\n<h6>Basic Async Example</h6>\n<p>Category list is static (always has to be) with the items fetched via async call</p>\n<div class=\"selected-value\">Selected Value: {{ groupedMultiPicker3Value }}</div>\n<novo-chips [source]=\"groupedMultiPicker3\" [placeholder]=\"placeholder\" [(ngModel)]=\"groupedMultiPicker3Value\" (changed)=\"onChanged($event)\"></novo-chips>\n" }]
        }], ctorParameters: () => [] });

/**
 * @title Formatted Chips Example
 */
class FormattedChipsExample {
    constructor() {
        this.placeholder = 'Select...';
        const collaborators = [
            {
                id: 1,
                firstName: 'Brian',
                lastName: 'Kimball',
                searchEntity: 'candidate',
            },
            {
                id: 2,
                firstName: 'Josh',
                lastName: 'Godi',
                searchEntity: 'contact',
            },
            {
                id: 3,
                firstName: 'Alec',
                lastName: 'Sibilia',
                searchEntity: 'candidate',
            },
            {
                id: 4,
                firstName: 'Kameron',
                lastName: 'Sween',
            },
        ];
        this.formatted = {
            format: '$firstName $lastName',
            options: collaborators,
        };
    }
    onChanged(event) {
        console.log('EVENT', event); // tslint:disable-line
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: FormattedChipsExample, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: FormattedChipsExample, isStandalone: false, selector: "formatted-chips-example", ngImport: i0, template: "<div class=\"selected-value\">Selected Value: {{value}}</div>\n<novo-chips [source]=\"formatted\" [placeholder]=\"placeholder\" [(ngModel)]=\"value\" (changed)=\"onChanged($event)\"></novo-chips>\n", styles: [""], dependencies: [{ kind: "directive", type: i1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i1.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "component", type: i2$1.NovoChipsElement, selector: "chips,novo-chips", inputs: ["closeOnSelect", "placeholder", "source", "maxlength", "type", "allowCustomValues", "disablePickerInput", "overrideElement", "width", "minWidth", "size", "value"], outputs: ["changed", "focus", "blur", "typing"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: FormattedChipsExample, decorators: [{
            type: Component,
            args: [{ selector: 'formatted-chips-example', standalone: false, template: "<div class=\"selected-value\">Selected Value: {{value}}</div>\n<novo-chips [source]=\"formatted\" [placeholder]=\"placeholder\" [(ngModel)]=\"value\" (changed)=\"onChanged($event)\"></novo-chips>\n" }]
        }], ctorParameters: () => [] });

/**
 * @title Basic Chips Example
 */
class CustomValuesExample {
    constructor() {
        this.staticDemo = {
            options: [
                'Alabama',
                'Alaska',
                'Arizona',
                'Arkansas',
                'California',
                'Colorado',
                'Connecticut',
                'Delaware',
                'Florida',
                'Georgia',
                'Hawaii',
                'Idaho',
                'Illinois',
                'Indiana',
                'Iowa',
                'Kansas',
                'Kentucky',
                'Louisiana',
                'Maine',
                'Maryland',
                'Massachusetts',
                'Michigan',
                'Minnesota',
                'Mississippi',
                'Missouri',
                'Montana',
                'Nebraska',
                'Nevada',
                'New Hampshire',
                'New Jersey',
                'New Mexico',
                'New York',
                'North Dakota',
                'North Carolina',
                'Ohio',
                'Oklahoma',
                'Oregon',
                'Pennsylvania',
                'Rhode Island',
                'South Carolina',
                'South Dakota',
                'Tennessee',
                'Texas',
                'Utah',
                'Vermont',
                'Virginia',
                'Washington',
                'West Virginia',
                'Wisconsin',
                'Wyoming',
            ],
        };
        this.placeholder = 'Type and press enter...';
        this.value = [];
    }
    onChanged(event) {
        console.log('EVENT', event); // tslint:disable-line
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: CustomValuesExample, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: CustomValuesExample, isStandalone: false, selector: "custom-values-example", ngImport: i0, template: "<div class=\"selected-value\">Selected Value: {{ value }}</div>\n<novo-chips [source]=\"staticDemo\" [placeholder]=\"placeholder\" [(ngModel)]=\"value\" (changed)=\"onChanged($event)\" [allowCustomValues]=\"true\"></novo-chips>\n", styles: [""], dependencies: [{ kind: "directive", type: i1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i1.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "component", type: i2$1.NovoChipsElement, selector: "chips,novo-chips", inputs: ["closeOnSelect", "placeholder", "source", "maxlength", "type", "allowCustomValues", "disablePickerInput", "overrideElement", "width", "minWidth", "size", "value"], outputs: ["changed", "focus", "blur", "typing"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: CustomValuesExample, decorators: [{
            type: Component,
            args: [{ selector: 'custom-values-example', standalone: false, template: "<div class=\"selected-value\">Selected Value: {{ value }}</div>\n<novo-chips [source]=\"staticDemo\" [placeholder]=\"placeholder\" [(ngModel)]=\"value\" (changed)=\"onChanged($event)\" [allowCustomValues]=\"true\"></novo-chips>\n" }]
        }] });

/**
 * @title Close On Select Chips Example
 */
class CloseOnSelectChipsExample {
    constructor() {
        this.placeholder = 'Select...';
        const collaborators = [
            {
                id: 1,
                firstName: 'Brian',
                lastName: 'Kimball',
            },
            {
                id: 2,
                firstName: 'Josh',
                lastName: 'Godi',
            },
            {
                id: 3,
                firstName: 'Alec',
                lastName: 'Sibilia',
            },
            {
                id: 4,
                firstName: 'Kameron',
                lastName: 'Sween',
            },
        ];
        this.formatted = {
            format: '$firstName $lastName',
            options: collaborators,
        };
    }
    onChanged(event) {
        console.log('EVENT', event); // tslint:disable-line
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: CloseOnSelectChipsExample, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: CloseOnSelectChipsExample, isStandalone: false, selector: "close-on-select-chips-example", ngImport: i0, template: "<div class=\"selected-value\">Selected Value: {{value}}</div>\n<novo-chips [closeOnSelect]=\"true\" [source]=\"formatted\" [placeholder]=\"placeholder\" [(ngModel)]=\"value\" (changed)=\"onChanged($event)\"></novo-chips>\n", styles: [""], dependencies: [{ kind: "directive", type: i1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i1.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "component", type: i2$1.NovoChipsElement, selector: "chips,novo-chips", inputs: ["closeOnSelect", "placeholder", "source", "maxlength", "type", "allowCustomValues", "disablePickerInput", "overrideElement", "width", "minWidth", "size", "value"], outputs: ["changed", "focus", "blur", "typing"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: CloseOnSelectChipsExample, decorators: [{
            type: Component,
            args: [{ selector: 'close-on-select-chips-example', standalone: false, template: "<div class=\"selected-value\">Selected Value: {{value}}</div>\n<novo-chips [closeOnSelect]=\"true\" [source]=\"formatted\" [placeholder]=\"placeholder\" [(ngModel)]=\"value\" (changed)=\"onChanged($event)\"></novo-chips>\n" }]
        }], ctorParameters: () => [] });

/**
 * @title Chip Usage Example
 */
class ChipUsageExample {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: ChipUsageExample, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: ChipUsageExample, isStandalone: false, selector: "chip-usage-example", ngImport: i0, template: "<novo-stack gap=\"md\">\n  <novo-row gap=\"md\">\n    <novo-chip [size]=\"size.value\">Standard</novo-chip>\n    <novo-chip [size]=\"size.value\">\n      <novo-icon>bell</novo-icon>\n    </novo-chip>\n    <novo-chip [size]=\"size.value\">\n      <novo-text>Removable</novo-text>\n      <novo-icon novoChipRemove>x</novo-icon>\n    </novo-chip>\n    <novo-chip [size]=\"size.value\" disabled>\n      <novo-icon>candidate</novo-icon>\n      <novo-text>Disabled</novo-text>\n    </novo-chip>\n  </novo-row>\n  <novo-row gap=\"md\">\n    <novo-chip color=\"success\" [size]=\"size.value\">Standard</novo-chip>\n    <novo-chip color=\"negative\" [size]=\"size.value\">\n      <novo-icon>bell</novo-icon>\n    </novo-chip>\n    <novo-chip color=\"ocean\" [size]=\"size.value\">\n      <novo-text>Removable</novo-text>\n      <novo-icon novoChipRemove>x</novo-icon>\n    </novo-chip>\n    <novo-chip color=\"candidate\" [size]=\"size.value\" disabled>\n      <novo-icon>candidate</novo-icon>\n      <novo-text>Disabled</novo-text>\n    </novo-chip>\n  </novo-row>\n  <novo-row gap=\"md\">\n    <novo-chip accent=\"success\" [size]=\"size.value\">Standard</novo-chip>\n    <novo-chip accent=\"negative\" [size]=\"size.value\">\n      <novo-icon>bell</novo-icon>\n    </novo-chip>\n    <novo-chip accent=\"ocean\" [size]=\"size.value\">\n      <novo-text>Removable</novo-text>\n      <novo-icon novoChipRemove>x</novo-icon>\n    </novo-chip>\n    <novo-chip accent=\"candidate\" [size]=\"size.value\" disabled>\n      <novo-icon>candidate</novo-icon>\n      <novo-text>Disabled</novo-text>\n    </novo-chip>\n  </novo-row>\n\n</novo-stack>\n\n<section>\n  <novo-label>Size</novo-label>\n  <novo-radio-group #size appearance=\"vertical\" value=\"md\">\n    <novo-radio name=\"size\" value=\"xs\">xs</novo-radio>\n    <novo-radio name=\"size\" value=\"sm\">sm</novo-radio>\n    <novo-radio name=\"size\" value=\"md\">md</novo-radio>\n    <novo-radio name=\"size\" value=\"lg\">lg</novo-radio>\n    <novo-radio name=\"size\" value=\"xl\">xl</novo-radio>\n  </novo-radio-group>\n\n\n\n</section>", styles: [":host{display:grid;grid-template-columns:1fr 1fr;gap:2rem}\n"], dependencies: [{ kind: "component", type: i2$1.NovoFlexElement, selector: "novo-flex,novo-row", inputs: ["direction", "align", "justify", "wrap", "gap"] }, { kind: "component", type: i2$1.NovoStackElement, selector: "novo-stack,novo-column", inputs: ["direction", "align"] }, { kind: "component", type: i2$1.NovoRadioElement, selector: "novo-radio", inputs: ["id", "name", "tabindex", "vertical", "label", "button", "theme", "size", "icon", "color", "disabled", "checked", "value"], outputs: ["change", "blur", "focus"] }, { kind: "component", type: i2$1.NovoRadioGroup, selector: "novo-radio-group", inputs: ["id", "tabindex", "errorStateMatcher", "appearance", "value", "name", "disabled", "required", "placeholder"], outputs: ["change", "blur"] }, { kind: "component", type: i2$1.NovoChipElement, selector: "novo-chip, [novo-chip]", inputs: ["color", "tabIndex", "size", "type", "selected", "value", "selectable", "disabled", "removable"], outputs: ["selectionChange", "destroyed", "removed"] }, { kind: "directive", type: i2$1.NovoChipRemove, selector: "[novoChipRemove]" }, { kind: "component", type: i2$1.NovoIconComponent, selector: "novo-icon", inputs: ["raised", "theme", "shape", "color", "size", "smaller", "larger", "alt", "name"] }, { kind: "component", type: i2$1.NovoText, selector: "novo-text,[novo-text]", inputs: ["block"] }, { kind: "component", type: i2$1.NovoLabel, selector: "novo-label,[novo-label]", inputs: ["id"] }, { kind: "directive", type: i2$1.GapDirective, selector: "[gap]", inputs: ["gap"] }, { kind: "directive", type: i2$1.AccentColorDirective, selector: "[accent]", inputs: ["accent"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: ChipUsageExample, decorators: [{
            type: Component,
            args: [{ selector: 'chip-usage-example', standalone: false, template: "<novo-stack gap=\"md\">\n  <novo-row gap=\"md\">\n    <novo-chip [size]=\"size.value\">Standard</novo-chip>\n    <novo-chip [size]=\"size.value\">\n      <novo-icon>bell</novo-icon>\n    </novo-chip>\n    <novo-chip [size]=\"size.value\">\n      <novo-text>Removable</novo-text>\n      <novo-icon novoChipRemove>x</novo-icon>\n    </novo-chip>\n    <novo-chip [size]=\"size.value\" disabled>\n      <novo-icon>candidate</novo-icon>\n      <novo-text>Disabled</novo-text>\n    </novo-chip>\n  </novo-row>\n  <novo-row gap=\"md\">\n    <novo-chip color=\"success\" [size]=\"size.value\">Standard</novo-chip>\n    <novo-chip color=\"negative\" [size]=\"size.value\">\n      <novo-icon>bell</novo-icon>\n    </novo-chip>\n    <novo-chip color=\"ocean\" [size]=\"size.value\">\n      <novo-text>Removable</novo-text>\n      <novo-icon novoChipRemove>x</novo-icon>\n    </novo-chip>\n    <novo-chip color=\"candidate\" [size]=\"size.value\" disabled>\n      <novo-icon>candidate</novo-icon>\n      <novo-text>Disabled</novo-text>\n    </novo-chip>\n  </novo-row>\n  <novo-row gap=\"md\">\n    <novo-chip accent=\"success\" [size]=\"size.value\">Standard</novo-chip>\n    <novo-chip accent=\"negative\" [size]=\"size.value\">\n      <novo-icon>bell</novo-icon>\n    </novo-chip>\n    <novo-chip accent=\"ocean\" [size]=\"size.value\">\n      <novo-text>Removable</novo-text>\n      <novo-icon novoChipRemove>x</novo-icon>\n    </novo-chip>\n    <novo-chip accent=\"candidate\" [size]=\"size.value\" disabled>\n      <novo-icon>candidate</novo-icon>\n      <novo-text>Disabled</novo-text>\n    </novo-chip>\n  </novo-row>\n\n</novo-stack>\n\n<section>\n  <novo-label>Size</novo-label>\n  <novo-radio-group #size appearance=\"vertical\" value=\"md\">\n    <novo-radio name=\"size\" value=\"xs\">xs</novo-radio>\n    <novo-radio name=\"size\" value=\"sm\">sm</novo-radio>\n    <novo-radio name=\"size\" value=\"md\">md</novo-radio>\n    <novo-radio name=\"size\" value=\"lg\">lg</novo-radio>\n    <novo-radio name=\"size\" value=\"xl\">xl</novo-radio>\n  </novo-radio-group>\n\n\n\n</section>", styles: [":host{display:grid;grid-template-columns:1fr 1fr;gap:2rem}\n"] }]
        }] });

/**
 * @title Basic Chips Example
 */
class BasicChipsExample {
    constructor() {
        this.staticDemo = {
            options: [
                'Alabama',
                'Alaska',
                'Arizona',
                'Arkansas',
                'California',
                'Colorado',
                'Connecticut',
                'Delaware',
                'Florida',
                'Georgia',
                'Hawaii',
                'Idaho',
                'Illinois',
                'Indiana',
                'Iowa',
                'Kansas',
                'Kentucky',
                'Louisiana',
                'Maine',
                'Maryland',
                'Massachusetts',
                'Michigan',
                'Minnesota',
                'Mississippi',
                'Missouri',
                'Montana',
                'Nebraska',
                'Nevada',
                'New Hampshire',
                'New Jersey',
                'New Mexico',
                'New York',
                'North Dakota',
                'North Carolina',
                'Ohio',
                'Oklahoma',
                'Oregon',
                'Pennsylvania',
                'Rhode Island',
                'South Carolina',
                'South Dakota',
                'Tennessee',
                'Texas',
                'Utah',
                'Vermont',
                'Virginia',
                'Washington',
                'West Virginia',
                'Wisconsin',
                'Wyoming',
            ],
        };
        this.placeholder = 'Select...';
        this.value = ['Alabama'];
    }
    onChanged(event) {
        console.log('EVENT', event); // tslint:disable-line
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: BasicChipsExample, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: BasicChipsExample, isStandalone: false, selector: "basic-chips-example", ngImport: i0, template: "<div class=\"selected-value\">Selected Value: {{value}}</div>\n<novo-chips [source]=\"staticDemo\" [placeholder]=\"placeholder\" [(ngModel)]=\"value\" (changed)=\"onChanged($event)\"></novo-chips>\n", styles: [""], dependencies: [{ kind: "directive", type: i1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i1.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "component", type: i2$1.NovoChipsElement, selector: "chips,novo-chips", inputs: ["closeOnSelect", "placeholder", "source", "maxlength", "type", "allowCustomValues", "disablePickerInput", "overrideElement", "width", "minWidth", "size", "value"], outputs: ["changed", "focus", "blur", "typing"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: BasicChipsExample, decorators: [{
            type: Component,
            args: [{ selector: 'basic-chips-example', standalone: false, template: "<div class=\"selected-value\">Selected Value: {{value}}</div>\n<novo-chips [source]=\"staticDemo\" [placeholder]=\"placeholder\" [(ngModel)]=\"value\" (changed)=\"onChanged($event)\"></novo-chips>\n" }]
        }] });

/**
 * @title Async Chips Example
 */
class AsyncChipsExample {
    constructor() {
        this.placeholder = 'Select...';
        const states = [
            'Alabama',
            'Alaska',
            'Arizona',
            'Arkansas',
            'California',
            'Colorado',
            'Connecticut',
            'Delaware',
            'Florida',
            'Georgia',
            'Hawaii',
            'Idaho',
            'Illinois',
            'Indiana',
            'Iowa',
            'Kansas',
            'Kentucky',
            'Louisiana',
            'Maine',
            'Maryland',
            'Massachusetts',
            'Michigan',
            'Minnesota',
            'Mississippi',
            'Missouri',
            'Montana',
            'Nebraska',
            'Nevada',
            'New Hampshire',
            'New Jersey',
            'New Mexico',
            'New York',
            'North Dakota',
            'North Carolina',
            'Ohio',
            'Oklahoma',
            'Oregon',
            'Pennsylvania',
            'Rhode Island',
            'South Carolina',
            'South Dakota',
            'Tennessee',
            'Texas',
            'Utah',
            'Vermont',
            'Virginia',
            'Washington',
            'West Virginia',
            'Wisconsin',
            'Wyoming',
        ];
        const abbrieviated = [
            {
                value: 'USA',
                label: 'United States',
            },
            {
                value: 'GB',
                label: 'Great Britain',
            },
            {
                value: 'CA',
                label: 'Canada',
            },
            {
                value: 'AU',
                label: 'Austrailia',
            },
        ];
        this.async = {
            options: () => {
                return new Promise((resolve) => {
                    setTimeout(() => {
                        resolve(abbrieviated);
                    }, 300);
                });
            },
            getLabels: (data) => {
                return new Promise((resolve) => {
                    setTimeout(() => {
                        const values = data.map((item) => item.value);
                        const results = abbrieviated.filter((item) => values.includes(item.value));
                        resolve(results);
                    }, 300);
                });
            },
        };
        this.value = [
            {
                value: 'USA',
            },
            {
                value: 'GB',
            },
        ];
    }
    onChanged(event) {
        console.log('EVENT', event); // tslint:disable-line
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: AsyncChipsExample, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: AsyncChipsExample, isStandalone: false, selector: "async-chips-example", ngImport: i0, template: "<div class=\"selected-value\">Selected Value: {{value}}</div>\n<novo-chips [source]=\"async\" [placeholder]=\"placeholder\" [(ngModel)]=\"value\" (changed)=\"onChanged($event)\"></novo-chips>\n", styles: [""], dependencies: [{ kind: "directive", type: i1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i1.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "component", type: i2$1.NovoChipsElement, selector: "chips,novo-chips", inputs: ["closeOnSelect", "placeholder", "source", "maxlength", "type", "allowCustomValues", "disablePickerInput", "overrideElement", "width", "minWidth", "size", "value"], outputs: ["changed", "focus", "blur", "typing"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: AsyncChipsExample, decorators: [{
            type: Component,
            args: [{ selector: 'async-chips-example', standalone: false, template: "<div class=\"selected-value\">Selected Value: {{value}}</div>\n<novo-chips [source]=\"async\" [placeholder]=\"placeholder\" [(ngModel)]=\"value\" (changed)=\"onChanged($event)\"></novo-chips>\n" }]
        }], ctorParameters: () => [] });

/**
 * @title Checkbox List Usage
 */
class CheckboxListExample {
    constructor() {
        this.options1 = [
            {
                label: 'Unchecked',
                checked: false,
                value: 1,
            },
            {
                label: 'Checked',
                checked: true,
                value: 2,
            },
        ];
        this.options2 = [
            {
                label: 'Unchecked',
                checked: false,
                value: 3,
            },
            {
                label: 'Checked',
                checked: true,
                value: 4,
            },
        ];
    }
    onChange(change) {
        console.log('Checkbox Change:', change); // tslint:disable-line
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: CheckboxListExample, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: CheckboxListExample, isStandalone: false, selector: "checkbox-list-example", ngImport: i0, template: "Enabled:\n<novo-check-list [options]=\"options1\"></novo-check-list>\n<br />\nDisabled:\n<novo-check-list [options]=\"options2\" [disabled]=\"true\"></novo-check-list>\n", styles: [""], dependencies: [{ kind: "component", type: i2$1.NovoCheckListElement, selector: "novo-check-list", inputs: ["name", "options", "disabled"], outputs: ["onSelect"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: CheckboxListExample, decorators: [{
            type: Component,
            args: [{ selector: 'checkbox-list-example', standalone: false, template: "Enabled:\n<novo-check-list [options]=\"options1\"></novo-check-list>\n<br />\nDisabled:\n<novo-check-list [options]=\"options2\" [disabled]=\"true\"></novo-check-list>\n" }]
        }] });

/**
 * @title Basic Checkbox Usage
 */
class BasicCheckboxExample {
    constructor() {
        this.items = [
            {
                name: 'Unchecked',
                isChecked: false,
                disabled: false,
            },
            {
                name: 'Checked',
                isChecked: true,
                disabled: false,
            },
            {
                name: 'Indeterminate',
                isChecked: true,
                disabled: false,
                indeterminate: true,
            },
            {
                name: 'Disabled',
                isChecked: false,
                disabled: true,
            },
            {
                name: 'Disabled and Checked',
                isChecked: true,
                disabled: true,
            },
            {
                name: 'Disabled and Indeterminate',
                isChecked: true,
                disabled: true,
                indeterminate: true,
            },
        ];
    }
    onChange(change, item) {
        console.log('Checkbox Change:', change); // tslint:disable-line
        if (item.indeterminate) {
            item.indeterminate = false;
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: BasicCheckboxExample, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: BasicCheckboxExample, isStandalone: false, selector: "basic-checkbox-example", ngImport: i0, template: "<div *ngFor=\"let item of items\">\n  <novo-checkbox\n    [label]=\"item.name\"\n    [(ngModel)]=\"item.isChecked\"\n    [disabled]=\"item.disabled\"\n    [indeterminate]=\"item.indeterminate\"\n    (onSelect)=\"onChange($event, item)\"></novo-checkbox>\n</div>", styles: [""], dependencies: [{ kind: "directive", type: i1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i1.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "directive", type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "component", type: i2$1.NovoCheckboxElement, selector: "novo-checkbox", inputs: ["aria-label", "aria-labelledby", "aria-describedby", "id", "name", "label", "disabled", "layoutOptions", "color", "value", "tabIndex", "required", "checked", "indeterminate"], outputs: ["change", "indeterminateChange", "onSelect"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: BasicCheckboxExample, decorators: [{
            type: Component,
            args: [{ selector: 'basic-checkbox-example', standalone: false, template: "<div *ngFor=\"let item of items\">\n  <novo-checkbox\n    [label]=\"item.name\"\n    [(ngModel)]=\"item.isChecked\"\n    [disabled]=\"item.disabled\"\n    [indeterminate]=\"item.indeterminate\"\n    (onSelect)=\"onChange($event, item)\"></novo-checkbox>\n</div>" }]
        }] });

// NG2
/**
 * @title Title Example
 */
class TitleExample {
    constructor() {
        this.icons = ['email', 'bell', 'person', 'caution', 'chart-pie', 'bot', 'certification', 'calendar', 'send', 'coffee'];
        this.index = 0;
    }
    get icon() {
        return this.icons[this.index % this.icons.length];
    }
    changeIcon() {
        console.log('changign icon', this.index);
        this.index++;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: TitleExample, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: TitleExample, isStandalone: false, selector: "title-example", ngImport: i0, template: "<section>\n  <novo-title smaller>Small Title</novo-title>\n  <novo-title>Default Title</novo-title>\n  <novo-title larger>Large Title</novo-title>\n</section>\n\n<section>\n  <novo-title error smaller>Error Title</novo-title>\n  <novo-title muted>Muted Title</novo-title>\n  <novo-title color=\"candidate\" larger>Candidate Title</novo-title>\n</section>\n\n<section>\n  <novo-title color=\"positive\">\n    <novo-icon>{{icon}}</novo-icon> Title with Icon\n  </novo-title>\n  <button theme=\"secondary\" (click)=\"changeIcon()\">Change Icon</button>\n</section>", styles: [":host{display:grid;grid-template-columns:1fr 1fr 1fr}\n"], dependencies: [{ kind: "component", type: i2$1.NovoButtonElement, selector: "novo-button,button[theme]", inputs: ["color", "side", "size", "theme", "loading", "icon", "secondIcon", "disabled"] }, { kind: "component", type: i2$1.NovoIconComponent, selector: "novo-icon", inputs: ["raised", "theme", "shape", "color", "size", "smaller", "larger", "alt", "name"] }, { kind: "component", type: i2$1.NovoTitle, selector: "novo-title,[novo-title]" }, { kind: "directive", type: i2$1.ThemeColorDirective, selector: "[theme]", inputs: ["theme"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: TitleExample, decorators: [{
            type: Component,
            args: [{ selector: 'title-example', standalone: false, template: "<section>\n  <novo-title smaller>Small Title</novo-title>\n  <novo-title>Default Title</novo-title>\n  <novo-title larger>Large Title</novo-title>\n</section>\n\n<section>\n  <novo-title error smaller>Error Title</novo-title>\n  <novo-title muted>Muted Title</novo-title>\n  <novo-title color=\"candidate\" larger>Candidate Title</novo-title>\n</section>\n\n<section>\n  <novo-title color=\"positive\">\n    <novo-icon>{{icon}}</novo-icon> Title with Icon\n  </novo-title>\n  <button theme=\"secondary\" (click)=\"changeIcon()\">Change Icon</button>\n</section>", styles: [":host{display:grid;grid-template-columns:1fr 1fr 1fr}\n"] }]
        }] });

// NG2
/**
 * @title Text Example
 */
class TextExample {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: TextExample, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: TextExample, isStandalone: false, selector: "text-example", ngImport: i0, template: "<novo-text smaller block marginAfter>\n  Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor\n  incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud\n  exercitation ullamco labor.\n</novo-text>\n\n<novo-text block marginAfter>\n  Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor\n  incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud\n  exercitation ullamco labor.\n</novo-text>\n\n<novo-text larger block marginAfter>\n  Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor\n  incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud\n  exercitation ullamco labor.\n</novo-text>\n\n<novo-text smaller color=\"grapefruit\" weight=\"medium\" block marginAfter>\n  Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor\n  incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud\n  exercitation ullamco labor.\n</novo-text>\n\n<novo-text color=\"positive\" weight=\"medium\" block marginAfter>\n  <novo-icon>email</novo-icon> Lorem ipsum dolor sit amet, consectetur adipiscing elit,\n  sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim\n  veniam, quis nostrud <novo-icon>caution</novo-icon> exercitation ullamco labor.\n</novo-text>", styles: [""], dependencies: [{ kind: "component", type: i2$1.NovoIconComponent, selector: "novo-icon", inputs: ["raised", "theme", "shape", "color", "size", "smaller", "larger", "alt", "name"] }, { kind: "component", type: i2$1.NovoText, selector: "novo-text,[novo-text]", inputs: ["block"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: TextExample, decorators: [{
            type: Component,
            args: [{ selector: 'text-example', standalone: false, template: "<novo-text smaller block marginAfter>\n  Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor\n  incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud\n  exercitation ullamco labor.\n</novo-text>\n\n<novo-text block marginAfter>\n  Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor\n  incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud\n  exercitation ullamco labor.\n</novo-text>\n\n<novo-text larger block marginAfter>\n  Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor\n  incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud\n  exercitation ullamco labor.\n</novo-text>\n\n<novo-text smaller color=\"grapefruit\" weight=\"medium\" block marginAfter>\n  Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor\n  incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud\n  exercitation ullamco labor.\n</novo-text>\n\n<novo-text color=\"positive\" weight=\"medium\" block marginAfter>\n  <novo-icon>email</novo-icon> Lorem ipsum dolor sit amet, consectetur adipiscing elit,\n  sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim\n  veniam, quis nostrud <novo-icon>caution</novo-icon> exercitation ullamco labor.\n</novo-text>" }]
        }] });

// NG2
/**
 * @title Link Example
 */
class LinkExample {
    alert(message) {
        alert(message);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: LinkExample, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: LinkExample, isStandalone: false, selector: "link-example", ngImport: i0, template: "<novo-text smaller block marginAfter>\n  Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor\n  incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud\n  exercitation ullamco labor <novo-link href=\"#\">\n    <novo-icon>bell</novo-icon>click here\n  </novo-link> to read more.\n</novo-text>\n\n<novo-text block marginAfter>\n  Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor\n  incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud\n  exercitation ullamco labor <novo-link href=\"#\">click here</novo-link> to read more.\n</novo-text>\n\n<novo-text larger block marginAfter>\n  Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor\n  incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud\n  exercitation ullamco labor <novo-link (click)=\"alert('clicked')\">click here</novo-link> to read more.\n</novo-text>", styles: [""], dependencies: [{ kind: "component", type: i2$1.NovoIconComponent, selector: "novo-icon", inputs: ["raised", "theme", "shape", "color", "size", "smaller", "larger", "alt", "name"] }, { kind: "component", type: i2$1.NovoText, selector: "novo-text,[novo-text]", inputs: ["block"] }, { kind: "component", type: i2$1.NovoLink, selector: "novo-link", inputs: ["href"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: LinkExample, decorators: [{
            type: Component,
            args: [{ selector: 'link-example', standalone: false, template: "<novo-text smaller block marginAfter>\n  Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor\n  incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud\n  exercitation ullamco labor <novo-link href=\"#\">\n    <novo-icon>bell</novo-icon>click here\n  </novo-link> to read more.\n</novo-text>\n\n<novo-text block marginAfter>\n  Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor\n  incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud\n  exercitation ullamco labor <novo-link href=\"#\">click here</novo-link> to read more.\n</novo-text>\n\n<novo-text larger block marginAfter>\n  Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor\n  incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud\n  exercitation ullamco labor <novo-link (click)=\"alert('clicked')\">click here</novo-link> to read more.\n</novo-text>" }]
        }] });

// NG2
/**
 * @title Label Example
 */
class LabelExample {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: LabelExample, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: LabelExample, isStandalone: false, selector: "label-example", ngImport: i0, template: "<novo-label smaller>Small Label</novo-label>\n<novo-label>Default Label</novo-label>\n<novo-label larger>Large Label</novo-label>\n\n<novo-label error smaller>Small Label</novo-label>\n<novo-label error>Default Label</novo-label>\n<novo-label error larger>Large Label</novo-label>\n\n<novo-label muted smaller>Small Label</novo-label>\n<novo-label muted>Default Label</novo-label>\n<novo-label muted larger>Large Label</novo-label>\n\n<novo-label color=\"positive\" smaller>Small Label</novo-label>\n<novo-label color=\"carnation\">Default Label</novo-label>\n<novo-label color=\"candidate\" larger>Large Label</novo-label>", styles: [":host{display:grid;grid-template-columns:1fr 1fr 1fr}\n"], dependencies: [{ kind: "component", type: i2$1.NovoLabel, selector: "novo-label,[novo-label]", inputs: ["id"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: LabelExample, decorators: [{
            type: Component,
            args: [{ selector: 'label-example', standalone: false, template: "<novo-label smaller>Small Label</novo-label>\n<novo-label>Default Label</novo-label>\n<novo-label larger>Large Label</novo-label>\n\n<novo-label error smaller>Small Label</novo-label>\n<novo-label error>Default Label</novo-label>\n<novo-label error larger>Large Label</novo-label>\n\n<novo-label muted smaller>Small Label</novo-label>\n<novo-label muted>Default Label</novo-label>\n<novo-label muted larger>Large Label</novo-label>\n\n<novo-label color=\"positive\" smaller>Small Label</novo-label>\n<novo-label color=\"carnation\">Default Label</novo-label>\n<novo-label color=\"candidate\" larger>Large Label</novo-label>", styles: [":host{display:grid;grid-template-columns:1fr 1fr 1fr}\n"] }]
        }] });

// NG2
/**
 * @title Caption Example
 */
class CaptionExample {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: CaptionExample, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: CaptionExample, isStandalone: false, selector: "caption-example", ngImport: i0, template: "<novo-caption smaller>Small Caption</novo-caption>\n<novo-caption>Default Caption</novo-caption>\n<novo-caption larger>Large Caption</novo-caption>\n\n<novo-caption error smaller>Small Caption</novo-caption>\n<novo-caption error>Default Caption</novo-caption>\n<novo-caption error larger>Large Caption</novo-caption>\n\n<novo-caption muted smaller>Small Caption</novo-caption>\n<novo-caption muted>Default Caption</novo-caption>\n<novo-caption muted larger>Large Caption</novo-caption>\n\n<novo-caption color=\"positive\" smaller>Small Caption</novo-caption>\n<novo-caption color=\"carnation\">Default Caption</novo-caption>\n<novo-caption color=\"candidate\" larger>Large Caption</novo-caption>", styles: [":host{display:grid;grid-template-columns:1fr 1fr 1fr}\n"], dependencies: [{ kind: "component", type: i2$1.NovoCaption, selector: "novo-caption,[novo-caption]" }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: CaptionExample, decorators: [{
            type: Component,
            args: [{ selector: 'caption-example', standalone: false, template: "<novo-caption smaller>Small Caption</novo-caption>\n<novo-caption>Default Caption</novo-caption>\n<novo-caption larger>Large Caption</novo-caption>\n\n<novo-caption error smaller>Small Caption</novo-caption>\n<novo-caption error>Default Caption</novo-caption>\n<novo-caption error larger>Large Caption</novo-caption>\n\n<novo-caption muted smaller>Small Caption</novo-caption>\n<novo-caption muted>Default Caption</novo-caption>\n<novo-caption muted larger>Large Caption</novo-caption>\n\n<novo-caption color=\"positive\" smaller>Small Caption</novo-caption>\n<novo-caption color=\"carnation\">Default Caption</novo-caption>\n<novo-caption color=\"candidate\" larger>Large Caption</novo-caption>", styles: [":host{display:grid;grid-template-columns:1fr 1fr 1fr}\n"] }]
        }] });

/**
 * @title Iconset
 */
class IconsetExample {
    constructor(toaster) {
        this.toaster = toaster;
        this.icons = Object.values(Icons);
    }
    copyLink(icon) {
        // Create dom element to copy from
        const copyFrom = document.createElement('textarea');
        copyFrom.textContent = `${icon}`;
        const body = document.getElementsByTagName('body')[0];
        body.appendChild(copyFrom);
        copyFrom.select();
        // Copy text
        document.execCommand('copy');
        // Delete element
        body.removeChild(copyFrom);
        // Set toast options
        this.options = {
            title: `${icon}`,
            message: 'Copied to your clipboard',
            theme: 'ocean',
            icon: 'clipboard',
            position: 'growlTopRight',
        };
        // Fire toast
        this.toaster.alert(this.options);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: IconsetExample, deps: [{ token: i1$1.NovoToastService }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: IconsetExample, isStandalone: false, selector: "iconset-example", ngImport: i0, template: "<article class=\"icon-blocks iconset\">\n  <div *ngFor=\"let icon of icons\" class=\"block\" (click)=\"copyLink(icon)\">\n    <div class=\"icon-square\">\n      <span class=\"icon-text\">\n        <novo-icon>{{icon}}</novo-icon>\n      </span>\n    </div>\n    <span>{{icon}}</span>\n  </div>\n</article>", styles: [":host .icon-blocks{display:grid;grid-template-columns:repeat(auto-fill,120px);grid-template-rows:120px;justify-content:flex-start;flex-wrap:wrap;align-items:flex-end;width:100%}:host .icon-blocks .block{display:inline-block;text-align:center;position:relative;padding:3rem 0px;border:1px solid #eee;cursor:pointer}:host .icon-blocks .block:active .icon-square,:host .icon-blocks .block:focus .icon-square,:host .icon-blocks .block:hover .icon-square{transform:scale(1.125)}:host .icon-blocks .block .icon-square{border-radius:4px;justify-content:center;align-items:center;display:flex;position:relative}:host .icon-blocks .block:hover .icon-text:after{content:\"Click to copy\";position:absolute;color:#333;left:50%;top:37px;font-size:10px;text-transform:uppercase;transform:translate(-50%);width:100%}\n"], dependencies: [{ kind: "directive", type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "component", type: i2$1.NovoIconComponent, selector: "novo-icon", inputs: ["raised", "theme", "shape", "color", "size", "smaller", "larger", "alt", "name"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: IconsetExample, decorators: [{
            type: Component,
            args: [{ selector: 'iconset-example', standalone: false, template: "<article class=\"icon-blocks iconset\">\n  <div *ngFor=\"let icon of icons\" class=\"block\" (click)=\"copyLink(icon)\">\n    <div class=\"icon-square\">\n      <span class=\"icon-text\">\n        <novo-icon>{{icon}}</novo-icon>\n      </span>\n    </div>\n    <span>{{icon}}</span>\n  </div>\n</article>", styles: [":host .icon-blocks{display:grid;grid-template-columns:repeat(auto-fill,120px);grid-template-rows:120px;justify-content:flex-start;flex-wrap:wrap;align-items:flex-end;width:100%}:host .icon-blocks .block{display:inline-block;text-align:center;position:relative;padding:3rem 0px;border:1px solid #eee;cursor:pointer}:host .icon-blocks .block:active .icon-square,:host .icon-blocks .block:focus .icon-square,:host .icon-blocks .block:hover .icon-square{transform:scale(1.125)}:host .icon-blocks .block .icon-square{border-radius:4px;justify-content:center;align-items:center;display:flex;position:relative}:host .icon-blocks .block:hover .icon-text:after{content:\"Click to copy\";position:absolute;color:#333;left:50%;top:37px;font-size:10px;text-transform:uppercase;transform:translate(-50%);width:100%}\n"] }]
        }], ctorParameters: () => [{ type: i1$1.NovoToastService }] });

/**
 * @title Tooltip Overflow Example
 */
class TooltipOverflowExample {
    constructor() {
        this.tooltipActive = true;
        this.longText = 'Lorem Ipsum pariatur laborum tempor voluptate non adipisicing reprehenderit.';
        this.shortText = 'Lorem Ipsum!';
    }
    toggleTooltip() {
        this.tooltipActive = !this.tooltipActive;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: TooltipOverflowExample, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: TooltipOverflowExample, isStandalone: false, selector: "tooltip-overflow-example", ngImport: i0, template: "<novo-card padding=\"lg\">\n  <novo-text ellipsis [tooltip]=\"longText\" tooltipOnOverflow>{{ longText }}</novo-text>\n</novo-card>\n<novo-card padding=\"lg\">\n  <novo-text ellipsis [tooltip]=\"shortText\" tooltipOnOverflow>{{ shortText }}</novo-text>\n</novo-card>\n", styles: [":host{margin:auto;padding:20px 30px;position:relative;display:flex;flex-direction:column;width:50%}\n"], dependencies: [{ kind: "component", type: i2$1.CardElement, selector: "novo-card", inputs: ["padding", "config", "title", "message", "messageIcon", "icon", "iconTooltip", "refresh", "close", "move", "loading", "inline", "inset"], outputs: ["onClose", "onRefresh"] }, { kind: "directive", type: i2$1.TooltipDirective, selector: "[tooltip]", inputs: ["tooltip", "tooltipPosition", "tooltipType", "tooltipSize", "tooltipBounce", "tooltipNoAnimate", "tooltipRounded", "tooltipAlways", "tooltipPreline", "removeTooltipArrow", "tooltipAutoPosition", "tooltipIsHTML", "tooltipCloseOnClick", "tooltipOnOverflow", "tooltipActive"] }, { kind: "component", type: i2$1.NovoText, selector: "novo-text,[novo-text]", inputs: ["block"] }, { kind: "directive", type: i2$1.PaddingDirective, selector: "[p],[padding],[paddingTop],[paddingRight],[paddingBottom],[paddingLeft],[paddingX],[paddingY],[pt],[pr],[pb],[pl],[px],[py]", inputs: ["padding", "p", "paddingLeft", "pl", "paddingRight", "pr", "paddingTop", "pt", "paddingBottom", "pb", "paddingX", "px", "paddingY", "py"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: TooltipOverflowExample, decorators: [{
            type: Component,
            args: [{ selector: 'tooltip-overflow-example', standalone: false, template: "<novo-card padding=\"lg\">\n  <novo-text ellipsis [tooltip]=\"longText\" tooltipOnOverflow>{{ longText }}</novo-text>\n</novo-card>\n<novo-card padding=\"lg\">\n  <novo-text ellipsis [tooltip]=\"shortText\" tooltipOnOverflow>{{ shortText }}</novo-text>\n</novo-card>\n", styles: [":host{margin:auto;padding:20px 30px;position:relative;display:flex;flex-direction:column;width:50%}\n"] }]
        }] });

/**
 * @title Single Field Criteria Example
 */
class SingleFieldCriteriaExample {
    constructor(formBuilder, cdr) {
        this.formBuilder = formBuilder;
        this.cdr = cdr;
        this.config = null;
        this.mockMetaFields = MockCandidateMeta.fields;
        this.editTypeFn = (field) => {
            if (field.optionsType === 'Brewery')
                return 'custom';
            return (field.inputType || field.dataType || field.type).toLowerCase();
        };
    }
    ngOnInit() {
        this.queryForm = this.formBuilder.group({ field: '', operator: '', value: [] });
        const fields = this.getFieldConfig();
        this.resetQueryForm();
        this.config = {
            fields
        };
        this.cdr.detectChanges();
    }
    getFieldConfig() {
        return [{
                value: MockCandidateMeta.entity,
                label: MockCandidateMeta.label,
                options: MockCandidateMeta.fields,
                find: (name) => MockCandidateMeta.fields.find((f) => f.name === name),
                search: (term) => {
                    return MockCandidateMeta.fields.filter((f) => f.name.includes(term) || f.label.includes(term));
                },
            }];
    }
    updateConfig(values) {
        this.config = { ...this.config, ...values };
    }
    resetQueryForm() {
        const prepopulatedData = {
            field: '',
            operator: 'includeAny',
            value: []
        };
        this.setQueryForm(prepopulatedData);
    }
    setQueryForm(data) {
        this.queryForm.setValue(data);
    }
    onSubmit() {
        console.log('Your form data : ', this.queryForm.value);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: SingleFieldCriteriaExample, deps: [{ token: i1.UntypedFormBuilder }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: SingleFieldCriteriaExample, isStandalone: false, selector: "single-field-criteria-example", viewQueries: [{ propertyName: "criteriaBuilder", first: true, predicate: ["criteriaBuilder"], descendants: true, static: true }], ngImport: i0, template: "<form [formGroup]=\"queryForm\" (ngSubmit)=\"onSubmit()\">\n  <novo-condition-builder\n    #builder\n    [config]=\"config\"\n    [editTypeFn]=\"editTypeFn\">\n  </novo-condition-builder>\n</form>\n\n<novo-field mb=\"lg\">\n  <novo-label>Choose single field to auto-select for criteria</novo-label>\n  <novo-select placeholder=\"Single field\" [ngModel]=\"config.staticFieldSelection\" (ngModelChange)=\"updateConfig({ staticFieldSelection: $event })\">\n    <novo-option value=\"\">Show All Fields</novo-option>\n    <novo-option *ngFor=\"let field of mockMetaFields\" [value]=\"field.name\">{{ field.label || field.name }}</novo-option>\n  </novo-select>\n</novo-field>\n\n<pre><code>{{queryForm.value | json}}</code></pre>", styles: [""], dependencies: [{ kind: "directive", type: i1.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { kind: "directive", type: i1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i1.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { kind: "directive", type: i1.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "directive", type: i1.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { kind: "directive", type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "component", type: i2$1.NovoSelectElement, selector: "novo-select", inputs: ["disabled", "required", "tabIndex", "id", "name", "placeholder", "readonly", "headerConfig", "position", "overlayWidth", "overlayHeight", "displayIcon", "displayWith", "compareWith", "hideLegacyOptions", "value", "multiple", "options"], outputs: ["onSelect", "selectionChange", "valueChange", "openedChange", "opened", "closed"] }, { kind: "component", type: i2$1.NovoLabel, selector: "novo-label,[novo-label]", inputs: ["id"] }, { kind: "directive", type: i2$1.MarginDirective, selector: "[m],[margin],[marginTop],[marginRight],[marginBottom],[marginLeft],[marginX],[marginY],[mt],[mr],[mb],[ml],[mx],[my]", inputs: ["margin", "m", "marginLeft", "ml", "marginRight", "mr", "marginTop", "mt", "marginBottom", "mb", "marginX", "mx", "marginY", "my"] }, { kind: "component", type: i2$1.NovoOption, selector: "novo-option", inputs: ["selected", "keepOpen", "novoInert", "value", "disabled"], exportAs: ["novoOption"] }, { kind: "component", type: i2$1.NovoFieldElement, selector: "novo-field", inputs: ["layout", "appearance", "customOverlayOrigin", "width"], outputs: ["valueChanges", "stateChanges"] }, { kind: "component", type: i2$1.ConditionBuilderComponent, selector: "novo-condition-builder", inputs: ["label", "scope", "andIndex", "groupIndex", "addressConfig", "dateConfig", "hideOperator", "conditionType", "config", "editTypeFn"] }, { kind: "pipe", type: i2.JsonPipe, name: "json" }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: SingleFieldCriteriaExample, decorators: [{
            type: Component,
            args: [{ selector: 'single-field-criteria-example', standalone: false, template: "<form [formGroup]=\"queryForm\" (ngSubmit)=\"onSubmit()\">\n  <novo-condition-builder\n    #builder\n    [config]=\"config\"\n    [editTypeFn]=\"editTypeFn\">\n  </novo-condition-builder>\n</form>\n\n<novo-field mb=\"lg\">\n  <novo-label>Choose single field to auto-select for criteria</novo-label>\n  <novo-select placeholder=\"Single field\" [ngModel]=\"config.staticFieldSelection\" (ngModelChange)=\"updateConfig({ staticFieldSelection: $event })\">\n    <novo-option value=\"\">Show All Fields</novo-option>\n    <novo-option *ngFor=\"let field of mockMetaFields\" [value]=\"field.name\">{{ field.label || field.name }}</novo-option>\n  </novo-select>\n</novo-field>\n\n<pre><code>{{queryForm.value | json}}</code></pre>" }]
        }], ctorParameters: () => [{ type: i1.UntypedFormBuilder }, { type: i0.ChangeDetectorRef }], propDecorators: { criteriaBuilder: [{
                type: ViewChild,
                args: ['criteriaBuilder', { static: true }]
            }] } });

/**
 * @title Non Ideal State Alt Usage
 */
class NonIdealStateSearchUsageExample {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: NonIdealStateSearchUsageExample, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: NonIdealStateSearchUsageExample, isStandalone: false, selector: "non-ideal-state-search-usage-example", ngImport: i0, template: "<novo-non-ideal-state icon=\"search\" title=\"No results found.\"\n  description=\"Your search didn't match any files.\\nTry searching for something else.\">\n  <novo-search alwaysOpen=\"true\"></novo-search>\n</novo-non-ideal-state>", styles: ["span[tooltip]{margin-left:10px}\n"], dependencies: [{ kind: "component", type: i2$1.NovoSearchBoxElement, selector: "novo-search", inputs: ["name", "icon", "position", "placeholder", "alwaysOpen", "theme", "color", "closeOnSelect", "displayField", "displayValue", "hint", "keepOpen", "hasBackdrop", "allowPropagation", "overrideElement"], outputs: ["searchChanged", "applySearch"] }, { kind: "component", type: i2$1.NonIdealStateElement, selector: "novo-non-ideal-state", inputs: ["theme", "icon", "title", "description"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: NonIdealStateSearchUsageExample, decorators: [{
            type: Component,
            args: [{ selector: 'non-ideal-state-search-usage-example', standalone: false, template: "<novo-non-ideal-state icon=\"search\" title=\"No results found.\"\n  description=\"Your search didn't match any files.\\nTry searching for something else.\">\n  <novo-search alwaysOpen=\"true\"></novo-search>\n</novo-non-ideal-state>", styles: ["span[tooltip]{margin-left:10px}\n"] }]
        }] });

/**
 * @title Non Ideal State Alt Usage
 */
class NonIdealStateLoadingUsageExample {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: NonIdealStateLoadingUsageExample, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: NonIdealStateLoadingUsageExample, isStandalone: false, selector: "non-ideal-state-loading-usage-example", ngImport: i0, template: "<novo-non-ideal-state>\n  <novo-loading></novo-loading>\n  <novo-text lineLength=\"large\" marginAfter>We are currently experiencing technical difficulites and your wait time is\n    taking a bit longer than expected. Thank you for your patience. </novo-text>\n  <button theme=\"primary\" icon=\"refresh-o\">Refresh</button>\n</novo-non-ideal-state>", styles: ["span[tooltip]{margin-left:10px}\n"], dependencies: [{ kind: "component", type: i2$1.NovoButtonElement, selector: "novo-button,button[theme]", inputs: ["color", "side", "size", "theme", "loading", "icon", "secondIcon", "disabled"] }, { kind: "component", type: i2$1.NovoLoadingElement, selector: "novo-loading", inputs: ["theme", "color", "size"] }, { kind: "component", type: i2$1.NovoText, selector: "novo-text,[novo-text]", inputs: ["block"] }, { kind: "directive", type: i2$1.ThemeColorDirective, selector: "[theme]", inputs: ["theme"] }, { kind: "component", type: i2$1.NonIdealStateElement, selector: "novo-non-ideal-state", inputs: ["theme", "icon", "title", "description"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: NonIdealStateLoadingUsageExample, decorators: [{
            type: Component,
            args: [{ selector: 'non-ideal-state-loading-usage-example', standalone: false, template: "<novo-non-ideal-state>\n  <novo-loading></novo-loading>\n  <novo-text lineLength=\"large\" marginAfter>We are currently experiencing technical difficulites and your wait time is\n    taking a bit longer than expected. Thank you for your patience. </novo-text>\n  <button theme=\"primary\" icon=\"refresh-o\">Refresh</button>\n</novo-non-ideal-state>", styles: ["span[tooltip]{margin-left:10px}\n"] }]
        }] });

/**
 * @title Field Components Example
 */
class FieldComponentsExample {
    constructor() {
        this.direction = 'horizontal';
        this.fullWidth = false;
        this.hide = true;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: FieldComponentsExample, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: FieldComponentsExample, isStandalone: false, selector: "field-components-example", ngImport: i0, template: "<div class=\"example-container\">\n\n  <novo-label>Layout</novo-label>\n  <novo-radio-group [(ngModel)]=\"direction\">\n    <novo-radio value=\"horizontal\">Horizontal</novo-radio>\n    <novo-radio value=\"vertical\">Vertical</novo-radio>\n  </novo-radio-group>\n\n  <novo-label>Full Width?</novo-label>\n  <novo-radio-group [(ngModel)]=\"fullWidth\">\n    <novo-radio [value]=\"false\">Condensed</novo-radio>\n    <novo-radio [value]=\"true\">Full Width</novo-radio>\n  </novo-radio-group>\n\n  <novo-fields [layout]=\"direction\" [fullWidth]=\"fullWidth\">\n\n    <novo-field>\n      <novo-label>Username</novo-label>\n      <input novoInput type=\"text\" />\n    </novo-field>\n\n    <novo-field>\n      <novo-label>Email</novo-label>\n      <input novoInput type=\"email\" />\n    </novo-field>\n\n    <novo-field>\n      <novo-label>Enter your password</novo-label>\n      <input novoInput [type]=\"hide ? 'password' : 'text'\" />\n      <novo-icon (click)=\"hide = !hide\">{{hide ? 'overview' : 'hidden'}}</novo-icon>\n    </novo-field>\n\n    <novo-field>\n      <novo-label>Select your favorite color?</novo-label>\n      <select required novoInput>\n        <option value=\"pink\">Pink</option>\n        <option value=\"purple\">Purple</option>\n        <option value=\"sparkles\">Sparkles</option>\n      </select>\n    </novo-field>\n\n    <novo-field>\n      <novo-label>Short description...</novo-label>\n      <textarea novoInput></textarea>\n    </novo-field>\n\n    <novo-field>\n      <novo-label>Choose your favorite color?</novo-label>\n      <input novoInput type=\"color\" />\n    </novo-field>\n\n    <novo-field>\n      <novo-label>Set Volume</novo-label>\n      <input novoInput type=\"range\" min=\"0\" max=\"100\" value=\"90\" step=\"10\" />\n    </novo-field>\n\n    <novo-field>\n      <novo-label>Birthday</novo-label>\n      <input novoInput type=\"date\" />\n    </novo-field>\n\n    <novo-field>\n      <novo-label>Scheduled End Time</novo-label>\n      <input novoInput type=\"time\" />\n    </novo-field>\n\n    <novo-field>\n      <novo-label>Next Appointment Time?</novo-label>\n      <input novoInput type=\"datetime-local\" />\n    </novo-field>\n  </novo-fields>\n</div>", styles: [".example-right-align{text-align:right}\n"], dependencies: [{ kind: "directive", type: i1.NgSelectOption, selector: "option", inputs: ["ngValue", "value"] }, { kind: "directive", type: i1.ɵNgSelectMultipleOption, selector: "option", inputs: ["ngValue", "value"] }, { kind: "directive", type: i1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i1.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "component", type: i2$1.NovoRadioElement, selector: "novo-radio", inputs: ["id", "name", "tabindex", "vertical", "label", "button", "theme", "size", "icon", "color", "disabled", "checked", "value"], outputs: ["change", "blur", "focus"] }, { kind: "component", type: i2$1.NovoRadioGroup, selector: "novo-radio-group", inputs: ["id", "tabindex", "errorStateMatcher", "appearance", "value", "name", "disabled", "required", "placeholder"], outputs: ["change", "blur"] }, { kind: "component", type: i2$1.NovoIconComponent, selector: "novo-icon", inputs: ["raised", "theme", "shape", "color", "size", "smaller", "larger", "alt", "name"] }, { kind: "component", type: i2$1.NovoLabel, selector: "novo-label,[novo-label]", inputs: ["id"] }, { kind: "component", type: i2$1.NovoFieldElement, selector: "novo-field", inputs: ["layout", "appearance", "customOverlayOrigin", "width"], outputs: ["valueChanges", "stateChanges"] }, { kind: "directive", type: i2$1.NovoInput, selector: "input[novoInput], textarea[novoInput], select[novoInput]", inputs: ["disabled", "id", "placeholder", "required", "type", "value", "readonly"], outputs: ["onSelect"] }, { kind: "component", type: i2$1.NovoFieldsElement, selector: "novo-fields", inputs: ["layout", "appearance", "fullWidth"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: FieldComponentsExample, decorators: [{
            type: Component,
            args: [{ selector: 'field-components-example', standalone: false, template: "<div class=\"example-container\">\n\n  <novo-label>Layout</novo-label>\n  <novo-radio-group [(ngModel)]=\"direction\">\n    <novo-radio value=\"horizontal\">Horizontal</novo-radio>\n    <novo-radio value=\"vertical\">Vertical</novo-radio>\n  </novo-radio-group>\n\n  <novo-label>Full Width?</novo-label>\n  <novo-radio-group [(ngModel)]=\"fullWidth\">\n    <novo-radio [value]=\"false\">Condensed</novo-radio>\n    <novo-radio [value]=\"true\">Full Width</novo-radio>\n  </novo-radio-group>\n\n  <novo-fields [layout]=\"direction\" [fullWidth]=\"fullWidth\">\n\n    <novo-field>\n      <novo-label>Username</novo-label>\n      <input novoInput type=\"text\" />\n    </novo-field>\n\n    <novo-field>\n      <novo-label>Email</novo-label>\n      <input novoInput type=\"email\" />\n    </novo-field>\n\n    <novo-field>\n      <novo-label>Enter your password</novo-label>\n      <input novoInput [type]=\"hide ? 'password' : 'text'\" />\n      <novo-icon (click)=\"hide = !hide\">{{hide ? 'overview' : 'hidden'}}</novo-icon>\n    </novo-field>\n\n    <novo-field>\n      <novo-label>Select your favorite color?</novo-label>\n      <select required novoInput>\n        <option value=\"pink\">Pink</option>\n        <option value=\"purple\">Purple</option>\n        <option value=\"sparkles\">Sparkles</option>\n      </select>\n    </novo-field>\n\n    <novo-field>\n      <novo-label>Short description...</novo-label>\n      <textarea novoInput></textarea>\n    </novo-field>\n\n    <novo-field>\n      <novo-label>Choose your favorite color?</novo-label>\n      <input novoInput type=\"color\" />\n    </novo-field>\n\n    <novo-field>\n      <novo-label>Set Volume</novo-label>\n      <input novoInput type=\"range\" min=\"0\" max=\"100\" value=\"90\" step=\"10\" />\n    </novo-field>\n\n    <novo-field>\n      <novo-label>Birthday</novo-label>\n      <input novoInput type=\"date\" />\n    </novo-field>\n\n    <novo-field>\n      <novo-label>Scheduled End Time</novo-label>\n      <input novoInput type=\"time\" />\n    </novo-field>\n\n    <novo-field>\n      <novo-label>Next Appointment Time?</novo-label>\n      <input novoInput type=\"datetime-local\" />\n    </novo-field>\n  </novo-fields>\n</div>", styles: [".example-right-align{text-align:right}\n"] }]
        }] });

/**
 * @title Breadcrumb Dynamic Usage Example
 */
class BreadcrumbSourceUsageExample {
    constructor() {
        this.source = [
            { title: 'Home', showMenu: false, link: '#/components' },
            {
                title: 'Components',
                link: '#/components/breadcrumb',
                showMenu: true,
                noNavigation: true,
                isSearch: true,
                menuList: [
                    { name: 'Colors', link: '#/design/colors', target: '_blank' },
                    { name: 'Composition', link: '#/design/componsition', linkType: 'routerLink' },
                    { name: 'Typography', link: '#/design/typography', linkType: 'routerLink' },
                ],
            },
        ];
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: BreadcrumbSourceUsageExample, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: BreadcrumbSourceUsageExample, isStandalone: false, selector: "breadcrumb-source-usage-example", ngImport: i0, template: "<section>\n  <novo-breadcrumb [source]=\"source\"></novo-breadcrumb>\n</section>", styles: [""], dependencies: [{ kind: "component", type: i2$1.BreadcrumbElement, selector: "novo-breadcrumb", inputs: ["separatorIcon", "source"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: BreadcrumbSourceUsageExample, decorators: [{
            type: Component,
            args: [{ selector: 'breadcrumb-source-usage-example', standalone: false, template: "<section>\n  <novo-breadcrumb [source]=\"source\"></novo-breadcrumb>\n</section>" }]
        }] });

/**
 * @title Autocomplete TextArea
 */
class AutocompleteTextareaExample {
    constructor() {
        this.myControl = new UntypedFormControl();
        this.myOtherControl = new UntypedFormControl();
        this.options = ['One', 'Two', 'Three'];
    }
    ngOnInit() {
        this.filteredOptions = this.myControl.valueChanges.pipe(startWith(''), map((value) => this._filter(value)));
    }
    triggerFn() {
        return (control) => {
            console.log('control', control.lastKeyValue === '$');
            return control.lastKeyValue === '$';
        };
    }
    _filter(value) {
        return this.options;
        // const filterValue = value.toLowerCase();
        // return this.options.filter((option) => option.toLowerCase().includes(filterValue));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: AutocompleteTextareaExample, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: AutocompleteTextareaExample, isStandalone: false, selector: "autocomplete-textarea-example", ngImport: i0, template: "<form class=\"example-form\">\n  <novo-field class=\"example-full-width\">\n    <novo-label>Number</novo-label>\n    <textarea\n      novoInput\n      [formControl]=\"myControl\"\n      placeholder=\"Type $ to trigger autocomplete\"\n      autocomplete=\"off\"></textarea>\n    <novo-autocomplete [triggerOn]=\"triggerFn()\" #auto>\n      <novo-option *ngFor=\"let option of filteredOptions | async\" [value]=\"option\">\n        {{option}}\n      </novo-option>\n    </novo-autocomplete>\n  </novo-field>\n\n  <novo-field appearance=\"fill\">\n    <novo-label>Toppings</novo-label>\n    <novo-select [formControl]=\"myOtherControl\" multiple>\n      <novo-option *ngFor=\"let option of filteredOptions | async\" [value]=\"option\">{{option}}</novo-option>\n    </novo-select>\n  </novo-field>\n</form>", styles: [""], dependencies: [{ kind: "directive", type: i1.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { kind: "directive", type: i1.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i1.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { kind: "directive", type: i1.NgForm, selector: "form:not([ngNoForm]):not([formGroup]),ng-form,[ngForm]", inputs: ["ngFormOptions"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { kind: "directive", type: i1.FormControlDirective, selector: "[formControl]", inputs: ["formControl", "disabled", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { kind: "directive", type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "component", type: i2$1.NovoAutocompleteElement, selector: "novo-autocomplete", inputs: ["tabIndex", "triggerOn", "displayWith", "aria-label", "multiple", "disabled", "makeFirstItemActive"], outputs: ["optionSelected", "optionActivated"], exportAs: ["novoAutocomplete"] }, { kind: "component", type: i2$1.NovoSelectElement, selector: "novo-select", inputs: ["disabled", "required", "tabIndex", "id", "name", "placeholder", "readonly", "headerConfig", "position", "overlayWidth", "overlayHeight", "displayIcon", "displayWith", "compareWith", "hideLegacyOptions", "value", "multiple", "options"], outputs: ["onSelect", "selectionChange", "valueChange", "openedChange", "opened", "closed"] }, { kind: "component", type: i2$1.NovoLabel, selector: "novo-label,[novo-label]", inputs: ["id"] }, { kind: "component", type: i2$1.NovoOption, selector: "novo-option", inputs: ["selected", "keepOpen", "novoInert", "value", "disabled"], exportAs: ["novoOption"] }, { kind: "component", type: i2$1.NovoFieldElement, selector: "novo-field", inputs: ["layout", "appearance", "customOverlayOrigin", "width"], outputs: ["valueChanges", "stateChanges"] }, { kind: "directive", type: i2$1.NovoInput, selector: "input[novoInput], textarea[novoInput], select[novoInput]", inputs: ["disabled", "id", "placeholder", "required", "type", "value", "readonly"], outputs: ["onSelect"] }, { kind: "pipe", type: i2.AsyncPipe, name: "async" }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: AutocompleteTextareaExample, decorators: [{
            type: Component,
            args: [{ selector: 'autocomplete-textarea-example', standalone: false, template: "<form class=\"example-form\">\n  <novo-field class=\"example-full-width\">\n    <novo-label>Number</novo-label>\n    <textarea\n      novoInput\n      [formControl]=\"myControl\"\n      placeholder=\"Type $ to trigger autocomplete\"\n      autocomplete=\"off\"></textarea>\n    <novo-autocomplete [triggerOn]=\"triggerFn()\" #auto>\n      <novo-option *ngFor=\"let option of filteredOptions | async\" [value]=\"option\">\n        {{option}}\n      </novo-option>\n    </novo-autocomplete>\n  </novo-field>\n\n  <novo-field appearance=\"fill\">\n    <novo-label>Toppings</novo-label>\n    <novo-select [formControl]=\"myOtherControl\" multiple>\n      <novo-option *ngFor=\"let option of filteredOptions | async\" [value]=\"option\">{{option}}</novo-option>\n    </novo-select>\n  </novo-field>\n</form>" }]
        }] });

/* tslint:disable */
/** DO NOT MANUALLY EDIT THIS FILE, IT IS GENERATED VIA GULP 'build-examples-module' */
const EXAMPLE_COMPONENTS = {
    'security': {
        title: 'Security Example',
        component: SecurityExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0Aimport%20%7B%20Security%20%7D%20from%20'novo-elements'%3B%0A%0A%2F**%0A%20*%20%40title%20Security%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'security-example'%2C%0A%20%20%20%20templateUrl%3A%20'security-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'security-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20SecurityExample%20%7B%0A%20%20perms%20%3D%20%5B%5D%3B%0A%0A%20%20constructor(private%20security%3A%20Security)%20%7B%7D%0A%0A%20%20shufflePermissions()%3A%20void%20%7B%0A%20%20%20%20const%20numOfPerms%3A%20number%20%3D%20Math.floor(Math.random()%20*%202)%20%2B%201%3B%0A%20%20%20%20this.perms%20%3D%20this.shuffle(%5B'A'%2C%20'B'%2C%20'C'%5D).slice(0%2C%20numOfPerms)%3B%0A%20%20%20%20this.security.clear()%3B%0A%20%20%20%20this.security.grant(this.perms)%3B%0A%20%20%7D%0A%0A%20%20shuffle(array%3A%20string%5B%5D)%20%7B%0A%20%20%20%20let%20currentIndex%3A%20number%20%3D%20array.length%3B%0A%20%20%20%20let%20temporaryValue%3A%20string%3B%0A%20%20%20%20let%20randomIndex%3A%20number%3B%0A%0A%20%20%20%20%2F%2F%20While%20there%20remain%20elements%20to%20shuffle...%0A%20%20%20%20while%20(currentIndex%20!%3D%3D%200)%20%7B%0A%20%20%20%20%20%20%2F%2F%20Pick%20a%20remaining%20element...%0A%20%20%20%20%20%20randomIndex%20%3D%20Math.floor(Math.random()%20*%20currentIndex)%3B%0A%20%20%20%20%20%20currentIndex%20-%3D%201%3B%0A%20%20%20%20%20%20%2F%2F%20And%20swap%20it%20with%20the%20current%20element.%0A%20%20%20%20%20%20temporaryValue%20%3D%20array%5BcurrentIndex%5D%3B%0A%20%20%20%20%20%20array%5BcurrentIndex%5D%20%3D%20array%5BrandomIndex%5D%3B%0A%20%20%20%20%20%20array%5BrandomIndex%5D%20%3D%20temporaryValue%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20return%20array%3B%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cdiv%3E%0A%20%20%20%20%3Cp%20*bhUnless%3D%22'A'%22%3EShown%20if%20has%20permission%20%3Cstrong%3EA%3C%2Fstrong%3E%3C%2Fp%3E%0A%20%20%20%20%3Cp%20*bhUnless%3D%22'B'%22%3EShown%20if%20has%20permission%20%3Cstrong%3EB%3C%2Fstrong%3E%3C%2Fp%3E%0A%20%20%20%20%3Cp%20*bhUnless%3D%22'C'%22%3EShown%20if%20has%20permission%20%3Cstrong%3EC%3C%2Fstrong%3E%3C%2Fp%3E%0A%20%20%20%20%3Cp%20*bhUnless%3D%22'A%20%26%26%20B'%22%3EShown%20if%20has%20permissions%20%3Cstrong%3EA%20%26%26%20B%3C%2Fstrong%3E%3C%2Fp%3E%0A%20%20%20%20%3Cp%20*bhUnless%3D%22'A%20%26%26%20C'%22%3EShown%20if%20has%20permissions%20%3Cstrong%3EA%20%26%26%20C%3C%2Fstrong%3E%3C%2Fp%3E%0A%20%20%20%20%3Cp%20*bhUnless%3D%22'A%20%26%26%20B%20%26%26%20C'%22%3EShown%20if%20has%20permissions%20%3Cstrong%3EA%20%26%26%20B%20%26%26%20C%3C%2Fstrong%3E%3C%2Fp%3E%0A%20%20%20%20%3Cp%20*bhUnless%3D%22'A%20%7C%7C%20B'%22%3EShown%20if%20has%20permissions%20%3Cstrong%3EA%20%7C%7C%20B%3C%2Fstrong%3E%3C%2Fp%3E%0A%20%20%20%20%3Cp%3E%20Permissions%20are%20%3A%20%3Cstrong%3E%7B%7B%20perms%20%7C%20json%20%7D%7D%3C%2Fstrong%3E%3C%2Fp%3E%0A%20%20%20%20%3Cbutton%20(click)%3D%22shufflePermissions()%22%3EShuffle%3C%2Fbutton%3E%0A%3C%2Fdiv%3E%0A`
    },
    'custom-quick-note-results': {
        title: 'Custom Quick Note Results Example',
        component: CustomQuickNoteResultsExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0Aimport%20%7B%20QuickNoteResults%20%7D%20from%20'novo-elements'%3B%0A%0Aconst%20DATA%20%3D%20%7B%0A%20%20tags%3A%20%5B%0A%20%20%20%20%7B%20id%3A%201%2C%20name%3A%20'OH%20YA!'%2C%20test%3A%20'TWO'%20%7D%2C%0A%20%20%20%20%7B%20id%3A%202%2C%20name%3A%20'TAGGING!'%2C%20test%3A%20'ONE'%20%7D%2C%0A%20%20%5D%2C%0A%20%20references%3A%20%5B%0A%20%20%20%20%7B%20id%3A%201%2C%20title%3A%20'Awesome%20Reference'%20%7D%2C%0A%20%20%20%20%7B%20id%3A%202%2C%20title%3A%20'Angular2'%20%7D%2C%0A%20%20%5D%2C%0A%7D%3B%0A%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'custom-quick-note-results'%2C%0A%20%20%20%20host%3A%20%7B%0A%20%20%20%20%20%20%20%20class%3A%20'active%20quick-note-results'%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20template%3A%20%60%0A%20%20%20%20%3Cnovo-loading%20theme%3D%22line%22%20*ngIf%3D%22isLoading%20%26%26%20!matches.length%22%3E%3C%2Fnovo-loading%3E%0A%20%20%20%20%3Cnovo-list%20*ngIf%3D%22matches.length%20%3E%200%22%3E%0A%20%20%20%20%20%20%3Cnovo-list-item%0A%20%20%20%20%20%20%20%20*ngFor%3D%22let%20match%20of%20matches%22%0A%20%20%20%20%20%20%20%20(click)%3D%22selectMatch(%24event)%22%0A%20%20%20%20%20%20%20%20%5Bclass.active%5D%3D%22match%20%3D%3D%3D%20activeMatch%22%0A%20%20%20%20%20%20%20%20(mouseenter)%3D%22selectActive(match)%22%0A%20%20%20%20%20%20%3E%0A%20%20%20%20%20%20%20%20%3Citem-content%3E%20**CUSTOM**%20%3Cb%20%5BinnerHtml%5D%3D%22highlight(match.label%2C%20term)%22%3E%3C%2Fb%3E%20%3C%2Fitem-content%3E%0A%20%20%20%20%20%20%3C%2Fnovo-list-item%3E%0A%20%20%20%20%3C%2Fnovo-list%3E%0A%20%20%20%20%3Cp%20class%3D%22picker-error%22%20*ngIf%3D%22hasError%22%3EOops!%20An%20error%20occured.%3C%2Fp%3E%0A%20%20%20%20%3Cp%20class%3D%22picker-null%22%20*ngIf%3D%22!isLoading%20%26%26%20!matches.length%20%26%26%20!hasError%22%3ENo%20results%20to%20display...%3C%2Fp%3E%0A%20%20%60%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20CustomQuickNoteResults%20extends%20QuickNoteResults%20%7B%7D%0A%0A%2F**%0A%20*%20%40title%20Custom%20Quick%20Note%20Results%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'custom-quick-note-results-example'%2C%0A%20%20%20%20templateUrl%3A%20'custom-quick-note-results-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'custom-quick-note-results-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20CustomQuickNoteResultsExample%20%7B%0A%20%20public%20note%3A%20any%3B%0A%20%20public%20placeholder%3A%20string%20%3D%0A%20%20%20%20'Enter%20your%20note%20text%20here.%20Reference%20people%20and%20distribution%20lists%20using%20%40%20(eg.%20%40John%20Smith).%20Reference%20other%20records%20using%20%23%20(e.g.%20%23Project%20Manager)'%3B%0A%0A%20%20public%20customResults%3A%20any%20%3D%20%7B%0A%20%20%20%20resultsTemplate%3A%20CustomQuickNoteResults%2C%0A%20%20%20%20triggers%3A%20%7B%0A%20%20%20%20%20%20names%3A%20'%40'%2C%0A%20%20%20%20%20%20tags%3A%20'%23'%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20options%3A%20%7B%0A%20%20%20%20%20%20names%3A%20()%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20return%20new%20Promise((resolve)%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%20%20setTimeout(()%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20resolve(DATA.tags)%3B%0A%20%20%20%20%20%20%20%20%20%20%7D%2C%20300)%3B%0A%20%20%20%20%20%20%20%20%7D)%3B%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20tags%3A%20()%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20return%20new%20Promise((resolve)%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%20%20setTimeout(()%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20resolve(DATA.references)%3B%0A%20%20%20%20%20%20%20%20%20%20%7D%2C%20300)%3B%0A%20%20%20%20%20%20%20%20%7D)%3B%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20format%3A%20%7B%0A%20%20%20%20%20%20names%3A%20'%24name'%2C%0A%20%20%20%20%20%20tags%3A%20'%24title'%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20renderer%3A%20%7B%0A%20%20%20%20%20%20names%3A%20(symbol%2C%20item)%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20return%20%60%3Ca%20href%3D%22http%3A%2F%2Fwww.bullhorn.com%22%20class%3D%22names%22%3E%24%7Bsymbol%7D%24%7Bitem.label%7D%3C%2Fa%3E%60%3B%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20tags%3A%20(symbol%2C%20item)%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20return%20%60%3Ca%20href%3D%22http%3A%2F%2Fwww.bullhorn.com%22%20class%3D%22tags%22%3E%24%7Bsymbol%7D%24%7Bitem.label%7D%3C%2Fa%3E%60%3B%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%7D%2C%0A%20%20%7D%3B%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cnovo-quick-note%20%5B(ngModel)%5D%3D%22note%22%20%5Bplaceholder%5D%3D%22placeholder%22%20%5Bconfig%5D%3D%22customResults%22%3E%3C%2Fnovo-quick-note%3E%0A%3Cdiv%20class%3D%22data%22%3E%0A%20%20%20%20%3Cp%3ENote%3A%20%7B%7Bnote%20%7C%20json%7D%7D%3C%2Fp%3E%0A%3C%2Fdiv%3E%0A`,
        selectorName: 'CustomQuickNoteResultsExample, CustomQuickNoteResults'
    },
    'custom-quick-note': {
        title: 'Custom Quick Note Example',
        component: CustomQuickNoteExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0Aconst%20DATA%20%3D%20%7B%0A%20%20tags%3A%20%5B%0A%20%20%20%20%7B%20id%3A%201%2C%20name%3A%20'OH%20YA!'%2C%20test%3A%20'TWO'%20%7D%2C%0A%20%20%20%20%7B%20id%3A%202%2C%20name%3A%20'TAGGING!'%2C%20test%3A%20'ONE'%20%7D%2C%0A%20%20%5D%2C%0A%20%20references%3A%20%5B%0A%20%20%20%20%7B%20id%3A%201%2C%20title%3A%20'Awesome%20Reference'%20%7D%2C%0A%20%20%20%20%7B%20id%3A%202%2C%20title%3A%20'Angular2'%20%7D%2C%0A%20%20%5D%2C%0A%7D%3B%0A%0A%2F**%0A%20*%20%40title%20Custom%20Quick%20Note%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'custom-quick-note-example'%2C%0A%20%20%20%20templateUrl%3A%20'custom-quick-note-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'custom-quick-note-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20CustomQuickNoteExample%20%7B%0A%20%20public%20note%3A%20any%3B%0A%20%20public%20placeholder%3A%20string%20%3D%0A%20%20%20%20'Enter%20your%20note%20text%20here.%20Reference%20people%20and%20distribution%20lists%20using%20%40%20(eg.%20%40John%20Smith).%20Reference%20other%20records%20using%20%23%20(e.g.%20%23Project%20Manager)'%3B%0A%20%20public%20custom%3A%20any%20%3D%20%7B%0A%20%20%20%20triggers%3A%20%7B%0A%20%20%20%20%20%20whos%3A%20'%40'%2C%0A%20%20%20%20%20%20whats%3A%20'%23'%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20options%3A%20%7B%0A%20%20%20%20%20%20whos%3A%20()%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20return%20new%20Promise((resolve)%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%20%20setTimeout(()%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20resolve(DATA.tags)%3B%0A%20%20%20%20%20%20%20%20%20%20%7D%2C%20300)%3B%0A%20%20%20%20%20%20%20%20%7D)%3B%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20whats%3A%20()%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20return%20new%20Promise((resolve)%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%20%20setTimeout(()%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20resolve(DATA.references)%3B%0A%20%20%20%20%20%20%20%20%20%20%7D%2C%20300)%3B%0A%20%20%20%20%20%20%20%20%7D)%3B%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20format%3A%20%7B%0A%20%20%20%20%20%20whos%3A%20'%24name%20%24test'%2C%0A%20%20%20%20%20%20whats%3A%20'%24title'%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20renderer%3A%20%7B%0A%20%20%20%20%20%20whos%3A%20(symbol%2C%20item)%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20return%20%60%3Ca%20href%3D%22http%3A%2F%2Fwww.bullhorn.com%22%20class%3D%22WHOS%22%3E%24%7Bsymbol%7D%24%7Bitem.label%7D%3C%2Fa%3E%60%3B%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20whats%3A%20(symbol%2C%20item)%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20return%20%60%3Ca%20href%3D%22http%3A%2F%2Fwww.bullhorn.com%22%20class%3D%22tag%22%3E%24%7Bsymbol%7D%24%7Bitem.label%7D%3C%2Fa%3E%60%3B%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%7D%2C%0A%20%20%7D%3B%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cnovo-quick-note%20%5B(ngModel)%5D%3D%22note%22%20%5Bplaceholder%5D%3D%22placeholder%22%20%5Bconfig%5D%3D%22custom%22%3E%3C%2Fnovo-quick-note%3E%0A%3Cdiv%20class%3D%22data%22%3E%0A%20%20%20%20%3Cp%3ENote%3A%20%7B%7Bnote%20%7C%20json%7D%7D%3C%2Fp%3E%0A%3C%2Fdiv%3E%0A`
    },
    'basic-quick-note': {
        title: 'Basic Quick Note Example',
        component: BasicQuickNoteExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Basic%20Quick%20Note%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'basic-quick-note-example'%2C%0A%20%20%20%20templateUrl%3A%20'basic-quick-note-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'basic-quick-note-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20BasicQuickNoteExample%20%7B%0A%20%20public%20note%3A%20any%3B%0A%20%20public%20placeholder%3A%20string%20%3D%0A%20%20%20%20'Enter%20your%20note%20text%20here.%20Reference%20people%20and%20distribution%20lists%20using%20%40%20(eg.%20%40John%20Smith).%20Reference%20other%20records%20using%20%23%20(e.g.%20%23Project%20Manager)'%3B%0A%20%20public%20basic%3A%20any%20%3D%20%7B%0A%20%20%20%20triggers%3A%20%7B%0A%20%20%20%20%20%20tags%3A%20'%40'%2C%0A%20%20%20%20%20%20references%3A%20'%23'%2C%0A%20%20%20%20%20%20boos%3A%20'%5E'%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20options%3A%20%7B%0A%20%20%20%20%20%20tags%3A%20%5B'First'%2C%20'Second'%2C%20'Space%20Between'%5D%2C%0A%20%20%20%20%20%20references%3A%20%5B'Third'%2C%20'Fourth'%5D%2C%0A%20%20%20%20%20%20boos%3A%20%5B'Test'%5D%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20renderer%3A%20%7B%0A%20%20%20%20%20%20tags%3A%20(symbol%2C%20item)%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20return%20%60%3Ca%20href%3D%22https%3A%2F%2Fwww.google.com%2Fsearch%3Fq%3Dbullhorn%26oq%3Dbullhorn%22%3E%24%7Bsymbol%7D%24%7Bitem.label%7D%3C%2Fa%3E%60%3B%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20references%3A%20(symbol%2C%20item)%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20return%20%60%3Ca%20href%3D%22https%3A%2F%2Fwww.google.com%2Fsearch%3Fq%3Dbullhorn%26oq%3Dbullhorn%22%3E%24%7Bsymbol%7D%24%7Bitem.label%7D%3C%2Fa%3E%60%3B%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20boos%3A%20(symbol%2C%20item)%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20return%20%60%3Cstrong%3E%24%7Bsymbol%7D%24%7Bitem.label%7D%3C%2Fstrong%3E%60%3B%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%7D%2C%0A%20%20%7D%3B%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cnovo-quick-note%20%5B(ngModel)%5D%3D%22note%22%20%5Bplaceholder%5D%3D%22placeholder%22%20%5Bconfig%5D%3D%22basic%22%3E%3C%2Fnovo-quick-note%3E%0A%3Cdiv%20class%3D%22data%22%3E%0A%20%20%20%20%3Cp%3ENote%3A%20%7B%7Bnote%20%7C%20json%7D%7D%3C%2Fp%3E%0A%3C%2Fdiv%3E%0A`
    },
    'pluralize': {
        title: 'Pluralize Example',
        component: PluralizeExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Pluralize%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'pluralize-example'%2C%0A%20%20%20%20templateUrl%3A%20'pluralize-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'pluralize-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20PluralizeExample%20%7B%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cp%3E%7B%7B'Kitty'%20%7C%20plural%7D%7D%3C%2Fp%3E%0A%3Cp%3E%7B%7B'Cat'%20%7C%20plural%7D%7D%3C%2Fp%3E%0A`
    },
    'fi-validation': {
        title: 'Fi Validation Example',
        component: FiValidationExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%2F%2F%20Vendor%0Aimport%20%7B%20FieldInteractionApi%2C%20FormUtils%2C%20TextBoxControl%20%7D%20from%20'novo-elements'%3B%0A%0A%2F**%0A%20*%20%40title%20Fi%20Validation%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'fi-validation-example'%2C%0A%20%20%20%20templateUrl%3A%20'fi-validation-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'fi-validation-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20FiValidationExample%20%7B%0A%20%20public%20form%3A%20any%20%3D%20%7B%7D%3B%0A%20%20public%20controls%3A%20any%20%3D%20%7B%7D%3B%0A%20%20public%20isUserModified%20%3D%20false%3B%0A%0A%20%20constructor(private%20formUtils%3A%20FormUtils)%20%7B%0A%20%20%20%20const%20validationFunction%20%3D%20(API%3A%20FieldInteractionApi)%20%3D%3E%20%7B%0A%20%20%20%20%20%20console.log('%5BFieldInteractionDemo%5D%20-%20validationFunction')%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%20%20%20%20const%20activeValue%20%3D%20API.getActiveValue()%3B%0A%20%20%20%20%20%20if%20(activeValue%20%3E%2010)%20%7B%0A%20%20%20%20%20%20%20%20API.markAsInvalid(API.getActiveKey()%2C%20'Too%20high!%20Make%20it%20a%20lot%20lower!!')%3B%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20this.isUserModified%20%3D%20!API.isInvokedOnInit%3B%0A%20%20%20%20%7D%3B%0A%0A%20%20%20%20%2F%2F%20Validation%20Field%20Interactions%0A%20%20%20%20this.controls.validationControl%20%3D%20new%20TextBoxControl(%7B%0A%20%20%20%20%20%20type%3A%20'number'%2C%0A%20%20%20%20%20%20key%3A%20'validation'%2C%0A%20%20%20%20%20%20value%3A%205%2C%0A%20%20%20%20%20%20label%3A%20'Validation%20Test'%2C%0A%20%20%20%20%20%20description%3A%20'Try%20to%20input%20a%20number%20larger%20then%2010!'%2C%0A%20%20%20%20%20%20interactions%3A%20%5B%7B%20event%3A%20'change'%2C%20script%3A%20validationFunction%2C%20invokeOnInit%3A%20true%20%7D%5D%2C%0A%20%20%20%20%7D)%3B%0A%20%20%20%20this.form%20%3D%20formUtils.toFormGroup(%5Bthis.controls.validationControl%5D)%3B%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cnovo-form%20%5Bform%5D%3D%22form%22%20layout%3D%22vertical%22%3E%0A%20%20%20%20%3Cdiv%20class%3D%22novo-form-row%22%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-control%20%5Bform%5D%3D%22form%22%20%5Bcontrol%5D%3D%22controls.validationControl%22%3E%3C%2Fnovo-control%3E%0A%20%20%20%20%3C%2Fdiv%3E%0A%3C%2Fnovo-form%3E%0A%3Cdiv%20class%3D%22final-value%22%3EForm%20Value%20-%20%7B%7B%20form.value%20%7C%20json%20%7D%7D%3C%2Fdiv%3E%0A%3Cdiv%20class%3D%22final-value%22%3EForm%20Dirty%20-%20%7B%7B%20form.dirty%20%7C%20json%20%7D%7D%3C%2Fdiv%3E%0A%3Cdiv%20class%3D%22final-value%22%3EIs%20Form%20Valid%3F%20-%20%7B%7B%20form.valid%20%7C%20json%20%7D%7D%3C%2Fdiv%3E%0A%3Cdiv%20class%3D%22final-value%22%3EIs%20User%20Modified%3F%20-%20%7B%7B%20isUserModified%20%7D%7D%3C%2Fdiv%3E%0A`
    },
    'fi-tooltip': {
        title: 'Fi Tooltip Example',
        component: FiTooltipExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%2F%2F%20Vendor%0Aimport%20%7B%20FieldInteractionApi%2C%20FormUtils%2C%20TextBoxControl%2C%20TilesControl%20%7D%20from%20'novo-elements'%3B%0A%0A%2F**%0A%20*%20%40title%20Fi%20Tooltip%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'fi-tooltip-example'%2C%0A%20%20%20%20templateUrl%3A%20'fi-tooltip-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'fi-tooltip-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20FiTooltipExample%20%7B%0A%20%20public%20form%3A%20any%20%3D%20%7B%7D%3B%0A%20%20public%20controls%3A%20any%20%3D%20%7B%7D%3B%0A%0A%20%20constructor(private%20formUtils%3A%20FormUtils)%20%7B%0A%20%20%20%20const%20tooltipFunction%20%3D%20(API%3A%20FieldInteractionApi)%20%3D%3E%20%7B%0A%20%20%20%20%20%20console.log('%5BFieldInteractionDemo%5D%20-%20tooltipFunction')%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%20%20%20%20API.setTooltip(API.getActiveKey()%2C%20API.getActiveValue())%3B%0A%20%20%20%20%7D%3B%0A%0A%20%20%20%20const%20tooltipUpdateFunction%20%3D%20(API%3A%20FieldInteractionApi)%20%3D%3E%20%7B%0A%20%20%20%20%20%20console.log('%5BFieldInteractionDemo%5D%20-%20tooltipUpdateFunction')%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%20%20%20%20API.getControl(this.controls.tooltipControl.key).tooltipSize%20%3D%20API.getValue(this.controls.tooltipSizeControl.key)%3B%0A%20%20%20%20%20%20API.getControl(this.controls.tooltipControl.key).tooltipPreline%20%3D%20API.getValue(this.controls.tooltipPrelineControl.key)%3B%0A%20%20%20%20%7D%3B%0A%0A%20%20%20%20%2F%2F%20Tooltip%20Field%20Interactions%0A%20%20%20%20this.controls.tooltipControl%20%3D%20new%20TextBoxControl(%7B%0A%20%20%20%20%20%20type%3A%20'text'%2C%0A%20%20%20%20%20%20key%3A%20'toolTipValue'%2C%0A%20%20%20%20%20%20label%3A%20'Tooltip'%2C%0A%20%20%20%20%20%20description%3A%20'I%20will%20add%20a%20tooltip%20to%20this%20control%20as%20a%20value%20is%20typed'%2C%0A%20%20%20%20%20%20interactions%3A%20%5B%7B%20event%3A%20'change'%2C%20script%3A%20tooltipFunction%20%7D%5D%2C%0A%20%20%20%20%7D)%3B%0A%0A%20%20%20%20this.controls.tooltipSizeControl%20%3D%20new%20TilesControl(%7B%0A%20%20%20%20%20%20key%3A%20'tooltipSize'%2C%0A%20%20%20%20%20%20label%3A%20'Tooltip%20Size'%2C%0A%20%20%20%20%20%20description%3A%20'Changing%20me%20will%20set%20a%20fixed%20width%20on%20the%20tooltip'%2C%0A%20%20%20%20%20%20options%3A%20%5B%0A%20%20%20%20%20%20%20%20%7B%20value%3A%20'small'%2C%20label%3A%20'Small'%20%7D%2C%0A%20%20%20%20%20%20%20%20%7B%20value%3A%20'medium'%2C%20label%3A%20'Medium'%20%7D%2C%0A%20%20%20%20%20%20%20%20%7B%20value%3A%20'large'%2C%20label%3A%20'Large'%20%7D%2C%0A%20%20%20%20%20%20%5D%2C%0A%20%20%20%20%20%20interactions%3A%20%5B%7B%20event%3A%20'change'%2C%20script%3A%20tooltipUpdateFunction%20%7D%5D%2C%0A%20%20%20%20%7D)%3B%0A%0A%20%20%20%20this.controls.tooltipPrelineControl%20%3D%20new%20TilesControl(%7B%0A%20%20%20%20%20%20key%3A%20'tooltipPreline'%2C%0A%20%20%20%20%20%20label%3A%20'Tooltip%20Multiline'%2C%0A%20%20%20%20%20%20description%3A%20'Should%20the%20tooltip%20be%20multiple%20lines%20tall%20or%20all%20on%20one%20line%3F'%2C%0A%20%20%20%20%20%20options%3A%20%5B%0A%20%20%20%20%20%20%20%20%7B%20value%3A%20true%2C%20label%3A%20'Yes'%20%7D%2C%0A%20%20%20%20%20%20%20%20%7B%20value%3A%20false%2C%20label%3A%20'No'%20%7D%2C%0A%20%20%20%20%20%20%5D%2C%0A%20%20%20%20%20%20interactions%3A%20%5B%7B%20event%3A%20'change'%2C%20script%3A%20tooltipUpdateFunction%20%7D%5D%2C%0A%20%20%20%20%7D)%3B%0A%0A%20%20%20%20this.form%20%3D%20formUtils.toFormGroup(%5B%0A%20%20%20%20%20%20this.controls.tooltipControl%2C%0A%20%20%20%20%20%20this.controls.tooltipSizeControl%2C%0A%20%20%20%20%20%20this.controls.tooltipPrelineControl%2C%0A%20%20%20%20%5D)%3B%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cnovo-form%20%5Bform%5D%3D%22form%22%20layout%3D%22vertical%22%3E%0A%20%20%3Cdiv%20class%3D%22novo-form-row%22%3E%0A%20%20%20%20%20%20%3Cnovo-control%20%5Bform%5D%3D%22form%22%20%5Bcontrol%5D%3D%22controls.tooltipControl%22%3E%3C%2Fnovo-control%3E%0A%20%20%3C%2Fdiv%3E%0A%20%20%3Cdiv%20class%3D%22novo-form-row%22%3E%0A%20%20%20%20%20%20%3Cnovo-control%20%5Bform%5D%3D%22form%22%20%5Bcontrol%5D%3D%22controls.tooltipSizeControl%22%3E%3C%2Fnovo-control%3E%0A%20%20%3C%2Fdiv%3E%0A%20%20%3Cdiv%20class%3D%22novo-form-row%22%3E%0A%20%20%20%20%20%20%3Cnovo-control%20%5Bform%5D%3D%22form%22%20%5Bcontrol%5D%3D%22controls.tooltipPrelineControl%22%3E%3C%2Fnovo-control%3E%0A%20%20%3C%2Fdiv%3E%0A%3C%2Fnovo-form%3E%0A%3Cdiv%20class%3D%22final-value%22%3EForm%20Value%20-%20%7B%7B%20form.value%20%7C%20json%20%7D%7D%3C%2Fdiv%3E%0A%3Cdiv%20class%3D%22final-value%22%3EForm%20Dirty%20-%20%7B%7B%20form.dirty%20%7C%20json%20%7D%7D%3C%2Fdiv%3E%0A%3Cdiv%20class%3D%22final-value%22%3EIs%20Form%20Valid%3F%20-%20%7B%7B%20form.valid%20%7C%20json%20%7D%7D%3C%2Fdiv%3E%0A`
    },
    'fi-required': {
        title: 'Fi Required Example',
        component: FiRequiredExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%2F%2F%20Vendor%0Aimport%20%7B%20CheckboxControl%2C%20FieldInteractionApi%2C%20FormUtils%2C%20TextBoxControl%20%7D%20from%20'novo-elements'%3B%0A%0A%2F**%0A%20*%20%40title%20Fi%20Required%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'fi-required-example'%2C%0A%20%20%20%20templateUrl%3A%20'fi-required-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'fi-required-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20FiRequiredExample%20%7B%0A%20%20public%20form%3A%20any%20%3D%20%7B%7D%3B%0A%20%20public%20controls%3A%20any%20%3D%20%7B%7D%3B%0A%0A%20%20constructor(formUtils%3A%20FormUtils)%20%7B%0A%20%20%20%20const%20requiredFunction%20%3D%20(API%3A%20FieldInteractionApi)%20%3D%3E%20%7B%0A%20%20%20%20%20%20console.log('%5BFieldInteractionDemo%5D%20-%20requiredFunction')%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%20%20%20%20const%20activeValue%20%3D%20API.getActiveValue()%3B%0A%20%20%20%20%20%20if%20(activeValue)%20%7B%0A%20%20%20%20%20%20%20%20API.setRequired('required'%2C%20true)%3B%0A%20%20%20%20%20%20%7D%20else%20%7B%0A%20%20%20%20%20%20%20%20API.setRequired('required'%2C%20false)%3B%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%3B%0A%0A%20%20%20%20%2F%2F%20Required%20Field%20Interactions%0A%20%20%20%20this.controls.requiredControl%20%3D%20new%20TextBoxControl(%7B%0A%20%20%20%20%20%20type%3A%20'text'%2C%0A%20%20%20%20%20%20key%3A%20'required'%2C%0A%20%20%20%20%20%20label%3A%20'Test'%2C%0A%20%20%20%20%20%20description%3A%20'I%20may%20or%20may%20not%20be%20required%2C%20play%20with%20the%20checkbox%20below!'%2C%0A%20%20%20%20%7D)%3B%0A%20%20%20%20this.controls.toggleControl%20%3D%20new%20CheckboxControl(%7B%0A%20%20%20%20%20%20key%3A%20'toggle'%2C%0A%20%20%20%20%20%20label%3A%20'Required%3F'%2C%0A%20%20%20%20%20%20interactions%3A%20%5B%7B%20event%3A%20'change'%2C%20script%3A%20requiredFunction%20%7D%5D%2C%0A%20%20%20%20%7D)%3B%0A%20%20%20%20this.form%20%3D%20formUtils.toFormGroup(%5Bthis.controls.requiredControl%2C%20this.controls.toggleControl%5D)%3B%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cnovo-form%20%5Bform%5D%3D%22form%22%20layout%3D%22vertical%22%3E%0A%20%20%20%20%3Cdiv%20class%3D%22novo-form-row%22%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-control%20%5Bform%5D%3D%22form%22%20%5Bcontrol%5D%3D%22controls.requiredControl%22%3E%3C%2Fnovo-control%3E%0A%20%20%20%20%3C%2Fdiv%3E%0A%20%20%20%20%3Cdiv%20class%3D%22novo-form-row%22%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-control%20%5Bform%5D%3D%22form%22%20%5Bcontrol%5D%3D%22controls.toggleControl%22%3E%3C%2Fnovo-control%3E%0A%20%20%20%20%3C%2Fdiv%3E%0A%3C%2Fnovo-form%3E%0A%3Cdiv%20class%3D%22final-value%22%3EForm%20Value%20-%20%7B%7B%20form.value%20%7C%20json%20%7D%7D%3C%2Fdiv%3E%0A%3Cdiv%20class%3D%22final-value%22%3EForm%20Dirty%20-%20%7B%7B%20form.dirty%20%7C%20json%20%7D%7D%3C%2Fdiv%3E%0A%3Cdiv%20class%3D%22final-value%22%3EIs%20Form%20Valid%3F%20-%20%7B%7B%20form.valid%20%7C%20json%20%7D%7D%3C%2Fdiv%3E%0A`
    },
    'fi-popover': {
        title: 'Fi Popover Example',
        component: FiPopoverExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%2F%2F%20Vendor%0Aimport%20%7B%20FieldInteractionApi%2C%20FormUtils%2C%20TextBoxControl%2C%20TilesControl%20%7D%20from%20'novo-elements'%3B%0A%0A%2F**%0A%20*%20%40title%20Fi%20Popover%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'fi-popover-example'%2C%0A%20%20%20%20templateUrl%3A%20'fi-popover-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'fi-popover-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20FiPopoverExample%20%7B%0A%20%20public%20form%3A%20any%20%3D%20%7B%7D%3B%0A%20%20public%20controls%3A%20any%20%3D%20%7B%7D%3B%0A%0A%20%20constructor(private%20formUtils%3A%20FormUtils)%20%7B%0A%0A%20%20%20%20const%20popoverUpdateFunction%20%3D%20(API%3A%20FieldInteractionApi)%20%3D%3E%20%7B%0A%20%20%20%20%20%20console.log('%5BFieldInteractionDemo%5D%20-%20popoverUpdateFunction')%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%20%20%20%20for%20(const%20key%20in%20this.controls)%20%7B%0A%20%20%20%20%20%20%20%20API.setPopOver(this.controls%5Bkey%5D.key%2C%20%7B%0A%20%20%20%20%20%20%20%20%20%20title%3A%20API.getValue(this.controls.popoverTitleControl.key)%2C%0A%20%20%20%20%20%20%20%20%20%20content%3A%20API.getValue(this.controls.popoverContentControl.key)%2C%0A%20%20%20%20%20%20%20%20%20%20htmlContent%3A%20API.getValue(this.controls.popoverHtmlContentControl.key)%2C%0A%20%20%20%20%20%20%20%20%20%20onHover%3A%20API.getValue(this.controls.popoverOnHoverControl.key)%2C%0A%20%20%20%20%20%20%20%20%20%20placement%3A%20API.getValue(this.controls.popoverPlacementControl.key)%2C%0A%20%20%20%20%20%20%20%20%7D)%3B%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%3B%0A%0A%20%20%20%20%2F%2F%20Popover%20Field%20Interactions%0A%20%20%20%20this.controls.popoverTitleControl%20%3D%20new%20TextBoxControl(%7B%0A%20%20%20%20%20%20type%3A%20'text'%2C%0A%20%20%20%20%20%20key%3A%20'popoverTitle'%2C%0A%20%20%20%20%20%20label%3A%20'Title'%2C%0A%20%20%20%20%20%20value%3A%20'Pop%20Over%20Title'%2C%0A%20%20%20%20%20%20description%3A%20'I%20will%20add%20a%20popover%20title%20to%20the%20popover%20as%20a%20value%20is%20typed.'%2C%0A%20%20%20%20%20%20interactions%3A%20%5B%7B%20event%3A%20'change'%2C%20invokeOnInit%3A%20true%2C%20script%3A%20popoverUpdateFunction%20%7D%5D%2C%0A%20%20%20%20%7D)%3B%0A%0A%20%20%20%20this.controls.popoverContentControl%20%3D%20new%20TextBoxControl(%7B%0A%20%20%20%20%20%20type%3A%20'text'%2C%0A%20%20%20%20%20%20key%3A%20'popoverContent'%2C%0A%20%20%20%20%20%20label%3A%20'Content'%2C%0A%20%20%20%20%20%20value%3A%20'Pop%20Over%20Content'%2C%0A%20%20%20%20%20%20description%3A%20'I%20will%20add%20string%20content%20to%20the%20popover%20as%20a%20value%20is%20typed.'%2C%0A%20%20%20%20%20%20interactions%3A%20%5B%7B%20event%3A%20'change'%2C%20script%3A%20popoverUpdateFunction%20%7D%5D%2C%0A%20%20%20%20%7D)%3B%0A%0A%20%20%20%20this.controls.popoverHtmlContentControl%20%3D%20new%20TextBoxControl(%7B%0A%20%20%20%20%20%20type%3A%20'text'%2C%0A%20%20%20%20%20%20key%3A%20'popoverHtmlContent'%2C%0A%20%20%20%20%20%20label%3A%20'HTML%20Content'%2C%0A%20%20%20%20%20%20value%3A%20''%2C%0A%20%20%20%20%20%20description%3A%20'I%20will%20inject%20HTML%20content%20instead%20of%20the%20string%20content%20to%20the%20popover%20if%20specified.'%2C%0A%20%20%20%20%20%20interactions%3A%20%5B%7B%20event%3A%20'change'%2C%20script%3A%20popoverUpdateFunction%20%7D%5D%2C%0A%20%20%20%20%7D)%3B%0A%0A%20%20%20%20this.controls.popoverOnHoverControl%20%3D%20new%20TilesControl(%7B%0A%20%20%20%20%20%20key%3A%20'popoverOnHover'%2C%0A%20%20%20%20%20%20label%3A%20'Popover%20On%20Hover'%2C%0A%20%20%20%20%20%20value%3A%20true%2C%0A%20%20%20%20%20%20description%3A%20'I%20will%20make%20the%20popover%20shown%20on%20hover%20over%20instead%20of%20on%20click.'%2C%0A%20%20%20%20%20%20options%3A%20%5B%0A%20%20%20%20%20%20%20%20%7B%20value%3A%20true%2C%20label%3A%20'Yes'%20%7D%2C%0A%20%20%20%20%20%20%20%20%7B%20value%3A%20false%2C%20label%3A%20'No'%20%7D%2C%0A%20%20%20%20%20%20%5D%2C%0A%20%20%20%20%20%20interactions%3A%20%5B%7B%20event%3A%20'change'%2C%20script%3A%20popoverUpdateFunction%20%7D%5D%2C%0A%20%20%20%20%7D)%3B%0A%0A%20%20%20%20this.controls.popoverPlacementControl%20%3D%20new%20TilesControl(%7B%0A%20%20%20%20%20%20key%3A%20'popoverPlacement'%2C%0A%20%20%20%20%20%20label%3A%20'Popover%20Placement'%2C%0A%20%20%20%20%20%20description%3A%20'I%20will%20change%20the%20positioning%20of%20the%20popover.'%2C%0A%20%20%20%20%20%20value%3A%20'bottom'%2C%0A%20%20%20%20%20%20options%3A%20%5B%0A%20%20%20%20%20%20%20%20%7B%20value%3A%20'left'%2C%20label%3A%20'Left'%20%7D%2C%0A%20%20%20%20%20%20%20%20%7B%20value%3A%20'right'%2C%20label%3A%20'Right'%20%7D%2C%0A%20%20%20%20%20%20%20%20%7B%20value%3A%20'top'%2C%20label%3A%20'Top'%20%7D%2C%0A%20%20%20%20%20%20%20%20%7B%20value%3A%20'bottom'%2C%20label%3A%20'Bottom'%20%7D%2C%0A%20%20%20%20%20%20%5D%2C%0A%20%20%20%20%20%20interactions%3A%20%5B%7B%20event%3A%20'change'%2C%20script%3A%20popoverUpdateFunction%20%7D%5D%2C%0A%20%20%20%20%7D)%3B%0A%0A%20%20%20%20this.form%20%3D%20formUtils.toFormGroup(%5B%0A%20%20%20%20%20%20this.controls.popoverTitleControl%2C%0A%20%20%20%20%20%20this.controls.popoverContentControl%2C%0A%20%20%20%20%20%20this.controls.popoverHtmlContentControl%2C%0A%20%20%20%20%20%20this.controls.popoverOnHoverControl%2C%0A%20%20%20%20%20%20this.controls.popoverPlacementControl%2C%0A%20%20%20%20%5D)%3B%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cnovo-form%20%5Bform%5D%3D%22form%22%20layout%3D%22vertical%22%3E%0A%20%20%3Cdiv%20class%3D%22novo-form-row%22%3E%0A%20%20%20%20%20%20%3Cnovo-control%20%5Bform%5D%3D%22form%22%20%5Bcontrol%5D%3D%22controls.popoverTitleControl%22%3E%3C%2Fnovo-control%3E%0A%20%20%3C%2Fdiv%3E%0A%20%20%3Cdiv%20class%3D%22novo-form-row%22%3E%0A%20%20%20%20%20%20%3Cnovo-control%20%5Bform%5D%3D%22form%22%20%5Bcontrol%5D%3D%22controls.popoverContentControl%22%3E%3C%2Fnovo-control%3E%0A%20%20%3C%2Fdiv%3E%0A%20%20%3Cdiv%20class%3D%22novo-form-row%22%3E%0A%20%20%20%20%20%20%3Cnovo-control%20%5Bform%5D%3D%22form%22%20%5Bcontrol%5D%3D%22controls.popoverHtmlContentControl%22%3E%3C%2Fnovo-control%3E%0A%20%20%3C%2Fdiv%3E%0A%20%20%3Cdiv%20class%3D%22novo-form-row%22%3E%0A%20%20%20%20%20%20%3Cnovo-control%20%5Bform%5D%3D%22form%22%20%5Bcontrol%5D%3D%22controls.popoverOnHoverControl%22%3E%3C%2Fnovo-control%3E%0A%20%20%3C%2Fdiv%3E%0A%20%20%3Cdiv%20class%3D%22novo-form-row%22%3E%0A%20%20%20%20%20%20%3Cnovo-control%20%5Bform%5D%3D%22form%22%20%5Bcontrol%5D%3D%22controls.popoverPlacementControl%22%3E%3C%2Fnovo-control%3E%0A%20%20%3C%2Fdiv%3E%0A%3C%2Fnovo-form%3E%0A%3Cdiv%20class%3D%22final-value%22%3EForm%20Value%20-%20%7B%7B%20form.value%20%7C%20json%20%7D%7D%3C%2Fdiv%3E%0A%3Cdiv%20class%3D%22final-value%22%3EForm%20Dirty%20-%20%7B%7B%20form.dirty%20%7C%20json%20%7D%7D%3C%2Fdiv%3E%0A%3Cdiv%20class%3D%22final-value%22%3EIs%20Form%20Valid%3F%20-%20%7B%7B%20form.valid%20%7C%20json%20%7D%7D%3C%2Fdiv%3E%0A`
    },
    'fi-nested': {
        title: 'Fi Nested Form Example',
        component: FiNestedExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%2F%2F%20Vendor%0Aimport%20%7B%20FieldInteractionApi%2C%20FormUtils%2C%20NovoControlConfig%2C%20NovoFormGroup%2C%20RadioControl%2C%20TextBoxControl%20%7D%20from%20'novo-elements'%3B%0A%0A%2F**%0A%20*%20%40title%20Fi%20Nested%20Form%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'fi-nested-example'%2C%0A%20%20%20%20templateUrl%3A%20'fi-nested-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'fi-nested-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20FiNestedExample%20%7B%0A%20%20public%20form%3A%20NovoFormGroup%3B%0A%20%20public%20minPayRateControl%3A%20TextBoxControl%3B%0A%20%20public%20maxPayRateControl%3A%20TextBoxControl%3B%0A%20%20public%20controls%3A%20NovoControlConfig%5B%5D%3B%0A%20%20public%20initialValue%20%3D%20%5B%0A%20%20%20%20%7B%20selected%3A%20true%2C%20label%3A%20%60First%20Shift%60%2C%20multiplier%3A%201%2C%20payRate%3A%2040%20%7D%2C%0A%20%20%20%20%7B%20selected%3A%20false%2C%20label%3A%20%60%60%2C%20multiplier%3A%201.5%2C%20payRate%3A%2060%20%7D%2C%0A%20%20%20%20%7B%20selected%3A%20false%2C%20label%3A%20%60%60%2C%20multiplier%3A%202.0%2C%20payRate%3A%2080%20%7D%2C%0A%20%20%5D%3B%0A%0A%20%20constructor(private%20formUtils%3A%20FormUtils)%20%7B%0A%20%20%20%20const%20onMinMaxPayRateChanged%20%3D%20(API%3A%20FieldInteractionApi)%20%3D%3E%20%7B%0A%20%20%20%20%20%20%2F%2F%20Validate%20the%20min%2Fmax%20range%0A%20%20%20%20%20%20const%20minPayRate%20%3D%20Number(API.getValue('minPayRate'))%3B%0A%20%20%20%20%20%20const%20maxPayRate%20%3D%20Number(API.getValue('maxPayRate'))%3B%0A%20%20%20%20%20%20if%20(minPayRate%20%3E%20maxPayRate)%20%7B%0A%20%20%20%20%20%20%20%20API.markAsInvalid(API.getActiveKey()%2C%20'Range%20is%20invalid.%20Please%20ensure%20that%20the%20minimum%20does%20not%20exceed%20the%20maximum.')%3B%0A%20%20%20%20%20%20%20%20API.displayTip('minPayRate'%2C%20'Range%20is%20invalid.%20Please%20ensure%20that%20the%20minimum%20does%20not%20exceed%20the%20maximum.'%2C%20'caution')%3B%0A%20%20%20%20%20%20%7D%20else%20%7B%0A%20%20%20%20%20%20%20%20%2F%2F%20The%20API.form%20is%20equal%20the%20top%20level%20form%20since%20the%20min%2Fmax%20fields%20are%20directly%20on%20the%20form%2C%20not%20part%20of%20a%20nested%20form%0A%20%20%20%20%20%20%20%20this.calculatePayRates(API%2C%20API.form)%3B%0A%20%20%20%20%20%20%20%20API.clearTip('minPayRate')%3B%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%3B%0A%0A%20%20%20%20const%20onSelectedChanged%20%3D%20(API%3A%20FieldInteractionApi)%20%3D%3E%20%7B%0A%20%20%20%20%20%20%2F%2F%20If%20my%20row%20is%20selected%2C%20deselect%20other%20rows%20without%20causing%20cascading%20changes%0A%20%20%20%20%20%20if%20(API.getActiveValue()%20%3D%3D%3D%20true)%20%7B%0A%20%20%20%20%20%20%20%20API.getParent().controls.forEach((form)%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%20%20if%20(API.getIndex()%20!%3D%3D%20API.getIndex(form))%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20API.setValue(API.getActiveKey()%2C%20false%2C%20%7B%20emitEvent%3A%20false%20%7D%2C%20form)%3B%0A%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%7D)%3B%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%3B%0A%0A%20%20%20%20const%20onLabelChanged%20%3D%20(API%3A%20FieldInteractionApi)%20%3D%3E%20%7B%0A%20%20%20%20%20%20%2F%2F%20Update%20the%20labels%20for%20the%20Overtime%2FDouble%20Time%20earn%20codes%0A%20%20%20%20%20%20if%20(API.getIndex()%20%3D%3D%3D%200)%20%7B%0A%20%20%20%20%20%20%20%20const%20overtimeForm%20%3D%20API.getParent().controls%5B1%5D%3B%0A%20%20%20%20%20%20%20%20const%20doubleTimeForm%20%3D%20API.getParent().controls%5B2%5D%3B%0A%20%20%20%20%20%20%20%20if%20(overtimeForm)%20%7B%0A%20%20%20%20%20%20%20%20%20%20API.setValue(API.getActiveKey()%2C%20API.getActiveValue()%20%2B%20'%20-%20OT'%2C%20%7B%20emitEvent%3A%20false%20%7D%2C%20overtimeForm)%3B%0A%20%20%20%20%20%20%20%20%20%20%2F%2F%20Highlight%20value%20to%20show%20that%20it%20has%20been%20automatically%20updated%0A%20%20%20%20%20%20%20%20%20%20API.highlight(API.getActiveKey()%2C%20true%2C%20overtimeForm)%3B%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20if%20(doubleTimeForm)%20%7B%0A%20%20%20%20%20%20%20%20%20%20API.setValue(API.getActiveKey()%2C%20API.getActiveValue()%20%2B%20'%20-%20DT'%2C%20%7B%20emitEvent%3A%20false%20%7D%2C%20doubleTimeForm)%3B%0A%20%20%20%20%20%20%20%20%20%20%2F%2F%20Highlight%20value%20to%20show%20that%20it%20has%20been%20automatically%20updated%0A%20%20%20%20%20%20%20%20%20%20API.highlight(API.getActiveKey()%2C%20true%2C%20doubleTimeForm)%3B%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%7D%20else%20%7B%0A%20%20%20%20%20%20%20%20%2F%2F%20Remove%20highlight%20since%20it%20is%20being%20changed%20by%20the%20user.%20Highlights%20can%20be%20used%20for%20any%20purpose%2C%20it%20doesn't%20have%20to%20be%20as%20in%20this%20example.%0A%20%20%20%20%20%20%20%20API.highlight(API.getActiveKey()%2C%20false)%3B%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%3B%0A%0A%20%20%20%20const%20onMultiplierChanged%20%3D%20(API%3A%20FieldInteractionApi)%20%3D%3E%20%7B%0A%20%20%20%20%20%20%2F%2F%20Disable%20the%20base%20rate%20multiplier%20since%20it%20is%20fixed%20at%20one%0A%20%20%20%20%20%20API.setReadOnly(API.getActiveKey()%2C%20API.getIndex()%20%3D%3D%3D%200)%3B%0A%0A%20%20%20%20%20%20%2F%2F%20The%20parent%20of%20this%20nested%20row%20form%20is%20the%20rows%20form%20array%2C%20and%20the%20grandparent%20is%20the%20main%20form%20object%0A%20%20%20%20%20%20const%20rowsFormArray%20%3D%20API.getParent()%3B%0A%20%20%20%20%20%20const%20topLevelForm%20%3D%20API.getParent(rowsFormArray)%3B%0A%20%20%20%20%20%20this.calculatePayRates(API%2C%20topLevelForm)%3B%0A%20%20%20%20%7D%3B%0A%0A%20%20%20%20const%20onPayRateChanged%20%3D%20(API%3A%20FieldInteractionApi)%20%3D%3E%20%7B%0A%20%20%20%20%20%20%2F%2F%20Disable%20the%20non-base%20rate%20payRates%20since%20they%20are%20auto%20calculated%0A%20%20%20%20%20%20API.setReadOnly(API.getActiveKey()%2C%20API.getIndex()%20%3E%200)%3B%0A%0A%20%20%20%20%20%20%2F%2F%20The%20parent%20of%20this%20nested%20row%20form%20is%20the%20rows%20form%20array%2C%20and%20the%20grandparent%20is%20the%20main%20form%20object%0A%20%20%20%20%20%20const%20rowsFormArray%20%3D%20API.getParent()%3B%0A%20%20%20%20%20%20const%20topLevelForm%20%3D%20API.getParent(rowsFormArray)%3B%0A%20%20%20%20%20%20this.calculatePayRates(API%2C%20topLevelForm)%3B%0A%20%20%20%20%7D%3B%0A%0A%20%20%20%20this.minPayRateControl%20%3D%20new%20TextBoxControl(%7B%0A%20%20%20%20%20%20key%3A%20'minPayRate'%2C%0A%20%20%20%20%20%20type%3A%20'currency'%2C%0A%20%20%20%20%20%20label%3A%20'Minimum%20Pay%20Rate'%2C%0A%20%20%20%20%20%20value%3A%2020%2C%0A%20%20%20%20%20%20currencyFormat%3A%20'%24%20USD'%2C%0A%20%20%20%20%20%20interactions%3A%20%5B%7B%20event%3A%20'change'%2C%20script%3A%20onMinMaxPayRateChanged%20%7D%5D%2C%0A%20%20%20%20%20%20tooltip%3A%20'If%20the%20value%20of%20any%20pay%20rates%20are%20below%20this%20value%20then%20the%20form%20will%20be%20marked%20invalid.'%2C%0A%20%20%20%20%7D)%3B%0A%0A%20%20%20%20this.maxPayRateControl%20%3D%20new%20TextBoxControl(%7B%0A%20%20%20%20%20%20key%3A%20'maxPayRate'%2C%0A%20%20%20%20%20%20type%3A%20'currency'%2C%0A%20%20%20%20%20%20label%3A%20'Maximum%20Pay%20Rate'%2C%0A%20%20%20%20%20%20value%3A%2080%2C%0A%20%20%20%20%20%20tooltip%3A%20'If%20the%20value%20of%20any%20pay%20rates%20are%20above%20this%20value%20then%20the%20form%20will%20be%20marked%20invalid.'%2C%0A%20%20%20%20%20%20currencyFormat%3A%20'%24%20USD'%2C%0A%20%20%20%20%20%20interactions%3A%20%5B%7B%20event%3A%20'change'%2C%20script%3A%20onMinMaxPayRateChanged%20%7D%5D%2C%0A%20%20%20%20%20%20tipWell%3A%20%7B%0A%20%20%20%20%20%20%20%20tip%3A%20'This%20form%20is%20interactive!%20Try%20adjusting%20the%20min%2Fmax%20and%20pay%20rates%20to%20see%20the%20custom%20form%20validation%20logic%20that%20is%20enabled%20by%20field%20interactions%20across%20nested%20forms.'%2C%0A%20%20%20%20%20%20%20%20icon%3A%20'info'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%7D)%3B%0A%0A%20%20%20%20this.form%20%3D%20formUtils.toFormGroup(%5Bthis.minPayRateControl%2C%20this.maxPayRateControl%5D)%3B%0A%0A%20%20%20%20this.controls%20%3D%20%5B%0A%20%20%20%20%20%20new%20RadioControl(%7B%0A%20%20%20%20%20%20%20%20key%3A%20'selected'%2C%0A%20%20%20%20%20%20%20%20label%3A%20'Selected'%2C%0A%20%20%20%20%20%20%20%20options%3A%20%5B%7B%20label%3A%20''%2C%20value%3A%20true%20%7D%5D%2C%0A%20%20%20%20%20%20%20%20interactions%3A%20%5B%7B%20event%3A%20'change'%2C%20script%3A%20onSelectedChanged%20%7D%5D%2C%0A%20%20%20%20%20%20%20%20tooltip%3A%0A%20%20%20%20%20%20%20%20%20%20'Selecting%20a%20radio%20button%20will%20de-select%20buttons%20on%20the%20other%20forms%2C%20making%20multiple%20nested%20forms%20appear%20as%20a%20single%20form.'%2C%0A%20%20%20%20%20%20%7D)%2C%0A%20%20%20%20%20%20new%20TextBoxControl(%7B%0A%20%20%20%20%20%20%20%20key%3A%20'label'%2C%0A%20%20%20%20%20%20%20%20label%3A%20'Earn%20Code'%2C%0A%20%20%20%20%20%20%20%20required%3A%20true%2C%0A%20%20%20%20%20%20%20%20interactions%3A%20%5B%7B%20invokeOnInit%3A%20true%2C%20event%3A%20'change'%2C%20script%3A%20onLabelChanged%20%7D%5D%2C%0A%20%20%20%20%20%20%20%20tooltip%3A%20'Labels%20on%20other%20nested%20forms%20will%20be%20updated%20based%20on%20this%20label.'%2C%0A%20%20%20%20%20%20%7D)%2C%0A%20%20%20%20%20%20new%20TextBoxControl(%7B%0A%20%20%20%20%20%20%20%20key%3A%20'multiplier'%2C%0A%20%20%20%20%20%20%20%20label%3A%20'Multiplier'%2C%0A%20%20%20%20%20%20%20%20type%3A%20'bigdecimal'%2C%0A%20%20%20%20%20%20%20%20required%3A%20true%2C%0A%20%20%20%20%20%20%20%20interactions%3A%20%5B%7B%20invokeOnInit%3A%20true%2C%20event%3A%20'change'%2C%20script%3A%20onMultiplierChanged%20%7D%5D%2C%0A%20%20%20%20%20%20%20%20tooltip%3A%20'Updating%20the%20multiplier%20will%20auto%20calculate%20the%20resulting%20pay%20rate.'%2C%0A%20%20%20%20%20%20%7D)%2C%0A%20%20%20%20%20%20new%20TextBoxControl(%7B%0A%20%20%20%20%20%20%20%20key%3A%20'payRate'%2C%0A%20%20%20%20%20%20%20%20label%3A%20'Pay%20Rate'%2C%0A%20%20%20%20%20%20%20%20type%3A%20'currency'%2C%0A%20%20%20%20%20%20%20%20required%3A%20true%2C%0A%20%20%20%20%20%20%20%20interactions%3A%20%5B%7B%20invokeOnInit%3A%20true%2C%20event%3A%20'change'%2C%20script%3A%20onPayRateChanged%20%7D%5D%2C%0A%20%20%20%20%20%20%20%20currencyFormat%3A%20'%24%20USD'%2C%0A%20%20%20%20%20%20%7D)%2C%0A%20%20%20%20%5D%3B%0A%20%20%7D%0A%0A%20%20private%20calculatePayRates(API%3A%20FieldInteractionApi%2C%20topLevelForm%3A%20NovoFormGroup%20%7C%20any)%20%7B%0A%20%20%20%20%2F%2F%20Get%20values%20from%20the%20top%20level%20form%20controls%0A%20%20%20%20const%20minPayRate%20%3D%20Number(API.getValue('minPayRate'%2C%20topLevelForm))%3B%0A%20%20%20%20const%20maxPayRate%20%3D%20Number(API.getValue('maxPayRate'%2C%20topLevelForm))%3B%0A%0A%20%20%20%20%2F%2F%20Walk%20down%20to%20the%20nested%20forms%3A%20'rows'%20is%20the%20key%20input%20value%20passed%20to%20the%20NovoControlGroup%20for%20constructing%20the%20formArray%0A%20%20%20%20const%20rowForms%3A%20NovoFormGroup%5B%5D%20%7C%20any%5B%5D%20%3D%20API.getFormGroupArray('rows'%2C%20topLevelForm)%3B%0A%20%20%20%20const%20baseRowForm%20%3D%20rowForms%5B0%5D%3B%0A%20%20%20%20const%20basePayRate%20%3D%20Number(API.getValue('payRate'%2C%20baseRowForm))%3B%0A%0A%20%20%20%20let%20isPayRateValid%20%3D%20true%3B%0A%20%20%20%20rowForms.forEach((form)%20%3D%3E%20%7B%0A%20%20%20%20%20%20%2F%2F%20Calculate%20the%20payRate%20for%20read%20only%20Overtime%20%2F%20Double%20time%20fields%0A%20%20%20%20%20%20if%20(API.getIndex(form)%20%3E%200)%20%7B%0A%20%20%20%20%20%20%20%20const%20multiplier%20%3D%20Number(API.getValue('multiplier'%2C%20form))%3B%0A%20%20%20%20%20%20%20%20API.setValue('payRate'%2C%20basePayRate%20*%20multiplier%2C%20%7B%20emitEvent%3A%20false%20%7D%2C%20form)%3B%0A%20%20%20%20%20%20%7D%0A%0A%20%20%20%20%20%20%2F%2F%20Determine%20if%20each%20pay%20rate%20is%20valid.%20Put%20a%20tipWell%20on%20the%20invalid%20rows.%0A%20%20%20%20%20%20const%20payRate%20%3D%20Number(API.getValue('payRate'%2C%20form))%3B%0A%20%20%20%20%20%20if%20(payRate%20%3C%20minPayRate)%20%7B%0A%20%20%20%20%20%20%20%20isPayRateValid%20%3D%20false%3B%0A%20%20%20%20%20%20%20%20API.displayTip('payRate'%2C%20'rate%20is%20below%20the%20minimum'%2C%20'caution'%2C%20false%2C%20false%2C%20form)%3B%0A%20%20%20%20%20%20%7D%20else%20if%20(payRate%20%3E%20maxPayRate)%20%7B%0A%20%20%20%20%20%20%20%20isPayRateValid%20%3D%20false%3B%0A%20%20%20%20%20%20%20%20API.displayTip('payRate'%2C%20'rate%20exceeds%20the%20maximum'%2C%20'caution'%2C%20false%2C%20false%2C%20form)%3B%0A%20%20%20%20%20%20%7D%20else%20%7B%0A%20%20%20%20%20%20%20%20API.clearTip('payRate'%2C%20form)%3B%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%7D)%3B%0A%0A%20%20%20%20%2F%2F%20Mark%20the%20editable%20row%20as%20invalid%20if%20any%20nested%20payRate%20form%20has%20a%20value%20outside%20of%20the%20min%2Fmax%20bounds%0A%20%20%20%20if%20(isPayRateValid)%20%7B%0A%20%20%20%20%20%20API.markAsValid('payRate'%2C%20baseRowForm)%3B%0A%20%20%20%20%7D%20else%20%7B%0A%20%20%20%20%20%20API.markAsInvalid('payRate'%2C%20'pay%20rate%20is%20less%20than%20the%20minimum%20pay%20rate'%2C%20baseRowForm)%3B%0A%20%20%20%20%7D%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cnovo-form%20%5Bform%5D%3D%22form%22%3E%0A%20%20%3Cdiv%20class%3D%22novo-form-row%22%3E%0A%20%20%20%20%3Cnovo-control%20%5Bform%5D%3D%22form%22%20%5Bcontrol%5D%3D%22minPayRateControl%22%3E%3C%2Fnovo-control%3E%0A%20%20%3C%2Fdiv%3E%0A%20%20%3Cdiv%20class%3D%22novo-form-row%22%3E%0A%20%20%20%20%3Cnovo-control%20%5Bform%5D%3D%22form%22%20%5Bcontrol%5D%3D%22maxPayRateControl%22%3E%3C%2Fnovo-control%3E%0A%20%20%3C%2Fdiv%3E%0A%20%20%3Cnovo-control-group%20%5Bform%5D%3D%22form%22%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%5Bcontrols%5D%3D%22controls%22%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%5BinitialValue%5D%3D%22initialValue%22%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20remove%3D%22false%22%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20edit%3D%22false%22%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20key%3D%22rows%22%3E%3C%2Fnovo-control-group%3E%0A%3C%2Fnovo-form%3E%0A%0A%3Cdiv%20class%3D%22final-value%22%3EForm%20Value%20-%20%3Cpre%3E%7B%7B%20form.value%20%7C%20json%20%7D%7D%3C%2Fpre%3E%3C%2Fdiv%3E%0A%3Cdiv%20class%3D%22final-value%22%3EForm%20Dirty%20-%20%7B%7B%20form.dirty%20%7D%7D%3C%2Fdiv%3E%0A%3Cdiv%20class%3D%22final-value%22%3EIs%20Form%20Valid%3F%20-%20%7B%7B%20form.valid%20%7D%7D%3C%2Fdiv%3E%0A`
    },
    'fi-modify-options': {
        title: 'Fi Modify Options Example',
        component: FiModifyOptionsExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%2F%2F%20Vendor%0Aimport%20%7B%20CheckboxControl%2C%20FieldInteractionApi%2C%20FormUtils%2C%20PickerControl%2C%20SelectControl%20%7D%20from%20'novo-elements'%3B%0A%0A%2F**%0A%20*%20%40title%20Fi%20Modify%20Options%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'fi-modify-options-example'%2C%0A%20%20%20%20templateUrl%3A%20'fi-modify-options-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'fi-modify-options-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20FiModifyOptionsExample%20%7B%0A%20%20public%20form%3A%20any%20%3D%20%7B%7D%3B%0A%20%20public%20controls%3A%20any%20%3D%20%7B%7D%3B%0A%0A%20%20constructor(private%20formUtils%3A%20FormUtils)%20%7B%0A%20%20%20%20const%20modifyOptionsAddFunction%20%3D%20(API%3A%20FieldInteractionApi)%20%3D%3E%20%7B%0A%20%20%20%20%20%20console.log('%5BFieldInteractionDemo%5D%20-%20modifyOptionsAddFunction')%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%20%20%20%20const%20currentValue%20%3D%20API.getActiveValue()%3B%0A%20%20%20%20%20%20if%20(!currentValue)%20%7B%0A%20%20%20%20%20%20%20%20API.removeStaticOption('select'%2C%20'NEW')%3B%0A%20%20%20%20%20%20%20%20API.removeStaticOption('picker'%2C%20'NEW')%3B%0A%20%20%20%20%20%20%7D%20else%20%7B%0A%20%20%20%20%20%20%20%20API.addStaticOption('select'%2C%20'NEW')%3B%0A%20%20%20%20%20%20%20%20API.addStaticOption('select'%2C%20'NEW')%3B%20%2F%2F%20Duplicate%20options%20will%20be%20ignored%0A%20%20%20%20%20%20%20%20API.addStaticOption('picker'%2C%20'NEW')%3B%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%3B%0A%20%20%20%20const%20modifyOptionsAsyncFunction%20%3D%20(API%3A%20FieldInteractionApi)%20%3D%3E%20%7B%0A%20%20%20%20%20%20console.log('%5BFieldInteractionDemo%5D%20-%20modifyOptionsAsyncFunction')%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%20%20%20%20const%20currentValue%20%3D%20API.getActiveValue()%3B%0A%20%20%20%20%20%20switch%20(currentValue)%20%7B%0A%20%20%20%20%20%20%20%20case%201%3A%0A%20%20%20%20%20%20%20%20%20%20%2F%2F%20Static%0A%20%20%20%20%20%20%20%20%20%20API.setProperty('picker'%2C%20'label'%2C%20'Static%20Picker')%3B%0A%20%20%20%20%20%20%20%20%20%20API.modifyPickerConfig('picker'%2C%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20options%3A%20%5B'A'%2C%20'B'%2C%20'C'%5D%2C%0A%20%20%20%20%20%20%20%20%20%20%7D)%3B%0A%20%20%20%20%20%20%20%20%20%20break%3B%0A%20%20%20%20%20%20%20%20case%202%3A%0A%20%20%20%20%20%20%20%20%20%20%2F%2F%20Async%20with%20Options%20URL%0A%20%20%20%20%20%20%20%20%20%20API.setProperty('picker'%2C%20'label'%2C%20'Async%20Picker%20(with%20options%20url)')%3B%0A%20%20%20%20%20%20%20%20%20%20API.modifyPickerConfig(%0A%20%20%20%20%20%20%20%20%20%20%20%20'picker'%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20format%3A%20'%24name%20%24test'%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20optionsUrl%3A%20'http%3A%2F%2Fnovo-elements-mock.getsandbox.com%2Fusers'%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20function%20(result)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20result.test%20%3D%20'Built%20with%20Options%20URL!'%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20return%20result%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20%20%20)%3B%0A%20%20%20%20%20%20%20%20%20%20break%3B%0A%20%20%20%20%20%20%20%20case%203%3A%0A%20%20%20%20%20%20%20%20%20%20%2F%2F%20Async%20with%20Options%20URL%20Builder%0A%20%20%20%20%20%20%20%20%20%20API.setProperty('picker'%2C%20'label'%2C%20'Async%20Picker%20(with%20options%20url%20builder)')%3B%0A%20%20%20%20%20%20%20%20%20%20API.modifyPickerConfig(%0A%20%20%20%20%20%20%20%20%20%20%20%20'picker'%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20format%3A%20'%24name%20%24test'%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20optionsUrlBuilder%3A%20(query)%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20return%20'http%3A%2F%2Fnovo-elements-mock.getsandbox.com%2Fusers'%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20function%20(result)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20result.test%20%3D%20'Built%20with%20Options%20URL%20Builder!'%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20return%20result%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20%20%20)%3B%0A%20%20%20%20%20%20%20%20%20%20break%3B%0A%20%20%20%20%20%20%20%20case%204%3A%0A%20%20%20%20%20%20%20%20%20%20%2F%2F%20Async%20with%20Options%20Promise%0A%20%20%20%20%20%20%20%20%20%20API.setProperty('picker'%2C%20'label'%2C%20'Async%20Picker%20(with%20options%20promise)')%3B%0A%20%20%20%20%20%20%20%20%20%20API.modifyPickerConfig('picker'%2C%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20format%3A%20'%24name%20%24test'%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20optionsPromise(query%2C%20http)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20return%20new%20Promise(function%20(resolve%2C%20reject)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20if%20(query%20%26%26%20query.length)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20http%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20.get('http%3A%2F%2Fnovo-elements-mock.getsandbox.com%2Fusers')%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20.map(function%20(results%3A%20any%5B%5D)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20return%20results.map((result)%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20result.test%20%3D%20'Built%20with%20Options%20Promise'%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20return%20result%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D)%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20.subscribe(resolve%2C%20reject)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%20else%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20resolve(%5B'DEFAULT'%5D)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20%20%20%7D)%3B%0A%20%20%20%20%20%20%20%20%20%20break%3B%0A%20%20%20%20%20%20%20%20default%3A%0A%20%20%20%20%20%20%20%20%20%20break%3B%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%3B%0A%0A%20%20%20%20%2F%2F%20Modify%20Options%20Field%20Interactions%0A%20%20%20%20this.controls.selectControl%20%3D%20new%20SelectControl(%7B%0A%20%20%20%20%20%20key%3A%20'select'%2C%0A%20%20%20%20%20%20label%3A%20'Select'%2C%0A%20%20%20%20%20%20options%3A%20%5B'A'%2C%20'B'%2C%20'C'%5D%2C%0A%20%20%20%20%7D)%3B%0A%20%20%20%20this.controls.pickerControl%20%3D%20new%20PickerControl(%7B%0A%20%20%20%20%20%20key%3A%20'picker'%2C%0A%20%20%20%20%20%20label%3A%20'Static%20Picker'%2C%0A%20%20%20%20%20%20config%3A%20%7B%0A%20%20%20%20%20%20%20%20options%3A%20%5B'A'%2C%20'B'%2C%20'C'%5D%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%7D)%3B%0A%20%20%20%20this.controls.toggleControl%20%3D%20new%20CheckboxControl(%7B%0A%20%20%20%20%20%20key%3A%20'toggle'%2C%0A%20%20%20%20%20%20label%3A%20'Add%20Option%3F'%2C%0A%20%20%20%20%20%20description%3A%20'I%20will%20add%20options%20to%20the%20above%20field!'%2C%0A%20%20%20%20%20%20interactions%3A%20%5B%7B%20event%3A%20'change'%2C%20script%3A%20modifyOptionsAddFunction%20%7D%5D%2C%0A%20%20%20%20%7D)%3B%0A%20%20%20%20this.controls.makePickerAsyncControl%20%3D%20new%20SelectControl(%7B%0A%20%20%20%20%20%20key%3A%20'async'%2C%0A%20%20%20%20%20%20label%3A%20'Async%20Picker%3F'%2C%0A%20%20%20%20%20%20description%3A%20'I%20will%20make%20the%20picker%20now%20hit%20a%20service!'%2C%0A%20%20%20%20%20%20value%3A%201%2C%0A%20%20%20%20%20%20options%3A%20%5B%0A%20%20%20%20%20%20%20%20%7B%20label%3A%20'Not%20Async'%2C%20value%3A%201%20%7D%2C%0A%20%20%20%20%20%20%20%20%7B%20label%3A%20'Async%20With%20Options%20URL'%2C%20value%3A%202%20%7D%2C%0A%20%20%20%20%20%20%20%20%7B%20label%3A%20'Async%20With%20Options%20URL%20Builder'%2C%20value%3A%203%20%7D%2C%0A%20%20%20%20%20%20%20%20%7B%20label%3A%20'Async%20With%20Options%20Promise'%2C%20value%3A%204%20%7D%2C%0A%20%20%20%20%20%20%5D%2C%0A%20%20%20%20%20%20interactions%3A%20%5B%7B%20event%3A%20'change'%2C%20script%3A%20modifyOptionsAsyncFunction%20%7D%5D%2C%0A%20%20%20%20%7D)%3B%0A%20%20%20%20this.form%20%3D%20formUtils.toFormGroup(%5B%0A%20%20%20%20%20%20this.controls.selectControl%2C%0A%20%20%20%20%20%20this.controls.pickerControl%2C%0A%20%20%20%20%20%20this.controls.toggleControl%2C%0A%20%20%20%20%20%20this.controls.makePickerAsyncControl%2C%0A%20%20%20%20%5D)%3B%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cnovo-form%20%5Bform%5D%3D%22form%22%20layout%3D%22vertical%22%3E%0A%20%20%20%20%3Cdiv%20class%3D%22novo-form-row%22%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-control%20%5Bform%5D%3D%22form%22%20%5Bcontrol%5D%3D%22controls.selectControl%22%3E%3C%2Fnovo-control%3E%0A%20%20%20%20%3C%2Fdiv%3E%0A%20%20%20%20%3Cdiv%20class%3D%22novo-form-row%22%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-control%20%5Bform%5D%3D%22form%22%20%5Bcontrol%5D%3D%22controls.pickerControl%22%3E%3C%2Fnovo-control%3E%0A%20%20%20%20%3C%2Fdiv%3E%0A%20%20%20%20%3Cdiv%20class%3D%22novo-form-row%22%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-control%20%5Bform%5D%3D%22form%22%20%5Bcontrol%5D%3D%22controls.toggleControl%22%3E%3C%2Fnovo-control%3E%0A%20%20%20%20%3C%2Fdiv%3E%0A%20%20%20%20%3Cdiv%20class%3D%22novo-form-row%22%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-control%20%5Bform%5D%3D%22form%22%20%5Bcontrol%5D%3D%22controls.makePickerAsyncControl%22%3E%3C%2Fnovo-control%3E%0A%20%20%20%20%3C%2Fdiv%3E%0A%3C%2Fnovo-form%3E%0A%3Cdiv%20class%3D%22final-value%22%3EForm%20Value%20-%20%7B%7B%20form.value%20%7C%20json%20%7D%7D%3C%2Fdiv%3E%0A%3Cdiv%20class%3D%22final-value%22%3EForm%20Dirty%20-%20%7B%7B%20form.dirty%20%7C%20json%20%7D%7D%3C%2Fdiv%3E%0A%3Cdiv%20class%3D%22final-value%22%3EIs%20Form%20Valid%3F%20-%20%7B%7B%20form.valid%20%7C%20json%20%7D%7D%3C%2Fdiv%3E%0A`
    },
    'fi-modify-added-picker': {
        title: 'Fi Modify Added Picker Example',
        component: FiModifyAddedPickerExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%2F%2F%20Vendor%0Aimport%20%7B%20FieldInteractionApi%2C%20FormUtils%2C%20PickerControl%20%7D%20from%20'novo-elements'%3B%0A%0A%2F**%0A%20*%20%40title%20Fi%20Modify%20Added%20Picker%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'fi-modify-added-picker-example'%2C%0A%20%20%20%20templateUrl%3A%20'fi-modify-added-picker-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'fi-modify-added-picker-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20FiModifyAddedPickerExample%20%7B%0A%20%20public%20form%3A%20any%3B%0A%20%20public%20controls%3A%20any%20%3D%20%7B%7D%3B%0A%0A%20%20constructor(private%20formUtils%3A%20FormUtils)%20%7B%0A%20%20%20%20%2F%2F%20Adding%20%2F%20Removing%20Interactions%0A%20%20%20%20const%20entityPickerFunction%20%3D%20(API%3A%20FieldInteractionApi)%20%3D%3E%20%7B%0A%20%20%20%20%20%20console.log('%5BFieldInteractionDemo%5D%20-%20entityPickerFunction')%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%20%20%20%20API.modifyPickerConfig('custom-entity-picker'%2C%20%7B%0A%20%20%20%20%20%20%20%20optionsPromise%3A%20(query%2C%20http)%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%20%20return%20new%20Promise(function%20(resolve%2C%20reject)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20if%20(query%20%26%26%20query.length)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20http%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20.get('http%3A%2F%2Fnovo-elements-mock.getsandbox.com%2Fusers')%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20.map(function%20(results%3A%20any%5B%5D)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20return%20results.map((result)%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20Setting%20the%20searchEntity%20on%20the%20item%20is%20important.%20We%20use%20it%20to%20format%20your%20display%20properly.%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20Valid%20options%20are%3A%20Candidate%2C%20ClientContact%2C%20ClientCorporation%2C%20CorporateUser%2C%20JobOrder%2C%20Lead%2C%20Opportunity%2C%20and%20Placement%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20result.searchEntity%20%3D%20'Candidate'%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20return%20result%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D)%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20.subscribe(resolve%2C%20reject)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%20else%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20resolve(%5B'DEFAULT'%5D)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%20%20%7D)%3B%0A%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20format%3A%20'%24name'%2C%0A%20%20%20%20%20%20%20%20%2F%2F%20This%20is%20how%20we%20set%20the%20picker%20to%20be%20of%20an%20entity%20type%0A%20%20%20%20%20%20%20%20resultsTemplateType%3A%20'entity-picker'%2C%0A%20%20%20%20%20%20%7D)%3B%0A%20%20%20%20%7D%3B%0A%0A%20%20%20%20this.controls.pickerControl%20%3D%20new%20PickerControl(%7B%0A%20%20%20%20%20%20key%3A%20'custom-entity-picker'%2C%0A%20%20%20%20%20%20name%3A%20'custom-entity-picker'%2C%0A%20%20%20%20%20%20config%3A%20%7B%0A%20%20%20%20%20%20%20%20options%3A%20%5B%5D%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20label%3A%20'Custom%20Entity%20Picker'%2C%0A%20%20%20%20%20%20interactions%3A%20%5B%7B%20event%3A%20'init'%2C%20script%3A%20entityPickerFunction%20%7D%5D%2C%0A%20%20%20%20%7D)%3B%0A%20%20%20%20this.form%20%3D%20this.formUtils.toFormGroup(%5Bthis.controls.pickerControl%5D)%3B%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cnovo-form%20%5Bform%5D%3D%22form%22%20layout%3D%22vertical%22%3E%0A%20%20%3Cdiv%20class%3D%22novo-form-row%22%3E%0A%20%20%20%20%3Cnovo-control%20%5Bform%5D%3D%22form%22%20%5Bcontrol%5D%3D%22controls.pickerControl%22%3E%3C%2Fnovo-control%3E%0A%20%20%3C%2Fdiv%3E%0A%3C%2Fnovo-form%3E%0A`
    },
    'fi-messaging': {
        title: 'Fi Messaging Example',
        component: FiMessagingExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%2F%2F%20Vendor%0Aimport%20%7B%20CheckboxControl%2C%20FieldInteractionApi%2C%20FormUtils%2C%20TextBoxControl%20%7D%20from%20'novo-elements'%3B%0A%0A%2F**%0A%20*%20%40title%20Fi%20Messaging%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'fi-messaging-example'%2C%0A%20%20%20%20templateUrl%3A%20'fi-messaging-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'fi-messaging-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20FiMessagingExample%20%7B%0A%20%20public%20form%3A%20any%20%3D%20%7B%7D%3B%0A%20%20public%20controls%3A%20any%20%3D%20%7B%7D%3B%0A%0A%20%20constructor(private%20formUtils%3A%20FormUtils)%20%7B%0A%20%20%20%20const%20messagingFunction%20%3D%20(API%3A%20FieldInteractionApi)%20%3D%3E%20%7B%0A%20%20%20%20%20%20console.log('%5BFieldInteractionDemo%5D%20-%20messagingFunction')%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%20%20%20%20if%20(API.getActiveKey()%20%3D%3D%3D%20'toast')%20%7B%0A%20%20%20%20%20%20%20%20API.displayToast(%7B%0A%20%20%20%20%20%20%20%20%20%20title%3A%20'New%20Value'%2C%0A%20%20%20%20%20%20%20%20%20%20message%3A%20API.getActiveValue()%2C%0A%20%20%20%20%20%20%20%20%7D)%3B%0A%20%20%20%20%20%20%7D%20else%20if%20(API.getActiveKey()%20%3D%3D%3D%20'tip'%20%7C%7C%20API.getActiveKey()%20%3D%3D%3D%20'tipHtml')%20%7B%0A%20%20%20%20%20%20%20%20const%20sanitize%20%3D%20!API.getValue('tipHtml')%3B%0A%20%20%20%20%20%20%20%20API.displayTip('tip'%2C%20API.getValue('tip')%2C%20'info'%2C%20true%2C%20sanitize)%3B%0A%20%20%20%20%20%20%7D%20else%20if%20(API.getActiveKey()%20%3D%3D%3D%20'prompt')%20%7B%0A%20%20%20%20%20%20%20%20API.promptUser(API.getActiveKey()%2C%20%5B'Update%20Fee%20Arrangement%20from%20Selected%20Company'%2C%20'Update%20DateLastModified%20to%20right%20now!'%5D).then(%0A%20%20%20%20%20%20%20%20%20%20function%20(result)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20if%20(result)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20console.log('PERFORM')%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%20else%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20console.log(%22DON'T%20PERFORM%22)%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20)%3B%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%3B%0A%0A%20%20%20%20%2F%2F%20Messaging%20Field%20Interactions%0A%20%20%20%20this.controls.toastControl%20%3D%20new%20TextBoxControl(%7B%0A%20%20%20%20%20%20type%3A%20'text'%2C%0A%20%20%20%20%20%20key%3A%20'toast'%2C%0A%20%20%20%20%20%20label%3A%20'Toast'%2C%0A%20%20%20%20%20%20description%3A%20'I%20will%20trigger%20a%20toast%20as%20you%20change%20the%20value!'%2C%0A%20%20%20%20%20%20interactions%3A%20%5B%7B%20event%3A%20'change'%2C%20script%3A%20messagingFunction%20%7D%5D%2C%0A%20%20%20%20%7D)%3B%0A%20%20%20%20this.controls.tipControl%20%3D%20new%20TextBoxControl(%7B%0A%20%20%20%20%20%20type%3A%20'text'%2C%0A%20%20%20%20%20%20key%3A%20'tip'%2C%0A%20%20%20%20%20%20label%3A%20'Tip'%2C%0A%20%20%20%20%20%20description%3A%20'I%20will%20trigger%20a%20tip%20well%20as%20you%20change%20the%20value!'%2C%0A%20%20%20%20%20%20interactions%3A%20%5B%7B%20event%3A%20'change'%2C%20script%3A%20messagingFunction%20%7D%5D%2C%0A%20%20%20%20%7D)%3B%0A%20%20%20%20this.controls.tipHtmlControl%20%3D%20new%20CheckboxControl(%7B%0A%20%20%20%20%20%20key%3A%20'tipHtml'%2C%0A%20%20%20%20%20%20label%3A%20'Display%20Tip%20as%20HTML'%2C%0A%20%20%20%20%20%20description%3A%20'Sets%20the%20API.displayTip()%20sanitize%20parameter%20to%20false.'%2C%0A%20%20%20%20%20%20value%3A%20false%2C%0A%20%20%20%20%20%20interactions%3A%20%5B%7B%20event%3A%20'change'%2C%20script%3A%20messagingFunction%20%7D%5D%2C%0A%20%20%20%20%7D)%3B%0A%20%20%20%20this.controls.promptControl%20%3D%20new%20TextBoxControl(%7B%0A%20%20%20%20%20%20type%3A%20'text'%2C%0A%20%20%20%20%20%20key%3A%20'prompt'%2C%0A%20%20%20%20%20%20label%3A%20'Prompt%20User%20of%20Downstream%20Changes'%2C%0A%20%20%20%20%20%20interactions%3A%20%5B%7B%20event%3A%20'change'%2C%20script%3A%20messagingFunction%20%7D%5D%2C%0A%20%20%20%20%7D)%3B%0A%20%20%20%20this.form%20%3D%20formUtils.toFormGroup(%5B%0A%20%20%20%20%20%20this.controls.toastControl%2C%0A%20%20%20%20%20%20this.controls.tipControl%2C%0A%20%20%20%20%20%20this.controls.tipHtmlControl%2C%0A%20%20%20%20%20%20this.controls.promptControl%2C%0A%20%20%20%20%5D)%3B%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cnovo-form%20%5Bform%5D%3D%22form%22%20layout%3D%22vertical%22%3E%0A%20%20%20%20%3Cdiv%20class%3D%22novo-form-row%22%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-control%20%5Bform%5D%3D%22form%22%20%5Bcontrol%5D%3D%22controls.tipControl%22%3E%3C%2Fnovo-control%3E%0A%20%20%20%20%3C%2Fdiv%3E%0A%20%20%20%20%3Cdiv%20class%3D%22novo-form-row%22%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-control%20%5Bform%5D%3D%22form%22%20%5Bcontrol%5D%3D%22controls.tipHtmlControl%22%3E%3C%2Fnovo-control%3E%0A%20%20%20%20%3C%2Fdiv%3E%0A%20%20%20%20%3Cdiv%20class%3D%22novo-form-row%22%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-control%20%5Bform%5D%3D%22form%22%20%5Bcontrol%5D%3D%22controls.toastControl%22%3E%3C%2Fnovo-control%3E%0A%20%20%20%20%3C%2Fdiv%3E%0A%20%20%20%20%3Cdiv%20class%3D%22novo-form-row%22%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-control%20%5Bform%5D%3D%22form%22%20%5Bcontrol%5D%3D%22controls.promptControl%22%3E%3C%2Fnovo-control%3E%0A%20%20%20%20%3C%2Fdiv%3E%0A%3C%2Fnovo-form%3E%0A%3Cdiv%20class%3D%22final-value%22%3EForm%20Value%20-%20%7B%7B%20form.value%20%7C%20json%20%7D%7D%3C%2Fdiv%3E%0A%3Cdiv%20class%3D%22final-value%22%3EForm%20Dirty%20-%20%7B%7B%20form.dirty%20%7C%20json%20%7D%7D%3C%2Fdiv%3E%0A%3Cdiv%20class%3D%22final-value%22%3EIs%20Form%20Valid%3F%20-%20%7B%7B%20form.valid%20%7C%20json%20%7D%7D%3C%2Fdiv%3E%0A`
    },
    'fi-hide-show': {
        title: 'Fi Hide Show Example',
        component: FiHideShowExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%2F%2F%20Vendor%0Aimport%20%7B%20CheckboxControl%2C%20FieldInteractionApi%2C%20FormUtils%2C%20TextBoxControl%20%7D%20from%20'novo-elements'%3B%0A%0A%2F**%0A%20*%20%40title%20Fi%20Hide%20Show%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'fi-hide-show-example'%2C%0A%20%20%20%20templateUrl%3A%20'fi-hide-show-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'fi-hide-show-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20FiHideShowExample%20%7B%0A%20%20public%20form%3A%20any%20%3D%20%7B%7D%3B%0A%20%20public%20controls%3A%20any%20%3D%20%7B%7D%3B%0A%0A%20%20constructor(private%20formUtils%3A%20FormUtils)%20%7B%0A%20%20%20%20const%20hideShowFunction%20%3D%20(API%3A%20FieldInteractionApi)%20%3D%3E%20%7B%0A%20%20%20%20%20%20console.log('%5BFieldInteractionDemo%5D%20-%20hideShowFunction')%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%20%20%20%20const%20activeValue%20%3D%20API.getActiveValue()%3B%0A%20%20%20%20%20%20if%20(!activeValue)%20%7B%0A%20%20%20%20%20%20%20%20API.show('text')%3B%0A%20%20%20%20%20%20%7D%20else%20%7B%0A%20%20%20%20%20%20%20%20API.hide('text')%3B%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%3B%0A%0A%20%20%20%20%2F%2F%20Hide%2FShow%20Field%20Interactions%0A%20%20%20%20this.controls.textControl%20%3D%20new%20TextBoxControl(%7B%0A%20%20%20%20%20%20type%3A%20'text'%2C%0A%20%20%20%20%20%20key%3A%20'text'%2C%0A%20%20%20%20%20%20required%3A%20true%2C%0A%20%20%20%20%20%20label%3A%20'MyField'%2C%0A%20%20%20%20%7D)%3B%0A%20%20%20%20this.controls.text2Control%20%3D%20new%20TextBoxControl(%7B%0A%20%20%20%20%20%20type%3A%20'text'%2C%0A%20%20%20%20%20%20key%3A%20'text2'%2C%0A%20%20%20%20%20%20label%3A%20'MyField'%2C%0A%20%20%20%20%7D)%3B%0A%20%20%20%20this.controls.toggleControl%20%3D%20new%20CheckboxControl(%7B%0A%20%20%20%20%20%20key%3A%20'toggle'%2C%0A%20%20%20%20%20%20label%3A%20'Hidden%3F'%2C%0A%20%20%20%20%20%20description%3A%20'I%20will%20toggle%20the%20above%20field%20to%20display%20or%20not!'%2C%0A%20%20%20%20%20%20interactions%3A%20%5B%7B%20event%3A%20'change'%2C%20script%3A%20hideShowFunction%20%7D%5D%2C%0A%20%20%20%20%7D)%3B%0A%20%20%20%20this.form%20%3D%20formUtils.toFormGroup(%5Bthis.controls.textControl%2C%20this.controls.text2Control%2C%20this.controls.toggleControl%5D)%3B%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cnovo-form%20%5Bform%5D%3D%22form%22%20layout%3D%22vertical%22%3E%0A%20%20%20%20%3Cdiv%20class%3D%22novo-form-row%22%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-control%20%5Bform%5D%3D%22form%22%20%5Bcontrol%5D%3D%22controls.textControl%22%3E%3C%2Fnovo-control%3E%0A%20%20%20%20%3C%2Fdiv%3E%0A%20%20%20%20%3Cdiv%20class%3D%22novo-form-row%22%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-control%20%5Bform%5D%3D%22form%22%20%5Bcontrol%5D%3D%22controls.text2Control%22%3E%3C%2Fnovo-control%3E%0A%20%20%20%20%3C%2Fdiv%3E%0A%20%20%20%20%3Cdiv%20class%3D%22novo-form-row%22%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-control%20%5Bform%5D%3D%22form%22%20%5Bcontrol%5D%3D%22controls.toggleControl%22%3E%3C%2Fnovo-control%3E%0A%20%20%20%20%3C%2Fdiv%3E%0A%3C%2Fnovo-form%3E%0A%3Cdiv%20class%3D%22final-value%22%3EForm%20Value%20-%20%7B%7B%20form.value%20%7C%20json%20%7D%7D%3C%2Fdiv%3E%0A%3Cdiv%20class%3D%22final-value%22%3EForm%20Dirty%20-%20%7B%7B%20form.dirty%20%7C%20json%20%7D%7D%3C%2Fdiv%3E%0A%3Cdiv%20class%3D%22final-value%22%3EIs%20Form%20Valid%3F%20-%20%7B%7B%20form.valid%20%7C%20json%20%7D%7D%3C%2Fdiv%3E%0A`
    },
    'fi-globals': {
        title: 'Fi Globals Example',
        component: FiGlobalsExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%2F%2F%20Vendor%0Aimport%20%7B%20FieldInteractionApi%2C%20FormUtils%2C%20TextBoxControl%20%7D%20from%20'novo-elements'%3B%0A%0A%2F**%0A%20*%20%40title%20Fi%20Globals%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'fi-globals-example'%2C%0A%20%20%20%20templateUrl%3A%20'fi-globals-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'fi-globals-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20FiGlobalsExample%20%7B%0A%20%20public%20form%3A%20any%20%3D%20%7B%7D%3B%0A%20%20public%20controls%3A%20any%20%3D%20%7B%7D%3B%0A%0A%20%20constructor(private%20formUtils%3A%20FormUtils)%20%7B%0A%20%20%20%20const%20globalsFunction%20%3D%20(API%3A%20FieldInteractionApi)%20%3D%3E%20%7B%0A%20%20%20%20%20%20console.log('%5BFieldInteractionDemo%5D%20-%20globalsFunction')%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%20%20%20%20API.setProperty(API.getActiveKey()%2C%20'label'%2C%20%60%24%7BAPI.getProperty(API.getActiveKey()%2C%20'label')%7D%20--%20%24%7BAPI.globals.TEST%7D%60)%3B%0A%20%20%20%20%7D%3B%0A%0A%20%20%20%20%2F%2F%20Global%20Field%20Interactions%0A%20%20%20%20this.controls.globalControl%20%3D%20new%20TextBoxControl(%7B%0A%20%20%20%20%20%20type%3A%20'number'%2C%0A%20%20%20%20%20%20key%3A%20'global'%2C%0A%20%20%20%20%20%20value%3A%205%2C%0A%20%20%20%20%20%20label%3A%20'Form%20Input'%2C%0A%20%20%20%20%20%20description%3A%20'The%20label%20gets%20updated%20on%20load%20to%20use%20a%20global!'%2C%0A%20%20%20%20%20%20interactions%3A%20%5B%7B%20event%3A%20'init'%2C%20script%3A%20globalsFunction%2C%20invokeOnInit%3A%20true%20%7D%5D%2C%0A%20%20%20%20%7D)%3B%0A%20%20%20%20this.form%20%3D%20formUtils.toFormGroup(%5Bthis.controls.globalControl%5D)%3B%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cnovo-form%20%5Bform%5D%3D%22form%22%20layout%3D%22vertical%22%3E%0A%20%20%20%20%3Cdiv%20class%3D%22novo-form-row%22%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-control%20%5Bform%5D%3D%22form%22%20%5Bcontrol%5D%3D%22controls.globalControl%22%3E%3C%2Fnovo-control%3E%0A%20%20%20%20%3C%2Fdiv%3E%0A%3C%2Fnovo-form%3E%0A%3Cdiv%20class%3D%22final-value%22%3EForm%20Value%20-%20%7B%7B%20form.value%20%7C%20json%20%7D%7D%3C%2Fdiv%3E%0A%3Cdiv%20class%3D%22final-value%22%3EForm%20Dirty%20-%20%7B%7B%20form.dirty%20%7C%20json%20%7D%7D%3C%2Fdiv%3E%0A%3Cdiv%20class%3D%22final-value%22%3EIs%20Form%20Valid%3F%20-%20%7B%7B%20form.valid%20%7C%20json%20%7D%7D%3C%2Fdiv%3E%0A`
    },
    'fi-enable-disable': {
        title: 'Fi Enable Disable Example',
        component: FiEnableDisableExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%2F%2F%20Vendor%0Aimport%20%7B%20CheckboxControl%2C%20FieldInteractionApi%2C%20FormUtils%2C%20TextBoxControl%20%7D%20from%20'novo-elements'%3B%0A%0A%2F**%0A%20*%20%40title%20Fi%20Enable%20Disable%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'fi-enable-disable-example'%2C%0A%20%20%20%20templateUrl%3A%20'fi-enable-disable-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'fi-enable-disable-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20FiEnableDisableExample%20%7B%0A%20%20public%20form%3A%20any%3B%0A%20%20public%20controls%3A%20any%20%3D%20%7B%7D%3B%0A%0A%20%20constructor(private%20formUtils%3A%20FormUtils)%20%7B%0A%20%20%20%20const%20enableDisableFunction%20%3D%20(API%3A%20FieldInteractionApi)%20%3D%3E%20%7B%0A%20%20%20%20%20%20console.log('%5BFieldInteractionDemo%5D%20-%20enableDisableFunction')%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%20%20%20%20const%20currentValue%20%3D%20API.getActiveValue()%3B%0A%20%20%20%20%20%20if%20(!currentValue)%20%7B%0A%20%20%20%20%20%20%20%20API.enable('text')%3B%0A%20%20%20%20%20%20%7D%20else%20%7B%0A%20%20%20%20%20%20%20%20API.disable('text')%3B%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%3B%0A%0A%20%20%20%20%2F%2F%20Enable%2FDisable%20Field%20Interactions%0A%20%20%20%20this.controls.textControl%20%3D%20new%20TextBoxControl(%7B%0A%20%20%20%20%20%20type%3A%20'text'%2C%0A%20%20%20%20%20%20key%3A%20'text'%2C%0A%20%20%20%20%20%20label%3A%20'MyField'%2C%0A%20%20%20%20%7D)%3B%0A%20%20%20%20this.controls.toggleControl%20%3D%20new%20CheckboxControl(%7B%0A%20%20%20%20%20%20key%3A%20'toggle'%2C%0A%20%20%20%20%20%20label%3A%20'Disable%3F'%2C%0A%20%20%20%20%20%20description%3A%20'I%20will%20disable%20the%20above%20field!'%2C%0A%20%20%20%20%20%20interactions%3A%20%5B%7B%20event%3A%20'change'%2C%20script%3A%20enableDisableFunction%20%7D%5D%2C%0A%20%20%20%20%7D)%3B%0A%20%20%20%20this.form%20%3D%20formUtils.toFormGroup(%5Bthis.controls.textControl%2C%20this.controls.toggleControl%5D)%3B%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cnovo-form%20%5Bform%5D%3D%22form%22%20layout%3D%22vertical%22%3E%0A%20%20%20%20%3Cdiv%20class%3D%22novo-form-row%22%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-control%20%5Bform%5D%3D%22form%22%20%5Bcontrol%5D%3D%22controls.textControl%22%3E%3C%2Fnovo-control%3E%0A%20%20%20%20%3C%2Fdiv%3E%0A%20%20%20%20%3Cdiv%20class%3D%22novo-form-row%22%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-control%20%5Bform%5D%3D%22form%22%20%5Bcontrol%5D%3D%22controls.toggleControl%22%3E%3C%2Fnovo-control%3E%0A%20%20%20%20%3C%2Fdiv%3E%0A%3C%2Fnovo-form%3E%0A%3Cdiv%20class%3D%22final-value%22%3EForm%20Value%20-%20%7B%7B%20form.value%20%7C%20json%20%7D%7D%3C%2Fdiv%3E%0A%3Cdiv%20class%3D%22final-value%22%3EForm%20Dirty%20-%20%7B%7B%20form.dirty%20%7C%20json%20%7D%7D%3C%2Fdiv%3E%0A%3Cdiv%20class%3D%22final-value%22%3EIs%20Form%20Valid%3F%20-%20%7B%7B%20form.valid%20%7C%20json%20%7D%7D%3C%2Fdiv%3E%0A`
    },
    'fi-description': {
        title: 'Fi Required Example',
        component: FiDescriptionExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%2F%2F%20Vendor%0Aimport%20%7B%20CheckboxControl%2C%20FieldInteractionApi%2C%20FormUtils%2C%20TextBoxControl%20%7D%20from%20'novo-elements'%3B%0A%0A%2F**%0A%20*%20%40title%20Fi%20Required%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'fi-description-example'%2C%0A%20%20%20%20templateUrl%3A%20'fi-description-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'fi-description-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20FiDescriptionExample%20%7B%0A%20%20public%20form%3A%20any%20%3D%20%7B%7D%3B%0A%20%20public%20controls%3A%20any%20%3D%20%7B%7D%3B%0A%0A%20%20constructor(formUtils%3A%20FormUtils)%20%7B%0A%20%20%20%20const%20standardDescription%20%3D%20'Toggle%20the%20checkbox%20below%20to%20toggle%20between%20an%20HTML%20description%20and%20a%20plain%20text%20description!'%3B%0A%20%20%20%20const%20htmlDescription%20%3D%20'%3Cspan%3E%3Cb%3EBOLD%3C%2Fb%3E%20description%20with%20a%20%3Ca%20target%3D%22_blank%22%20href%3D%22https%3A%2F%2Fwww.google.com%22%3EGoogle%3C%2Fa%3E%20Link%3C%2Fspan%3E'%3B%0A%0A%20%20%20%20const%20descriptionFunction%20%3D%20(API%3A%20FieldInteractionApi)%20%3D%3E%20%7B%0A%20%20%20%20%20%20console.log('%5BFieldInteractionDemo%5D%20-%20descriptionFunction')%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%20%20%20%20const%20activeValue%20%3D%20API.getActiveValue()%3B%0A%0A%20%20%20%20%20%20if%20(activeValue)%20%7B%0A%20%20%20%20%20%20%20%20API.setDescription('description'%2C%20htmlDescription)%3B%0A%20%20%20%20%20%20%7D%20else%20%7B%0A%20%20%20%20%20%20%20%20API.setDescription('description'%2C%20standardDescription)%3B%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%3B%0A%0A%20%20%20%20%2F%2F%20Required%20Field%20Interactions%0A%20%20%20%20this.controls.descriptionControl%20%3D%20new%20TextBoxControl(%7B%0A%20%20%20%20%20%20type%3A%20'text'%2C%0A%20%20%20%20%20%20key%3A%20'description'%2C%0A%20%20%20%20%20%20label%3A%20'Test'%2C%0A%20%20%20%20%20%20description%3A%20standardDescription%2C%0A%20%20%20%20%7D)%3B%0A%20%20%20%20this.controls.toggleControl%20%3D%20new%20CheckboxControl(%7B%0A%20%20%20%20%20%20key%3A%20'toggle'%2C%0A%20%20%20%20%20%20label%3A%20'Description%20has%20HTML%3F'%2C%0A%20%20%20%20%20%20interactions%3A%20%5B%7B%20event%3A%20'change'%2C%20script%3A%20descriptionFunction%20%7D%5D%2C%0A%20%20%20%20%7D)%3B%0A%20%20%20%20this.form%20%3D%20formUtils.toFormGroup(%5Bthis.controls.descriptionControl%2C%20this.controls.toggleControl%5D)%3B%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cnovo-form%20%5Bform%5D%3D%22form%22%20layout%3D%22vertical%22%3E%0A%20%20%20%20%3Cdiv%20class%3D%22novo-form-row%22%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-control%20%5Bform%5D%3D%22form%22%20%5Bcontrol%5D%3D%22controls.descriptionControl%22%3E%3C%2Fnovo-control%3E%0A%20%20%20%20%3C%2Fdiv%3E%0A%20%20%20%20%3Cdiv%20class%3D%22novo-form-row%22%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-control%20%5Bform%5D%3D%22form%22%20%5Bcontrol%5D%3D%22controls.toggleControl%22%3E%3C%2Fnovo-control%3E%0A%20%20%20%20%3C%2Fdiv%3E%0A%3C%2Fnovo-form%3E%0A%3Cdiv%20class%3D%22final-value%22%3EForm%20Value%20-%20%7B%7B%20form.value%20%7C%20json%20%7D%7D%3C%2Fdiv%3E%0A%3Cdiv%20class%3D%22final-value%22%3EForm%20Dirty%20-%20%7B%7B%20form.dirty%20%7C%20json%20%7D%7D%3C%2Fdiv%3E%0A%3Cdiv%20class%3D%22final-value%22%3EIs%20Form%20Valid%3F%20-%20%7B%7B%20form.valid%20%7C%20json%20%7D%7D%3C%2Fdiv%3E%0A`
    },
    'fi-confirm': {
        title: 'Fi Confirm Example',
        component: FiConfirmExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%2F%2F%20Vendor%0Aimport%20%7B%20FieldInteractionApi%2C%20FormUtils%2C%20TextBoxControl%20%7D%20from%20'novo-elements'%3B%0A%0A%2F**%0A%20*%20%40title%20Fi%20Confirm%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'fi-confirm-example'%2C%0A%20%20%20%20templateUrl%3A%20'fi-confirm-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'fi-confirm-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20FiConfirmExample%20%7B%0A%20%20public%20form%3A%20any%3B%0A%20%20public%20controls%3A%20any%20%3D%20%7B%7D%3B%0A%0A%20%20constructor(private%20formUtils%3A%20FormUtils)%20%7B%0A%20%20%20%20const%20confirmFunction%20%3D%20(API%3A%20FieldInteractionApi)%20%3D%3E%20%7B%0A%20%20%20%20%20%20console.log('%5BFieldInteractionDemo%5D%20-%20confirmFunction')%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%20%20%20%20if%20(API.getActiveKey()%20%3D%3D%3D%20'confirm1')%20%7B%0A%20%20%20%20%20%20%20%20API.confirmChanges(API.getActiveKey())%3B%0A%20%20%20%20%20%20%7D%20else%20%7B%0A%20%20%20%20%20%20%20%20API.confirmChanges(API.getActiveKey()%2C%20'This%20is%20VERY%20serious!')%3B%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%3B%0A%0A%20%20%20%20%2F%2F%20Confirm%20Interactions%0A%20%20%20%20this.controls.confirm1Control%20%3D%20new%20TextBoxControl(%7B%0A%20%20%20%20%20%20type%3A%20'text'%2C%0A%20%20%20%20%20%20key%3A%20'confirm1'%2C%0A%20%20%20%20%20%20value%3A%20'Hello!'%2C%0A%20%20%20%20%20%20label%3A%20'Prompt!'%2C%0A%20%20%20%20%20%20description%3A%20'As%20you%20take%20focus%20out%20of%20this%20field%20you%20will%20be%20prompted%20for%20changes!'%2C%0A%20%20%20%20%20%20interactions%3A%20%5B%7B%20event%3A%20'change'%2C%20script%3A%20confirmFunction%20%7D%5D%2C%0A%20%20%20%20%7D)%3B%0A%20%20%20%20this.controls.confirm2Control%20%3D%20new%20TextBoxControl(%7B%0A%20%20%20%20%20%20type%3A%20'text'%2C%0A%20%20%20%20%20%20key%3A%20'confirm2'%2C%0A%20%20%20%20%20%20value%3A%20'Another!'%2C%0A%20%20%20%20%20%20label%3A%20'Custom%20Promp!'%2C%0A%20%20%20%20%20%20description%3A%20'You%20can%20provide%20a%20custom%20message!'%2C%0A%20%20%20%20%20%20interactions%3A%20%5B%7B%20event%3A%20'change'%2C%20script%3A%20confirmFunction%20%7D%5D%2C%0A%20%20%20%20%7D)%3B%0A%20%20%20%20this.form%20%3D%20formUtils.toFormGroup(%5Bthis.controls.confirm1Control%2C%20this.controls.confirm2Control%5D)%3B%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cnovo-form%20%5Bform%5D%3D%22form%22%20layout%3D%22vertical%22%3E%0A%20%20%20%20%3Cdiv%20class%3D%22novo-form-row%22%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-control%20%5Bform%5D%3D%22form%22%20%5Bcontrol%5D%3D%22controls.confirm1Control%22%3E%3C%2Fnovo-control%3E%0A%20%20%20%20%3C%2Fdiv%3E%0A%20%20%20%20%3Cdiv%20class%3D%22novo-form-row%22%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-control%20%5Bform%5D%3D%22form%22%20%5Bcontrol%5D%3D%22controls.confirm2Control%22%3E%3C%2Fnovo-control%3E%0A%20%20%20%20%3C%2Fdiv%3E%0A%3C%2Fnovo-form%3E%0A%3Cdiv%20class%3D%22final-value%22%3EForm%20Value%20-%20%7B%7B%20form.value%20%7C%20json%20%7D%7D%3C%2Fdiv%3E%0A%3Cdiv%20class%3D%22final-value%22%3EForm%20Dirty%20-%20%7B%7B%20form.dirty%20%7C%20json%20%7D%7D%3C%2Fdiv%3E%0A%3Cdiv%20class%3D%22final-value%22%3EIs%20Form%20Valid%3F%20-%20%7B%7B%20form.valid%20%7C%20json%20%7D%7D%3C%2Fdiv%3E%0A`
    },
    'fi-calculation': {
        title: 'Fi Calculation Example',
        component: FiCalculationExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%2F%2F%20Vendor%0Aimport%20%7B%20DateTimeControl%2C%20FieldInteractionApi%2C%20FormUtils%2C%20TextBoxControl%20%7D%20from%20'novo-elements'%3B%0A%0A%2F**%0A%20*%20%40title%20Fi%20Calculation%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'fi-calculation-example'%2C%0A%20%20%20%20templateUrl%3A%20'fi-calculation-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'fi-calculation-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20FiCalculationExample%20%7B%0A%20%20public%20form%3A%20any%3B%0A%20%20public%20controls%3A%20any%20%3D%20%7B%7D%3B%0A%20%20public%20snippet%3A%20any%20%3D%20%7B%7D%3B%0A%0A%20%20constructor(private%20formUtils%3A%20FormUtils)%20%7B%0A%20%20%20%20const%20calculationFunction%20%3D%20(API%3A%20FieldInteractionApi)%20%3D%3E%20%7B%0A%20%20%20%20%20%20console.log('%5BFieldInteractionDemo%5D%20-%20calculationFunction')%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%20%20%20%20const%20a%20%3D%20Number(API.getValue('a'))%3B%0A%20%20%20%20%20%20const%20b%20%3D%20Number(API.getValue('b'))%3B%0A%20%20%20%20%20%20API.setValue('sum'%2C%20a%20%2B%20b)%3B%0A%20%20%20%20%20%20API.setValue('date'%2C%20new%20Date())%3B%0A%20%20%20%20%7D%3B%0A%0A%20%20%20%20%2F%2F%20Calculation%20Field%20Interactions%0A%20%20%20%20this.controls.aControl%20%3D%20new%20TextBoxControl(%7B%0A%20%20%20%20%20%20type%3A%20'number'%2C%0A%20%20%20%20%20%20key%3A%20'a'%2C%0A%20%20%20%20%20%20label%3A%20'A'%2C%0A%20%20%20%20%20%20value%3A%201%2C%0A%20%20%20%20%20%20interactions%3A%20%5B%7B%20event%3A%20'change'%2C%20invokeOnInit%3A%20false%2C%20script%3A%20calculationFunction%20%7D%5D%2C%0A%20%20%20%20%7D)%3B%0A%20%20%20%20this.controls.bControl%20%3D%20new%20TextBoxControl(%7B%0A%20%20%20%20%20%20type%3A%20'number'%2C%0A%20%20%20%20%20%20key%3A%20'b'%2C%0A%20%20%20%20%20%20label%3A%20'B'%2C%0A%20%20%20%20%20%20value%3A%201%2C%0A%20%20%20%20%20%20interactions%3A%20%5B%7B%20event%3A%20'change'%2C%20invokeOnInit%3A%20false%2C%20script%3A%20calculationFunction%20%7D%5D%2C%0A%20%20%20%20%7D)%3B%0A%20%20%20%20this.controls.sumControl%20%3D%20new%20TextBoxControl(%7B%0A%20%20%20%20%20%20type%3A%20'number'%2C%0A%20%20%20%20%20%20key%3A%20'sum'%2C%0A%20%20%20%20%20%20label%3A%20'Sum'%2C%0A%20%20%20%20%20%20description%3A%20'I%20am%20automatically%20set%20when%20you%20type%20in%20the%20boxes%20above%20me!'%2C%0A%20%20%20%20%20%20readOnly%3A%20true%2C%0A%20%20%20%20%7D)%3B%0A%20%20%20%20this.controls.dateModifiedControl%20%3D%20new%20DateTimeControl(%7B%0A%20%20%20%20%20%20key%3A%20'date'%2C%0A%20%20%20%20%20%20label%3A%20'Date%20Last%20Modified'%2C%0A%20%20%20%20%20%20value%3A%20new%20Date()%2C%0A%20%20%20%20%7D)%3B%0A%20%20%20%20this.form%20%3D%20formUtils.toFormGroup(%5B%0A%20%20%20%20%20%20this.controls.aControl%2C%0A%20%20%20%20%20%20this.controls.bControl%2C%0A%20%20%20%20%20%20this.controls.sumControl%2C%0A%20%20%20%20%20%20this.controls.dateModifiedControl%2C%0A%20%20%20%20%5D)%3B%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cnovo-form%20%5Bform%5D%3D%22form%22%20layout%3D%22vertical%22%3E%0A%20%20%20%20%3Cdiv%20class%3D%22novo-form-row%22%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-control%20%5Bform%5D%3D%22form%22%20%5Bcontrol%5D%3D%22controls.aControl%22%3E%3C%2Fnovo-control%3E%0A%20%20%20%20%3C%2Fdiv%3E%0A%20%20%20%20%3Cdiv%20class%3D%22novo-form-row%22%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-control%20%5Bform%5D%3D%22form%22%20%5Bcontrol%5D%3D%22controls.bControl%22%3E%3C%2Fnovo-control%3E%0A%20%20%20%20%3C%2Fdiv%3E%0A%20%20%20%20%3Cdiv%20class%3D%22novo-form-row%22%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-control%20%5Bform%5D%3D%22form%22%20%5Bcontrol%5D%3D%22controls.sumControl%22%3E%3C%2Fnovo-control%3E%0A%20%20%20%20%3C%2Fdiv%3E%0A%20%20%20%20%3Cdiv%20class%3D%22novo-form-row%22%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-control%20%5Bform%5D%3D%22form%22%20%5Bcontrol%5D%3D%22controls.dateModifiedControl%22%3E%3C%2Fnovo-control%3E%0A%20%20%20%20%3C%2Fdiv%3E%0A%3C%2Fnovo-form%3E%0A%3Cdiv%20class%3D%22final-value%22%3EForm%20Value%20-%20%7B%7B%20form.value%20%7C%20json%20%7D%7D%3C%2Fdiv%3E%0A%3Cdiv%20class%3D%22final-value%22%3E%0A%20%20%20%20Form%20Dirty%20-%20%7B%7B%20form.dirty%20%7C%20json%20%7D%7D%3C%2Fdiv%3E%0A%3Cdiv%20class%3D%22final-value%22%3EIs%20Form%20Valid%3F%20-%20%7B%7B%20form.valid%20%7C%20json%20%7D%7D%3C%2Fdiv%3E%0A`
    },
    'fi-async': {
        title: 'Fi Async Example',
        component: FiAsyncExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%2F%2F%20Vendor%0Aimport%20%7B%20FieldInteractionApi%2C%20FormUtils%2C%20TextBoxControl%20%7D%20from%20'novo-elements'%3B%0A%0A%2F**%0A%20*%20%40title%20Fi%20Async%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'fi-async-example'%2C%0A%20%20%20%20templateUrl%3A%20'fi-async-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'fi-async-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20FiAsyncExample%20%7B%0A%20%20public%20form%3A%20any%3B%0A%20%20public%20controls%3A%20any%20%3D%20%7B%7D%3B%0A%0A%20%20constructor(private%20formUtils%3A%20FormUtils)%20%7B%0A%20%20%20%20const%20asyncFunction%20%3D%20(API%3A%20FieldInteractionApi)%20%3D%3E%20%7B%0A%20%20%20%20%20%20console.log('%5BFieldInteractionDemo%5D%20-%20asyncFunction')%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%20%20%20%20if%20(API.getActiveKey()%20%3D%3D%3D%20'async1')%20%7B%0A%20%20%20%20%20%20%20%20API.setLoading(API.getActiveKey()%2C%20true)%3B%0A%20%20%20%20%20%20%20%20setTimeout(function%20()%20%7B%0A%20%20%20%20%20%20%20%20%20%20API.setLoading(API.getActiveKey()%2C%20false)%3B%0A%20%20%20%20%20%20%20%20%7D%2C%203000)%3B%0A%20%20%20%20%20%20%7D%20else%20%7B%0A%20%20%20%20%20%20%20%20API.setLoading(API.getActiveKey()%2C%20true)%3B%0A%20%20%20%20%20%20%20%20setTimeout(function%20()%20%7B%0A%20%20%20%20%20%20%20%20%20%20API.setLoading(API.getActiveKey()%2C%20false)%3B%0A%20%20%20%20%20%20%20%20%7D%2C%2015000)%3B%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%3B%0A%0A%20%20%20%20%2F%2F%20Async%20Interactions%0A%20%20%20%20this.controls.async1Control%20%3D%20new%20TextBoxControl(%7B%0A%20%20%20%20%20%20type%3A%20'text'%2C%0A%20%20%20%20%20%20key%3A%20'async1'%2C%0A%20%20%20%20%20%20value%3A%205%2C%0A%20%20%20%20%20%20label%3A%20'Async%20Validation'%2C%0A%20%20%20%20%20%20description%3A%20'As%20you%20finish%20typing%2C%20the%20async%20check%20will%20mark%20the%20form%20as%20invalid'%2C%0A%20%20%20%20%20%20interactions%3A%20%5B%7B%20event%3A%20'change'%2C%20script%3A%20asyncFunction%20%7D%5D%2C%0A%20%20%20%20%7D)%3B%0A%20%20%20%20this.controls.async2Control%20%3D%20new%20TextBoxControl(%7B%0A%20%20%20%20%20%20type%3A%20'text'%2C%0A%20%20%20%20%20%20key%3A%20'async2'%2C%0A%20%20%20%20%20%20value%3A%205%2C%0A%20%20%20%20%20%20label%3A%20'Async%20Validation%20(takes%20too%20long)'%2C%0A%20%20%20%20%20%20description%3A%20'This%20one%20will%20take%20too%20long%20and%20trigger%20the%20default%20timeout%20(10s)'%2C%0A%20%20%20%20%20%20interactions%3A%20%5B%7B%20event%3A%20'change'%2C%20script%3A%20asyncFunction%20%7D%5D%2C%0A%20%20%20%20%7D)%3B%0A%20%20%20%20this.form%20%3D%20formUtils.toFormGroup(%5Bthis.controls.async1Control%2C%20this.controls.async2Control%5D)%3B%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cnovo-form%20%5Bform%5D%3D%22form%22%20layout%3D%22vertical%22%3E%0A%20%20%20%20%3Cdiv%20class%3D%22novo-form-row%22%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-control%20%5Bform%5D%3D%22form%22%20%5Bcontrol%5D%3D%22controls.async1Control%22%3E%3C%2Fnovo-control%3E%0A%20%20%20%20%3C%2Fdiv%3E%0A%20%20%20%20%3Cdiv%20class%3D%22novo-form-row%22%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-control%20%5Bform%5D%3D%22form%22%20%5Bcontrol%5D%3D%22controls.async2Control%22%3E%3C%2Fnovo-control%3E%0A%20%20%20%20%3C%2Fdiv%3E%0A%3C%2Fnovo-form%3E%0A%3Cdiv%20class%3D%22final-value%22%3EForm%20Value%20-%20%7B%7B%20form.value%20%7C%20json%20%7D%7D%3C%2Fdiv%3E%0A%3Cdiv%20class%3D%22final-value%22%3EForm%20Dirty%20-%20%7B%7B%20form.dirty%20%7C%20json%20%7D%7D%3C%2Fdiv%3E%0A%3Cdiv%20class%3D%22final-value%22%3EIs%20Form%20Valid%3F%20-%20%7B%7B%20form.valid%20%7C%20json%20%7D%7D%3C%2Fdiv%3E%0A`
    },
    'fi-adding-removing': {
        title: 'Fi Adding Removing Example',
        component: FiAddingRemovingExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%2F%2F%20Vendor%0Aimport%20%7B%20FieldInteractionApi%2C%20FormUtils%20%7D%20from%20'novo-elements'%3B%0Aimport%20%7B%20MockMetaHeaders%20%7D%20from%20'..%2FMockMeta'%3B%0A%0A%2F**%0A%20*%20%40title%20Fi%20Adding%20Removing%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'fi-adding-removing-example'%2C%0A%20%20%20%20templateUrl%3A%20'fi-adding-removing-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'fi-adding-removing-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20FiAddingRemovingExample%20%7B%0A%20%20public%20form%3A%20any%3B%0A%20%20public%20controls%3A%20any%20%3D%20%5B%5D%3B%0A%0A%20%20constructor(private%20formUtils%3A%20FormUtils)%20%7B%0A%20%20%20%20const%20addingRemovingFunction%20%3D%20(API%3A%20FieldInteractionApi)%20%3D%3E%20%7B%0A%20%20%20%20%20%20console.log('%5BFieldInteractionDemo%5D%20-%20addingRemovingFunction')%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%20%20%20%20%2F%2F%20Control%20above%20field%0A%20%20%20%20%20%20API.addControl(%0A%20%20%20%20%20%20%20%20'cat'%2C%0A%20%20%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20key%3A%20'fieldAbove'%2C%0A%20%20%20%20%20%20%20%20%20%20type%3A%20'text'%2C%0A%20%20%20%20%20%20%20%20%20%20label%3A%20'Added%20Above%20Cat'%2C%0A%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20FieldInteractionApi.FIELD_POSITIONS.ABOVE_FIELD%2C%0A%20%20%20%20%20%20%20%20'DEFAULT'%2C%0A%20%20%20%20%20%20)%3B%0A%20%20%20%20%20%20%2F%2F%20Control%20below%20field%0A%20%20%20%20%20%20API.addControl(%0A%20%20%20%20%20%20%20%20'name'%2C%0A%20%20%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20key%3A%20'fieldBelow'%2C%0A%20%20%20%20%20%20%20%20%20%20type%3A%20'text'%2C%0A%20%20%20%20%20%20%20%20%20%20label%3A%20'Added%20Below%20Name'%2C%0A%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20FieldInteractionApi.FIELD_POSITIONS.BELOW_FIELD%2C%0A%20%20%20%20%20%20%20%20'%3A)'%2C%0A%20%20%20%20%20%20)%3B%0A%20%20%20%20%20%20%2F%2F%20Control%20at%20the%20top%20of%20the%20form%0A%20%20%20%20%20%20API.addControl(%0A%20%20%20%20%20%20%20%20'name'%2C%0A%20%20%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20key%3A%20'top'%2C%0A%20%20%20%20%20%20%20%20%20%20type%3A%20'text'%2C%0A%20%20%20%20%20%20%20%20%20%20label%3A%20'Added%20To%20The%20Very%20Top'%2C%0A%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20FieldInteractionApi.FIELD_POSITIONS.TOP_OF_FORM%2C%0A%20%20%20%20%20%20%20%20'HIGHEST'%2C%0A%20%20%20%20%20%20)%3B%0A%20%20%20%20%20%20%2F%2F%20Control%20at%20the%20bottom%20of%20the%20form%0A%20%20%20%20%20%20API.addControl(%0A%20%20%20%20%20%20%20%20'name'%2C%0A%20%20%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20key%3A%20'bottom'%2C%0A%20%20%20%20%20%20%20%20%20%20type%3A%20'text'%2C%0A%20%20%20%20%20%20%20%20%20%20label%3A%20'Added%20To%20The%20Very%20Bottom'%2C%0A%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20FieldInteractionApi.FIELD_POSITIONS.BOTTOM_OF_FORM%2C%0A%20%20%20%20%20%20%20%20'LOWEST'%2C%0A%20%20%20%20%20%20)%3B%0A%20%20%20%20%20%20%2F%2F%20Remove%20the%20jersey%20color%20field%0A%20%20%20%20%20%20API.removeControl('jersey-color')%3B%0A%20%20%20%20%7D%3B%0A%0A%20%20%20%20const%20removeAddOnChangeFunction%20%3D%20(API%3A%20FieldInteractionApi)%20%3D%3E%20%7B%0A%20%20%20%20%20%20console.log('%5BFieldInteractionDemo%5D%20-%20removeAddOnChangeFunction')%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%20%20%20%20%2F%2F%20Select%20control%20with%20a%20field%20interaction%20on%20change%20event%0A%20%20%20%20%20%20const%20currentValue%20%3D%20API.getActiveValue()%3B%0A%20%20%20%20%20%20if%20(currentValue%20%3D%3D%3D%20'Yes')%20%7B%0A%20%20%20%20%20%20%20%20API.removeControl('to-be-removed')%3B%0A%20%20%20%20%20%20%7D%20else%20%7B%0A%20%20%20%20%20%20%20%20API.addControl(%0A%20%20%20%20%20%20%20%20%20%20'remove-select'%2C%0A%20%20%20%20%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20key%3A%20'to-be-removed'%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20name%3A%20'to-be-removed'%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20type%3A%20'text'%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20label%3A%20'This%20field%20will%20be%20removed'%2C%0A%20%20%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20%20%20FieldInteractionApi.FIELD_POSITIONS.BELOW_FIELD%2C%0A%20%20%20%20%20%20%20%20)%3B%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%3B%0A%0A%20%20%20%20%2F%2F%20Adding%20%2F%20Removing%20Interactions%0A%20%20%20%20this.controls%20%3D%20formUtils.toFieldSets(MockMetaHeaders%2C%20'%24%20USD'%2C%20%7B%7D%2C%20%7B%20token%3A%20'TOKEN'%2C%20military%3A%20true%20%7D)%3B%0A%20%20%20%20this.controls%5B2%5D.controls%5B0%5D.interactions%20%3D%20%5B%7B%20event%3A%20'change'%2C%20script%3A%20removeAddOnChangeFunction%20%7D%5D%3B%0A%20%20%20%20this.controls%5B0%5D.controls%5B0%5D.interactions%20%3D%20%5B%7B%20event%3A%20'init'%2C%20script%3A%20addingRemovingFunction%20%7D%5D%3B%0A%20%20%20%20this.form%20%3D%20formUtils.toFormGroupFromFieldset(this.controls)%3B%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cnovo-dynamic-form%20%5Bfieldsets%5D%3D%22controls%22%20%5B(form)%5D%3D%22form%22%20layout%3D%22vertical%22%3E%3C%2Fnovo-dynamic-form%3E%0A%3Cdiv%20class%3D%22final-value%22%3EForm%20Value%20-%20%7B%7B%20form.value%20%7C%20json%20%7D%7D%3C%2Fdiv%3E%0A%3Cdiv%20class%3D%22final-value%22%3EForm%20Dirty%20-%20%7B%7B%20form.dirty%20%7C%20json%20%7D%7D%3C%2Fdiv%3E%0A%3Cdiv%20class%3D%22final-value%22%3EIs%20Form%20Valid%3F%20-%20%7B%7B%20form.valid%20%7C%20json%20%7D%7D%3C%2Fdiv%3E%0A`
    },
    'drag-drop': {
        title: 'Drag and Drop Example',
        component: DragDropExample,
        tsSource: `import%20%7B%20Component%2C%20OnChanges%2C%20SimpleChanges%20%7D%20from%20'%40angular%2Fcore'%3B%0Aimport%20%7B%20NovoDragFinishEvent%20%7D%20from%20'novo-elements%2Felements%2Fdrag-drop'%3B%0A%0Ainterface%20DemoButtonObject%20%7B%0A%20%20name%3A%20string%3B%0A%20%20headerText%3A%20string%3B%0A%20%20bgClass%3A%20string%3B%0A%7D%0A%0A%2F**%0A%20*%20%40title%20Drag%20and%20Drop%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'drag-drop-example'%2C%0A%20%20%20%20templateUrl%3A%20'drag-drop-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'drag-drop-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20DragDropExample%20implements%20OnChanges%20%7B%0A%20%20objects%3A%20DemoButtonObject%5B%5D%20%3D%20%5B%0A%20%20%20%20%7B%20name%3A%20'Object%201'%2C%20headerText%3A%20'Item%201'%2C%20bgClass%3A%20'bgc-grapefruit'%20%7D%2C%0A%20%20%20%20%7B%20name%3A%20'Object%202'%2C%20headerText%3A%20'Item%202'%2C%20bgClass%3A%20'bgc-bittersweet'%20%7D%2C%0A%20%20%20%20%7B%20name%3A%20'Object%203'%2C%20headerText%3A%20'Item%203'%2C%20bgClass%3A%20'bgc-sunflower'%20%7D%2C%0A%20%20%20%20%7B%20name%3A%20'Object%204'%2C%20headerText%3A%20'Item%204'%2C%20bgClass%3A%20'bgc-grass'%20%7D%2C%0A%20%20%20%20%7B%20name%3A%20'Object%205'%2C%20headerText%3A%20'Item%205'%2C%20bgClass%3A%20'bgc-mint'%20%7D%2C%0A%20%20%20%20%7B%20name%3A%20'Object%206'%2C%20headerText%3A%20'Item%206'%2C%20bgClass%3A%20'bgc-aqua'%20%7D%2C%0A%20%20%20%20%7B%20name%3A%20'Object%207'%2C%20headerText%3A%20'Item%207'%2C%20bgClass%3A%20'bgc-ocean'%20%7D%0A%20%20%5D%3B%0A%0A%20%20objects2%3A%20DemoButtonObject%5B%5D%20%3D%20%5B%0A%20%20%20%20%7B%20name%3A%20'Object%2011'%2C%20headerText%3A%20'Item%2011'%2C%20bgClass%3A%20'bgc-grapefruit'%20%7D%2C%0A%20%20%20%20%7B%20name%3A%20'Object%2012'%2C%20headerText%3A%20'Item%2012'%2C%20bgClass%3A%20'bgc-bittersweet'%20%7D%2C%0A%20%20%20%20%7B%20name%3A%20'Object%2013'%2C%20headerText%3A%20'Item%2013'%2C%20bgClass%3A%20'bgc-sunflower'%20%7D%2C%0A%20%20%20%20%7B%20name%3A%20'Object%2014'%2C%20headerText%3A%20'Item%2014'%2C%20bgClass%3A%20'bgc-grass'%20%7D%2C%0A%20%20%20%20%7B%20name%3A%20'Object%2015'%2C%20headerText%3A%20'Item%2015'%2C%20bgClass%3A%20'bgc-mint'%20%7D%2C%0A%20%20%20%20%7B%20name%3A%20'Object%2016'%2C%20headerText%3A%20'Item%2016'%2C%20bgClass%3A%20'bgc-aqua'%20%7D%2C%0A%20%20%20%20%7B%20name%3A%20'Object%2017'%2C%20headerText%3A%20'Item%2017'%2C%20bgClass%3A%20'bgc-ocean'%20%7D%0A%20%20%5D%3B%0A%0A%20%20ngOnChanges(changes%3A%20SimpleChanges)%3A%20void%20%7B%0A%20%20%20%20%20%20console.log('box%20processed%20changes'%2C%20changes)%3B%0A%20%20%7D%0A%0A%20%20objectMoved%3F%3A%20DemoButtonObject%3B%0A%0A%20%20dragFinished(event%3A%20NovoDragFinishEvent%3CDemoButtonObject%3E)%20%7B%0A%20%20%20%20this.objectMoved%20%3D%20event.draggedItem%3B%0A%20%20%20%20this.objects%20%3D%20event.allItems%3B%0A%20%20%7D%0A%0A%20%20dragFinished2(event%3A%20NovoDragFinishEvent%3CDemoButtonObject%3E)%20%7B%0A%20%20%20%20this.objectMoved%20%3D%20event.draggedItem%3B%0A%20%20%20%20this.objects2%20%3D%20event.allItems%3B%0A%20%20%7D%0A%0A%20%20addObject2()%3A%20void%20%7B%0A%20%20%20%20this.objects2.push(%7B%20name%3A%20%60Object%20%24%7Bthis.objects.length%7D%60%2C%20headerText%3A%20%60Item%20%24%7Bthis.objects2.length%20%2B%2011%7D%60%2C%20bgClass%3A%20'bgc-lavender'%7D)%0A%20%20%7D%0A%0A%20%20removeObject(item%3A%20DemoButtonObject)%3A%20void%20%7B%0A%20%20%20%20this.objects.splice(this.objects.findIndex(a%20%3D%3E%20a%20%3D%3D%3D%20item)%2C%201)%3B%0A%20%20%7D%0A%0A%20%20removeObject2(item%3A%20DemoButtonObject)%3A%20void%20%7B%0A%20%20%20%20this.objects2.splice(this.objects2.findIndex(a%20%3D%3E%20a%20%3D%3D%3D%20item)%2C%201)%3B%0A%20%20%7D%0A%0A%20%20get%20objectsAsString()%3A%20string%20%7B%0A%20%20%20%20return%20this.objects.map(obj%20%3D%3E%20obj.name).join('%2C%20')%3B%0A%20%20%7D%0A%7D%0A`,
        cssSource: `.drag-box%20%7B%0A%20%20%20%20width%3A%20500px%3B%0A%20%20%20%20display%3A%20block%3B%0A%7D%0A.demo-drag-item%20%7B%0A%20%20%20%20display%3A%20inline-flex%3B%0A%20%20%20%20text-align%3A%20center%3B%0A%20%20%20%20margin%3A%2010px%3B%0A%20%20%20%20width%3A%20122px%3B%0A%20%20%20%20position%3A%20relative%3B%0A%7D`,
        htmlSource: `%0A%3Cp%3EClick%20and%20drag%20these%20buttons%20to%20place%20them%20in%20a%20new%20position.%20When%20rearranged%2C%20they%20emit%20an%20event%20to%20demonstrate%20the%20new%20order.%3C%2Fp%3E%0A%3Cdiv%20%5BnovoDragDrop%5D%3D%22objects%22%20(novoDragDropFinish)%3D%22dragFinished(%24event)%22%20class%3D%22drag-box%22%3E%0A%20%20%20%20%3Cnovo-card%20*ngFor%3D%22let%20item%20of%20objects%22%0A%20%20%20%20%20%20%20%20class%3D%22demo-drag-item%22%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-card-header%20class%3D%22novo-drag-target%20%7B%7Bitem.bgClass%7D%7D%22%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%3Cnovo-title%3E%7B%7Bitem.headerText%7D%7D%3C%2Fnovo-title%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%3Cnovo-action%20(click)%3D%22removeObject(item)%22%20icon%3D%22close%22%20tooltip%3D%22Close%20Item%22%3E%3C%2Fnovo-action%3E%0A%20%20%20%20%20%20%20%20%3C%2Fnovo-card-header%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-card-content%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%3Cnovo-caption%20novoPreventDrag%3E%7B%7Bitem.name%7D%7D%20(Non-draggable%20area)%3C%2Fnovo-caption%3E%0A%20%20%20%20%20%20%20%20%3C%2Fnovo-card-content%3E%0A%20%20%20%20%3C%2Fnovo-card%3E%0A%3C%2Fdiv%3E%0A%0A%3Cp%20*ngIf%3D%22objectMoved%22%3E%7B%7BobjectMoved.name%7D%7D%20moved.%3C%2Fp%3E%0A%3Cp%3ECurrent%20object%20order%20is%3A%20%7B%7BobjectsAsString%7D%7D%3C%2Fp%3E%0A%0A%3Ch2%3EDynamic%20list%3C%2Fh2%3E%0A%3Cnovo-button%20(click)%3D%22addObject2()%22%3EAdd%20another%20object%20to%20list%3C%2Fnovo-button%3E%0A%3Cdiv%20%5BnovoDragDrop%5D%3D%22objects2%22%20(novoDragDropFinish)%3D%22dragFinished2(%24event)%22%20class%3D%22drag-box%22%3E%0A%20%20%20%20%3Cnovo-card%20*ngFor%3D%22let%20item%20of%20objects2%22%0A%20%20%20%20%20%20%20%20class%3D%22demo-drag-item%22%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-card-header%20class%3D%22novo-drag-target%20%7B%7Bitem.bgClass%7D%7D%22%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%3Cnovo-title%3E%7B%7Bitem.headerText%7D%7D%3C%2Fnovo-title%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%3Cnovo-action%20(click)%3D%22removeObject2(item)%22%20icon%3D%22close%22%20tooltip%3D%22Close%20Item%22%3E%3C%2Fnovo-action%3E%0A%20%20%20%20%20%20%20%20%3C%2Fnovo-card-header%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-card-content%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%3Cnovo-caption%20novoPreventDrag%3E%7B%7Bitem.name%7D%7D%20(Non-draggable%20area)%3C%2Fnovo-caption%3E%0A%20%20%20%20%20%20%20%20%3C%2Fnovo-card-content%3E%0A%20%20%20%20%3C%2Fnovo-card%3E%0A%3C%2Fdiv%3E`
    },
    'basic-code': {
        title: 'Basic Code Editor Example',
        component: BasicCodeExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Basic%20Code%20Editor%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'basic-code-example'%2C%0A%20%20%20%20templateUrl%3A%20'basic-code-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'basic-code-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20BasicCodeExample%20%7B%0A%0A%20%20value%20%3D%20%60function%20myFunction()%20%7B%0A%20%20console.log('Hello%20world!')%3B%0A%7D%60%3B%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cnovo-code-editor%20%5B(ngModel)%5D%3D%22value%22%3E%3C%2Fnovo-code-editor%3E%0A`
    },
    'basic-ace': {
        title: 'Basic Ace Editor Example',
        component: BasicAceExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Basic%20Ace%20Editor%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'basic-ace-example'%2C%0A%20%20%20%20templateUrl%3A%20'basic-ace-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'basic-ace-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20BasicAceExample%20%7B%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cnovo-ace-editor%3E%3C%2Fnovo-ace-editor%3E%0A`
    },
    'record-header': {
        title: 'Basic Header Example',
        component: RecordHeaderExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0Aimport%20%7B%20NovoToastService%20%7D%20from%20'novo-elements'%3B%0A%0Aconst%20HEADER_THEMES%20%3D%20%5B'company'%2C%20'job'%2C%20'candidate'%2C%20'contact'%2C%20'opportunity'%2C%20'lead'%2C%20'light'%2C%20'white'%5D%3B%0Aconst%20HEADER_ICONS%20%3D%20%5B'company'%2C%20'job'%2C%20'candidate'%2C%20'person'%2C%20'opportunity'%2C%20'lead'%2C%20'bolt'%2C%20'shield'%5D%3B%0A%0A%2F**%0A%20*%20%40title%20Basic%20Header%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'record-header-example'%2C%0A%20%20%20%20templateUrl%3A%20'record-header-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'record-header-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20RecordHeaderExample%20%7B%0A%20%20public%20theme%3A%20string%20%3D%20'company'%3B%0A%20%20public%20icon%3A%20string%20%3D%20'company'%3B%0A%20%20public%20record%3A%20any%3B%0A%20%20public%20values%3A%20any%5B%5D%3B%0A%20%20public%20tabs%3A%20string%5B%5D%3B%0A%20%20private%20options%3A%20any%20%3D%20%7B%0A%20%20%20%20title%3A%20'Title'%2C%0A%20%20%20%20message%3A%20'Some%20Message...'%2C%0A%20%20%20%20theme%3A%20'ocean'%2C%0A%20%20%20%20icon%3A%20'clipboard'%2C%0A%20%20%20%20position%3A%20'growlTopRight'%2C%0A%20%20%7D%3B%0A%20%20private%20themeIndex%3A%20number%20%3D%200%3B%0A%0A%20%20constructor(private%20toaster%3A%20NovoToastService)%20%7B%0A%20%20%20%20this.refresh()%3B%0A%20%20%7D%0A%0A%20%20refresh()%20%7B%0A%20%20%20%20this.values%20%3D%20undefined%3B%0A%20%20%20%20this.tabs%20%3D%20undefined%3B%0A%20%20%20%20this.record%20%3D%20undefined%3B%0A%0A%20%20%20%20setTimeout(()%20%3D%3E%20%7B%0A%20%20%20%20%20%20this.values%20%3D%20%5B%0A%20%20%20%20%20%20%20%20%7B%20label%3A%20'Status'%2C%20data%3A%20'Open'%20%7D%2C%0A%20%20%20%20%20%20%20%20%7B%20label%3A%20'Phone'%2C%20data%3A%20'555-555-5555'%20%7D%2C%0A%20%20%20%20%20%20%20%20%7B%20label%3A%20'Address'%2C%20data%3A%20'Boston%2C%20MA'%20%7D%2C%0A%20%20%20%20%20%20%5D%3B%0A%20%20%20%20%20%20this.tabs%20%3D%20%5B'Overview'%2C%20'Edit'%2C%20'Activity'%5D%3B%0A%20%20%20%20%20%20this.record%20%3D%20%7B%0A%20%20%20%20%20%20%20%20id%3A%20101%2C%0A%20%20%20%20%20%20%20%20name%3A%20'Acme%20Corporation%2C%20LLC'%2C%0A%20%20%20%20%20%20%7D%3B%0A%20%20%20%20%7D%2C%205000)%3B%0A%20%20%7D%0A%0A%20%20changeTheme()%20%7B%0A%20%20%20%20this.themeIndex%20%3D%20this.themeIndex%20%3D%3D%3D%20HEADER_THEMES.length%20-%201%20%3F%200%20%3A%20this.themeIndex%20%2B%201%3B%0A%20%20%20%20this.theme%20%3D%20HEADER_THEMES%5Bthis.themeIndex%5D%3B%0A%20%20%20%20this.icon%20%3D%20HEADER_ICONS%5Bthis.themeIndex%5D%3B%0A%20%20%7D%0A%0A%20%20catchEv(type%2C%20ev)%20%7B%0A%20%20%20%20%2F%2F%20Set%20toast%20options%0A%20%20%20%20this.options%20%3D%20%7B%0A%20%20%20%20%20%20title%3A%20%60%24%7Btype%7D%60%2C%0A%20%20%20%20%20%20message%3A%20%60%24%7Bev%7D%20fired...%60%2C%0A%20%20%20%20%20%20theme%3A%20'ocean'%2C%0A%20%20%20%20%20%20icon%3A%20%60%24%7Btype%7D%60%2C%0A%20%20%20%20%20%20position%3A%20'growlTopRight'%2C%0A%20%20%20%20%7D%3B%0A%0A%20%20%20%20%2F%2F%20Fire%20toast%0A%20%20%20%20this.toaster.alert(this.options)%3B%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cheader%20accent%3D%22company%22%3E%0A%20%20%3Cnovo-icon%3Ecompany%3C%2Fnovo-icon%3E%0A%20%20%3Ch1%20novo-title%3E%0A%20%20%20%20%3Cng-container%20%5BisLoading%5D%3D%22record%22%3E%0A%20%20%20%20%20%20%3Cspan%20*skeleton%3E%3C%2Fspan%3E%0A%20%20%20%20%20%20%3Cspan%20*loaded%3E%7B%7Brecord.id%7D%7D%20%7C%20%7B%7Brecord.name%7D%7D%3C%2Fspan%3E%0A%20%20%20%20%3C%2Fng-container%3E%0A%20%20%3C%2Fh1%3E%0A%20%20%3Cnovo-action%20icon%3D%22convert%22%20tooltip%3D%22Change%20Theme%22%20(click)%3D%22changeTheme()%22%3E%3C%2Fnovo-action%3E%0A%20%20%3Cnovo-action%20icon%3D%22refresh%22%20tooltip%3D%22Refresh%22%20(click)%3D%22refresh()%22%3E%3C%2Fnovo-action%3E%0A%20%20%3Cnovo-action%20icon%3D%22times%22%20tooltip%3D%22Show%20Popup%22%20(click)%3D%22catchEv('close'%2C%20%24event)%22%3E%3C%2Fnovo-action%3E%0A%20%20%3Csection%3E%0A%20%20%20%20%3Cbutton%20theme%3D%22icon%22%20icon%3D%22google%22%3E%3C%2Fbutton%3E%0A%20%20%20%20%3Cbutton%20theme%3D%22icon%22%20icon%3D%22linkedin-f%22%3E%3C%2Fbutton%3E%0A%20%20%20%20%3Cbutton%20theme%3D%22icon%22%20icon%3D%22location%22%3E%3C%2Fbutton%3E%0A%20%20%3C%2Fsection%3E%0A%20%20%3Cnovo-list%20class%3D%22bgc-off-white%22%20direction%3D%22horizontal%22%20%5BisLoading%5D%3D%22values%22%3E%0A%20%20%20%20%3Cnovo-value%20*skeleton%3E%3C%2Fnovo-value%3E%0A%20%20%20%20%3Cnovo-value%20*skeleton%3E%3C%2Fnovo-value%3E%0A%20%20%20%20%3Cnovo-value%20*ngFor%3D%22let%20value%20of%20values%22%20%5Blabel%5D%3D%22value.label%22%20%5Bdata%5D%3D%22value.data%22%3E%3C%2Fnovo-value%3E%0A%20%20%3C%2Fnovo-list%3E%0A%20%20%3Cnovo-nav%20direction%3D%22horizontal%22%20%5BisLoading%5D%3D%22tabs%22%3E%0A%20%20%20%20%3Cnovo-tab%20*skeleton%3E%3C%2Fnovo-tab%3E%0A%20%20%20%20%3Cnovo-tab%20*skeleton%3E%3C%2Fnovo-tab%3E%0A%20%20%20%20%3Cnovo-tab%20*skeleton%3E%3C%2Fnovo-tab%3E%0A%20%20%20%20%3Cnovo-tab%20*ngFor%3D%22let%20tab%20of%20tabs%22%3E%0A%20%20%20%20%20%20%3Cspan%3E%7B%7Btab%7D%7D%3C%2Fspan%3E%0A%20%20%20%20%3C%2Fnovo-tab%3E%0A%20%20%3C%2Fnovo-nav%3E%0A%3C%2Fheader%3E`
    },
    'details-card': {
        title: 'Details Card Example',
        component: DetailsCardExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0Aimport%20%7B%20NovoToastService%20%7D%20from%20'novo-elements'%3B%0A%0Aconst%20HEADER_THEMES%20%3D%20%5B'company'%2C%20'job'%2C%20'candidate'%2C%20'contact'%2C%20'opportunity'%2C%20'lead'%2C%20'light'%2C%20'white'%5D%3B%0Aconst%20HEADER_ICONS%20%3D%20%5B'company'%2C%20'job'%2C%20'candidate'%2C%20'person'%2C%20'opportunity'%2C%20'lead'%2C%20'bolt'%2C%20'shield'%5D%3B%0A%0A%2F**%0A%20*%20%40title%20Details%20Card%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'details-card-example'%2C%0A%20%20%20%20templateUrl%3A%20'details-card-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'details-card-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20DetailsCardExample%20%7B%0A%20%20public%20theme%3A%20string%20%3D%20'company'%3B%0A%20%20public%20icon%3A%20string%20%3D%20'company'%3B%0A%20%20public%20record%3A%20any%3B%0A%20%20public%20values%3A%20any%5B%5D%3B%0A%20%20public%20tabs%3A%20string%5B%5D%3B%0A%20%20private%20options%3A%20any%20%3D%20%7B%0A%20%20%20%20title%3A%20'Title'%2C%0A%20%20%20%20message%3A%20'Some%20Message...'%2C%0A%20%20%20%20theme%3A%20'ocean'%2C%0A%20%20%20%20icon%3A%20'clipboard'%2C%0A%20%20%20%20position%3A%20'growlTopRight'%2C%0A%20%20%7D%3B%0A%20%20private%20themeIndex%3A%20number%20%3D%200%3B%0A%0A%20%20constructor(private%20toaster%3A%20NovoToastService)%20%7B%0A%20%20%20%20this.refresh()%3B%0A%20%20%7D%0A%0A%20%20refresh()%20%7B%0A%20%20%20%20this.values%20%3D%20undefined%3B%0A%20%20%20%20this.tabs%20%3D%20undefined%3B%0A%20%20%20%20this.record%20%3D%20undefined%3B%0A%0A%20%20%20%20setTimeout(()%20%3D%3E%20%7B%0A%20%20%20%20%20%20this.values%20%3D%20%5B%0A%20%20%20%20%20%20%20%20%7B%20label%3A%20'Status'%2C%20data%3A%20'Open'%20%7D%2C%0A%20%20%20%20%20%20%20%20%7B%20label%3A%20'Phone'%2C%20data%3A%20'555-555-5555'%20%7D%2C%0A%20%20%20%20%20%20%20%20%7B%20label%3A%20'Address'%2C%20data%3A%20'Boston%2C%20MA'%20%7D%2C%0A%20%20%20%20%20%20%5D%3B%0A%20%20%20%20%20%20this.tabs%20%3D%20%5B'Overview'%2C%20'Edit'%2C%20'Activity'%5D%3B%0A%20%20%20%20%20%20this.record%20%3D%20%7B%0A%20%20%20%20%20%20%20%20id%3A%20101%2C%0A%20%20%20%20%20%20%20%20name%3A%20'Acme%20Corporation%2C%20LLC'%2C%0A%20%20%20%20%20%20%7D%3B%0A%20%20%20%20%7D%2C%20200)%3B%0A%20%20%7D%0A%0A%20%20changeTheme()%20%7B%0A%20%20%20%20this.themeIndex%20%3D%20this.themeIndex%20%3D%3D%3D%20HEADER_THEMES.length%20-%201%20%3F%200%20%3A%20this.themeIndex%20%2B%201%3B%0A%20%20%20%20this.theme%20%3D%20HEADER_THEMES%5Bthis.themeIndex%5D%3B%0A%20%20%20%20this.icon%20%3D%20HEADER_ICONS%5Bthis.themeIndex%5D%3B%0A%20%20%7D%0A%0A%20%20catchEv(type%2C%20ev)%20%7B%0A%20%20%20%20%2F%2F%20Set%20toast%20options%0A%20%20%20%20this.options%20%3D%20%7B%0A%20%20%20%20%20%20title%3A%20%60%24%7Btype%7D%60%2C%0A%20%20%20%20%20%20message%3A%20%60%24%7Bev%7D%20fired...%60%2C%0A%20%20%20%20%20%20theme%3A%20'ocean'%2C%0A%20%20%20%20%20%20icon%3A%20%60%24%7Btype%7D%60%2C%0A%20%20%20%20%20%20position%3A%20'growlTopRight'%2C%0A%20%20%20%20%7D%3B%0A%0A%20%20%20%20%2F%2F%20Fire%20toast%0A%20%20%20%20this.toaster.alert(this.options)%3B%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cnovo-card%20%5Bpadding%5D%3D%22false%22%3E%0A%20%20%3Cnovo-card-header%3E%0A%20%20%20%20%3Cnovo-icon%20color%3D%22neutral%22%3Emove%3C%2Fnovo-icon%3E%0A%20%20%20%20%3Cnovo-title%3EDetails%3C%2Fnovo-title%3E%0A%20%20%20%20%3Cnovo-action%20icon%3D%22refresh%22%20tooltip%3D%22Refresh%20Card%20Data%22%3E%3C%2Fnovo-action%3E%0A%20%20%20%20%3Cnovo-action%20icon%3D%22times%22%20tooltip%3D%22Remove%20Card%22%3E%3C%2Fnovo-action%3E%0A%20%20%3C%2Fnovo-card-header%3E%0A%20%20%3Cnovo-card-content%20condensed%3E%0A%20%20%20%20%3Cnovo-list%20class%3D%22bgc-off-white-striped%22%20direction%3D%22vertical%22%3E%0A%20%20%20%20%20%20%3Cnovo-value%20row%20*ngFor%3D%22let%20value%20of%20values%22%20%5Blabel%5D%3D%22value.label%22%20%5Bdata%5D%3D%22value.data%22%3E%3C%2Fnovo-value%3E%0A%20%20%20%20%3C%2Fnovo-list%3E%0A%20%20%3C%2Fnovo-card-content%3E%0A%3C%2Fnovo-card%3E`
    },
    'card-form': {
        title: 'Card Form Example',
        component: CardFormExample,
        tsSource: `import%20%7B%20Component%2C%20ElementRef%2C%20ViewChild%20%7D%20from%20'%40angular%2Fcore'%3B%0Aimport%20%7B%20UntypedFormControl%20%7D%20from%20'%40angular%2Fforms'%3B%0Aimport%20%7B%20NovoOptionSelectedEvent%20%7D%20from%20'novo-elements'%3B%0Aimport%20%7B%20Observable%20%7D%20from%20'rxjs'%3B%0Aimport%20%7B%20map%2C%20startWith%20%7D%20from%20'rxjs%2Foperators'%3B%0A%0Ainterface%20Recipient%20%7B%0A%20%20id%3A%20number%3B%0A%20%20name%3A%20string%3B%0A%20%20email%3A%20string%3B%0A%7D%0A%0A%2F**%0A%20*%20%40title%20Card%20Form%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'card-form-example'%2C%0A%20%20%20%20templateUrl%3A%20'card-form-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'card-form-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20CardFormExample%20%7B%0A%20%20recipientCtrl%20%3D%20new%20UntypedFormControl()%3B%0A%20%20filteredPeople%3A%20Observable%3CRecipient%5B%5D%3E%3B%0A%20%20recipients%3A%20Recipient%5B%5D%20%3D%20%5B%5D%3B%0A%20%20allPeople%3A%20Recipient%5B%5D%20%3D%20%5B%0A%20%20%20%20%7B%0A%20%20%20%20%20%20id%3A%201%2C%0A%20%20%20%20%20%20name%3A%20'Brian%20Kimball'%2C%0A%20%20%20%20%20%20email%3A%20'bvkimball%40bullhorn.com'%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20id%3A%202%2C%0A%20%20%20%20%20%20name%3A%20'Josh%20Godi'%2C%0A%20%20%20%20%20%20email%3A%20'jgodi%40bullhorn.com'%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20id%3A%203%2C%0A%20%20%20%20%20%20name%3A%20'Alec%20Sibilia'%2C%0A%20%20%20%20%20%20email%3A%20'asibilia%40bullhorn.com'%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20id%3A%204%2C%0A%20%20%20%20%20%20name%3A%20'Jon%20Braun'%2C%0A%20%20%20%20%20%20email%3A%20'jb%40bullhorn.com'%2C%0A%20%20%20%20%7D%2C%0A%20%20%5D%3B%0A%0A%20%20%40ViewChild('searchInput')%20searchInput%3A%20ElementRef%3CHTMLInputElement%3E%3B%0A%0A%20%20constructor()%20%7B%0A%20%20%20%20this.filteredPeople%20%3D%20this.recipientCtrl.valueChanges.pipe(%0A%20%20%20%20%20%20startWith(null)%2C%0A%20%20%20%20%20%20map((person%3A%20Recipient%20%7C%20null)%20%3D%3E%20(person%20%3F%20this._filter(person)%20%3A%20this.allPeople.slice()))%2C%0A%20%20%20%20)%3B%0A%20%20%7D%0A%0A%20%20add(event%3A%20any)%3A%20void%20%7B%0A%20%20%20%20const%20input%20%3D%20event.input%3B%0A%20%20%20%20const%20value%20%3D%20event.value%3B%0A%0A%20%20%20%20%2F%2F%20Add%20our%20person%0A%20%20%20%20if%20((value%20%7C%7C%20'').trim())%20%7B%0A%20%20%20%20%20%20this.recipients.push(value.trim())%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20%2F%2F%20Reset%20the%20input%20value%0A%20%20%20%20if%20(input)%20%7B%0A%20%20%20%20%20%20input.value%20%3D%20''%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20this.recipientCtrl.setValue(null)%3B%0A%20%20%7D%0A%0A%20%20remove(person%3A%20Recipient)%3A%20void%20%7B%0A%20%20%20%20const%20index%20%3D%20this.recipients.indexOf(person)%3B%0A%0A%20%20%20%20if%20(index%20%3E%3D%200)%20%7B%0A%20%20%20%20%20%20this.recipients.splice(index%2C%201)%3B%0A%20%20%20%20%7D%0A%20%20%7D%0A%0A%20%20selected(event%3A%20NovoOptionSelectedEvent)%3A%20void%20%7B%0A%20%20%20%20console.log(event.option)%3B%0A%20%20%20%20this.recipients.push(event.option.value)%3B%0A%20%20%20%20this.searchInput.nativeElement.value%20%3D%20''%3B%0A%20%20%20%20this.recipientCtrl.setValue(null)%3B%0A%20%20%7D%0A%0A%20%20private%20_filter(value%3A%20Recipient)%3A%20Recipient%5B%5D%20%7B%0A%20%20%20%20const%20filterValue%20%3D%20value.name.toLowerCase()%3B%0A%0A%20%20%20%20return%20this.allPeople.filter((person)%20%3D%3E%20person.name.toLowerCase().indexOf(filterValue)%20%3D%3D%3D%200)%3B%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A.card-form-example%20%7B%0A%20%20max-width%3A%2048rem%3B%0A%7D%0A`,
        htmlSource: `%3Cnovo-card%20class%3D%22card-form-example%22%20%5Bpadding%5D%3D%22false%22%3E%0A%20%20%3Cnovo-card-header%20theme%3D%22off-white%22%3E%0A%20%20%20%20%3Cnovo-dropdown%3E%0A%20%20%20%20%20%20%3Cbutton%20theme%3D%22dialogue%22%20icon%3D%22collapse%22%3EMessage%20Template%3C%2Fbutton%3E%0A%20%20%20%20%20%20%3Clist%3E%0A%20%20%20%20%20%20%20%20%3Citem%3EMessage%201%3C%2Fitem%3E%0A%20%20%20%20%20%20%20%20%3Citem%3EMessage%202%3C%2Fitem%3E%0A%20%20%20%20%20%20%3C%2Flist%3E%0A%20%20%20%20%3C%2Fnovo-dropdown%3E%0A%20%20%20%20%3Cnovo-dropdown%3E%0A%20%20%20%20%20%20%3Cbutton%20theme%3D%22dialogue%22%20icon%3D%22collapse%22%3EPersonalize%3C%2Fbutton%3E%0A%20%20%20%20%20%20%3Clist%3E%0A%20%20%20%20%20%20%20%20%3Citem%3EFirst%20Name%3C%2Fitem%3E%0A%20%20%20%20%20%20%20%20%3Citem%3ELast%20Name%3C%2Fitem%3E%0A%20%20%20%20%20%20%3C%2Flist%3E%0A%20%20%20%20%3C%2Fnovo-dropdown%3E%0A%20%20%3C%2Fnovo-card-header%3E%0A%20%20%3Cnovo-card-content%3E%0A%20%20%20%20%3Cnovo-fields%20appearance%3D%22list%22%20%5BfullWidth%5D%3D%22true%22%3E%0A%20%20%20%20%20%20%3C!--%20How%20do%20we%20deliver%20the%20message%20--%3E%0A%20%20%20%20%20%20%3Cnovo-field%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-label%3EDelivery%20Method%3C%2Fnovo-label%3E%0A%20%20%20%20%20%20%20%20%3Cselect%20required%20novoInput%3E%0A%20%20%20%20%20%20%20%20%20%20%3Coption%20value%3D%22pink%22%3ECandidate%20Preferred%3C%2Foption%3E%0A%20%20%20%20%20%20%20%20%20%20%3Coption%20value%3D%22purple%22%3EEmail%20Only%3C%2Foption%3E%0A%20%20%20%20%20%20%20%20%20%20%3Coption%20value%3D%22sparkles%22%3ESMS%3C%2Foption%3E%0A%20%20%20%20%20%20%20%20%3C%2Fselect%3E%0A%20%20%20%20%20%20%3C%2Fnovo-field%3E%0A%20%20%20%20%20%20%3C!--%20Who%20does%20the%20message%20come%20from%20--%3E%0A%20%20%20%20%20%20%3Cnovo-field%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-label%3EFrom%3C%2Fnovo-label%3E%0A%20%20%20%20%20%20%20%20%3Cselect%20required%20novoInput%3E%0A%20%20%20%20%20%20%20%20%20%20%3Coption%20value%3D%22pink%22%3ECandidate%20Owner%3C%2Foption%3E%0A%20%20%20%20%20%20%20%20%20%20%3Coption%20value%3D%22purple%22%3EJob%20Owner%3C%2Foption%3E%0A%20%20%20%20%20%20%20%20%20%20%3Coption%20value%3D%22sparkles%22%3EMe%3C%2Foption%3E%0A%20%20%20%20%20%20%20%20%3C%2Fselect%3E%0A%20%20%20%20%20%20%3C%2Fnovo-field%3E%0A%20%20%20%20%20%20%3C!--%20Needs%20to%20be%20chip%20picker%20--%3E%0A%20%20%20%20%20%20%3Cnovo-field%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-label%3ETo%3C%2Fnovo-label%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-chip-list%20%23chips%20aria-label%3D%22Recipients%22%3E%0A%20%20%20%20%20%20%20%20%20%20%3Cnovo-chip%0A%20%20%20%20%20%20%20%20%20%20%20%20*ngFor%3D%22let%20person%20of%20recipients%20%7C%20slice%3A0%22%0A%20%20%20%20%20%20%20%20%20%20%20%20(removed)%3D%22remove(person)%22%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%7B%7Bperson.name%7D%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%3Cnovo-icon%20novoChipRemove%3Ebox-times-o%3C%2Fnovo-icon%3E%0A%20%20%20%20%20%20%20%20%20%20%3C%2Fnovo-chip%3E%0A%20%20%20%20%20%20%20%20%20%20%3Cinput%0A%20%20%20%20%20%20%20%20%20%20%20%20novoChipInput%0A%20%20%20%20%20%20%20%20%20%20%20%20%23searchInput%0A%20%20%20%20%20%20%20%20%20%20%20%20placeholder%3D%22Search...%22%0A%20%20%20%20%20%20%20%20%20%20%20%20autocomplete%3D%22off%22%0A%20%20%20%20%20%20%20%20%20%20%20%20%5BformControl%5D%3D%22recipientCtrl%22%0A%20%20%20%20%20%20%20%20%20%20%20%20(novoChipInputTokenEnd)%3D%22add(%24event)%22%20%2F%3E%0A%20%20%20%20%20%20%20%20%20%20%3Cnovo-text%20*ngIf%3D%22recipients.length%22%3E%2B%7B%7Brecipients.length%20-%202%7D%7D%3C%2Fnovo-text%3E%0A%20%20%20%20%20%20%20%20%3C%2Fnovo-chip-list%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-autocomplete%20(optionSelected)%3D%22selected(%24event)%22%3E%0A%20%20%20%20%20%20%20%20%20%20%3Cnovo-option%20*ngFor%3D%22let%20person%20of%20filteredPeople%20%7C%20async%22%20%5Bvalue%5D%3D%22person%22%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%3Cnovo-flex%20gap%3D%221rem%22%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Cnovo-avatar%20%5Bsource%5D%3D%22person%22%3E%3C%2Fnovo-avatar%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Cnovo-flex%20direction%3D%22column%22%20align%3D%22start%22%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Cnovo-text%3E%7B%7Bperson.name%7D%7D%3C%2Fnovo-text%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Cnovo-caption%3E%7B%7Bperson.email%7D%7D%3C%2Fnovo-caption%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3C%2Fnovo-flex%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%3C%2Fnovo-flex%3E%0A%20%20%20%20%20%20%20%20%20%20%3C%2Fnovo-option%3E%0A%20%20%20%20%20%20%20%20%3C%2Fnovo-autocomplete%3E%0A%20%20%20%20%20%20%3C%2Fnovo-field%3E%0A%20%20%20%20%20%20%3C!--%20Email%20Subject%20Line%20--%3E%0A%20%20%20%20%20%20%3Cnovo-field%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-label%3ESubject%3C%2Fnovo-label%3E%0A%20%20%20%20%20%20%20%20%3Cinput%20novoInput%20type%3D%22text%22%20%2F%3E%0A%20%20%20%20%20%20%3C%2Fnovo-field%3E%0A%20%20%20%20%20%20%3C!--%20PRE-HEADER%20--%3E%0A%20%20%20%20%20%20%3Cnovo-field%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-label%3EPre-Header%3C%2Fnovo-label%3E%0A%20%20%20%20%20%20%20%20%3Cinput%20novoInput%20type%3D%22text%22%20%2F%3E%0A%20%20%20%20%20%20%3C%2Fnovo-field%3E%0A%20%20%20%20%20%20%3C!--%20The%20message%20to%20deliver%20--%3E%0A%20%20%20%20%20%20%3Cnovo-field%3E%0A%20%20%20%20%20%20%20%20%3Ctextarea%20%23message%20novoInput%20placeholder%3D%22Message...%22%3E%3C%2Ftextarea%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-hint%3E%7B%7Bmessage.value.length%7D%7D%20%2F%20256%3C%2Fnovo-hint%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-hint%20align%3D%22end%22%3EMessages%20over%20140%20characters%20may%20be%20sent%20as%20multiple%20messages.%3C%2Fnovo-hint%3E%0A%20%20%20%20%20%20%3C%2Fnovo-field%3E%0A%20%20%20%20%3C%2Fnovo-fields%3E%0A%20%20%3C%2Fnovo-card-content%3E%0A%3C%2Fnovo-card%3E`
    },
    'activity-section': {
        title: 'Activity Section',
        component: ActivitySectionExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Activity%20Section%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'activity-section-example'%2C%0A%20%20%20%20templateUrl%3A%20'activity-section-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'activity-section-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20ActivitySectionExample%20%7B%0A%20%20public%20isDisabled%3A%20boolean%20%3D%20true%3B%0A%20%20public%20details%3A%20any%3B%0A%0A%20%20constructor()%20%7B%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cnovo-expansion-panel%20theme%3D%22contact%22%3E%0A%20%20%3Cnovo-expansion-panel-header%3E%0A%20%20%20%20%3Cnovo-panel-title%3E%0A%20%20%20%20%20%20%3Cnovo-icon%3Eperson%3C%2Fnovo-icon%3E%0A%20%20%20%20%20%20%3Cnovo-title%3EContacts%3C%2Fnovo-title%3E%0A%20%20%20%20%3C%2Fnovo-panel-title%3E%0A%20%20%3C%2Fnovo-expansion-panel-header%3E%0A%0A%20%20%3Cp%3EThis%20is%20the%20primary%20content%20of%20the%20panel.%3C%2Fp%3E%0A%0A%3C%2Fnovo-expansion-panel%3E%0A%3Cnovo-expansion-panel%20theme%3D%22job%22%20%5BhideToggle%5D%3D%22jp.expanded%22%20%23jp%3E%0A%20%20%3Cnovo-expansion-panel-header%3E%0A%20%20%20%20%3Cnovo-panel-title%3E%0A%20%20%20%20%20%20%3Cnovo-icon%3Ejob%3C%2Fnovo-icon%3E%0A%20%20%20%20%20%20%3Cnovo-title%3EJob%20Orders%3C%2Fnovo-title%3E%0A%20%20%20%20%3C%2Fnovo-panel-title%3E%0A%20%20%20%20%3Cbutton%20theme%3D%22primary%22%20icon%3D%22add-thin%22%20%5Bhidden%5D%3D%22!jp.expanded%22%3EAdd%20Job%20Order%3C%2Fbutton%3E%0A%20%20%3C%2Fnovo-expansion-panel-header%3E%0A%0A%20%20%3Cp%3EThis%20is%20the%20primary%20content%20of%20the%20panel.%3C%2Fp%3E%0A%0A%3C%2Fnovo-expansion-panel%3E`
    },
    'tabs-vertical': {
        title: 'Vertical Tabs',
        component: TabsVerticalExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Vertical%20Tabs%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'tabs-vertical-example'%2C%0A%20%20%20%20templateUrl%3A%20'tabs-vertical-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'tabs-vertical-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20TabsVerticalExample%20%7B%0A%20%20tabSelected()%20%7B%0A%20%20%20%20console.log('TAB%20SELECTED')%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%7D%0A%0A%20%20tabDeselected()%20%7B%0A%20%20%20%20console.log('TAB%20DESELECTED')%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cnovo-nav%20theme%3D%22white%22%20%5Boutlet%5D%3D%22colorVert%22%20direction%3D%22vertical%22%3E%0A%20%20%3Cnovo-tab%3E%0A%20%20%20%20%20%20%3Cspan%3E%0A%20%20%20%20%20%20%20%20%20%20%3Ci%20class%3D%22bhi-person%22%3E%3C%2Fi%3ETab%201%3C%2Fspan%3E%0A%20%20%3C%2Fnovo-tab%3E%0A%20%20%3Cnovo-tab%3E%0A%20%20%20%20%20%20%3Cspan%3E%0A%20%20%20%20%20%20%20%20%20%20%3Ci%20class%3D%22bhi-person%22%3E%3C%2Fi%3ETab%202%3C%2Fspan%3E%0A%20%20%3C%2Fnovo-tab%3E%0A%20%20%3Cnovo-tab%20%5Bdisabled%5D%3D%22true%22%3E%0A%20%20%20%20%20%20%3Cspan%3E%0A%20%20%20%20%20%20%20%20%20%20%3Ci%20class%3D%22bhi-person%22%3E%3C%2Fi%3ETab%203%3C%2Fspan%3E%0A%20%20%3C%2Fnovo-tab%3E%0A%3C%2Fnovo-nav%3E%0A%0A%3Cnovo-nav-outlet%20%23colorVert%3E%0A%20%20%3Cnovo-nav-content%3E%0A%20%20%20%20%20%20%3Ch1%3ETab%201%20Content%3C%2Fh1%3E%0A%0A%20%20%20%20%20%20%3Cp%3E%0A%20%20%20%20%20%20%20%20%20%20Synth%20polaroid%20bitters%20chillwave%20pickled.%20Vegan%20disrupt%20tousled%2C%0A%20%20%20%20%20%20%20%20%20%20Portland%20keffiyeh%20aesthetic%20food%20truck%20sriracha%20cornhole%0A%20%20%20%20%20%20%20%20%20%20single-origin%20coffee%20church-key%20roof%20party.%20Leggings%0A%20%20%20%20%20%20%20%20%20%20ethical%20McSweeney's%2C%20normcore%20you%20probably%20haven't%0A%20%20%20%20%20%20%20%20%20%20heard%20of%20them%20Marfa%20organic%20squid.%20Slow-carb%2090's%0A%20%20%20%20%20%20%20%20%20%20ennui%20Godard%20pug%20asymmetrical%2C%20narwhal%20VHS%20Tonx%20High%0A%20%20%20%20%20%20%20%20%20%20Life.%20Retro%20dreamcatcher%20synth%20Godard%20pickled%20Etsy%0A%20%20%20%20%20%20%20%20%20%20jean%20shorts%20beard%2C%20pour-over%20fanny%20pack%20mumblecore.%0A%20%20%20%20%20%20%20%20%20%20Quinoa%20retro%20aesthetic%20polaroid%2C%20Williamsburg%20American%0A%20%20%20%20%20%20%20%20%20%20Apparel%20plaid%20small%20batch.%20Blue%20Bottle%20Vice%20fanny%0A%20%20%20%20%20%20%20%20%20%20pack%2C%20Williamsburg%20roof%20party%20Wes%20Anderson%20mlkshk%0A%20%20%20%20%20%20%20%20%20%20seitan%20brunch%20before%20they%20sold%20out%20lo-fi%20XOXO%20tofu%0A%20%20%20%20%20%20%20%20%20%20scenester%20small%20batch.%0A%20%20%20%20%20%20%3C%2Fp%3E%0A%20%20%3C%2Fnovo-nav-content%3E%0A%20%20%3Cnovo-nav-content%3E%0A%20%20%20%20%20%20%3Ch1%3ETab%202%20Content%3C%2Fh1%3E%0A%0A%20%20%20%20%20%20%3Cp%3E%0A%20%20%20%20%20%20%20%20%20%20Synth%20polaroid%20bitters%20chillwave%20pickled.%0A%20%20%20%20%20%20%3C%2Fp%3E%0A%20%20%3C%2Fnovo-nav-content%3E%0A%3C%2Fnovo-nav-outlet%3E%0A`
    },
    'tabs-router': {
        title: 'Tabs for Navigation',
        component: TabsRouterExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Tabs%20for%20Navigation%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'tabs-router-example'%2C%0A%20%20%20%20templateUrl%3A%20'tabs-router-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'tabs-router-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20TabsRouterExample%20%7B%0A%20%20tabSelected()%20%7B%0A%20%20%20%20console.log('TAB%20SELECTED')%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%7D%0A%0A%20%20tabDeselected()%20%7B%0A%20%20%20%20console.log('TAB%20DESELECTED')%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cheader%3E%0A%20%20%3Cnovo-nav%20theme%3D%22white%22%20router%3E%0A%20%20%20%20%20%20%3Cnovo-tab-link%3E%0A%20%20%20%20%20%20%20%20%20%20%3Cspan%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Ci%20class%3D%22bhi-person%22%3E%3C%2Fi%3ETab%201%3C%2Fspan%3E%0A%20%20%20%20%20%20%3C%2Fnovo-tab-link%3E%0A%20%20%20%20%20%20%3Cnovo-tab-link%3E%0A%20%20%20%20%20%20%20%20%20%20%3Cspan%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Ci%20class%3D%22bhi-person%22%3E%3C%2Fi%3ETab%202%3C%2Fspan%3E%0A%20%20%20%20%20%20%3C%2Fnovo-tab-link%3E%0A%20%20%20%20%20%20%20%3Cnovo-tab-link%20%5Bdisabled%5D%3D%22true%22%3E%0A%20%20%20%20%20%20%20%20%20%20%3Cspan%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Ci%20class%3D%22bhi-person%22%3E%3C%2Fi%3ETab%203%3C%2Fspan%3E%0A%20%20%20%20%20%20%3C%2Fnovo-tab-link%3E%0A%20%20%3C%2Fnovo-nav%3E%0A%3C%2Fheader%3E%0A`
    },
    'tabs-condensed': {
        title: 'Condensed Tabs',
        component: TabsCondensedExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Condensed%20Tabs%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'tabs-condensed-example'%2C%0A%20%20%20%20templateUrl%3A%20'tabs-condensed-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'tabs-condensed-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20TabsCondensedExample%20%7B%0A%20%20tabSelected()%20%7B%0A%20%20%20%20console.log('TAB%20SELECTED')%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%7D%0A%0A%20%20tabDeselected()%20%7B%0A%20%20%20%20console.log('TAB%20DESELECTED')%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cnovo-nav%20theme%3D%22white%22%20%5Boutlet%5D%3D%22condensed%22%20condensed%3D%22true%22%3E%0A%20%20%3Cnovo-tab%3E%0A%20%20%20%20%20%20%3Cspan%3E%3Ci%20class%3D%22bhi-person%22%3E%3C%2Fi%3ETab%201%3C%2Fspan%3E%0A%20%20%3C%2Fnovo-tab%3E%0A%20%20%3Cnovo-tab%3E%0A%20%20%20%20%20%20%3Cspan%3E%3Ci%20class%3D%22bhi-person%22%3E%3C%2Fi%3ETab%202%3C%2Fspan%3E%0A%20%20%3C%2Fnovo-tab%3E%0A%20%20%3Cnovo-tab%20%5Bdisabled%5D%3D%22true%22%3E%0A%20%20%20%20%20%20%3Cspan%3E%3Ci%20class%3D%22bhi-person%22%3E%3C%2Fi%3ETab%203%3C%2Fspan%3E%0A%20%20%3C%2Fnovo-tab%3E%0A%3C%2Fnovo-nav%3E%0A%0A%0A%3Cnovo-nav-outlet%20%23condensed%3E%0A%20%20%3Cnovo-nav-content%3E%0A%20%20%20%20%20%20%3Ch1%3ETab%201%20Content%3C%2Fh1%3E%0A%20%20%3C%2Fnovo-nav-content%3E%0A%20%20%3Cnovo-nav-content%3E%0A%20%20%20%20%20%20%3Ch1%3ETab%202%20Content%3C%2Fh1%3E%0A%20%20%3C%2Fnovo-nav-content%3E%0A%3C%2Fnovo-nav-outlet%3E%0A`
    },
    'tabs-color': {
        title: 'Colorful Tabs',
        component: TabsColorExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Colorful%20Tabs%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'tabs-color-example'%2C%0A%20%20%20%20templateUrl%3A%20'tabs-color-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'tabs-color-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20TabsColorExample%20%7B%0A%20%20public%20selected%20%3D%201%3B%0A%0A%20%20tabSelected()%20%7B%0A%20%20%20%20console.log('TAB%20SELECTED')%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%7D%0A%0A%20%20tabDeselected()%20%7B%0A%20%20%20%20console.log('TAB%20DESELECTED')%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%7D%0A%0A%20%20updateTabIndex(value%3A%20number)%20%7B%0A%20%20%20%20this.selected%20%2B%3D%20value%3B%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cnovo-toolbar%3E%0A%20%20%3Cnovo-toolbar-row%20accent%3D%22orange%22%20gap%3D%22md%22%3E%0A%20%20%20%20%3Cnovo-icon%3Ebull%3C%2Fnovo-icon%3E%0A%20%20%20%20%3Cnovo-title%3ETab%20Example%3C%2Fnovo-title%3E%0A%20%20%20%20%3Cspan%20class%3D%22example-spacer%22%3E%3C%2Fspan%3E%0A%20%20%20%20%3Cnovo-action%20icon%3D%22previous%22%20(click)%3D%22updateTabIndex(-1)%22%3E%3C%2Fnovo-action%3E%0A%20%20%20%20%3Cnovo-text%3ESelected%20Index%3A%20%7B%7Bselected%7D%7D%3C%2Fnovo-text%3E%0A%20%20%20%20%3Cnovo-action%20icon%3D%22next%22%20(click)%3D%22updateTabIndex(1)%22%3E%3C%2Fnovo-action%3E%0A%20%20%3C%2Fnovo-toolbar-row%3E%0A%0A%20%20%3Cnovo-toolbar-row%3E%0A%20%20%20%20%3Cnovo-nav%20%5Boutlet%5D%3D%22outlet%22%20direction%3D%22horizontal%22%20%5B(selectedIndex)%5D%3D%22selected%22%3E%0A%20%20%20%20%20%20%3Cnovo-tab%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-icon%3Eperson%3C%2Fnovo-icon%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-label%3ETab%201%3C%2Fnovo-label%3E%0A%20%20%20%20%20%20%3C%2Fnovo-tab%3E%0A%20%20%20%20%20%20%3Cnovo-tab%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-icon%3Eperson%3C%2Fnovo-icon%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-label%3ETab%202%3C%2Fnovo-label%3E%0A%20%20%20%20%20%20%3C%2Fnovo-tab%3E%0A%20%20%20%20%20%20%3Cnovo-tab%20disabled%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-icon%3Eperson%3C%2Fnovo-icon%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-label%3ETab%203%3C%2Fnovo-label%3E%0A%20%20%20%20%20%20%3C%2Fnovo-tab%3E%0A%20%20%20%20%3C%2Fnovo-nav%3E%0A%20%20%3C%2Fnovo-toolbar-row%3E%0A%3C%2Fnovo-toolbar%3E%0A%0A%0A%3Cnovo-nav-outlet%20%23outlet%3E%0A%20%20%3Cnovo-nav-content%3E%0A%20%20%20%20%3Ch1%3ETab%201%20Content%3C%2Fh1%3E%0A%20%20%3C%2Fnovo-nav-content%3E%0A%20%20%3Cnovo-nav-content%3E%0A%20%20%20%20%3Ch1%3ETab%202%20Content%3C%2Fh1%3E%0A%20%20%3C%2Fnovo-nav-content%3E%0A%20%20%3Cnovo-nav-content%3E%0A%20%20%20%20%3Ch1%3ETab%203%20Content%3C%2Fh1%3E%0A%20%20%3C%2Fnovo-nav-content%3E%0A%3C%2Fnovo-nav-outlet%3E`
    },
    'tabs-basic': {
        title: 'Basic Tabs',
        component: TabsBasicExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Basic%20Tabs%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'tabs-basic-example'%2C%0A%20%20%20%20templateUrl%3A%20'tabs-basic-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'tabs-basic-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20TabsBasicExample%20%7B%0A%20%20tabSelected()%20%7B%0A%20%20%20%20console.log('TAB%20SELECTED')%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%7D%0A%0A%20%20tabDeselected()%20%7B%0A%20%20%20%20console.log('TAB%20DESELECTED')%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cnovo-nav%20theme%3D%22white%22%20mx%3D%22xl%22%3E%0A%20%20%3Cnovo-tab%3EOverview%3C%2Fnovo-tab%3E%0A%20%20%3Cnovo-tab%3EEdit%3C%2Fnovo-tab%3E%0A%20%20%3Cnovo-tab%3EActivity%3C%2Fnovo-tab%3E%0A%20%20%3Cnovo-tab%3ENotes%3C%2Fnovo-tab%3E%0A%20%20%3Cnovo-tab%20disabled%3EDisabled%3C%2Fnovo-tab%3E%0A%3C%2Fnovo-nav%3E`
    },
    'stepper-vertical': {
        title: 'Stepper w/ Vertical Layout',
        component: StepperVerticalExample,
        tsSource: `import%20%7B%20Component%2C%20OnInit%20%7D%20from%20'%40angular%2Fcore'%3B%0Aimport%20%7B%20UntypedFormBuilder%2C%20UntypedFormGroup%2C%20Validators%20%7D%20from%20'%40angular%2Fforms'%3B%0Aimport%20%7B%20NovoStep%2C%20NovoVerticalStepper%20%7D%20from%20'novo-elements'%3B%0A%0A%2F**%0A%20*%20%40title%20Stepper%20w%2F%20Vertical%20Layout%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'stepper-vertical-example'%2C%0A%20%20%20%20templateUrl%3A%20'stepper-vertical-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'stepper-vertical-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20StepperVerticalExample%20implements%20OnInit%20%7B%0A%20%20isLinear%20%3D%20true%3B%0A%20%20firstFormGroup%3A%20UntypedFormGroup%3B%0A%20%20secondFormGroup%3A%20UntypedFormGroup%3B%0A%0A%20%20constructor(private%20_formBuilder%3A%20UntypedFormBuilder)%20%7B%7D%0A%0A%20%20ngOnInit()%20%7B%0A%20%20%20%20this.firstFormGroup%20%3D%20this._formBuilder.group(%7B%0A%20%20%20%20%20%20firstCtrl%3A%20%5B''%2C%20Validators.required%5D%2C%0A%20%20%20%20%7D)%3B%0A%20%20%20%20this.secondFormGroup%20%3D%20this._formBuilder.group(%7B%0A%20%20%20%20%20%20secondCtrl%3A%20%5B''%2C%20Validators.required%5D%2C%0A%20%20%20%20%7D)%3B%0A%20%20%7D%0A%0A%20%20next(stepper%3A%20NovoVerticalStepper%2C%20step%3A%20NovoStep)%20%7B%0A%20%20%20%20step.editable%20%3D%20false%3B%0A%20%20%20%20stepper.next()%3B%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cnovo-vertical-stepper%20%5Blinear%5D%3D%22isLinear%22%20%23stepper%3E%0A%20%20%3Cnovo-step%20%5BstepControl%5D%3D%22firstFormGroup%22%20theme%3D%22candidate%22%20icon%3D%22candidate%22%20%23step1%3E%0A%20%20%20%20%3Cform%20%5BformGroup%5D%3D%22firstFormGroup%22%3E%0A%20%20%20%20%20%20%3Cng-template%20novoStepLabel%3EFill%20out%20your%20name%3C%2Fng-template%3E%0A%20%20%20%20%20%20%3Cinput%20placeholder%3D%22Last%20name%2C%20First%20name%22%20formControlName%3D%22firstCtrl%22%20required%20%2F%3E%0A%20%20%20%20%20%20%3Cdiv%3E%0A%20%20%20%20%20%20%20%20%3C!--%20%3Cbutton%20novo-button%20novoStepperNext%3ENext%3C%2Fbutton%3E%20--%3E%0A%20%20%20%20%20%20%20%20%3Cbutton%20(click)%3D%22next(stepper%2C%20step1)%22%20%5Bdisabled%5D%3D%22!firstFormGroup%3F.valid%22%3ENext%3C%2Fbutton%3E%0A%20%20%20%20%20%20%3C%2Fdiv%3E%0A%20%20%20%20%3C%2Fform%3E%0A%20%20%3C%2Fnovo-step%3E%0A%20%20%3Cnovo-step%20%5BstepControl%5D%3D%22secondFormGroup%22%20theme%3D%22contact%22%20icon%3D%22person%22%3E%0A%20%20%20%20%3Cform%20%5BformGroup%5D%3D%22secondFormGroup%22%3E%0A%20%20%20%20%20%20%3Cng-template%20novoStepLabel%3EFill%20out%20your%20address%3C%2Fng-template%3E%0A%20%20%20%20%20%20%3Cinput%20placeholder%3D%22Address%22%20formControlName%3D%22secondCtrl%22%20required%20%2F%3E%0A%20%20%20%20%20%20%3Cdiv%3E%0A%20%20%20%20%20%20%20%20%3C!--%20%3Cbutton%20novo-button%20novoStepperPrevious%3EBack%3C%2Fbutton%3E%0A%20%20%20%20%20%20%20%20%3Cbutton%20novo-button%20novoStepperNext%3ENext%3C%2Fbutton%3E%20--%3E%0A%20%20%20%20%20%20%20%20%3Cbutton%20(click)%3D%22stepper.previous()%22%3EBack%3C%2Fbutton%3E%0A%20%20%20%20%20%20%20%20%3Cbutton%20(click)%3D%22stepper.next()%22%3ENext%3C%2Fbutton%3E%0A%20%20%20%20%20%20%3C%2Fdiv%3E%0A%20%20%20%20%3C%2Fform%3E%0A%20%20%3C%2Fnovo-step%3E%0A%20%20%3Cnovo-step%3E%0A%20%20%20%20%3Cng-template%20novoStepLabel%3EDone%3C%2Fng-template%3E%0A%20%20%20%20You%20are%20now%20done.%0A%20%20%20%20%3Cdiv%3E%0A%20%20%20%20%20%20%3Cbutton%20novo-button%20(click)%3D%22stepper.reset()%22%3EReset%3C%2Fbutton%3E%0A%20%20%20%20%3C%2Fdiv%3E%0A%20%20%3C%2Fnovo-step%3E%0A%3C%2Fnovo-vertical-stepper%3E`
    },
    'stepper-horizontal': {
        title: 'Basic Stepper Component',
        component: StepperHorizontalExample,
        tsSource: `import%20%7B%20Component%2C%20OnInit%20%7D%20from%20'%40angular%2Fcore'%3B%0Aimport%20%7B%20UntypedFormBuilder%2C%20UntypedFormGroup%2C%20Validators%20%7D%20from%20'%40angular%2Fforms'%3B%0Aimport%20%7B%20NovoHorizontalStepper%2C%20NovoStep%20%7D%20from%20'novo-elements'%3B%0A%0A%2F**%0A%20*%20%40title%20Basic%20Stepper%20Component%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'stepper-horizontal-example'%2C%0A%20%20%20%20templateUrl%3A%20'stepper-horizontal-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'stepper-horizontal-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20StepperHorizontalExample%20implements%20OnInit%20%7B%0A%20%20isLinear%20%3D%20true%3B%0A%20%20firstFormGroup%3A%20UntypedFormGroup%3B%0A%20%20secondFormGroup%3A%20UntypedFormGroup%3B%0A%0A%20%20constructor(private%20_formBuilder%3A%20UntypedFormBuilder)%20%7B%7D%0A%0A%20%20ngOnInit()%20%7B%0A%20%20%20%20this.firstFormGroup%20%3D%20this._formBuilder.group(%7B%0A%20%20%20%20%20%20firstCtrl%3A%20%5B''%2C%20Validators.required%5D%2C%0A%20%20%20%20%7D)%3B%0A%20%20%20%20this.secondFormGroup%20%3D%20this._formBuilder.group(%7B%0A%20%20%20%20%20%20secondCtrl%3A%20%5B''%2C%20Validators.required%5D%2C%0A%20%20%20%20%7D)%3B%0A%20%20%7D%0A%0A%20%20next(stepper%3A%20NovoHorizontalStepper%2C%20step%3A%20NovoStep)%20%7B%0A%20%20%20%20step.editable%20%3D%20false%3B%0A%20%20%20%20stepper.next()%3B%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cnovo-horizontal-stepper%20%5Blinear%5D%3D%22isLinear%22%20%23stepper%3E%0A%20%20%3Cnovo-step%20%5BstepControl%5D%3D%22firstFormGroup%22%20label%3D%22Fill%20out%20your%20name%22%20theme%3D%22candidate%22%20icon%3D%22candidate%22%20%23step1%3E%0A%20%20%20%20%3Cform%20%5BformGroup%5D%3D%22firstFormGroup%22%3E%0A%20%20%20%20%20%20%3Cinput%20placeholder%3D%22Last%20name%2C%20First%20name%22%20formControlName%3D%22firstCtrl%22%20required%20%2F%3E%0A%20%20%20%20%20%20%3Cdiv%3EForm%20Valid%3F%20%7B%7BfirstFormGroup%3F.valid%7D%7D%3C%2Fdiv%3E%0A%20%20%20%20%20%20%3Cdiv%3E%0A%20%20%20%20%20%20%20%20%3Cbutton%20(click)%3D%22next(stepper%2C%20step1)%22%3ENext%3C%2Fbutton%3E%0A%20%20%20%20%20%20%3C%2Fdiv%3E%0A%20%20%20%20%3C%2Fform%3E%0A%20%20%3C%2Fnovo-step%3E%0A%20%20%3Cnovo-step%20%5BstepControl%5D%3D%22secondFormGroup%22%20theme%3D%22contact%22%3E%0A%20%20%20%20%3Cform%20%5BformGroup%5D%3D%22secondFormGroup%22%3E%0A%20%20%20%20%20%20%3Cng-template%20novoStepLabel%3EFill%20out%20your%20address%3C%2Fng-template%3E%0A%20%20%20%20%20%20%3Cinput%20placeholder%3D%22Address%22%20formControlName%3D%22secondCtrl%22%20required%20%2F%3E%0A%20%20%20%20%20%20%3Cdiv%3E%0A%20%20%20%20%20%20%20%20%3Cbutton%20(click)%3D%22stepper.previous()%22%3EBack%3C%2Fbutton%3E%0A%20%20%20%20%20%20%20%20%3Cbutton%20(click)%3D%22stepper.next()%22%3ENext%3C%2Fbutton%3E%0A%20%20%20%20%20%20%3C%2Fdiv%3E%0A%20%20%20%20%3C%2Fform%3E%0A%20%20%3C%2Fnovo-step%3E%0A%20%20%3Cnovo-step%3E%0A%20%20%20%20%3Cng-template%20novoStepLabel%3EDone%3C%2Fng-template%3E%0A%20%20%20%20You%20are%20now%20done.%0A%20%20%20%20%3Cdiv%3E%0A%20%20%20%20%20%20%3Cbutton%20novo-button%20(click)%3D%22stepper.previous()%22%3EBack%3C%2Fbutton%3E%0A%20%20%20%20%20%20%3Cbutton%20novo-button%20(click)%3D%22stepper.complete()%22%3EDone%3C%2Fbutton%3E%0A%20%20%20%20%3C%2Fdiv%3E%0A%20%20%3C%2Fnovo-step%3E%0A%3C%2Fnovo-horizontal-stepper%3E`
    },
    'basic-sidenav': {
        title: 'Basic Sidenav',
        component: BasicSidenavExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Basic%20Sidenav%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'basic-sidenav-example'%2C%0A%20%20%20%20templateUrl%3A%20'basic-sidenav-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'basic-sidenav-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20BasicSidenavExample%20%7B%0A%20%20isMobile%20%3D%20false%3B%0A%20%20collapsed%20%3D%20false%3B%0A%20%20openWindows%20%3D%20%5B%0A%20%20%20%20%7B%0A%20%20%20%20%20%20type%3A%20'record'%2C%0A%20%20%20%20%20%20accent%3A%20'candidate'%2C%0A%20%20%20%20%20%20label%3A%20%60101%20%7C%20Ferdinand%20del%20Toro%60%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20type%3A%20'record'%2C%0A%20%20%20%20%20%20accent%3A%20'job'%2C%0A%20%20%20%20%20%20label%3A%20%60101%20%7C%20Ferdinand%20del%20Toro%60%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20type%3A%20'list'%2C%0A%20%20%20%20%20%20accent%3A%20'company'%2C%0A%20%20%20%20%20%20label%3A%20%60Companies%60%2C%0A%20%20%20%20%7D%2C%0A%20%20%5D%3B%0A%20%20constructor()%20%7B%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A.sidenav-example%20%7B%0A%20%20height%3A%20640px%3B%0A%20%20width%3A%20640px%3B%0A%20%20display%3A%20grid%3B%0A%20%20grid-template-rows%3A%20auto%201fr%3B%0A%7D%0A%0A.novo-rail%20%7B%0A%20%20border-right%3A%201px%20solid%20var(--border)%3B%0A%7D%0A.novo-rail%20.novo-text%20%7B%0A%20%20flex%3A%201%3B%0A%7D%0A.novo-rail%3Anot(.expanded)%20.novo-text%2C%0A.novo-rail%3Anot(.expanded)%20.novo-action%20%7B%0A%20%20display%3A%20none%3B%0A%7D%0A`,
        htmlSource: `%3Cdiv%20class%3D%22sidenav-example%22%3E%0A%20%20%3Cnovo-toolbar%20color%3D%22navigation%22%3E%0A%20%20%20%20%3Cnovo-action%20icon%3D%22menu%22%20(click)%3D%22sidenav.toggle()%22%3E%3C%2Fnovo-action%3E%0A%20%20%20%20%3Cnovo-divider%20vertical%3E%3C%2Fnovo-divider%3E%0A%20%20%20%20%3Cimg%20class%3D%22logo%22%20src%3D%22assets%2Fimages%2Fbullhorn-logo.svg%22%20width%3D%22120%22%20height%3D%2232%22%20%2F%3E%0A%0A%20%20%20%20%3Cdiv%20flex%3D%221%201%20auto%22%3E%3C%2Fdiv%3E%0A%20%20%20%20%3Cnovo-divider%20vertical%3E%3C%2Fnovo-divider%3E%0A%20%20%20%20%3Cnovo-action%20icon%3D%22question%22%20tooltip%3D%22Support%22%3E%3C%2Fnovo-action%3E%0A%20%20%20%20%3Cnovo-divider%20vertical%3E%3C%2Fnovo-divider%3E%0A%20%20%20%20%3Cnovo-action%20icon%3D%22configure-o%22%20tooltip%3D%22Settings%22%3E%3C%2Fnovo-action%3E%0A%20%20%20%20%3Cnovo-divider%20vertical%3E%3C%2Fnovo-divider%3E%0A%20%20%20%20%3Cnovo-avatar%20image%3D%22https%3A%2F%2Frobohash.org%2Fbvkimball%22%20color%3D%22grass%22%3E%3C%2Fnovo-avatar%3E%0A%20%20%3C%2Fnovo-toolbar%3E%0A%0A%20%20%3Cnovo-layout-container%3E%0A%20%20%20%20%3Cnovo-rail%20%5Bclass.expanded%5D%3D%22!collapsed%22%3E%0A%20%20%20%20%20%20%3Cng-container%20*ngFor%3D%22let%20win%20of%20openWindows%22%3E%0A%20%20%20%20%20%20%20%20%3Cng-container%20%5BngSwitch%5D%3D%22win.type%22%3E%0A%20%20%20%20%20%20%20%20%20%20%3Cnovo-option%20*ngSwitchCase%3D%22'record'%22%20%5Baccent%5D%3D%22win.accent%22%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%3Cnovo-icon%3E%7B%7Bwin.accent%7D%7D%3C%2Fnovo-icon%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%3Cnovo-text%3E%7B%7Bwin.label%7D%7D%3C%2Fnovo-text%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%3Cnovo-action%20icon%3D%22x%22%3E%3C%2Fnovo-action%3E%0A%20%20%20%20%20%20%20%20%20%20%3C%2Fnovo-option%3E%0A%20%20%20%20%20%20%20%20%20%20%3Cnovo-option%20*ngSwitchCase%3D%22'list'%22%20%5Bfill%5D%3D%22win.accent%22%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%3Cnovo-icon%3E%7B%7Bwin.accent%7D%7D%3C%2Fnovo-icon%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%3Cnovo-text%3E%7B%7Bwin.label%7D%7D%3C%2Fnovo-text%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%3Cnovo-action%20icon%3D%22x%22%3E%3C%2Fnovo-action%3E%0A%20%20%20%20%20%20%20%20%20%20%3C%2Fnovo-option%3E%0A%20%20%20%20%20%20%20%20%3C%2Fng-container%3E%0A%20%20%20%20%20%20%3C%2Fng-container%3E%0A%20%20%20%20%20%20%3Cnovo-option%20(click)%3D%22collapsed%3D!collapsed%22%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-icon%3E%7B%7Bcollapsed%20%3F%20'arrow-right'%20%3A%20'arrow-left'%7D%7D%3C%2Fnovo-icon%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-text%3ECollapse%20All%3C%2Fnovo-text%3E%0A%20%20%20%20%20%20%3C%2Fnovo-option%3E%0A%20%20%20%20%3C%2Fnovo-rail%3E%0A%0A%20%20%20%20%3Cnovo-sidenav%0A%20%20%20%20%20%20%23sidenav%0A%20%20%20%20%20%20%5Bmode%5D%3D%22isMobile%20%3F%20'over'%20%3A%20'side'%22%0A%20%20%20%20%20%20%5Bopened%5D%3D%22!isMobile%22%0A%20%20%20%20%20%20%5BdisableClose%5D%3D%22!isMobile%22%0A%20%20%20%20%20%20theme%3D%22navigation%22%3E%0A%20%20%20%20%20%20%3Cnovo-header%20theme%3D%22navigation%22%20%5Bcondensed%5D%3D%22true%22%3E%0A%20%20%20%20%20%20%20%20%3Cdiv%20novo-title%3EApplication%20Menu%3C%2Fdiv%3E%0A%20%20%20%20%20%20%3C%2Fnovo-header%3E%0A%20%20%20%20%20%20%3Cnovo-list%20theme%3D%22navigation%22%20direction%3D%22vertical%22%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-divider%3E%3C%2Fnovo-divider%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-list-item%3E%3Ca%3EJob%20Orders%3C%2Fa%3E%3C%2Fnovo-list-item%3E%0A%20%20%20%20%20%20%20%20%3Cbutton%20list-item%3ECompanies%3C%2Fbutton%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-list-item%3EPlacements%3C%2Fnovo-list-item%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-list-item%3EContacts%3C%2Fnovo-list-item%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-list-item%3ECandidates%3C%2Fnovo-list-item%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-divider%3E%3C%2Fnovo-divider%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-list-item%3EReports%3C%2Fnovo-list-item%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-list-item%3ESettings%3C%2Fnovo-list-item%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-list-item%3EAbout%3C%2Fnovo-list-item%3E%0A%20%20%20%20%20%20%20%20%3Ca%20list-item%3EUsers%3C%2Fa%3E%0A%0A%20%20%20%20%20%20%3C%2Fnovo-list%3E%0A%0A%20%20%20%20%3C%2Fnovo-sidenav%3E%0A%20%20%20%20%3Cnovo-layout-content%3E%0A%20%20%20%20%20%20%3Cnovo-toolbar%20accent%3D%22candidate%22%20gap%3D%22md%22%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-icon%20color%3D%22candidate%22%3Ecandidate%3C%2Fnovo-icon%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-title%3EFerdinand%20del%20Toro%3C%2Fnovo-title%3E%0A%20%20%20%20%20%20%3C%2Fnovo-toolbar%3E%0A%20%20%20%20%20%20%3Cnovo-toolbar%20gap%3D%22md%22%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-stack%3E%0A%20%20%20%20%20%20%20%20%20%20%3Cnovo-label%3EID%3C%2Fnovo-label%3E%0A%20%20%20%20%20%20%20%20%20%20%3Cnovo-text%3E101%3C%2Fnovo-text%3E%0A%20%20%20%20%20%20%20%20%3C%2Fnovo-stack%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-stack%3E%0A%20%20%20%20%20%20%20%20%20%20%3Cnovo-label%3EOwner%3C%2Fnovo-label%3E%0A%20%20%20%20%20%20%20%20%20%20%3Cnovo-text%3EBrian%20Kimball%3C%2Fnovo-text%3E%0A%20%20%20%20%20%20%20%20%3C%2Fnovo-stack%3E%0A%20%20%20%20%20%20%3C%2Fnovo-toolbar%3E%0A%20%20%20%20%20%20%3Cnovo-toolbar%20gap%3D%22md%22%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-nav%20%5Boutlet%5D%3D%22pages%22%3E%0A%20%20%20%20%20%20%20%20%20%20%3Cnovo-tab%3EOverview%3C%2Fnovo-tab%3E%0A%20%20%20%20%20%20%20%20%20%20%3Cnovo-tab%3EActivity%3C%2Fnovo-tab%3E%0A%20%20%20%20%20%20%20%20%20%20%3Cnovo-tab%3EFiles%3C%2Fnovo-tab%3E%0A%20%20%20%20%20%20%20%20%3C%2Fnovo-nav%3E%0A%20%20%20%20%20%20%3C%2Fnovo-toolbar%3E%0A%20%20%20%20%20%20%3Cnovo-nav-outlet%20%23pages%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-nav-content%3E%0A%20%20%20%20%20%20%20%20%20%20%3Cdiv%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20SIDENAV%20CONTENT%0A%20%20%20%20%20%20%20%20%20%20%20%20%3Cnovo-label%3EIs%20Mobile%3F%3C%2Fnovo-label%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%3Cnovo-switch%20%5B(ngModel)%5D%3D%22isMobile%22%3E%3C%2Fnovo-switch%3E%0A%20%20%20%20%20%20%20%20%20%20%3C%2Fdiv%3E%0A%20%20%20%20%20%20%20%20%3C%2Fnovo-nav-content%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-nav-content%3E%0A%20%20%20%20%20%20%20%20%20%20%3Ch1%3ETab%202%20Content%3C%2Fh1%3E%0A%20%20%20%20%20%20%20%20%3C%2Fnovo-nav-content%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-nav-content%3E%0A%20%20%20%20%20%20%20%20%20%20%3Ch1%3ETab%203%20Content%3C%2Fh1%3E%0A%20%20%20%20%20%20%20%20%3C%2Fnovo-nav-content%3E%0A%20%20%20%20%20%20%3C%2Fnovo-nav-outlet%3E%0A%0A%20%20%20%20%3C%2Fnovo-layout-content%3E%0A%20%20%3C%2Fnovo-layout-container%3E%0A%3C%2Fdiv%3E`
    },
    'themed-list': {
        title: 'Themed List Example',
        component: ThemedListExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Themed%20List%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'themed-list-example'%2C%0A%20%20%20%20templateUrl%3A%20'themed-list-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'themed-list-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20ThemedListExample%20%7B%0A%20%20public%20pulseItems%3A%20any%3B%0A%0A%20%20constructor()%20%7B%0A%20%20%20%20const%20ONE_HOUR%20%3D%2060%20*%2060%20*%201000%3B%0A%20%20%20%20%2F*%20ms%20*%2F%0A%20%20%20%20const%20TWO_HOURS%20%3D%20ONE_HOUR%20*%202%3B%0A%20%20%20%20const%20THREE_HOURS%20%3D%20ONE_HOUR%20*%203%3B%0A%20%20%20%20const%20currentDate%20%3D%20new%20Date()%3B%0A%0A%20%20%20%20const%20oneHourAgo%20%3D%20currentDate.getTime()%20-%20ONE_HOUR%3B%0A%20%20%20%20const%20twoHoursAgo%20%3D%20currentDate.getTime()%20-%20TWO_HOURS%3B%0A%20%20%20%20const%20threeHoursAgo%20%3D%20currentDate.getTime()%20-%20THREE_HOURS%3B%0A%0A%20%20%20%20%2F*%20%22mockResponse%5B%5D%22%20should%20represent%20a%20REST%20response%20with%20improperly%20formatted%20data.%0A%20%20%20%20%2F%20%20The%20%22buildItems()%22%20function%20is%20taking%20this%20data%20object%20and%20massaging%20it%0A%20%20%20%20%2F%20%20to%20build%20the%20list%20items%20appropriately%20via%20a%20new%20data%20object%20%22pulseItems%5B%5D%22.%0A%20%20%20%20%2F%20%20In%20page1.html%20you%20can%20see%20how%20the%20new%20object%20builds%20a%20list%20of%20items.%0A%20%20%20%20%2F%20%20-%20%40asibilia%0A%20%20%20%20*%2F%0A%0A%20%20%20%20const%20mockResponse%20%3D%20%5B%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20type%3A%20'opportunity'%2C%0A%20%20%20%20%20%20%20%20dateCreated%3A%20oneHourAgo%2C%0A%20%20%20%20%20%20%20%20sentiment%3A%20%7B%0A%20%20%20%20%20%20%20%20%20%20rating%3A%20'negative'%2C%0A%20%20%20%20%20%20%20%20%20%20type%3A%20'engagement'%2C%0A%20%20%20%20%20%20%20%20%20%20comment%3A%20'No%20emails%20in%20last%2010%20days'%2C%0A%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20user%3A%20%7B%0A%20%20%20%20%20%20%20%20%20%20firstName%3A%20'Steph'%2C%0A%20%20%20%20%20%20%20%20%20%20lastName%3A%20'Curry'%2C%0A%20%20%20%20%20%20%20%20%20%20company%3A%20'Wells%20Fargo'%2C%0A%20%20%20%20%20%20%20%20%20%20location%3A%20'Golden%20State%2C%20CA'%2C%0A%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20type%3A%20'opportunity'%2C%0A%20%20%20%20%20%20%20%20dateCreated%3A%20twoHoursAgo%2C%0A%20%20%20%20%20%20%20%20sentiment%3A%20%7B%0A%20%20%20%20%20%20%20%20%20%20rating%3A%20'negative'%2C%0A%20%20%20%20%20%20%20%20%20%20type%3A%20'probability'%2C%0A%20%20%20%20%20%20%20%20%20%20comment%3A%20'Now%20has%20low%20probability%20to%20close'%2C%0A%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20user%3A%20%7B%0A%20%20%20%20%20%20%20%20%20%20firstName%3A%20'Lebron'%2C%0A%20%20%20%20%20%20%20%20%20%20lastName%3A%20'James'%2C%0A%20%20%20%20%20%20%20%20%20%20company%3A%20'Amazon'%2C%0A%20%20%20%20%20%20%20%20%20%20location%3A%20'Cleveland%2C%20OH'%2C%0A%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20type%3A%20'company'%2C%0A%20%20%20%20%20%20%20%20dateCreated%3A%20threeHoursAgo%2C%0A%20%20%20%20%20%20%20%20sentiment%3A%20%7B%0A%20%20%20%20%20%20%20%20%20%20rating%3A%20'positive'%2C%0A%20%20%20%20%20%20%20%20%20%20type%3A%20'connection'%2C%0A%20%20%20%20%20%20%20%20%20%20comment%3A%20'New%20connection'%2C%0A%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20user%3A%20%7B%0A%20%20%20%20%20%20%20%20%20%20firstName%3A%20'Derrick'%2C%0A%20%20%20%20%20%20%20%20%20%20lastName%3A%20'Rose'%2C%0A%20%20%20%20%20%20%20%20%20%20company%3A%20'Walmart'%2C%0A%20%20%20%20%20%20%20%20%20%20location%3A%20'Chicago%2C%20IL'%2C%0A%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%5D%3B%0A%0A%20%20%20%20this.pulseItems%20%3D%20%5B%5D%3B%0A%0A%20%20%20%20this.buildItems(mockResponse)%3B%0A%20%20%7D%0A%0A%20%20buildItems(resp)%20%7B%0A%20%20%20%20for%20(const%20obj%20of%20resp)%20%7B%0A%20%20%20%20%20%20const%20item%3A%20any%20%3D%20%7B%7D%3B%0A%0A%20%20%20%20%20%20%2F*%0A%20%20%20%20%20%20%7C%7C%7C%20This%20is%20the%20item%20structure%20to%20be%20pushed%20to%20pulseItems%5B%5D%20and%20used%0A%20%20%20%20%20%20%7C%7C%7C%20to%20build%20the%20list%20%26%20items.%0A%20%20%20%20%20%20%7C%0A%20%20%20%20%20%20%7C%20%20%20item%20%3D%20%7B%0A%20%20%20%20%20%20%7C%20%20%20%20%20%20%20%22name%22%3A%20''%2C%0A%20%20%20%20%20%20%7C%20%20%20%20%20%20%20%22type%22%3A%20''%2C%0A%20%20%20%20%20%20%7C%20%20%20%20%20%20%20%22icon%22%3A%20%7B%0A%20%20%20%20%20%20%7C%20%20%20%20%20%20%20%20%20%20%20%22name%22%3A%20''%2C%0A%20%20%20%20%20%20%7C%20%20%20%20%20%20%20%20%20%20%20%22sentiment%22%3A%20''%0A%20%20%20%20%20%20%7C%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7C%20%20%20%20%20%20%20%22comment%22%3A%20''%2C%0A%20%20%20%20%20%20%7C%20%20%20%20%20%20%20%22timeAgo%22%3A%20''%0A%20%20%20%20%20%20%7C%20%20%20%20%7D%0A%20%20%20%20%20%20%7C%0A%20%20%20%20%20%20*%2F%0A%0A%20%20%20%20%20%20item.name%20%3D%20obj.user.company%3B%0A%20%20%20%20%20%20item.type%20%3D%20obj.type%3B%0A%20%20%20%20%20%20item.icon%20%3D%20%7B%7D%3B%0A%0A%20%20%20%20%20%20if%20(obj.sentiment.type%20%3D%3D%3D%20'connection')%20%7B%0A%20%20%20%20%20%20%20%20item.icon.name%20%3D%20'bhi-add-o'%3B%0A%20%20%20%20%20%20%7D%0A%0A%20%20%20%20%20%20if%20(obj.sentiment.type%20%3D%3D%3D%20'engagement')%20%7B%0A%20%20%20%20%20%20%20%20item.icon.name%20%3D%20obj.sentiment.rating%20%3D%3D%3D%20'positive'%20%3F%20'bhi-trending-up'%20%3A%20'bhi-trending-down'%3B%0A%20%20%20%20%20%20%7D%0A%0A%20%20%20%20%20%20item.icon.sentiment%20%3D%20obj.sentiment.rating%3B%0A%20%20%20%20%20%20item.comment%20%3D%20obj.sentiment.comment%3B%0A%20%20%20%20%20%20item.timeAgo%20%3D%20obj.dateCreated%3B%0A%0A%20%20%20%20%20%20this.pulseItems.push(item)%3B%0A%20%20%20%20%7D%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cheader%3E%0A%20%20%20%20%3Cnovo-list%20theme%3D%22navigation%22%20direction%3D%22vertical%22%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-list-item%20*ngFor%3D%22let%20item%20of%20pulseItems%22%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%3Citem-header%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Citem-avatar%20%5Bicon%5D%3D%22item.type%22%3E%3C%2Fitem-avatar%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Citem-title%3E%7B%7Bitem.name%7D%7D%3C%2Fitem-title%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%3C%2Fitem-header%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%3Citem-content%20direction%3D%22vertical%22%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Cp%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Ci%20*ngIf%3D%22item.icon.name%22%20class%3D%22%7B%7Bitem.icon.name%7D%7D%20%7B%7Bitem.icon.sentiment%7D%7D%22%3E%3C%2Fi%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7B%7Bitem.comment%7D%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3C%2Fp%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Cspan%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Ci%20class%3D%22bhi-clock%22%3E%3C%2Fi%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7B%7Bitem.timeAgo%20%7C%20date%3A%20'shortTime'%7D%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3C%2Fspan%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%3C%2Fitem-content%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%3Citem-end%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Ci%20class%3D%22bhi-next%22%3E%3C%2Fi%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%3C%2Fitem-end%3E%0A%20%20%20%20%20%20%20%20%3C%2Fnovo-list-item%3E%0A%20%20%20%20%3C%2Fnovo-list%3E%0A%3C%2Fheader%3E%0A`
    },
    'basic-list': {
        title: 'Basic List Layout',
        component: BasicListExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Basic%20List%20Layout%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'basic-list-example'%2C%0A%20%20%20%20templateUrl%3A%20'basic-list-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'basic-list-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20BasicListExample%20%7B%0A%20%20public%20pulseItems%3A%20any%3B%0A%0A%20%20constructor()%20%7B%0A%20%20%20%20const%20ONE_HOUR%20%3D%2060%20*%2060%20*%201000%3B%0A%20%20%20%20%2F*%20ms%20*%2F%0A%20%20%20%20const%20TWO_HOURS%20%3D%20ONE_HOUR%20*%202%3B%0A%20%20%20%20const%20THREE_HOURS%20%3D%20ONE_HOUR%20*%203%3B%0A%20%20%20%20const%20currentDate%20%3D%20new%20Date()%3B%0A%0A%20%20%20%20const%20oneHourAgo%20%3D%20currentDate.getTime()%20-%20ONE_HOUR%3B%0A%20%20%20%20const%20twoHoursAgo%20%3D%20currentDate.getTime()%20-%20TWO_HOURS%3B%0A%20%20%20%20const%20threeHoursAgo%20%3D%20currentDate.getTime()%20-%20THREE_HOURS%3B%0A%0A%20%20%20%20%2F*%20%22mockResponse%5B%5D%22%20should%20represent%20a%20REST%20response%20with%20improperly%20formatted%20data.%0A%20%20%20%20%2F%20%20The%20%22buildItems()%22%20function%20is%20taking%20this%20data%20object%20and%20massaging%20it%0A%20%20%20%20%2F%20%20to%20build%20the%20list%20items%20appropriately%20via%20a%20new%20data%20object%20%22pulseItems%5B%5D%22.%0A%20%20%20%20%2F%20%20In%20page1.html%20you%20can%20see%20how%20the%20new%20object%20builds%20a%20list%20of%20items.%0A%20%20%20%20%2F%20%20-%20%40asibilia%0A%20%20%20%20*%2F%0A%0A%20%20%20%20const%20mockResponse%20%3D%20%5B%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20type%3A%20'opportunity'%2C%0A%20%20%20%20%20%20%20%20dateCreated%3A%20oneHourAgo%2C%0A%20%20%20%20%20%20%20%20sentiment%3A%20%7B%0A%20%20%20%20%20%20%20%20%20%20rating%3A%20'negative'%2C%0A%20%20%20%20%20%20%20%20%20%20type%3A%20'engagement'%2C%0A%20%20%20%20%20%20%20%20%20%20comment%3A%20'No%20emails%20in%20last%2010%20days'%2C%0A%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20user%3A%20%7B%0A%20%20%20%20%20%20%20%20%20%20firstName%3A%20'Steph'%2C%0A%20%20%20%20%20%20%20%20%20%20lastName%3A%20'Curry'%2C%0A%20%20%20%20%20%20%20%20%20%20company%3A%20'Wells%20Fargo'%2C%0A%20%20%20%20%20%20%20%20%20%20location%3A%20'Golden%20State%2C%20CA'%2C%0A%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20type%3A%20'opportunity'%2C%0A%20%20%20%20%20%20%20%20dateCreated%3A%20twoHoursAgo%2C%0A%20%20%20%20%20%20%20%20sentiment%3A%20%7B%0A%20%20%20%20%20%20%20%20%20%20rating%3A%20'negative'%2C%0A%20%20%20%20%20%20%20%20%20%20type%3A%20'probability'%2C%0A%20%20%20%20%20%20%20%20%20%20comment%3A%20'Now%20has%20low%20probability%20to%20close'%2C%0A%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20user%3A%20%7B%0A%20%20%20%20%20%20%20%20%20%20firstName%3A%20'Lebron'%2C%0A%20%20%20%20%20%20%20%20%20%20lastName%3A%20'James'%2C%0A%20%20%20%20%20%20%20%20%20%20company%3A%20'Amazon'%2C%0A%20%20%20%20%20%20%20%20%20%20location%3A%20'Cleveland%2C%20OH'%2C%0A%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20type%3A%20'company'%2C%0A%20%20%20%20%20%20%20%20dateCreated%3A%20threeHoursAgo%2C%0A%20%20%20%20%20%20%20%20sentiment%3A%20%7B%0A%20%20%20%20%20%20%20%20%20%20rating%3A%20'positive'%2C%0A%20%20%20%20%20%20%20%20%20%20type%3A%20'connection'%2C%0A%20%20%20%20%20%20%20%20%20%20comment%3A%20'New%20connection'%2C%0A%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20user%3A%20%7B%0A%20%20%20%20%20%20%20%20%20%20firstName%3A%20'Derrick'%2C%0A%20%20%20%20%20%20%20%20%20%20lastName%3A%20'Rose'%2C%0A%20%20%20%20%20%20%20%20%20%20company%3A%20'Walmart'%2C%0A%20%20%20%20%20%20%20%20%20%20location%3A%20'Chicago%2C%20IL'%2C%0A%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%5D%3B%0A%0A%20%20%20%20this.pulseItems%20%3D%20%5B%5D%3B%0A%0A%20%20%20%20this.buildItems(mockResponse)%3B%0A%20%20%7D%0A%0A%20%20buildItems(resp)%20%7B%0A%20%20%20%20for%20(const%20obj%20of%20resp)%20%7B%0A%20%20%20%20%20%20const%20item%3A%20any%20%3D%20%7B%7D%3B%0A%0A%20%20%20%20%20%20%2F*%0A%20%20%20%20%20%20%7C%7C%7C%20This%20is%20the%20item%20structure%20to%20be%20pushed%20to%20pulseItems%5B%5D%20and%20used%0A%20%20%20%20%20%20%7C%7C%7C%20to%20build%20the%20list%20%26%20items.%0A%20%20%20%20%20%20%7C%0A%20%20%20%20%20%20%7C%20%20%20item%20%3D%20%7B%0A%20%20%20%20%20%20%7C%20%20%20%20%20%20%20%22name%22%3A%20''%2C%0A%20%20%20%20%20%20%7C%20%20%20%20%20%20%20%22type%22%3A%20''%2C%0A%20%20%20%20%20%20%7C%20%20%20%20%20%20%20%22icon%22%3A%20%7B%0A%20%20%20%20%20%20%7C%20%20%20%20%20%20%20%20%20%20%20%22name%22%3A%20''%2C%0A%20%20%20%20%20%20%7C%20%20%20%20%20%20%20%20%20%20%20%22sentiment%22%3A%20''%0A%20%20%20%20%20%20%7C%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7C%20%20%20%20%20%20%20%22comment%22%3A%20''%2C%0A%20%20%20%20%20%20%7C%20%20%20%20%20%20%20%22timeAgo%22%3A%20''%0A%20%20%20%20%20%20%7C%20%20%20%20%7D%0A%20%20%20%20%20%20%7C%0A%20%20%20%20%20%20*%2F%0A%0A%20%20%20%20%20%20item.name%20%3D%20obj.user.company%3B%0A%20%20%20%20%20%20item.type%20%3D%20obj.type%3B%0A%20%20%20%20%20%20item.icon%20%3D%20%7B%7D%3B%0A%0A%20%20%20%20%20%20if%20(obj.sentiment.type%20%3D%3D%3D%20'connection')%20%7B%0A%20%20%20%20%20%20%20%20item.icon.name%20%3D%20'bhi-add-o'%3B%0A%20%20%20%20%20%20%7D%0A%0A%20%20%20%20%20%20if%20(obj.sentiment.type%20%3D%3D%3D%20'engagement')%20%7B%0A%20%20%20%20%20%20%20%20item.icon.name%20%3D%20obj.sentiment.rating%20%3D%3D%3D%20'positive'%20%3F%20'bhi-trending-up'%20%3A%20'bhi-trending-down'%3B%0A%20%20%20%20%20%20%7D%0A%0A%20%20%20%20%20%20item.icon.sentiment%20%3D%20obj.sentiment.rating%3B%0A%20%20%20%20%20%20item.comment%20%3D%20obj.sentiment.comment%3B%0A%20%20%20%20%20%20item.timeAgo%20%3D%20obj.dateCreated%3B%0A%0A%20%20%20%20%20%20this.pulseItems.push(item)%3B%0A%20%20%20%20%7D%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cheader%3E%0A%20%20%20%20%3Cnovo-list%20direction%3D%22vertical%22%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-list-item%20*ngFor%3D%22let%20item%20of%20pulseItems%22%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%3Citem-header%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Citem-avatar%20%5Bicon%5D%3D%22item.type%22%3E%3C%2Fitem-avatar%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Citem-title%3E%7B%7Bitem.name%7D%7D%3C%2Fitem-title%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Citem-header-end%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Cspan%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Ci%20class%3D%22bhi-clock%22%3E%3C%2Fi%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7B%7Bitem.timeAgo%20%7C%20date%3A%20'shortTime'%7D%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3C%2Fspan%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3C%2Fitem-header-end%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%3C%2Fitem-header%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%3Citem-content%20direction%3D%22vertical%22%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Cp%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Ci%20*ngIf%3D%22item.icon.name%22%20class%3D%22%7B%7Bitem.icon.name%7D%7D%20%7B%7Bitem.icon.sentiment%7D%7D%22%3E%3C%2Fi%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7B%7Bitem.comment%7D%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3C%2Fp%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%3C%2Fitem-content%3E%0A%20%20%20%20%20%20%20%20%3C%2Fnovo-list-item%3E%0A%20%20%20%20%3C%2Fnovo-list%3E%0A%3C%2Fheader%3E%0A`
    },
    'header-subtitle': {
        title: 'Header with Subtitle Example',
        component: HeaderSubtitleExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0Aimport%20%7B%20NovoToastService%20%7D%20from%20'novo-elements'%3B%0A%0Aconst%20HEADER_THEMES%20%3D%20%5B'company'%2C%20'job'%2C%20'candidate'%2C%20'contact'%2C%20'opportunity'%2C%20'lead'%2C%20'light'%2C%20'white'%5D%3B%0Aconst%20HEADER_ICONS%20%3D%20%5B'company'%2C%20'job'%2C%20'candidate'%2C%20'person'%2C%20'opportunity'%2C%20'lead'%2C%20'bolt'%2C%20'shield'%5D%3B%0A%0A%2F**%0A%20*%20%40title%20Header%20with%20Subtitle%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'header-subtitle-example'%2C%0A%20%20%20%20templateUrl%3A%20'header-subtitle-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'header-subtitle-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20HeaderSubtitleExample%20%7B%0A%20%20public%20theme%3A%20string%20%3D%20'company'%3B%0A%20%20public%20icon%3A%20string%20%3D%20'company'%3B%0A%20%20private%20options%3A%20any%3B%0A%20%20private%20themeIndex%3A%20number%20%3D%200%3B%0A%0A%20%20constructor(private%20toaster%3A%20NovoToastService)%20%7B%0A%20%20%20%20this.toaster%20%3D%20toaster%3B%0A%20%20%20%20this.options%20%3D%20%7B%0A%20%20%20%20%20%20title%3A%20'Title'%2C%0A%20%20%20%20%20%20message%3A%20'Some%20Message...'%2C%0A%20%20%20%20%20%20theme%3A%20'ocean'%2C%0A%20%20%20%20%20%20icon%3A%20'clipboard'%2C%0A%20%20%20%20%20%20position%3A%20'growlTopRight'%2C%0A%20%20%20%20%7D%3B%0A%20%20%7D%0A%0A%20%20changeTheme()%20%7B%0A%20%20%20%20this.themeIndex%20%3D%20this.themeIndex%20%3D%3D%3D%20HEADER_THEMES.length%20-%201%20%3F%200%20%3A%20this.themeIndex%20%2B%201%3B%0A%20%20%20%20this.theme%20%3D%20HEADER_THEMES%5Bthis.themeIndex%5D%3B%0A%20%20%20%20this.icon%20%3D%20HEADER_ICONS%5Bthis.themeIndex%5D%3B%0A%20%20%7D%0A%0A%20%20catchEv(type%2C%20ev)%20%7B%0A%20%20%20%20%2F%2F%20Set%20toast%20options%0A%20%20%20%20this.options%20%3D%20%7B%0A%20%20%20%20%20%20title%3A%20%60%24%7Btype%7D%60%2C%0A%20%20%20%20%20%20message%3A%20%60%24%7Bev%7D%20fired...%60%2C%0A%20%20%20%20%20%20theme%3A%20'ocean'%2C%0A%20%20%20%20%20%20icon%3A%20%60%24%7Btype%7D%60%2C%0A%20%20%20%20%20%20position%3A%20'growlTopRight'%2C%0A%20%20%20%20%7D%3B%0A%0A%20%20%20%20%2F%2F%20Fire%20toast%0A%20%20%20%20this.toaster.alert(this.options)%3B%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cnovo-header%20%5Btheme%5D%3D%22theme%22%3E%0A%20%20%3Cnovo-action%20icon%3D%22convert%22%20tooltip%3D%22Change%20Theme%22%20(click)%3D%22changeTheme()%22%3E%3C%2Fnovo-action%3E%0A%20%20%3Cnovo-action%20icon%3D%22refresh%22%20tooltip%3D%22Show%20Popup%22%20(click)%3D%22catchEv('refresh'%2C%20%24event)%22%3E%3C%2Fnovo-action%3E%0A%20%20%3Cnovo-action%20icon%3D%22times%22%20tooltip%3D%22Show%20Popup%22%20(click)%3D%22catchEv('close'%2C%20%24event)%22%3E%3C%2Fnovo-action%3E%0A%0A%20%20%3Cnovo-icon%3E%7B%7Bicon%7D%7D%3C%2Fnovo-icon%3E%0A%20%20%3Cnovo-title%3EHeader%3C%2Fnovo-title%3E%0A%20%20%3Cnovo-title%20size%3D%22sm%22%3Ewith%20subtitle%3C%2Fnovo-title%3E%0A%3C%2Fnovo-header%3E`
    },
    'header-searchbar': {
        title: 'Header with SearchBar Example',
        component: HeaderSearchbarExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0Aimport%20%7B%20NovoToastService%20%7D%20from%20'novo-elements'%3B%0A%0Aconst%20HEADER_THEMES%20%3D%20%5B'company'%2C%20'job'%2C%20'candidate'%2C%20'contact'%2C%20'opportunity'%2C%20'lead'%2C%20'light'%2C%20'white'%5D%3B%0Aconst%20HEADER_ICONS%20%3D%20%5B'company'%2C%20'job'%2C%20'candidate'%2C%20'person'%2C%20'opportunity'%2C%20'lead'%2C%20'bolt'%2C%20'shield'%5D%3B%0A%0A%2F**%0A%20*%20%40title%20Header%20with%20SearchBar%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'header-searchbar-example'%2C%0A%20%20%20%20templateUrl%3A%20'header-searchbar-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'header-searchbar-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20HeaderSearchbarExample%20%7B%0A%20%20public%20theme%3A%20string%20%3D%20'company'%3B%0A%20%20public%20icon%3A%20string%20%3D%20'company'%3B%0A%20%20private%20options%3A%20any%3B%0A%20%20public%20isChecked%3A%20boolean%3B%0A%20%20private%20themeIndex%3A%20number%20%3D%200%3B%0A%0A%20%20constructor(private%20toaster%3A%20NovoToastService)%20%7B%0A%20%20%20%20this.toaster%20%3D%20toaster%3B%0A%20%20%20%20this.options%20%3D%20%7B%0A%20%20%20%20%20%20title%3A%20'Title'%2C%0A%20%20%20%20%20%20message%3A%20'Some%20Message...'%2C%0A%20%20%20%20%20%20theme%3A%20'ocean'%2C%0A%20%20%20%20%20%20icon%3A%20'clipboard'%2C%0A%20%20%20%20%20%20position%3A%20'growlTopRight'%2C%0A%20%20%20%20%7D%3B%0A%20%20%7D%0A%0A%20%20changeTheme()%20%7B%0A%20%20%20%20this.themeIndex%20%3D%20this.themeIndex%20%3D%3D%3D%20HEADER_THEMES.length%20-%201%20%3F%200%20%3A%20this.themeIndex%20%2B%201%3B%0A%20%20%20%20this.theme%20%3D%20HEADER_THEMES%5Bthis.themeIndex%5D%3B%0A%20%20%20%20this.icon%20%3D%20HEADER_ICONS%5Bthis.themeIndex%5D%3B%0A%20%20%7D%0A%0A%20%20catchEv(type%2C%20ev)%20%7B%0A%20%20%20%20%2F%2F%20Set%20toast%20options%0A%20%20%20%20this.options%20%3D%20%7B%0A%20%20%20%20%20%20title%3A%20%60%24%7Btype%7D%60%2C%0A%20%20%20%20%20%20message%3A%20%60%24%7Bev%7D%20fired...%60%2C%0A%20%20%20%20%20%20theme%3A%20'ocean'%2C%0A%20%20%20%20%20%20icon%3A%20%60%24%7Btype%7D%60%2C%0A%20%20%20%20%20%20position%3A%20'growlTopRight'%2C%0A%20%20%20%20%7D%3B%0A%0A%20%20%20%20%2F%2F%20Fire%20toast%0A%20%20%20%20this.toaster.alert(this.options)%3B%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cheader%20%5Btheme%5D%3D%22theme%22%3E%0A%20%20%3Cnovo-icon%20size%3D%222xl%22%3E%7B%7Bicon%7D%7D%3C%2Fnovo-icon%3E%0A%20%20%3Cnovo-title%20size%3D%222xl%22%3EHeader%3C%2Fnovo-title%3E%0A%20%20%3Csection%20class%3D%22header-content%22%3E%0A%20%20%20%20%3Cnovo-search%20%5Btheme%5D%3D%22theme%22%3E%3C%2Fnovo-search%3E%0A%20%20%3C%2Fsection%3E%0A%0A%20%20%3Cnovo-action%20icon%3D%22convert%22%20tooltip%3D%22Change%20Theme%22%20(click)%3D%22changeTheme()%22%3E%3C%2Fnovo-action%3E%0A%20%20%3Cnovo-action%20icon%3D%22refresh%22%20tooltip%3D%22Show%20Popup%22%20(click)%3D%22catchEv('refresh'%2C%20%24event)%22%3E%3C%2Fnovo-action%3E%0A%20%20%3Cnovo-action%20icon%3D%22times%22%20tooltip%3D%22Show%20Popup%22%20(click)%3D%22catchEv('close'%2C%20%24event)%22%3E%3C%2Fnovo-action%3E%0A%0A%3C%2Fheader%3E%0A%3Cbr%20%2F%3E%0A%3Cnovo-checkbox%20label%3D%22Always%20Open%3F%22%20%5B(ngModel)%5D%3D%22isChecked%22%3E%3C%2Fnovo-checkbox%3E`
    },
    'condensed-header': {
        title: 'Condensed Header Example',
        component: CondensedHeaderExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0Aimport%20%7B%20NovoToastService%20%7D%20from%20'novo-elements'%3B%0A%0Aconst%20HEADER_THEMES%20%3D%20%5B'company'%2C%20'job'%2C%20'candidate'%2C%20'contact'%2C%20'opportunity'%2C%20'lead'%2C%20'light'%2C%20'white'%5D%3B%0Aconst%20HEADER_ICONS%20%3D%20%5B'company'%2C%20'job'%2C%20'candidate'%2C%20'person'%2C%20'opportunity'%2C%20'lead'%2C%20'bolt'%2C%20'shield'%5D%3B%0A%0A%2F**%0A%20*%20%40title%20Condensed%20Header%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'condensed-header-example'%2C%0A%20%20%20%20templateUrl%3A%20'condensed-header-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'condensed-header-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20CondensedHeaderExample%20%7B%0A%20%20public%20theme%3A%20string%20%3D%20'company'%3B%0A%20%20public%20icon%3A%20string%20%3D%20'company'%3B%0A%20%20public%20options%3A%20any%3B%0A%20%20public%20themeIndex%3A%20number%20%3D%200%3B%0A%0A%20%20constructor(private%20toaster%3A%20NovoToastService)%20%7B%0A%20%20%20%20this.toaster%20%3D%20toaster%3B%0A%20%20%20%20this.options%20%3D%20%7B%0A%20%20%20%20%20%20title%3A%20'Title'%2C%0A%20%20%20%20%20%20message%3A%20'Some%20Message...'%2C%0A%20%20%20%20%20%20theme%3A%20'ocean'%2C%0A%20%20%20%20%20%20icon%3A%20'clipboard'%2C%0A%20%20%20%20%20%20position%3A%20'growlTopRight'%2C%0A%20%20%20%20%7D%3B%0A%20%20%7D%0A%0A%20%20changeTheme()%20%7B%0A%20%20%20%20this.themeIndex%20%3D%20this.themeIndex%20%3D%3D%3D%20HEADER_THEMES.length%20-%201%20%3F%200%20%3A%20this.themeIndex%20%2B%201%3B%0A%20%20%20%20this.theme%20%3D%20HEADER_THEMES%5Bthis.themeIndex%5D%3B%0A%20%20%20%20this.icon%20%3D%20HEADER_ICONS%5Bthis.themeIndex%5D%3B%0A%20%20%7D%0A%0A%20%20catchEv(type%2C%20ev)%20%7B%0A%20%20%20%20%2F%2F%20Set%20toast%20options%0A%20%20%20%20this.options%20%3D%20%7B%0A%20%20%20%20%20%20title%3A%20%60%24%7Btype%7D%60%2C%0A%20%20%20%20%20%20message%3A%20%60%24%7Bev%7D%20fired...%60%2C%0A%20%20%20%20%20%20theme%3A%20'ocean'%2C%0A%20%20%20%20%20%20icon%3A%20%60%24%7Btype%7D%60%2C%0A%20%20%20%20%20%20position%3A%20'growlTopRight'%2C%0A%20%20%20%20%7D%3B%0A%0A%20%20%20%20%2F%2F%20Fire%20toast%0A%20%20%20%20this.toaster.alert(this.options)%3B%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cheader%20%5Btheme%5D%3D%22theme%22%20condensed%3E%0A%20%20%3Cnovo-action%20icon%3D%22convert%22%20tooltip%3D%22Change%20Theme%22%20(click)%3D%22changeTheme()%22%3E%3C%2Fnovo-action%3E%0A%20%20%3Cnovo-action%20icon%3D%22refresh%22%20tooltip%3D%22Show%20Popup%22%20(click)%3D%22catchEv('refresh'%2C%20%24event)%22%3E%3C%2Fnovo-action%3E%0A%20%20%3Cnovo-action%20icon%3D%22times%22%20tooltip%3D%22Show%20Popup%22%20(click)%3D%22catchEv('close'%2C%20%24event)%22%3E%3C%2Fnovo-action%3E%0A%0A%20%20%3Cnovo-icon%20color%3D%22white%22%20%5Bname%5D%3D%22icon%22%3E%7B%7Bicon%7D%7D%3C%2Fnovo-icon%3E%0A%20%20%3Cnovo-title%3E%0A%20%20%20%20%3Cspan%20class%3D%22id%22%3E123456%3C%2Fspan%3E%0A%20%20%20%20%3Cnovo-divider%20vertical%3E%3C%2Fnovo-divider%3E%0A%20%20%20%20%3Cspan%20class%3D%22name%22%3ESteve%20Jobs%3C%2Fspan%3E%0A%20%20%3C%2Fnovo-title%3E%0A%20%20%3Csection%20class%3D%22links%22%3E%0A%20%20%20%20%3Cbutton%20theme%3D%22icon%22%20color%3D%22white%22%20%5Bicon%5D%3D%22'google'%22%3E%3C%2Fbutton%3E%0A%20%20%20%20%3Cbutton%20theme%3D%22icon%22%20color%3D%22white%22%20%5Bicon%5D%3D%22'linkedin-f'%22%3E%3C%2Fbutton%3E%0A%20%20%20%20%3Cbutton%20theme%3D%22icon%22%20color%3D%22white%22%20%5Bicon%5D%3D%22'location'%22%3E%3C%2Fbutton%3E%0A%20%20%3C%2Fsection%3E%0A%3C%2Fheader%3E%0A%3Cnovo-nav%20theme%3D%22white%22%20direction%3D%22horizontal%22%3E%0A%20%20%3Cnovo-tab%3E%0A%20%20%20%20%3Cspan%3EOverview%3C%2Fspan%3E%0A%20%20%3C%2Fnovo-tab%3E%0A%20%20%3Cnovo-tab%3E%0A%20%20%20%20%3Cspan%3EActivity%3C%2Fspan%3E%0A%20%20%3C%2Fnovo-tab%3E%0A%20%20%3Cnovo-tab%3E%0A%20%20%20%20%3Cspan%3EEmail%3C%2Fspan%3E%0A%20%20%3C%2Fnovo-tab%3E%0A%3C%2Fnovo-nav%3E`
    },
    'basic-header': {
        title: 'Basic Header Example',
        component: BasicHeaderExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0Aimport%20%7B%20NovoToastService%20%7D%20from%20'novo-elements'%3B%0A%0Aconst%20HEADER_THEMES%20%3D%20%5B'company'%2C%20'job'%2C%20'candidate'%2C%20'contact'%2C%20'opportunity'%2C%20'lead'%2C%20'light'%2C%20'white'%5D%3B%0Aconst%20HEADER_ICONS%20%3D%20%5B'company'%2C%20'job'%2C%20'candidate'%2C%20'person'%2C%20'opportunity'%2C%20'lead'%2C%20'bolt'%2C%20'shield'%5D%3B%0A%0A%2F**%0A%20*%20%40title%20Basic%20Header%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'basic-header-example'%2C%0A%20%20%20%20templateUrl%3A%20'basic-header-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'basic-header-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20BasicHeaderExample%20%7B%0A%20%20public%20theme%3A%20string%20%3D%20'company'%3B%0A%20%20public%20icon%3A%20string%20%3D%20'company'%3B%0A%20%20private%20options%3A%20any%3B%0A%20%20private%20themeIndex%3A%20number%20%3D%200%3B%0A%0A%20%20constructor(private%20toaster%3A%20NovoToastService)%20%7B%0A%20%20%20%20this.toaster%20%3D%20toaster%3B%0A%20%20%20%20this.options%20%3D%20%7B%0A%20%20%20%20%20%20title%3A%20'Title'%2C%0A%20%20%20%20%20%20message%3A%20'Some%20Message...'%2C%0A%20%20%20%20%20%20theme%3A%20'ocean'%2C%0A%20%20%20%20%20%20icon%3A%20'clipboard'%2C%0A%20%20%20%20%20%20position%3A%20'growlTopRight'%2C%0A%20%20%20%20%7D%3B%0A%20%20%7D%0A%0A%20%20changeTheme()%20%7B%0A%20%20%20%20this.themeIndex%20%3D%20this.themeIndex%20%3D%3D%3D%20HEADER_THEMES.length%20-%201%20%3F%200%20%3A%20this.themeIndex%20%2B%201%3B%0A%20%20%20%20this.theme%20%3D%20HEADER_THEMES%5Bthis.themeIndex%5D%3B%0A%20%20%20%20this.icon%20%3D%20HEADER_ICONS%5Bthis.themeIndex%5D%3B%0A%20%20%7D%0A%0A%20%20catchEv(type%2C%20ev)%20%7B%0A%20%20%20%20%2F%2F%20Set%20toast%20options%0A%20%20%20%20this.options%20%3D%20%7B%0A%20%20%20%20%20%20title%3A%20%60%24%7Btype%7D%60%2C%0A%20%20%20%20%20%20message%3A%20%60%24%7Bev%7D%20fired...%60%2C%0A%20%20%20%20%20%20theme%3A%20'ocean'%2C%0A%20%20%20%20%20%20icon%3A%20%60%24%7Btype%7D%60%2C%0A%20%20%20%20%20%20position%3A%20'growlTopRight'%2C%0A%20%20%20%20%7D%3B%0A%0A%20%20%20%20%2F%2F%20Fire%20toast%0A%20%20%20%20this.toaster.alert(this.options)%3B%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cheader%20%5Baccent%5D%3D%22theme%22%3E%0A%20%20%3Cnovo-action%20icon%3D%22convert%22%20tooltip%3D%22Change%20Theme%22%20(click)%3D%22changeTheme()%22%3E%3C%2Fnovo-action%3E%0A%20%20%3Cnovo-action%20icon%3D%22refresh%22%20tooltip%3D%22Show%20Popup%22%20(click)%3D%22catchEv('refresh'%2C%20%24event)%22%3E%3C%2Fnovo-action%3E%0A%20%20%3Cnovo-action%20icon%3D%22times%22%20tooltip%3D%22Show%20Popup%22%20(click)%3D%22catchEv('close'%2C%20%24event)%22%3E%3C%2Fnovo-action%3E%0A%0A%20%20%3C!--%20%3Cnovo-icon%20larger%3E%7B%7Bicon%7D%7D%3C%2Fnovo-icon%3E%20--%3E%0A%20%20%3Cnovo-title%20larger%3E%0A%20%20%20%20%3Cnovo-icon%3E%7B%7Bicon%7D%7D%3C%2Fnovo-icon%3E%0A%20%20%20%20%3Cspan%3EFerdinand%20del%20Toro%3C%2Fspan%3E%0A%20%20%3C%2Fnovo-title%3E%0A%20%20%3Csection%3E%0A%20%20%20%20Extra%20Info%0A%20%20%3C%2Fsection%3E%0A%20%20%3Cnovo-nav%20direction%3D%22horizontal%22%3E%0A%20%20%20%20%3Cnovo-tab%3E%0A%20%20%20%20%20%20%3Cspan%3EOverview%3C%2Fspan%3E%0A%20%20%20%20%3C%2Fnovo-tab%3E%0A%20%20%20%20%3Cnovo-tab%3E%0A%20%20%20%20%20%20%3Cspan%3EActivity%3C%2Fspan%3E%0A%20%20%20%20%3C%2Fnovo-tab%3E%0A%20%20%20%20%3Cnovo-tab%3E%0A%20%20%20%20%20%20%3Cspan%3EEmail%3C%2Fspan%3E%0A%20%20%20%20%3C%2Fnovo-tab%3E%0A%20%20%3C%2Fnovo-nav%3E%0A%3C%2Fheader%3E`
    },
    'lazy-expansion': {
        title: 'Lazy Instaniated Content with Expansion',
        component: LazyExpansionExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Lazy%20Instaniated%20Content%20with%20Expansion%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'lazy-expansion-example'%2C%0A%20%20%20%20templateUrl%3A%20'lazy-expansion-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'lazy-expansion-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20LazyExpansionExample%20%7B%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cnovo-expansion-panel%3E%0A%20%20%20%20%3Cnovo-expansion-panel-header%3E%0A%20%20%20%20%20%20This%20is%20the%20expansion%20title%0A%20%20%20%20%3C%2Fnovo-expansion-panel-header%3E%0A%0A%20%20%20%20%3Cng-template%20matExpansionPanelContent%3E%0A%20%20%20%20%20%20Some%20deferred%20content%0A%20%20%20%20%3C%2Fng-template%3E%0A%3C%2Fnovo-expansion-panel%3E%0A`
    },
    'basic-expansion': {
        title: 'Dialogue buttons',
        component: BasicExpansionExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Dialogue%20buttons%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'basic-expansion-example'%2C%0A%20%20%20%20templateUrl%3A%20'basic-expansion-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'basic-expansion-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20BasicExpansionExample%20%7B%0A%20%20public%20isDisabled%3A%20boolean%20%3D%20false%3B%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cnovo-expansion-panel%20%5Bdisabled%5D%3D%22isDisabled%22%3E%0A%20%20%3Cnovo-expansion-panel-header%3E%0A%20%20%20%20%3Cnovo-panel-title%3E%0A%20%20%20%20%20%20This%20is%20the%20expansion%20title%0A%20%20%20%20%3C%2Fnovo-panel-title%3E%0A%20%20%20%20%3Cnovo-panel-description%3E%0A%20%20%20%20%20%20This%20is%20a%20summary%20of%20the%20content%0A%20%20%20%20%3C%2Fnovo-panel-description%3E%0A%20%20%3C%2Fnovo-expansion-panel-header%3E%0A%20%20%3Cp%3EThis%20is%20the%20primary%20content%20of%20the%20panel.%3C%2Fp%3E%0A%3C%2Fnovo-expansion-panel%3E%0A%3Cdiv%3E%0A%20%20%3Cbr%2F%3E%0A%20%20%3Cspan%3EIs%20Disabled%3F%3C%2Fspan%3E%0A%20%20%3Cnovo-switch%20theme%3D%22grapefruit%22%20%5B(ngModel)%5D%3D%22isDisabled%22%3E%3C%2Fnovo-switch%3E%0A%3C%2Fdiv%3E%0A`
    },
    'accordion': {
        title: 'Accordion Example',
        component: AccordionExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Accordion%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'accordion-example'%2C%0A%20%20%20%20templateUrl%3A%20'accordion-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'accordion-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20AccordionExample%20%7B%0A%20%20isFlat%20%3D%20false%3B%0A%20%20isMulti%20%3D%20false%3B%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cnovo-accordion%0A%20%20%5BdisplayMode%5D%3D%22isFlat%20%3F%20'flat'%20%3A%20'default'%22%0A%20%20%5Bmulti%5D%3D%22isMulti%22%3E%0A%20%20%3Cnovo-expansion-panel%3E%0A%20%20%20%20%3Cnovo-expansion-panel-header%3E%0A%20%20%20%20%20%20This%20is%20the%20expansion%201%20title%0A%20%20%20%20%3C%2Fnovo-expansion-panel-header%3E%0A%20%20%20%20%3Csection%3E%0A%20%20%20%20%20%20%3Cnovo-accordion%0A%20%20%20%20%20%20%20%20%5BdisplayMode%5D%3D%22isFlat%20%3F%20'flat'%20%3A%20'default'%22%0A%20%20%20%20%20%20%20%20%5Bmulti%5D%3D%22isMulti%22%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-expansion-panel%3E%0A%20%20%20%20%20%20%20%20%20%20%3Cnovo-expansion-panel-header%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20This%20is%20the%20expansion%201%20title%0A%20%20%20%20%20%20%20%20%20%20%3C%2Fnovo-expansion-panel-header%3E%0A%20%20%20%20%20%20%20%20%20%20%3Cp%3EThis%20the%20expansion%201%20content%3C%2Fp%3E%0A%20%20%20%20%20%20%20%20%3C%2Fnovo-expansion-panel%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-expansion-panel%3E%0A%20%20%20%20%20%20%20%20%20%20%3Cnovo-expansion-panel-header%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20This%20is%20the%20expansion%202%20title%0A%20%20%20%20%20%20%20%20%20%20%3C%2Fnovo-expansion-panel-header%3E%0A%20%20%20%20%20%20%20%20%20%20%3Cp%3EThis%20the%20expansion%202%20content%3C%2Fp%3E%0A%20%20%20%20%20%20%20%20%3C%2Fnovo-expansion-panel%3E%0A%0A%20%20%20%20%20%20%3C%2Fnovo-accordion%3E%0A%0A%0A%0A%0A%20%20%20%20%3C%2Fsection%3E%0A%20%20%3C%2Fnovo-expansion-panel%3E%0A%0A%20%20%3Cnovo-expansion-panel%3E%0A%20%20%20%20%3Cnovo-expansion-panel-header%3E%0A%20%20%20%20%20%20This%20is%20the%20expansion%202%20title%0A%20%20%20%20%3C%2Fnovo-expansion-panel-header%3E%0A%20%20%20%20%3Cp%3EThis%20the%20expansion%202%20content%3C%2Fp%3E%0A%20%20%3C%2Fnovo-expansion-panel%3E%0A%3C%2Fnovo-accordion%3E%0A%3Cdiv%3E%0A%20%20%3Cbr%20%2F%3E%0A%20%20%3Cspan%3EFlat%20Expansion%3C%2Fspan%3E%0A%20%20%3Cnovo-switch%20theme%3D%22grapefruit%22%20%5B(ngModel)%5D%3D%22isFlat%22%3E%3C%2Fnovo-switch%3E%0A%20%20%3Cspan%3EMultiple%20Expansion%3C%2Fspan%3E%0A%20%20%3Cnovo-switch%20theme%3D%22grapefruit%22%20%5B(ngModel)%5D%3D%22isMulti%22%3E%3C%2Fnovo-switch%3E%0A%3C%2Fdiv%3E`
    },
    'card-with-image': {
        title: 'Card With Image',
        component: CardWithImageExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0Aimport%20%7B%20NovoToastService%20%7D%20from%20'novo-elements'%3B%0A%0A%2F**%0A%20*%20%40title%20Card%20With%20Image%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'card-with-image-example'%2C%0A%20%20%20%20templateUrl%3A%20'card-with-image-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'card-with-image-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20CardWithImageExample%20%7B%0A%20%20%2F%2F%20Config%20for%20demos%0A%20%20refresh%3A%20boolean%20%3D%20true%3B%0A%20%20close%3A%20boolean%20%3D%20true%3B%0A%20%20move%3A%20boolean%20%3D%20true%3B%0A%20%20padding%3A%20boolean%20%3D%20true%3B%0A%20%20loading%3A%20boolean%20%3D%20true%3B%0A%0A%20%20start%3A%20number%20%3D%202000%3B%0A%20%20end%3A%20number%20%3D%202005%3B%0A%20%20created%3A%20number%20%3D%201995%3B%0A%0A%20%20bestLabel%3A%20string%20%3D%20'BEST%20TIME%20TO%20CONTACT'%3B%0A%20%20bestTime%3A%20string%20%3D%20'1-PM'%3B%0A%20%20bestDay%3A%20string%20%3D%20'Friday'%3B%0A%20%20message%3A%20string%3B%0A%20%20messageIcon%3A%20string%3B%0A%0A%20%20donutValue%3A%20number%20%3D%200.5%3B%0A%20%20donutColor%3A%20string%20%3D%20'%23662255'%3B%0A%20%20donutLabel%3A%20string%20%3D%20'Probability%20of%20Win%20%25'%3B%0A%0A%20%20constructor(private%20toaster%3A%20NovoToastService)%20%7B%7D%0A%0A%20%20onClose()%20%7B%0A%20%20%20%20this.toaster.alert(%7B%0A%20%20%20%20%20%20theme%3A%20'info'%2C%0A%20%20%20%20%20%20title%3A%20'Cards'%2C%0A%20%20%20%20%20%20message%3A%20'Close%20Clicked!'%2C%0A%20%20%20%20%7D)%3B%0A%20%20%7D%0A%0A%20%20onRefresh()%20%7B%0A%20%20%20%20this.toaster.alert(%7B%0A%20%20%20%20%20%20theme%3A%20'success'%2C%0A%20%20%20%20%20%20title%3A%20'Cards'%2C%0A%20%20%20%20%20%20message%3A%20'Refresh%20Clicked!'%2C%0A%20%20%20%20%7D)%3B%0A%20%20%7D%0A%0A%20%20toggleLoading()%20%7B%0A%20%20%20%20this.loading%20%3D%20!this.loading%3B%0A%20%20%7D%0A%0A%20%20toggleMessage()%20%7B%0A%20%20%20%20if%20(!this.message)%20%7B%0A%20%20%20%20%20%20this.message%20%3D%20'NO%20DATA!'%3B%0A%20%20%20%20%20%20this.messageIcon%20%3D%20'email'%3B%0A%20%20%20%20%7D%20else%20%7B%0A%20%20%20%20%20%20this.message%20%3D%20undefined%3B%0A%20%20%20%20%7D%0A%20%20%7D%0A%0A%20%20singleAction()%20%7B%0A%20%20%20%20window.alert('HELLO!')%3B%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A.example-card%20%7B%0A%20%20max-width%3A%20400px%3B%0A%7D%0A%0A.example-header-image%20%7B%0A%20%20background-image%3A%20url('https%3A%2F%2Fupload.wikimedia.org%2Fwikipedia%2Fcommons%2F4%2F43%2FCow_on_Pupers.jpg')%3B%0A%20%20background-size%3A%20cover%3B%0A%7D%0A`,
        htmlSource: `%3Cnovo-card%20class%3D%22example-card%22%3E%0A%20%20%3Cnovo-card-header%3E%0A%20%20%20%20%3Cnovo-avatar%20tooltip%3D%22Ferdinand%20del%20Toro%22%0A%20%20%20%20%20%20%5Bsource%5D%3D%22%7BprofileImage%3A%20'https%3A%2F%2Fwww.eaglebrae.co.uk%2Fwp-content%2Fuploads%2Fclose-up-highland-cow.jpg'%7D%22%3E%0A%20%20%20%20%3C%2Fnovo-avatar%3E%0A%20%20%20%20%3Cnovo-title%3EHighland%20Cattle%3C%2Fnovo-title%3E%0A%20%20%20%20%3Cnovo-caption%3EBreed%20of%20Rustic%20Cattle%3C%2Fnovo-caption%3E%0A%20%20%20%20%3Cnovo-action%20icon%3D%22times%22%20tooltip%3D%22Close%20Card%22%3E%3C%2Fnovo-action%3E%0A%20%20%3C%2Fnovo-card-header%3E%0A%20%20%3Cimg%20novo-card-image%20src%3D%22https%3A%2F%2Fupload.wikimedia.org%2Fwikipedia%2Fcommons%2F7%2F78%2FHighland_Cattle_4.jpg%22%0A%20%20%20%20alt%3D%22Photo%20of%20a%20Highland%20Calf%22%20%2F%3E%0A%20%20%3Cnovo-card-content%3E%0A%20%20%20%20%3Cnovo-text%3E%0A%20%20%20%20%20%20The%20Highland%20(Scottish%20Gaelic%3A%20B%C3%B2%20Gh%C3%A0idhealach%3B%20Scots%3A%20Hielan%20coo)%20is%20a%20Scottish%20breed%20of%20rustic%20cattle.%20It%0A%20%20%20%20%20%20originated%20in%20the%20%3Cnovo-link%3EScottish%20Highlands%3C%2Fnovo-link%3E%20and%20the%20Outer%20Hebrides%20islands%20of%20Scotland%20and%20has%0A%20%20%20%20%20%20long%20horns%20and%20a%20long%20shaggy%20coat.%20It%20is%20a%20hardy%20breed%2C%20bred%20to%20withstand%20the%20intemperate%20conditions%20in%20the%0A%20%20%20%20%20%20region.%20The%20first%20herd-book%20dates%20from%201885%3B%20two%20different%20types%20-%20a%20smaller%20island%20type%2C%20usually%20black%2C%20and%20a%0A%20%20%20%20%20%20larger%20mainland%20type%2C%20usually%20dun%20-%20were%20registered%20as%20a%20single%20breed.%20It%20is%20reared%20primarily%20for%20beef%2C%20and%20has%0A%20%20%20%20%20%20been%20exported%20to%20several%20other%20countries.%3Csup%3E%5B1%5D%3C%2Fsup%3E%0A%20%20%20%20%3C%2Fnovo-text%3E%0A%20%20%3C%2Fnovo-card-content%3E%0A%20%20%3Cnovo-card-footer%3E%0A%20%20%20%20%3Cnovo-button%3E%0A%20%20%20%20%20%20PIN%20%3Cnovo-icon%3Epin%3C%2Fnovo-icon%3E%0A%20%20%20%20%3C%2Fnovo-button%3E%0A%20%20%20%20%3Cnovo-button%3E%0A%20%20%20%20%20%20SHARE%20%3Cnovo-icon%3Eshare%3C%2Fnovo-icon%3E%0A%20%20%20%20%3C%2Fnovo-button%3E%0A%20%20%3C%2Fnovo-card-footer%3E%0A%3C%2Fnovo-card%3E`
    },
    'card-config': {
        title: 'Full Configuration Cards',
        component: CardConfigExample,
        tsSource: `%2F%2F%20NG2%0Aimport%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%2F%2F%20Vendor%0Aimport%20%7B%20NovoToastService%20%7D%20from%20'novo-elements'%3B%0A%0A%2F**%0A%20*%20%40title%20Full%20Configuration%20Cards%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'card-config-example'%2C%0A%20%20%20%20templateUrl%3A%20'card-config-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'card-config-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20CardConfigExample%20%7B%0A%20%20%2F%2F%20Config%20for%20demos%0A%20%20refresh%3A%20boolean%20%3D%20true%3B%0A%20%20close%3A%20boolean%20%3D%20true%3B%0A%20%20move%3A%20boolean%20%3D%20true%3B%0A%20%20padding%3A%20boolean%20%3D%20true%3B%0A%20%20loading%3A%20boolean%20%3D%20true%3B%0A%0A%20%20fullConfig%3A%20any%20%3D%20%7B%0A%20%20%20%20refresh%3A%20false%2C%0A%20%20%20%20icon%3A%20'email'%2C%0A%20%20%20%20messageIcon%3A%20'email'%2C%0A%20%20%20%20close%3A%20false%2C%0A%20%20%20%20move%3A%20true%2C%0A%20%20%20%20onClose%3A%20this.onClose.bind(this)%2C%0A%20%20%20%20onRefresh%3A%20this.onRefresh.bind(this)%2C%0A%20%20%20%20title%3A%20'Test'%2C%0A%20%20%20%20loading%3A%20false%2C%0A%20%20%20%20padding%3A%20true%2C%0A%20%20%7D%3B%0A%0A%20%20start%3A%20number%20%3D%202000%3B%0A%20%20end%3A%20number%20%3D%202005%3B%0A%20%20created%3A%20number%20%3D%201995%3B%0A%0A%20%20bestLabel%3A%20string%20%3D%20'BEST%20TIME%20TO%20CONTACT'%3B%0A%20%20bestTime%3A%20string%20%3D%20'1-PM'%3B%0A%20%20bestDay%3A%20string%20%3D%20'Friday'%3B%0A%20%20message%3A%20string%3B%0A%20%20messageIcon%3A%20string%3B%0A%0A%20%20donutValue%3A%20number%20%3D%200.5%3B%0A%20%20donutColor%3A%20string%20%3D%20'%23662255'%3B%0A%20%20donutLabel%3A%20string%20%3D%20'Probability%20of%20Win%20%25'%3B%0A%0A%20%20constructor(private%20toaster%3A%20NovoToastService)%20%7B%7D%0A%0A%20%20onClose()%20%7B%0A%20%20%20%20this.toaster.alert(%7B%0A%20%20%20%20%20%20theme%3A%20'info'%2C%0A%20%20%20%20%20%20title%3A%20'Cards'%2C%0A%20%20%20%20%20%20message%3A%20'Close%20Clicked!'%2C%0A%20%20%20%20%7D)%3B%0A%20%20%7D%0A%0A%20%20onRefresh()%20%7B%0A%20%20%20%20this.toaster.alert(%7B%0A%20%20%20%20%20%20theme%3A%20'success'%2C%0A%20%20%20%20%20%20title%3A%20'Cards'%2C%0A%20%20%20%20%20%20message%3A%20'Refresh%20Clicked!'%2C%0A%20%20%20%20%7D)%3B%0A%20%20%7D%0A%0A%20%20toggleLoading()%20%7B%0A%20%20%20%20this.loading%20%3D%20!this.loading%3B%0A%20%20%7D%0A%0A%20%20toggleMessage()%20%7B%0A%20%20%20%20if%20(!this.message)%20%7B%0A%20%20%20%20%20%20this.message%20%3D%20'NO%20DATA!'%3B%0A%20%20%20%20%20%20this.messageIcon%20%3D%20'email'%3B%0A%20%20%20%20%7D%20else%20%7B%0A%20%20%20%20%20%20this.message%20%3D%20undefined%3B%0A%20%20%20%20%7D%0A%20%20%7D%0A%0A%20%20toggleLoadingConfig()%20%7B%0A%20%20%20%20this.fullConfig.loading%20%3D%20!this.fullConfig.loading%3B%0A%20%20%7D%0A%0A%20%20toggleMessageConfig()%20%7B%0A%20%20%20%20if%20(!this.fullConfig.message)%20%7B%0A%20%20%20%20%20%20this.fullConfig.message%20%3D%20'NO%20DATA!'%3B%0A%20%20%20%20%7D%20else%20%7B%0A%20%20%20%20%20%20this.fullConfig.message%20%3D%20undefined%3B%0A%20%20%20%20%7D%0A%20%20%7D%0A%0A%20%20singleAction()%20%7B%0A%20%20%20%20window.alert('HELLO!')%3B%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cnovo-card%20%5Bconfig%5D%3D%22fullConfig%22%3E%0A%20%20%3Cnovo-card-actions%3E%0A%20%20%20%20%20%20%3Cbutton%20theme%3D%22icon%22%20icon%3D%22info%22%20(click)%3D%22singleAction()%22%3E%3C%2Fbutton%3E%0A%20%20%3C%2Fnovo-card-actions%3E%0A%20%20DEMO%20%3A)%0A%3C%2Fnovo-card%3E%0A`
    },
    'basic-card': {
        title: 'Basic Cards',
        component: BasicCardExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0Aimport%20%7B%20NovoToastService%20%7D%20from%20'novo-elements'%3B%0A%0A%2F**%0A%20*%20%40title%20Basic%20Cards%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'basic-card-example'%2C%0A%20%20%20%20templateUrl%3A%20'basic-card-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'basic-card-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20BasicCardExample%20%7B%0A%20%20%2F%2F%20Config%20for%20demos%0A%20%20refresh%3A%20boolean%20%3D%20true%3B%0A%20%20close%3A%20boolean%20%3D%20true%3B%0A%20%20move%3A%20boolean%20%3D%20true%3B%0A%20%20padding%3A%20boolean%20%3D%20true%3B%0A%20%20loading%3A%20boolean%20%3D%20true%3B%0A%0A%20%20start%3A%20number%20%3D%202000%3B%0A%20%20end%3A%20number%20%3D%202005%3B%0A%20%20created%3A%20number%20%3D%201995%3B%0A%0A%20%20bestLabel%3A%20string%20%3D%20'BEST%20TIME%20TO%20CONTACT'%3B%0A%20%20bestTime%3A%20string%20%3D%20'1-PM'%3B%0A%20%20bestDay%3A%20string%20%3D%20'Friday'%3B%0A%20%20message%3A%20string%3B%0A%20%20messageIcon%3A%20string%3B%0A%0A%20%20donutValue%3A%20number%20%3D%200.5%3B%0A%20%20donutColor%3A%20string%20%3D%20'%23662255'%3B%0A%20%20donutLabel%3A%20string%20%3D%20'Probability%20of%20Win%20%25'%3B%0A%0A%20%20constructor(private%20toaster%3A%20NovoToastService)%20%7B%7D%0A%0A%20%20onClose()%20%7B%0A%20%20%20%20this.toaster.alert(%7B%0A%20%20%20%20%20%20theme%3A%20'info'%2C%0A%20%20%20%20%20%20title%3A%20'Cards'%2C%0A%20%20%20%20%20%20message%3A%20'Close%20Clicked!'%2C%0A%20%20%20%20%7D)%3B%0A%20%20%7D%0A%0A%20%20onRefresh()%20%7B%0A%20%20%20%20this.toaster.alert(%7B%0A%20%20%20%20%20%20theme%3A%20'success'%2C%0A%20%20%20%20%20%20title%3A%20'Cards'%2C%0A%20%20%20%20%20%20message%3A%20'Refresh%20Clicked!'%2C%0A%20%20%20%20%7D)%3B%0A%20%20%7D%0A%0A%20%20toggleLoading()%20%7B%0A%20%20%20%20this.loading%20%3D%20!this.loading%3B%0A%20%20%7D%0A%0A%20%20toggleMessage()%20%7B%0A%20%20%20%20if%20(!this.message)%20%7B%0A%20%20%20%20%20%20this.message%20%3D%20'NO%20DATA!'%3B%0A%20%20%20%20%20%20this.messageIcon%20%3D%20'email'%3B%0A%20%20%20%20%7D%20else%20%7B%0A%20%20%20%20%20%20this.message%20%3D%20undefined%3B%0A%20%20%20%20%7D%0A%20%20%7D%0A%0A%20%20singleAction()%20%7B%0A%20%20%20%20window.alert('HELLO!')%3B%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A%3Ahost%20%7B%0A%20%20display%3A%20flex%3B%0A%20%20flex-direction%3A%20column%3B%0A%20%20gap%3A%202rem%3B%0A%7D%0A`,
        htmlSource: `%3Cnovo-card%20%5Btitle%5D%3D%22'All%20Attributes'%22%0A%20%20icon%3D%22activity%22%0A%20%20%5Bloading%5D%3D%22loading%22%0A%20%20%5Bmessage%5D%3D%22message%22%0A%20%20%5BmessageIcon%5D%3D%22messageIcon%22%0A%20%20%5Brefresh%5D%3D%22refresh%22%0A%20%20%5Bmove%5D%3D%22move%22%0A%20%20%5Bclose%5D%3D%22close%22%0A%20%20(onRefresh)%3D%22onRefresh()%22%0A%20%20(onClose)%3D%22onClose()%22%0A%20%20%5Bpadding%5D%3D%22padding%22%3E%0A%20%20This%20is%20the%20ALL%20attribute%20card%20content!%0A%3C%2Fnovo-card%3E%0A%0A%0A%3Cnovo-row%20gap%3D%22lg%22%3E%0A%20%20%3Cnovo-card%20inline%20padding%3D%22lg%22%3E%0A%20%20%20%20%3Cnovo-stack%20align%3D%22center%22%3E%0A%20%20%20%20%20%20%3Cnovo-title%20larger%3E500%3C%2Fnovo-title%3E%0A%20%20%20%20%20%20%3Cnovo-caption%3EInterviews%3C%2Fnovo-caption%3E%0A%20%20%20%20%3C%2Fnovo-stack%3E%0A%20%20%3C%2Fnovo-card%3E%0A%0A%20%20%3Cnovo-card%20inline%20padding%3D%22lg%22%3E%0A%20%20%20%20%3Cnovo-stack%20align%3D%22center%22%3E%0A%20%20%20%20%20%20%3Cnovo-caption%3E1st%20Interviews%20to%20Placements%3C%2Fnovo-caption%3E%0A%20%20%20%20%20%20%3Cnovo-title%20larger%3E10%20%3A%201%3C%2Fnovo-title%3E%0A%20%20%20%20%3C%2Fnovo-stack%3E%0A%20%20%3C%2Fnovo-card%3E%0A%0A%20%20%3Cnovo-card%20inline%20padding%3D%22lg%22%3E%0A%20%20%20%20%3Cnovo-stack%20align%3D%22center%22%3E%0A%20%20%20%20%20%20%3Cnovo-caption%3ECVs%20Sent%20to%201st%20Interviews%3C%2Fnovo-caption%3E%0A%20%20%20%20%20%20%3Cnovo-title%20larger%3E83%25%3C%2Fnovo-title%3E%0A%20%20%20%20%3C%2Fnovo-stack%3E%0A%20%20%3C%2Fnovo-card%3E%0A%0A%3C%2Fnovo-row%3E%0A%0A%3Cnovo-card%20inline%20inset%3D%22large%22%3E%0A%20%20%3Cnovo-row%20justify%3D%22space-between%22%3E%0A%20%20%20%20%3Cnovo-text%20bold%3ETotal%20Sales%3C%2Fnovo-text%3E%0A%20%20%20%20%3Cnovo-text%20bold%3E%2410k%3C%2Fnovo-text%3E%0A%20%20%3C%2Fnovo-row%3E%0A%20%20%3Cnovo-row%20align%3D%22center%22%3E%0A%20%20%20%20%3Cnovo-caption%3ETarget%20%2450k%3C%2Fnovo-caption%3E%0A%20%20%3C%2Fnovo-row%3E%0A%20%20%3Cnovo-progress%20appearance%3D%22radial%22%20total%3D%2260%22%20mx%3D%222xl%22%3E%0A%20%20%20%20%3Cnovo-progress-bar%20value%3D%2250%22%20color%3D%22success%22%3E%3C%2Fnovo-progress-bar%3E%0A%20%20%20%20%3Cnovo-progress-bar%20value%3D%2240%22%20color%3D%22negative%22%3E%3C%2Fnovo-progress-bar%3E%0A%20%20%20%20%3Cnovo-progress-bar%20value%3D%2230%22%20color%3D%22warning%22%3E%3C%2Fnovo-progress-bar%3E%0A%20%20%3C%2Fnovo-progress%3E%0A%20%20%3Cnovo-row%20justify%3D%22space-between%22%3E%0A%20%20%20%20%3Cnovo-text%3E%3Cstrong%3E%247%2C700%3C%2Fstrong%3E%20ahead%3C%2Fnovo-text%3E%0A%20%20%20%20%3Cnovo-icon%3Eprojects-square%3C%2Fnovo-icon%3E%0A%20%20%3C%2Fnovo-row%3E%0A%3C%2Fnovo-card%3E`
    },
    'multi-option-value': {
        title: 'Multi Option Value Example',
        component: MultiOptionValueExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0Aimport%20%7B%20NOVO_VALUE_THEME%20%7D%20from%20'novo-elements'%3B%0A%0A%2F**%0A%20*%20%40title%20Multi%20Option%20Value%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'multi-option-value-example'%2C%0A%20%20%20%20templateUrl%3A%20'multi-option-value-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'multi-option-value-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20MultiOptionValueExample%20%7B%0A%20%20public%20theme%20%3D%20NOVO_VALUE_THEME.DEFAULT%3B%0A%20%20public%20data%3A%20any%20%3D%20%5B'1'%2C%20'3'%5D%3B%0A%20%20public%20meta%3A%20any%20%3D%20%7B%0A%20%20%20%20name%3A%20'status'%2C%0A%20%20%20%20label%3A%20'Status'%2C%0A%20%20%20%20inputType%3A%20'SELECT'%2C%0A%20%20%20%20options%3A%20%5B%0A%20%20%20%20%20%20%7B%20label%3A%20'New%20Lead'%2C%20value%3A%20'1'%20%7D%2C%0A%20%20%20%20%20%20%7B%20label%3A%20'Old%20Lead'%2C%20value%3A%20'2'%20%7D%2C%0A%20%20%20%20%20%20%7B%20label%3A%20'Active'%2C%20value%3A%20'3'%20%7D%2C%0A%20%20%20%20%20%20%7B%20label%3A%20'Archived'%2C%20value%3A%20'4'%20%7D%2C%0A%20%20%20%20%5D%2C%0A%20%20%7D%3B%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cnovo-value%20%5Bdata%5D%3D%22data%22%20%5Bmeta%5D%3D%22meta%22%20%5Btheme%5D%3D%22theme%22%3E%3C%2Fnovo-value%3E%0A`
    },
    'icon-value': {
        title: 'Icon Value Example',
        component: IconValueExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0Aimport%20%7B%20NOVO_VALUE_THEME%20%7D%20from%20'novo-elements'%3B%0A%0A%2F**%0A%20*%20%40title%20Icon%20Value%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'icon-value-example'%2C%0A%20%20%20%20templateUrl%3A%20'icon-value-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'icon-value-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20IconValueExample%20%7B%0A%20%20public%20theme%20%3D%20NOVO_VALUE_THEME.DEFAULT%3B%0A%20%20public%20data%3A%20any%20%3D%20'Approved'%3B%0A%20%20public%20meta%3A%20any%20%3D%20%7B%0A%20%20%20%20type%3A%20'SCALAR'%2C%0A%20%20%20%20options%3A%20%5B%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20value%3A%20'Approved'%2C%0A%20%20%20%20%20%20%20%20label%3A%20'Approved'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%5D%2C%0A%20%20%20%20name%3A%20'status'%2C%0A%20%20%20%20label%3A%20'Status'%2C%0A%20%20%20%20icons%3A%20%5B%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20iconCls%3A%20'next'%2C%0A%20%20%20%20%20%20%20%20onIconClick%3A%20(data%2C%20meta)%20%3D%3E%20window.alert('hey%20there')%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20iconCls%3A%20'close'%2C%0A%20%20%20%20%20%20%20%20onIconClick%3A%20(data%2C%20meta)%20%3D%3E%20window.alert('hey%20there')%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%5D%2C%0A%20%20%7D%3B%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cnovo-value%20%5Bdata%5D%3D%22data%22%20%5Bmeta%5D%3D%22meta%22%20%5Btheme%5D%3D%22theme%22%3E%3C%2Fnovo-value%3E%0A`
    },
    'formatter-value': {
        title: 'Formatter Value Example',
        component: FormatterValueExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0Aimport%20%7B%20NOVO_VALUE_THEME%20%7D%20from%20'novo-elements'%3B%0A%0A%2F**%0A%20*%20%40title%20Formatter%20Value%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'formatter-value-example'%2C%0A%20%20%20%20templateUrl%3A%20'formatter-value-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'formatter-value-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20FormatterValueExample%20%7B%0A%20%20public%20theme%20%3D%20NOVO_VALUE_THEME.DEFAULT%3B%0A%20%20public%20data%3A%20any%20%3D%20%7B%0A%20%20%20%20id%3A%20123%2C%0A%20%20%7D%3B%0A%20%20public%20meta%3A%20any%20%3D%20%7B%0A%20%20%20%20type%3A%20'SCALAR'%2C%0A%20%20%20%20name%3A%20'Placement'%2C%0A%20%20%20%20label%3A%20'Placement'%2C%0A%20%20%20%20associatedEntity%3A%20%7B%0A%20%20%20%20%20%20entity%3A%20'Placement'%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20showEntityIcon%3A%20true%2C%0A%20%20%20%20entityIconClass%3A%20'candidate'%2C%0A%20%20%20%20formatter%3A%20(value%2C%20args)%20%3D%3E%20%7B%0A%20%20%20%20%20%20return%20%60%24%7Bargs.label%7D%20%23%24%7B(value%20%26%26%20value.id)%20%7C%7C%20''%7D%60%3B%0A%20%20%20%20%7D%2C%0A%20%20%7D%3B%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cnovo-value%20%5Bdata%5D%3D%22data%22%20%5Bmeta%5D%3D%22meta%22%20%5Btheme%5D%3D%22theme%22%3E%3C%2Fnovo-value%3E%0A`
    },
    'external-link-value': {
        title: 'Value with Extenal Links Example',
        component: ExternalLinkValueExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0Aimport%20%7B%20NOVO_VALUE_THEME%20%7D%20from%20'novo-elements'%3B%0A%0A%2F**%0A%20*%20%40title%20Value%20with%20Extenal%20Links%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'external-link-value-example'%2C%0A%20%20%20%20templateUrl%3A%20'external-link-value-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'external-link-value-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20ExternalLinkValueExample%20%7B%0A%20%20public%20theme%20%3D%20NOVO_VALUE_THEME.MOBILE%3B%0A%20%20public%20data%3A%20any%20%3D%20'www.bullhorn.com'%3B%0A%20%20public%20meta%3A%20any%20%3D%20%7B%0A%20%20%20%20type%3A%20'SCALAR'%2C%0A%20%20%20%20name%3A%20'companyUrl'%2C%0A%20%20%20%20label%3A%20'Company%20URL'%2C%0A%20%20%7D%3B%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cnovo-value%20%5Bdata%5D%3D%22data%22%20%5Bmeta%5D%3D%22meta%22%20%5Btheme%5D%3D%22theme%22%3E%3C%2Fnovo-value%3E%0A`
    },
    'entity-list-value': {
        title: 'Entity List Value Example',
        component: EntityListValueExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0Aimport%20%7B%20NOVO_VALUE_THEME%20%7D%20from%20'novo-elements'%3B%0A%0A%2F**%0A%20*%20%40title%20Entity%20List%20Value%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'entity-list-value-example'%2C%0A%20%20%20%20templateUrl%3A%20'entity-list-value-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'entity-list-value-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20EntityListValueExample%20%7B%0A%20%20public%20theme%20%3D%20NOVO_VALUE_THEME.DEFAULT%3B%0A%20%20public%20data%3A%20any%20%3D%20%7B%0A%20%20%20%20data%3A%20%5B%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20id%3A%201%2C%0A%20%20%20%20%20%20%20%20firstName%3A%20'George'%2C%0A%20%20%20%20%20%20%20%20lastName%3A%20'Washington'%2C%0A%20%20%20%20%20%20%20%20personSubtype%3A%20'Candidate'%2C%0A%20%20%20%20%20%20%20%20openLink%3A%20(data)%20%3D%3E%20%7B%7D%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20id%3A%202%2C%0A%20%20%20%20%20%20%20%20firstName%3A%20'John'%2C%0A%20%20%20%20%20%20%20%20lastName%3A%20'Adams'%2C%0A%20%20%20%20%20%20%20%20personSubtype%3A%20'ClientContact'%2C%0A%20%20%20%20%20%20%20%20openLink%3A%20(data)%20%3D%3E%20%7B%7D%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20id%3A%203%2C%0A%20%20%20%20%20%20%20%20firstName%3A%20'Abraham'%2C%0A%20%20%20%20%20%20%20%20lastName%3A%20'Lincoln'%2C%0A%20%20%20%20%20%20%20%20personSubtype%3A%20'Lead'%2C%0A%20%20%20%20%20%20%20%20openLink%3A%20(data)%20%3D%3E%20%7B%7D%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%5D%2C%0A%20%20%7D%3B%0A%20%20public%20meta%3A%20any%20%3D%20%7B%0A%20%20%20%20type%3A%20'TO_MANY'%2C%0A%20%20%20%20name%3A%20'guests'%2C%0A%20%20%20%20label%3A%20'Attendees'%2C%0A%20%20%20%20associatedEntity%3A%20%7B%0A%20%20%20%20%20%20entity%3A%20'CorporateUser'%2C%0A%20%20%20%20%7D%2C%0A%20%20%7D%3B%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cnovo-value%20%5Bdata%5D%3D%22data%22%20%5Bmeta%5D%3D%22meta%22%20%5Btheme%5D%3D%22theme%22%3E%3C%2Fnovo-value%3E%0A`
    },
    'date-time-value': {
        title: 'Date Time Value Example',
        component: DateTimeValueExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0Aimport%20%7B%20NOVO_VALUE_THEME%20%7D%20from%20'novo-elements'%3B%0A%0A%2F**%0A%20*%20%40title%20Date%20Time%20Value%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'date-time-value-example'%2C%0A%20%20%20%20templateUrl%3A%20'date-time-value-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'date-time-value-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20DateTimeValueExample%20%7B%0A%20%20public%20theme%20%3D%20NOVO_VALUE_THEME.DEFAULT%3B%0A%20%20public%20data%3A%20any%20%3D%20new%20Date().getTime()%3B%0A%20%20public%20meta%3A%20any%20%3D%20%7B%0A%20%20%20%20type%3A%20'SCALAR'%2C%0A%20%20%20%20dataSpecialization%3A%20'DATETIME'%2C%0A%20%20%20%20label%3A%20'Date'%2C%0A%20%20%7D%3B%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cnovo-value%20%5Bdata%5D%3D%22data%22%20%5Bmeta%5D%3D%22meta%22%20%5Btheme%5D%3D%22theme%22%3E%3C%2Fnovo-value%3E%0A`
    },
    'corporate-user-value': {
        title: 'Corporate User Value Example',
        component: CorporateUserValueExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0Aimport%20%7B%20NOVO_VALUE_THEME%20%7D%20from%20'novo-elements'%3B%0A%0A%2F**%0A%20*%20%40title%20Corporate%20User%20Value%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'corporate-user-value-example'%2C%0A%20%20%20%20templateUrl%3A%20'corporate-user-value-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'corporate-user-value-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20CorporateUserValueExample%20%7B%0A%20%20public%20theme%20%3D%20NOVO_VALUE_THEME.DEFAULT%3B%0A%20%20public%20data%3A%20any%20%3D%20%7B%0A%20%20%20%20id%3A%20123%2C%0A%20%20%20%20firstName%3A%20'Jack'%2C%0A%20%20%20%20lastName%3A%20'White'%2C%0A%20%20%7D%3B%0A%20%20public%20meta%3A%20any%20%3D%20%7B%0A%20%20%20%20type%3A%20'TO_ONE'%2C%0A%20%20%20%20name%3A%20'user'%2C%0A%20%20%20%20label%3A%20'Internal%20User'%2C%0A%20%20%20%20associatedEntity%3A%20%7B%0A%20%20%20%20%20%20entity%3A%20'CorporateUser'%2C%0A%20%20%20%20%7D%2C%0A%20%20%7D%3B%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cnovo-value%20%5Bdata%5D%3D%22data%22%20%5Bmeta%5D%3D%22meta%22%20%5Btheme%5D%3D%22theme%22%3E%3C%2Fnovo-value%3E%0A`
    },
    'category-value': {
        title: 'Category Value Example',
        component: CategoryValueExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0Aimport%20%7B%20NOVO_VALUE_THEME%20%7D%20from%20'novo-elements'%3B%0A%0A%2F**%0A%20*%20%40title%20Category%20Value%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'category-value-example'%2C%0A%20%20%20%20templateUrl%3A%20'category-value-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'category-value-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20CategoryValueExample%20%7B%0A%20%20public%20theme%20%3D%20NOVO_VALUE_THEME.DEFAULT%3B%0A%20%20public%20data%3A%20any%20%3D%20%7B%0A%20%20%20%20value%3A%20'stuff'%2C%0A%20%20%20%20label%3A%20'Stuff%20Category'%2C%0A%20%20%7D%3B%0A%20%20public%20meta%3A%20any%20%3D%20%7B%0A%20%20%20%20type%3A%20'TO_ONE'%2C%0A%20%20%20%20name%3A%20'category'%2C%0A%20%20%20%20label%3A%20'Category'%2C%0A%20%20%20%20associatedEntity%3A%20%7B%0A%20%20%20%20%20%20entity%3A%20'Category'%2C%0A%20%20%20%20%7D%2C%0A%20%20%7D%3B%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cnovo-value%20%5Bdata%5D%3D%22data%22%20%5Bmeta%5D%3D%22meta%22%20%5Btheme%5D%3D%22theme%22%3E%3C%2Fnovo-value%3E%0A`
    },
    'basic-value': {
        title: 'Basic Value Example',
        component: BasicValueExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0Aimport%20%7B%20NOVO_VALUE_THEME%20%7D%20from%20'novo-elements'%3B%0A%0A%2F**%0A%20*%20%40title%20Basic%20Value%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'basic-value-example'%2C%0A%20%20%20%20templateUrl%3A%20'basic-value-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'basic-value-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20BasicValueExample%20%7B%0A%20%20public%20theme%20%3D%20NOVO_VALUE_THEME.MOBILE%3B%0A%20%20public%20data%3A%20any%20%3D%201234567890%3B%0A%20%20public%20meta%3A%20any%20%3D%20%7B%0A%20%20%20%20type%3A%20'SCALAR'%2C%0A%20%20%20%20name%3A%20'phone1'%2C%0A%20%20%20%20label%3A%20'PH%20%23'%2C%0A%20%20%7D%3B%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cnovo-value%20%5Bdata%5D%3D%22data%22%20%5Bmeta%5D%3D%22meta%22%20%5Btheme%5D%3D%22theme%22%3E%3C%2Fnovo-value%3E%0A`
    },
    'associated-value': {
        title: 'Associated Value Example',
        component: AssociatedValueExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0Aimport%20%7B%20NOVO_VALUE_THEME%20%7D%20from%20'novo-elements'%3B%0A%0A%2F**%0A%20*%20%40title%20Associated%20Value%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'associated-value-example'%2C%0A%20%20%20%20templateUrl%3A%20'associated-value-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'associated-value-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20AssociatedValueExample%20%7B%0A%20%20public%20theme%20%3D%20NOVO_VALUE_THEME.DEFAULT%3B%0A%20%20public%20data%3A%20any%20%3D%20%7B%0A%20%20%20%20id%3A%201%2C%0A%20%20%20%20firstName%3A%20'Alice'%2C%0A%20%20%20%20lastName%3A%20'Wonderland'%2C%0A%20%20%7D%3B%0A%20%20public%20meta%3A%20any%20%3D%20%7B%0A%20%20%20%20type%3A%20'TO_ONE'%2C%0A%20%20%20%20name%3A%20'owner'%2C%0A%20%20%20%20label%3A%20'Owner'%2C%0A%20%20%20%20associatedEntity%3A%20%7B%0A%20%20%20%20%20%20entity%3A%20'CorporateUser'%2C%0A%20%20%20%20%7D%2C%0A%20%20%7D%3B%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cnovo-value%20%5Bdata%5D%3D%22data%22%20%5Bmeta%5D%3D%22meta%22%20%5Btheme%5D%3D%22theme%22%3E%3C%2Fnovo-value%3E%0A`
    },
    'address-value': {
        title: 'Address Value Example',
        component: AddressValueExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0Aimport%20%7B%20NOVO_VALUE_THEME%20%7D%20from%20'novo-elements'%3B%0A%0A%2F**%0A%20*%20%40title%20Address%20Value%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'address-value-example'%2C%0A%20%20%20%20templateUrl%3A%20'address-value-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'address-value-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20AddressValueExample%20%7B%0A%20%20public%20theme%20%3D%20NOVO_VALUE_THEME.DEFAULT%3B%0A%20%20public%20data%3A%20any%20%3D%20%7B%0A%20%20%20%20address1%3A%20'100%20Summer%20Street'%2C%0A%20%20%20%20city%3A%20'Boston'%2C%0A%20%20%20%20state%3A%20'MA'%2C%0A%20%20%20%20zip%3A%20'02143'%2C%0A%20%20%20%20country%3A%20%7B%0A%20%20%20%20%20%20name%3A%20'United%20States'%2C%0A%20%20%20%20%7D%2C%0A%20%20%7D%3B%0A%20%20public%20meta%3A%20any%20%3D%20%7B%0A%20%20%20%20dataType%3A%20'Address'%2C%0A%20%20%20%20type%3A%20'Address'%2C%0A%20%20%20%20label%3A%20'Address'%2C%0A%20%20%20%20name%3A%20'address'%2C%0A%20%20%7D%3B%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cnovo-value%20%5Bdata%5D%3D%22data%22%20%5Bmeta%5D%3D%22meta%22%20%5Btheme%5D%3D%22theme%22%3E%3C%2Fnovo-value%3E%0A`
    },
    'basic-timezone': {
        title: 'Basic Checkbox Usage',
        component: BasicTimezoneExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Basic%20Checkbox%20Usage%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'basic-timezone-example'%2C%0A%20%20%20%20templateUrl%3A%20'basic-timezone-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'basic-timezone-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20BasicTimezoneExample%20%7B%0A%20%20items%3A%20any%5B%5D%20%3D%20%5B%0A%20%20%20%20%7B%0A%20%20%20%20%20%20name%3A%20'Unchecked'%2C%0A%20%20%20%20%20%20isChecked%3A%20false%2C%0A%20%20%20%20%20%20disabled%3A%20false%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20name%3A%20'Checked'%2C%0A%20%20%20%20%20%20isChecked%3A%20true%2C%0A%20%20%20%20%20%20disabled%3A%20false%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20name%3A%20'Indeterminate'%2C%0A%20%20%20%20%20%20isChecked%3A%20true%2C%0A%20%20%20%20%20%20disabled%3A%20false%2C%0A%20%20%20%20%20%20indeterminate%3A%20true%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20name%3A%20'Disabled'%2C%0A%20%20%20%20%20%20isChecked%3A%20false%2C%0A%20%20%20%20%20%20disabled%3A%20true%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20name%3A%20'Disabled%20and%20Checked'%2C%0A%20%20%20%20%20%20isChecked%3A%20true%2C%0A%20%20%20%20%20%20disabled%3A%20true%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20name%3A%20'Disabled%20and%20Indeterminate'%2C%0A%20%20%20%20%20%20isChecked%3A%20true%2C%0A%20%20%20%20%20%20disabled%3A%20true%2C%0A%20%20%20%20%20%20indeterminate%3A%20true%2C%0A%20%20%20%20%7D%2C%0A%20%20%5D%3B%0A%20%20onChange(change%3A%20Event%2C%20item)%3A%20void%20%7B%0A%20%20%20%20console.log('Checkbox%20Change%3A'%2C%20change)%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%20%20if%20(item.indeterminate)%20%7B%0A%20%20%20%20%20%20item.indeterminate%20%3D%20false%3B%0A%20%20%20%20%7D%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cdiv%20*ngFor%3D%22let%20item%20of%20items%22%3E%0A%20%20%3Cnovo-checkbox%0A%20%20%20%20%5Blabel%5D%3D%22item.name%22%0A%20%20%20%20%5B(ngModel)%5D%3D%22item.isChecked%22%0A%20%20%20%20%5Bdisabled%5D%3D%22item.disabled%22%0A%20%20%20%20%5Bindeterminate%5D%3D%22item.indeterminate%22%0A%20%20%20%20(onSelect)%3D%22onChange(%24event%2C%20item)%22%3E%3C%2Fnovo-checkbox%3E%0A%3C%2Fdiv%3E`
    },
    'time-picker': {
        title: 'Time Picker Example',
        component: TimePickerExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Time%20Picker%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'time-picker-example'%2C%0A%20%20%20%20templateUrl%3A%20'time-picker-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'time-picker-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20TimePickerExample%20%7B%0A%20%20time1%3A%20Date%20%3D%20new%20Date()%3B%0A%20%20time2%3A%20Date%20%3D%20new%20Date()%3B%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A%3Ahost%20%7B%0A%20%20display%3A%20grid%3B%0A%20%20grid-template-rows%3A%20120px%201fr%3B%0A%20%20gap%3A%202rem%3B%0A%7D%0A`,
        htmlSource: `%3Cnovo-row%20gap%3D%223rem%22%20align%3D%22space-between%22%3E%0A%20%20%3Cdiv%20flex%3E%0A%20%20%20%20%3Cnovo-time-picker-input%0A%20%20%20%20%20%20%5Bmilitary%5D%3D%22display.value%22%0A%20%20%20%20%20%20%5Bdisabled%5D%3D%22disabled.value%22%0A%20%20%20%20%20%20%5Banalog%5D%3D%22appearance.value%22%0A%20%20%20%20%20%20%5BhasButtons%5D%3D%22hasButtons.value%22%0A%20%20%20%20%20%20%5B(ngModel)%5D%3D%22time1%22%3E%3C%2Fnovo-time-picker-input%3E%0A%20%20%20%20%3Cnovo-hint%3Evalue%3A%20%7B%7Btime1%7D%7D%3C%2Fnovo-hint%3E%0A%20%20%3C%2Fdiv%3E%0A%0A%20%20%3Cnovo-divider%20vertical%3E%3C%2Fnovo-divider%3E%0A%0A%20%20%3Cnovo-field%20flex%3E%0A%20%20%20%20%3Cnovo-label%3ESet%20an%20Alarm%3C%2Fnovo-label%3E%0A%20%20%20%20%3Cinput%20novoInput%20%5B(ngModel)%5D%3D%22time2%22%20%5BtimeFormat%5D%3D%22format.value%22%20%5Bpicker%5D%3D%22timepicker%22%20%2F%3E%0A%20%20%20%20%3Cnovo-picker-toggle%20novoSuffix%20icon%3D%22clock%22%3E%0A%20%20%20%20%20%20%3Cnovo-time-picker%20%23timepicker%3E%3C%2Fnovo-time-picker%3E%0A%20%20%20%20%3C%2Fnovo-picker-toggle%3E%0A%20%20%20%20%3Cnovo-hint%3Evalue%3A%20%7B%7Btime2%7D%7D%3C%2Fnovo-hint%3E%0A%20%20%20%20%3Cnovo-hint%3EThe%20%3Ccode%3EtimeFormat%3C%2Fcode%3E%20attribute%20controls%20model.%3C%2Fnovo-hint%3E%0A%20%20%3C%2Fnovo-field%3E%0A%0A%3C%2Fnovo-row%3E%0A%3Cnovo-row%20class%3D%22bgc-bright%22%20align%3D%22flex-start%22%20gap%3D%22xl%22%20padding%3D%22md%22%3E%0A%20%20%3Cnovo-field%3E%0A%20%20%20%20%3Cnovo-label%3EDisplay%20Format%3F%3C%2Fnovo-label%3E%0A%20%20%20%20%3Cnovo-radio-group%20%23display%20appearance%3D%22vertical%22%20%5Bvalue%5D%3D%22true%22%3E%0A%20%20%20%20%20%20%3Cnovo-radio%20name%3D%22display%22%20%5Bvalue%5D%3D%22true%22%3EHH%3Amm%3C%2Fnovo-radio%3E%0A%20%20%20%20%20%20%3Cnovo-radio%20name%3D%22display%22%20%5Bvalue%5D%3D%22false%22%3Ehh%3Amm%20A%3C%2Fnovo-radio%3E%0A%20%20%20%20%3C%2Fnovo-radio-group%3E%0A%20%20%3C%2Fnovo-field%3E%0A%20%20%3Cnovo-field%3E%0A%20%20%20%20%3Cnovo-label%3EValue%20Format%3F%3C%2Fnovo-label%3E%0A%20%20%20%20%3Cnovo-radio-group%20%23format%20appearance%3D%22vertical%22%20value%3D%22iso8601%22%3E%0A%20%20%20%20%20%20%3Cnovo-radio%20name%3D%22format%22%20value%3D%22date%22%3Edate%3C%2Fnovo-radio%3E%0A%20%20%20%20%20%20%3Cnovo-radio%20name%3D%22format%22%20value%3D%22iso8601%22%3Eiso8601%3C%2Fnovo-radio%3E%0A%20%20%20%20%20%20%3Cnovo-radio%20name%3D%22format%22%20value%3D%22string%22%3Estring%3C%2Fnovo-radio%3E%0A%20%20%20%20%3C%2Fnovo-radio-group%3E%0A%20%20%3C%2Fnovo-field%3E%0A%20%20%3Cnovo-field%3E%0A%20%20%20%20%3Cnovo-label%3EAppearance%3C%2Fnovo-label%3E%0A%20%20%20%20%3Cnovo-radio-group%20%23appearance%20appearance%3D%22vertical%22%20%5Bvalue%5D%3D%22false%22%3E%0A%20%20%20%20%20%20%3Cnovo-radio%20name%3D%22appearance%22%20%5Bvalue%5D%3D%22false%22%3EDefault%3C%2Fnovo-radio%3E%0A%20%20%20%20%20%20%3Cnovo-radio%20name%3D%22appearance%22%20%5Bvalue%5D%3D%22true%22%3EAnalog%20(deprecated)%3C%2Fnovo-radio%3E%0A%20%20%20%20%3C%2Fnovo-radio-group%3E%0A%20%20%3C%2Fnovo-field%3E%0A%20%20%3Cnovo-field%3E%0A%20%20%20%20%3Cnovo-label%3EDisabled%3F%3C%2Fnovo-label%3E%0A%20%20%20%20%3Cnovo-radio-group%20%23disabled%20appearance%3D%22vertical%22%20%5Bvalue%5D%3D%22false%22%3E%0A%20%20%20%20%20%20%3Cnovo-radio%20name%3D%22disabled%22%20%5Bvalue%5D%3D%22false%22%3EEnabled%3C%2Fnovo-radio%3E%0A%20%20%20%20%20%20%3Cnovo-radio%20name%3D%22disabled%22%20%5Bvalue%5D%3D%22true%22%3EDisabled%3C%2Fnovo-radio%3E%0A%20%20%20%20%3C%2Fnovo-radio-group%3E%0A%20%20%3C%2Fnovo-field%3E%0A%20%20%3Cnovo-field%3E%0A%20%20%20%20%3Cnovo-label%3ESave%2FCancel%20Buttons%3F%3C%2Fnovo-label%3E%0A%20%20%20%20%3Cnovo-radio-group%20%23hasButtons%20appearance%3D%22vertical%22%20%5Bvalue%5D%3D%22false%22%3E%0A%20%20%20%20%20%20%3Cnovo-radio%20name%3D%22disabled%22%20%5Bvalue%5D%3D%22true%22%3EEnabled%3C%2Fnovo-radio%3E%0A%20%20%20%20%20%20%3Cnovo-radio%20name%3D%22disabled%22%20%5Bvalue%5D%3D%22false%22%3EDisabled%3C%2Fnovo-radio%3E%0A%20%20%20%20%3C%2Fnovo-radio-group%3E%0A%20%20%3C%2Fnovo-field%3E%0A%3C%2Fnovo-row%3E`
    },
    'tiles-usage': {
        title: 'Tiles Usage Example',
        component: TilesUsageExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0Aimport%20%7B%20allColors%20%7D%20from%20'..%2F..%2F..%2Fdesign'%3B%0A%0A%2F**%0A%20*%20%40title%20Tiles%20Usage%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'tiles-usage-example'%2C%0A%20%20%20%20templateUrl%3A%20'tiles-usage-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'tiles-usage-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20TilesUsageExample%20%7B%0A%20%20public%20demoTilesDefault%3A%20Array%3Cany%3E%20%3D%20%5B%0A%20%20%20%20%7B%0A%20%20%20%20%20%20label%3A%20'Yes'%2C%0A%20%20%20%20%20%20value%3A%20'yes'%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20label%3A%20'No'%2C%0A%20%20%20%20%20%20value%3A%20'no'%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20label%3A%20'Maybe'%2C%0A%20%20%20%20%20%20value%3A%20'maybe'%2C%0A%20%20%20%20%20%20disabled%3A%20true%2C%0A%20%20%20%20%7D%2C%0A%20%20%5D%3B%0A%20%20public%20valueDefault%3A%20string%20%3D%20'yes'%3B%0A%0A%20%20public%20demoTilesIcons%3A%20Array%3Cany%3E%20%3D%20%5B%0A%20%20%20%20%7B%0A%20%20%20%20%20%20label%3A%20'Include'%2C%0A%20%20%20%20%20%20value%3A%20'include'%2C%0A%20%20%20%20%20%20icon%3A%20'check'%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20label%3A%20'Exclude'%2C%0A%20%20%20%20%20%20value%3A%20'exclude'%2C%0A%20%20%20%20%20%20icon%3A%20'exclude'%2C%0A%20%20%20%20%7D%2C%0A%20%20%5D%3B%0A%20%20public%20valueIcons%3A%20string%20%3D%20'exclude'%3B%0A%0A%20%20public%20demoTilesDisabled%3A%20Array%3Cany%3E%20%3D%20%5B...this.demoTilesDefault%5D%3B%0A%20%20public%20valueDisabled%3A%20string%20%3D%20'yes'%3B%0A%0A%20%20public%20demoTilesColor%3A%20Array%3Cany%3E%20%3D%20%5B%0A%20%20%20%20%7B%0A%20%20%20%20%20%20label%3A%20'Good'%2C%0A%20%20%20%20%20%20value%3A%20'good'%2C%0A%20%20%20%20%20%20color%3A%20'success'%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20label%3A%20'Bad'%2C%0A%20%20%20%20%20%20value%3A%20'bad'%2C%0A%20%20%20%20%20%20color%3A%20'negative'%2C%0A%20%20%20%20%7D%2C%0A%20%20%5D%3B%0A%20%20public%20valueColor%3A%20string%20%3D%20'good'%3B%0A%0A%20%20addedTiles%20%3D%200%3B%0A%0A%20%20select(demo%3A%20string%2C%20newValue)%20%7B%0A%20%20%20%20this%5B%60current%24%7Bdemo%7D%60%5D%20%3D%20newValue%3B%0A%20%20%7D%0A%0A%20%20addTile()%20%7B%0A%20%20%20%20const%20randomColor%20%3D%20allColors%5BallColors.length%20*%20Math.random()%20%7C%200%5D%3B%0A%20%20%20%20this.demoTilesColor.push(%7B%0A%20%20%20%20%20%20label%3A%20randomColor.name.charAt(0).toUpperCase()%20%2B%20randomColor.name.slice(1)%2C%0A%20%20%20%20%20%20value%3A%20randomColor.variables%5B0%5D%20%2B%20this.addedTiles%2C%0A%20%20%20%20%20%20color%3A%20randomColor.variables%5B0%5D%2C%0A%20%20%20%20%7D)%3B%0A%20%20%20%20this.addedTiles%2B%2B%3B%0A%20%20%20%20this.demoTilesColor%20%3D%20%5B...this.demoTilesColor%5D%3B%0A%20%20%7D%0A%0A%20%20resetTiles()%20%7B%0A%20%20%20%20this.demoTilesColor.length%20%3D%202%3B%0A%20%20%20%20this.demoTilesColor%20%3D%20%5B...this.demoTilesColor%5D%3B%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `Default%3A%0A%3Cbr%20%2F%3E%0A%3Cnovo-tiles%0A%20%20%5Boptions%5D%3D%22demoTilesDefault%22%0A%20%20(onChange)%3D%22select('Default'%2C%20%24event)%22%0A%20%20%5B(ngModel)%5D%3D%22valueDefault%22%20%2F%3E%0A%3Chr%20%2F%3E%0AIcons%3A%0A%3Cbr%20%2F%3E%0A%3Cnovo-tiles%0A%20%20%5Boptions%5D%3D%22demoTilesIcons%22%0A%20%20(onChange)%3D%22select('Icons'%2C%20%24event)%22%0A%20%20%5B(ngModel)%5D%3D%22valueIcons%22%20%2F%3E%0A%3Chr%20%2F%3E%0ADisabled%3A%0A%3Cbr%20%2F%3E%0A%3Cnovo-tiles%20disabled%0A%20%20%5Boptions%5D%3D%22demoTilesDisabled%22%0A%20%20(onChange)%3D%22select('Disabled'%2C%20%24event)%22%0A%20%20%5B(ngModel)%5D%3D%22valueDisabled%22%20%2F%3E%0A%3Chr%20%2F%3E%0ACustom%20Colors%3A%0A%3Cbr%20%2F%3E%0A%3Cnovo-tiles%0A%20%20%5Boptions%5D%3D%22demoTilesColor%22%0A%20%20(onChange)%3D%22select('Color'%2C%20%24event)%22%0A%20%20%5B(ngModel)%5D%3D%22valueColor%22%20%2F%3E%0A%3Cnovo-row%20gap%3D%22md%22%20justify%3D%22end%22%3E%0A%20%20%20%20%3Cbutton%20theme%3D%22primary%22%20type%3D%22button%22%20name%3D%22addButton%22%20(click)%3D%22addTile()%22%3EAdd%20Tile%3C%2Fbutton%3E%0A%20%20%20%20%3Cbutton%20theme%3D%22secondary%22%20type%3D%22button%22%20name%3D%22resetButton%22%20(click)%3D%22resetTiles()%22%3EReset%3C%2Fbutton%3E%0A%3C%2Fnovo-row%3E%0A`
    },
    'multiple-select-with-search': {
        title: 'Multiple Select With Search Example',
        component: MultipleSelectWithSearchExample,
        tsSource: `import%20%7B%20AfterViewInit%2C%20Component%2C%20OnDestroy%2C%20OnInit%2C%20ViewChild%20%7D%20from%20'%40angular%2Fcore'%3B%0Aimport%20%7B%20UntypedFormControl%20%7D%20from%20'%40angular%2Fforms'%3B%0Aimport%20%7B%20NovoSelectElement%20%7D%20from%20'novo-elements'%3B%0Aimport%20%7B%20ReplaySubject%2C%20Subject%20%7D%20from%20'rxjs'%3B%0Aimport%20%7B%20take%2C%20takeUntil%20%7D%20from%20'rxjs%2Foperators'%3B%0Aimport%20%7B%20State%2C%20STATES%20%7D%20from%20'..%2Fstates.data'%3B%0A%0A%2F**%0A%20*%20%40title%20Multiple%20Select%20With%20Search%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'multiple-select-with-search-example'%2C%0A%20%20%20%20templateUrl%3A%20'multiple-select-with-search-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'multiple-select-with-search-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20MultipleSelectWithSearchExample%20implements%20OnInit%2C%20AfterViewInit%2C%20OnDestroy%20%7B%0A%20%20%2F**%20list%20of%20states%20*%2F%0A%20%20protected%20states%3A%20State%5B%5D%20%3D%20STATES%3B%0A%0A%20%20%2F**%20control%20for%20the%20selected%20state%20for%20multi-selection%20*%2F%0A%20%20public%20stateMultiCtrl%3A%20UntypedFormControl%20%3D%20new%20UntypedFormControl()%3B%0A%0A%20%20%2F**%20control%20for%20the%20NovoSelect%20filter%20keyword%20multi-selection%20*%2F%0A%20%20public%20stateMultiFilterCtrl%3A%20UntypedFormControl%20%3D%20new%20UntypedFormControl()%3B%0A%0A%20%20%2F**%20list%20of%20states%20filtered%20by%20search%20keyword%20*%2F%0A%20%20public%20filteredStatesMulti%3A%20ReplaySubject%3CState%5B%5D%3E%20%3D%20new%20ReplaySubject%3CState%5B%5D%3E(1)%3B%0A%0A%20%20%40ViewChild('multiSelect'%2C%20%7B%20static%3A%20true%20%7D)%20multiSelect%3A%20NovoSelectElement%3B%0A%0A%20%20%2F**%20Subject%20that%20emits%20when%20the%20component%20has%20been%20destroyed.%20*%2F%0A%20%20protected%20_onDestroy%20%3D%20new%20Subject%3Cvoid%3E()%3B%0A%0A%20%20constructor()%20%7B%7D%0A%0A%20%20ngOnInit()%20%7B%0A%20%20%20%20%2F%2F%20set%20initial%20selection%0A%20%20%20%20this.stateMultiCtrl.setValue(%5Bthis.states%5B10%5D%2C%20this.states%5B11%5D%2C%20this.states%5B12%5D%5D)%3B%0A%0A%20%20%20%20%2F%2F%20load%20the%20initial%20state%20list%0A%20%20%20%20this.filteredStatesMulti.next(this.states.slice())%3B%0A%0A%20%20%20%20%2F%2F%20listen%20for%20search%20field%20value%20changes%0A%20%20%20%20this.stateMultiFilterCtrl.valueChanges.pipe(takeUntil(this._onDestroy)).subscribe(()%20%3D%3E%20%7B%0A%20%20%20%20%20%20this.filterStatesMulti()%3B%0A%20%20%20%20%7D)%3B%0A%20%20%7D%0A%0A%20%20ngAfterViewInit()%20%7B%0A%20%20%20%20this.setInitialValue()%3B%0A%20%20%7D%0A%0A%20%20ngOnDestroy()%20%7B%0A%20%20%20%20this._onDestroy.next()%3B%0A%20%20%20%20this._onDestroy.complete()%3B%0A%20%20%7D%0A%0A%20%20%2F**%0A%20%20%20*%20Sets%20the%20initial%20value%20after%20the%20filteredStates%20are%20loaded%20initially%0A%20%20%20*%2F%0A%20%20protected%20setInitialValue()%20%7B%0A%20%20%20%20this.filteredStatesMulti.pipe(take(1)%2C%20takeUntil(this._onDestroy)).subscribe(()%20%3D%3E%20%7B%0A%20%20%20%20%20%20%2F%2F%20setting%20the%20compareWith%20property%20to%20a%20comparison%20function%0A%20%20%20%20%20%20%2F%2F%20triggers%20initializing%20the%20selection%20according%20to%20the%20initial%20value%20of%0A%20%20%20%20%20%20%2F%2F%20the%20form%20control%20(i.e.%20_initializeSelection())%0A%20%20%20%20%20%20%2F%2F%20this%20needs%20to%20be%20done%20after%20the%20filteredStates%20are%20loaded%20initially%0A%20%20%20%20%20%20%2F%2F%20and%20after%20the%20novo-option%20elements%20are%20available%0A%20%20%20%20%20%20this.multiSelect.compareWith%20%3D%20(a%3A%20State%2C%20b%3A%20State)%20%3D%3E%20a%20%26%26%20b%20%26%26%20a.code%20%3D%3D%3D%20b.code%3B%0A%20%20%20%20%7D)%3B%0A%20%20%7D%0A%0A%20%20protected%20filterStatesMulti()%20%7B%0A%20%20%20%20if%20(!this.states)%20%7B%0A%20%20%20%20%20%20return%3B%0A%20%20%20%20%7D%0A%20%20%20%20%2F%2F%20get%20the%20search%20keyword%0A%20%20%20%20let%20search%20%3D%20this.stateMultiFilterCtrl.value%3B%0A%20%20%20%20if%20(!search)%20%7B%0A%20%20%20%20%20%20this.filteredStatesMulti.next(this.states.slice())%3B%0A%20%20%20%20%20%20return%3B%0A%20%20%20%20%7D%20else%20%7B%0A%20%20%20%20%20%20search%20%3D%20search.toLowerCase()%3B%0A%20%20%20%20%7D%0A%20%20%20%20%2F%2F%20filter%20the%20states%0A%20%20%20%20this.filteredStatesMulti.next(this.states.filter((state)%20%3D%3E%20state.name.toLowerCase().indexOf(search)%20%3E%20-1))%3B%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Ch3%3EMultiple%20selection%3C%2Fh3%3E%0A%3Cp%3E%0A%20%20%3Cnovo-field%3E%0A%20%20%20%20%3Cnovo-select%20%5BformControl%5D%3D%22stateMultiCtrl%22%20placeholder%3D%22States%22%20%5Bmultiple%5D%3D%22true%22%20%23multiSelect%3E%0A%20%20%20%20%20%20%3Cnovo-option%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-select-search%20%5BformControl%5D%3D%22stateMultiFilterCtrl%22%3E%3C%2Fnovo-select-search%3E%0A%20%20%20%20%20%20%3C%2Fnovo-option%3E%0A%20%20%20%20%20%20%3Cnovo-option%20*ngFor%3D%22let%20state%20of%20filteredStatesMulti%20%7C%20async%22%20%5Bvalue%5D%3D%22state%22%3E%0A%20%20%20%20%20%20%20%20%7B%7Bstate.name%7D%7D%0A%20%20%20%20%20%20%3C%2Fnovo-option%3E%0A%20%20%20%20%3C%2Fnovo-select%3E%0A%20%20%3C%2Fnovo-field%3E%0A%3C%2Fp%3E%0A%3Cp%3E%0A%20%20Selected%20States%3A%0A%3C%2Fp%3E%0A%3Cul%20*ngFor%3D%22let%20state%20of%20stateMultiCtrl%3F.value%22%3E%0A%20%20%3Cli%3E%7B%7Bstate.name%7D%7D%3C%2Fli%3E%0A%3C%2Ful%3E`
    },
    'multiple-select': {
        title: 'Multiple Select Example',
        component: MultipleSelectExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Multiple%20Select%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'multiple-select-example'%2C%0A%20%20%20%20templateUrl%3A%20'multiple-select-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'multiple-select-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20MultipleSelectExample%20%7B%0A%20%20public%20placeholder%3A%20string%20%3D%20'Select...'%3B%0A%20%20public%20states%3A%20Array%3Cstring%3E%20%3D%20%5B%0A%20%20%20%20'Alabama'%2C%0A%20%20%20%20'Alaska'%2C%0A%20%20%20%20'Arizona'%2C%0A%20%20%20%20'Arkansas'%2C%0A%20%20%20%20'California'%2C%0A%20%20%20%20'Colorado'%2C%0A%20%20%20%20'Connecticut'%2C%0A%20%20%20%20'Delaware'%2C%0A%20%20%20%20'Florida'%2C%0A%20%20%20%20'Georgia'%2C%0A%20%20%20%20'Hawaii'%2C%0A%20%20%20%20'Idaho'%2C%0A%20%20%20%20'Illinois'%2C%0A%20%20%20%20'Indiana'%2C%0A%20%20%20%20'Iowa'%2C%0A%20%20%20%20'Kansas'%2C%0A%20%20%20%20'Kentucky'%2C%0A%20%20%20%20'Louisiana'%2C%0A%20%20%20%20'Maine'%2C%0A%20%20%20%20'Maryland'%2C%0A%20%20%20%20'Massachusetts'%2C%0A%20%20%20%20'Michigan'%2C%0A%20%20%20%20'Minnesota'%2C%0A%20%20%20%20'Mississippi'%2C%0A%20%20%20%20'Missouri'%2C%0A%20%20%20%20'Montana'%2C%0A%20%20%20%20'Nebraska'%2C%0A%20%20%20%20'Nevada'%2C%0A%20%20%20%20'New%20Hampshire'%2C%0A%20%20%20%20'New%20Jersey'%2C%0A%20%20%20%20'New%20Mexico'%2C%0A%20%20%20%20'New%20York'%2C%0A%20%20%20%20'North%20Dakota'%2C%0A%20%20%20%20'North%20Carolina'%2C%0A%20%20%20%20'Ohio'%2C%0A%20%20%20%20'Oklahoma'%2C%0A%20%20%20%20'Oregon'%2C%0A%20%20%20%20'Pennsylvania'%2C%0A%20%20%20%20'Rhode%20Island'%2C%0A%20%20%20%20'South%20Carolina'%2C%0A%20%20%20%20'South%20Dakota'%2C%0A%20%20%20%20'Tennessee'%2C%0A%20%20%20%20'Texas'%2C%0A%20%20%20%20'Utah'%2C%0A%20%20%20%20'Vermont'%2C%0A%20%20%20%20'Virginia'%2C%0A%20%20%20%20'Washington'%2C%0A%20%20%20%20'West%20Virginia'%2C%0A%20%20%20%20'Wisconsin'%2C%0A%20%20%20%20'Wyoming'%2C%0A%20%20%5D%3B%0A%20%20public%20selected%3A%20any%20%3D%20%5B'Missouri'%5D%3B%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cnovo-field%3E%0A%20%20%3Cnovo-label%3ESelected%20Value%3A%20%3Cspan%20class%3D%22caption%22%3E%7B%7Bselected%7D%7D%3C%2Fspan%3E%3C%2Fnovo-label%3E%0A%20%20%3Cnovo-select%20%5Bplaceholder%5D%3D%22placeholder%22%20%5B(ngModel)%5D%3D%22selected%22%20multiple%3E%0A%20%20%20%20%3Cnovo-option%20*ngFor%3D%22let%20state%20of%20states%22%20%5Bvalue%5D%3D%22state%22%3E%7B%7Bstate%7D%7D%3C%2Fnovo-option%3E%0A%20%20%3C%2Fnovo-select%3E%0A%3C%2Fnovo-field%3E`
    },
    'long-select': {
        title: 'Long Select Example',
        component: LongSelectExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Long%20Select%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'long-select-example'%2C%0A%20%20%20%20templateUrl%3A%20'long-select-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'long-select-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20LongSelectExample%20%7B%0A%20%20public%20placeholder%3A%20string%20%3D%20'Select...'%3B%0A%20%20public%20states%3A%20Array%3Cstring%3E%20%3D%20%5B%0A%20%20%20%20'Alabama'%2C%0A%20%20%20%20'Alaska'%2C%0A%20%20%20%20'Arizona'%2C%0A%20%20%20%20'Arkansas'%2C%0A%20%20%20%20'California'%2C%0A%20%20%20%20'Colorado'%2C%0A%20%20%20%20'Connecticut'%2C%0A%20%20%20%20'Delaware'%2C%0A%20%20%20%20'Florida'%2C%0A%20%20%20%20'Georgia'%2C%0A%20%20%20%20'Hawaii'%2C%0A%20%20%20%20'Idaho'%2C%0A%20%20%20%20'Illinois'%2C%0A%20%20%20%20'Indiana'%2C%0A%20%20%20%20'Iowa'%2C%0A%20%20%20%20'Kansas'%2C%0A%20%20%20%20'Kentucky'%2C%0A%20%20%20%20'Louisiana'%2C%0A%20%20%20%20'Maine'%2C%0A%20%20%20%20'Maryland'%2C%0A%20%20%20%20'Massachusetts'%2C%0A%20%20%20%20'Michigan'%2C%0A%20%20%20%20'Minnesota'%2C%0A%20%20%20%20'Mississippi'%2C%0A%20%20%20%20'Missouri'%2C%0A%20%20%20%20'Montana'%2C%0A%20%20%20%20'Nebraska'%2C%0A%20%20%20%20'Nevada'%2C%0A%20%20%20%20'New%20Hampshire'%2C%0A%20%20%20%20'New%20Jersey'%2C%0A%20%20%20%20'New%20Mexico'%2C%0A%20%20%20%20'New%20York'%2C%0A%20%20%20%20'North%20Dakota'%2C%0A%20%20%20%20'North%20Carolina'%2C%0A%20%20%20%20'Ohio'%2C%0A%20%20%20%20'Oklahoma'%2C%0A%20%20%20%20'Oregon'%2C%0A%20%20%20%20'Pennsylvania'%2C%0A%20%20%20%20'Rhode%20Island'%2C%0A%20%20%20%20'South%20Carolina'%2C%0A%20%20%20%20'South%20Dakota'%2C%0A%20%20%20%20'Tennessee'%2C%0A%20%20%20%20'Texas'%2C%0A%20%20%20%20'Utah'%2C%0A%20%20%20%20'Vermont'%2C%0A%20%20%20%20'Virginia'%2C%0A%20%20%20%20'Washington'%2C%0A%20%20%20%20'West%20Virginia'%2C%0A%20%20%20%20'Wisconsin'%2C%0A%20%20%20%20'Wyoming'%2C%0A%20%20%5D%3B%0A%20%20public%20state%3A%20any%20%3D%20'Missouri'%3B%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cnovo-field%3E%0A%20%20%3Cnovo-label%3E%3Cspan%20class%3D%22caption%22%3ESelected%20Value%3A%3C%2Fspan%3E%7B%7Bstate%7D%7D%3C%2Fnovo-label%3E%0A%20%20%3Cnovo-select%20%5Boptions%5D%3D%22states%22%20%5Bplaceholder%5D%3D%22placeholder%22%20%5B(ngModel)%5D%3D%22state%22%3E%3C%2Fnovo-select%3E%0A%3C%2Fnovo-field%3E`
    },
    'legacy-select-option': {
        title: 'Legacy Select Option Example',
        component: LegacySelectOptionExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Legacy%20Select%20Option%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'legacy-select-option-example'%2C%0A%20%20%20%20templateUrl%3A%20'.%2Flegacy-select-option-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'.%2Flegacy-select-option-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20LegacySelectOptionExample%20%7B%0A%20%20public%20placeholder%3A%20string%20%3D%20'Select...'%3B%0A%20%20public%20options%3A%20Array%3Cstring%3E%20%3D%20%5B'Alpha'%2C%20'Bravo'%2C%20'Charlie'%5D%3B%0A%20%20public%20value%3A%20string%20%3D%20'Delta'%3B%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cnovo-field%3E%0A%20%20%3Cnovo-label%3E%0A%20%20%20%20%3Cspan%20class%3D%22caption%22%3ESelected%20Value%3A%3C%2Fspan%3E%20%7B%7Bvalue%7D%7D%0A%20%20%3C%2Fnovo-label%3E%0A%20%20%3Cnovo-select%20%5Bplaceholder%5D%3D%22placeholder%22%20%5B(ngModel)%5D%3D%22value%22%3E%0A%20%20%20%20%3Cnovo-option%20*ngFor%3D%22let%20option%20of%20options%22%20%5Bvalue%5D%3D%22option%22%3E%0A%20%20%20%20%20%20%7B%7Boption%7D%7D%0A%20%20%20%20%3C%2Fnovo-option%3E%0A%20%20%3C%2Fnovo-select%3E%0A%3C%2Fnovo-field%3E`
    },
    'basic-select-with-search': {
        title: 'Basic Select With Search Example',
        component: BasicSelectWithSearchExample,
        tsSource: `import%20%7B%20AfterViewInit%2C%20Component%2C%20OnDestroy%2C%20OnInit%2C%20ViewChild%20%7D%20from%20'%40angular%2Fcore'%3B%0Aimport%20%7B%20UntypedFormControl%20%7D%20from%20'%40angular%2Fforms'%3B%0Aimport%20%7B%20NovoSelectElement%20%7D%20from%20'novo-elements'%3B%0Aimport%20%7B%20ReplaySubject%2C%20Subject%20%7D%20from%20'rxjs'%3B%0Aimport%20%7B%20take%2C%20takeUntil%20%7D%20from%20'rxjs%2Foperators'%3B%0Aimport%20%7B%20State%2C%20STATES%20%7D%20from%20'..%2Fstates.data'%3B%0A%2F**%0A%20*%20%40title%20Basic%20Select%20With%20Search%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'basic-select-with-search-example'%2C%0A%20%20%20%20templateUrl%3A%20'basic-select-with-search-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'basic-select-with-search-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20BasicSelectWithSearchExample%20implements%20OnInit%2C%20AfterViewInit%2C%20OnDestroy%20%7B%0A%20%20%2F**%20list%20of%20states%20*%2F%0A%20%20protected%20states%3A%20State%5B%5D%20%3D%20STATES%3B%0A%0A%20%20%2F**%20control%20for%20the%20selected%20state%20*%2F%0A%20%20public%20stateCtrl%3A%20UntypedFormControl%20%3D%20new%20UntypedFormControl()%3B%0A%0A%20%20%2F**%20control%20for%20the%20MatSelect%20filter%20keyword%20*%2F%0A%20%20public%20stateFilterCtrl%3A%20UntypedFormControl%20%3D%20new%20UntypedFormControl()%3B%0A%0A%20%20%2F**%20list%20of%20states%20filtered%20by%20search%20keyword%20*%2F%0A%20%20public%20filteredStates%3A%20ReplaySubject%3CState%5B%5D%3E%20%3D%20new%20ReplaySubject%3CState%5B%5D%3E(1)%3B%0A%0A%20%20%40ViewChild('singleSelect'%2C%20%7B%20static%3A%20true%20%7D)%20singleSelect%3A%20NovoSelectElement%3B%0A%0A%20%20%2F**%20Subject%20that%20emits%20when%20the%20component%20has%20been%20destroyed.%20*%2F%0A%20%20protected%20_onDestroy%20%3D%20new%20Subject%3Cvoid%3E()%3B%0A%0A%20%20constructor()%20%7B%7D%0A%0A%20%20ngOnInit()%20%7B%0A%20%20%20%20%2F%2F%20set%20initial%20selection%0A%20%20%20%20this.stateCtrl.setValue(this.states%5B10%5D)%3B%0A%0A%20%20%20%20%2F%2F%20load%20the%20initial%20state%20list%0A%20%20%20%20this.filteredStates.next(this.states.slice())%3B%0A%0A%20%20%20%20%2F%2F%20listen%20for%20search%20field%20value%20changes%0A%20%20%20%20this.stateFilterCtrl.valueChanges.pipe(takeUntil(this._onDestroy)).subscribe(()%20%3D%3E%20%7B%0A%20%20%20%20%20%20this.filterStates()%3B%0A%20%20%20%20%7D)%3B%0A%20%20%7D%0A%0A%20%20ngAfterViewInit()%20%7B%0A%20%20%20%20this.setInitialValue()%3B%0A%20%20%7D%0A%0A%20%20ngOnDestroy()%20%7B%0A%20%20%20%20this._onDestroy.next()%3B%0A%20%20%20%20this._onDestroy.complete()%3B%0A%20%20%7D%0A%0A%20%20%2F**%0A%20%20%20*%20Sets%20the%20initial%20value%20after%20the%20filteredStates%20are%20loaded%20initially%0A%20%20%20*%2F%0A%20%20protected%20setInitialValue()%20%7B%0A%20%20%20%20this.filteredStates.pipe(take(1)%2C%20takeUntil(this._onDestroy)).subscribe(()%20%3D%3E%20%7B%0A%20%20%20%20%20%20%2F%2F%20setting%20the%20compareWith%20property%20to%20a%20comparison%20function%0A%20%20%20%20%20%20%2F%2F%20triggers%20initializing%20the%20selection%20according%20to%20the%20initial%20value%20of%0A%20%20%20%20%20%20%2F%2F%20the%20form%20control%20(i.e.%20_initializeSelection())%0A%20%20%20%20%20%20%2F%2F%20this%20needs%20to%20be%20done%20after%20the%20filteredStates%20are%20loaded%20initially%0A%20%20%20%20%20%20%2F%2F%20and%20after%20the%20mat-option%20elements%20are%20available%0A%20%20%20%20%20%20this.singleSelect.compareWith%20%3D%20(a%3A%20State%2C%20b%3A%20State)%20%3D%3E%20a%20%26%26%20b%20%26%26%20a.code%20%3D%3D%3D%20b.code%3B%0A%20%20%20%20%7D)%3B%0A%20%20%7D%0A%0A%20%20protected%20filterStates()%20%7B%0A%20%20%20%20if%20(!this.states)%20%7B%0A%20%20%20%20%20%20return%3B%0A%20%20%20%20%7D%0A%20%20%20%20%2F%2F%20get%20the%20search%20keyword%0A%20%20%20%20let%20search%20%3D%20this.stateFilterCtrl.value%3B%0A%20%20%20%20if%20(!search)%20%7B%0A%20%20%20%20%20%20this.filteredStates.next(this.states.slice())%3B%0A%20%20%20%20%20%20return%3B%0A%20%20%20%20%7D%20else%20%7B%0A%20%20%20%20%20%20search%20%3D%20search.toLowerCase()%3B%0A%20%20%20%20%7D%0A%20%20%20%20%2F%2F%20filter%20the%20states%0A%20%20%20%20this.filteredStates.next(this.states.filter((state)%20%3D%3E%20state.name.toLowerCase().indexOf(search)%20%3E%20-1))%3B%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Ch3%3ESingle%20selection%3C%2Fh3%3E%0A%3Cp%3E%0A%20%20%3Cnovo-field%3E%0A%20%20%20%20%3Cnovo-label%3EState%3C%2Fnovo-label%3E%0A%20%20%20%20%3Cnovo-select%20%5BformControl%5D%3D%22stateCtrl%22%20placeholder%3D%22Select%22%20displayIcon%3D%22globe-o%22%20%23singleSelect%3E%0A%20%20%20%20%20%20%3Cnovo-option%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-select-search%20%5BformControl%5D%3D%22stateFilterCtrl%22%3E%3C%2Fnovo-select-search%3E%0A%20%20%20%20%20%20%3C%2Fnovo-option%3E%0A%0A%20%20%20%20%20%20%3Cnovo-option%20*ngFor%3D%22let%20state%20of%20filteredStates%20%7C%20async%22%20%5Bvalue%5D%3D%22state%22%3E%0A%20%20%20%20%20%20%20%20%7B%7Bstate.name%7D%7D%0A%20%20%20%20%20%20%3C%2Fnovo-option%3E%0A%20%20%20%20%3C%2Fnovo-select%3E%0A%20%20%3C%2Fnovo-field%3E%0A%3C%2Fp%3E%0A%3Cp%3E%0A%20%20Selected%20Bank%3A%20%7B%7BstateCtrl.value%3F.name%7D%7D%0A%3C%2Fp%3E%0A`
    },
    'basic-select': {
        title: 'Basic Select Example',
        component: BasicSelectExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Basic%20Select%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'basic-select-example'%2C%0A%20%20%20%20templateUrl%3A%20'basic-select-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'basic-select-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20BasicSelectExample%20%7B%0A%20%20public%20placeholder%3A%20string%20%3D%20'Select...'%3B%0A%20%20public%20options%3A%20Array%3Cstring%3E%20%3D%20%5B'Alpha'%2C%20'Bravo'%2C%20'Charlie'%5D%3B%0A%20%20public%20value%3A%20string%20%3D%20'Bravo'%3B%0A%20%20public%20withNumbers%3A%20Array%3Cany%3E%20%3D%20%5B%0A%20%20%20%20%7B%20label%3A%20'One'%2C%20value%3A%20%7B%20id%3A%201%2C%20label%3A%20'One'%20%7D%20%7D%2C%0A%20%20%20%20%7B%20label%3A%20'Two'%2C%20value%3A%20%7B%20id%3A%202%2C%20label%3A%20'Two'%20%7D%20%7D%2C%0A%20%20%20%20%7B%20divider%3A%20true%20%7D%2C%0A%20%20%20%20%7B%20label%3A%20'Zero'%2C%20value%3A%20%7B%20id%3A%200%2C%20label%3A%20'Zero'%20%7D%20%7D%2C%0A%20%20%20%20%7B%20label%3A%20'Four'%2C%20value%3A%20%7B%20id%3A%204%2C%20label%3A%20'Four'%20%7D%2C%20readOnly%3A%20true%20%7D%2C%0A%20%20%20%20%7B%20divider%3A%20true%20%7D%2C%0A%20%20%20%20%7B%20label%3A%20'Six'%2C%20value%3A%20%7B%20id%3A%206%2C%20label%3A%20'Six'%20%7D%20%7D%2C%0A%20%20%5D%3B%0A%20%20public%20withNumbersValue%3A%20any%20%3D%20%7B%20id%3A%2025%2C%20label%3A%20'Twenty%20Five'%20%7D%3B%0A%20%20public%20withNumbersObject%3A%20any%20%3D%20%7B%20value%3A%20%7B%20id%3A%204%2C%20label%3A%20'Four'%20%7D%20%7D%3B%0A%20%20public%20withDisabledAndTooltip%3A%20Array%3Cany%3E%20%3D%20%5B%0A%20%20%20%20%7B%20label%3A%20'One'%2C%20value%3A%20%7B%20id%3A%201%2C%20label%3A%20'One'%20%7D%20%7D%2C%0A%20%20%20%20%7B%20label%3A%20'Two'%2C%20value%3A%20%7B%20id%3A%202%2C%20label%3A%20'Two'%20%7D%20%7D%2C%0A%20%20%20%20%7B%20label%3A%20'Disabled'%2C%20value%3A%20%7B%20id%3A%203%2C%20label%3A%20'Three'%20%7D%2C%20disabled%3A%20true%20%7D%2C%0A%20%20%20%20%7B%20label%3A%20'Disabled%20Tooltip'%2C%20value%3A%20%7B%20id%3A%204%2C%20label%3A%20'Four'%20%7D%2C%20disabled%3A%20true%2C%20tooltip%3A%20'Tooltip%20on%20disabled%20item'%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20label%3A%20'Disabled%20Left%20Tooltip'%2C%0A%20%20%20%20%20%20value%3A%20%7B%20id%3A%205%2C%20label%3A%20'Five'%20%7D%2C%0A%20%20%20%20%20%20disabled%3A%20true%2C%0A%20%20%20%20%20%20tooltip%3A%20'Left%20side%20tooltip%20on%20disabled%20item'%2C%0A%20%20%20%20%20%20tooltipPosition%3A%20'left'%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20label%3A%20'Disabled%20Bottom%20Tooltip'%2C%0A%20%20%20%20%20%20value%3A%20%7B%20id%3A%206%2C%20label%3A%20'Six'%20%7D%2C%0A%20%20%20%20%20%20disabled%3A%20true%2C%0A%20%20%20%20%20%20tooltip%3A%20'Bottom%20tooltip%20on%20disabled%20item'%2C%0A%20%20%20%20%20%20tooltipPosition%3A%20'bottom'%2C%0A%20%20%20%20%7D%2C%0A%20%20%5D%3B%0A%20%20public%20disabledWithTooltipValue%3A%20number%20%3D%201%3B%0A%20%20public%20headerConfig%3A%20any%20%3D%20%7B%0A%20%20%20%20label%3A%20'Add%20New%20Item'%2C%0A%20%20%20%20placeholder%3A%20'Enter%20item%20here'%2C%0A%20%20%20%20onSave%3A%20this.create.bind(this)%2C%0A%20%20%7D%3B%0A%0A%20%20public%20create(opt)%3A%20void%20%7B%0A%20%20%20%20this.options%20%3D%20%5B...this.options%2C%20opt%5D%3B%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%3Ahost%20%7B%0A%20%20padding%3A%2020px%2030px%3B%0A%20%20border-top-right-radius%3A%203px%3B%0A%20%20border-top-left-radius%3A%203px%3B%0A%20%20display%3A%20flex%3B%0A%20%20flex-direction%3A%20row%3B%0A%20%20flex-shrink%3A%200%3B%0A%20%20flex-grow%3A%200%3B%0A%20%20align-items%3A%20flex-start%3B%0A%20%20flex-wrap%3A%20wrap%3B%0A%20%20transition%3A%20background%20460ms%20ease-in-out%3B%0A%7D%0A%0A%3Ahost%20label%20%7B%0A%20%20margin-bottom%3A%2010px%3B%0A%20%20display%3A%20block%3B%0A%7D%0A%0A%3Ahost%20.caption%20%7B%0A%20%20font-size%3A%200.9em%3B%0A%20%20margin-right%3A%205px%3B%0A%7D%0A%0A.select-example-container%20%7B%0A%20%20margin%3A%201em%3B%0A%7D%0A`,
        htmlSource: `%3Cnovo-field%3E%0A%20%20%3Cnovo-label%3E%0A%20%20%20%20%3Cspan%20class%3D%22caption%22%3ESelected%20Value%3A%3C%2Fspan%3E%20%7B%7Bvalue%7D%7D%0A%20%20%3C%2Fnovo-label%3E%0A%20%20%3Cnovo-select%20%5Bplaceholder%5D%3D%22placeholder%22%20%5B(ngModel)%5D%3D%22value%22%3E%0A%20%20%20%20%3Cnovo-option%20*ngFor%3D%22let%20option%20of%20options%22%20%5Bvalue%5D%3D%22option%22%3E%0A%20%20%20%20%20%20%7B%7Boption%7D%7D%0A%20%20%20%20%3C%2Fnovo-option%3E%0A%20%20%3C%2Fnovo-select%3E%0A%3C%2Fnovo-field%3E%0A%3Cnovo-field%3E%0A%20%20%3Cnovo-label%3E%0A%20%20%20%20%3Cspan%20class%3D%22caption%22%3ESelected%20Value%3A%3C%2Fspan%3E%20%7B%7BwithNumbersValue.label%7D%7D%0A%20%20%3C%2Fnovo-label%3E%0A%20%20%3Cnovo-select%20%5Boptions%5D%3D%22withNumbers%22%20%5B(ngModel)%5D%3D%22withNumbersValue%22%3E%3C%2Fnovo-select%3E%0A%3C%2Fnovo-field%3E%0A%3Cnovo-field%3E%0A%20%20%3Cnovo-label%3E%0A%20%20%20%20%3Cspan%20class%3D%22caption%22%3EDisabled%20State%3C%2Fspan%3E%0A%20%20%3C%2Fnovo-label%3E%0A%20%20%3Cnovo-select%20%5Boptions%5D%3D%22options%22%20%5Bplaceholder%5D%3D%22placeholder%22%20%5B(ngModel)%5D%3D%22value%22%20disabled%3E%3C%2Fnovo-select%3E%0A%3C%2Fnovo-field%3E%0A%3Cnovo-field%3E%0A%20%20%3Cnovo-label%3E%0A%20%20%20%20%3Cspan%20class%3D%22caption%22%3ENo%20Model%20With%20Header%3C%2Fspan%3E%0A%20%20%3C%2Fnovo-label%3E%0A%20%20%3Cnovo-select%20%5Boptions%5D%3D%22options%22%20%5Bplaceholder%5D%3D%22placeholder%22%20%5BheaderConfig%5D%3D%22headerConfig%22%3E%3C%2Fnovo-select%3E%0A%3C%2Fnovo-field%3E`
    },
    'vertical-radio': {
        title: 'Vertical Radio Buttons',
        component: VerticalRadioExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Vertical%20Radio%20Buttons%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'vertical-radio-example'%2C%0A%20%20%20%20templateUrl%3A%20'vertical-radio-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'vertical-radio-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20VerticalRadioExample%20%7B%0A%20%20onChange(change%3A%20Event)%3A%20void%20%7B%0A%20%20%20%20console.log('Radio%20Change%3A'%2C%20change)%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cnovo-radio-group%20appearance%3D%22vertical%22%3E%0A%20%20%3Cnovo-radio%20%5Bchecked%5D%3D%22false%22%20name%3D%22vertical%22%20value%3D%22one%22%20(change)%3D%22onChange(%24event)%22%3EMake%20me%20anything!%3C%2Fnovo-radio%3E%0A%20%20%3Cnovo-radio%20%5Bchecked%5D%3D%22true%22%20name%3D%22vertical%22%20value%3D%22two%22%20(change)%3D%22onChange(%24event)%22%20%5Bdisabled%5D%3D%22true%22%3EI'm%20disabled!%3C%2Fnovo-radio%3E%0A%20%20%3Cnovo-radio%20%5Bchecked%5D%3D%22false%22%20name%3D%22vertical%22%20value%3D%22three%22%20(change)%3D%22onChange(%24event)%22%3EREALLY!%3C%2Fnovo-radio%3E%0A%3C%2Fnovo-radio-group%3E`
    },
    'icon-radio': {
        title: 'Radio Buttons with Icons',
        component: IconRadioExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Radio%20Buttons%20with%20Icons%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'icon-radio-example'%2C%0A%20%20%20%20templateUrl%3A%20'icon-radio-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'icon-radio-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20IconRadioExample%20%7B%0A%20%20onChange(change%3A%20Event)%3A%20void%20%7B%0A%20%20%20%20console.log('Radio%20Change%3A'%2C%20change)%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cnovo-radio-group%3E%0A%20%20%3Cnovo-radio%20button%3D%22true%22%20theme%3D%22icon%22%20icon%3D%22company%22%20name%3D%22icon%22%20value%3D%22one%22%20(change)%3D%22onChange(%24event)%22%3E%0A%20%20%3C%2Fnovo-radio%3E%0A%20%20%3Cnovo-radio%20button%3D%22true%22%20theme%3D%22icon%22%20icon%3D%22job%22%20name%3D%22icon%22%20value%3D%22two%22%20(change)%3D%22onChange(%24event)%22%3E%0A%20%20%3C%2Fnovo-radio%3E%0A%20%20%3Cnovo-radio%20button%3D%22true%22%20theme%3D%22icon%22%20icon%3D%22candidate%22%20name%3D%22icon%22%20value%3D%22three%22%20(change)%3D%22onChange(%24event)%22%3E%0A%20%20%3C%2Fnovo-radio%3E%0A%20%20%3Cnovo-radio%20button%3D%22true%22%20theme%3D%22icon%22%20icon%3D%22opportunity%22%20name%3D%22icon%22%20value%3D%22disabled%22%20(change)%3D%22onChange(%24event)%22%20%5Bdisabled%5D%3D%22true%22%3E%0A%20%20%3C%2Fnovo-radio%3E%0A%20%20%3Cnovo-radio%20button%3D%22true%22%20theme%3D%22icon%22%20icon%3D%22lead%22%20name%3D%22icon%22%20value%3D%22alsoDisabled%22%20(change)%3D%22onChange(%24event)%22%20%5Bchecked%5D%3D%22true%22%20%5Bdisabled%5D%3D%22true%22%3E%0A%20%20%3C%2Fnovo-radio%3E%0A%3C%2Fnovo-radio-group%3E`
    },
    'button-radio': {
        title: 'Radio Button with Buttons',
        component: ButtonRadioExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Radio%20Button%20with%20Buttons%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'button-radio-example'%2C%0A%20%20%20%20templateUrl%3A%20'button-radio-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'button-radio-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20ButtonRadioExample%20%7B%0A%20%20onChange(change%3A%20Event)%3A%20void%20%7B%0A%20%20%20%20console.log('Radio%20Change%3A'%2C%20change)%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cnovo-radio-group%3E%0A%20%20%3Cnovo-radio%20button%3D%22true%22%20%5Bchecked%5D%3D%22false%22%20name%3D%22button%22%20value%3D%22one%22%20(change)%3D%22onChange(%24event)%22%20label%3D%22One%22%3E%0A%20%20%3C%2Fnovo-radio%3E%0A%20%20%3Cnovo-radio%20button%3D%22true%22%20%5Bchecked%5D%3D%22true%22%20name%3D%22button%22%20value%3D%22two%22%20(change)%3D%22onChange(%24event)%22%20label%3D%22Two%22%3E%0A%20%20%3C%2Fnovo-radio%3E%0A%20%20%3Cnovo-radio%20button%3D%22true%22%20%5Bchecked%5D%3D%22false%22%20name%3D%22button%22%20value%3D%22three%22%20(change)%3D%22onChange(%24event)%22%20label%3D%22Three%22%3E%0A%20%20%3C%2Fnovo-radio%3E%0A%20%20%3Cnovo-radio%20button%3D%22true%22%20%5Bchecked%5D%3D%22false%22%20name%3D%22button%22%20value%3D%22disabled%22%20(change)%3D%22onChange(%24event)%22%20label%3D%22Disabled%22%20%5Bdisabled%5D%3D%22true%22%3E%0A%20%20%3C%2Fnovo-radio%3E%0A%20%20%3Cnovo-radio%20button%3D%22true%22%20%5Bchecked%5D%3D%22true%22%20name%3D%22button%22%20value%3D%22alsoDisabled%22%20(change)%3D%22onChange(%24event)%22%20label%3D%22Also%20Disabled%22%20%5Bdisabled%5D%3D%22true%22%3E%0A%20%20%3C%2Fnovo-radio%3E%0A%3C%2Fnovo-radio-group%3E`
    },
    'basic-radio': {
        title: 'Basic Radio Button Usage',
        component: BasicRadioExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Basic%20Radio%20Button%20Usage%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'basic-radio-example'%2C%0A%20%20%20%20templateUrl%3A%20'basic-radio-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'basic-radio-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20BasicRadioExample%20%7B%0A%20%20model%3A%20any%20%3D%20'two'%3B%0A%20%20onChange(change%3A%20Event)%3A%20void%20%7B%0A%20%20%20%20console.log('Radio%20Change%3A'%2C%20change)%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3C!--%20%3Cnovo-radio%20%5Bchecked%5D%3D%22false%22%20name%3D%22basic%22%20value%3D%22one%22%20(change)%3D%22onChange(%24event)%22%3EMake%20me%20anything!%3C%2Fnovo-radio%3E%0A%3Cnovo-radio%20%5Bchecked%5D%3D%22true%22%20name%3D%22basic%22%20value%3D%22two%22%20(change)%3D%22onChange(%24event)%22%3EI%20get%20transcluded%20in!%3C%2Fnovo-radio%3E%0A%3Cnovo-radio%20%5Bchecked%5D%3D%22false%22%20name%3D%22basic%22%20value%3D%22three%22%20(change)%3D%22onChange(%24event)%22%3EREALLY!%3C%2Fnovo-radio%3E%20--%3E%0A%0A%3Cnovo-radio-group%20%5B(ngModel)%5D%3D%22model%22%20(change)%3D%22onChange(%24event)%22%3E%0A%20%20%3Cnovo-radio%20value%3D%22one%22%3EMake%20me%20anything!%3C%2Fnovo-radio%3E%0A%20%20%3Cnovo-radio%20value%3D%22two%22%20%5Bdisabled%5D%3D%22true%22%3EI'm%20disabled!%3C%2Fnovo-radio%3E%0A%20%20%3Cnovo-radio%20value%3D%22three%22%3ETEST!%3C%2Fnovo-radio%3E%0A%3C%2Fnovo-radio-group%3E`
    },
    'override-template': {
        title: 'Override Template Example',
        component: OverrideTemplateExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Override%20Template%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'override-template-example'%2C%0A%20%20%20%20templateUrl%3A%20'override-template-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'override-template-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20OverrideTemplateExample%20%7B%0A%20%20public%20placeholder%3A%20string%20%3D%20'Select...'%3B%0A%20%20public%20overrideValue%3A%20any%3B%0A%20%20public%20overrideDemo%3A%20any%3B%0A%0A%20%20constructor()%20%7B%0A%20%20%20%20const%20states%20%3D%20%5B%0A%20%20%20%20%20%20'Alabama'%2C%0A%20%20%20%20%20%20'Alaska'%2C%0A%20%20%20%20%20%20'Arizona'%2C%0A%20%20%20%20%20%20'Arkansas'%2C%0A%20%20%20%20%20%20'California'%2C%0A%20%20%20%20%20%20'Colorado'%2C%0A%20%20%20%20%20%20'Connecticut'%2C%0A%20%20%20%20%20%20'Delaware'%2C%0A%20%20%20%20%20%20'Florida'%2C%0A%20%20%20%20%20%20'Georgia'%2C%0A%20%20%20%20%20%20'Hawaii'%2C%0A%20%20%20%20%20%20'Idaho'%2C%0A%20%20%20%20%20%20'Illinois'%2C%0A%20%20%20%20%20%20'Indiana'%2C%0A%20%20%20%20%20%20'Iowa'%2C%0A%20%20%20%20%20%20'Kansas'%2C%0A%20%20%20%20%20%20'Kentucky'%2C%0A%20%20%20%20%20%20'Louisiana'%2C%0A%20%20%20%20%20%20'Maine'%2C%0A%20%20%20%20%20%20'Maryland'%2C%0A%20%20%20%20%20%20'Massachusetts'%2C%0A%20%20%20%20%20%20'Michigan'%2C%0A%20%20%20%20%20%20'Minnesota'%2C%0A%20%20%20%20%20%20'Mississippi'%2C%0A%20%20%20%20%20%20'Missouri'%2C%0A%20%20%20%20%20%20'Montana'%2C%0A%20%20%20%20%20%20'Nebraska'%2C%0A%20%20%20%20%20%20'Nevada'%2C%0A%20%20%20%20%20%20'New%20Hampshire'%2C%0A%20%20%20%20%20%20'New%20Jersey'%2C%0A%20%20%20%20%20%20'New%20Mexico'%2C%0A%20%20%20%20%20%20'New%20York'%2C%0A%20%20%20%20%20%20'North%20Dakota'%2C%0A%20%20%20%20%20%20'North%20Carolina'%2C%0A%20%20%20%20%20%20'Ohio'%2C%0A%20%20%20%20%20%20'Oklahoma'%2C%0A%20%20%20%20%20%20'Oregon'%2C%0A%20%20%20%20%20%20'Pennsylvania'%2C%0A%20%20%20%20%20%20'Rhode%20Island'%2C%0A%20%20%20%20%20%20'South%20Carolina'%2C%0A%20%20%20%20%20%20'South%20Dakota'%2C%0A%20%20%20%20%20%20'Tennessee'%2C%0A%20%20%20%20%20%20'Texas'%2C%0A%20%20%20%20%20%20'Utah'%2C%0A%20%20%20%20%20%20'Vermont'%2C%0A%20%20%20%20%20%20'Virginia'%2C%0A%20%20%20%20%20%20'Washington'%2C%0A%20%20%20%20%20%20'West%20Virginia'%2C%0A%20%20%20%20%20%20'Wisconsin'%2C%0A%20%20%20%20%20%20'Wyoming'%2C%0A%20%20%20%20%5D%3B%0A%0A%20%20%20%20this.overrideDemo%20%3D%20%7B%0A%20%20%20%20%20%20options%3A%20states%2C%0A%20%20%20%20%20%20overrideTemplate%3A%20'%3Ch1%3E%7B%7B%20match%20%7C%20json%20%7D%7D%3C%2Fh1%3E'%2C%0A%20%20%20%20%7D%3B%0A%20%20%7D%0A%0A%20%20onChanged(event)%20%7B%0A%20%20%20%20console.log('EVENT'%2C%20event)%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cdiv%20class%3D%22selected-value%22%3ESelected%20Value%3A%20%7B%7B%20overrideValue%20%7D%7D%3C%2Fdiv%3E%0A%3Cnovo-picker%20%5Bconfig%5D%3D%22overrideDemo%22%20%5Bplaceholder%5D%3D%22placeholder%22%20%5B(ngModel)%5D%3D%22overrideValue%22%3E%3C%2Fnovo-picker%3E%0A`
    },
    'mixed-picker': {
        title: 'Mixed Picker Example',
        component: MixedPickerExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0Aimport%20%7B%20MixedMultiPickerResults%20%7D%20from%20'novo-elements'%3B%0A%0A%2F**%0A%20*%20%40title%20Mixed%20Picker%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'mixed-picker-example'%2C%0A%20%20%20%20templateUrl%3A%20'mixed-picker-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'mixed-picker-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20MixedPickerExample%20%7B%0A%20%20public%20placeholder%3A%20string%20%3D%20'Select...'%3B%0A%20%20public%20mixedPicker%3A%20any%3B%0A%20%20public%20mixedPickerValue%3A%20any%3B%0A%0A%20%20constructor()%20%7B%0A%20%20%20%20this.setupMixedPickerDemo()%3B%0A%20%20%7D%0A%0A%20%20setupMixedPickerDemo()%20%7B%0A%20%20%20%20this.mixedPicker%20%3D%20%7B%0A%20%20%20%20%20%20options%3A%20%5B%0A%20%20%20%20%20%20%20%20%7B%20value%3A%20'p1'%2C%20label%3A%20'Option%20One%20-%20No%20Secondary%20Options'%20%7D%2C%0A%20%20%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20value%3A%20'p2'%2C%0A%20%20%20%20%20%20%20%20%20%20label%3A%20'Option%20Two%20-%20Static%20Secondary%20Options'%2C%0A%20%20%20%20%20%20%20%20%20%20secondaryOptions%3A%20%5B%0A%20%20%20%20%20%20%20%20%20%20%20%20%7B%20value%3A%20'p2s1'%2C%20label%3A%20'Static%20Secondary%20Option%201'%20%7D%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%7B%20value%3A%20'p2s2'%2C%20label%3A%20'Static%20Secondary%20Option%202'%20%7D%2C%0A%20%20%20%20%20%20%20%20%20%20%5D%2C%0A%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20value%3A%20'p3'%2C%0A%20%20%20%20%20%20%20%20%20%20label%3A%20'Option%20Three%20-%20Async%20Secondary%20Options'%2C%0A%20%20%20%20%20%20%20%20%20%20getSecondaryOptionsAsync%3A%20()%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20new%20Promise((resolve)%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20setTimeout(()%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20resolve(%5B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7B%20value%3A%20'p3d1'%2C%20label%3A%20'Async%20Secondary%20Option%201'%20%7D%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7B%20value%3A%20'p3d2'%2C%20label%3A%20'Async%20Secondary%20Option%202'%20%7D%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%5D)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%2C%201000)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D)%3B%0A%20%20%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20%7B%20value%3A%20'p4'%2C%20label%3A%20'Option%20Four%20-%20No%20Secondary%20Options'%20%7D%2C%0A%20%20%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20value%3A%20'p5'%2C%0A%20%20%20%20%20%20%20%20%20%20label%3A%20'Option%20Five%20-%20Async%20Secondary%20Options%20with%20Search'%2C%0A%20%20%20%20%20%20%20%20%20%20showSearchOnSecondaryOptions%3A%20true%2C%0A%20%20%20%20%20%20%20%20%20%20getSecondaryOptionsAsync%3A%20()%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20new%20Promise((resolve)%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20setTimeout(()%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20resolve(%5B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7B%20value%3A%20'p5d1'%2C%20label%3A%20'ABC%20-%20Async%20Secondary%20Option%20with%20Search%201'%20%7D%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7B%20value%3A%20'p5d2'%2C%20label%3A%20'DEF%20-%20Async%20Secondary%20Option%20with%20Search%202'%20%7D%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%5D)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%2C%201000)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D)%3B%0A%20%20%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%5D%2C%0A%20%20%20%20%20%20resultsTemplate%3A%20MixedMultiPickerResults%2C%0A%20%20%20%20%7D%3B%0A%20%20%7D%0A%0A%20%20onChanged(event)%20%7B%0A%20%20%20%20console.log('EVENT'%2C%20event)%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Ch6%3EMixed%20Options%20Example%3C%2Fh6%3E%0A%3Cp%3ESome%20primary%20options%20have%20no%20secondary%20option%2C%20some%20have%20static%20secondary%20options%2C%20and%20some%20have%20dynamic%20secondary%20options%3C%2Fp%3E%0A%3Cdiv%20class%3D%22selected-value%22%3ESelected%20Value%3A%20%7B%7B%20mixedPickerValue%20%7C%20json%20%7D%7D%3C%2Fdiv%3E%0A%3Cnovo-picker%20%5Bconfig%5D%3D%22mixedPicker%22%20%5Bplaceholder%5D%3D%22placeholder%22%20%5B(ngModel)%5D%3D%22mixedPickerValue%22%20(changed)%3D%22onChanged(%24event)%22%3E%3C%2Fnovo-picker%3E%0A`
    },
    'grouped-picker': {
        title: 'Grouped Picker Example',
        component: GroupedPickerExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0Aimport%20%7B%20GroupedMultiPickerResults%20%7D%20from%20'novo-elements'%3B%0A%0A%2F**%0A%20*%20%40title%20Grouped%20Picker%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'grouped-picker-example'%2C%0A%20%20%20%20templateUrl%3A%20'grouped-picker-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'grouped-picker-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20GroupedPickerExample%20%7B%0A%20%20public%20placeholder%3A%20string%20%3D%20'Select...'%3B%0A%20%20public%20groupedPicker1%3A%20any%3B%0A%20%20public%20groupedPicker2%3A%20any%3B%0A%20%20public%20groupedPicker3%3A%20any%3B%0A%20%20public%20groupedPicker4%3A%20any%3B%0A%20%20public%20groupedPicker1Value%3A%20any%3B%0A%20%20public%20groupedPicker2Value%3A%20any%3B%0A%20%20public%20groupedPicker3Value%3A%20any%3B%0A%20%20public%20groupedPicker4Value%3A%20any%3B%0A%0A%20%20constructor()%20%7B%0A%20%20%20%20this.setupGroupedPickerDemo()%3B%0A%20%20%7D%0A%0A%20%20setupGroupedPickerDemo()%20%7B%0A%20%20%20%20const%20categoryMap%20%3D%20new%20Map%3Cstring%2C%20%7B%20value%3A%20string%3B%20label%3A%20string%3B%20items%3A%20%7B%20value%3A%20string%3B%20label%3A%20string%20%7D%5B%5D%20%7D%3E()%3B%0A%20%20%20%20for%20(let%20i%20%3D%200%3B%20i%20%3C%2010%3B%20i%2B%2B)%20%7B%0A%20%20%20%20%20%20const%20items%20%3D%20%5B%5D%3B%0A%20%20%20%20%20%20for%20(let%20j%20%3D%200%3B%20j%20%3C%2010%3B%20j%2B%2B)%20%7B%0A%20%20%20%20%20%20%20%20items.push(%7B%20value%3A%20%60%24%7Bi%7D-%24%7Bj%7D%60%2C%20label%3A%20%60Category%20%24%7Bi%7D%20-%20Item%20%24%7Bj%7D%60%20%7D)%3B%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20categoryMap.set(%60%24%7Bi%7D%60%2C%20%7B%20value%3A%20%60%24%7Bi%7D%60%2C%20label%3A%20%60Category%20%24%7Bi%7D%60%2C%20items%20%7D)%3B%0A%20%20%20%20%7D%0A%20%20%20%20const%20filterCategoryMap%20%3D%20new%20Map%3Cstring%2C%20%7B%20value%3A%20string%3B%20label%3A%20string%3B%20items%3A%20%7B%20value%3A%20string%3B%20label%3A%20string%3B%20data%3A%20any%20%7D%5B%5D%20%7D%3E()%3B%0A%20%20%20%20for%20(let%20i%20%3D%200%3B%20i%20%3C%2010%3B%20i%2B%2B)%20%7B%0A%20%20%20%20%20%20const%20items%20%3D%20%5B%5D%3B%0A%20%20%20%20%20%20for%20(let%20j%20%3D%200%3B%20j%20%3C%2010%3B%20j%2B%2B)%20%7B%0A%20%20%20%20%20%20%20%20const%20filter%20%3D%20Math.random()%20%3E%3D%200.5%3B%0A%20%20%20%20%20%20%20%20items.push(%7B%20value%3A%20%60%24%7Bi%7D-%24%7Bj%7D%60%2C%20label%3A%20%60Category%20%24%7Bi%7D%20-%20Item%20%24%7Bj%7D%20-%20Data%20-%20%24%7Bfilter%7D%60%2C%20data%3A%20%7B%20filter%20%7D%20%7D)%3B%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20filterCategoryMap.set(%60%24%7Bi%7D%60%2C%20%7B%20value%3A%20%60%24%7Bi%7D%60%2C%20label%3A%20%60Category%20%24%7Bi%7D%60%2C%20items%20%7D)%3B%0A%20%20%20%20%7D%0A%20%20%20%20this.groupedPicker1%20%3D%20%7B%0A%20%20%20%20%20%20categoryMap%2C%0A%20%20%20%20%20%20resultsTemplate%3A%20GroupedMultiPickerResults%2C%0A%20%20%20%20%20%20displayAll%3A%20true%2C%0A%20%20%20%20%7D%3B%0A%20%20%20%20this.groupedPicker2%20%3D%20%7B%0A%20%20%20%20%20%20categoryMap%2C%0A%20%20%20%20%20%20resultsTemplate%3A%20GroupedMultiPickerResults%2C%0A%20%20%20%20%7D%3B%0A%20%20%20%20this.groupedPicker3%20%3D%20%7B%0A%20%20%20%20%20%20categories%3A%20%5B%0A%20%20%20%20%20%20%20%20%7B%20value%3A%20'C1'%2C%20label%3A%20'Category%201'%20%7D%2C%0A%20%20%20%20%20%20%20%20%7B%20value%3A%20'C2'%2C%20label%3A%20'Category%202'%20%7D%2C%0A%20%20%20%20%20%20%20%20%7B%20value%3A%20'C3'%2C%20label%3A%20'Category%203'%20%7D%2C%0A%20%20%20%20%20%20%20%20%7B%20value%3A%20'C4'%2C%20label%3A%20'Category%204'%20%7D%2C%0A%20%20%20%20%20%20%20%20%7B%20value%3A%20'C5'%2C%20label%3A%20'Category%205'%20%7D%2C%0A%20%20%20%20%20%20%5D%2C%0A%20%20%20%20%20%20getItemsForCategoryAsync%3A%20(category%2C%20customFilter)%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20return%20new%20Promise((resolve)%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%20%20setTimeout(()%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20resolve(%5B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7B%20value%3A%20'A1'%2C%20label%3A%20'Async%201'%20%7D%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7B%20value%3A%20'A2'%2C%20label%3A%20'Async%202'%20%7D%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7B%20value%3A%20'A3'%2C%20label%3A%20'Async%203'%20%7D%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7B%20value%3A%20'A4'%2C%20label%3A%20'Async%204'%20%7D%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7B%20value%3A%20'A5'%2C%20label%3A%20'Async%205'%20%7D%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%5D)%3B%0A%20%20%20%20%20%20%20%20%20%20%7D%2C%201000)%3B%0A%20%20%20%20%20%20%20%20%7D)%3B%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20resultsTemplate%3A%20GroupedMultiPickerResults%2C%0A%20%20%20%20%7D%3B%0A%20%20%20%20this.groupedPicker4%20%3D%20%7B%0A%20%20%20%20%20%20entityIcon%3A%20'company'%2C%0A%20%20%20%20%20%20categoryMap%3A%20filterCategoryMap%2C%0A%20%20%20%20%20%20displayAll%3A%20true%2C%0A%20%20%20%20%20%20placeholder%3A%20'Filter%20things...'%2C%0A%20%20%20%20%20%20customFilter%3A%20%7B%0A%20%20%20%20%20%20%20%20matchFunction%3A%20(item%2C%20value)%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%20%20if%20(value)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20item.data.filter%20%3D%3D%3D%20value%3B%0A%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%20%20return%20true%3B%0A%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20defaultFilterValue%3A%20false%2C%0A%20%20%20%20%20%20%20%20label%3A%20'Custom%20Filter!'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20resultsTemplate%3A%20GroupedMultiPickerResults%2C%0A%20%20%20%20%7D%3B%0A%20%20%7D%0A%0A%20%20onChanged(event)%20%7B%0A%20%20%20%20console.log('EVENT'%2C%20event)%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Ch6%3EBasic%20Static%20Example%3C%2Fh6%3E%0A%3Cp%3EFully%20static%20data%2C%20optional%20%22all%22%20category%3C%2Fp%3E%0A%3Cdiv%20class%3D%22selected-value%22%3ESelected%20Value%3A%20%7B%7B%20groupedPicker1Value%20%7C%20json%20%7D%7D%3C%2Fdiv%3E%0A%3Cnovo-picker%20%5Bconfig%5D%3D%22groupedPicker1%22%20%5Bplaceholder%5D%3D%22placeholder%22%20%5B(ngModel)%5D%3D%22groupedPicker1Value%22%20(changed)%3D%22onChanged(%24event)%22%3E%3C%2Fnovo-picker%3E%0A%0A%3Cbr%2F%3E%0A%3Cbr%2F%3E%0A%0A%3Ch6%3ECustom%20Static%20Example%3C%2Fh6%3E%0A%3Cp%3EFully%20static%20data%2C%20all%20category%20turned%20off%3C%2Fp%3E%0A%3Cdiv%20class%3D%22selected-value%22%3ESelected%20Value%3A%20%7B%7B%20groupedPicker2Value%20%7C%20json%20%7D%7D%3C%2Fdiv%3E%0A%3Cnovo-picker%20%5Bconfig%5D%3D%22groupedPicker2%22%20%5Bplaceholder%5D%3D%22placeholder%22%20%5B(ngModel)%5D%3D%22groupedPicker2Value%22%20(changed)%3D%22onChanged(%24event)%22%3E%3C%2Fnovo-picker%3E%0A%0A%3Cbr%2F%3E%0A%3Cbr%2F%3E%0A%0A%3Ch6%3EBasic%20Async%20Example%3C%2Fh6%3E%0A%3Cp%3ECategory%20list%20is%20static%20(always%20has%20to%20be)%20with%20the%20items%20fetched%20via%20async%20call%3C%2Fp%3E%0A%3Cdiv%20class%3D%22selected-value%22%3ESelected%20Value%3A%20%7B%7B%20groupedPicker3Value%20%7C%20json%20%7D%7D%3C%2Fdiv%3E%0A%3Cnovo-picker%20%5Bconfig%5D%3D%22groupedPicker3%22%20%5Bplaceholder%5D%3D%22placeholder%22%20%5B(ngModel)%5D%3D%22groupedPicker3Value%22%20(changed)%3D%22onChanged(%24event)%22%3E%3C%2Fnovo-picker%3E%0A%3Cbr%2F%3E%0A%3Cbr%2F%3E%0A%0A%3Ch6%3EAsync%20Example%20w%2F%20Custom%20Filter%3C%2Fh6%3E%0A%3Cp%3EYou%20can%20also%20have%20a%20custom%20filter%2C%20limited%20to%20just%20a%20switch%3C%2Fp%3E%0A%3Cdiv%20class%3D%22selected-value%22%3ESelected%20Value%3A%20%7B%7B%20groupedPicker4Value%20%7C%20json%20%7D%7D%3C%2Fdiv%3E%0A%3Cnovo-picker%20%5Bconfig%5D%3D%22groupedPicker4%22%20%5Bplaceholder%5D%3D%22placeholder%22%20%5B(ngModel)%5D%3D%22groupedPicker4Value%22%20(changed)%3D%22onChanged(%24event)%22%3E%3C%2Fnovo-picker%3E%0A`
    },
    'formatted-picker': {
        title: 'Formatted Picker Example',
        component: FormattedPickerExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Formatted%20Picker%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'formatted-picker-example'%2C%0A%20%20%20%20templateUrl%3A%20'formatted-picker-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'formatted-picker-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20FormattedPickerExample%20%7B%0A%20%20public%20placeholder%3A%20string%20%3D%20'Select...'%3B%0A%20%20public%20formatted%3A%20any%3B%0A%20%20public%20value%3A%20string%3B%0A%0A%20%20constructor()%20%7B%0A%20%20%20%20const%20collaborators%20%3D%20%5B%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20id%3A%201%2C%0A%20%20%20%20%20%20%20%20firstName%3A%20'Brian'%2C%0A%20%20%20%20%20%20%20%20lastName%3A%20'Kimball'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20id%3A%202%2C%0A%20%20%20%20%20%20%20%20firstName%3A%20'Josh'%2C%0A%20%20%20%20%20%20%20%20lastName%3A%20'Godi'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20id%3A%203%2C%0A%20%20%20%20%20%20%20%20firstName%3A%20'Alec'%2C%0A%20%20%20%20%20%20%20%20lastName%3A%20'Sibilia'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20id%3A%204%2C%0A%20%20%20%20%20%20%20%20firstName%3A%20'Kameron'%2C%0A%20%20%20%20%20%20%20%20lastName%3A%20'Sween'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%5D%3B%0A%0A%20%20%20%20this.formatted%20%3D%20%7B%0A%20%20%20%20%20%20field%3A%20'id'%2C%0A%20%20%20%20%20%20format%3A%20%60%24firstName%20%24lastName%60%2C%0A%20%20%20%20%20%20options%3A%20collaborators%2C%0A%20%20%20%20%7D%3B%0A%20%20%7D%0A%0A%20%20onChanged(event)%20%7B%0A%20%20%20%20console.log('EVENT'%2C%20event)%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cdiv%20class%3D%22selected-value%22%3ESelected%20Value%3A%20%7B%7Bvalue%7D%7D%3C%2Fdiv%3E%0A%3Cnovo-picker%20%5Bconfig%5D%3D%22formatted%22%20%5Bplaceholder%5D%3D%22placeholder%22%20%5B(ngModel)%5D%3D%22value%22%3E%3C%2Fnovo-picker%3E%0A`
    },
    'entity-picker': {
        title: 'Entity Picker Example',
        component: EntityPickerExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0Aimport%20%7B%20EntityPickerResults%20%7D%20from%20'novo-elements'%3B%0A%0A%2F**%0A%20*%20%40title%20Entity%20Picker%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'entity-picker-example'%2C%0A%20%20%20%20templateUrl%3A%20'entity-picker-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'entity-picker-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20EntityPickerExample%20%7B%0A%20%20public%20placeholder%3A%20string%20%3D%20'Select...'%3B%0A%20%20public%20entityDemo%3A%20any%3B%0A%20%20public%20entity%3A%20any%3B%0A%0A%20%20constructor()%20%7B%0A%20%20%20%20const%20collaborators%20%3D%20%5B%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20searchEntity%3A%20'Candidate'%2C%0A%20%20%20%20%20%20%20%20id%3A%201%2C%0A%20%20%20%20%20%20%20%20firstName%3A%20'Brian'%2C%0A%20%20%20%20%20%20%20%20lastName%3A%20'Kimball'%2C%0A%20%20%20%20%20%20%20%20companyName%3A%20'Bullhorn'%2C%0A%20%20%20%20%20%20%20%20phone%3A%20'617-555-6789'%2C%0A%20%20%20%20%20%20%20%20address%3A%20%7B%20city%3A%20'Boston'%2C%20state%3A%20'MA'%20%7D%2C%0A%20%20%20%20%20%20%20%20occupation%3A%20'Developer'%2C%0A%20%20%20%20%20%20%20%20status%3A%20'Active'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20searchEntity%3A%20'ClientContact'%2C%0A%20%20%20%20%20%20%20%20id%3A%202%2C%0A%20%20%20%20%20%20%20%20firstName%3A%20'Josh'%2C%0A%20%20%20%20%20%20%20%20lastName%3A%20'Godi'%2C%0A%20%20%20%20%20%20%20%20companyName%3A%20'Not%20Bullhorn'%2C%0A%20%20%20%20%20%20%20%20phone%3A%20'617-555-6789'%2C%0A%20%20%20%20%20%20%20%20address%3A%20%7B%20city%3A%20'St.%20Louis'%2C%20state%3A%20'MO'%20%7D%2C%0A%20%20%20%20%20%20%20%20occupation%3A%20'Developer'%2C%0A%20%20%20%20%20%20%20%20status%3A%20'Inactive'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20searchEntity%3A%20'ClientContact'%2C%0A%20%20%20%20%20%20%20%20id%3A%203%2C%0A%20%20%20%20%20%20%20%20firstName%3A%20'Alec'%2C%0A%20%20%20%20%20%20%20%20lastName%3A%20'Sibilia'%2C%0A%20%20%20%20%20%20%20%20companyName%3A%20'Not%20Bullhorn'%2C%0A%20%20%20%20%20%20%20%20phone%3A%20'617-555-6789'%2C%0A%20%20%20%20%20%20%20%20address%3A%20%7B%20city%3A%20'Seattle'%2C%20state%3A%20'WA'%20%7D%2C%0A%20%20%20%20%20%20%20%20occupation%3A%20'Designer'%2C%0A%20%20%20%20%20%20%20%20status%3A%20'Inactive'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20searchEntity%3A%20'Candidate'%2C%0A%20%20%20%20%20%20%20%20id%3A%204%2C%0A%20%20%20%20%20%20%20%20firstName%3A%20'Jonathan'%2C%0A%20%20%20%20%20%20%20%20lastName%3A%20'Braun'%2C%0A%20%20%20%20%20%20%20%20companyName%3A%20'Bullhorn'%2C%0A%20%20%20%20%20%20%20%20phone%3A%20'617-555-6789'%2C%0A%20%20%20%20%20%20%20%20address%3A%20%7B%20city%3A%20'Boston'%2C%20state%3A%20'MA'%20%7D%2C%0A%20%20%20%20%20%20%20%20occupation%3A%20'Designer'%2C%0A%20%20%20%20%20%20%20%20status%3A%20'Active'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20searchEntity%3A%20'Candidate'%2C%0A%20%20%20%20%20%20%20%20id%3A%205%2C%0A%20%20%20%20%20%20%20%20firstName%3A%20'Dan'%2C%0A%20%20%20%20%20%20%20%20lastName%3A%20'Voegelin'%2C%0A%20%20%20%20%20%20%20%20companyName%3A%20'Bullhorn'%2C%0A%20%20%20%20%20%20%20%20phone%3A%20'617-555-6789'%2C%0A%20%20%20%20%20%20%20%20address%3A%20%7B%20city%3A%20'A%20Mountain'%2C%20state%3A%20'NH'%20%7D%2C%0A%20%20%20%20%20%20%20%20occupation%3A%20'Developer'%2C%0A%20%20%20%20%20%20%20%20status%3A%20'Active'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20searchEntity%3A%20'Candidate'%2C%0A%20%20%20%20%20%20%20%20id%3A%206%2C%0A%20%20%20%20%20%20%20%20firstName%3A%20'Charles'%2C%0A%20%20%20%20%20%20%20%20lastName%3A%20'Barnes'%2C%0A%20%20%20%20%20%20%20%20companyName%3A%20'Bullhorn'%2C%0A%20%20%20%20%20%20%20%20phone%3A%20'617-555-6789'%2C%0A%20%20%20%20%20%20%20%20address%3A%20%7B%20city%3A%20'Boston'%2C%20state%3A%20'MA'%20%7D%2C%0A%20%20%20%20%20%20%20%20occupation%3A%20'Developer'%2C%0A%20%20%20%20%20%20%20%20status%3A%20'Active'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%5D%3B%0A%0A%20%20%20%20this.entityDemo%20%3D%20%7B%0A%20%20%20%20%20%20options%3A%20collaborators%2C%0A%20%20%20%20%20%20format%3A%20'%24firstName%20%24lastName'%2C%0A%20%20%20%20%20%20entityIcon%3A%20'person'%2C%0A%20%20%20%20%20%20resultsTemplate%3A%20EntityPickerResults%2C%0A%20%20%20%20%7D%3B%0A%20%20%7D%0A%0A%20%20onChanged(event)%20%7B%0A%20%20%20%20console.log('EVENT'%2C%20event)%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cdiv%20class%3D%22selected-value%22%3ESelected%20Value%3A%20%7B%7Bentity%7D%7D%3C%2Fdiv%3E%0A%3Cnovo-picker%20%5Bconfig%5D%3D%22entityDemo%22%20%5Bplaceholder%5D%3D%22placeholder%22%20%5B(ngModel)%5D%3D%22entity%22%3E%3C%2Fnovo-picker%3E%0A`
    },
    'default-options-picker': {
        title: 'Default Options Picker Example',
        component: DefaultOptionsPickerExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Default%20Options%20Picker%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'default-options-picker-example'%2C%0A%20%20%20%20templateUrl%3A%20'default-options-picker-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'default-options-picker-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20DefaultOptionsPickerExample%20%7B%0A%20%20public%20placeholder%3A%20string%20%3D%20'Select...'%3B%0A%20%20public%20defaultArrayConfig%3A%20any%3B%0A%20%20public%20defaultFunctionConfig%3A%20any%3B%0A%20%20public%20defaultArrayValue%3A%20string%3B%0A%20%20public%20defaultFunctionValue%3A%20string%3B%0A%20%20public%20value%3A%20string%3B%0A%0A%20%20constructor()%20%7B%0A%20%20%20%20const%20states%20%3D%20%5B%0A%20%20%20%20%20%20'Alabama'%2C%0A%20%20%20%20%20%20'Alaska'%2C%0A%20%20%20%20%20%20'Arizona'%2C%0A%20%20%20%20%20%20'Arkansas'%2C%0A%20%20%20%20%20%20'California'%2C%0A%20%20%20%20%20%20'Colorado'%2C%0A%20%20%20%20%20%20'Connecticut'%2C%0A%20%20%20%20%20%20'Delaware'%2C%0A%20%20%20%20%20%20'Florida'%2C%0A%20%20%20%20%20%20'Georgia'%2C%0A%20%20%20%20%20%20'Hawaii'%2C%0A%20%20%20%20%20%20'Idaho'%2C%0A%20%20%20%20%20%20'Illinois'%2C%0A%20%20%20%20%20%20'Indiana'%2C%0A%20%20%20%20%20%20'Iowa'%2C%0A%20%20%20%20%20%20'Kansas'%2C%0A%20%20%20%20%20%20'Kentucky'%2C%0A%20%20%20%20%20%20'Louisiana'%2C%0A%20%20%20%20%20%20'Maine'%2C%0A%20%20%20%20%20%20'Maryland'%2C%0A%20%20%20%20%20%20'Massachusetts'%2C%0A%20%20%20%20%20%20'Michigan'%2C%0A%20%20%20%20%20%20'Minnesota'%2C%0A%20%20%20%20%20%20'Mississippi'%2C%0A%20%20%20%20%20%20'Missouri'%2C%0A%20%20%20%20%20%20'Montana'%2C%0A%20%20%20%20%20%20'Nebraska'%2C%0A%20%20%20%20%20%20'Nevada'%2C%0A%20%20%20%20%20%20'New%20Hampshire'%2C%0A%20%20%20%20%20%20'New%20Jersey'%2C%0A%20%20%20%20%20%20'New%20Mexico'%2C%0A%20%20%20%20%20%20'New%20York'%2C%0A%20%20%20%20%20%20'North%20Dakota'%2C%0A%20%20%20%20%20%20'North%20Carolina'%2C%0A%20%20%20%20%20%20'Ohio'%2C%0A%20%20%20%20%20%20'Oklahoma'%2C%0A%20%20%20%20%20%20'Oregon'%2C%0A%20%20%20%20%20%20'Pennsylvania'%2C%0A%20%20%20%20%20%20'Rhode%20Island'%2C%0A%20%20%20%20%20%20'South%20Carolina'%2C%0A%20%20%20%20%20%20'South%20Dakota'%2C%0A%20%20%20%20%20%20'Tennessee'%2C%0A%20%20%20%20%20%20'Texas'%2C%0A%20%20%20%20%20%20'Utah'%2C%0A%20%20%20%20%20%20'Vermont'%2C%0A%20%20%20%20%20%20'Virginia'%2C%0A%20%20%20%20%20%20'Washington'%2C%0A%20%20%20%20%20%20'West%20Virginia'%2C%0A%20%20%20%20%20%20'Wisconsin'%2C%0A%20%20%20%20%20%20'Wyoming'%2C%0A%20%20%20%20%5D%3B%0A%0A%20%20%20%20this.defaultArrayConfig%20%3D%20%7B%0A%20%20%20%20%20%20defaultOptions%3A%20%5Bstates%5B0%5D%2C%20states%5B1%5D%5D%2C%0A%20%20%20%20%20%20minSearchLength%3A%202%2C%0A%20%20%20%20%20%20options%3A%20()%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20return%20new%20Promise((resolve)%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%20%20setTimeout(()%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20resolve(states)%3B%0A%20%20%20%20%20%20%20%20%20%20%7D%2C%20300)%3B%0A%20%20%20%20%20%20%20%20%7D)%3B%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%7D%3B%0A%20%20%20%20this.defaultFunctionConfig%20%3D%20%7B%0A%20%20%20%20%20%20minSearchLength%3A%202%2C%0A%20%20%20%20%20%20defaultOptions%3A%20()%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20return%20%5Bstates%5B2%5D%2C%20states%5B3%5D%5D%3B%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20options%3A%20()%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20return%20new%20Promise((resolve)%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%20%20setTimeout(()%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20resolve(states)%3B%0A%20%20%20%20%20%20%20%20%20%20%7D%2C%20300)%3B%0A%20%20%20%20%20%20%20%20%7D)%3B%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%7D%3B%0A%20%20%7D%0A%0A%20%20onChanged(event)%20%7B%0A%20%20%20%20console.log('EVENT'%2C%20event)%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cdiv%20class%3D%22selected-value%22%3ESelected%20Value%3A%20%7B%7BdefaultArrayValue%7D%7D%3C%2Fdiv%3E%0A%3Cnovo-picker%20%5Bconfig%5D%3D%22defaultArrayConfig%22%20%5Bplaceholder%5D%3D%22placeholder%22%20%5B(ngModel)%5D%3D%22defaultArrayValue%22%3E%3C%2Fnovo-picker%3E%0A%3Cbr%2F%3E%3Cbr%2F%3E%0A%3Cdiv%20class%3D%22selected-value%22%3ESelected%20Value%3A%20%7B%7BdefaultFunctionValue%7D%7D%3C%2Fdiv%3E%0A%3Cnovo-picker%20%5Bconfig%5D%3D%22defaultFunctionConfig%22%20%5Bplaceholder%5D%3D%22placeholder%22%20%5B(ngModel)%5D%3D%22defaultFunctionValue%22%3E%3C%2Fnovo-picker%3E%0A`
    },
    'custom-picker-results': {
        title: 'Custom Picker Results Example',
        component: CustomPickerResultsExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0Aimport%20%7B%20PickerResults%20%7D%20from%20'novo-elements'%3B%0A%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'custom-picker-results'%2C%0A%20%20%20%20host%3A%20%7B%0A%20%20%20%20%20%20%20%20class%3A%20'active%20picker-results'%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20template%3A%20%60%0A%20%20%20%20%3Cnovo-loading%20theme%3D%22line%22%20*ngIf%3D%22isLoading%20%26%26%20!matches.length%22%3E%3C%2Fnovo-loading%3E%0A%20%20%20%20%3Cnovo-list%20*ngIf%3D%22matches.length%20%3E%200%22%20direction%3D%22vertical%22%3E%0A%20%20%20%20%20%20%3Cnovo-list-item%0A%20%20%20%20%20%20%20%20*ngFor%3D%22let%20match%20of%20matches%22%0A%20%20%20%20%20%20%20%20(click)%3D%22selectMatch(%24event)%22%0A%20%20%20%20%20%20%20%20%5Bclass.active%5D%3D%22match%20%3D%3D%3D%20activeMatch%22%0A%20%20%20%20%20%20%20%20(mouseenter)%3D%22selectActive(match)%22%0A%20%20%20%20%20%20%3E%0A%20%20%20%20%20%20%20%20%3Citem-content%3E%20**CUSTOM**%20%3Cb%20%5BinnerHtml%5D%3D%22highlight(match.label%2C%20term)%22%3E%3C%2Fb%3E%20%3C%2Fitem-content%3E%0A%20%20%20%20%20%20%3C%2Fnovo-list-item%3E%0A%20%20%20%20%3C%2Fnovo-list%3E%0A%20%20%20%20%3Cp%20class%3D%22picker-error%22%20*ngIf%3D%22hasError%22%3EOops!%20An%20error%20occured.%3C%2Fp%3E%0A%20%20%20%20%3Cp%20class%3D%22picker-null%22%20*ngIf%3D%22!isLoading%20%26%26%20!matches.length%20%26%26%20!hasError%22%3ENo%20results%20to%20display...%3C%2Fp%3E%0A%20%20%60%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20CustomPickerResults%20extends%20PickerResults%20%7B%7D%0A%0A%2F**%0A%20*%20%40title%20Custom%20Picker%20Results%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'custom-picker-results-example'%2C%0A%20%20%20%20templateUrl%3A%20'custom-picker-results-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'custom-picker-results-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20CustomPickerResultsExample%20%7B%0A%20%20public%20placeholder%3A%20string%20%3D%20'Select...'%3B%0A%20%20public%20custom%3A%20any%3B%0A%20%20public%20value%3A%20string%3B%0A%0A%20%20constructor()%20%7B%0A%20%20%20%20const%20collaborators%20%3D%20%5B%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20id%3A%201%2C%0A%20%20%20%20%20%20%20%20firstName%3A%20'Brian'%2C%0A%20%20%20%20%20%20%20%20lastName%3A%20'Kimball'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20id%3A%202%2C%0A%20%20%20%20%20%20%20%20firstName%3A%20'Josh'%2C%0A%20%20%20%20%20%20%20%20lastName%3A%20'Godi'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20id%3A%203%2C%0A%20%20%20%20%20%20%20%20firstName%3A%20'Alec'%2C%0A%20%20%20%20%20%20%20%20lastName%3A%20'Sibilia'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20id%3A%204%2C%0A%20%20%20%20%20%20%20%20firstName%3A%20'Kameron'%2C%0A%20%20%20%20%20%20%20%20lastName%3A%20'Sween'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%5D%3B%0A%0A%20%20%20%20this.custom%20%3D%20%7B%0A%20%20%20%20%20%20resultsTemplate%3A%20CustomPickerResults%2C%0A%20%20%20%20%20%20format%3A%20'%24firstName%20%24lastName'%2C%0A%20%20%20%20%20%20options%3A%20collaborators%2C%0A%20%20%20%20%7D%3B%0A%0A%20%20%20%20this.value%20%3D%20null%3B%0A%20%20%7D%0A%0A%20%20onChanged(event)%20%7B%0A%20%20%20%20console.log('EVENT'%2C%20event)%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cdiv%20class%3D%22selected-value%22%3ESelected%20Value%3A%20%7B%7Bvalue%7D%7D%3C%2Fdiv%3E%0A%3Cnovo-picker%20%5Bconfig%5D%3D%22custom%22%20%5Bplaceholder%5D%3D%22placeholder%22%20%5B(ngModel)%5D%3D%22value%22%3E%3C%2Fnovo-picker%3E%0A`,
        selectorName: 'CustomPickerResultsExample, CustomPickerResults'
    },
    'basic-picker': {
        title: 'Basic Picker Example',
        component: BasicPickerExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Basic%20Picker%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'basic-picker-example'%2C%0A%20%20%20%20templateUrl%3A%20'basic-picker-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'basic-picker-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20BasicPickerExample%20%7B%0A%20%20public%20placeholder%3A%20string%20%3D%20'Select...'%3B%0A%20%20public%20staticDemo%3A%20any%20%3D%20%7B%0A%20%20%20%20options%3A%20%5B%0A%20%20%20%20%20%20'Alabama'%2C%0A%20%20%20%20%20%20'Alaska'%2C%0A%20%20%20%20%20%20'Arizona'%2C%0A%20%20%20%20%20%20'Arkansas'%2C%0A%20%20%20%20%20%20'California'%2C%0A%20%20%20%20%20%20'Colorado'%2C%0A%20%20%20%20%20%20'Connecticut'%2C%0A%20%20%20%20%20%20'Delaware'%2C%0A%20%20%20%20%20%20'Florida'%2C%0A%20%20%20%20%20%20'Georgia'%2C%0A%20%20%20%20%20%20'Hawaii'%2C%0A%20%20%20%20%20%20'Idaho'%2C%0A%20%20%20%20%20%20'Illinois'%2C%0A%20%20%20%20%20%20'Indiana'%2C%0A%20%20%20%20%20%20'Iowa'%2C%0A%20%20%20%20%20%20'Kansas'%2C%0A%20%20%20%20%20%20'Kentucky'%2C%0A%20%20%20%20%20%20'Louisiana'%2C%0A%20%20%20%20%20%20'Maine'%2C%0A%20%20%20%20%20%20'Maryland'%2C%0A%20%20%20%20%20%20'Massachusetts'%2C%0A%20%20%20%20%20%20'Michigan'%2C%0A%20%20%20%20%20%20'Minnesota'%2C%0A%20%20%20%20%20%20'Mississippi'%2C%0A%20%20%20%20%20%20'Missouri'%2C%0A%20%20%20%20%20%20'Montana'%2C%0A%20%20%20%20%20%20'Nebraska'%2C%0A%20%20%20%20%20%20'Nevada'%2C%0A%20%20%20%20%20%20'New%20Hampshire'%2C%0A%20%20%20%20%20%20'New%20Jersey'%2C%0A%20%20%20%20%20%20'New%20Mexico'%2C%0A%20%20%20%20%20%20'New%20York'%2C%0A%20%20%20%20%20%20'North%20Dakota'%2C%0A%20%20%20%20%20%20'North%20Carolina'%2C%0A%20%20%20%20%20%20'Ohio'%2C%0A%20%20%20%20%20%20'Oklahoma'%2C%0A%20%20%20%20%20%20'Oregon'%2C%0A%20%20%20%20%20%20'Pennsylvania'%2C%0A%20%20%20%20%20%20'Rhode%20Island'%2C%0A%20%20%20%20%20%20'South%20Carolina'%2C%0A%20%20%20%20%20%20'South%20Dakota'%2C%0A%20%20%20%20%20%20'Tennessee'%2C%0A%20%20%20%20%20%20'Texas'%2C%0A%20%20%20%20%20%20'Utah'%2C%0A%20%20%20%20%20%20'Vermont'%2C%0A%20%20%20%20%20%20'Virginia'%2C%0A%20%20%20%20%20%20'Washington'%2C%0A%20%20%20%20%20%20'West%20Virginia'%2C%0A%20%20%20%20%20%20'Wisconsin'%2C%0A%20%20%20%20%20%20'Wyoming'%2C%0A%20%20%20%20%5D%2C%0A%20%20%7D%3B%0A%20%20public%20value%3A%20string%3B%0A%0A%20%20onChanged(event)%20%7B%0A%20%20%20%20console.log('EVENT'%2C%20event)%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cdiv%20class%3D%22selected-value%22%3ESelected%20Value%3A%20%7B%7Bvalue%7D%7D%3C%2Fdiv%3E%0A%3Cnovo-picker%20%5Bconfig%5D%3D%22staticDemo%22%20%5Bplaceholder%5D%3D%22placeholder%22%20%5B(ngModel)%5D%3D%22value%22%3E%3C%2Fnovo-picker%3E%0A`
    },
    'async-picker': {
        title: 'Async Picker Example',
        component: AsyncPickerExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Async%20Picker%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'async-picker-example'%2C%0A%20%20%20%20templateUrl%3A%20'async-picker-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'async-picker-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20AsyncPickerExample%20%7B%0A%20%20public%20placeholder%3A%20string%20%3D%20'Select...'%3B%0A%20%20public%20value%3A%20string%3B%0A%20%20public%20async%3A%20any%3B%0A%0A%20%20constructor()%20%7B%0A%20%20%20%20this.value%20%3D%20null%3B%0A%20%20%20%20this.async%20%3D%20%7B%0A%20%20%20%20%20%20enableInfiniteScroll%3A%20true%2C%0A%20%20%20%20%20%20options%3A%20(term%2C%20page)%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20return%20new%20Promise((resolve)%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%20%20setTimeout(()%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20const%20arr%20%3D%20%5B%5D%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20for%20(let%20i%20%3D%200%3B%20i%20%3C%2020%3B%20i%2B%2B)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20arr.push(%7B%20value%3A%20%60Page%3A%20%24%7Bpage%7D%20-%20Item%3A%20%24%7Bi%20%2B%201%7D%60%2C%20label%3A%20%60Page%3A%20%24%7Bpage%7D%20-%20Item%3A%20%24%7Bi%20%2B%201%7D%60%20%7D)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20resolve(arr)%3B%0A%20%20%20%20%20%20%20%20%20%20%7D%2C%201000)%3B%0A%20%20%20%20%20%20%20%20%7D)%3B%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%7D%3B%0A%20%20%7D%0A%0A%20%20onChanged(event)%20%7B%0A%20%20%20%20console.log('EVENT'%2C%20event)%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cdiv%20class%3D%22selected-value%22%3ESelected%20Value%3A%20%7B%7Bvalue%7D%7D%3C%2Fdiv%3E%0A%3Cnovo-picker%20%5Bconfig%5D%3D%22async%22%20%5Bplaceholder%5D%3D%22placeholder%22%20%5B(ngModel)%5D%3D%22value%22%3E%3C%2Fnovo-picker%3E%0A`
    },
    'nested-multi-picker': {
        title: 'Nested Multi Picker Example',
        component: NestedMultiPickerExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0Aimport%20%7B%20ChecklistPickerResults%20%7D%20from%20'novo-elements'%3B%0A%0A%2F**%0A%20*%20%40title%20Nested%20Multi%20Picker%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'nested-multi-picker-example'%2C%0A%20%20%20%20templateUrl%3A%20'nested-multi-picker-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'nested-multi-picker-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20NestedMultiPickerExample%20%7B%0A%20%20placeholder%3A%20string%20%3D%20'Select...'%3B%0A%20%20parentChild%3A%20any%3B%0A%20%20parentChildTypes%3A%20any%3B%0A%20%20formatted%3A%20any%3B%0A%20%20parentChildValue%3A%20any%3B%0A%0A%20%20constructor()%20%7B%0A%20%20%20%20const%20departments%20%3D%20%5B%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20id%3A%201%2C%0A%20%20%20%20%20%20%20%20name%3A%20'Sales'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20id%3A%202%2C%0A%20%20%20%20%20%20%20%20name%3A%20'Engineering'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20id%3A%203%2C%0A%20%20%20%20%20%20%20%20name%3A%20'Marketing'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20id%3A%204%2C%0A%20%20%20%20%20%20%20%20name%3A%20'Finance'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20id%3A%205%2C%0A%20%20%20%20%20%20%20%20name%3A%20'Nobody%20Works%20Here'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%5D%3B%0A%20%20%20%20const%20users%20%3D%20%5B%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20id%3A%201%2C%0A%20%20%20%20%20%20%20%20departments%3A%20%5B1%2C%202%2C%204%5D%2C%0A%20%20%20%20%20%20%20%20name%3A%20'Bob%20Sales%2FEngineering%2FFin'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20id%3A%202%2C%0A%20%20%20%20%20%20%20%20departments%3A%20%5B4%5D%2C%0A%20%20%20%20%20%20%20%20name%3A%20'Beth%20Fin'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20id%3A%203%2C%0A%20%20%20%20%20%20%20%20departments%3A%20%5B2%5D%2C%0A%20%20%20%20%20%20%20%20name%3A%20'Artemis%20Eng'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20id%3A%204%2C%0A%20%20%20%20%20%20%20%20departments%3A%20%5B1%5D%2C%0A%20%20%20%20%20%20%20%20name%3A%20'Andy%20Sales'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20id%3A%205%2C%0A%20%20%20%20%20%20%20%20departments%3A%20%5B3%5D%2C%0A%20%20%20%20%20%20%20%20name%3A%20'Zoe%20Marketing'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20id%3A%206%2C%0A%20%20%20%20%20%20%20%20departments%3A%20%5B4%2C%202%5D%2C%0A%20%20%20%20%20%20%20%20name%3A%20'Ziva%20Eng%20Fin'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%5D%3B%0A%20%20%20%20this.parentChild%20%3D%20%7B%0A%20%20%20%20%20%20options%3A%20%5B%0A%20%20%20%20%20%20%20%20%7B%20type%3A%20'departments'%2C%20data%3A%20departments%2C%20format%3A%20'%24name'%2C%20field%3A%20'id'%2C%20isParentOf%3A%20'users'%20%7D%2C%0A%20%20%20%20%20%20%20%20%7B%20type%3A%20'users'%2C%20data%3A%20users%2C%20format%3A%20'%24name'%2C%20field%3A%20'id'%2C%20isChildOf%3A%20'departments'%20%7D%2C%0A%20%20%20%20%20%20%5D%2C%0A%20%20%20%20%20%20resultsTemplate%3A%20ChecklistPickerResults%2C%0A%20%20%20%20%20%20selectAllOption%3A%20false%2C%0A%20%20%20%20%20%20strictRelationship%3A%20false%2C%0A%20%20%20%20%20%20chipsCount%3A%206%2C%0A%20%20%20%20%7D%3B%0A%20%20%20%20this.parentChildTypes%20%3D%20%5B%0A%20%20%20%20%20%20%7B%20value%3A%20'departments'%2C%20isParentOf%3A%20true%2C%20singular%3A%20'department'%20%7D%2C%0A%20%20%20%20%20%20%7B%20value%3A%20'users'%2C%20isChildOf%3A%20true%2C%20singular%3A%20'user'%20%7D%2C%0A%20%20%20%20%5D%3B%0A%20%20%20%20this.parentChildValue%20%3D%20%7B%20departments%3A%20%5B2%2C%203%2C%204%5D%2C%20users%3A%20%5B4%2C%205%5D%20%7D%3B%0A%20%20%7D%0A%0A%20%20onChanged(event%3F%3A%20Event)%20%7B%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cdiv%20class%3D%22selected-value%22%3ESelected%20Departments%3A%20%3Cspan%20*ngFor%3D%22let%20item%20of%20parentChildValue.departments%22%3E%7B%7Bitem%7D%7D%20%3C%2Fspan%3E%0A%20%20%20%20Selected%20Users%3A%20%3Cspan%20*ngFor%3D%22let%20item%20of%20parentChildValue.users%22%3E%7B%7Bitem%7D%7D%20%3C%2Fspan%3E%3C%2Fdiv%3E%0A%3Cmulti-picker%0A%20%20%20%20%5Bsource%5D%3D%22parentChild%22%0A%20%20%20%20%5Bplaceholder%5D%3D%22placeholder%22%0A%20%20%20%20%5Btypes%5D%3D%22parentChildTypes%22%0A%20%20%20%20%5B(ngModel)%5D%3D%22parentChildValue%22%0A%20%20%20%20(changed)%3D%22onChanged(%24event)%22%3E%0A%3C%2Fmulti-picker%3E%0A`
    },
    'basic-multi-picker': {
        title: 'Basic Multi Picker Example',
        component: BasicMultiPickerExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0Aimport%20%7B%20ChecklistPickerResults%20%7D%20from%20'novo-elements'%3B%0A%0A%2F**%0A%20*%20%40title%20Basic%20Multi%20Picker%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'basic-multi-picker-example'%2C%0A%20%20%20%20templateUrl%3A%20'basic-multi-picker-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'basic-multi-picker-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20BasicMultiPickerExample%20%7B%0A%20%20placeholder%3A%20string%20%3D%20'Select...'%3B%0A%20%20value%3A%20any%20%3D%20%7B%20states%3A%20%5B'Alabama'%5D%2C%20collaborators%3A%20%5B1%2C%202%2C%203%2C%204%5D%20%7D%3B%0A%20%20types%3A%20any%20%3D%20%5B%0A%20%20%20%20%7B%20value%3A%20'states'%2C%20singular%3A%20'state'%20%7D%2C%0A%20%20%20%20%7B%20value%3A%20'collaborators'%2C%20singular%3A%20'collaborator'%20%7D%2C%0A%20%20%5D%3B%0A%20%20staticDemo%3A%20any%3B%0A%0A%20%20constructor()%20%7B%0A%20%20%20%20const%20states%20%3D%20%5B%0A%20%20%20%20%20%20'Alabama'%2C%0A%20%20%20%20%20%20'Alaska'%2C%0A%20%20%20%20%20%20'Arizona'%2C%0A%20%20%20%20%20%20'Arkansas'%2C%0A%20%20%20%20%20%20'California'%2C%0A%20%20%20%20%20%20'Colorado'%2C%0A%20%20%20%20%20%20'Connecticut'%2C%0A%20%20%20%20%20%20'Delaware'%2C%0A%20%20%20%20%20%20'Florida'%2C%0A%20%20%20%20%20%20'Georgia'%2C%0A%20%20%20%20%20%20'Hawaii'%2C%0A%20%20%20%20%20%20'Idaho'%2C%0A%20%20%20%20%20%20'Illinois'%2C%0A%20%20%20%20%20%20'Indiana'%2C%0A%20%20%20%20%20%20'Iowa'%2C%0A%20%20%20%20%20%20'Kansas'%2C%0A%20%20%20%20%20%20'Kentucky'%2C%0A%20%20%20%20%20%20'Louisiana'%2C%0A%20%20%20%20%20%20'Maine'%2C%0A%20%20%20%20%20%20'Maryland'%2C%0A%20%20%20%20%20%20'Massachusetts'%2C%0A%20%20%20%20%20%20'Michigan'%2C%0A%20%20%20%20%20%20'Minnesota'%2C%0A%20%20%20%20%20%20'Mississippi'%2C%0A%20%20%20%20%20%20'Missouri'%2C%0A%20%20%20%20%20%20'Montana'%2C%0A%20%20%20%20%20%20'Nebraska'%2C%0A%20%20%20%20%20%20'Nevada'%2C%0A%20%20%20%20%20%20'New%20Hampshire'%2C%0A%20%20%20%20%20%20'New%20Jersey'%2C%0A%20%20%20%20%20%20'New%20Mexico'%2C%0A%20%20%20%20%20%20'New%20York'%2C%0A%20%20%20%20%20%20'North%20Dakota'%2C%0A%20%20%20%20%20%20'North%20Carolina'%2C%0A%20%20%20%20%20%20'Ohio'%2C%0A%20%20%20%20%20%20'Oklahoma'%2C%0A%20%20%20%20%20%20'Oregon'%2C%0A%20%20%20%20%20%20'Pennsylvania'%2C%0A%20%20%20%20%20%20'Rhode%20Island'%2C%0A%20%20%20%20%20%20'South%20Carolina'%2C%0A%20%20%20%20%20%20'South%20Dakota'%2C%0A%20%20%20%20%20%20'Tennessee'%2C%0A%20%20%20%20%20%20'Texas'%2C%0A%20%20%20%20%20%20'Utah'%2C%0A%20%20%20%20%20%20'Vermont'%2C%0A%20%20%20%20%20%20'Virginia'%2C%0A%20%20%20%20%20%20'Washington'%2C%0A%20%20%20%20%20%20'West%20Virginia'%2C%0A%20%20%20%20%20%20'Wisconsin'%2C%0A%20%20%20%20%20%20'Wyoming'%2C%0A%20%20%20%20%5D%3B%0A%20%20%20%20const%20collaborators%20%3D%20%5B%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20id%3A%201%2C%0A%20%20%20%20%20%20%20%20firstName%3A%20'Brian'%2C%0A%20%20%20%20%20%20%20%20lastName%3A%20'Kimball'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20id%3A%202%2C%0A%20%20%20%20%20%20%20%20firstName%3A%20'Josh'%2C%0A%20%20%20%20%20%20%20%20lastName%3A%20'Godi'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20id%3A%203%2C%0A%20%20%20%20%20%20%20%20firstName%3A%20'Alec'%2C%0A%20%20%20%20%20%20%20%20lastName%3A%20'Sibilia'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20id%3A%204%2C%0A%20%20%20%20%20%20%20%20firstName%3A%20'Kameron'%2C%0A%20%20%20%20%20%20%20%20lastName%3A%20'Sween'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%5D%3B%0A%20%20%20%20this.staticDemo%20%3D%20%7B%0A%20%20%20%20%20%20options%3A%20%5B%0A%20%20%20%20%20%20%20%20%7B%20type%3A%20'collaborators'%2C%20data%3A%20collaborators%2C%20format%3A%20'%24firstName%20%24lastName'%2C%20field%3A%20'id'%20%7D%2C%0A%20%20%20%20%20%20%20%20%7B%20type%3A%20'states'%2C%20data%3A%20states%20%7D%2C%0A%20%20%20%20%20%20%5D%2C%0A%20%20%20%20%20%20resultsTemplate%3A%20ChecklistPickerResults%2C%0A%20%20%20%20%20%20selectAllOption%3A%20true%2C%0A%20%20%20%20%7D%3B%0A%20%20%7D%0A%0A%20%20onChanged(%24event%3F%3A%20Event)%20%7B%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cdiv%20class%3D%22selected-value%22%3ESelected%20States%3A%20%3Cspan%20*ngFor%3D%22let%20item%20of%20value.states%22%3E%7B%7Bitem%7D%7D%20%3C%2Fspan%3E%0A%20%20%20%20Selected%20Collaborators%3A%20%3Cspan%20*ngFor%3D%22let%20item%20of%20value.collaborators%22%3E%7B%7Bitem%7D%7D%20%3C%2Fspan%3E%3C%2Fdiv%3E%0A%3Cmulti-picker%0A%20%20%20%20%5Bsource%5D%3D%22staticDemo%22%0A%20%20%20%20%5Bplaceholder%5D%3D%22placeholder%22%0A%20%20%20%20%5Btypes%5D%3D%22types%22%0A%20%20%20%20%5B(ngModel)%5D%3D%22value%22%0A%20%20%20%20(changed)%3D%22onChanged(%24event)%22%3E%0A%3C%2Fmulti-picker%3E%0A`
    },
    'vertical-options': {
        title: 'Vertical Options Example',
        component: VerticalOptionsExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0Aimport%20%7B%20UntypedFormArray%20%7D%20from%20'%40angular%2Fforms'%3B%0Aimport%20%7B%0A%20%20BaseControl%2C%0A%20%20CheckboxControl%2C%0A%20%20FormUtils%2C%0A%20%20NovoControlGroupAddConfig%2C%0A%20%20NovoFormGroup%2C%0A%20%20ReadOnlyControl%2C%0A%20%20SelectControl%2C%0A%20%20TextBoxControl%2C%0A%7D%20from%20'novo-elements'%3B%0A%0A%2F**%0A%20*%20%40title%20Vertical%20Options%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'vertical-options-example'%2C%0A%20%20%20%20templateUrl%3A%20'vertical-options-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'vertical-options-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20VerticalOptionsExample%20%7B%0A%20%20public%20formGroup%3A%20NovoFormGroup%3B%0A%20%20public%20controls%3A%20BaseControl%5B%5D%20%3D%20%5B%5D%3B%0A%20%20public%20initialValue%3A%20%7B%7D%5B%5D%20%3D%20%5B%5D%3B%0A%20%20public%20initValue%3A%20%7B%7D%5B%5D%20%3D%20%5B%7B%20text%3A%20'TEXT'%2C%20percentage%3A%2012%2C%20checkbox%3A%20true%2C%20test4%3A%20'TEST'%20%7D%5D%3B%0A%0A%20%20public%20simpleAddConfig%3A%20NovoControlGroupAddConfig%20%3D%20%7B%0A%20%20%20%20label%3A%20'Add'%2C%0A%20%20%7D%3B%0A%20%20public%20anotherAddConfig%3A%20NovoControlGroupAddConfig%20%3D%20%7B%0A%20%20%20%20label%3A%20'Add%20a%20new%20fancy%20thing!'%2C%0A%20%20%7D%3B%0A%0A%20%20public%20emptyMessage%3A%20string%20%3D%20'There%20are%20no%20items...'%3B%0A%20%20public%20canEditFunction%3A%20Function%3B%0A%20%20public%20canRemoveFunction%3A%20Function%3B%0A%0A%20%20constructor(private%20formUtils%3A%20FormUtils)%20%7B%0A%20%20%20%20%2F%2F%20Grouped%20form%20demo%0A%20%20%20%20this.setupGroupedFormDemo()%3B%0A%20%20%20%20%2F%2F%20Setup%20function%0A%20%20%20%20this.canEditFunction%20%3D%20this.canEdit.bind(this)%3B%0A%20%20%20%20this.canRemoveFunction%20%3D%20this.canRemove.bind(this)%3B%0A%20%20%7D%0A%0A%20%20public%20onRemove(value%3A%20any)%20%7B%0A%20%20%20%20console.log('REMOVING'%2C%20value)%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%7D%0A%0A%20%20public%20onEdit(value%3A%20any)%20%7B%0A%20%20%20%20console.log('EDITING'%2C%20value)%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%7D%0A%0A%20%20public%20canEdit(value%3A%20any%2C%20index%3A%20number)%20%7B%0A%20%20%20%20console.log('canEdit'%2C%20value%2C%20index)%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%20%20return%20index%20%3E%200%3B%0A%20%20%7D%0A%20%20public%20canRemove(value%3A%20any%2C%20index%3A%20number)%20%7B%0A%20%20%20%20console.log('canRemove'%2C%20value%2C%20index)%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%20%20return%20index%20%3D%3D%3D%200%3B%0A%20%20%7D%0A%0A%20%20public%20updateInitialValue()%20%7B%0A%20%20%20%20this.initValue%20%3D%20%5B%0A%20%20%20%20%20%20%7B%20text%3A%20'TEXT%20111'%2C%20percentage%3A%20100%2C%20checkbox%3A%20false%2C%20test4%3A%20'TEST%20111'%20%7D%2C%0A%20%20%20%20%20%20%7B%20text%3A%20'TEXT%20222'%2C%20percentage%3A%205%2C%20checkbox%3A%20false%2C%20test4%3A%20'TEST%20222'%20%7D%2C%0A%20%20%20%20%20%20%7B%20text%3A%20'TEXT%20333'%2C%20percentage%3A%2060%2C%20checkbox%3A%20true%2C%20test4%3A%20'TEST%20333'%20%7D%2C%0A%20%20%20%20%5D%3B%0A%20%20%7D%0A%0A%20%20public%20customDelete(form%3A%20NovoFormGroup%2C%20key%3A%20string%2C%20index%3A%20number)%20%7B%0A%20%20%20%20console.log('DELETE'%2C%20form%2C%20key%2C%20index)%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%20%20const%20control%3A%20UntypedFormArray%20%3D%20form.controls%5Bkey%5D%20as%20UntypedFormArray%3B%0A%20%20%20%20control.removeAt(index)%3B%0A%20%20%7D%0A%0A%20%20public%20customEdit(form%3A%20NovoFormGroup%2C%20key%3A%20string%2C%20index%3A%20number)%20%7B%0A%20%20%20%20console.log('EDIT'%2C%20form%2C%20key%2C%20index)%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%7D%0A%0A%20%20private%20setupGroupedFormDemo()%20%7B%0A%20%20%20%20this.formGroup%20%3D%20this.formUtils.emptyFormGroup()%3B%0A%20%20%20%20const%20label%20%3D%20new%20ReadOnlyControl(%7B%20key%3A%20'label'%2C%20value%3A%20'Label%20%3A)'%20%7D)%3B%0A%20%20%20%20const%20c1%20%3D%20new%20SelectControl(%7B%20key%3A%20'text'%2C%20label%3A%20'Text%20Box'%2C%20options%3A%20%5B%7B%20value%3A%20'hello'%2C%20label%3A%20'Hello'%20%7D%5D%20%7D)%3B%0A%20%20%20%20const%20c2%20%3D%20new%20TextBoxControl(%7B%20type%3A%20'percentage'%2C%20key%3A%20'percentage'%2C%20label%3A%20'Percent'%2C%20required%3A%20true%20%7D)%3B%0A%20%20%20%20const%20c3%20%3D%20new%20CheckboxControl(%7B%20key%3A%20'checkbox'%2C%20label%3A%20'Check%20Me!'%2C%20width%3A%20100%20%7D)%3B%0A%20%20%20%20const%20c4%20%3D%20new%20TextBoxControl(%7B%20key%3A%20'test4'%2C%20label%3A%20'TEST4'%20%7D)%3B%0A%20%20%20%20this.controls.push(label)%3B%0A%20%20%20%20this.controls.push(c1)%3B%0A%20%20%20%20this.controls.push(c2)%3B%0A%20%20%20%20this.controls.push(c3)%3B%0A%20%20%20%20this.controls.push(c4)%3B%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cnovo-form%20%5Bform%5D%3D%22formGroup%22%3E%0A%20%20%20%20%3Cnovo-control-group%20%5BinitialValue%5D%3D%22initialValue%22%20collapsible%3D%22true%22%20%5Badd%5D%3D%22anotherAddConfig%22%20remove%3D%22true%22%20icon%3D%22idea%22%20label%3D%22Vertical%22%20key%3D%22vertical%22%20vertical%3D%22true%22%20description%3D%22Test%20Description%22%20%5Bform%5D%3D%22formGroup%22%20%5Bcontrols%5D%3D%22controls%22%20%5BemptyMessage%5D%3D%22emptyMessage%22%3E%3C%2Fnovo-control-group%3E%0A%3C%2Fnovo-form%3E%0A%3Cdiv%20class%3D%22final-value%22%3EInitial%20Value%3A%20%7B%7B%20initialValue%20%7C%20json%20%7D%7D%3C%2Fdiv%3E%0A%3Cdiv%20class%3D%22final-value%22%3EValue%3A%20%7B%7B%20formGroup.value%20%7C%20json%20%7D%7D%3C%2Fdiv%3E%0A`
    },
    'vertical': {
        title: 'Vertical Example',
        component: VerticalExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0Aimport%20%7B%20UntypedFormArray%20%7D%20from%20'%40angular%2Fforms'%3B%0Aimport%20%7B%0A%20%20BaseControl%2C%0A%20%20CheckboxControl%2C%0A%20%20FormUtils%2C%0A%20%20NovoControlGroupAddConfig%2C%0A%20%20NovoFormGroup%2C%0A%20%20ReadOnlyControl%2C%0A%20%20SelectControl%2C%0A%20%20TextBoxControl%2C%0A%7D%20from%20'novo-elements'%3B%0A%0A%2F**%0A%20*%20%40title%20Vertical%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'vertical-example'%2C%0A%20%20%20%20templateUrl%3A%20'vertical-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'vertical-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20VerticalExample%20%7B%0A%20%20public%20formGroup%3A%20NovoFormGroup%3B%0A%20%20public%20controls%3A%20BaseControl%5B%5D%20%3D%20%5B%5D%3B%0A%20%20public%20initialValue%3A%20%7B%7D%5B%5D%20%3D%20%5B%5D%3B%0A%20%20public%20initValue%3A%20%7B%7D%5B%5D%20%3D%20%5B%7B%20text%3A%20'TEXT'%2C%20percentage%3A%2012%2C%20checkbox%3A%20true%2C%20test4%3A%20'TEST'%20%7D%5D%3B%0A%0A%20%20public%20simpleAddConfig%3A%20NovoControlGroupAddConfig%20%3D%20%7B%0A%20%20%20%20label%3A%20'Add'%2C%0A%20%20%7D%3B%0A%20%20public%20anotherAddConfig%3A%20NovoControlGroupAddConfig%20%3D%20%7B%0A%20%20%20%20label%3A%20'Add%20a%20new%20fancy%20thing!'%2C%0A%20%20%7D%3B%0A%0A%20%20public%20emptyMessage%3A%20string%20%3D%20'There%20are%20no%20items...'%3B%0A%20%20public%20canEditFunction%3A%20Function%3B%0A%20%20public%20canRemoveFunction%3A%20Function%3B%0A%0A%20%20constructor(private%20formUtils%3A%20FormUtils)%20%7B%0A%20%20%20%20%2F%2F%20Grouped%20form%20demo%0A%20%20%20%20this.setupGroupedFormDemo()%3B%0A%20%20%20%20%2F%2F%20Setup%20function%0A%20%20%20%20this.canEditFunction%20%3D%20this.canEdit.bind(this)%3B%0A%20%20%20%20this.canRemoveFunction%20%3D%20this.canRemove.bind(this)%3B%0A%20%20%7D%0A%0A%20%20public%20onRemove(value%3A%20any)%20%7B%0A%20%20%20%20console.log('REMOVING'%2C%20value)%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%7D%0A%0A%20%20public%20onEdit(value%3A%20any)%20%7B%0A%20%20%20%20console.log('EDITING'%2C%20value)%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%7D%0A%0A%20%20public%20canEdit(value%3A%20any%2C%20index%3A%20number)%20%7B%0A%20%20%20%20console.log('canEdit'%2C%20value%2C%20index)%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%20%20return%20index%20%3E%200%3B%0A%20%20%7D%0A%20%20public%20canRemove(value%3A%20any%2C%20index%3A%20number)%20%7B%0A%20%20%20%20console.log('canRemove'%2C%20value%2C%20index)%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%20%20return%20index%20%3D%3D%3D%200%3B%0A%20%20%7D%0A%0A%20%20public%20updateInitialValue()%20%7B%0A%20%20%20%20this.initValue%20%3D%20%5B%0A%20%20%20%20%20%20%7B%20text%3A%20'TEXT%20111'%2C%20percentage%3A%20100%2C%20checkbox%3A%20false%2C%20test4%3A%20'TEST%20111'%20%7D%2C%0A%20%20%20%20%20%20%7B%20text%3A%20'TEXT%20222'%2C%20percentage%3A%205%2C%20checkbox%3A%20false%2C%20test4%3A%20'TEST%20222'%20%7D%2C%0A%20%20%20%20%20%20%7B%20text%3A%20'TEXT%20333'%2C%20percentage%3A%2060%2C%20checkbox%3A%20true%2C%20test4%3A%20'TEST%20333'%20%7D%2C%0A%20%20%20%20%5D%3B%0A%20%20%7D%0A%0A%20%20public%20customDelete(form%3A%20NovoFormGroup%2C%20key%3A%20string%2C%20index%3A%20number)%20%7B%0A%20%20%20%20console.log('DELETE'%2C%20form%2C%20key%2C%20index)%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%20%20const%20control%3A%20UntypedFormArray%20%3D%20form.controls%5Bkey%5D%20as%20UntypedFormArray%3B%0A%20%20%20%20control.removeAt(index)%3B%0A%20%20%7D%0A%0A%20%20public%20customEdit(form%3A%20NovoFormGroup%2C%20key%3A%20string%2C%20index%3A%20number)%20%7B%0A%20%20%20%20console.log('EDIT'%2C%20form%2C%20key%2C%20index)%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%7D%0A%0A%20%20private%20setupGroupedFormDemo()%20%7B%0A%20%20%20%20this.formGroup%20%3D%20this.formUtils.emptyFormGroup()%3B%0A%20%20%20%20const%20label%20%3D%20new%20ReadOnlyControl(%7B%20key%3A%20'label'%2C%20value%3A%20'Label%20%3A)'%20%7D)%3B%0A%20%20%20%20const%20c1%20%3D%20new%20SelectControl(%7B%20key%3A%20'text'%2C%20label%3A%20'Text%20Box'%2C%20options%3A%20%5B%7B%20value%3A%20'hello'%2C%20label%3A%20'Hello'%20%7D%5D%20%7D)%3B%0A%20%20%20%20const%20c2%20%3D%20new%20TextBoxControl(%7B%20type%3A%20'percentage'%2C%20key%3A%20'percentage'%2C%20label%3A%20'Percent'%2C%20required%3A%20true%20%7D)%3B%0A%20%20%20%20const%20c3%20%3D%20new%20CheckboxControl(%7B%20key%3A%20'checkbox'%2C%20label%3A%20'Check%20Me!'%2C%20width%3A%20100%20%7D)%3B%0A%20%20%20%20const%20c4%20%3D%20new%20TextBoxControl(%7B%20key%3A%20'test4'%2C%20label%3A%20'TEST4'%20%7D)%3B%0A%20%20%20%20this.controls.push(label)%3B%0A%20%20%20%20this.controls.push(c1)%3B%0A%20%20%20%20this.controls.push(c2)%3B%0A%20%20%20%20this.controls.push(c3)%3B%0A%20%20%20%20this.controls.push(c4)%3B%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cnovo-form%20%5Bform%5D%3D%22formGroup%22%3E%0A%20%20%20%20%3Cnovo-control-group%20%5BinitialValue%5D%3D%22initialValue%22%20%5Badd%5D%3D%22simpleAddConfig%22%20remove%3D%22true%22%20icon%3D%22idea%22%20label%3D%22Vertical%22%20key%3D%22vertical%22%20vertical%3D%22true%22%20%5Bform%5D%3D%22formGroup%22%20%5Bcontrols%5D%3D%22controls%22%20%5BemptyMessage%5D%3D%22emptyMessage%22%3E%3C%2Fnovo-control-group%3E%0A%3C%2Fnovo-form%3E%0A%3Cdiv%20class%3D%22final-value%22%3EInitial%20Value%3A%20%7B%7B%20initialValue%20%7C%20json%20%7D%7D%3C%2Fdiv%3E%0A%3Cdiv%20class%3D%22final-value%22%3EValue%3A%20%7B%7B%20formGroup.value%20%7C%20json%20%7D%7D%3C%2Fdiv%3E%0A`
    },
    'horizontal-options': {
        title: 'Horizontal Options Example',
        component: HorizontalOptionsExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0Aimport%20%7B%20UntypedFormArray%20%7D%20from%20'%40angular%2Fforms'%3B%0Aimport%20%7B%0A%20%20BaseControl%2C%0A%20%20CheckboxControl%2C%0A%20%20FormUtils%2C%0A%20%20NovoControlGroupAddConfig%2C%0A%20%20NovoFormGroup%2C%0A%20%20ReadOnlyControl%2C%0A%20%20SelectControl%2C%0A%20%20TextBoxControl%2C%0A%7D%20from%20'novo-elements'%3B%0A%0A%2F**%0A%20*%20%40title%20Horizontal%20Options%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'horizontal-options-example'%2C%0A%20%20%20%20templateUrl%3A%20'horizontal-options-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'horizontal-options-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20HorizontalOptionsExample%20%7B%0A%20%20public%20formGroup%3A%20NovoFormGroup%3B%0A%20%20public%20controls%3A%20BaseControl%5B%5D%20%3D%20%5B%5D%3B%0A%20%20public%20initialValue%3A%20%7B%7D%5B%5D%20%3D%20%5B%5D%3B%0A%20%20public%20initValue%3A%20%7B%7D%5B%5D%20%3D%20%5B%7B%20text%3A%20'TEXT'%2C%20percentage%3A%2012%2C%20checkbox%3A%20true%2C%20test4%3A%20'TEST'%20%7D%5D%3B%0A%0A%20%20public%20simpleAddConfig%3A%20NovoControlGroupAddConfig%20%3D%20%7B%0A%20%20%20%20label%3A%20'Add'%2C%0A%20%20%7D%3B%0A%20%20public%20anotherAddConfig%3A%20NovoControlGroupAddConfig%20%3D%20%7B%0A%20%20%20%20label%3A%20'Add%20a%20new%20fancy%20thing!'%2C%0A%20%20%7D%3B%0A%0A%20%20public%20emptyMessage%3A%20string%20%3D%20'There%20are%20no%20items...'%3B%0A%20%20public%20canEditFunction%3A%20Function%3B%0A%20%20public%20canRemoveFunction%3A%20Function%3B%0A%0A%20%20constructor(private%20formUtils%3A%20FormUtils)%20%7B%0A%20%20%20%20%2F%2F%20Grouped%20form%20demo%0A%20%20%20%20this.setupGroupedFormDemo()%3B%0A%20%20%20%20%2F%2F%20Setup%20function%0A%20%20%20%20this.canEditFunction%20%3D%20this.canEdit.bind(this)%3B%0A%20%20%20%20this.canRemoveFunction%20%3D%20this.canRemove.bind(this)%3B%0A%20%20%7D%0A%0A%20%20public%20onRemove(value%3A%20any)%20%7B%0A%20%20%20%20console.log('REMOVING'%2C%20value)%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%7D%0A%0A%20%20public%20onEdit(value%3A%20any)%20%7B%0A%20%20%20%20console.log('EDITING'%2C%20value)%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%7D%0A%0A%20%20public%20canEdit(value%3A%20any%2C%20index%3A%20number)%20%7B%0A%20%20%20%20console.log('canEdit'%2C%20value%2C%20index)%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%20%20return%20index%20%3E%200%3B%0A%20%20%7D%0A%20%20public%20canRemove(value%3A%20any%2C%20index%3A%20number)%20%7B%0A%20%20%20%20console.log('canRemove'%2C%20value%2C%20index)%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%20%20return%20index%20%3D%3D%3D%200%3B%0A%20%20%7D%0A%0A%20%20public%20updateInitialValue()%20%7B%0A%20%20%20%20this.initValue%20%3D%20%5B%0A%20%20%20%20%20%20%7B%20text%3A%20'TEXT%20111'%2C%20percentage%3A%20100%2C%20checkbox%3A%20false%2C%20test4%3A%20'TEST%20111'%20%7D%2C%0A%20%20%20%20%20%20%7B%20text%3A%20'TEXT%20222'%2C%20percentage%3A%205%2C%20checkbox%3A%20false%2C%20test4%3A%20'TEST%20222'%20%7D%2C%0A%20%20%20%20%20%20%7B%20text%3A%20'TEXT%20333'%2C%20percentage%3A%2060%2C%20checkbox%3A%20true%2C%20test4%3A%20'TEST%20333'%20%7D%2C%0A%20%20%20%20%5D%3B%0A%20%20%7D%0A%0A%20%20public%20customDelete(form%3A%20NovoFormGroup%2C%20key%3A%20string%2C%20index%3A%20number)%20%7B%0A%20%20%20%20console.log('DELETE'%2C%20form%2C%20key%2C%20index)%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%20%20const%20control%3A%20UntypedFormArray%20%3D%20form.controls%5Bkey%5D%20as%20UntypedFormArray%3B%0A%20%20%20%20control.removeAt(index)%3B%0A%20%20%7D%0A%0A%20%20public%20customEdit(form%3A%20NovoFormGroup%2C%20key%3A%20string%2C%20index%3A%20number)%20%7B%0A%20%20%20%20console.log('EDIT'%2C%20form%2C%20key%2C%20index)%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%7D%0A%0A%20%20private%20setupGroupedFormDemo()%20%7B%0A%20%20%20%20this.formGroup%20%3D%20this.formUtils.emptyFormGroup()%3B%0A%20%20%20%20const%20label%20%3D%20new%20ReadOnlyControl(%7B%20key%3A%20'label'%2C%20value%3A%20'Label%20%3A)'%20%7D)%3B%0A%20%20%20%20const%20c1%20%3D%20new%20SelectControl(%7B%20key%3A%20'text'%2C%20label%3A%20'Text%20Box'%2C%20options%3A%20%5B%7B%20value%3A%20'hello'%2C%20label%3A%20'Hello'%20%7D%5D%20%7D)%3B%0A%20%20%20%20const%20c2%20%3D%20new%20TextBoxControl(%7B%20type%3A%20'percentage'%2C%20key%3A%20'percentage'%2C%20label%3A%20'Percent'%2C%20required%3A%20true%20%7D)%3B%0A%20%20%20%20const%20c3%20%3D%20new%20CheckboxControl(%7B%20key%3A%20'checkbox'%2C%20label%3A%20'Check%20Me!'%2C%20width%3A%20100%20%7D)%3B%0A%20%20%20%20const%20c4%20%3D%20new%20TextBoxControl(%7B%20key%3A%20'test4'%2C%20label%3A%20'TEST4'%20%7D)%3B%0A%20%20%20%20this.controls.push(label)%3B%0A%20%20%20%20this.controls.push(c1)%3B%0A%20%20%20%20this.controls.push(c2)%3B%0A%20%20%20%20this.controls.push(c3)%3B%0A%20%20%20%20this.controls.push(c4)%3B%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cnovo-form%20%5Bform%5D%3D%22formGroup%22%3E%0A%20%20%20%20%3Cnovo-control-group%20%5BinitialValue%5D%3D%22initialValue%22%20collapsible%3D%22true%22%20%5Badd%5D%3D%22anotherAddConfig%22%20remove%3D%22true%22%20label%3D%22Horizontal%22%20key%3D%22horizontal%22%20description%3D%22Test%20Description%22%20%5Bform%5D%3D%22formGroup%22%20%5Bcontrols%5D%3D%22controls%22%20%5BemptyMessage%5D%3D%22emptyMessage%22%3E%3C%2Fnovo-control-group%3E%0A%3C%2Fnovo-form%3E%0A%3Cdiv%20class%3D%22final-value%22%3EInitial%20Value%3A%20%7B%7B%20initialValue%20%7C%20json%20%7D%7D%3C%2Fdiv%3E%0A%3Cdiv%20class%3D%22final-value%22%3EValue%3A%20%7B%7B%20formGroup.value%20%7C%20json%20%7D%7D%3C%2Fdiv%3E%0A`
    },
    'horizontal': {
        title: 'Horizontal Example',
        component: HorizontalExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0Aimport%20%7B%20UntypedFormArray%20%7D%20from%20'%40angular%2Fforms'%3B%0Aimport%20%7B%0A%20%20BaseControl%2C%0A%20%20CheckboxControl%2C%0A%20%20FormUtils%2C%0A%20%20NovoControlGroupAddConfig%2C%0A%20%20NovoFormGroup%2C%0A%20%20ReadOnlyControl%2C%0A%20%20SelectControl%2C%0A%20%20TextBoxControl%2C%0A%7D%20from%20'novo-elements'%3B%0A%0A%2F**%0A%20*%20%40title%20Horizontal%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'horizontal-example'%2C%0A%20%20%20%20templateUrl%3A%20'horizontal-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'horizontal-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20HorizontalExample%20%7B%0A%20%20public%20formGroup%3A%20NovoFormGroup%3B%0A%20%20public%20controls%3A%20BaseControl%5B%5D%20%3D%20%5B%5D%3B%0A%20%20public%20initialValue%3A%20%7B%7D%5B%5D%20%3D%20%5B%5D%3B%0A%20%20public%20initValue%3A%20%7B%7D%5B%5D%20%3D%20%5B%7B%20text%3A%20'TEXT'%2C%20percentage%3A%2012%2C%20checkbox%3A%20true%2C%20test4%3A%20'TEST'%20%7D%5D%3B%0A%0A%20%20public%20simpleAddConfig%3A%20NovoControlGroupAddConfig%20%3D%20%7B%0A%20%20%20%20label%3A%20'Add'%2C%0A%20%20%7D%3B%0A%20%20public%20anotherAddConfig%3A%20NovoControlGroupAddConfig%20%3D%20%7B%0A%20%20%20%20label%3A%20'Add%20a%20new%20fancy%20thing!'%2C%0A%20%20%7D%3B%0A%0A%20%20public%20emptyMessage%3A%20string%20%3D%20'There%20are%20no%20items...'%3B%0A%20%20public%20canEditFunction%3A%20Function%3B%0A%20%20public%20canRemoveFunction%3A%20Function%3B%0A%0A%20%20constructor(private%20formUtils%3A%20FormUtils)%20%7B%0A%20%20%20%20%2F%2F%20Grouped%20form%20demo%0A%20%20%20%20this.setupGroupedFormDemo()%3B%0A%20%20%20%20%2F%2F%20Setup%20function%0A%20%20%20%20this.canEditFunction%20%3D%20this.canEdit.bind(this)%3B%0A%20%20%20%20this.canRemoveFunction%20%3D%20this.canRemove.bind(this)%3B%0A%20%20%7D%0A%0A%20%20public%20onRemove(value%3A%20any)%20%7B%0A%20%20%20%20console.log('REMOVING'%2C%20value)%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%7D%0A%0A%20%20public%20onEdit(value%3A%20any)%20%7B%0A%20%20%20%20console.log('EDITING'%2C%20value)%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%7D%0A%0A%20%20public%20canEdit(value%3A%20any%2C%20index%3A%20number)%20%7B%0A%20%20%20%20console.log('canEdit'%2C%20value%2C%20index)%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%20%20return%20index%20%3E%200%3B%0A%20%20%7D%0A%20%20public%20canRemove(value%3A%20any%2C%20index%3A%20number)%20%7B%0A%20%20%20%20console.log('canRemove'%2C%20value%2C%20index)%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%20%20return%20index%20%3D%3D%3D%200%3B%0A%20%20%7D%0A%0A%20%20public%20updateInitialValue()%20%7B%0A%20%20%20%20this.initValue%20%3D%20%5B%0A%20%20%20%20%20%20%7B%20text%3A%20'hello'%2C%20percentage%3A%20100%2C%20checkbox%3A%20false%2C%20test4%3A%20'TEST%20111'%20%7D%2C%0A%20%20%20%20%20%20%7B%20text%3A%20'TEXT%20222'%2C%20percentage%3A%205%2C%20checkbox%3A%20false%2C%20test4%3A%20'TEST%20222'%20%7D%2C%0A%20%20%20%20%20%20%7B%20text%3A%20'TEXT%20333'%2C%20percentage%3A%2060%2C%20checkbox%3A%20true%2C%20test4%3A%20'TEST%20333'%20%7D%2C%0A%20%20%20%20%5D%3B%0A%20%20%7D%0A%0A%20%20public%20customDelete(form%3A%20NovoFormGroup%2C%20key%3A%20string%2C%20index%3A%20number)%20%7B%0A%20%20%20%20console.log('DELETE'%2C%20form%2C%20key%2C%20index)%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%20%20const%20control%3A%20UntypedFormArray%20%3D%20form.controls%5Bkey%5D%20as%20UntypedFormArray%3B%0A%20%20%20%20control.removeAt(index)%3B%0A%20%20%7D%0A%0A%20%20public%20customEdit(form%3A%20NovoFormGroup%2C%20key%3A%20string%2C%20index%3A%20number)%20%7B%0A%20%20%20%20console.log('EDIT'%2C%20form%2C%20key%2C%20index)%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%7D%0A%0A%20%20private%20setupGroupedFormDemo()%20%7B%0A%20%20%20%20this.formGroup%20%3D%20this.formUtils.emptyFormGroup()%3B%0A%20%20%20%20const%20label%20%3D%20new%20ReadOnlyControl(%7B%20key%3A%20'label'%2C%20value%3A%20'Label%20%3A)'%20%7D)%3B%0A%20%20%20%20const%20c1%20%3D%20new%20SelectControl(%7B%20key%3A%20'text'%2C%20label%3A%20'Text%20Box'%2C%20options%3A%20%5B%7B%20value%3A%20'hello'%2C%20label%3A%20'Hello'%20%7D%5D%20%7D)%3B%0A%20%20%20%20const%20c2%20%3D%20new%20TextBoxControl(%7B%20type%3A%20'percentage'%2C%20key%3A%20'percentage'%2C%20label%3A%20'Percent'%2C%20required%3A%20true%20%7D)%3B%0A%20%20%20%20const%20c3%20%3D%20new%20CheckboxControl(%7B%20key%3A%20'checkbox'%2C%20label%3A%20'Check%20Me!'%2C%20width%3A%20100%20%7D)%3B%0A%20%20%20%20const%20c4%20%3D%20new%20TextBoxControl(%7B%20key%3A%20'test4'%2C%20label%3A%20'TEST4'%20%7D)%3B%0A%20%20%20%20this.controls.push(label)%3B%0A%20%20%20%20this.controls.push(c1)%3B%0A%20%20%20%20this.controls.push(c2)%3B%0A%20%20%20%20this.controls.push(c3)%3B%0A%20%20%20%20this.controls.push(c4)%3B%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cbutton%20theme%3D%22primary%22%20(click)%3D%22updateInitialValue()%22%3EUpdate%20Initial%20Value%3C%2Fbutton%3E%0A%3Cbr%2F%3E%0A%3Cbr%2F%3E%0A%3Cnovo-form%20%5Bform%5D%3D%22formGroup%22%3E%0A%20%20%20%20%3Cnovo-control-group%20%5BcanEdit%5D%3D%22canEditFunction%22%20%5BcanRemove%5D%3D%22canRemoveFunction%22%20(onRemove)%3D%22onRemove(%24event)%22%20(onEdit)%3D%22onEdit(%24event)%22%20%5BinitialValue%5D%3D%22initValue%22%20%5Badd%5D%3D%22simpleAddConfig%22%20remove%3D%22true%22%20edit%3D%22true%22%20label%3D%22Horizontal%22%20key%3D%22horizontal%22%20%5Bform%5D%3D%22formGroup%22%20%5Bcontrols%5D%3D%22controls%22%20%5BemptyMessage%5D%3D%22emptyMessage%22%3E%3C%2Fnovo-control-group%3E%0A%3C%2Fnovo-form%3E%0A%3Cdiv%20class%3D%22final-value%22%3EInitial%20Value%3A%20%7B%7B%20initValue%20%7C%20json%20%7D%7D%3C%2Fdiv%3E%0A%3Cdiv%20class%3D%22final-value%22%3EValue%3A%20%7B%7B%20formGroup.value%20%7C%20json%20%7D%7D%3C%2Fdiv%3E%0A`
    },
    'custom-template': {
        title: 'Custom Template Example',
        component: CustomTemplateExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0Aimport%20%7B%20UntypedFormArray%20%7D%20from%20'%40angular%2Fforms'%3B%0Aimport%20%7B%0A%20%20BaseControl%2C%0A%20%20CheckboxControl%2C%0A%20%20FormUtils%2C%0A%20%20NovoControlGroupAddConfig%2C%0A%20%20NovoFormGroup%2C%0A%20%20ReadOnlyControl%2C%0A%20%20SelectControl%2C%0A%20%20TextBoxControl%2C%0A%7D%20from%20'novo-elements'%3B%0A%0A%2F**%0A%20*%20%40title%20Custom%20Template%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'custom-template-example'%2C%0A%20%20%20%20templateUrl%3A%20'custom-template-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'custom-template-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20CustomTemplateExample%20%7B%0A%20%20public%20formGroup%3A%20NovoFormGroup%3B%0A%20%20public%20controls%3A%20BaseControl%5B%5D%20%3D%20%5B%5D%3B%0A%20%20public%20initialValue%3A%20%7B%7D%5B%5D%20%3D%20%5B%5D%3B%0A%20%20public%20initValue%3A%20%7B%7D%5B%5D%20%3D%20%5B%7B%20text%3A%20'TEXT'%2C%20percentage%3A%2012%2C%20checkbox%3A%20true%2C%20test4%3A%20'TEST'%20%7D%5D%3B%0A%0A%20%20public%20simpleAddConfig%3A%20NovoControlGroupAddConfig%20%3D%20%7B%0A%20%20%20%20label%3A%20'Add'%2C%0A%20%20%7D%3B%0A%20%20public%20anotherAddConfig%3A%20NovoControlGroupAddConfig%20%3D%20%7B%0A%20%20%20%20label%3A%20'Add%20a%20new%20fancy%20thing!'%2C%0A%20%20%7D%3B%0A%0A%20%20public%20emptyMessage%3A%20string%20%3D%20'There%20are%20no%20items...'%3B%0A%20%20public%20canEditFunction%3A%20Function%3B%0A%20%20public%20canRemoveFunction%3A%20Function%3B%0A%0A%20%20constructor(private%20formUtils%3A%20FormUtils)%20%7B%0A%20%20%20%20%2F%2F%20Grouped%20form%20demo%0A%20%20%20%20this.setupGroupedFormDemo()%3B%0A%20%20%20%20%2F%2F%20Setup%20function%0A%20%20%20%20this.canEditFunction%20%3D%20this.canEdit.bind(this)%3B%0A%20%20%20%20this.canRemoveFunction%20%3D%20this.canRemove.bind(this)%3B%0A%20%20%7D%0A%0A%20%20public%20onRemove(value%3A%20any)%20%7B%0A%20%20%20%20console.log('REMOVING'%2C%20value)%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%7D%0A%0A%20%20public%20onEdit(value%3A%20any)%20%7B%0A%20%20%20%20console.log('EDITING'%2C%20value)%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%7D%0A%0A%20%20public%20canEdit(value%3A%20any%2C%20index%3A%20number)%20%7B%0A%20%20%20%20console.log('canEdit'%2C%20value%2C%20index)%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%20%20return%20index%20%3E%200%3B%0A%20%20%7D%0A%20%20public%20canRemove(value%3A%20any%2C%20index%3A%20number)%20%7B%0A%20%20%20%20console.log('canRemove'%2C%20value%2C%20index)%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%20%20return%20index%20%3D%3D%3D%200%3B%0A%20%20%7D%0A%0A%20%20public%20updateInitialValue()%20%7B%0A%20%20%20%20this.initValue%20%3D%20%5B%0A%20%20%20%20%20%20%7B%20text%3A%20'TEXT%20111'%2C%20percentage%3A%20100%2C%20checkbox%3A%20false%2C%20test4%3A%20'TEST%20111'%20%7D%2C%0A%20%20%20%20%20%20%7B%20text%3A%20'TEXT%20222'%2C%20percentage%3A%205%2C%20checkbox%3A%20false%2C%20test4%3A%20'TEST%20222'%20%7D%2C%0A%20%20%20%20%20%20%7B%20text%3A%20'TEXT%20333'%2C%20percentage%3A%2060%2C%20checkbox%3A%20true%2C%20test4%3A%20'TEST%20333'%20%7D%2C%0A%20%20%20%20%5D%3B%0A%20%20%7D%0A%0A%20%20public%20customDelete(form%3A%20NovoFormGroup%2C%20key%3A%20string%2C%20index%3A%20number)%20%7B%0A%20%20%20%20console.log('DELETE'%2C%20form%2C%20key%2C%20index)%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%20%20const%20control%3A%20UntypedFormArray%20%3D%20form.controls%5Bkey%5D%20as%20UntypedFormArray%3B%0A%20%20%20%20control.removeAt(index)%3B%0A%20%20%7D%0A%0A%20%20public%20customEdit(form%3A%20NovoFormGroup%2C%20key%3A%20string%2C%20index%3A%20number)%20%7B%0A%20%20%20%20console.log('EDIT'%2C%20form%2C%20key%2C%20index)%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%7D%0A%0A%20%20private%20setupGroupedFormDemo()%20%7B%0A%20%20%20%20this.formGroup%20%3D%20this.formUtils.emptyFormGroup()%3B%0A%20%20%20%20const%20label%20%3D%20new%20ReadOnlyControl(%7B%20key%3A%20'label'%2C%20value%3A%20'Label%20%3A)'%20%7D)%3B%0A%20%20%20%20const%20c1%20%3D%20new%20SelectControl(%7B%20key%3A%20'text'%2C%20label%3A%20'Text%20Box'%2C%20options%3A%20%5B%7B%20value%3A%20'hello'%2C%20label%3A%20'Hello'%20%7D%5D%20%7D)%3B%0A%20%20%20%20const%20c2%20%3D%20new%20TextBoxControl(%7B%20type%3A%20'percentage'%2C%20key%3A%20'percentage'%2C%20label%3A%20'Percent'%2C%20required%3A%20true%20%7D)%3B%0A%20%20%20%20const%20c3%20%3D%20new%20CheckboxControl(%7B%20key%3A%20'checkbox'%2C%20label%3A%20'Check%20Me!'%2C%20width%3A%20100%20%7D)%3B%0A%20%20%20%20const%20c4%20%3D%20new%20TextBoxControl(%7B%20key%3A%20'test4'%2C%20label%3A%20'TEST4'%20%7D)%3B%0A%20%20%20%20this.controls.push(label)%3B%0A%20%20%20%20this.controls.push(c1)%3B%0A%20%20%20%20this.controls.push(c2)%3B%0A%20%20%20%20this.controls.push(c3)%3B%0A%20%20%20%20this.controls.push(c4)%3B%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cng-template%20%23customRowTemplate%20let-form%3D%22form%22%20let-index%3D%22index%22%20let-key%3D%22key%22%20let-controls%3D%22controls%22%3E%0A%20%20%20%20%3Cdiv%20class%3D%22novo-control-group-control%22%3E%0A%20%20%20%20%20%20%20%20%3Cdiv%20*ngFor%3D%22let%20c%20of%20controls%22%20class%3D%22novo-control-container%22%20%5Bclass.is-label%5D%3D%22c.controlType%20%3D%3D%3D%20'read-only'%22%20%5Bstyle.max-width.px%5D%3D%22c.width%22%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%3Cnovo-control%20%5Bform%5D%3D%22form%3F.controls%5Bkey%5D%5B'controls'%5D%5Bindex%5D%22%20%5Bcontrol%5D%3D%22c%22%20%5Bcondensed%5D%3D%22true%22%3E%3C%2Fnovo-control%3E%0A%20%20%20%20%20%20%20%20%3C%2Fdiv%3E%0A%20%20%20%20%20%20%20%20%3Cdiv%20class%3D%22novo-control-container%20last%22%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%3Cbutton%20tooltip%3D%22HI%22%20type%3D%22button%22%20(click)%3D%22customEdit(form%2C%20key%2C%20index)%22%20theme%3D%22icon%22%20icon%3D%22edit%22%20%5Battr.data-automation-id%5D%3D%22'novo-control-group-edit-'%20%2B%20key%22%20index%3D%22-1%22%3E%3C%2Fbutton%3E%0A%20%20%20%20%20%20%20%20%3C%2Fdiv%3E%0A%20%20%20%20%20%20%20%20%3Cdiv%20class%3D%22novo-control-container%20last%22%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%3Cbutton%20type%3D%22button%22%20(click)%3D%22customDelete(form%2C%20key%2C%20index)%22%20theme%3D%22icon%22%20icon%3D%22delete-o%22%20%5Battr.data-automation-id%5D%3D%22'novo-control-group-delete-'%20%2B%20key%22%20index%3D%22-1%22%3E%3C%2Fbutton%3E%0A%20%20%20%20%20%20%20%20%3C%2Fdiv%3E%0A%20%20%20%20%3C%2Fdiv%3E%0A%3C%2Fng-template%3E%0A%0A%3Cnovo-form%20%5Bform%5D%3D%22formGroup%22%3E%0A%20%20%20%20%3Cnovo-control-group%20remove%3D%22true%22%20edit%3D%22true%22%20%5BinitialValue%5D%3D%22initValue%22%20%5Bcontrols%5D%3D%22controls%22%20%5BrowTemplate%5D%3D%22customRowTemplate%22%20%5Badd%5D%3D%22simpleAddConfig%22%20label%3D%22Custom%20Template%22%20key%3D%22custom%22%20%5Bform%5D%3D%22formGroup%22%20%5BemptyMessage%5D%3D%22emptyMessage%22%3E%3C%2Fnovo-control-group%3E%0A%3C%2Fnovo-form%3E%0A%0A%3Cdiv%20class%3D%22final-value%22%3EInitial%20Value%3A%20%7B%7B%20initValue%20%7C%20json%20%7D%7D%3C%2Fdiv%3E%0A%3Cdiv%20class%3D%22final-value%22%3EValue%3A%20%7B%7B%20formGroup.value%20%7C%20json%20%7D%7D%3C%2Fdiv%3E%0A`
    },
    'text-based-controls': {
        title: 'Text Based Controls Example',
        component: TextBasedControlsExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0Aimport%20%7B%20AceEditorControl%2C%20FormUtils%2C%20QuickNoteControl%2C%20TextAreaControl%2C%20TextBoxControl%20%7D%20from%20'novo-elements'%3B%0A%0A%2F**%0A%20*%20%40title%20Text%20Based%20Controls%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'text-based-controls-example'%2C%0A%20%20%20%20templateUrl%3A%20'text-based-controls-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'text-based-controls-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20TextBasedControlsExample%20%7B%0A%20%20public%20quickNoteConfig%3A%20any%3B%0A%20%20public%20textControl%3A%20any%3B%0A%20%20public%20textMaskControl%3A%20any%3B%0A%20%20public%20emailControl%3A%20any%3B%0A%20%20public%20numberControl%3A%20any%3B%0A%20%20public%20currencyControl%3A%20any%3B%0A%20%20public%20aceEditorControl%3A%20any%3B%0A%20%20public%20floatControl%3A%20any%3B%0A%20%20public%20percentageControl%3A%20any%3B%0A%20%20public%20quickNoteControl%3A%20any%3B%0A%20%20public%20textAreaControl%3A%20any%3B%0A%20%20public%20textForm%3A%20any%3B%0A%0A%20%20constructor(private%20formUtils%3A%20FormUtils)%20%7B%0A%20%20%20%20%2F%2F%20Quick%20note%20config%3B%0A%20%20%20%20this.quickNoteConfig%20%3D%20%7B%0A%20%20%20%20%20%20triggers%3A%20%7B%0A%20%20%20%20%20%20%20%20tags%3A%20'%40'%2C%0A%20%20%20%20%20%20%20%20references%3A%20'%23'%2C%0A%20%20%20%20%20%20%20%20boos%3A%20'%5E'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20options%3A%20%7B%0A%20%20%20%20%20%20%20%20tags%3A%20%5B'First'%2C%20'Second'%5D%2C%0A%20%20%20%20%20%20%20%20references%3A%20%5B'Third'%2C%20'Fourth'%5D%2C%0A%20%20%20%20%20%20%20%20boos%3A%20%5B'Test'%5D%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20renderer%3A%20%7B%0A%20%20%20%20%20%20%20%20tags%3A%20(symbol%2C%20item)%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%20%20return%20%60%3Ca%20class%3D%22tag%22%3E%24%7Bsymbol%7D%24%7Bitem.label%7D%3C%2Fa%3E%60%3B%0A%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20references%3A%20(symbol%2C%20item)%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%20%20return%20%60%3Ca%20class%3D%22tag%22%3E%24%7Bsymbol%7D%24%7Bitem.label%7D%3C%2Fa%3E%60%3B%0A%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20boos%3A%20(symbol%2C%20item)%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%20%20return%20%60%3Cstrong%3E%24%7Bsymbol%7D%24%7Bitem.label%7D%3C%2Fstrong%3E%60%3B%0A%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%7D%3B%0A%20%20%20%20%2F%2F%20Text-based%20Controls%0A%20%20%20%20this.textControl%20%3D%20new%20TextBoxControl(%7B%0A%20%20%20%20%20%20key%3A%20'text'%2C%0A%20%20%20%20%20%20label%3A%20'Text%20Box'%2C%0A%20%20%20%20%20%20tooltip%3A%20'Textbox'%2C%0A%20%20%20%20%20%20readOnly%3A%20true%2C%0A%20%20%20%20%20%20value%3A%20'HI'%2C%0A%20%20%20%20%20%20required%3A%20true%2C%0A%20%20%20%20%7D)%3B%0A%20%20%20%20this.textMaskControl%20%3D%20new%20TextBoxControl(%7B%0A%20%20%20%20%20%20key%3A%20'textmask'%2C%0A%20%20%20%20%20%20maxlength%3A%2010%2C%0A%20%20%20%20%20%20label%3A%20'Text%20Control%20with%20Mask%20(hexadecimal)'%2C%0A%20%20%20%20%20%20textMaskEnabled%3A%20true%2C%0A%20%20%20%20%20%20maskOptions%3A%20%7B%0A%20%20%20%20%20%20%20%20mask%3A%20%2F%5E%5B%5Cda-fA-F%5D%7B0%2C10%7D%24%2F%2C%0A%20%20%20%20%20%20%20%20keepCharPositions%3A%20false%2C%0A%20%20%20%20%20%20%20%20guide%3A%20false%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20value%3A%20'9F'%0A%20%20%20%20%7D)%0A%20%20%20%20this.textAreaControl%20%3D%20new%20TextAreaControl(%7B%0A%20%20%20%20%20%20key%3A%20'textarea'%2C%0A%20%20%20%20%20%20label%3A%20'Text%20Area'%2C%0A%20%20%20%20%20%20tooltip%3A%20'Text%20Area'%2C%0A%20%20%20%20%20%20value%3A%0A%20%20%20%20%20%20%20%20'Bro%20ipsum%20dolor%20sit%20amet%20yard%20sale%20saddle%20pipe%2C%20poaching%20cork%20360%20punter%20ACL%20back%20country%20cornice%20Whistler.%20%20Avie%20Ski%20taco%20mitt%2C%20manny%20first%20tracks%20yard%20sale%20caballerial%20heli%20fatty.%20%20Epic%20dope%20grab%2C%20brain%20bucket%20japan%20air%20wack%20bowl%20%20mute%20heli%20corn%20Snowboard%20Whistler%20giblets%20table%20top.%20%20Crunchy%20Snowboard%20washboard%20line%20grab%20reverse%20camber.%20%20Bump%20epic%20granny%20gear%20heli%20sketching%20wheelie%20huckfest%20face%20plant%20crank%20pow%20pow%20chain%20ring%20%20dirtbag%20washboard.%20%20Flow%20endo%20ski%20bum%20sucker%20hole%2C%20death%20cookies%20manny%20schwag%20pipe.%20%20Dope%20heli%20stomp%20yard%20sale%2C%20saddle%20shreddin%20booter%20gear%20jammer%20grom%20bonk%20OTB%20brain%20bucket%20bonk%20japan%20air%20Whistler.Clipless%20pow%20pow%20pow%2C%20core%20shot%20corn%20butter%20bomb%20hole%20glades%20face%20plant%20dust%20on%20crust.%20%20Poaching%20park%20face%20shots%20bump%2C%20Bike%20cornice%20death%20cookies.%20%20Avie%20cruiser%20sucker%20hole%20face%20plant%20switch.%20%20ACL%20snake%20bite%20bonk%2C%20twin%20tip%20euro%20rig%20nose%20press%20McTwist.%20%20Ripping%20skinny%20trucks%20shreddin.%20%20Apres%20pow%20line%20euro%20sharkbite%20gapers%20lid.Snake%20bite%20derailleur%20wheels%20bomb%20hole.%20%20Huck%20apres%20steeps%20BB%20first%20tracks%20bowl%20%20daffy%20park%20euro%20park%20rat%20euro.%20%20North%20shore%20death%20cookies%20snake%20bite%20carve%2C%20freshies%20dirtbag%20huck%20reverse%20camber%20hellflip%20frozen%20chicken%20heads%20apres%20taco%20glove%20gnar%20face%20shots%20bro.%20%20Ride%20flow%20twister%20cornice%20afterbang%20saddle%20first%20tracks%20rig%20berm%20bro%20face%20shots.%20%20Ride%20stoked%20wack%20park%20twin%20tip%20trucks%20chillax%20shuttle%20Whistler%20gondy%20laps.%20%20Grind%20berm%20schwag%2C%20table%20top%20face%20shots%20steed%20liftie%20afterbang%20taco%20glove%20frozen%20chicken%20heads%20free%20ride%20clean%20huck.%20%20Rock-ectomy%20white%20room%20nose%20press%20avie.Frozen%20chicken%20heads%20gondy%20bail%20travel%20huckfest%20big%20ring%20phat%20clean.%20%20Taco%20couloir%20piste%20derailleur%20wack%20scream%20backside%20steeps%20groomer%20glades%20pipe%20gondy%20switch%20skid%20lid.%20%20Brain%20bucket%20betty%20bowl%2C%20moguls%20gondy%20Whistler%20air%20hardtail.%20%20Flow%20euro%20granny%20gear%2C%20McTwist%20cruiser%20bonk%20grom%20chain%20suck.%20%20Trucks%20line%20huck%2C%20stomp%20ripper%20washboard%20euro%20corduroy%20death%20cookies%20yard%20sale%20dope%20face%20plant%20shreddin%20chain%20suck.ACL%20T-bar%20hellflip%2C%20first%20tracks%20gondy%20hardtail%20rip%20wack%20dust%20on%20crust%20schwag%20frontside%20couloir%20laps%20presta%20backside.%20%20Road%20rash%20Ski%20ski%20bum%20gnar%20wack%20flow%20carve%20lid.%20%20Nose%20white%20room%20ollie%20rail%20table%20top%20grom%20back%20country%20washboard%20dust%20on%20crust%20chillax%20gear%20jammer%20bro%20stomp%20stoked.%20%20Lid%20wheels%20nose%20press%20frontside%2C%20park%20ACL%20dirtbag%20huck%20epic%20bowl%20%20taco%20glove%20OTB.%20%20Fatty%20mute%20whip%20stunt%2C%20Whistler%20McTwist%20stoked%20Bike.%20%20Endo%20brain%20bucket%20crank%20dust%20on%20crust%20back%20country%20line%20ollie%20gapers%20afterbang%20bump%20stoked%20taco%20road%20rash%20granny%20gear.%20%20Deck%20dirtbag%20360%20gnar%20snake%20bite%20couloir%20Bike%20corduroy%20frontside%20crank%20lid%20bro.Air%20tele%20schwag%20ollie%2C%20hardtail%20betty%20crunchy%20epic%20%20face%20shots.%20%20Travel%20flowy%20misty%20huck%20Bike%20180%20schwag%20drop%20hellflip%20ripping%20bunny%20slope%20carbon%20roadie%20tele%20bail.%20%20Cornice%20sharkbite%20360%20frozen%20chicken%20heads%20dope%20hellflip%20clipless.%20%20Switch%20sketching%20grind%20brain%20bucket%20stunt%20taco%20daffy%20OTB%20ride%20liftie%20brain%20bucket%20air%20huckfest%20park%20360.'%2C%0A%20%20%20%20%7D)%3B%0A%20%20%20%20this.emailControl%20%3D%20new%20TextBoxControl(%7B%20type%3A%20'email'%2C%20key%3A%20'email'%2C%20label%3A%20'Email'%2C%20tooltip%3A%20'Email'%20%7D)%3B%0A%20%20%20%20this.numberControl%20%3D%20new%20TextBoxControl(%7B%20type%3A%20'number'%2C%20key%3A%20'number'%2C%20tooltip%3A%20'Number'%2C%20label%3A%20'Number'%20%7D)%3B%0A%20%20%20%20this.currencyControl%20%3D%20new%20TextBoxControl(%7B%0A%20%20%20%20%20%20type%3A%20'currency'%2C%0A%20%20%20%20%20%20key%3A%20'currency'%2C%0A%20%20%20%20%20%20tooltip%3A%20'Currency'%2C%0A%20%20%20%20%20%20label%3A%20'Currency'%2C%0A%20%20%20%20%20%20currencyFormat%3A%20'%24%20USD'%2C%0A%20%20%20%20%7D)%3B%0A%20%20%20%20this.floatControl%20%3D%20new%20TextBoxControl(%7B%20type%3A%20'float'%2C%20key%3A%20'float'%2C%20tooltip%3A%20'Float'%2C%20label%3A%20'Float'%20%7D)%3B%0A%20%20%20%20this.percentageControl%20%3D%20new%20TextBoxControl(%7B%0A%20%20%20%20%20%20type%3A%20'percentage'%2C%0A%20%20%20%20%20%20key%3A%20'percentage'%2C%0A%20%20%20%20%20%20tooltip%3A%20'Percent'%2C%0A%20%20%20%20%20%20label%3A%20'Percent'%2C%0A%20%20%20%20%20%20required%3A%20true%2C%0A%20%20%20%20%7D)%3B%0A%20%20%20%20this.quickNoteControl%20%3D%20new%20QuickNoteControl(%7B%0A%20%20%20%20%20%20key%3A%20'note'%2C%0A%20%20%20%20%20%20label%3A%20'Note'%2C%0A%20%20%20%20%20%20config%3A%20this.quickNoteConfig%2C%0A%20%20%20%20%20%20required%3A%20true%2C%0A%20%20%20%20%20%20tooltip%3A%20'Quicknote'%2C%0A%20%20%20%20%7D)%3B%0A%20%20%20%20this.aceEditorControl%20%3D%20new%20AceEditorControl(%7B%20key%3A%20'ace'%2C%20label%3A%20'CODE'%2C%20tooltip%3A%20'CODE'%2C%20value%3A%20'var%20i%20%3D%200%3B'%20%7D)%3B%0A%20%20%20%20this.textForm%20%3D%20formUtils.toFormGroup(%5B%0A%20%20%20%20%20%20this.textControl%2C%0A%20%20%20%20%20%20this.textMaskControl%2C%0A%20%20%20%20%20%20this.emailControl%2C%0A%20%20%20%20%20%20this.textAreaControl%2C%0A%20%20%20%20%20%20this.numberControl%2C%0A%20%20%20%20%20%20this.currencyControl%2C%0A%20%20%20%20%20%20this.floatControl%2C%0A%20%20%20%20%20%20this.percentageControl%2C%0A%20%20%20%20%20%20this.quickNoteControl%2C%0A%20%20%20%20%20%20this.aceEditorControl%2C%0A%20%20%20%20%5D)%3B%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3C!--Check%20out%20the%20FormDemo.js%20for%20more%20information!--%3E%0A%3Cbutton%20theme%3D%22secondary%22%20(click)%3D%22form.showAllFields()%22%3EShow%20All%20Fields%3C%2Fbutton%3E%0A%3Cbutton%20theme%3D%22secondary%22%20(click)%3D%22form.showOnlyRequired(false)%22%3EShow%20Required%20Fields%3C%2Fbutton%3E%0A%3Cbr%2F%3E%0A%3Cbr%2F%3E%0A%3Cnovo-form%20%5Bform%5D%3D%22textForm%22%20%23form%3E%0A%20%20%20%20%3Cdiv%20class%3D%22novo-form-row%22%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-control%20%5Bform%5D%3D%22textForm%22%20%5Bcontrol%5D%3D%22textControl%22%3E%3C%2Fnovo-control%3E%0A%20%20%20%20%3C%2Fdiv%3E%0A%20%20%20%20%3Cdiv%20class%3D%22novo-form-row%22%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-control%20%5Bform%5D%3D%22textForm%22%20%5Bcontrol%5D%3D%22textMaskControl%22%3E%3C%2Fnovo-control%3E%0A%20%20%20%20%3C%2Fdiv%3E%0A%20%20%20%20%3Cdiv%20class%3D%22novo-form-row%22%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-control%20%5BautoFocus%5D%3D%22true%22%20%5Bform%5D%3D%22textForm%22%20%5Bcontrol%5D%3D%22emailControl%22%3E%3C%2Fnovo-control%3E%0A%20%20%20%20%3C%2Fdiv%3E%0A%20%20%20%20%3Cdiv%20class%3D%22novo-form-row%22%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-control%20%5Bform%5D%3D%22textForm%22%20%5Bcontrol%5D%3D%22numberControl%22%3E%3C%2Fnovo-control%3E%0A%20%20%20%20%3C%2Fdiv%3E%0A%20%20%20%20%3Cdiv%20class%3D%22novo-form-row%22%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-control%20%5Bform%5D%3D%22textForm%22%20%5Bcontrol%5D%3D%22currencyControl%22%3E%3C%2Fnovo-control%3E%0A%20%20%20%20%3C%2Fdiv%3E%0A%20%20%20%20%3Cdiv%20class%3D%22novo-form-row%22%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-control%20%5Bform%5D%3D%22textForm%22%20%5Bcontrol%5D%3D%22floatControl%22%3E%3C%2Fnovo-control%3E%0A%20%20%20%20%3C%2Fdiv%3E%0A%20%20%20%20%3Cdiv%20class%3D%22novo-form-row%22%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-control%20%5Bform%5D%3D%22textForm%22%20%5Bcontrol%5D%3D%22percentageControl%22%3E%3C%2Fnovo-control%3E%0A%20%20%20%20%3C%2Fdiv%3E%0A%20%20%20%20%3Cdiv%20class%3D%22novo-form-row%22%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-control%20%5Bform%5D%3D%22textForm%22%20%5Bcontrol%5D%3D%22textAreaControl%22%3E%3C%2Fnovo-control%3E%0A%20%20%20%20%3C%2Fdiv%3E%0A%20%20%20%20%3Cdiv%20class%3D%22novo-form-row%22%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-control%20%5Bform%5D%3D%22textForm%22%20%5Bcontrol%5D%3D%22quickNoteControl%22%3E%3C%2Fnovo-control%3E%0A%20%20%20%20%3C%2Fdiv%3E%0A%20%20%20%20%3Cdiv%20class%3D%22novo-form-row%22%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-control%20%5Bform%5D%3D%22textForm%22%20%5Bcontrol%5D%3D%22aceEditorControl%22%3E%3C%2Fnovo-control%3E%0A%20%20%20%20%3C%2Fdiv%3E%0A%3C%2Fnovo-form%3E%0A%3Cdiv%20class%3D%22final-value%22%3EValue%3A%20%7B%7BtextForm.value%20%7C%20json%7D%7D%3C%2Fdiv%3E%0A`
    },
    'picker-controls': {
        title: 'Picker Controls Example',
        component: PickerControlsExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0Aimport%20%7B%20EntityPickerResult%2C%20EntityPickerResults%2C%20FormUtils%2C%20PickerControl%20%7D%20from%20'novo-elements'%3B%0A%0A%2F**%0A%20*%20%40title%20Picker%20Controls%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'picker-controls-example'%2C%0A%20%20%20%20templateUrl%3A%20'picker-controls-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'picker-controls-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20PickerControlsExample%20%7B%0A%20%20public%20singlePickerControl%3A%20any%3B%0A%20%20public%20multiPickerControl%3A%20any%3B%0A%20%20public%20multiPickerWithCustomTextControl%3A%20any%3B%0A%20%20public%20multiPickerControlWithMaxlength%3A%20any%3B%0A%20%20public%20multiPickerControlWithMaxlengthAndPreselects%3A%20any%3B%0A%20%20public%20entityMultiPickerControl%3A%20any%3B%0A%20%20public%20rowMultiPickerControl%3A%20any%3B%0A%20%20public%20rowMultiPickerControlWithMaxlength%3A%20any%3B%0A%20%20public%20textPickerWithGetLabels%3A%20any%3B%0A%20%20public%20pickerForm%3A%20any%3B%0A%0A%20%20constructor(private%20formUtils%3A%20FormUtils)%20%7B%0A%20%20%20%20const%20fruits%20%3D%20%5B'Apples'%2C%20'Oranges'%2C%20'Bananas'%2C%20'Grapes'%5D%3B%0A%20%20%20%20const%20cities%20%3D%20%5B%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20id%3A%201%2C%0A%20%20%20%20%20%20%20%20name%3A%20'Boston'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20id%3A%202%2C%0A%20%20%20%20%20%20%20%20name%3A%20'New%20York'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20id%3A%203%2C%0A%20%20%20%20%20%20%20%20name%3A%20'Washington%20D.C.'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20id%3A%204%2C%0A%20%20%20%20%20%20%20%20name%3A%20'Orlando'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20id%3A%205%2C%0A%20%20%20%20%20%20%20%20name%3A%20'Houston'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20id%3A%206%2C%0A%20%20%20%20%20%20%20%20name%3A%20'Chicago'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%5D%3B%0A%20%20%20%20const%20states%20%3D%20%5B%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20value%3A%20'ME'%2C%0A%20%20%20%20%20%20%20%20label%3A%20'Maine'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20value%3A%20'MD'%2C%0A%20%20%20%20%20%20%20%20label%3A%20'Maryland'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20value%3A%20'MA'%2C%0A%20%20%20%20%20%20%20%20label%3A%20'Massachusetts'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20value%3A%20'MI'%2C%0A%20%20%20%20%20%20%20%20label%3A%20'Michigan'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20value%3A%20'MN'%2C%0A%20%20%20%20%20%20%20%20label%3A%20'Minnesota'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20value%3A%20'MS'%2C%0A%20%20%20%20%20%20%20%20label%3A%20'Mississippi'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20value%3A%20'MO'%2C%0A%20%20%20%20%20%20%20%20label%3A%20'Missouri'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20value%3A%20'MT'%2C%0A%20%20%20%20%20%20%20%20label%3A%20'Montana'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%5D%3B%0A%0A%20%20%20%20%2F%2F%20Picker%20controls%0A%20%20%20%20this.singlePickerControl%20%3D%20new%20PickerControl(%7B%0A%20%20%20%20%20%20key%3A%20'singlePicker'%2C%0A%20%20%20%20%20%20tooltip%3A%20'Single'%2C%0A%20%20%20%20%20%20label%3A%20'Single'%2C%0A%20%20%20%20%20%20config%3A%20%7B%20options%3A%20%5B'One'%2C%20'Two'%2C%20'Three'%5D%20%7D%2C%0A%20%20%20%20%7D)%3B%0A%20%20%20%20this.multiPickerControl%20%3D%20new%20PickerControl(%7B%0A%20%20%20%20%20%20key%3A%20'multiPicker'%2C%0A%20%20%20%20%20%20tooltip%3A%20'Multiple'%2C%0A%20%20%20%20%20%20label%3A%20'Multiple'%2C%0A%20%20%20%20%20%20multiple%3A%20true%2C%0A%20%20%20%20%20%20config%3A%20%7B%20options%3A%20%5B'One'%2C%20'Two'%2C%20'Three'%5D%2C%20type%3A%20'candidate'%20%7D%2C%0A%20%20%20%20%7D)%3B%0A%20%20%20%20this.multiPickerWithCustomTextControl%20%3D%20new%20PickerControl(%7B%0A%20%20%20%20%20%20key%3A'multiPickerWithCustomText'%2C%0A%20%20%20%20%20%20tooltip%3A%20'Multiple%20With%20Custom%20Text'%2C%0A%20%20%20%20%20%20label%3A%20'Multiple%20With%20Custom%20Text'%2C%0A%20%20%20%20%20%20multiple%3A%20true%2C%0A%20%20%20%20%20%20config%3A%20%7B%20options%3A%20%5B'One'%2C%20'Two'%2C%20'Three'%5D%2C%20type%3A%20'candidate'%2C%20allowCustomValues%3A%20true%20%7D%2C%0A%20%20%20%20%7D)%3B%0A%20%20%20%20this.multiPickerControlWithMaxlength%20%3D%20new%20PickerControl(%7B%0A%20%20%20%20%20%20key%3A%20'multiPickerWithMaxlength'%2C%0A%20%20%20%20%20%20tooltip%3A%20'Multiple%20With%20Maxlength'%2C%0A%20%20%20%20%20%20label%3A%20'Multiple%20With%20Maxlength'%2C%0A%20%20%20%20%20%20multiple%3A%20true%2C%0A%20%20%20%20%20%20maxlength%3A%202%2C%0A%20%20%20%20%20%20config%3A%20%7B%0A%20%20%20%20%20%20%20%20options%3A%20fruits%2C%0A%20%20%20%20%20%20%20%20type%3A%20'candidate'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%7D)%3B%0A%20%20%20%20this.multiPickerControlWithMaxlengthAndPreselects%20%3D%20new%20PickerControl(%7B%0A%20%20%20%20%20%20key%3A%20'multiPickerControlWithMaxlengthAndPreselects'%2C%0A%20%20%20%20%20%20tooltip%3A%20'Multiple%20With%20Maxlength%20and%20Preselects'%2C%0A%20%20%20%20%20%20label%3A%20'Multiple%20With%20Maxlength%20%26%20Preselects'%2C%0A%20%20%20%20%20%20readOnly%3A%20true%2C%0A%20%20%20%20%20%20multiple%3A%20true%2C%0A%20%20%20%20%20%20maxlength%3A%202%2C%0A%20%20%20%20%20%20config%3A%20%7B%0A%20%20%20%20%20%20%20%20options%3A%20fruits%2C%0A%20%20%20%20%20%20%20%20type%3A%20'candidate'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%7D)%3B%0A%20%20%20%20this.entityMultiPickerControl%20%3D%20new%20PickerControl(%7B%0A%20%20%20%20%20%20key%3A%20'entityMultiPicker'%2C%0A%20%20%20%20%20%20label%3A%20'Entities'%2C%0A%20%20%20%20%20%20required%3A%20true%2C%0A%20%20%20%20%20%20readOnly%3A%20false%2C%0A%20%20%20%20%20%20multiple%3A%20true%2C%0A%20%20%20%20%20%20tooltip%3A%20'Entities'%2C%0A%20%20%20%20%20%20config%3A%20%7B%0A%20%20%20%20%20%20%20%20resultsTemplate%3A%20EntityPickerResults%2C%0A%20%20%20%20%20%20%20%20previewTemplate%3A%20EntityPickerResult%2C%0A%20%20%20%20%20%20%20%20format%3A%20'%24title'%2C%0A%20%20%20%20%20%20%20%20options%3A%20%5B%0A%20%20%20%20%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20title%3A%20'Central%20Bank'%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20name%3A%20'Central%20Bank'%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20email%3A%20'new-bank-inquiries%40centralbank.com'%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20phone%3A%20'(651)%20555-1234'%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20address%3A%20%7B%20city%3A%20'Washington'%2C%20state%3A%20'DC'%20%7D%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20searchEntity%3A%20'ClientCorporation'%2C%0A%20%20%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20title%3A%20'Federal%20Bank'%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20name%3A%20'Federal%20Bank'%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20email%3A%20'info%40federalbank.com'%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20phone%3A%20'(545)%20555-1212'%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20address%3A%20%7B%20city%3A%20'Arlington'%2C%20state%3A%20'VA'%20%7D%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20searchEntity%3A%20'ClientCorporation'%2C%0A%20%20%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20title%3A%20'Aaron%20Burr'%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20firstName%3A%20'Aaron'%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20lastName%3A%20'Burr'%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20name%3A%20'Aaron%20Burr'%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20companyName%3A%20'Central%20Bank'%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20email%3A%20'aburr%40centralbank.com'%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20phone%3A%20'(333)%20555-3434'%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20address%3A%20%7B%20city%3A%20'Washington'%2C%20state%3A%20'DC'%20%7D%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20status%3A%20'Hold'%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20searchEntity%3A%20'ClientContact'%2C%0A%20%20%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20title%3A%20'Alexander%20Hamilton'%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20firstName%3A%20'Alexander'%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20lastName%3A%20'Hamilton'%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20name%3A%20'Alexander%20Hamilton'%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20companyName%3A%20'Federal%20Bank'%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20email%3A%20'ahamilton%40federalbank.com'%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20phone%3A%20'(333)%20555-2222'%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20address%3A%20%7B%20city%3A%20'Arlington'%2C%20state%3A%20'VA'%20%7D%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20status%3A%20'Active'%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20searchEntity%3A%20'ClientContact'%2C%0A%20%20%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20title%3A%20'Ben%20Franklin'%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20firstName%3A%20'Ben'%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20lastName%3A%20'Franklin'%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20name%3A%20'Ben%20Franklin'%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20email%3A%20'bfranklin%40gmail.com'%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20phone%3A%20'(654)%20525-2222'%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20address%3A%20%7B%20city%3A%20'Boston'%2C%20state%3A%20'MA'%20%7D%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20status%3A%20'Interviewing'%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20searchEntity%3A%20'Candidate'%2C%0A%20%20%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20title%3A%20'Thomas%20Jefferson'%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20firstName%3A%20'Thomas'%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20lastName%3A%20'Jefferson'%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20name%3A%20'Thomas%20Jefferson'%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20email%3A%20'tjefferson%40usa.com'%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20phone%3A%20'(123)%20542-1234'%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20address%3A%20%7B%20city%3A%20'Arlington'%2C%20state%3A%20'VA'%20%7D%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20status%3A%20'New%20Lead'%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20searchEntity%3A%20'Candidate'%2C%0A%20%20%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20%5D%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%7D)%3B%0A%20%20%20%20this.rowMultiPickerControl%20%3D%20new%20PickerControl(%7B%0A%20%20%20%20%20%20key%3A%20'rowMultiPickerControl'%2C%0A%20%20%20%20%20%20tooltip%3A%20'Multiple%20Rows'%2C%0A%20%20%20%20%20%20label%3A%20'Multiple%20Rows'%2C%0A%20%20%20%20%20%20multiple%3A%20true%2C%0A%20%20%20%20%20%20config%3A%20%7B%0A%20%20%20%20%20%20%20%20format%3A%20'%24name'%2C%0A%20%20%20%20%20%20%20%20options%3A%20cities%2C%0A%20%20%20%20%20%20%20%20type%3A%20'candidate'%2C%0A%20%20%20%20%20%20%20%20columns%3A%20%5B%0A%20%20%20%20%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20label%3A%20'Name'%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20data%3A%20(item%3A%20any)%3A%20string%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20return%20item.label%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20label%3A%20'Id'%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20data%3A%20(item%3A%20any)%3A%20string%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20return%20item.value.id%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20%5D%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%7D)%3B%0A%20%20%20%20this.rowMultiPickerControlWithMaxlength%20%3D%20new%20PickerControl(%7B%0A%20%20%20%20%20%20key%3A%20'rowMultiPickerControlWithMaxlength'%2C%0A%20%20%20%20%20%20tooltip%3A%20'Multiple%20Rows%20With%20Maxlength'%2C%0A%20%20%20%20%20%20label%3A%20'Multiple%20Rows%20With%20Maxlength'%2C%0A%20%20%20%20%20%20multiple%3A%20true%2C%0A%20%20%20%20%20%20maxlength%3A%204%2C%0A%20%20%20%20%20%20config%3A%20%7B%0A%20%20%20%20%20%20%20%20format%3A%20'%24name'%2C%0A%20%20%20%20%20%20%20%20options%3A%20cities%2C%0A%20%20%20%20%20%20%20%20type%3A%20'candidate'%2C%0A%20%20%20%20%20%20%20%20columns%3A%20%5B%0A%20%20%20%20%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20label%3A%20'Name'%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20data%3A%20(item%3A%20any)%3A%20string%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20return%20item.label%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20label%3A%20'Id'%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20data%3A%20(item%3A%20any)%3A%20string%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20return%20item.value.id%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20%5D%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%7D)%3B%0A%20%20%20%20this.textPickerWithGetLabels%20%3D%20new%20PickerControl(%7B%0A%20%20%20%20%20%20key%3A%20'textPickerWithGetLabels'%2C%0A%20%20%20%20%20%20tooltip%3A%20'Text%20Value%20Picker%20with%20getLabels()'%2C%0A%20%20%20%20%20%20label%3A%20'Text%20Value%20Picker%20with%20getLabels()'%2C%0A%20%20%20%20%20%20multiple%3A%20false%2C%0A%20%20%20%20%20%20config%3A%20%7B%0A%20%20%20%20%20%20%20%20field%3A%20'value'%2C%0A%20%20%20%20%20%20%20%20format%3A%20'%24label'%2C%0A%20%20%20%20%20%20%20%20options%3A%20states%2C%0A%20%20%20%20%20%20%20%20useGetLabels%3A%20true%2C%0A%20%20%20%20%20%20%20%20getLabels%3A%20(value)%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%20%20return%20new%20Promise((resolve)%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20states.forEach((state)%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20if%20(state.value%20%3D%3D%3D%20value)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20resolve(state)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D)%3B%0A%20%20%20%20%20%20%20%20%20%20%7D)%3B%0A%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%7D)%3B%0A%20%20%20%20const%20controls%20%3D%20%5B%0A%20%20%20%20%20%20this.singlePickerControl%2C%0A%20%20%20%20%20%20this.multiPickerControl%2C%0A%20%20%20%20%20%20this.multiPickerWithCustomTextControl%2C%0A%20%20%20%20%20%20this.entityMultiPickerControl%2C%0A%20%20%20%20%20%20this.multiPickerControlWithMaxlength%2C%0A%20%20%20%20%20%20this.multiPickerControlWithMaxlengthAndPreselects%2C%0A%20%20%20%20%20%20this.rowMultiPickerControl%2C%0A%20%20%20%20%20%20%2F%2F%20this.rowMultiPickerControlWithMaxlength%2C%0A%20%20%20%20%20%20this.textPickerWithGetLabels%2C%0A%20%20%20%20%5D%3B%0A%20%20%20%20formUtils.setInitialValues(controls%2C%20%7B%0A%20%20%20%20%20%20entityMultiPicker%3A%20%5B%0A%20%20%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20title%3A%20'Federal%20Bank'%2C%0A%20%20%20%20%20%20%20%20%20%20name%3A%20'Federal%20Bank'%2C%0A%20%20%20%20%20%20%20%20%20%20email%3A%20'info%40federalbank.com'%2C%0A%20%20%20%20%20%20%20%20%20%20phone%3A%20'(545)%20555-1212'%2C%0A%20%20%20%20%20%20%20%20%20%20address%3A%20%7B%20city%3A%20'Arlington'%2C%20state%3A%20'VA'%20%7D%2C%0A%20%20%20%20%20%20%20%20%20%20searchEntity%3A%20'ClientCorporation'%2C%0A%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%5D%2C%0A%20%20%20%20%20%20multiPickerControlWithMaxlengthAndPreselects%3A%20%5B'Oranges'%2C%20'Bananas'%5D%2C%0A%20%20%20%20%20%20rowMultiPickerControlWithMaxlength%3A%20%5B%0A%20%20%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20id%3A%201%2C%0A%20%20%20%20%20%20%20%20%20%20name%3A%20'Boston'%2C%0A%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20id%3A%205%2C%0A%20%20%20%20%20%20%20%20%20%20name%3A%20'Houston'%2C%0A%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20id%3A%206%2C%0A%20%20%20%20%20%20%20%20%20%20name%3A%20'Chicago'%2C%0A%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%5D%2C%0A%20%20%20%20%20%20textPickerWithGetLabels%3A%20'MD'%2C%0A%20%20%20%20%7D)%3B%0A%20%20%20%20this.pickerForm%20%3D%20formUtils.toFormGroup(controls)%3B%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3C!--Check%20out%20the%20FormDemo.js%20for%20more%20information!--%3E%0A%3Cnovo-form%20%5Bform%5D%3D%22pickerForm%22%3E%0A%20%20%20%20%3Cdiv%20class%3D%22novo-form-row%22%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-control%20%5Bform%5D%3D%22pickerForm%22%20%5Bcontrol%5D%3D%22singlePickerControl%22%3E%3C%2Fnovo-control%3E%0A%20%20%20%20%3C%2Fdiv%3E%0A%20%20%20%20%3Cdiv%20class%3D%22novo-form-row%22%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-control%20%5Bform%5D%3D%22pickerForm%22%20%5Bcontrol%5D%3D%22multiPickerControl%22%3E%3C%2Fnovo-control%3E%0A%20%20%20%20%3C%2Fdiv%3E%0A%20%20%20%20%3Cdiv%20class%3D%22novo-form-row%22%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-control%20%5Bform%5D%3D%22pickerForm%22%20%5Bcontrol%5D%3D%22multiPickerWithCustomTextControl%22%3E%3C%2Fnovo-control%3E%0A%20%20%20%20%3C%2Fdiv%3E%0A%20%20%20%20%3Cdiv%20class%3D%22novo-form-row%22%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-control%20%5Bform%5D%3D%22pickerForm%22%20%5Bcontrol%5D%3D%22entityMultiPickerControl%22%3E%3C%2Fnovo-control%3E%0A%20%20%20%20%3C%2Fdiv%3E%0A%20%20%20%20%3Cdiv%20class%3D%22novo-form-row%22%3E%0A%20%20%20%20%20%20%3Cnovo-control%20%5Bform%5D%3D%22pickerForm%22%20%5Bcontrol%5D%3D%22rowMultiPickerControl%22%3E%3C%2Fnovo-control%3E%0A%20%20%20%20%3C%2Fdiv%3E%0A%20%20%20%20%3Cdiv%20class%3D%22novo-form-row%22%3E%0A%20%20%20%20%20%20%3Cnovo-control%20%5Bform%5D%3D%22pickerForm%22%20%5Bcontrol%5D%3D%22multiPickerControlWithMaxlength%22%3E%3C%2Fnovo-control%3E%0A%20%20%20%20%3C%2Fdiv%3E%0A%20%20%20%20%3Cdiv%20class%3D%22novo-form-row%22%3E%0A%20%20%20%20%20%20%3Cnovo-control%20%5Bform%5D%3D%22pickerForm%22%20%5Bcontrol%5D%3D%22multiPickerControlWithMaxlengthAndPreselects%22%3E%3C%2Fnovo-control%3E%0A%20%20%20%20%3C%2Fdiv%3E%0A%20%20%20%20%3C!--%20Row%20picker%20with%20maxlength%20is%20implemented%20but%20currently%20turned%20off%20because%20it%20is%20not%20being%20used%20and%20there%20was%20no%20UI%20created%20for%20it.%0A%20%20%20%20%20%20%20%20%20To%20turn%20it%20back%20on%2C%20add%20'%5Bmaxlength%5D%3D%22control%3F.maxlength%22'%20to%20ControlTemplate.ts%0A%20%20%20%20%3Cdiv%20class%3D%22novo-form-row%22%3E%0A%20%20%20%20%20%20%3Cnovo-control%20%5Bform%5D%3D%22pickerForm%22%20%5Bcontrol%5D%3D%22rowMultiPickerControlWithMaxlength%22%3E%3C%2Fnovo-control%3E%0A%20%20%20%20%3C%2Fdiv--%3E%0A%20%20%20%20%3Cdiv%20class%3D%22novo-form-row%22%3E%0A%20%20%20%20%20%20%3Cnovo-control%20%5Bform%5D%3D%22pickerForm%22%20%5Bcontrol%5D%3D%22textPickerWithGetLabels%22%3E%3C%2Fnovo-control%3E%0A%20%20%20%20%3C%2Fdiv%3E%0A%3C%2Fnovo-form%3E%0A%3Cdiv%20class%3D%22final-value%22%3EValue%3A%20%7B%7BpickerForm.value%20%7C%20json%7D%7D%3C%2Fdiv%3E%0A`
    },
    'number-range-control': {
        title: 'Number Range Control Example',
        component: NumberRangeControlExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0Aimport%20%7B%20FormControl%2C%20FormGroup%20%7D%20from%20'%40angular%2Fforms'%3B%0A%0A%2F**%0A%20*%20%40title%20Number%20Range%20Control%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'number-range-control-example'%2C%0A%20%20%20%20templateUrl%3A%20'number-range-control-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'number-range-control-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20NumberRangeControlExample%20%7B%0A%20%20public%20exampleForm%3A%20FormGroup%3B%0A%0A%20%20constructor()%20%7B%0A%20%20%20%20this.exampleForm%20%3D%20new%20FormGroup(%7B%0A%20%20%20%20%20%20numberRangeControl1%3A%20new%20FormControl()%2C%0A%20%20%20%20%20%20numberRangeControl2%3A%20new%20FormControl()%0A%20%20%20%20%7D)%0A%20%20%7D%0A%0A%7D%0A%0A`,
        cssSource: `.row-wrapper%20%7B%0A%20%20display%3A%20flex%3B%0A%20%20flex-direction%3A%20column%3B%0A%20%20gap%3A%202rem%3B%0A%20%20margin%3A%202rem%3B%0A%7D%0A%0A.example-row%20%7B%0A%20%20display%3A%20flex%3B%0A%20%20gap%3A%202rem%3B%0A%7D%0A%0Anovo-label%20%7B%0A%20%20align-content%3A%20flex-end%3B%0A%7D%0A`,
        htmlSource: `%3Cdiv%20%5BformGroup%5D%3D%22exampleForm%22%3E%0A%20%20%3Ch3%3EExample%20Number%20Range%20Controls%3C%2Fh3%3E%0A%20%20%3Cdiv%20class%3D%22row-wrapper%22%3E%0A%20%20%20%20%3Cdiv%20class%3D%22example-row%22%3E%0A%20%20%20%20%20%20%3Cnovo-label%3EBetween%3A%20%3C%2Fnovo-label%3E%0A%20%20%20%20%20%20%3Cnovo-number-range%20formControlName%3D%22numberRangeControl1%22%3E%3C%2Fnovo-number-range%3E%0A%20%20%20%20%3C%2Fdiv%3E%0A%20%20%20%20%3Cdiv%20class%3D%22example-row%22%3E%0A%20%20%20%20%20%20%3Cnovo-label%3EBetween%3A%20%3C%2Fnovo-label%3E%0A%20%20%20%20%20%20%3Cnovo-number-range%20formControlName%3D%22numberRangeControl2%22%3E%3C%2Fnovo-number-range%3E%0A%20%20%20%20%3C%2Fdiv%3E%0A%20%20%3C%2Fdiv%3E%0A%3C%2Fdiv%3E%0A%0A%3Cpre%20class%3D%22final-value%22%3EValue%3A%20%7B%7BexampleForm%3F.value%20%7C%20json%7D%7D%3C%2Fpre%3E%0A`
    },
    'file-input-controls': {
        title: 'File Input Controls Example',
        component: FileInputControlsExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%2F%2F%20Vendor%0Aimport%20%7B%20FileControl%2C%20FormUtils%2C%20NovoFormGroup%20%7D%20from%20'novo-elements'%3B%0A%0A%2F**%0A%20*%20%40title%20File%20Input%20Controls%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'file-input-controls-example'%2C%0A%20%20%20%20templateUrl%3A%20'file-input-controls-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'file-input-controls-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20FileInputControlsExample%20%7B%0A%20%20public%20fileControl%3A%20any%3B%0A%20%20public%20multiFileControl%3A%20any%3B%0A%20%20public%20multiFileControlMixRemove%3A%20FileControl%3B%0A%20%20public%20fileForm%3A%20any%3B%0A%0A%20%20%2F%2F%20custom%20upload%20validation%0A%20%20public%20message%3A%20string%20%3D%20''%3B%0A%20%20public%20customValidationFileControl%3A%20FileControl%3B%0A%20%20public%20customValidationFileForm%3A%20NovoFormGroup%3B%0A%0A%20%20constructor(private%20formUtils%3A%20FormUtils)%20%7B%0A%20%20%20%20%2F%2F%20File%20input%20controls%0A%20%20%20%20this.fileControl%20%3D%20new%20FileControl(%7B%20key%3A%20'file'%2C%20name%3A%20'myfile'%2C%20label%3A%20'File'%2C%20tooltip%3A%20'Files%20Control'%20%7D)%3B%0A%20%20%20%20this.multiFileControl%20%3D%20new%20FileControl(%7B%0A%20%20%20%20%20%20key%3A%20'files'%2C%0A%20%20%20%20%20%20name%3A%20'myfiles'%2C%0A%20%20%20%20%20%20label%3A%20'Multiple%20Files'%2C%0A%20%20%20%20%20%20tooltip%3A%20'Multiple%20Files'%2C%0A%20%20%20%20%20%20multiple%3A%20true%2C%0A%20%20%20%20%20%20layoutOptions%3A%20%7B%20order%3A%20'displayFilesBelow'%2C%20download%3A%20true%2C%20edit%3A%20true%2C%20customActions%3A%20true%2C%20labelStyle%3A%20'no-box'%20%7D%2C%0A%20%20%20%20%20%20value%3A%20%5B%7B%20name%3A%20'yourFile.pdf'%2C%20loaded%3A%20true%2C%20link%3A%20'www.google.com'%2C%20description%3A%20'file%20description'%20%7D%5D%2C%0A%20%20%20%20%7D)%3B%0A%20%20%20%20this.fileForm%20%3D%20formUtils.toFormGroup(%5Bthis.fileControl%2C%20this.multiFileControl%5D)%3B%0A%0A%20%20%20%20this.customValidationFileControl%20%3D%20new%20FileControl(%7B%0A%20%20%20%20%20%20key%3A%20'customValidationFiles'%2C%0A%20%20%20%20%20%20name%3A%20'customValidationFiles'%2C%0A%20%20%20%20%20%20label%3A%20'Custom%20Validation'%2C%0A%20%20%20%20%20%20tooltip%3A%20'Custom%20Validation%20Multiple%20Files'%2C%0A%20%20%20%20%20%20multiple%3A%20true%2C%0A%20%20%20%20%20%20layoutOptions%3A%20%7B%0A%20%20%20%20%20%20%20%20order%3A%20'displayFilesBelow'%2C%0A%20%20%20%20%20%20%20%20download%3A%20true%2C%0A%20%20%20%20%20%20%20%20edit%3A%20true%2C%0A%20%20%20%20%20%20%20%20customActions%3A%20false%2C%0A%20%20%20%20%20%20%20%20customValidation%3A%20%5B%7B%20action%3A%20'upload'%2C%20fn%3A%20this.checkFileSize.bind(this)%20%7D%5D%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%7D)%3B%0A%20%20%20%20this.customValidationFileForm%20%3D%20formUtils.toFormGroup(%5Bthis.customValidationFileControl%5D)%3B%0A%20%20%20%20this.multiFileControlMixRemove%20%3D%20new%20FileControl(%7B%0A%20%20%20%20%20%20key%3A%20'mixDeleteFiles'%2C%0A%20%20%20%20%20%20name%3A%20'mymixDeleteFiles'%2C%0A%20%20%20%20%20%20label%3A%20'Multiple%20Files%20-%20Delete%20New%20Only'%2C%0A%20%20%20%20%20%20tooltip%3A%20'Multiple%20Files%20-%20Delete%20New%20Only'%2C%0A%20%20%20%20%20%20multiple%3A%20true%2C%0A%20%20%20%20%20%20layoutOptions%3A%20%7B%0A%20%20%20%20%20%20%20%20order%3A%20'displayFilesBelow'%2C%0A%20%20%20%20%20%20%20%20labelStyle%3A%20'no-box'%2C%0A%20%20%20%20%20%20%20%20download%3A%20true%2C%0A%20%20%20%20%20%20%20%20edit%3A%20false%2C%0A%20%20%20%20%20%20%20%20removable%3A%20false%2C%0A%20%20%20%20%20%20%20%20removableWhenNew%3A%20true%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20value%3A%20%5B%7B%20name%3A%20'yourFile.pdf'%2C%20loaded%3A%20true%2C%20link%3A%20'www.google.com'%2C%20description%3A%20'file%20description'%20%7D%5D%2C%0A%20%20%20%20%7D)%3B%0A%20%20%20%20this.fileForm%20%3D%20formUtils.toFormGroup(%5Bthis.fileControl%2C%20this.multiFileControl%2C%20this.multiFileControlMixRemove%5D)%3B%0A%20%20%7D%0A%0A%20%20public%20handleEdit(file)%20%7B%0A%20%20%20%20console.log('This%20is%20an%20Edit%20Action!'%2C%20file)%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%7D%0A%0A%20%20public%20handleSave(file)%20%7B%0A%20%20%20%20console.log('This%20is%20a%20Save%20Action!'%2C%20file)%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%7D%0A%0A%20%20public%20handleDelete(file)%20%7B%0A%20%20%20%20console.log('This%20is%20a%20Delete%20Action!'%2C%20file)%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%7D%0A%0A%20%20public%20handleUpload(files)%20%7B%0A%20%20%20%20console.log('This%20is%20an%20upload%20Action!'%2C%20files)%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%7D%0A%0A%20%20public%20checkFileSize(fileList)%3A%20boolean%20%7B%0A%20%20%20%20const%20maxSizeKb%3A%20number%20%3D%205120%3B%20%2F%2F%20(5%20MB%20in%20KB)%0A%20%20%20%20for%20(const%20file%20of%20fileList)%20%7B%0A%20%20%20%20%20%20if%20(file.size%20%3E%20maxSizeKb%20*%201024)%20%7B%0A%20%20%20%20%20%20%20%20this.message%20%3D%20'File%20is%20bigger%20than%20the%20allowed%205MB'%3B%0A%20%20%20%20%20%20%20%20return%20false%3B%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A%20%20%20%20return%20true%3B%0A%20%20%7D%0A%0A%20%20public%20clearFileLists()%3A%20void%20%7B%0A%20%20%20%20this.fileForm.patchValue(%7Bfile%3A%20null%2C%20files%3A%20null%2C%20mixDeleteFiles%3A%20null%7D)%3B%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3C!--Check%20out%20the%20FormDemo.js%20for%20more%20information!--%3E%0A%3Cnovo-form%20%5Bform%5D%3D%22fileForm%22%20layout%3D%22vertical%22%3E%0A%20%20%20%20%3Cdiv%20class%3D%22novo-form-row%22%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-control%20%5Bform%5D%3D%22fileForm%22%20%5Bcontrol%5D%3D%22fileControl%22%3E%3C%2Fnovo-control%3E%0A%20%20%20%20%3C%2Fdiv%3E%0A%20%20%20%20%3Cdiv%20class%3D%22novo-form-row%22%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-control%20%5Bform%5D%3D%22fileForm%22%20%5Bcontrol%5D%3D%22multiFileControl%22%20(edit)%3D%22handleEdit(%24event)%22%20(save)%3D%22handleSave(%24event)%22%20(delete)%3D%22handleDelete(%24event)%22%20(upload)%3D%22handleUpload(%24event)%22%3E%3C%2Fnovo-control%3E%0A%20%20%20%20%3C%2Fdiv%3E%0A%20%20%20%20%3Cdiv%20class%3D%22novo-form-row%22%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-control%20%5Bform%5D%3D%22fileForm%22%20%5Bcontrol%5D%3D%22multiFileControlMixRemove%22%3E%3C%2Fnovo-control%3E%0A%20%20%20%20%3C%2Fdiv%3E%0A%3C%2Fnovo-form%3E%0A%3Cdiv%20class%3D%22final-value%22%3EValue%3A%20%7B%7BfileForm.value%20%7C%20json%7D%7D%3C%2Fdiv%3E%0A%3Cbr%20%2F%3E%0A%3Cbutton%20class%3D%22clear-files-button%22%20theme%3D%22secondary%22%20(click)%3D%22clearFileLists()%22%3EClear%20File%20Lists%3C%2Fbutton%3E%0A%3Cbr%20%2F%3E%0A%3Cbr%20%2F%3E%0A%3Cnovo-form%20layout%3D%22vertical%22%20%5Bform%5D%3D%22customValidationFileForm%22%3E%0A%20%20%20%20%3Cdiv%20class%3D%22novo-form-row%22%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-control%20%5Bform%5D%3D%22customValidationFileForm%22%20%5Bcontrol%5D%3D%22customValidationFileControl%22%3E%3C%2Fnovo-control%3E%0A%20%20%20%20%3C%2Fdiv%3E%0A%3C%2Fnovo-form%3E%0A%3Cdiv%3E%7B%7B%20message%20%7D%7D%3C%2Fdiv%3E%0A`
    },
    'custom-demo-control': {
        title: 'Custom Demo Control',
        component: CustomDemoControlExample,
        tsSource: `import%20%7B%20Component%2C%20Input%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Custom%20Demo%20Control%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'custom-demo-control-example'%2C%0A%20%20%20%20template%3A%20%60%3Cdiv%20%5BformGroup%5D%3D%22form%22%3E%0A%20%20%20%20My%20Custom%20Input%20%3Cinput%20%5BformControlName%5D%3D%22control.key%22%20%5Bid%5D%3D%22control.key%22%20%5Btype%5D%3D%22control.type%22%20%5Bplaceholder%5D%3D%22control.placeholder%22%20%2F%3E%0A%20%20%3C%2Fdiv%3E%60%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20CustomDemoControlExample%20%7B%0A%20%20%40Input()%0A%20%20control%3B%0A%20%20%40Input()%0A%20%20form%3A%20any%3B%0A%20%20%40Input()%0A%20%20edit%3A%20any%3B%0A%20%20%40Input()%0A%20%20save%3A%20any%3B%0A%20%20%40Input()%0A%20%20delete%3A%20any%3B%0A%20%20%40Input()%0A%20%20upload%3A%20any%3B%0A%7D%0A`,
        cssSource: ``,
        htmlSource: ``
    },
    'check-box-controls': {
        title: 'Check Box Controls Example',
        component: CheckBoxControlsExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0Aimport%20%7B%20CheckboxControl%2C%20CheckListControl%2C%20FormUtils%2C%20SwitchControl%2C%20TilesControl%20%7D%20from%20'novo-elements'%3B%0A%0A%2F**%0A%20*%20%40title%20Check%20Box%20Controls%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'check-box-controls-example'%2C%0A%20%20%20%20templateUrl%3A%20'check-box-controls-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'check-box-controls-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20CheckBoxControlsExample%20%7B%0A%20%20public%20checkControl%3A%20any%3B%0A%20%20public%20checkListControl%3A%20any%3B%0A%20%20public%20tilesControl%3A%20any%3B%0A%20%20public%20disabledTilesControl%3A%20any%3B%0A%20%20public%20switchControl%3A%20any%3B%0A%20%20public%20checkForm%3A%20any%3B%0A%0A%20%20constructor(private%20formUtils%3A%20FormUtils)%20%7B%0A%20%20%20%20%2F%2F%20Check%20box%20controls%0A%20%20%20%20this.switchControl%20%3D%20new%20SwitchControl(%7B%20key%3A%20'switch'%2C%20tooltip%3A%20'Switch'%2C%20label%3A%20'Switch'%2C%20checkboxLabel%3A%20'Switch'%20%7D)%3B%0A%20%20%20%20this.checkControl%20%3D%20new%20CheckboxControl(%7B%20key%3A%20'check'%2C%20tooltip%3A%20'Checkbox'%2C%20label%3A%20'Checkbox'%2C%20checkboxLabel%3A%20'Checkbox'%20%7D)%3B%0A%20%20%20%20this.checkListControl%20%3D%20new%20CheckListControl(%7B%0A%20%20%20%20%20%20key%3A%20'checklist'%2C%0A%20%20%20%20%20%20label%3A%20'Check%20List'%2C%0A%20%20%20%20%20%20options%3A%20%5B'One'%2C%20'Two'%2C%20'Three'%5D%2C%0A%20%20%20%20%20%20tooltip%3A%20'CheckList'%2C%0A%20%20%20%20%20%20tooltipPosition%3A%20'top'%2C%0A%20%20%20%20%7D)%3B%0A%20%20%20%20this.tilesControl%20%3D%20new%20TilesControl(%7B%0A%20%20%20%20%20%20key%3A%20'tiles'%2C%0A%20%20%20%20%20%20label%3A%20'Tiles'%2C%0A%20%20%20%20%20%20options%3A%20%5B%0A%20%20%20%20%20%20%20%20%7B%20value%3A%20'one'%2C%20label%3A%20'One'%20%7D%2C%0A%20%20%20%20%20%20%20%20%7B%20value%3A%20'two'%2C%20label%3A%20'Two'%20%7D%2C%0A%20%20%20%20%20%20%20%20%7B%20value%3A%20'disabled'%2C%20label%3A%20'Disabled'%2C%20disabled%3A%20true%20%7D%2C%0A%20%20%20%20%20%20%5D%2C%0A%20%20%20%20%20%20tooltip%3A%20'Tiles'%2C%0A%20%20%20%20%7D)%3B%0A%20%20%20%20this.disabledTilesControl%20%3D%20new%20TilesControl(%7B%0A%20%20%20%20%20%20key%3A%20'disabledTiles'%2C%0A%20%20%20%20%20%20label%3A%20'Disabled%20Tiles'%2C%0A%20%20%20%20%20%20readOnly%3A%20true%2C%0A%20%20%20%20%20%20options%3A%20%5B%0A%20%20%20%20%20%20%20%20%7B%20value%3A%20'one'%2C%20label%3A%20'One'%20%7D%2C%0A%20%20%20%20%20%20%20%20%7B%20value%3A%20'two'%2C%20label%3A%20'Two'%20%7D%2C%0A%20%20%20%20%20%20%5D%2C%0A%20%20%20%20%20%20tooltip%3A%20'Tiles'%2C%0A%20%20%20%20%7D)%3B%0A%20%20%20%20this.checkForm%20%3D%20formUtils.toFormGroup(%5B%0A%20%20%20%20%20%20this.switchControl%2C%0A%20%20%20%20%20%20this.checkControl%2C%0A%20%20%20%20%20%20this.checkListControl%2C%0A%20%20%20%20%20%20this.tilesControl%2C%0A%20%20%20%20%20%20this.disabledTilesControl%2C%0A%20%20%20%20%5D)%3B%0A%20%20%7D%0A%0A%20%20onChange(value)%20%7B%0A%20%20%20%20console.log('I%20changed!'%2C%20value)%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3C!--Check%20out%20the%20FormDemo.js%20for%20more%20information!--%3E%0A%3Cnovo-form%20%5Bform%5D%3D%22checkForm%22%3E%0A%20%20%3Cdiv%20class%3D%22novo-form-row%22%3E%0A%20%20%20%20%3Cnovo-control%20%5Bform%5D%3D%22checkForm%22%20%5Bcontrol%5D%3D%22checkControl%22%3E%3C%2Fnovo-control%3E%0A%20%20%3C%2Fdiv%3E%0A%20%20%3Cdiv%20class%3D%22novo-form-row%22%3E%0A%20%20%20%20%3Cnovo-control%20%5Bform%5D%3D%22checkForm%22%20%5Bcontrol%5D%3D%22checkListControl%22%3E%3C%2Fnovo-control%3E%0A%20%20%3C%2Fdiv%3E%0A%20%20%3Cdiv%20class%3D%22novo-form-row%22%3E%0A%20%20%20%20%3Cnovo-control%20%5Bform%5D%3D%22checkForm%22%20%5Bcontrol%5D%3D%22tilesControl%22%20(change)%3D%22onChange(%24event)%22%3E%3C%2Fnovo-control%3E%0A%20%20%3C%2Fdiv%3E%0A%20%20%3Cdiv%20class%3D%22novo-form-row%22%3E%0A%20%20%20%20%3Cnovo-control%20%5Bform%5D%3D%22checkForm%22%20%5Bcontrol%5D%3D%22disabledTilesControl%22%20(change)%3D%22onChange(%24event)%22%3E%3C%2Fnovo-control%3E%0A%20%20%3C%2Fdiv%3E%0A%20%20%3Cdiv%20class%3D%22novo-form-row%22%3E%0A%20%20%20%20%3Cnovo-control%20%5Bform%5D%3D%22checkForm%22%20%5Bcontrol%5D%3D%22switchControl%22%20(change)%3D%22onChange(%24event)%22%3E%3C%2Fnovo-control%3E%0A%20%20%3C%2Fdiv%3E%0A%3C%2Fnovo-form%3E%0A%3Cdiv%20class%3D%22final-value%22%3EValue%3A%20%7B%7BcheckForm.value%20%7C%20json%7D%7D%3C%2Fdiv%3E`
    },
    'calendar-input-controls': {
        title: 'Calendar Input Controls Example',
        component: CalendarInputControlsExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0Aimport%20%7B%20DateControl%2C%20DateTimeControl%2C%20FormUtils%2C%20TimeControl%2C%20TimezoneControl%20%7D%20from%20'novo-elements'%3B%0A%0A%2F**%0A%20*%20%40title%20Calendar%20Input%20Controls%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'calendar-input-controls-example'%2C%0A%20%20%20%20templateUrl%3A%20'calendar-input-controls-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'calendar-input-controls-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20CalendarInputControlsExample%20%7B%0A%20%20public%20dateControl%3A%20any%3B%0A%20%20public%20userDefinedDateControl%3A%20DateControl%3B%0A%20%20public%20timeControl%3A%20any%3B%0A%20%20public%20dateTimeControl%3A%20any%3B%0A%20%20public%20timezoneControl%3A%20any%3B%0A%20%20public%20calendarForm%3A%20any%3B%0A%0A%20%20constructor(private%20formUtils%3A%20FormUtils)%20%7B%0A%20%20%20%20%2F%2F%20Calendar%20input%20controls%0A%20%20%20%20this.dateControl%20%3D%20new%20DateControl(%7B%0A%20%20%20%20%20%20key%3A%20'date'%2C%0A%20%20%20%20%20%20label%3A%20'Date'%2C%0A%20%20%20%20%20%20tooltip%3A%20'Date'%2C%0A%20%20%20%20%20%20startDate%3A%20new%20Date().setMonth(new%20Date().getMonth()%20-%201)%2C%0A%20%20%20%20%7D)%3B%0A%20%20%20%20this.userDefinedDateControl%20%3D%20new%20DateControl(%7B%0A%20%20%20%20%20%20key%3A%20'userDefinedFormat'%2C%0A%20%20%20%20%20%20label%3A%20'User%20Defined%20Format'%2C%0A%20%20%20%20%20%20tooltip%3A%20'Date'%2C%0A%20%20%20%20%20%20dateFormat%3A%20'MMM%20Do%20YYYY%20(dd)'%2C%0A%20%20%20%20%20%20textMaskEnabled%3A%20false%2C%0A%20%20%20%20%7D)%3B%0A%20%20%20%20this.timeControl%20%3D%20new%20TimeControl(%7B%20key%3A%20'time'%2C%20label%3A%20'Time'%2C%20tooltip%3A%20'Time'%20%7D)%3B%0A%20%20%20%20this.dateTimeControl%20%3D%20new%20DateTimeControl(%7B%20key%3A%20'dateTime'%2C%20tooltip%3A%20'Date%20Time'%2C%20label%3A%20'Date%20Time'%2C%20military%3A%20true%20%7D)%3B%0A%20%20%20%20this.timezoneControl%20%3D%20new%20TimezoneControl(%7B%20key%3A%20'timezone'%2C%20tooltip%3A%20'Timezone'%2C%20label%3A%20'Timezone'%20%7D)%3B%0A%20%20%20%20this.calendarForm%20%3D%20formUtils.toFormGroup(%5B%0A%20%20%20%20%20%20this.dateControl%2C%0A%20%20%20%20%20%20this.userDefinedDateControl%2C%0A%20%20%20%20%20%20this.timeControl%2C%0A%20%20%20%20%20%20this.dateTimeControl%2C%0A%20%20%20%20%20%20this.timezoneControl%2C%0A%20%20%20%20%5D)%3B%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3C!--Check%20out%20the%20FormDemo.js%20for%20more%20information!--%3E%0A%3Cnovo-form%20%5Bform%5D%3D%22calendarForm%22%20layout%3D%22vertical%22%3E%0A%20%20%3Cdiv%20class%3D%22novo-form-row%22%3E%0A%20%20%20%20%3Cnovo-control%20%5Bform%5D%3D%22calendarForm%22%20%5Bcontrol%5D%3D%22dateControl%22%3E%3C%2Fnovo-control%3E%0A%20%20%3C%2Fdiv%3E%0A%20%20%3Cdiv%20class%3D%22novo-form-row%22%3E%0A%20%20%20%20%3Cnovo-control%20%5Bform%5D%3D%22calendarForm%22%20%5Bcontrol%5D%3D%22userDefinedDateControl%22%3E%3C%2Fnovo-control%3E%0A%20%20%3C%2Fdiv%3E%0A%20%20%3Cdiv%20class%3D%22novo-form-row%22%3E%0A%20%20%20%20%3Cnovo-control%20%5Bform%5D%3D%22calendarForm%22%20%5Bcontrol%5D%3D%22timeControl%22%3E%3C%2Fnovo-control%3E%0A%20%20%3C%2Fdiv%3E%0A%20%20%3Cdiv%20class%3D%22novo-form-row%22%3E%0A%20%20%20%20%3Cnovo-control%20%5Bform%5D%3D%22calendarForm%22%20%5Bcontrol%5D%3D%22dateTimeControl%22%3E%3C%2Fnovo-control%3E%0A%20%20%3C%2Fdiv%3E%0A%20%20%3Cdiv%20class%3D%22novo-form-row%22%3E%0A%20%20%20%20%3Cnovo-control%20%5Bform%5D%3D%22calendarForm%22%20%5Bcontrol%5D%3D%22timezoneControl%22%3E%3C%2Fnovo-control%3E%0A%20%20%3C%2Fdiv%3E%0A%3C%2Fnovo-form%3E%0A%3Cdiv%20class%3D%22final-value%22%3EValue%3A%20%7B%7BcalendarForm.value%20%7C%20json%7D%7D%3C%2Fdiv%3E`
    },
    'address-control': {
        title: 'Address Control Example',
        component: AddressControlExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%2F%2F%20Vendor%0Aimport%20%7B%20AddressControl%2C%20findByCountryId%2C%20FormUtils%20%7D%20from%20'novo-elements'%3B%0A%0A%2F**%0A%20*%20%40title%20Address%20Control%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'address-control-example'%2C%0A%20%20%20%20templateUrl%3A%20'address-control-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'address-control-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20AddressControlExample%20%7B%0A%20%20public%20addressControl%3A%20any%3B%0A%20%20public%20secondaryAddressControl%3A%20any%3B%0A%20%20public%20addressForm%3A%20any%3B%0A%20%20public%20addressFormControls%3A%20any%3B%0A%20%20public%20states%3A%20any%5B%5D%20%3D%20%5B%0A%20%20%20%20%7B%0A%20%20%20%20%20%20value%3A%20'MA'%2C%0A%20%20%20%20%20%20label%3A%20'Massachusetts'%2C%0A%20%20%20%20%20%20countryId%3A%201%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20value%3A%20'NY'%2C%0A%20%20%20%20%20%20label%3A%20'New%20York'%2C%0A%20%20%20%20%20%20countryId%3A%201%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20value%3A%20'AB'%2C%0A%20%20%20%20%20%20label%3A%20'Alberta'%2C%0A%20%20%20%20%20%20countryId%3A%202216%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20value%3A%20'BC'%2C%0A%20%20%20%20%20%20label%3A%20'British%20Columbia'%2C%0A%20%20%20%20%20%20countryId%3A%202216%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20value%3A%20'MB'%2C%0A%20%20%20%20%20%20label%3A%20'Manitoba'%2C%0A%20%20%20%20%20%20countryId%3A%202216%2C%0A%20%20%20%20%7D%2C%0A%20%20%5D%3B%0A%0A%20%20constructor(private%20formUtils%3A%20FormUtils)%20%7B%0A%20%20%20%20%2F%2F%20Address%20control%0A%20%20%20%20this.addressControl%20%3D%20new%20AddressControl(%7B%0A%20%20%20%20%20%20key%3A%20'address'%2C%0A%20%20%20%20%20%20name%3A%20'address'%2C%0A%20%20%20%20%20%20label%3A%20'Address'%2C%0A%20%20%20%20%20%20tooltip%3A%20'Address'%2C%0A%20%20%20%20%20%20config%3A%20%7B%0A%20%20%20%20%20%20%20%20address1%3A%20%7B%0A%20%20%20%20%20%20%20%20%20%20label%3A%20'Address%20Line%201'%2C%0A%20%20%20%20%20%20%20%20%20%20required%3A%20true%2C%0A%20%20%20%20%20%20%20%20%20%20maxlength%3A%2020%2C%0A%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20address2%3A%20%7B%0A%20%20%20%20%20%20%20%20%20%20label%3A%20'Address%20Line%202'%2C%0A%20%20%20%20%20%20%20%20%20%20required%3A%20true%2C%0A%20%20%20%20%20%20%20%20%20%20maxlength%3A%2015%2C%0A%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20state%3A%20%7B%0A%20%20%20%20%20%20%20%20%20%20label%3A%20'State'%2C%0A%20%20%20%20%20%20%20%20%20%20required%3A%20true%2C%0A%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20countryID%3A%20%7B%0A%20%20%20%20%20%20%20%20%20%20label%3A%20'Country'%2C%0A%20%20%20%20%20%20%20%20%20%20required%3A%20true%2C%0A%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20city%3A%20%7B%0A%20%20%20%20%20%20%20%20%20%20label%3A%20'City'%2C%0A%20%20%20%20%20%20%20%20%20%20required%3A%20true%2C%0A%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20zip%3A%20%7B%0A%20%20%20%20%20%20%20%20%20%20label%3A%20'Zipcode'%2C%0A%20%20%20%20%20%20%20%20%20%20required%3A%20true%2C%0A%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20value%3A%20%7B%0A%20%20%20%20%20%20%20%20address1%3A%20'321%20Summer%20Street'%2C%0A%20%20%20%20%20%20%20%20address2%3A%20'11%20Washington%20Street'%2C%0A%20%20%20%20%20%20%20%20city%3A%20'Chicago'%2C%0A%20%20%20%20%20%20%20%20state%3A%20'California'%2C%0A%20%20%20%20%20%20%20%20zip%3A%2095133%2C%0A%20%20%20%20%20%20%20%20countryID%3A%201%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%7D)%3B%0A%20%20%20%20this.secondaryAddressControl%20%3D%20new%20AddressControl(%7B%0A%20%20%20%20%20%20key%3A%20'secondaryAddress'%2C%0A%20%20%20%20%20%20name%3A%20'secondaryAddress'%2C%0A%20%20%20%20%20%20label%3A%20'Secondary%20Address'%2C%0A%20%20%20%20%20%20tooltip%3A%20'Secondary%20Address'%2C%0A%20%20%20%20%20%20config%3A%20%7B%0A%20%20%20%20%20%20%20%20address1%3A%20%7B%0A%20%20%20%20%20%20%20%20%20%20label%3A%20'Address%20Line%201'%2C%0A%20%20%20%20%20%20%20%20%20%20maxlength%3A%2020%2C%0A%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20address2%3A%20%7B%0A%20%20%20%20%20%20%20%20%20%20label%3A%20'Address%20Line%202'%2C%0A%20%20%20%20%20%20%20%20%20%20maxlength%3A%2015%2C%0A%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20state%3A%20%7B%0A%20%20%20%20%20%20%20%20%20%20label%3A%20'State'%2C%0A%20%20%20%20%20%20%20%20%20%20pickerConfig%3A%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20field%3A%20'value'%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20format%3A%20'%24label'%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20options%3A%20(query%2C%20countryID)%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20return%20Promise.resolve(this.getStateOptions(query%2C%20countryID))%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20getLabels%3A%20(value%3A%20number)%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20return%20Promise.resolve(this.getStateLabel(value))%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20countryID%3A%20%7B%0A%20%20%20%20%20%20%20%20%20%20label%3A%20'Country'%2C%0A%20%20%20%20%20%20%20%20%20%20pickerConfig%3A%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20field%3A%20'value'%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20format%3A%20'%24label'%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20options%3A%20(query)%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20return%20Promise.resolve(this.getCountryOptions(query))%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20getLabels%3A%20(value%3A%20number)%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20return%20new%20Promise((resolve%3A%20any)%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20const%20country%3A%20any%20%3D%20findByCountryId(value)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20if%20(country)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20resolve(%7B%20value%3A%20country.id%2C%20label%3A%20country.name%20%7D)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%20else%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20resolve('')%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20city%3A%20%7B%0A%20%20%20%20%20%20%20%20%20%20label%3A%20'City'%2C%0A%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20zip%3A%20%7B%0A%20%20%20%20%20%20%20%20%20%20label%3A%20'Zipcode'%2C%0A%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20value%3A%20%7B%0A%20%20%20%20%20%20%20%20address1%3A%20'123%20Summer%20Street'%2C%0A%20%20%20%20%20%20%20%20address2%3A%20'10%20Washington%20Street%20and%20stuff'%2C%0A%20%20%20%20%20%20%20%20countryID%3A%202359%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%7D)%3B%0A%20%20%20%20this.addressFormControls%20%3D%20%5Bthis.addressControl%2C%20this.secondaryAddressControl%5D%3B%0A%20%20%20%20this.addressForm%20%3D%20formUtils.toFormGroup(this.addressFormControls)%3B%0A%20%20%7D%0A%0A%20%20getStateOptions(filter%3A%20string%20%3D%20''%2C%20countryID%3A%20number)%20%7B%0A%20%20%20%20let%20states%3A%20any%5B%5D%20%3D%20this.states%3B%0A%20%20%20%20if%20(countryID)%20%7B%0A%20%20%20%20%20%20states%20%3D%20states.filter((state%3A%20any)%20%3D%3E%20state.countryId%20%3D%3D%3D%20countryID)%3B%0A%20%20%20%20%7D%0A%20%20%20%20if%20(filter%20%26%26%20filter.length)%20%7B%0A%20%20%20%20%20%20states%20%3D%20states.filter((state)%20%3D%3E%20new%20RegExp(%60%24%7Bfilter%7D%60%2C%20'gi').test(state.label))%3B%0A%20%20%20%20%7D%0A%20%20%20%20return%20states%3B%0A%20%20%7D%0A%0A%20%20getStateLabel(value%3A%20number)%3A%20string%20%7B%0A%20%20%20%20const%20state%3A%20any%20%3D%20this.states.find((s%3A%20any)%20%3D%3E%20%7B%0A%20%20%20%20%20%20return%20s.value%20%3D%3D%3D%20value%3B%0A%20%20%20%20%7D)%3B%0A%20%20%20%20if%20(state%20%26%26%20state.label)%20%7B%0A%20%20%20%20%20%20return%20state.label%3B%0A%20%20%20%20%7D%0A%20%20%20%20return%20''%3B%0A%20%20%7D%0A%0A%20%20getCountryOptions(filter%3F%3A%20string)%20%7B%0A%20%20%20%20let%20countries%3A%20any%20%3D%20%5B%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20value%3A%202356%2C%0A%20%20%20%20%20%20%20%20label%3A%20'Uganda'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20value%3A%202357%2C%0A%20%20%20%20%20%20%20%20label%3A%20'Ukraine'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20value%3A%202358%2C%0A%20%20%20%20%20%20%20%20label%3A%20'United%20Arab%20Emirates'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20value%3A%202359%2C%0A%20%20%20%20%20%20%20%20label%3A%20'United%20Kingdom'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20value%3A%201%2C%0A%20%20%20%20%20%20%20%20label%3A%20'United%20States'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20value%3A%202443%2C%0A%20%20%20%20%20%20%20%20label%3A%20'United%20States%20Minor%20Outlying%20Islands'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20value%3A%202360%2C%0A%20%20%20%20%20%20%20%20label%3A%20'Uruguay'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20value%3A%202361%2C%0A%20%20%20%20%20%20%20%20label%3A%20'Uzbekistan'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%5D%3B%0A%20%20%20%20if%20(filter%20%26%26%20filter.length)%20%7B%0A%20%20%20%20%20%20countries%20%3D%20countries.filter((country)%20%3D%3E%20new%20RegExp(%60%24%7Bfilter%7D%60%2C%20'gi').test(country.label))%3B%0A%20%20%20%20%7D%0A%20%20%20%20return%20countries%3B%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cnovo-form%20%5Bform%5D%3D%22addressForm%22%3E%0A%20%20%3Cdiv%20class%3D%22novo-form-row%22%3E%0A%20%20%20%20%3Cnovo-control%20%5Bform%5D%3D%22addressForm%22%20%5Bcontrol%5D%3D%22addressControl%22%3E%3C%2Fnovo-control%3E%0A%20%20%3C%2Fdiv%3E%0A%20%20%3Cdiv%20class%3D%22novo-form-row%22%3E%0A%20%20%20%20%3Cnovo-control%20%5Bform%5D%3D%22addressForm%22%20%5Bcontrol%5D%3D%22secondaryAddressControl%22%3E%3C%2Fnovo-control%3E%0A%20%20%3C%2Fdiv%3E%0A%3C%2Fnovo-form%3E%0A%0A%3Cdiv%20class%3D%22final-value%22%3EValue%3A%20%7B%7BaddressForm.value%20%7C%20json%7D%7D%3C%2Fdiv%3E%0A`
    },
    'vertical-dynamic-form': {
        title: 'Vertical Dynamic Form Example',
        component: VerticalDynamicFormExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0Aimport%20%7B%20FormUtils%20%7D%20from%20'novo-elements'%3B%0Aimport%20%7B%20MockMeta%20%7D%20from%20'..%2FMockMeta'%3B%0A%0A%2F**%0A%20*%20%40title%20Vertical%20Dynamic%20Form%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'vertical-dynamic-form-example'%2C%0A%20%20%20%20templateUrl%3A%20'vertical-dynamic-form-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'vertical-dynamic-form-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20VerticalDynamicFormExample%20%7B%0A%20%20public%20dynamicVertical%3A%20any%3B%0A%20%20public%20dynamicVerticalForm%3A%20any%3B%0A%20%20public%20fieldsets%3A%20Array%3Cany%3E%3B%0A%20%20public%20fieldsetsForm%3A%20any%3B%0A%0A%20%20constructor(private%20formUtils%3A%20FormUtils)%20%7B%0A%20%20%20%20%2F%2F%20Dynamic%0A%20%20%20%20this.dynamicVertical%20%3D%20formUtils.toControls(MockMeta%2C%20'%24%20USD'%2C%20%7B%7D%2C%20%7B%20token%3A%20'TOKEN'%2C%20military%3A%20true%20%7D)%3B%0A%20%20%20%20formUtils.setInitialValues(this.dynamicVertical%2C%20%7B%20number%3A%200%2C%20firstName%3A%20'Bobby%20Flay'%20%7D)%3B%0A%20%20%20%20this.dynamicVerticalForm%20%3D%20formUtils.toFormGroup(this.dynamicVertical)%3B%0A%20%20%7D%0A%0A%20%20save(form)%20%7B%0A%20%20%20%20if%20(!form.isValid)%20%7B%0A%20%20%20%20%20%20form.showOnlyRequired(true)%3B%0A%20%20%20%20%7D%20else%20%7B%0A%20%20%20%20%20%20alert('SAVING')%3B%0A%20%20%20%20%7D%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cbutton%20theme%3D%22secondary%22%20(click)%3D%22nomyform.showAllFields()%22%3EShow%20All%20Fields%3C%2Fbutton%3E%0A%3Cbutton%20theme%3D%22secondary%22%20(click)%3D%22nomyform.showOnlyRequired(false)%22%3EShow%20Required%20Fields%3C%2Fbutton%3E%0A%3Cnovo-dynamic-form%20layout%3D%22vertical%22%20class%3D%22dynamic%22%20%5Bcontrols%5D%3D%22dynamicVertical%22%20%5B(form)%5D%3D%22dynamicVerticalForm%22%20%23nomyform%3E%0A%20%20%3Cng-template%20novoTemplate%3D%22custom-demo-component%22%20let-control%20let-form%3D%22form%22%3E%0A%20%20%20%20%3Ccustom-demo-control-example%20%5Bcontrol%5D%3D%22control%22%20%5Bform%5D%3D%22form%22%3E%3C%2Fcustom-demo-control-example%3E%0A%20%20%3C%2Fng-template%3E%0A%3C%2Fnovo-dynamic-form%3E%0A%3Cdiv%20class%3D%22final-value%22%3EValid%3A%20%7B%7Bnomyform.isValid%20%7C%20json%7D%7D%3C%2Fdiv%3E%0A%3Cdiv%20class%3D%22final-value%22%3EValues%3A%20%7B%7Bnomyform.values%20%7C%20json%7D%7D%3C%2Fdiv%3E%0A%3Cdiv%20class%3D%22final-value%22%3EUpdated%20Values%3A%20%7B%7Bnomyform.updatedValues()%20%7C%20json%7D%7D%3C%2Fdiv%3E%0A`
    },
    'updating-form': {
        title: 'Updating Form Example',
        component: UpdatingFormExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%2F%2F%20Vendor%0Aimport%20%7B%20CheckboxControl%2C%20FileControl%2C%20FormUtils%2C%20PickerControl%2C%20TextBoxControl%20%7D%20from%20'novo-elements'%3B%0A%0A%2F**%0A%20*%20%40title%20Updating%20Form%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'updating-form-example'%2C%0A%20%20%20%20templateUrl%3A%20'updating-form-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'updating-form-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20UpdatingFormExample%20%7B%0A%20%20public%20textControl%3A%20any%3B%0A%20%20public%20percentageControl%3A%20any%3B%0A%20%20public%20checkControl%3A%20any%3B%0A%20%20public%20fileControl%3A%20any%3B%0A%20%20public%20singlePickerControl%3A%20any%3B%0A%20%20public%20updatingForm%3A%20any%3B%0A%20%20public%20updatingFormControls%3A%20any%5B%5D%3B%0A%20%20public%20required%3A%20boolean%20%3D%20false%3B%0A%20%20public%20disabled%3A%20boolean%20%3D%20true%3B%0A%0A%20%20constructor(private%20formUtils%3A%20FormUtils)%20%7B%0A%20%20%20%20%2F%2F%20Text-based%20Controls%0A%20%20%20%20this.textControl%20%3D%20new%20TextBoxControl(%7B%0A%20%20%20%20%20%20key%3A%20'text'%2C%0A%20%20%20%20%20%20label%3A%20'Text%20Box'%2C%0A%20%20%20%20%20%20tooltip%3A%20'Textbox'%2C%0A%20%20%20%20%20%20readOnly%3A%20true%2C%0A%20%20%20%20%20%20value%3A%20'HI'%2C%0A%20%20%20%20%20%20required%3A%20true%2C%0A%20%20%20%20%7D)%3B%0A%20%20%20%20this.percentageControl%20%3D%20new%20TextBoxControl(%7B%0A%20%20%20%20%20%20type%3A%20'percentage'%2C%0A%20%20%20%20%20%20key%3A%20'percentage'%2C%0A%20%20%20%20%20%20tooltip%3A%20'Percent'%2C%0A%20%20%20%20%20%20label%3A%20'Percent'%2C%0A%20%20%20%20%20%20required%3A%20true%2C%0A%20%20%20%20%7D)%3B%0A%0A%20%20%20%20%2F%2F%20Check%20box%20controls%0A%20%20%20%20this.checkControl%20%3D%20new%20CheckboxControl(%7B%20key%3A%20'check'%2C%20tooltip%3A%20'Checkbox'%2C%20label%3A%20'Checkbox'%2C%20checkboxLabel%3A%20'Checkbox'%20%7D)%3B%0A%0A%20%20%20%20%2F%2F%20Picker%20controls%0A%20%20%20%20this.singlePickerControl%20%3D%20new%20PickerControl(%7B%0A%20%20%20%20%20%20key%3A%20'singlePicker'%2C%0A%20%20%20%20%20%20tooltip%3A%20'Single'%2C%0A%20%20%20%20%20%20label%3A%20'Single'%2C%0A%20%20%20%20%20%20config%3A%20%7B%20options%3A%20%5B'One'%2C%20'Two'%2C%20'Three'%5D%20%7D%2C%0A%20%20%20%20%7D)%3B%0A%20%20%20%20%2F%2F%20File%20input%20controls%0A%20%20%20%20this.fileControl%20%3D%20new%20FileControl(%7B%20key%3A%20'file'%2C%20name%3A%20'myfile'%2C%20label%3A%20'File'%2C%20tooltip%3A%20'Files%20Control'%20%7D)%3B%0A%0A%20%20%20%20%2F%2F%20Updating%20form%0A%20%20%20%20this.updatingFormControls%20%3D%20%5Bthis.textControl%2C%20this.percentageControl%2C%20this.checkControl%2C%20this.singlePickerControl%2C%20this.fileControl%5D%3B%0A%20%20%20%20this.updatingForm%20%3D%20formUtils.toFormGroup(this.updatingFormControls)%3B%0A%20%20%7D%0A%0A%20%20toggleEnabled()%20%7B%0A%20%20%20%20this.disabled%20%3D%20!this.disabled%3B%0A%20%20%20%20Object.keys(this.updatingForm.controls).forEach((key)%20%3D%3E%20%7B%0A%20%20%20%20%20%20if%20(this.disabled)%20%7B%0A%20%20%20%20%20%20%20%20this.updatingForm.controls%5Bkey%5D.enable()%3B%0A%20%20%20%20%20%20%7D%20else%20%7B%0A%20%20%20%20%20%20%20%20this.updatingForm.controls%5Bkey%5D.disable()%3B%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%7D)%3B%0A%20%20%7D%0A%0A%20%20toggleRequired()%20%7B%0A%20%20%20%20this.required%20%3D%20!this.required%3B%0A%20%20%20%20Object.keys(this.updatingForm.controls).forEach((key)%20%3D%3E%20%7B%0A%20%20%20%20%20%20this.updatingForm.controls%5Bkey%5D.setRequired(this.required)%3B%0A%20%20%20%20%7D)%3B%0A%20%20%7D%0A%0A%20%20markAsInvalid()%20%7B%0A%20%20%20%20Object.keys(this.updatingForm.controls).forEach((key)%20%3D%3E%20%7B%0A%20%20%20%20%20%20this.updatingForm.controls%5Bkey%5D.markAsInvalid('Custom%20Error!')%3B%0A%20%20%20%20%7D)%3B%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cbutton%20theme%3D%22secondary%22%20(click)%3D%22toggleEnabled()%22%3EToggle%20Enabled%3C%2Fbutton%3E%0A%3Cbutton%20theme%3D%22secondary%22%20(click)%3D%22toggleRequired()%22%3EToggle%20Required%3C%2Fbutton%3E%0A%3Cbutton%20theme%3D%22secondary%22%20(click)%3D%22markAsInvalid()%22%3EMark%20As%20Invalid%3C%2Fbutton%3E%0A%3Cbr%2F%3E%3Cbr%2F%3E%0A%3Cnovo-dynamic-form%20layout%3D%22vertical%22%20%5Bcontrols%5D%3D%22updatingFormControls%22%20%5B(form)%5D%3D%22updatingForm%22%20%23updatingFormRef%3E%3C%2Fnovo-dynamic-form%3E%0A%3Cdiv%20class%3D%22final-value%22%3EValid%3A%20%7B%7BupdatingFormRef.isValid%20%7C%20json%7D%7D%3C%2Fdiv%3E%0A%3Cdiv%20class%3D%22final-value%22%3EValues%3A%20%7B%7BupdatingFormRef.values%20%7C%20json%7D%7D%3C%2Fdiv%3E%0A%3Cdiv%20class%3D%22final-value%22%3EUpdated%20Values%3A%20%7B%7BupdatingFormRef.updatedValues()%20%7C%20json%7D%7D%3C%2Fdiv%3E%0A`
    },
    'enable-disable-all-fields-in-form': {
        title: 'Enable/Disable all Fields in Form Example',
        component: EnableDisableAllFieldsInFormExample,
        tsSource: `%2F%2F%20NG%0Aimport%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%2F%2F%20Vendor%0Aimport%20%7B%20FormUtils%20%7D%20from%20'novo-elements'%3B%0A%2F%2F%20App%0Aimport%20%7B%20MockMetaForForm%20%7D%20from%20'..%2FMockMeta'%3B%0A%0A%2F**%0A%20*%20%40title%20Enable%2FDisable%20all%20Fields%20in%20Form%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'enable-disable-all-fields-in-form-example'%2C%0A%20%20%20%20templateUrl%3A%20'enable-disable-all-fields-in-form-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'enable-disable-all-fields-in-form-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20EnableDisableAllFieldsInFormExample%20%7B%0A%20%20public%20controls%3A%20any%3B%0A%20%20public%20form%3A%20any%3B%0A%20%20public%20disabled%3A%20boolean%20%3D%20false%3B%0A%0A%20%20constructor(public%20formUtils%3A%20FormUtils)%20%7B%0A%20%20%20%20%2F%2F%20Updating%20form%0A%20%20%20%20this.controls%20%3D%20formUtils.toFieldSets(MockMetaForForm%2C%20'%24%20USD'%2C%20%7B%7D%2C%20%7B%20token%3A%20'TOKEN'%2C%20military%3A%20true%20%7D%2C%20%7B%7D)%3B%0A%20%20%20%20formUtils.setInitialValuesFieldsets(this.controls%2C%20%7B%0A%20%20%20%20%20%20select%3A%20'disabledValue'%2C%0A%20%20%20%20%7D)%3B%0A%20%20%20%20this.form%20%3D%20formUtils.toFormGroupFromFieldset(this.controls)%3B%0A%20%20%7D%0A%0A%20%20public%20toggleEnableDisableAllFields()%3A%20void%20%7B%0A%20%20%20%20this.disabled%20%3D%20!this.disabled%3B%0A%20%20%20%20if%20(this.disabled)%20%7B%0A%20%20%20%20%20%20this.form.enableAllControls()%3B%0A%20%20%20%20%7D%20else%20%7B%0A%20%20%20%20%20%20this.form.disableAllControls()%3B%0A%20%20%20%20%7D%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cnovo-dynamic-form%20class%3D%22dynamic%22%20%5Bfieldsets%5D%3D%22controls%22%20%5B(form)%5D%3D%22form%22%20%23myform%3E%3C%2Fnovo-dynamic-form%3E%0A%3Cbutton%20theme%3D%22primary%22%20(click)%3D%22toggleEnableDisableAllFields()%22%3EToggle%20fields%3C%2Fbutton%3E%0A`
    },
    'dynamic-form-field-sets': {
        title: 'Dynamic Form Field Sets Example',
        component: DynamicFormFieldSetsExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0Aimport%20%7B%20FormUtils%20%7D%20from%20'novo-elements'%3B%0Aimport%20%7B%20MockMeta%2C%20MockMetaHeaders%20%7D%20from%20'..%2FMockMeta'%3B%0A%0A%2F**%0A%20*%20%40title%20Dynamic%20Form%20Field%20Sets%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'dynamic-form-field-sets-example'%2C%0A%20%20%20%20templateUrl%3A%20'dynamic-form-field-sets-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'dynamic-form-field-sets-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20DynamicFormFieldSetsExample%20%7B%0A%20%20public%20fieldsets%3A%20Array%3Cany%3E%3B%0A%20%20public%20fieldsetsForm%3A%20any%3B%0A%0A%20%20constructor(private%20formUtils%3A%20FormUtils)%20%7B%0A%20%20%20%20%2F%2F%20Dynamic%20%2B%20Fieldsets%0A%20%20%20%20this.fieldsets%20%3D%20formUtils.toFieldSets(%0A%20%20%20%20%20%20MockMetaHeaders%2C%0A%20%20%20%20%20%20'%24%20USD'%2C%0A%20%20%20%20%20%20%7B%7D%2C%0A%20%20%20%20%20%20%7B%20token%3A%20'TOKEN'%20%7D%2C%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20customfield%3A%20%7B%0A%20%20%20%20%20%20%20%20%20%20template%3A%20'custom-demo-component'%2C%0A%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20)%3B%0A%20%20%20%20formUtils.setInitialValuesFieldsets(this.fieldsets%2C%20%7B%20firstName%3A%20'Initial%20F%20Name'%2C%20number%3A%2012%20%7D)%3B%0A%20%20%20%20this.fieldsetsForm%20%3D%20formUtils.toFormGroupFromFieldset(this.fieldsets)%3B%0A%20%20%7D%0A%0A%20%20save(form)%20%7B%0A%20%20%20%20if%20(!form.isValid)%20%7B%0A%20%20%20%20%20%20form.showOnlyRequired(true)%3B%0A%20%20%20%20%7D%20else%20%7B%0A%20%20%20%20%20%20alert('SAVING')%3B%0A%20%20%20%20%7D%0A%20%20%7D%0A%0A%20%20clear()%20%7B%0A%20%20%20%20this.fieldsets.forEach((fieldset)%20%3D%3E%20%7B%0A%20%20%20%20%20%20fieldset.controls.forEach((control)%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20control.forceClear.emit()%3B%0A%20%20%20%20%20%20%7D)%3B%0A%20%20%20%20%7D)%3B%0A%20%20%7D%0A%0A%20%20onChange(value)%20%7B%0A%20%20%20%20console.log('I%20changed!'%2C%20value)%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cbutton%20theme%3D%22secondary%22%0A%20%20*ngIf%3D%22!myFieldsetsForm.showingAllFields%20%26%26%20!(myFieldsetsForm.allFieldsRequired%20%7C%7C%20myFieldsetsForm.allFieldsNotRequired)%22%0A%20%20(click)%3D%22myFieldsetsForm.showAllFields()%22%3EShow%20All%20Fields%3C%2Fbutton%3E%0A%3Cbutton%20theme%3D%22secondary%22%0A%20%20*ngIf%3D%22!myFieldsetsForm.showingRequiredFields%20%26%26%20!(myFieldsetsForm.allFieldsRequired%20%7C%7C%20myFieldsetsForm.allFieldsNotRequired)%22%0A%20%20(click)%3D%22myFieldsetsForm.showOnlyRequired(false)%22%3EShow%20Required%20Fields%3C%2Fbutton%3E%0A%3Cnovo-dynamic-form%20class%3D%22dynamic%22%20layout%3D%22horizontal%22%20%5Bfieldsets%5D%3D%22fieldsets%22%20%5B(form)%5D%3D%22fieldsetsForm%22%0A%20%20%23myFieldsetsForm%3E%0A%20%20%3Cng-template%20novoTemplate%3D%22custom-demo-component%22%20let-control%20let-form%3D%22form%22%3E%0A%20%20%20%20%3Ccustom-demo-control-example%20%5Bcontrol%5D%3D%22control%22%20%5Bform%5D%3D%22form%22%3E%3C%2Fcustom-demo-control-example%3E%0A%20%20%3C%2Fng-template%3E%0A%3C%2Fnovo-dynamic-form%3E%0A%3Cfooter%20class%3D%22dynamic-demo-footer%22%3E%0A%20%20%3Cbutton%20(click)%3D%22save(myFieldsetsForm)%22%20theme%3D%22primary%22%20icon%3D%22check%22%3ESave%3C%2Fbutton%3E%0A%20%20%3Cbutton%20(click)%3D%22clear()%22%20theme%3D%22secondary%22%20icon%3D%22check%22%3EClear%3C%2Fbutton%3E%0A%3C%2Ffooter%3E%0A%3Cdiv%20class%3D%22final-value%22%3EValid%3A%20%7B%7BmyFieldsetsForm.isValid%20%7C%20json%7D%7D%3C%2Fdiv%3E%0A%3Cdiv%20class%3D%22final-value%22%3EValues%3A%20%7B%7BmyFieldsetsForm.values%20%7C%20json%7D%7D%3C%2Fdiv%3E%0A%3Cdiv%20class%3D%22final-value%22%3EUpdated%20Values%3A%20%7B%7BmyFieldsetsForm.updatedValues()%20%7C%20json%7D%7D%3C%2Fdiv%3E`
    },
    'dynamic-form': {
        title: 'Dynamic Form Example',
        component: DynamicFormExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0Aimport%20%7B%20FormUtils%20%7D%20from%20'novo-elements'%3B%0Aimport%20%7B%20MockMeta%20%7D%20from%20'..%2FMockMeta'%3B%0A%0A%2F**%0A%20*%20%40title%20Dynamic%20Form%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'dynamic-form-example'%2C%0A%20%20%20%20templateUrl%3A%20'dynamic-form-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'dynamic-form-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20DynamicFormExample%20%7B%0A%20%20public%20dynamic%3A%20any%3B%0A%20%20public%20dynamicForm%3A%20any%3B%0A%0A%20%20constructor(private%20formUtils%3A%20FormUtils)%20%7B%0A%20%20%20%20%2F%2F%20Dynamic%0A%20%20%20%20this.dynamic%20%3D%20formUtils.toFieldSets(%0A%20%20%20%20%20%20MockMeta%2C%0A%20%20%20%20%20%20'%24%20USD'%2C%0A%20%20%20%20%20%20%7B%7D%2C%0A%20%20%20%20%20%20%7B%20token%3A%20'TOKEN'%2C%20military%3A%20true%20%7D%2C%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20customfield%3A%20%7B%0A%20%20%20%20%20%20%20%20%20%20template%3A%20'custom-demo-component'%2C%0A%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20)%3B%0A%20%20%20%20formUtils.setInitialValuesFieldsets(this.dynamic%2C%20%7B%20firstName%3A%20'Initial%20F%20Name'%2C%20number%3A%2012%20%7D)%3B%0A%20%20%20%20this.dynamicForm%20%3D%20formUtils.toFormGroupFromFieldset(this.dynamic)%3B%0A%20%20%7D%0A%0A%20%20save(form)%20%7B%0A%20%20%20%20if%20(!form.isValid)%20%7B%0A%20%20%20%20%20%20form.showOnlyRequired(true)%3B%0A%20%20%20%20%7D%20else%20%7B%0A%20%20%20%20%20%20alert('SAVING')%3B%0A%20%20%20%20%7D%0A%20%20%7D%0A%0A%20%20clear()%20%7B%0A%20%20%20%20this.dynamic%5B0%5D.controls.forEach((control)%20%3D%3E%20%7B%0A%20%20%20%20%20%20control.forceClear.emit()%3B%0A%20%20%20%20%7D)%3B%0A%20%20%7D%0A%0A%20%20onChange(value)%20%7B%0A%20%20%20%20console.log('I%20changed!'%2C%20value)%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cbutton%20theme%3D%22secondary%22%20*ngIf%3D%22!myform.showingAllFields%20%26%26%20!(myform.allFieldsRequired%20%7C%7C%20myform.allFieldsNotRequired)%22%20(click)%3D%22myform.showAllFields()%22%3EShow%20All%20Fields%3C%2Fbutton%3E%0A%3Cbutton%20theme%3D%22secondary%22%20*ngIf%3D%22!myform.showingRequiredFields%20%26%26%20!(myform.allFieldsRequired%20%7C%7C%20myform.allFieldsNotRequired)%22%20(click)%3D%22myform.showOnlyRequired(false)%22%3EShow%20Required%20Fields%3C%2Fbutton%3E%0A%3Cnovo-dynamic-form%20%5BautoFocusFirstField%5D%3D%22true%22%20class%3D%22dynamic%22%20%5Bfieldsets%5D%3D%22dynamic%22%20%5B(form)%5D%3D%22dynamicForm%22%20%23myform%3E%3C%2Fnovo-dynamic-form%3E%0A%3Cfooter%20class%3D%22dynamic-demo-footer%22%3E%0A%20%20%20%20%3Cbutton%20(click)%3D%22save(myform)%22%20theme%3D%22primary%22%20icon%3D%22check%22%3ESave%3C%2Fbutton%3E%0A%20%20%20%20%3Cbutton%20(click)%3D%22clear()%22%20theme%3D%22secondary%22%20icon%3D%22check%22%3EClear%3C%2Fbutton%3E%0A%3C%2Ffooter%3E%0A%3Cdiv%20class%3D%22final-value%22%3EValid%3A%20%7B%7Bmyform.isValid%20%7C%20json%7D%7D%3C%2Fdiv%3E%0A%3Cdiv%20class%3D%22final-value%22%3EValues%3A%20%7B%7Bmyform.values%20%7C%20json%7D%7D%3C%2Fdiv%3E%0A%3Cdiv%20class%3D%22final-value%22%3EUpdated%20Values%3A%20%7B%7Bmyform.updatedValues()%20%7C%20json%7D%7D%3C%2Fdiv%3E%0A`
    },
    'disabled-form': {
        title: 'Disabled Form Example',
        component: DisabledFormExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%2F%2F%20Vendor%0Aimport%20%7B%20FormUtils%20%7D%20from%20'novo-elements'%3B%0Aimport%20%7B%20MockMetaForDisabledForm%20%7D%20from%20'..%2FMockMeta'%3B%0A%0A%2F**%0A%20*%20%40title%20Disabled%20Form%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'disabled-form-example'%2C%0A%20%20%20%20templateUrl%3A%20'disabled-form-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'disabled-form-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20DisabledFormExample%20%7B%0A%20%20public%20disabledControls%3A%20any%3B%0A%20%20public%20disabledQuickNote%3A%20any%3B%0A%20%20public%20disabledForm%3A%20any%3B%0A%20%20public%20disabledNote%3A%20any%3B%0A%20%20public%20required%3A%20boolean%20%3D%20false%3B%0A%20%20public%20disabled%3A%20boolean%20%3D%20true%3B%0A%20%20public%20placeholder%3A%20string%20%3D%20'Placeholder'%3B%0A%20%20public%20note%3A%20string%20%3D%20''%3B%0A%0A%20%20constructor(private%20formUtils%3A%20FormUtils)%20%7B%0A%20%20%20%20%2F%2F%20Disabled%20Form%0A%20%20%20%20const%20disabledOverrides%3A%20any%20%3D%20%7B%0A%20%20%20%20%20%20address%3A%20%7B%0A%20%20%20%20%20%20%20%20readOnly%3A%20true%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20textbox%3A%20%7B%0A%20%20%20%20%20%20%20%20readOnly%3A%20true%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20number%3A%20%7B%0A%20%20%20%20%20%20%20%20readOnly%3A%20true%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20year%3A%20%7B%0A%20%20%20%20%20%20%20%20readOnly%3A%20true%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20float%3A%20%7B%0A%20%20%20%20%20%20%20%20readOnly%3A%20true%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20currency%3A%20%7B%0A%20%20%20%20%20%20%20%20readOnly%3A%20true%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20percent%3A%20%7B%0A%20%20%20%20%20%20%20%20readOnly%3A%20true%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20textarea%3A%20%7B%0A%20%20%20%20%20%20%20%20readOnly%3A%20true%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20date%3A%20%7B%0A%20%20%20%20%20%20%20%20readOnly%3A%20true%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20time%3A%20%7B%0A%20%20%20%20%20%20%20%20readOnly%3A%20true%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20datetime%3A%20%7B%0A%20%20%20%20%20%20%20%20readOnly%3A%20true%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20select%3A%20%7B%0A%20%20%20%20%20%20%20%20readOnly%3A%20true%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20tiles%3A%20%7B%0A%20%20%20%20%20%20%20%20readOnly%3A%20true%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20picker%3A%20%7B%0A%20%20%20%20%20%20%20%20readOnly%3A%20true%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20chips%3A%20%7B%0A%20%20%20%20%20%20%20%20readOnly%3A%20true%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20checkbox%3A%20%7B%0A%20%20%20%20%20%20%20%20readOnly%3A%20true%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20checklist%3A%20%7B%0A%20%20%20%20%20%20%20%20readOnly%3A%20true%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20file%3A%20%7B%0A%20%20%20%20%20%20%20%20readOnly%3A%20true%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20type%3A%20%7B%0A%20%20%20%20%20%20%20%20readOnly%3A%20true%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20radio%3A%20%7B%0A%20%20%20%20%20%20%20%20readOnly%3A%20true%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20htmlFieldFullEditor%3A%20%7B%0A%20%20%20%20%20%20%20%20readOnly%3A%20true%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20rowChips%3A%20%7B%0A%20%20%20%20%20%20%20%20readOnly%3A%20true%2C%0A%20%20%20%20%20%20%20%20label%3A%20'Row%20Chips'%2C%0A%20%20%20%20%20%20%20%20columns%3A%20%5B%0A%20%20%20%20%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20label%3A%20'Value'%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20data%3A%20(item%3A%20any)%3A%20string%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20return%20item.value.value%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20label%3A%20'Description'%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20data%3A%20(item%3A%20any)%3A%20string%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20return%20item.value.description%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20%5D%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%7D%3B%0A%20%20%20%20%2F%2F%20Updating%20form%0A%20%20%20%20this.disabledControls%20%3D%20formUtils.toFieldSets(%0A%20%20%20%20%20%20MockMetaForDisabledForm%2C%0A%20%20%20%20%20%20'%24%20USD'%2C%0A%20%20%20%20%20%20%7B%7D%2C%0A%20%20%20%20%20%20%7B%20token%3A%20'TOKEN'%2C%20military%3A%20true%20%7D%2C%0A%20%20%20%20%20%20disabledOverrides%2C%0A%20%20%20%20)%3B%0A%20%20%20%20formUtils.setInitialValuesFieldsets(this.disabledControls%2C%20%7B%0A%20%20%20%20%20%20textbox%3A%20'Disabled%20TextBox'%2C%0A%20%20%20%20%20%20textarea%3A%0A%20%20%20%20%20%20%20%20'Disabled%20TextArea%20Disabled%20TextArea%20Disabled%20TextArea%20Disabled%20TextArea%20Disabled%20TextArea%20Disabled%20TextArea%20Disabled%20TextArea%20'%2C%0A%20%20%20%20%20%20number%3A%2042%2C%0A%20%20%20%20%20%20year%3A%202000%2C%0A%20%20%20%20%20%20float%3A%203.14%2C%0A%20%20%20%20%20%20currency%3A%201000000%2C%0A%20%20%20%20%20%20percent%3A%201.21%2C%0A%20%20%20%20%20%20select%3A%20'disabledValue'%2C%0A%20%20%20%20%20%20checklist%3A%20'Disabled'%2C%0A%20%20%20%20%20%20tiles%3A%20'Disabled'%2C%0A%20%20%20%20%20%20radio%3A%20'Yes'%2C%0A%20%20%20%20%20%20chips%3A%20%5B'Disabled'%2C%20'Chip'%5D%2C%0A%20%20%20%20%20%20address%3A%20%7B%0A%20%20%20%20%20%20%20%20address1%3A%20'100%20Summer%20St'%2C%0A%20%20%20%20%20%20%20%20address2%3A%20'apt%2025'%2C%0A%20%20%20%20%20%20%20%20countryID%3A%201%2C%0A%20%20%20%20%20%20%20%20state%3A%20'Georgia'%2C%0A%20%20%20%20%20%20%20%20city%3A%20'Atlanta'%2C%0A%20%20%20%20%20%20%20%20zip%3A%20'30312'%2C%0A%20%20%20%20%20%20%20%20countryName%3A%20'United%20States'%2C%0A%20%20%20%20%20%20%20%20countryCode%3A%20'US'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20file%3A%20%5B%7B%20name%3A%20'yourFile.pdf'%2C%20loaded%3A%20true%2C%20link%3A%20'www.google.com'%2C%20description%3A%20'file%20description'%20%7D%5D%2C%0A%20%20%20%20%20%20htmlFieldFullEditor%3A%20%60%3Ch1%3EDisabled%20Editor%3C%2Fh1%3E%3Cbr%3E%3Cui%3E%3Cli%3EDisabled%3C%2Fli%3E%3Cli%3EEditor%3C%2Fli%3E%3C%2Fui%3E%60%2C%0A%20%20%20%20%20%20picker%3A%20'Disabled%20Picker'%2C%0A%20%20%20%20%20%20rowChips%3A%20%5B%7B%20id%3A%201%2C%20value%3A%20'Disabled%20Row%20Chip'%2C%20description%3A%20'This%20is%20a%20disabled%20Row%20Chip'%20%7D%5D%2C%0A%20%20%20%20%7D)%3B%0A%20%20%20%20this.disabledForm%20%3D%20formUtils.toFormGroupFromFieldset(this.disabledControls)%3B%0A%20%20%20%20this.disabledNote%20%3D%20'Disabled%20QuickNote'%3B%0A%20%20%20%20this.disabledQuickNote%20%3D%20%7B%0A%20%20%20%20%20%20triggers%3A%20%7B%0A%20%20%20%20%20%20%20%20tags%3A%20'%40'%2C%0A%20%20%20%20%20%20%20%20references%3A%20'%23'%2C%0A%20%20%20%20%20%20%20%20boos%3A%20'%5E'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20options%3A%20%7B%0A%20%20%20%20%20%20%20%20tags%3A%20%5B'First'%2C%20'Second'%2C%20'Space%20Between'%5D%2C%0A%20%20%20%20%20%20%20%20references%3A%20%5B'Third'%2C%20'Fourth'%5D%2C%0A%20%20%20%20%20%20%20%20boos%3A%20%5B'Test'%5D%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20readOnly%3A%20true%2C%0A%20%20%20%20%20%20renderer%3A%20%7B%0A%20%20%20%20%20%20%20%20tags%3A%20(symbol%2C%20item)%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%20%20return%20%60%3Ca%20href%3D%22https%3A%2F%2Fwww.google.com%2Fsearch%3Fq%3Dbullhorn%26oq%3Dbullhorn%22%3E%24%7Bsymbol%7D%24%7Bitem.label%7D%3C%2Fa%3E%60%3B%0A%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20references%3A%20(symbol%2C%20item)%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%20%20return%20%60%3Ca%20href%3D%22https%3A%2F%2Fwww.google.com%2Fsearch%3Fq%3Dbullhorn%26oq%3Dbullhorn%22%3E%24%7Bsymbol%7D%24%7Bitem.label%7D%3C%2Fa%3E%60%3B%0A%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20boos%3A%20(symbol%2C%20item)%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%20%20return%20%60%3Cstrong%3E%24%7Bsymbol%7D%24%7Bitem.label%7D%3C%2Fstrong%3E%60%3B%0A%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%7D%3B%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cnovo-dynamic-form%20%5BautoFocusFirstField%5D%3D%22true%22%20class%3D%22dynamic%22%20%5Bfieldsets%5D%3D%22disabledControls%22%20%5B(form)%5D%3D%22disabledForm%22%0A%20%20%23myform%3E%3C%2Fnovo-dynamic-form%3E%0A%3Cdiv%20class%3D%22final-value%22%3EValues%3A%20%7B%7Bmyform.values%20%7C%20json%7D%7D%3C%2Fdiv%3E%0A%3Cbr%20%2F%3E%0A%3Ch5%3EQUICK%20NOTE%3C%2Fh5%3E%0A%3Cbr%20%2F%3E%0A%3Cnovo-quick-note%20%5B(ngModel)%5D%3D%22disabledNote%22%20%5Bplaceholder%5D%3D%22placeholder%22%20%5Bconfig%5D%3D%22disabledQuickNote%22%3E%3C%2Fnovo-quick-note%3E%0A%3Cdiv%20class%3D%22data%22%3E%0A%20%20%3Cp%3ENote%3A%20%7B%7Bnote%20%7C%20json%7D%7D%3C%2Fp%3E%0A%3C%2Fdiv%3E`
    },
    'date-time-input': {
        title: 'Date Time Input Example',
        component: DateTimeInputExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Date%20Time%20Input%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'date-time-input-example'%2C%0A%20%20%20%20templateUrl%3A%20'date-time-input-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'date-time-input-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20DateTimeInputExample%20%7B%0A%20%20dateTimeInput%3A%20Date%20%3D%20new%20Date('08%2F01%2F1983%2012%3A57%20PM')%3B%0A%20%20dateTimeInput2%3A%20Date%20%3D%20new%20Date('08%2F02%2F1984%2012%3A57%20PM')%3B%0A%20%20dateTimeInput3%3A%20Date%20%3D%20new%20Date('08%2F03%2F1985%2012%3A57%20PM')%3B%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cdiv%20class%3D%22date-picker-demo-side-by-side%22%3E%0A%20%20%20%20%3Cp%3E%0A%20%20%20%20%20%20%20%20%3Clabel%3EDate-Time%3C%2Flabel%3E%20%7B%7B(dateTimeInput%20%7C%20date%3A'medium')%20%7C%7C%20'N%2FA'%7D%7D%0A%20%20%20%20%20%20%20%20%3Clabel%3EDate-Time%202%3C%2Flabel%3E%20%7B%7B(dateTimeInput2%20%7C%20date%3A'medium')%20%7C%7C%20'N%2FA'%7D%7D%0A%20%20%20%20%3C%2Fp%3E%0A%20%20%20%20%3Cdiv%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-date-time-picker-input%20%5B(ngModel)%5D%3D%22dateTimeInput%22%3E%3C%2Fnovo-date-time-picker-input%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-date-time-picker-input%20%5B(ngModel)%5D%3D%22dateTimeInput2%22%20%5Bmilitary%5D%3D%22true%22%3E%3C%2Fnovo-date-time-picker-input%3E%0A%20%20%20%20%3C%2Fdiv%3E%0A%20%20%20%20%3Cnovo-date-time-picker%20%5B(ngModel)%5D%3D%22dateTimeInput3%22%3E%3C%2Fnovo-date-time-picker%3E%20%0A%3C%2Fdiv%3E%0A`
    },
    'week-start': {
        title: 'Week Start Example',
        component: WeekStartExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Week%20Start%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'week-start-example'%2C%0A%20%20%20%20templateUrl%3A%20'week-start-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'week-start-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20WeekStartExample%20%7B%0A%20%20weekStartDate%3A%20Date%20%3D%20new%20Date()%3B%0A%20%20weekStart%3A%20number%20%3D%200%3B%0A%0A%20%20setWeekStart(num%3A%20number)%3A%20void%20%7B%0A%20%20%20%20this.weekStart%20%3D%20num%3B%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cbutton%20%5Btheme%5D%3D%22weekStart%20%3D%3D%3D%200%20%3F%20'primary'%20%3A%20'secondary'%22%20(click)%3D%22setWeekStart(0)%22%3ESunday%3C%2Fbutton%3E%0A%3Cbutton%20%5Btheme%5D%3D%22weekStart%20%3D%3D%3D%201%20%3F%20'primary'%20%3A%20'secondary'%22%20(click)%3D%22setWeekStart(1)%22%3EMonday%3C%2Fbutton%3E%0A%3Cbutton%20%5Btheme%5D%3D%22weekStart%20%3D%3D%3D%202%20%3F%20'primary'%20%3A%20'secondary'%22%20(click)%3D%22setWeekStart(2)%22%3ETuesday%3C%2Fbutton%3E%0A%3Cbutton%20%5Btheme%5D%3D%22weekStart%20%3D%3D%3D%203%20%3F%20'primary'%20%3A%20'secondary'%22%20(click)%3D%22setWeekStart(3)%22%3EWednesday%3C%2Fbutton%3E%0A%3Cbutton%20%5Btheme%5D%3D%22weekStart%20%3D%3D%3D%204%20%3F%20'primary'%20%3A%20'secondary'%22%20(click)%3D%22setWeekStart(4)%22%3EThursday%3C%2Fbutton%3E%0A%3Cbutton%20%5Btheme%5D%3D%22weekStart%20%3D%3D%3D%205%20%3F%20'primary'%20%3A%20'secondary'%22%20(click)%3D%22setWeekStart(5)%22%3EFriday%3C%2Fbutton%3E%0A%3Cbutton%20%5Btheme%5D%3D%22weekStart%20%3D%3D%3D%206%20%3F%20'primary'%20%3A%20'secondary'%22%20(click)%3D%22setWeekStart(6)%22%3ESaturday%3C%2Fbutton%3E%0A%3Cbr%2F%3E%0A%3Cbr%2F%3E%0A%3Cdiv%20class%3D%22date-picker-demo-side-by-side%22%3E%0A%20%20%20%20%3Cp%3E%0A%20%20%20%20%20%20%20%20%3Clabel%3EValue%3C%2Flabel%3E%20%7B%7B(weekStartDate%20%7C%20date)%20%7C%7C%20'N%2FA'%7D%7D%0A%20%20%20%20%3C%2Fp%3E%0A%20%20%20%20%3Cnovo-date-picker%20%5B(ngModel)%5D%3D%22weekStartDate%22%20%5BweekStart%5D%3D%22weekStart%22%3E%3C%2Fnovo-date-picker%3E%0A%3C%2Fdiv%3E%0A`
    },
    'multi-date': {
        title: 'Multiple Date Selection Example',
        component: MultiDateExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Multiple%20Date%20Selection%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'multi-date-example'%2C%0A%20%20%20%20templateUrl%3A%20'multi-date-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'multi-date-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20MultiDateExample%20%7B%0A%20%20multi%3A%20Date%5B%5D%20%3D%20%5B%5D%3B%0A%20%20input%3A%20Date%5B%5D%20%3D%20%5B%5D%3B%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A.date-picker-demo-side-by-side%20%7B%0A%20%20display%3A%20grid%3B%0A%20%20grid-template-columns%3A%201fr%201fr%3B%0A%7D%0A`,
        htmlSource: `%3Cdiv%20class%3D%22date-picker-demo-side-by-side%22%3E%0A%20%20%3Csection%3E%0A%20%20%20%20%3Cp%3E%0A%20%20%20%20%20%20%3Clabel%3EDates%3C%2Flabel%3E%0A%20%20%20%20%20%20%3Cspan%20*ngFor%3D%22let%20dt%20of%20multi%22%3E%7B%7B(dt%20%7C%20date)%20%7C%7C%20'N%2FA'%7D%7D%3C%2Fspan%3E%0A%20%20%20%20%3C%2Fp%3E%0A%20%20%20%20%3Cnovo-date-picker%20%5B(ngModel)%5D%3D%22multi%22%20mode%3D%22multiple%22%3E%3C%2Fnovo-date-picker%3E%0A%20%20%3C%2Fsection%3E%0A%20%20%3Csection%3E%0A%20%20%20%20%3Cnovo-multi-date-input%20%5B(ngModel)%5D%3D%22input%22%3E%3C%2Fnovo-multi-date-input%3E%0A%20%20%3C%2Fsection%3E%0A%3C%2Fdiv%3E`
    },
    'date-time': {
        title: 'Date Time Example',
        component: DateTimeExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Date%20Time%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'date-time-example'%2C%0A%20%20%20%20templateUrl%3A%20'date-time-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'date-time-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20DateTimeExample%20%7B%0A%20%20dateTime%3A%20Date%20%3D%20new%20Date('12%2F04%2F1987')%3B%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A.date-picker-demo-side-by-side%20%7B%0A%20%20display%3A%20grid%3B%0A%20%20grid-template-columns%3A%201fr%201fr%3B%0A%7D%0A`,
        htmlSource: `%3Cdiv%20class%3D%22date-picker-demo-side-by-side%22%3E%0A%20%20%3Csection%3E%0A%20%20%20%20%3Cp%3E%0A%20%20%20%20%20%20%3Clabel%3EDate-Time%3C%2Flabel%3E%20%7B%7B(dateTime%20%7C%20date%3A'medium')%20%7C%7C%20'N%2FA'%7D%7D%0A%20%20%20%20%3C%2Fp%3E%0A%20%20%20%20%3Cnovo-date-time-picker%20%5B(ngModel)%5D%3D%22dateTime%22%3E%3C%2Fnovo-date-time-picker%3E%0A%20%20%3C%2Fsection%3E%0A%20%20%3Csection%3E%0A%20%20%20%20%3Clabel%3E24hr%20Time%3C%2Flabel%3E%0A%20%20%20%20%3Cnovo-date-time-picker%20%5B(ngModel)%5D%3D%22dateTime%22%20military%3D%22true%22%3E%3C%2Fnovo-date-time-picker%3E%0A%20%20%3C%2Fsection%3E%0A%3C%2Fdiv%3E`
    },
    'date-range-input': {
        title: 'Date Range Input Example',
        component: DateRangeInputExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Date%20Range%20Input%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'date-range-input-example'%2C%0A%20%20%20%20templateUrl%3A%20'date-range-input-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'date-range-input-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20DateRangeInputExample%20%7B%0A%20%20selected%3A%20any%20%3D%20%7B%0A%20%20%20%20startDate%3A%20null%2C%0A%20%20%20%20endDate%3A%20null%2C%0A%20%20%7D%3B%0A%7D%0A`,
        cssSource: `%3Ahost%20%7B%0A%20%20display%3A%20grid%3B%0A%20%20grid-template-columns%3A%201fr%201fr%201fr%3B%0A%20%20gap%3A%202rem%3B%0A%7D%0A`,
        htmlSource: `%3Cnovo-date-range-input%0A%20%20%5B(ngModel)%5D%3D%22selected%22%0A%20%20%5Bformat%5D%3D%22format.value%22%0A%20%20%5Bmode%5D%3D%22mode.value%22%0A%20%20%5BweekStart%5D%3D%22weekStart.value%22%3E%0A%3C%2Fnovo-date-range-input%3E%0A%0A%3Csection%3E%0A%20%20%3Cnovo-label%3ESelected%20Values%3A%3C%2Fnovo-label%3E%0A%20%20%3Cdiv%3E%7B%7Bselected%20%7C%20json%7D%7D%3C%2Fdiv%3E%0A%3C%2Fsection%3E%0A%0A%3Csection%3E%0A%20%20%3Cnovo-label%3ESelection%20mode%3C%2Fnovo-label%3E%0A%20%20%3Cnovo-radio-group%20%23mode%20appearance%3D%22vertical%22%20value%3D%22week%22%3E%0A%20%20%20%20%3Cnovo-radio%20name%3D%22mode%22%20value%3D%22week%22%3Eweek%3C%2Fnovo-radio%3E%0A%20%20%20%20%3Cnovo-radio%20name%3D%22mode%22%20value%3D%22range%22%3Erange%3C%2Fnovo-radio%3E%0A%20%20%3C%2Fnovo-radio-group%3E%0A%0A%20%20%3Cnovo-label%3EFormat%3C%2Fnovo-label%3E%0A%20%20%3Cnovo-radio-group%20%23format%20appearance%3D%22vertical%22%20value%3D%22MM-DD-YYYY%22%3E%0A%20%20%20%20%3Cnovo-radio%20name%3D%22format%22%20value%3D%22MM-DD-YYYY%22%3EMM-dd-YYYY%3C%2Fnovo-radio%3E%0A%20%20%20%20%3Cnovo-radio%20name%3D%22format%22%20value%3D%22DD-MM-YYYY%22%3Edd-MM-YYYY%3C%2Fnovo-radio%3E%0A%20%20%3C%2Fnovo-radio-group%3E%0A%0A%20%20%3Cnovo-label%3EWeek%20Start%3C%2Fnovo-label%3E%0A%20%20%3Cnovo-radio-group%20%23weekStart%20appearance%3D%22vertical%22%20value%3D%220%22%3E%0A%20%20%20%20%3Cnovo-radio%20name%3D%22weekStart%22%20value%3D%220%22%3ESun%3C%2Fnovo-radio%3E%0A%20%20%20%20%3Cnovo-radio%20name%3D%22weekStart%22%20value%3D%221%22%3EMon%3C%2Fnovo-radio%3E%0A%20%20%3C%2Fnovo-radio-group%3E%0A%3C%2Fsection%3E`
    },
    'date-picker-limits': {
        title: 'Date picker limits Example',
        component: DatePickerLimitsExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0Aimport%20%7B%20BaseControl%2C%20FormUtils%2C%20NovoFormGroup%2C%20TextBoxControl%20%7D%20from%20'novo-elements'%3B%0A%0A%2F**%0A%20*%20%40title%20Date%20picker%20limits%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'date-picker-limits-example'%2C%0A%20%20%20%20templateUrl%3A%20'date-picker-limits-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'date-picker-limits-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20DatePickerLimitsExample%20%7B%0A%20%20startDate%3A%20Date%20%3D%20new%20Date()%3B%0A%20%20endDate%3A%20Date%20%3D%20new%20Date()%3B%0A%20%20tooltip%3A%20String%20%3D%20'this%20is%20a%20disabled%20date%20tooltip'%3B%0A%20%20public%20initValue%3A%20%7B%7D%5B%5D%20%3D%20%5B%7B%20tooltip%3A%20this.tooltip%20%7D%5D%3B%0A%0A%20%20public%20formGroup%3A%20NovoFormGroup%3B%0A%20%20public%20controls%3A%20BaseControl%5B%5D%20%3D%20%5B%5D%3B%0A%0A%20%20constructor(private%20formUtils%3A%20FormUtils)%20%7B%0A%20%20%20%20this.formGroup%20%3D%20this.formUtils.emptyFormGroup()%3B%0A%20%20%20%20const%20c1%20%3D%20new%20TextBoxControl(%7B%20key%3A%20'tooltip'%2C%20label%3A%20'what%20should%20your%20tooltip%20be%3F'%20%7D)%3B%0A%20%20%20%20this.controls.push(c1)%3B%0A%20%20%7D%0A%0A%20%20public%20updateInitialValue()%20%7B%0A%20%20%20%20this.tooltip%20%3D%20this.formGroup.value%3F.horizontal%5B0%5D%3F.tooltip%3B%0A%20%20%20%20this.initValue%20%3D%20%5B%7B%20tooltip%3A%20this.tooltip%20%7D%5D%3B%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%3Ahost%20%7B%0A%20%20display%3A%20grid%3B%0A%20%20grid-template-columns%3A%201fr%201fr%201fr%3B%0A%20%20gap%3A%202rem%3B%0A%7D%0A`,
        htmlSource: `%3Csection%3E%0A%20%20%3Cnovo-label%3EEFFECTIVE%20START%20DATE%3C%2Fnovo-label%3E%0A%20%20%3Cnovo-date-picker-input%20%5B(ngModel)%5D%3D%22startDate%22%3E%3C%2Fnovo-date-picker-input%3E%0A%20%20%3Cbr%2F%3E%0A%20%20%3Cnovo-label%3EEFFECTIVE%20END%20DATE%3C%2Fnovo-label%3E%0A%20%20%3Cnovo-date-picker-input%20%5B(ngModel)%5D%3D%22endDate%22%3E%3C%2Fnovo-date-picker-input%3E%0A%3C%2Fsection%3E%0A%0A%3Csection%3E%0A%20%20%3Csection%3E%0A%20%20%20%20%3Cnovo-label%3EEffective%20Start%20Date%20Value%3A%3C%2Fnovo-label%3E%0A%20%20%20%20%3Cdiv%3E%7B%7B%20startDate%20%7C%20json%20%7D%7D%3C%2Fdiv%3E%0A%20%20%3C%2Fsection%3E%0A%20%20%3Cbr%2F%3E%0A%20%20%3Csection%3E%0A%20%20%20%20%3Cnovo-label%3EEffective%20End%20Date%20Value%3A%3C%2Fnovo-label%3E%0A%20%20%20%20%3Cdiv%3E%7B%7B%20endDate%20%7C%20json%20%7D%7D%3C%2Fdiv%3E%0A%20%20%3C%2Fsection%3E%0A%3C%2Fsection%3E%0A%0A%3Csection%3E%0A%20%20%3Cnovo-date-picker%20%5Bstart%5D%3D%22startDate%22%20%5Bend%5D%3D%22endDate%22%20%5BdisabledDateMessage%5D%3D%22tooltip%22%3E%3C%2Fnovo-date-picker%3E%0A%0A%20%20%3Cbr%2F%3E%3Cbr%2F%3E%0A%20%20%3Cnovo-form%20%5Bform%5D%3D%22formGroup%22%3E%0A%20%20%20%20%3Cnovo-control-group%20key%3D%22horizontal%22%20%5BinitialValue%5D%3D%22initValue%22%20%5Bform%5D%3D%22formGroup%22%20%5Bcontrols%5D%3D%22controls%22%3E%3C%2Fnovo-control-group%3E%0A%20%20%3C%2Fnovo-form%3E%0A%0A%20%20%3Cbutton%20theme%3D%22primary%22%20(click)%3D%22updateInitialValue()%22%3EUpdate%20tooltip%3C%2Fbutton%3E%0A%3C%2Fsection%3E%0A`
    },
    'date-picker-input': {
        title: 'Date Picker Input Example',
        component: DatePickerInputExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Date%20Picker%20Input%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'date-picker-input-example'%2C%0A%20%20%20%20templateUrl%3A%20'date-picker-input-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'date-picker-input-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20DatePickerInputExample%20%7B%0A%20%20selected%3A%20Date%20%3D%20new%20Date()%3B%0A%7D%0A`,
        cssSource: `%3Ahost%20%7B%0A%20%20display%3A%20grid%3B%0A%20%20grid-template-columns%3A%201fr%201fr%201fr%3B%0A%20%20gap%3A%202rem%3B%0A%7D%0A`,
        htmlSource: `%3Cdiv%3E%0A%20%20%3Cnovo-date-picker-input%0A%20%20%20%20%5B(ngModel)%5D%3D%22selected%22%0A%20%20%20%20%5Bformat%5D%3D%22format.value%22%0A%20%20%20%20%5BweekStart%5D%3D%22weekStart.value%22%0A%20%20%20%20%5Bdisabled%5D%3D%22disabled.value%22%3E%0A%20%20%3C%2Fnovo-date-picker-input%3E%0A%3C%2Fdiv%3E%0A%0A%3Csection%3E%0A%20%20%3Cnovo-label%3ESelected%20Values%3A%3C%2Fnovo-label%3E%0A%20%20%3Cdiv%3E%7B%7Bselected%20%7C%20json%7D%7D%3C%2Fdiv%3E%0A%3C%2Fsection%3E%0A%0A%3Csection%3E%0A%20%20%3Cnovo-label%3EFormat%3C%2Fnovo-label%3E%0A%20%20%3Cnovo-radio-group%20%23format%20appearance%3D%22vertical%22%20value%3D%22ddd%20MMM%20DD%2C%20YYYY%22%3E%0A%20%20%20%20%3Cnovo-radio%20name%3D%22format%22%20value%3D%22MM-DD-YYYY%22%3EMM-DD-YYYY%3C%2Fnovo-radio%3E%0A%20%20%20%20%3Cnovo-radio%20name%3D%22format%22%20value%3D%22DD-MM-YYYY%22%3EDD-MM-YYYY%3C%2Fnovo-radio%3E%0A%20%20%20%20%3Cnovo-radio%20name%3D%22format%22%20value%3D%22MMM%20DD%2C%20YYYY%22%3EMMM%20DD%2C%20YYYY%3C%2Fnovo-radio%3E%0A%20%20%20%20%3Cnovo-radio%20name%3D%22format%22%20value%3D%22ddd%20MMM%20DD%2C%20YYYY%22%3Eddd%20MMM%20DD%2C%20YYYY%3C%2Fnovo-radio%3E%0A%20%20%3C%2Fnovo-radio-group%3E%0A%0A%20%20%3Cnovo-label%3EWeek%20Start%3C%2Fnovo-label%3E%0A%20%20%3Cnovo-radio-group%20%23weekStart%20appearance%3D%22vertical%22%20value%3D%220%22%3E%0A%20%20%20%20%3Cnovo-radio%20name%3D%22weekStart%22%20value%3D%220%22%3ESun%3C%2Fnovo-radio%3E%0A%20%20%20%20%3Cnovo-radio%20name%3D%22weekStart%22%20value%3D%221%22%3EMon%3C%2Fnovo-radio%3E%0A%20%20%3C%2Fnovo-radio-group%3E%0A%0A%20%20%3Cnovo-label%3EEnabled%3C%2Fnovo-label%3E%0A%20%20%3Cnovo-radio-group%20%23disabled%20appearance%3D%22vertical%22%20%5Bvalue%5D%3D%22false%22%3E%0A%20%20%20%20%3Cnovo-radio%20name%3D%22disabled%22%20%5Bvalue%5D%3D%22false%22%3EEnabled%3C%2Fnovo-radio%3E%0A%20%20%20%20%3Cnovo-radio%20name%3D%22disabled%22%20%5Bvalue%5D%3D%22true%22%3EDisabled%3C%2Fnovo-radio%3E%0A%20%20%3C%2Fnovo-radio-group%3E%0A%3C%2Fsection%3E`
    },
    'date-picker': {
        title: 'Date Example',
        component: DatePickerExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0Aimport%20%7B%20NovoLabelService%20%7D%20from%20'novo-elements'%3B%0A%0A%2F%2F%20%20Must%20add%20'ExtendedLabelService'%20to%20your%20module%20file%20and%0A%2F%2F%20%20include%20it%20in%20the%20constructor%20of%20your%20component%0Aexport%20class%20ExtendedLabelService%20extends%20NovoLabelService%20%7B%0A%20%20dateFormat%20%3D%20'dd%2Fmm%2Fyyyy'%3B%0A%20%20dateFormatPlaceholder%20%3D%20'DD%2FMM%2FYYYY'%3B%0A%7D%0A%0A%2F**%0A%20*%20%40title%20Date%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'date-picker-example'%2C%0A%20%20%20%20templateUrl%3A%20'date-picker-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'date-picker-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20DatePickerExample%20%7B%0A%20%20selectedDates%3A%20Date%20%3D%20new%20Date()%3B%0A%7D%0A`,
        cssSource: `%3Ahost%20%7B%0A%20%20display%3A%20grid%3B%0A%20%20grid-template-columns%3A%201fr%201fr%201fr%3B%0A%20%20gap%3A%202rem%3B%0A%7D%0A`,
        htmlSource: `%3Cnovo-date-picker%0A%20%20inline%3D%22true%22%0A%20%20%5B(ngModel)%5D%3D%22selectedDates%22%0A%20%20%5Bmode%5D%3D%22mode.value%22%0A%20%20%5BnumberOfMonths%5D%3D%22months.value%22%0A%20%20%5BweekStart%5D%3D%22weekStart.value%22%3E%0A%3C%2Fnovo-date-picker%3E%0A%0A%3Csection%3E%0A%20%20%3Cnovo-label%3ESelected%20Values%3A%3C%2Fnovo-label%3E%0A%20%20%3Cdiv%3E%7B%7BselectedDates%20%7C%20json%7D%7D%3C%2Fdiv%3E%0A%3C%2Fsection%3E%0A%0A%3Csection%3E%0A%20%20%3Cnovo-label%3ESelection%20mode%3C%2Fnovo-label%3E%0A%20%20%3Cnovo-radio-group%20%23mode%20appearance%3D%22vertical%22%20value%3D%22single%22%3E%0A%20%20%20%20%3Cnovo-radio%20name%3D%22mode%22%20value%3D%22single%22%3Esingle%3C%2Fnovo-radio%3E%0A%20%20%20%20%3Cnovo-radio%20name%3D%22mode%22%20value%3D%22multiple%22%3Emultiple%3C%2Fnovo-radio%3E%0A%20%20%20%20%3Cnovo-radio%20name%3D%22mode%22%20value%3D%22range%22%3Erange%3C%2Fnovo-radio%3E%0A%20%20%20%20%3Cnovo-radio%20name%3D%22mode%22%20value%3D%22week%22%3Eweek%3C%2Fnovo-radio%3E%0A%20%20%3C%2Fnovo-radio-group%3E%0A%0A%20%20%3Cnovo-label%3E%23%20of%20Months%3C%2Fnovo-label%3E%0A%20%20%3Cnovo-radio-group%20%23months%20appearance%3D%22vertical%22%20value%3D%221%22%3E%0A%20%20%20%20%3Cnovo-radio%20name%3D%22months%22%20value%3D%221%22%3E1%3C%2Fnovo-radio%3E%0A%20%20%20%20%3Cnovo-radio%20name%3D%22months%22%20value%3D%222%22%3E2%3C%2Fnovo-radio%3E%0A%20%20%3C%2Fnovo-radio-group%3E%0A%0A%20%20%3Cnovo-label%3EWeek%20Start%3C%2Fnovo-label%3E%0A%20%20%3Cnovo-radio-group%20%23weekStart%20appearance%3D%22vertical%22%20value%3D%220%22%3E%0A%20%20%20%20%3Cnovo-radio%20name%3D%22weekStart%22%20value%3D%220%22%3ESun%3C%2Fnovo-radio%3E%0A%20%20%20%20%3Cnovo-radio%20name%3D%22weekStart%22%20value%3D%221%22%3EMon%3C%2Fnovo-radio%3E%0A%20%20%3C%2Fnovo-radio-group%3E%0A%3C%2Fsection%3E%0A`
    },
    'color-picker': {
        title: 'Color Picker Example',
        component: ColorPickerExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Color%20Picker%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'color-picker-example'%2C%0A%20%20%20%20templateUrl%3A%20'color-picker-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'color-picker-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20ColorPickerExample%20%7B%0A%20%20hex%3A%20string%20%3D%20'%234A89DC'%3B%0A%20%20rgb%3A%20any%20%3D%20%7B%20r%3A%20218%2C%20g%3A%2066%2C%20b%3A%2083%20%7D%3B%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A.demo-side-by-side%20%7B%0A%20%20display%3A%20grid%3B%0A%20%20grid-template-columns%3A%201fr%201fr%3B%0A%7D%0A`,
        htmlSource: `%3Cdiv%20class%3D%22demo-side-by-side%22%3E%0A%20%20%3Cnovo-color-picker%20%5B(color)%5D%3D%22hex%22%3E%3C%2Fnovo-color-picker%3E%0A%20%20%3Cnovo-color-picker%20%5B(color)%5D%3D%22rgb%22%3E%3C%2Fnovo-color-picker%3E%0A%3C%2Fdiv%3E`
    },
    'color-input': {
        title: 'Color Input Example',
        component: ColorInputExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Color%20Input%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'color-input-example'%2C%0A%20%20%20%20templateUrl%3A%20'color-input-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'color-input-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20ColorInputExample%20%7B%0A%20%20hex%3A%20string%20%3D%20'%234A89DC'%3B%0A%20%20rgb%3A%20any%20%3D%20%7B%20r%3A%20218%2C%20g%3A%2066%2C%20b%3A%2083%20%7D%3B%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cnovo-color-input%20%5B(ngModel)%5D%3D%22hex%22%3E%0A%3C%2Fnovo-color-input%3E%0A%0A%3Cnovo-color-input%20%5B(ngModel)%5D%3D%22rgb%22%3E%0A%3C%2Fnovo-color-input%3E`
    },
    'minimal-editor': {
        title: 'Minimal Editor Example',
        component: MinimalEditorExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Minimal%20Editor%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'minimal-editor-example'%2C%0A%20%20%20%20templateUrl%3A%20'minimal-editor-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'minimal-editor-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20MinimalEditorExample%20%7B%0A%20%20public%20editorValue%3A%20string%20%3D%20'%3Cp%3EI%20AM%20A%20PRE-RENDERED%20VALUE%3C%2Fp%3E%3Ch1%3ETEST%3C%2Fh1%3E'%3B%0A%0A%20%20insertText(editor)%20%7B%0A%20%20%20%20editor.insertText('Hello%20World')%3B%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cnovo-editor%20%5Bname%5D%3D%22'demoEditor'%22%20%5B(ngModel)%5D%3D%22editorValue%22%20%5Bminimal%5D%3D%22true%22%20%23editor%3E%3C%2Fnovo-editor%3E%0A%0A%3Cbutton%20theme%3D%22primary%22%20(click)%3D%22insertText(editor)%22%3EInsert%20%22Hello%20World%22%20at%20Cursor%3C%2Fbutton%3E%0A%0A%3Cp%3EValue%3A%3C%2Fp%3E%0A%3Cp%20%5BinnerHtml%5D%3D%22editorValue%22%3E%3C%2Fp%3E%0A%0A%3Cp%3EHTML%3A%3C%2Fp%3E%0A%3Cpre%3E%3Ccode%3E%7B%7BeditorValue%7D%7D%3C%2Fcode%3E%3C%2Fpre%3E%0A`
    },
    'basic-editor': {
        title: 'Basic Editor Example',
        component: BasicEditorExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Basic%20Editor%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'basic-editor-example'%2C%0A%20%20%20%20templateUrl%3A%20'basic-editor-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'basic-editor-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20BasicEditorExample%20%7B%0A%20%20public%20editorValue%3A%20string%20%3D%20'%3Cp%3EI%20AM%20A%20PRE-RENDERED%20VALUE%3C%2Fp%3E%3Ch1%3ETEST%3C%2Fh1%3E'%3B%0A%0A%20%20insertText(editor)%20%7B%0A%20%20%20%20editor.insertText('Hello%20World')%3B%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cnovo-editor%20%5Bname%5D%3D%22'demoEditor'%22%20%5B(ngModel)%5D%3D%22editorValue%22%20%23editor%3E%3C%2Fnovo-editor%3E%0A%0A%3Cbutton%20theme%3D%22primary%22%20(click)%3D%22insertText(editor)%22%3EInsert%20%22Hello%20World%22%20at%20Cursor%3C%2Fbutton%3E%0A%0A%3Cp%3EValue%3A%3C%2Fp%3E%0A%3Cp%20%5BinnerHtml%5D%3D%22editorValue%22%3E%3C%2Fp%3E%0A%0A%3Cp%3EHTML%3A%3C%2Fp%3E%0A%3Cpre%3E%3Ccode%3E%7B%7BeditorValue%7D%7D%3C%2Fcode%3E%3C%2Fpre%3E%0A`
    },
    'row-chips': {
        title: 'Row Chips Example',
        component: RowChipsExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Row%20Chips%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'row-chips-example'%2C%0A%20%20%20%20templateUrl%3A%20'row-chips-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'row-chips-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20RowChipsExample%20%7B%0A%20%20public%20placeholder%3A%20string%20%3D%20'Select...'%3B%0A%20%20public%20value%3A%20any%3B%0A%20%20public%20rowDemo%3A%20any%3B%0A%20%20public%20rowValue%3A%20any%3B%0A%0A%20%20constructor()%20%7B%0A%20%20%20%20const%20collaborators%20%3D%20%5B%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20id%3A%201%2C%0A%20%20%20%20%20%20%20%20shiftDate%3A%20'2021-04-03'%2C%0A%20%20%20%20%20%20%20%20openings%3A%201%2C%0A%20%20%20%20%20%20%20%20closing%3A%20true%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20id%3A%202%2C%0A%20%20%20%20%20%20%20%20shiftDate%3A%20'2021-04-06'%2C%0A%20%20%20%20%20%20%20%20openings%3A%201%2C%0A%20%20%20%20%20%20%20%20closing%3A%20true%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20id%3A%203%2C%0A%20%20%20%20%20%20%20%20shiftDate%3A%20'2021-04-10'%2C%0A%20%20%20%20%20%20%20%20openings%3A%201%2C%0A%20%20%20%20%20%20%20%20closing%3A%20false%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20id%3A%204%2C%0A%20%20%20%20%20%20%20%20shiftDate%3A%20'2021-04-12'%2C%0A%20%20%20%20%20%20%20%20openings%3A%201%2C%0A%20%20%20%20%20%20%20%20closing%3A%20false%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%5D%3B%0A%20%20%20%20this.rowValue%20%3D%20%5B%5D%3B%0A%20%20%20%20this.rowDemo%20%3D%20%7B%0A%20%20%20%20%20%20format%3A%20'%24shiftDate'%2C%0A%20%20%20%20%20%20options%3A%20collaborators%2C%0A%20%20%20%20%20%20columns%3A%20%5B%0A%20%20%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20label%3A%20'Shift%20Date'%2C%0A%20%20%20%20%20%20%20%20%20%20data%3A%20(item%3A%20any)%3A%20string%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20item.label%3B%0A%20%20%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20label%3A%20'Openings'%2C%0A%20%20%20%20%20%20%20%20%20%20editable%3A%20true%2C%0A%20%20%20%20%20%20%20%20%20%20type%3A%20'number'%2C%0A%20%20%20%20%20%20%20%20%20%20width%3A%2080%2C%0A%20%20%20%20%20%20%20%20%20%20name%3A%20'openings'%2C%0A%20%20%20%20%20%20%20%20%20%20data%3A%20(item%3A%20any)%3A%20string%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20item.value.openings%3B%0A%20%20%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20label%3A%20'Closing%20shift%3F'%2C%0A%20%20%20%20%20%20%20%20%20%20editable%3A%20false%2C%0A%20%20%20%20%20%20%20%20%20%20type%3A%20'checkbox'%2C%0A%20%20%20%20%20%20%20%20%20%20width%3A%20260%2C%0A%20%20%20%20%20%20%20%20%20%20name%3A%20'closing'%2C%0A%20%20%20%20%20%20%20%20%20%20data%3A%20(item%3A%20any)%3A%20string%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20item.value.closing%3B%0A%20%20%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%5D%2C%0A%20%20%20%20%7D%3B%0A%20%20%7D%0A%0A%20%20onChanged(event)%20%7B%0A%20%20%20%20console.log('EVENT'%2C%20event)%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cnovo-row-chips%20%5Bsource%5D%3D%22rowDemo%22%20%5Bplaceholder%5D%3D%22placeholder%22%20%5B(ngModel)%5D%3D%22rowValue%22%20(changed)%3D%22onChanged(%24event)%22%3E%0A%3C%2Fnovo-row-chips%3E%0A%0A%3Cbr%20%2F%3E%0A%3Cdiv%20class%3D%22selected-value%22%3ESelected%20Value%3A%20%7B%7BrowValue%20%7C%20json%7D%7D%3C%2Fdiv%3E`
    },
    'hide-chips': {
        title: 'Hide Chips Example',
        component: HideChipsExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Hide%20Chips%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'hide-chips-example'%2C%0A%20%20%20%20templateUrl%3A%20'hide-chips-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'hide-chips-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20HideChipsExample%20%7B%0A%20%20public%20placeholder%3A%20string%20%3D%20'Select...'%3B%0A%20%20public%20value%3A%20any%3B%0A%20%20public%20hideDemo%3A%20any%3B%0A%20%20public%20model%3A%20any%3B%0A%0A%20%20constructor()%20%7B%0A%20%20%20%20const%20collaborators%20%3D%20%5B%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20id%3A%201%2C%0A%20%20%20%20%20%20%20%20firstName%3A%20'Brian'%2C%0A%20%20%20%20%20%20%20%20lastName%3A%20'Kimball'%2C%0A%20%20%20%20%20%20%20%20searchEntity%3A%20'candidate'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20id%3A%202%2C%0A%20%20%20%20%20%20%20%20firstName%3A%20'Josh'%2C%0A%20%20%20%20%20%20%20%20lastName%3A%20'Godi'%2C%0A%20%20%20%20%20%20%20%20searchEntity%3A%20'contact'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20id%3A%203%2C%0A%20%20%20%20%20%20%20%20firstName%3A%20'Alec'%2C%0A%20%20%20%20%20%20%20%20lastName%3A%20'Sibilia'%2C%0A%20%20%20%20%20%20%20%20searchEntity%3A%20'candidate'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20id%3A%204%2C%0A%20%20%20%20%20%20%20%20firstName%3A%20'Kameron'%2C%0A%20%20%20%20%20%20%20%20lastName%3A%20'Sween'%2C%0A%20%20%20%20%20%20%20%20searchEntity%3A%20'candidate'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20id%3A%205%2C%0A%20%20%20%20%20%20%20%20firstName%3A%20'Emily'%2C%0A%20%20%20%20%20%20%20%20lastName%3A%20'Jones'%2C%0A%20%20%20%20%20%20%20%20searchEntity%3A%20'candidate'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20id%3A%206%2C%0A%20%20%20%20%20%20%20%20firstName%3A%20'Michael'%2C%0A%20%20%20%20%20%20%20%20lastName%3A%20'Smith'%2C%0A%20%20%20%20%20%20%20%20searchEntity%3A%20'contact'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20id%3A%207%2C%0A%20%20%20%20%20%20%20%20firstName%3A%20'Sophia'%2C%0A%20%20%20%20%20%20%20%20lastName%3A%20'Johnson'%2C%0A%20%20%20%20%20%20%20%20searchEntity%3A%20'candidate'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20id%3A%208%2C%0A%20%20%20%20%20%20%20%20firstName%3A%20'Ethan'%2C%0A%20%20%20%20%20%20%20%20lastName%3A%20'Brown'%2C%0A%20%20%20%20%20%20%20%20searchEntity%3A%20'contact'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20id%3A%209%2C%0A%20%20%20%20%20%20%20%20firstName%3A%20'Isabella'%2C%0A%20%20%20%20%20%20%20%20lastName%3A%20'Williams'%2C%0A%20%20%20%20%20%20%20%20searchEntity%3A%20'candidate'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20id%3A%2010%2C%0A%20%20%20%20%20%20%20%20firstName%3A%20'Jacob'%2C%0A%20%20%20%20%20%20%20%20lastName%3A%20'Davis'%2C%0A%20%20%20%20%20%20%20%20searchEntity%3A%20'contact'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20id%3A%2011%2C%0A%20%20%20%20%20%20%20%20firstName%3A%20'Mia'%2C%0A%20%20%20%20%20%20%20%20lastName%3A%20'Miller'%2C%0A%20%20%20%20%20%20%20%20searchEntity%3A%20'candidate'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20id%3A%2012%2C%0A%20%20%20%20%20%20%20%20firstName%3A%20'Alexander'%2C%0A%20%20%20%20%20%20%20%20lastName%3A%20'Wilson'%2C%0A%20%20%20%20%20%20%20%20searchEntity%3A%20'contact'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20id%3A%2013%2C%0A%20%20%20%20%20%20%20%20firstName%3A%20'Charlotte'%2C%0A%20%20%20%20%20%20%20%20lastName%3A%20'Taylor'%2C%0A%20%20%20%20%20%20%20%20searchEntity%3A%20'candidate'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20id%3A%2014%2C%0A%20%20%20%20%20%20%20%20firstName%3A%20'William'%2C%0A%20%20%20%20%20%20%20%20lastName%3A%20'Anderson'%2C%0A%20%20%20%20%20%20%20%20searchEntity%3A%20'contact'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20id%3A%2015%2C%0A%20%20%20%20%20%20%20%20firstName%3A%20'Amelia'%2C%0A%20%20%20%20%20%20%20%20lastName%3A%20'Martinez'%2C%0A%20%20%20%20%20%20%20%20searchEntity%3A%20'candidate'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20id%3A%2016%2C%0A%20%20%20%20%20%20%20%20firstName%3A%20'Daniel'%2C%0A%20%20%20%20%20%20%20%20lastName%3A%20'Jackson'%2C%0A%20%20%20%20%20%20%20%20searchEntity%3A%20'contact'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%5D%3B%0A%20%20%20%20this.hideDemo%20%3D%20%7B%0A%20%20%20%20%20%20format%3A%20'%24firstName%20%24lastName'%2C%0A%20%20%20%20%20%20options%3A%20collaborators%2C%0A%20%20%20%20%20%20hiddenChipsLimit%3A%203%0A%20%20%20%20%7D%3B%0A%0A%20%20%20%20this.model%20%3D%20%5B%7B%0A%20%20%20%20%20%20id%3A%2012%2C%0A%20%20%20%20%20%20firstName%3A%20'Alexander'%2C%0A%20%20%20%20%20%20lastName%3A%20'Wilson'%2C%0A%20%20%20%20%20%20searchEntity%3A%20'contact'%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20id%3A%2013%2C%0A%20%20%20%20%20%20firstName%3A%20'Charlotte'%2C%0A%20%20%20%20%20%20lastName%3A%20'Taylor'%2C%0A%20%20%20%20%20%20searchEntity%3A%20'candidate'%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20id%3A%2014%2C%0A%20%20%20%20%20%20firstName%3A%20'William'%2C%0A%20%20%20%20%20%20lastName%3A%20'Anderson'%2C%0A%20%20%20%20%20%20searchEntity%3A%20'contact'%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20id%3A%2015%2C%0A%20%20%20%20%20%20firstName%3A%20'Amelia'%2C%0A%20%20%20%20%20%20lastName%3A%20'Martinez'%2C%0A%20%20%20%20%20%20searchEntity%3A%20'candidate'%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20id%3A%2016%2C%0A%20%20%20%20%20%20firstName%3A%20'Daniel'%2C%0A%20%20%20%20%20%20lastName%3A%20'Jackson'%2C%0A%20%20%20%20%20%20searchEntity%3A%20'contact'%2C%0A%20%20%20%20%7D%5D%3B%0A%20%20%7D%0A%0A%20%20onChanged(event)%20%7B%0A%20%20%20%20console.log('EVENT'%2C%20event)%3B%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cnovo-chips%20%5Bsource%5D%3D%22hideDemo%22%20%5Bplaceholder%5D%3D%22placeholder%22%20%5B(ngModel)%5D%3D%22model%22%20(changed)%3D%22onChanged(%24event)%22%3E%0A%3C%2Fnovo-chips%3E%0A`
    },
    'grouped-multi-picker': {
        title: 'Grouped Multi Picker Example',
        component: GroupedMultiPickerExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0Aimport%20%7B%20GroupedMultiPickerResults%20%7D%20from%20'novo-elements'%3B%0A%0A%2F**%0A%20*%20%40title%20Grouped%20Multi%20Picker%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'grouped-multi-picker-example'%2C%0A%20%20%20%20templateUrl%3A%20'grouped-multi-picker-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'grouped-multi-picker-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20GroupedMultiPickerExample%20%7B%0A%20%20public%20placeholder%3A%20string%20%3D%20'Select...'%3B%0A%20%20public%20groupedMultiPicker1%3A%20any%3B%0A%20%20public%20groupedMultiPicker2%3A%20any%3B%0A%20%20public%20groupedMultiPicker3%3A%20any%3B%0A%20%20public%20groupedMultiPicker1Value%3A%20any%3B%0A%20%20public%20groupedMultiPicker2Value%3A%20any%3B%0A%20%20public%20groupedMultiPicker3Value%3A%20any%3B%0A%0A%20%20constructor()%20%7B%0A%20%20%20%20this.setupGroupedMultiPickerDemo()%3B%0A%20%20%7D%0A%0A%20%20setupGroupedMultiPickerDemo()%20%7B%0A%20%20%20%20const%20categoryMap%20%3D%20new%20Map%3Cstring%2C%20%7B%20value%3A%20string%3B%20label%3A%20string%3B%20items%3A%20%7B%20value%3A%20string%3B%20label%3A%20string%20%7D%5B%5D%20%7D%3E()%3B%0A%20%20%20%20for%20(let%20i%20%3D%200%3B%20i%20%3C%2010%3B%20i%2B%2B)%20%7B%0A%20%20%20%20%20%20const%20items%20%3D%20%5B%5D%3B%0A%20%20%20%20%20%20for%20(let%20j%20%3D%200%3B%20j%20%3C%2010%3B%20j%2B%2B)%20%7B%0A%20%20%20%20%20%20%20%20items.push(%7B%20value%3A%20%60%24%7Bi%7D-%24%7Bj%7D%60%2C%20label%3A%20%60Category%20%24%7Bi%7D%20-%20Item%20%24%7Bj%7D%60%20%7D)%3B%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20categoryMap.set(%60%24%7Bi%7D%60%2C%20%7B%20value%3A%20%60%24%7Bi%7D%60%2C%20label%3A%20%60Category%20%24%7Bi%7D%60%2C%20items%20%7D)%3B%0A%20%20%20%20%7D%0A%20%20%20%20this.groupedMultiPicker1%20%3D%20%7B%0A%20%20%20%20%20%20categoryMap%2C%0A%20%20%20%20%20%20resultsTemplate%3A%20GroupedMultiPickerResults%2C%0A%20%20%20%20%20%20displayAll%3A%20true%2C%0A%20%20%20%20%7D%3B%0A%20%20%20%20this.groupedMultiPicker2%20%3D%20%7B%0A%20%20%20%20%20%20categoryMap%2C%0A%20%20%20%20%20%20resultsTemplate%3A%20GroupedMultiPickerResults%2C%0A%20%20%20%20%7D%3B%0A%20%20%20%20this.groupedMultiPicker3%20%3D%20%7B%0A%20%20%20%20%20%20categories%3A%20%5B%0A%20%20%20%20%20%20%20%20%7B%20value%3A%20'C1'%2C%20label%3A%20'Category%201'%20%7D%2C%0A%20%20%20%20%20%20%20%20%7B%20value%3A%20'C2'%2C%20label%3A%20'Category%202'%20%7D%2C%0A%20%20%20%20%20%20%20%20%7B%20value%3A%20'C3'%2C%20label%3A%20'Category%203'%20%7D%2C%0A%20%20%20%20%20%20%20%20%7B%20value%3A%20'C4'%2C%20label%3A%20'Category%204'%20%7D%2C%0A%20%20%20%20%20%20%20%20%7B%20value%3A%20'C5'%2C%20label%3A%20'Category%205'%20%7D%2C%0A%20%20%20%20%20%20%5D%2C%0A%20%20%20%20%20%20getItemsForCategoryAsync%3A%20(category)%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20return%20new%20Promise((resolve)%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%20%20setTimeout(()%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20resolve(%5B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7B%20value%3A%20'A1'%2C%20label%3A%20'Async%201'%20%7D%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7B%20value%3A%20'A2'%2C%20label%3A%20'Async%202'%20%7D%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7B%20value%3A%20'A3'%2C%20label%3A%20'Async%203'%20%7D%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7B%20value%3A%20'A4'%2C%20label%3A%20'Async%204'%20%7D%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7B%20value%3A%20'A5'%2C%20label%3A%20'Async%205'%20%7D%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%5D)%3B%0A%20%20%20%20%20%20%20%20%20%20%7D%2C%201000)%3B%0A%20%20%20%20%20%20%20%20%7D)%3B%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20resultsTemplate%3A%20GroupedMultiPickerResults%2C%0A%20%20%20%20%7D%3B%0A%20%20%7D%0A%0A%20%20onChanged(event)%20%7B%0A%20%20%20%20console.log('EVENT'%2C%20event)%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Ch6%3EBasic%20Static%20Example%3C%2Fh6%3E%0A%3Cp%3EFully%20static%20data%2C%20optional%20%22all%22%20category%3C%2Fp%3E%0A%3Cdiv%20class%3D%22selected-value%22%3ESelected%20Value%3A%20%7B%7B%20groupedMultiPicker1Value%20%7D%7D%3C%2Fdiv%3E%0A%3Cnovo-chips%20%5Bsource%5D%3D%22groupedMultiPicker1%22%20%5Bplaceholder%5D%3D%22placeholder%22%20%5B(ngModel)%5D%3D%22groupedMultiPicker1Value%22%20(changed)%3D%22onChanged(%24event)%22%3E%3C%2Fnovo-chips%3E%0A%0A%3Cbr%2F%3E%0A%3Cbr%2F%3E%0A%0A%3Ch6%3ECustom%20Static%20Example%3C%2Fh6%3E%0A%3Cp%3EFully%20static%20data%2C%20all%20category%20turned%20off%3C%2Fp%3E%0A%3Cdiv%20class%3D%22selected-value%22%3ESelected%20Value%3A%20%7B%7B%20groupedMultiPicker2Value%20%7D%7D%3C%2Fdiv%3E%0A%3Cnovo-chips%20%5Bsource%5D%3D%22groupedMultiPicker2%22%20%5Bplaceholder%5D%3D%22placeholder%22%20%5B(ngModel)%5D%3D%22groupedMultiPicker2Value%22%20(changed)%3D%22onChanged(%24event)%22%3E%3C%2Fnovo-chips%3E%0A%0A%3Cbr%2F%3E%0A%3Cbr%2F%3E%0A%0A%3Ch6%3EBasic%20Async%20Example%3C%2Fh6%3E%0A%3Cp%3ECategory%20list%20is%20static%20(always%20has%20to%20be)%20with%20the%20items%20fetched%20via%20async%20call%3C%2Fp%3E%0A%3Cdiv%20class%3D%22selected-value%22%3ESelected%20Value%3A%20%7B%7B%20groupedMultiPicker3Value%20%7D%7D%3C%2Fdiv%3E%0A%3Cnovo-chips%20%5Bsource%5D%3D%22groupedMultiPicker3%22%20%5Bplaceholder%5D%3D%22placeholder%22%20%5B(ngModel)%5D%3D%22groupedMultiPicker3Value%22%20(changed)%3D%22onChanged(%24event)%22%3E%3C%2Fnovo-chips%3E%0A`
    },
    'formatted-chips': {
        title: 'Formatted Chips Example',
        component: FormattedChipsExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Formatted%20Chips%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'formatted-chips-example'%2C%0A%20%20%20%20templateUrl%3A%20'formatted-chips-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'formatted-chips-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20FormattedChipsExample%20%7B%0A%20%20public%20formatted%3A%20any%3B%0A%20%20public%20placeholder%3A%20string%20%3D%20'Select...'%3B%0A%20%20public%20value%3A%20any%3B%0A%0A%20%20constructor()%20%7B%0A%20%20%20%20const%20collaborators%20%3D%20%5B%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20id%3A%201%2C%0A%20%20%20%20%20%20%20%20firstName%3A%20'Brian'%2C%0A%20%20%20%20%20%20%20%20lastName%3A%20'Kimball'%2C%0A%20%20%20%20%20%20%20%20searchEntity%3A%20'candidate'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20id%3A%202%2C%0A%20%20%20%20%20%20%20%20firstName%3A%20'Josh'%2C%0A%20%20%20%20%20%20%20%20lastName%3A%20'Godi'%2C%0A%20%20%20%20%20%20%20%20searchEntity%3A%20'contact'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20id%3A%203%2C%0A%20%20%20%20%20%20%20%20firstName%3A%20'Alec'%2C%0A%20%20%20%20%20%20%20%20lastName%3A%20'Sibilia'%2C%0A%20%20%20%20%20%20%20%20searchEntity%3A%20'candidate'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20id%3A%204%2C%0A%20%20%20%20%20%20%20%20firstName%3A%20'Kameron'%2C%0A%20%20%20%20%20%20%20%20lastName%3A%20'Sween'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%5D%3B%0A%20%20%20%20this.formatted%20%3D%20%7B%0A%20%20%20%20%20%20format%3A%20'%24firstName%20%24lastName'%2C%0A%20%20%20%20%20%20options%3A%20collaborators%2C%0A%20%20%20%20%7D%3B%0A%20%20%7D%0A%0A%20%20onChanged(event)%20%7B%0A%20%20%20%20console.log('EVENT'%2C%20event)%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cdiv%20class%3D%22selected-value%22%3ESelected%20Value%3A%20%7B%7Bvalue%7D%7D%3C%2Fdiv%3E%0A%3Cnovo-chips%20%5Bsource%5D%3D%22formatted%22%20%5Bplaceholder%5D%3D%22placeholder%22%20%5B(ngModel)%5D%3D%22value%22%20(changed)%3D%22onChanged(%24event)%22%3E%3C%2Fnovo-chips%3E%0A`
    },
    'custom-values': {
        title: 'Basic Chips Example',
        component: CustomValuesExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Basic%20Chips%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'custom-values-example'%2C%0A%20%20%20%20templateUrl%3A%20'custom-values-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'custom-values-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20CustomValuesExample%20%7B%0A%20%20staticDemo%20%3D%20%7B%0A%20%20%20%20options%3A%20%5B%0A%20%20%20%20%20%20'Alabama'%2C%0A%20%20%20%20%20%20'Alaska'%2C%0A%20%20%20%20%20%20'Arizona'%2C%0A%20%20%20%20%20%20'Arkansas'%2C%0A%20%20%20%20%20%20'California'%2C%0A%20%20%20%20%20%20'Colorado'%2C%0A%20%20%20%20%20%20'Connecticut'%2C%0A%20%20%20%20%20%20'Delaware'%2C%0A%20%20%20%20%20%20'Florida'%2C%0A%20%20%20%20%20%20'Georgia'%2C%0A%20%20%20%20%20%20'Hawaii'%2C%0A%20%20%20%20%20%20'Idaho'%2C%0A%20%20%20%20%20%20'Illinois'%2C%0A%20%20%20%20%20%20'Indiana'%2C%0A%20%20%20%20%20%20'Iowa'%2C%0A%20%20%20%20%20%20'Kansas'%2C%0A%20%20%20%20%20%20'Kentucky'%2C%0A%20%20%20%20%20%20'Louisiana'%2C%0A%20%20%20%20%20%20'Maine'%2C%0A%20%20%20%20%20%20'Maryland'%2C%0A%20%20%20%20%20%20'Massachusetts'%2C%0A%20%20%20%20%20%20'Michigan'%2C%0A%20%20%20%20%20%20'Minnesota'%2C%0A%20%20%20%20%20%20'Mississippi'%2C%0A%20%20%20%20%20%20'Missouri'%2C%0A%20%20%20%20%20%20'Montana'%2C%0A%20%20%20%20%20%20'Nebraska'%2C%0A%20%20%20%20%20%20'Nevada'%2C%0A%20%20%20%20%20%20'New%20Hampshire'%2C%0A%20%20%20%20%20%20'New%20Jersey'%2C%0A%20%20%20%20%20%20'New%20Mexico'%2C%0A%20%20%20%20%20%20'New%20York'%2C%0A%20%20%20%20%20%20'North%20Dakota'%2C%0A%20%20%20%20%20%20'North%20Carolina'%2C%0A%20%20%20%20%20%20'Ohio'%2C%0A%20%20%20%20%20%20'Oklahoma'%2C%0A%20%20%20%20%20%20'Oregon'%2C%0A%20%20%20%20%20%20'Pennsylvania'%2C%0A%20%20%20%20%20%20'Rhode%20Island'%2C%0A%20%20%20%20%20%20'South%20Carolina'%2C%0A%20%20%20%20%20%20'South%20Dakota'%2C%0A%20%20%20%20%20%20'Tennessee'%2C%0A%20%20%20%20%20%20'Texas'%2C%0A%20%20%20%20%20%20'Utah'%2C%0A%20%20%20%20%20%20'Vermont'%2C%0A%20%20%20%20%20%20'Virginia'%2C%0A%20%20%20%20%20%20'Washington'%2C%0A%20%20%20%20%20%20'West%20Virginia'%2C%0A%20%20%20%20%20%20'Wisconsin'%2C%0A%20%20%20%20%20%20'Wyoming'%2C%0A%20%20%20%20%5D%2C%0A%20%20%7D%3B%0A%20%20placeholder%20%3D%20'Type%20and%20press%20enter...'%3B%0A%20%20value%20%3D%20%5B%5D%3B%0A%0A%20%20onChanged(event)%20%7B%0A%20%20%20%20console.log('EVENT'%2C%20event)%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cdiv%20class%3D%22selected-value%22%3ESelected%20Value%3A%20%7B%7B%20value%20%7D%7D%3C%2Fdiv%3E%0A%3Cnovo-chips%20%5Bsource%5D%3D%22staticDemo%22%20%5Bplaceholder%5D%3D%22placeholder%22%20%5B(ngModel)%5D%3D%22value%22%20(changed)%3D%22onChanged(%24event)%22%20%5BallowCustomValues%5D%3D%22true%22%3E%3C%2Fnovo-chips%3E%0A`
    },
    'close-on-select-chips': {
        title: 'Close On Select Chips Example',
        component: CloseOnSelectChipsExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Close%20On%20Select%20Chips%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'close-on-select-chips-example'%2C%0A%20%20%20%20templateUrl%3A%20'close-on-select-chips-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'close-on-select-chips-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20CloseOnSelectChipsExample%20%7B%0A%20%20public%20formatted%3A%20any%3B%0A%20%20public%20placeholder%3A%20string%20%3D%20'Select...'%3B%0A%20%20public%20value%3A%20any%3B%0A%0A%20%20constructor()%20%7B%0A%20%20%20%20const%20collaborators%20%3D%20%5B%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20id%3A%201%2C%0A%20%20%20%20%20%20%20%20firstName%3A%20'Brian'%2C%0A%20%20%20%20%20%20%20%20lastName%3A%20'Kimball'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20id%3A%202%2C%0A%20%20%20%20%20%20%20%20firstName%3A%20'Josh'%2C%0A%20%20%20%20%20%20%20%20lastName%3A%20'Godi'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20id%3A%203%2C%0A%20%20%20%20%20%20%20%20firstName%3A%20'Alec'%2C%0A%20%20%20%20%20%20%20%20lastName%3A%20'Sibilia'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20id%3A%204%2C%0A%20%20%20%20%20%20%20%20firstName%3A%20'Kameron'%2C%0A%20%20%20%20%20%20%20%20lastName%3A%20'Sween'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%5D%3B%0A%20%20%20%20this.formatted%20%3D%20%7B%0A%20%20%20%20%20%20format%3A%20'%24firstName%20%24lastName'%2C%0A%20%20%20%20%20%20options%3A%20collaborators%2C%0A%20%20%20%20%7D%3B%0A%20%20%7D%0A%0A%20%20onChanged(event)%20%7B%0A%20%20%20%20console.log('EVENT'%2C%20event)%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cdiv%20class%3D%22selected-value%22%3ESelected%20Value%3A%20%7B%7Bvalue%7D%7D%3C%2Fdiv%3E%0A%3Cnovo-chips%20%5BcloseOnSelect%5D%3D%22true%22%20%5Bsource%5D%3D%22formatted%22%20%5Bplaceholder%5D%3D%22placeholder%22%20%5B(ngModel)%5D%3D%22value%22%20(changed)%3D%22onChanged(%24event)%22%3E%3C%2Fnovo-chips%3E%0A`
    },
    'chip-usage': {
        title: 'Chip Usage Example',
        component: ChipUsageExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Chip%20Usage%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'chip-usage-example'%2C%0A%20%20%20%20templateUrl%3A%20'chip-usage-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'chip-usage-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20ChipUsageExample%20%7B%7D%0A`,
        cssSource: `%3Ahost%20%7B%0A%20%20display%3A%20grid%3B%0A%20%20grid-template-columns%3A%201fr%201fr%3B%0A%20%20gap%3A%202rem%3B%0A%7D%0A`,
        htmlSource: `%3Cnovo-stack%20gap%3D%22md%22%3E%0A%20%20%3Cnovo-row%20gap%3D%22md%22%3E%0A%20%20%20%20%3Cnovo-chip%20%5Bsize%5D%3D%22size.value%22%3EStandard%3C%2Fnovo-chip%3E%0A%20%20%20%20%3Cnovo-chip%20%5Bsize%5D%3D%22size.value%22%3E%0A%20%20%20%20%20%20%3Cnovo-icon%3Ebell%3C%2Fnovo-icon%3E%0A%20%20%20%20%3C%2Fnovo-chip%3E%0A%20%20%20%20%3Cnovo-chip%20%5Bsize%5D%3D%22size.value%22%3E%0A%20%20%20%20%20%20%3Cnovo-text%3ERemovable%3C%2Fnovo-text%3E%0A%20%20%20%20%20%20%3Cnovo-icon%20novoChipRemove%3Ex%3C%2Fnovo-icon%3E%0A%20%20%20%20%3C%2Fnovo-chip%3E%0A%20%20%20%20%3Cnovo-chip%20%5Bsize%5D%3D%22size.value%22%20disabled%3E%0A%20%20%20%20%20%20%3Cnovo-icon%3Ecandidate%3C%2Fnovo-icon%3E%0A%20%20%20%20%20%20%3Cnovo-text%3EDisabled%3C%2Fnovo-text%3E%0A%20%20%20%20%3C%2Fnovo-chip%3E%0A%20%20%3C%2Fnovo-row%3E%0A%20%20%3Cnovo-row%20gap%3D%22md%22%3E%0A%20%20%20%20%3Cnovo-chip%20color%3D%22success%22%20%5Bsize%5D%3D%22size.value%22%3EStandard%3C%2Fnovo-chip%3E%0A%20%20%20%20%3Cnovo-chip%20color%3D%22negative%22%20%5Bsize%5D%3D%22size.value%22%3E%0A%20%20%20%20%20%20%3Cnovo-icon%3Ebell%3C%2Fnovo-icon%3E%0A%20%20%20%20%3C%2Fnovo-chip%3E%0A%20%20%20%20%3Cnovo-chip%20color%3D%22ocean%22%20%5Bsize%5D%3D%22size.value%22%3E%0A%20%20%20%20%20%20%3Cnovo-text%3ERemovable%3C%2Fnovo-text%3E%0A%20%20%20%20%20%20%3Cnovo-icon%20novoChipRemove%3Ex%3C%2Fnovo-icon%3E%0A%20%20%20%20%3C%2Fnovo-chip%3E%0A%20%20%20%20%3Cnovo-chip%20color%3D%22candidate%22%20%5Bsize%5D%3D%22size.value%22%20disabled%3E%0A%20%20%20%20%20%20%3Cnovo-icon%3Ecandidate%3C%2Fnovo-icon%3E%0A%20%20%20%20%20%20%3Cnovo-text%3EDisabled%3C%2Fnovo-text%3E%0A%20%20%20%20%3C%2Fnovo-chip%3E%0A%20%20%3C%2Fnovo-row%3E%0A%20%20%3Cnovo-row%20gap%3D%22md%22%3E%0A%20%20%20%20%3Cnovo-chip%20accent%3D%22success%22%20%5Bsize%5D%3D%22size.value%22%3EStandard%3C%2Fnovo-chip%3E%0A%20%20%20%20%3Cnovo-chip%20accent%3D%22negative%22%20%5Bsize%5D%3D%22size.value%22%3E%0A%20%20%20%20%20%20%3Cnovo-icon%3Ebell%3C%2Fnovo-icon%3E%0A%20%20%20%20%3C%2Fnovo-chip%3E%0A%20%20%20%20%3Cnovo-chip%20accent%3D%22ocean%22%20%5Bsize%5D%3D%22size.value%22%3E%0A%20%20%20%20%20%20%3Cnovo-text%3ERemovable%3C%2Fnovo-text%3E%0A%20%20%20%20%20%20%3Cnovo-icon%20novoChipRemove%3Ex%3C%2Fnovo-icon%3E%0A%20%20%20%20%3C%2Fnovo-chip%3E%0A%20%20%20%20%3Cnovo-chip%20accent%3D%22candidate%22%20%5Bsize%5D%3D%22size.value%22%20disabled%3E%0A%20%20%20%20%20%20%3Cnovo-icon%3Ecandidate%3C%2Fnovo-icon%3E%0A%20%20%20%20%20%20%3Cnovo-text%3EDisabled%3C%2Fnovo-text%3E%0A%20%20%20%20%3C%2Fnovo-chip%3E%0A%20%20%3C%2Fnovo-row%3E%0A%0A%3C%2Fnovo-stack%3E%0A%0A%3Csection%3E%0A%20%20%3Cnovo-label%3ESize%3C%2Fnovo-label%3E%0A%20%20%3Cnovo-radio-group%20%23size%20appearance%3D%22vertical%22%20value%3D%22md%22%3E%0A%20%20%20%20%3Cnovo-radio%20name%3D%22size%22%20value%3D%22xs%22%3Exs%3C%2Fnovo-radio%3E%0A%20%20%20%20%3Cnovo-radio%20name%3D%22size%22%20value%3D%22sm%22%3Esm%3C%2Fnovo-radio%3E%0A%20%20%20%20%3Cnovo-radio%20name%3D%22size%22%20value%3D%22md%22%3Emd%3C%2Fnovo-radio%3E%0A%20%20%20%20%3Cnovo-radio%20name%3D%22size%22%20value%3D%22lg%22%3Elg%3C%2Fnovo-radio%3E%0A%20%20%20%20%3Cnovo-radio%20name%3D%22size%22%20value%3D%22xl%22%3Exl%3C%2Fnovo-radio%3E%0A%20%20%3C%2Fnovo-radio-group%3E%0A%0A%0A%0A%3C%2Fsection%3E`
    },
    'basic-chips': {
        title: 'Basic Chips Example',
        component: BasicChipsExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Basic%20Chips%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'basic-chips-example'%2C%0A%20%20%20%20templateUrl%3A%20'basic-chips-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'basic-chips-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20BasicChipsExample%20%7B%0A%20%20staticDemo%20%3D%20%7B%0A%20%20%20%20options%3A%20%5B%0A%20%20%20%20%20%20'Alabama'%2C%0A%20%20%20%20%20%20'Alaska'%2C%0A%20%20%20%20%20%20'Arizona'%2C%0A%20%20%20%20%20%20'Arkansas'%2C%0A%20%20%20%20%20%20'California'%2C%0A%20%20%20%20%20%20'Colorado'%2C%0A%20%20%20%20%20%20'Connecticut'%2C%0A%20%20%20%20%20%20'Delaware'%2C%0A%20%20%20%20%20%20'Florida'%2C%0A%20%20%20%20%20%20'Georgia'%2C%0A%20%20%20%20%20%20'Hawaii'%2C%0A%20%20%20%20%20%20'Idaho'%2C%0A%20%20%20%20%20%20'Illinois'%2C%0A%20%20%20%20%20%20'Indiana'%2C%0A%20%20%20%20%20%20'Iowa'%2C%0A%20%20%20%20%20%20'Kansas'%2C%0A%20%20%20%20%20%20'Kentucky'%2C%0A%20%20%20%20%20%20'Louisiana'%2C%0A%20%20%20%20%20%20'Maine'%2C%0A%20%20%20%20%20%20'Maryland'%2C%0A%20%20%20%20%20%20'Massachusetts'%2C%0A%20%20%20%20%20%20'Michigan'%2C%0A%20%20%20%20%20%20'Minnesota'%2C%0A%20%20%20%20%20%20'Mississippi'%2C%0A%20%20%20%20%20%20'Missouri'%2C%0A%20%20%20%20%20%20'Montana'%2C%0A%20%20%20%20%20%20'Nebraska'%2C%0A%20%20%20%20%20%20'Nevada'%2C%0A%20%20%20%20%20%20'New%20Hampshire'%2C%0A%20%20%20%20%20%20'New%20Jersey'%2C%0A%20%20%20%20%20%20'New%20Mexico'%2C%0A%20%20%20%20%20%20'New%20York'%2C%0A%20%20%20%20%20%20'North%20Dakota'%2C%0A%20%20%20%20%20%20'North%20Carolina'%2C%0A%20%20%20%20%20%20'Ohio'%2C%0A%20%20%20%20%20%20'Oklahoma'%2C%0A%20%20%20%20%20%20'Oregon'%2C%0A%20%20%20%20%20%20'Pennsylvania'%2C%0A%20%20%20%20%20%20'Rhode%20Island'%2C%0A%20%20%20%20%20%20'South%20Carolina'%2C%0A%20%20%20%20%20%20'South%20Dakota'%2C%0A%20%20%20%20%20%20'Tennessee'%2C%0A%20%20%20%20%20%20'Texas'%2C%0A%20%20%20%20%20%20'Utah'%2C%0A%20%20%20%20%20%20'Vermont'%2C%0A%20%20%20%20%20%20'Virginia'%2C%0A%20%20%20%20%20%20'Washington'%2C%0A%20%20%20%20%20%20'West%20Virginia'%2C%0A%20%20%20%20%20%20'Wisconsin'%2C%0A%20%20%20%20%20%20'Wyoming'%2C%0A%20%20%20%20%5D%2C%0A%20%20%7D%3B%0A%20%20placeholder%20%3D%20'Select...'%3B%0A%20%20value%20%3D%20%5B'Alabama'%5D%3B%0A%0A%20%20onChanged(event)%20%7B%0A%20%20%20%20console.log('EVENT'%2C%20event)%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cdiv%20class%3D%22selected-value%22%3ESelected%20Value%3A%20%7B%7Bvalue%7D%7D%3C%2Fdiv%3E%0A%3Cnovo-chips%20%5Bsource%5D%3D%22staticDemo%22%20%5Bplaceholder%5D%3D%22placeholder%22%20%5B(ngModel)%5D%3D%22value%22%20(changed)%3D%22onChanged(%24event)%22%3E%3C%2Fnovo-chips%3E%0A`
    },
    'async-chips': {
        title: 'Async Chips Example',
        component: AsyncChipsExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Async%20Chips%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'async-chips-example'%2C%0A%20%20%20%20templateUrl%3A%20'async-chips-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'async-chips-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20AsyncChipsExample%20%7B%0A%20%20public%20async%3A%20any%3B%0A%20%20public%20value%3A%20any%3B%0A%20%20public%20placeholder%3A%20string%20%3D%20'Select...'%3B%0A%0A%20%20constructor()%20%7B%0A%20%20%20%20const%20states%20%3D%20%5B%0A%20%20%20%20%20%20'Alabama'%2C%0A%20%20%20%20%20%20'Alaska'%2C%0A%20%20%20%20%20%20'Arizona'%2C%0A%20%20%20%20%20%20'Arkansas'%2C%0A%20%20%20%20%20%20'California'%2C%0A%20%20%20%20%20%20'Colorado'%2C%0A%20%20%20%20%20%20'Connecticut'%2C%0A%20%20%20%20%20%20'Delaware'%2C%0A%20%20%20%20%20%20'Florida'%2C%0A%20%20%20%20%20%20'Georgia'%2C%0A%20%20%20%20%20%20'Hawaii'%2C%0A%20%20%20%20%20%20'Idaho'%2C%0A%20%20%20%20%20%20'Illinois'%2C%0A%20%20%20%20%20%20'Indiana'%2C%0A%20%20%20%20%20%20'Iowa'%2C%0A%20%20%20%20%20%20'Kansas'%2C%0A%20%20%20%20%20%20'Kentucky'%2C%0A%20%20%20%20%20%20'Louisiana'%2C%0A%20%20%20%20%20%20'Maine'%2C%0A%20%20%20%20%20%20'Maryland'%2C%0A%20%20%20%20%20%20'Massachusetts'%2C%0A%20%20%20%20%20%20'Michigan'%2C%0A%20%20%20%20%20%20'Minnesota'%2C%0A%20%20%20%20%20%20'Mississippi'%2C%0A%20%20%20%20%20%20'Missouri'%2C%0A%20%20%20%20%20%20'Montana'%2C%0A%20%20%20%20%20%20'Nebraska'%2C%0A%20%20%20%20%20%20'Nevada'%2C%0A%20%20%20%20%20%20'New%20Hampshire'%2C%0A%20%20%20%20%20%20'New%20Jersey'%2C%0A%20%20%20%20%20%20'New%20Mexico'%2C%0A%20%20%20%20%20%20'New%20York'%2C%0A%20%20%20%20%20%20'North%20Dakota'%2C%0A%20%20%20%20%20%20'North%20Carolina'%2C%0A%20%20%20%20%20%20'Ohio'%2C%0A%20%20%20%20%20%20'Oklahoma'%2C%0A%20%20%20%20%20%20'Oregon'%2C%0A%20%20%20%20%20%20'Pennsylvania'%2C%0A%20%20%20%20%20%20'Rhode%20Island'%2C%0A%20%20%20%20%20%20'South%20Carolina'%2C%0A%20%20%20%20%20%20'South%20Dakota'%2C%0A%20%20%20%20%20%20'Tennessee'%2C%0A%20%20%20%20%20%20'Texas'%2C%0A%20%20%20%20%20%20'Utah'%2C%0A%20%20%20%20%20%20'Vermont'%2C%0A%20%20%20%20%20%20'Virginia'%2C%0A%20%20%20%20%20%20'Washington'%2C%0A%20%20%20%20%20%20'West%20Virginia'%2C%0A%20%20%20%20%20%20'Wisconsin'%2C%0A%20%20%20%20%20%20'Wyoming'%2C%0A%20%20%20%20%5D%3B%0A%20%20%20%20const%20abbrieviated%20%3D%20%5B%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20value%3A%20'USA'%2C%0A%20%20%20%20%20%20%20%20label%3A%20'United%20States'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20value%3A%20'GB'%2C%0A%20%20%20%20%20%20%20%20label%3A%20'Great%20Britain'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20value%3A%20'CA'%2C%0A%20%20%20%20%20%20%20%20label%3A%20'Canada'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20value%3A%20'AU'%2C%0A%20%20%20%20%20%20%20%20label%3A%20'Austrailia'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%5D%3B%0A%20%20%20%20this.async%20%3D%20%7B%0A%20%20%20%20%20%20options%3A%20()%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20return%20new%20Promise((resolve)%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%20%20setTimeout(()%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20resolve(abbrieviated)%3B%0A%20%20%20%20%20%20%20%20%20%20%7D%2C%20300)%3B%0A%20%20%20%20%20%20%20%20%7D)%3B%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20getLabels%3A%20(data)%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20return%20new%20Promise((resolve)%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%20%20setTimeout(()%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20const%20values%20%3D%20data.map((item)%20%3D%3E%20item.value)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20const%20results%20%3D%20abbrieviated.filter((item)%20%3D%3E%20values.includes(item.value))%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20resolve(results)%3B%0A%20%20%20%20%20%20%20%20%20%20%7D%2C%20300)%3B%0A%20%20%20%20%20%20%20%20%7D)%3B%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%7D%3B%0A%20%20%20%20this.value%20%3D%20%5B%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20value%3A%20'USA'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20value%3A%20'GB'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%5D%3B%0A%20%20%7D%0A%0A%20%20onChanged(event)%20%7B%0A%20%20%20%20console.log('EVENT'%2C%20event)%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cdiv%20class%3D%22selected-value%22%3ESelected%20Value%3A%20%7B%7Bvalue%7D%7D%3C%2Fdiv%3E%0A%3Cnovo-chips%20%5Bsource%5D%3D%22async%22%20%5Bplaceholder%5D%3D%22placeholder%22%20%5B(ngModel)%5D%3D%22value%22%20(changed)%3D%22onChanged(%24event)%22%3E%3C%2Fnovo-chips%3E%0A`
    },
    'checkbox-list': {
        title: 'Checkbox List Usage',
        component: CheckboxListExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Checkbox%20List%20Usage%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'checkbox-list-example'%2C%0A%20%20%20%20templateUrl%3A%20'checkbox-list-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'checkbox-list-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20CheckboxListExample%20%7B%0A%20%20options1%3A%20any%5B%5D%20%3D%20%5B%0A%20%20%20%20%7B%0A%20%20%20%20%20%20label%3A%20'Unchecked'%2C%0A%20%20%20%20%20%20checked%3A%20false%2C%0A%20%20%20%20%20%20value%3A%201%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20label%3A%20'Checked'%2C%0A%20%20%20%20%20%20checked%3A%20true%2C%0A%20%20%20%20%20%20value%3A%202%2C%0A%20%20%20%20%7D%2C%0A%20%20%5D%3B%0A%20%20options2%3A%20any%5B%5D%20%3D%20%5B%0A%20%20%20%20%7B%0A%20%20%20%20%20%20label%3A%20'Unchecked'%2C%0A%20%20%20%20%20%20checked%3A%20false%2C%0A%20%20%20%20%20%20value%3A%203%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20label%3A%20'Checked'%2C%0A%20%20%20%20%20%20checked%3A%20true%2C%0A%20%20%20%20%20%20value%3A%204%2C%0A%20%20%20%20%7D%2C%0A%20%20%5D%3B%0A%20%20onChange(change%3A%20Event)%3A%20void%20%7B%0A%20%20%20%20console.log('Checkbox%20Change%3A'%2C%20change)%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `Enabled%3A%0A%3Cnovo-check-list%20%5Boptions%5D%3D%22options1%22%3E%3C%2Fnovo-check-list%3E%0A%3Cbr%20%2F%3E%0ADisabled%3A%0A%3Cnovo-check-list%20%5Boptions%5D%3D%22options2%22%20%5Bdisabled%5D%3D%22true%22%3E%3C%2Fnovo-check-list%3E%0A`
    },
    'basic-checkbox': {
        title: 'Basic Checkbox Usage',
        component: BasicCheckboxExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Basic%20Checkbox%20Usage%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'basic-checkbox-example'%2C%0A%20%20%20%20templateUrl%3A%20'basic-checkbox-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'basic-checkbox-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20BasicCheckboxExample%20%7B%0A%20%20items%3A%20any%5B%5D%20%3D%20%5B%0A%20%20%20%20%7B%0A%20%20%20%20%20%20name%3A%20'Unchecked'%2C%0A%20%20%20%20%20%20isChecked%3A%20false%2C%0A%20%20%20%20%20%20disabled%3A%20false%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20name%3A%20'Checked'%2C%0A%20%20%20%20%20%20isChecked%3A%20true%2C%0A%20%20%20%20%20%20disabled%3A%20false%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20name%3A%20'Indeterminate'%2C%0A%20%20%20%20%20%20isChecked%3A%20true%2C%0A%20%20%20%20%20%20disabled%3A%20false%2C%0A%20%20%20%20%20%20indeterminate%3A%20true%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20name%3A%20'Disabled'%2C%0A%20%20%20%20%20%20isChecked%3A%20false%2C%0A%20%20%20%20%20%20disabled%3A%20true%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20name%3A%20'Disabled%20and%20Checked'%2C%0A%20%20%20%20%20%20isChecked%3A%20true%2C%0A%20%20%20%20%20%20disabled%3A%20true%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20name%3A%20'Disabled%20and%20Indeterminate'%2C%0A%20%20%20%20%20%20isChecked%3A%20true%2C%0A%20%20%20%20%20%20disabled%3A%20true%2C%0A%20%20%20%20%20%20indeterminate%3A%20true%2C%0A%20%20%20%20%7D%2C%0A%20%20%5D%3B%0A%20%20onChange(change%3A%20Event%2C%20item)%3A%20void%20%7B%0A%20%20%20%20console.log('Checkbox%20Change%3A'%2C%20change)%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%20%20if%20(item.indeterminate)%20%7B%0A%20%20%20%20%20%20item.indeterminate%20%3D%20false%3B%0A%20%20%20%20%7D%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cdiv%20*ngFor%3D%22let%20item%20of%20items%22%3E%0A%20%20%3Cnovo-checkbox%0A%20%20%20%20%5Blabel%5D%3D%22item.name%22%0A%20%20%20%20%5B(ngModel)%5D%3D%22item.isChecked%22%0A%20%20%20%20%5Bdisabled%5D%3D%22item.disabled%22%0A%20%20%20%20%5Bindeterminate%5D%3D%22item.indeterminate%22%0A%20%20%20%20(onSelect)%3D%22onChange(%24event%2C%20item)%22%3E%3C%2Fnovo-checkbox%3E%0A%3C%2Fdiv%3E`
    },
    'title': {
        title: 'Title Example',
        component: TitleExample,
        tsSource: `%2F%2F%20NG2%0Aimport%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Title%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'title-example'%2C%0A%20%20%20%20templateUrl%3A%20'.%2Ftitle-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'.%2Ftitle-example.scss'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20TitleExample%20%7B%0A%20%20icons%3A%20string%5B%5D%20%3D%20%5B'email'%2C%20'bell'%2C%20'person'%2C%20'caution'%2C%20'chart-pie'%2C%20'bot'%2C%20'certification'%2C%20'calendar'%2C%20'send'%2C%20'coffee'%5D%3B%0A%20%20index%3A%20number%20%3D%200%3B%0A%20%20get%20icon()%20%7B%0A%20%20%20%20return%20this.icons%5Bthis.index%20%25%20this.icons.length%5D%3B%0A%20%20%7D%0A%0A%20%20changeIcon()%20%7B%0A%20%20%20%20console.log('changign%20icon'%2C%20this.index)%3B%0A%20%20%20%20this.index%2B%2B%3B%0A%20%20%7D%0A%7D%0A`,
        cssSource: ``,
        htmlSource: `%3Csection%3E%0A%20%20%3Cnovo-title%20smaller%3ESmall%20Title%3C%2Fnovo-title%3E%0A%20%20%3Cnovo-title%3EDefault%20Title%3C%2Fnovo-title%3E%0A%20%20%3Cnovo-title%20larger%3ELarge%20Title%3C%2Fnovo-title%3E%0A%3C%2Fsection%3E%0A%0A%3Csection%3E%0A%20%20%3Cnovo-title%20error%20smaller%3EError%20Title%3C%2Fnovo-title%3E%0A%20%20%3Cnovo-title%20muted%3EMuted%20Title%3C%2Fnovo-title%3E%0A%20%20%3Cnovo-title%20color%3D%22candidate%22%20larger%3ECandidate%20Title%3C%2Fnovo-title%3E%0A%3C%2Fsection%3E%0A%0A%3Csection%3E%0A%20%20%3Cnovo-title%20color%3D%22positive%22%3E%0A%20%20%20%20%3Cnovo-icon%3E%7B%7Bicon%7D%7D%3C%2Fnovo-icon%3E%20Title%20with%20Icon%0A%20%20%3C%2Fnovo-title%3E%0A%20%20%3Cbutton%20theme%3D%22secondary%22%20(click)%3D%22changeIcon()%22%3EChange%20Icon%3C%2Fbutton%3E%0A%3C%2Fsection%3E`
    },
    'text': {
        title: 'Text Example',
        component: TextExample,
        tsSource: `%2F%2F%20NG2%0Aimport%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Text%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'text-example'%2C%0A%20%20%20%20templateUrl%3A%20'.%2Ftext-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'.%2Ftext-example.scss'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20TextExample%20%7B%7D%0A`,
        cssSource: ``,
        htmlSource: `%3Cnovo-text%20smaller%20block%20marginAfter%3E%0A%20%20Lorem%20ipsum%20dolor%20sit%20amet%2C%20consectetur%20adipiscing%20elit%2C%20sed%20do%20eiusmod%20tempor%0A%20%20incididunt%20ut%20labore%20et%20dolore%20magna%20aliqua.%20Ut%20enim%20ad%20minim%20veniam%2C%20quis%20nostrud%0A%20%20exercitation%20ullamco%20labor.%0A%3C%2Fnovo-text%3E%0A%0A%3Cnovo-text%20block%20marginAfter%3E%0A%20%20Lorem%20ipsum%20dolor%20sit%20amet%2C%20consectetur%20adipiscing%20elit%2C%20sed%20do%20eiusmod%20tempor%0A%20%20incididunt%20ut%20labore%20et%20dolore%20magna%20aliqua.%20Ut%20enim%20ad%20minim%20veniam%2C%20quis%20nostrud%0A%20%20exercitation%20ullamco%20labor.%0A%3C%2Fnovo-text%3E%0A%0A%3Cnovo-text%20larger%20block%20marginAfter%3E%0A%20%20Lorem%20ipsum%20dolor%20sit%20amet%2C%20consectetur%20adipiscing%20elit%2C%20sed%20do%20eiusmod%20tempor%0A%20%20incididunt%20ut%20labore%20et%20dolore%20magna%20aliqua.%20Ut%20enim%20ad%20minim%20veniam%2C%20quis%20nostrud%0A%20%20exercitation%20ullamco%20labor.%0A%3C%2Fnovo-text%3E%0A%0A%3Cnovo-text%20smaller%20color%3D%22grapefruit%22%20weight%3D%22medium%22%20block%20marginAfter%3E%0A%20%20Lorem%20ipsum%20dolor%20sit%20amet%2C%20consectetur%20adipiscing%20elit%2C%20sed%20do%20eiusmod%20tempor%0A%20%20incididunt%20ut%20labore%20et%20dolore%20magna%20aliqua.%20Ut%20enim%20ad%20minim%20veniam%2C%20quis%20nostrud%0A%20%20exercitation%20ullamco%20labor.%0A%3C%2Fnovo-text%3E%0A%0A%3Cnovo-text%20color%3D%22positive%22%20weight%3D%22medium%22%20block%20marginAfter%3E%0A%20%20%3Cnovo-icon%3Eemail%3C%2Fnovo-icon%3E%20Lorem%20ipsum%20dolor%20sit%20amet%2C%20consectetur%20adipiscing%20elit%2C%0A%20%20sed%20do%20eiusmod%20tempor%20incididunt%20ut%20labore%20et%20dolore%20magna%20aliqua.%20Ut%20enim%20ad%20minim%0A%20%20veniam%2C%20quis%20nostrud%20%3Cnovo-icon%3Ecaution%3C%2Fnovo-icon%3E%20exercitation%20ullamco%20labor.%0A%3C%2Fnovo-text%3E`
    },
    'link': {
        title: 'Link Example',
        component: LinkExample,
        tsSource: `%2F%2F%20NG2%0Aimport%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Link%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'link-example'%2C%0A%20%20%20%20templateUrl%3A%20'.%2Flink-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'.%2Flink-example.scss'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20LinkExample%20%7B%0A%20%20alert(message%3A%20string)%20%7B%0A%20%20%20%20alert(message)%3B%0A%20%20%7D%0A%7D%0A`,
        cssSource: ``,
        htmlSource: `%3Cnovo-text%20smaller%20block%20marginAfter%3E%0A%20%20Lorem%20ipsum%20dolor%20sit%20amet%2C%20consectetur%20adipiscing%20elit%2C%20sed%20do%20eiusmod%20tempor%0A%20%20incididunt%20ut%20labore%20et%20dolore%20magna%20aliqua.%20Ut%20enim%20ad%20minim%20veniam%2C%20quis%20nostrud%0A%20%20exercitation%20ullamco%20labor%20%3Cnovo-link%20href%3D%22%23%22%3E%0A%20%20%20%20%3Cnovo-icon%3Ebell%3C%2Fnovo-icon%3Eclick%20here%0A%20%20%3C%2Fnovo-link%3E%20to%20read%20more.%0A%3C%2Fnovo-text%3E%0A%0A%3Cnovo-text%20block%20marginAfter%3E%0A%20%20Lorem%20ipsum%20dolor%20sit%20amet%2C%20consectetur%20adipiscing%20elit%2C%20sed%20do%20eiusmod%20tempor%0A%20%20incididunt%20ut%20labore%20et%20dolore%20magna%20aliqua.%20Ut%20enim%20ad%20minim%20veniam%2C%20quis%20nostrud%0A%20%20exercitation%20ullamco%20labor%20%3Cnovo-link%20href%3D%22%23%22%3Eclick%20here%3C%2Fnovo-link%3E%20to%20read%20more.%0A%3C%2Fnovo-text%3E%0A%0A%3Cnovo-text%20larger%20block%20marginAfter%3E%0A%20%20Lorem%20ipsum%20dolor%20sit%20amet%2C%20consectetur%20adipiscing%20elit%2C%20sed%20do%20eiusmod%20tempor%0A%20%20incididunt%20ut%20labore%20et%20dolore%20magna%20aliqua.%20Ut%20enim%20ad%20minim%20veniam%2C%20quis%20nostrud%0A%20%20exercitation%20ullamco%20labor%20%3Cnovo-link%20(click)%3D%22alert('clicked')%22%3Eclick%20here%3C%2Fnovo-link%3E%20to%20read%20more.%0A%3C%2Fnovo-text%3E`
    },
    'label': {
        title: 'Label Example',
        component: LabelExample,
        tsSource: `%2F%2F%20NG2%0Aimport%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Label%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'label-example'%2C%0A%20%20%20%20templateUrl%3A%20'.%2Flabel-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'.%2Flabel-example.scss'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20LabelExample%20%7B%7D%0A`,
        cssSource: ``,
        htmlSource: `%3Cnovo-label%20smaller%3ESmall%20Label%3C%2Fnovo-label%3E%0A%3Cnovo-label%3EDefault%20Label%3C%2Fnovo-label%3E%0A%3Cnovo-label%20larger%3ELarge%20Label%3C%2Fnovo-label%3E%0A%0A%3Cnovo-label%20error%20smaller%3ESmall%20Label%3C%2Fnovo-label%3E%0A%3Cnovo-label%20error%3EDefault%20Label%3C%2Fnovo-label%3E%0A%3Cnovo-label%20error%20larger%3ELarge%20Label%3C%2Fnovo-label%3E%0A%0A%3Cnovo-label%20muted%20smaller%3ESmall%20Label%3C%2Fnovo-label%3E%0A%3Cnovo-label%20muted%3EDefault%20Label%3C%2Fnovo-label%3E%0A%3Cnovo-label%20muted%20larger%3ELarge%20Label%3C%2Fnovo-label%3E%0A%0A%3Cnovo-label%20color%3D%22positive%22%20smaller%3ESmall%20Label%3C%2Fnovo-label%3E%0A%3Cnovo-label%20color%3D%22carnation%22%3EDefault%20Label%3C%2Fnovo-label%3E%0A%3Cnovo-label%20color%3D%22candidate%22%20larger%3ELarge%20Label%3C%2Fnovo-label%3E`
    },
    'caption': {
        title: 'Caption Example',
        component: CaptionExample,
        tsSource: `%2F%2F%20NG2%0Aimport%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Caption%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'caption-example'%2C%0A%20%20%20%20templateUrl%3A%20'.%2Fcaption-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'.%2Fcaption-example.scss'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20CaptionExample%20%7B%7D%0A`,
        cssSource: ``,
        htmlSource: `%3Cnovo-caption%20smaller%3ESmall%20Caption%3C%2Fnovo-caption%3E%0A%3Cnovo-caption%3EDefault%20Caption%3C%2Fnovo-caption%3E%0A%3Cnovo-caption%20larger%3ELarge%20Caption%3C%2Fnovo-caption%3E%0A%0A%3Cnovo-caption%20error%20smaller%3ESmall%20Caption%3C%2Fnovo-caption%3E%0A%3Cnovo-caption%20error%3EDefault%20Caption%3C%2Fnovo-caption%3E%0A%3Cnovo-caption%20error%20larger%3ELarge%20Caption%3C%2Fnovo-caption%3E%0A%0A%3Cnovo-caption%20muted%20smaller%3ESmall%20Caption%3C%2Fnovo-caption%3E%0A%3Cnovo-caption%20muted%3EDefault%20Caption%3C%2Fnovo-caption%3E%0A%3Cnovo-caption%20muted%20larger%3ELarge%20Caption%3C%2Fnovo-caption%3E%0A%0A%3Cnovo-caption%20color%3D%22positive%22%20smaller%3ESmall%20Caption%3C%2Fnovo-caption%3E%0A%3Cnovo-caption%20color%3D%22carnation%22%3EDefault%20Caption%3C%2Fnovo-caption%3E%0A%3Cnovo-caption%20color%3D%22candidate%22%20larger%3ELarge%20Caption%3C%2Fnovo-caption%3E`
    },
    'iconset': {
        title: 'Iconset',
        component: IconsetExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0Aimport%20*%20as%20Icons%20from%20'%40bullhorn%2Fbullhorn-icons'%3B%0Aimport%20%7B%20NovoToastService%20%7D%20from%20'novo-elements'%3B%0A%0A%2F**%0A%20*%20%40title%20Iconset%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'iconset-example'%2C%0A%20%20%20%20templateUrl%3A%20'.%2Ficonset-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'.%2Ficonset-example.scss'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20IconsetExample%20%7B%0A%20%20icons%20%3D%20Object.values(Icons)%3B%0A%20%20options%3A%20any%3B%0A%0A%20%20constructor(private%20toaster%3A%20NovoToastService)%20%7B%7D%0A%0A%20%20copyLink(icon)%20%7B%0A%20%20%20%20%2F%2F%20Create%20dom%20element%20to%20copy%20from%0A%20%20%20%20const%20copyFrom%20%3D%20document.createElement('textarea')%3B%0A%20%20%20%20copyFrom.textContent%20%3D%20%60%24%7Bicon%7D%60%3B%0A%20%20%20%20const%20body%20%3D%20document.getElementsByTagName('body')%5B0%5D%3B%0A%20%20%20%20body.appendChild(copyFrom)%3B%0A%20%20%20%20copyFrom.select()%3B%0A%20%20%20%20%2F%2F%20Copy%20text%0A%20%20%20%20document.execCommand('copy')%3B%0A%20%20%20%20%2F%2F%20Delete%20element%0A%20%20%20%20body.removeChild(copyFrom)%3B%0A%0A%20%20%20%20%2F%2F%20Set%20toast%20options%0A%20%20%20%20this.options%20%3D%20%7B%0A%20%20%20%20%20%20title%3A%20%60%24%7Bicon%7D%60%2C%0A%20%20%20%20%20%20message%3A%20'Copied%20to%20your%20clipboard'%2C%0A%20%20%20%20%20%20theme%3A%20'ocean'%2C%0A%20%20%20%20%20%20icon%3A%20'clipboard'%2C%0A%20%20%20%20%20%20position%3A%20'growlTopRight'%2C%0A%20%20%20%20%7D%3B%0A%0A%20%20%20%20%2F%2F%20Fire%20toast%0A%20%20%20%20this.toaster.alert(this.options)%3B%0A%20%20%7D%0A%7D%0A`,
        cssSource: ``,
        htmlSource: `%3Carticle%20class%3D%22icon-blocks%20iconset%22%3E%0A%20%20%3Cdiv%20*ngFor%3D%22let%20icon%20of%20icons%22%20class%3D%22block%22%20(click)%3D%22copyLink(icon)%22%3E%0A%20%20%20%20%3Cdiv%20class%3D%22icon-square%22%3E%0A%20%20%20%20%20%20%3Cspan%20class%3D%22icon-text%22%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-icon%3E%7B%7Bicon%7D%7D%3C%2Fnovo-icon%3E%0A%20%20%20%20%20%20%3C%2Fspan%3E%0A%20%20%20%20%3C%2Fdiv%3E%0A%20%20%20%20%3Cspan%3E%7B%7Bicon%7D%7D%3C%2Fspan%3E%0A%20%20%3C%2Fdiv%3E%0A%3C%2Farticle%3E`
    },
    'primary-colors': {
        title: 'Primary Colors',
        component: PrimaryColorsExample,
        tsSource: `%2F%2F%20NG2%0Aimport%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%2F%2F%20Vendor%0Aimport%20%7B%20NovoToastService%20%7D%20from%20'novo-elements'%3B%0A%2F%2F%20App%0Aimport%20%7B%20primaryColors%20as%20colors%20%7D%20from%20'..%2Fcolors'%3B%0A%0A%2F**%0A%20*%20%40title%20Primary%20Colors%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'primary-colors-example'%2C%0A%20%20%20%20templateUrl%3A%20'.%2Fprimary-colors-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'.%2Fprimary-colors-example.scss'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20PrimaryColorsExample%20%7B%0A%20%20primaryColors%20%3D%20colors%3B%0A%20%20options%3A%20any%3B%0A%0A%20%20constructor(private%20toaster%3A%20NovoToastService)%20%7B%7D%0A%0A%20%20copyLink(color)%20%7B%0A%20%20%20%20%2F%2F%20Create%20dom%20element%20to%20copy%20from%0A%20%20%20%20const%20copyFrom%20%3D%20document.createElement('textarea')%3B%0A%20%20%20%20copyFrom.textContent%20%3D%20%60%23%24%7Bcolor.hex%7D%60%3B%0A%20%20%20%20const%20body%20%3D%20document.getElementsByTagName('body')%5B0%5D%3B%0A%20%20%20%20body.appendChild(copyFrom)%3B%0A%20%20%20%20copyFrom.select()%3B%0A%20%20%20%20%2F%2F%20Copy%20text%0A%20%20%20%20document.execCommand('copy')%3B%0A%20%20%20%20%2F%2F%20Delete%20element%0A%20%20%20%20body.removeChild(copyFrom)%3B%0A%0A%20%20%20%20%2F%2F%20Set%20toast%20options%0A%20%20%20%20this.options%20%3D%20%7B%0A%20%20%20%20%20%20title%3A%20%60%23%24%7Bcolor.hex%7D%60%2C%0A%20%20%20%20%20%20message%3A%20'Copied%20to%20your%20clipboard'%2C%0A%20%20%20%20%20%20theme%3A%20color.variables%5B0%5D%2C%0A%20%20%20%20%20%20icon%3A%20'clipboard'%2C%0A%20%20%20%20%20%20position%3A%20'growlTopRight'%2C%0A%20%20%20%20%7D%3B%0A%0A%20%20%20%20if%20(color.name%20%3D%3D%3D%20'action')%20%7B%0A%20%20%20%20%20%20this.options.theme%20%3D%20'ocean'%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20%2F%2F%20Fire%20toast%0A%20%20%20%20this.toaster.alert(this.options)%3B%0A%20%20%7D%0A%7D%0A`,
        cssSource: ``,
        htmlSource: `%3Carticle%20class%3D%22color-blocks%20primary-colors%22%3E%0A%20%20%3Cdiv%20*ngFor%3D%22let%20color%20of%20primaryColors%22%20class%3D%22block%22%3E%0A%20%20%20%20%20%20%3Cdiv%20class%3D%22color-square%20bgc-%7B%7Bcolor.variables%5B0%5D%7D%7D%22%20(click)%3D%22copyLink(color)%22%3E%0A%20%20%20%20%20%20%20%20%3Ch3%20class%3D%22color-text%22%3E%3Cspan%3E%23%3C%2Fspan%3E%7B%7Bcolor.hex%7D%7D%3C%2Fh3%3E%0A%20%20%20%20%20%20%3C%2Fdiv%3E%0A%20%20%20%20%20%20%3Ch6%3E%7B%7Bcolor.name%7D%7D%3C%2Fh6%3E%0A%20%20%20%20%20%20%3Cspan%20class%3D%22vars%22%20*ngFor%3D%22let%20variable%20of%20color.variables%22%3E%24%7B%7Bvariable%7D%7D%3C%2Fspan%3E%0A%20%20%3C%2Fdiv%3E%0A%3C%2Farticle%3E%0A`
    },
    'entity-colors': {
        title: 'Entity Colors',
        component: EntityColorsExample,
        tsSource: `%2F%2F%20NG2%0Aimport%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%2F%2F%20Vendor%0Aimport%20%7B%20NovoToastService%20%7D%20from%20'novo-elements'%3B%0A%2F%2F%20App%0Aimport%20%7B%20entityColors%20as%20colors%20%7D%20from%20'..%2Fcolors'%3B%0A%0A%2F**%0A%20*%20%40title%20Entity%20Colors%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'entity-colors-example'%2C%0A%20%20%20%20templateUrl%3A%20'.%2Fentity-colors-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'.%2Fentity-colors-example.scss'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20EntityColorsExample%20%7B%0A%20%20entityColors%20%3D%20colors%3B%0A%20%20options%3A%20any%3B%0A%0A%20%20constructor(private%20toaster%3A%20NovoToastService)%20%7B%7D%0A%0A%20%20copyLink(color)%20%7B%0A%20%20%20%20%2F%2F%20Create%20dom%20element%20to%20copy%20from%0A%20%20%20%20const%20copyFrom%20%3D%20document.createElement('textarea')%3B%0A%20%20%20%20copyFrom.textContent%20%3D%20%60%23%24%7Bcolor.hex%7D%60%3B%0A%20%20%20%20const%20body%20%3D%20document.getElementsByTagName('body')%5B0%5D%3B%0A%20%20%20%20body.appendChild(copyFrom)%3B%0A%20%20%20%20copyFrom.select()%3B%0A%20%20%20%20%2F%2F%20Copy%20text%0A%20%20%20%20document.execCommand('copy')%3B%0A%20%20%20%20%2F%2F%20Delete%20element%0A%20%20%20%20body.removeChild(copyFrom)%3B%0A%0A%20%20%20%20%2F%2F%20Set%20toast%20options%0A%20%20%20%20this.options%20%3D%20%7B%0A%20%20%20%20%20%20title%3A%20%60%23%24%7Bcolor.hex%7D%60%2C%0A%20%20%20%20%20%20message%3A%20'Copied%20to%20your%20clipboard'%2C%0A%20%20%20%20%20%20theme%3A%20color.variables%5B0%5D%2C%0A%20%20%20%20%20%20icon%3A%20'clipboard'%2C%0A%20%20%20%20%20%20position%3A%20'growlTopRight'%2C%0A%20%20%20%20%7D%3B%0A%0A%20%20%20%20if%20(color.name%20%3D%3D%3D%20'action')%20%7B%0A%20%20%20%20%20%20this.options.theme%20%3D%20'ocean'%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20%2F%2F%20Fire%20toast%0A%20%20%20%20this.toaster.alert(this.options)%3B%0A%20%20%7D%0A%7D%0A`,
        cssSource: ``,
        htmlSource: `%3Carticle%20class%3D%22color-blocks%20entity-colors%22%3E%0A%20%20%3Cdiv%20*ngFor%3D%22let%20color%20of%20entityColors%22%20class%3D%22block%22%3E%0A%20%20%20%20%20%20%3Cdiv%20class%3D%22color-square%20bgc-%7B%7Bcolor.variables%5B0%5D%7D%7D%22%20(click)%3D%22copyLink(color)%22%3E%0A%20%20%20%20%20%20%20%20%3Ch3%20class%3D%22color-text%22%3E%3Cspan%3E%23%3C%2Fspan%3E%7B%7Bcolor.hex%7D%7D%3C%2Fh3%3E%0A%20%20%20%20%20%20%3C%2Fdiv%3E%0A%20%20%20%20%20%20%3Ch6%3E%7B%7Bcolor.name%7D%7D%3C%2Fh6%3E%0A%20%20%20%20%20%20%3Cspan%20class%3D%22vars%22%20*ngFor%3D%22let%20variable%20of%20color.variables%22%3E%24%7B%7Bvariable%7D%7D%3C%2Fspan%3E%0A%20%20%3C%2Fdiv%3E%0A%3C%2Farticle%3E%0A`
    },
    'analytics-colors': {
        title: 'Analytics Colors',
        component: AnalyticsColorsExample,
        tsSource: `%2F%2F%20NG2%0Aimport%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%2F%2F%20Vendor%0Aimport%20%7B%20NovoToastService%20%7D%20from%20'novo-elements'%3B%0A%2F%2F%20App%0Aimport%20%7B%20analyticsColors%20as%20colors%20%7D%20from%20'..%2Fcolors'%3B%0A%0A%2F**%0A%20*%20%40title%20Analytics%20Colors%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'analytics-colors-example'%2C%0A%20%20%20%20templateUrl%3A%20'.%2Fanalytics-colors-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'.%2Fanalytics-colors-example.scss'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20AnalyticsColorsExample%20%7B%0A%20%20analyticsColors%20%3D%20colors%3B%0A%20%20options%3A%20any%3B%0A%0A%20%20constructor(private%20toaster%3A%20NovoToastService)%20%7B%7D%0A%0A%20%20copyLink(color)%20%7B%0A%20%20%20%20%2F%2F%20Create%20dom%20element%20to%20copy%20from%0A%20%20%20%20const%20copyFrom%20%3D%20document.createElement('textarea')%3B%0A%20%20%20%20copyFrom.textContent%20%3D%20%60%23%24%7Bcolor.hex%7D%60%3B%0A%20%20%20%20const%20body%20%3D%20document.getElementsByTagName('body')%5B0%5D%3B%0A%20%20%20%20body.appendChild(copyFrom)%3B%0A%20%20%20%20copyFrom.select()%3B%0A%20%20%20%20%2F%2F%20Copy%20text%0A%20%20%20%20document.execCommand('copy')%3B%0A%20%20%20%20%2F%2F%20Delete%20element%0A%20%20%20%20body.removeChild(copyFrom)%3B%0A%0A%20%20%20%20%2F%2F%20Set%20toast%20options%0A%20%20%20%20this.options%20%3D%20%7B%0A%20%20%20%20%20%20title%3A%20%60%23%24%7Bcolor.hex%7D%60%2C%0A%20%20%20%20%20%20message%3A%20'Copied%20to%20your%20clipboard'%2C%0A%20%20%20%20%20%20theme%3A%20color.variables%5B0%5D%2C%0A%20%20%20%20%20%20icon%3A%20'clipboard'%2C%0A%20%20%20%20%20%20position%3A%20'growlTopRight'%2C%0A%20%20%20%20%7D%3B%0A%0A%20%20%20%20if%20(color.name%20%3D%3D%3D%20'action')%20%7B%0A%20%20%20%20%20%20this.options.theme%20%3D%20'ocean'%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20%2F%2F%20Fire%20toast%0A%20%20%20%20this.toaster.alert(this.options)%3B%0A%20%20%7D%0A%7D%0A`,
        cssSource: ``,
        htmlSource: `%3Carticle%20class%3D%22color-blocks%20analytics-colors%22%3E%0A%20%20%3Cdiv%20*ngFor%3D%22let%20color%20of%20analyticsColors%22%20class%3D%22block%22%3E%0A%20%20%20%20%20%20%3Cdiv%20class%3D%22color-square%20bgc-%7B%7Bcolor.variables%5B0%5D%7D%7D%22%20(click)%3D%22copyLink(color)%22%3E%0A%20%20%20%20%20%20%20%20%3Ch3%20class%3D%22color-text%22%3E%3Cspan%3E%23%3C%2Fspan%3E%7B%7Bcolor.hex%7D%7D%3C%2Fh3%3E%0A%20%20%20%20%20%20%3C%2Fdiv%3E%0A%20%20%20%20%20%20%3Ch6%3E%7B%7Bcolor.name%7D%7D%3C%2Fh6%3E%0A%20%20%20%20%20%20%3Cspan%20class%3D%22vars%22%20*ngFor%3D%22let%20variable%20of%20color.variables%22%3E%24%7B%7Bvariable%7D%7D%3C%2Fspan%3E%0A%20%20%3C%2Fdiv%3E%0A%3C%2Farticle%3E%0A`
    },
    'tooltip-types': {
        title: 'Tooltip Types Example',
        component: TooltipTypesExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Tooltip%20Types%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'tooltip-types-example'%2C%0A%20%20%20%20templateUrl%3A%20'tooltip-types-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'tooltip-types-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20TooltipTypesExample%20%7B%7D%0A`,
        cssSource: `%2F**%20CSS%20for%20this%20example%20*%2F%0A%3Ahost%20%7B%0A%20%20margin%3A%20auto%3B%0A%20%20padding%3A%2020px%2030px%3B%0A%20%20position%3A%20relative%3B%0A%20%20display%3A%20flex%3B%0A%7D%0A%0A%3Ahost%20%3E%20span%20%7B%0A%20%20cursor%3A%20pointer%3B%0A%20%20margin%3A%20auto%3B%0A%7D%0A`,
        htmlSource: `%3Cspan%20tooltip%3D%22ERROR%22%20tooltipType%3D%22error%22%3EError%3C%2Fspan%3E%0A%3Cspan%20tooltip%3D%22INFO%22%20tooltipType%3D%22info%22%3EInfo%3C%2Fspan%3E%0A%3Cspan%20tooltip%3D%22WARNING%22%20tooltipType%3D%22warning%22%3EWarning%3C%2Fspan%3E%0A%3Cspan%20tooltip%3D%22SUCCESS%22%20tooltipType%3D%22success%22%3ESuccess%3C%2Fspan%3E%0A`
    },
    'tooltip-toggle': {
        title: 'Tooltip Toggle Example',
        component: TooltipToggleExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Tooltip%20Toggle%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'tooltip-toggle-example'%2C%0A%20%20%20%20templateUrl%3A%20'tooltip-toggle-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'tooltip-toggle-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20TooltipToggleExample%20%7B%0A%20%20public%20tooltipActive%3A%20boolean%3B%0A%20%20public%20toggleTooltip()%20%7B%0A%20%20%20%20this.tooltipActive%20%3D%20!this.tooltipActive%3B%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20CSS%20for%20this%20example%20*%2F%0A%3Ahost%20%7B%0A%20%20margin%3A%20auto%3B%0A%20%20padding%3A%2020px%2030px%3B%0A%20%20position%3A%20relative%3B%0A%20%20display%3A%20flex%3B%0A%7D%0A%0A%3Ahost%20%3E%20span%20%7B%0A%20%20cursor%3A%20pointer%3B%0A%20%20margin%3A%20auto%3B%0A%7D%0A`,
        htmlSource: `%3Cspan%20tooltip%3D%22I%20HAVE%20A%20TOOLTIP!%22%20%5BtooltipActive%5D%3D%22tooltipActive%22%3E%0A%20%20%20%20%3Cspan%20*ngIf%3D%22tooltipActive%22%3EMy%20tooltip%20can%20display!%3C%2Fspan%3E%0A%20%20%20%20%3Cspan%20*ngIf%3D%22!tooltipActive%22%3EMy%20tooltip%20is%20disabled!%3C%2Fspan%3E%0A%3C%2Fspan%3E%0A%3Cbutton%20theme%3D%22secondary%22%20(click)%3D%22toggleTooltip()%22%3EToggle%3C%2Fbutton%3E%0A`
    },
    'tooltip-sizes': {
        title: 'Tooltip Sizes Example',
        component: TooltipSizesExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Tooltip%20Sizes%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'tooltip-sizes-example'%2C%0A%20%20%20%20templateUrl%3A%20'tooltip-sizes-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'tooltip-sizes-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20TooltipSizesExample%20%7B%0A%20%20public%20mediumTooltip%3A%20string%20%3D%20%60Lorem%20Ipsum%5Cn%5Cn%20is%20simply%20dummy%20text%20of%20the%20printing%20and%20typesetting%20industry.%60%3B%0A%20%20public%20largeTooltip%3A%20string%20%3D%20%60Lorem%20Ipsum%5Cn%5Cn%20is%20simply%20dummy%20text%20of%20the%20printing%20and%20typesetting%20industry.%20Lorem%20Ipsum%20has%20been%20the%20industry's%20standard%20dummy%20text%20ever%20since%20the%201500s%2C%20when%20an%20unknown%20printer%20took%20a%20galley%20of%20type%20and%20scrambled%20it%20to%20make%20a%20type%20specimen%20book.%20It%20has%20survived%20not%20only%20five%20centuries%2C%20but%20also%20the%20leap%20into%20electronic%20typesetting%2C%20remaining%20essentially%20unchanged.%20It%20was%20popularised%20in%20the%201960s%20with%20the%20release%20of%20Letraset%20sheets%20containing%20Lorem%20Ipsum%20passages%2C%20and%20more%20recently%20with%20desktop%20publishing%20software%20like%20Aldus%20PageMaker%20including%20versions%20of%20Lorem%20Ipsum.%60%3B%0A%20%20public%20extraLargeTooltip%3A%20string%20%3D%20%60Lorem%20ipsum%20dolor%20sit%20amet%2C%20consectetur%20adipiscing%20elit.%20Duis%20placerat%20nisi%20at%20elit%20molestie%2C%20eget%20dapibus%20erat%20mattis.%20Sed%20nec%20est%20sit%20amet%20dolor%20hendrerit%20placerat%20quis%20vitae%20sapien.%20Nulla%20non%20consectetur%20lorem%2C%20nec%20ultricies%20lacus.%20Ut%20maximus%20eget%20tortor%20a%20bibendum.%20Vivamus%20vel%20mollis%20magna.%20Nullam%20sit%20amet%20urna%20a%20elit%20sollicitudin%20ultrices.%20Donec%20scelerisque%20dolor%20vel%20lacus%20blandit%20aliquam.%20Morbi%20tellus%20nunc%2C%20interdum%20eget%20laoreet%20vitae%2C%20tristique%20a%20odio.%20Maecenas%20ligula%20nisl%2C%20volutpat%20id%20augue%20vel%2C%20sollicitudin%20bibendum%20massa.%20Aenean%20dapibus%20quam%20nec%20ante%20volutpat%2C%20id%20tincidunt%20mauris%20malesuada.%20Aliquam%20vitae%20consectetur%20justo.%0A%0A%20%20%20%20Nunc%20vel%20felis%20in%20quam%20iaculis%20vulputate%20eu%20non%20erat.%20Phasellus%20vel%20purus%20eget%20est%20elementum%20tempus%20a%20non%20mauris.%20Mauris%20cursus%20convallis%20enim%2C%20non%20malesuada%20felis%20suscipit%20vel.%20Maecenas%20nec%20hendrerit%20erat.%20Morbi%20vehicula%20condimentum%20mi%20non%20gravida.%20Aenean%20varius%20risus%20arcu.%20Sed%20blandit%20ipsum%20sit%20amet%20tincidunt%20convallis.%20Praesent%20consectetur%20elementum%20nisi%2C%20sit%20amet%20placerat%20diam%20commodo%20at.%20Vivamus%20aliquet%20sagittis%20libero%2C%20id%20efficitur%20nisl%20varius%20eget.%20Aenean%20tempor%20augue%20a%20erat%20tincidunt%20hendrerit.%20Cras%20et%20dictum%20nisl.%20Sed%20pulvinar%20leo%20quis%20urna%20malesuada%20tincidunt.%20Sed%20enim%20tortor%2C%20semper%20egestas%20orci%20pellentesque%2C%20scelerisque%20egestas%20eros.%20Aliquam%20in%20ex%20sit%20amet%20tortor%20fringilla%20convallis.%0A%0A%20%20%20%20Nam%20ac%20nulla%20accumsan%2C%20tristique%20orci%20tincidunt%2C%20condimentum%20nunc.%20Fusce%20eget%20neque%20dolor.%20Vestibulum%20volutpat%2C%20libero%20non%20maximus%20maximus%2C%20libero%20ante%20semper%20tellus%2C%20et%20commodo%20lectus%20mi%20nec%20orci.%20Donec%20pretium%20pharetra%20cursus.%20Nam%20a%20egestas%20augue.%20Sed%20et%20condimentum%20lectus.%20Sed%20vel%20justo%20semper%2C%20convallis%20ante%20id%2C%20tincidunt%20nisi.%20Aliquam%20non%20lorem%20commodo%2C%20laoreet%20diam%20nec%2C%20feugiat%20dolor.%0A%0A%20%20%20%20Aliquam%20orci%20diam%2C%20vestibulum%20et%20odio%20id%2C%20molestie%20interdum%20diam.%20Donec%20et%20molestie%20mi.%20Suspendisse%20potenti.%20Nam%20sit%20amet%20faucibus%20nulla.%20In%20tincidunt%20pharetra%20turpis%2C%20fringilla%20convallis%20dui%20scelerisque%20vel.%20Orci%20varius%20natoque%20penatibus%20et%20magnis%20dis%20parturient%20montes%2C%20nascetur%20ridiculus%20mus.%20Fusce%20eget%20tellus%20sem.%20Donec%20ac%20maximus%20massa.%0A%0A%20%20%20%20Aliquam%20vehicula%20ligula%20justo%2C%20faucibus%20semper%20lorem%20sodales%20eu.%20Fusce%20nec%20augue%20quis%20diam%20iaculis%20dapibus.%20Cras%20consectetur%20eros%20ut%20nunc%20cursus%2C%20non%20laoreet%20dolor%20rhoncus.%20In%20luctus%20risus%20sed%20nunc%20feugiat%2C%20in%20imperdiet%20velit%20euismod.%20Curabitur%20sed%20nunc%20dapibus%2C%20convallis%20tortor%20sit%20amet%2C%20interdum%20sapien.%20Donec%20auctor%20mauris%20est%2C%20ac%20molestie%20diam%20sagittis%20id.%20Curabitur%20pretium%20metus%20et%20ante%20tincidunt%20convallis.%20Aenean%20quis%20mollis%20nulla.%60%3B%0A%7D%0A`,
        cssSource: `%2F**%20CSS%20for%20this%20example%20*%2F%0A%3Ahost%20%7B%0A%20%20margin%3A%20auto%3B%0A%20%20padding%3A%2020px%2030px%3B%0A%20%20position%3A%20relative%3B%0A%20%20display%3A%20flex%3B%0A%7D%0A%0A%3Ahost%20%3E%20span%20%7B%0A%20%20cursor%3A%20pointer%3B%0A%20%20margin%3A%20auto%3B%0A%7D%0A`,
        htmlSource: `%3Cspan%20tooltip%3D%22Small%20Tooltip%22%20tooltipSize%3D%22small%22%20tooltipPosition%3D%22bottom%22%20tooltipPreline%3D%22true%22%3ESmall%20Tooltip%3C%2Fspan%3E%0A%3Cspan%20%5Btooltip%5D%3D%22mediumTooltip%22%20tooltipSize%3D%22medium%22%20tooltipPosition%3D%22left%22%20tooltipPreline%3D%22true%22%3EMedium%20Tooltip%3C%2Fspan%3E%0A%3Cspan%20%5Btooltip%5D%3D%22largeTooltip%22%20tooltipSize%3D%22large%22%20tooltipPosition%3D%22top%22%20tooltipPreline%3D%22true%22%3ELarge%20Tooltip%3C%2Fspan%3E%0A%3Cspan%20%5Btooltip%5D%3D%22extraLargeTooltip%22%20tooltipSize%3D%22extra-large%22%20tooltipPosition%3D%22top%22%20tooltipPreline%3D%22true%22%20tooltipAutoPosition%3D%22true%22%3EExtra-Large%20Tooltip%3C%2Fspan%3E%0A`
    },
    'tooltip-placement': {
        title: 'Tooltip Placement Example',
        component: TooltipPlacementExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Tooltip%20Placement%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'tooltip-placement-example'%2C%0A%20%20%20%20templateUrl%3A%20'tooltip-placement-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'tooltip-placement-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20TooltipPlacementExample%20%7B%7D%0A`,
        cssSource: `%2F**%20CSS%20for%20this%20example%20*%2F%0A%3Ahost%20%7B%0A%20%20margin%3A%20auto%3B%0A%20%20padding%3A%2020px%2030px%3B%0A%20%20position%3A%20relative%3B%0A%20%20display%3A%20flex%3B%0A%7D%0A%0A%3Ahost%20%3E%20span%20%7B%0A%20%20cursor%3A%20pointer%3B%0A%20%20margin%3A%20auto%3B%0A%7D%0A`,
        htmlSource: `%3Cspan%20tooltip%3D%22left%22%20tooltipPosition%3D%22left%22%3ELeft%3C%2Fspan%3E%0A%3Cspan%20tooltip%3D%22right%22%20tooltipPosition%3D%22right%22%3ERight%3C%2Fspan%3E%0A%3Cspan%20tooltip%3D%22top%22%20tooltipPosition%3D%22top%22%3ETop%3C%2Fspan%3E%0A%3Cspan%20tooltip%3D%22bottom%22%20tooltipPosition%3D%22bottom%22%3EBottom%3C%2Fspan%3E%0A`
    },
    'tooltip-overflow': {
        title: 'Tooltip Overflow Example',
        component: TooltipOverflowExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Tooltip%20Overflow%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'tooltip-overflow-example'%2C%0A%20%20%20%20templateUrl%3A%20'tooltip-overflow-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'tooltip-overflow-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20TooltipOverflowExample%20%7B%0A%20%20public%20tooltipActive%3A%20boolean%20%3D%20true%3B%0A%20%20longText%20%3D%20'Lorem%20Ipsum%20pariatur%20laborum%20tempor%20voluptate%20non%20adipisicing%20reprehenderit.'%3B%0A%20%20shortText%20%3D%20'Lorem%20Ipsum!'%3B%0A%0A%20%20public%20toggleTooltip()%20%7B%0A%20%20%20%20this.tooltipActive%20%3D%20!this.tooltipActive%3B%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20CSS%20for%20this%20example%20*%2F%0A%3Ahost%20%7B%0A%20%20margin%3A%20auto%3B%0A%20%20padding%3A%2020px%2030px%3B%0A%20%20position%3A%20relative%3B%0A%20%20display%3A%20flex%3B%0A%20%20flex-direction%3A%20column%3B%0A%20%20width%3A%2050%25%3B%0A%7D%0A`,
        htmlSource: `%3Cnovo-card%20padding%3D%22lg%22%3E%0A%20%20%3Cnovo-text%20ellipsis%20%5Btooltip%5D%3D%22longText%22%20tooltipOnOverflow%3E%7B%7B%20longText%20%7D%7D%3C%2Fnovo-text%3E%0A%3C%2Fnovo-card%3E%0A%3Cnovo-card%20padding%3D%22lg%22%3E%0A%20%20%3Cnovo-text%20ellipsis%20%5Btooltip%5D%3D%22shortText%22%20tooltipOnOverflow%3E%7B%7B%20shortText%20%7D%7D%3C%2Fnovo-text%3E%0A%3C%2Fnovo-card%3E%0A`
    },
    'tooltip-options': {
        title: 'Tooltip Options Example',
        component: TooltipOptionsExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Tooltip%20Options%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'tooltip-options-example'%2C%0A%20%20%20%20templateUrl%3A%20'tooltip-options-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'tooltip-options-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20TooltipOptionsExample%20%7B%7D%0A`,
        cssSource: `%2F**%20CSS%20for%20this%20example%20*%2F%0A%3Ahost%20%7B%0A%20%20margin%3A%20auto%3B%0A%20%20padding%3A%2020px%2030px%3B%0A%20%20position%3A%20relative%3B%0A%20%20display%3A%20flex%3B%0A%7D%0A%0A%3Ahost%20%3E%20span%20%7B%0A%20%20cursor%3A%20pointer%3B%0A%20%20margin%3A%20auto%3B%0A%7D%0A`,
        htmlSource: `%3Cspan%20tooltip%3D%22ALWAYS%22%20tooltipAlways%3D%22true%22%3EAlways%20Shown%3C%2Fspan%3E%0A%3Cspan%20tooltip%3D%22ROUNDED%22%20tooltipRounded%3D%22true%22%3ERounded%3C%2Fspan%3E%0A%3Cspan%20tooltip%3D%22NO%20ANIMATE%22%20tooltipNoAnimate%3D%22true%22%3ENo%20Animation%3C%2Fspan%3E%0A%3Cspan%20tooltip%3D%22BOUNCE%22%20tooltipBounce%3D%22true%22%3EBounce%3C%2Fspan%3E%0A%3Cspan%20tooltip%3D%22%3Ch2%3EHello%3C%2Fh2%3E%3Chr%3EI%20can%20%3Ci%3Erender%3C%2Fi%3E%3Cul%3E%3Cli%3EHTML%3C%2Fli%3E%3Cli%3ECSS%3C%2Fli%3E%3C%2Ful%3E%22%20tooltipIsHTML%3D%22true%22%3EHTML%3C%2Fspan%3E%0A`
    },
    'tooltip-align': {
        title: 'Tooltip Align Example',
        component: TooltipAlignExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Tooltip%20Align%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'tooltip-align-example'%2C%0A%20%20%20%20templateUrl%3A%20'tooltip-align-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'tooltip-align-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20TooltipAlignExample%20%7B%7D%0A`,
        cssSource: `%2F**%20CSS%20for%20this%20example%20*%2F%0A%3Ahost%20%7B%0A%20%20margin%3A%20auto%3B%0A%20%20padding%3A%2020px%2030px%3B%0A%20%20position%3A%20relative%3B%0A%20%20display%3A%20flex%3B%0A%7D%0A%0A%3Ahost%20%3E%20span%20%7B%0A%20%20cursor%3A%20pointer%3B%0A%20%20margin%3A%20auto%3B%0A%7D%0A`,
        htmlSource: `%3Cspan%20tooltip%3D%22bottom-left%22%20tooltipPosition%3D%22bottom-left%22%3EBottom%20Left%3C%2Fspan%3E%0A%3Cspan%20tooltip%3D%22bottom-right%22%20tooltipPosition%3D%22bottom-right%22%3EBottom%20Right%3C%2Fspan%3E%0A%3Cspan%20tooltip%3D%22top-left%22%20tooltipPosition%3D%22top-left%22%3ETop%20Left%3C%2Fspan%3E%0A%3Cspan%20tooltip%3D%22top-right%22%20tooltipPosition%3D%22top-right%22%3ETop%20Right%3C%2Fspan%3E%0A`
    },
    'multi-row-toolbar': {
        title: 'Multi Row Toolbar',
        component: MultiRowToolbarExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Multi%20Row%20Toolbar%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'multi-row-toolbar-example'%2C%0A%20%20%20%20templateUrl%3A%20'multi-row-toolbar-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'multi-row-toolbar-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20MultiRowToolbarExample%20%7B%7D%0A`,
        cssSource: `.example-spacer%20%7B%0A%20%20flex%3A%201%201%20auto%3B%0A%7D%0A`,
        htmlSource: `%3Cnovo-toolbar%3E%0A%20%20%3Cnovo-toolbar-row%20color%3D%22company%22%20gap%3D%22md%22%3E%0A%20%20%20%20%3Cnovo-icon%3Ecompany%3C%2Fnovo-icon%3E%0A%20%20%20%20%3Cnovo-title%3EMy%20App%3C%2Fnovo-title%3E%0A%20%20%20%20%3Cspan%20class%3D%22example-spacer%22%3E%3C%2Fspan%3E%0A%20%20%20%20%3Cnovo-action%20icon%3D%22menu%22%20aria-label%3D%22Example%20icon-button%20with%20menu%20icon%22%3E%3C%2Fnovo-action%3E%0A%20%20%3C%2Fnovo-toolbar-row%3E%0A%0A%20%20%3Cnovo-toolbar-row%3E%0A%20%20%20%20%3Cnovo-nav%3E%0A%20%20%20%20%20%20%3Cnovo-tab%3EOverview%3C%2Fnovo-tab%3E%0A%20%20%20%20%20%20%3Cnovo-tab%3EActivity%3C%2Fnovo-tab%3E%0A%20%20%20%20%20%20%3Cnovo-tab%3EFiles%3C%2Fnovo-tab%3E%0A%20%20%20%20%3C%2Fnovo-nav%3E%0A%20%20%20%20%3Cspan%20class%3D%22example-spacer%22%3E%3C%2Fspan%3E%0A%20%20%20%20%3Cnovo-divider%20vertical%3E%3C%2Fnovo-divider%3E%0A%20%20%20%20%3Cnovo-button%20theme%3D%22dialogue%22%3ELayout%3C%2Fnovo-button%3E%0A%20%20%3C%2Fnovo-toolbar-row%3E%0A%3C%2Fnovo-toolbar%3E`
    },
    'basic-toolbar': {
        title: 'Basic Toolbar Example',
        component: BasicToolbarExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Basic%20Toolbar%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'basic-toolbar-example'%2C%0A%20%20%20%20templateUrl%3A%20'basic-toolbar-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'basic-toolbar-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20BasicToolbarExample%20%7B%7D%0A`,
        cssSource: `.example-spacer%20%7B%0A%20%20flex%3A%201%201%20auto%3B%0A%7D%0A`,
        htmlSource: `%3Cp%3E%0A%20%20%3Cnovo-toolbar%3E%0A%20%20%20%20%3Cnovo-title%3EMy%20Application%3C%2Fnovo-title%3E%0A%20%20%3C%2Fnovo-toolbar%3E%0A%3C%2Fp%3E%0A%0A%3Cp%3E%0A%20%20%3Cnovo-toolbar%20accent%3D%22candidate%22%20gap%3D%22md%22%3E%0A%20%20%20%20%3Cnovo-icon%20color%3D%22candidate%22%3Ecandidate%3C%2Fnovo-icon%3E%0A%20%20%20%20%3Cnovo-title%3EFerdinand%20del%20Toro%3C%2Fnovo-title%3E%0A%20%20%3C%2Fnovo-toolbar%3E%0A%3C%2Fp%3E%0A%0A%0A%3Cp%3E%0A%20%20%3Cnovo-toolbar%20color%3D%22company%22%20gap%3D%221rem%22%3E%0A%20%20%20%20%3Cnovo-icon%3Ecompany%3C%2Fnovo-icon%3E%0A%20%20%20%20%3Cnovo-title%3ETaurus%20Industries%3C%2Fnovo-title%3E%0A%20%20%20%20%3Cnovo-nav%20theme%3D%22color%22%3E%0A%20%20%20%20%20%20%3Cnovo-tab%3EOverview%3C%2Fnovo-tab%3E%0A%20%20%20%20%20%20%3Cnovo-tab%3EFiles%3C%2Fnovo-tab%3E%0A%20%20%20%20%3C%2Fnovo-nav%3E%0A%20%20%20%20%3Cspan%20class%3D%22example-spacer%22%3E%3C%2Fspan%3E%0A%20%20%20%20%3Cnovo-button%20theme%3D%22secondary%22%3EButton%3C%2Fnovo-button%3E%0A%20%20%20%20%3Cnovo-action%20icon%3D%22share%22%20tooltip%3D%22Share%22%3E%3C%2Fnovo-action%3E%0A%20%20%20%20%3Cnovo-action%20icon%3D%22print%22%20tooltip%3D%22Print%22%3E%3C%2Fnovo-action%3E%0A%20%20%20%20%3Cnovo-action%20icon%3D%22times%22%20tooltip%3D%22Close%22%3E%3C%2Fnovo-action%3E%0A%20%20%3C%2Fnovo-toolbar%3E%0A%3C%2Fp%3E%0A%0A%3Cp%3E%0A%20%20%3Cnovo-toolbar%20color%3D%22navigation%22%3E%0A%20%20%20%20%3Cnovo-action%20icon%3D%22menu%22%20tooltip%3D%22Main%20Menu%22%3E%3C%2Fnovo-action%3E%0A%20%20%20%20%3Cnovo-divider%20vertical%3E%3C%2Fnovo-divider%3E%0A%20%20%20%20%3Cimg%20src%3D%22assets%2Fimages%2Fbullhorn-logo.svg%22%20width%3D%22120%22%20height%3D%2232%22%20%2F%3E%0A%20%20%20%20%3Cnovo-divider%20vertical%3E%3C%2Fnovo-divider%3E%0A%20%20%20%20%3Cnovo-action%20icon%3D%22add-thin%22%20tooltip%3D%22Fast%20Add%22%3E%3C%2Fnovo-action%3E%0A%20%20%20%20%3Cnovo-divider%20vertical%3E%3C%2Fnovo-divider%3E%0A%20%20%20%20%3Cnovo-search%3E%3C%2Fnovo-search%3E%0A%0A%20%20%20%20%3Cspan%20class%3D%22example-spacer%22%3E%3C%2Fspan%3E%0A%20%20%20%20%3Cnovo-divider%20vertical%3E%3C%2Fnovo-divider%3E%0A%20%20%20%20%3Cnovo-action%20icon%3D%22question%22%20tooltip%3D%22Support%22%3E%3C%2Fnovo-action%3E%0A%20%20%20%20%3Cnovo-divider%20vertical%3E%3C%2Fnovo-divider%3E%0A%20%20%20%20%3Cnovo-action%20icon%3D%22configure-o%22%20tooltip%3D%22Settings%22%3E%3C%2Fnovo-action%3E%0A%20%20%20%20%3Cnovo-divider%20vertical%3E%3C%2Fnovo-divider%3E%0A%20%20%20%20%3Cnovo-avatar%20image%3D%22https%3A%2F%2Frobohash.org%2Fbvkimball%22%20color%3D%22bittersweet%22%3E%3C%2Fnovo-avatar%3E%0A%20%20%3C%2Fnovo-toolbar%3E%0A%3C%2Fp%3E`
    },
    'toast-usage': {
        title: 'Static Toast Usage',
        component: ToastUsageExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Static%20Toast%20Usage%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'toast-usage-example'%2C%0A%20%20%20%20templateUrl%3A%20'toast-usage-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'toast-usage-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20ToastUsageExample%20%7B%0A%20%20public%20themes%3A%20Array%3Cstring%3E%20%3D%20%5B'default'%2C%20'success'%2C%20'info'%2C%20'warning'%2C%20'danger'%5D%3B%0A%20%20public%20icons%3A%20Array%3Cstring%3E%20%3D%20%5B'add'%2C%20'check'%2C%20'clock'%2C%20'lock'%2C%20'caution'%5D%3B%0A%20%20public%20toast%3A%20any%20%3D%20%7B%0A%20%20%20%20theme%3A%20'danger'%2C%0A%20%20%20%20icon%3A%20'caution'%2C%0A%20%20%7D%3B%0A%0A%20%20changeToast()%20%7B%0A%20%20%20%20this.toast%20%3D%20%7B%0A%20%20%20%20%20%20theme%3A%20this.themes%5B(this.themes.indexOf(this.toast.theme)%20%2B%201)%20%25%20this.themes.length%5D%2C%0A%20%20%20%20%20%20icon%3A%20this.icons%5B(this.icons.indexOf(this.toast.icon)%20%2B%201)%20%25%20this.icons.length%5D%2C%0A%20%20%20%20%7D%3B%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cdiv%20class%3D%22fake-card%22%3E%0A%20%20%3Cnovo-header%20theme%3D%22job%22%3E%0A%20%20%20%20%3Cnovo-title%20larger%3E%0A%20%20%20%20%20%20%3Cnovo-icon%3Ejob%3C%2Fnovo-icon%3E%0A%20%20%20%20%20%20%3Cspan%3EApply%20to%20Bull%20Rider%3C%2Fspan%3E%0A%20%20%20%20%3C%2Fnovo-title%3E%0A%20%20%20%20%3Cnovo-action%20icon%3D%22flag%22%3E%3C%2Fnovo-action%3E%0A%20%20%20%20%3Cnovo-action%20icon%3D%22refresh%22%3E%3C%2Fnovo-action%3E%0A%20%20%20%20%3Cnovo-action%20icon%3D%22times%22%3E%3C%2Fnovo-action%3E%0A%20%20%3C%2Fnovo-header%3E%0A%20%20%3Cnovo-toast%20%5Baccent%5D%3D%22toast.accent%22%20%5Btheme%5D%3D%22toast.theme%22%20%5Bicon%5D%3D%22toast.icon%22%20title%3D%22Save%20Failed%22%0A%20%20%20%20message%3D%22Oops!%20Looks%20like%20you're%20missing%20some%20required%20fields%22%3E%3C%2Fnovo-toast%3E%0A%20%20%3Cdiv%20class%3D%22content%22%3E%0A%20%20%20%20%3Cp%3E%0A%20%20%20%20%20%20Lorem%20ipsum%20dolor%20sit%20amet%2C%20consectetur%20adipiscing%20elit%2C%20sed%0A%20%20%20%20%20%20do%20eiusmod%20tempor%20incididunt%20ut%20labore%20et%20dolore%0A%20%20%20%20%20%20magna%20aliqua.%20Ut%20enim%20ad%20minim%20veniam%2C%20quis%20nostrud%0A%20%20%20%20%20%20exercitation%20ullamco%20laboris%20nisi%20ut%20aliquip%20ex%20ea%0A%20%20%20%20%20%20commodo%20consequat.%20Duis%20aute%20irure%20dolor%20in%20reprehenderit%0A%20%20%20%20%20%20in%20voluptate%20velit%20esse%20cillum%20dolore%20eu%20fugiat%20nulla%0A%20%20%20%20%20%20pariatur.%20Excepteur%20sint%20occaecat%20cupidatat%20non%20proident%2C%0A%20%20%20%20%20%20sunt%20in%20culpa%20qui%20officia%20deserunt%20mollit%20anim%20id%0A%20%20%20%20%20%20est%20laborum.%0A%20%20%20%20%3C%2Fp%3E%0A%20%20%20%20%3Cbutton%20(click)%3D%22changeToast()%22%3EChange%20toast!%3C%2Fbutton%3E%0A%20%20%3C%2Fdiv%3E%0A%3C%2Fdiv%3E%0A`
    },
    'toast-service': {
        title: 'Toaster Service Usage',
        component: ToastServiceExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0Aimport%20%7B%20NovoToastService%20%7D%20from%20'novo-elements'%3B%0A%0A%2F**%0A%20*%20%40title%20Toaster%20Service%20Usage%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'toast-service-example'%2C%0A%20%20%20%20templateUrl%3A%20'toast-service-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'toast-service-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20ToastServiceExample%20%7B%0A%20%20public%20options%3A%20any%20%3D%20%7B%0A%20%20%20%20title%3A%20'Title'%2C%0A%20%20%20%20message%3A%20'Some%20Message...'%2C%0A%20%20%7D%3B%0A%0A%20%20constructor(private%20toaster%3A%20NovoToastService)%20%7B%7D%0A%0A%20%20toastToggled(arg)%20%7B%0A%20%20%20%20if%20(arg%20%3D%3D%3D%20'top')%20%7B%0A%20%20%20%20%20%20this.options%20%3D%20%7B%0A%20%20%20%20%20%20%20%20title%3A%20'Top'%2C%0A%20%20%20%20%20%20%20%20message%3A%20'This%20positioning%20is%20fixedTop'%2C%0A%20%20%20%20%20%20%20%20icon%3A%20'coffee'%2C%0A%20%20%20%20%20%20%20%20theme%3A%20'success'%2C%0A%20%20%20%20%20%20%20%20position%3A%20'fixedTop'%2C%0A%20%20%20%20%20%20%7D%3B%0A%20%20%20%20%7D%20else%20if%20(arg%20%3D%3D%3D%20'topAccent')%20%7B%0A%20%20%20%20%20%20this.options%20%3D%20%7B%0A%20%20%20%20%20%20%20%20title%3A%20'Top'%2C%0A%20%20%20%20%20%20%20%20message%3A%20'This%20positioning%20is%20fixedTop%20with%20accent%20style%20and%20is%20closeable'%2C%0A%20%20%20%20%20%20%20%20icon%3A%20'coffee'%2C%0A%20%20%20%20%20%20%20%20theme%3A%20''%2C%0A%20%20%20%20%20%20%20%20accent%3A%20'success'%2C%0A%20%20%20%20%20%20%20%20position%3A%20'fixedTop'%2C%0A%20%20%20%20%20%20%20%20isCloseable%3A%20true%2C%0A%20%20%20%20%20%20%20%20hideDelay%3A%20-1%0A%20%20%20%20%20%20%7D%3B%0A%20%20%20%20%7D%20else%20if%20(arg%20%3D%3D%3D%20'bottom')%20%7B%0A%20%20%20%20%20%20this.options%20%3D%20%7B%0A%20%20%20%20%20%20%20%20title%3A%20'Bottom'%2C%0A%20%20%20%20%20%20%20%20message%3A%20'This%20positioning%20is%20fixedBottom'%2C%0A%20%20%20%20%20%20%20%20icon%3A%20'check'%2C%0A%20%20%20%20%20%20%20%20theme%3A%20'warning-outline'%2C%0A%20%20%20%20%20%20%20%20position%3A%20'fixedBottom'%2C%0A%20%20%20%20%20%20%20%20hideDelay%3A%201000000%2C%0A%20%20%20%20%20%20%7D%3B%0A%20%20%20%20%7D%20else%20if%20(arg%20%3D%3D%3D%20'growlTopRight')%20%7B%0A%20%20%20%20%20%20this.options%20%3D%20%7B%0A%20%20%20%20%20%20%20%20title%3A%20'Growl'%2C%0A%20%20%20%20%20%20%20%20message%3A%20'This%20positioning%20is%20growlTopRight'%2C%0A%20%20%20%20%20%20%20%20icon%3A%20'times'%2C%0A%20%20%20%20%20%20%20%20theme%3A%20'danger'%2C%0A%20%20%20%20%20%20%20%20position%3A%20'growlTopRight'%2C%0A%20%20%20%20%20%20%20%20hideDelay%3A%20100000000%2C%0A%20%20%20%20%20%20%7D%3B%0A%20%20%20%20%7D%20else%20if%20(arg%20%3D%3D%3D%20'growlTopLeft')%20%7B%0A%20%20%20%20%20%20this.options%20%3D%20%7B%0A%20%20%20%20%20%20%20%20title%3A%20'Growl'%2C%0A%20%20%20%20%20%20%20%20message%3A%20'This%20positioning%20is%20growlTopLeft'%2C%0A%20%20%20%20%20%20%20%20icon%3A%20'coffee'%2C%0A%20%20%20%20%20%20%20%20theme%3A%20'ocean'%2C%0A%20%20%20%20%20%20%20%20position%3A%20'growlTopLeft'%2C%0A%20%20%20%20%20%20%20%20hideDelay%3A%20100000000%2C%0A%20%20%20%20%20%20%7D%3B%0A%20%20%20%20%7D%20else%20if%20(arg%20%3D%3D%3D%20'growlBottomRight')%20%7B%0A%20%20%20%20%20%20this.options%20%3D%20%7B%0A%20%20%20%20%20%20%20%20title%3A%20'Growl'%2C%0A%20%20%20%20%20%20%20%20message%3A%20'This%20positioning%20is%20growlTopRight'%2C%0A%20%20%20%20%20%20%20%20icon%3A%20'times'%2C%0A%20%20%20%20%20%20%20%20theme%3A%20'danger'%2C%0A%20%20%20%20%20%20%20%20position%3A%20'growlBottomRight'%2C%0A%20%20%20%20%20%20%20%20isCloseable%3A%20true%2C%0A%20%20%20%20%20%20%7D%3B%0A%20%20%20%20%7D%20else%20if%20(arg%20%3D%3D%3D%20'growlBottomLeft')%20%7B%0A%20%20%20%20%20%20this.options%20%3D%20%7B%0A%20%20%20%20%20%20%20%20title%3A%20'Growl'%2C%0A%20%20%20%20%20%20%20%20message%3A%20'This%20positioning%20is%20growlTopLeft'%2C%0A%20%20%20%20%20%20%20%20icon%3A%20'coffee'%2C%0A%20%20%20%20%20%20%20%20theme%3A%20'ocean'%2C%0A%20%20%20%20%20%20%20%20position%3A%20'growlBottomLeft'%2C%0A%20%20%20%20%20%20%7D%3B%0A%20%20%20%20%7D%0A%20%20%20%20this.toaster.alert(this.options)%3B%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cbutton%20theme%3D%22dialogue%22%20color%3D%22success%22%20icon%3D%22coffee%22%20(click)%3D%22toastToggled('top')%22%20data-automation-id%3D%22toast-trigger%22%3EFixed%20Top%3C%2Fbutton%3E%0A%3Cbutton%20theme%3D%22dialogue%22%20color%3D%22primary%22%20icon%3D%22check%22%20(click)%3D%22toastToggled('bottom')%22%3EFixed%20Bottom%3C%2Fbutton%3E%0A%3Cbutton%20theme%3D%22dialogue%22%20color%3D%22negative%22%20icon%3D%22times%22%20(click)%3D%22toastToggled('growlTopRight')%22%3EGrowl%3A%20Top%20Right%3C%2Fbutton%3E%0A%3Cbutton%20theme%3D%22dialogue%22%20color%3D%22primary%22%20icon%3D%22coffee%22%20(click)%3D%22toastToggled('growlTopLeft')%22%3EGrowl%3A%20Top%20Left%3C%2Fbutton%3E%0A%3Cbutton%20theme%3D%22dialogue%22%20color%3D%22negative%22%20icon%3D%22times%22%20(click)%3D%22toastToggled('growlBottomRight')%22%3EGrowl%3A%20Bottom%20Right%3C%2Fbutton%3E%0A%3Cbutton%20theme%3D%22dialogue%22%20color%3D%22primary%22%20icon%3D%22coffee%22%20(click)%3D%22toastToggled('growlBottomLeft')%22%3EGrowl%3A%20Bottom%20Left%3C%2Fbutton%3E%0A%3Cbutton%20theme%3D%22dialogue%22%20color%3D%22success%22%20icon%3D%22coffee%22%20(click)%3D%22toastToggled('topAccent')%22%20data-automation-id%3D%22toast-trigger%22%3EFixed%20Top%20Accent%3C%2Fbutton%3E%0A`
    },
    'toast-options': {
        title: 'Toast Options Example',
        component: ToastOptionsExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Toast%20Options%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'toast-options-example'%2C%0A%20%20%20%20templateUrl%3A%20'toast-options-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'toast-options-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20ToastOptionsExample%20%7B%0A%20%20activeDate%20%3D%20new%20Date()%3B%0A%20%20selection%3A%20Date%5B%5D%20%3D%20%5B%5D%3B%0A%7D%0A`,
        cssSource: `%3Ahost%20%7B%0A%20%20display%3A%20grid%3B%0A%20%20grid-template-rows%3A%20200px%201fr%3B%0A%20%20gap%3A%202rem%3B%0A%7D%0A`,
        htmlSource: `%3Cdiv%20class%3D%22bgc-light%22%3E%0A%20%20%3Cnovo-toast%0A%20%20%20%20%5Btheme%5D%3D%22style.value%3D%3D%3D'theme'%20%3F%20color.value%20%3A%20null%22%0A%20%20%20%20%5Baccent%5D%3D%22style.value%3D%3D%3D'accent'%20%3F%20color.value%20%3A%20null%22%0A%20%20%20%20%5Bappearance%5D%3D%22appearance.value%22%0A%20%20%20%20%5Bicon%5D%3D%22icon.value%22%0A%20%20%20%20%5Btitle%5D%3D%22title.value%20%3F%20'Save%20Failed'%20%3A%20null%22%0A%20%20%20%20%5Bmargin%5D%3D%22margin.value%20%3F%20'1rem'%20%3A%200%22%0A%20%20%20%20%5BisCloseable%5D%3D%22closeable.value%22%0A%20%20%20%20message%3D%22Oops!%20Looks%20like%20you're%20missing%20some%20required%20fields%22%3E%3C%2Fnovo-toast%3E%0A%3C%2Fdiv%3E%0A%3Cnovo-row%20gap%3D%223rem%22%20align%3D%22flex-start%22%3E%0A%20%20%3Cnovo-field%3E%0A%20%20%20%20%3Cnovo-label%3EAppearance%3C%2Fnovo-label%3E%0A%20%20%20%20%3Cnovo-radio-group%20%23appearance%20appearance%3D%22vertical%22%20value%3D%22banner%22%3E%0A%20%20%20%20%20%20%3Cnovo-radio%20name%3D%22appearance%22%20value%3D%22banner%22%3Ebanner%3C%2Fnovo-radio%3E%0A%20%20%20%20%20%20%3Cnovo-radio%20name%3D%22appearance%22%20value%3D%22growl%22%3Egrowl%3C%2Fnovo-radio%3E%0A%20%20%20%20%3C%2Fnovo-radio-group%3E%0A%20%20%3C%2Fnovo-field%3E%0A%20%20%3Cnovo-field%3E%0A%20%20%20%20%3Cnovo-label%3EStyle%3C%2Fnovo-label%3E%0A%20%20%20%20%3Cnovo-radio-group%20%23style%20appearance%3D%22vertical%22%20value%3D%22theme%22%3E%0A%20%20%20%20%20%20%3Cnovo-radio%20name%3D%22style%22%20value%3D%22theme%22%3Etheme%3C%2Fnovo-radio%3E%0A%20%20%20%20%20%20%3Cnovo-radio%20name%3D%22style%22%20value%3D%22accent%22%3Eaccent%3C%2Fnovo-radio%3E%0A%20%20%20%20%3C%2Fnovo-radio-group%3E%0A%20%20%3C%2Fnovo-field%3E%0A%20%20%3Cnovo-field%3E%0A%20%20%20%20%3Cnovo-label%3EColor%3C%2Fnovo-label%3E%0A%20%20%20%20%3Cnovo-radio-group%20%23color%20appearance%3D%22vertical%22%20value%3D%22info%22%3E%0A%20%20%20%20%20%20%3Cnovo-radio%20name%3D%22color%22%20%5Bvalue%5D%3D%22null%22%3Enone%3C%2Fnovo-radio%3E%0A%20%20%20%20%20%20%3Cnovo-radio%20name%3D%22color%22%20value%3D%22info%22%3Einfo%3C%2Fnovo-radio%3E%0A%20%20%20%20%20%20%3Cnovo-radio%20name%3D%22color%22%20value%3D%22success%22%3Esuccess%3C%2Fnovo-radio%3E%0A%20%20%20%20%20%20%3Cnovo-radio%20name%3D%22color%22%20value%3D%22warning%22%3Ewarning%3C%2Fnovo-radio%3E%0A%20%20%20%20%20%20%3Cnovo-radio%20name%3D%22color%22%20value%3D%22danger%22%3Edanger%3C%2Fnovo-radio%3E%0A%20%20%20%20%3C%2Fnovo-radio-group%3E%0A%20%20%3C%2Fnovo-field%3E%0A%20%20%3Cnovo-field%3E%0A%20%20%20%20%3Cnovo-label%3EIcon%3C%2Fnovo-label%3E%0A%20%20%20%20%3Cnovo-radio-group%20%23icon%20appearance%3D%22vertical%22%20value%3D%22bell%22%3E%0A%20%20%20%20%20%20%3Cnovo-radio%20name%3D%22icon%22%20%5Bvalue%5D%3D%22null%22%3Enone%3C%2Fnovo-radio%3E%0A%20%20%20%20%20%20%3Cnovo-radio%20name%3D%22icon%22%20value%3D%22check%22%3Echeck%3C%2Fnovo-radio%3E%0A%20%20%20%20%20%20%3Cnovo-radio%20name%3D%22icon%22%20value%3D%22bell%22%3Ebell%3C%2Fnovo-radio%3E%0A%20%20%20%20%20%20%3Cnovo-radio%20name%3D%22icon%22%20value%3D%22caution%22%3Ecaution%3C%2Fnovo-radio%3E%0A%20%20%20%20%3C%2Fnovo-radio-group%3E%0A%20%20%3C%2Fnovo-field%3E%0A%20%20%3Cnovo-field%3E%0A%20%20%20%20%3Cnovo-label%3EShow%20Title%3C%2Fnovo-label%3E%0A%20%20%20%20%3Cnovo-radio-group%20%23title%20appearance%3D%22vertical%22%20%5Bvalue%5D%3D%22true%22%3E%0A%20%20%20%20%20%20%3Cnovo-radio%20name%3D%22title%22%20%5Bvalue%5D%3D%22true%22%3EShow%3C%2Fnovo-radio%3E%0A%20%20%20%20%20%20%3Cnovo-radio%20name%3D%22title%22%20%5Bvalue%5D%3D%22false%22%3EHide%3C%2Fnovo-radio%3E%0A%20%20%20%20%3C%2Fnovo-radio-group%3E%0A%20%20%3C%2Fnovo-field%3E%0A%20%20%3Cnovo-field%3E%0A%20%20%20%20%3Cnovo-label%3EMargin%3C%2Fnovo-label%3E%0A%20%20%20%20%3Cnovo-radio-group%20%23margin%20appearance%3D%22vertical%22%20%5Bvalue%5D%3D%22false%22%3E%0A%20%20%20%20%20%20%3Cnovo-radio%20name%3D%22margin%22%20%5Bvalue%5D%3D%22false%22%3Enone%3C%2Fnovo-radio%3E%0A%20%20%20%20%20%20%3Cnovo-radio%20name%3D%22margin%22%20%5Bvalue%5D%3D%22true%22%3Einset%3C%2Fnovo-radio%3E%0A%20%20%20%20%3C%2Fnovo-radio-group%3E%0A%20%20%3C%2Fnovo-field%3E%0A%20%20%3Cnovo-field%3E%0A%20%20%20%20%3Cnovo-label%3ECloseable%3C%2Fnovo-label%3E%0A%20%20%20%20%3Cnovo-radio-group%20%23closeable%20appearance%3D%22vertical%22%20%5Bvalue%5D%3D%22false%22%3E%0A%20%20%20%20%20%20%3Cnovo-radio%20name%3D%22margin%22%20%5Bvalue%5D%3D%22false%22%3Efalse%3C%2Fnovo-radio%3E%0A%20%20%20%20%20%20%3Cnovo-radio%20name%3D%22margin%22%20%5Bvalue%5D%3D%22true%22%3Etrue%3C%2Fnovo-radio%3E%0A%20%20%20%20%3C%2Fnovo-radio-group%3E%0A%20%20%3C%2Fnovo-field%3E%0A%3C%2Fnovo-row%3E%0A`
    },
    'toast-actions': {
        title: 'Toaster Actions Usage',
        component: ToastActionsExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0Aimport%20%7B%20NovoToastService%20%7D%20from%20'novo-elements'%3B%0A%0A%2F**%0A%20*%20%40title%20Toaster%20Actions%20Usage%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'toast-actions-example'%2C%0A%20%20%20%20templateUrl%3A%20'toast-actions-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'toast-actions-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20ToastActionsExample%20%7B%0A%20%20public%20options%3A%20any%20%3D%20%7B%0A%20%20%20%20title%3A%20'Title'%2C%0A%20%20%20%20message%3A%20'Some%20Message...'%2C%0A%20%20%20%20action%3A%20'Click%20Me'%2C%0A%20%20%7D%3B%0A%0A%20%20constructor(private%20toaster%3A%20NovoToastService)%20%7B%7D%0A%0A%20%20toastToggled(arg)%20%7B%0A%20%20%20%20if%20(arg%20%3D%3D%3D%20'top')%20%7B%0A%20%20%20%20%20%20this.options%20%3D%20%7B%0A%20%20%20%20%20%20%20%20title%3A%20'Top'%2C%0A%20%20%20%20%20%20%20%20message%3A%20'This%20positioning%20is%20fixedTop'%2C%0A%20%20%20%20%20%20%20%20action%3A%20'Click%20Me'%2C%0A%20%20%20%20%20%20%20%20icon%3A%20'coffee'%2C%0A%20%20%20%20%20%20%20%20theme%3A%20'success'%2C%0A%20%20%20%20%20%20%20%20position%3A%20'fixedTop'%2C%0A%20%20%20%20%20%20%7D%3B%0A%20%20%20%20%7D%20else%20if%20(arg%20%3D%3D%3D%20'bottom')%20%7B%0A%20%20%20%20%20%20this.options%20%3D%20%7B%0A%20%20%20%20%20%20%20%20title%3A%20'Bottom'%2C%0A%20%20%20%20%20%20%20%20message%3A%20'This%20positioning%20is%20fixedBottom'%2C%0A%20%20%20%20%20%20%20%20action%3A%20'Click%20Me'%2C%0A%20%20%20%20%20%20%20%20icon%3A%20'check'%2C%0A%20%20%20%20%20%20%20%20theme%3A%20'warning-outline'%2C%0A%20%20%20%20%20%20%20%20position%3A%20'fixedBottom'%2C%0A%20%20%20%20%20%20%20%20hideDelay%3A%201000000%2C%0A%20%20%20%20%20%20%7D%3B%0A%20%20%20%20%7D%20else%20if%20(arg%20%3D%3D%3D%20'growlTopRight')%20%7B%0A%20%20%20%20%20%20this.options%20%3D%20%7B%0A%20%20%20%20%20%20%20%20title%3A%20'Growl'%2C%0A%20%20%20%20%20%20%20%20message%3A%20'This%20positioning%20is%20growlTopRight'%2C%0A%20%20%20%20%20%20%20%20action%3A%20'Click%20Me'%2C%0A%20%20%20%20%20%20%20%20icon%3A%20'times'%2C%0A%20%20%20%20%20%20%20%20theme%3A%20'danger'%2C%0A%20%20%20%20%20%20%20%20position%3A%20'growlTopRight'%2C%0A%20%20%20%20%20%20%20%20hideDelay%3A%20100000000%2C%0A%20%20%20%20%20%20%7D%3B%0A%20%20%20%20%7D%20else%20if%20(arg%20%3D%3D%3D%20'growlTopLeft')%20%7B%0A%20%20%20%20%20%20this.options%20%3D%20%7B%0A%20%20%20%20%20%20%20%20title%3A%20'Growl'%2C%0A%20%20%20%20%20%20%20%20message%3A%20'This%20positioning%20is%20growlTopLeft'%2C%0A%20%20%20%20%20%20%20%20action%3A%20'Click%20Me'%2C%0A%20%20%20%20%20%20%20%20icon%3A%20'coffee'%2C%0A%20%20%20%20%20%20%20%20theme%3A%20'ocean'%2C%0A%20%20%20%20%20%20%20%20position%3A%20'growlTopLeft'%2C%0A%20%20%20%20%20%20%20%20hideDelay%3A%20100000000%2C%0A%20%20%20%20%20%20%7D%3B%0A%20%20%20%20%7D%20else%20if%20(arg%20%3D%3D%3D%20'growlBottomRight')%20%7B%0A%20%20%20%20%20%20this.options%20%3D%20%7B%0A%20%20%20%20%20%20%20%20title%3A%20'Growl'%2C%0A%20%20%20%20%20%20%20%20message%3A%20'This%20positioning%20is%20growlTopRight'%2C%0A%20%20%20%20%20%20%20%20action%3A%20'Click%20Me'%2C%0A%20%20%20%20%20%20%20%20icon%3A%20'times'%2C%0A%20%20%20%20%20%20%20%20theme%3A%20'danger'%2C%0A%20%20%20%20%20%20%20%20position%3A%20'growlBottomRight'%2C%0A%20%20%20%20%20%20%7D%3B%0A%20%20%20%20%7D%20else%20if%20(arg%20%3D%3D%3D%20'growlBottomLeft')%20%7B%0A%20%20%20%20%20%20this.options%20%3D%20%7B%0A%20%20%20%20%20%20%20%20title%3A%20'Growl'%2C%0A%20%20%20%20%20%20%20%20message%3A%20'This%20positioning%20is%20growlTopLeft'%2C%0A%20%20%20%20%20%20%20%20action%3A%20'Click%20Me'%2C%0A%20%20%20%20%20%20%20%20icon%3A%20'coffee'%2C%0A%20%20%20%20%20%20%20%20theme%3A%20'ocean'%2C%0A%20%20%20%20%20%20%20%20position%3A%20'growlBottomLeft'%2C%0A%20%20%20%20%20%20%7D%3B%0A%20%20%20%20%7D%0A%20%20%20%20this.toaster.alert(this.options).then((toast)%20%3D%3E%20%7B%0A%20%20%20%20%20%20toast.onAction(()%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20alert('Clicked%20Me')%3B%0A%20%20%20%20%20%20%7D)%3B%0A%20%20%20%20%7D)%3B%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cbutton%20theme%3D%22dialogue%22%20color%3D%22success%22%20icon%3D%22coffee%22%20(click)%3D%22toastToggled('top')%22%20data-automation-id%3D%22toast-trigger%22%3EFixed%20Top%3C%2Fbutton%3E%0A%3Cbutton%20theme%3D%22dialogue%22%20color%3D%22primary%22%20icon%3D%22check%22%20(click)%3D%22toastToggled('bottom')%22%3EFixed%20Bottom%3C%2Fbutton%3E%0A%3Cbutton%20theme%3D%22dialogue%22%20color%3D%22negative%22%20icon%3D%22times%22%20(click)%3D%22toastToggled('growlTopRight')%22%3EGrowl%3A%20Top%20Right%3C%2Fbutton%3E%0A%3Cbutton%20theme%3D%22dialogue%22%20color%3D%22primary%22%20icon%3D%22coffee%22%20(click)%3D%22toastToggled('growlTopLeft')%22%3EGrowl%3A%20Top%20Left%3C%2Fbutton%3E%0A%3Cbutton%20theme%3D%22dialogue%22%20color%3D%22negative%22%20icon%3D%22times%22%20(click)%3D%22toastToggled('growlBottomRight')%22%3EGrowl%3A%20Bottom%20Right%3C%2Fbutton%3E%0A%3Cbutton%20theme%3D%22dialogue%22%20color%3D%22primary%22%20icon%3D%22coffee%22%20(click)%3D%22toastToggled('growlBottomLeft')%22%3EGrowl%3A%20Bottom%20Left%3C%2Fbutton%3E%0A`
    },
    'icon-tip-well': {
        title: 'Tip Well with Icon Example',
        component: IconTipWellExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Tip%20Well%20with%20Icon%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'icon-tip-well-example'%2C%0A%20%20%20%20templateUrl%3A%20'icon-tip-well-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'icon-tip-well-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20IconTipWellExample%20%7B%0A%20%20public%20demoTip%3A%20string%20%3D%0A%20%20%20%20'Sed%20sodales%20ligula%20et%20fermentum%20bibendum.%20Aliquam%20tincidunt%20sagittis%20leo%20eget%20auctor.%20Fusce%20eu%20sagittis%20metus%2C%20ut%20viverra%20magna.%20Mauris%20mollis%20nisl%20nec%20libero%20tincidunt%20posuere.'%3B%0A%0A%20%20clearLocalStorage()%20%7B%0A%20%20%20%20localStorage.removeItem('novo-tw_Demo')%3B%0A%20%20%20%20location.reload()%3B%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cnovo-tip-well%20name%3D%22Demo%22%20%5Btip%5D%3D%22demoTip%22%20icon%3D%22info%22%3E%3C%2Fnovo-tip-well%3E%0A%0A%3Cp%3EDid%20you%20hide%20the%20TipWell%3F%3C%2Fp%3E%0A%0A%3Cbutton%20theme%3D%22secondary%22%20(click)%3D%22clearLocalStorage()%22%3EReset%3C%2Fbutton%3E%20localStorage%20and%20Reload`
    },
    'html-tip-well': {
        title: 'Tip Well with HTML Example',
        component: HtmlTipWellExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Tip%20Well%20with%20HTML%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'html-tip-well-example'%2C%0A%20%20%20%20templateUrl%3A%20'html-tip-well-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'html-tip-well-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20HtmlTipWellExample%20%7B%0A%20%20public%20demoHtmlTip%3A%20string%20%3D%20%60%0A%20%20%20%20%3Ch2%3ETitle%3C%2Fh2%3E%0A%20%20%20%20%3Cp%3E%0A%20%20%20%20%20%20%3Cdiv%20style%3D%22color%3Ared%22%3EThis%20text%20is%20RED%3C%2Fdiv%3E%0A%20%20%20%20%20%20%3Cdiv%3E%3Cb%3EThis%20text%20is%20BOLD%3C%2Fb%3E%3C%2Fdiv%3E%0A%20%20%20%20%20%20%3Cdiv%3E%3Ci%3EThis%20text%20is%20ITALIC%3C%2Fi%3E%3C%2Fdiv%3E%0A%20%20%20%20%3C%2Fp%3E%0A%20%20%20%20%3Ctable%3E%0A%20%20%20%20%20%20%20%20%3Ctr%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%3Cth%20width%3D%22305px%22%3EFirstname%3C%2Fth%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%3Cth%20width%3D%22305px%22%3ELastname%3C%2Fth%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%3Cth%3EAge%3C%2Fth%3E%0A%20%20%20%20%20%20%20%20%3C%2Ftr%3E%0A%20%20%20%20%20%20%20%20%3Ctr%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%3Ctd%3EJeff%3C%2Ftd%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%3Ctd%3ESmith%3C%2Ftd%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%3Ctd%3E20%3C%2Ftd%3E%0A%20%20%20%20%20%20%20%20%3C%2Ftr%3E%0A%20%20%20%20%20%20%20%20%3Ctr%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%3Ctd%3ESteve%3C%2Ftd%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%3Ctd%3EWhite%3C%2Ftd%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%3Ctd%3E25%3C%2Ftd%3E%0A%20%20%20%20%20%20%20%20%3C%2Ftr%3E%0A%20%20%20%20%3C%2Ftable%3E%60%3B%0A%0A%20%20clearLocalStorage()%20%7B%0A%20%20%20%20localStorage.removeItem('novo-tw_Demo')%3B%0A%20%20%20%20location.reload()%3B%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cnovo-tip-well%20name%3D%22Demo%22%20%5Bsanitize%5D%3D%22false%22%20%5Btip%5D%3D%22demoHtmlTip%22%3E%3C%2Fnovo-tip-well%3E%0A%0A%3Cp%3EDid%20you%20hide%20the%20TipWell%3F%3C%2Fp%3E%0A%0A%3Cbutton%20theme%3D%22secondary%22%20(click)%3D%22clearLocalStorage()%22%3EReset%3C%2Fbutton%3E%20localStorage%20and%20Reload%0A`
    },
    'buttonless-tip-well': {
        title: 'Tip Well with No Button Example',
        component: ButtonlessTipWellExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Tip%20Well%20with%20No%20Button%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'buttonless-tip-well-example'%2C%0A%20%20%20%20templateUrl%3A%20'buttonless-tip-well-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'buttonless-tip-well-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20ButtonlessTipWellExample%20%7B%0A%20%20public%20demoTip%3A%20string%20%3D%0A%20%20%20%20'Sed%20sodales%20ligula%20et%20fermentum%20bibendum.%20Aliquam%20tincidunt%20sagittis%20leo%20eget%20auctor.%20Fusce%20eu%20sagittis%20metus%2C%20ut%20viverra%20magna.%20Mauris%20mollis%20nisl%20nec%20libero%20tincidunt%20posuere.'%3B%0A%0A%20%20clearLocalStorage()%20%7B%0A%20%20%20%20localStorage.removeItem('novo-tw_Demo')%3B%0A%20%20%20%20location.reload()%3B%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cnovo-tip-well%20name%3D%22Demo%22%20%5Btip%5D%3D%22demoTip%22%20%5Bbutton%5D%3D%22false%22%3E%3C%2Fnovo-tip-well%3E%0A%0A%3Cp%3EDid%20you%20hide%20the%20TipWell%3F%3C%2Fp%3E%0A%0A%3Cbutton%20theme%3D%22secondary%22%20(click)%3D%22clearLocalStorage()%22%3EReset%3C%2Fbutton%3E%20localStorage%20and%20Reload%0A`
    },
    'basic-tip-well': {
        title: 'Basic Tip Well Example',
        component: BasicTipWellExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Basic%20Tip%20Well%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'basic-tip-well-example'%2C%0A%20%20%20%20templateUrl%3A%20'basic-tip-well-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'basic-tip-well-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20BasicTipWellExample%20%7B%0A%20%20public%20demoTip%3A%20string%20%3D%0A%20%20%20%20'Sed%20sodales%20ligula%20et%20fermentum%20bibendum.%20Aliquam%20tincidunt%20sagittis%20leo%20eget%20auctor.%20Fusce%20eu%20sagittis%20metus%2C%20ut%20viverra%20magna.%20Mauris%20mollis%20nisl%20nec%20libero%20tincidunt%20posuere.'%3B%0A%0A%20%20public%20clearLocalStorage()%20%7B%0A%20%20%20%20localStorage.removeItem('novo-tw_Demo')%3B%0A%20%20%20%20location.reload()%3B%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cnovo-tip-well%20name%3D%22Demo%22%20%5Btip%5D%3D%22demoTip%22%3E%3C%2Fnovo-tip-well%3E%0A%0A%3Cp%3EDid%20you%20hide%20the%20TipWell%3F%3C%2Fp%3E%0A%0A%3Cbutton%20theme%3D%22secondary%22%20(click)%3D%22clearLocalStorage()%22%3EReset%3C%2Fbutton%3E%20localStorage%20and%20Reload%0A`
    },
    'tabbed-group-picker-quick-select': {
        title: 'Tabbed Group Picker - Quick Select Example',
        component: TabbedGroupPickerQuickSelectExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0Aimport%20%7B%20ChildTab%2C%20TabbedGroupPickerTab%20%7D%20from%20'novo-elements'%3B%0A%0A%2F**%0A%20*%20%40title%20Tabbed%20Group%20Picker%20-%20Quick%20Select%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'tabbed-group-picker-quick-select-example'%2C%0A%20%20%20%20templateUrl%3A%20'tabbed-group-picker-quick-select-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'..%2Ftabbed-group-picker-example.scss'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20TabbedGroupPickerQuickSelectExample%20%7B%0A%20%20getAnimals%20%3D%20()%3A%20%7B%20animalId%3A%20number%3B%20name%3A%20string%20%7D%5B%5D%20%3D%3E%0A%20%20%20%20%5B'Dog'%2C%20'Cat'%2C%20'Mouse'%2C%20'Horse'%2C%20'Cow'%2C%20'Chicken'%2C%20'Pig'%2C%20'Sheep'%2C%20'Goat'%2C%20'Goose'%5D.map((name%2C%20index)%20%3D%3E%20(%7B%0A%20%20%20%20%20%20name%2C%0A%20%20%20%20%20%20animalId%3A%20index%20%2B%201%2C%0A%20%20%20%20%7D))%3B%0A%20%20public%20example_tab%20%3D%20%5B%0A%20%20%20%20%7B%0A%20%20%20%20%20%20typeName%3A%20'animals'%2C%0A%20%20%20%20%20%20typeLabel%3A%20'Animals'%2C%0A%20%20%20%20%20%20valueField%3A%20'animalId'%2C%0A%20%20%20%20%20%20labelField%3A%20'name'%2C%0A%20%20%20%20%20%20data%3A%20this.getAnimals()%2C%0A%20%20%20%20%7D%2C%0A%20%20%5D%3B%0A%20%20public%20example_quickSelectConfig%20%3D%20%7B%0A%20%20%20%20label%3A%20'Quick%20Select'%2C%0A%20%20%20%20items%3A%20%5B%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20childTypeName%3A%20'animals'%2C%0A%20%20%20%20%20%20%20%20children%3A%20%5B2%5D%2C%0A%20%20%20%20%20%20%20%20label%3A%20'Pure%20Evil'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20childTypeName%3A%20'animals'%2C%0A%20%20%20%20%20%20%20%20children%3A%20%5B1%2C%206%2C%209%5D%2C%0A%20%20%20%20%20%20%20%20label%3A%20'My%20Pets'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20childTypeName%3A%20'animals'%2C%0A%20%20%20%20%20%20%20%20all%3A%20true%2C%0A%20%20%20%20%20%20%20%20label%3A%20'All%20Animals'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%5D%2C%0A%20%20%7D%3B%0A%0A%20%20public%20buttonLabel%3A%20string%20%3D%20'Nothing%20Selected'%3B%0A%20%20public%20example_buttonConfig%20%3D%20%7B%0A%20%20%20%20theme%3A%20'select'%2C%0A%20%20%20%20side%3A%20'right'%2C%0A%20%20%20%20icon%3A%20'collapse'%2C%0A%20%20%20%20label%3A%20this.buttonLabel%2C%0A%20%20%20%20selector%3A%20'buttonConfig'%2C%0A%20%20%7D%3B%0A%0A%20%20public%20selectedAnimals%3A%20string%5B%5D%20%3D%20%5B%5D%3B%0A%0A%20%20onSelectionChange(selectedData%3A%20TabbedGroupPickerTab%5B%5D)%20%7B%0A%20%20%20%20this.selectedAnimals%20%3D%20(selectedData.find((%7B%20typeName%20%7D)%20%3D%3E%20typeName%20%3D%3D%3D%20'animals')%20as%20ChildTab).data.map(%0A%20%20%20%20%20%20(%7B%20animalId%20%7D%3A%20%7B%20animalId%3A%20string%20%7D)%20%3D%3E%20animalId%2C%0A%20%20%20%20)%3B%0A%20%20%20%20this.example_buttonConfig.label%20%3D%20this.buildButtonLabel()%3B%0A%20%20%7D%0A%0A%20%20buildButtonLabel()%3A%20string%20%7B%0A%20%20%20%20return%20this.selectedAnimals.length%20%3F%20%60Animals%20(%24%7Bthis.selectedAnimals.length%7D)%60%20%3A%20'Nothing%20Selected'%3B%0A%20%20%7D%0A%7D%0A`,
        cssSource: ``,
        htmlSource: `%3Cdiv%20class%3D%22tabbed-group-picker-example%22%3E%0A%20%20%3Cnovo-tabbed-group-picker%0A%20%20%20%20%5Btabs%5D%3D%22example_tab%22%0A%20%20%20%20%5BquickSelectConfig%5D%3D%22example_quickSelectConfig%22%0A%20%20%20%20%5BbuttonConfig%5D%3D%22example_buttonConfig%22%0A%20%20%20%20(selectionChange)%3D%22onSelectionChange(%24event)%22%0A%20%20%3E%3C%2Fnovo-tabbed-group-picker%3E%0A%20%20%3Cdiv%20class%3D%22selected-data-wrapper%22%3E%0A%20%20%20%20%3Ch6%3ESelected%20Animal%20IDs%3A%3C%2Fh6%3E%0A%20%20%20%20%3Cdiv%3E%7B%7B%20selectedAnimals.join('%2C%20')%20%7D%7D%3C%2Fdiv%3E%0A%20%20%3C%2Fdiv%3E%0A%3C%2Fdiv%3E%0A`
    },
    'tabbed-group-picker-no-selection': {
        title: 'Tabbed Group Picker - Basic Example',
        component: TabbedGroupPickerNoSelectionExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Tabbed%20Group%20Picker%20-%20Basic%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'tabbed-group-picker-no-selection-example'%2C%0A%20%20%20%20templateUrl%3A%20'tabbed-group-picker-no-selection-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'..%2Ftabbed-group-picker-example.scss'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20TabbedGroupPickerNoSelectionExample%20%7B%0A%20%20getActions%20%3D%20()%3A%20%7B%20actionId%3A%20number%3B%20name%3A%20string%20%7D%5B%5D%20%3D%3E%0A%20%20%20%20%5B'Run'%2C%20'Jump'%2C%20'Swim'%2C%20'Climb'%2C%20'Walk'%2C%20'Fly'%5D.map((name%2C%20index)%20%3D%3E%20(%7B%0A%20%20%20%20%20%20name%2C%0A%20%20%20%20%20%20actionId%3A%20index%20%2B%201%0A%20%20%20%20%7D))%3B%0A%0A%20%20actionsTab%20%3D%20%7B%0A%20%20%20%20typeName%3A%20'actions'%2C%0A%20%20%20%20typeLabel%3A%20'Actions'%2C%0A%20%20%20%20valueField%3A%20'actionId'%2C%0A%20%20%20%20labelField%3A%20'name'%2C%0A%20%20%20%20data%3A%20this.getActions()%2C%0A%20%20%7D%3B%0A%0A%20%20example_tab%20%3D%20%5B%0A%20%20%20%20this.actionsTab%0A%20%20%5D%3B%0A%0A%20%20public%20example_buttonConfig%20%3D%20%7B%0A%20%20%20%20theme%3A%20'select'%2C%0A%20%20%20%20side%3A%20'right'%2C%0A%20%20%20%20icon%3A%20'collapse'%2C%0A%20%20%20%20label%3A%20'Open%20action%20activation%20window'%2C%0A%20%20%20%20selector%3A%20'buttonConfig'%2C%0A%20%20%7D%3B%0A%0A%20%20public%20lastSelection%3A%20string%3B%0A%0A%20%20onActivation(selectedData%3A%20%7B%20actionId%3A%20number%3B%20name%3A%20string%20%7D)%20%7B%0A%20%20%20%20this.lastSelection%20%3D%20selectedData.name%3B%0A%20%20%7D%0A%7D%0A`,
        cssSource: ``,
        htmlSource: `%3Cdiv%20class%3D%22tabbed-group-picker-example%22%3E%0A%20%20%3Cnovo-tabbed-group-picker%0A%20%20%20%20%5Btabs%5D%3D%22example_tab%22%0A%20%20%20%20%5BselectionEnabled%5D%3D%22false%22%0A%20%20%20%20%5BbuttonConfig%5D%3D%22example_buttonConfig%22%0A%20%20%20%20(activation)%3D%22onActivation(%24event)%22%0A%20%20%3E%3C%2Fnovo-tabbed-group-picker%3E%0A%20%20%3Cdiv%20class%3D%22selected-data-wrapper%22%3E%0A%20%20%20%20%3Ch6%3ELast%20selection%3A%3C%2Fh6%3E%0A%20%20%20%20%3Cdiv%3E%7B%7B%20lastSelection%20%7D%7D%3C%2Fdiv%3E%0A%20%20%3C%2Fdiv%3E%0A%3C%2Fdiv%3E%0A`
    },
    'tabbed-group-picker-groups': {
        title: 'Tabbed Group Picker - Groups Example',
        component: TabbedGroupPickerGroupsExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0Aimport%20%7B%20ChildTab%2C%20ParentTab%2C%20TabbedGroupPickerTab%20%7D%20from%20'novo-elements'%3B%0A%0A%2F**%0A%20*%20%40title%20Tabbed%20Group%20Picker%20-%20Groups%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'tabbed-group-picker-groups-example'%2C%0A%20%20%20%20templateUrl%3A%20'tabbed-group-picker-groups-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'..%2Ftabbed-group-picker-example.scss'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20TabbedGroupPickerGroupsExample%20%7B%0A%20%20getAnimals%20%3D%20()%3A%20%7B%20animalId%3A%20number%3B%20name%3A%20string%20%7D%5B%5D%20%3D%3E%0A%20%20%20%20%5B'Dog'%2C%20'Cat'%2C%20'Mouse'%2C%20'Horse'%2C%20'Cow'%2C%20'Chicken'%2C%20'Pig'%2C%20'Sheep'%2C%20'Goat'%2C%20'Goose'%5D.map((name%2C%20index)%20%3D%3E%20(%7B%0A%20%20%20%20%20%20name%2C%0A%20%20%20%20%20%20animalId%3A%20index%20%2B%201%2C%0A%20%20%20%20%7D))%3B%0A%0A%20%20getAnimalCategories%20%3D%20()%3A%20%7B%20groupId%3A%20number%3B%20name%3A%20string%3B%20children%3F%3A%20%7B%20animalId%3A%20number%3B%20name%3A%20string%20%7D%5B%5D%20%7D%5B%5D%20%3D%3E%20%7B%0A%20%20%20%20const%20animals%20%3D%20this.getAnimals()%3B%0A%20%20%20%20const%20birds%20%3D%20%5B'Chicken'%2C%20'Goose'%5D.map((name)%20%3D%3E%20animals.find((animal)%20%3D%3E%20animal.name%20%3D%3D%3D%20name))%3B%0A%20%20%20%20const%20livestock%20%3D%20%5B'Cow'%2C%20'Pig'%2C%20'Sheep'%2C%20'Goat'%5D.map((name)%20%3D%3E%20animals.find((animal)%20%3D%3E%20animal.name%20%3D%3D%3D%20name))%3B%0A%20%20%20%20return%20%5B%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20name%3A%20'Birds'%2C%0A%20%20%20%20%20%20%20%20groupId%3A%201%2C%0A%20%20%20%20%20%20%20%20children%3A%20birds%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20name%3A%20'Livestock'%2C%0A%20%20%20%20%20%20%20%20groupId%3A%202%2C%0A%20%20%20%20%20%20%20%20children%3A%20livestock%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%5D%3B%0A%20%20%7D%3B%0A%20%20example_tab%20%3D%20%5B%0A%20%20%20%20%7B%0A%20%20%20%20%20%20typeName%3A%20'animals'%2C%0A%20%20%20%20%20%20typeLabel%3A%20'Animals'%2C%0A%20%20%20%20%20%20valueField%3A%20'animalId'%2C%0A%20%20%20%20%20%20labelField%3A%20'name'%2C%0A%20%20%20%20%20%20data%3A%20this.getAnimals()%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20typeName%3A%20'animalCategories'%2C%0A%20%20%20%20%20%20typeLabel%3A%20'Animal%20Categories'%2C%0A%20%20%20%20%20%20valueField%3A%20'groupId'%2C%0A%20%20%20%20%20%20labelField%3A%20'name'%2C%0A%20%20%20%20%20%20childTypeName%3A%20'animals'%2C%0A%20%20%20%20%20%20data%3A%20this.getAnimalCategories()%2C%0A%20%20%20%20%7D%2C%0A%20%20%5D%3B%0A%20%20public%20example_quickSelectConfig%20%3D%20%7B%0A%20%20%20%20label%3A%20'Quick%20Select'%2C%0A%20%20%20%20items%3A%20%5B%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20childTypeName%3A%20'animals'%2C%0A%20%20%20%20%20%20%20%20children%3A%20%5B2%5D%2C%0A%20%20%20%20%20%20%20%20label%3A%20'Pure%20Evil'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20childTypeName%3A%20'animals'%2C%0A%20%20%20%20%20%20%20%20children%3A%20%5B1%2C%206%2C%209%5D%2C%0A%20%20%20%20%20%20%20%20label%3A%20'My%20Pets'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20childTypeName%3A%20'animals'%2C%0A%20%20%20%20%20%20%20%20all%3A%20true%2C%0A%20%20%20%20%20%20%20%20label%3A%20'All%20Animals'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%5D%2C%0A%20%20%7D%3B%0A%0A%20%20public%20buttonLabel%3A%20string%20%3D%20'Nothing%20Selected'%3B%0A%20%20public%20example_buttonConfig%20%3D%20%7B%0A%20%20%20%20theme%3A%20'select'%2C%0A%20%20%20%20side%3A%20'right'%2C%0A%20%20%20%20icon%3A%20'collapse'%2C%0A%20%20%20%20label%3A%20this.buttonLabel%2C%0A%20%20%20%20selector%3A%20'buttonConfig'%2C%0A%20%20%7D%3B%0A%0A%20%20selectedAnimals%3A%20string%5B%5D%20%3D%20%5B%5D%3B%0A%20%20selectedAnimalCategories%3A%20string%5B%5D%20%3D%20%5B%5D%3B%0A%0A%20%20onSelectionChange(selectedData%3A%20TabbedGroupPickerTab%5B%5D)%20%7B%0A%20%20%20%20this.selectedAnimals%20%3D%20(selectedData.find((%7B%20typeName%20%7D)%20%3D%3E%20typeName%20%3D%3D%3D%20'animals')%20as%20ChildTab).data.map((%7B%20animalId%20%7D)%20%3D%3E%20animalId)%3B%0A%20%20%20%20this.selectedAnimalCategories%20%3D%20(selectedData.find((%7B%20typeName%20%7D)%20%3D%3E%20typeName%20%3D%3D%3D%20'animalCategories')%20as%20ParentTab).data.map(%0A%20%20%20%20%20%20(%7B%20groupId%20%7D)%20%3D%3E%20groupId%2C%0A%20%20%20%20)%3B%0A%20%20%20%20this.example_buttonConfig.label%20%3D%20this.buildButtonLabel()%3B%0A%20%20%7D%0A%0A%20%20buildButtonLabel()%3A%20string%20%7B%0A%20%20%20%20return%20this.selectedAnimals.length%20%3F%20%60Animals%20(%24%7Bthis.selectedAnimals.length%7D)%60%20%3A%20'Nothing%20Selected'%3B%0A%20%20%7D%0A%7D%0A`,
        cssSource: ``,
        htmlSource: `%3Cdiv%20class%3D%22tabbed-group-picker-example%22%3E%0A%20%20%3Cnovo-tabbed-group-picker%0A%20%20%20%20%5Btabs%5D%3D%22example_tab%22%0A%20%20%20%20%5BquickSelectConfig%5D%3D%22example_quickSelectConfig%22%0A%20%20%20%20%5BbuttonConfig%5D%3D%22example_buttonConfig%22%0A%20%20%20%20(selectionChange)%3D%22onSelectionChange(%24event)%22%0A%20%20%3E%3C%2Fnovo-tabbed-group-picker%3E%0A%20%20%3Cdiv%20class%3D%22selected-data-wrapper%22%3E%0A%20%20%20%20%3Ch6%3ESelected%20Animal%20IDs%3A%3C%2Fh6%3E%0A%20%20%20%20%3Cdiv%3E%7B%7B%20selectedAnimals.join('%2C%20')%20%7D%7D%3C%2Fdiv%3E%0A%20%20%20%20%3Ch6%3ESelected%20Animal%20Category%20IDs%3A%3C%2Fh6%3E%0A%20%20%20%20%3Cdiv%3E%7B%7B%20selectedAnimalCategories.join('%2C%20')%20%7D%7D%3C%2Fdiv%3E%0A%20%20%3C%2Fdiv%3E%0A%3C%2Fdiv%3E%0A`
    },
    'tabbed-group-picker-footer': {
        title: 'Tabbed Group Picker - Footer Example',
        component: TabbedGroupPickerFooterExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0Aimport%20%7B%20ChildTab%2C%20ParentTab%2C%20TabbedGroupPickerTab%20%7D%20from%20'novo-elements'%3B%0A%0A%2F**%0A%20*%20%40title%20Tabbed%20Group%20Picker%20-%20Footer%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'tabbed-group-picker-footer-example'%2C%0A%20%20%20%20templateUrl%3A%20'tabbed-group-picker-footer-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'..%2Ftabbed-group-picker-example.scss'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20TabbedGroupPickerFooterExample%20%7B%0A%20%20getAnimals%20%3D%20()%3A%20%7B%20animalId%3A%20number%3B%20name%3A%20string%20%7D%5B%5D%20%3D%3E%0A%20%20%20%20%5B'Dog'%2C%20'Cat'%2C%20'Mouse'%2C%20'Horse'%2C%20'Cow'%2C%20'Chicken'%2C%20'Pig'%2C%20'Sheep'%2C%20'Goat'%2C%20'Goose'%5D.map((name%2C%20index)%20%3D%3E%20(%7B%0A%20%20%20%20%20%20name%2C%0A%20%20%20%20%20%20animalId%3A%20index%20%2B%201%2C%0A%20%20%20%20%7D))%3B%0A%0A%20%20getAnimalCategories%20%3D%20()%3A%20%7B%20groupId%3A%20number%3B%20name%3A%20string%3B%20children%3F%3A%20%7B%20animalId%3A%20number%3B%20name%3A%20string%20%7D%5B%5D%20%7D%5B%5D%20%3D%3E%20%7B%0A%20%20%20%20const%20animals%20%3D%20this.getAnimals()%3B%0A%20%20%20%20const%20birds%20%3D%20%5B'Chicken'%2C%20'Goose'%5D.map((name)%20%3D%3E%20animals.find((animal)%20%3D%3E%20animal.name%20%3D%3D%3D%20name))%3B%0A%20%20%20%20const%20livestock%20%3D%20%5B'Cow'%2C%20'Pig'%2C%20'Sheep'%2C%20'Goat'%5D.map((name)%20%3D%3E%20animals.find((animal)%20%3D%3E%20animal.name%20%3D%3D%3D%20name))%3B%0A%20%20%20%20return%20%5B%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20name%3A%20'Birds'%2C%0A%20%20%20%20%20%20%20%20groupId%3A%201%2C%0A%20%20%20%20%20%20%20%20children%3A%20birds%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20name%3A%20'Livestock'%2C%0A%20%20%20%20%20%20%20%20groupId%3A%202%2C%0A%20%20%20%20%20%20%20%20children%3A%20livestock%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%5D%3B%0A%20%20%7D%3B%0A%20%20example_tab%20%3D%20%5B%0A%20%20%20%20%7B%0A%20%20%20%20%20%20typeName%3A%20'animals'%2C%0A%20%20%20%20%20%20typeLabel%3A%20'Animals'%2C%0A%20%20%20%20%20%20valueField%3A%20'animalId'%2C%0A%20%20%20%20%20%20labelField%3A%20'name'%2C%0A%20%20%20%20%20%20data%3A%20this.getAnimals()%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20typeName%3A%20'animalCategories'%2C%0A%20%20%20%20%20%20typeLabel%3A%20'Animal%20Categories'%2C%0A%20%20%20%20%20%20valueField%3A%20'groupId'%2C%0A%20%20%20%20%20%20labelField%3A%20'name'%2C%0A%20%20%20%20%20%20childTypeName%3A%20'animals'%2C%0A%20%20%20%20%20%20data%3A%20this.getAnimalCategories()%2C%0A%20%20%20%20%7D%2C%0A%20%20%5D%3B%0A%20%20public%20example_quickSelectConfig%20%3D%20%7B%0A%20%20%20%20label%3A%20'Quick%20Select'%2C%0A%20%20%20%20items%3A%20%5B%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20childTypeName%3A%20'animals'%2C%0A%20%20%20%20%20%20%20%20children%3A%20%5B2%5D%2C%0A%20%20%20%20%20%20%20%20label%3A%20'Pure%20Evil'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20childTypeName%3A%20'animals'%2C%0A%20%20%20%20%20%20%20%20children%3A%20%5B1%2C%206%2C%209%5D%2C%0A%20%20%20%20%20%20%20%20label%3A%20'My%20Pets'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20childTypeName%3A%20'animals'%2C%0A%20%20%20%20%20%20%20%20all%3A%20true%2C%0A%20%20%20%20%20%20%20%20label%3A%20'All%20Animals'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%5D%2C%0A%20%20%7D%3B%0A%0A%20%20public%20buttonLabel%3A%20string%20%3D%20'Nothing%20Selected'%3B%0A%20%20public%20example_buttonConfig%20%3D%20%7B%0A%20%20%20%20theme%3A%20'select'%2C%0A%20%20%20%20side%3A%20'right'%2C%0A%20%20%20%20icon%3A%20'collapse'%2C%0A%20%20%20%20label%3A%20this.buttonLabel%2C%0A%20%20%20%20selector%3A%20'buttonConfig'%2C%0A%20%20%7D%3B%0A%0A%20%20selectedAnimals%3A%20string%5B%5D%20%3D%20%5B%5D%3B%0A%20%20selectedAnimalCategories%3A%20string%5B%5D%20%3D%20%5B%5D%3B%0A%0A%20%20onSelectionChange(selectedData%3A%20TabbedGroupPickerTab%5B%5D)%20%7B%0A%20%20%20%20this.selectedAnimals%20%3D%20(selectedData.find((%7B%20typeName%20%7D)%20%3D%3E%20typeName%20%3D%3D%3D%20'animals')%20as%20ChildTab).data.map((%7B%20animalId%20%7D)%20%3D%3E%20animalId)%3B%0A%20%20%20%20this.selectedAnimalCategories%20%3D%20(selectedData.find((%7B%20typeName%20%7D)%20%3D%3E%20typeName%20%3D%3D%3D%20'animalCategories')%20as%20ParentTab).data.map(%0A%20%20%20%20%20%20(%7B%20groupId%20%7D)%20%3D%3E%20groupId%2C%0A%20%20%20%20)%3B%0A%20%20%20%20this.example_buttonConfig.label%20%3D%20this.buildButtonLabel()%3B%0A%20%20%7D%0A%0A%20%20onCancelChange(%5BanimalsTab%2C%20animalCategoriesTab%5D%3A%20TabbedGroupPickerTab%5B%5D)%20%7B%0A%20%20%20%20this.selectedAnimals%20%3D%20animalsTab.data.filter((animal)%20%3D%3E%20animal.selected).map((%7B%20animalId%20%7D)%20%3D%3E%20animalId)%3B%0A%20%20%20%20this.selectedAnimalCategories%20%3D%20animalCategoriesTab.data.filter((group)%20%3D%3E%20group.selected).map((%7B%20groupId%20%7D)%20%3D%3E%20groupId)%3B%0A%20%20%20%20this.example_buttonConfig.label%20%3D%20this.buildButtonLabel()%3B%0A%20%20%7D%0A%0A%20%20buildButtonLabel()%3A%20string%20%7B%0A%20%20%20%20return%20this.selectedAnimals.length%20%3F%20%60Animals%20(%24%7Bthis.selectedAnimals.length%7D)%60%20%3A%20'Nothing%20Selected'%3B%0A%20%20%7D%0A%7D%0A`,
        cssSource: ``,
        htmlSource: `%3Cdiv%20class%3D%22tabbed-group-picker-example%22%3E%0A%20%20%3Cnovo-tabbed-group-picker%0A%20%20%20%20%5Btabs%5D%3D%22example_tab%22%0A%20%20%20%20%5BquickSelectConfig%5D%3D%22example_quickSelectConfig%22%0A%20%20%20%20%5BbuttonConfig%5D%3D%22example_buttonConfig%22%0A%20%20%20%20(selectionChange)%3D%22onSelectionChange(%24event)%22%0A%20%20%20%20(cancelChange)%3D%22onCancelChange(%24event)%22%0A%20%20%20%20%5BshowFooter%5D%3D%22true%22%0A%20%20%3E%3C%2Fnovo-tabbed-group-picker%3E%0A%20%20%3Cdiv%20class%3D%22selected-data-wrapper%22%3E%0A%20%20%20%20%3Ch6%3ESelected%20Animal%20IDs%3A%3C%2Fh6%3E%0A%20%20%20%20%3Cdiv%3E%7B%7B%20selectedAnimals.join('%2C%20')%20%7D%7D%3C%2Fdiv%3E%0A%20%20%20%20%3Ch6%3ESelected%20Animal%20Category%20IDs%3A%3C%2Fh6%3E%0A%20%20%20%20%3Cdiv%3E%7B%7B%20selectedAnimalCategories.join('%2C%20')%20%7D%7D%3C%2Fdiv%3E%0A%20%20%3C%2Fdiv%3E%0A%3C%2Fdiv%3E%0A`
    },
    'tabbed-group-picker-big-groups': {
        title: 'Tabbed Group Picker - Big Groups Example',
        component: TabbedGroupPickerBigGroupsExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0Aimport%20%7B%20ChildTab%2C%20ParentTab%2C%20TabbedGroupPickerTab%20%7D%20from%20'novo-elements'%3B%0A%0A%2F**%0A%20*%20%40title%20Tabbed%20Group%20Picker%20-%20Big%20Groups%20Example%0A%20*%2F%0A%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'tabbed-group-picker-big-groups-example'%2C%0A%20%20%20%20templateUrl%3A%20'tabbed-group-picker-big-groups-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'..%2Ftabbed-group-picker-example.scss'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20TabbedGroupPickerBigGroupsExample%20%7B%0A%20%20isPrime(number)%3A%20boolean%20%7B%0A%20%20%20%20const%20squareRoot%20%3D%20Math.ceil(Math.sqrt(number))%3B%0A%20%20%20%20return%20!Array(squareRoot)%0A%20%20%20%20%20%20.fill(0)%0A%20%20%20%20%20%20.map((value%2C%20index)%20%3D%3E%20index%20%2B%202)%0A%20%20%20%20%20%20.some((divisor)%20%3D%3E%20number%20%25%20divisor%20%3D%3D%3D%200)%3B%0A%20%20%7D%0A%20%20example_tab%20%3D%20%5B%0A%20%20%20%20%7B%0A%20%20%20%20%20%20typeName%3A%20'integers'%2C%0A%20%20%20%20%20%20typeLabel%3A%20'Integers'%2C%0A%20%20%20%20%20%20valueField%3A%20'value'%2C%0A%20%20%20%20%20%20labelField%3A%20'label'%2C%0A%20%20%20%20%20%20data%3A%20Array(2000)%0A%20%20%20%20%20%20%20%20.fill(0)%0A%20%20%20%20%20%20%20%20.map((value%2C%20index)%20%3D%3E%20index%20%2B%201)%0A%20%20%20%20%20%20%20%20.map((value)%20%3D%3E%20(%7B%20value%2C%20label%3A%20String(value)%20%7D))%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20typeName%3A%20'divisibles'%2C%0A%20%20%20%20%20%20typeLabel%3A%20'Divisible%20By'%2C%0A%20%20%20%20%20%20valueField%3A%20'v'%2C%0A%20%20%20%20%20%20labelField%3A%20'l'%2C%0A%20%20%20%20%20%20childTypeName%3A%20'integers'%2C%0A%20%20%20%20%20%20data%3A%20Array(100)%0A%20%20%20%20%20%20%20%20.fill(0)%0A%20%20%20%20%20%20%20%20.map((v%2C%20i)%20%3D%3E%20i%20%2B%201)%0A%20%20%20%20%20%20%20%20.map((v)%20%3D%3E%20(%7B%0A%20%20%20%20%20%20%20%20%20%20v%2C%0A%20%20%20%20%20%20%20%20%20%20l%3A%20%60Divisible%20By%20%24%7Bv%7D%60%2C%0A%20%20%20%20%20%20%20%20%20%20children%3A%20Array(2000)%0A%20%20%20%20%20%20%20%20%20%20%20%20.fill(0)%0A%20%20%20%20%20%20%20%20%20%20%20%20.map((value%2C%20index)%20%3D%3E%20index%20%2B%201)%0A%20%20%20%20%20%20%20%20%20%20%20%20.filter((number)%20%3D%3E%20number%20%25%20v%20%3D%3D%3D%200)%0A%20%20%20%20%20%20%20%20%20%20%20%20.map((child)%20%3D%3E%20(%7B%20value%3A%20child%2C%20label%3A%20String(child)%20%7D))%2C%0A%20%20%20%20%20%20%20%20%7D))%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20typeName%3A%20'prime%20factorization'%2C%0A%20%20%20%20%20%20typeLabel%3A%20'Prime%20Factors'%2C%0A%20%20%20%20%20%20valueField%3A%20'v'%2C%0A%20%20%20%20%20%20labelField%3A%20'l'%2C%0A%20%20%20%20%20%20childTypeName%3A%20'integers'%2C%0A%20%20%20%20%20%20data%3A%20Array(100)%0A%20%20%20%20%20%20%20%20.fill(0)%0A%20%20%20%20%20%20%20%20.map((v%2C%20i)%20%3D%3E%20i%20%2B%201990)%0A%20%20%20%20%20%20%20%20.map((parent)%20%3D%3E%20(%7B%0A%20%20%20%20%20%20%20%20%20%20v%3A%20parent%2C%0A%20%20%20%20%20%20%20%20%20%20l%3A%20%60Prime%20Factors%20of%20%24%7Bparent%7D%60%2C%0A%20%20%20%20%20%20%20%20%20%20children%3A%20Array(2000)%0A%20%20%20%20%20%20%20%20%20%20%20%20.fill(0)%0A%20%20%20%20%20%20%20%20%20%20%20%20.map((value%2C%20index)%20%3D%3E%20index%20%2B%201)%0A%20%20%20%20%20%20%20%20%20%20%20%20.filter((child)%20%3D%3E%20parent%20%25%20child%20%3D%3D%3D%200%20%26%26%20this.isPrime(child))%0A%20%20%20%20%20%20%20%20%20%20%20%20.map((child)%20%3D%3E%20(%7B%20value%3A%20child%2C%20label%3A%20String(child)%20%7D))%2C%0A%20%20%20%20%20%20%20%20%7D))%2C%0A%20%20%20%20%7D%2C%0A%20%20%5D%3B%0A%0A%20%20public%20buttonLabel%3A%20string%20%3D%20'Nothing%20Selected'%3B%0A%20%20public%20example_buttonConfig%20%3D%20%7B%0A%20%20%20%20theme%3A%20'select'%2C%0A%20%20%20%20side%3A%20'right'%2C%0A%20%20%20%20icon%3A%20'collapse'%2C%0A%20%20%20%20label%3A%20this.buttonLabel%2C%0A%20%20%20%20selector%3A%20'buttonConfig'%2C%0A%20%20%7D%3B%0A%0A%20%20selectedPrimeFactorizations%3A%20string%5B%5D%20%3D%20%5B%5D%3B%0A%20%20selectedDivisibles%3A%20string%5B%5D%20%3D%20%5B%5D%3B%0A%0A%20%20selectedIntegers%3A%20string%5B%5D%20%3D%20%5B%5D%3B%0A%0A%20%20onSelectionChange(selectedData%3A%20TabbedGroupPickerTab%5B%5D)%20%7B%0A%20%20%20%20this.selectedIntegers%20%3D%20(selectedData.find((%7B%20typeName%20%7D)%20%3D%3E%20typeName%20%3D%3D%3D%20'integers')%20as%20ChildTab).data.map((%7B%20value%20%7D)%20%3D%3E%20value)%3B%0A%20%20%20%20this.selectedDivisibles%20%3D%20(selectedData.find((%7B%20typeName%20%7D)%20%3D%3E%20typeName%20%3D%3D%3D%20'divisibles')%20as%20ParentTab).data.map((%7B%20v%20%7D)%20%3D%3E%20v)%3B%0A%20%20%20%20this.selectedPrimeFactorizations%20%3D%20(selectedData.find((%7B%20typeName%20%7D)%20%3D%3E%20typeName%20%3D%3D%3D%20'prime%20factorization')%20as%20ParentTab).data.map(%0A%20%20%20%20%20%20(%7B%20v%20%7D)%20%3D%3E%20v%2C%0A%20%20%20%20)%3B%0A%20%20%20%20this.example_buttonConfig.label%20%3D%20this.buildButtonLabel()%3B%0A%20%20%7D%0A%0A%20%20buildButtonLabel()%3A%20string%20%7B%0A%20%20%20%20return%20this.selectedIntegers.length%20%3F%20%60Integers%20(%24%7Bthis.selectedIntegers.length%7D)%60%20%3A%20'Nothing%20Selected'%3B%0A%20%20%7D%0A%7D%0A`,
        cssSource: ``,
        htmlSource: `%3Cdiv%20class%3D%22tabbed-group-picker-example%22%3E%0A%20%20%3Cnovo-tabbed-group-picker%0A%20%20%20%20%5Btabs%5D%3D%22example_tab%22%0A%20%20%20%20%5BbuttonConfig%5D%3D%22example_buttonConfig%22%0A%20%20%20%20(selectionChange)%3D%22onSelectionChange(%24event)%22%0A%20%20%3E%3C%2Fnovo-tabbed-group-picker%3E%0A%20%20%3Cdiv%20class%3D%22selected-data-wrapper%22%3E%0A%20%20%20%20%3Ch6%3ESelected%20Integers%3A%3C%2Fh6%3E%0A%20%20%20%20%3Cdiv%3E%7B%7B%20selectedIntegers.join('%2C%20')%20%7D%7D%3C%2Fdiv%3E%0A%20%20%20%20%3Ch6%3ESelected%20Divisibles%3A%3C%2Fh6%3E%0A%20%20%20%20%3Cdiv%3E%7B%7B%20selectedDivisibles.join('%2C%20')%20%7D%7D%3C%2Fdiv%3E%0A%20%20%20%20%3Ch6%3ESelected%20Prime%20Factorizations%3A%3C%2Fh6%3E%0A%20%20%20%20%3Cdiv%3E%7B%7B%20selectedPrimeFactorizations.join('%2C%20')%20%7D%7D%3C%2Fdiv%3E%0A%20%20%3C%2Fdiv%3E%0A%3C%2Fdiv%3E%0A`
    },
    'tabbed-group-picker-basic': {
        title: 'Tabbed Group Picker - Basic Example',
        component: TabbedGroupPickerBasicExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0Aimport%20%7B%20ChildTab%2C%20TabbedGroupPickerTab%20%7D%20from%20'novo-elements'%3B%0A%0A%2F**%0A%20*%20%40title%20Tabbed%20Group%20Picker%20-%20Basic%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'tabbed-group-picker-basic-example'%2C%0A%20%20%20%20templateUrl%3A%20'tabbed-group-picker-basic-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'..%2Ftabbed-group-picker-example.scss'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20TabbedGroupPickerBasicExample%20%7B%0A%20%20getAnimals%20%3D%20()%3A%20%7B%20animalId%3A%20number%3B%20name%3A%20string%20%7D%5B%5D%20%3D%3E%0A%20%20%20%20%5B'Dog'%2C%20'Cat'%2C%20'Mouse'%2C%20'Horse'%2C%20'Cow'%2C%20'Chicken'%2C%20'Pig'%2C%20'Sheep'%2C%20'Goat'%2C%20'Goose'%5D.map((name%2C%20index)%20%3D%3E%20(%7B%0A%20%20%20%20%20%20name%2C%0A%20%20%20%20%20%20animalId%3A%20index%20%2B%201%2C%0A%20%20%20%20%7D))%3B%0A%0A%20%20getPlaces%20%3D%20()%3A%20%7B%20localName%3A%20string%3B%20englishName%3A%20string%20%7D%5B%5D%20%3D%3E%0A%20%20%20%20%5B%0A%20%20%20%20%20%20%5B'Roma'%2C%20'Rome'%5D%2C%0A%20%20%20%20%20%20%5B'Firenze'%2C%20'Florence'%5D%2C%0A%20%20%20%20%20%20%5B'Munchen'%2C%20'Munich'%5D%2C%0A%20%20%20%20%20%20%5B'Paris'%2C%20'Paris'%5D%2C%0A%20%20%20%20%20%20%5B'Sevilla'%2C%20'Seville'%5D%2C%0A%20%20%20%20%20%20%5B'Athinai'%2C%20'Athens'%5D%2C%0A%20%20%20%20%5D.map((%5BlocalName%2C%20englishName%5D)%20%3D%3E%20(%7B%20localName%2C%20englishName%20%7D))%3B%0A%20%20getColors%20%3D%20()%3A%20%7B%20rgb%3A%20string%3B%20colorName%3A%20string%20%7D%5B%5D%20%3D%3E%0A%20%20%20%20%5B%0A%20%20%20%20%20%20%5B'255%2C0%2C0'%2C%20'Red'%5D%2C%0A%20%20%20%20%20%20%5B'0%2C255%2C0'%2C%20'Green'%5D%2C%0A%20%20%20%20%20%20%5B'0%2C0%2C255'%2C%20'Blue'%5D%2C%0A%20%20%20%20%20%20%5B'0%2C0%2C0'%2C%20'Black'%5D%2C%0A%20%20%20%20%20%20%5B'255%2C255%2C255'%2C%20'White'%5D%2C%0A%20%20%20%20%5D.map((%5Brgb%2C%20colorName%5D)%20%3D%3E%20(%7B%20rgb%2C%20colorName%20%7D))%3B%0A%0A%20%20animalTab%20%3D%20%7B%0A%20%20%20%20typeName%3A%20'animals'%2C%0A%20%20%20%20typeLabel%3A%20'Animals'%2C%0A%20%20%20%20valueField%3A%20'animalId'%2C%0A%20%20%20%20labelField%3A%20'name'%2C%0A%20%20%20%20data%3A%20this.getAnimals()%2C%0A%20%20%7D%3B%0A%0A%20%20example_tab%20%3D%20%5B%0A%20%20%20%20this.animalTab%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20typeName%3A%20'places'%2C%0A%20%20%20%20%20%20typeLabel%3A%20'Places'%2C%0A%20%20%20%20%20%20valueField%3A%20'localName'%2C%0A%20%20%20%20%20%20labelField%3A%20'englishName'%2C%0A%20%20%20%20%20%20data%3A%20this.getPlaces()%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20typeName%3A%20'colors'%2C%0A%20%20%20%20%20%20typeLabel%3A%20'Colors'%2C%0A%20%20%20%20%20%20valueField%3A%20'rgb'%2C%0A%20%20%20%20%20%20labelField%3A%20'colorName'%2C%0A%20%20%20%20%20%20data%3A%20this.getColors()%2C%0A%20%20%20%20%7D%2C%0A%20%20%5D%3B%0A%0A%20%20public%20buttonLabel%3A%20string%20%3D%20'Nothing%20Selected'%3B%0A%20%20public%20example_buttonConfig%20%3D%20%7B%0A%20%20%20%20theme%3A%20'select'%2C%0A%20%20%20%20side%3A%20'right'%2C%0A%20%20%20%20icon%3A%20'collapse'%2C%0A%20%20%20%20label%3A%20this.buttonLabel%2C%0A%20%20%20%20selector%3A%20'buttonConfig'%2C%0A%20%20%7D%3B%0A%0A%20%20public%20selectedAnimals%3A%20string%5B%5D%20%3D%20%5B%5D%3B%0A%20%20public%20selectedPlaces%3A%20string%5B%5D%20%3D%20%5B%5D%3B%0A%20%20public%20selectedColors%3A%20string%5B%5D%20%3D%20%5B%5D%3B%0A%0A%20%20onSelectionChange(selectedData%3A%20TabbedGroupPickerTab%5B%5D)%20%7B%0A%20%20%20%20this.selectedAnimals%20%3D%20(selectedData.find((%7B%20typeName%20%7D)%20%3D%3E%20typeName%20%3D%3D%3D%20'animals')%20as%20ChildTab).data.map((%7B%20animalId%20%7D)%20%3D%3E%20animalId)%3B%0A%20%20%20%20this.selectedPlaces%20%3D%20(selectedData.find((%7B%20typeName%20%7D)%20%3D%3E%20typeName%20%3D%3D%3D%20'places')%20as%20ChildTab).data.map((%7B%20localName%20%7D)%20%3D%3E%20localName)%3B%0A%20%20%20%20this.selectedColors%20%3D%20(selectedData.find((%7B%20typeName%20%7D)%20%3D%3E%20typeName%20%3D%3D%3D%20'colors')%20as%20ChildTab).data.map((%7B%20rgb%20%7D)%20%3D%3E%20rgb)%3B%0A%20%20%20%20this.example_buttonConfig.label%20%3D%20this.buildButtonLabel()%3B%0A%20%20%7D%0A%0A%20%20buildButtonLabel()%3A%20string%20%7B%0A%20%20%20%20const%20labelParts%3A%20string%5B%5D%20%3D%20%5B%5D%3B%0A%20%20%20%20this.selectedAnimals.length%20%3F%20labelParts.push(%60Animals%20(%24%7Bthis.selectedAnimals.length%7D)%60)%20%3A%20''%3B%0A%20%20%20%20this.selectedPlaces.length%20%3F%20labelParts.push(%60Places%20(%24%7Bthis.selectedPlaces.length%7D)%60)%20%3A%20''%3B%0A%20%20%20%20this.selectedColors.length%20%3F%20labelParts.push(%60Colors%20(%24%7Bthis.selectedColors.length%7D)%60)%20%3A%20''%3B%0A%20%20%20%20return%20labelParts.join('%2C%20')%20%7C%7C%20'Nothing%20Selected'%3B%0A%20%20%7D%0A%7D%0A`,
        cssSource: ``,
        htmlSource: `%3Cdiv%20class%3D%22tabbed-group-picker-example%22%3E%0A%20%20%3Cnovo-tabbed-group-picker%0A%20%20%20%20%5Btabs%5D%3D%22example_tab%22%0A%20%20%20%20%5BbuttonConfig%5D%3D%22example_buttonConfig%22%0A%20%20%20%20(selectionChange)%3D%22onSelectionChange(%24event)%22%0A%20%20%3E%3C%2Fnovo-tabbed-group-picker%3E%0A%20%20%3Cdiv%20class%3D%22selected-data-wrapper%22%3E%0A%20%20%20%20%3Ch6%3ESelected%20Animal%20IDs%3A%3C%2Fh6%3E%0A%20%20%20%20%3Cdiv%3E%7B%7B%20selectedAnimals.join('%2C%20')%20%7D%7D%3C%2Fdiv%3E%0A%20%20%20%20%3Ch6%3ESelected%20Local%20Place%20Names%3A%3C%2Fh6%3E%0A%20%20%20%20%3Cdiv%3E%7B%7B%20selectedPlaces.join('%2C%20')%20%7D%7D%3C%2Fdiv%3E%0A%20%20%20%20%3Ch6%3ESelected%20Colors%3A%3C%2Fh6%3E%0A%20%20%20%20%3Cdiv%3E%7B%7B%20selectedColors.join('%20%7C%20')%20%7D%7D%3C%2Fdiv%3E%0A%20%20%3C%2Fdiv%3E%0A%3C%2Fdiv%3E%0A`
    },
    'switch-usage': {
        title: 'Switch Usage Example',
        component: SwitchUsageExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Switch%20Usage%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'switch-usage-example'%2C%0A%20%20%20%20templateUrl%3A%20'switch-usage-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'switch-usage-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20SwitchUsageExample%20%7B%0A%20%20public%20toggleCount%3A%20number%20%3D%200%3B%0A%20%20public%20checked%3A%20boolean%20%3D%20true%3B%0A%0A%20%20public%20increment()%3A%20void%20%7B%0A%20%20%20%20this.toggleCount%2B%2B%3B%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Clabel%3E%0A%20%20Toggled%0A%20%20%3Cspan%3E%7B%7Bchecked%7D%7D%3C%2Fspan%3E%0A%3C%2Flabel%3E%0A%3Cnovo-switch%20%5B(ngModel)%5D%3D%22checked%22%20(onChange)%3D%22increment()%22%3E%3C%2Fnovo-switch%3E%0A%3Cnovo-switch%20%5B(ngModel)%5D%3D%22checked%22%20theme%3D%22grapefruit%22%3E%3C%2Fnovo-switch%3E%0A%3Cnovo-switch%20%5B(ngModel)%5D%3D%22checked%22%20disabled%3ETHIS%20IS%20DISABLED%3C%2Fnovo-switch%3E`
    },
    'basic-slide': {
        title: 'Basic Slide Example',
        component: BasicSlideExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Basic%20Slide%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'basic-slide-example'%2C%0A%20%20%20%20templateUrl%3A%20'basic-slide-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'basic-slide-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20BasicSlideExample%20%7B%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cnovo-slider%20%5Bslides%5D%3D%222%22%3E%0A%20%20%20%20%3Cdiv%20slide%3D%221%22%3E%0A%20%20%20%20%20%20%20%20SLIDE%20%231%0A%20%20%20%20%3C%2Fdiv%3E%0A%20%20%20%20%3Cdiv%20slide%3D%222%22%3E%0A%20%20%20%20%20%20%20%20SLIDE%20%232%0A%20%20%20%20%3C%2Fdiv%3E%0A%3C%2Fnovo-slider%3E%0A`
    },
    'search-usage': {
        title: 'Search Box Usage',
        component: SearchUsageExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0Aimport%20%7B%20Subject%20%7D%20from%20'rxjs'%3B%0A%0A%2F**%0A%20*%20%40title%20Search%20Box%20Usage%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'search-usage-example'%2C%0A%20%20%20%20templateUrl%3A%20'search-usage-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'search-usage-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20SearchUsageExample%20%7B%0A%20%20public%20test%3A%20string%20%3D%20'TEST'%3B%0A%20%20public%20geo%3A%20any%20%3D%20''%3B%0A%20%20public%20entity%3A%20string%20%3D%20''%3B%0A%20%20public%20searchResults%3A%20Subject%3Cany%5B%5D%3E%20%3D%20new%20Subject()%3B%0A%20%20public%20searchData%3A%20any%5B%5D%20%3D%20%5B%0A%20%20%20%20%7B%0A%20%20%20%20%20%20data%3A%20%7B%0A%20%20%20%20%20%20%20%20title%3A%20'Central%20Bank'%2C%0A%20%20%20%20%20%20%20%20name%3A%20'Central%20Bank'%2C%0A%20%20%20%20%20%20%20%20email%3A%20'new-bank-inquiries%40centralbank.com'%2C%0A%20%20%20%20%20%20%20%20phone%3A%20'(651)%20555-1234'%2C%0A%20%20%20%20%20%20%20%20address%3A%20%7B%20city%3A%20'Washington'%2C%20state%3A%20'DC'%20%7D%2C%0A%20%20%20%20%20%20%20%20searchEntity%3A%20'ClientCorporation'%2C%0A%20%20%20%20%20%20%20%20type%3A%20'company'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20data%3A%20%7B%0A%20%20%20%20%20%20%20%20title%3A%20'Federal%20Bank'%2C%0A%20%20%20%20%20%20%20%20name%3A%20'Federal%20Bank'%2C%0A%20%20%20%20%20%20%20%20email%3A%20'info%40federalbank.com'%2C%0A%20%20%20%20%20%20%20%20phone%3A%20'(545)%20555-1212'%2C%0A%20%20%20%20%20%20%20%20address%3A%20%7B%20city%3A%20'Arlington'%2C%20state%3A%20'VA'%20%7D%2C%0A%20%20%20%20%20%20%20%20searchEntity%3A%20'ClientCorporation'%2C%0A%20%20%20%20%20%20%20%20type%3A%20'company'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20data%3A%20%7B%0A%20%20%20%20%20%20%20%20title%3A%20'Aaron%20Burr'%2C%0A%20%20%20%20%20%20%20%20firstName%3A%20'Aaron'%2C%0A%20%20%20%20%20%20%20%20lastName%3A%20'Burr'%2C%0A%20%20%20%20%20%20%20%20name%3A%20'Aaron%20Burr'%2C%0A%20%20%20%20%20%20%20%20companyName%3A%20'Central%20Bank'%2C%0A%20%20%20%20%20%20%20%20email%3A%20'aburr%40centralbank.com'%2C%0A%20%20%20%20%20%20%20%20phone%3A%20'(333)%20555-3434'%2C%0A%20%20%20%20%20%20%20%20address%3A%20%7B%20city%3A%20'Washington'%2C%20state%3A%20'DC'%20%7D%2C%0A%20%20%20%20%20%20%20%20status%3A%20'Hold'%2C%0A%20%20%20%20%20%20%20%20searchEntity%3A%20'ClientContact'%2C%0A%20%20%20%20%20%20%20%20type%3A%20'person'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20data%3A%20%7B%0A%20%20%20%20%20%20%20%20title%3A%20'Alexander%20Hamilton'%2C%0A%20%20%20%20%20%20%20%20firstName%3A%20'Alexander'%2C%0A%20%20%20%20%20%20%20%20lastName%3A%20'Hamilton'%2C%0A%20%20%20%20%20%20%20%20name%3A%20'Alexander%20Hamilton'%2C%0A%20%20%20%20%20%20%20%20companyName%3A%20'Federal%20Bank'%2C%0A%20%20%20%20%20%20%20%20email%3A%20'ahamilton%40federalbank.com'%2C%0A%20%20%20%20%20%20%20%20phone%3A%20'(333)%20555-2222'%2C%0A%20%20%20%20%20%20%20%20address%3A%20%7B%20city%3A%20'Arlington'%2C%20state%3A%20'VA'%20%7D%2C%0A%20%20%20%20%20%20%20%20status%3A%20'Active'%2C%0A%20%20%20%20%20%20%20%20searchEntity%3A%20'ClientContact'%2C%0A%20%20%20%20%20%20%20%20type%3A%20'person'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20data%3A%20%7B%0A%20%20%20%20%20%20%20%20title%3A%20'Ben%20Franklin'%2C%0A%20%20%20%20%20%20%20%20firstName%3A%20'Ben'%2C%0A%20%20%20%20%20%20%20%20lastName%3A%20'Franklin'%2C%0A%20%20%20%20%20%20%20%20name%3A%20'Ben%20Franklin'%2C%0A%20%20%20%20%20%20%20%20email%3A%20'bfranklin%40gmail.com'%2C%0A%20%20%20%20%20%20%20%20phone%3A%20'(654)%20525-2222'%2C%0A%20%20%20%20%20%20%20%20address%3A%20%7B%20city%3A%20'Boston'%2C%20state%3A%20'MA'%20%7D%2C%0A%20%20%20%20%20%20%20%20status%3A%20'Interviewing'%2C%0A%20%20%20%20%20%20%20%20searchEntity%3A%20'Candidate'%2C%0A%20%20%20%20%20%20%20%20type%3A%20'candidate'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20data%3A%20%7B%0A%20%20%20%20%20%20%20%20title%3A%20'Thomas%20Jefferson'%2C%0A%20%20%20%20%20%20%20%20firstName%3A%20'Thomas'%2C%0A%20%20%20%20%20%20%20%20lastName%3A%20'Jefferson'%2C%0A%20%20%20%20%20%20%20%20name%3A%20'Thomas%20Jefferson'%2C%0A%20%20%20%20%20%20%20%20email%3A%20'tjefferson%40usa.com'%2C%0A%20%20%20%20%20%20%20%20phone%3A%20'(123)%20542-1234'%2C%0A%20%20%20%20%20%20%20%20address%3A%20%7B%20city%3A%20'Arlington'%2C%20state%3A%20'VA'%20%7D%2C%0A%20%20%20%20%20%20%20%20status%3A%20'New%20Lead'%2C%0A%20%20%20%20%20%20%20%20searchEntity%3A%20'Candidate'%2C%0A%20%20%20%20%20%20%20%20type%3A%20'candidate'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%7D%2C%0A%20%20%5D%3B%0A%0A%20%20public%20search(term%3A%20string)%3A%20void%20%7B%0A%20%20%20%20this.searchResults.next(this.searchData.map((x)%20%3D%3E%20x.data))%3B%0A%20%20%7D%0A%20%20public%20onSelectMatch(item)%20%7B%0A%20%20%20%20this.test%20%3D%20item.name%3B%0A%20%20%7D%0A%20%20public%20onSelectEntity(item)%20%7B%0A%20%20%20%20this.entity%20%3D%20item.data.name%3B%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A%3Ahost%20%7B%0A%20%20display%3A%20flex%3B%0A%20%20flex-flow%3A%20column%3B%0A%20%20gap%3A%202rem%3B%0A%7D%0A`,
        htmlSource: `%3Cnovo-search%3E%3C%2Fnovo-search%3E%0A%0A%3Cnovo-search%20size%3D%22small%22%20placeholder%3D%22Small%20Search...%22%3E%3C%2Fnovo-search%3E%0A%0A%3Cnovo-search%20size%3D%22large%22%20placeholder%3D%22Large%20Search...%22%3E%3C%2Fnovo-search%3E%0A%0A%3Cnovo-search%20theme%3D%22positive%22%20%5BngModel%5D%3D%22test%22%20(ngModelChange)%3D%22search(%24event)%22%3E%0A%20%20%3Cnovo-list%20direction%3D%22vertical%22%3E%0A%20%20%20%20%3Cnovo-list-item%20*ngFor%3D%22let%20item%20of%20searchResults%20%7C%20async%22%20(click)%3D%22onSelectMatch(item)%22%3E%0A%20%20%20%20%20%20%3Citem-header%3E%0A%20%20%20%20%20%20%20%20%3Citem-avatar%20%5Bicon%5D%3D%22item.type%22%3E%3C%2Fitem-avatar%3E%0A%20%20%20%20%20%20%20%20%3Citem-title%3E%7B%7Bitem.name%7D%7D%3C%2Fitem-title%3E%0A%20%20%20%20%20%20%3C%2Fitem-header%3E%0A%20%20%20%20%3C%2Fnovo-list-item%3E%0A%20%20%3C%2Fnovo-list%3E%0A%3C%2Fnovo-search%3E%0A%0A%3Cnovo-search%20icon%3D%22location%22%20color%3D%22grapefruit%22%20alwaysOpen%3D%22true%22%20%5B(ngModel)%5D%3D%22geo%22%20displayField%3D%22formatted_address%22%20%5BcloseOnSelect%5D%3D%22false%22%20hint%3D%22Search%20Google%20to%20find%20your%20address.%22%3E%0A%20%20%3Cgoogle-places-list%20%5B(term)%5D%3D%22geo%22%3E%3C%2Fgoogle-places-list%3E%0A%3C%2Fnovo-search%3E%0A%3Cdiv%3EValue%20is%3A%20%7B%7Bgeo%7D%7D%3C%2Fdiv%3E%0A%0A%3Cnovo-search%20icon%3D%22candidate%22%20color%3D%22candidate%22%20alwaysOpen%3D%22true%22%20%5B(ngModel)%5D%3D%22entity%22%3E%0A%20%20%3Centity-picker-results%20%5Bmatches%5D%3D%22searchData%22%20(select)%3D%22onSelectEntity(%24event)%22%3E%3C%2Fentity-picker-results%3E%0A%3C%2Fnovo-search%3E`
    },
    'single-field-criteria': {
        title: 'Single Field Criteria Example',
        component: SingleFieldCriteriaExample,
        tsSource: `import%20%7B%20ChangeDetectorRef%2C%20Component%2C%20OnInit%2C%20ViewChild%2C%20computed%20%7D%20from%20'%40angular%2Fcore'%3B%0Aimport%20%7B%20AbstractControl%2C%20UntypedFormBuilder%20%7D%20from%20'%40angular%2Fforms'%3B%0Aimport%20%7B%20BaseFieldDef%2C%20CriteriaBuilderComponent%2C%20FieldConfig%2C%20QueryBuilderConfig%20%7D%20from%20'novo-elements'%3B%0Aimport%20%7B%20MockCandidateMeta%20as%20MockMeta%20%7D%20from%20'..%2Fjust-criteria%2FMockMeta'%3B%0A%0A%2F**%0A%20*%20%40title%20Single%20Field%20Criteria%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'single-field-criteria-example'%2C%0A%20%20%20%20templateUrl%3A%20'single-field-criteria-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'single-field-criteria-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20SingleFieldCriteriaExample%20implements%20OnInit%20%7B%0A%20%20%40ViewChild('criteriaBuilder'%2C%20%7B%20static%3A%20true%20%7D)%20criteriaBuilder%3A%20CriteriaBuilderComponent%3B%0A%0A%20%20queryForm%3A%20AbstractControl%3B%0A%20%20config%3A%20QueryBuilderConfig%20%7C%20null%20%3D%20null%3B%0A%0A%20%20mockMetaFields%20%3D%20MockMeta.fields%3B%0A%0A%20%20editTypeFn%20%3D%20(field%3A%20any)%20%3D%3E%20%7B%0A%20%20%20%20if%20(field.optionsType%20%3D%3D%3D%20'Brewery')%20return%20'custom'%3B%0A%20%20%20%20return%20(field.inputType%20%7C%7C%20field.dataType%20%7C%7C%20field.type).toLowerCase()%3B%0A%20%20%7D%3B%0A%0A%20%20constructor(private%20formBuilder%3A%20UntypedFormBuilder%2C%20private%20cdr%3A%20ChangeDetectorRef)%20%7B%7D%0A%0A%20%20ngOnInit()%20%7B%0A%20%20%20%20this.queryForm%20%3D%20this.formBuilder.group(%7Bfield%3A%20''%2C%20operator%3A%20''%2C%20value%3A%20%5B%5D%20%7D)%3B%0A%20%20%20%20const%20fields%20%3D%20this.getFieldConfig()%3B%0A%20%20%20%20this.resetQueryForm()%3B%0A%20%20%20%20this.config%20%3D%20%7B%0A%20%20%20%20%20%20fields%0A%20%20%20%20%7D%3B%0A%20%20%20%20this.cdr.detectChanges()%3B%0A%20%20%7D%0A%0A%20%20getFieldConfig()%3A%20any%20%7B%0A%20%20%20%20return%20%5B%7B%0A%20%20%20%20%20%20value%3A%20MockMeta.entity%2C%0A%20%20%20%20%20%20label%3A%20MockMeta.label%2C%0A%20%20%20%20%20%20options%3A%20MockMeta.fields%2C%0A%20%20%20%20%20%20find%3A%20(name%3A%20string)%20%3D%3E%20MockMeta.fields.find((f)%20%3D%3E%20f.name%20%3D%3D%3D%20name)%2C%0A%20%20%20%20%20%20search%3A%20(term%3A%20string)%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20return%20MockMeta.fields.filter((f)%20%3D%3E%20f.name.includes(term)%20%7C%7C%20f.label.includes(term))%3B%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%7D%5D%3B%0A%20%20%7D%0A%0A%20%20updateConfig(values%3A%20any)%3A%20void%20%7B%0A%20%20%20%20this.config%20%3D%20%7B%20...this.config%2C%20...values%20%7D%3B%0A%20%20%7D%0A%0A%20%20resetQueryForm()%20%7B%0A%20%20%20%20const%20prepopulatedData%20%3D%20%7B%0A%20%20%20%20%20%20field%3A%20''%2C%0A%20%20%20%20%20%20operator%3A%20'includeAny'%2C%0A%20%20%20%20%20%20value%3A%20%5B%5D%0A%20%20%20%20%7D%3B%0A%20%20%20%20this.setQueryForm(prepopulatedData)%3B%0A%20%20%7D%0A%0A%20%20setQueryForm(data)%20%7B%0A%20%20%20%20this.queryForm.setValue(data)%3B%0A%20%20%7D%0A%0A%20%20onSubmit()%20%7B%0A%20%20%20%20console.log('Your%20form%20data%20%3A%20'%2C%20this.queryForm.value)%3B%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cform%20%5BformGroup%5D%3D%22queryForm%22%20(ngSubmit)%3D%22onSubmit()%22%3E%0A%20%20%3Cnovo-condition-builder%0A%20%20%20%20%23builder%0A%20%20%20%20%5Bconfig%5D%3D%22config%22%0A%20%20%20%20%5BeditTypeFn%5D%3D%22editTypeFn%22%3E%0A%20%20%3C%2Fnovo-condition-builder%3E%0A%3C%2Fform%3E%0A%0A%3Cnovo-field%20mb%3D%22lg%22%3E%0A%20%20%3Cnovo-label%3EChoose%20single%20field%20to%20auto-select%20for%20criteria%3C%2Fnovo-label%3E%0A%20%20%3Cnovo-select%20placeholder%3D%22Single%20field%22%20%5BngModel%5D%3D%22config.staticFieldSelection%22%20(ngModelChange)%3D%22updateConfig(%7B%20staticFieldSelection%3A%20%24event%20%7D)%22%3E%0A%20%20%20%20%3Cnovo-option%20value%3D%22%22%3EShow%20All%20Fields%3C%2Fnovo-option%3E%0A%20%20%20%20%3Cnovo-option%20*ngFor%3D%22let%20field%20of%20mockMetaFields%22%20%5Bvalue%5D%3D%22field.name%22%3E%7B%7B%20field.label%20%7C%7C%20field.name%20%7D%7D%3C%2Fnovo-option%3E%0A%20%20%3C%2Fnovo-select%3E%0A%3C%2Fnovo-field%3E%0A%0A%3Cpre%3E%3Ccode%3E%7B%7BqueryForm.value%20%7C%20json%7D%7D%3C%2Fcode%3E%3C%2Fpre%3E`
    },
    'just-criteria': {
        title: 'Just Criteria Example',
        component: JustCriteriaExample,
        tsSource: `import%20%7B%20HttpClient%20%7D%20from%20'%40angular%2Fcommon%2Fhttp'%3B%0Aimport%20%7B%20ChangeDetectionStrategy%2C%20ChangeDetectorRef%2C%20Component%2C%20inject%2C%20OnInit%2C%20viewChild%2C%20ViewEncapsulation%20%7D%20from%20'%40angular%2Fcore'%3B%0Aimport%20%7B%20AbstractControl%2C%20UntypedFormBuilder%2C%20UntypedFormControl%20%7D%20from%20'%40angular%2Fforms'%3B%0Aimport%20%7B%0A%20%20AbstractConditionFieldDef%2C%0A%20%20AddressCriteriaConfig%2C%0A%20%20AddressRadiusUnitsName%2C%0A%20%20Condition%2C%0A%20%20Conjunction%2C%0A%20%20CriteriaBuilderComponent%2C%0A%20%20NovoLabelService%2C%0A%20%20Operator%2C%0A%7D%20from%20'novo-elements'%3B%0Aimport%20%7B%20ReplaySubject%2C%20Subject%20%7D%20from%20'rxjs'%3B%0Aimport%20%7B%20debounceTime%2C%20distinctUntilChanged%2C%20takeUntil%20%7D%20from%20'rxjs%2Foperators'%3B%0Aimport%20%7B%20MockCandidateMeta%2C%20MockNoteMeta%20%7D%20from%20'.%2FMockMeta'%3B%0A%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'custom-picker-condition-def'%2C%0A%20%20%20%20template%3A%20%60%0A%20%20%20%20%3Cng-container%20novoConditionFieldDef%3E%0A%20%20%20%20%20%20%3Cnovo-field%20*novoConditionOperatorsDef%3D%22let%20formGroup%22%20%5BformGroup%5D%3D%22formGroup%22%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-select%20placeholder%3D%22Operator...%22%20formControlName%3D%22operator%22%3E%0A%20%20%20%20%20%20%20%20%20%20%3Cnovo-option%20value%3D%22includeAny%22%3EInclude%20Any%3C%2Fnovo-option%3E%0A%20%20%20%20%20%20%20%20%20%20%3Cnovo-option%20value%3D%22includeAll%22%3EInclude%20All%3C%2Fnovo-option%3E%0A%20%20%20%20%20%20%20%20%20%20%3Cnovo-option%20value%3D%22excludeAny%22%3EExclude%3C%2Fnovo-option%3E%0A%20%20%20%20%20%20%20%20%3C%2Fnovo-select%3E%0A%20%20%20%20%20%20%3C%2Fnovo-field%3E%0A%20%20%20%20%20%20%3Cnovo-field%20*novoConditionInputDef%3D%22let%20formGroup%3B%20fieldMeta%20as%20meta%22%20%5BformGroup%5D%3D%22formGroup%22%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-select%20formControlName%3D%22value%22%20placeholder%3D%22Select...%22%20%5Bmultiple%5D%3D%22true%22%3E%0A%20%20%20%20%20%20%20%20%20%20%3Cnovo-option%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%3Cnovo-select-search%20%5BformControl%5D%3D%22searchCtrl%22%3E%3C%2Fnovo-select-search%3E%0A%20%20%20%20%20%20%20%20%20%20%3C%2Fnovo-option%3E%0A%20%20%20%20%20%20%20%20%20%20%3Cnovo-option%20*ngFor%3D%22let%20option%20of%20remoteResults%20%7C%20async%22%20%5Bvalue%5D%3D%22option.id%22%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%7B%7B%20option.name%20%7D%7D%0A%20%20%20%20%20%20%20%20%20%20%3C%2Fnovo-option%3E%0A%20%20%20%20%20%20%20%20%3C%2Fnovo-select%3E%0A%20%20%20%20%20%20%3C%2Fnovo-field%3E%0A%20%20%20%20%3C%2Fng-container%3E%0A%20%20%60%2C%0A%20%20%20%20encapsulation%3A%20ViewEncapsulation.None%2C%0A%20%20%20%20changeDetection%3A%20ChangeDetectionStrategy.Default%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20CustomPickerConditionDef%20extends%20AbstractConditionFieldDef%20implements%20OnInit%20%7B%0A%20%20defaultOperator%20%3D%20Operator.includeAny%3B%0A%20%20searchCtrl%3A%20UntypedFormControl%20%3D%20new%20UntypedFormControl()%3B%0A%20%20%2F**%20list%20of%20results%20filtered%20by%20search%20keyword%20*%2F%0A%20%20remoteResults%3A%20ReplaySubject%3Cany%5B%5D%3E%20%3D%20new%20ReplaySubject%3Cany%5B%5D%3E(1)%3B%0A%20%20%2F**%20Subject%20that%20emits%20when%20the%20component%20has%20been%20destroyed.%20*%2F%0A%20%20protected%20_onDestroy%20%3D%20new%20Subject%3Cvoid%3E()%3B%0A%0A%20%20http%20%3D%20inject(HttpClient)%3B%0A%0A%20%20ngOnInit()%20%7B%0A%20%20%20%20super.ngOnInit()%3B%0A%20%20%20%20this.searchCtrl.valueChanges%0A%20%20%20%20%20%20.pipe(%0A%20%20%20%20%20%20%20%20%2F%2F%20filter((res)%20%3D%3E%20res.length%20%3E%202)%2C%0A%20%20%20%20%20%20%20%20%2F%2F%20Time%20in%20milliseconds%20between%20key%20events%0A%20%20%20%20%20%20%20%20debounceTime(500)%2C%0A%20%20%20%20%20%20%20%20%2F%2F%20If%20previous%20query%20is%20different%20from%20current%0A%20%20%20%20%20%20%20%20distinctUntilChanged()%2C%0A%20%20%20%20%20%20%20%20takeUntil(this._onDestroy)%2C%0A%20%20%20%20%20%20)%0A%20%20%20%20%20%20.subscribe((term)%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20const%20extra%20%3D%20term.length%20%3F%20%60%2Fautocomplete%3Fquery%3D%24%7Bterm%7D%60%20%3A%20''%3B%0A%20%20%20%20%20%20%20%20this.http.get(%60https%3A%2F%2Fapi.openbrewerydb.org%2Fbreweries%24%7Bextra%7D%60).subscribe((response%3A%20any)%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%20%20this.remoteResults.next(response)%3B%0A%20%20%20%20%20%20%20%20%7D)%3B%0A%20%20%20%20%20%20%7D)%3B%0A%20%20%20%20this.searchCtrl.setValue(''%2C%20%7B%20emitEvent%3A%20true%20%7D)%3B%0A%20%20%7D%0A%7D%0A%0A%2F**%0A%20*%20%40title%20Just%20Criteria%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'just-criteria-example'%2C%0A%20%20%20%20templateUrl%3A%20'just-criteria-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'just-criteria-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20JustCriteriaExample%20implements%20OnInit%20%7B%0A%20%20criteriaBuilder%20%3D%20viewChild(CriteriaBuilderComponent)%3B%0A%0A%20%20queryForm%3A%20AbstractControl%3B%0A%20%20config%3A%20any%20%3D%20null%3B%0A%0A%20%20and%20%3D%20%5BConjunction.AND%5D%3B%0A%20%20andOr%20%3D%20%5BConjunction.AND%2C%20Conjunction.OR%5D%3B%0A%20%20andOrNot%20%3D%20%5BConjunction.AND%2C%20Conjunction.OR%2C%20Conjunction.NOT%5D%3B%0A%0A%20%20addressConfig%3A%20AddressCriteriaConfig%20%3D%20%7B%0A%20%20%20%20radiusEnabled%3A%20true%2C%0A%20%20%20%20radiusUnits%3A%20'miles'%0A%20%20%7D%3B%0A%20%20addressRadiusEnabled%3A%20boolean%20%3D%20false%3B%0A%20%20addressRadiusEnabledOptions%3A%20%7B%20label%3A%20string%2C%20value%3A%20boolean%20%7D%5B%5D%20%3D%20%5B%0A%20%20%20%20%7B%20label%3A%20'Yes'%2C%20value%3A%20true%20%7D%2C%0A%20%20%20%20%7B%20label%3A%20'No'%2C%20value%3A%20false%20%7D%2C%0A%20%20%5D%3B%0A%0A%20%20useNoteMeta%3A%20boolean%20%3D%20false%3B%0A%20%20useNoteMetaOptions%20%3D%20%5B%0A%20%20%20%20%7B%20label%3A%20'True'%2C%20value%3A%20true%20%7D%2C%0A%20%20%20%20%7B%20label%3A%20'False'%2C%20value%3A%20false%20%7D%0A%20%20%5D%3B%0A%0A%20%20hideFirstOperator%3A%20boolean%20%3D%20true%3B%0A%20%20hideFirstOperatorOptions%20%3D%20%5B%0A%20%20%20%20%7B%20label%3A%20'True'%2C%20value%3A%20true%20%7D%2C%0A%20%20%20%20%7B%20label%3A%20'False'%2C%20value%3A%20false%20%7D%0A%20%20%5D%3B%0A%0A%20%20canBeEmpty%3A%20boolean%20%3D%20false%3B%0A%20%20canBeEmptyOptions%20%3D%20%5B%0A%20%20%20%20%7B%20label%3A%20'True'%2C%20value%3A%20true%20%7D%2C%0A%20%20%20%20%7B%20label%3A%20'False'%2C%20value%3A%20false%20%7D%0A%20%20%5D%3B%0A%0A%20%20editTypeFn%20%3D%20(field%3A%20any)%20%3D%3E%20%7B%0A%20%20%20%20if%20(field.optionsType%20%3D%3D%3D%20'Brewery')%20return%20'custom'%3B%0A%20%20%20%20if%20(field.dataSpecialization%20%3D%3D%3D%20'DATE')%20%7B%0A%20%20%20%20%20%20return%20field.dataSpecialization%3B%0A%20%20%20%20%7D%0A%20%20%20%20return%20(field.inputType%20%7C%7C%20field.dataType%20%7C%7C%20field.type).toLowerCase()%3B%0A%20%20%7D%3B%0A%0A%20%20constructor(private%20formBuilder%3A%20UntypedFormBuilder%2C%20private%20cdr%3A%20ChangeDetectorRef)%20%7B%7D%0A%0A%20%20ngOnInit()%20%7B%0A%20%20%20%20this.queryForm%20%3D%20this.formBuilder.group(%7B%20criteria%3A%20%5B%5D%20%7D)%3B%0A%20%20%20%20this.getFieldConfig(this.useNoteMeta).then((fields)%20%3D%3E%20%7B%0A%20%20%20%20%20%20this.prepopulateForm()%3B%0A%20%20%20%20%20%20this.config%20%3D%20%7B%20fields%20%7D%3B%0A%20%20%20%20%20%20this.cdr.detectChanges()%3B%0A%20%20%20%20%7D)%3B%0A%20%20%7D%0A%0A%20%20getFieldConfig(useNoteMeta%3A%20boolean)%20%7B%0A%20%20%20%20const%20allMetas%20%3D%20useNoteMeta%20%3F%20%5BMockCandidateMeta%2C%20MockNoteMeta%5D%20%3A%20%5BMockCandidateMeta%5D%3B%0A%20%20%20%20return%20Promise.all(allMetas).then((metas)%20%3D%3E%20%7B%0A%20%20%20%20%20%20return%20metas.map((it)%20%3D%3E%20(%7B%0A%20%20%20%20%20%20%20%20value%3A%20it.entity%2C%0A%20%20%20%20%20%20%20%20entity%3A%20'Person'%2C%0A%20%20%20%20%20%20%20%20label%3A%20it.label%2C%0A%20%20%20%20%20%20%20%20options%3A%20it.fields%2C%0A%20%20%20%20%20%20%20%20find%3A%20(name%3A%20string)%20%3D%3E%20it.fields.find((f)%20%3D%3E%20f.name%20%3D%3D%3D%20name)%2C%0A%20%20%20%20%20%20%20%20search%3A%20(term%3A%20string)%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%20%20return%20it.fields.filter((f)%20%3D%3E%20f.name.includes(term)%20%7C%7C%20f.label.includes(term))%3B%0A%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7D))%3B%0A%20%20%20%20%7D)%3B%0A%20%20%7D%0A%0A%20%20setFieldConfig(useNoteMeta%3A%20boolean)%20%7B%0A%20%20%20%20this.resetQueryForm()%3B%0A%20%20%20%20this.getFieldConfig(useNoteMeta).then((fields)%20%3D%3E%20%7B%0A%20%20%20%20%20%20this.config%20%3D%20%7B%20fields%20%7D%3B%0A%20%20%20%20%20%20this.cdr.detectChanges()%3B%0A%20%20%20%20%7D)%3B%0A%20%20%7D%0A%0A%20%20prepopulateForm(addAdditionalScope%20%3D%20false)%20%7B%0A%20%20%20%20const%20prepopulatedData%3A%20any%20%3D%20%5B%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%24and%3A%20%5B%0A%20%20%20%20%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20field%3A%20'id'%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20operator%3A%20'equalTo'%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20scope%3A%20'Candidate'%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20entity%3A%20'Person'%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20value%3A%20123%2C%0A%20%20%20%20%20%20%20%20%20%20%7D%2C%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20field%3A%20'availability'%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20operator%3A%20'includeAny'%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20scope%3A%20'Candidate'%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20entity%3A%20'Person'%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20value%3A%20%5B'test'%5D%2C%0A%20%20%20%20%20%20%20%20%20%20%7D%2C%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20field%3A%20'customDate1'%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20operator%3A%20'within'%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20scope%3A%20'Candidate'%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20entity%3A%20'Person'%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20value%3A%20'-30'%2C%0A%20%20%20%20%20%20%20%20%20%20%7D%2C%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20field%3A%20'address'%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20operator%3A%20'includeAny'%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20scope%3A%20'Candidate'%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20entity%3A%20'Person'%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20value%3A%20null%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20supportingValue%3A%205%2C%0A%20%20%20%20%20%20%20%20%20%20%7D%2C%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20field%3A%20'status'%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20operator%3A%20'includeAny'%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20scope%3A%20'Candidate'%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20entity%3A%20'Person'%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20value%3A%20null%2C%0A%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%5D%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%5D%3B%0A%20%20%20%20const%20prepopulatedNoteConditions%3A%20any%20%3D%20%7B%0A%20%20%20%20%20%20%24not%3A%20%5B%0A%20%20%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20field%3A%20'notes.action'%2C%0A%20%20%20%20%20%20%20%20%20%20operator%3A%20'includeAny'%2C%0A%20%20%20%20%20%20%20%20%20%20scope%3A%20'Note'%2C%0A%20%20%20%20%20%20%20%20%20%20value%3A%20%5B'Left%20Message'%5D%2C%0A%20%20%20%20%20%20%20%20%7D%2C%20%7B%0A%20%20%20%20%20%20%20%20%20%20field%3A%20'notes.dateAdded'%2C%0A%20%20%20%20%20%20%20%20%20%20operator%3A%20'within'%2C%0A%20%20%20%20%20%20%20%20%20%20scope%3A%20'Note'%2C%0A%20%20%20%20%20%20%20%20%20%20value%3A%20'-7'%2C%0A%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%5D%2C%0A%20%20%20%20%7D%3B%0A%20%20%20%20if%20(addAdditionalScope)%20%7B%0A%20%20%20%20%20%20prepopulatedData.push(prepopulatedNoteConditions)%3B%0A%20%20%20%20%7D%0A%20%20%20%20this.setQueryForm(prepopulatedData)%3B%0A%20%20%7D%0A%0A%20%20resetQueryForm(addAdditionalScope%20%3D%20false)%20%7B%0A%20%20%20%20this.criteriaBuilder().clearAllConditions()%3B%0A%20%20%20%20this.prepopulateForm(addAdditionalScope)%3B%0A%20%20%7D%0A%0A%20%20setQueryForm(criteria%3F)%20%7B%0A%20%20%20%20this.queryForm.setValue(%7B%20criteria%20%7D)%3B%0A%20%20%7D%0A%0A%20%20onSubmit()%20%7B%0A%20%20%20%20console.log('Your%20form%20data%20%3A%20'%2C%20this.queryForm.value)%3B%0A%20%20%7D%0A%0A%20%20resetGroups()%20%7B%0A%20%20%20%20this.criteriaBuilder().clearAllConditions()%3B%0A%20%20%20%20this.criteriaBuilder().addConditionGroup()%3B%0A%20%20%7D%0A%0A%20%20addressRadiusEnabledChanged(enabled%3A%20boolean)%20%7B%0A%20%20%20%20this.addressConfig%20%3D%20Object.assign(%7B%7D%2C%20this.addressConfig%2C%20%7B%20radiusEnabled%3A%20enabled%20%7D)%3B%0A%20%20%7D%0A%0A%20%20addressRadiusUnitsSelected(units%3A%20AddressRadiusUnitsName)%20%7B%0A%20%20%20%20this.addressConfig%20%3D%20Object.assign(%7B%7D%2C%20this.addressConfig%2C%20%7B%20radiusUnits%3A%20units%20%7D)%3B%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cform%20%5BformGroup%5D%3D%22queryForm%22%20(ngSubmit)%3D%22onSubmit()%22%3E%0A%20%20%3Cnovo-criteria-builder%0A%20%20%20%20%23builder%0A%20%20%20%20controlName%3D%22criteria%22%0A%20%20%20%20%5BallowedGroupings%5D%3D%22mode.value%22%0A%20%20%20%20%5Bconfig%5D%3D%22config%22%0A%20%20%20%20%5BeditTypeFn%5D%3D%22editTypeFn%22%0A%20%20%20%20%5BhideFirstOperator%5D%3D%22hideFirstOperator%22%0A%20%20%20%20%5BcanBeEmpty%5D%3D%22canBeEmpty%22%0A%20%20%20%20%5BaddressConfig%5D%3D%22addressConfig%22%3E%0A%20%20%20%20%3Ccustom-picker-condition-def%20name%3D%22CUSTOM%22%3E%3C%2Fcustom-picker-condition-def%3E%0A%20%20%3C%2Fnovo-criteria-builder%3E%0A%0A%20%20%3Cnovo-row%20gap%3D%22md%22%20justify%3D%22end%22%3E%0A%20%20%20%20%3Cbutton%20theme%3D%22primary%22%20size%3D%22sm%22%20*ngIf%3D%22!useNoteMeta%22%20(click)%3D%22builder.addConditionGroup()%22%3EAdd%20a%20group%3C%2Fbutton%3E%0A%20%20%20%20%3Cbutton%20theme%3D%22secondary%22%20size%3D%22sm%22%20(click)%3D%22resetGroups()%22%3EReset%3C%2Fbutton%3E%0A%20%20%20%20%3Cbutton%20theme%3D%22secondary%22%20size%3D%22sm%22%20(click)%3D%22resetQueryForm(useNoteMeta)%22%3ERepopulate%3C%2Fbutton%3E%0A%20%20%3C%2Fnovo-row%3E%0A%3C%2Fform%3E%0A%0A%3Cnovo-row%20align%3D%22start%22%20gap%3D%22xl%22%20margin%3D%22xl%22%3E%0A%20%20%3Csection%3E%0A%20%20%20%20%3Cnovo-label%3EJoin%20Operators%3C%2Fnovo-label%3E%0A%20%20%20%20%3Cnovo-radio-group%20%23mode%20%5Bvalue%5D%3D%22andOrNot%22%3E%0A%20%20%20%20%20%20%3Cnovo-radio%20name%3D%22mode%22%20%5Bvalue%5D%3D%22and%22%3EOnly%20And%3C%2Fnovo-radio%3E%0A%20%20%20%20%20%20%3Cnovo-radio%20name%3D%22mode%22%20%5Bvalue%5D%3D%22andOr%22%3EAnd%2C%20Or%3C%2Fnovo-radio%3E%0A%20%20%20%20%20%20%3Cnovo-radio%20name%3D%22mode%22%20%5Bvalue%5D%3D%22andOrNot%22%3EAnd%2C%20Or%2C%20Not%3C%2Fnovo-radio%3E%0A%20%20%20%20%3C%2Fnovo-radio-group%3E%0A%20%20%3C%2Fsection%3E%0A%3C%2Fnovo-row%3E%0A%0A%3Cnovo-row%20align%3D%22start%22%20gap%3D%22xl%22%20margin%3D%22xl%22%3E%0A%20%20%3Csection%3E%0A%20%20%20%20%3Cnovo-label%20marginRight%3D%22md%22%3EAdd%20Additional%20Scope%0A%20%20%20%20%20%20%3Cspan%20tooltip%3D%22Adding%20an%20additional%20entity%20scope%20to%20the%20searchable%20fields%20will%20change%20the%20behavior%20when%20adding%20a%20new%20condition%22%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-icon%3Einfo%3C%2Fnovo-icon%3E%0A%20%20%20%20%20%20%3C%2Fspan%3E%3C%2Fnovo-label%3E%0A%20%20%20%20%3Cnovo-tiles%20%5Boptions%5D%3D%22useNoteMetaOptions%22%20%5B(ngModel)%5D%3D%22useNoteMeta%22%20(onChange)%3D%22setFieldConfig(%24event)%22%2F%3E%0A%20%20%3C%2Fsection%3E%0A%3C%2Fnovo-row%3E%0A%0A%3Cnovo-row%20align%3D%22start%22%20gap%3D%22xl%22%20margin%3D%22xl%22%3E%0A%20%20%3Csection%3E%0A%20%20%20%20%3Cnovo-label%20marginRight%3D%22md%22%3EHide%20First%20Operator%0A%20%20%20%20%20%20%3Cspan%20tooltip%3D%22Disabling%20will%20display%20the%20AND%2FOR%2FNOT%20operator%20in%20the%20first%20row.%20Enabling%20(default)%20will%20hide%20it%22%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-icon%3Einfo%3C%2Fnovo-icon%3E%0A%20%20%20%20%20%20%3C%2Fspan%3E%3C%2Fnovo-label%3E%0A%20%20%20%20%3Cnovo-tiles%20%5Boptions%5D%3D%22hideFirstOperatorOptions%22%20%5B(ngModel)%5D%3D%22hideFirstOperator%22%2F%3E%0A%20%20%3C%2Fsection%3E%0A%3C%2Fnovo-row%3E%0A%0A%3Cnovo-row%20align%3D%22start%22%20gap%3D%22xl%22%20margin%3D%22xl%22%3E%0A%20%20%3Csection%3E%0A%20%20%20%20%3Cnovo-label%20marginRight%3D%22md%22%3ECan%20Be%20Empty%0A%20%20%20%20%20%20%3Cspan%20tooltip%3D%22Enabling%20will%20allow%20you%20to%20delete%20a%20row%20if%20it%20is%20the%20only%20row%20in%20the%20criteria%20builder.%20Disabling%20(default)%20will%20keep%20the%20final%20row%2C%20and%20will%20instead%20clear%20it%20out%22%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-icon%3Einfo%3C%2Fnovo-icon%3E%0A%20%20%20%20%20%20%3C%2Fspan%3E%3C%2Fnovo-label%3E%0A%20%20%20%20%3Cnovo-tiles%20%5Boptions%5D%3D%22canBeEmptyOptions%22%20%5B(ngModel)%5D%3D%22canBeEmpty%22%2F%3E%0A%20%20%3C%2Fsection%3E%0A%3C%2Fnovo-row%3E%0A%0A%3Cnovo-row%20align%3D%22start%22%20gap%3D%22xl%22%20margin%3D%22xl%22%3E%0A%20%20%3Csection%3E%0A%20%20%20%20%3Cnovo-label%20marginRight%3D%22md%22%3EAddress%20Radius%0A%20%20%20%20%20%20%3Cspan%20tooltip%3D%22Enabling%20will%20add%20a%20radius%20option%20to%20the%20full%20address%20criteria%20operator%20dropdown%22%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-icon%3Einfo%3C%2Fnovo-icon%3E%0A%20%20%20%20%20%20%3C%2Fspan%3E%0A%20%20%20%20%3C%2Fnovo-label%3E%0A%20%20%20%20%3Cnovo-tiles%20%5Boptions%5D%3D%22addressRadiusEnabledOptions%22%20(onChange)%3D%22addressRadiusEnabledChanged(%24event)%22%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%5B(ngModel)%5D%3D%22addressRadiusEnabled%22%2F%3E%0A%20%20%20%20%3Cnovo-row%20*ngIf%3D%22addressRadiusEnabled%22%20align%3D%22start%22%20gap%3D%22xl%22%20marginLeft%3D%22xl%22%3E%0A%20%20%20%20%20%20%3Cnovo-label%20margin%3D%22lg%22%3EUnits%3A%3C%2Fnovo-label%3E%0A%20%20%20%20%20%20%3Cnovo-select%20margin%3D%22lg%22%20value%3D%22miles%22%20(onSelect)%3D%22addressRadiusUnitsSelected(%24event.selected)%22%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-option%20value%3D%22miles%22%3EMiles%3C%2Fnovo-option%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-option%20value%3D%22km%22%3EKm%3C%2Fnovo-option%3E%0A%20%20%20%20%20%20%3C%2Fnovo-select%3E%0A%20%20%20%20%3C%2Fnovo-row%3E%0A%20%20%3C%2Fsection%3E%0A%3C%2Fnovo-row%3E%0A%0A%3Cpre%3E%3Ccode%3E%7B%7B%20queryForm.value%20%7C%20json%20%7D%7D%3C%2Fcode%3E%3C%2Fpre%3E%0A`,
        selectorName: 'JustCriteriaExample, CustomPickerConditionDef'
    },
    'progress-bar-usage': {
        title: 'Progress Bar Usage',
        component: ProgressBarUsageExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Progress%20Bar%20Usage%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'progess-bar-usage-example'%2C%0A%20%20%20%20templateUrl%3A%20'.%2Fprogress-bar-usage-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'.%2Fprogress-bar-usage-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20ProgressBarUsageExample%20%7B%0A%20%20public%20largeTooltip%3A%20string%20%3D%20%60Lorem%20Ipsum%5Cn%5Cn%20is%20simply%20dummy%20text%20of%20the%20printing%20and%20typesetting%20industry.%20%5Cn%20Learn%20more%20%3Ca%3Ehere%3C%2Fa%3E%60%3B%0A%7D%0A`,
        cssSource: `span%5Btooltip%5D%20%7B%0A%20%20margin-left%3A%2010px%3B%0A%7D%0A%0A.resizable%20%7B%0A%20%20resize%3A%20horizontal%3B%0A%20%20overflow%3A%20auto%3B%0A%20%20width%3A%20200px%3B%0A%7D%0A`,
        htmlSource: `%3Cdiv%20class%3D%22resizable%22%3E%0A%20%20%3Cnovo-progress%3E%0A%20%20%20%20%3Cnovo-progress-bar%20flash%3D%22true%22%3E%3C%2Fnovo-progress-bar%3E%0A%20%20%3C%2Fnovo-progress%3E%0A%3C%2Fdiv%3E%0A%0A%3Cbr%20%2F%3E%0A%0A%3Cnovo-progress%3E%0A%20%20%3Cnovo-progress-bar%20indeterminate%3D%22true%22%3E%3C%2Fnovo-progress-bar%3E%0A%3C%2Fnovo-progress%3E%0A%0A%3Cbr%20%2F%3E%0A%0A%3Cnovo-progress%20striped%3D%22true%22%3E%0A%20%20%3Cnovo-progress-bar%20value%3D%2240%22%3E%3C%2Fnovo-progress-bar%3E%0A%3C%2Fnovo-progress%3E%0A%0A%3Cbr%20%2F%3E%0A%0A%3Cnovo-progress%20total%3D%22300%22%3E%0A%20%20%3Cnovo-progress-bar%20value%3D%22120%22%20color%3D%22success%22%20%5Btooltip%5D%3D%22largeTooltip%22%20tooltipSize%3D%22large%22%3E%3C%2Fnovo-progress-bar%3E%0A%20%20%3Cnovo-progress-bar%20value%3D%2240%22%20color%3D%22negative%22%3E%3C%2Fnovo-progress-bar%3E%0A%3C%2Fnovo-progress%3E`
    },
    'progress-bar-radial-usage': {
        title: 'Radial Progress Bars Usage',
        component: ProgressBarRadialUsageExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Radial%20Progress%20Bars%20Usage%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'progress-bar-radial-usage-example'%2C%0A%20%20%20%20templateUrl%3A%20'progress-bar-radial-usage-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'progress-bar-radial-usage-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20ProgressBarRadialUsageExample%20%7B%7D%0A`,
        cssSource: `span%5Btooltip%5D%7B%0A%20%20margin-left%3A%2010px%3B%0A%7D%0A`,
        htmlSource: `%3Cnovo-progress%20appearance%3D%22radial%22%3E%0A%20%20%3Cnovo-progress-bar%20value%3D%2270%22%3E%3C%2Fnovo-progress-bar%3E%0A%3C%2Fnovo-progress%3E%0A%0A%3Cbr%20%2F%3E%0A%0A%3Cnovo-progress%20appearance%3D%22radial%22%20total%3D%2260%22%3E%0A%20%20%3Cnovo-progress-bar%20value%3D%2250%22%20color%3D%22success%22%3E%3C%2Fnovo-progress-bar%3E%0A%20%20%3Cnovo-progress-bar%20value%3D%2240%22%20color%3D%22negative%22%3E%3C%2Fnovo-progress-bar%3E%0A%20%20%3Cnovo-progress-bar%20value%3D%2230%22%20color%3D%22warning%22%3E%3C%2Fnovo-progress-bar%3E%0A%3C%2Fnovo-progress%3E`
    },
    'pop-over-vertical': {
        title: 'PopOvers with Vertical Positioning',
        component: PopOverVerticalExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20PopOvers%20with%20Vertical%20Positioning%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'pop-over-vertical-example'%2C%0A%20%20%20%20templateUrl%3A%20'pop-over-vertical-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'pop-over-vertical-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20PopOverVerticalExample%20%7B%7D%0A`,
        cssSource: `%2F**%20CSS%20for%20this%20example%20*%2F%0A%3Ahost%20%7B%0A%20%20margin%3A%20auto%3B%0A%20%20padding%3A%2020px%2030px%3B%0A%20%20position%3A%20relative%3B%0A%20%20display%3A%20flex%3B%0A%7D%0A%0A%3Ahost%20%3E%20span%20%7B%0A%20%20cursor%3A%20pointer%3B%0A%20%20margin%3A%20auto%3B%0A%7D%0A`,
        htmlSource: `%3Cspan%20novoPopover%3D%22Popover%20is%20on%20the%20right%20side%20and%20below%20the%20element.%20Can%20also%20apply%20'top'%20to%20'right'%20placement%20PopOvers.%22%0A%20%20%20%20popoverTitle%3D%22Right-Bottom%20PopOver%22%0A%20%20%20%20popoverPlacement%3D%22right-bottom%22%0A%20%20%20%20%5BpopoverOnHover%5D%3D%22true%22%3E%0A%20%20%20%20RIGHT-BOTTOM%0A%3C%2Fspan%3E%0A%3Cspan%20novoPopover%3D%22Popover%20is%20on%20the%20left%20side%20and%20above%20the%20element.%20Can%20also%20apply%20'bottom'%20to%20'left'%20placement%20PopOvers.%22%0A%20%20%20%20popoverTitle%3D%22Left-Top%20PopOver%22%0A%20%20%20%20popoverPlacement%3D%22left-top%22%0A%20%20%20%20%5BpopoverOnHover%5D%3D%22true%22%3E%0A%20%20%20%20LEFT-TOP%0A%3C%2Fspan%3E%0A`
    },
    'pop-over-placement': {
        title: 'PopOver Placement Example',
        component: PopOverPlacementExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20PopOver%20Placement%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'pop-over-placement-example'%2C%0A%20%20%20%20templateUrl%3A%20'pop-over-placement-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'pop-over-placement-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20PopOverPlacementExample%20%7B%7D%0A`,
        cssSource: `%2F**%20CSS%20for%20this%20example%20*%2F%0A%3Ahost%20%7B%0A%20%20margin%3A%20auto%3B%0A%20%20padding%3A%2020px%2030px%3B%0A%20%20position%3A%20relative%3B%0A%20%20display%3A%20flex%3B%0A%7D%0A%0A%3Ahost%20%3E%20span%20%7B%0A%20%20cursor%3A%20pointer%3B%0A%20%20margin%3A%20auto%3B%0A%7D%0A`,
        htmlSource: `%3Cspan%20novoPopover%3D%22Popover%20is%20to%20left%20of%20element%22%20popoverTitle%3D%22Left%20PopOver%22%20popoverPlacement%3D%22left%22%20%5BpopoverOnHover%5D%3D%22true%22%3ELEFT%3C%2Fspan%3E%0A%3Cspan%20novoPopover%3D%22Popover%20is%20to%20right%20of%20element%22%20popoverTitle%3D%22Right%20PopOver%22%20popoverPlacement%3D%22right%22%20%5BpopoverOnHover%5D%3D%22true%22%3ERIGHT%3C%2Fspan%3E%0A%3Cspan%20novoPopover%3D%22Popover%20is%20above%20the%20element%22%20popoverTitle%3D%22Top%20PopOver%22%20popoverPlacement%3D%22top%22%20%5BpopoverOnHover%5D%3D%22true%22%3ETOP%3C%2Fspan%3E%0A%3Cspan%20novoPopover%3D%22Popover%20is%20below%20the%20element%22%20popoverTitle%3D%22Bottom%20PopOver%22%20popoverPlacement%3D%22bottom%22%20%5BpopoverOnHover%5D%3D%22true%22%3EBOTTOM%3C%2Fspan%3E%0A`
    },
    'pop-over-horizontal': {
        title: 'PopOvers with Horizontal Positioning',
        component: PopOverHorizontalExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20PopOvers%20with%20Horizontal%20Positioning%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'pop-over-horizontal-example'%2C%0A%20%20%20%20templateUrl%3A%20'pop-over-horizontal-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'pop-over-horizontal-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20PopOverHorizontalExample%20%7B%7D%0A`,
        cssSource: `%2F**%20CSS%20for%20this%20example%20*%2F%0A%3Ahost%20%7B%0A%20%20margin%3A%20auto%3B%0A%20%20padding%3A%2020px%2030px%3B%0A%20%20position%3A%20relative%3B%0A%20%20display%3A%20flex%3B%0A%7D%0A%0A%3Ahost%20%3E%20span%20%7B%0A%20%20cursor%3A%20pointer%3B%0A%20%20margin%3A%20auto%3B%0A%7D%0A`,
        htmlSource: `%3Cspan%20novoPopover%3D%22Popover%20is%20on%20the%20top%20side%20and%20to%20the%20right%20of%20the%20element.%20Can%20also%20apply%20'left'%20to%20'top'%20placement%20PopOvers.%22%0A%20%20%20%20popoverTitle%3D%22Top-Right%20PopOver%22%0A%20%20%20%20popoverPlacement%3D%22top-right%22%0A%20%20%20%20%5BpopoverOnHover%5D%3D%22true%22%3E%0A%20%20%20%20TOP-RIGHT%0A%3C%2Fspan%3E%0A%3Cspan%20novoPopover%3D%22Popover%20is%20on%20the%20bottom%20side%20and%20to%20the%20left%20of%20the%20element.%20Can%20also%20apply%20'right'%20to%20'bottom'%20placement%20PopOvers.%22%0A%20%20%20%20popoverTitle%3D%22Bottom-Left%20PopOver%22%0A%20%20%20%20popoverPlacement%3D%22bottom-left%22%0A%20%20%20%20%5BpopoverOnHover%5D%3D%22true%22%3E%0A%20%20%20%20BOTTOM-LEFT%0A%3C%2Fspan%3E%0A`
    },
    'pop-over-dynamic': {
        title: 'PopOver with Dynamic HTML Template Example',
        component: PopOverDynamicExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20PopOver%20with%20Dynamic%20HTML%20Template%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'pop-over-dynamic-example'%2C%0A%20%20%20%20templateUrl%3A%20'pop-over-dynamic-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'pop-over-dynamic-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20PopOverDynamicExample%20%7B%7D%0A`,
        cssSource: `%2F**%20CSS%20for%20this%20example%20*%2F%0A%3Ahost%20%7B%0A%20%20margin%3A%20auto%3B%0A%20%20padding%3A%2020px%2030px%3B%0A%20%20position%3A%20relative%3B%0A%20%20display%3A%20flex%3B%0A%7D%0A%0A%3Ahost%20%3E%20span%20%7B%0A%20%20cursor%3A%20pointer%3B%0A%20%20margin%3A%20auto%3B%0A%7D%0A`,
        htmlSource: `%3Cpopover-content%0A%20%20%23dynamicHtmlPopOver%0A%20%20title%3D%22this%20header%20can%20be%20omitted%22%0A%20%20placement%3D%22right%22%3E%0A%0A%20%20%3Cb%3EVery%3C%2Fb%3E%20%3Cspan%20%5Bstyle.color%5D%3D%22'%23C21F39'%22%3EDynamic%3C%2Fspan%3E%20%3Cspan%20%5Bstyle.color%5D%3D%22'%2300b3ee'%22%3EReusable%3C%2Fspan%3E%0A%20%20%3Cb%3E%3Ci%3E%3Cspan%20%5Bstyle.color%5D%3D%22'%23ffc520'%22%3EPopover%20With%3C%2Fspan%3E%3C%2Fi%3E%3C%2Fb%3E%20%3Csmall%3EHtml%20support%3C%2Fsmall%3E.%20Click%20outside%20of%20this%0A%20%20popover%20and%20it%20will%20be%20dismissed%20automatically.%0A%20%20%3Cu%20(click)%3D%22dynamicHtmlPopOver.hide()%22%20%5Bstyle.cursor%5D%3D%22'pointer'%22%3EOr%20click%20here%20to%20close%20it%3C%2Fu%3E%20and%20can%20listen%20to%20the%0A%20%20onHidden%20or%20onShown%20events%20to%20perform%20additional%20tasks.%0A%3C%2Fpopover-content%3E%0A%0A%3Cspan%20%5BnovoPopover%5D%3D%22dynamicHtmlPopOver%22%3EClick%20to%20see%20a%20popover%20with%20dynamic%20html%3C%2Fspan%3E`
    },
    'pop-over-behaviors': {
        title: 'PopOver Behaviors Example',
        component: PopOverBehaviorsExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20PopOver%20Behaviors%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'pop-over-behaviors-example'%2C%0A%20%20%20%20templateUrl%3A%20'pop-over-behaviors-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'pop-over-behaviors-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20PopOverBehaviorsExample%20%7B%7D%0A`,
        cssSource: `%2F**%20CSS%20for%20this%20example%20*%2F%0A%3Ahost%20%7B%0A%20%20margin%3A%20auto%3B%0A%20%20padding%3A%2020px%2030px%3B%0A%20%20position%3A%20relative%3B%0A%20%20display%3A%20flex%3B%0A%7D%0A%0A%3Ahost%20%3E%20span%20%7B%0A%20%20cursor%3A%20pointer%3B%0A%20%20margin%3A%20auto%3B%0A%7D%0A`,
        htmlSource: `%3Cspan%20class%3D%22popover-element%22%0A%20%20%20%20novoPopover%3D%22PopOver%20appears%20when%20hovering%20over%20the%20element.%20When%20the%20mouse%20is%20no%20longer%20over%20the%20element%20or%20the%20PopOver%2C%20then%20it%20will%20be%20dismissed.%22%0A%20%20%20%20popoverTitle%3D%22ON%20HOVER%22%0A%20%20%20%20popoverPlacement%3D%22right%22%0A%20%20%20%20%5BpopoverOnHover%5D%3D%22true%22%3E%0AON%20HOVER%0A%3C%2Fspan%3E%0A%0A%3Cspan%20class%3D%22popover-element%22%0A%20%20%20%20novoPopover%3D%22PopOver%20appears%20when%20clicking%20on%20the%20element.%20Dismiss%20it%20by%20clicking%20the%20element%20again.%22%0A%20%20%20%20popoverTitle%3D%22ON%20CLICK%22%0A%20%20%20%20popoverPlacement%3D%22right%22%3E%0AON%20CLICK%0A%3C%2Fspan%3E%0A%0A%3Cspan%20class%3D%22popover-element%22%0A%20%20%20%20novoPopover%3D%22This%20PopOver%20has%20a%202000%20ms%20or%202%20second%20timeout%20on%20it.%20Dismiss%20it%20by%20clicking%20on%20the%20element%20or%20waiting%20for%20the%20timeout.%22%0A%20%20%20%20popoverTitle%3D%22ON%20CLICK%20WITH%20TIMEOUT%22%0A%20%20%20%20popoverPlacement%3D%22right%22%0A%20%20%20%20%5BpopoverDismissTimeout%5D%3D%222000%22%3E%0AON%20CLICK%20WITH%20TIMEOUT%0A%3C%2Fspan%3E%0A%0A%3Cspan%20class%3D%22popover-element%22%0A%20%20%20%20novoPopover%3D%22This%20PopOver%20will%20never%20appear%20when%20clicking%20on%20the%20element%20or%20when%20hovering%20over%20the%20element.%22%0A%20%20%20%20popoverTitle%3D%22popoverDisabled%22%0A%20%20%20%20popoverPlacement%3D%22right%22%0A%20%20%20%20%5BpopoverDisabled%5D%3D%22true%22%3E%0ADISABLED%20POPOVER%0A%3C%2Fspan%3E%0A`
    },
    'pop-over-auto-placement': {
        title: 'PopOver with Automatic Positioning Example',
        component: PopOverAutoPlacementExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20PopOver%20with%20Automatic%20Positioning%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'pop-over-auto-placement-example'%2C%0A%20%20%20%20templateUrl%3A%20'pop-over-auto-placement-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'pop-over-auto-placement-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20PopOverAutoPlacementExample%20%7B%7D%0A`,
        cssSource: `%2F**%20CSS%20for%20this%20example%20*%2F%0A%3Ahost%20%7B%0A%20%20margin%3A%20auto%3B%0A%20%20padding%3A%2020px%2030px%3B%0A%20%20position%3A%20relative%3B%0A%20%20display%3A%20flex%3B%0A%7D%0A%0A%3Ahost%20%3E%20span%20%7B%0A%20%20cursor%3A%20pointer%3B%0A%20%20margin%3A%20auto%3B%0A%7D%0A`,
        htmlSource: `%3Cspan%20novoPopover%3D%22If%20the%20placement%20of%20the%20PopOver%20will%20make%20it%20appear%20off-screen%2C%20then%20it%20will%20be%20automatically%20adjusted%20to%20appear%20on%20the%20opposite%20side.%20For%20example%3A%20this%20PopOver%20should%20appear%20below%20the%20element.%26%2313%3B%26%2310%3B%20%26%2313%3B%26%2310%3B%20%26%2313%3B%26%2310%3BNeed%20to%20make%20extra%20space%20so%20this%20PopOver%20would%20actually%20appear%20below%20the%20screen.%22%0A%20%20%20%20popoverTitle%3D%22PopOver%20Moves%20to%20Top%20if%20near%20Bottom%20of%20Screen%22%0A%20%20%20%20popoverPlacement%3D%22bottom%22%0A%20%20%20%20%5BpopoverOnHover%5D%3D%22true%22%3E%0A%20%20%20%20Hover%20Me%0A%3C%2Fspan%3E%0A%3Cspan%20novoPopover%3D%22Too%20small%20to%20drop%20below%20screen.%22%0A%20%20%20%20popoverTitle%3D%22PopOver%20Won't%20Change%22%0A%20%20%20%20popoverPlacement%3D%22bottom%22%0A%20%20%20%20%5BpopoverOnHover%5D%3D%22true%22%3E%0A%20%20%20%20Hover%20Me%20Next%0A%3C%2Fspan%3E%0A`
    },
    'non-ideal-state-usage': {
        title: 'Non Ideal State Usage',
        component: NonIdealStateUsageExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Non%20Ideal%20State%20Usage%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'non-ideal-state-usage-example'%2C%0A%20%20%20%20templateUrl%3A%20'.%2Fnon-ideal-state-usage-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'.%2Fnon-ideal-state-usage-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20NonIdealStateUsageExample%20%7B%7D%0A`,
        cssSource: `span%5Bng-reflect-tooltip%5D%7B%0A%20%20margin-left%3A%2010px%3B%0A%7D%0A`,
        htmlSource: `%3Cnovo-non-ideal-state%20icon%3D%22file%22%20title%3D%22This%20folder%20is%20empty%22%20description%3D%22Upload%20a%20new%20file%20to%20populate%20the%20folder.%22%3E%0A%20%20%3Cbutton%20theme%3D%22primary%22%20icon%3D%22upload%22%3EUpload%3C%2Fbutton%3E%0A%3C%2Fnovo-non-ideal-state%3E%0A%0A%3Cnovo-non-ideal-state%3E%0A%20%20%3Cnovo-icon%20size%3D%22xl%22%20color%3D%22grapefruit%22%3Efile%3C%2Fnovo-icon%3E%0A%20%20%3Cnovo-title%3EThis%20folder%20is%20empty%3C%2Fnovo-title%3E%0A%20%20%3Cnovo-text%3EUpload%20a%20new%20file%20to%20populate%20the%20folder.%3C%2Fnovo-text%3E%0A%20%20%3Cnovo-tip-well%3E%0A%20%20%20%20%3Cnovo-text%3ESed%20sodales%20ligula%20et%20fermentum%20bibendum.%20Aliquam%20tincidunt%20sagittis%20leo%20eget%20auctor.%20Fusce%20eu%20sagittis%0A%20%20%20%20%20%20metus%2C%20ut%20viverra%20magna.%20Mauris%20mollis%20nisl%20nec%20libero%20tincidunt%20posuere.%3C%2Fnovo-text%3E%0A%20%20%3C%2Fnovo-tip-well%3E%0A%20%20%3Cbutton%20theme%3D%22primary%22%20icon%3D%22upload%22%3EUpload%3C%2Fbutton%3E%0A%3C%2Fnovo-non-ideal-state%3E`
    },
    'non-ideal-state-search-usage': {
        title: 'Non Ideal State Alt Usage',
        component: NonIdealStateSearchUsageExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Non%20Ideal%20State%20Alt%20Usage%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'non-ideal-state-search-usage-example'%2C%0A%20%20%20%20templateUrl%3A%20'.%2Fnon-ideal-state-search-usage-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'.%2Fnon-ideal-state-search-usage-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20NonIdealStateSearchUsageExample%20%7B%7D%0A`,
        cssSource: `span%5Btooltip%5D%7B%0A%20%20margin-left%3A%2010px%3B%0A%7D%0A`,
        htmlSource: `%3Cnovo-non-ideal-state%20icon%3D%22search%22%20title%3D%22No%20results%20found.%22%0A%20%20description%3D%22Your%20search%20didn't%20match%20any%20files.%5CnTry%20searching%20for%20something%20else.%22%3E%0A%20%20%3Cnovo-search%20alwaysOpen%3D%22true%22%3E%3C%2Fnovo-search%3E%0A%3C%2Fnovo-non-ideal-state%3E`
    },
    'non-ideal-state-loading-usage': {
        title: 'Non Ideal State Alt Usage',
        component: NonIdealStateLoadingUsageExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Non%20Ideal%20State%20Alt%20Usage%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'non-ideal-state-loading-usage-example'%2C%0A%20%20%20%20templateUrl%3A%20'.%2Fnon-ideal-state-loading-usage-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'.%2Fnon-ideal-state-loading-usage-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20NonIdealStateLoadingUsageExample%20%7B%7D%0A`,
        cssSource: `span%5Btooltip%5D%7B%0A%20%20margin-left%3A%2010px%3B%0A%7D%0A`,
        htmlSource: `%3Cnovo-non-ideal-state%3E%0A%20%20%3Cnovo-loading%3E%3C%2Fnovo-loading%3E%0A%20%20%3Cnovo-text%20lineLength%3D%22large%22%20marginAfter%3EWe%20are%20currently%20experiencing%20technical%20difficulites%20and%20your%20wait%20time%20is%0A%20%20%20%20taking%20a%20bit%20longer%20than%20expected.%20Thank%20you%20for%20your%20patience.%20%3C%2Fnovo-text%3E%0A%20%20%3Cbutton%20theme%3D%22primary%22%20icon%3D%22refresh-o%22%3ERefresh%3C%2Fbutton%3E%0A%3C%2Fnovo-non-ideal-state%3E`
    },
    'warning-modal': {
        title: 'Warning Modal Example',
        component: WarningModalExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0Aimport%20%7B%20NovoModalRef%2C%20NovoModalService%20%7D%20from%20'novo-elements'%3B%0A%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'modal-warning-demo'%2C%0A%20%20%20%20template%3A%20%60%0A%20%20%20%20%3Cnovo-notification%20type%3D%22warning%22%3E%0A%20%20%20%20%20%20%3Ch1%3EThis%20action%20will%20delete%2025%20records.%3C%2Fh1%3E%0A%20%20%20%20%20%20%3Ch2%3EAre%20you%20sure%20you%20wish%20to%20continue%3F%3C%2Fh2%3E%0A%20%20%20%20%20%20%3Cbutton%20theme%3D%22standard%22%20(click)%3D%22close()%22%3ECancel%3C%2Fbutton%3E%0A%20%20%20%20%20%20%3Cbutton%20theme%3D%22primary%22%20color%3D%22negative%22%20icon%3D%22delete%22%20(click)%3D%22close()%22%3EDelete%3C%2Fbutton%3E%0A%20%20%20%20%3C%2Fnovo-notification%3E%0A%20%20%60%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20ModalWarningDemo%20%7B%0A%20%20constructor(private%20modalRef%3A%20NovoModalRef)%20%7B%7D%0A%20%20close()%20%7B%0A%20%20%20%20this.modalRef.close()%3B%0A%20%20%7D%0A%7D%0A%0A%2F**%0A%20*%20%40title%20Warning%20Modal%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'warning-modal-example'%2C%0A%20%20%20%20templateUrl%3A%20'warning-modal-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'warning-modal-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20WarningModalExample%20%7B%0A%20%20constructor(private%20modalService%3A%20NovoModalService)%20%7B%7D%0A%20%20showModal()%20%7B%0A%20%20%20%20this.modalService.open(ModalWarningDemo)%3B%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20CSS%20for%20this%20example%20*%2F%0A%3Ahost%20%7B%0A%20%20display%3A%20block%3B%0A%20%20background%3A%20rgba(0%2C%200%2C%200%2C%200.55)%3B%0A%20%20padding%3A%2035px%200%3B%0A%20%20position%3A%20relative%3B%0A%20%20text-align%3A%20center%3B%0A%7D%0A`,
        htmlSource: `%3Cbutton%20data-automation-id%3D%22modal-trigger%22%20theme%3D%22secondary%22%20(click)%3D%22showModal()%22%3EShow%20Me%20%3A)%3C%2Fbutton%3E%0A`,
        selectorName: 'WarningModalExample, ModalWarningDemo'
    },
    'success-modal': {
        title: 'Success Modal Example',
        component: SuccessModalExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0Aimport%20%7B%20NovoModalRef%2C%20NovoModalService%20%7D%20from%20'novo-elements'%3B%0A%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'modal-success-demo'%2C%0A%20%20%20%20template%3A%20%60%0A%20%20%20%20%3Cnovo-notification%20type%3D%22success%22%3E%0A%20%20%20%20%20%20%3Ch1%3EWoooo!%3C%2Fh1%3E%0A%20%20%20%20%20%20%3Ch2%3EYou%20did%20something%20awesome!%3C%2Fh2%3E%0A%20%20%20%20%20%20%3Cbutton%20theme%3D%22primary%22%20icon%3D%22check%22%20(click)%3D%22close()%22%3EI'm%20awesome%3C%2Fbutton%3E%0A%20%20%20%20%3C%2Fnovo-notification%3E%0A%20%20%60%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20ModalSuccessDemo%20%7B%0A%20%20constructor(private%20modalRef%3A%20NovoModalRef)%20%7B%7D%0A%20%20close()%20%7B%0A%20%20%20%20this.modalRef.close()%3B%0A%20%20%7D%0A%7D%0A%0A%2F**%0A%20*%20%40title%20Success%20Modal%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'success-modal-example'%2C%0A%20%20%20%20templateUrl%3A%20'success-modal-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'success-modal-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20SuccessModalExample%20%7B%0A%20%20constructor(private%20modalService%3A%20NovoModalService)%20%7B%7D%0A%20%20showModal()%20%7B%0A%20%20%20%20this.modalService.open(ModalSuccessDemo)%3B%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20CSS%20for%20this%20example%20*%2F%0A%3Ahost%20%7B%0A%20%20display%3A%20block%3B%0A%20%20background%3A%20rgba(0%2C%200%2C%200%2C%200.55)%3B%0A%20%20padding%3A%2035px%200%3B%0A%20%20position%3A%20relative%3B%0A%20%20text-align%3A%20center%3B%0A%7D%0A`,
        htmlSource: `%3Cbutton%20data-automation-id%3D%22modal-trigger%22%20theme%3D%22secondary%22%20(click)%3D%22showModal()%22%3EShow%20Me%20%3A)%3C%2Fbutton%3E%0A`,
        selectorName: 'SuccessModalExample, ModalSuccessDemo'
    },
    'modal-edit-form': {
        title: 'Modal Edit Form Example',
        component: ModalEditFormExample,
        tsSource: `import%20%7B%20Component%2C%20OnInit%20%7D%20from%20'%40angular%2Fcore'%3B%0Aimport%20%7B%20FormUtils%2C%20NovoModalRef%2C%20NovoModalService%2C%20PickerControl%2C%20PickerResults%2C%20TextBoxControl%20%7D%20from%20'novo-elements'%3B%0A%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'modal-edit-form-demo'%2C%0A%20%20%20%20template%3A%20%60%0A%20%20%20%20%3Cnovo-modal%3E%0A%20%20%20%20%20%20%3Cheader%20theme%3D%22candidate%22%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-icon%3Ecandidate%3C%2Fnovo-icon%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-title%3EFerdinand%20del%20Toro%3C%2Fnovo-title%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-action%20icon%3D%22times%22%20(click)%3D%22close()%22%3E%3C%2Fnovo-action%3E%0A%20%20%20%20%20%20%3C%2Fheader%3E%0A%20%20%20%20%20%20%3Csection%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-form%20%5Bform%5D%3D%22textForm%22%3E%0A%20%20%20%20%20%20%20%20%20%20%3Cdiv%20class%3D%22novo-form-row%22%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%3Cnovo-control%20%5Bform%5D%3D%22textForm%22%20%5Bcontrol%5D%3D%22textControl%22%3E%3C%2Fnovo-control%3E%0A%20%20%20%20%20%20%20%20%20%20%3C%2Fdiv%3E%0A%20%20%20%20%20%20%20%20%20%20%3Cdiv%20class%3D%22novo-form-row%22%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%3Cnovo-control%20%5Bform%5D%3D%22textForm%22%20%5Bcontrol%5D%3D%22emailControl%22%3E%3C%2Fnovo-control%3E%0A%20%20%20%20%20%20%20%20%20%20%3C%2Fdiv%3E%0A%20%20%20%20%20%20%20%20%20%20%3Cdiv%20class%3D%22novo-form-row%22%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%3Cnovo-control%20%5Bform%5D%3D%22textForm%22%20%5Bcontrol%5D%3D%22numberControl%22%3E%3C%2Fnovo-control%3E%0A%20%20%20%20%20%20%20%20%20%20%3C%2Fdiv%3E%0A%20%20%20%20%20%20%20%20%20%20%3Cdiv%20class%3D%22novo-form-row%22%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%3Cnovo-control%20%5Bform%5D%3D%22textForm%22%20%5Bcontrol%5D%3D%22pickerControl%22%3E%3C%2Fnovo-control%3E%0A%20%20%20%20%20%20%20%20%20%20%3C%2Fdiv%3E%0A%20%20%20%20%20%20%20%20%3C%2Fnovo-form%3E%0A%20%20%20%20%20%20%3C%2Fsection%3E%0A%20%20%20%20%20%20%3Cbutton%20theme%3D%22standard%22%20(click)%3D%22close()%22%3ECancel%3C%2Fbutton%3E%0A%20%20%20%20%20%20%3Cbutton%20theme%3D%22primary%22%20icon%3D%22check%22%20(click)%3D%22close()%22%3ESave%3C%2Fbutton%3E%0A%20%20%20%20%3C%2Fnovo-modal%3E%0A%20%20%60%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20ModalEditFormDemo%20implements%20OnInit%20%7B%0A%20%20public%20textControl%3A%20any%3B%0A%20%20public%20emailControl%3A%20any%3B%0A%20%20public%20numberControl%3A%20any%3B%0A%20%20public%20pickerControl%3A%20any%3B%0A%20%20public%20textForm%3A%20any%3B%0A%0A%20%20constructor(private%20modalRef%3A%20NovoModalRef%2C%20private%20formUtils%3A%20FormUtils)%20%7B%0A%20%20%20%20this.formUtils%20%3D%20formUtils%3B%0A%20%20%20%20this.modalRef%20%3D%20modalRef%3B%0A%20%20%7D%0A%0A%20%20ngOnInit()%20%7B%0A%20%20%20%20this.textControl%20%3D%20new%20TextBoxControl(%7B%20key%3A%20'text'%2C%20label%3A%20'Text%20Box'%20%7D)%3B%0A%20%20%20%20this.emailControl%20%3D%20new%20TextBoxControl(%7B%20type%3A%20'email'%2C%20key%3A%20'email'%2C%20label%3A%20'Email'%20%7D)%3B%0A%20%20%20%20this.numberControl%20%3D%20new%20TextBoxControl(%7B%20type%3A%20'number'%2C%20key%3A%20'number'%2C%20label%3A%20'Number'%20%7D)%3B%0A%20%20%20%20this.pickerControl%20%3D%20new%20PickerControl(%7B%0A%20%20%20%20%20%20key%3A%20'picker'%2C%0A%20%20%20%20%20%20multiple%3A%20true%2C%0A%20%20%20%20%20%20label%3A%20'Picker'%2C%0A%20%20%20%20%20%20required%3A%20true%2C%0A%20%20%20%20%20%20config%3A%20%7B%0A%20%20%20%20%20%20%20%20resultsTemplate%3A%20PickerResults%2C%0A%20%20%20%20%20%20%20%20options%3A%20%5B'Apple'%2C%20'Banana'%2C%20'Grapes'%2C%20'Orange'%2C%20'Pear'%5D%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%7D)%3B%0A%0A%20%20%20%20this.textForm%20%3D%20this.formUtils.toFormGroup(%5Bthis.textControl%2C%20this.emailControl%2C%20this.numberControl%2C%20this.pickerControl%5D)%3B%0A%20%20%7D%0A%20%20close()%20%7B%0A%20%20%20%20this.modalRef.close()%3B%0A%20%20%7D%0A%7D%0A%0A%2F**%0A%20*%20%40title%20Modal%20Edit%20Form%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'modal-edit-form-example'%2C%0A%20%20%20%20templateUrl%3A%20'modal-edit-form-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'modal-edit-form-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20ModalEditFormExample%20%7B%0A%20%20constructor(private%20modalService%3A%20NovoModalService)%20%7B%7D%0A%20%20showModal()%20%7B%0A%20%20%20%20this.modalService.open(ModalEditFormDemo)%3B%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20CSS%20for%20this%20example%20*%2F%0A%3Ahost%20%7B%0A%20%20display%3A%20block%3B%0A%20%20background%3A%20rgba(0%2C%200%2C%200%2C%200.55)%3B%0A%20%20padding%3A%2035px%200%3B%0A%20%20position%3A%20relative%3B%0A%20%20text-align%3A%20center%3B%0A%7D%0A`,
        htmlSource: `%3Cbutton%20data-automation-id%3D%22modal-trigger%22%20theme%3D%22secondary%22%20(click)%3D%22showModal()%22%3EShow%20Me%20%3A)%3C%2Fbutton%3E%0A`,
        selectorName: 'ModalEditFormExample, ModalEditFormDemo'
    },
    'modal-add-form': {
        title: 'Modal Add Form Example',
        component: ModalAddFormExample,
        tsSource: `import%20%7B%20Component%2C%20OnInit%20%7D%20from%20'%40angular%2Fcore'%3B%0Aimport%20%7B%20FormUtils%2C%20NovoModalRef%2C%20NovoModalService%2C%20PickerControl%2C%20PickerResults%2C%20TextBoxControl%20%7D%20from%20'novo-elements'%3B%0A%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'modal-edit-form-demo'%2C%0A%20%20%20%20template%3A%20%60%0A%20%20%20%20%3Cnovo-modal%3E%0A%20%20%20%20%20%20%3Cheader%20theme%3D%22contact%22%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-icon%3Eperson%3C%2Fnovo-icon%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-title%3EAdd%20Contact%3C%2Fnovo-title%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-action%20icon%3D%22times%22%20(click)%3D%22close()%22%3E%3C%2Fnovo-action%3E%0A%20%20%20%20%20%20%3C%2Fheader%3E%0A%20%20%20%20%20%20%3Csection%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-form%20%5Bform%5D%3D%22textForm%22%3E%0A%20%20%20%20%20%20%20%20%20%20%3Cdiv%20class%3D%22novo-form-row%22%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%3Cnovo-control%20%5Bform%5D%3D%22textForm%22%20%5Bcontrol%5D%3D%22textControl%22%3E%3C%2Fnovo-control%3E%0A%20%20%20%20%20%20%20%20%20%20%3C%2Fdiv%3E%0A%20%20%20%20%20%20%20%20%20%20%3Cdiv%20class%3D%22novo-form-row%22%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%3Cnovo-control%20%5Bform%5D%3D%22textForm%22%20%5Bcontrol%5D%3D%22emailControl%22%3E%3C%2Fnovo-control%3E%0A%20%20%20%20%20%20%20%20%20%20%3C%2Fdiv%3E%0A%20%20%20%20%20%20%20%20%20%20%3Cdiv%20class%3D%22novo-form-row%22%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%3Cnovo-control%20%5Bform%5D%3D%22textForm%22%20%5Bcontrol%5D%3D%22numberControl%22%3E%3C%2Fnovo-control%3E%0A%20%20%20%20%20%20%20%20%20%20%3C%2Fdiv%3E%0A%20%20%20%20%20%20%20%20%20%20%3Cdiv%20class%3D%22novo-form-row%22%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%3Cnovo-control%20%5Bform%5D%3D%22textForm%22%20%5Bcontrol%5D%3D%22pickerControl%22%3E%3C%2Fnovo-control%3E%0A%20%20%20%20%20%20%20%20%20%20%3C%2Fdiv%3E%0A%20%20%20%20%20%20%20%20%3C%2Fnovo-form%3E%0A%20%20%20%20%20%20%3C%2Fsection%3E%0A%20%20%20%20%20%20%3Cbutton%20theme%3D%22standard%22%20(click)%3D%22close()%22%3ECancel%3C%2Fbutton%3E%0A%20%20%20%20%20%20%3Cbutton%20theme%3D%22primary%22%20icon%3D%22check%22%20(click)%3D%22close()%22%3ESave%3C%2Fbutton%3E%0A%20%20%20%20%3C%2Fnovo-modal%3E%0A%20%20%60%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20ModalAddFormDemo%20implements%20OnInit%20%7B%0A%20%20public%20textControl%3A%20any%3B%0A%20%20public%20emailControl%3A%20any%3B%0A%20%20public%20numberControl%3A%20any%3B%0A%20%20public%20pickerControl%3A%20any%3B%0A%20%20public%20textForm%3A%20any%3B%0A%0A%20%20constructor(private%20modalRef%3A%20NovoModalRef%2C%20private%20formUtils%3A%20FormUtils)%20%7B%7D%0A%0A%20%20ngOnInit()%20%7B%0A%20%20%20%20this.textControl%20%3D%20new%20TextBoxControl(%7B%20key%3A%20'text'%2C%20label%3A%20'Text%20Box'%20%7D)%3B%0A%20%20%20%20this.emailControl%20%3D%20new%20TextBoxControl(%7B%20type%3A%20'email'%2C%20key%3A%20'email'%2C%20label%3A%20'Email'%20%7D)%3B%0A%20%20%20%20this.numberControl%20%3D%20new%20TextBoxControl(%7B%20type%3A%20'number'%2C%20key%3A%20'number'%2C%20label%3A%20'Number'%20%7D)%3B%0A%20%20%20%20this.pickerControl%20%3D%20new%20PickerControl(%7B%0A%20%20%20%20%20%20key%3A%20'picker'%2C%0A%20%20%20%20%20%20multiple%3A%20false%2C%0A%20%20%20%20%20%20label%3A%20'Picker'%2C%0A%20%20%20%20%20%20required%3A%20true%2C%0A%20%20%20%20%20%20config%3A%20%7B%0A%20%20%20%20%20%20%20%20resultsTemplate%3A%20PickerResults%2C%0A%20%20%20%20%20%20%20%20options%3A%20%5B'Apple'%2C%20'Banana'%2C%20'Grapes'%2C%20'Orange'%2C%20'Pear'%5D%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%7D)%3B%0A%0A%20%20%20%20this.textForm%20%3D%20this.formUtils.toFormGroup(%5Bthis.textControl%2C%20this.emailControl%2C%20this.numberControl%2C%20this.pickerControl%5D)%3B%0A%20%20%7D%0A%0A%20%20close()%20%7B%0A%20%20%20%20this.modalRef.close()%3B%0A%20%20%7D%0A%7D%0A%0A%2F**%0A%20*%20%40title%20Modal%20Add%20Form%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'modal-add-form-example'%2C%0A%20%20%20%20templateUrl%3A%20'modal-add-form-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'modal-add-form-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20ModalAddFormExample%20%7B%0A%20%20constructor(private%20modalService%3A%20NovoModalService)%20%7B%7D%0A%20%20showModal()%20%7B%0A%20%20%20%20this.modalService.open(ModalAddFormDemo)%3B%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20CSS%20for%20this%20example%20*%2F%0A%3Ahost%20%7B%0A%20%20display%3A%20block%3B%0A%20%20background%3A%20rgba(0%2C%200%2C%200%2C%200.55)%3B%0A%20%20padding%3A%2035px%200%3B%0A%20%20position%3A%20relative%3B%0A%20%20text-align%3A%20center%3B%0A%7D%0A`,
        htmlSource: `%3Cbutton%20data-automation-id%3D%22modal-trigger%22%20theme%3D%22secondary%22%20(click)%3D%22showModal()%22%3EShow%20Me%20%3A)%3C%2Fbutton%3E%0A`,
        selectorName: 'ModalAddFormExample, ModalAddFormDemo'
    },
    'error-modal': {
        title: 'Error Modal Example',
        component: ErrorModalExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0Aimport%20%7B%20NovoModalRef%2C%20NovoModalService%20%7D%20from%20'novo-elements'%3B%0A%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'modal-error-demo'%2C%0A%20%20%20%20template%3A%20%60%0A%20%20%20%20%3Cnovo-notification%20type%3D%22error%22%3E%0A%20%20%20%20%20%20%3Ch1%3ESorry%2C%20something%20went%20wrong.%3C%2Fh1%3E%0A%20%20%20%20%20%20%3Ch2%3EYou%20did%20not%20have%201.21%20gigawatts%20of%20power.%3C%2Fh2%3E%0A%20%20%20%20%20%20%3Cbutton%20theme%3D%22primary%22%20icon%3D%22refresh-o%22%20(click)%3D%22close()%22%3ERefresh%20this%20page%3C%2Fbutton%3E%0A%20%20%20%20%3C%2Fnovo-notification%3E%0A%20%20%60%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20ModalErrorDemo%20%7B%0A%20%20constructor(private%20modalRef%3A%20NovoModalRef)%20%7B%7D%0A%20%20close()%20%7B%0A%20%20%20%20this.modalRef.close()%3B%0A%20%20%7D%0A%7D%0A%0A%2F**%0A%20*%20%40title%20Error%20Modal%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'error-modal-example'%2C%0A%20%20%20%20templateUrl%3A%20'error-modal-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'error-modal-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20ErrorModalExample%20%7B%0A%20%20constructor(private%20modalService%3A%20NovoModalService)%20%7B%7D%0A%20%20showModal()%20%7B%0A%20%20%20%20this.modalService.open(ModalErrorDemo)%3B%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20CSS%20for%20this%20example%20*%2F%0A%3Ahost%20%7B%0A%20%20display%3A%20block%3B%0A%20%20background%3A%20rgba(0%2C%200%2C%200%2C%200.55)%3B%0A%20%20padding%3A%2035px%200%3B%0A%20%20position%3A%20relative%3B%0A%20%20text-align%3A%20center%3B%0A%7D%0A`,
        htmlSource: `%3Cbutton%20data-automation-id%3D%22modal-trigger%22%20theme%3D%22secondary%22%20(click)%3D%22showModal()%22%3EShow%20Me%20%3A)%3C%2Fbutton%3E%0A`,
        selectorName: 'ErrorModalExample, ModalErrorDemo'
    },
    'custom-modal': {
        title: 'Custom Modal Example',
        component: CustomModalExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0Aimport%20%7B%20NovoModalRef%2C%20NovoModalService%20%7D%20from%20'novo-elements'%3B%0A%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'modal-custom-demo'%2C%0A%20%20%20%20template%3A%20%60%0A%20%20%20%20%3Cnovo-notification%20type%3D%22custom%22%20icon%3D%22trending-up%22%3E%0A%20%20%20%20%20%20%3Ch1%3EI%20have%20a%20trending%20icon!%3C%2Fh1%3E%0A%20%20%20%20%20%20%3Ch2%3EThis%20notification%20type%20allows%20for%20any%20Bullhorn%20Icon%3C%2Fh2%3E%0A%20%20%20%20%20%20%3Cbutton%20theme%3D%22primary%22%20icon%3D%22check%22%20(click)%3D%22close()%22%3ESweet.%3C%2Fbutton%3E%0A%20%20%20%20%3C%2Fnovo-notification%3E%0A%20%20%60%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20ModalCustomDemo%20%7B%0A%20%20constructor(private%20modalRef%3A%20NovoModalRef)%20%7B%7D%0A%20%20close()%20%7B%0A%20%20%20%20this.modalRef.close()%3B%0A%20%20%7D%0A%7D%0A%0A%2F**%0A%20*%20%40title%20Custom%20Modal%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'custom-modal-example'%2C%0A%20%20%20%20templateUrl%3A%20'custom-modal-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'custom-modal-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20CustomModalExample%20%7B%0A%20%20constructor(private%20modalService%3A%20NovoModalService)%20%7B%7D%0A%20%20showModal()%20%7B%0A%20%20%20%20this.modalService.open(ModalCustomDemo)%3B%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20CSS%20for%20this%20example%20*%2F%0A%3Ahost%20%7B%0A%20%20display%3A%20block%3B%0A%20%20background%3A%20rgba(0%2C%200%2C%200%2C%200.55)%3B%0A%20%20padding%3A%2035px%200%3B%0A%20%20position%3A%20relative%3B%0A%20%20text-align%3A%20center%3B%0A%7D%0A`,
        htmlSource: `%3Cbutton%20data-automation-id%3D%22modal-trigger%22%20theme%3D%22secondary%22%20(click)%3D%22showModal()%22%3EShow%20Me%20%3A)%3C%2Fbutton%3E%0A`,
        selectorName: 'CustomModalExample, ModalCustomDemo'
    },
    'nested-menu': {
        title: 'Nested Menu',
        component: NestedMenuExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Nested%20Menu%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'nested-menu-example'%2C%0A%20%20%20%20templateUrl%3A%20'nested-menu-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'nested-menu-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20NestedMenuExample%20%7B%0A%20%20public%20clickMe(event%3F%3A%20string)%20%7B%0A%20%20%20%20window.alert(event)%3B%0A%20%20%7D%0A%7D%0A`,
        cssSource: `span%5Btooltip%5D%7B%0A%20%20margin-left%3A%2010px%3B%0A%7D%0A`,
        htmlSource: `%3Cbutton%20type%3D%22button%22%20theme%3D%22secondary%22%20icon%3D%22collapse%22%20%5Bmenu%5D%3D%22menu%22%3EActions%3C%2Fbutton%3E%0A%0A%3C!--%20Menu%20Template%20--%3E%0A%3Cnovo-menu%20%23menu%3E%0A%20%20%3Cnovo-option%20*menuItem%20(click)%3D%22clickMe(%24event)%22%3EPreview%3C%2Fnovo-option%3E%0A%20%20%3Cnovo-option%20*menuItem%20(click)%3D%22clickMe(%24event)%22%3EEdit%3C%2Fnovo-option%3E%0A%20%20%3Cnovo-option%20*menuItem%20%5Bmenu%5D%3D%22subMenu%22%3EChoose...%3C%2Fnovo-option%3E%0A%20%20%3Cnovo-menu%20%23subMenu%3E%0A%20%20%20%20%3Cnovo-option%20*menuItem%20(click)%3D%22clickMe(%24event)%22%3EAvailable%3C%2Fnovo-option%3E%0A%20%20%20%20%3Cnovo-option%20*menuItem%20(click)%3D%22clickMe(%24event)%22%3ENot%20Available%3C%2Fnovo-option%3E%0A%20%20%3C%2Fnovo-menu%3E%0A%3C%2Fnovo-menu%3E`
    },
    'menu-context': {
        title: 'Menu Context',
        component: MenuContextExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Menu%20Context%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'menu-context-example'%2C%0A%20%20%20%20templateUrl%3A%20'menu-context-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'menu-context-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20MenuContextExample%20%7B%0A%20%20public%20apple%20%3D%20'Context%20is%20Apples'%3B%0A%20%20public%20orange%20%3D%20'Context%20is%20Orange'%3B%0A%20%20public%20isOrange%20%3D%20(item)%20%3D%3E%20item%20%3D%3D%3D%20this.orange%3B%0A%0A%20%20public%20clickMe(event%3F%3A%20string)%20%7B%0A%20%20%20%20window.alert(event)%3B%0A%20%20%7D%0A%7D%0A`,
        cssSource: `span%5Btooltip%5D%7B%0A%20%20margin-left%3A%2010px%3B%0A%7D%0A`,
        htmlSource: `%3Cbutton%20type%3D%22button%22%20theme%3D%22secondary%22%20icon%3D%22collapse%22%20%5Bmenu%5D%3D%22menu%22%20%5BmenuContext%5D%3D%22apple%22%3EApples%3C%2Fbutton%3E%0A%3Cbutton%20type%3D%22button%22%20theme%3D%22secondary%22%20icon%3D%22collapse%22%20%5Bmenu%5D%3D%22menu%22%20%5BmenuContext%5D%3D%22orange%22%3EOranges%3C%2Fbutton%3E%0A%3C!--%20Menu%20Template%20--%3E%0A%3Cnovo-menu%20%23menu%3E%0A%20%20%3Cnovo-option%20*menuItem%3D%22let%20item%22%20(click)%3D%22clickMe(item)%22%3EPreview%3C%2Fnovo-option%3E%0A%20%20%3Cnovo-option%20*menuItem%3D%22let%20item%22%20(click)%3D%22clickMe(item)%22%3EEdit%3C%2Fnovo-option%3E%0A%20%20%3Cnovo-option%20*menuItem%3D%22let%20item%22%20(click)%3D%22clickMe(item)%22%3EDelete%3C%2Fnovo-option%3E%0A%20%20%3Cnovo-option%20*menuItem%3D%22let%20item%22%20%5Bdisabled%5D%3D%22isOrange(item)%22%3EDisabled%20if%20Orange%3C%2Fnovo-option%3E%0A%20%20%3Cnovo-option%20*menuItem%3D%22let%20item%3Bvisible%3AisOrange%3B%22%3EVisible%20if%20Orange%3C%2Fnovo-option%3E%0A%3C%2Fnovo-menu%3E`
    },
    'basic-menu': {
        title: 'Basic Menu',
        component: BasicMenuExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Basic%20Menu%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'basic-menu-example'%2C%0A%20%20%20%20templateUrl%3A%20'basic-menu-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'basic-menu-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20BasicMenuExample%20%7B%0A%20%20public%20clickMe(event%3F%3A%20string)%20%7B%0A%20%20%20%20window.alert(event)%3B%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cnovo-button%20theme%3D%22secondary%22%20icon%3D%22collapse%22%20%5Bmenu%5D%3D%22menu%22%3EActions%3C%2Fnovo-button%3E%0A%0A%3C!--%20Menu%20Template%20--%3E%0A%3Cnovo-menu%20%23menu%3E%0A%20%20%3Cnovo-option%20id%3D%22mi-preview%22%20*menuItem%20(click)%3D%22clickMe(%24event)%22%3EPreview%3C%2Fnovo-option%3E%0A%20%20%3Cnovo-option%20id%3D%22mi-edit%22%20*menuItem%20(click)%3D%22clickMe(%24event)%22%3EEdit%3C%2Fnovo-option%3E%0A%20%20%3Cnovo-option%20id%3D%22mi-disabled%22%20*menuItem%20(click)%3D%22clickMe(%24event)%22%20disabled%3EDisabled%3C%2Fnovo-option%3E%0A%20%20%3Cnovo-divider%20*menuItem%3E%3C%2Fnovo-divider%3E%0A%20%20%3Cnovo-option%20id%3D%22mi-delete%22%20*menuItem%20(click)%3D%22clickMe(%24event)%22%3E%0A%20%20%20%20%3Cspan%3EDelete%3C%2Fspan%3E%0A%20%20%20%20%3Cnovo-icon%20novoSuffix%3Edelete-o%3C%2Fnovo-icon%3E%0A%20%20%3C%2Fnovo-option%3E%0A%3C%2Fnovo-menu%3E%0A%0A%0A%3Cnovo-button%20theme%3D%22icon%22%20icon%3D%22more%22%20%5Bmenu%5D%3D%22icons%22%3E%3C%2Fnovo-button%3E%0A%0A%3C!--%20Menu%20Template%20--%3E%0A%3Cnovo-menu%20%23icons%3E%0A%20%20%3Cnovo-option%20*menuItem%20(click)%3D%22clickMe(%24event)%22%3E%0A%20%20%20%20%3Cnovo-icon%3Epreview%3C%2Fnovo-icon%3E%0A%20%20%20%20%3Cspan%3EPreview%3C%2Fspan%3E%0A%20%20%3C%2Fnovo-option%3E%0A%20%20%3Cnovo-option%20*menuItem%20(click)%3D%22clickMe(%24event)%22%3E%0A%20%20%20%20%3Cnovo-icon%3Eedit%3C%2Fnovo-icon%3E%0A%20%20%20%20%3Cspan%3EEdit%3C%2Fspan%3E%0A%20%20%3C%2Fnovo-option%3E%0A%20%20%3Cnovo-divider%20*menuItem%3E%3C%2Fnovo-divider%3E%0A%20%20%3Cnovo-option%20*menuItem%20class%3D%22red%22%20(click)%3D%22clickMe(%24event)%22%3E%0A%20%20%20%20%3Cnovo-icon%3Edelete-o%3C%2Fnovo-icon%3E%0A%20%20%20%20%3Cspan%3EDelete%3C%2Fspan%3E%0A%20%20%3C%2Fnovo-option%3E%0A%3C%2Fnovo-menu%3E`
    },
    'loading-line': {
        title: 'Linear Loading Symbol',
        component: LoadingLineExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Linear%20Loading%20Symbol%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'loading-line-example'%2C%0A%20%20%20%20templateUrl%3A%20'loading-line-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'loading-line-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20LoadingLineExample%20%7B%7D%0A`,
        cssSource: `%3Ahost%20%7B%0A%20%20display%3A%20grid%3B%0A%20%20grid-template-columns%3A%201fr%201fr%3B%0A%20%20gap%3A%202rem%3B%0A%7D%0A`,
        htmlSource: `%3Cnovo-loading%20%5Bsize%5D%3D%22size.value%22%20%5Bcolor%5D%3D%22color.value%22%3E%3C%2Fnovo-loading%3E%0A%0A%3Csection%3E%0A%20%20%3Cnovo-label%3ESize%3C%2Fnovo-label%3E%0A%20%20%3Cnovo-radio-group%20%23size%20appearance%3D%22vertical%22%20value%3D%22medium%22%3E%0A%20%20%20%20%3Cnovo-radio%20name%3D%22size%22%20value%3D%22small%22%3Esmall%3C%2Fnovo-radio%3E%0A%20%20%20%20%3Cnovo-radio%20name%3D%22size%22%20value%3D%22medium%22%3Emedium%3C%2Fnovo-radio%3E%0A%20%20%20%20%3Cnovo-radio%20name%3D%22size%22%20value%3D%22large%22%3Elarge%3C%2Fnovo-radio%3E%0A%20%20%3C%2Fnovo-radio-group%3E%0A%0A%20%20%3Cnovo-label%3EColor%3C%2Fnovo-label%3E%0A%20%20%3Cnovo-radio-group%20%23color%20appearance%3D%22vertical%22%3E%0A%20%20%20%20%3Cnovo-radio%20name%3D%22color%22%20value%3D%22grapefruit%22%3Egrapefruit%3C%2Fnovo-radio%3E%0A%20%20%20%20%3Cnovo-radio%20name%3D%22color%22%20value%3D%22aqua%22%3Eaqua%3C%2Fnovo-radio%3E%0A%20%20%20%20%3Cnovo-radio%20name%3D%22color%22%20value%3D%22mint%22%3Emint%3C%2Fnovo-radio%3E%0A%20%20%20%20%3Cnovo-radio%20name%3D%22color%22%20value%3D%22ocean%22%3Eocean%3C%2Fnovo-radio%3E%0A%20%20%3C%2Fnovo-radio-group%3E%0A%3C%2Fsection%3E`
    },
    'loading-circle': {
        title: 'Circular Loading Symbol',
        component: LoadingCircleExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Circular%20Loading%20Symbol%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'loading-circle-example'%2C%0A%20%20%20%20templateUrl%3A%20'loading-circle-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'loading-circle-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20LoadingCircleExample%20%7B%7D%0A`,
        cssSource: `%3Ahost%20%7B%0A%20%20display%3A%20grid%3B%0A%20%20grid-template-columns%3A%201fr%201fr%3B%0A%20%20gap%3A%202rem%3B%0A%7D%0A`,
        htmlSource: `%3Cnovo-spinner%20%5Bsize%5D%3D%22size.value%22%20%5Bcolor%5D%3D%22color.value%22%3E%3C%2Fnovo-spinner%3E%0A%0A%3Csection%3E%0A%20%20%3Cnovo-label%3ESize%3C%2Fnovo-label%3E%0A%20%20%3Cnovo-radio-group%20%23size%20appearance%3D%22vertical%22%20value%3D%22medium%22%3E%0A%20%20%20%20%3Cnovo-radio%20name%3D%22size%22%20value%3D%22small%22%3Esmall%3C%2Fnovo-radio%3E%0A%20%20%20%20%3Cnovo-radio%20name%3D%22size%22%20value%3D%22medium%22%3Emedium%3C%2Fnovo-radio%3E%0A%20%20%20%20%3Cnovo-radio%20name%3D%22size%22%20value%3D%22large%22%3Elarge%3C%2Fnovo-radio%3E%0A%20%20%3C%2Fnovo-radio-group%3E%0A%0A%20%20%3Cnovo-label%3EColor%3C%2Fnovo-label%3E%0A%20%20%3Cnovo-radio-group%20%23color%20appearance%3D%22vertical%22%3E%0A%20%20%20%20%3Cnovo-radio%20name%3D%22color%22%20value%3D%22grapefruit%22%3Egrapefruit%3C%2Fnovo-radio%3E%0A%20%20%20%20%3Cnovo-radio%20name%3D%22color%22%20value%3D%22aqua%22%3Eaqua%3C%2Fnovo-radio%3E%0A%20%20%20%20%3Cnovo-radio%20name%3D%22color%22%20value%3D%22mint%22%3Emint%3C%2Fnovo-radio%3E%0A%20%20%20%20%3Cnovo-radio%20name%3D%22color%22%20value%3D%22ocean%22%3Eocean%3C%2Fnovo-radio%3E%0A%20%20%3C%2Fnovo-radio-group%3E%0A%0A%3C%2Fsection%3E`
    },
    'themed-icons': {
        title: 'Themed Icons',
        component: ThemedIconsExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Themed%20Icons%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'themed-icons-example'%2C%0A%20%20%20%20templateUrl%3A%20'themed-icons-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'themed-icons-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20ThemedIconsExample%20%7B%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cnovo-icon%20color%3D%22candidate%22%3Ecandidate%3C%2Fnovo-icon%3E%0A%3Cnovo-icon%20color%3D%22job%22%3Ejob%3C%2Fnovo-icon%3E%0A%3Cnovo-icon%20color%3D%22company%22%3Ecompany%3C%2Fnovo-icon%3E%0A%3Cnovo-icon%20color%3D%22submission%22%3Estar-o%3C%2Fnovo-icon%3E%0A%3Cnovo-icon%20color%3D%22placement%22%3Estar%3C%2Fnovo-icon%3E%0A%3Cbr%20%2F%3E%0A%3Cnovo-icon%20theme%3D%22candidate%22%3Ecandidate%3C%2Fnovo-icon%3E%0A%3Cnovo-icon%20theme%3D%22job%22%3Ejob%3C%2Fnovo-icon%3E%0A%3Cnovo-icon%20theme%3D%22company%22%3Ecompany%3C%2Fnovo-icon%3E%0A%3Cnovo-icon%20theme%3D%22submission%22%3Estar-o%3C%2Fnovo-icon%3E%0A%3Cnovo-icon%20theme%3D%22placement%22%3Estar%3C%2Fnovo-icon%3E`
    },
    'raised-icons': {
        title: 'Raised Icons',
        component: RaisedIconsExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Raised%20Icons%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'raised-icons-example'%2C%0A%20%20%20%20templateUrl%3A%20'raised-icons-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'raised-icons-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20RaisedIconsExample%20%7B%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cnovo-icon%20theme%3D%22candidate%22%20raised%3D%22true%22%3Ecandidate%3C%2Fnovo-icon%3E%0A%3Cnovo-icon%20theme%3D%22job%22%20raised%3D%22true%22%3Ejob%3C%2Fnovo-icon%3E%0A%3Cnovo-icon%20theme%3D%22company%22%20raised%3D%22true%22%3Ecompany%3C%2Fnovo-icon%3E%0A%3Cnovo-icon%20theme%3D%22submission%22%20raised%3D%22true%22%3Estar-o%3C%2Fnovo-icon%3E%0A%3Cnovo-icon%20theme%3D%22placement%22%20raised%3D%22true%22%3Estar%3C%2Fnovo-icon%3E%0A`
    },
    'basic-icons': {
        title: 'Basic Icons',
        component: BasicIconsExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Basic%20Icons%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'basic-icons-example'%2C%0A%20%20%20%20templateUrl%3A%20'basic-icons-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'basic-icons-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20BasicIconsExample%20%7B%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cnovo-icon%3Ecandidate%3C%2Fnovo-icon%3E%0A%3Cnovo-icon%3Ejob%3C%2Fnovo-icon%3E%0A%3Cnovo-icon%3Ecompany%3C%2Fnovo-icon%3E%0A%3Cnovo-icon%3Elead%3C%2Fnovo-icon%3E%0A%3Cnovo-icon%3Eopportunity%3C%2Fnovo-icon%3E%0A%3Cbr%20%2F%3E%0A%3Ci%20class%3D%22bhi-candidate%22%3E%3C%2Fi%3E%0A%3Ci%20class%3D%22bhi-person%22%3E%3C%2Fi%3E%0A%3Ci%20class%3D%22bhi-job%22%3E%3C%2Fi%3E%0A%3Ci%20class%3D%22bhi-company%22%3E%3C%2Fi%3E%0A%3Ci%20class%3D%22bhi-lead%22%3E%3C%2Fi%3E%0A%3Ci%20class%3D%22bhi-opportunity%22%3E%3C%2Fi%3E`
    },
    'form-usage': {
        title: 'Form Usage Example',
        component: FormUsageExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0Aimport%20%7B%20UntypedFormBuilder%2C%20UntypedFormControl%2C%20UntypedFormGroup%2C%20Validators%20%7D%20from%20'%40angular%2Fforms'%3B%0A%0A%2F**%0A%20*%20%40title%20Form%20Usage%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'form-usage-example'%2C%0A%20%20%20%20templateUrl%3A%20'form-usage-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'form-usage-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20FormUsageExample%20%7B%0A%20%20options%3A%20UntypedFormGroup%3B%0A%20%20numberControl%20%3D%20new%20UntypedFormControl(16%2C%20Validators.min(10))%3B%0A%20%20timeControl%20%3D%20new%20UntypedFormControl(new%20Date())%3B%0A%20%20dateControl%20%3D%20new%20UntypedFormControl(new%20Date())%3B%0A%20%20dateTimeControl%20%3D%20new%20UntypedFormControl(new%20Date())%3B%0A%20%20post%3A%20any%20%3D%20''%3B%0A%0A%20%20constructor(fb%3A%20UntypedFormBuilder)%20%7B%0A%20%20%20%20this.options%20%3D%20fb.group(%7B%0A%20%20%20%20%20%20number%3A%20this.numberControl%2C%0A%20%20%20%20%20%20time%3A%20this.timeControl%2C%0A%20%20%20%20%20%20date%3A%20this.dateControl%2C%0A%20%20%20%20%20%20dateTime%3A%20this.dateTimeControl%2C%0A%20%20%20%20%7D)%3B%0A%20%20%7D%0A%0A%20%20onSubmit(post%3A%20any)%20%7B%0A%20%20%20%20this.post%20%3D%20post%3B%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cform%20class%3D%22example-container%22%20%5BformGroup%5D%3D%22options%22%3E%0A%20%20%3Cnovo-fields%3E%0A%20%20%20%20%3Cnovo-field%3E%0A%20%20%20%20%20%20%3Cnovo-label%3EPick%20a%20Number%3F%3C%2Fnovo-label%3E%0A%20%20%20%20%20%20%3Cinput%20novoInput%20type%3D%22number%22%20placeholder%3D%22Ex.%2012%22%20%5BformControl%5D%3D%22numberControl%22%20min%3D%2210%22%20%2F%3E%0A%20%20%20%20%20%20%3Cnovo-error%20*ngIf%3D%22numberControl.invalid%22%3EMinimum%3A%2010%3C%2Fnovo-error%3E%0A%20%20%20%20%3C%2Fnovo-field%3E%0A%0A%20%20%20%20%3Cnovo-field%3E%0A%20%20%20%20%20%20%3Cnovo-label%3ESet%20an%20Alarm%3C%2Fnovo-label%3E%0A%20%20%20%20%20%20%3Cinput%20novoInput%20timeFormat%20%5Bpicker%5D%3D%22timepicker%22%20%5BformControl%5D%3D%22timeControl%22%20%2F%3E%0A%20%20%20%20%20%20%3Cnovo-picker-toggle%20novoSuffix%20icon%3D%22clock%22%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-time-picker%20%23timepicker%3E%3C%2Fnovo-time-picker%3E%0A%20%20%20%20%20%20%3C%2Fnovo-picker-toggle%3E%0A%20%20%20%20%3C%2Fnovo-field%3E%0A%0A%20%20%20%20%3Cnovo-field%3E%0A%20%20%20%20%20%20%3Cnovo-label%3EDate%20of%20Birth%3C%2Fnovo-label%3E%0A%20%20%20%20%20%20%3Cinput%20novoInput%20dateFormat%20%5Bpicker%5D%3D%22datepicker%22%20%5BformControl%5D%3D%22dateControl%22%20disabled%3D%22true%22%20readonly%20%2F%3E%0A%20%20%20%20%20%20%3Cnovo-picker-toggle%20novoSuffix%20icon%3D%22calendar%22%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-date-picker%20%23datepicker%3E%3C%2Fnovo-date-picker%3E%0A%20%20%20%20%20%20%3C%2Fnovo-picker-toggle%3E%0A%20%20%20%20%3C%2Fnovo-field%3E%0A%0A%20%20%20%20%3Cnovo-field%3E%0A%20%20%20%20%20%20%3Cnovo-label%3EAppointment%3C%2Fnovo-label%3E%0A%20%20%20%20%20%20%3Cinput%20novoInput%20dateTimeFormat%20%5Bpicker%5D%3D%22datetimepicker%22%20%5Bmilitary%5D%3D%22false%22%20%5BformControl%5D%3D%22dateTimeControl%22%20readonly%20%2F%3E%0A%20%20%20%20%20%20%3Cnovo-picker-toggle%20novoSuffix%20icon%3D%22calendar%22%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-date-time-picker%20%23datetimepicker%3E%3C%2Fnovo-date-time-picker%3E%0A%20%20%20%20%20%20%3C%2Fnovo-picker-toggle%3E%0A%20%20%20%20%3C%2Fnovo-field%3E%0A%0A%20%20%20%20%3Cbutton%20theme%3D%22primary%22%20%5Bdisabled%5D%3D%22!options.valid%22%20(click)%3D%22onSubmit(options.value)%22%3ESubmit%0A%20%20%20%20%20%20Form%3C%2Fbutton%3E%0A%20%20%3C%2Fnovo-fields%3E%0A%3C%2Fform%3E%0A%0A%3Cdiv%20class%3D%22example-container%22%3E%0A%20%20%7B%7B%20post%20%7C%20json%20%7D%7D%0A%3C%2Fdiv%3E`
    },
    'field-usage': {
        title: 'Field Usage Example',
        component: FieldUsageExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Field%20Usage%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'field-usage-example'%2C%0A%20%20%20%20templateUrl%3A%20'field-usage-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'field-usage-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20FieldUsageExample%20%7B%0A%20%20time%20%3D%20'14%3A00'%3B%0A%20%20date%20%3D%20new%20Date()%3B%0A%20%20datetime%20%3D%20new%20Date()%3B%0A%20%20date2%3B%0A%20%20daterange%3B%0A%7D%0A`,
        cssSource: `%3Ahost%20%7B%0A%20%20display%3A%20flex%3B%0A%20%20flex-flow%3A%20column%3B%0A%20%20gap%3A%201rem%3B%0A%7D%0A`,
        htmlSource: `%3Ch4%3EBasic%20Field%20Usage%3C%2Fh4%3E%0A%0A%3Cnovo-field%3E%0A%20%20%3Cnovo-label%3EFavorite%20food%3C%2Fnovo-label%3E%0A%20%20%3Cinput%20novoInput%20placeholder%3D%22Ex.%20Pizza%22%20value%3D%22Sushi%22%20%2F%3E%0A%3C%2Fnovo-field%3E%0A%0A%3Cnovo-field%3E%0A%20%20%3Cnovo-label%3ELeave%20a%20comment%3C%2Fnovo-label%3E%0A%20%20%3Ctextarea%20novoInput%20placeholder%3D%22Ex.%20It%20makes%20me%20feel...%22%3E%3C%2Ftextarea%3E%0A%3C%2Fnovo-field%3E%0A%0A%3Cnovo-field%3E%0A%20%20%3Cnovo-label%3ESet%20an%20Alarm%3C%2Fnovo-label%3E%0A%20%20%3Cinput%20novoInput%20%5B(ngModel)%5D%3D%22time%22%20timeFormat%3D%22iso8601%22%20%5Bpicker%5D%3D%22timepicker%22%20%2F%3E%0A%20%20%3Cnovo-picker-toggle%20novoSuffix%20icon%3D%22clock%22%3E%0A%20%20%20%20%3Cnovo-time-picker%20%23timepicker%3E%3C%2Fnovo-time-picker%3E%0A%20%20%3C%2Fnovo-picker-toggle%3E%0A%20%20%3Cnovo-hint%3Evalue%20is%3A%20%7B%7Btime%7D%7D%3C%2Fnovo-hint%3E%0A%3C%2Fnovo-field%3E%0A%0A%3Cnovo-field%3E%0A%20%20%3Cnovo-label%3EDate%20of%20Birth%3C%2Fnovo-label%3E%0A%20%20%3Cinput%20novoInput%20dateFormat%3D%22iso8601%22%20%5Bpicker%5D%3D%22datepicker%22%20%5B(ngModel)%5D%3D%22date%22%20%2F%3E%0A%20%20%3Cnovo-picker-toggle%20novoSuffix%20icon%3D%22calendar%22%3E%0A%20%20%20%20%3Cnovo-date-picker%20%23datepicker%3E%3C%2Fnovo-date-picker%3E%0A%20%20%3C%2Fnovo-picker-toggle%3E%0A%20%20%3Cnovo-hint%3Evalue%20is%3A%20%7B%7Bdate%7D%7D%3C%2Fnovo-hint%3E%0A%0A%3C%2Fnovo-field%3E%0A%0A%3Cnovo-field%3E%0A%20%20%3Cnovo-label%3EDatetime%3C%2Fnovo-label%3E%0A%20%20%3Cinput%20novoInput%20dateFormat%3D%22iso8601%22%20%5Bpicker%5D%3D%22datetimepicker%22%20%5B(ngModel)%5D%3D%22datetime%22%20%2F%3E%0A%20%20%3Cnovo-picker-toggle%20novoSuffix%20icon%3D%22calendar%22%3E%0A%20%20%20%20%3Cnovo-date-time-picker%20%23datetimepicker%3E%3C%2Fnovo-date-time-picker%3E%0A%20%20%3C%2Fnovo-picker-toggle%3E%0A%20%20%3Cnovo-hint%3Evalue%20is%3A%20%7B%7Bdatetime%7D%7D%3C%2Fnovo-hint%3E%0A%0A%3C%2Fnovo-field%3E%0A%0A%3Cnovo-field%3E%0A%20%20%3Cnovo-label%3ENeed%20a%20Vacation%3F%3C%2Fnovo-label%3E%0A%20%20%3Cinput%20novoInput%20dateRangeFormat%3D%22iso8601%22%20%5Bpicker%5D%3D%22daterangepicker%22%20%5B(ngModel)%5D%3D%22daterange%22%20%2F%3E%0A%20%20%3Cnovo-picker-toggle%20novoSuffix%20icon%3D%22calendar%22%3E%0A%20%20%20%20%3Cnovo-date-picker%20%23daterangepicker%20mode%3D%22range%22%20numberOfMonths%3D%222%22%3E%3C%2Fnovo-date-picker%3E%0A%20%20%3C%2Fnovo-picker-toggle%3E%0A%20%20%3Cnovo-hint%3Evalue%20is%3A%20%7B%7Bdaterange%7D%7D%3C%2Fnovo-hint%3E%0A%0A%3C%2Fnovo-field%3E%0A%0A%0A%0A%3Cnovo-fieldset-header%20icon%3D%22calendar%22%20title%3D%22Add%20Day%20Of%20Week%22%3E%3C%2Fnovo-fieldset-header%3E%0A%0A%3Cnovo-field%3E%0A%20%20%3Cnovo-label%3EDate%20of%20Birth%3C%2Fnovo-label%3E%0A%20%20%3Cnovo-text%20novoPrefix%20mr%3D%22sm%22%3E%7B%7Bdate2%20%7C%20date%20%3A%20'EEE'%20%7D%7D%3C%2Fnovo-text%3E%0A%20%20%3Cinput%20novoInput%20dateFormat%3D%22iso8601%22%20%5Bpicker%5D%3D%22datepicker2%22%20%5B(ngModel)%5D%3D%22date2%22%20disabled%20readonly%20%2F%3E%0A%20%20%3Cnovo-picker-toggle%20novoSuffix%20icon%3D%22calendar%22%3E%0A%20%20%20%20%3Cnovo-date-picker%20%23datepicker2%3E%3C%2Fnovo-date-picker%3E%0A%20%20%3C%2Fnovo-picker-toggle%3E%0A%20%20%3Cnovo-hint%3Evalue%20is%3A%20%7B%7Bdate2%7D%7D%3C%2Fnovo-hint%3E%0A%3C%2Fnovo-field%3E%0A%0A%3Cnovo-fieldset-header%20icon%3D%22section%22%20title%3D%22Section%20Header%22%3E%3C%2Fnovo-fieldset-header%3E%0A%0A%3Cnovo-field%3E%0A%20%20%3Cnovo-label%3E%0A%20%20%20%20%3Cnovo-flex%20justify%3D%22space-between%22%3E%0A%20%20%20%20%20%20%3Cspan%3EEffective%20On%3C%2Fspan%3E%0A%20%20%20%20%20%20%3Cnovo-chip%20size%3D%22sm%22%20accent%3D%22success%22%3Ecurrent%3C%2Fnovo-chip%3E%0A%20%20%20%20%3C%2Fnovo-flex%3E%0A%20%20%3C%2Fnovo-label%3E%0A%20%20%3Cnovo-select%20value%3D%2208%2F01%2F2021%22%3E%0A%20%20%20%20%3Cnovo-option%20value%3D%2208%2F01%2F2021%22%3E%0A%20%20%20%20%20%20%3Cnovo-text%3E08%2F01%2F2021%3C%2Fnovo-text%3E%0A%20%20%20%20%20%20%3Cnovo-chip%20accent%3D%22success%22%3Ecurrent%3C%2Fnovo-chip%3E%0A%20%20%20%20%3C%2Fnovo-option%3E%0A%20%20%20%20%3Cnovo-option%20value%3D%2209%2F01%2F2021%22%3E%0A%20%20%20%20%20%20%3Cnovo-text%3E09%2F01%2F2021%3C%2Fnovo-text%3E%0A%20%20%20%20%3C%2Fnovo-option%3E%0A%20%20%3C%2Fnovo-select%3E%0A%20%20%3Cnovo-icon%20novoPrefix%3Eprevious%3C%2Fnovo-icon%3E%0A%20%20%3Cnovo-icon%20novoSuffix%3Enext%3C%2Fnovo-icon%3E%0A%3C%2Fnovo-field%3E`
    },
    'field-native': {
        title: 'Field Native Example',
        component: FieldNativeExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Field%20Native%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'field-native-example'%2C%0A%20%20%20%20templateUrl%3A%20'field-native-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'field-native-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20FieldNativeExample%20%7B%0A%20%20appearance%20%3D%20'standard'%3B%0A%20%20direction%20%3D%20'horizontal'%3B%0A%20%20fullWidth%20%3D%20false%3B%0A%20%20hide%20%3D%20true%3B%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A%0A.example-right-align%20%7B%0A%20%20text-align%3A%20right%3B%0A%7D%0A`,
        htmlSource: `%3Cdiv%20class%3D%22example-container%22%3E%0A%0A%20%20%3Cnovo-label%3EAppearance%3C%2Fnovo-label%3E%0A%20%20%3Cnovo-radio-group%20%5B(ngModel)%5D%3D%22appearance%22%3E%0A%20%20%20%20%3Cnovo-radio%20value%3D%22standard%22%3EStandard%3C%2Fnovo-radio%3E%0A%20%20%20%20%3Cnovo-radio%20value%3D%22fill%22%3EFilled%3C%2Fnovo-radio%3E%0A%20%20%20%20%3Cnovo-radio%20value%3D%22outline%22%3EOutlined%3C%2Fnovo-radio%3E%0A%20%20%20%20%3Cnovo-radio%20value%3D%22list%22%3EList%3C%2Fnovo-radio%3E%0A%20%20%3C%2Fnovo-radio-group%3E%0A%0A%20%20%3Cnovo-label%3ELayout%3C%2Fnovo-label%3E%0A%20%20%3Cnovo-radio-group%20%5B(ngModel)%5D%3D%22direction%22%3E%0A%20%20%20%20%3Cnovo-radio%20value%3D%22horizontal%22%3EHorizontal%3C%2Fnovo-radio%3E%0A%20%20%20%20%3Cnovo-radio%20value%3D%22vertical%22%3EVertical%3C%2Fnovo-radio%3E%0A%20%20%3C%2Fnovo-radio-group%3E%0A%0A%0A%20%20%3Cnovo-fields%20%5Bappearance%5D%3D%22appearance%22%20%5Blayout%5D%3D%22direction%22%20%5BfullWidth%5D%3D%22fullWidth%22%3E%0A%20%20%20%20%3Cnovo-field%3E%0A%20%20%20%20%20%20%3Cnovo-label%3EFull%20Width%3F%3C%2Fnovo-label%3E%0A%20%20%20%20%20%20%3Cnovo-radio-group%20%5B(ngModel)%5D%3D%22fullWidth%22%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-radio%20%5Bvalue%5D%3D%22false%22%3ECondensed%3C%2Fnovo-radio%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-radio%20%5Bvalue%5D%3D%22true%22%3EFull%20Width%3C%2Fnovo-radio%3E%0A%20%20%20%20%20%20%3C%2Fnovo-radio-group%3E%0A%20%20%20%20%3C%2Fnovo-field%3E%0A%0A%20%20%20%20%3Cnovo-field%3E%0A%20%20%20%20%20%20%3Cnovo-label%3EUsername%3C%2Fnovo-label%3E%0A%20%20%20%20%20%20%3Cinput%20novoInput%20type%3D%22text%22%20%2F%3E%0A%20%20%20%20%3C%2Fnovo-field%3E%0A%0A%20%20%20%20%3Cnovo-field%3E%0A%20%20%20%20%20%20%3Cnovo-label%3EEmail%3C%2Fnovo-label%3E%0A%20%20%20%20%20%20%3Cinput%20novoInput%20type%3D%22email%22%20%2F%3E%0A%20%20%20%20%3C%2Fnovo-field%3E%0A%0A%20%20%20%20%3Cnovo-field%3E%0A%20%20%20%20%20%20%3Cnovo-label%3EEnter%20your%20password%3C%2Fnovo-label%3E%0A%20%20%20%20%20%20%3Cinput%20novoInput%20%5Btype%5D%3D%22hide%20%3F%20'password'%20%3A%20'text'%22%20%2F%3E%0A%20%20%20%20%20%20%3Cnovo-icon%20(click)%3D%22hide%20%3D%20!hide%22%3E%7B%7Bhide%20%3F%20'overview'%20%3A%20'hidden'%7D%7D%3C%2Fnovo-icon%3E%0A%20%20%20%20%3C%2Fnovo-field%3E%0A%0A%20%20%20%20%3Cnovo-field%3E%0A%20%20%20%20%20%20%3Cnovo-label%3ESelect%20your%20favorite%20color%3F%3C%2Fnovo-label%3E%0A%20%20%20%20%20%20%3Cselect%20required%20novoInput%3E%0A%20%20%20%20%20%20%20%20%3Coption%20value%3D%22pink%22%3EPink%3C%2Foption%3E%0A%20%20%20%20%20%20%20%20%3Coption%20value%3D%22purple%22%3EPurple%3C%2Foption%3E%0A%20%20%20%20%20%20%20%20%3Coption%20value%3D%22sparkles%22%3ESparkles%3C%2Foption%3E%0A%20%20%20%20%20%20%3C%2Fselect%3E%0A%20%20%20%20%3C%2Fnovo-field%3E%0A%0A%20%20%20%20%3Cnovo-field%3E%0A%20%20%20%20%20%20%3Cnovo-label%3EShort%20description...%3C%2Fnovo-label%3E%0A%20%20%20%20%20%20%3Ctextarea%20novoInput%3E%3C%2Ftextarea%3E%0A%20%20%20%20%3C%2Fnovo-field%3E%0A%0A%20%20%20%20%3Cnovo-field%3E%0A%20%20%20%20%20%20%3Cnovo-label%3EChoose%20your%20favorite%20color%3F%3C%2Fnovo-label%3E%0A%20%20%20%20%20%20%3Cinput%20novoInput%20type%3D%22color%22%20%2F%3E%0A%20%20%20%20%3C%2Fnovo-field%3E%0A%0A%20%20%20%20%3Cnovo-field%3E%0A%20%20%20%20%20%20%3Cnovo-label%3ESet%20Volume%3C%2Fnovo-label%3E%0A%20%20%20%20%20%20%3Cinput%20novoInput%20type%3D%22range%22%20min%3D%220%22%20max%3D%22100%22%20value%3D%2290%22%20step%3D%2210%22%20%2F%3E%0A%20%20%20%20%3C%2Fnovo-field%3E%0A%0A%20%20%20%20%3Cnovo-field%3E%0A%20%20%20%20%20%20%3Cnovo-label%3EBirthday%3C%2Fnovo-label%3E%0A%20%20%20%20%20%20%3Cinput%20novoInput%20type%3D%22date%22%20%2F%3E%0A%20%20%20%20%3C%2Fnovo-field%3E%0A%0A%20%20%20%20%3Cnovo-field%3E%0A%20%20%20%20%20%20%3Cnovo-label%3EScheduled%20End%20Time%3C%2Fnovo-label%3E%0A%20%20%20%20%20%20%3Cinput%20novoInput%20type%3D%22time%22%20%2F%3E%0A%20%20%20%20%3C%2Fnovo-field%3E%0A%0A%20%20%20%20%3Cnovo-field%3E%0A%20%20%20%20%20%20%3Cnovo-label%3ENext%20Appointment%20Time%3F%3C%2Fnovo-label%3E%0A%20%20%20%20%20%20%3Cinput%20novoInput%20type%3D%22datetime-local%22%20%2F%3E%0A%20%20%20%20%3C%2Fnovo-field%3E%0A%20%20%3C%2Fnovo-fields%3E%0A%3C%2Fdiv%3E`
    },
    'field-components': {
        title: 'Field Components Example',
        component: FieldComponentsExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Field%20Components%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'field-components-example'%2C%0A%20%20%20%20templateUrl%3A%20'field-components-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'field-components-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20FieldComponentsExample%20%7B%0A%20%20direction%20%3D%20'horizontal'%3B%0A%20%20fullWidth%20%3D%20false%3B%0A%20%20hide%20%3D%20true%3B%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A%0A.example-right-align%20%7B%0A%20%20text-align%3A%20right%3B%0A%7D%0A`,
        htmlSource: `%3Cdiv%20class%3D%22example-container%22%3E%0A%0A%20%20%3Cnovo-label%3ELayout%3C%2Fnovo-label%3E%0A%20%20%3Cnovo-radio-group%20%5B(ngModel)%5D%3D%22direction%22%3E%0A%20%20%20%20%3Cnovo-radio%20value%3D%22horizontal%22%3EHorizontal%3C%2Fnovo-radio%3E%0A%20%20%20%20%3Cnovo-radio%20value%3D%22vertical%22%3EVertical%3C%2Fnovo-radio%3E%0A%20%20%3C%2Fnovo-radio-group%3E%0A%0A%20%20%3Cnovo-label%3EFull%20Width%3F%3C%2Fnovo-label%3E%0A%20%20%3Cnovo-radio-group%20%5B(ngModel)%5D%3D%22fullWidth%22%3E%0A%20%20%20%20%3Cnovo-radio%20%5Bvalue%5D%3D%22false%22%3ECondensed%3C%2Fnovo-radio%3E%0A%20%20%20%20%3Cnovo-radio%20%5Bvalue%5D%3D%22true%22%3EFull%20Width%3C%2Fnovo-radio%3E%0A%20%20%3C%2Fnovo-radio-group%3E%0A%0A%20%20%3Cnovo-fields%20%5Blayout%5D%3D%22direction%22%20%5BfullWidth%5D%3D%22fullWidth%22%3E%0A%0A%20%20%20%20%3Cnovo-field%3E%0A%20%20%20%20%20%20%3Cnovo-label%3EUsername%3C%2Fnovo-label%3E%0A%20%20%20%20%20%20%3Cinput%20novoInput%20type%3D%22text%22%20%2F%3E%0A%20%20%20%20%3C%2Fnovo-field%3E%0A%0A%20%20%20%20%3Cnovo-field%3E%0A%20%20%20%20%20%20%3Cnovo-label%3EEmail%3C%2Fnovo-label%3E%0A%20%20%20%20%20%20%3Cinput%20novoInput%20type%3D%22email%22%20%2F%3E%0A%20%20%20%20%3C%2Fnovo-field%3E%0A%0A%20%20%20%20%3Cnovo-field%3E%0A%20%20%20%20%20%20%3Cnovo-label%3EEnter%20your%20password%3C%2Fnovo-label%3E%0A%20%20%20%20%20%20%3Cinput%20novoInput%20%5Btype%5D%3D%22hide%20%3F%20'password'%20%3A%20'text'%22%20%2F%3E%0A%20%20%20%20%20%20%3Cnovo-icon%20(click)%3D%22hide%20%3D%20!hide%22%3E%7B%7Bhide%20%3F%20'overview'%20%3A%20'hidden'%7D%7D%3C%2Fnovo-icon%3E%0A%20%20%20%20%3C%2Fnovo-field%3E%0A%0A%20%20%20%20%3Cnovo-field%3E%0A%20%20%20%20%20%20%3Cnovo-label%3ESelect%20your%20favorite%20color%3F%3C%2Fnovo-label%3E%0A%20%20%20%20%20%20%3Cselect%20required%20novoInput%3E%0A%20%20%20%20%20%20%20%20%3Coption%20value%3D%22pink%22%3EPink%3C%2Foption%3E%0A%20%20%20%20%20%20%20%20%3Coption%20value%3D%22purple%22%3EPurple%3C%2Foption%3E%0A%20%20%20%20%20%20%20%20%3Coption%20value%3D%22sparkles%22%3ESparkles%3C%2Foption%3E%0A%20%20%20%20%20%20%3C%2Fselect%3E%0A%20%20%20%20%3C%2Fnovo-field%3E%0A%0A%20%20%20%20%3Cnovo-field%3E%0A%20%20%20%20%20%20%3Cnovo-label%3EShort%20description...%3C%2Fnovo-label%3E%0A%20%20%20%20%20%20%3Ctextarea%20novoInput%3E%3C%2Ftextarea%3E%0A%20%20%20%20%3C%2Fnovo-field%3E%0A%0A%20%20%20%20%3Cnovo-field%3E%0A%20%20%20%20%20%20%3Cnovo-label%3EChoose%20your%20favorite%20color%3F%3C%2Fnovo-label%3E%0A%20%20%20%20%20%20%3Cinput%20novoInput%20type%3D%22color%22%20%2F%3E%0A%20%20%20%20%3C%2Fnovo-field%3E%0A%0A%20%20%20%20%3Cnovo-field%3E%0A%20%20%20%20%20%20%3Cnovo-label%3ESet%20Volume%3C%2Fnovo-label%3E%0A%20%20%20%20%20%20%3Cinput%20novoInput%20type%3D%22range%22%20min%3D%220%22%20max%3D%22100%22%20value%3D%2290%22%20step%3D%2210%22%20%2F%3E%0A%20%20%20%20%3C%2Fnovo-field%3E%0A%0A%20%20%20%20%3Cnovo-field%3E%0A%20%20%20%20%20%20%3Cnovo-label%3EBirthday%3C%2Fnovo-label%3E%0A%20%20%20%20%20%20%3Cinput%20novoInput%20type%3D%22date%22%20%2F%3E%0A%20%20%20%20%3C%2Fnovo-field%3E%0A%0A%20%20%20%20%3Cnovo-field%3E%0A%20%20%20%20%20%20%3Cnovo-label%3EScheduled%20End%20Time%3C%2Fnovo-label%3E%0A%20%20%20%20%20%20%3Cinput%20novoInput%20type%3D%22time%22%20%2F%3E%0A%20%20%20%20%3C%2Fnovo-field%3E%0A%0A%20%20%20%20%3Cnovo-field%3E%0A%20%20%20%20%20%20%3Cnovo-label%3ENext%20Appointment%20Time%3F%3C%2Fnovo-label%3E%0A%20%20%20%20%20%20%3Cinput%20novoInput%20type%3D%22datetime-local%22%20%2F%3E%0A%20%20%20%20%3C%2Fnovo-field%3E%0A%20%20%3C%2Fnovo-fields%3E%0A%3C%2Fdiv%3E`
    },
    'field-anatomy': {
        title: 'Field Anatomy Example',
        component: FieldAnatomyExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Field%20Anatomy%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'field-anatomy-example'%2C%0A%20%20%20%20templateUrl%3A%20'field-anatomy-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'field-anatomy-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20FieldAnatomyExample%20%7B%0A%20%20hide%20%3D%20true%3B%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A%0A.example-right-align%20%7B%0A%20%20text-align%3A%20right%3B%0A%7D%0A`,
        htmlSource: `%3Cdiv%20class%3D%22example-container%22%3E%0A%20%20%3Cnovo-field%20layout%3D%22horizontal%22%3E%0A%20%20%20%20%3Cnovo-label%3EEnter%20your%20password%3C%2Fnovo-label%3E%0A%20%20%20%20%3Cinput%20novoInput%20%5Btype%5D%3D%22hide%20%3F%20'password'%20%3A%20'text'%22%20%2F%3E%0A%20%20%20%20%3Cnovo-icon%20(click)%3D%22hide%20%3D%20!hide%22%3E%7B%7Bhide%20%3F%20'overview'%20%3A%20'hidden'%7D%7D%3C%2Fnovo-icon%3E%0A%20%20%3C%2Fnovo-field%3E%0A%0A%20%20%3Cnovo-field%20layout%3D%22horizontal%22%3E%0A%20%20%20%20%3Cnovo-label%3EAmount%3C%2Fnovo-label%3E%0A%20%20%20%20%3Cinput%20novoInput%20type%3D%22number%22%20class%3D%22example-right-align%22%20%2F%3E%0A%20%20%20%20%3Cspan%20novoPrefix%3E%24%26nbsp%3B%3C%2Fspan%3E%0A%20%20%20%20%3Cspan%20novoSuffix%3E.00%3C%2Fspan%3E%0A%20%20%20%20%3Cnovo-hint%3EEnter%20some%20money%3C%2Fnovo-hint%3E%0A%20%20%3C%2Fnovo-field%3E%0A%0A%3C%2Fdiv%3E`
    },
    'scrollable-drop-down': {
        title: 'Scrollable Drop Down',
        component: ScrollableDropDownExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Scrollable%20Drop%20Down%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'scrollable-drop-down-example'%2C%0A%20%20%20%20templateUrl%3A%20'scrollable-drop-down-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'scrollable-drop-down-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20ScrollableDropDownExample%20%7B%0A%20%20public%20clickMe(event%3F%3A%20string)%20%7B%0A%20%20%20%20window.alert(event)%3B%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20CSS%20for%20this%20example%20*%2F%0A%3Ahost%20%7B%0A%20%20background%3A%20%234a89dc%3B%0A%20%20display%3A%20block%3B%0A%20%20justify-content%3A%20space-between%3B%0A%20%20align-items%3A%20center%3B%0A%20%20padding%3A%200.5rem%3B%0A%7D%0A%3Ahost%20.scrollable-container%20%7B%0A%20%20max-height%3A%2010rem%3B%0A%20%20overflow%3A%20scroll%3B%0A%7D%0A%3Ahost%20.scrollable-container%20.scrollable-content%20%7B%0A%20%20height%3A%2030em%3B%0A%7D%0A%3Ahost%20novo-dropdown%20%7B%0A%20%20margin%3A%205rem%3B%0A%7D%0A`,
        htmlSource: `%3Cdiv%20class%3D%22scrollable-container%22%20cdkScrollable%3E%0A%20%20%3Cdiv%20class%3D%22scrollable-content%22%3E%0A%20%20%20%20%3Cnovo-dropdown%3E%0A%20%20%20%20%20%20%3Cnovo-button%0A%20%20%20%20%20%20%20%20theme%3D%22secondary%22%0A%20%20%20%20%20%20%20%20icon%3D%22collapse%22%0A%20%20%20%20%20%20%20%20inverse%3EInside%20a%20Scrollable%20Container%3C%2Fnovo-button%3E%0A%20%20%20%20%20%20%3Cnovo-optgroup%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-option%20(click)%3D%22clickMe('This')%22%0A%20%20%20%20%20%20%20%20%20%20keepOpen%3D%22true%22%3EThis%3C%2Fnovo-option%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-option%20(click)%3D%22clickMe('Scrolls!')%22%0A%20%20%20%20%20%20%20%20%20%20keepOpen%3D%22true%22%3EScrolls!%3C%2Fnovo-option%3E%0A%20%20%20%20%20%20%3C%2Fnovo-optgroup%3E%0A%20%20%20%20%3C%2Fnovo-dropdown%3E%0A%20%20%3C%2Fdiv%3E%0A%3C%2Fdiv%3E`
    },
    'scroll-to-item-drop-down': {
        title: 'Scrollable Drop Down',
        component: ScrollToItemDropDownExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Scrollable%20Drop%20Down%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'scroll-to-item-drop-down-example'%2C%0A%20%20%20%20templateUrl%3A%20'scroll-to-item-drop-down-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'scroll-to-item-drop-down-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20ScrollToItemDropDownExample%20%7B%0A%20%20public%20selectedWord%3A%20string%20%3D%20''%3B%0A%0A%20%20public%20MOCK_WORDS%3A%20string%5B%5D%20%3D%20%5B%0A%20%20%20%20'lorem'%2C%0A%20%20%20%20'ipsum'%2C%0A%20%20%20%20'dolor'%2C%0A%20%20%20%20'sit'%2C%0A%20%20%20%20'amet'%2C%0A%20%20%20%20'consectetur'%2C%0A%20%20%20%20'adipiscing'%2C%0A%20%20%20%20'elit'%2C%0A%20%20%20%20'curabitur'%2C%0A%20%20%20%20'vel'%2C%0A%20%20%20%20'hendrerit'%2C%0A%20%20%20%20'libero'%2C%0A%20%20%20%20'eleifend'%2C%0A%20%20%20%20'blandit'%2C%0A%20%20%20%20'nunc'%2C%0A%20%20%20%20'ornare'%2C%0A%20%20%20%20'odio'%2C%0A%20%20%20%20'ut'%2C%0A%20%20%20%20'orci'%2C%0A%20%20%20%20'gravida'%2C%0A%20%20%20%20'imperdiet'%2C%0A%20%20%20%20'nullam'%2C%0A%20%20%20%20'purus'%2C%0A%20%20%20%20'lacinia'%2C%0A%20%20%20%20'a'%2C%0A%20%20%20%20'pretium'%2C%0A%20%20%20%20'quis'%2C%0A%20%20%20%20'congue'%2C%0A%20%20%20%20'praesent'%2C%0A%20%20%20%20'sagittis'%2C%0A%20%20%20%20'laoreet'%2C%0A%20%20%20%20'auctor'%2C%0A%20%20%20%20'mauris'%2C%0A%20%20%20%20'non'%2C%0A%20%20%20%20'velit'%2C%0A%20%20%20%20'eros'%2C%0A%20%20%20%20'dictum'%2C%0A%20%20%20%20'proin'%2C%0A%20%20%20%20'accumsan'%2C%0A%20%20%20%20'sapien'%2C%0A%20%20%20%20'nec'%2C%0A%20%20%20%20'massa'%2C%0A%20%20%20%20'volutpat'%2C%0A%20%20%20%20'venenatis'%2C%0A%20%20%20%20'sed'%2C%0A%20%20%20%20'eu'%2C%0A%20%20%20%20'molestie'%2C%0A%20%20%20%20'lacus'%2C%0A%20%20%20%20'quisque'%2C%0A%20%20%20%20'porttitor'%2C%0A%20%20%20%20'ligula'%2C%0A%20%20%20%20'dui'%2C%0A%20%20%20%20'mollis'%2C%0A%20%20%20%20'tempus'%2C%0A%20%20%20%20'at'%2C%0A%20%20%20%20'magna'%2C%0A%20%20%20%20'vestibulum'%2C%0A%20%20%20%20'turpis'%2C%0A%20%20%20%20'ac'%2C%0A%20%20%20%20'diam'%2C%0A%20%20%20%20'tincidunt'%2C%0A%20%20%20%20'id'%2C%0A%20%20%20%20'condimentum'%2C%0A%20%20%20%20'enim'%2C%0A%20%20%20%20'sodales'%2C%0A%20%20%20%20'in'%2C%0A%20%20%20%20'hac'%2C%0A%20%20%20%20'habitasse'%2C%0A%20%20%20%20'platea'%2C%0A%20%20%20%20'dictumst'%2C%0A%20%20%20%20'aenean'%2C%0A%20%20%20%20'neque'%2C%0A%20%20%20%20'fusce'%2C%0A%20%20%20%20'augue'%2C%0A%20%20%20%20'leo'%2C%0A%20%20%20%20'eget'%2C%0A%20%20%20%20'semper'%2C%0A%20%20%20%20'mattis'%2C%0A%20%20%20%20'tortor'%2C%0A%20%20%20%20'scelerisque'%2C%0A%20%20%20%20'nulla'%2C%0A%20%20%20%20'interdum'%2C%0A%20%20%20%20'tellus'%2C%0A%20%20%20%20'malesuada'%2C%0A%20%20%20%20'rhoncus'%2C%0A%20%20%20%20'porta'%2C%0A%20%20%20%20'sem'%2C%0A%20%20%20%20'aliquet'%2C%0A%20%20%20%20'et'%2C%0A%20%20%20%20'nam'%2C%0A%20%20%20%20'suspendisse'%2C%0A%20%20%20%20'potenti'%2C%0A%20%20%20%20'vivamus'%2C%0A%20%20%20%20'luctus'%2C%0A%20%20%20%20'fringilla'%2C%0A%20%20%20%20'erat'%2C%0A%20%20%20%20'donec'%2C%0A%20%20%20%20'justo'%2C%0A%20%20%20%20'vehicula'%2C%0A%20%20%20%20'ultricies'%2C%0A%20%20%20%20'varius'%2C%0A%20%20%20%20'ante'%2C%0A%20%20%20%20'primis'%2C%0A%20%20%20%20'faucibus'%2C%0A%20%20%20%20'ultrices'%2C%0A%20%20%20%20'posuere'%2C%0A%20%20%20%20'cubilia'%2C%0A%20%20%20%20'curae'%2C%0A%20%20%20%20'etiam'%2C%0A%20%20%20%20'cursus'%2C%0A%20%20%20%20'aliquam'%2C%0A%20%20%20%20'quam'%2C%0A%20%20%20%20'dapibus'%2C%0A%20%20%20%20'nisl'%2C%0A%20%20%20%20'feugiat'%2C%0A%20%20%20%20'egestas'%2C%0A%20%20%20%20'class'%2C%0A%20%20%20%20'aptent'%2C%0A%20%20%20%20'taciti'%2C%0A%20%20%20%20'sociosqu'%2C%0A%20%20%20%20'ad'%2C%0A%20%20%20%20'litora'%2C%0A%20%20%20%20'torquent'%2C%0A%20%20%20%20'per'%2C%0A%20%20%20%20'conubia'%2C%0A%20%20%20%20'nostra'%2C%0A%20%20%20%20'inceptos'%2C%0A%20%20%20%20'himenaeos'%2C%0A%20%20%20%20'phasellus'%2C%0A%20%20%20%20'nibh'%2C%0A%20%20%20%20'pulvinar'%2C%0A%20%20%20%20'vitae'%2C%0A%20%20%20%20'urna'%2C%0A%20%20%20%20'iaculis'%2C%0A%20%20%20%20'lobortis'%2C%0A%20%20%20%20'nisi'%2C%0A%20%20%20%20'viverra'%2C%0A%20%20%20%20'arcu'%2C%0A%20%20%20%20'morbi'%2C%0A%20%20%20%20'pellentesque'%2C%0A%20%20%20%20'metus'%2C%0A%20%20%20%20'commodo'%2C%0A%20%20%20%20'ut'%2C%0A%20%20%20%20'facilisis'%2C%0A%20%20%20%20'felis'%2C%0A%20%20%20%20'tristique'%2C%0A%20%20%20%20'ullamcorper'%2C%0A%20%20%20%20'placerat'%2C%0A%20%20%20%20'aenean'%2C%0A%20%20%20%20'convallis'%2C%0A%20%20%20%20'sollicitudin'%2C%0A%20%20%20%20'integer'%2C%0A%20%20%20%20'rutrum'%2C%0A%20%20%20%20'duis'%2C%0A%20%20%20%20'est'%2C%0A%20%20%20%20'etiam'%2C%0A%20%20%20%20'bibendum'%2C%0A%20%20%20%20'donec'%2C%0A%20%20%20%20'pharetra'%2C%0A%20%20%20%20'vulputate'%2C%0A%20%20%20%20'maecenas'%2C%0A%20%20%20%20'mi'%2C%0A%20%20%20%20'fermentum'%2C%0A%20%20%20%20'consequat'%2C%0A%20%20%20%20'suscipit'%2C%0A%20%20%20%20'aliquam'%2C%0A%20%20%20%20'habitant'%2C%0A%20%20%20%20'senectus'%2C%0A%20%20%20%20'netus'%2C%0A%20%20%20%20'fames'%2C%0A%20%20%20%20'quisque'%2C%0A%20%20%20%20'euismod'%2C%0A%20%20%20%20'curabitur'%2C%0A%20%20%20%20'lectus'%2C%0A%20%20%20%20'elementum'%2C%0A%20%20%20%20'tempor'%2C%0A%20%20%20%20'risus'%2C%0A%20%20%20%20'cras'%2C%0A%20%20%5D%3B%0A%0A%20%20public%20clickMe(event%3F%3A%20string)%20%7B%0A%20%20%20%20this.selectedWord%20%3D%20event%3B%0A%20%20%20%20window.alert(event)%3B%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20CSS%20for%20this%20example%20*%2F%0A%3Ahost%20%7B%0A%20%20display%3A%20flex%3B%0A%20%20align-items%3A%20center%3B%0A%20%20white-space%3A%20normal%3B%0A%7D%0A%0A.value%20%7B%0A%20%20flex-basis%3A%200%3B%0A%20%20flex-grow%3A%201%3B%0A%20%20max-width%3A%20100%25%3B%0A%7D%0A.value-active%20%7B%0A%20%20flex%3A%200%200%20auto%3B%0A%20%20width%3A%20auto%3B%0A%20%20max-width%3A%20none%3B%0A%20%20margin-left%3A%201rem%3B%0A%7D%0A`,
        htmlSource: `%3Cnovo-dropdown%20side%3D%22default%22%20height%3D%22300%22%20%5BscrollToActiveItemOnOpen%5D%3D%22true%22%3E%0A%20%20%3Cnovo-stack%20dropdownTrigger%20%5Bstyle.width.px%5D%3D%22160%22%20align%3D%22stretch%22%20gap%3D%22sm%22%3E%0A%20%20%20%20%3Cnovo-row%20class%3D%22button-row%22%20justify%3D%22space-between%22%3E%0A%20%20%20%20%20%20%3Cnovo-label%3E%7B%7B%20'Selected%20Word%3A'%20%7D%7D%3C%2Fnovo-label%3E%0A%20%20%20%20%3C%2Fnovo-row%3E%0A%20%20%20%20%3Cnovo-row%20class%3D%22button-row%22%20justify%3D%22space-between%22%3E%0A%20%20%20%20%20%20%3Cnovo-text%3E%7B%7B%20selectedWord%20%7D%7D%3C%2Fnovo-text%3E%0A%20%20%20%20%20%20%3Cnovo-icon%20size%3D%22sm%22%3Ecollapse%3C%2Fnovo-icon%3E%0A%20%20%20%20%3C%2Fnovo-row%3E%0A%20%20%3C%2Fnovo-stack%3E%0A%20%20%3Cnovo-optgroup%3E%0A%20%20%20%20%3Cnovo-option%20*ngFor%3D%22let%20word%20of%20MOCK_WORDS%3B%20index%20as%20i%22%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20(click)%3D%22clickMe(word)%22%3E%0A%20%20%20%20%20%20%3Cspan%20class%3D%22value%22%3E%7B%7B%20word%20%7D%7D%3C%2Fspan%3E%0A%20%20%20%20%20%20%3Cspan%20class%3D%22value-active%22%3E%0A%20%20%20%20%20%20%20%20%3Ci%20class%3D%22bhi-check%20ng-star-inserted%22%0A%20%20%20%20%20%20%20%20%20%20%20%5Bstyle.visibility%5D%3D%22word%20!%3D%3D%20selectedWord%20%3F%20'hidden'%20%3A%20'visible'%22%3E%3C%2Fi%3E%0A%20%20%20%20%20%20%3C%2Fspan%3E%0A%20%20%20%20%3C%2Fnovo-option%3E%0A%20%20%3C%2Fnovo-optgroup%3E%0A%3C%2Fnovo-dropdown%3E%0A`
    },
    'position-drop-down': {
        title: 'Drop Down Positions',
        component: PositionDropDownExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Drop%20Down%20Positions%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'position-drop-down-example'%2C%0A%20%20%20%20templateUrl%3A%20'position-drop-down-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'position-drop-down-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20PositionDropDownExample%20%7B%0A%20%20public%20POSITION_OPTIONS%3A%20%7B%20name%3A%20string%3B%20description%3A%20string%20%7D%5B%5D%20%3D%20%5B%0A%20%20%20%20%7B%0A%20%20%20%20%20%20name%3A%20'default%20(left)'%2C%0A%20%20%20%20%20%20description%3A%20'Prefer%20bottom-left%2C%20with%20fallback%20positions%20(in%20order)%3A%20top-left%2C%20bottom-right%2C%20top-right%2C%20center-left%2C%20center-right'%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20name%3A%20'right'%2C%0A%20%20%20%20%20%20description%3A%20'Prefer%20bottom-right%2C%20with%20fallback%20positions%20(in%20order)%3A%20top-right%2C%20bottom-left%2C%20top-left%2C%20center-left%2C%20center-right'%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20name%3A%20'above-below'%2C%0A%20%20%20%20%20%20description%3A%20'Prefer%20bottom-left%2C%20with%20fallback%20positions%20(in%20order)%3A%20top-left%2C%20bottom-right%2C%20top-right%20(no%20center)'%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20name%3A%20'right-above-below'%2C%0A%20%20%20%20%20%20description%3A%20'Prefer%20bottom-left%2C%20with%20fallback%20positions%20(in%20order)%3A%20top-left%2C%20bottom-right%2C%20top-right%20(no%20center)'%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%20name%3A%20'center'%2C%20description%3A%20'Prefer%20center-left%2C%20with%20fallback%20positions%20above%20and%20below%2C%20but%20always%20covering%20the%20dropdown'%20%7D%2C%0A%20%20%20%20%7B%20name%3A%20'bottom'%2C%20description%3A%20'Prefer%20bottom-left%2C%20with%20fallback%20position%20of%20bottom-right'%20%7D%2C%0A%20%20%20%20%7B%20name%3A%20'bottom-left'%2C%20description%3A%20'Always%20popup%20to%20the%20bottom-left'%20%7D%2C%0A%20%20%20%20%7B%20name%3A%20'bottom-right'%2C%20description%3A%20'Always%20popup%20to%20the%20bottom-right'%20%7D%2C%0A%20%20%20%20%7B%20name%3A%20'top-left'%2C%20description%3A%20'Always%20popup%20to%20the%20top-left'%20%7D%2C%0A%20%20%20%20%7B%20name%3A%20'top-right'%2C%20description%3A%20'Always%20popup%20to%20the%20top-right'%20%7D%2C%0A%20%20%5D%3B%0A%0A%20%20public%20clickMe(data%3A%20string)%3A%20void%20%7B%0A%20%20%20%20console.log('CLICKED!'%2C%20data)%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20CSS%20for%20this%20example%20*%2F%0A%3Ahost%20%7B%0A%20%20background%3A%20%234a89dc%3B%0A%20%20padding%3A%201rem%3B%0A%20%20display%3A%20flex%3B%0A%20%20justify-content%3A%20space-between%3B%0A%20%20align-items%3A%20center%3B%0A%20%20flex-wrap%3A%20wrap%3B%0A%20%20padding%3A%200.5rem%3B%0A%7D%0A%0A%3Ahost%20novo-dropdown%20%7B%0A%20%20margin%3A%200.5rem%3B%0A%7D%0A`,
        htmlSource: `%3Cnovo-dropdown%20side%3D%22default%22%3E%0A%20%20%3Cbutton%20type%3D%22button%22%0A%20%20%20%20theme%3D%22secondary%22%0A%20%20%20%20icon%3D%22collapse%22%0A%20%20%20%20inverse%3EDefault%3C%2Fbutton%3E%0A%20%20%3Cnovo-optgroup%3E%0A%20%20%20%20%3Cnovo-option%3EFive%3C%2Fnovo-option%3E%0A%20%20%20%20%3Cnovo-option%3EItems%3C%2Fnovo-option%3E%0A%20%20%20%20%3Cnovo-option%3EFor%3C%2Fnovo-option%3E%0A%20%20%20%20%3Cnovo-option%3EPosition%3C%2Fnovo-option%3E%0A%20%20%20%20%3Cnovo-option%3ETest%3C%2Fnovo-option%3E%0A%20%20%3C%2Fnovo-optgroup%3E%0A%3C%2Fnovo-dropdown%3E%0A%3Cnovo-dropdown%20side%3D%22right%22%3E%0A%20%20%3Cbutton%20type%3D%22button%22%0A%20%20%20%20theme%3D%22secondary%22%0A%20%20%20%20icon%3D%22collapse%22%0A%20%20%20%20inverse%3ERight%3C%2Fbutton%3E%0A%20%20%3Cnovo-optgroup%3E%0A%20%20%20%20%3Cnovo-option%3EFive%3C%2Fnovo-option%3E%0A%20%20%20%20%3Cnovo-option%3EItems%3C%2Fnovo-option%3E%0A%20%20%20%20%3Cnovo-option%3EFor%3C%2Fnovo-option%3E%0A%20%20%20%20%3Cnovo-option%3EPosition%3C%2Fnovo-option%3E%0A%20%20%20%20%3Cnovo-option%3ETest%3C%2Fnovo-option%3E%0A%20%20%3C%2Fnovo-optgroup%3E%0A%3C%2Fnovo-dropdown%3E%0A%3Cnovo-dropdown%20side%3D%22above-below%22%3E%0A%20%20%3Cbutton%20type%3D%22button%22%0A%20%20%20%20theme%3D%22secondary%22%0A%20%20%20%20icon%3D%22collapse%22%0A%20%20%20%20inverse%3EAbove-below%3C%2Fbutton%3E%0A%20%20%3Cnovo-optgroup%3E%0A%20%20%20%20%3Cnovo-option%3EFive%3C%2Fnovo-option%3E%0A%20%20%20%20%3Cnovo-option%3EItems%3C%2Fnovo-option%3E%0A%20%20%20%20%3Cnovo-option%3EFor%3C%2Fnovo-option%3E%0A%20%20%20%20%3Cnovo-option%3EPosition%3C%2Fnovo-option%3E%0A%20%20%20%20%3Cnovo-option%3ETest%3C%2Fnovo-option%3E%0A%20%20%3C%2Fnovo-optgroup%3E%0A%3C%2Fnovo-dropdown%3E%0A%3Cnovo-dropdown%20side%3D%22right-above-below%22%3E%0A%20%20%3Cbutton%20type%3D%22button%22%0A%20%20%20%20theme%3D%22secondary%22%0A%20%20%20%20icon%3D%22collapse%22%0A%20%20%20%20inverse%3ERight-Above-Below%3C%2Fbutton%3E%0A%20%20%3Cnovo-optgroup%3E%0A%20%20%20%20%3Cnovo-option%3EFive%3C%2Fnovo-option%3E%0A%20%20%20%20%3Cnovo-option%3EItems%3C%2Fnovo-option%3E%0A%20%20%20%20%3Cnovo-option%3EFor%3C%2Fnovo-option%3E%0A%20%20%20%20%3Cnovo-option%3EPosition%3C%2Fnovo-option%3E%0A%20%20%20%20%3Cnovo-option%3ETest%3C%2Fnovo-option%3E%0A%20%20%3C%2Fnovo-optgroup%3E%0A%3C%2Fnovo-dropdown%3E%0A%3Cnovo-dropdown%20side%3D%22center%22%3E%0A%20%20%3Cbutton%20type%3D%22button%22%0A%20%20%20%20theme%3D%22secondary%22%0A%20%20%20%20icon%3D%22collapse%22%0A%20%20%20%20inverse%3ECenter%3C%2Fbutton%3E%0A%20%20%3Cnovo-optgroup%3E%0A%20%20%20%20%3Cnovo-option%3EFive%3C%2Fnovo-option%3E%0A%20%20%20%20%3Cnovo-option%3EItems%3C%2Fnovo-option%3E%0A%20%20%20%20%3Cnovo-option%3EFor%3C%2Fnovo-option%3E%0A%20%20%20%20%3Cnovo-option%3EPosition%3C%2Fnovo-option%3E%0A%20%20%20%20%3Cnovo-option%3ETest%3C%2Fnovo-option%3E%0A%20%20%3C%2Fnovo-optgroup%3E%0A%3C%2Fnovo-dropdown%3E%0A%3Cnovo-dropdown%20side%3D%22bottom%22%3E%0A%20%20%3Cbutton%20type%3D%22button%22%0A%20%20%20%20theme%3D%22secondary%22%0A%20%20%20%20icon%3D%22collapse%22%0A%20%20%20%20inverse%3EBottom%3C%2Fbutton%3E%0A%20%20%3Cnovo-optgroup%3E%0A%20%20%20%20%3Cnovo-option%3EFive%3C%2Fnovo-option%3E%0A%20%20%20%20%3Cnovo-option%3EItems%3C%2Fnovo-option%3E%0A%20%20%20%20%3Cnovo-option%3EFor%3C%2Fnovo-option%3E%0A%20%20%20%20%3Cnovo-option%3EPosition%3C%2Fnovo-option%3E%0A%20%20%20%20%3Cnovo-option%3ETest%3C%2Fnovo-option%3E%0A%20%20%3C%2Fnovo-optgroup%3E%0A%3C%2Fnovo-dropdown%3E%0A%3Cnovo-dropdown%20side%3D%22bottom-left%22%3E%0A%20%20%3Cbutton%20type%3D%22button%22%0A%20%20%20%20theme%3D%22secondary%22%0A%20%20%20%20icon%3D%22collapse%22%0A%20%20%20%20inverse%3EBottom-Left%3C%2Fbutton%3E%0A%20%20%3Cnovo-optgroup%3E%0A%20%20%20%20%3Cnovo-option%3EFive%3C%2Fnovo-option%3E%0A%20%20%20%20%3Cnovo-option%3EItems%3C%2Fnovo-option%3E%0A%20%20%20%20%3Cnovo-option%3EFor%3C%2Fnovo-option%3E%0A%20%20%20%20%3Cnovo-option%3EPosition%3C%2Fnovo-option%3E%0A%20%20%20%20%3Cnovo-option%3ETest%3C%2Fnovo-option%3E%0A%20%20%3C%2Fnovo-optgroup%3E%0A%3C%2Fnovo-dropdown%3E%0A%3Cnovo-dropdown%20side%3D%22bottom-right%22%3E%0A%20%20%3Cbutton%20type%3D%22button%22%0A%20%20%20%20theme%3D%22secondary%22%0A%20%20%20%20icon%3D%22collapse%22%0A%20%20%20%20inverse%3EBottom-Right%3C%2Fbutton%3E%0A%20%20%3Cnovo-optgroup%3E%0A%20%20%20%20%3Cnovo-option%3EFive%3C%2Fnovo-option%3E%0A%20%20%20%20%3Cnovo-option%3EItems%3C%2Fnovo-option%3E%0A%20%20%20%20%3Cnovo-option%3EFor%3C%2Fnovo-option%3E%0A%20%20%20%20%3Cnovo-option%3EPosition%3C%2Fnovo-option%3E%0A%20%20%20%20%3Cnovo-option%3ETest%3C%2Fnovo-option%3E%0A%20%20%3C%2Fnovo-optgroup%3E%0A%3C%2Fnovo-dropdown%3E%0A%3Cnovo-dropdown%20side%3D%22top-left%22%3E%0A%20%20%3Cbutton%20type%3D%22button%22%0A%20%20%20%20theme%3D%22secondary%22%0A%20%20%20%20icon%3D%22collapse%22%0A%20%20%20%20inverse%3ETop-Left%3C%2Fbutton%3E%0A%20%20%3Cnovo-optgroup%3E%0A%20%20%20%20%3Cnovo-option%3EFive%3C%2Fnovo-option%3E%0A%20%20%20%20%3Cnovo-option%3EItems%3C%2Fnovo-option%3E%0A%20%20%20%20%3Cnovo-option%3EFor%3C%2Fnovo-option%3E%0A%20%20%20%20%3Cnovo-option%3EPosition%3C%2Fnovo-option%3E%0A%20%20%20%20%3Cnovo-option%3ETest%3C%2Fnovo-option%3E%0A%20%20%3C%2Fnovo-optgroup%3E%0A%3C%2Fnovo-dropdown%3E%0A%3Cnovo-dropdown%20side%3D%22top-right%22%3E%0A%20%20%3Cbutton%20type%3D%22button%22%0A%20%20%20%20theme%3D%22secondary%22%0A%20%20%20%20icon%3D%22collapse%22%0A%20%20%20%20inverse%3ETop-Right%3C%2Fbutton%3E%0A%20%20%3Cnovo-optgroup%3E%0A%20%20%20%20%3Cnovo-option%3EFive%3C%2Fnovo-option%3E%0A%20%20%20%20%3Cnovo-option%3EItems%3C%2Fnovo-option%3E%0A%20%20%20%20%3Cnovo-option%3EFor%3C%2Fnovo-option%3E%0A%20%20%20%20%3Cnovo-option%3EPosition%3C%2Fnovo-option%3E%0A%20%20%20%20%3Cnovo-option%3ETest%3C%2Fnovo-option%3E%0A%20%20%3C%2Fnovo-optgroup%3E%0A%3C%2Fnovo-dropdown%3E`
    },
    'multi-drop-down': {
        title: 'Multi Drop Down',
        component: MultiDropDownExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Multi%20Drop%20Down%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'multi-drop-down-example'%2C%0A%20%20%20%20templateUrl%3A%20'multi-drop-down-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'multi-drop-down-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20MultiDropDownExample%20%7B%0A%20%20public%20clickMe(data%3A%20string)%3A%20void%20%7B%0A%20%20%20%20console.log('CLICKED!'%2C%20data)%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A%3Ahost%20%7B%0A%20%20display%3A%20flex%3B%0A%20%20flex-flow%3A%20row%20nowrap%3B%0A%20%20justify-content%3A%20space-between%3B%0A%7D%0A%0A.dropdown-search%20%7B%0A%20%20padding%3A%201rem%3B%0A%7D%0A.dropdown-footer%20%7B%0A%20%20padding%3A%200.5rem%3B%0A%7D%0A`,
        htmlSource: `%3Cnovo-dropdown%20keepOpen%3E%0A%20%20%3Cnovo-button%20type%3D%22button%22%0A%20%20%20%20theme%3D%22secondary%22%0A%20%20%20%20icon%3D%22collapse%22%0A%20%20%20%20inverse%3EKeep%20Open%3C%2Fnovo-button%3E%0A%20%20%3Cnovo-field%20class%3D%22dropdown-search%22%3E%0A%20%20%20%20%3Cinput%20novoInput%20placeholder%3D%22Search...%22%20type%3D%22search%22%20width%3D%22100%25%22%20%2F%3E%0A%20%20%20%20%3Cnovo-icon%20novoPrefix%3Esearch%3C%2Fnovo-icon%3E%0A%20%20%3C%2Fnovo-field%3E%0A%20%20%3Cnovo-divider%3E%3C%2Fnovo-divider%3E%0A%20%20%3Cnovo-optgroup%3E%0A%20%20%20%20%3Cnovo-option%20(click)%3D%22clickMe('Hello!')%22%3EAction%201%3C%2Fnovo-option%3E%0A%20%20%20%20%3Cnovo-option%20(click)%3D%22clickMe('Another!')%22%3EAction%202%3C%2Fnovo-option%3E%0A%20%20%3C%2Fnovo-optgroup%3E%0A%20%20%3Cnovo-divider%3E%3C%2Fnovo-divider%3E%0A%20%20%3Cdiv%20class%3D%22dropdown-footer%22%3E%0A%20%20%20%20%3Cbutton%20theme%3D%22dialogue%22%20icon%3D%22add-thin%22%3EAdd%3C%2Fbutton%3E%0A%20%20%3C%2Fdiv%3E%0A%3C%2Fnovo-dropdown%3E%0A%0A%3Cnovo-dropdown%20side%3D%22right%22%20multiple%3E%0A%20%20%3Cnovo-button%20theme%3D%22secondary%22%20icon%3D%22overview%22%20side%3D%22left%22%3EHide%2FShow%3C%2Fnovo-button%3E%0A%20%20%3Cnovo-option%3EAction%201%3C%2Fnovo-option%3E%0A%20%20%3Cnovo-option%20tooltip%3D%22Test%20tooltip%20%3A)%22%20tooltipPosition%3D%22left%22%3EAction%202%3C%2Fnovo-option%3E%0A%20%20%3Cnovo-option%3EAction%203%3C%2Fnovo-option%3E%0A%20%20%3Cnovo-option%3EAction%204%3C%2Fnovo-option%3E%0A%20%20%3Cnovo-option%3EAction%205%3C%2Fnovo-option%3E%0A%20%20%3Cnovo-option%3EAction%206%3C%2Fnovo-option%3E%0A%20%20%3Cnovo-option%3EAction%207%3C%2Fnovo-option%3E%0A%20%20%3Cnovo-option%3EAction%208%3C%2Fnovo-option%3E%0A%20%20%3Cnovo-option%3EAction%209%3C%2Fnovo-option%3E%0A%20%20%3Cnovo-option%3EAction%2010%3C%2Fnovo-option%3E%0A%3C%2Fnovo-dropdown%3E`
    },
    'large-drop-down': {
        title: 'Large Drop Down',
        component: LargeDropDownExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Large%20Drop%20Down%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'large-drop-down-example'%2C%0A%20%20%20%20templateUrl%3A%20'large-drop-down-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'large-drop-down-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20LargeDropDownExample%20%7B%0A%20%20public%20MOCK_WORDS%3A%20string%5B%5D%20%3D%20%5B%0A%20%20%20%20'lorem'%2C%0A%20%20%20%20'ipsum'%2C%0A%20%20%20%20'dolor'%2C%0A%20%20%20%20'sit'%2C%0A%20%20%20%20'amet'%2C%0A%20%20%20%20'consectetur'%2C%0A%20%20%20%20'adipiscing'%2C%0A%20%20%20%20'elit'%2C%0A%20%20%20%20'curabitur'%2C%0A%20%20%20%20'vel'%2C%0A%20%20%20%20'hendrerit'%2C%0A%20%20%20%20'libero'%2C%0A%20%20%20%20'eleifend'%2C%0A%20%20%20%20'blandit'%2C%0A%20%20%20%20'nunc'%2C%0A%20%20%20%20'ornare'%2C%0A%20%20%20%20'odio'%2C%0A%20%20%20%20'ut'%2C%0A%20%20%20%20'orci'%2C%0A%20%20%20%20'gravida'%2C%0A%20%20%20%20'imperdiet'%2C%0A%20%20%20%20'nullam'%2C%0A%20%20%20%20'purus'%2C%0A%20%20%20%20'lacinia'%2C%0A%20%20%20%20'a'%2C%0A%20%20%20%20'pretium'%2C%0A%20%20%20%20'quis'%2C%0A%20%20%20%20'congue'%2C%0A%20%20%20%20'praesent'%2C%0A%20%20%20%20'sagittis'%2C%0A%20%20%20%20'laoreet'%2C%0A%20%20%20%20'auctor'%2C%0A%20%20%20%20'mauris'%2C%0A%20%20%20%20'non'%2C%0A%20%20%20%20'velit'%2C%0A%20%20%20%20'eros'%2C%0A%20%20%20%20'dictum'%2C%0A%20%20%20%20'proin'%2C%0A%20%20%20%20'accumsan'%2C%0A%20%20%20%20'sapien'%2C%0A%20%20%20%20'nec'%2C%0A%20%20%20%20'massa'%2C%0A%20%20%20%20'volutpat'%2C%0A%20%20%20%20'venenatis'%2C%0A%20%20%20%20'sed'%2C%0A%20%20%20%20'eu'%2C%0A%20%20%20%20'molestie'%2C%0A%20%20%20%20'lacus'%2C%0A%20%20%20%20'quisque'%2C%0A%20%20%20%20'porttitor'%2C%0A%20%20%20%20'ligula'%2C%0A%20%20%20%20'dui'%2C%0A%20%20%20%20'mollis'%2C%0A%20%20%20%20'tempus'%2C%0A%20%20%20%20'at'%2C%0A%20%20%20%20'magna'%2C%0A%20%20%20%20'vestibulum'%2C%0A%20%20%20%20'turpis'%2C%0A%20%20%20%20'ac'%2C%0A%20%20%20%20'diam'%2C%0A%20%20%20%20'tincidunt'%2C%0A%20%20%20%20'id'%2C%0A%20%20%20%20'condimentum'%2C%0A%20%20%20%20'enim'%2C%0A%20%20%20%20'sodales'%2C%0A%20%20%20%20'in'%2C%0A%20%20%20%20'hac'%2C%0A%20%20%20%20'habitasse'%2C%0A%20%20%20%20'platea'%2C%0A%20%20%20%20'dictumst'%2C%0A%20%20%20%20'aenean'%2C%0A%20%20%20%20'neque'%2C%0A%20%20%20%20'fusce'%2C%0A%20%20%20%20'augue'%2C%0A%20%20%20%20'leo'%2C%0A%20%20%20%20'eget'%2C%0A%20%20%20%20'semper'%2C%0A%20%20%20%20'mattis'%2C%0A%20%20%20%20'tortor'%2C%0A%20%20%20%20'scelerisque'%2C%0A%20%20%20%20'nulla'%2C%0A%20%20%20%20'interdum'%2C%0A%20%20%20%20'tellus'%2C%0A%20%20%20%20'malesuada'%2C%0A%20%20%20%20'rhoncus'%2C%0A%20%20%20%20'porta'%2C%0A%20%20%20%20'sem'%2C%0A%20%20%20%20'aliquet'%2C%0A%20%20%20%20'et'%2C%0A%20%20%20%20'nam'%2C%0A%20%20%20%20'suspendisse'%2C%0A%20%20%20%20'potenti'%2C%0A%20%20%20%20'vivamus'%2C%0A%20%20%20%20'luctus'%2C%0A%20%20%20%20'fringilla'%2C%0A%20%20%20%20'erat'%2C%0A%20%20%20%20'donec'%2C%0A%20%20%20%20'justo'%2C%0A%20%20%20%20'vehicula'%2C%0A%20%20%20%20'ultricies'%2C%0A%20%20%20%20'varius'%2C%0A%20%20%20%20'ante'%2C%0A%20%20%20%20'primis'%2C%0A%20%20%20%20'faucibus'%2C%0A%20%20%20%20'ultrices'%2C%0A%20%20%20%20'posuere'%2C%0A%20%20%20%20'cubilia'%2C%0A%20%20%20%20'curae'%2C%0A%20%20%20%20'etiam'%2C%0A%20%20%20%20'cursus'%2C%0A%20%20%20%20'aliquam'%2C%0A%20%20%20%20'quam'%2C%0A%20%20%20%20'dapibus'%2C%0A%20%20%20%20'nisl'%2C%0A%20%20%20%20'feugiat'%2C%0A%20%20%20%20'egestas'%2C%0A%20%20%20%20'class'%2C%0A%20%20%20%20'aptent'%2C%0A%20%20%20%20'taciti'%2C%0A%20%20%20%20'sociosqu'%2C%0A%20%20%20%20'ad'%2C%0A%20%20%20%20'litora'%2C%0A%20%20%20%20'torquent'%2C%0A%20%20%20%20'per'%2C%0A%20%20%20%20'conubia'%2C%0A%20%20%20%20'nostra'%2C%0A%20%20%20%20'inceptos'%2C%0A%20%20%20%20'himenaeos'%2C%0A%20%20%20%20'phasellus'%2C%0A%20%20%20%20'nibh'%2C%0A%20%20%20%20'pulvinar'%2C%0A%20%20%20%20'vitae'%2C%0A%20%20%20%20'urna'%2C%0A%20%20%20%20'iaculis'%2C%0A%20%20%20%20'lobortis'%2C%0A%20%20%20%20'nisi'%2C%0A%20%20%20%20'viverra'%2C%0A%20%20%20%20'arcu'%2C%0A%20%20%20%20'morbi'%2C%0A%20%20%20%20'pellentesque'%2C%0A%20%20%20%20'metus'%2C%0A%20%20%20%20'commodo'%2C%0A%20%20%20%20'ut'%2C%0A%20%20%20%20'facilisis'%2C%0A%20%20%20%20'felis'%2C%0A%20%20%20%20'tristique'%2C%0A%20%20%20%20'ullamcorper'%2C%0A%20%20%20%20'placerat'%2C%0A%20%20%20%20'aenean'%2C%0A%20%20%20%20'convallis'%2C%0A%20%20%20%20'sollicitudin'%2C%0A%20%20%20%20'integer'%2C%0A%20%20%20%20'rutrum'%2C%0A%20%20%20%20'duis'%2C%0A%20%20%20%20'est'%2C%0A%20%20%20%20'etiam'%2C%0A%20%20%20%20'bibendum'%2C%0A%20%20%20%20'donec'%2C%0A%20%20%20%20'pharetra'%2C%0A%20%20%20%20'vulputate'%2C%0A%20%20%20%20'maecenas'%2C%0A%20%20%20%20'mi'%2C%0A%20%20%20%20'fermentum'%2C%0A%20%20%20%20'consequat'%2C%0A%20%20%20%20'suscipit'%2C%0A%20%20%20%20'aliquam'%2C%0A%20%20%20%20'habitant'%2C%0A%20%20%20%20'senectus'%2C%0A%20%20%20%20'netus'%2C%0A%20%20%20%20'fames'%2C%0A%20%20%20%20'quisque'%2C%0A%20%20%20%20'euismod'%2C%0A%20%20%20%20'curabitur'%2C%0A%20%20%20%20'lectus'%2C%0A%20%20%20%20'elementum'%2C%0A%20%20%20%20'tempor'%2C%0A%20%20%20%20'risus'%2C%0A%20%20%20%20'cras'%2C%0A%20%20%5D%3B%0A%0A%20%20public%20clickMe(data%3A%20string)%3A%20void%20%7B%0A%20%20%20%20console.log('CLICKED!'%2C%20data)%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cnovo-dropdown%20height%3D%22250%22%3E%0A%20%20%3Cbutton%20type%3D%22button%22%0A%20%20%20%20theme%3D%22secondary%22%0A%20%20%20%20icon%3D%22collapse%22%0A%20%20%20%20inverse%3ELots%20of%20Data%20Points!%3C%2Fbutton%3E%0A%20%20%3Cnovo-optgroup%3E%0A%20%20%20%20%3Cnovo-option%20*ngFor%3D%22let%20name%20of%20MOCK_WORDS%22%0A%20%20%20%20%20%20(action)%3D%22clickMe(name)%22%3E%7B%7B%20name%20%7D%7D%3C%2Fnovo-option%3E%0A%20%20%3C%2Fnovo-optgroup%3E%0A%3C%2Fnovo-dropdown%3E`
    },
    'custom-drop-down': {
        title: 'Custom Drop Down',
        component: CustomDropDownExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Custom%20Drop%20Down%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'custom-drop-down-example'%2C%0A%20%20%20%20templateUrl%3A%20'custom-drop-down-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'custom-drop-down-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20CustomDropDownExample%20%7B%0A%20%20public%20clickMe(event%3F%3A%20string)%20%7B%0A%20%20%20%20window.alert(event)%3B%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cnovo-dropdown%20containerClass%3D%22custom-class%22%0A%20%20scrollStrategy%3D%22close%22%3E%0A%20%20%3Cbutton%20type%3D%22button%22%0A%20%20%20%20theme%3D%22secondary%22%0A%20%20%20%20icon%3D%22collapse%22%0A%20%20%20%20inverse%3EI%20Have%20A%20Custom%20Class!%3C%2Fbutton%3E%0A%20%20%3Cnovo-optgroup%3E%0A%20%20%20%20%3Cnovo-option%20(action)%3D%22clickMe('Hello!')%22%3EAction%201%3C%2Fnovo-option%3E%0A%20%20%20%20%3Cnovo-option%20(action)%3D%22clickMe('Another!')%22%3EAction%202%3C%2Fnovo-option%3E%0A%20%20%3C%2Fnovo-optgroup%3E%0A%3C%2Fnovo-dropdown%3E`
    },
    'basic-drop-down': {
        title: 'Basic Drop Down',
        component: BasicDropDownExample,
        tsSource: `import%20%7B%20AfterContentInit%2C%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Basic%20Drop%20Down%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'basic-drop-down-example'%2C%0A%20%20%20%20templateUrl%3A%20'basic-drop-down-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'basic-drop-down-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20BasicDropDownExample%20implements%20AfterContentInit%20%7B%0A%20%20asyncItems%3A%20any%5B%5D%20%3D%20%5B%5D%3B%0A%20%20public%20clickMe(event%3F%3A%20string)%20%7B%0A%20%20%20%20console.log(event)%3B%0A%20%20%7D%0A%0A%20%20async%20ngAfterContentInit()%20%7B%0A%20%20%20%20this.asyncItems%20%3D%20await%20this.getAsyncItems()%3B%0A%20%20%7D%0A%0A%20%20async%20getAsyncItems()%20%7B%0A%20%20%20%20return%20%5B...Array(10).keys()%5D.map((it)%20%3D%3E%20%60Action%20%24%7Bit%7D%60)%3B%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A%3Ahost%20%7B%0A%20%20display%3A%20flex%3B%0A%20%20flex-flow%3A%20row%20nowrap%3B%0A%20%20justify-content%3A%20space-between%3B%0A%7D%0A`,
        htmlSource: `%3Cnovo-dropdown%3E%0A%20%20%3Cnovo-button%20theme%3D%22secondary%22%20icon%3D%22collapse%22%3EActions%3C%2Fnovo-button%3E%0A%20%20%3Cnovo-optgroup%20label%3D%22Engage%22%3E%0A%20%20%20%20%3Cnovo-option%20(click)%3D%22clickMe('Hello!')%22%3ESend%20Email%3C%2Fnovo-option%3E%0A%20%20%20%20%3Cnovo-option%20(click)%3D%22clickMe('Another!')%22%3ESend%20SMS%3C%2Fnovo-option%3E%0A%20%20%20%20%3Cnovo-option%20tooltip%3D%22Test%20tooltip%20%3A)%22%0A%20%20%20%20%20%20tooltipPosition%3D%22right%22%0A%20%20%20%20%20%20(click)%3D%22clickMe()%22%0A%20%20%20%20%20%20disabled%3EAdvertise%20Shifts%3C%2Fnovo-option%3E%0A%20%20%3C%2Fnovo-optgroup%3E%0A%20%20%3Cnovo-optgroup%20label%3D%22Manage%22%3E%0A%20%20%20%20%3Cnovo-option%20(click)%3D%22clickMe('Hello!')%22%3EFind%20Matching%20Jobs%3C%2Fnovo-option%3E%0A%20%20%20%20%3Cnovo-option%20(click)%3D%22clickMe('Another!')%22%3EUpdate%20Record%3C%2Fnovo-option%3E%0A%20%20%20%20%3Cnovo-option%20tooltip%3D%22Test%20tooltip%20%3A)%22%0A%20%20%20%20%20%20tooltipPosition%3D%22right%22%0A%20%20%20%20%20%20(click)%3D%22clickMe()%22%0A%20%20%20%20%20%20disabled%3EDelete%20Record%3C%2Fnovo-option%3E%0A%20%20%3C%2Fnovo-optgroup%3E%0A%3C%2Fnovo-dropdown%3E%0A%0A%3Cnovo-dropdown%20side%3D%22right%22%3E%0A%20%20%3Cnovo-button%20theme%3D%22icon%22%20icon%3D%22menu%22%3E%3C%2Fnovo-button%3E%0A%20%20%3Cnovo-optgroup%3E%0A%20%20%20%20%3Cnovo-option%20*ngFor%3D%22let%20action%20of%20asyncItems%22%20(click)%3D%22clickMe(action)%22%3E%7B%7Baction%7D%7D%3C%2Fnovo-option%3E%0A%20%20%20%20%3Cnovo-divider%3E%3C%2Fnovo-divider%3E%0A%20%20%20%20%3Cnovo-option%3EMenu%20Item%20With%20Lots%20of%20Text%20in%20it%20to%20Show%20Dynamic%20Width%3C%2Fnovo-option%3E%0A%20%20%3C%2Fnovo-optgroup%3E%0A%3C%2Fnovo-dropdown%3E`
    },
    'configure-columns-modal': {
        title: 'Configure Columns Modal Example',
        component: ConfigureColumnsModal,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0Aimport%20%7B%20IDataTableColumn%2C%20NovoModalParams%2C%20NovoModalRef%20%7D%20from%20'novo-elements'%3B%0Aimport%20%7B%20MockData%20%7D%20from%20'.%2Fmock-data'%3B%0A%0A%2F**%0A%20*%20%40title%20Configure%20Columns%20Modal%20Example%0A%20*%2F%0A%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'configure-columns-modal-example'%2C%0A%20%20%20%20template%3A%20%60%0A%20%20%20%20%3Cnovo-modal%3E%0A%20%20%20%20%20%20%3Cheader%20title%3D%22Configure%20Columns%22%20theme%3D%22contact%22%3E%0A%20%20%20%20%20%20%20%20%3Cutils%3E%0A%20%20%20%20%20%20%20%20%20%20%3Cutil-action%20icon%3D%22times%22%20(click)%3D%22close()%22%3E%3C%2Futil-action%3E%0A%20%20%20%20%20%20%20%20%3C%2Futils%3E%0A%20%20%20%20%20%20%3C%2Fheader%3E%0A%20%20%20%20%20%20%3Csection%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-list%20direction%3D%22vertical%22%3E%0A%20%20%20%20%20%20%20%20%20%20%3Cnovo-list-item%20*ngFor%3D%22let%20column%20of%20columns%22%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%3Citem-header%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Citem-title%3E%7B%7B%20column.id%20%7D%7D%3C%2Fitem-title%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Citem-header-end%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Cnovo-checkbox%20%5B(ngModel)%5D%3D%22column.enabled%22%3E%3C%2Fnovo-checkbox%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3C%2Fitem-header-end%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%3C%2Fitem-header%3E%0A%20%20%20%20%20%20%20%20%20%20%3C%2Fnovo-list-item%3E%0A%20%20%20%20%20%20%20%20%3C%2Fnovo-list%3E%0A%20%20%20%20%20%20%3C%2Fsection%3E%0A%20%20%20%20%20%20%3Cbutton%20theme%3D%22standard%22%20(click)%3D%22close()%22%3ECancel%3C%2Fbutton%3E%0A%20%20%20%20%20%20%3Cbutton%20theme%3D%22primary%22%20color%3D%22success%22%20icon%3D%22check%22%20(click)%3D%22save()%22%3ESave%3C%2Fbutton%3E%0A%20%20%20%20%3C%2Fnovo-modal%3E%0A%20%20%60%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20ConfigureColumnsModal%20%7B%0A%20%20public%20columns%3A%20IDataTableColumn%3CMockData%3E%3B%0A%0A%20%20constructor(private%20modalRef%3A%20NovoModalRef%2C%20private%20params%3A%20NovoModalParams)%20%7B%0A%20%20%20%20this.columns%20%3D%20(params%20as%20any).columns%3B%0A%20%20%7D%0A%0A%20%20public%20close()%3A%20void%20%7B%0A%20%20%20%20this.modalRef.close()%3B%0A%20%20%7D%0A%0A%20%20public%20save()%20%7B%0A%20%20%20%20this.modalRef.close(this.columns)%3B%0A%20%20%7D%0A%7D%0A`,
        cssSource: ``,
        htmlSource: ``
    },
    'data-table-service': {
        title: 'Data Table Service Example',
        component: DataTableServiceExample,
        tsSource: `import%20%7B%20ChangeDetectionStrategy%2C%20ChangeDetectorRef%2C%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0Aimport%20*%20as%20dateFns%20from%20'date-fns'%3B%0Aimport%20%7B%0A%20%20IDataTableColumn%2C%0A%20%20IDataTablePaginationOptions%2C%0A%20%20IDataTablePreferences%2C%0A%20%20IDataTableSearchOptions%2C%0A%20%20IDataTableService%2C%0A%20%20NovoModalService%2C%0A%20%20StaticDataTableService%2C%0A%7D%20from%20'novo-elements'%3B%0Aimport%20%7B%20Subject%20%7D%20from%20'rxjs'%3B%0Aimport%20%7B%20ConfigureColumnsModal%2C%20MockData%20%7D%20from%20'..%2Fextras'%3B%0A%0A%2F**%0A%20*%20%40title%20Data%20Table%20Service%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'data-table-service-example'%2C%0A%20%20%20%20templateUrl%3A%20'data-table-service-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'data-table-service-example.css'%5D%2C%0A%20%20%20%20changeDetection%3A%20ChangeDetectionStrategy.OnPush%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20DataTableServiceExample%20%7B%0A%20%20%2F%2F%20Table%20configuration%0A%20%20public%20dataSetOptions%3A%20any%5B%5D%20%3D%20%5B%0A%20%20%20%20%7B%20label%3A%20'Dataset%20%231'%2C%20value%3A%201%20%7D%2C%0A%20%20%20%20%7B%20label%3A%20'Dataset%20%232'%2C%20value%3A%202%20%7D%2C%0A%20%20%20%20%7B%20label%3A%20'Dataset%20%233'%2C%20value%3A%203%20%7D%2C%0A%20%20%5D%3B%0A%20%20public%20loadedDataSet%3A%20number%20%3D%201%3B%0A%20%20public%20paginationTypeOptions%3A%20any%5B%5D%20%3D%20%5B%0A%20%20%20%20%7B%20label%3A%20'Standard'%2C%20value%3A%20'standard'%20%7D%2C%0A%20%20%20%20%7B%20label%3A%20'Basic'%2C%20value%3A%20'basic'%20%7D%2C%0A%20%20%5D%3B%0A%20%20public%20loadedPaginationType%3A%20string%20%3D%20'standard'%3B%0A%20%20public%20paginationPlacementOptions%3A%20any%5B%5D%20%3D%20%5B%0A%20%20%20%20%7B%20label%3A%20'Top'%2C%20value%3A%20false%20%7D%2C%0A%20%20%20%20%7B%20label%3A%20'Bottom'%2C%20value%3A%20true%20%7D%2C%0A%20%20%5D%3B%0A%20%20public%20loadedPaginationPlacement%3A%20boolean%20%3D%20false%3B%0A%20%20public%20globalSearchOptions%3A%20any%5B%5D%20%3D%20%5B%0A%20%20%20%20%7B%20label%3A%20'Show'%2C%20value%3A%20true%20%7D%2C%0A%20%20%20%20%7B%20label%3A%20'Hide'%2C%20value%3A%20false%20%7D%2C%0A%20%20%5D%3B%0A%20%20public%20loadedGlobalSearch%3A%20boolean%20%3D%20false%3B%0A%0A%20%20%2F%2F%20Shared%20configuration%0A%20%20public%20sharedColumns%3A%20IDataTableColumn%3CMockData%3E%5B%5D%20%3D%20%5B%0A%20%20%20%20%7B%0A%20%20%20%20%20%20id%3A%20'preview'%2C%0A%20%20%20%20%20%20type%3A%20'action'%2C%0A%20%20%20%20%20%20enabled%3A%20true%2C%0A%20%20%20%20%20%20handlers%3A%20%7B%0A%20%20%20%20%20%20%20%20click%3A%20this.log.bind(this)%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20action%3A%20%7B%0A%20%20%20%20%20%20%20%20icon%3A%20'preview'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20id%3A%20'actions'%2C%0A%20%20%20%20%20%20type%3A%20'action'%2C%0A%20%20%20%20%20%20label%3A%20'Actions'%2C%0A%20%20%20%20%20%20enabled%3A%20true%2C%0A%20%20%20%20%20%20action%3A%20%7B%0A%20%20%20%20%20%20%20%20options%3A%20%5B%0A%20%20%20%20%20%20%20%20%20%20%7B%20label%3A%20'Action%201'%2C%20handlers%3A%20%7B%20click%3A%20this.log.bind(this)%20%7D%20%7D%2C%0A%20%20%20%20%20%20%20%20%20%20%7B%20label%3A%20'Action%202'%2C%20handlers%3A%20%7B%20click%3A%20this.log.bind(this)%20%7D%2C%20disabled%3A%20true%20%7D%2C%0A%20%20%20%20%20%20%20%20%20%20%7B%20label%3A%20'Action%203'%2C%20handlers%3A%20%7B%20click%3A%20this.log.bind(this)%20%7D%2C%20disabledFunc%3A%20this.checkDisabled.bind(this)%20%7D%2C%0A%20%20%20%20%20%20%20%20%5D%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20id%3A%20'id'%2C%0A%20%20%20%20%20%20label%3A%20'ID'%2C%0A%20%20%20%20%20%20enabled%3A%20true%2C%0A%20%20%20%20%20%20type%3A%20'text'%2C%0A%20%20%20%20%20%20filterable%3A%20%7B%0A%20%20%20%20%20%20%20%20type%3A%20'number'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20sortable%3A%20true%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20id%3A%20'telephone'%2C%0A%20%20%20%20%20%20label%3A%20'Phone'%2C%0A%20%20%20%20%20%20type%3A%20'link%3Atel'%2C%0A%20%20%20%20%20%20attributes%3A%20%7B%0A%20%20%20%20%20%20%20%20target%3A%20'_blank'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20id%3A%20'email'%2C%0A%20%20%20%20%20%20label%3A%20'Email'%2C%0A%20%20%20%20%20%20type%3A%20'link%3Amailto'%2C%0A%20%20%20%20%20%20attributes%3A%20%7B%0A%20%20%20%20%20%20%20%20target%3A%20'_blank'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20id%3A%20'address'%2C%0A%20%20%20%20%20%20label%3A%20'Address'%2C%0A%20%20%20%20%20%20type%3A%20'text'%2C%0A%20%20%20%20%20%20format%3A%20%5B'%24city%2C%20%24state'%2C%20'%24city'%2C%20'%24state'%5D%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20id%3A%20'embeddedObj'%2C%0A%20%20%20%20%20%20label%3A%20'Embedded%20(hard)'%2C%0A%20%20%20%20%20%20enabled%3A%20true%2C%0A%20%20%20%20%20%20format%3A%20%5B'%24another.id'%2C%20'%24firstName%20%24lastName'%5D%2C%0A%20%20%20%20%20%20type%3A%20'link'%2C%0A%20%20%20%20%20%20handlers%3A%20%7B%0A%20%20%20%20%20%20%20%20click%3A%20this.log.bind(this)%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20filterable%3A%20true%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20id%3A%20'simpleEmbeddedObj'%2C%0A%20%20%20%20%20%20label%3A%20'Embedded%20(simple)'%2C%0A%20%20%20%20%20%20enabled%3A%20true%2C%0A%20%20%20%20%20%20format%3A%20'%24id'%2C%0A%20%20%20%20%20%20type%3A%20'text'%2C%0A%20%20%20%20%20%20filterable%3A%20true%2C%0A%20%20%20%20%20%20sortable%3A%20true%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20id%3A%20'date'%2C%0A%20%20%20%20%20%20label%3A%20'Date'%2C%0A%20%20%20%20%20%20enabled%3A%20true%2C%0A%20%20%20%20%20%20type%3A%20'date'%2C%0A%20%20%20%20%20%20filterable%3A%20%7B%0A%20%20%20%20%20%20%20%20type%3A%20'date'%2C%0A%20%20%20%20%20%20%20%20allowCustomRange%3A%20true%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20sortable%3A%20true%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20id%3A%20'dateTime'%2C%0A%20%20%20%20%20%20label%3A%20'DateTime'%2C%0A%20%20%20%20%20%20enabled%3A%20false%2C%0A%20%20%20%20%20%20type%3A%20'datetime'%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20id%3A%20'time'%2C%0A%20%20%20%20%20%20label%3A%20'Time'%2C%0A%20%20%20%20%20%20enabled%3A%20false%2C%0A%20%20%20%20%20%20type%3A%20'time'%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20id%3A%20'money'%2C%0A%20%20%20%20%20%20label%3A%20'Money'%2C%0A%20%20%20%20%20%20enabled%3A%20false%2C%0A%20%20%20%20%20%20type%3A%20'currency'%2C%0A%20%20%20%20%20%20filterable%3A%20true%2C%0A%20%20%20%20%20%20sortable%3A%20true%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20id%3A%20'percent'%2C%0A%20%20%20%20%20%20label%3A%20'Percent'%2C%0A%20%20%20%20%20%20enabled%3A%20true%2C%0A%20%20%20%20%20%20type%3A%20'percent'%2C%0A%20%20%20%20%20%20filterable%3A%20true%2C%0A%20%20%20%20%20%20sortable%3A%20true%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20id%3A%20'name'%2C%0A%20%20%20%20%20%20label%3A%20'Name'%2C%0A%20%20%20%20%20%20labelIcon%3A%20'bull'%2C%0A%20%20%20%20%20%20enabled%3A%20true%2C%0A%20%20%20%20%20%20type%3A%20'text'%2C%0A%20%20%20%20%20%20template%3A%20'custom'%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20id%3A%20'status'%2C%0A%20%20%20%20%20%20label%3A%20'Status'%2C%0A%20%20%20%20%20%20enabled%3A%20true%2C%0A%20%20%20%20%20%20type%3A%20'text'%2C%0A%20%20%20%20%20%20filterable%3A%20true%2C%0A%20%20%20%20%20%20sortable%3A%20true%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20id%3A%20'priority'%2C%0A%20%20%20%20%20%20label%3A%20'Priority'%2C%0A%20%20%20%20%20%20enabled%3A%20true%2C%0A%20%20%20%20%20%20type%3A%20'text'%2C%0A%20%20%20%20%20%20filterable%3A%20%7B%0A%20%20%20%20%20%20%20%20type%3A%20'multi-select'%2C%0A%20%20%20%20%20%20%20%20options%3A%20this.getPriorityOptions()%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20sortable%3A%20true%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20id%3A%20'enabled'%2C%0A%20%20%20%20%20%20label%3A%20'Enabled'%2C%0A%20%20%20%20%20%20enabled%3A%20true%2C%0A%20%20%20%20%20%20type%3A%20'text'%2C%0A%20%20%20%20%20%20sortable%3A%20true%2C%0A%20%20%20%20%20%20filterable%3A%20%7B%0A%20%20%20%20%20%20%20%20type%3A%20'select'%2C%0A%20%20%20%20%20%20%20%20options%3A%20%5B%0A%20%20%20%20%20%20%20%20%20%20%7B%20value%3A%20true%2C%20label%3A%20'True'%20%7D%2C%0A%20%20%20%20%20%20%20%20%20%20%7B%20value%3A%20false%2C%20label%3A%20'False'%20%7D%2C%0A%20%20%20%20%20%20%20%20%5D%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20id%3A%20'edit'%2C%0A%20%20%20%20%20%20type%3A%20'action'%2C%0A%20%20%20%20%20%20enabled%3A%20true%2C%0A%20%20%20%20%20%20disabled%3A%20true%2C%0A%20%20%20%20%20%20handlers%3A%20%7B%0A%20%20%20%20%20%20%20%20click%3A%20this.log.bind(this)%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20action%3A%20%7B%0A%20%20%20%20%20%20%20%20icon%3A%20'edit'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%7D%2C%0A%20%20%5D%3B%0A%20%20public%20sharedDisplayColumns%20%3D%20%5B%0A%20%20%20%20'selection'%2C%0A%20%20%20%20'expand'%2C%0A%20%20%20%20'preview'%2C%0A%20%20%20%20'actions'%2C%0A%20%20%20%20'id'%2C%0A%20%20%20%20'date'%2C%0A%20%20%20%20'name'%2C%0A%20%20%20%20'telephone'%2C%0A%20%20%20%20'email'%2C%0A%20%20%20%20'simpleEmbeddedObj'%2C%0A%20%20%20%20'status'%2C%0A%20%20%20%20'priority'%2C%0A%20%20%20%20'percent'%2C%0A%20%20%20%20'embeddedObj'%2C%0A%20%20%20%20'edit'%2C%0A%20%20%5D%3B%0A%20%20public%20sharedPaginationOptions%3A%20IDataTablePaginationOptions%20%3D%20%7B%0A%20%20%20%20theme%3A%20'standard'%2C%0A%20%20%20%20pageSize%3A%2010%2C%0A%20%20%20%20pageSizeOptions%3A%20%5B10%2C%2050%2C%20100%2C%20250%2C%20500%5D%2C%0A%20%20%7D%3B%0A%20%20public%20widePaginationOptions%3A%20IDataTablePaginationOptions%20%3D%20%7B%0A%20%20%20%20theme%3A%20'basic-wide'%2C%0A%20%20%20%20pageSize%3A%2010%2C%0A%20%20%20%20pageSizeOptions%3A%20%5B10%2C%2050%2C%20100%2C%20250%2C%20500%5D%2C%0A%20%20%7D%3B%0A%20%20public%20sharedSearchOptions%3A%20IDataTableSearchOptions%20%3D%20%7B%0A%20%20%20%20placeholder%3A%20'Search%20for%20things...'%2C%0A%20%20%20%20tooltip%3A%20'HELLO'%2C%0A%20%20%7D%3B%0A%20%20public%20sharedDefaultSort%3A%20%7B%20id%3A%20string%3B%20value%3A%20string%20%7D%20%3D%20%7B%0A%20%20%20%20id%3A%20'id'%2C%0A%20%20%20%20value%3A%20'asc'%2C%0A%20%20%7D%3B%0A%20%20public%20globalSearchEnabled%3A%20boolean%20%3D%20false%3B%0A%20%20public%20refreshSubject%3A%20Subject%3Cvoid%3E%20%3D%20new%20Subject()%3B%0A%0A%20%20%2F%2F%20Basic%20configuration%0A%20%20public%20basicService%3A%20IDataTableService%3CMockData%3E%3B%0A%0A%20%20private%20staticDataSet1%3A%20MockData%5B%5D%20%3D%20%5B%5D%3B%0A%20%20private%20staticDataSet2%3A%20MockData%5B%5D%20%3D%20%5B%5D%3B%0A%20%20private%20staticDataSet3%3A%20MockData%5B%5D%20%3D%20%5B%5D%3B%0A%0A%20%20constructor(private%20ref%3A%20ChangeDetectorRef%2C%20private%20modalService%3A%20NovoModalService)%20%7B%0A%20%20%20%20for%20(let%20i%20%3D%200%3B%20i%20%3C%201000%3B%20i%2B%2B)%20%7B%0A%20%20%20%20%20%20const%20day%20%3D%20i%20%3C%20500%20%3F%20dateFns.subDays(new%20Date()%2C%20i)%20%3A%20dateFns.addDays(new%20Date()%2C%20i%20-%20500)%3B%0A%20%20%20%20%20%20this.staticDataSet1.push(%7B%0A%20%20%20%20%20%20%20%20id%3A%20i%2C%0A%20%20%20%20%20%20%20%20embeddedObj%3A%20%7B%20id%3A%20i%2C%20test%3A%20%60HMM%20%24%7Bi%7D%60%2C%20another%3A%20%7B%20id%3A%20777%20%7D%20%7D%2C%0A%20%20%20%20%20%20%20%20simpleEmbeddedObj%3A%20%7B%20id%3A%20i%20%7D%2C%0A%20%20%20%20%20%20%20%20name%3A%20%60(1)%20Name%20%24%7Bi%7D%60%2C%0A%20%20%20%20%20%20%20%20status%3A%20%60(1)%20Status%20%24%7Bi%7D%60%2C%0A%20%20%20%20%20%20%20%20priority%3A%20this.getPriority()%2C%0A%20%20%20%20%20%20%20%20enabled%3A%20i%20%25%202%20%3D%3D%3D%200%2C%0A%20%20%20%20%20%20%20%20date%3A%20day%2C%0A%20%20%20%20%20%20%20%20dateTime%3A%20day%2C%0A%20%20%20%20%20%20%20%20time%3A%20day%2C%0A%20%20%20%20%20%20%20%20money%3A%20i%20%2B%2010%2C%0A%20%20%20%20%20%20%20%20percent%3A%20i%20%2F%20100%2C%0A%20%20%20%20%20%20%20%20telephone%3A%20'555-555-5555'%2C%0A%20%20%20%20%20%20%20%20email%3A%20'test%40google.com'%2C%0A%20%20%20%20%20%20%20%20address%3A%20%7B%20city%3A%20'City'%2C%20state%3A%20null%20%7D%2C%0A%20%20%20%20%20%20%7D)%3B%0A%20%20%20%20%20%20this.staticDataSet2.push(%7B%0A%20%20%20%20%20%20%20%20id%3A%20i%20%2B%201001%2C%0A%20%20%20%20%20%20%20%20embeddedObj%3A%20%7B%20id%3A%20i%2C%20test%3A%20%60HMM%20%24%7Bi%7D%60%2C%20another%3A%20%7B%20id%3A%20777%20%7D%20%7D%2C%0A%20%20%20%20%20%20%20%20simpleEmbeddedObj%3A%20%7B%20id%3A%20i%20%7D%2C%0A%20%20%20%20%20%20%20%20name%3A%20%60(2)%20Name%20%24%7Bi%7D%60%2C%0A%20%20%20%20%20%20%20%20status%3A%20%60(2)%20Status%20%24%7Bi%7D%60%2C%0A%20%20%20%20%20%20%20%20priority%3A%20this.getPriority()%2C%0A%20%20%20%20%20%20%20%20enabled%3A%20i%20%25%202%20%3D%3D%3D%200%2C%0A%20%20%20%20%20%20%20%20date%3A%20day%2C%0A%20%20%20%20%20%20%20%20dateTime%3A%20day%2C%0A%20%20%20%20%20%20%20%20time%3A%20day%2C%0A%20%20%20%20%20%20%20%20money%3A%20i%20%2B%2010%2C%0A%20%20%20%20%20%20%20%20percent%3A%20i%20%2F%20100%2C%0A%20%20%20%20%20%20%20%20telephone%3A%20'555-555-5555'%2C%0A%20%20%20%20%20%20%20%20email%3A%20'test%40google.com'%2C%0A%20%20%20%20%20%20%20%20address%3A%20%7B%20city%3A%20'City'%2C%20state%3A%20'State'%20%7D%2C%0A%20%20%20%20%20%20%7D)%3B%0A%20%20%20%20%7D%0A%20%20%20%20this.basicService%20%3D%20new%20StaticDataTableService(%5B...this.staticDataSet1%5D)%3B%0A%20%20%7D%0A%0A%20%20public%20getPriority()%3A%20string%20%7B%0A%20%20%20%20const%20x%20%3D%20Math.round(Math.random()%20*%2050)%3B%0A%20%20%20%20return%20'test%20'%20%2B%20x.toString()%3B%0A%20%20%7D%0A%0A%20%20public%20getPriorityOptions()%20%7B%0A%20%20%20%20const%20options%20%3D%20new%20Array()%3B%0A%20%20%20%20let%20i%3B%0A%20%20%20%20for%20(i%20%3D%200%3B%20i%20%3C%2049%3B%20i%2B%2B)%20%7B%0A%20%20%20%20%20%20options.push('test%20'%20%2B%20i.toString())%3B%0A%20%20%20%20%7D%0A%20%20%20%20return%20options%3B%0A%20%20%7D%0A%20%20public%20switchPaginationType(type%3A%20'basic'%20%7C%20'standard')%20%7B%0A%20%20%20%20this.sharedPaginationOptions%20%3D%20Object.assign(%7B%7D%2C%20this.sharedPaginationOptions%2C%20%7B%20theme%3A%20type%20%7D)%3B%0A%20%20%20%20this.ref.detectChanges()%3B%0A%20%20%7D%0A%0A%20%20public%20switchPaginationPlacement(onFooter%3A%20boolean)%20%7B%0A%20%20%20%20this.sharedPaginationOptions%20%3D%20Object.assign(%7B%7D%2C%20this.sharedPaginationOptions%2C%20%7B%20onFooter%20%7D)%3B%0A%20%20%20%20this.ref.detectChanges()%3B%0A%20%20%7D%0A%0A%20%20public%20loadDataset(setIndex%3A%20number)%20%7B%0A%20%20%20%20switch%20(setIndex)%20%7B%0A%20%20%20%20%20%20case%201%3A%0A%20%20%20%20%20%20%20%20this.basicService%20%3D%20new%20StaticDataTableService(%5B...this.staticDataSet1%5D)%3B%0A%20%20%20%20%20%20%20%20break%3B%0A%20%20%20%20%20%20case%202%3A%0A%20%20%20%20%20%20%20%20this.basicService%20%3D%20new%20StaticDataTableService(%5B...this.staticDataSet2%5D)%3B%0A%20%20%20%20%20%20%20%20break%3B%0A%20%20%20%20%20%20case%203%3A%0A%20%20%20%20%20%20%20%20this.basicService%20%3D%20new%20StaticDataTableService(%5B...this.staticDataSet3%5D)%3B%0A%20%20%20%20%20%20%20%20break%3B%0A%20%20%20%20%20%20default%3A%0A%20%20%20%20%20%20%20%20break%3B%0A%20%20%20%20%7D%0A%20%20%7D%0A%0A%20%20public%20toggleGlobalSearch(toggle%3A%20boolean)%3A%20void%20%7B%0A%20%20%20%20this.globalSearchEnabled%20%3D%20toggle%3B%0A%20%20%20%20this.ref.detectChanges()%3B%0A%20%20%7D%0A%0A%20%20public%20log(event%3A%20%7B%20originalEvent%3A%20MouseEvent%3B%20row%3A%20MockData%20%7D)%3A%20void%20%7B%0A%20%20%20%20console.log('%5BDataTable%5D%20Event%20Triggered!'%2C%20event)%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%7D%0A%0A%20%20public%20checkDisabled()%3A%20boolean%20%7B%0A%20%20%20%20return%20true%3B%0A%20%20%7D%0A%0A%20%20public%20configureColumns()%3A%20void%20%7B%0A%20%20%20%20this.modalService%0A%20%20%20%20%20%20.open(ConfigureColumnsModal%2C%20%7B%20columns%3A%20this.sharedColumns%20%7D)%0A%20%20%20%20%20%20.onClosed.then((columns%3A%20IDataTableColumn%3CMockData%3E%5B%5D)%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20if%20(columns)%20%7B%0A%20%20%20%20%20%20%20%20%20%20const%20enabledColumns%20%3D%20columns.filter((column%3A%20IDataTableColumn%3CMockData%3E)%20%3D%3E%20column.enabled)%3B%0A%20%20%20%20%20%20%20%20%20%20this.sharedDisplayColumns%20%3D%20%5B'selection'%2C%20'expand'%2C%20...enabledColumns.map((column%3A%20IDataTableColumn%3CMockData%3E)%20%3D%3E%20column.id)%5D%3B%0A%20%20%20%20%20%20%20%20%20%20this.ref.markForCheck()%3B%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%7D)%3B%0A%20%20%7D%0A%0A%20%20public%20onPreferencesChanged(event%3A%20IDataTablePreferences)%3A%20void%20%7B%0A%20%20%20%20console.log('Preferences%20changed%20(persist%20manually)%3A'%2C%20event)%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%7D%0A%0A%20%20public%20refresh()%3A%20void%20%7B%0A%20%20%20%20this.refreshSubject.next()%3B%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%3Ahost%20%7B%0A%20%20min-height%3A%20400px%3B%0A%7D%0A`,
        htmlSource: `%3Cnovo-data-table%20%5BdataTableService%5D%3D%22basicService%22%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%5Bcolumns%5D%3D%22sharedColumns%22%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%5BallowMultipleFilters%5D%3D%22true%22%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%5BhideGlobalSearch%5D%3D%22!globalSearchEnabled%22%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%5BdisplayedColumns%5D%3D%22sharedDisplayColumns%22%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%5BpaginationOptions%5D%3D%22sharedPaginationOptions%22%3E%0A%20%20%3C!--%20Custom%20Cell%20--%20passed%20with%20template%20property%20on%20Column%20--%3E%0A%20%20%3Cng-template%20novoTemplate%3D%22custom%22%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20let-row%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20let-col%3D%22col%22%3E%0A%20%20%20%20%3Cb%3ECUSTOM%3C%2Fb%3E%26nbsp%3B%20%7B%7B%20row.name%20%7D%7D%0A%20%20%3C%2Fng-template%3E%0A%3C%2Fnovo-data-table%3E%0A`
    },
    'data-table-rows': {
        title: 'Rows Data Table Example',
        component: DataTableRowsExample,
        tsSource: `import%20%7B%20AfterViewInit%2C%20ChangeDetectionStrategy%2C%20ChangeDetectorRef%2C%20Component%2C%20ViewChild%20%7D%20from%20'%40angular%2Fcore'%3B%0Aimport%20*%20as%20dateFns%20from%20'date-fns'%3B%0Aimport%20%7B%0A%20%20IDataTableColumn%2C%0A%20%20IDataTablePaginationOptions%2C%0A%20%20IDataTablePreferences%2C%0A%20%20IDataTableSearchOptions%2C%0A%20%20IDataTableSelectionOption%2C%0A%20%20NovoDataTable%2C%0A%20%20NovoModalService%2C%0A%7D%20from%20'novo-elements'%3B%0Aimport%20%7B%20Subject%20%7D%20from%20'rxjs'%3B%0Aimport%20%7B%20ConfigureColumnsModal%2C%20MockData%20%7D%20from%20'..%2Fextras'%3B%0A%0A%2F**%0A%20*%20%40title%20Rows%20Data%20Table%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'data-table-rows-example'%2C%0A%20%20%20%20templateUrl%3A%20'data-table-rows-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'data-table-rows-example.css'%5D%2C%0A%20%20%20%20changeDetection%3A%20ChangeDetectionStrategy.OnPush%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20DataTableRowsExample%20implements%20AfterViewInit%20%7B%0A%20%20%40ViewChild('basic')%0A%20%20table%3A%20NovoDataTable%3CMockData%3E%3B%0A%0A%20%20ngAfterViewInit()%20%7B%0A%20%20%20%20this.table.cellHeaders.get(2).setWidth(120)%3B%0A%20%20%7D%0A%0A%20%20%2F%2F%20Table%20configuration%0A%20%20public%20dataSetOptions%3A%20any%5B%5D%20%3D%20%5B%0A%20%20%20%20%7B%20label%3A%20'Dataset%20%231'%2C%20value%3A%201%20%7D%2C%0A%20%20%20%20%7B%20label%3A%20'Dataset%20%232'%2C%20value%3A%202%20%7D%2C%0A%20%20%20%20%7B%20label%3A%20'Dataset%20%233'%2C%20value%3A%203%20%7D%2C%0A%20%20%5D%3B%0A%20%20public%20loadedDataSet%3A%20number%20%3D%201%3B%0A%20%20public%20paginationTypeOptions%3A%20any%5B%5D%20%3D%20%5B%0A%20%20%20%20%7B%20label%3A%20'Standard'%2C%20value%3A%20'standard'%20%7D%2C%0A%20%20%20%20%7B%20label%3A%20'Basic'%2C%20value%3A%20'basic'%20%7D%2C%0A%20%20%5D%3B%0A%20%20public%20paginationPlacementOptions%3A%20any%5B%5D%20%3D%20%5B%0A%20%20%20%20%7B%20label%3A%20'Top'%2C%20value%3A%20false%20%7D%2C%0A%20%20%20%20%7B%20label%3A%20'Bottom'%2C%20value%3A%20true%20%7D%2C%0A%20%20%5D%3B%0A%20%20public%20loadedPaginationPlacement%3A%20boolean%20%3D%20false%3B%0A%20%20public%20selectionOptions%3A%20IDataTableSelectionOption%5B%5D%20%3D%20%5B%5D%3B%0A%20%20public%20loadedPaginationType%3A%20string%20%3D%20'standard'%3B%0A%20%20public%20globalSearchOptions%3A%20any%5B%5D%20%3D%20%5B%0A%20%20%20%20%7B%20label%3A%20'Show'%2C%20value%3A%20true%20%7D%2C%0A%20%20%20%20%7B%20label%3A%20'Hide'%2C%20value%3A%20false%20%7D%2C%0A%20%20%5D%3B%0A%20%20public%20loadedGlobalSearch%3A%20boolean%20%3D%20false%3B%0A%20%20public%20customStatusColumnValue%3A%20string%20%3D%20''%3B%0A%20%20public%20customStatusColumnOptions%3A%20object%5B%5D%20%3D%20%5B%0A%20%20%20%20%7B%0A%20%20%20%20%20%20label%3A%20'Has%20A%205%20in%20status'%2C%0A%20%20%20%20%20%20value%3A%20'5'%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20label%3A%20'All'%2C%0A%20%20%20%20%20%20value%3A%20''%2C%0A%20%20%20%20%7D%2C%0A%20%20%5D%3B%0A%20%20public%20retentionEnabled%3A%20boolean%20%3D%20false%3B%0A%0A%20%20%2F%2F%20Shared%20configuration%0A%20%20public%20sharedColumns%3A%20IDataTableColumn%3CMockData%3E%5B%5D%20%3D%20%5B%0A%20%20%20%20%7B%0A%20%20%20%20%20%20id%3A%20'preview'%2C%0A%20%20%20%20%20%20type%3A%20'action'%2C%0A%20%20%20%20%20%20enabled%3A%20true%2C%0A%20%20%20%20%20%20handlers%3A%20%7B%0A%20%20%20%20%20%20%20%20click%3A%20this.preview.bind(this)%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20action%3A%20%7B%0A%20%20%20%20%20%20%20%20icon%3A%20'preview'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20id%3A%20'actions'%2C%0A%20%20%20%20%20%20type%3A%20'action'%2C%0A%20%20%20%20%20%20label%3A%20'Actions'%2C%0A%20%20%20%20%20%20enabled%3A%20true%2C%0A%20%20%20%20%20%20action%3A%20%7B%0A%20%20%20%20%20%20%20%20options%3A%20%5B%0A%20%20%20%20%20%20%20%20%20%20%7B%20label%3A%20'Action%201'%2C%20handlers%3A%20%7B%20click%3A%20this.log.bind(this)%20%7D%20%7D%2C%0A%20%20%20%20%20%20%20%20%20%20%7B%20label%3A%20'Action%202'%2C%20handlers%3A%20%7B%20click%3A%20this.log.bind(this)%20%7D%2C%20disabled%3A%20true%20%7D%2C%0A%20%20%20%20%20%20%20%20%20%20%7B%20label%3A%20'Action%203'%2C%20handlers%3A%20%7B%20click%3A%20this.log.bind(this)%20%7D%2C%20disabledFunc%3A%20this.checkDisabled.bind(this)%20%7D%2C%0A%20%20%20%20%20%20%20%20%5D%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20id%3A%20'id'%2C%0A%20%20%20%20%20%20label%3A%20'ID'%2C%0A%20%20%20%20%20%20enabled%3A%20true%2C%0A%20%20%20%20%20%20type%3A%20'text'%2C%0A%20%20%20%20%20%20filterable%3A%20%7B%0A%20%20%20%20%20%20%20%20type%3A%20'number'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20sortable%3A%20true%2C%0A%20%20%20%20%20%20resizable%3A%20true%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20id%3A%20'telephone'%2C%0A%20%20%20%20%20%20label%3A%20'Phone'%2C%0A%20%20%20%20%20%20type%3A%20'link%3Atel'%2C%0A%20%20%20%20%20%20resizable%3A%20true%2C%0A%20%20%20%20%20%20attributes%3A%20%7B%0A%20%20%20%20%20%20%20%20target%3A%20'_blank'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20id%3A%20'email'%2C%0A%20%20%20%20%20%20label%3A%20'Email'%2C%0A%20%20%20%20%20%20type%3A%20'link%3Amailto'%2C%0A%20%20%20%20%20%20attributes%3A%20%7B%0A%20%20%20%20%20%20%20%20target%3A%20'_blank'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20resizable%3A%20true%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20id%3A%20'address'%2C%0A%20%20%20%20%20%20label%3A%20'Address'%2C%0A%20%20%20%20%20%20type%3A%20'text'%2C%0A%20%20%20%20%20%20format%3A%20%5B'%24city%2C%20%24state'%2C%20'%24city'%2C%20'%24state'%5D%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20id%3A%20'embeddedObj'%2C%0A%20%20%20%20%20%20label%3A%20'Embedded%20(hard)'%2C%0A%20%20%20%20%20%20enabled%3A%20true%2C%0A%20%20%20%20%20%20format%3A%20%5B'%24another.id'%2C%20'%24firstName%20%24lastName'%5D%2C%0A%20%20%20%20%20%20type%3A%20'link'%2C%0A%20%20%20%20%20%20handlers%3A%20%7B%0A%20%20%20%20%20%20%20%20click%3A%20this.log.bind(this)%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20filterable%3A%20true%2C%0A%20%20%20%20%20%20resizable%3A%20true%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20id%3A%20'simpleEmbeddedObj'%2C%0A%20%20%20%20%20%20label%3A%20'Embedded%20(simple)'%2C%0A%20%20%20%20%20%20enabled%3A%20true%2C%0A%20%20%20%20%20%20format%3A%20'%24id'%2C%0A%20%20%20%20%20%20type%3A%20'text'%2C%0A%20%20%20%20%20%20filterable%3A%20true%2C%0A%20%20%20%20%20%20sortable%3A%20true%2C%0A%20%20%20%20%20%20resizable%3A%20true%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20id%3A%20'date'%2C%0A%20%20%20%20%20%20label%3A%20'Date'%2C%0A%20%20%20%20%20%20enabled%3A%20true%2C%0A%20%20%20%20%20%20type%3A%20'date'%2C%0A%20%20%20%20%20%20filterable%3A%20%7B%0A%20%20%20%20%20%20%20%20type%3A%20'date'%2C%0A%20%20%20%20%20%20%20%20allowCustomRange%3A%20true%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20sortable%3A%20true%2C%0A%20%20%20%20%20%20format%3A%20'%24year-%24month-%24day%20%24hour%3A%24minute'%2C%0A%20%20%20%20%20%20resizable%3A%20true%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20id%3A%20'dateTime'%2C%0A%20%20%20%20%20%20label%3A%20'DateTime'%2C%0A%20%20%20%20%20%20enabled%3A%20false%2C%0A%20%20%20%20%20%20type%3A%20'datetime'%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20id%3A%20'time'%2C%0A%20%20%20%20%20%20label%3A%20'Time'%2C%0A%20%20%20%20%20%20enabled%3A%20false%2C%0A%20%20%20%20%20%20type%3A%20'time'%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20id%3A%20'money'%2C%0A%20%20%20%20%20%20label%3A%20'Money'%2C%0A%20%20%20%20%20%20enabled%3A%20false%2C%0A%20%20%20%20%20%20type%3A%20'currency'%2C%0A%20%20%20%20%20%20filterable%3A%20true%2C%0A%20%20%20%20%20%20sortable%3A%20true%2C%0A%20%20%20%20%20%20resizable%3A%20true%2C%0A%20%20%20%20%20%20rightAlignCellContent%3A%20true%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20id%3A%20'percent'%2C%0A%20%20%20%20%20%20label%3A%20'Percent'%2C%0A%20%20%20%20%20%20enabled%3A%20true%2C%0A%20%20%20%20%20%20type%3A%20'percent'%2C%0A%20%20%20%20%20%20filterable%3A%20true%2C%0A%20%20%20%20%20%20sortable%3A%20true%2C%0A%20%20%20%20%20%20resizable%3A%20true%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20id%3A%20'bigdecimal'%2C%0A%20%20%20%20%20%20label%3A%20'BigDecimal'%2C%0A%20%20%20%20%20%20enabled%3A%20true%2C%0A%20%20%20%20%20%20type%3A%20'bigdecimal'%2C%0A%20%20%20%20%20%20filterable%3A%20true%2C%0A%20%20%20%20%20%20sortable%3A%20true%2C%0A%20%20%20%20%20%20resizable%3A%20true%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20id%3A%20'name'%2C%0A%20%20%20%20%20%20label%3A%20'Name'%2C%0A%20%20%20%20%20%20labelIcon%3A%20'bull'%2C%0A%20%20%20%20%20%20enabled%3A%20true%2C%0A%20%20%20%20%20%20type%3A%20'text'%2C%0A%20%20%20%20%20%20template%3A%20'custom'%2C%0A%20%20%20%20%20%20resizable%3A%20true%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20id%3A%20'status'%2C%0A%20%20%20%20%20%20label%3A%20'Status'%2C%0A%20%20%20%20%20%20enabled%3A%20true%2C%0A%20%20%20%20%20%20type%3A%20'text'%2C%0A%20%20%20%20%20%20filterable%3A%20%7B%20type%3A%20'custom'%20%7D%2C%0A%20%20%20%20%20%20sortable%3A%20true%2C%0A%20%20%20%20%20%20resizable%3A%20true%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20id%3A%20'favoriteColor'%2C%0A%20%20%20%20%20%20label%3A%20'Favorite%20Color'%2C%0A%20%20%20%20%20%20enabled%3A%20true%2C%0A%20%20%20%20%20%20type%3A%20'text'%2C%0A%20%20%20%20%20%20filterable%3A%20%7B%20type%3A%20'custom'%20%7D%2C%0A%20%20%20%20%20%20sortable%3A%20true%2C%0A%20%20%20%20%20%20resizable%3A%20true%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20id%3A%20'priority'%2C%0A%20%20%20%20%20%20label%3A%20'Priority'%2C%0A%20%20%20%20%20%20enabled%3A%20true%2C%0A%20%20%20%20%20%20type%3A%20'text'%2C%0A%20%20%20%20%20%20filterable%3A%20%7B%0A%20%20%20%20%20%20%20%20type%3A%20'multi-select'%2C%0A%20%20%20%20%20%20%20%20options%3A%20this.getPriorityOptions()%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20sortable%3A%20true%2C%0A%20%20%20%20%20%20resizable%3A%20true%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20id%3A%20'enabled'%2C%0A%20%20%20%20%20%20label%3A%20'Enabled'%2C%0A%20%20%20%20%20%20enabled%3A%20true%2C%0A%20%20%20%20%20%20type%3A%20'text'%2C%0A%20%20%20%20%20%20sortable%3A%20true%2C%0A%20%20%20%20%20%20resizable%3A%20true%2C%0A%20%20%20%20%20%20filterable%3A%20%7B%0A%20%20%20%20%20%20%20%20type%3A%20'select'%2C%0A%20%20%20%20%20%20%20%20options%3A%20%5B%0A%20%20%20%20%20%20%20%20%20%20%7B%20value%3A%20true%2C%20label%3A%20'True'%20%7D%2C%0A%20%20%20%20%20%20%20%20%20%20%7B%20value%3A%20false%2C%20label%3A%20'False'%20%7D%2C%0A%20%20%20%20%20%20%20%20%5D%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20id%3A%20'edit'%2C%0A%20%20%20%20%20%20type%3A%20'action'%2C%0A%20%20%20%20%20%20enabled%3A%20true%2C%0A%20%20%20%20%20%20disabled%3A%20true%2C%0A%20%20%20%20%20%20handlers%3A%20%7B%0A%20%20%20%20%20%20%20%20click%3A%20this.log.bind(this)%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20action%3A%20%7B%0A%20%20%20%20%20%20%20%20icon%3A%20'edit'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%7D%2C%0A%20%20%5D%3B%0A%20%20public%20sharedDisplayColumns%20%3D%20%5B%0A%20%20%20%20'selection'%2C%0A%20%20%20%20'expand'%2C%0A%20%20%20%20'preview'%2C%0A%20%20%20%20'actions'%2C%0A%20%20%20%20'id'%2C%0A%20%20%20%20'date'%2C%0A%20%20%20%20'name'%2C%0A%20%20%20%20'telephone'%2C%0A%20%20%20%20'email'%2C%0A%20%20%20%20'simpleEmbeddedObj'%2C%0A%20%20%20%20'status'%2C%0A%20%20%20%20'favoriteColor'%2C%0A%20%20%20%20'priority'%2C%0A%20%20%20%20'percent'%2C%0A%20%20%20%20'bigdecimal'%2C%0A%20%20%20%20'embeddedObj'%2C%0A%20%20%20%20'edit'%2C%0A%20%20%20%20'enabled'%2C%0A%20%20%5D%3B%0A%20%20public%20sharedPaginationOptions%3A%20IDataTablePaginationOptions%20%3D%20%7B%0A%20%20%20%20theme%3A%20'standard'%2C%0A%20%20%20%20pageSize%3A%2010%2C%0A%20%20%20%20pageSizeOptions%3A%20%5B10%2C%2050%2C%20100%2C%20250%2C%20500%5D%2C%0A%20%20%7D%3B%0A%20%20public%20widePaginationOptions%3A%20IDataTablePaginationOptions%20%3D%20%7B%0A%20%20%20%20theme%3A%20'basic-wide'%2C%0A%20%20%20%20pageSize%3A%2010%2C%0A%20%20%20%20pageSizeOptions%3A%20%5B10%2C%2050%2C%20100%2C%20250%2C%20500%5D%2C%0A%20%20%7D%3B%0A%20%20public%20sharedSearchOptions%3A%20IDataTableSearchOptions%20%3D%20%7B%0A%20%20%20%20placeholder%3A%20'Search%20for%20things...'%2C%0A%20%20%20%20tooltip%3A%20'HELLO'%2C%0A%20%20%7D%3B%0A%20%20public%20sharedDefaultSort%3A%20%7B%20id%3A%20string%3B%20value%3A%20string%20%7D%20%3D%20%7B%0A%20%20%20%20id%3A%20'id'%2C%0A%20%20%20%20value%3A%20'asc'%2C%0A%20%20%7D%3B%0A%20%20public%20globalSearchEnabled%3A%20boolean%20%3D%20false%3B%0A%20%20public%20refreshSubject%3A%20Subject%3Cvoid%3E%20%3D%20new%20Subject()%3B%0A%0A%20%20%2F%2F%20Basic%20configuration%0A%20%20public%20basicRows%3A%20MockData%5B%5D%3B%0A%0A%20%20private%20staticDataSet1%3A%20MockData%5B%5D%20%3D%20%5B%5D%3B%0A%20%20private%20staticDataSet2%3A%20MockData%5B%5D%20%3D%20%5B%5D%3B%0A%20%20private%20staticDataSet3%3A%20MockData%5B%5D%20%3D%20%5B%5D%3B%0A%0A%20%20public%20selectedRecordId%3A%20string%20%3D%20''%3B%0A%0A%20%20constructor(private%20ref%3A%20ChangeDetectorRef%2C%20private%20modalService%3A%20NovoModalService)%20%7B%0A%20%20%20%20for%20(let%20i%20%3D%200%3B%20i%20%3C%201000%3B%20i%2B%2B)%20%7B%0A%20%20%20%20%20%20const%20day%20%3D%20i%20%3C%20500%20%3F%20dateFns.subDays(new%20Date()%2C%20i)%20%3A%20dateFns.addDays(new%20Date()%2C%20i%20-%20500)%3B%0A%20%20%20%20%20%20this.staticDataSet1.push(%7B%0A%20%20%20%20%20%20%20%20id%3A%20i%2C%0A%20%20%20%20%20%20%20%20embeddedObj%3A%20%7B%20id%3A%20i%2C%20test%3A%20%60HMM%20%24%7Bi%7D%60%2C%20another%3A%20%7B%20id%3A%20777%20%7D%20%7D%2C%0A%20%20%20%20%20%20%20%20simpleEmbeddedObj%3A%20%7B%20id%3A%20i%20%7D%2C%0A%20%20%20%20%20%20%20%20name%3A%20%60(1)%20Name%20%24%7Bi%7D%60%2C%0A%20%20%20%20%20%20%20%20status%3A%20%60(1)%20Status%20%24%7Bi%7D%60%2C%0A%20%20%20%20%20%20%20%20priority%3A%20this.getPriority()%2C%0A%20%20%20%20%20%20%20%20enabled%3A%20i%20%25%202%20%3D%3D%3D%200%2C%0A%20%20%20%20%20%20%20%20date%3A%20day%2C%0A%20%20%20%20%20%20%20%20dateTime%3A%20day%2C%0A%20%20%20%20%20%20%20%20time%3A%20day%2C%0A%20%20%20%20%20%20%20%20money%3A%20i%20%2B%2010%2C%0A%20%20%20%20%20%20%20%20percent%3A%20i%20%2F%20100%2C%0A%20%20%20%20%20%20%20%20telephone%3A%20'555-555-5555'%2C%0A%20%20%20%20%20%20%20%20email%3A%20'test%40google.com'%2C%0A%20%20%20%20%20%20%20%20address%3A%20%7B%20city%3A%20'City'%2C%20state%3A%20null%20%7D%2C%0A%20%20%20%20%20%20%20%20bigdecimal%3A%203.25%20*%20(i%20%2B%201)%20*%20(i%20%25%205%20%3D%3D%3D%201%20%3F%20-1%20%3A%201)%2C%0A%20%20%20%20%20%20%20%20favoriteColor%3A%20'blue'%2C%0A%20%20%20%20%20%20%7D)%3B%0A%20%20%20%20%20%20this.staticDataSet2.push(%7B%0A%20%20%20%20%20%20%20%20id%3A%20i%20%2B%201001%2C%0A%20%20%20%20%20%20%20%20embeddedObj%3A%20%7B%20id%3A%20i%2C%20test%3A%20%60HMM%20%24%7Bi%7D%60%2C%20another%3A%20%7B%20id%3A%20777%20%7D%20%7D%2C%0A%20%20%20%20%20%20%20%20simpleEmbeddedObj%3A%20%7B%20id%3A%20i%20%7D%2C%0A%20%20%20%20%20%20%20%20name%3A%20%60(2)%20Name%20%24%7Bi%7D%60%2C%0A%20%20%20%20%20%20%20%20status%3A%20%60(2)%20Status%20%24%7Bi%7D%60%2C%0A%20%20%20%20%20%20%20%20priority%3A%20this.getPriority()%2C%0A%20%20%20%20%20%20%20%20enabled%3A%20i%20%25%202%20%3D%3D%3D%200%2C%0A%20%20%20%20%20%20%20%20date%3A%20day%2C%0A%20%20%20%20%20%20%20%20dateTime%3A%20day%2C%0A%20%20%20%20%20%20%20%20time%3A%20day%2C%0A%20%20%20%20%20%20%20%20money%3A%20i%20%2B%2010%2C%0A%20%20%20%20%20%20%20%20percent%3A%20i%20%2F%20100%2C%0A%20%20%20%20%20%20%20%20telephone%3A%20'555-555-5555'%2C%0A%20%20%20%20%20%20%20%20email%3A%20'test%40google.com'%2C%0A%20%20%20%20%20%20%20%20address%3A%20%7B%20city%3A%20'City'%2C%20state%3A%20'State'%20%7D%2C%0A%20%20%20%20%20%20%20%20bigdecimal%3A%20-75%2C%0A%20%20%20%20%20%20%20%20favoriteColor%3A%20'white'%2C%0A%20%20%20%20%20%20%7D)%3B%0A%20%20%20%20%7D%0A%20%20%20%20this.basicRows%20%3D%20%5B...this.staticDataSet1%5D%3B%0A%20%20%7D%0A%0A%20%20public%20getPriority()%3A%20string%20%7B%0A%20%20%20%20const%20x%20%3D%20Math.round(Math.random()%20*%2050)%3B%0A%20%20%20%20return%20'test%20'%20%2B%20x.toString()%3B%0A%20%20%7D%0A%0A%20%20public%20getPriorityOptions()%20%7B%0A%20%20%20%20const%20options%20%3D%20new%20Array()%3B%0A%20%20%20%20let%20i%3B%0A%20%20%20%20for%20(i%20%3D%200%3B%20i%20%3C%2049%3B%20i%2B%2B)%20%7B%0A%20%20%20%20%20%20options.push('test%20'%20%2B%20i.toString())%3B%0A%20%20%20%20%7D%0A%20%20%20%20return%20options%3B%0A%20%20%7D%0A%0A%20%20public%20switchPaginationType(type%3A%20'basic'%20%7C%20'standard')%20%7B%0A%20%20%20%20this.sharedPaginationOptions%20%3D%20Object.assign(%7B%7D%2C%20this.sharedPaginationOptions%2C%20%7B%20theme%3A%20type%20%7D)%3B%0A%20%20%20%20this.ref.detectChanges()%3B%0A%20%20%7D%0A%0A%20%20public%20switchPaginationPlacement(onFooter%3A%20boolean)%20%7B%0A%20%20%20%20this.sharedPaginationOptions%20%3D%20Object.assign(%7B%7D%2C%20this.sharedPaginationOptions%2C%20%7B%20onFooter%20%7D)%3B%0A%20%20%20%20this.ref.detectChanges()%3B%0A%20%20%7D%0A%0A%20%20public%20loadDataset(setIndex%3A%20number)%20%7B%0A%20%20%20%20switch%20(setIndex)%20%7B%0A%20%20%20%20%20%20case%201%3A%0A%20%20%20%20%20%20%20%20this.basicRows%20%3D%20%5B...this.staticDataSet1%5D%3B%0A%20%20%20%20%20%20%20%20break%3B%0A%20%20%20%20%20%20case%202%3A%0A%20%20%20%20%20%20%20%20this.basicRows%20%3D%20%5B...this.staticDataSet2%5D%3B%0A%20%20%20%20%20%20%20%20break%3B%0A%20%20%20%20%20%20case%203%3A%0A%20%20%20%20%20%20%20%20this.basicRows%20%3D%20%5B...this.staticDataSet3%5D%3B%0A%20%20%20%20%20%20%20%20break%3B%0A%20%20%20%20%20%20default%3A%0A%20%20%20%20%20%20%20%20break%3B%0A%20%20%20%20%7D%0A%20%20%7D%0A%0A%20%20public%20toggleGlobalSearch(toggle%3A%20boolean)%3A%20void%20%7B%0A%20%20%20%20this.globalSearchEnabled%20%3D%20toggle%3B%0A%20%20%20%20this.ref.detectChanges()%3B%0A%20%20%7D%0A%0A%20%20public%20log(event%3A%20%7B%20originalEvent%3A%20MouseEvent%3B%20row%3A%20MockData%20%7D)%3A%20void%20%7B%0A%20%20%20%20console.log('%5BDataTable%5D%20Event%20Triggered!'%2C%20event)%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%7D%0A%0A%20%20public%20preview(event%3A%20%7B%20originalEvent%3A%20MouseEvent%3B%20row%3A%20MockData%20%7D)%3A%20void%20%7B%0A%20%20%20%20this.selectedRecordId%20%3D%20event.row.id.toString()%3B%0A%20%20%20%20this.log(event)%3B%0A%20%20%7D%0A%0A%20%20public%20checkDisabled()%3A%20boolean%20%7B%0A%20%20%20%20return%20true%3B%0A%20%20%7D%0A%0A%20%20public%20configureColumns()%3A%20void%20%7B%0A%20%20%20%20this.modalService%0A%20%20%20%20%20%20.open(ConfigureColumnsModal%2C%20%7B%20columns%3A%20this.sharedColumns%20%7D)%0A%20%20%20%20%20%20.onClosed.then((columns%3A%20IDataTableColumn%3CMockData%3E%5B%5D)%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20if%20(columns)%20%7B%0A%20%20%20%20%20%20%20%20%20%20const%20enabledColumns%20%3D%20columns.filter((column%3A%20IDataTableColumn%3CMockData%3E)%20%3D%3E%20column.enabled)%3B%0A%20%20%20%20%20%20%20%20%20%20this.sharedDisplayColumns%20%3D%20%5B'selection'%2C%20'expand'%2C%20...enabledColumns.map((column%3A%20IDataTableColumn%3CMockData%3E)%20%3D%3E%20column.id)%5D%3B%0A%20%20%20%20%20%20%20%20%20%20this.ref.markForCheck()%3B%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%7D)%3B%0A%20%20%7D%0A%0A%20%20public%20onPreferencesChanged(event%3A%20IDataTablePreferences)%3A%20void%20%7B%0A%20%20%20%20console.log('Preferences%20changed%20(persist%20manually)%3A'%2C%20event)%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%7D%0A%0A%20%20public%20resized(event)%3A%20void%20%7B%0A%20%20%20%20console.log('Column%20Width%20changed%20(persist%20manually)%3A%20'%2C%20event)%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%7D%0A%0A%20%20public%20refresh()%3A%20void%20%7B%0A%20%20%20%20this.table.state.reset()%3B%0A%20%20%20%20this.refreshSubject.next()%3B%0A%20%20%7D%0A%0A%20%20public%20toggleRowDetails(expand%3A%20boolean)%3A%20void%20%7B%0A%20%20%20%20this.table.expandRows(expand)%3B%0A%20%20%7D%0A%0A%20%20public%20filterList(value%3A%20any%2C%20field%20%3D%20'status')%3A%20void%20%7B%0A%20%20%20%20this.table.state.filter%20%3D%20%7B%20id%3A%20field%2C%20type%3A%20'text'%2C%20value%20%7D%3B%0A%20%20%20%20this.table.state.updates.next(%7B%0A%20%20%20%20%20%20globalSearch%3A%20this.table.state.globalSearch%2C%0A%20%20%20%20%20%20filter%3A%20this.table.state.filter%2C%0A%20%20%20%20%20%20sort%3A%20this.table.state.sort%2C%0A%20%20%20%20%7D)%3B%0A%20%20%20%20this.ref.markForCheck()%3B%0A%20%20%7D%0A%0A%20%20public%20processCustomFilter(columnName%3A%20string)%20%7B%0A%20%20%20%20if%20(columnName%20%3D%3D%3D%20'favoriteColor')%20%7B%0A%20%20%20%20%20%20const%20colorFilter%20%3D%20prompt('Favorite%20Color%20has%20been%20configured%20with%20a%20custom%20filter%20but%20no%20template.%20The%20table%20emitted%20a%20(toggledFilter)%20event%20which%20lets%20this%20function%20handle%20it%20as%20desired.%5CnEnter%20a%20favorite%20color%3A')%3B%0A%20%20%20%20%20%20this.filterList(colorFilter%2C%20'favoriteColor')%3B%0A%20%20%20%20%7D%0A%20%20%7D%0A%0A%20%20public%20toggle(event)%20%7B%0A%20%20%20%20if%20(event)%20%7B%0A%20%20%20%20%20%20this.selectionOptions%20%3D%20%5B%7B%20label%3A%20'page'%20%7D%5D%3B%0A%20%20%20%20%7D%20else%20%7B%0A%20%20%20%20%20%20this.selectionOptions%20%3D%20%5B%5D%3B%0A%20%20%20%20%7D%0A%20%20%20%20this.table.state.selectionOptions%20%3D%20this.selectionOptions%3B%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A.fixedWindowSize%20%7B%0A%20%20height%3A%20450px%3B%0A%7D%0A%0Anovo-data-table%20%7B%0A%20%20height%3A%20100%25%3B%0A%7D%0A%0A.custom-header-buttons%20%7B%0A%20%20display%3A%20flex%3B%0A%20%20align-items%3A%20center%3B%0A%7D%0A%0A.custom-header-buttons%20%3E%20*%20%7B%0A%20%20margin-right%3A%20.2rem%3B%0A%7D%0A%0A`,
        htmlSource: `%3Ch6%3EChange%20Dataset%3C%2Fh6%3E%0A%3Cnovo-tiles%20%5Boptions%5D%3D%22dataSetOptions%22%20(onChange)%3D%22loadDataset(%24event)%22%20%5B(ngModel)%5D%3D%22loadedDataSet%22%3E%3C%2Fnovo-tiles%3E%0A%3Ch6%3EChange%20Pagination%20Style%3C%2Fh6%3E%0A%3Cnovo-tiles%20%5Boptions%5D%3D%22paginationTypeOptions%22%20(onChange)%3D%22switchPaginationType(%24event)%22%0A%20%20%5B(ngModel)%5D%3D%22loadedPaginationType%22%3E%3C%2Fnovo-tiles%3E%0A%3Ch6%3EChange%20Pagination%20Placement%3C%2Fh6%3E%0A%3Cnovo-tiles%20%5Boptions%5D%3D%22paginationPlacementOptions%22%20(onChange)%3D%22switchPaginationPlacement(%24event)%22%0A%20%20%5B(ngModel)%5D%3D%22loadedPaginationPlacement%22%3E%3C%2Fnovo-tiles%3E%0A%3Ch6%3EToggle%20Global%20Search%3C%2Fh6%3E%0A%3Cnovo-tiles%20%5Boptions%5D%3D%22globalSearchOptions%22%20(onChange)%3D%22toggleGlobalSearch(%24event)%22%20%5B(ngModel)%5D%3D%22loadedGlobalSearch%22%3E%0A%3C%2Fnovo-tiles%3E%0A%3Ch6%3EConfigure%20Columns%3C%2Fh6%3E%0A%3Cbutton%20theme%3D%22primary%22%20(click)%3D%22configureColumns()%22%3EConfigure%20Columns%3C%2Fbutton%3E%0A%3Ch6%3EConfigure%20Columns%3C%2Fh6%3E%0A%3Cbutton%20theme%3D%22primary%22%20(click)%3D%22toggleRowDetails(true)%22%3EShow%20Row%20Details%20(first%20table)%3C%2Fbutton%3E%0A%3Cbutton%20theme%3D%22primary%22%20(click)%3D%22toggleRowDetails(false)%22%3EHide%20Row%20Details%20(first%20table)%3C%2Fbutton%3E%0A%3Ch6%3EEnable%20Selection%20Retention%3C%2Fh6%3E%0A%3Cnovo-checkbox%20label%3D%22Paginated%20Selection%20Retention%20Enabled%22%20%5B(ngModel)%5D%3D%22retentionEnabled%22%0A%20%20(ngModelChange)%3D%22toggle(%24event)%22%3E%3C%2Fnovo-checkbox%3E%0ASelection%20retention%20can%20be%20configured%20to%20keep%20records%20selected%20across%20pagination%2C%20sorting%2C%20and%20filtering%0A%0A%3Cdiv%20class%3D%22fixedWindowSize%22%3E%0A%20%20%3Cnovo-data-table%20%5Brows%5D%3D%22basicRows%22%0A%20%20%20%20%5Bcolumns%5D%3D%22sharedColumns%22%0A%20%20%20%20%5BallowMultipleFilters%5D%3D%22true%22%0A%20%20%20%20%5BhideGlobalSearch%5D%3D%22!globalSearchEnabled%22%0A%20%20%20%20%5BdisplayedColumns%5D%3D%22sharedDisplayColumns%22%0A%20%20%20%20%5BpaginationOptions%5D%3D%22sharedPaginationOptions%22%0A%20%20%20%20%5BselectionOptions%5D%3D%22selectionOptions%22%0A%20%20%20%20name%3D%22demo-basic-rows%22%0A%20%20%20%20%5BrefreshSubject%5D%3D%22refreshSubject%22%0A%20%20%20%20(preferencesChanged)%3D%22onPreferencesChanged(%24event)%22%0A%20%20%20%20(resized)%3D%22resized(%24event)%22%0A%20%20%20%20(toggledFilter)%3D%22processCustomFilter(%24event)%22%0A%20%20%20%20%5BactiveRowIdentifier%5D%3D%22selectedRecordId%22%0A%20%20%20%20%5BfixedHeader%5D%3D%22true%22%0A%20%20%20%20%23basic%3E%0A%20%20%20%20%3C!--%20Custom%20Header%20--%3E%0A%20%20%20%20%3Cng-template%20novoTemplate%3D%22customHeader%22%3E%0A%20%20%20%20%20%20%3Cdiv%20class%3D%22custom-header-buttons%22%3E%0A%20%20%20%20%20%20%20%20%3Cbutton%20theme%3D%22secondary%22%0A%20%20%20%20%20%20%20%20(click)%3D%22configureColumns()%22%3EConfig%3C%2Fbutton%3E%0A%20%20%20%20%20%20%20%20%3Cspan%3ETotal%3A%20%7B%7B%20basic.dataSource.currentTotal%20%7D%7D%3C%2Fspan%3E%0A%20%20%20%20%20%20%3C%2Fdiv%3E%0A%20%20%20%20%3C%2Fng-template%3E%0A%20%20%20%20%3C!--%20Custom%20Actions%20--%3E%0A%20%20%20%20%3Cng-template%20novoTemplate%3D%22customActions%22%3E%0A%20%20%20%20%20%20%3Cnovo-data-table-clear-button%20*ngIf%3D%22basic.state.userFiltered%22%3E%3C%2Fnovo-data-table-clear-button%3E%0A%20%20%20%20%20%20%3Cbutton%20theme%3D%22secondary%22%0A%20%20%20%20%20%20%20%20(click)%3D%22refresh()%22%3ERefresh%3C%2Fbutton%3E%0A%20%20%20%20%20%20%3Cnovo-dropdown%20side%3D%22right%22%3E%0A%20%20%20%20%20%20%20%20%3Cbutton%20theme%3D%22primary%22%0A%20%20%20%20%20%20%20%20%20%20icon%3D%22collapse%22%0A%20%20%20%20%20%20%20%20%20%20inverse%3E%0A%20%20%20%20%20%20%20%20%20%20%3Cspan%20*ngIf%3D%22basic.state.selected.length%20%3D%3D%3D%200%22%3EActions%3C%2Fspan%3E%0A%20%20%20%20%20%20%20%20%20%20%3Cspan%20*ngIf%3D%22basic.state.selected.length%20!%3D%3D%200%22%3E%7B%7B%20basic.state.selected.length%20%7D%7D!%3C%2Fspan%3E%0A%20%20%20%20%20%20%20%20%3C%2Fbutton%3E%0A%20%20%20%20%20%20%20%20%3Clist%3E%0A%20%20%20%20%20%20%20%20%20%20%3Citem%3EAction%201%3C%2Fitem%3E%0A%20%20%20%20%20%20%20%20%20%20%3Citem%3EAction%202%3C%2Fitem%3E%0A%20%20%20%20%20%20%20%20%20%20%3Citem%20%5Bdisabled%5D%3D%22basic.state.selected.length%20%3D%3D%3D%200%22%3EAction%203%3C%2Fitem%3E%0A%20%20%20%20%20%20%20%20%3C%2Flist%3E%0A%20%20%20%20%20%20%3C%2Fnovo-dropdown%3E%0A%20%20%20%20%3C%2Fng-template%3E%0A%20%20%20%20%3C!--%20Custom%20Empty%20Message%20--%3E%0A%20%20%20%20%3Cng-template%20novoTemplate%3D%22emptyMessage%22%3EYo!%20No%20Records!%3C%2Fng-template%3E%0A%20%20%20%20%3C!--%20Custom%20No%20Results%20Message%20--%3E%0A%20%20%20%20%3Cng-template%20novoTemplate%3D%22noResultsMessage%22%3EYo!%20That%20search%20is%20really%20complex%2C%20no%20data%20matches%20that!%3C%2Fng-template%3E%0A%20%20%20%20%3C!--%20Custom%20Cell%20for%20ID%20Column%20--%3E%0A%20%20%20%20%3Cng-template%20novoTemplate%3D%22id%22%0A%20%20%20%20%20%20let-row%0A%20%20%20%20%20%20let-col%3D%22col%22%3E%0A%20%20%20%20%20%20%3Ci%20class%3D%22bhi-bull%22%3E%3C%2Fi%3E%20%7B%7B%20row.id%20%7D%7D%0A%20%20%20%20%3C%2Fng-template%3E%0A%20%20%20%20%3C!--%20Custom%20Cell%20--%20passed%20with%20template%20property%20on%20Column%20--%3E%0A%20%20%20%20%3Cng-template%20novoTemplate%3D%22custom%22%0A%20%20%20%20%20%20let-row%0A%20%20%20%20%20%20let-col%3D%22col%22%3E%0A%20%20%20%20%20%20%3Cb%3ECUSTOM%3C%2Fb%3E%26nbsp%3B%20%7B%7B%20row.name%20%7D%7D%0A%20%20%20%20%3C%2Fng-template%3E%0A%20%20%20%20%3C!--%20Row%20Details%20Template%20--%3E%0A%20%20%20%20%3Cng-template%20novoTemplate%3D%22expandedRow%22%0A%20%20%20%20%20%20let-row%3E%0A%20%20%20%20%20%20Why%20look%20at%20that%2C%20you%20clicked%20the%20details!%0A%20%20%20%20%3C%2Fng-template%3E%0A%20%20%20%20%3C!--%20Custom%20Status%20Filter%20--%3E%0A%20%20%20%20%3Cng-template%20novoTemplate%3D%22column-filter-status%22%3E%0A%20%20%20%20%20%20%3Cnovo-tiles%20%5Boptions%5D%3D%22customStatusColumnOptions%22%20(onChange)%3D%22filterList(%24event)%22%20padding%3D%22md%22%0A%20%20%20%20%20%20%20%20%5B(ngModel)%5D%3D%22customStatusColumnValue%22%3E%3C%2Fnovo-tiles%3E%0A%20%20%20%20%3C%2Fng-template%3E%0A%20%20%3C%2Fnovo-data-table%3E%0A%3C%2Fdiv%3E`
    },
    'data-table-remote': {
        title: 'Remote Data Table Example',
        component: DataTableRemoteExample,
        tsSource: `import%20%7B%20ChangeDetectionStrategy%2C%20ChangeDetectorRef%2C%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0Aimport%20*%20as%20dateFns%20from%20'date-fns'%3B%0Aimport%20%7B%0A%20%20Helpers%2C%0A%20%20IDataTableColumn%2C%0A%20%20IDataTableFilter%2C%0A%20%20IDataTablePaginationOptions%2C%0A%20%20IDataTablePreferences%2C%0A%20%20IDataTableSearchOptions%2C%0A%20%20NovoModalService%2C%0A%20%20RemoteDataTableService%2C%0A%7D%20from%20'novo-elements'%3B%0Aimport%20%7B%20Observable%2C%20of%2C%20Subject%20%7D%20from%20'rxjs'%3B%0Aimport%20%7B%20delay%20%7D%20from%20'rxjs%2Foperators'%3B%0Aimport%20%7B%20ConfigureColumnsModal%2C%20MockData%20%7D%20from%20'..%2Fextras'%3B%0A%0A%2F**%0A%20*%20%40title%20Remote%20Data%20Table%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'data-table-remote-example'%2C%0A%20%20%20%20templateUrl%3A%20'data-table-remote-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'data-table-remote-example.css'%5D%2C%0A%20%20%20%20changeDetection%3A%20ChangeDetectionStrategy.OnPush%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20DataTableRemoteExample%20%7B%0A%20%20%2F%2F%20Table%20configuration%0A%20%20public%20dataSetOptions%3A%20any%5B%5D%20%3D%20%5B%0A%20%20%20%20%7B%20label%3A%20'Dataset%20%231'%2C%20value%3A%201%20%7D%2C%0A%20%20%20%20%7B%20label%3A%20'Dataset%20%232'%2C%20value%3A%202%20%7D%2C%0A%20%20%20%20%7B%20label%3A%20'Dataset%20%233'%2C%20value%3A%203%20%7D%2C%0A%20%20%5D%3B%0A%20%20public%20loadedDataSet%3A%20number%20%3D%201%3B%0A%20%20public%20paginationTypeOptions%3A%20any%5B%5D%20%3D%20%5B%0A%20%20%20%20%7B%20label%3A%20'Standard'%2C%20value%3A%20'standard'%20%7D%2C%0A%20%20%20%20%7B%20label%3A%20'Basic'%2C%20value%3A%20'basic'%20%7D%2C%0A%20%20%5D%3B%0A%20%20public%20loadedPaginationType%3A%20string%20%3D%20'standard'%3B%0A%20%20public%20paginationPlacementOptions%3A%20any%5B%5D%20%3D%20%5B%0A%20%20%20%20%7B%20label%3A%20'Top'%2C%20value%3A%20false%20%7D%2C%0A%20%20%20%20%7B%20label%3A%20'Bottom'%2C%20value%3A%20true%20%7D%2C%0A%20%20%5D%3B%0A%20%20public%20loadedPaginationPlacement%3A%20boolean%20%3D%20false%3B%0A%20%20public%20globalSearchOptions%3A%20any%5B%5D%20%3D%20%5B%0A%20%20%20%20%7B%20label%3A%20'Show'%2C%20value%3A%20true%20%7D%2C%0A%20%20%20%20%7B%20label%3A%20'Hide'%2C%20value%3A%20false%20%7D%2C%0A%20%20%5D%3B%0A%20%20public%20loadedGlobalSearch%3A%20boolean%20%3D%20false%3B%0A%0A%20%20%2F%2F%20Shared%20configuration%0A%20%20public%20sharedColumns%3A%20IDataTableColumn%3CMockData%3E%5B%5D%20%3D%20%5B%0A%20%20%20%20%7B%0A%20%20%20%20%20%20id%3A%20'preview'%2C%0A%20%20%20%20%20%20type%3A%20'action'%2C%0A%20%20%20%20%20%20enabled%3A%20true%2C%0A%20%20%20%20%20%20handlers%3A%20%7B%0A%20%20%20%20%20%20%20%20click%3A%20this.log.bind(this)%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20action%3A%20%7B%0A%20%20%20%20%20%20%20%20icon%3A%20'preview'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20id%3A%20'actions'%2C%0A%20%20%20%20%20%20type%3A%20'action'%2C%0A%20%20%20%20%20%20label%3A%20'Actions'%2C%0A%20%20%20%20%20%20enabled%3A%20true%2C%0A%20%20%20%20%20%20action%3A%20%7B%0A%20%20%20%20%20%20%20%20options%3A%20%5B%0A%20%20%20%20%20%20%20%20%20%20%7B%20label%3A%20'Action%201'%2C%20handlers%3A%20%7B%20click%3A%20this.log.bind(this)%20%7D%20%7D%2C%0A%20%20%20%20%20%20%20%20%20%20%7B%20label%3A%20'Action%202'%2C%20handlers%3A%20%7B%20click%3A%20this.log.bind(this)%20%7D%2C%20disabled%3A%20true%20%7D%2C%0A%20%20%20%20%20%20%20%20%20%20%7B%20label%3A%20'Action%203'%2C%20handlers%3A%20%7B%20click%3A%20this.log.bind(this)%20%7D%2C%20disabledFunc%3A%20this.checkDisabled.bind(this)%20%7D%2C%0A%20%20%20%20%20%20%20%20%5D%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20id%3A%20'id'%2C%0A%20%20%20%20%20%20label%3A%20'ID'%2C%0A%20%20%20%20%20%20enabled%3A%20true%2C%0A%20%20%20%20%20%20type%3A%20'text'%2C%0A%20%20%20%20%20%20filterable%3A%20%7B%0A%20%20%20%20%20%20%20%20type%3A%20'number'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20sortable%3A%20true%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20id%3A%20'telephone'%2C%0A%20%20%20%20%20%20label%3A%20'Phone'%2C%0A%20%20%20%20%20%20type%3A%20'link%3Atel'%2C%0A%20%20%20%20%20%20attributes%3A%20%7B%0A%20%20%20%20%20%20%20%20target%3A%20'_blank'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20id%3A%20'email'%2C%0A%20%20%20%20%20%20label%3A%20'Email'%2C%0A%20%20%20%20%20%20type%3A%20'link%3Amailto'%2C%0A%20%20%20%20%20%20attributes%3A%20%7B%0A%20%20%20%20%20%20%20%20target%3A%20'_blank'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20id%3A%20'address'%2C%0A%20%20%20%20%20%20label%3A%20'Address'%2C%0A%20%20%20%20%20%20type%3A%20'text'%2C%0A%20%20%20%20%20%20format%3A%20%5B'%24city%2C%20%24state'%2C%20'%24city'%2C%20'%24state'%5D%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20id%3A%20'embeddedObj'%2C%0A%20%20%20%20%20%20label%3A%20'Embedded%20(hard)'%2C%0A%20%20%20%20%20%20enabled%3A%20true%2C%0A%20%20%20%20%20%20format%3A%20%5B'%24another.id'%2C%20'%24firstName%20%24lastName'%5D%2C%0A%20%20%20%20%20%20type%3A%20'link'%2C%0A%20%20%20%20%20%20handlers%3A%20%7B%0A%20%20%20%20%20%20%20%20click%3A%20this.log.bind(this)%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20filterable%3A%20true%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20id%3A%20'simpleEmbeddedObj'%2C%0A%20%20%20%20%20%20label%3A%20'Embedded%20(simple)'%2C%0A%20%20%20%20%20%20enabled%3A%20true%2C%0A%20%20%20%20%20%20format%3A%20'%24id'%2C%0A%20%20%20%20%20%20type%3A%20'text'%2C%0A%20%20%20%20%20%20filterable%3A%20true%2C%0A%20%20%20%20%20%20sortable%3A%20true%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20id%3A%20'date'%2C%0A%20%20%20%20%20%20label%3A%20'Date'%2C%0A%20%20%20%20%20%20enabled%3A%20true%2C%0A%20%20%20%20%20%20type%3A%20'date'%2C%0A%20%20%20%20%20%20filterable%3A%20%7B%0A%20%20%20%20%20%20%20%20type%3A%20'date'%2C%0A%20%20%20%20%20%20%20%20allowCustomRange%3A%20true%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20sortable%3A%20true%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20id%3A%20'dateTime'%2C%0A%20%20%20%20%20%20label%3A%20'DateTime'%2C%0A%20%20%20%20%20%20enabled%3A%20false%2C%0A%20%20%20%20%20%20type%3A%20'datetime'%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20id%3A%20'time'%2C%0A%20%20%20%20%20%20label%3A%20'Time'%2C%0A%20%20%20%20%20%20enabled%3A%20false%2C%0A%20%20%20%20%20%20type%3A%20'time'%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20id%3A%20'money'%2C%0A%20%20%20%20%20%20label%3A%20'Money'%2C%0A%20%20%20%20%20%20enabled%3A%20false%2C%0A%20%20%20%20%20%20type%3A%20'currency'%2C%0A%20%20%20%20%20%20filterable%3A%20true%2C%0A%20%20%20%20%20%20sortable%3A%20true%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20id%3A%20'percent'%2C%0A%20%20%20%20%20%20label%3A%20'Percent'%2C%0A%20%20%20%20%20%20enabled%3A%20true%2C%0A%20%20%20%20%20%20type%3A%20'percent'%2C%0A%20%20%20%20%20%20filterable%3A%20true%2C%0A%20%20%20%20%20%20sortable%3A%20true%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20id%3A%20'name'%2C%0A%20%20%20%20%20%20label%3A%20'Name'%2C%0A%20%20%20%20%20%20labelIcon%3A%20'bull'%2C%0A%20%20%20%20%20%20enabled%3A%20true%2C%0A%20%20%20%20%20%20type%3A%20'text'%2C%0A%20%20%20%20%20%20template%3A%20'custom'%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20id%3A%20'status'%2C%0A%20%20%20%20%20%20label%3A%20'Status'%2C%0A%20%20%20%20%20%20enabled%3A%20true%2C%0A%20%20%20%20%20%20type%3A%20'text'%2C%0A%20%20%20%20%20%20filterable%3A%20true%2C%0A%20%20%20%20%20%20sortable%3A%20true%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20id%3A%20'priority'%2C%0A%20%20%20%20%20%20label%3A%20'Priority'%2C%0A%20%20%20%20%20%20enabled%3A%20true%2C%0A%20%20%20%20%20%20type%3A%20'text'%2C%0A%20%20%20%20%20%20filterable%3A%20%7B%0A%20%20%20%20%20%20%20%20type%3A%20'multi-select'%2C%0A%20%20%20%20%20%20%20%20options%3A%20this.getPriorityOptions()%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20sortable%3A%20true%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20id%3A%20'enabled'%2C%0A%20%20%20%20%20%20label%3A%20'Enabled'%2C%0A%20%20%20%20%20%20enabled%3A%20true%2C%0A%20%20%20%20%20%20type%3A%20'text'%2C%0A%20%20%20%20%20%20sortable%3A%20true%2C%0A%20%20%20%20%20%20filterable%3A%20%7B%0A%20%20%20%20%20%20%20%20type%3A%20'select'%2C%0A%20%20%20%20%20%20%20%20options%3A%20%5B%0A%20%20%20%20%20%20%20%20%20%20%7B%20value%3A%20true%2C%20label%3A%20'True'%20%7D%2C%0A%20%20%20%20%20%20%20%20%20%20%7B%20value%3A%20false%2C%20label%3A%20'False'%20%7D%2C%0A%20%20%20%20%20%20%20%20%5D%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20id%3A%20'edit'%2C%0A%20%20%20%20%20%20type%3A%20'action'%2C%0A%20%20%20%20%20%20enabled%3A%20true%2C%0A%20%20%20%20%20%20disabled%3A%20true%2C%0A%20%20%20%20%20%20handlers%3A%20%7B%0A%20%20%20%20%20%20%20%20click%3A%20this.log.bind(this)%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20action%3A%20%7B%0A%20%20%20%20%20%20%20%20icon%3A%20'edit'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%7D%2C%0A%20%20%5D%3B%0A%20%20public%20sharedDisplayColumns%20%3D%20%5B%0A%20%20%20%20'selection'%2C%0A%20%20%20%20'expand'%2C%0A%20%20%20%20'preview'%2C%0A%20%20%20%20'actions'%2C%0A%20%20%20%20'id'%2C%0A%20%20%20%20'date'%2C%0A%20%20%20%20'name'%2C%0A%20%20%20%20'telephone'%2C%0A%20%20%20%20'email'%2C%0A%20%20%20%20'simpleEmbeddedObj'%2C%0A%20%20%20%20'status'%2C%0A%20%20%20%20'priority'%2C%0A%20%20%20%20'percent'%2C%0A%20%20%20%20'embeddedObj'%2C%0A%20%20%20%20'edit'%2C%0A%20%20%5D%3B%0A%20%20public%20sharedPaginationOptions%3A%20IDataTablePaginationOptions%20%3D%20%7B%0A%20%20%20%20theme%3A%20'standard'%2C%0A%20%20%20%20pageSize%3A%2010%2C%0A%20%20%20%20pageSizeOptions%3A%20%5B10%2C%2050%2C%20100%2C%20250%2C%20500%5D%2C%0A%20%20%7D%3B%0A%20%20public%20widePaginationOptions%3A%20IDataTablePaginationOptions%20%3D%20%7B%0A%20%20%20%20theme%3A%20'basic-wide'%2C%0A%20%20%20%20pageSize%3A%2010%2C%0A%20%20%20%20pageSizeOptions%3A%20%5B10%2C%2050%2C%20100%2C%20250%2C%20500%5D%2C%0A%20%20%7D%3B%0A%20%20public%20sharedSearchOptions%3A%20IDataTableSearchOptions%20%3D%20%7B%0A%20%20%20%20placeholder%3A%20'Search%20for%20things...'%2C%0A%20%20%20%20tooltip%3A%20'HELLO'%2C%0A%20%20%7D%3B%0A%20%20public%20sharedDefaultSort%3A%20%7B%20id%3A%20string%3B%20value%3A%20string%20%7D%20%3D%20%7B%0A%20%20%20%20id%3A%20'id'%2C%0A%20%20%20%20value%3A%20'asc'%2C%0A%20%20%7D%3B%0A%20%20public%20globalSearchEnabled%3A%20boolean%20%3D%20false%3B%0A%20%20public%20refreshSubject%3A%20Subject%3Cvoid%3E%20%3D%20new%20Subject()%3B%0A%0A%20%20%2F%2F%20Remote%20configuration%0A%20%20public%20remoteService%3A%20RemoteDataTableService%3CMockData%3E%3B%0A%0A%20%20private%20staticDataSet1%3A%20MockData%5B%5D%20%3D%20%5B%5D%3B%0A%0A%20%20constructor(private%20ref%3A%20ChangeDetectorRef%2C%20private%20modalService%3A%20NovoModalService)%20%7B%0A%20%20%20%20for%20(let%20i%20%3D%200%3B%20i%20%3C%201000%3B%20i%2B%2B)%20%7B%0A%20%20%20%20%20%20const%20day%20%3D%20i%20%3C%20500%20%3F%20dateFns.subDays(new%20Date()%2C%20i)%20%3A%20dateFns.addDays(new%20Date()%2C%20i%20-%20500)%3B%0A%20%20%20%20%20%20this.staticDataSet1.push(%7B%0A%20%20%20%20%20%20%20%20id%3A%20i%2C%0A%20%20%20%20%20%20%20%20embeddedObj%3A%20%7B%20id%3A%20i%2C%20test%3A%20%60HMM%20%24%7Bi%7D%60%2C%20another%3A%20%7B%20id%3A%20777%20%7D%20%7D%2C%0A%20%20%20%20%20%20%20%20simpleEmbeddedObj%3A%20%7B%20id%3A%20i%20%7D%2C%0A%20%20%20%20%20%20%20%20name%3A%20%60(1)%20Name%20%24%7Bi%7D%60%2C%0A%20%20%20%20%20%20%20%20status%3A%20%60(1)%20Status%20%24%7Bi%7D%60%2C%0A%20%20%20%20%20%20%20%20priority%3A%20this.getPriority()%2C%0A%20%20%20%20%20%20%20%20enabled%3A%20i%20%25%202%20%3D%3D%3D%200%2C%0A%20%20%20%20%20%20%20%20date%3A%20day%2C%0A%20%20%20%20%20%20%20%20dateTime%3A%20day%2C%0A%20%20%20%20%20%20%20%20time%3A%20day%2C%0A%20%20%20%20%20%20%20%20money%3A%20i%20%2B%2010%2C%0A%20%20%20%20%20%20%20%20percent%3A%20i%20%2F%20100%2C%0A%20%20%20%20%20%20%20%20telephone%3A%20'555-555-5555'%2C%0A%20%20%20%20%20%20%20%20email%3A%20'test%40google.com'%2C%0A%20%20%20%20%20%20%20%20address%3A%20%7B%20city%3A%20'City'%2C%20state%3A%20null%20%7D%2C%0A%20%20%20%20%20%20%7D)%3B%0A%20%20%20%20%7D%0A%20%20%20%20this.remoteService%20%3D%20new%20RemoteMockDataService(%5B...this.staticDataSet1.slice(0%2C%2010)%5D)%3B%0A%20%20%7D%0A%0A%20%20public%20getPriority()%3A%20string%20%7B%0A%20%20%20%20const%20x%20%3D%20Math.round(Math.random()%20*%2050)%3B%0A%20%20%20%20return%20'test%20'%20%2B%20x.toString()%3B%0A%20%20%7D%0A%0A%20%20public%20getPriorityOptions()%20%7B%0A%20%20%20%20const%20options%20%3D%20new%20Array()%3B%0A%20%20%20%20let%20i%3B%0A%20%20%20%20for%20(i%20%3D%200%3B%20i%20%3C%2049%3B%20i%2B%2B)%20%7B%0A%20%20%20%20%20%20options.push('test%20'%20%2B%20i.toString())%3B%0A%20%20%20%20%7D%0A%20%20%20%20return%20options%3B%0A%20%20%7D%0A%0A%20%20public%20switchPaginationType(type%3A%20'basic'%20%7C%20'standard')%20%7B%0A%20%20%20%20this.sharedPaginationOptions%20%3D%20Object.assign(%7B%7D%2C%20this.sharedPaginationOptions%2C%20%7B%20theme%3A%20type%20%7D)%3B%0A%20%20%20%20this.ref.detectChanges()%3B%0A%20%20%7D%0A%0A%20%20public%20switchPaginationPlacement(onFooter%3A%20boolean)%20%7B%0A%20%20%20%20this.sharedPaginationOptions%20%3D%20Object.assign(%7B%7D%2C%20this.sharedPaginationOptions%2C%20%7B%20onFooter%20%7D)%3B%0A%20%20%20%20this.ref.detectChanges()%3B%0A%20%20%7D%0A%0A%20%20public%20toggleGlobalSearch(toggle%3A%20boolean)%3A%20void%20%7B%0A%20%20%20%20this.globalSearchEnabled%20%3D%20toggle%3B%0A%20%20%20%20this.ref.detectChanges()%3B%0A%20%20%7D%0A%0A%20%20public%20log(event%3A%20%7B%20originalEvent%3A%20MouseEvent%3B%20row%3A%20MockData%20%7D)%3A%20void%20%7B%0A%20%20%20%20console.log('%5BDataTable%5D%20Event%20Triggered!'%2C%20event)%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%7D%0A%0A%20%20public%20checkDisabled(row%3A%20MockData)%3A%20boolean%20%7B%0A%20%20%20%20return%20true%3B%0A%20%20%7D%0A%0A%20%20public%20configureColumns()%3A%20void%20%7B%0A%20%20%20%20this.modalService%0A%20%20%20%20%20%20.open(ConfigureColumnsModal%2C%20%7B%20columns%3A%20this.sharedColumns%20%7D)%0A%20%20%20%20%20%20.onClosed.then((columns%3A%20IDataTableColumn%3CMockData%3E%5B%5D)%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20if%20(columns)%20%7B%0A%20%20%20%20%20%20%20%20%20%20const%20enabledColumns%20%3D%20columns.filter((column%3A%20IDataTableColumn%3CMockData%3E)%20%3D%3E%20column.enabled)%3B%0A%20%20%20%20%20%20%20%20%20%20this.sharedDisplayColumns%20%3D%20%5B'selection'%2C%20'expand'%2C%20...enabledColumns.map((column%3A%20IDataTableColumn%3CMockData%3E)%20%3D%3E%20column.id)%5D%3B%0A%20%20%20%20%20%20%20%20%20%20this.ref.markForCheck()%3B%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%7D)%3B%0A%20%20%7D%0A%0A%20%20public%20onPreferencesChanged(event%3A%20IDataTablePreferences)%3A%20void%20%7B%0A%20%20%20%20console.log('Preferences%20changed%20(persist%20manually)%3A'%2C%20event)%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%7D%0A%0A%20%20public%20refresh()%3A%20void%20%7B%0A%20%20%20%20this.refreshSubject.next()%3B%0A%20%20%7D%0A%7D%0A%0Aclass%20RemoteMockDataService%20extends%20RemoteDataTableService%3CMockData%3E%20%7B%0A%20%20public%20url%3A%20string%3B%0A%0A%20%20constructor(private%20data%3A%20MockData%5B%5D)%20%7B%0A%20%20%20%20super()%3B%0A%20%20%7D%0A%0A%20%20public%20getTableResults(%0A%20%20%20%20sort%3A%20%7B%20id%3A%20string%3B%20value%3A%20string%3B%20transform%3F%3A%20Function%20%7D%2C%0A%20%20%20%20filter%3A%20IDataTableFilter%20%7C%20IDataTableFilter%5B%5D%2C%0A%20%20%20%20page%3A%20number%2C%0A%20%20%20%20pageSize%3A%20number%2C%0A%20%20%20%20globalSearch%3F%3A%20string%2C%0A%20%20)%3A%20Observable%3C%7B%20results%3A%20MockData%5B%5D%3B%20total%3A%20number%20%7D%3E%20%7B%0A%20%20%20%20const%20whereQuery%3A%20string%20%3D%20this.buildWhereClause(filter)%3B%0A%20%20%20%20const%20sortQuery%3A%20string%20%3D%20this.buildSortColumn(sort)%3B%0A%20%20%20%20const%20pageQuery%3A%20number%20%3D%20this.buildStart(page%2C%20pageSize)%3B%0A%20%20%20%20this.url%20%3D%20%60http%3A%2F%2Fmock-api.com%3Fwhere%3D%24%7BwhereQuery%7D%26sort%3D%24%7BsortQuery%7D%26pageSize%3D%24%7BpageSize%7D%26page%3D%24%7BpageQuery%7D%60%3B%0A%20%20%20%20return%20of(%7B%20results%3A%20this.data%2C%20total%3A%20this.data.length%20%7D).pipe(delay(5000))%3B%0A%20%20%7D%0A%0A%20%20private%20buildWhereClause(filter%3A%20IDataTableFilter%20%7C%20IDataTableFilter%5B%5D)%3A%20string%20%7B%0A%20%20%20%20const%20query%3A%20any%20%3D%20%7B%7D%3B%0A%20%20%20%20if%20(filter)%20%7B%0A%20%20%20%20%20%20const%20filters%20%3D%20Helpers.convertToArray(filter)%3B%0A%20%20%20%20%20%20filters.forEach((aFilter)%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20query%5BaFilter.id%5D%20%3D%20aFilter.transform%20%3F%20aFilter.transform(aFilter.value)%20%3A%20aFilter.value%3B%0A%20%20%20%20%20%20%7D)%3B%0A%20%20%20%20%7D%0A%20%20%20%20return%20this.toQuerySyntax(query)%3B%0A%20%20%7D%0A%0A%20%20private%20buildSortColumn(sort%3A%20%7B%20id%3A%20string%3B%20value%3A%20string%3B%20transform%3F%3A%20Function%20%7D)%3A%20string%20%7B%0A%20%20%20%20if%20(sort)%20%7B%0A%20%20%20%20%20%20let%20value%20%3D%20sort.id%3B%0A%20%20%20%20%20%20if%20(sort.transform)%20%7B%0A%20%20%20%20%20%20%20%20value%20%3D%20sort.transform(value)%3B%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20return%20sort.value%20%3D%3D%3D%20'asc'%20%3F%20value%20%3A%20%60-%24%7Bvalue%7D%60%3B%0A%20%20%20%20%7D%0A%20%20%20%20return%20''%3B%0A%20%20%7D%0A%0A%20%20private%20buildStart(page%3A%20number%2C%20pageSize%3A%20number)%3A%20number%20%7B%0A%20%20%20%20return%20(page%20%7C%7C%200)%20*%20pageSize%3B%0A%20%20%7D%0A%0A%20%20private%20toQuerySyntax(data%3A%20any)%20%7B%0A%20%20%20%20const%20queries%3A%20Array%3Cstring%3E%20%3D%20%5B%5D%3B%0A%20%20%20%20for%20(const%20key%20in%20data)%20%7B%0A%20%20%20%20%20%20const%20value%20%3D%20data%5Bkey%5D%3B%0A%20%20%20%20%20%20if%20(key%20%3D%3D%3D%20'or')%20%7B%0A%20%20%20%20%20%20%20%20queries.push(%60(%24%7Bthis.toQuerySyntax(value).replace(%2F%20AND%20%2Fg%2C%20'%20OR%20')%7D)%60)%3B%0A%20%20%20%20%20%20%7D%20else%20%7B%0A%20%20%20%20%20%20%20%20queries.push(this.parseQueryValue(key%2C%20value))%3B%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A%0A%20%20%20%20return%20queries.join('%20AND%20')%3B%0A%20%20%7D%0A%0A%20%20private%20parseQueryValue(key%3A%20string%2C%20value%3A%20any%2C%20isNot%3A%20boolean%20%3D%20false)%20%7B%0A%20%20%20%20const%20clauses%3A%20Array%3Cstring%3E%20%3D%20%5B%5D%2C%0A%20%20%20%20%20%20IN%20%3D%20isNot%20%3F%20'%20NOT%20IN%20'%20%3A%20'%20IN%20'%2C%0A%20%20%20%20%20%20EQ%20%3D%20isNot%20%3F%20'%3C%3E'%20%3A%20'%3D'%2C%0A%20%20%20%20%20%20GT%20%3D%20isNot%20%3F%20'%3C'%20%3A%20'%3E%3D'%2C%0A%20%20%20%20%20%20LT%20%3D%20isNot%20%3F%20'%3E%3D'%20%3A%20'%3C'%3B%0A%20%20%20%20if%20(Array.isArray(value))%20%7B%0A%20%20%20%20%20%20clauses.push(%60%24%7Bkey%7D%24%7BIN%7D(%24%7Bthis.writeQueryValues(value)%7D)%60)%3B%0A%20%20%20%20%7D%20else%20if%20(value%20instanceof%20Object)%20%7B%0A%20%20%20%20%20%20if%20(typeof%20value.isNull%20%3D%3D%3D%20'boolean')%20%7B%0A%20%20%20%20%20%20%20%20const%20query%3A%20string%20%3D%20value.isNull%20%3F%20'IS%20NULL'%20%3A%20'IS%20NOT%20NULL'%3B%0A%20%20%20%20%20%20%20%20clauses.push(%60%24%7Bkey%7D%20%24%7Bquery%7D%60)%3B%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20if%20(value.min%20!%3D%3D%20null%20%26%26%20value.min%20!%3D%3D%20undefined)%20%7B%0A%20%20%20%20%20%20%20%20clauses.push(%60%24%7Bkey%7D%24%7BGT%7D%24%7Bthis.writeQueryValue(value.min)%7D%60)%3B%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20if%20(value.max%20!%3D%3D%20null%20%26%26%20value.max%20!%3D%3D%20undefined)%20%7B%0A%20%20%20%20%20%20%20%20clauses.push(%60%24%7Bkey%7D%24%7BLT%7D%24%7Bthis.writeQueryValue(value.max)%7D%60)%3B%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20if%20(value.any%20%26%26%20Array.isArray(value.any))%20%7B%0A%20%20%20%20%20%20%20%20clauses.push(%60%24%7Bkey%7D%24%7BIN%7D(%24%7Bthis.writeQueryValues(value.any)%7D)%60)%3B%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20if%20(value.all%20%26%26%20Array.isArray(value.all))%20%7B%0A%20%20%20%20%20%20%20%20clauses.push(%60%24%7Bkey%7D%24%7BIN%7D(%24%7Bthis.writeQueryValues(value.all)%7D)%60)%3B%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20if%20(value.not%20!%3D%3D%20null%20%26%26%20value.not%20!%3D%3D%20undefined)%20%7B%0A%20%20%20%20%20%20%20%20clauses.push(this.parseQueryValue(key%2C%20value.not%2C%20true))%3B%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20if%20(value.like%20!%3D%3D%20null%20%26%26%20value.like%20!%3D%3D%20undefined)%20%7B%0A%20%20%20%20%20%20%20%20clauses.push(%60%24%7Bkey%7D%20like%20'%25%24%7Bvalue.like%7D%25'%60)%3B%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20if%20(value.lookup%20!%3D%3D%20null%20%26%26%20value.lookup%20!%3D%3D%20undefined)%20%7B%0A%20%20%20%20%20%20%20%20const%20obj%20%3D%20%7B%7D%3B%0A%20%20%20%20%20%20%20%20obj%5Bkey%5D%20%3D%20value.lookup%3B%0A%20%20%20%20%20%20%20%20clauses.push(this.toQuerySyntax(obj))%3B%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20if%20(value.with%20!%3D%3D%20null%20%26%26%20value.with%20!%3D%3D%20undefined)%20%7B%0A%20%20%20%20%20%20%20%20clauses.push(%60%24%7Bkey%7D%20IS%20NOT%20EMPTY%60)%3B%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20if%20(value.without%20!%3D%3D%20null%20%26%26%20value.without%20!%3D%3D%20undefined)%20%7B%0A%20%20%20%20%20%20%20%20clauses.push(%60%24%7Bkey%7D%20IS%20EMPTY%60)%3B%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20if%20(value.or%20!%3D%3D%20null%20%26%26%20value.or%20!%3D%3D%20undefined)%20%7B%0A%20%20%20%20%20%20%20%20const%20obj%20%3D%20%7B%7D%3B%0A%20%20%20%20%20%20%20%20obj%5Bkey%5D%20%3D%20value.or%3B%0A%20%20%20%20%20%20%20%20clauses.push(this.toQuerySyntax(obj).replace('AND'%2C%20'OR'))%3B%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20for%20(const%20subkey%20in%20value)%20%7B%0A%20%20%20%20%20%20%20%20if%20(%5B'min'%2C%20'max'%2C%20'any'%2C%20'all'%2C%20'not'%2C%20'or'%2C%20'like'%2C%20'lookup'%2C%20'with'%2C%20'without'%2C%20'isNull'%5D.indexOf(subkey)%20%3C%200)%20%7B%0A%20%20%20%20%20%20%20%20%20%20const%20subvalue%20%3D%20value%5Bsubkey%5D%3B%0A%20%20%20%20%20%20%20%20%20%20clauses.push(this.parseQueryValue(%60%24%7Bkey%7D.%24%7Bsubkey%7D%60%2C%20subvalue))%3B%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%20else%20%7B%0A%20%20%20%20%20%20clauses.push(%60%24%7Bkey%7D%24%7BEQ%7D%24%7Bthis.writeQueryValue(value)%7D%60)%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20return%20clauses.join('%20AND%20')%3B%0A%20%20%7D%0A%0A%20%20private%20writeQueryValues(values)%20%7B%0A%20%20%20%20if%20(typeof%20values%5B0%5D%20%3D%3D%3D%20'number'%20%7C%7C%20typeof%20values%5B0%5D%20%3D%3D%3D%20'boolean')%20%7B%0A%20%20%20%20%20%20return%20%60%24%7Bvalues.join('%2C')%7D%60%3B%0A%20%20%20%20%7D%20else%20%7B%0A%20%20%20%20%20%20return%20%60'%24%7Bvalues.join(%60'%2C'%60)%7D'%60%3B%0A%20%20%20%20%7D%0A%20%20%7D%0A%0A%20%20private%20writeQueryValue(value)%20%7B%0A%20%20%20%20if%20(value%20instanceof%20Date)%20%7B%0A%20%20%20%20%20%20return%20value.getTime()%3B%0A%20%20%20%20%7D%20else%20if%20(typeof%20value%20%3D%3D%3D%20'number'%20%7C%7C%20typeof%20value%20%3D%3D%3D%20'boolean')%20%7B%0A%20%20%20%20%20%20return%20%60%24%7Bvalue%7D%60%3B%0A%20%20%20%20%7D%20else%20%7B%0A%20%20%20%20%20%20return%20%60'%24%7Bvalue.replace(%2F%5C*%2Fg%2C%20'')%7D'%60%3B%0A%20%20%20%20%7D%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%3Ahost%20%7B%0A%20%20%20%20min-height%3A%20460px%3B%0A%20%20%20%20display%3A%20flex%3B%0A%7D%0A`,
        htmlSource: `%3Cnovo-data-table%20%5BdataTableService%5D%3D%22remoteService%22%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%5Bcolumns%5D%3D%22sharedColumns%22%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%5BallowMultipleFilters%5D%3D%22true%22%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%5BhideGlobalSearch%5D%3D%22!globalSearchEnabled%22%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%5BdisplayedColumns%5D%3D%22sharedDisplayColumns%22%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%5BpaginationOptions%5D%3D%22widePaginationOptions%22%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%5BfixedHeader%5D%3D%22true%22%3E%0A%20%20%3C!--%20Custom%20Cell%20--%20passed%20with%20template%20property%20on%20Column%20--%3E%0A%20%20%3Cng-template%20novoTemplate%3D%22custom%22%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20let-row%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20let-col%3D%22col%22%3E%0A%20%20%20%20%3Cb%3ECUSTOM%3C%2Fb%3E%26nbsp%3B%20%7B%7B%20row.name%20%7D%7D%0A%20%20%3C%2Fng-template%3E%0A%3C%2Fnovo-data-table%3E%0A`
    },
    'time': {
        title: 'Time Example',
        component: TimeExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Time%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'time-example'%2C%0A%20%20%20%20templateUrl%3A%20'time-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'time-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20TimeExample%20%7B%0A%20%20public%20time%3A%20Date%3B%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cdiv%20class%3D%22calendar-demo-side-by-side%22%3E%0A%20%20%20%20%3Cp%3E%0A%20%20%20%20%20%20%20%20%3Clabel%3EValue%3C%2Flabel%3E%20%7B%7B(time%20%7C%20date%3A'mediumTime')%20%7C%7C%20'N%2FA'%7D%7D%0A%20%20%20%20%3C%2Fp%3E%0A%20%20%20%20%3Cnovo-time-picker%20%5B(ngModel)%5D%3D%22time%22%3E%3C%2Fnovo-time-picker%3E%0A%20%20%20%20%3Cnovo-time-picker%20%5B(ngModel)%5D%3D%22time%22%20military%3D%22true%22%3E%3C%2Fnovo-time-picker%3E%0A%3C%2Fdiv%3E%0A`
    },
    'calendar': {
        title: 'Calendar Example',
        component: CalendarExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Calendar%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'calendar-example'%2C%0A%20%20%20%20templateUrl%3A%20'calendar-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'calendar-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20CalendarExample%20%7B%0A%20%20activeDate%20%3D%20new%20Date()%3B%0A%20%20selection%3A%20Date%5B%5D%20%3D%20%5B%5D%3B%0A%7D%0A`,
        cssSource: `%3Ahost%20%7B%0A%20%20display%3A%20grid%3B%0A%20%20grid-template-columns%3A%201fr%201fr%3B%0A%20%20gap%3A%202rem%3B%0A%7D%0A`,
        htmlSource: `%3Cnovo-stack%3E%0A%20%20%3Cnovo-calendar%0A%20%20%20%20%5BactiveDate%5D%3D%22activeDate%22%0A%20%20%20%20%5B(selected)%5D%3D%22selection%22%0A%20%20%20%20%5Bmode%5D%3D%22mode.value%22%0A%20%20%20%20%5BnumberOfMonths%5D%3D%22months.value%22%0A%20%20%20%20%5BweekStartsOn%5D%3D%22weekStart.value%22%3E%3C%2Fnovo-calendar%3E%0A%0A%20%20%3Cnovo-label%3ESelected%20Values%3A%3C%2Fnovo-label%3E%0A%20%20%3Cdiv%3E%7B%7Bselection%20%7C%20json%7D%7D%3C%2Fdiv%3E%0A%3C%2Fnovo-stack%3E%0A%3Cdiv%3E%0A%20%20%3Cnovo-label%3ESelection%20mode%3C%2Fnovo-label%3E%0A%20%20%3Cnovo-radio-group%20%23mode%20appearance%3D%22vertical%22%20value%3D%22single%22%3E%0A%20%20%20%20%3Cnovo-radio%20name%3D%22mode%22%20value%3D%22single%22%3Esingle%3C%2Fnovo-radio%3E%0A%20%20%20%20%3Cnovo-radio%20name%3D%22mode%22%20value%3D%22multiple%22%3Emultiple%3C%2Fnovo-radio%3E%0A%20%20%20%20%3Cnovo-radio%20name%3D%22mode%22%20value%3D%22range%22%3Erange%3C%2Fnovo-radio%3E%0A%20%20%20%20%3Cnovo-radio%20name%3D%22mode%22%20value%3D%22week%22%3Eweek%3C%2Fnovo-radio%3E%0A%20%20%3C%2Fnovo-radio-group%3E%0A%0A%20%20%3Cnovo-label%3E%23%20of%20Months%3C%2Fnovo-label%3E%0A%20%20%3Cnovo-radio-group%20%23months%20appearance%3D%22vertical%22%20value%3D%221%22%3E%0A%20%20%20%20%3Cnovo-radio%20name%3D%22months%22%20value%3D%221%22%3E1%3C%2Fnovo-radio%3E%0A%20%20%20%20%3Cnovo-radio%20name%3D%22months%22%20value%3D%222%22%3E2%3C%2Fnovo-radio%3E%0A%20%20%3C%2Fnovo-radio-group%3E%0A%0A%20%20%3Cnovo-label%3EWeek%20Start%3C%2Fnovo-label%3E%0A%20%20%3Cnovo-radio-group%20%23weekStart%20appearance%3D%22vertical%22%20value%3D%220%22%3E%0A%20%20%20%20%3Cnovo-radio%20name%3D%22weekStart%22%20value%3D%220%22%3ESun%3C%2Fnovo-radio%3E%0A%20%20%20%20%3Cnovo-radio%20name%3D%22weekStart%22%20value%3D%221%22%3EMon%3C%2Fnovo-radio%3E%0A%20%20%3C%2Fnovo-radio-group%3E%0A%3C%2Fdiv%3E`
    },
    'button-two-icon': {
        title: 'Icon buttons',
        component: ButtonTwoIconExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Icon%20buttons%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'button-two-icon-example'%2C%0A%20%20%20%20templateUrl%3A%20'button-two-icon-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'button-two-icon-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20ButtonTwoIconExample%20%7B%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A%0Abutton%20%7B%0A%20%20margin%3A%201rem%3B%0A%7D%0A`,
        htmlSource: `%3Cbutton%20theme%3D%22primary%22%20icon%3D%22edit%22%20secondIcon%3D%22arrow-right%22%3ETwo%20Icons%3C%2Fbutton%3E%0A%3Cbutton%20theme%3D%22primary%22%20icon%3D%22bolt%22%20secondIcon%3D%22configure-o%22%20side%3D%22right%22%3ETwo%20Icons%3C%2Fbutton%3E%0A`
    },
    'button-standard': {
        title: 'Basic buttons',
        component: ButtonStandardExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Basic%20buttons%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'button-standard-example'%2C%0A%20%20%20%20templateUrl%3A%20'button-standard-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'button-standard-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20ButtonStandardExample%20%7B%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cbutton%20theme%3D%22standard%22%3EStandard%3C%2Fbutton%3E%0A%3Cbutton%20theme%3D%22standard%22%20color%3D%22light%22%3EStandard%3C%2Fbutton%3E%0A%3Cbutton%20theme%3D%22standard%22%20color%3D%22light%22%20disabled%3EStandard%3C%2Fbutton%3E%0A`
    },
    'button-secondary': {
        title: 'Basic buttons',
        component: ButtonSecondaryExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Basic%20buttons%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'button-secondary-example'%2C%0A%20%20%20%20templateUrl%3A%20'button-secondary-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'button-secondary-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20ButtonSecondaryExample%20%7B%7D%0A`,
        cssSource: `section%20%7B%0A%20%20display%3A%20table%3B%0A%7D%0A%0A.example-label%20%7B%0A%20%20display%3A%20table-cell%3B%0A%20%20font-size%3A%2014px%3B%0A%20%20margin-left%3A%208px%3B%0A%20%20min-width%3A%20120px%3B%0A%20%20padding-left%3A%208px%3B%0A%7D%0A%0A.example-button-row%20%7B%0A%20%20display%3A%20table-cell%3B%0A%20%20width%3A%20490px%3B%0A%7D%0A%0A.example-button-row%20.novo-button%20%7B%0A%20%20margin%3A%208px%208px%208px%200%3B%0A%7D%0A%0A.example-flex-container%20%7B%0A%20%20display%3A%20flex%3B%0A%20%20justify-content%3A%20space-between%3B%0A%20%20flex-wrap%3A%20wrap%3B%0A%7D%0A%0A.example-button-container%20%7B%0A%20%20display%3A%20flex%3B%0A%20%20justify-content%3A%20center%3B%0A%20%20width%3A%20120px%3B%0A%7D%0A`,
        htmlSource: `%3Csection%3E%0A%20%20%3Cdiv%20class%3D%22example-label%22%3EDefault%3C%2Fdiv%3E%0A%20%20%3Cdiv%20class%3D%22example-button-row%22%3E%0A%20%20%20%20%3Cbutton%20theme%3D%22secondary%22%3ESecondary%3C%2Fbutton%3E%0A%20%20%20%20%3Cbutton%20theme%3D%22secondary%22%20disabled%3ESecondary%3C%2Fbutton%3E%0A%20%20%3C%2Fdiv%3E%0A%3C%2Fsection%3E%0A%0A%3Cnovo-divider%3E%3C%2Fnovo-divider%3E%0A%0A%3Csection%3E%0A%20%20%3Cdiv%20class%3D%22example-label%22%3ESmall%3C%2Fdiv%3E%0A%20%20%3Cdiv%20class%3D%22example-button-row%22%3E%0A%20%20%20%20%3Cbutton%20theme%3D%22secondary%22%20size%3D%22small%22%3ESecondary%3C%2Fbutton%3E%0A%20%20%20%20%3Cbutton%20theme%3D%22secondary%22%20size%3D%22small%22%20disabled%3ESecondary%3C%2Fbutton%3E%0A%20%20%3C%2Fdiv%3E%0A%3C%2Fsection%3E%0A%0A%3Cnovo-divider%3E%3C%2Fnovo-divider%3E%0A%0A%3Csection%3E%0A%20%20%3Cdiv%20class%3D%22example-label%22%3ELarge%3C%2Fdiv%3E%0A%20%20%3Cdiv%20class%3D%22example-button-row%22%3E%0A%20%20%20%20%3Cbutton%20theme%3D%22secondary%22%20size%3D%22large%22%3ESecondary%3C%2Fbutton%3E%0A%20%20%20%20%3Cbutton%20theme%3D%22secondary%22%20size%3D%22large%22%20disabled%3ESecondary%3C%2Fbutton%3E%0A%20%20%3C%2Fdiv%3E%0A%3C%2Fsection%3E%0A%0A%3Csection%20class%3D%22bgc-ocean%22%3E%0A%20%20%3Cdiv%20class%3D%22example-label%20tc-white%22%3EInverse%3C%2Fdiv%3E%0A%20%20%3Cdiv%20class%3D%22example-button-row%22%3E%0A%20%20%20%20%3Cbutton%20theme%3D%22secondary%22%20inverse%3EActions%3C%2Fbutton%3E%0A%20%20%20%20%3Cbutton%20theme%3D%22secondary%22%20color%3D%22negative%22%20inverse%3EIssues%3C%2Fbutton%3E%0A%20%20%20%20%3Cbutton%20theme%3D%22secondary%22%20icon%3D%22convert%22%20inverse%20disabled%3EConvert%3C%2Fbutton%3E%0A%20%20%3C%2Fdiv%3E%0A%3C%2Fsection%3E`
    },
    'button-primary': {
        title: 'Primary buttons',
        component: ButtonPrimaryExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Primary%20buttons%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'button-primary-example'%2C%0A%20%20%20%20templateUrl%3A%20'button-primary-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'button-primary-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20ButtonPrimaryExample%20%7B%0A%20%20negativeColor%3A%20string%20%3D%20'negative'%3B%0A%7D%0A`,
        cssSource: `section%20%7B%0A%20%20display%3A%20table%3B%0A%7D%0A%0A.example-label%20%7B%0A%20%20display%3A%20table-cell%3B%0A%20%20font-size%3A%2014px%3B%0A%20%20margin-left%3A%208px%3B%0A%20%20min-width%3A%20120px%3B%0A%20%20padding-left%3A%208px%3B%0A%7D%0A%0A.example-button-row%20%7B%0A%20%20display%3A%20table-cell%3B%0A%20%20width%3A%20490px%3B%0A%7D%0A%0A.example-button-row%20.novo-button%20%7B%0A%20%20margin%3A%208px%208px%208px%200%3B%0A%7D%0A%0A.example-flex-container%20%7B%0A%20%20display%3A%20flex%3B%0A%20%20justify-content%3A%20space-between%3B%0A%20%20flex-wrap%3A%20wrap%3B%0A%7D%0A%0A.example-button-container%20%7B%0A%20%20display%3A%20flex%3B%0A%20%20justify-content%3A%20center%3B%0A%20%20width%3A%20120px%3B%0A%7D%0A`,
        htmlSource: `%3Csection%3E%0A%20%20%3Cdiv%20class%3D%22example-label%22%3EDefault%3C%2Fdiv%3E%0A%20%20%3Cdiv%20class%3D%22example-button-row%22%3E%0A%20%20%20%20%3Cbutton%20theme%3D%22primary%22%20icon%3D%22next%22%3ENext%3C%2Fbutton%3E%0A%20%20%20%20%3Cbutton%20theme%3D%22primary%22%20%5Bcolor%5D%3D%22negativeColor%22%20icon%3D%22times%22%3ECancel%3C%2Fbutton%3E%0A%20%20%20%20%3Cbutton%20theme%3D%22primary%22%20color%3D%22success%22%20icon%3D%22check%22%3ESave%3C%2Fbutton%3E%0A%20%20%20%20%3Cbutton%20theme%3D%22primary%22%20color%3D%22warning%22%20icon%3D%22caution-o%22%3ECaution%3C%2Fbutton%3E%0A%20%20%20%20%3Cbutton%20theme%3D%22primary%22%20color%3D%22pulse%22%20icon%3D%22send%22%20disabled%3ESubmit%3C%2Fbutton%3E%0A%20%20%3C%2Fdiv%3E%0A%3C%2Fsection%3E%0A%0A%3Cnovo-divider%3E%3C%2Fnovo-divider%3E%0A%0A%3Csection%3E%0A%20%20%3Cdiv%20class%3D%22example-label%22%3ESmall%3C%2Fdiv%3E%0A%20%20%3Cdiv%20class%3D%22example-button-row%22%3E%0A%20%20%20%20%3Cbutton%20theme%3D%22primary%22%20icon%3D%22next%22%20size%3D%22small%22%3ENext%3C%2Fbutton%3E%0A%20%20%20%20%3Cbutton%20theme%3D%22primary%22%20%5Bcolor%5D%3D%22negativeColor%22%20icon%3D%22x%22%20size%3D%22small%22%3ECancel%3C%2Fbutton%3E%0A%20%20%20%20%3Cbutton%20theme%3D%22primary%22%20color%3D%22success%22%20icon%3D%22check%22%20size%3D%22small%22%3ESave%3C%2Fbutton%3E%0A%20%20%20%20%3Cbutton%20theme%3D%22primary%22%20color%3D%22warning%22%20icon%3D%22caution-o%22%20size%3D%22small%22%3ECaution%3C%2Fbutton%3E%0A%20%20%20%20%3Cbutton%20theme%3D%22primary%22%20color%3D%22pulse%22%20icon%3D%22send%22%20size%3D%22small%22%20disabled%3ESubmit%3C%2Fbutton%3E%0A%20%20%3C%2Fdiv%3E%0A%3C%2Fsection%3E%0A%0A%3Cnovo-divider%3E%3C%2Fnovo-divider%3E%0A%0A%3Csection%3E%0A%20%20%3Cdiv%20class%3D%22example-label%22%3ELarge%3C%2Fdiv%3E%0A%20%20%3Cdiv%20class%3D%22example-button-row%22%3E%0A%20%20%20%20%3Cbutton%20theme%3D%22primary%22%20icon%3D%22next%22%20size%3D%22large%22%3ENext%3C%2Fbutton%3E%0A%20%20%20%20%3Cbutton%20theme%3D%22primary%22%20%5Bcolor%5D%3D%22negativeColor%22%20icon%3D%22times%22%20size%3D%22large%22%3ECancel%3C%2Fbutton%3E%0A%20%20%20%20%3Cbutton%20theme%3D%22primary%22%20color%3D%22success%22%20icon%3D%22check%22%20size%3D%22large%22%3ESave%3C%2Fbutton%3E%0A%20%20%20%20%3Cbutton%20theme%3D%22primary%22%20color%3D%22warning%22%20icon%3D%22caution-o%22%20size%3D%22large%22%3ECaution%3C%2Fbutton%3E%0A%20%20%20%20%3Cbutton%20theme%3D%22primary%22%20color%3D%22pulse%22%20icon%3D%22send%22%20size%3D%22large%22%20disabled%3ESubmit%3C%2Fbutton%3E%0A%20%20%3C%2Fdiv%3E%0A%3C%2Fsection%3E`
    },
    'button-overview': {
        title: 'Basic buttons',
        component: ButtonOverviewExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Basic%20buttons%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'button-overview-example'%2C%0A%20%20%20%20templateUrl%3A%20'button-overview-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'button-overview-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20ButtonOverviewExample%20%7B%7D%0A`,
        cssSource: `section%20%7B%0A%20%20display%3A%20table%3B%0A%7D%0A%0A.example-label%20%7B%0A%20%20display%3A%20table-cell%3B%0A%20%20font-size%3A%2014px%3B%0A%20%20margin-left%3A%208px%3B%0A%20%20min-width%3A%20120px%3B%0A%20%20padding-left%3A%208px%3B%0A%7D%0A%0A.example-button-row%20%7B%0A%20%20display%3A%20table-cell%3B%0A%20%20width%3A%20490px%3B%0A%7D%0A%0A.example-button-row%20.novo-button%20%7B%0A%20%20margin%3A%208px%208px%208px%200%3B%0A%7D%0A%0A.example-flex-container%20%7B%0A%20%20display%3A%20flex%3B%0A%20%20justify-content%3A%20space-between%3B%0A%20%20flex-wrap%3A%20wrap%3B%0A%7D%0A%0A.example-button-container%20%7B%0A%20%20display%3A%20flex%3B%0A%20%20justify-content%3A%20center%3B%0A%20%20width%3A%20120px%3B%0A%7D%0A`,
        htmlSource: `%3C!--%20%3Cbutton%20theme%3D%22primary%22%20icon%3D%22next%22%3EPrimary%3C%2Fbutton%3E%0A%3Cbutton%20theme%3D%22secondary%22%3ESecondary%3C%2Fbutton%3E%0A%3Cbutton%20theme%3D%22standard%22%20color%3D%22success%22%20icon%3D%22check%22%3EStandard%3C%2Fbutton%3E%0A%3Cbutton%20theme%3D%22dialogue%22%20color%3D%22pulse%22%20icon%3D%22send%22%3EDialogue%3C%2Fbutton%3E%0A%3Cbutton%20theme%3D%22icon%22%20color%3D%22warning%22%20icon%3D%22caution-o%22%3E%3C%2Fbutton%3E%20--%3E%0A%0A%0A%3Csection%3E%0A%20%20%3Cdiv%20class%3D%22example-label%22%3EBasic%3C%2Fdiv%3E%0A%20%20%3Cdiv%20class%3D%22example-button-row%22%3E%0A%20%20%20%20%3Cbutton%20theme%3D%22dialogue%22%3EDefault%3C%2Fbutton%3E%0A%20%20%20%20%3Cbutton%20theme%3D%22dialogue%22%20color%3D%22success%22%3ESuccess%3C%2Fbutton%3E%0A%20%20%20%20%3Cbutton%20theme%3D%22dialogue%22%20color%3D%22negative%22%3EError%3C%2Fbutton%3E%0A%20%20%20%20%3Cbutton%20theme%3D%22dialogue%22%20color%3D%22warning%22%3EWarning%3C%2Fbutton%3E%0A%20%20%20%20%3Cbutton%20theme%3D%22dialogue%22%20disabled%3EDisabled%3C%2Fbutton%3E%0A%20%20%3C%2Fdiv%3E%0A%3C%2Fsection%3E%0A%0A%3Cnovo-divider%3E%3C%2Fnovo-divider%3E%0A%0A%3Csection%3E%0A%20%20%3Cdiv%20class%3D%22example-label%22%3EPrimary%3C%2Fdiv%3E%0A%20%20%3Cdiv%20class%3D%22example-button-row%22%3E%0A%20%20%20%20%3Cbutton%20theme%3D%22primary%22%3EDefault%3C%2Fbutton%3E%0A%20%20%20%20%3Cbutton%20theme%3D%22primary%22%20color%3D%22success%22%3ESuccess%3C%2Fbutton%3E%0A%20%20%20%20%3Cbutton%20theme%3D%22primary%22%20color%3D%22negative%22%3EError%3C%2Fbutton%3E%0A%20%20%20%20%3Cbutton%20theme%3D%22primary%22%20color%3D%22warning%22%3EWarning%3C%2Fbutton%3E%0A%20%20%20%20%3Cbutton%20theme%3D%22primary%22%20disabled%3EDisabled%3C%2Fbutton%3E%0A%20%20%3C%2Fdiv%3E%0A%3C%2Fsection%3E%0A%0A%3Cnovo-divider%3E%3C%2Fnovo-divider%3E%0A%0A%3Csection%3E%0A%20%20%3Cdiv%20class%3D%22example-label%22%3ESecondary%3C%2Fdiv%3E%0A%20%20%3Cdiv%20class%3D%22example-button-row%22%3E%0A%20%20%20%20%3Cbutton%20theme%3D%22secondary%22%3EDefault%3C%2Fbutton%3E%0A%20%20%20%20%3Cbutton%20theme%3D%22secondary%22%20color%3D%22success%22%3ESuccess%3C%2Fbutton%3E%0A%20%20%20%20%3Cbutton%20theme%3D%22secondary%22%20color%3D%22negative%22%3EError%3C%2Fbutton%3E%0A%20%20%20%20%3Cbutton%20theme%3D%22secondary%22%20color%3D%22warning%22%3EWarning%3C%2Fbutton%3E%0A%20%20%20%20%3Cbutton%20theme%3D%22secondary%22%20disabled%3EDisabled%3C%2Fbutton%3E%0A%20%20%3C%2Fdiv%3E%0A%3C%2Fsection%3E%0A%0A%3Cnovo-divider%3E%3C%2Fnovo-divider%3E%0A%0A%3Csection%3E%0A%20%20%3Cdiv%20class%3D%22example-label%22%3EIcon%3C%2Fdiv%3E%0A%20%20%3Cdiv%20class%3D%22example-button-row%22%3E%0A%20%20%20%20%3Cbutton%20theme%3D%22icon%22%20icon%3D%22print%22%3E%3C%2Fbutton%3E%0A%20%20%20%20%3Cbutton%20theme%3D%22icon%22%20icon%3D%22check%22%20color%3D%22success%22%3E%3C%2Fbutton%3E%0A%20%20%20%20%3Cbutton%20theme%3D%22icon%22%20icon%3D%22bell%22%20color%3D%22negative%22%3E%3C%2Fbutton%3E%0A%20%20%20%20%3Cbutton%20theme%3D%22icon%22%20icon%3D%22caution%22%20color%3D%22warning%22%3E%3C%2Fbutton%3E%0A%20%20%20%20%3Cbutton%20theme%3D%22icon%22%20icon%3D%22rocket%22%20disabled%3E%3C%2Fbutton%3E%0A%20%20%3C%2Fdiv%3E%0A%3C%2Fsection%3E%0A%0A%3Cnovo-divider%3E%3C%2Fnovo-divider%3E%0A%0A%3Csection%3E%0A%20%20%3Cdiv%20class%3D%22example-label%22%3EFab%3C%2Fdiv%3E%0A%20%20%3Cdiv%20class%3D%22example-button-row%22%3E%0A%20%20%20%20%3Cbutton%20theme%3D%22fab%22%3E%0A%20%20%20%20%20%20%3Cnovo-icon%3Eprint%3C%2Fnovo-icon%3E%0A%20%20%20%20%3C%2Fbutton%3E%0A%20%20%20%20%3Cbutton%20theme%3D%22fab%22%20color%3D%22success%22%3E%0A%20%20%20%20%20%20%3Cnovo-icon%3Echeck%3C%2Fnovo-icon%3E%0A%20%20%20%20%3C%2Fbutton%3E%0A%20%20%20%20%3Cbutton%20theme%3D%22fab%22%20icon%3D%22bell%22%20color%3D%22negative%22%3E%3C%2Fbutton%3E%0A%20%20%20%20%3Cbutton%20theme%3D%22fab%22%20icon%3D%22caution-o%22%20color%3D%22warning%22%3E%3C%2Fbutton%3E%0A%20%20%20%20%3Cbutton%20theme%3D%22fab%22%20icon%3D%22rocket%22%20disabled%3E%3C%2Fbutton%3E%0A%20%20%3C%2Fdiv%3E%0A%3C%2Fsection%3E`
    },
    'button-loading': {
        title: 'Loading buttons',
        component: ButtonLoadingExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Loading%20buttons%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'button-loading-example'%2C%0A%20%20%20%20templateUrl%3A%20'button-loading-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'button-loading-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20ButtonLoadingExample%20%7B%0A%20%20loading%3A%20boolean%20%3D%20false%3B%0A%20%20loadingButtonText%3A%20string%20%3D%20'Delete'%3B%0A%20%20fakeRequest()%20%7B%0A%20%20%20%20console.log('making%20fake%20request')%3B%0A%20%20%20%20this.loading%20%3D%20true%3B%0A%20%20%20%20this.loadingButtonText%20%3D%20this.loading%20%3F%20'Removing...%20'%20%3A%20'Delete'%3B%0A%20%20%20%20setTimeout(()%20%3D%3E%20%7B%0A%20%20%20%20%20%20this.loading%20%3D%20false%3B%0A%20%20%20%20%20%20this.loadingButtonText%20%3D%20this.loading%20%3F%20'Removing...%20'%20%3A%20'Delete'%3B%0A%20%20%20%20%7D%2C%205000)%3B%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cbutton%20theme%3D%22primary%22%20icon%3D%22times%22%20%5Bloading%5D%3D%22loading%22%20(click)%3D%22fakeRequest()%22%3E%7B%7BloadingButtonText%7D%7D%3C%2Fbutton%3E%0A`
    },
    'button-inverse': {
        title: 'Invers buttons',
        component: ButtonInverseExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Invers%20buttons%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'button-inverse-example'%2C%0A%20%20%20%20templateUrl%3A%20'button-inverse-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'button-inverse-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20ButtonInverseExample%20%7B%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cdiv%20class%3D%22background%20candidate%22%3E%0A%20%20%3Cbutton%20theme%3D%22secondary%22%20icon%3D%22collapse%22%20inverse%3EActions%3C%2Fbutton%3E%0A%20%20%3Cbutton%20theme%3D%22secondary%22%20icon%3D%22convert%22%20inverse%3EConvert%3C%2Fbutton%3E%0A%20%20%3Cbutton%20theme%3D%22secondary%22%20icon%3D%22convert%22%20inverse%20disabled%3EConvert%3C%2Fbutton%3E%0A%3C%2Fdiv%3E%0A`
    },
    'button-icon': {
        title: 'Icon buttons',
        component: ButtonIconExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Icon%20buttons%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'button-icon-example'%2C%0A%20%20%20%20templateUrl%3A%20'button-icon-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'button-icon-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20ButtonIconExample%20%7B%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cbutton%20theme%3D%22icon%22%20icon%3D%22print%22%3E%3C%2Fbutton%3E%0A%3Cbutton%20theme%3D%22icon%22%20icon%3D%22print%22%3E%3C%2Fbutton%3E%0A`
    },
    'button-fab': {
        title: 'Basic buttons',
        component: ButtonFabExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Basic%20buttons%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'button-fab-example'%2C%0A%20%20%20%20templateUrl%3A%20'button-fab-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'button-fab-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20ButtonFabExample%20%7B%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cbutton%20theme%3D%22fab%22%20color%3D%22success%22%20icon%3D%22check%22%3E%3C%2Fbutton%3E%0A%3Cbutton%20theme%3D%22fab%22%20color%3D%22warning%22%20icon%3D%22caution-o%22%3E%3C%2Fbutton%3E%0A%3Cbutton%20theme%3D%22fab%22%20color%3D%22pulse%22%20icon%3D%22next%22%3E%3C%2Fbutton%3E%0A%3Cbutton%20theme%3D%22fab%22%20color%3D%22grapefruit%22%20icon%3D%22print%22%20inverse%3E%3C%2Fbutton%3E%0A%3Cbutton%20theme%3D%22fab%22%20icon%3D%22neutral%22%20inverse%20disabled%3E%3C%2Fbutton%3E%0A`
    },
    'button-dynamic': {
        title: 'Dynamic buttons',
        component: ButtonDynamicExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Dynamic%20buttons%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'button-dynamic-example'%2C%0A%20%20%20%20templateUrl%3A%20'button-dynamic-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'button-dynamic-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20ButtonDynamicExample%20%7B%0A%20%20theme%3A%20string%20%3D%20'primary'%3B%0A%20%20isChecked%3A%20boolean%20%3D%20false%3B%0A%20%20negativeColor%3A%20string%20%3D%20'negative'%3B%0A%20%20color%3A%20string%20%3D%20'blue'%3B%0A%0A%20%20changeTheme()%20%7B%0A%20%20%20%20const%20i%20%3D%20Math.floor(Math.random()%20*%204)%3B%0A%20%20%20%20this.theme%20%3D%20%5B'primary'%2C%20'secondary'%2C%20'dialogue'%2C%20'standard'%2C%20'icon'%5D%5Bi%5D%3B%0A%20%20%20%20console.log('changed%20theme%20to'%2C%20this.theme)%3B%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cnovo-checkbox%20label%3D%22Disabled%3F%22%20%5B(ngModel)%5D%3D%22isChecked%22%3E%3C%2Fnovo-checkbox%3E%0A%3Cbutton%20%5Btheme%5D%3D%22theme%22%20%5Bicon%5D%3D%22isChecked%20%3F%20'check'%20%3A%20'times'%22%20(click)%3D%22changeTheme()%22%20%5Bdisabled%5D%3D%22isChecked%22%3EChange%0A%20%20Theme%3C%2Fbutton%3E`
    },
    'button-dialogue': {
        title: 'Dialogue buttons',
        component: ButtonDialogueExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Dialogue%20buttons%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'button-dialogue-example'%2C%0A%20%20%20%20templateUrl%3A%20'button-dialogue-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'button-dialogue-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20ButtonDialogueExample%20%7B%7D%0A`,
        cssSource: `section%20%7B%0A%20%20display%3A%20table%3B%0A%7D%0A%0A.example-label%20%7B%0A%20%20display%3A%20table-cell%3B%0A%20%20font-size%3A%2014px%3B%0A%20%20margin-left%3A%208px%3B%0A%20%20min-width%3A%20120px%3B%0A%20%20padding-left%3A%208px%3B%0A%7D%0A%0A.example-button-row%20%7B%0A%20%20display%3A%20table-cell%3B%0A%20%20width%3A%20490px%3B%0A%7D%0A%0A.example-button-row%20.novo-button%20%7B%0A%20%20margin%3A%208px%208px%208px%200%3B%0A%7D%0A%0A.example-flex-container%20%7B%0A%20%20display%3A%20flex%3B%0A%20%20justify-content%3A%20space-between%3B%0A%20%20flex-wrap%3A%20wrap%3B%0A%7D%0A%0A.example-button-container%20%7B%0A%20%20display%3A%20flex%3B%0A%20%20justify-content%3A%20center%3B%0A%20%20width%3A%20120px%3B%0A%7D%0A`,
        htmlSource: `%3Csection%3E%0A%20%20%3Cdiv%20class%3D%22example-label%22%3EDefault%3C%2Fdiv%3E%0A%20%20%3Cdiv%20class%3D%22example-button-row%22%3E%0A%20%20%20%20%3Cbutton%20theme%3D%22dialogue%22%20icon%3D%22addcard%22%3EAdd%20Card%3C%2Fbutton%3E%0A%20%20%20%20%3Cbutton%20theme%3D%22dialogue%22%20icon%3D%22check%22%20color%3D%22success%22%3EDialogue%3C%2Fbutton%3E%0A%20%20%20%20%3Cbutton%20theme%3D%22dialogue%22%20disabled%3EDialogue%3C%2Fbutton%3E%0A%20%20%3C%2Fdiv%3E%0A%3C%2Fsection%3E%0A%0A%3Cnovo-divider%3E%3C%2Fnovo-divider%3E%0A%0A%3Csection%3E%0A%20%20%3Cdiv%20class%3D%22example-label%22%3ESmall%3C%2Fdiv%3E%0A%20%20%3Cdiv%20class%3D%22example-button-row%22%3E%0A%20%20%20%20%3Cbutton%20theme%3D%22dialogue%22%20icon%3D%22addcard%22%20size%3D%22small%22%3EAdd%20Card%3C%2Fbutton%3E%0A%20%20%20%20%3Cbutton%20theme%3D%22dialogue%22%20icon%3D%22check%22%20color%3D%22success%22%20size%3D%22small%22%3EDialogue%3C%2Fbutton%3E%0A%20%20%20%20%3Cbutton%20theme%3D%22dialogue%22%20size%3D%22small%22%20disabled%3EDialogue%3C%2Fbutton%3E%0A%20%20%3C%2Fdiv%3E%0A%3C%2Fsection%3E%0A%0A%3Cnovo-divider%3E%3C%2Fnovo-divider%3E%0A%0A%3Csection%3E%0A%20%20%3Cdiv%20class%3D%22example-label%22%3ELarge%3C%2Fdiv%3E%0A%20%20%3Cdiv%20class%3D%22example-button-row%22%3E%0A%20%20%20%20%3Cbutton%20theme%3D%22dialogue%22%20icon%3D%22addcard%22%20size%3D%22large%22%3EAdd%20Card%3C%2Fbutton%3E%0A%20%20%20%20%3Cbutton%20theme%3D%22dialogue%22%20icon%3D%22check%22%20color%3D%22success%22%20size%3D%22large%22%3EDialogue%3C%2Fbutton%3E%0A%20%20%20%20%3Cbutton%20theme%3D%22dialogue%22%20size%3D%22large%22%20disabled%3EDialogue%3C%2Fbutton%3E%0A%20%20%3C%2Fdiv%3E%0A%3C%2Fsection%3E%0A%0A%3Cnovo-divider%3E%3C%2Fnovo-divider%3E%0A%0A%3Csection%20class%3D%22bgc-ocean%22%3E%0A%20%20%3Cdiv%20class%3D%22example-label%20tc-white%22%3EInverse%3C%2Fdiv%3E%0A%20%20%3Cdiv%20class%3D%22example-button-row%22%3E%0A%20%20%20%20%3Cbutton%20theme%3D%22dialogue%22%20icon%3D%22list-o%22%20side%3D%22left%22%20color%3D%22white%22%20inverse%3EAdd%2FRemove%3C%2Fbutton%3E%0A%20%20%20%20%3Cbutton%20theme%3D%22dialogue%22%20icon%3D%22addcard%22%20color%3D%22white%22%20inverse%3EAdd%20Card%3C%2Fbutton%3E%0A%20%20%20%20%3Cbutton%20theme%3D%22dialogue%22%20icon%3D%22check%22%20color%3D%22success%22%20inverse%3EDialogue%3C%2Fbutton%3E%0A%20%20%20%20%3Cbutton%20theme%3D%22dialogue%22%20color%3D%22white%22%20inverse%20disabled%3EDialogue%3C%2Fbutton%3E%0A%20%20%3C%2Fdiv%3E%0A%3C%2Fsection%3E`
    },
    'breadcrumb-usage': {
        title: 'Breadcrumb Usage Example',
        component: BreadcrumbUsageExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Breadcrumb%20Usage%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'breadcrumb-usage-example'%2C%0A%20%20%20%20templateUrl%3A%20'breadcrumb-usage-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'breadcrumb-usage-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20BreadcrumbUsageExample%20%7B%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Csection%3E%0A%20%20%3Cnovo-breadcrumb%3E%0A%20%20%20%20%3Cnovo-breadcrumb-item%3E%0A%20%20%20%20%20%20%3Ca%20routerLink%3D%22%2Fcomponents%2Fget-start%22%3EHome%3C%2Fa%3E%0A%20%20%20%20%3C%2Fnovo-breadcrumb-item%3E%0A%20%20%20%20%3Cnovo-breadcrumb-item%3E%0A%20%20%20%20%20%20%3Cspan%3EComponents%3C%2Fspan%3E%0A%20%20%20%20%3C%2Fnovo-breadcrumb-item%3E%0A%20%20%3C%2Fnovo-breadcrumb%3E%0A%3C%2Fsection%3E`
    },
    'breadcrumb-source-usage': {
        title: 'Breadcrumb Dynamic Usage Example',
        component: BreadcrumbSourceUsageExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Breadcrumb%20Dynamic%20Usage%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'breadcrumb-source-usage-example'%2C%0A%20%20%20%20templateUrl%3A%20'breadcrumb-source-usage-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'breadcrumb-source-usage-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20BreadcrumbSourceUsageExample%20%7B%0A%20%20source%20%3D%20%5B%0A%20%20%20%20%7B%20title%3A%20'Home'%2C%20showMenu%3A%20false%2C%20link%3A%20'%23%2Fcomponents'%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20title%3A%20'Components'%2C%0A%20%20%20%20%20%20link%3A%20'%23%2Fcomponents%2Fbreadcrumb'%2C%0A%20%20%20%20%20%20showMenu%3A%20true%2C%0A%20%20%20%20%20%20noNavigation%3A%20true%2C%0A%20%20%20%20%20%20isSearch%3A%20true%2C%0A%20%20%20%20%20%20menuList%3A%20%5B%0A%20%20%20%20%20%20%20%20%7B%20name%3A%20'Colors'%2C%20link%3A%20'%23%2Fdesign%2Fcolors'%2C%20target%3A%20'_blank'%20%7D%2C%0A%20%20%20%20%20%20%20%20%7B%20name%3A%20'Composition'%2C%20link%3A%20'%23%2Fdesign%2Fcomponsition'%2C%20linkType%3A%20'routerLink'%20%7D%2C%0A%20%20%20%20%20%20%20%20%7B%20name%3A%20'Typography'%2C%20link%3A%20'%23%2Fdesign%2Ftypography'%2C%20linkType%3A%20'routerLink'%20%7D%2C%0A%20%20%20%20%20%20%5D%2C%0A%20%20%20%20%7D%2C%0A%20%20%5D%3B%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Csection%3E%0A%20%20%3Cnovo-breadcrumb%20%5Bsource%5D%3D%22source%22%3E%3C%2Fnovo-breadcrumb%3E%0A%3C%2Fsection%3E`
    },
    'avatar-usage': {
        title: 'Avatar Usage',
        component: AvatarUsageExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Avatar%20Usage%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'avatar-usage-example'%2C%0A%20%20%20%20templateUrl%3A%20'avatar-usage-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'avatar-usage-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20AvatarUsageExample%20%7B%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A%3Ahost%20%7B%0A%20%20display%3A%20flex%3B%0A%20%20gap%3A%201rem%3B%0A%7D%0A`,
        htmlSource: `%3Cnovo-avatar%20%5Bsource%5D%3D%22%7Bname%3A%20'Brian%20Kimball'%7D%22%20%5Bmenu%5D%3D%22menu%22%3E%3C%2Fnovo-avatar%3E%0A%3Cnovo-avatar%20image%3D%22https%3A%2F%2Frobohash.org%2Fjgodi%22%20color%3D%22bittersweet%22%3E%3C%2Fnovo-avatar%3E%0A%3Cnovo-avatar%20image%3D%22https%3A%2F%2Fwww.bullhorn.com%2Fwp-content%2Fuploads%2F2021%2F08%2Fbullhorn_bull.svg%22%20shape%3D%22square%22%3E%3C%2Fnovo-avatar%3E%0A%0A%0A%3C!--%20Menu%20Template%20--%3E%0A%3Cnovo-menu%20%23menu%3E%0A%20%20%3Cnovo-option%20*menuItem%3E%0A%20%20%20%20%3Cnovo-icon%3Eperson-circle%3C%2Fnovo-icon%3E%0A%20%20%20%20%3Cnovo-text%3EMy%20Profile%3C%2Fnovo-text%3E%0A%20%20%3C%2Fnovo-option%3E%0A%20%20%3Cnovo-option%20*menuItem%3E%0A%20%20%20%20%3Cnovo-icon%3Erate%3C%2Fnovo-icon%3E%0A%20%20%20%20%3Cnovo-text%3EBilling%3C%2Fnovo-text%3E%0A%20%20%3C%2Fnovo-option%3E%0A%20%20%3Cnovo-option%20*menuItem%3E%0A%20%20%20%20%3Cnovo-icon%3Ebell%3C%2Fnovo-icon%3E%0A%20%20%20%20%3Cnovo-text%3ENotifications%3C%2Fnovo-text%3E%0A%20%20%3C%2Fnovo-option%3E%0A%20%20%3Cnovo-divider%20*menuItem%3E%3C%2Fnovo-divider%3E%0A%20%20%3Cnovo-option%20*menuItem%3E%0A%20%20%20%20%3Cnovo-icon%3Econfigure%3C%2Fnovo-icon%3E%0A%20%20%20%20%3Cnovo-text%3EMy%20Settings%3C%2Fnovo-text%3E%0A%20%20%3C%2Fnovo-option%3E%0A%20%20%3Cnovo-option%20*menuItem%3E%0A%20%20%20%20%3Cnovo-icon%3Ecompany%3C%2Fnovo-icon%3E%0A%20%20%20%20%3Cnovo-text%3EOrg%20Settings%3C%2Fnovo-text%3E%0A%20%20%3C%2Fnovo-option%3E%0A%20%20%3Cnovo-divider%20*menuItem%3E%3C%2Fnovo-divider%3E%0A%20%20%3Cnovo-option%20*menuItem%3E%0A%20%20%20%20%3Cnovo-icon%3Elogout%3C%2Fnovo-icon%3E%0A%20%20%20%20%3Cnovo-text%3ELog%20out%3C%2Fnovo-text%3E%0A%20%20%3C%2Fnovo-option%3E%0A%3C%2Fnovo-menu%3E`
    },
    'avatar-stack-usage': {
        title: 'Avatar Stack Usage',
        component: AvatarStackUsageExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Avatar%20Stack%20Usage%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'avatar-stack-usage-example'%2C%0A%20%20%20%20templateUrl%3A%20'avatar-stack-usage-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'avatar-stack-usage-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20AvatarStackUsageExample%20%7B%0A%20%20public%20profiles%3A%20any%5B%5D%20%3D%20%5B%0A%20%20%20%20%7B%0A%20%20%20%20%20%20title%3A%20'Central%20Bank'%2C%0A%20%20%20%20%20%20name%3A%20'Central%20Bank'%2C%0A%20%20%20%20%20%20email%3A%20'new-bank-inquiries%40centralbank.com'%2C%0A%20%20%20%20%20%20phone%3A%20'(651)%20555-1234'%2C%0A%20%20%20%20%20%20address%3A%20%7B%20city%3A%20'Washington'%2C%20state%3A%20'DC'%20%7D%2C%0A%20%20%20%20%20%20searchEntity%3A%20'ClientCorporation'%2C%0A%20%20%20%20%20%20type%3A%20'company'%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20title%3A%20'Federal%20Bank'%2C%0A%20%20%20%20%20%20name%3A%20'Federal%20Bank'%2C%0A%20%20%20%20%20%20email%3A%20'info%40federalbank.com'%2C%0A%20%20%20%20%20%20phone%3A%20'(545)%20555-1212'%2C%0A%20%20%20%20%20%20address%3A%20%7B%20city%3A%20'Arlington'%2C%20state%3A%20'VA'%20%7D%2C%0A%20%20%20%20%20%20searchEntity%3A%20'ClientCorporation'%2C%0A%20%20%20%20%20%20type%3A%20'company'%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20title%3A%20'Aaron%20Burr'%2C%0A%20%20%20%20%20%20firstName%3A%20'Aaron'%2C%0A%20%20%20%20%20%20lastName%3A%20'Burr'%2C%0A%20%20%20%20%20%20name%3A%20'Aaron%20Burr'%2C%0A%20%20%20%20%20%20companyName%3A%20'Central%20Bank'%2C%0A%20%20%20%20%20%20email%3A%20'aburr%40centralbank.com'%2C%0A%20%20%20%20%20%20phone%3A%20'(333)%20555-3434'%2C%0A%20%20%20%20%20%20address%3A%20%7B%20city%3A%20'Washington'%2C%20state%3A%20'DC'%20%7D%2C%0A%20%20%20%20%20%20status%3A%20'Hold'%2C%0A%20%20%20%20%20%20searchEntity%3A%20'ClientContact'%2C%0A%20%20%20%20%20%20type%3A%20'person'%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20title%3A%20'Alexander%20Hamilton'%2C%0A%20%20%20%20%20%20firstName%3A%20'Alexander'%2C%0A%20%20%20%20%20%20lastName%3A%20'Hamilton'%2C%0A%20%20%20%20%20%20name%3A%20'Alexander%20Hamilton'%2C%0A%20%20%20%20%20%20companyName%3A%20'Federal%20Bank'%2C%0A%20%20%20%20%20%20email%3A%20'ahamilton%40federalbank.com'%2C%0A%20%20%20%20%20%20phone%3A%20'(333)%20555-2222'%2C%0A%20%20%20%20%20%20address%3A%20%7B%20city%3A%20'Arlington'%2C%20state%3A%20'VA'%20%7D%2C%0A%20%20%20%20%20%20status%3A%20'Active'%2C%0A%20%20%20%20%20%20searchEntity%3A%20'ClientContact'%2C%0A%20%20%20%20%20%20type%3A%20'person'%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20title%3A%20'Ben%20Franklin'%2C%0A%20%20%20%20%20%20firstName%3A%20'Ben'%2C%0A%20%20%20%20%20%20lastName%3A%20'Franklin'%2C%0A%20%20%20%20%20%20name%3A%20'Ben%20Franklin'%2C%0A%20%20%20%20%20%20email%3A%20'bfranklin%40gmail.com'%2C%0A%20%20%20%20%20%20phone%3A%20'(654)%20525-2222'%2C%0A%20%20%20%20%20%20address%3A%20%7B%20city%3A%20'Boston'%2C%20state%3A%20'MA'%20%7D%2C%0A%20%20%20%20%20%20status%3A%20'Interviewing'%2C%0A%20%20%20%20%20%20searchEntity%3A%20'Candidate'%2C%0A%20%20%20%20%20%20type%3A%20'candidate'%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20title%3A%20'Thomas%20Jefferson'%2C%0A%20%20%20%20%20%20firstName%3A%20'Thomas'%2C%0A%20%20%20%20%20%20lastName%3A%20'Jefferson'%2C%0A%20%20%20%20%20%20name%3A%20'Thomas%20Jefferson'%2C%0A%20%20%20%20%20%20email%3A%20'tjefferson%40usa.com'%2C%0A%20%20%20%20%20%20phone%3A%20'(123)%20542-1234'%2C%0A%20%20%20%20%20%20address%3A%20%7B%20city%3A%20'Arlington'%2C%20state%3A%20'VA'%20%7D%2C%0A%20%20%20%20%20%20status%3A%20'New%20Lead'%2C%0A%20%20%20%20%20%20searchEntity%3A%20'Candidate'%2C%0A%20%20%20%20%20%20type%3A%20'candidate'%2C%0A%20%20%20%20%7D%2C%0A%20%20%5D%3B%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cnovo-avatar-stack%3E%0A%20%20%3Cnovo-avatar%20*ngFor%3D%22let%20profile%20of%20profiles%22%20%5Bsource%5D%3D%22profile%22%3E%3C%2Fnovo-avatar%3E%0A%3C%2Fnovo-avatar-stack%3E`
    },
    'autocomplete-with-chips': {
        title: 'Autocomplete With Chips',
        component: AutocompleteWithChipsExample,
        tsSource: `import%20%7B%20COMMA%2C%20ENTER%20%7D%20from%20'%40angular%2Fcdk%2Fkeycodes'%3B%0Aimport%20%7B%20Component%2C%20ElementRef%2C%20ViewChild%20%7D%20from%20'%40angular%2Fcore'%3B%0Aimport%20%7B%20UntypedFormControl%20%7D%20from%20'%40angular%2Fforms'%3B%0Aimport%20%7B%20NovoOptionSelectedEvent%20%7D%20from%20'novo-elements'%3B%0A%2F%2F%20import%20%7B%20NovoChipInputEvent%20%7D%20from%20'novo-elements'%3B%0Aimport%20%7B%20Observable%20%7D%20from%20'rxjs'%3B%0Aimport%20%7B%20map%2C%20startWith%20%7D%20from%20'rxjs%2Foperators'%3B%0A%0A%2F**%0A%20*%20%40title%20Autocomplete%20With%20Chips%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'autocomplete-with-chips-example'%2C%0A%20%20%20%20templateUrl%3A%20'autocomplete-with-chips-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'autocomplete-with-chips-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20AutocompleteWithChipsExample%20%7B%0A%20%20visible%20%3D%20true%3B%0A%20%20selectable%20%3D%20true%3B%0A%20%20removable%20%3D%20true%3B%0A%20%20separatorKeysCodes%3A%20number%5B%5D%20%3D%20%5BENTER%2C%20COMMA%5D%3B%0A%20%20searchCtrl%20%3D%20new%20UntypedFormControl()%3B%0A%20%20fieldCtrl%20%3D%20new%20UntypedFormControl(%5B'Lemon'%5D)%3B%0A%20%20filteredFruits%3A%20Observable%3Cstring%5B%5D%3E%3B%0A%20%20allFruits%3A%20string%5B%5D%20%3D%20%5B'Apple'%2C%20'Lemon'%2C%20'Lime'%2C%20'Orange'%2C%20'Strawberry'%5D%3B%0A%0A%20%20%40ViewChild('chipInput')%20chipInput%3A%20ElementRef%3CHTMLInputElement%3E%3B%0A%0A%20%20constructor()%20%7B%0A%20%20%20%20this.filteredFruits%20%3D%20this.searchCtrl.valueChanges.pipe(%0A%20%20%20%20%20%20startWith(null)%2C%0A%20%20%20%20%20%20map((fruit%3A%20string%20%7C%20null)%20%3D%3E%20(fruit%20%3F%20this._filter(fruit)%20%3A%20this.allFruits.slice()))%2C%0A%20%20%20%20)%3B%0A%20%20%7D%0A%0A%20%20add(event%3A%20any)%3A%20void%20%7B%7D%0A%0A%20%20remove(fruit%3A%20string)%3A%20void%20%7B%7D%0A%0A%20%20selected(event%3A%20NovoOptionSelectedEvent)%3A%20void%20%7B%7D%0A%0A%20%20private%20_filter(value%3A%20string)%3A%20string%5B%5D%20%7B%0A%20%20%20%20const%20filterValue%20%3D%20value.toLowerCase()%3B%0A%0A%20%20%20%20return%20this.allFruits.filter((fruit)%20%3D%3E%20fruit.toLowerCase().indexOf(filterValue)%20%3D%3D%3D%200)%3B%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cnovo-field%20class%3D%22example-chip-list%22%3E%0A%20%20%3Cnovo-label%3EFavorite%20Fruits%3C%2Fnovo-label%3E%0A%20%20%3Cnovo-chip-list%20%23chipList%20aria-label%3D%22Fruit%20selection%22%20%5BformControl%5D%3D%22fieldCtrl%22%3E%0A%20%20%20%20%3Cnovo-chip%0A%20%20%20%20%20%20*ngFor%3D%22let%20fruit%20of%20chipList.value%22%0A%20%20%20%20%20%20%5Bvalue%5D%3D%22fruit%22%0A%20%20%20%20%20%20(removed)%3D%22remove(fruit)%22%3E%0A%20%20%20%20%20%20%7B%7Bfruit%7D%7D%0A%20%20%20%20%20%20%3Cnovo-icon%20novoChipRemove%3Eclose%3C%2Fnovo-icon%3E%0A%20%20%20%20%3C%2Fnovo-chip%3E%0A%20%20%20%20%3Cinput%0A%20%20%20%20%20%20%23chipInput%0A%20%20%20%20%20%20novoChipInput%0A%20%20%20%20%20%20placeholder%3D%22New%20fruit...%22%0A%20%20%20%20%20%20autocomplete%3D%22off%22%0A%20%20%20%20%20%20%5BformControl%5D%3D%22searchCtrl%22%0A%20%20%20%20%20%20%5BnovoChipInputSeparatorKeyCodes%5D%3D%22separatorKeysCodes%22%0A%20%20%20%20%20%20(novoChipInputTokenEnd)%3D%22add(%24event)%22%20%2F%3E%0A%20%20%3C%2Fnovo-chip-list%3E%0A%20%20%3Cnovo-autocomplete%20makeFirstItemActive%20(optionSelected)%3D%22selected(%24event)%22%20multiple%3E%0A%20%20%20%20%3Cnovo-option%20*ngFor%3D%22let%20fruit%20of%20filteredFruits%20%7C%20async%22%20%5Bvalue%5D%3D%22fruit%22%3E%0A%20%20%20%20%20%20%7B%7Bfruit%7D%7D%0A%20%20%20%20%3C%2Fnovo-option%3E%0A%20%20%3C%2Fnovo-autocomplete%3E%0A%3C%2Fnovo-field%3E%0A%0A%3Cdiv%3EChip%20List%20Value%3A%20%7B%7BfieldCtrl.value%7D%7D%3C%2Fdiv%3E%0A%3Cdiv%3ESearch%20Input%20Control%20Value%3A%20%7B%7BsearchCtrl.value%7D%7D%3C%2Fdiv%3E`
    },
    'autocomplete-usage': {
        title: 'Autocomplete Usage',
        component: AutocompleteUsageExample,
        tsSource: `import%20%7B%20Component%2C%20OnInit%20%7D%20from%20'%40angular%2Fcore'%3B%0Aimport%20%7B%20UntypedFormControl%20%7D%20from%20'%40angular%2Fforms'%3B%0Aimport%20%7B%20Observable%20%7D%20from%20'rxjs'%3B%0Aimport%20%7B%20map%2C%20startWith%20%7D%20from%20'rxjs%2Foperators'%3B%0A%0A%2F**%0A%20*%20%40title%20Autocomplete%20Usage%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'autocomplete-usage-example'%2C%0A%20%20%20%20templateUrl%3A%20'autocomplete-usage-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'autocomplete-usage-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20AutocompleteUsageExample%20implements%20OnInit%20%7B%0A%20%20myControl%20%3D%20new%20UntypedFormControl()%3B%0A%20%20options%3A%20string%5B%5D%20%3D%20%5B'One'%2C%20'Two'%2C%20'Three'%5D%3B%0A%20%20filteredOptions%3A%20Observable%3Cstring%5B%5D%3E%3B%0A%0A%20%20ngOnInit()%20%7B%0A%20%20%20%20this.filteredOptions%20%3D%20this.myControl.valueChanges.pipe(%0A%20%20%20%20%20%20startWith('')%2C%0A%20%20%20%20%20%20map((value)%20%3D%3E%20this._filter(value))%2C%0A%20%20%20%20)%3B%0A%20%20%7D%0A%0A%20%20private%20_filter(value%3A%20string)%3A%20string%5B%5D%20%7B%0A%20%20%20%20const%20filterValue%20%3D%20value.toLowerCase()%3B%0A%0A%20%20%20%20return%20this.options.filter((option)%20%3D%3E%20option.toLowerCase().includes(filterValue))%3B%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cform%20class%3D%22example-form%22%3E%0A%20%20%3Cnovo-field%20class%3D%22example-full-width%22%3E%0A%20%20%20%20%3Cnovo-label%3ENumber%3C%2Fnovo-label%3E%0A%20%20%20%20%3Cinput%20type%3D%22text%22%0A%20%20%20%20%20%20novoInput%0A%20%20%20%20%20%20%5BformControl%5D%3D%22myControl%22%0A%20%20%20%20%20%20placeholder%3D%22Pick%20one%22%0A%20%20%20%20%20%20autocomplete%3D%22off%22%20%2F%3E%0A%20%20%20%20%3Cnovo-autocomplete%20%23auto%3E%0A%20%20%20%20%20%20%3Cnovo-option%20*ngFor%3D%22let%20option%20of%20filteredOptions%20%7C%20async%22%20%5Bvalue%5D%3D%22option%22%3E%0A%20%20%20%20%20%20%20%20%7B%7Boption%7D%7D%0A%20%20%20%20%20%20%3C%2Fnovo-option%3E%0A%20%20%20%20%3C%2Fnovo-autocomplete%3E%0A%20%20%3C%2Fnovo-field%3E%0A%3C%2Fform%3E`
    },
    'autocomplete-textarea': {
        title: 'Autocomplete TextArea',
        component: AutocompleteTextareaExample,
        tsSource: `import%20%7B%20Component%2C%20OnInit%20%7D%20from%20'%40angular%2Fcore'%3B%0Aimport%20%7B%20UntypedFormControl%20%7D%20from%20'%40angular%2Fforms'%3B%0Aimport%20%7B%20NovoFieldControl%20%7D%20from%20'novo-elements'%3B%0Aimport%20%7B%20Observable%20%7D%20from%20'rxjs'%3B%0Aimport%20%7B%20map%2C%20startWith%20%7D%20from%20'rxjs%2Foperators'%3B%0A%0A%2F**%0A%20*%20%40title%20Autocomplete%20TextArea%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'autocomplete-textarea-example'%2C%0A%20%20%20%20templateUrl%3A%20'autocomplete-textarea-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'autocomplete-textarea-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20AutocompleteTextareaExample%20implements%20OnInit%20%7B%0A%20%20myControl%20%3D%20new%20UntypedFormControl()%3B%0A%20%20myOtherControl%20%3D%20new%20UntypedFormControl()%3B%0A%0A%20%20options%3A%20string%5B%5D%20%3D%20%5B'One'%2C%20'Two'%2C%20'Three'%5D%3B%0A%20%20filteredOptions%3A%20Observable%3Cstring%5B%5D%3E%3B%0A%0A%20%20ngOnInit()%20%7B%0A%20%20%20%20this.filteredOptions%20%3D%20this.myControl.valueChanges.pipe(%0A%20%20%20%20%20%20startWith('')%2C%0A%20%20%20%20%20%20map((value)%20%3D%3E%20this._filter(value))%2C%0A%20%20%20%20)%3B%0A%20%20%7D%0A%0A%20%20public%20triggerFn()%20%7B%0A%20%20%20%20return%20(control%3A%20NovoFieldControl%3Cany%3E)%20%3D%3E%20%7B%0A%20%20%20%20%20%20console.log('control'%2C%20control.lastKeyValue%20%3D%3D%3D%20'%24')%3B%0A%20%20%20%20%20%20return%20control.lastKeyValue%20%3D%3D%3D%20'%24'%3B%0A%20%20%20%20%7D%3B%0A%20%20%7D%0A%0A%20%20private%20_filter(value%3A%20string)%3A%20string%5B%5D%20%7B%0A%20%20%20%20return%20this.options%3B%0A%20%20%20%20%2F%2F%20const%20filterValue%20%3D%20value.toLowerCase()%3B%0A%20%20%20%20%2F%2F%20return%20this.options.filter((option)%20%3D%3E%20option.toLowerCase().includes(filterValue))%3B%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cform%20class%3D%22example-form%22%3E%0A%20%20%3Cnovo-field%20class%3D%22example-full-width%22%3E%0A%20%20%20%20%3Cnovo-label%3ENumber%3C%2Fnovo-label%3E%0A%20%20%20%20%3Ctextarea%0A%20%20%20%20%20%20novoInput%0A%20%20%20%20%20%20%5BformControl%5D%3D%22myControl%22%0A%20%20%20%20%20%20placeholder%3D%22Type%20%24%20to%20trigger%20autocomplete%22%0A%20%20%20%20%20%20autocomplete%3D%22off%22%3E%3C%2Ftextarea%3E%0A%20%20%20%20%3Cnovo-autocomplete%20%5BtriggerOn%5D%3D%22triggerFn()%22%20%23auto%3E%0A%20%20%20%20%20%20%3Cnovo-option%20*ngFor%3D%22let%20option%20of%20filteredOptions%20%7C%20async%22%20%5Bvalue%5D%3D%22option%22%3E%0A%20%20%20%20%20%20%20%20%7B%7Boption%7D%7D%0A%20%20%20%20%20%20%3C%2Fnovo-option%3E%0A%20%20%20%20%3C%2Fnovo-autocomplete%3E%0A%20%20%3C%2Fnovo-field%3E%0A%0A%20%20%3Cnovo-field%20appearance%3D%22fill%22%3E%0A%20%20%20%20%3Cnovo-label%3EToppings%3C%2Fnovo-label%3E%0A%20%20%20%20%3Cnovo-select%20%5BformControl%5D%3D%22myOtherControl%22%20multiple%3E%0A%20%20%20%20%20%20%3Cnovo-option%20*ngFor%3D%22let%20option%20of%20filteredOptions%20%7C%20async%22%20%5Bvalue%5D%3D%22option%22%3E%7B%7Boption%7D%7D%3C%2Fnovo-option%3E%0A%20%20%20%20%3C%2Fnovo-select%3E%0A%20%20%3C%2Fnovo-field%3E%0A%3C%2Fform%3E`
    },
    'autocomplete-stacked-chips': {
        title: 'Autocomplete Stacked Chips',
        component: AutocompleteStackedChipsExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0Aimport%20%7B%20UntypedFormControl%20%7D%20from%20'%40angular%2Fforms'%3B%0Aimport%20%7B%20NovoOptionSelectedEvent%20%7D%20from%20'novo-elements'%3B%0A%2F%2F%20import%20%7B%20NovoChipInputEvent%20%7D%20from%20'novo-elements'%3B%0Aimport%20%7B%20Observable%20%7D%20from%20'rxjs'%3B%0Aimport%20%7B%20map%2C%20startWith%20%7D%20from%20'rxjs%2Foperators'%3B%0A%0Ainterface%20ShiftData%20%7B%0A%20%20id%3A%20number%3B%0A%20%20startTime%3A%20string%3B%0A%20%20endTime%3A%20string%3B%0A%20%20numAssigned%3A%20number%3B%0A%20%20openings%3A%20number%3B%0A%7D%0A%0A%2F**%0A%20*%20%40title%20Autocomplete%20Stacked%20Chips%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'autocomplete-stacked-chips-example'%2C%0A%20%20%20%20templateUrl%3A%20'autocomplete-stacked-chips-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'autocomplete-stacked-chips-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20AutocompleteStackedChipsExample%20%7B%0A%20%20filteredShifts%3A%20Observable%3CShiftData%5B%5D%3E%3B%0A%20%20allShifts%3A%20ShiftData%5B%5D%20%3D%20ALL_SHIFTS%3B%0A%20%20searchCtrl%20%3D%20new%20UntypedFormControl()%3B%0A%20%20shiftCtrl%20%3D%20new%20UntypedFormControl(ALL_SHIFTS.slice(0%2C%203))%3B%0A%0A%20%20constructor()%20%7B%0A%20%20%20%20this.filteredShifts%20%3D%20this.searchCtrl.valueChanges.pipe(%0A%20%20%20%20%20%20startWith(null)%2C%0A%20%20%20%20%20%20map((shift%3A%20string%20%7C%20null)%20%3D%3E%20(shift%20%3F%20this._filter(shift)%20%3A%20this.allShifts.slice()))%2C%0A%20%20%20%20)%3B%0A%20%20%7D%0A%0A%20%20add(event%3A%20any)%3A%20void%20%7B%7D%0A%0A%20%20remove(shift%3A%20ShiftData)%3A%20void%20%7B%7D%0A%0A%20%20selected(event%3A%20NovoOptionSelectedEvent)%3A%20void%20%7B%7D%0A%0A%20%20compareById(o1%3A%20any%2C%20o2%3A%20any)%20%7B%0A%20%20%20%20return%20o1.id%20%3D%3D%3D%20o2.id%3B%0A%20%20%7D%0A%0A%20%20private%20_filter(value%3A%20string)%3A%20ShiftData%5B%5D%20%7B%0A%20%20%20%20const%20filterValue%20%3D%20value.toLowerCase()%3B%0A%20%20%20%20return%20this.allShifts.filter((shift)%20%3D%3E%20shift.startTime.toLowerCase().indexOf(filterValue)%20%3D%3D%3D%200)%3B%0A%20%20%7D%0A%7D%0A%0Aconst%20ALL_SHIFTS%3A%20ShiftData%5B%5D%20%3D%20%5B%0A%20%20%7B%0A%20%20%20%20id%3A%20101%2C%0A%20%20%20%20startTime%3A%20'2021-02-23T11%3A00-05%3A00'%2C%0A%20%20%20%20endTime%3A%20'2021-02-23T15%3A00-05%3A00'%2C%0A%20%20%20%20numAssigned%3A%202%2C%0A%20%20%20%20openings%3A%205%2C%0A%20%20%7D%2C%0A%20%20%7B%0A%20%20%20%20id%3A%20102%2C%0A%20%20%20%20startTime%3A%20'2021-02-24T11%3A00-05%3A00'%2C%0A%20%20%20%20endTime%3A%20'2021-02-24T15%3A00-05%3A00'%2C%0A%20%20%20%20numAssigned%3A%201%2C%0A%20%20%20%20openings%3A%202%2C%0A%20%20%7D%2C%0A%20%20%7B%0A%20%20%20%20id%3A%20103%2C%0A%20%20%20%20startTime%3A%20'2021-02-25T11%3A00-05%3A00'%2C%0A%20%20%20%20endTime%3A%20'2021-02-25T15%3A00-05%3A00'%2C%0A%20%20%20%20numAssigned%3A%200%2C%0A%20%20%20%20openings%3A%201%2C%0A%20%20%7D%2C%0A%20%20%7B%0A%20%20%20%20id%3A%20104%2C%0A%20%20%20%20startTime%3A%20'2021-02-26T11%3A00-05%3A00'%2C%0A%20%20%20%20endTime%3A%20'2021-02-26T15%3A00-05%3A00'%2C%0A%20%20%20%20numAssigned%3A%203%2C%0A%20%20%20%20openings%3A%203%2C%0A%20%20%7D%2C%0A%20%20%7B%0A%20%20%20%20id%3A%20105%2C%0A%20%20%20%20startTime%3A%20'2021-02-27T11%3A00-05%3A00'%2C%0A%20%20%20%20endTime%3A%20'2021-02-27T15%3A00-05%3A00'%2C%0A%20%20%20%20numAssigned%3A%202%2C%0A%20%20%20%20openings%3A%204%2C%0A%20%20%7D%2C%0A%20%20%7B%0A%20%20%20%20id%3A%20106%2C%0A%20%20%20%20startTime%3A%20'2021-02-28T11%3A00-05%3A00'%2C%0A%20%20%20%20endTime%3A%20'2021-02-28T15%3A00-05%3A00'%2C%0A%20%20%20%20numAssigned%3A%2022%2C%0A%20%20%20%20openings%3A%2050%2C%0A%20%20%7D%2C%0A%5D%3B%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cnovo-field%20class%3D%22example-chip-list%22%3E%0A%20%20%3Cnovo-label%3EShifts%3C%2Fnovo-label%3E%0A%20%20%3Cnovo-chip-list%0A%20%20%20%20%23chipList%0A%20%20%20%20stacked%0A%20%20%20%20aria-label%3D%22Shift%20selection%22%0A%20%20%20%20%5BformControl%5D%3D%22shiftCtrl%22%0A%20%20%20%20%5BcompareWith%5D%3D%22compareById%22%3E%0A%20%20%20%20%3Cnovo-chip%0A%20%20%20%20%20%20*ngFor%3D%22let%20shift%20of%20chipList.value%22%0A%20%20%20%20%20%20(removed)%3D%22remove(shift)%22%3E%0A%20%20%20%20%20%20%3Cnovo-flex%20gap%3D%221rem%22%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-text%3E%0A%20%20%20%20%20%20%20%20%20%20%3Cnovo-icon%3Ecalendar%3C%2Fnovo-icon%3E%0A%20%20%20%20%20%20%20%20%20%20%7B%7Bshift.startTime%20%7C%20isoDate%7D%7D%0A%20%20%20%20%20%20%20%20%3C%2Fnovo-text%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-text%3E%0A%20%20%20%20%20%20%20%20%20%20%3Cnovo-icon%3Eclock%3C%2Fnovo-icon%3E%0A%20%20%20%20%20%20%20%20%20%20%7B%7B%5Bshift.startTime%2C%20shift.endTime%5D%20%7C%20isoTimeRange%7D%7D%0A%20%20%20%20%20%20%20%20%3C%2Fnovo-text%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-text%3E%0A%20%20%20%20%20%20%20%20%20%20%3Cnovo-icon%3Ecandidate-circle%3C%2Fnovo-icon%3E%0A%20%20%20%20%20%20%20%20%20%20%7B%7Bshift.numAssigned%7D%7D%20%2F%20%7B%7Bshift.openings%7D%7D%0A%20%20%20%20%20%20%20%20%3C%2Fnovo-text%3E%0A%20%20%20%20%20%20%3C%2Fnovo-flex%3E%0A%20%20%20%20%20%20%3Cnovo-icon%20novoChipRemove%3Edelete%3C%2Fnovo-icon%3E%0A%20%20%20%20%3C%2Fnovo-chip%3E%0A%20%20%20%20%3Cinput%0A%20%20%20%20%20%20novoChipInput%0A%20%20%20%20%20%20%23searchInput%0A%20%20%20%20%20%20autocomplete%3D%22off%22%0A%20%20%20%20%20%20placeholder%3D%22add%20shift...%22%0A%20%20%20%20%20%20%5BformControl%5D%3D%22searchCtrl%22%0A%20%20%20%20%20%20(novoChipInputTokenEnd)%3D%22add(%24event)%22%20%2F%3E%0A%20%20%3C%2Fnovo-chip-list%3E%0A%20%20%3Cnovo-autocomplete%20(optionSelected)%3D%22selected(%24event)%22%20multiple%3E%0A%20%20%20%20%3Cnovo-option%20*ngFor%3D%22let%20shift%20of%20filteredShifts%20%7C%20async%22%20%5Bvalue%5D%3D%22shift%22%3E%0A%20%20%20%20%20%20%3Cnovo-text%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-icon%3Ecalendar%3C%2Fnovo-icon%3E%0A%20%20%20%20%20%20%20%20%7B%7Bshift.startTime%20%7C%20isoDate%7D%7D%0A%20%20%20%20%20%20%20%20%7B%7B%5Bshift.startTime%2C%20shift.endTime%5D%20%7C%20isoTimeRange%7D%7D%0A%20%20%20%20%20%20%3C%2Fnovo-text%3E%0A%20%20%20%20%3C%2Fnovo-option%3E%0A%20%20%3C%2Fnovo-autocomplete%3E%0A%3C%2Fnovo-field%3E%0A%0A%3Cdiv%3E%7B%7BchipList.value%7D%7D%3C%2Fdiv%3E`
    },
    'aside-usage': {
        title: 'Aside Usage Example',
        component: AsideUsageExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0Aimport%20%7B%20NovoAsideRef%2C%20NovoAsideService%20%7D%20from%20'novo-elements'%3B%0A%0Ainterface%20CustomParams%20%7B%0A%20%20id%3A%20number%3B%0A%20%20name%3A%20string%3B%0A%7D%0A%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'aside-custom-demo'%2C%0A%20%20%20%20template%3A%20%60%0A%20%20%20%20%3Cnovo-toolbar%3E%0A%20%20%20%20%20%20%3Cnovo-toolbar-row%20accent%3D%22candidate%22%20gap%3D%22md%22%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-icon%3Ecandidate%3C%2Fnovo-icon%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-title%3E%7B%7B%20ref.params.name%20%7D%7D%3C%2Fnovo-title%3E%0A%20%20%20%20%20%20%20%20%3Cspan%20class%3D%22example-spacer%22%20flex%3D%221%22%3E%3C%2Fspan%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-action%20icon%3D%22times%22%20(click)%3D%22close()%22%20aria-label%3D%22close%20the%20aside%20icon%22%3E%3C%2Fnovo-action%3E%0A%20%20%20%20%20%20%3C%2Fnovo-toolbar-row%3E%0A%20%20%20%20%20%20%3Cnovo-toolbar-row%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-nav%20%5Boutlet%5D%3D%22nav%22%3E%0A%20%20%20%20%20%20%20%20%20%20%3Cnovo-tab%3EOverview%3C%2Fnovo-tab%3E%0A%20%20%20%20%20%20%20%20%20%20%3Cnovo-tab%3EActivity%3C%2Fnovo-tab%3E%0A%20%20%20%20%20%20%20%20%20%20%3Cnovo-tab%3EFiles%3C%2Fnovo-tab%3E%0A%20%20%20%20%20%20%20%20%3C%2Fnovo-nav%3E%0A%20%20%20%20%20%20%3C%2Fnovo-toolbar-row%3E%0A%20%20%20%20%3C%2Fnovo-toolbar%3E%0A%20%20%20%20%3Csection%20padding%3D%22lg%22%3E%0A%20%20%20%20%20%20%3Cnovo-nav-outlet%20%23nav%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-nav-content%3E%0A%20%20%20%20%20%20%20%20%20%20%3Cnovo-card%20padding%3D%22md%22%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%3Cnovo-card-header%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Cnovo-icon%20color%3D%22neutral%22%3Emove%3C%2Fnovo-icon%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Cnovo-title%3EDetails%3C%2Fnovo-title%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Cnovo-action%20icon%3D%22refresh%22%20tooltip%3D%22Refresh%20Card%20Data%22%3E%3C%2Fnovo-action%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Cnovo-action%20icon%3D%22times%22%20tooltip%3D%22Remove%20Card%22%3E%3C%2Fnovo-action%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%3C%2Fnovo-card-header%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%3Cnovo-card-content%20condensed%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Cnovo-list%20class%3D%22bgc-off-white-striped%22%20direction%3D%22vertical%22%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Cnovo-value%20row%20*ngFor%3D%22let%20value%20of%20values%22%20%5Blabel%5D%3D%22value.label%22%20%5Bdata%5D%3D%22value.data%22%3E%3C%2Fnovo-value%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3C%2Fnovo-list%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%3C%2Fnovo-card-content%3E%0A%20%20%20%20%20%20%20%20%20%20%3C%2Fnovo-card%3E%0A%20%20%20%20%20%20%20%20%3C%2Fnovo-nav-content%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-nav-content%3E%0A%20%20%20%20%20%20%20%20%20%20%3Ch1%3ETab%202%20Content%3C%2Fh1%3E%0A%20%20%20%20%20%20%20%20%3C%2Fnovo-nav-content%3E%0A%20%20%20%20%20%20%3C%2Fnovo-nav-outlet%3E%0A%20%20%20%20%3C%2Fsection%3E%0A%20%20%60%2C%0A%20%20%20%20host%3A%20%7B%0A%20%20%20%20%20%20%20%20'%5Bstyle.display%5D'%3A%20%22'block'%22%2C%0A%20%20%20%20%20%20%20%20'%5Bstyle.width.%25%5D'%3A%20%22'100'%22%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20AsideCustomDemo%20%7B%0A%20%20public%20values%20%3D%20%5B%0A%20%20%20%20%7B%20label%3A%20'Status'%2C%20data%3A%20'Open'%20%7D%2C%0A%20%20%20%20%7B%20label%3A%20'Phone'%2C%20data%3A%20'555-555-5555'%20%7D%2C%0A%20%20%20%20%7B%20label%3A%20'Address'%2C%20data%3A%20'Boston%2C%20MA'%20%7D%2C%0A%20%20%5D%3B%0A%20%20constructor(public%20ref%3A%20NovoAsideRef%3CCustomParams%2C%20string%3E)%20%7B%7D%0A%20%20close()%20%7B%0A%20%20%20%20this.ref.close(%60successfully%20closed%3A%20%24%7Bthis.ref.params.name%7D%60)%3B%0A%20%20%7D%0A%7D%0A%0A%2F**%0A%20*%20%40title%20Aside%20Usage%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'aside-usage-example'%2C%0A%20%20%20%20templateUrl%3A%20'aside-usage-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'aside-usage-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20AsideUsageExample%20%7B%0A%20%20constructor(private%20aside%3A%20NovoAsideService)%20%7B%7D%0A%20%20showAside()%20%7B%0A%20%20%20%20const%20ref%20%3D%20this.aside.open%3Cstring%3E(AsideCustomDemo%2C%20%7B%20id%3A%20100%2C%20name%3A%20'Ferdinand%20del%20Toro'%20%7D)%3B%0A%20%20%20%20ref.onClosed.then((result)%20%3D%3E%20%7B%0A%20%20%20%20%20%20console.log('Aside%20has%20been%20closed%2C%20with%20result%3A'%2C%20result)%3B%0A%20%20%20%20%7D)%3B%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20CSS%20for%20this%20example%20*%2F%0A%3Ahost%20%7B%0A%20%20display%3A%20block%3B%0A%20%20background%3A%20rgba(0%2C%200%2C%200%2C%200.55)%3B%0A%20%20padding%3A%2035px%200%3B%0A%20%20position%3A%20relative%3B%0A%20%20text-align%3A%20center%3B%0A%7D%0A%0A.example-spacer%20%7B%0A%20%20flex%3A%201%201%20100%25%3B%0A%7D%0A`,
        htmlSource: `%3Cbutton%20data-automation-id%3D%22aside-trigger%22%20theme%3D%22secondary%22%20(click)%3D%22showAside()%22%3EShow%20Me%20%3A)%3C%2Fbutton%3E`,
        selectorName: 'AsideUsageExample, AsideCustomDemo'
    },
    'aside-form': {
        title: 'Aside Form Example',
        component: AsideFormExample,
        tsSource: `import%20%7B%20Component%2C%20OnInit%20%7D%20from%20'%40angular%2Fcore'%3B%0Aimport%20%7B%20FormUtils%2C%20NovoAsideRef%2C%20NovoAsideService%2C%20PickerControl%2C%20PickerResults%2C%20TextBoxControl%20%7D%20from%20'novo-elements'%3B%0A%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'aside-form-demo'%2C%0A%20%20%20%20template%3A%20%60%0A%20%20%20%20%3Cheader%20title%3D%22Add%20Contact%22%20icon%3D%22person%22%20theme%3D%22contact%22%3E%0A%20%20%20%20%20%20%3Cutils%3E%0A%20%20%20%20%20%20%20%20%3Cutil-action%20icon%3D%22times%22%20(click)%3D%22close()%22%3E%3C%2Futil-action%3E%0A%20%20%20%20%20%20%3C%2Futils%3E%0A%20%20%20%20%3C%2Fheader%3E%0A%20%20%20%20%3Csection%20padding%3D%22lg%22%3E%0A%20%20%20%20%20%20%3Cnovo-form%20%5Bform%5D%3D%22textForm%22%3E%0A%20%20%20%20%20%20%20%20%3Cdiv%20class%3D%22novo-form-row%22%3E%0A%20%20%20%20%20%20%20%20%20%20%3Cnovo-control%20%5Bform%5D%3D%22textForm%22%20%5Bcontrol%5D%3D%22textControl%22%3E%3C%2Fnovo-control%3E%0A%20%20%20%20%20%20%20%20%3C%2Fdiv%3E%0A%20%20%20%20%20%20%20%20%3Cdiv%20class%3D%22novo-form-row%22%3E%0A%20%20%20%20%20%20%20%20%20%20%3Cnovo-control%20%5Bform%5D%3D%22textForm%22%20%5Bcontrol%5D%3D%22emailControl%22%3E%3C%2Fnovo-control%3E%0A%20%20%20%20%20%20%20%20%3C%2Fdiv%3E%0A%20%20%20%20%20%20%20%20%3Cdiv%20class%3D%22novo-form-row%22%3E%0A%20%20%20%20%20%20%20%20%20%20%3Cnovo-control%20%5Bform%5D%3D%22textForm%22%20%5Bcontrol%5D%3D%22numberControl%22%3E%3C%2Fnovo-control%3E%0A%20%20%20%20%20%20%20%20%3C%2Fdiv%3E%0A%20%20%20%20%20%20%20%20%3Cdiv%20class%3D%22novo-form-row%22%3E%0A%20%20%20%20%20%20%20%20%20%20%3Cnovo-control%20%5Bform%5D%3D%22textForm%22%20%5Bcontrol%5D%3D%22pickerControl%22%3E%3C%2Fnovo-control%3E%0A%20%20%20%20%20%20%20%20%3C%2Fdiv%3E%0A%20%20%20%20%20%20%3C%2Fnovo-form%3E%0A%20%20%20%20%3C%2Fsection%3E%0A%20%20%20%20%3Cbutton%20theme%3D%22standard%22%20(click)%3D%22close()%22%3ECancel%3C%2Fbutton%3E%0A%20%20%20%20%3Cbutton%20theme%3D%22primary%22%20color%3D%22success%22%20icon%3D%22check%22%20(click)%3D%22close()%22%3ESave%3C%2Fbutton%3E%0A%20%20%60%2C%0A%20%20%20%20host%3A%20%7B%0A%20%20%20%20%20%20%20%20%2F%2F%20tslint%3Adisable-next-line%3A%20quotemark%0A%20%20%20%20%20%20%20%20'%5Bstyle.display%5D'%3A%20%22'block'%22%2C%0A%20%20%20%20%20%20%20%20%2F%2F%20tslint%3Adisable-next-line%3A%20quotemark%0A%20%20%20%20%20%20%20%20'%5Bstyle.width.%25%5D'%3A%20%22'100'%22%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20AsideFormDemo%20implements%20OnInit%20%7B%0A%20%20public%20textControl%3A%20any%3B%0A%20%20public%20emailControl%3A%20any%3B%0A%20%20public%20numberControl%3A%20any%3B%0A%20%20public%20pickerControl%3A%20any%3B%0A%20%20public%20textForm%3A%20any%3B%0A%0A%20%20constructor(private%20ref%3A%20NovoAsideRef%2C%20private%20formUtils%3A%20FormUtils)%20%7B%7D%0A%0A%20%20ngOnInit()%20%7B%0A%20%20%20%20this.textControl%20%3D%20new%20TextBoxControl(%7B%20key%3A%20'text'%2C%20label%3A%20'Text%20Box'%20%7D)%3B%0A%20%20%20%20this.emailControl%20%3D%20new%20TextBoxControl(%7B%20type%3A%20'email'%2C%20key%3A%20'email'%2C%20label%3A%20'Email'%20%7D)%3B%0A%20%20%20%20this.numberControl%20%3D%20new%20TextBoxControl(%7B%20type%3A%20'number'%2C%20key%3A%20'number'%2C%20label%3A%20'Number'%20%7D)%3B%0A%20%20%20%20this.pickerControl%20%3D%20new%20PickerControl(%7B%0A%20%20%20%20%20%20key%3A%20'picker'%2C%0A%20%20%20%20%20%20multiple%3A%20false%2C%0A%20%20%20%20%20%20label%3A%20'Picker'%2C%0A%20%20%20%20%20%20required%3A%20true%2C%0A%20%20%20%20%20%20config%3A%20%7B%0A%20%20%20%20%20%20%20%20resultsTemplate%3A%20PickerResults%2C%0A%20%20%20%20%20%20%20%20options%3A%20%5B'Apple'%2C%20'Banana'%2C%20'Grapes'%2C%20'Orange'%2C%20'Pear'%5D%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%7D)%3B%0A%0A%20%20%20%20this.textForm%20%3D%20this.formUtils.toFormGroup(%5Bthis.textControl%2C%20this.emailControl%2C%20this.numberControl%2C%20this.pickerControl%5D)%3B%0A%20%20%7D%0A%0A%20%20close()%20%7B%0A%20%20%20%20this.ref.close()%3B%0A%20%20%7D%0A%7D%0A%0A%2F**%0A%20*%20%40title%20Aside%20Form%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'aside-form-example'%2C%0A%20%20%20%20templateUrl%3A%20'aside-form-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'aside-form-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20AsideFormExample%20%7B%0A%20%20constructor(private%20aside%3A%20NovoAsideService)%20%7B%7D%0A%20%20showAside()%20%7B%0A%20%20%20%20this.aside.open(AsideFormDemo)%3B%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20CSS%20for%20this%20example%20*%2F%0A%0A%3Ahost%20%7B%0A%20%20display%3A%20block%3B%0A%20%20background%3A%20rgba(0%2C%200%2C%200%2C%200.55)%3B%0A%20%20padding%3A%2035px%200%3B%0A%20%20position%3A%20relative%3B%0A%20%20text-align%3A%20center%3B%0A%7D%0A`,
        htmlSource: `%3Cbutton%20data-automation-id%3D%22modal-trigger%22%20theme%3D%22secondary%22%20(click)%3D%22showAside()%22%3EShow%20Me%20%3A)%3C%2Fbutton%3E`,
        selectorName: 'AsideFormExample, AsideFormDemo'
    },
    'agenda': {
        title: 'Agenda Example',
        component: AgendaExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0Aimport%20%7B%20CalendarEvent%2C%20CalendarEventResponse%20%7D%20from%20'novo-elements'%3B%0A%0Aconst%20colors%3A%20any%20%3D%20%7B%0A%20%20red%3A%20%7B%0A%20%20%20%20primary%3A%20'%23ad2121'%2C%0A%20%20%20%20secondary%3A%20'%23FAE3E3'%2C%0A%20%20%7D%2C%0A%20%20blue%3A%20%7B%0A%20%20%20%20primary%3A%20'%231e90ff'%2C%0A%20%20%20%20secondary%3A%20'%23D1E8FF'%2C%0A%20%20%7D%2C%0A%20%20yellow%3A%20%7B%0A%20%20%20%20primary%3A%20'%23e3bc08'%2C%0A%20%20%20%20secondary%3A%20'%23FDF1BA'%2C%0A%20%20%7D%2C%0A%20%20green%3A%20%7B%0A%20%20%20%20primary%3A%20'%238CC152'%2C%0A%20%20%20%20secondary%3A%20'%2337BC9B'%2C%0A%20%20%7D%2C%0A%7D%3B%0A%0A%2F**%0A%20*%20%40title%20Agenda%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20%20%20selector%3A%20'agenda-example'%2C%0A%20%20%20%20templateUrl%3A%20'agenda-example.html'%2C%0A%20%20%20%20styleUrls%3A%20%5B'agenda-example.css'%5D%2C%0A%20%20%20%20standalone%3A%20false%0A%7D)%0Aexport%20class%20AgendaExample%20%7B%0A%20%20public%20views%3A%20Array%3Cany%3E%20%3D%20%5B%0A%20%20%20%20%7B%0A%20%20%20%20%20%20label%3A%20'Month'%2C%0A%20%20%20%20%20%20value%3A%20'month'%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20label%3A%20'Week'%2C%0A%20%20%20%20%20%20value%3A%20'week'%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20label%3A%20'Day'%2C%0A%20%20%20%20%20%20value%3A%20'day'%2C%0A%20%20%20%20%7D%2C%0A%20%20%5D%3B%0A%20%20view%3A%20string%20%3D%20'month'%3B%0A%0A%20%20viewDate%3A%20Date%20%3D%20new%20Date()%3B%0A%20%20events%3A%20CalendarEvent%5B%5D%20%3D%20%5B%0A%20%20%20%20%7B%0A%20%20%20%20%20%20title%3A%20'Interview'%2C%0A%20%20%20%20%20%20description%3A%20'with%20%40bvkimball'%2C%0A%20%20%20%20%20%20color%3A%20colors.green%2C%0A%20%20%20%20%20%20start%3A%20new%20Date()%2C%0A%20%20%20%20%20%20response%3A%20CalendarEventResponse.Rejected%2C%0A%20%20%20%20%20%20type%3A%20'Interview'%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20title%3A%20'Client%20Visit'%2C%0A%20%20%20%20%20%20description%3A%20'with%20%40asibilia'%2C%0A%20%20%20%20%20%20color%3A%20colors.red%2C%0A%20%20%20%20%20%20start%3A%20new%20Date(Date.now()%20%2B%2060000%20*%2030)%2C%0A%20%20%20%20%20%20response%3A%20CalendarEventResponse.Accepted%2C%0A%20%20%20%20%20%20type%3A%20'Visit'%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20title%3A%20'Interview'%2C%0A%20%20%20%20%20%20description%3A%20'with%20%40johndoe'%2C%0A%20%20%20%20%20%20color%3A%20colors.green%2C%0A%20%20%20%20%20%20start%3A%20new%20Date(Date.now()%20%2B%2060000%20*%2090)%2C%0A%20%20%20%20%20%20response%3A%20CalendarEventResponse.Accepted%2C%0A%20%20%20%20%20%20type%3A%20'Interview'%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20title%3A%20'Phone%20Interview'%2C%0A%20%20%20%20%20%20description%3A%20'with%20%40johnsully83'%2C%0A%20%20%20%20%20%20color%3A%20colors.green%2C%0A%20%20%20%20%20%20start%3A%20new%20Date(Date.now()%20%2B%2060000%20*%2090)%2C%0A%20%20%20%20%20%20end%3A%20new%20Date(Date.now()%20%2B%2060000%20*%20180)%2C%0A%20%20%20%20%20%20response%3A%20CalendarEventResponse.Accepted%2C%0A%20%20%20%20%20%20type%3A%20'Interview'%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20title%3A%20'Interview'%2C%0A%20%20%20%20%20%20description%3A%20'with%20%40johnsully83'%2C%0A%20%20%20%20%20%20color%3A%20colors.green%2C%0A%20%20%20%20%20%20start%3A%20new%20Date(Date.now()%20%2B%2060000%20*%2090)%2C%0A%20%20%20%20%20%20end%3A%20new%20Date(Date.now()%20%2B%2060000%20*%20150)%2C%0A%20%20%20%20%20%20response%3A%20CalendarEventResponse.Accepted%2C%0A%20%20%20%20%20%20type%3A%20'Interview'%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20title%3A%20'Final%20Interview'%2C%0A%20%20%20%20%20%20description%3A%20'with%20%40johnsully83'%2C%0A%20%20%20%20%20%20color%3A%20colors.green%2C%0A%20%20%20%20%20%20start%3A%20new%20Date(Date.now()%20%2B%2060000%20*%2090)%2C%0A%20%20%20%20%20%20end%3A%20new%20Date(Date.now()%20%2B%2060000%20*%20120)%2C%0A%20%20%20%20%20%20response%3A%20CalendarEventResponse.Accepted%2C%0A%20%20%20%20%20%20type%3A%20'Interview'%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20title%3A%20'Phone%20Interview'%2C%0A%20%20%20%20%20%20description%3A%20'with%20%40johnsully83'%2C%0A%20%20%20%20%20%20color%3A%20colors.green%2C%0A%20%20%20%20%20%20start%3A%20new%20Date(Date.now()%20%2B%2060000%20*%2090)%2C%0A%20%20%20%20%20%20end%3A%20new%20Date(Date.now()%20%2B%2060000%20*%20180)%2C%0A%20%20%20%20%20%20response%3A%20CalendarEventResponse.Accepted%2C%0A%20%20%20%20%20%20type%3A%20'Interview'%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20title%3A%20'Interview'%2C%0A%20%20%20%20%20%20description%3A%20'with%20%40johnsully83'%2C%0A%20%20%20%20%20%20color%3A%20colors.green%2C%0A%20%20%20%20%20%20start%3A%20new%20Date(Date.now()%20%2B%2060000%20*%2090)%2C%0A%20%20%20%20%20%20end%3A%20new%20Date(Date.now()%20%2B%2060000%20*%20150)%2C%0A%20%20%20%20%20%20response%3A%20CalendarEventResponse.Accepted%2C%0A%20%20%20%20%20%20type%3A%20'Interview'%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20title%3A%20'Final%20Interview'%2C%0A%20%20%20%20%20%20description%3A%20'with%20%40johnsully83'%2C%0A%20%20%20%20%20%20color%3A%20colors.green%2C%0A%20%20%20%20%20%20start%3A%20new%20Date(Date.now()%20%2B%2060000%20*%2090)%2C%0A%20%20%20%20%20%20end%3A%20new%20Date(Date.now()%20%2B%2060000%20*%20120)%2C%0A%20%20%20%20%20%20response%3A%20CalendarEventResponse.Accepted%2C%0A%20%20%20%20%20%20type%3A%20'Interview'%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20title%3A%20'Phone%20Interview'%2C%0A%20%20%20%20%20%20description%3A%20'with%20%40johnsully83'%2C%0A%20%20%20%20%20%20color%3A%20colors.green%2C%0A%20%20%20%20%20%20start%3A%20new%20Date(Date.now()%20%2B%2060000%20*%2090)%2C%0A%20%20%20%20%20%20end%3A%20new%20Date(Date.now()%20%2B%2060000%20*%20180)%2C%0A%20%20%20%20%20%20response%3A%20CalendarEventResponse.Accepted%2C%0A%20%20%20%20%20%20type%3A%20'Interview'%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20title%3A%20'Interview'%2C%0A%20%20%20%20%20%20description%3A%20'with%20%40johnsully83'%2C%0A%20%20%20%20%20%20color%3A%20colors.green%2C%0A%20%20%20%20%20%20start%3A%20new%20Date(Date.now()%20%2B%2060000%20*%2090)%2C%0A%20%20%20%20%20%20end%3A%20new%20Date(Date.now()%20%2B%2060000%20*%20150)%2C%0A%20%20%20%20%20%20response%3A%20CalendarEventResponse.Accepted%2C%0A%20%20%20%20%20%20type%3A%20'Interview'%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20title%3A%20'Final%20Interview'%2C%0A%20%20%20%20%20%20description%3A%20'with%20%40johnsully83'%2C%0A%20%20%20%20%20%20color%3A%20colors.green%2C%0A%20%20%20%20%20%20start%3A%20new%20Date(Date.now()%20%2B%2060000%20*%2090)%2C%0A%20%20%20%20%20%20end%3A%20new%20Date(Date.now()%20%2B%2060000%20*%20120)%2C%0A%20%20%20%20%20%20response%3A%20CalendarEventResponse.Accepted%2C%0A%20%20%20%20%20%20type%3A%20'Interview'%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20title%3A%20'Phone%20Interview'%2C%0A%20%20%20%20%20%20description%3A%20'with%20%40johnsully83'%2C%0A%20%20%20%20%20%20color%3A%20colors.green%2C%0A%20%20%20%20%20%20start%3A%20new%20Date(Date.now()%20%2B%2060000%20*%2075)%2C%0A%20%20%20%20%20%20end%3A%20new%20Date(Date.now()%20%2B%2060000%20*%20120)%2C%0A%20%20%20%20%20%20response%3A%20CalendarEventResponse.Accepted%2C%0A%20%20%20%20%20%20type%3A%20'Interview'%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20title%3A%20'Phone%20Interview'%2C%0A%20%20%20%20%20%20description%3A%20'with%20%40johnsully83'%2C%0A%20%20%20%20%20%20color%3A%20colors.green%2C%0A%20%20%20%20%20%20start%3A%20new%20Date(Date.now()%20%2B%2060000%20*%2075)%2C%0A%20%20%20%20%20%20end%3A%20new%20Date(Date.now()%20%2B%2060000%20*%20150)%2C%0A%20%20%20%20%20%20response%3A%20CalendarEventResponse.Accepted%2C%0A%20%20%20%20%20%20type%3A%20'Interview'%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20title%3A%20'Interview'%2C%0A%20%20%20%20%20%20description%3A%20'with%20%40johnsully83'%2C%0A%20%20%20%20%20%20color%3A%20colors.green%2C%0A%20%20%20%20%20%20start%3A%20new%20Date(Date.now()%20%2B%2060000%20*%20270)%2C%0A%20%20%20%20%20%20end%3A%20new%20Date(Date.now()%20%2B%2060000%20*%20300)%2C%0A%20%20%20%20%20%20response%3A%20CalendarEventResponse.Accepted%2C%0A%20%20%20%20%20%20type%3A%20'Interview'%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20title%3A%20'Final%20Interview'%2C%0A%20%20%20%20%20%20description%3A%20'with%20%40johnsully83'%2C%0A%20%20%20%20%20%20color%3A%20colors.green%2C%0A%20%20%20%20%20%20start%3A%20new%20Date(Date.now()%20%2B%2060000%20*%20270)%2C%0A%20%20%20%20%20%20end%3A%20new%20Date(Date.now()%20%2B%2060000%20*%20360)%2C%0A%20%20%20%20%20%20response%3A%20CalendarEventResponse.Accepted%2C%0A%20%20%20%20%20%20type%3A%20'Interview'%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20title%3A%20'Final%20Interview'%2C%0A%20%20%20%20%20%20description%3A%20'with%20%40johnsully83'%2C%0A%20%20%20%20%20%20color%3A%20colors.green%2C%0A%20%20%20%20%20%20start%3A%20new%20Date(Date.now()%20%2B%2060000%20*%20270)%2C%0A%20%20%20%20%20%20end%3A%20new%20Date(Date.now()%20%2B%2060000%20*%202880000)%2C%0A%20%20%20%20%20%20response%3A%20CalendarEventResponse.Accepted%2C%0A%20%20%20%20%20%20type%3A%20'Interview'%2C%0A%20%20%20%20%7D%2C%0A%20%20%5D%3B%0A%0A%20%20getNewEvent(date%2C%20color%2C%20type)%3A%20CalendarEvent%20%7B%0A%20%20%20%20const%20evt%3A%20CalendarEvent%20%3D%20%7B%0A%20%20%20%20%20%20title%3A%20'Meeting'%2C%0A%20%20%20%20%20%20description%3A%20'with%20%40jgodi'%2C%0A%20%20%20%20%20%20color%2C%0A%20%20%20%20%20%20start%3A%20date%2C%0A%20%20%20%20%20%20response%3A%20type%2C%0A%20%20%20%20%20%20type%3A%20'Meeting'%2C%0A%20%20%20%20%7D%3B%0A%20%20%20%20return%20evt%3B%0A%20%20%7D%0A%0A%20%20dayClicked(date)%20%7B%0A%20%20%20%20const%20evt%3A%20CalendarEvent%20%3D%20this.getNewEvent(date%2C%20colors.blue%2C%20CalendarEventResponse.Maybe)%3B%0A%20%20%20%20this.events.push(evt)%3B%0A%20%20%20%20this.events%20%3D%20%5B...this.events%5D%3B%0A%20%20%7D%0A%0A%20%20addShift(event)%20%7B%0A%20%20%20%20const%20evt%3A%20CalendarEvent%20%3D%20this.getNewEvent(event.day.date%2C%20colors.blue%2C%20CalendarEventResponse.Maybe)%3B%0A%20%20%20%20this.events.push(evt)%3B%0A%20%20%20%20this.events%20%3D%20%5B...this.events%5D%3B%0A%20%20%7D%0A%0A%20%20removeShift(event)%20%7B%0A%20%20%20%20this.events.splice(event.day.events.indexOf(event.event)%2C%201)%3B%0A%20%20%7D%0A%0A%20%20toggleAvailable(event)%20%7B%0A%20%20%20%20let%20evt%3A%20CalendarEvent%3B%0A%20%20%20%20if%20(!event.day.events.length)%20%7B%0A%20%20%20%20%20%20evt%20%3D%20this.getNewEvent(event.day.date%2C%20colors.green%2C%20CalendarEventResponse.Accepted)%3B%0A%20%20%20%20%20%20this.events.push(evt)%3B%0A%20%20%20%20%20%20this.events%20%3D%20%5B...this.events%5D%3B%0A%20%20%20%20%7D%20else%20%7B%0A%20%20%20%20%20%20evt%20%3D%20event.day.events%5B0%5D%3B%0A%20%20%20%20%20%20switch%20(evt.response)%20%7B%0A%20%20%20%20%20%20%20%20case%20CalendarEventResponse.Accepted%3A%0A%20%20%20%20%20%20%20%20%20%20evt.response%20%3D%20CalendarEventResponse.Rejected%3B%0A%20%20%20%20%20%20%20%20%20%20break%3B%0A%20%20%20%20%20%20%20%20case%20CalendarEventResponse.Rejected%3A%0A%20%20%20%20%20%20%20%20%20%20event.day.events%20%3D%20%5B%5D%3B%0A%20%20%20%20%20%20%20%20%20%20break%3B%0A%20%20%20%20%20%20%20%20default%3A%0A%20%20%20%20%20%20%20%20%20%20break%3B%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cdiv%3E%0A%20%20%3Cnovo-agenda-date-change%20%5Bview%5D%3D%22view%22%20%5B(viewDate)%5D%3D%22viewDate%22%3E%0A%20%20%3C%2Fnovo-agenda-date-change%3E%0A%0A%20%20%3Cnovo-tiles%20%5Boptions%5D%3D%22views%22%20%5B(ngModel)%5D%3D%22view%22%3E%3C%2Fnovo-tiles%3E%0A%3C%2Fdiv%3E%0A%3Cdiv%20%5BngSwitch%5D%3D%22view%22%20class%3D%22cal-demo-content%22%3E%0A%20%20%3Cnovo-agenda-month%20*ngSwitchCase%3D%22'month'%22%20%5B(viewDate)%5D%3D%22viewDate%22%20%5Bevents%5D%3D%22events%22%0A%20%20%20%20(dayClicked)%3D%22dayClicked(%24event.day.date)%22%3E%0A%20%20%3C%2Fnovo-agenda-month%3E%0A%0A%20%20%3Cnovo-agenda-week%20*ngSwitchCase%3D%22'week'%22%20%5B(viewDate)%5D%3D%22viewDate%22%20%5Bevents%5D%3D%22events%22%0A%20%20%20%20(dayClicked)%3D%22dayClicked(%24event.date)%22%20%5BdayStartHour%5D%3D%220%22%20%5BdayEndHour%5D%3D%2223%22%3E%0A%20%20%3C%2Fnovo-agenda-week%3E%0A%0A%20%20%3Cnovo-agenda-day%20*ngSwitchCase%3D%22'day'%22%20%5B(viewDate)%5D%3D%22viewDate%22%20%5Bevents%5D%3D%22events%22%20%5BdayStartHour%5D%3D%220%22%20%5BdayEndHour%5D%3D%2223%22%3E%0A%20%20%3C%2Fnovo-agenda-day%3E%0A%3C%2Fdiv%3E`
    },
};
const EXAMPLE_LIST = [
    SecurityExample,
    CustomQuickNoteResults, CustomQuickNoteResultsExample,
    CustomQuickNoteExample,
    BasicQuickNoteExample,
    PluralizeExample,
    FiValidationExample,
    FiTooltipExample,
    FiRequiredExample,
    FiPopoverExample,
    FiNestedExample,
    FiModifyOptionsExample,
    FiModifyAddedPickerExample,
    FiMessagingExample,
    FiHideShowExample,
    FiGlobalsExample,
    FiEnableDisableExample,
    FiDescriptionExample,
    FiConfirmExample,
    FiCalculationExample,
    FiAsyncExample,
    FiAddingRemovingExample,
    DragDropExample,
    BasicCodeExample,
    BasicAceExample,
    RecordHeaderExample,
    DetailsCardExample,
    CardFormExample,
    ActivitySectionExample,
    TabsVerticalExample,
    TabsRouterExample,
    TabsCondensedExample,
    TabsColorExample,
    TabsBasicExample,
    StepperVerticalExample,
    StepperHorizontalExample,
    BasicSidenavExample,
    ThemedListExample,
    BasicListExample,
    HeaderSubtitleExample,
    HeaderSearchbarExample,
    CondensedHeaderExample,
    BasicHeaderExample,
    LazyExpansionExample,
    BasicExpansionExample,
    AccordionExample,
    CardWithImageExample,
    CardConfigExample,
    BasicCardExample,
    MultiOptionValueExample,
    IconValueExample,
    FormatterValueExample,
    ExternalLinkValueExample,
    EntityListValueExample,
    DateTimeValueExample,
    CorporateUserValueExample,
    CategoryValueExample,
    BasicValueExample,
    AssociatedValueExample,
    AddressValueExample,
    BasicTimezoneExample,
    TimePickerExample,
    TilesUsageExample,
    MultipleSelectWithSearchExample,
    MultipleSelectExample,
    LongSelectExample,
    LegacySelectOptionExample,
    BasicSelectWithSearchExample,
    BasicSelectExample,
    VerticalRadioExample,
    IconRadioExample,
    ButtonRadioExample,
    BasicRadioExample,
    OverrideTemplateExample,
    MixedPickerExample,
    GroupedPickerExample,
    FormattedPickerExample,
    EntityPickerExample,
    DefaultOptionsPickerExample,
    CustomPickerResults, CustomPickerResultsExample,
    BasicPickerExample,
    AsyncPickerExample,
    NestedMultiPickerExample,
    BasicMultiPickerExample,
    VerticalOptionsExample,
    VerticalExample,
    HorizontalOptionsExample,
    HorizontalExample,
    CustomTemplateExample,
    TextBasedControlsExample,
    PickerControlsExample,
    NumberRangeControlExample,
    FileInputControlsExample,
    CustomDemoControlExample,
    CheckBoxControlsExample,
    CalendarInputControlsExample,
    AddressControlExample,
    VerticalDynamicFormExample,
    UpdatingFormExample,
    EnableDisableAllFieldsInFormExample,
    DynamicFormFieldSetsExample,
    DynamicFormExample,
    DisabledFormExample,
    DateTimeInputExample,
    WeekStartExample,
    MultiDateExample,
    DateTimeExample,
    DateRangeInputExample,
    DatePickerLimitsExample,
    DatePickerInputExample,
    DatePickerExample,
    ColorPickerExample,
    ColorInputExample,
    MinimalEditorExample,
    BasicEditorExample,
    RowChipsExample,
    HideChipsExample,
    GroupedMultiPickerExample,
    FormattedChipsExample,
    CustomValuesExample,
    CloseOnSelectChipsExample,
    ChipUsageExample,
    BasicChipsExample,
    AsyncChipsExample,
    CheckboxListExample,
    BasicCheckboxExample,
    TitleExample,
    TextExample,
    LinkExample,
    LabelExample,
    CaptionExample,
    IconsetExample,
    PrimaryColorsExample,
    EntityColorsExample,
    AnalyticsColorsExample,
    TooltipTypesExample,
    TooltipToggleExample,
    TooltipSizesExample,
    TooltipPlacementExample,
    TooltipOverflowExample,
    TooltipOptionsExample,
    TooltipAlignExample,
    MultiRowToolbarExample,
    BasicToolbarExample,
    ToastUsageExample,
    ToastServiceExample,
    ToastOptionsExample,
    ToastActionsExample,
    IconTipWellExample,
    HtmlTipWellExample,
    ButtonlessTipWellExample,
    BasicTipWellExample,
    TabbedGroupPickerQuickSelectExample,
    TabbedGroupPickerNoSelectionExample,
    TabbedGroupPickerGroupsExample,
    TabbedGroupPickerFooterExample,
    TabbedGroupPickerBigGroupsExample,
    TabbedGroupPickerBasicExample,
    SwitchUsageExample,
    BasicSlideExample,
    SearchUsageExample,
    SingleFieldCriteriaExample,
    CustomPickerConditionDef, JustCriteriaExample,
    ProgressBarUsageExample,
    ProgressBarRadialUsageExample,
    PopOverVerticalExample,
    PopOverPlacementExample,
    PopOverHorizontalExample,
    PopOverDynamicExample,
    PopOverBehaviorsExample,
    PopOverAutoPlacementExample,
    NonIdealStateUsageExample,
    NonIdealStateSearchUsageExample,
    NonIdealStateLoadingUsageExample,
    ModalWarningDemo, WarningModalExample,
    ModalSuccessDemo, SuccessModalExample,
    ModalEditFormDemo, ModalEditFormExample,
    ModalAddFormDemo, ModalAddFormExample,
    ModalErrorDemo, ErrorModalExample,
    ModalCustomDemo, CustomModalExample,
    NestedMenuExample,
    MenuContextExample,
    BasicMenuExample,
    LoadingLineExample,
    LoadingCircleExample,
    ThemedIconsExample,
    RaisedIconsExample,
    BasicIconsExample,
    FormUsageExample,
    FieldUsageExample,
    FieldNativeExample,
    FieldComponentsExample,
    FieldAnatomyExample,
    ScrollableDropDownExample,
    ScrollToItemDropDownExample,
    PositionDropDownExample,
    MultiDropDownExample,
    LargeDropDownExample,
    CustomDropDownExample,
    BasicDropDownExample,
    ConfigureColumnsModal,
    DataTableServiceExample,
    DataTableRowsExample,
    DataTableRemoteExample,
    TimeExample,
    CalendarExample,
    ButtonTwoIconExample,
    ButtonStandardExample,
    ButtonSecondaryExample,
    ButtonPrimaryExample,
    ButtonOverviewExample,
    ButtonLoadingExample,
    ButtonInverseExample,
    ButtonIconExample,
    ButtonFabExample,
    ButtonDynamicExample,
    ButtonDialogueExample,
    BreadcrumbUsageExample,
    BreadcrumbSourceUsageExample,
    AvatarUsageExample,
    AvatarStackUsageExample,
    AutocompleteWithChipsExample,
    AutocompleteUsageExample,
    AutocompleteTextareaExample,
    AutocompleteStackedChipsExample,
    AsideCustomDemo, AsideUsageExample,
    AsideFormDemo, AsideFormExample,
    AgendaExample,
];
class NovoExamplesModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: NovoExamplesModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "19.2.15", ngImport: i0, type: NovoExamplesModule, declarations: [SecurityExample,
            CustomQuickNoteResults, CustomQuickNoteResultsExample,
            CustomQuickNoteExample,
            BasicQuickNoteExample,
            PluralizeExample,
            FiValidationExample,
            FiTooltipExample,
            FiRequiredExample,
            FiPopoverExample,
            FiNestedExample,
            FiModifyOptionsExample,
            FiModifyAddedPickerExample,
            FiMessagingExample,
            FiHideShowExample,
            FiGlobalsExample,
            FiEnableDisableExample,
            FiDescriptionExample,
            FiConfirmExample,
            FiCalculationExample,
            FiAsyncExample,
            FiAddingRemovingExample,
            DragDropExample,
            BasicCodeExample,
            BasicAceExample,
            RecordHeaderExample,
            DetailsCardExample,
            CardFormExample,
            ActivitySectionExample,
            TabsVerticalExample,
            TabsRouterExample,
            TabsCondensedExample,
            TabsColorExample,
            TabsBasicExample,
            StepperVerticalExample,
            StepperHorizontalExample,
            BasicSidenavExample,
            ThemedListExample,
            BasicListExample,
            HeaderSubtitleExample,
            HeaderSearchbarExample,
            CondensedHeaderExample,
            BasicHeaderExample,
            LazyExpansionExample,
            BasicExpansionExample,
            AccordionExample,
            CardWithImageExample,
            CardConfigExample,
            BasicCardExample,
            MultiOptionValueExample,
            IconValueExample,
            FormatterValueExample,
            ExternalLinkValueExample,
            EntityListValueExample,
            DateTimeValueExample,
            CorporateUserValueExample,
            CategoryValueExample,
            BasicValueExample,
            AssociatedValueExample,
            AddressValueExample,
            BasicTimezoneExample,
            TimePickerExample,
            TilesUsageExample,
            MultipleSelectWithSearchExample,
            MultipleSelectExample,
            LongSelectExample,
            LegacySelectOptionExample,
            BasicSelectWithSearchExample,
            BasicSelectExample,
            VerticalRadioExample,
            IconRadioExample,
            ButtonRadioExample,
            BasicRadioExample,
            OverrideTemplateExample,
            MixedPickerExample,
            GroupedPickerExample,
            FormattedPickerExample,
            EntityPickerExample,
            DefaultOptionsPickerExample,
            CustomPickerResults, CustomPickerResultsExample,
            BasicPickerExample,
            AsyncPickerExample,
            NestedMultiPickerExample,
            BasicMultiPickerExample,
            VerticalOptionsExample,
            VerticalExample,
            HorizontalOptionsExample,
            HorizontalExample,
            CustomTemplateExample,
            TextBasedControlsExample,
            PickerControlsExample,
            NumberRangeControlExample,
            FileInputControlsExample,
            CustomDemoControlExample,
            CheckBoxControlsExample,
            CalendarInputControlsExample,
            AddressControlExample,
            VerticalDynamicFormExample,
            UpdatingFormExample,
            EnableDisableAllFieldsInFormExample,
            DynamicFormFieldSetsExample,
            DynamicFormExample,
            DisabledFormExample,
            DateTimeInputExample,
            WeekStartExample,
            MultiDateExample,
            DateTimeExample,
            DateRangeInputExample,
            DatePickerLimitsExample,
            DatePickerInputExample,
            DatePickerExample,
            ColorPickerExample,
            ColorInputExample,
            MinimalEditorExample,
            BasicEditorExample,
            RowChipsExample,
            HideChipsExample,
            GroupedMultiPickerExample,
            FormattedChipsExample,
            CustomValuesExample,
            CloseOnSelectChipsExample,
            ChipUsageExample,
            BasicChipsExample,
            AsyncChipsExample,
            CheckboxListExample,
            BasicCheckboxExample,
            TitleExample,
            TextExample,
            LinkExample,
            LabelExample,
            CaptionExample,
            IconsetExample,
            PrimaryColorsExample,
            EntityColorsExample,
            AnalyticsColorsExample,
            TooltipTypesExample,
            TooltipToggleExample,
            TooltipSizesExample,
            TooltipPlacementExample,
            TooltipOverflowExample,
            TooltipOptionsExample,
            TooltipAlignExample,
            MultiRowToolbarExample,
            BasicToolbarExample,
            ToastUsageExample,
            ToastServiceExample,
            ToastOptionsExample,
            ToastActionsExample,
            IconTipWellExample,
            HtmlTipWellExample,
            ButtonlessTipWellExample,
            BasicTipWellExample,
            TabbedGroupPickerQuickSelectExample,
            TabbedGroupPickerNoSelectionExample,
            TabbedGroupPickerGroupsExample,
            TabbedGroupPickerFooterExample,
            TabbedGroupPickerBigGroupsExample,
            TabbedGroupPickerBasicExample,
            SwitchUsageExample,
            BasicSlideExample,
            SearchUsageExample,
            SingleFieldCriteriaExample,
            CustomPickerConditionDef, JustCriteriaExample,
            ProgressBarUsageExample,
            ProgressBarRadialUsageExample,
            PopOverVerticalExample,
            PopOverPlacementExample,
            PopOverHorizontalExample,
            PopOverDynamicExample,
            PopOverBehaviorsExample,
            PopOverAutoPlacementExample,
            NonIdealStateUsageExample,
            NonIdealStateSearchUsageExample,
            NonIdealStateLoadingUsageExample,
            ModalWarningDemo, WarningModalExample,
            ModalSuccessDemo, SuccessModalExample,
            ModalEditFormDemo, ModalEditFormExample,
            ModalAddFormDemo, ModalAddFormExample,
            ModalErrorDemo, ErrorModalExample,
            ModalCustomDemo, CustomModalExample,
            NestedMenuExample,
            MenuContextExample,
            BasicMenuExample,
            LoadingLineExample,
            LoadingCircleExample,
            ThemedIconsExample,
            RaisedIconsExample,
            BasicIconsExample,
            FormUsageExample,
            FieldUsageExample,
            FieldNativeExample,
            FieldComponentsExample,
            FieldAnatomyExample,
            ScrollableDropDownExample,
            ScrollToItemDropDownExample,
            PositionDropDownExample,
            MultiDropDownExample,
            LargeDropDownExample,
            CustomDropDownExample,
            BasicDropDownExample,
            ConfigureColumnsModal,
            DataTableServiceExample,
            DataTableRowsExample,
            DataTableRemoteExample,
            TimeExample,
            CalendarExample,
            ButtonTwoIconExample,
            ButtonStandardExample,
            ButtonSecondaryExample,
            ButtonPrimaryExample,
            ButtonOverviewExample,
            ButtonLoadingExample,
            ButtonInverseExample,
            ButtonIconExample,
            ButtonFabExample,
            ButtonDynamicExample,
            ButtonDialogueExample,
            BreadcrumbUsageExample,
            BreadcrumbSourceUsageExample,
            AvatarUsageExample,
            AvatarStackUsageExample,
            AutocompleteWithChipsExample,
            AutocompleteUsageExample,
            AutocompleteTextareaExample,
            AutocompleteStackedChipsExample,
            AsideCustomDemo, AsideUsageExample,
            AsideFormDemo, AsideFormExample,
            AgendaExample], imports: [FormsModule,
            ReactiveFormsModule,
            CommonModule,
            NovoFormExtrasModule,
            NovoPipesModule,
            NovoElementsModule], exports: [SecurityExample,
            CustomQuickNoteResults, CustomQuickNoteResultsExample,
            CustomQuickNoteExample,
            BasicQuickNoteExample,
            PluralizeExample,
            FiValidationExample,
            FiTooltipExample,
            FiRequiredExample,
            FiPopoverExample,
            FiNestedExample,
            FiModifyOptionsExample,
            FiModifyAddedPickerExample,
            FiMessagingExample,
            FiHideShowExample,
            FiGlobalsExample,
            FiEnableDisableExample,
            FiDescriptionExample,
            FiConfirmExample,
            FiCalculationExample,
            FiAsyncExample,
            FiAddingRemovingExample,
            DragDropExample,
            BasicCodeExample,
            BasicAceExample,
            RecordHeaderExample,
            DetailsCardExample,
            CardFormExample,
            ActivitySectionExample,
            TabsVerticalExample,
            TabsRouterExample,
            TabsCondensedExample,
            TabsColorExample,
            TabsBasicExample,
            StepperVerticalExample,
            StepperHorizontalExample,
            BasicSidenavExample,
            ThemedListExample,
            BasicListExample,
            HeaderSubtitleExample,
            HeaderSearchbarExample,
            CondensedHeaderExample,
            BasicHeaderExample,
            LazyExpansionExample,
            BasicExpansionExample,
            AccordionExample,
            CardWithImageExample,
            CardConfigExample,
            BasicCardExample,
            MultiOptionValueExample,
            IconValueExample,
            FormatterValueExample,
            ExternalLinkValueExample,
            EntityListValueExample,
            DateTimeValueExample,
            CorporateUserValueExample,
            CategoryValueExample,
            BasicValueExample,
            AssociatedValueExample,
            AddressValueExample,
            BasicTimezoneExample,
            TimePickerExample,
            TilesUsageExample,
            MultipleSelectWithSearchExample,
            MultipleSelectExample,
            LongSelectExample,
            LegacySelectOptionExample,
            BasicSelectWithSearchExample,
            BasicSelectExample,
            VerticalRadioExample,
            IconRadioExample,
            ButtonRadioExample,
            BasicRadioExample,
            OverrideTemplateExample,
            MixedPickerExample,
            GroupedPickerExample,
            FormattedPickerExample,
            EntityPickerExample,
            DefaultOptionsPickerExample,
            CustomPickerResults, CustomPickerResultsExample,
            BasicPickerExample,
            AsyncPickerExample,
            NestedMultiPickerExample,
            BasicMultiPickerExample,
            VerticalOptionsExample,
            VerticalExample,
            HorizontalOptionsExample,
            HorizontalExample,
            CustomTemplateExample,
            TextBasedControlsExample,
            PickerControlsExample,
            NumberRangeControlExample,
            FileInputControlsExample,
            CustomDemoControlExample,
            CheckBoxControlsExample,
            CalendarInputControlsExample,
            AddressControlExample,
            VerticalDynamicFormExample,
            UpdatingFormExample,
            EnableDisableAllFieldsInFormExample,
            DynamicFormFieldSetsExample,
            DynamicFormExample,
            DisabledFormExample,
            DateTimeInputExample,
            WeekStartExample,
            MultiDateExample,
            DateTimeExample,
            DateRangeInputExample,
            DatePickerLimitsExample,
            DatePickerInputExample,
            DatePickerExample,
            ColorPickerExample,
            ColorInputExample,
            MinimalEditorExample,
            BasicEditorExample,
            RowChipsExample,
            HideChipsExample,
            GroupedMultiPickerExample,
            FormattedChipsExample,
            CustomValuesExample,
            CloseOnSelectChipsExample,
            ChipUsageExample,
            BasicChipsExample,
            AsyncChipsExample,
            CheckboxListExample,
            BasicCheckboxExample,
            TitleExample,
            TextExample,
            LinkExample,
            LabelExample,
            CaptionExample,
            IconsetExample,
            PrimaryColorsExample,
            EntityColorsExample,
            AnalyticsColorsExample,
            TooltipTypesExample,
            TooltipToggleExample,
            TooltipSizesExample,
            TooltipPlacementExample,
            TooltipOverflowExample,
            TooltipOptionsExample,
            TooltipAlignExample,
            MultiRowToolbarExample,
            BasicToolbarExample,
            ToastUsageExample,
            ToastServiceExample,
            ToastOptionsExample,
            ToastActionsExample,
            IconTipWellExample,
            HtmlTipWellExample,
            ButtonlessTipWellExample,
            BasicTipWellExample,
            TabbedGroupPickerQuickSelectExample,
            TabbedGroupPickerNoSelectionExample,
            TabbedGroupPickerGroupsExample,
            TabbedGroupPickerFooterExample,
            TabbedGroupPickerBigGroupsExample,
            TabbedGroupPickerBasicExample,
            SwitchUsageExample,
            BasicSlideExample,
            SearchUsageExample,
            SingleFieldCriteriaExample,
            CustomPickerConditionDef, JustCriteriaExample,
            ProgressBarUsageExample,
            ProgressBarRadialUsageExample,
            PopOverVerticalExample,
            PopOverPlacementExample,
            PopOverHorizontalExample,
            PopOverDynamicExample,
            PopOverBehaviorsExample,
            PopOverAutoPlacementExample,
            NonIdealStateUsageExample,
            NonIdealStateSearchUsageExample,
            NonIdealStateLoadingUsageExample,
            ModalWarningDemo, WarningModalExample,
            ModalSuccessDemo, SuccessModalExample,
            ModalEditFormDemo, ModalEditFormExample,
            ModalAddFormDemo, ModalAddFormExample,
            ModalErrorDemo, ErrorModalExample,
            ModalCustomDemo, CustomModalExample,
            NestedMenuExample,
            MenuContextExample,
            BasicMenuExample,
            LoadingLineExample,
            LoadingCircleExample,
            ThemedIconsExample,
            RaisedIconsExample,
            BasicIconsExample,
            FormUsageExample,
            FieldUsageExample,
            FieldNativeExample,
            FieldComponentsExample,
            FieldAnatomyExample,
            ScrollableDropDownExample,
            ScrollToItemDropDownExample,
            PositionDropDownExample,
            MultiDropDownExample,
            LargeDropDownExample,
            CustomDropDownExample,
            BasicDropDownExample,
            ConfigureColumnsModal,
            DataTableServiceExample,
            DataTableRowsExample,
            DataTableRemoteExample,
            TimeExample,
            CalendarExample,
            ButtonTwoIconExample,
            ButtonStandardExample,
            ButtonSecondaryExample,
            ButtonPrimaryExample,
            ButtonOverviewExample,
            ButtonLoadingExample,
            ButtonInverseExample,
            ButtonIconExample,
            ButtonFabExample,
            ButtonDynamicExample,
            ButtonDialogueExample,
            BreadcrumbUsageExample,
            BreadcrumbSourceUsageExample,
            AvatarUsageExample,
            AvatarStackUsageExample,
            AutocompleteWithChipsExample,
            AutocompleteUsageExample,
            AutocompleteTextareaExample,
            AutocompleteStackedChipsExample,
            AsideCustomDemo, AsideUsageExample,
            AsideFormDemo, AsideFormExample,
            AgendaExample] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: NovoExamplesModule, imports: [FormsModule,
            ReactiveFormsModule,
            CommonModule,
            NovoFormExtrasModule,
            NovoPipesModule,
            NovoElementsModule] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: NovoExamplesModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: EXAMPLE_LIST,
                    exports: EXAMPLE_LIST,
                    imports: [
                        FormsModule,
                        ReactiveFormsModule,
                        CommonModule,
                        NovoFormExtrasModule,
                        NovoPipesModule,
                        NovoElementsModule
                    ]
                }]
        }] });

// The example-module file will be auto-generated. As soon as the
// examples are being compiled, the module file will be generated.
/**
 * Example data
 *   with information about Component name, selector, files used in example, and path to examples
 */
class ExampleData {
    constructor(example) {
        if (!example || !EXAMPLE_COMPONENTS.hasOwnProperty(example)) {
            return;
        }
        const exampleConfig = EXAMPLE_COMPONENTS[example];
        this.source = exampleConfig;
        this.exampleFiles = ['html', 'ts', 'css'].map((extension) => `${example}-example.${extension}`);
        this.selectorName = this.indexFilename = `${example}-example`;
        if (exampleConfig.additionalFiles) {
            this.exampleFiles.push(...exampleConfig.additionalFiles);
        }
        const exampleName = example.replace(/(?:^\w|\b\w)/g, (letter) => letter.toUpperCase());
        this.description = exampleConfig.title || exampleName.replace(/[\-]+/g, ' ') + ' Example';
        this.componentName = exampleConfig.selectorName || exampleName.replace(/[\-]+/g, '') + 'Example';
    }
}

class HighlightJS {
    // Stream that emits when highlightjs is loaded
    get isReady() {
        return this._isReady$.pipe(filter((isReady) => isReady), take(1));
    }
    constructor() {
        this.options = {
            theme: 'github',
            path: 'assets/lib/hljs',
            auto: true,
        };
        this._isReady$ = new BehaviorSubject(false);
        this.options = { ...this.options };
        if (typeof hljs !== 'undefined') {
            /** hljs is loaded by the user */
            hljs.configure(this.options.config);
            this._isReady$.next(true);
        }
        else {
            /** Load hljs script and style locally */
            this._loadScript();
            this._loadTheme();
        }
    }
    highlight(name, value, ignore_illegals, continuation) {
        if (typeof hljs !== 'undefined') {
            return hljs.highlight(name, value, ignore_illegals, continuation);
        }
    }
    highlightAuto(value, languageSubset) {
        if (typeof hljs !== 'undefined') {
            return hljs.highlightAuto(value, languageSubset);
        }
    }
    fixMarkup(value) {
        if (typeof hljs !== 'undefined') {
            return hljs.fixMarkup(value);
        }
    }
    highlightBlock(block) {
        if (typeof hljs !== 'undefined') {
            hljs.highlightBlock(block);
        }
    }
    configure(options) {
        if (typeof hljs !== 'undefined') {
            hljs.configure(this.options.config);
        }
    }
    initHighlighting() {
        if (typeof hljs !== 'undefined') {
            hljs.initHighlighting();
        }
    }
    initHighlightingOnLoad() {
        if (typeof hljs !== 'undefined') {
            hljs.initHighlightingOnLoad();
        }
    }
    registerLanguage(name, language) {
        if (typeof hljs !== 'undefined') {
            hljs.registerLanguage(name, language);
        }
    }
    listLanguages() {
        if (typeof hljs !== 'undefined') {
            return hljs.listLanguages();
        }
    }
    getLanguage(name) {
        if (typeof hljs !== 'undefined') {
            return hljs.getLanguage(name);
        }
    }
    _loadScript() {
        const script = document.createElement('script');
        script.async = true;
        script.type = 'text/javascript';
        script.onload = () => {
            hljs.configure(this.options.config);
            this._isReady$.next(true);
        };
        script.src = `${this.options.path}/highlight.pack.js`;
        document.head.appendChild(script);
    }
    _loadTheme() {
        const style = document.createElement('link');
        style.rel = 'stylesheet';
        style.type = 'text/css';
        style.href = `${this.options.path}/styles/${this.options.theme}.css`;
        document.head.appendChild(style);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: HighlightJS, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: HighlightJS }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: HighlightJS, decorators: [{
            type: Injectable
        }], ctorParameters: () => [] });

// NG2
class CodeSnippetComponent {
    constructor(sanitizer, hljs, cdr) {
        this.sanitizer = sanitizer;
        this.hljs = hljs;
        this.cdr = cdr;
    }
    ngOnInit() {
        this.hljs.isReady.subscribe(() => {
            const code = decodeURIComponent(EXAMPLE_COMPONENTS[this.example].tsSource);
            const markup = decodeURIComponent(EXAMPLE_COMPONENTS[this.example].htmlSource);
            const style = decodeURIComponent(EXAMPLE_COMPONENTS[this.example].cssSource);
            this.highlightTS = this.sanitizer.bypassSecurityTrustHtml(this.hljs.highlightAuto(code, ['typescript']).value.trim());
            this.highlightHTML = this.sanitizer.bypassSecurityTrustHtml(this.hljs.highlightAuto(markup, ['html']).value.trim());
            this.highlightCSS = this.sanitizer.bypassSecurityTrustHtml(this.hljs.highlightAuto(style, ['css']).value.trim());
            this.cdr.markForCheck();
        });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: CodeSnippetComponent, deps: [{ token: i1$2.DomSanitizer }, { token: HighlightJS }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: CodeSnippetComponent, isStandalone: false, selector: "code-snippet", inputs: { example: "example" }, ngImport: i0, template: `
    <novo-nav theme="white" [outlet]="snippets">
      <novo-tab><span>HTML</span></novo-tab>
      <novo-tab><span>TS</span></novo-tab>
      <novo-tab><span>CSS</span></novo-tab>
    </novo-nav>
    <novo-nav-outlet #snippets>
      <novo-nav-content>
        <pre><code [innerHtml]="highlightHTML"></code></pre>
      </novo-nav-content>
      <novo-nav-content>
        <pre><code [innerHtml]="highlightTS"></code></pre>
      </novo-nav-content>
      <novo-nav-content>
        <pre><code [innerHtml]="highlightCSS"></code></pre>
      </novo-nav-content>
    </novo-nav-outlet>
  `, isInline: true, dependencies: [{ kind: "component", type: i2$1.NovoNavElement, selector: "novo-nav", inputs: ["theme", "direction", "outlet", "router", "condensed", "selectedIndex"], outputs: ["selectedIndexChange"] }, { kind: "component", type: i2$1.NovoTabElement, selector: "novo-tab", inputs: ["active", "color", "disabled"], outputs: ["activeChange"] }, { kind: "component", type: i2$1.NovoNavOutletElement, selector: "novo-nav-outlet" }, { kind: "component", type: i2$1.NovoNavContentElement, selector: "novo-nav-content", inputs: ["active"] }, { kind: "directive", type: i2$1.ThemeColorDirective, selector: "[theme]", inputs: ["theme"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: CodeSnippetComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'code-snippet',
                    template: `
    <novo-nav theme="white" [outlet]="snippets">
      <novo-tab><span>HTML</span></novo-tab>
      <novo-tab><span>TS</span></novo-tab>
      <novo-tab><span>CSS</span></novo-tab>
    </novo-nav>
    <novo-nav-outlet #snippets>
      <novo-nav-content>
        <pre><code [innerHtml]="highlightHTML"></code></pre>
      </novo-nav-content>
      <novo-nav-content>
        <pre><code [innerHtml]="highlightTS"></code></pre>
      </novo-nav-content>
      <novo-nav-content>
        <pre><code [innerHtml]="highlightCSS"></code></pre>
      </novo-nav-content>
    </novo-nav-outlet>
  `,
                    standalone: false
                }]
        }], ctorParameters: () => [{ type: i1$2.DomSanitizer }, { type: HighlightJS }, { type: i0.ChangeDetectorRef }], propDecorators: { example: [{
                type: Input
            }] } });

// NG2
class CodeExampleComponent {
    constructor() {
        /** Whether the source for the example is being displayed. */
        this.showSource = false;
    }
    get example() {
        return this._example;
    }
    set example(example) {
        if (example && EXAMPLE_COMPONENTS[example]) {
            this._example = example;
            this.exampleData = EXAMPLE_COMPONENTS[example];
            this.selectedPortal = new ComponentPortal(this.exampleData.component);
        }
        else {
            console.log('MISSING EXAMPLE: ', example);
        }
    }
    toggleSourceView() {
        this.showSource = !this.showSource;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: CodeExampleComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: CodeExampleComponent, isStandalone: false, selector: "code-example", inputs: { example: "example" }, ngImport: i0, template: `
    <div class="example">
      <div class="example-container">
        <ng-template [cdkPortalOutlet]="selectedPortal"></ng-template>
      </div>
      <div class="example-actions">
        <novo-button theme="icon" icon="book" (click)="toggleSourceView()"></novo-button>
      </div>
      <code-snippet [example]="example" *ngIf="showSource"></code-snippet>
    </div>
  `, isInline: true, styles: [".example{position:relative}.example-container{background-size:20px 20px;background-position:0px 0px,10px 0px,10px -10px,0px 10px}.example-actions{position:absolute;bottom:0;right:0}\n"], dependencies: [{ kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i2$1.NovoButtonElement, selector: "novo-button,button[theme]", inputs: ["color", "side", "size", "theme", "loading", "icon", "secondIcon", "disabled"] }, { kind: "directive", type: i2$1.ThemeColorDirective, selector: "[theme]", inputs: ["theme"] }, { kind: "directive", type: i3$1.CdkPortalOutlet, selector: "[cdkPortalOutlet]", inputs: ["cdkPortalOutlet"], outputs: ["attached"], exportAs: ["cdkPortalOutlet"] }, { kind: "component", type: CodeSnippetComponent, selector: "code-snippet", inputs: ["example"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: CodeExampleComponent, decorators: [{
            type: Component,
            args: [{ selector: 'code-example', template: `
    <div class="example">
      <div class="example-container">
        <ng-template [cdkPortalOutlet]="selectedPortal"></ng-template>
      </div>
      <div class="example-actions">
        <novo-button theme="icon" icon="book" (click)="toggleSourceView()"></novo-button>
      </div>
      <code-snippet [example]="example" *ngIf="showSource"></code-snippet>
    </div>
  `, standalone: false, styles: [".example{position:relative}.example-container{background-size:20px 20px;background-position:0px 0px,10px 0px,10px -10px,0px 10px}.example-actions{position:absolute;bottom:0;right:0}\n"] }]
        }], ctorParameters: () => [], propDecorators: { example: [{
                type: Input
            }] } });

// NG2
class DefaultLayout {
    constructor(route) {
        this.route = route;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: DefaultLayout, deps: [{ token: i1$3.ActivatedRoute }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: DefaultLayout, isStandalone: false, selector: "default-layout", host: { classAttribute: "default-layout" }, ngImport: i0, template: "<router-outlet></router-outlet>", styles: [""], dependencies: [{ kind: "directive", type: i1$3.RouterOutlet, selector: "router-outlet", inputs: ["name", "routerOutletData"], outputs: ["activate", "deactivate", "attach", "detach"], exportAs: ["outlet"] }], encapsulation: i0.ViewEncapsulation.None }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: DefaultLayout, decorators: [{
            type: Component,
            args: [{ selector: 'default-layout', host: { class: 'default-layout' }, encapsulation: ViewEncapsulation.None, standalone: false, template: "<router-outlet></router-outlet>" }]
        }], ctorParameters: () => [{ type: i1$3.ActivatedRoute }] });

// NG2
class FigureExample {
    get hb_theme() {
        return this.theme ? `figure-theme-${this.theme}` : '';
    }
    constructor(element, hljs) {
        this.element = element;
        this.hljs = hljs;
    }
    ngAfterViewInit() {
        console.log('View Init');
        this.element.nativeElement.querySelectorAll('code').forEach((el) => {
            setTimeout(() => this.hljs.highlightBlock(el), 300);
        });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: FigureExample, deps: [{ token: i0.ElementRef }, { token: HighlightJS }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: FigureExample, isStandalone: false, selector: "figure-example", inputs: { theme: "theme" }, host: { properties: { "class": "this.hb_theme" }, classAttribute: "figure-example" }, ngImport: i0, template: "<figure class=\"figure-container\">\n  <div class=\"figure-content\">\n    <ng-content select=\"img,[img],code,pre\"></ng-content>\n  </div>\n  <figcaption class=\"figure-caption\">\n    <ng-content select=\"novo-label,label\"></ng-content>\n    <ng-content></ng-content>\n  </figcaption>\n</figure>", styles: [".figure-example{display:flex;flex-direction:column;font-size:1.2rem;gap:1rem}.figure-example .figure-content{background-color:#eee;display:flex;align-items:center;justify-content:center}.figure-example .figure-content>pre,.figure-example .figure-content>code{flex:1;margin:0}.figure-example .figure-content>img{padding:2rem;background-color:none!important}.figure-example .figure-caption{display:flex;flex-flow:column;padding:1rem 0;gap:1rem}.figure-example.figure-theme-negative .figure-caption{border-top:3px solid #da4453}.figure-example.figure-theme-negative .figure-caption novo-icon{color:#da4453}.figure-example.figure-theme-success .figure-caption{border-top:3px solid #8cc152}.figure-example.figure-theme-success .figure-caption novo-icon{color:#8cc152}.figure-example.figure-theme-positive .figure-caption{border-top:3px solid #4a89dc}.figure-example.figure-theme-positive .figure-caption novo-icon{color:#4a89dc}\n"], encapsulation: i0.ViewEncapsulation.None }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: FigureExample, decorators: [{
            type: Component,
            args: [{ selector: 'figure-example', host: { class: 'figure-example' }, encapsulation: ViewEncapsulation.None, standalone: false, template: "<figure class=\"figure-container\">\n  <div class=\"figure-content\">\n    <ng-content select=\"img,[img],code,pre\"></ng-content>\n  </div>\n  <figcaption class=\"figure-caption\">\n    <ng-content select=\"novo-label,label\"></ng-content>\n    <ng-content></ng-content>\n  </figcaption>\n</figure>", styles: [".figure-example{display:flex;flex-direction:column;font-size:1.2rem;gap:1rem}.figure-example .figure-content{background-color:#eee;display:flex;align-items:center;justify-content:center}.figure-example .figure-content>pre,.figure-example .figure-content>code{flex:1;margin:0}.figure-example .figure-content>img{padding:2rem;background-color:none!important}.figure-example .figure-caption{display:flex;flex-flow:column;padding:1rem 0;gap:1rem}.figure-example.figure-theme-negative .figure-caption{border-top:3px solid #da4453}.figure-example.figure-theme-negative .figure-caption novo-icon{color:#da4453}.figure-example.figure-theme-success .figure-caption{border-top:3px solid #8cc152}.figure-example.figure-theme-success .figure-caption novo-icon{color:#8cc152}.figure-example.figure-theme-positive .figure-caption{border-top:3px solid #4a89dc}.figure-example.figure-theme-positive .figure-caption novo-icon{color:#4a89dc}\n"] }]
        }], ctorParameters: () => [{ type: i0.ElementRef }, { type: HighlightJS }], propDecorators: { theme: [{
                type: Input
            }], hb_theme: [{
                type: HostBinding,
                args: ['class']
            }] } });

// NG2
class PropsTableComponent {
    constructor() {
        this.kinds = ['Input'];
        this.props = [];
    }
    ngOnInit() {
        fetch('/assets/documentation.json')
            .then((response) => response.json())
            .then((documentation) => {
            const comp = documentation.children.find((it) => it.name === this.component);
            // Get properties for now, could add methods
            const props = comp.children.filter((p) => p.kindString === 'Property' || p.kindString === 'Accessor');
            const inputs = props.filter((p) => (p.decorators || []).filter((d) => d.name === 'Input').length);
            this.props = inputs.map((p) => {
                switch (p.kindString) {
                    case 'Accessor':
                        return {
                            name: p.name,
                            type: this.getType(p.getSignature[0]),
                            defaultValue: this.getDefaultValue(p.getSignature[0]),
                            description: p.comment ? p.comment.shortText : 'No Description',
                        };
                    default:
                        return {
                            name: p.name,
                            type: this.getType(p),
                            defaultValue: this.getDefaultValue(p),
                            description: p.comment ? p.comment.shortText : 'No Description',
                        };
                }
            });
        });
    }
    getDefaultValue(p) {
        if (p.comment?.tags) {
            const hasDefault = p.comment.tags.find((t) => t.tag === 'default');
            if (hasDefault) {
                return hasDefault.text.trim();
            }
        }
        return p.defaultValue || 'none';
    }
    getType(p) {
        if (p.type?.type === 'array') {
            return `${p.type.elementType.name} []`;
        }
        if (p.type?.type === 'union') {
            return `One of [ ${p.type.types.map((t) => t.value).join(', ')} ]`;
        }
        return p.type.name;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: PropsTableComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: PropsTableComponent, isStandalone: false, selector: "props-table", inputs: { component: "component", kinds: "kinds" }, host: { classAttribute: "props-table" }, ngImport: i0, template: "<table class=\"props-table\">\n  <thead>\n    <tr class=\"props-table-header-row\">\n      <th class=\"props-table-header-cell\">Prop Name</th>\n      <th class=\"props-table-header-cell\">Type</th>\n      <th class=\"props-table-header-cell\">Default Value</th>\n      <th class=\"props-table-header-cell\">Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr *ngFor=\"let prop of props\" class=\"props-table-row\">\n      <td class=\"props-table-cell props-name\">{{prop.name}}</td>\n      <td class=\"props-table-cell props-type\">{{prop.type}}</td>\n      <td class=\"props-table-cell props-default\">{{prop.defaultValue}}</td>\n      <td class=\"props-table-cell props-description\">\n        <p class=\"props-description-wrapper\">{{prop.description}}</p>\n      </td>\n    </tr>\n  </tbody>\n</table>", styles: [""], dependencies: [{ kind: "directive", type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], encapsulation: i0.ViewEncapsulation.None }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: PropsTableComponent, decorators: [{
            type: Component,
            args: [{ selector: 'props-table', host: { class: 'props-table' }, encapsulation: ViewEncapsulation.None, standalone: false, template: "<table class=\"props-table\">\n  <thead>\n    <tr class=\"props-table-header-row\">\n      <th class=\"props-table-header-cell\">Prop Name</th>\n      <th class=\"props-table-header-cell\">Type</th>\n      <th class=\"props-table-header-cell\">Default Value</th>\n      <th class=\"props-table-header-cell\">Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr *ngFor=\"let prop of props\" class=\"props-table-row\">\n      <td class=\"props-table-cell props-name\">{{prop.name}}</td>\n      <td class=\"props-table-cell props-type\">{{prop.type}}</td>\n      <td class=\"props-table-cell props-default\">{{prop.defaultValue}}</td>\n      <td class=\"props-table-cell props-description\">\n        <p class=\"props-description-wrapper\">{{prop.description}}</p>\n      </td>\n    </tr>\n  </tbody>\n</table>" }]
        }], propDecorators: { component: [{
                type: Input
            }], kinds: [{
                type: Input
            }] } });

// NG2
class TabsLayout {
    constructor(route, resolver) {
        this.route = route;
        this.resolver = resolver;
        this.title = 'Unknown';
        this.pages = [];
        this.title = this.route.snapshot.data.title;
        this.pages = this.route.snapshot.data.pages;
        this.componentToCreate = this.route.snapshot.data.description;
    }
    ngAfterViewInit() {
        if (this.componentToCreate) {
            const factory = this.resolver.resolveComponentFactory(this.componentToCreate);
            const component = this.viewContainerRef.createComponent(factory);
            // this.viewContainerRef.insert(component.hostView);
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: TabsLayout, deps: [{ token: i1$3.ActivatedRoute }, { token: i0.ComponentFactoryResolver }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: TabsLayout, isStandalone: false, selector: "tabs-layout", host: { classAttribute: "tabs-layout" }, viewQueries: [{ propertyName: "viewContainerRef", first: true, predicate: ["dynamic"], descendants: true, read: ViewContainerRef }], ngImport: i0, template: "<novo-title size=\"3xl\" mb=\"lg\">{{title}}</novo-title>\n\n<ng-template #dynamic></ng-template>\n\n<novo-nav class=\"docs-page-nav\" borderBottom=\"1px solid var(--border)\" marginBottom=\"2rem\">\n  <novo-tab-link *ngFor=\"let page of pages\" [routerLink]=\"[page.route]\">{{page.title}}\n  </novo-tab-link>\n</novo-nav>\n\n<router-outlet></router-outlet>", styles: [".tabs-layout .docs-page-nav{position:sticky;top:-1px;background:var(--background-body)}\n"], dependencies: [{ kind: "directive", type: i1$3.RouterOutlet, selector: "router-outlet", inputs: ["name", "routerOutletData"], outputs: ["activate", "deactivate", "attach", "detach"], exportAs: ["outlet"] }, { kind: "directive", type: i1$3.RouterLink, selector: "[routerLink]", inputs: ["target", "queryParams", "fragment", "queryParamsHandling", "state", "info", "relativeTo", "preserveFragment", "skipLocationChange", "replaceUrl", "routerLink"] }, { kind: "directive", type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "component", type: i2$1.NovoNavElement, selector: "novo-nav", inputs: ["theme", "direction", "outlet", "router", "condensed", "selectedIndex"], outputs: ["selectedIndexChange"] }, { kind: "component", type: i2$1.NovoTabLinkElement, selector: "novo-tab-link", inputs: ["active", "disabled", "spy"] }, { kind: "component", type: i2$1.NovoTitle, selector: "novo-title,[novo-title]" }, { kind: "directive", type: i2$1.MarginDirective, selector: "[m],[margin],[marginTop],[marginRight],[marginBottom],[marginLeft],[marginX],[marginY],[mt],[mr],[mb],[ml],[mx],[my]", inputs: ["margin", "m", "marginLeft", "ml", "marginRight", "mr", "marginTop", "mt", "marginBottom", "mb", "marginX", "mx", "marginY", "my"] }, { kind: "directive", type: i2$1.BorderDirective, selector: "[border], [bb], [borderBottom], [bt], [borderTop], [bl], [borderLeft], [br], [borderRight], [bx], [borderX], [by], [borderY]", inputs: ["borderStyle", "borderColor", "borderWidth", "border", "borderLeft", "bl", "borderRight", "br", "borderTop", "bt", "borderBottom", "bb", "borderX", "bx", "borderY", "by"] }], encapsulation: i0.ViewEncapsulation.None }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: TabsLayout, decorators: [{
            type: Component,
            args: [{ selector: 'tabs-layout', host: { class: 'tabs-layout' }, encapsulation: ViewEncapsulation.None, standalone: false, template: "<novo-title size=\"3xl\" mb=\"lg\">{{title}}</novo-title>\n\n<ng-template #dynamic></ng-template>\n\n<novo-nav class=\"docs-page-nav\" borderBottom=\"1px solid var(--border)\" marginBottom=\"2rem\">\n  <novo-tab-link *ngFor=\"let page of pages\" [routerLink]=\"[page.route]\">{{page.title}}\n  </novo-tab-link>\n</novo-nav>\n\n<router-outlet></router-outlet>", styles: [".tabs-layout .docs-page-nav{position:sticky;top:-1px;background:var(--background-body)}\n"] }]
        }], ctorParameters: () => [{ type: i1$3.ActivatedRoute }, { type: i0.ComponentFactoryResolver }], propDecorators: { viewContainerRef: [{
                type: ViewChild,
                args: ['dynamic', {
                        read: ViewContainerRef,
                    }]
            }] } });

// NG2
class TypedefContent {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: TypedefContent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: TypedefContent, isStandalone: false, selector: "typedef-content", host: { classAttribute: "typedef-content" }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, encapsulation: i0.ViewEncapsulation.None }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: TypedefContent, decorators: [{
            type: Component,
            args: [{
                    selector: 'typedef-content',
                    template: '<ng-content></ng-content>',
                    host: { class: 'typedef-content' },
                    encapsulation: ViewEncapsulation.None,
                    standalone: false
                }]
        }] });
class TypedefSpec {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: TypedefSpec, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: TypedefSpec, isStandalone: false, selector: "typedef-specs", host: { classAttribute: "typedef-specs" }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, encapsulation: i0.ViewEncapsulation.None }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: TypedefSpec, decorators: [{
            type: Component,
            args: [{
                    selector: 'typedef-specs',
                    template: '<ng-content></ng-content>',
                    host: { class: 'typedef-specs' },
                    encapsulation: ViewEncapsulation.None,
                    standalone: false
                }]
        }] });
class TypedefSnippet {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: TypedefSnippet, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: TypedefSnippet, isStandalone: false, selector: "typedef-snippet", host: { classAttribute: "typedef-snippet" }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, encapsulation: i0.ViewEncapsulation.None }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: TypedefSnippet, decorators: [{
            type: Component,
            args: [{
                    selector: 'typedef-snippet',
                    template: '<ng-content></ng-content>',
                    host: { class: 'typedef-snippet' },
                    encapsulation: ViewEncapsulation.None,
                    standalone: false
                }]
        }] });
class TypedefExample {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: TypedefExample, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: TypedefExample, isStandalone: false, selector: "typedef-example", host: { classAttribute: "typedef-example" }, ngImport: i0, template: "<as-split unit=\"pixel\" direction=\"horizontal\">\n  <as-split-area size=\"*\">\n    <ng-content select=\"typedef-content\"></ng-content>\n  </as-split-area>\n  <as-split-area size=\"200\">\n    <ng-content select=\"typedef-specs\"></ng-content>\n  </as-split-area>\n</as-split>\n<ng-content select=\"typedef-snippet\"></ng-content>", styles: [".typedef-example{display:flex;flex-direction:column;border:1px solid lightgray;margin-bottom:2rem;font-size:1.2rem}.as-split-gutter{height:auto!important}as-split .as-split-area{height:auto!important}.typedef-content{display:flex;padding:1rem;align-items:center;height:100%}.typedef-specs{display:block;padding:1rem}.typedef-specs dl{display:grid;grid-template-columns:1fr min-content}.typedef-specs dt{line-height:1.25;display:inline-block;font-weight:600}.typedef-specs dd{line-height:1.25;display:inline-block;font-weight:400}.typedef-snippet{display:block;grid-column-end:span 2;border-top:1px solid lightgray;padding:1rem;background-color:#eee}.typedef-snippet pre{margin:0!important}.typedef-snippet pre code{font-size:1.1rem;padding:.2rem!important}\n"], dependencies: [{ kind: "component", type: i1$4.SplitComponent, selector: "as-split", inputs: ["gutterSize", "gutterStep", "disabled", "gutterClickDeltaPx", "direction", "dir", "unit", "gutterAriaLabel", "restrictMove", "useTransition", "gutterDblClickDuration"], outputs: ["gutterClick", "gutterDblClick", "dragStart", "dragEnd", "transitionEnd"], exportAs: ["asSplit"] }, { kind: "component", type: i1$4.SplitAreaComponent, selector: "as-split-area", inputs: ["size", "minSize", "maxSize", "lockSize", "visible"], exportAs: ["asSplitArea"] }], encapsulation: i0.ViewEncapsulation.None }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: TypedefExample, decorators: [{
            type: Component,
            args: [{ selector: 'typedef-example', host: { class: 'typedef-example' }, encapsulation: ViewEncapsulation.None, standalone: false, template: "<as-split unit=\"pixel\" direction=\"horizontal\">\n  <as-split-area size=\"*\">\n    <ng-content select=\"typedef-content\"></ng-content>\n  </as-split-area>\n  <as-split-area size=\"200\">\n    <ng-content select=\"typedef-specs\"></ng-content>\n  </as-split-area>\n</as-split>\n<ng-content select=\"typedef-snippet\"></ng-content>", styles: [".typedef-example{display:flex;flex-direction:column;border:1px solid lightgray;margin-bottom:2rem;font-size:1.2rem}.as-split-gutter{height:auto!important}as-split .as-split-area{height:auto!important}.typedef-content{display:flex;padding:1rem;align-items:center;height:100%}.typedef-specs{display:block;padding:1rem}.typedef-specs dl{display:grid;grid-template-columns:1fr min-content}.typedef-specs dt{line-height:1.25;display:inline-block;font-weight:600}.typedef-specs dd{line-height:1.25;display:inline-block;font-weight:400}.typedef-snippet{display:block;grid-column-end:span 2;border-top:1px solid lightgray;padding:1rem;background-color:#eee}.typedef-snippet pre{margin:0!important}.typedef-snippet pre code{font-size:1.1rem;padding:.2rem!important}\n"] }]
        }] });

/* tslint:disable */
/** DO NOT MANUALLY EDIT THIS FILE, IT IS GENERATED VIA GULP 'build-examples-module' */
class NovoExamplesSharedModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: NovoExamplesSharedModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "19.2.15", ngImport: i0, type: NovoExamplesSharedModule, declarations: [CodeSnippetComponent,
            CodeExampleComponent,
            TypedefContent,
            TypedefExample,
            TypedefSnippet,
            TypedefSpec,
            FigureExample,
            TabsLayout,
            DefaultLayout,
            PropsTableComponent], imports: [RouterModule,
            FormsModule,
            ReactiveFormsModule,
            CommonModule,
            AngularSplitModule,
            NovoElementsModule,
            PortalModule], exports: [CodeSnippetComponent,
            CodeExampleComponent,
            TypedefContent,
            TypedefExample,
            TypedefSnippet,
            TypedefSpec,
            FigureExample,
            TabsLayout,
            DefaultLayout,
            PropsTableComponent] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: NovoExamplesSharedModule, providers: [HighlightJS], imports: [RouterModule,
            FormsModule,
            ReactiveFormsModule,
            CommonModule,
            AngularSplitModule,
            NovoElementsModule,
            PortalModule] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: NovoExamplesSharedModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [
                        CodeSnippetComponent,
                        CodeExampleComponent,
                        TypedefContent,
                        TypedefExample,
                        TypedefSnippet,
                        TypedefSpec,
                        FigureExample,
                        TabsLayout,
                        DefaultLayout,
                        PropsTableComponent,
                    ],
                    exports: [
                        CodeSnippetComponent,
                        CodeExampleComponent,
                        TypedefContent,
                        TypedefExample,
                        TypedefSnippet,
                        TypedefSpec,
                        FigureExample,
                        TabsLayout,
                        DefaultLayout,
                        PropsTableComponent,
                    ],
                    imports: [
                        RouterModule,
                        FormsModule,
                        ReactiveFormsModule,
                        CommonModule,
                        AngularSplitModule,
                        NovoElementsModule,
                        PortalModule,
                    ],
                    providers: [HighlightJS],
                }]
        }] });

/* tslint:disable */
/** DO NOT MANUALLY EDIT THIS FILE, IT IS GENERATED 'build-examples-module' */
class SecurityPage {
    constructor() {
        this.params = {};
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: SecurityPage, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: SecurityPage, isStandalone: false, selector: "security-page", host: { classAttribute: "markdown-page" }, ngImport: i0, template: `<h1>Security</h1>
<p>The security component for this library a simple wrapper to implement ngIf functionality with a Security service.</p>
<h4>Configuration</h4>
<p>blah blah blah</p>
<p><code-example example="security"></code-example></p>
`, isInline: true, dependencies: [{ kind: "component", type: CodeExampleComponent, selector: "code-example", inputs: ["example"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: SecurityPage, decorators: [{
            type: Component,
            args: [{
                    selector: 'security-page',
                    template: `<h1>Security</h1>
<p>The security component for this library a simple wrapper to implement ngIf functionality with a Security service.</p>
<h4>Configuration</h4>
<p>blah blah blah</p>
<p><code-example example="security"></code-example></p>
`,
                    host: { class: 'markdown-page' },
                    standalone: false,
                }]
        }] });
class QuickNotePage {
    constructor() {
        this.params = {};
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: QuickNotePage, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: QuickNotePage, isStandalone: false, selector: "quick-note-page", host: { classAttribute: "markdown-page" }, ngImport: i0, template: `<h1>Quick Note <a href="https://github.com/bullhorn/novo-elements/blob/master/projects/novo-elements/src/elements/quick-note">(source)</a></h1>
<h5>Basic Examples</h5>
<p><code-example example="basic-quick-note"></code-example></p>
<h5>Custom Triggers</h5>
<p><code-example example="custom-quick-note"></code-example></p>
<h5>Custom Results Template</h5>
<p><code-example example="custom-quick-note-results"></code-example></p>
`, isInline: true, dependencies: [{ kind: "component", type: CodeExampleComponent, selector: "code-example", inputs: ["example"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: QuickNotePage, decorators: [{
            type: Component,
            args: [{
                    selector: 'quick-note-page',
                    template: `<h1>Quick Note <a href="https://github.com/bullhorn/novo-elements/blob/master/projects/novo-elements/src/elements/quick-note">(source)</a></h1>
<h5>Basic Examples</h5>
<p><code-example example="basic-quick-note"></code-example></p>
<h5>Custom Triggers</h5>
<p><code-example example="custom-quick-note"></code-example></p>
<h5>Custom Results Template</h5>
<p><code-example example="custom-quick-note-results"></code-example></p>
`,
                    host: { class: 'markdown-page' },
                    standalone: false,
                }]
        }] });
class PipesPage {
    constructor() {
        this.params = {};
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: PipesPage, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: PipesPage, isStandalone: false, selector: "pipes-page", host: { classAttribute: "markdown-page" }, ngImport: i0, template: `<h1>Pipes</h1>
<p>Utility and helpful pipes.</p>
<h5>Pluralize <a href="https://github.com/bullhorn/novo-elements/blob/master/projects/novo-elements/src/pipes/plural">(source)</a></h5>
<p>Makes works plural or vice-versa</p>
<p><code-example example="pluralize"></code-example></p>
`, isInline: true, dependencies: [{ kind: "component", type: CodeExampleComponent, selector: "code-example", inputs: ["example"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: PipesPage, decorators: [{
            type: Component,
            args: [{
                    selector: 'pipes-page',
                    template: `<h1>Pipes</h1>
<p>Utility and helpful pipes.</p>
<h5>Pluralize <a href="https://github.com/bullhorn/novo-elements/blob/master/projects/novo-elements/src/pipes/plural">(source)</a></h5>
<p>Makes works plural or vice-versa</p>
<p><code-example example="pluralize"></code-example></p>
`,
                    host: { class: 'markdown-page' },
                    standalone: false,
                }]
        }] });
class FieldInteractionsPage {
    constructor() {
        this.params = {};
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: FieldInteractionsPage, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: FieldInteractionsPage, isStandalone: false, selector: "field-interactions-page", host: { classAttribute: "markdown-page" }, ngImport: i0, template: `<h1>Field Interactions</h1>
<p>Field Interactions is a simple API that allows you to modify NovoForms based on field changes.</p>
<p>The Field Interaction API gives you a simple to use API object when writing your field interaction functions.</p>
<p>Look below for samples of what you can do with this API...</p>
<h2>Configuration</h2>
<p>Inspect Form Configuration on Field Getting Current Context Write Field Interaction</p>
<h5>Inspect Form</h5>
<p>There is a special <code>data-control-key</code> property added to the <code>novo-control</code> element.</p>
<p>You can inspec the DOM at the input and see the property to know what 'key' to use in the API</p>
<p>By default, if you are writing a Field Interaction for the active field you can use <code>API.getActiveKey()</code></p>
<h5>Configuration on Field</h5>
<pre><code>event: 'change|focus|blur|init', script: Function, invokeOnInit?: boolean
</code></pre>
<p>The Field Interactions are configured on a per control basis. There are three scenarios in which they will be fired: 'change', 'focus' and 'blur'.</p>
<p>init -- gets fired only when the form is initialized</p>
<p>change -- gets fired when the value of the form control changes</p>
<p>focus -- gets fired when the field gets focused</p>
<p>blur -- gets fired when the field loses focus</p>
<p>The script function represents the function that will be fired for the event, you can see examples of these below.</p>
<p>Lastly, 'invokeOnInit' will also trigger the Field Interaction when the form is created as well. A script can check <code>API.isInvokedOnInit</code> to determine if the current call is due to initialization or due to a user change.</p>
<h5>Getting Current Context</h5>
<p>If you need to write Field Interaction based on if you are on an add or edit page, or you need to know the current entity type and ID then you can get those via:</p>
<p>edit: 'API.isEdit'</p>
<p>entity: 'API.currentEntity'</p>
<p>id: 'API.currentEntityId'</p>
<h5>Write Field Interaction</h5>
<p>Writing Field Interactions is very simple. You can refer to all the examples below. If you ever get stuck, you can always open a <a href="https://github.com/bullhorn/novo-elements/issues">Github Issue</a> as well!</p>
<p><strong>IMPORTANT</strong></p>
<p>When writing field interactions, you will be writing everything only the contents of the function. <strong>You do not</strong> write the surrounding function.</p>
<p><strong>All field interactions must be written in vanilla ES5 as well!</strong></p>
<h2>Basic API</h2>
<p>Validation Mark Fields as Required Field Calculations &amp; Modification Hide / Show Fields Enable / Disable Fields Messaging / Notifications Modifying Config on Static Pickers / Selects Using Globals Async Interactions Confirm Changes Adding / Removing Fields Add Tooltip</p>
<h5>Validation</h5>
<p>If you need to perform some custom validation on a field, you can use the API to quickly mark a field as invalid</p>
<p><code-example example="fi-validation"></code-example></p>
<h5>Mark Fields as Required</h5>
<p>If you need to mark fields as required or not based on some changes in the form, you can use the API to do that!</p>
<p><code-example example="fi-required"></code-example></p>
<h5>Field Calculations &amp; Modification</h5>
<p>If you need to do some custom calculations based off other form data, you can do that easily with the API</p>
<p><code-example example="fi-calculation"></code-example></p>
<h5>Hide / Show Fields</h5>
<p>You can also hide or show certain fields based on interaction with the form. Note that the value is still present in the form's value</p>
<p><code-example example="fi-hide-show"></code-example></p>
<h5>Enable / Disable Fields</h5>
<p>You can also enable or disable certain fields based on interaction with the form. Note that the value is still present in the form's value but does not respond to any interactions</p>
<p><code-example example="fi-enable-disable"></code-example></p>
<h5>Messaging / Notifications</h5>
<p>You can trigger messages to users in a few different ways using the API</p>
<p><code-example example="fi-messaging"></code-example></p>
<h5>Modifying Config on Static Pickers / Selects</h5>
<p>You have full control over the control, you can modify the options array of static pickers and select controls!</p>
<p><code-example example="fi-modify-options"></code-example></p>
<h5>Modifying Config on Static Pickers / Selects to mimic an Entity Picker</h5>
<p>You can modify a picker added to a form via field interactions to look like an entity picker!</p>
<p><code-example example="fi-modify-added-picker"></code-example></p>
<h5>Using Globals</h5>
<p>Using the config from above, you can figure the API to have a set of global variables that you can key off of inside your field interactions</p>
<p><code-example example="fi-globals"></code-example></p>
<h5>Async Interactions</h5>
<p>You can perform async interactions and keep the form from saving by setting a loading state</p>
<p><code-example example="fi-async"></code-example></p>
<h5>Confirm Changes</h5>
<p>You can prompt the user if they want to update the field or not too!</p>
<p><code-example example="fi-confirm"></code-example></p>
<h5>Adding / Removing Fields</h5>
<p>With the API you can quickly add and remove fields on the form.</p>
<p><strong>ONLY WORKS WITH DYNAMIC FORMS</strong></p>
<p><code-example example="fi-adding-removing"></code-example></p>
<h5>Add Tooltip</h5>
<p>You are able to dynamically change a field's tooltip.</p>
<p><code-example example="fi-tooltip"></code-example></p>
<h5>Add PopOver</h5>
<p>You are able to dynamically change a field's PopOver, which is for larger content than fits into a tooltip.</p>
<p><code-example example="fi-popover"></code-example></p>
<h5>Modify Description</h5>
<p>You are able to dynamically change the description of a field, potentially adding in custom HTML.</p>
<p><code-example example="fi-description"></code-example></p>
<h5>Interacting with Nested Forms</h5>
<p>Field Interactions can navigate nested forms to interact with parent and child forms. This example uses the Form Group component which contains an array of nested forms that are kept in sync by field interactions.</p>
<p><code-example example="fi-nested"></code-example></p>
`, isInline: true, dependencies: [{ kind: "component", type: CodeExampleComponent, selector: "code-example", inputs: ["example"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: FieldInteractionsPage, decorators: [{
            type: Component,
            args: [{
                    selector: 'field-interactions-page',
                    template: `<h1>Field Interactions</h1>
<p>Field Interactions is a simple API that allows you to modify NovoForms based on field changes.</p>
<p>The Field Interaction API gives you a simple to use API object when writing your field interaction functions.</p>
<p>Look below for samples of what you can do with this API...</p>
<h2>Configuration</h2>
<p>Inspect Form Configuration on Field Getting Current Context Write Field Interaction</p>
<h5>Inspect Form</h5>
<p>There is a special <code>data-control-key</code> property added to the <code>novo-control</code> element.</p>
<p>You can inspec the DOM at the input and see the property to know what 'key' to use in the API</p>
<p>By default, if you are writing a Field Interaction for the active field you can use <code>API.getActiveKey()</code></p>
<h5>Configuration on Field</h5>
<pre><code>event: 'change|focus|blur|init', script: Function, invokeOnInit?: boolean
</code></pre>
<p>The Field Interactions are configured on a per control basis. There are three scenarios in which they will be fired: 'change', 'focus' and 'blur'.</p>
<p>init -- gets fired only when the form is initialized</p>
<p>change -- gets fired when the value of the form control changes</p>
<p>focus -- gets fired when the field gets focused</p>
<p>blur -- gets fired when the field loses focus</p>
<p>The script function represents the function that will be fired for the event, you can see examples of these below.</p>
<p>Lastly, 'invokeOnInit' will also trigger the Field Interaction when the form is created as well. A script can check <code>API.isInvokedOnInit</code> to determine if the current call is due to initialization or due to a user change.</p>
<h5>Getting Current Context</h5>
<p>If you need to write Field Interaction based on if you are on an add or edit page, or you need to know the current entity type and ID then you can get those via:</p>
<p>edit: 'API.isEdit'</p>
<p>entity: 'API.currentEntity'</p>
<p>id: 'API.currentEntityId'</p>
<h5>Write Field Interaction</h5>
<p>Writing Field Interactions is very simple. You can refer to all the examples below. If you ever get stuck, you can always open a <a href="https://github.com/bullhorn/novo-elements/issues">Github Issue</a> as well!</p>
<p><strong>IMPORTANT</strong></p>
<p>When writing field interactions, you will be writing everything only the contents of the function. <strong>You do not</strong> write the surrounding function.</p>
<p><strong>All field interactions must be written in vanilla ES5 as well!</strong></p>
<h2>Basic API</h2>
<p>Validation Mark Fields as Required Field Calculations &amp; Modification Hide / Show Fields Enable / Disable Fields Messaging / Notifications Modifying Config on Static Pickers / Selects Using Globals Async Interactions Confirm Changes Adding / Removing Fields Add Tooltip</p>
<h5>Validation</h5>
<p>If you need to perform some custom validation on a field, you can use the API to quickly mark a field as invalid</p>
<p><code-example example="fi-validation"></code-example></p>
<h5>Mark Fields as Required</h5>
<p>If you need to mark fields as required or not based on some changes in the form, you can use the API to do that!</p>
<p><code-example example="fi-required"></code-example></p>
<h5>Field Calculations &amp; Modification</h5>
<p>If you need to do some custom calculations based off other form data, you can do that easily with the API</p>
<p><code-example example="fi-calculation"></code-example></p>
<h5>Hide / Show Fields</h5>
<p>You can also hide or show certain fields based on interaction with the form. Note that the value is still present in the form's value</p>
<p><code-example example="fi-hide-show"></code-example></p>
<h5>Enable / Disable Fields</h5>
<p>You can also enable or disable certain fields based on interaction with the form. Note that the value is still present in the form's value but does not respond to any interactions</p>
<p><code-example example="fi-enable-disable"></code-example></p>
<h5>Messaging / Notifications</h5>
<p>You can trigger messages to users in a few different ways using the API</p>
<p><code-example example="fi-messaging"></code-example></p>
<h5>Modifying Config on Static Pickers / Selects</h5>
<p>You have full control over the control, you can modify the options array of static pickers and select controls!</p>
<p><code-example example="fi-modify-options"></code-example></p>
<h5>Modifying Config on Static Pickers / Selects to mimic an Entity Picker</h5>
<p>You can modify a picker added to a form via field interactions to look like an entity picker!</p>
<p><code-example example="fi-modify-added-picker"></code-example></p>
<h5>Using Globals</h5>
<p>Using the config from above, you can figure the API to have a set of global variables that you can key off of inside your field interactions</p>
<p><code-example example="fi-globals"></code-example></p>
<h5>Async Interactions</h5>
<p>You can perform async interactions and keep the form from saving by setting a loading state</p>
<p><code-example example="fi-async"></code-example></p>
<h5>Confirm Changes</h5>
<p>You can prompt the user if they want to update the field or not too!</p>
<p><code-example example="fi-confirm"></code-example></p>
<h5>Adding / Removing Fields</h5>
<p>With the API you can quickly add and remove fields on the form.</p>
<p><strong>ONLY WORKS WITH DYNAMIC FORMS</strong></p>
<p><code-example example="fi-adding-removing"></code-example></p>
<h5>Add Tooltip</h5>
<p>You are able to dynamically change a field's tooltip.</p>
<p><code-example example="fi-tooltip"></code-example></p>
<h5>Add PopOver</h5>
<p>You are able to dynamically change a field's PopOver, which is for larger content than fits into a tooltip.</p>
<p><code-example example="fi-popover"></code-example></p>
<h5>Modify Description</h5>
<p>You are able to dynamically change the description of a field, potentially adding in custom HTML.</p>
<p><code-example example="fi-description"></code-example></p>
<h5>Interacting with Nested Forms</h5>
<p>Field Interactions can navigate nested forms to interact with parent and child forms. This example uses the Form Group component which contains an array of nested forms that are kept in sync by field interactions.</p>
<p><code-example example="fi-nested"></code-example></p>
`,
                    host: { class: 'markdown-page' },
                    standalone: false,
                }]
        }] });
class DragDropPage {
    constructor() {
        this.params = {};
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: DragDropPage, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: DragDropPage, isStandalone: false, selector: "drag-drop-page", host: { classAttribute: "markdown-page" }, ngImport: i0, template: `<h1>Drag and Drop <a href="https://github.com/bullhorn/novo-elements/blob/master/projects/novo-elements/src/elements/drag-drop">(source)</a></h1>
<p>A draggable container, using <code>[novoDragDrop]</code>, allows the user to click and drag controls within that container to rearrange them. There is no hard requirement on what types of controls are placed inside, but <a href="https://bullhorn.github.io/novo-elements/docs/#/layouts/card/design">cards</a> are recommended.</p>
<p>This utility was built to replace Dragula, which was deprecated in Novo Elements in V8. Novo Elements allows for the use of other drag-and-drop libraries such as <a href="https://material.angular.io/cdk/drag-drop/overview">cdkDragDrop</a> and <a href="https://sortablejs.github.io/ngx-sortablejs/sortable-array">Sortable.js</a>, but several of them exhibit problems when rearranging items in a two-dimensional grid. This implementation uses simple HTML behavior and events for reordering to maximize compatibility. Users may consider using another drag and drop library if they require support dragging items between multiple containers, or prefer more detailed animation behaviors.</p>
<h5>Basic Example</h5>
<p><code-example example="drag-drop"></code-example></p>
`, isInline: true, dependencies: [{ kind: "component", type: CodeExampleComponent, selector: "code-example", inputs: ["example"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: DragDropPage, decorators: [{
            type: Component,
            args: [{
                    selector: 'drag-drop-page',
                    template: `<h1>Drag and Drop <a href="https://github.com/bullhorn/novo-elements/blob/master/projects/novo-elements/src/elements/drag-drop">(source)</a></h1>
<p>A draggable container, using <code>[novoDragDrop]</code>, allows the user to click and drag controls within that container to rearrange them. There is no hard requirement on what types of controls are placed inside, but <a href="https://bullhorn.github.io/novo-elements/docs/#/layouts/card/design">cards</a> are recommended.</p>
<p>This utility was built to replace Dragula, which was deprecated in Novo Elements in V8. Novo Elements allows for the use of other drag-and-drop libraries such as <a href="https://material.angular.io/cdk/drag-drop/overview">cdkDragDrop</a> and <a href="https://sortablejs.github.io/ngx-sortablejs/sortable-array">Sortable.js</a>, but several of them exhibit problems when rearranging items in a two-dimensional grid. This implementation uses simple HTML behavior and events for reordering to maximize compatibility. Users may consider using another drag and drop library if they require support dragging items between multiple containers, or prefer more detailed animation behaviors.</p>
<h5>Basic Example</h5>
<p><code-example example="drag-drop"></code-example></p>
`,
                    host: { class: 'markdown-page' },
                    standalone: false,
                }]
        }] });
class CodeEditorPage {
    constructor() {
        this.params = {};
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: CodeEditorPage, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: CodeEditorPage, isStandalone: false, selector: "code-editor-page", host: { classAttribute: "markdown-page" }, ngImport: i0, template: `<h1>Code Editor <a href="https://github.com/bullhorn/novo-elements/blob/master/projects/novo-elements/src/addons/code-editor">(source)</a></h1>
<p>Basic code editor using <a href="https://codemirror.net/5/">CodeMirror</a> Editor.</p>
<h5>Basic Example</h5>
<p><code-example example="basic-code"></code-example></p>
`, isInline: true, dependencies: [{ kind: "component", type: CodeExampleComponent, selector: "code-example", inputs: ["example"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: CodeEditorPage, decorators: [{
            type: Component,
            args: [{
                    selector: 'code-editor-page',
                    template: `<h1>Code Editor <a href="https://github.com/bullhorn/novo-elements/blob/master/projects/novo-elements/src/addons/code-editor">(source)</a></h1>
<p>Basic code editor using <a href="https://codemirror.net/5/">CodeMirror</a> Editor.</p>
<h5>Basic Example</h5>
<p><code-example example="basic-code"></code-example></p>
`,
                    host: { class: 'markdown-page' },
                    standalone: false,
                }]
        }] });
class AceEditorPage {
    constructor() {
        this.params = {};
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: AceEditorPage, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: AceEditorPage, isStandalone: false, selector: "ace-editor-page", host: { classAttribute: "markdown-page" }, ngImport: i0, template: `<h1>Ace Editor <a href="https://github.com/bullhorn/novo-elements/blob/master/projects/novo-elements/src/addons/ace-editor">(source)</a></h1>
<p>🛑 <strong>This add-on has been deprecated. Please use the replacement <a href="http://bullhorn.github.io/novo-elements/docs/#/utils/code%20editor">Code Editor</a> add-on instead.</strong></p>
<p>Basic code editor using <a href="https://ace.c9.io/">Ace Editor</a>.</p>
<h5>Basic Example</h5>
<p><code-example example="basic-ace"></code-example></p>
`, isInline: true, dependencies: [{ kind: "component", type: CodeExampleComponent, selector: "code-example", inputs: ["example"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: AceEditorPage, decorators: [{
            type: Component,
            args: [{
                    selector: 'ace-editor-page',
                    template: `<h1>Ace Editor <a href="https://github.com/bullhorn/novo-elements/blob/master/projects/novo-elements/src/addons/ace-editor">(source)</a></h1>
<p>🛑 <strong>This add-on has been deprecated. Please use the replacement <a href="http://bullhorn.github.io/novo-elements/docs/#/utils/code%20editor">Code Editor</a> add-on instead.</strong></p>
<p>Basic code editor using <a href="https://ace.c9.io/">Ace Editor</a>.</p>
<h5>Basic Example</h5>
<p><code-example example="basic-ace"></code-example></p>
`,
                    host: { class: 'markdown-page' },
                    standalone: false,
                }]
        }] });
class v9Page {
    constructor() {
        this.params = {};
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: v9Page, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: v9Page, isStandalone: false, selector: "v9-page", host: { classAttribute: "markdown-page" }, ngImport: i0, template: `<h1>📢  December 2023 (version 9)</h1>
<h1>Continuing CommonJS library removal</h1>
<p>The previous release of novo-elements, version 8, started to deprecate some modules that relied on CommonJS libraries. In version 9, we are introducing some new options to replace the tools that we've removed.</p>
<h2>NovoDragDrop</h2>
<p>While there are several third-party options to replace Dragula (deprecated in v8), our drag-and-drop utility, such as <a href="https://v7.material.angular.io/cdk/drag-drop/overview">cdkDrag</a> and <a href="https://www.npmjs.com/package/ngx-drag-drop">ngx-drag-drop</a>, we are also adding the <a href="https://bullhorn.github.io/novo-elements/docs/#/utils/drag%20and%20drop"><code>NovoDragDropModule</code></a>, which provides drag and drop capability with support for grid layouts. We have also added an example page to demonstrate its usage.</p>
<p>We recommend that users switch from the dragula directive to novoDragDrop, cdkDrag, or a third-party solution in anticipation of future optimization strategies.</p>
<h2>Code Editor</h2>
<p>In version 8, we deprecated Ace Editor. This module has not been removed yet, but there is now a recommended option to replace it: <a href="https://bullhorn.github.io/novo-elements/docs/#/utils/code%20editor">The Novo Code Editor</a>, backed by <a href="https://codemirror.net/">Codemirror</a>. This supports basic syntax highlighting for JavaScript.</p>
<h2>Text masks</h2>
<p><code>angular2-text-mask</code>, a CommonJS dependency used for text masking support, has been exchanged for <code>imask</code>. This may affect the arguments provided to <code>maskOptions.mask</code> in the <code>TextBoxControl</code> type. The <a href="https://bullhorn.github.io/novo-elements/docs/#/form-controls/form">Form example</a> has been updated with a &quot;hexadecimal&quot; field to showcase its use. Further examples can be found on <a href="https://imask.js.org/guide.html#masked-base">imask's documentation page</a>.</p>
<h1>Peer Dependencies</h1>
<p>The following peer dependencies have been <em>removed</em> from novo-elements. If your core project does not use them, they can be safely removed.</p>
<ul>
<li>text-mask-addons</li>
<li>angular2-text-mask</li>
</ul>
<p>The following peer dependencies have been <em>added</em> to support the novo-code-editor.</p>
<ul>
<li>&#64;codemirror/commands</li>
<li>&#64;codemirror/state</li>
<li>&#64;codemirror/view</li>
<li>&#64;codemirror/lang-javascript</li>
<li>codemirror</li>
</ul>
<p>Lastly, the <code>timezone-support</code> module has been upgraded from 2.0.2 to 3.1.0.</p>
<h1>Upgrading to V9</h1>
<p>The following commands will upgrade novo-elements, as well as its dependencies.</p>
<pre><code><span class="hljs-attribute">npm</span> install --save  novo-elements&#64;^<span class="hljs-number">9</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span> &#64;codemirror/commands&#64;^<span class="hljs-number">6</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span> &#64;codemirror/state&#64;^<span class="hljs-number">6</span>.<span class="hljs-number">2</span>.<span class="hljs-number">1</span> &#64;codemirror/view&#64;<span class="hljs-number">6</span>.<span class="hljs-number">16</span>.<span class="hljs-number">0</span> codemirror&#64;<span class="hljs-number">6</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span> timezone-support&#64;^<span class="hljs-number">3</span>.<span class="hljs-number">1</span>.<span class="hljs-number">0</span>
<span class="hljs-attribute">npm</span> uninstall --save text-mask-addons angular2-text-mask
</code></pre>
`, isInline: true }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: v9Page, decorators: [{
            type: Component,
            args: [{
                    selector: 'v9-page',
                    template: `<h1>📢  December 2023 (version 9)</h1>
<h1>Continuing CommonJS library removal</h1>
<p>The previous release of novo-elements, version 8, started to deprecate some modules that relied on CommonJS libraries. In version 9, we are introducing some new options to replace the tools that we've removed.</p>
<h2>NovoDragDrop</h2>
<p>While there are several third-party options to replace Dragula (deprecated in v8), our drag-and-drop utility, such as <a href="https://v7.material.angular.io/cdk/drag-drop/overview">cdkDrag</a> and <a href="https://www.npmjs.com/package/ngx-drag-drop">ngx-drag-drop</a>, we are also adding the <a href="https://bullhorn.github.io/novo-elements/docs/#/utils/drag%20and%20drop"><code>NovoDragDropModule</code></a>, which provides drag and drop capability with support for grid layouts. We have also added an example page to demonstrate its usage.</p>
<p>We recommend that users switch from the dragula directive to novoDragDrop, cdkDrag, or a third-party solution in anticipation of future optimization strategies.</p>
<h2>Code Editor</h2>
<p>In version 8, we deprecated Ace Editor. This module has not been removed yet, but there is now a recommended option to replace it: <a href="https://bullhorn.github.io/novo-elements/docs/#/utils/code%20editor">The Novo Code Editor</a>, backed by <a href="https://codemirror.net/">Codemirror</a>. This supports basic syntax highlighting for JavaScript.</p>
<h2>Text masks</h2>
<p><code>angular2-text-mask</code>, a CommonJS dependency used for text masking support, has been exchanged for <code>imask</code>. This may affect the arguments provided to <code>maskOptions.mask</code> in the <code>TextBoxControl</code> type. The <a href="https://bullhorn.github.io/novo-elements/docs/#/form-controls/form">Form example</a> has been updated with a &quot;hexadecimal&quot; field to showcase its use. Further examples can be found on <a href="https://imask.js.org/guide.html#masked-base">imask's documentation page</a>.</p>
<h1>Peer Dependencies</h1>
<p>The following peer dependencies have been <em>removed</em> from novo-elements. If your core project does not use them, they can be safely removed.</p>
<ul>
<li>text-mask-addons</li>
<li>angular2-text-mask</li>
</ul>
<p>The following peer dependencies have been <em>added</em> to support the novo-code-editor.</p>
<ul>
<li>&#64;codemirror/commands</li>
<li>&#64;codemirror/state</li>
<li>&#64;codemirror/view</li>
<li>&#64;codemirror/lang-javascript</li>
<li>codemirror</li>
</ul>
<p>Lastly, the <code>timezone-support</code> module has been upgraded from 2.0.2 to 3.1.0.</p>
<h1>Upgrading to V9</h1>
<p>The following commands will upgrade novo-elements, as well as its dependencies.</p>
<pre><code><span class="hljs-attribute">npm</span> install --save  novo-elements&#64;^<span class="hljs-number">9</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span> &#64;codemirror/commands&#64;^<span class="hljs-number">6</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span> &#64;codemirror/state&#64;^<span class="hljs-number">6</span>.<span class="hljs-number">2</span>.<span class="hljs-number">1</span> &#64;codemirror/view&#64;<span class="hljs-number">6</span>.<span class="hljs-number">16</span>.<span class="hljs-number">0</span> codemirror&#64;<span class="hljs-number">6</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span> timezone-support&#64;^<span class="hljs-number">3</span>.<span class="hljs-number">1</span>.<span class="hljs-number">0</span>
<span class="hljs-attribute">npm</span> uninstall --save text-mask-addons angular2-text-mask
</code></pre>
`,
                    host: { class: 'markdown-page' },
                    standalone: false,
                }]
        }] });
class v8Page {
    constructor() {
        this.params = {};
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: v8Page, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: v8Page, isStandalone: false, selector: "v8-page", host: { classAttribute: "markdown-page" }, ngImport: i0, template: `<h1>📢  July 2023 (version 8)</h1>
<p><strong>Release v8.0.0</strong>: Along with a number of bug fixes, styling improvements, and feature additions, this v8 release includes new entry points for each component, as well as high level entry points for our elements, pipes, services, utils, and addons.</p>
<p><strong>What this means for you</strong>: If you use a number of novo-elements components and features then you can continue importing the root novo-elements module as normal with no changes to your application. If however, you are only using one or a handful of novo-elements features, you now have the option to import them individually, trimming all of the unused novo-elements code from your builds, reducing your app's bundle size and build time, and improving performance.</p>
<p><strong>How to use these new entry points</strong>: In your module file(s), instead of importing the root novo-elements module like so:</p>
<pre><code><span class="hljs-keyword">import</span> &#123; NovoElementsModule &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;novo-elements&#x27;</span>;
</code></pre>
<p>If you wish you can now only import the components you need, like this:</p>
<pre><code><span class="hljs-keyword">import</span> &#123; NovoAceEditorModule &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;novo-elements/addons/ace-editor&#x27;</span>;
</code></pre>
<p>New top-level entry points include:</p>
<pre><code><span class="hljs-symbol">&#x27;novo-elements/addons</span>&#x27;
<span class="hljs-symbol">&#x27;novo-elements/elements</span>&#x27;
<span class="hljs-symbol">&#x27;novo-elements/pipes</span>&#x27;
<span class="hljs-symbol">&#x27;novo-elements/services</span>&#x27;
<span class="hljs-symbol">&#x27;novo-elements/utils</span>&#x27;
</code></pre>
<p>And each component in the addons and elements libraries have their own entry points as well. For example:</p>
<pre><code><span class="hljs-symbol">&#x27;novo-elements/addons/ckeditor</span>&#x27;
<span class="hljs-symbol">&#x27;novo-elements/elements/tooltip</span>&#x27;
</code></pre>
<p>If you're unsure if a component or library has its own importable entry point, you can verify this by looking for the presence of an <code>ng-package.json</code> file in its folder. If it has one, you can import it!</p>
<p><strong>Beginning of CommonJS library removal</strong>: To further our efforts into making novo-elements as tree-shakable as possible, we've begun the process of removing all of our dependencies on CommonJS libraries. Unfortunately this isn't possible without some breaking changes but we've tried to minimize their impact as much as possible.</p>
<ul>
<li>
<p><strong>Dragula</strong>: With this v8 update we have deprecated Dragula and slated it for future removal, with the recommendation that existing users switch over to use the built-in ng <code>drag-drop</code> cdk, or a third party solution such as <code>angular-draggable-droppable</code>, <code>ngx-drag-drop</code>, <code>ngx-sortablejs</code>, or <code>ng2-dragula</code>.</p>
</li>
<li>
<p><strong>Date-fns</strong>: We have also updated our date-fns dependency from v1 to v2. This will likely require some updates in your application if you're utilizing any of the date-fns calls, most notably <code>format()</code> and <code>parse()</code>, as the new v2 functions have stricter date typing than we've built into many of our novo-elements date and time components, which generally accept a <code>DateLike</code> object which can be a Date object, a string, or a number.</p>
</li>
</ul>
<p>For this we have included a handy new <code>DateUtil</code> which effectively wraps these new date-fns v2 functions, while accepting the original DateLike objects and then doing their own type checking or parsing before calling the new date-fns v2 function with the appropriately-typed object. This should make for a fairly straightforward update. For example, if you were utilizing the original v1 date-fns <code>format()</code> function, this is what your update would look like:</p>
<pre><code>// <span class="hljs-keyword">before</span>
<span class="hljs-keyword">import</span> &#123; <span class="hljs-keyword">format</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;date-fns&#x27;</span>;

yourFunction(dateLikeProperty: DateLike): string &#123;
  <span class="hljs-keyword">return</span> format(dateLikeProperty);
&#125;
</code></pre>
<pre><code>// <span class="hljs-keyword">after</span>
<span class="hljs-keyword">import</span> &#123; DateUtil &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;novo-elements/utils&#x27;</span>;

yourFunction(dateLikeProperty: DateLike): string &#123;
  <span class="hljs-keyword">return</span> DateUtil.format(dateLikeProperty);
&#125;
</code></pre>
<p>Here is the official <a href="https://date-fns.org/v2.29.2/docs/Upgrade-Guide">Upgrade Guide</a> and <a href="https://date-fns.org/v2.29.2/docs/Change-Log">Change Log</a> from the date-fns docs.</p>
<p>Be sure to see the full list of breaking changes below.</p>
<h2>Upgrading to v8</h2>
<pre><code><span class="hljs-attribute">npm</span> install --save novo-elements&#64;<span class="hljs-number">8</span>.x.x
<span class="hljs-attribute">npm</span> install --save date-fns&#64;<span class="hljs-number">2</span>.<span class="hljs-number">30</span>.<span class="hljs-number">0</span>
<span class="hljs-attribute">npm</span> install --save rxjs&#64;<span class="hljs-number">7</span>.<span class="hljs-number">8</span>.<span class="hljs-number">1</span>
</code></pre>
<h2 id="notable-changes">Notable changes <a href="https://bullhorn.github.io/novo-elements/docs/#/updates/v8-announce#notable-changes">#</a></h2>
<ul>
<li>tree shakable imports <a href="https://github.com/bullhorn/novo-elements/pull/1413">#1413</a></li>
<li>updating rxjs to 7.8.1 <a href="https://github.com/bullhorn/novo-elements/pull/1419">#1419</a></li>
<li>deprecating dragula directive and service <a href="https://github.com/bullhorn/novo-elements/pull/1420">#1420</a></li>
<li>updating date-fns to v2 <a href="https://github.com/bullhorn/novo-elements/pull/1421">#1421</a></li>
<li>updating checkbox, checklist, radio, tiles to have consistent disabled styling <a href="https://github.com/bullhorn/novo-elements/pull/1425">#1425</a></li>
<li>fixing checkbox display bug and adding demo <a href="https://github.com/bullhorn/novo-elements/pull/1427">#1427</a></li>
<li>moving some extended third party libs out to addons folder <a href="https://github.com/bullhorn/novo-elements/pull/1430">#1430</a></li>
<li>making data tables emit scroll events through the cdk <a href="https://github.com/bullhorn/novo-elements/pull/1431">#1431</a></li>
<li>adding keyboard support to places component <a href="https://github.com/bullhorn/novo-elements/pull/1433">#1433</a></li>
</ul>
<h2 id="breaking-changes">Breaking changes <a href="https://bullhorn.github.io/novo-elements/docs/#/updates/v8-announce#breaking-changes">#</a></h2>
<ul>
<li>Imports using absolute paths to class files should be changed to import from an entry point instead.</li>
<li>Most date-fns calls that are not accepting pure Date objects will need to be updated to instead call its respective new DateUtil function.</li>
<li>Due to stricter subject typing, it will now throw a build error if you are passing in a parameter to a subject which does not match the type you have set. We have had to modify some of our subject types because of this.</li>
<li>The <code>queryItems</code> property on the PlacesListComponent has been renamed to <code>matches</code> in order to piggyback on functionality from the newly-extended BasePickerResults component.</li>
</ul>
<p><strong>Deprecated</strong></p>
<ul>
<li>Dragula directive and service have been deprecated</li>
</ul>
`, isInline: true }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: v8Page, decorators: [{
            type: Component,
            args: [{
                    selector: 'v8-page',
                    template: `<h1>📢  July 2023 (version 8)</h1>
<p><strong>Release v8.0.0</strong>: Along with a number of bug fixes, styling improvements, and feature additions, this v8 release includes new entry points for each component, as well as high level entry points for our elements, pipes, services, utils, and addons.</p>
<p><strong>What this means for you</strong>: If you use a number of novo-elements components and features then you can continue importing the root novo-elements module as normal with no changes to your application. If however, you are only using one or a handful of novo-elements features, you now have the option to import them individually, trimming all of the unused novo-elements code from your builds, reducing your app's bundle size and build time, and improving performance.</p>
<p><strong>How to use these new entry points</strong>: In your module file(s), instead of importing the root novo-elements module like so:</p>
<pre><code><span class="hljs-keyword">import</span> &#123; NovoElementsModule &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;novo-elements&#x27;</span>;
</code></pre>
<p>If you wish you can now only import the components you need, like this:</p>
<pre><code><span class="hljs-keyword">import</span> &#123; NovoAceEditorModule &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;novo-elements/addons/ace-editor&#x27;</span>;
</code></pre>
<p>New top-level entry points include:</p>
<pre><code><span class="hljs-symbol">&#x27;novo-elements/addons</span>&#x27;
<span class="hljs-symbol">&#x27;novo-elements/elements</span>&#x27;
<span class="hljs-symbol">&#x27;novo-elements/pipes</span>&#x27;
<span class="hljs-symbol">&#x27;novo-elements/services</span>&#x27;
<span class="hljs-symbol">&#x27;novo-elements/utils</span>&#x27;
</code></pre>
<p>And each component in the addons and elements libraries have their own entry points as well. For example:</p>
<pre><code><span class="hljs-symbol">&#x27;novo-elements/addons/ckeditor</span>&#x27;
<span class="hljs-symbol">&#x27;novo-elements/elements/tooltip</span>&#x27;
</code></pre>
<p>If you're unsure if a component or library has its own importable entry point, you can verify this by looking for the presence of an <code>ng-package.json</code> file in its folder. If it has one, you can import it!</p>
<p><strong>Beginning of CommonJS library removal</strong>: To further our efforts into making novo-elements as tree-shakable as possible, we've begun the process of removing all of our dependencies on CommonJS libraries. Unfortunately this isn't possible without some breaking changes but we've tried to minimize their impact as much as possible.</p>
<ul>
<li>
<p><strong>Dragula</strong>: With this v8 update we have deprecated Dragula and slated it for future removal, with the recommendation that existing users switch over to use the built-in ng <code>drag-drop</code> cdk, or a third party solution such as <code>angular-draggable-droppable</code>, <code>ngx-drag-drop</code>, <code>ngx-sortablejs</code>, or <code>ng2-dragula</code>.</p>
</li>
<li>
<p><strong>Date-fns</strong>: We have also updated our date-fns dependency from v1 to v2. This will likely require some updates in your application if you're utilizing any of the date-fns calls, most notably <code>format()</code> and <code>parse()</code>, as the new v2 functions have stricter date typing than we've built into many of our novo-elements date and time components, which generally accept a <code>DateLike</code> object which can be a Date object, a string, or a number.</p>
</li>
</ul>
<p>For this we have included a handy new <code>DateUtil</code> which effectively wraps these new date-fns v2 functions, while accepting the original DateLike objects and then doing their own type checking or parsing before calling the new date-fns v2 function with the appropriately-typed object. This should make for a fairly straightforward update. For example, if you were utilizing the original v1 date-fns <code>format()</code> function, this is what your update would look like:</p>
<pre><code>// <span class="hljs-keyword">before</span>
<span class="hljs-keyword">import</span> &#123; <span class="hljs-keyword">format</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;date-fns&#x27;</span>;

yourFunction(dateLikeProperty: DateLike): string &#123;
  <span class="hljs-keyword">return</span> format(dateLikeProperty);
&#125;
</code></pre>
<pre><code>// <span class="hljs-keyword">after</span>
<span class="hljs-keyword">import</span> &#123; DateUtil &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;novo-elements/utils&#x27;</span>;

yourFunction(dateLikeProperty: DateLike): string &#123;
  <span class="hljs-keyword">return</span> DateUtil.format(dateLikeProperty);
&#125;
</code></pre>
<p>Here is the official <a href="https://date-fns.org/v2.29.2/docs/Upgrade-Guide">Upgrade Guide</a> and <a href="https://date-fns.org/v2.29.2/docs/Change-Log">Change Log</a> from the date-fns docs.</p>
<p>Be sure to see the full list of breaking changes below.</p>
<h2>Upgrading to v8</h2>
<pre><code><span class="hljs-attribute">npm</span> install --save novo-elements&#64;<span class="hljs-number">8</span>.x.x
<span class="hljs-attribute">npm</span> install --save date-fns&#64;<span class="hljs-number">2</span>.<span class="hljs-number">30</span>.<span class="hljs-number">0</span>
<span class="hljs-attribute">npm</span> install --save rxjs&#64;<span class="hljs-number">7</span>.<span class="hljs-number">8</span>.<span class="hljs-number">1</span>
</code></pre>
<h2 id="notable-changes">Notable changes <a href="https://bullhorn.github.io/novo-elements/docs/#/updates/v8-announce#notable-changes">#</a></h2>
<ul>
<li>tree shakable imports <a href="https://github.com/bullhorn/novo-elements/pull/1413">#1413</a></li>
<li>updating rxjs to 7.8.1 <a href="https://github.com/bullhorn/novo-elements/pull/1419">#1419</a></li>
<li>deprecating dragula directive and service <a href="https://github.com/bullhorn/novo-elements/pull/1420">#1420</a></li>
<li>updating date-fns to v2 <a href="https://github.com/bullhorn/novo-elements/pull/1421">#1421</a></li>
<li>updating checkbox, checklist, radio, tiles to have consistent disabled styling <a href="https://github.com/bullhorn/novo-elements/pull/1425">#1425</a></li>
<li>fixing checkbox display bug and adding demo <a href="https://github.com/bullhorn/novo-elements/pull/1427">#1427</a></li>
<li>moving some extended third party libs out to addons folder <a href="https://github.com/bullhorn/novo-elements/pull/1430">#1430</a></li>
<li>making data tables emit scroll events through the cdk <a href="https://github.com/bullhorn/novo-elements/pull/1431">#1431</a></li>
<li>adding keyboard support to places component <a href="https://github.com/bullhorn/novo-elements/pull/1433">#1433</a></li>
</ul>
<h2 id="breaking-changes">Breaking changes <a href="https://bullhorn.github.io/novo-elements/docs/#/updates/v8-announce#breaking-changes">#</a></h2>
<ul>
<li>Imports using absolute paths to class files should be changed to import from an entry point instead.</li>
<li>Most date-fns calls that are not accepting pure Date objects will need to be updated to instead call its respective new DateUtil function.</li>
<li>Due to stricter subject typing, it will now throw a build error if you are passing in a parameter to a subject which does not match the type you have set. We have had to modify some of our subject types because of this.</li>
<li>The <code>queryItems</code> property on the PlacesListComponent has been renamed to <code>matches</code> in order to piggyback on functionality from the newly-extended BasePickerResults component.</li>
</ul>
<p><strong>Deprecated</strong></p>
<ul>
<li>Dragula directive and service have been deprecated</li>
</ul>
`,
                    host: { class: 'markdown-page' },
                    standalone: false,
                }]
        }] });
class v7Page {
    constructor() {
        this.params = {};
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: v7Page, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: v7Page, isStandalone: false, selector: "v7-page", host: { classAttribute: "markdown-page" }, ngImport: i0, template: `<h1>📢  May 2022 (version 7)</h1>
<p><strong>Announcement</strong>: Novo Elements is being updated to Angular 13</p>
<p>Bullhorn is continually seeking to update and innovate our products, and leverage the latest features in the frameworks we use. In support of that mission, we are updating our Novo UI and its supporting novo-elements library to Angular 13.  This update  allows us to continue offering a streamlined and consistent experience across Bullhorn’s complete product portfolio.  This update includes both an Angular upgrade, as well as supporting the latest Typescript updates.  You can find more details in the Technical Release Notes section below.</p>
<h2>Release Timeline</h2>
<p>Bullhorn has released a Release Candidate v7 of Novo-elements. Bullhorn will update Novo to use Novo-Elements v7 in the 2022.6 release</p>
<pre><code class="language-sh">npm install novo-elements&#64;next
<span class="hljs-comment"># or</span>
npm install novo-elements&#64;7.2.0-next.0
</code></pre>
<h2>Upgrading to V7</h2>
<p>First follow the steps to update your angular app to <a href="https://update.angular.io/?v=10.0-13.0">Version 13</a></p>
<pre><code><span class="hljs-attribute">npm</span> install --save novo-elements&#64;<span class="hljs-number">7</span>.x.x
<span class="hljs-attribute">ng</span> update novo-elements --migrate-only --from=<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span> --to=<span class="hljs-number">7</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span> --force --<span class="hljs-literal">allow</span>-dirty  
</code></pre>
<h2 id="notable-changes">Notable changes <a href="https://bullhorn.github.io/novo-elements/docs/#/updates/v7-announce#notable-changes">#</a></h2>
<ul>
<li>Applications utilizing novo-elements v7 must be using Angular v13.3.1 and typescript v4.6.3</li>
<li>Applications utilizing novo-elements must be built using Node 12.20.0 or later</li>
<li><code>NovoFormGroup.value</code> references need to be updated to <code>.getRawValue()</code> to get values from disabled controls</li>
<li>Stricter typing on date pipe values: More info here: https://github.com/microsoft/TypeScript/issues/35865</li>
<li>Some getters/setters need to be updated to properties or vice versa when extending these components:</li>
<li><code>NovoFormGroup.value</code>: getter/setter =&gt; property</li>
<li><code>NovoStepper.steps</code>: getter/setter =&gt; property</li>
<li><code>BasePickerResults.matches</code>: property =&gt; getter/setter</li>
<li><code>BaseRenderer.data</code>: property =&gt; getter/setter</li>
<li><code>BaseRenderer.value</code>: property =&gt; getter/setter</li>
<li><code>DateCell.value</code>: property =&gt; getter/setter</li>
<li><code>DropdownCell.value</code>: property =&gt; getter/setter</li>
</ul>
<p><strong>Deprecated</strong></p>
<ul>
<li>Internet Explorer 11 (current) support has been deprecated</li>
</ul>
<p><strong>Support Removed</strong></p>
<p>Support for Internet Explorer 9, 10 and Internet Explorer mobile has been removed</p>
<h1>📢  June 2022 (version 7.2.x)</h1>
<p><strong>New Feature: Query Builder</strong>: We have added a new component to help with building complex and modern interfaces.  At Bullhorn we have to enable our users to create advanced and dynamic searches against their data.  We have built many iterations of a query builder in the past but we think this one is our best and most re-usable.</p>
<p>Bullhorn is continually seeking to update and innovate our products, and leverage the latest features in the frameworks we use. In support of that mission, we are updating our Novo UI and its supporting novo-elements library to Angular 13.  This update  allows us to continue offering a streamlined and consistent experience across Bullhorn’s complete product portfolio.  This update includes both an Angular upgrade, as well as supporting the latest Typescript updates.  You can find more details in the Technical Release Notes section below.</p>
<h2>Release Timeline</h2>
<p>Bullhorn has released a Release Candidate v7 of Novo-elements. Bullhorn will update Novo to use Novo-Elements v7 in the 2022.6 release</p>
<pre><code class="language-sh">npm install novo-elements&#64;next
<span class="hljs-comment"># or</span>
npm install novo-elements&#64;7.2.0-next.0
</code></pre>
<h2>How to get it!</h2>
<blockquote>
<div class="p">Note: First follow the steps to update your angular app to <a href="https://update.angular.io/?v=10.0-13.0">Version 13</a> if you haven't already.</div>
</blockquote>
<pre><code><span class="hljs-attribute">npm</span> install --save novo-elements&#64;<span class="hljs-number">7</span>.x.x
<span class="hljs-attribute">ng</span> update novo-elements --migrate-only --from=<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span> --to=<span class="hljs-number">7</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span> --force --<span class="hljs-literal">allow</span>-dirty  
</code></pre>
<h1>📢  August 2022 (version 7.3.x)</h1>
<p><strong>Announcement</strong>: New features and improvements!</p>
<p>Bullhorn is continually seeking to update and innovate our products, and leverage the latest features in the frameworks we use. In support of that mission, we are updating our Novo UI and its supporting novo-elements library to Angular 13.  This update  allows us to continue offering a streamlined and consistent experience across Bullhorn’s complete product portfolio.  This update includes both an Angular upgrade, as well as supporting the latest Typescript updates.  You can find more details in the Technical Release Notes section below.</p>
<h2>Release Timeline</h2>
<p>Bullhorn has released a Release Candidate v7.3.x of Novo-elements. Bullhorn will update Novo to use Novo-Elements v7.3.x in the 2022.8 release</p>
<pre><code class="language-sh">npm install novo-elements&#64;next
<span class="hljs-comment"># or</span>
npm install novo-elements&#64;7.3.x
</code></pre>
<h2 id="notable-changes">Notable changes <a href="https://bullhorn.github.io/novo-elements/docs/#/updates/v7dot3#notable-changes">#</a></h2>
<ul>
<li><a href="https://github.com/bullhorn/novo-elements/pull/1331">#1331</a> - Chips: updated disabled chip styles for better readability</li>
<li><a href="https://github.com/bullhorn/novo-elements/pull/1326">#1326</a> - Autocomplete: Autocomplete now works with ChipList</li>
<li><a href="https://github.com/bullhorn/novo-elements/pull/1334">#1334</a> - NonIdealState: New loading pattern for Non Ideal State</li>
<li><a href="https://github.com/bullhorn/novo-elements/pull/1333">#1333</a> - Forms: field hints now support html text w/ FieldInteractionApi support</li>
</ul>
<h2 id="new-features">New Features<a href="https://bullhorn.github.io/novo-elements/docs/#/updates/v7dot3#new-features">#</a></h2>
<h3 id="better-chips">Chips: updated disabled chip styles for better <a href="https://bullhorn.github.io/novo-elements/docs/#/updates/v7dot3#better-chips">#</a></h3>
<ul>
<li>darken the opacity to improve readability</li>
<li>update text color of disabled chips to look non-selectable</li>
<li>remove the X icon to further confer that this chip is read-only</li>
</ul>
<p>previous state was 40% opacity:
<img src="https://user-images.githubusercontent.com/21197268/180056798-84c36888-96bb-4d72-99fd-ebd80a157f1a.png" alt="chips-before"></p>
<p>After updates:</p>
<p><img src="https://user-images.githubusercontent.com/21197268/180057064-f549895c-82f2-4092-bf05-00172f0dcb09.png" alt="chips-after"></p>
<p>example with disabled and non disabled chips</p>
<p><img src="https://user-images.githubusercontent.com/21197268/180057201-ab8717aa-17be-49c3-a18d-97bf1a8889dd.png" alt="after-example-both"></p>
<hr>
<h3 id="autocomplete">Autocomplete <a href="https://bullhorn.github.io/novo-elements/docs/#/updates/v7dot3#autocomplete">#</a></h3>
<p>Autocomplete now works with the NovoChipList when used in a NovoFormField.  The manual events are no longer necessary to utilize the autocomplete functionality.  Now basic functionality can be supported with a limited specification.</p>
<pre><code class="language-html"><span class="hljs-tag">&lt;<span class="hljs-name">novo-field</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">novo-label</span>&gt;</span>Favorite Fruits<span class="hljs-tag">&lt;/<span class="hljs-name">novo-label</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">novo-chip-list</span> #<span class="hljs-attr">chipList</span> [<span class="hljs-attr">formControl</span>]=<span class="hljs-string">&quot;fieldCtrl&quot;</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">novo-chip</span> *<span class="hljs-attr">ngFor</span>=<span class="hljs-string">&quot;let fruit of chipList.value&quot;</span> [<span class="hljs-attr">value</span>]=<span class="hljs-string">&quot;fruit&quot;</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">novo-text</span>&gt;</span>fruit<span class="hljs-tag">&lt;/<span class="hljs-name">novo-text</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">novo-icon</span> <span class="hljs-attr">novoChipRemove</span>&gt;</span>close<span class="hljs-tag">&lt;/<span class="hljs-name">novo-icon</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">novo-chip</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> #<span class="hljs-attr">chipInput</span> <span class="hljs-attr">novoChipInput</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;New fruit...&quot;</span> <span class="hljs-attr">autocomplete</span>=<span class="hljs-string">&quot;off&quot;</span> [<span class="hljs-attr">formControl</span>]=<span class="hljs-string">&quot;searchCtrl&quot;</span> /&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">novo-chip-list</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">novo-autocomplete</span> (<span class="hljs-attr">optionSelected</span>)=<span class="hljs-string">&quot;selected($event)&quot;</span> <span class="hljs-attr">multiple</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">novo-option</span> *<span class="hljs-attr">ngFor</span>=<span class="hljs-string">&quot;let fruit of filteredFruits | async&quot;</span> [<span class="hljs-attr">value</span>]=<span class="hljs-string">&quot;fruit&quot;</span>&gt;</span>
      fruit
    <span class="hljs-tag">&lt;/<span class="hljs-name">novo-option</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">novo-autocomplete</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">novo-field</span>&gt;</span>
</code></pre>
<p><img src="https://user-images.githubusercontent.com/1056055/175618421-05e8898a-caaf-488d-b384-acdc922b6647.gif" alt="doqFeEqHOa"></p>
<hr>
<h3 id="loading-pattern">Loading Pattern for Non Ideal State <a href="https://bullhorn.github.io/novo-elements/docs/#/updates/v7dot3#loading-pattern">#</a></h3>
<p>Adding a message next to the novo-loading component is not a known pattern. This could be used to display a message while loading with the flag controlled at implementation. This can be used for a loading message displaying all the time for a loading screen, or having a timer flipping the flag to show a message during a long long loading screen.</p>
<h5><strong>Screenshots</strong></h5>
<p><img src="https://user-images.githubusercontent.com/73492464/181272237-66468bd6-7b3c-443a-b5df-ae87a8cdae54.png" alt="image">
<img src="https://user-images.githubusercontent.com/73492464/181272305-689554f1-2cb5-434d-af7c-8fbe10724728.png" alt="image"></p>
<hr>
<h3 id="html-hints">New HTML Form Field Hints <a href="https://bullhorn.github.io/novo-elements/docs/#/updates/v7dot3#html-hints">#</a></h3>
<p>Added the ability to set the <code>description</code> (aka hint text) on form controls to display HTML</p>
<p><img src="https://user-images.githubusercontent.com/1056055/181560747-1d77a522-bc0c-40c2-b117-330ec901aa29.png" alt="image"></p>
<p>Also added the ability for the FieldInteractionAPI to update the description of a field (potentially adding in HTML):</p>
<pre><code class="language-typescript"><span class="hljs-variable constant_">API</span>.<span class="hljs-title function_">setDescription</span>(<span class="hljs-string">&#x27;description&#x27;</span>, <span class="hljs-string">&#x27;&lt;span&gt;&lt;b&gt;BOLD&lt;/b&gt; description with a &lt;a target=&quot;_blank&quot; href=&quot;https://www.google.com&quot;&gt;Google&lt;/a&gt; Link&lt;/span&gt;&#x27;</span>);
</code></pre>
<p><img src="https://user-images.githubusercontent.com/5430919/181575015-bb30bcb2-c8a1-4ae0-b99c-1250d5784fd6.gif" alt="field-interaction-description"></p>
<p><a href="https://bullhorn.github.io/novo-elements/docs/#/updates/v7dot3#html-hints">Check out the demo!</a></p>
`, isInline: true }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: v7Page, decorators: [{
            type: Component,
            args: [{
                    selector: 'v7-page',
                    template: `<h1>📢  May 2022 (version 7)</h1>
<p><strong>Announcement</strong>: Novo Elements is being updated to Angular 13</p>
<p>Bullhorn is continually seeking to update and innovate our products, and leverage the latest features in the frameworks we use. In support of that mission, we are updating our Novo UI and its supporting novo-elements library to Angular 13.  This update  allows us to continue offering a streamlined and consistent experience across Bullhorn’s complete product portfolio.  This update includes both an Angular upgrade, as well as supporting the latest Typescript updates.  You can find more details in the Technical Release Notes section below.</p>
<h2>Release Timeline</h2>
<p>Bullhorn has released a Release Candidate v7 of Novo-elements. Bullhorn will update Novo to use Novo-Elements v7 in the 2022.6 release</p>
<pre><code class="language-sh">npm install novo-elements&#64;next
<span class="hljs-comment"># or</span>
npm install novo-elements&#64;7.2.0-next.0
</code></pre>
<h2>Upgrading to V7</h2>
<p>First follow the steps to update your angular app to <a href="https://update.angular.io/?v=10.0-13.0">Version 13</a></p>
<pre><code><span class="hljs-attribute">npm</span> install --save novo-elements&#64;<span class="hljs-number">7</span>.x.x
<span class="hljs-attribute">ng</span> update novo-elements --migrate-only --from=<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span> --to=<span class="hljs-number">7</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span> --force --<span class="hljs-literal">allow</span>-dirty  
</code></pre>
<h2 id="notable-changes">Notable changes <a href="https://bullhorn.github.io/novo-elements/docs/#/updates/v7-announce#notable-changes">#</a></h2>
<ul>
<li>Applications utilizing novo-elements v7 must be using Angular v13.3.1 and typescript v4.6.3</li>
<li>Applications utilizing novo-elements must be built using Node 12.20.0 or later</li>
<li><code>NovoFormGroup.value</code> references need to be updated to <code>.getRawValue()</code> to get values from disabled controls</li>
<li>Stricter typing on date pipe values: More info here: https://github.com/microsoft/TypeScript/issues/35865</li>
<li>Some getters/setters need to be updated to properties or vice versa when extending these components:</li>
<li><code>NovoFormGroup.value</code>: getter/setter =&gt; property</li>
<li><code>NovoStepper.steps</code>: getter/setter =&gt; property</li>
<li><code>BasePickerResults.matches</code>: property =&gt; getter/setter</li>
<li><code>BaseRenderer.data</code>: property =&gt; getter/setter</li>
<li><code>BaseRenderer.value</code>: property =&gt; getter/setter</li>
<li><code>DateCell.value</code>: property =&gt; getter/setter</li>
<li><code>DropdownCell.value</code>: property =&gt; getter/setter</li>
</ul>
<p><strong>Deprecated</strong></p>
<ul>
<li>Internet Explorer 11 (current) support has been deprecated</li>
</ul>
<p><strong>Support Removed</strong></p>
<p>Support for Internet Explorer 9, 10 and Internet Explorer mobile has been removed</p>
<h1>📢  June 2022 (version 7.2.x)</h1>
<p><strong>New Feature: Query Builder</strong>: We have added a new component to help with building complex and modern interfaces.  At Bullhorn we have to enable our users to create advanced and dynamic searches against their data.  We have built many iterations of a query builder in the past but we think this one is our best and most re-usable.</p>
<p>Bullhorn is continually seeking to update and innovate our products, and leverage the latest features in the frameworks we use. In support of that mission, we are updating our Novo UI and its supporting novo-elements library to Angular 13.  This update  allows us to continue offering a streamlined and consistent experience across Bullhorn’s complete product portfolio.  This update includes both an Angular upgrade, as well as supporting the latest Typescript updates.  You can find more details in the Technical Release Notes section below.</p>
<h2>Release Timeline</h2>
<p>Bullhorn has released a Release Candidate v7 of Novo-elements. Bullhorn will update Novo to use Novo-Elements v7 in the 2022.6 release</p>
<pre><code class="language-sh">npm install novo-elements&#64;next
<span class="hljs-comment"># or</span>
npm install novo-elements&#64;7.2.0-next.0
</code></pre>
<h2>How to get it!</h2>
<blockquote>
<div class="p">Note: First follow the steps to update your angular app to <a href="https://update.angular.io/?v=10.0-13.0">Version 13</a> if you haven't already.</div>
</blockquote>
<pre><code><span class="hljs-attribute">npm</span> install --save novo-elements&#64;<span class="hljs-number">7</span>.x.x
<span class="hljs-attribute">ng</span> update novo-elements --migrate-only --from=<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span> --to=<span class="hljs-number">7</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span> --force --<span class="hljs-literal">allow</span>-dirty  
</code></pre>
<h1>📢  August 2022 (version 7.3.x)</h1>
<p><strong>Announcement</strong>: New features and improvements!</p>
<p>Bullhorn is continually seeking to update and innovate our products, and leverage the latest features in the frameworks we use. In support of that mission, we are updating our Novo UI and its supporting novo-elements library to Angular 13.  This update  allows us to continue offering a streamlined and consistent experience across Bullhorn’s complete product portfolio.  This update includes both an Angular upgrade, as well as supporting the latest Typescript updates.  You can find more details in the Technical Release Notes section below.</p>
<h2>Release Timeline</h2>
<p>Bullhorn has released a Release Candidate v7.3.x of Novo-elements. Bullhorn will update Novo to use Novo-Elements v7.3.x in the 2022.8 release</p>
<pre><code class="language-sh">npm install novo-elements&#64;next
<span class="hljs-comment"># or</span>
npm install novo-elements&#64;7.3.x
</code></pre>
<h2 id="notable-changes">Notable changes <a href="https://bullhorn.github.io/novo-elements/docs/#/updates/v7dot3#notable-changes">#</a></h2>
<ul>
<li><a href="https://github.com/bullhorn/novo-elements/pull/1331">#1331</a> - Chips: updated disabled chip styles for better readability</li>
<li><a href="https://github.com/bullhorn/novo-elements/pull/1326">#1326</a> - Autocomplete: Autocomplete now works with ChipList</li>
<li><a href="https://github.com/bullhorn/novo-elements/pull/1334">#1334</a> - NonIdealState: New loading pattern for Non Ideal State</li>
<li><a href="https://github.com/bullhorn/novo-elements/pull/1333">#1333</a> - Forms: field hints now support html text w/ FieldInteractionApi support</li>
</ul>
<h2 id="new-features">New Features<a href="https://bullhorn.github.io/novo-elements/docs/#/updates/v7dot3#new-features">#</a></h2>
<h3 id="better-chips">Chips: updated disabled chip styles for better <a href="https://bullhorn.github.io/novo-elements/docs/#/updates/v7dot3#better-chips">#</a></h3>
<ul>
<li>darken the opacity to improve readability</li>
<li>update text color of disabled chips to look non-selectable</li>
<li>remove the X icon to further confer that this chip is read-only</li>
</ul>
<p>previous state was 40% opacity:
<img src="https://user-images.githubusercontent.com/21197268/180056798-84c36888-96bb-4d72-99fd-ebd80a157f1a.png" alt="chips-before"></p>
<p>After updates:</p>
<p><img src="https://user-images.githubusercontent.com/21197268/180057064-f549895c-82f2-4092-bf05-00172f0dcb09.png" alt="chips-after"></p>
<p>example with disabled and non disabled chips</p>
<p><img src="https://user-images.githubusercontent.com/21197268/180057201-ab8717aa-17be-49c3-a18d-97bf1a8889dd.png" alt="after-example-both"></p>
<hr>
<h3 id="autocomplete">Autocomplete <a href="https://bullhorn.github.io/novo-elements/docs/#/updates/v7dot3#autocomplete">#</a></h3>
<p>Autocomplete now works with the NovoChipList when used in a NovoFormField.  The manual events are no longer necessary to utilize the autocomplete functionality.  Now basic functionality can be supported with a limited specification.</p>
<pre><code class="language-html"><span class="hljs-tag">&lt;<span class="hljs-name">novo-field</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">novo-label</span>&gt;</span>Favorite Fruits<span class="hljs-tag">&lt;/<span class="hljs-name">novo-label</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">novo-chip-list</span> #<span class="hljs-attr">chipList</span> [<span class="hljs-attr">formControl</span>]=<span class="hljs-string">&quot;fieldCtrl&quot;</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">novo-chip</span> *<span class="hljs-attr">ngFor</span>=<span class="hljs-string">&quot;let fruit of chipList.value&quot;</span> [<span class="hljs-attr">value</span>]=<span class="hljs-string">&quot;fruit&quot;</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">novo-text</span>&gt;</span>fruit<span class="hljs-tag">&lt;/<span class="hljs-name">novo-text</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">novo-icon</span> <span class="hljs-attr">novoChipRemove</span>&gt;</span>close<span class="hljs-tag">&lt;/<span class="hljs-name">novo-icon</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">novo-chip</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> #<span class="hljs-attr">chipInput</span> <span class="hljs-attr">novoChipInput</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;New fruit...&quot;</span> <span class="hljs-attr">autocomplete</span>=<span class="hljs-string">&quot;off&quot;</span> [<span class="hljs-attr">formControl</span>]=<span class="hljs-string">&quot;searchCtrl&quot;</span> /&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">novo-chip-list</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">novo-autocomplete</span> (<span class="hljs-attr">optionSelected</span>)=<span class="hljs-string">&quot;selected($event)&quot;</span> <span class="hljs-attr">multiple</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">novo-option</span> *<span class="hljs-attr">ngFor</span>=<span class="hljs-string">&quot;let fruit of filteredFruits | async&quot;</span> [<span class="hljs-attr">value</span>]=<span class="hljs-string">&quot;fruit&quot;</span>&gt;</span>
      fruit
    <span class="hljs-tag">&lt;/<span class="hljs-name">novo-option</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">novo-autocomplete</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">novo-field</span>&gt;</span>
</code></pre>
<p><img src="https://user-images.githubusercontent.com/1056055/175618421-05e8898a-caaf-488d-b384-acdc922b6647.gif" alt="doqFeEqHOa"></p>
<hr>
<h3 id="loading-pattern">Loading Pattern for Non Ideal State <a href="https://bullhorn.github.io/novo-elements/docs/#/updates/v7dot3#loading-pattern">#</a></h3>
<p>Adding a message next to the novo-loading component is not a known pattern. This could be used to display a message while loading with the flag controlled at implementation. This can be used for a loading message displaying all the time for a loading screen, or having a timer flipping the flag to show a message during a long long loading screen.</p>
<h5><strong>Screenshots</strong></h5>
<p><img src="https://user-images.githubusercontent.com/73492464/181272237-66468bd6-7b3c-443a-b5df-ae87a8cdae54.png" alt="image">
<img src="https://user-images.githubusercontent.com/73492464/181272305-689554f1-2cb5-434d-af7c-8fbe10724728.png" alt="image"></p>
<hr>
<h3 id="html-hints">New HTML Form Field Hints <a href="https://bullhorn.github.io/novo-elements/docs/#/updates/v7dot3#html-hints">#</a></h3>
<p>Added the ability to set the <code>description</code> (aka hint text) on form controls to display HTML</p>
<p><img src="https://user-images.githubusercontent.com/1056055/181560747-1d77a522-bc0c-40c2-b117-330ec901aa29.png" alt="image"></p>
<p>Also added the ability for the FieldInteractionAPI to update the description of a field (potentially adding in HTML):</p>
<pre><code class="language-typescript"><span class="hljs-variable constant_">API</span>.<span class="hljs-title function_">setDescription</span>(<span class="hljs-string">&#x27;description&#x27;</span>, <span class="hljs-string">&#x27;&lt;span&gt;&lt;b&gt;BOLD&lt;/b&gt; description with a &lt;a target=&quot;_blank&quot; href=&quot;https://www.google.com&quot;&gt;Google&lt;/a&gt; Link&lt;/span&gt;&#x27;</span>);
</code></pre>
<p><img src="https://user-images.githubusercontent.com/5430919/181575015-bb30bcb2-c8a1-4ae0-b99c-1250d5784fd6.gif" alt="field-interaction-description"></p>
<p><a href="https://bullhorn.github.io/novo-elements/docs/#/updates/v7dot3#html-hints">Check out the demo!</a></p>
`,
                    host: { class: 'markdown-page' },
                    standalone: false,
                }]
        }] });
class v6Page {
    constructor() {
        this.params = {};
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: v6Page, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: v6Page, isStandalone: false, selector: "v6-page", host: { classAttribute: "markdown-page" }, ngImport: i0, template: `<h1>🚀 February 2022 (version 6 - Golden)</h1>
<p><strong>Release v6.0.0</strong>: This release contains several component updates and additional new components. Initial refactoring of component architecture to support future efforts to improve the design systems consistency along with improvements to the developer experience.</p>
<p>Note: This update is a major release which includes changes that require updates to your code. When updating to Novo Elements V6 from prior versions, the following commands are required:</p>
<p>First follow the steps to update your angular app to <a href="https://update.angular.io/?v=9.0-10.0">Version 10</a></p>
<pre><code><span class="hljs-attribute">npm</span> install --save timezone-support&#64;<span class="hljs-number">2</span> novo-design-tokens&#64;<span class="hljs-number">0</span> angular-imask&#64;<span class="hljs-number">6</span> imask&#64;<span class="hljs-number">6</span>
<span class="hljs-attribute">npm</span> install --save novo-elements&#64;<span class="hljs-number">6</span>
<span class="hljs-attribute">ng</span> update novo-elements --migrate-only --from=<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span> --to=<span class="hljs-number">6</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span> --force --<span class="hljs-literal">allow</span>-dirty  
</code></pre>
<p>For any issues that are not corrected with the above command, please ask questions in the <a href="https://github.com/bullhorn/novo-elements/discussions/categories/q-a">Q&amp;A Page</a> in github.</p>
<p>Welcome to the February 2022 release of Novo Elements. There are many updates in this version that we hope you will like, some of the key highlights include:</p>
<ul>
<li><a href="https://bullhorn.github.io/novo-elements/docs/#/updates/v6#dev-principle">Development Principle</a> - Philosophy on why we are making these changes.</li>
<li><a href="https://bullhorn.github.io/novo-elements/docs/#/updates/v6#improved-docs">Improved Documentation</a> - Check out the new Design &amp; Developer Guideline.</li>
<li><a href="https://bullhorn.github.io/novo-elements/docs/#/updates/v6#design-tokens">Design Token &amp; Themes</a> - The Bullhorn brand has evolved and the design system.</li>
<li><strong>New Components</strong>
<ul>
<li><a href="https://bullhorn.github.io/novo-elements/docs/#/updates/v6#aside">Aside</a> - A replacement implementation for Preview slideouts, that is easy to use and works like modals.</li>
<li><a href="https://bullhorn.github.io/novo-elements/docs/#/updates/v6#autocomplete">Autocomplete</a> - Low-level feature to help composability of custom pickers.</li>
<li><a href="https://bullhorn.github.io/novo-elements/docs/#/updates/v6#avatar">Avatar</a> - Display user and entity images with fallback display.</li>
<li><a href="https://bullhorn.github.io/novo-elements/docs/#/updates/v6#breadcrumbs">Breadcrumbs</a> - Show nested navigation hierarchy.</li>
<li><a href="https://bullhorn.github.io/novo-elements/docs/#/updates/v6#menu">Menu</a> - Coalesce options into floating overlay with a myriad of trigger functionality.</li>
<li><a href="https://bullhorn.github.io/novo-elements/docs/#/updates/v6#layouts">Layout</a> - Easy to setup layouts with side navigation.</li>
<li><a href="https://bullhorn.github.io/novo-elements/docs/#/updates/v6#color-picker">Color Picker</a> - Pick a color, works with form inputs.</li>
<li><a href="https://bullhorn.github.io/novo-elements/docs/#/updates/v6#toolbar">Toolbar</a> - More flexible toolbar control, to use for page headers or navigation.</li>
</ul>
</li>
<li><strong>Updated Components</strong>
<ul>
<li><a href="https://bullhorn.github.io/novo-elements/docs/#/updates/v6#calendar">Calendar</a> - Support for multi-day selection, multi-month view, and can now be used independant of the data picker.</li>
<li><a href="https://bullhorn.github.io/novo-elements/docs/#/updates/v6#modals">Modal</a> - New animation and more events to better control Modals.</li>
<li><a href="https://bullhorn.github.io/novo-elements/docs/#/updates/v6#chips">Chips</a> - Still a WIP, but Chip, ChipList and ChipInput are now independant components that can be composed together separately.</li>
<li><a href="https://bullhorn.github.io/novo-elements/docs/#/updates/v6#select">Select &amp; Dropdown</a> - Overhaul of these component to consolidate functionality into the new <code>novo-option</code> component, to create a more declarative design.</li>
</ul>
</li>
<li><a href="https://bullhorn.github.io/novo-elements/docs/#/updates/v6#preview-features">Preview Features</a> - Check some new features that are still in development.</li>
<li><a href="https://bullhorn.github.io/novo-elements/docs/#/updates/v6#notable-changes">Notable Changes</a> - We changed some things, we fixed some things, hopefully left everything better than before!</li>
</ul>
<blockquote>
<div class="p">If you'd like to read these release notes online, go to <a href="https://bullhorn.github.io/novo-elements/updates">Updates</a> on <a href="https://bullhorn.github.io/novo-elements">bullhorn.github.io/novo-elements</a>.</div>
</blockquote>
<p><strong>Notice</strong>: Want to try new features as soon as possible? You can always view the <code>upcoming</code> relase documentation for the <a href="https://bullhorn.github.io/novo-elements">Next Branch</a>. The code is available on <a href="https://github.com/bullhorn/novo-elements/tree/next">Github</a> follow the guides to build and try the latest updates as soon as they are available.</p>
<h2 id="dev-principle">Development Principles <a href="https://bullhorn.github.io/novo-elements/docs/#/updates/v6#dev-principle">#</a></h2>
<p>The overall philosophy for the changes and improvement for the design system stems from the core principle of making each component more declarative vs imperative. To illustrate this with an example:</p>
<p><strong>Source Options</strong></p>
<pre><code class="language-ts"><span class="hljs-keyword">public</span> <span class="hljs-attr">options</span>: <span class="hljs-title class_">Array</span>&lt;<span class="hljs-built_in">any</span>&gt; = [
  &#123; <span class="hljs-attr">label</span>: <span class="hljs-string">&#x27;One&#x27;</span>, <span class="hljs-attr">value</span>: <span class="hljs-number">1</span> &#125;,
  &#123; <span class="hljs-attr">label</span>: <span class="hljs-string">&#x27;Two&#x27;</span>, <span class="hljs-attr">value</span>: <span class="hljs-number">2</span> &#125;,
  &#123; <span class="hljs-attr">label</span>: <span class="hljs-string">&#x27;Zero&#x27;</span>, <span class="hljs-attr">value</span>: <span class="hljs-number">0</span> &#125;,
  &#123; <span class="hljs-attr">label</span>: <span class="hljs-string">&#x27;Four&#x27;</span>, <span class="hljs-attr">value</span>: <span class="hljs-number">4</span>, <span class="hljs-attr">readOnly</span>: <span class="hljs-literal">true</span> &#125;,
];
</code></pre>
<p><strong>Old Way (Imperative)</strong></p>
<pre><code class="language-html"><span class="hljs-tag">&lt;<span class="hljs-name">novo-select</span> <span class="hljs-attr">formControlName</span>=<span class="hljs-string">&quot;example&quot;</span> [<span class="hljs-attr">options</span>]=<span class="hljs-string">&quot;options&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">novo-select</span>&gt;</span>
</code></pre>
<p><strong>New and Shiny Way (Declarative)</strong></p>
<pre><code class="language-html"><span class="hljs-tag">&lt;<span class="hljs-name">novo-select</span> <span class="hljs-attr">formControlName</span>=<span class="hljs-string">&quot;example&quot;</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">novo-option</span> *<span class="hljs-attr">ngFor</span>=<span class="hljs-string">&quot;let option of options&quot;</span> [<span class="hljs-attr">value</span>]=<span class="hljs-string">&quot;option.value&quot;</span> [<span class="hljs-attr">disabled</span>]=<span class="hljs-string">&quot;option.readonly&quot;</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">novo-icon</span>&gt;</span>calculator<span class="hljs-tag">&lt;<span class="hljs-name">novo-icon</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-symbol">&amp;#123;</span><span class="hljs-symbol">&amp;#123;</span>option.label<span class="hljs-symbol">&amp;#125;</span><span class="hljs-symbol">&amp;#125;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">novo-option</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">novo-select</span>&gt;</span>
</code></pre>
<p>While the <strong>New and Shiny Way</strong> might seem verbose, it actually creates infinite flexibility within the implementation.  When the developer is composing features within their application, the component will support things like adding icons on the left and right, displaying two rows of info in the options, alternatively before in our imperative design the design system would have to have be augmented to support subtle new variants.</p>
<h2 id="improved-documentation">Improved Documentation <a href="https://bullhorn.github.io/novo-elements/docs/#/updates/v6#improved-documentation">#</a></h2>
<p>The number one complaint we heard about the design system was that the documentation was sparse and not helpful. With the help of the UX teams we have Audited more than half of the components in the design system and added guidelines on the appropiate usage.  Developer docs with implementation and api details as well as an improvement to the Examples.</p>
<p><img src="assets/images/updates/v6/v6-improved-docs.gif" alt="Design Guideline &amp; Best Practices" width="640px"></p>
<h2 id="design-tokens">Design Token &amp; Themes <a href="https://bullhorn.github.io/novo-elements/docs/#/updates/v6#design-tokens">#</a></h2>
<p>A significant milestone was reached in v6 which is to create a <a href="https://github.com/amzn/style-dictionary">Style Dictionary</a> to isolate our variables into a <a href="https://github.com/bullhorn/novo-design-tokens">design tokens library</a>.  A Style Dictionary uses design tokens to define styles once and use those styles on any platform or language. This will allow the novo design system to help us create a coheosive look and feel across all our product suites regardless of the technologies being used. It also helps create better structure of our variables and tokens to ensure ease of use.</p>
<p>Future Plans are to:</p>
<ul>
<li>Create a base Bullhorn css stylesheet.</li>
<li>Migrate all web tokens from sass variable to css variables</li>
</ul>
<h2 id="new-components">New Components<a href="https://bullhorn.github.io/novo-elements/docs/#/updates/v6#new-components">#</a></h2>
<h3 id="aside">Aside <a href="https://bullhorn.github.io/novo-elements/docs/#/updates/v6#aside">#</a></h3>
<p>Asides are slideouts designed to provide a view into related content within the page without navigating away. Asides work similar to Modal but the content is meant to be correlated and the workflow should be non-blocking.</p>
<p>View the docs to <a href="https://bullhorn.github.io/novo-elements/docs/#/components/aside/design">read more</a>.</p>
<p><img src="assets/images/updates/v6/v6-aside.gif" alt="New Aside Component" width="640px"></p>
<hr>
<h3 id="auto-complete">Autocomplete <a href="https://bullhorn.github.io/novo-elements/docs/#/updates/v6#auto-complete">#</a></h3>
<p>The autocomplete component is designed to provide a list of options as the user types that can be used to set the field value. The component can be used to set more complex data to the form. Usually the input does not require a valid option to be selected.</p>
<p>View the docs to <a href="https://bullhorn.github.io/novo-elements/docs/#/components/autocomplete/design">read more</a>.</p>
<p><img src="assets/images/AutocompleteOverview.png" alt="New Autocomplete Component" width="640px"></p>
<hr>
<h3 id="avatar">Avatar <a href="https://bullhorn.github.io/novo-elements/docs/#/updates/v6#avatar">#</a></h3>
<p>Avatars are images used to represent users and organizations. They typically are squares with rounded edges.</p>
<p>An avatar acts as a proxy for a user or entity (such as a company) in a product. They're often combined with status or presence indicators to give more context. Users generally upload their own image, otherwise, a default image is displayed</p>
<p>View the docs to <a href="https://bullhorn.github.io/novo-elements/docs/#/components/avatar/design">read more</a>.</p>
<p><img src="assets/images/AvatarOverview.png" alt="New Avatar Component" width="640px"></p>
<hr>
<h3 id="breadcrumbs">Breadcrumbs <a href="https://bullhorn.github.io/novo-elements/docs/#/updates/v6#breadcrumbs">#</a></h3>
<p>A breadcrumb displays the current location within a hierarchy. It allows going back to states higher up in the hierarchy.</p>
<p>View the docs to <a href="https://bullhorn.github.io/novo-elements/docs/#/components/breadcrumbs/design">read more</a>.</p>
<hr>
<h3 id="menu">Menu <a href="https://bullhorn.github.io/novo-elements/docs/#/updates/v6#menu">#</a></h3>
<p>Menu allow users to take an action by selecting from a list of choices revealed upon opening a temporary menu.</p>
<p>Menus are contextual and all for actions to be performed based upon the context of the trigger or selection. Menus are great for consolidating many actions available to the user and can be used in a variety of different ways. Menus can be triggered from any element but usually limited to links, button, and icons.</p>
<p>View the docs to <a href="https://bullhorn.github.io/novo-elements/docs/#/components/menu/design">read more</a>.</p>
<p><img src="assets/images/MenuOverview.png" alt="New Menu Component" width="640px"></p>
<hr>
<h3 id="layout">Layout <a href="https://bullhorn.github.io/novo-elements/docs/#/updates/v6#layout">#</a></h3>
<p>This is a series of components that introduce the ability to configure your application layout, we introduce the a new side navigation panel that can dock on the left or right or hide and collapse to make a more responsive application.</p>
<p>Check out the <a href="https://bullhorn.github.io/novo-elements/docs/#/layouts/sidenav">example</a> to learn more.</p>
<p><img src="assets/images/updates/v6/v6-sidenav.gif" alt="New Layout Components" width="640px"></p>
<hr>
<h3 id="color-picker">Color Picker <a href="https://bullhorn.github.io/novo-elements/docs/#/updates/v6#color-picker">#</a></h3>
<p>Color Picker allow users to easily select a color swatch. It comes in a handful of varieties based on the content of the field.</p>
<p>View the docs to <a href="https://bullhorn.github.io/novo-elements/docs/#/form-controls/color-picker">read more</a>.</p>
<hr>
<h3 id="toolbar">Toolbar <a href="https://bullhorn.github.io/novo-elements/docs/#/updates/v6#toolbar">#</a></h3>
<p>Toolbars are containers attached to the top or bottom of a page that contain actions and/or navigation. Toolbars can stack on-top of each providing varying levels of content. Toolbars usually act as headers or footers of the page.</p>
<p>View the docs to <a href="https://bullhorn.github.io/novo-elements/docs/#/components/toolbar/design">read more</a>.</p>
<p><img src="assets/images/ToolbarOverview.png" alt="New Toolbar Component" width="640px"></p>
<h2 id="updated-components">Updated Components <a href="https://bullhorn.github.io/novo-elements/docs/#/updates/v6#updated-components">#</a></h2>
<h3 id="calendar">Calendar <a href="https://bullhorn.github.io/novo-elements/docs/#/updates/v6#calendar">#</a></h3>
<p>The calendar has been refactored into smaller components to allow for a cleaner implementation when composing for the datepicker. Support for multi-day selection and multi-month view have been added. see new props below:</p>
<table>
<thead>
<tr>
<th>Prop</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>mode</code></td>
<td><code>string</code></td>
<td>The selection mode. Possible values are <code>single</code>, <code>multiple</code>, <code>range</code>, <code>week</code></td>
</tr>
<tr>
<td><code>numberOfMonths</code></td>
<td><code>number</code></td>
<td>Defaults to <code>1</code>, the calendar should flex and wrap within the view.</td>
</tr>
</tbody>
</table>
<hr>
<h3 id="modal">Modal <a href="https://bullhorn.github.io/novo-elements/docs/#/updates/v6#modal">#</a></h3>
<p>There are two objects injected into the Modal <code>NovoModalRef</code> and <code>NovoModalParams</code>.  Typing support for the NovoModalParams is difficult.  You no longer need to do this you only need the single reference to <code>NovoModalRef</code> which now accepts a generic. <code>ref:NovoModalRef&lt;DeleteModalParams&gt;</code> will now type the <code>ref.params</code>.</p>
<p><code>NovoModalRef</code> used to only have the <code>onClosed</code> which returns a promise with and value returned from the Modal to the calling component.  We have added two new observables for <code>beforeClose</code> and <code>afterClosed</code> in order to</p>
<p>Modals now have a smooth animation when opened and closed.</p>
<p>View the docs to <a href="https://bullhorn.github.io/novo-elements/docs/#/components/modals/design">read more</a>.</p>
<hr>
<h3 id="chips">Chips <a href="https://bullhorn.github.io/novo-elements/docs/#/updates/v6#chips">#</a></h3>
<p>This milestone, we introduce the Side Panel, a new surface in the workbench opposite the Side Bar, where you can house views from the Side Bar or the bottom Panel. Unlike moving the bottom Panel to the left or the right of the editor, the new Side Panel works in addition to the bottom Panel so you can see more sets of views at once.</p>
<p>View the docs to <a href="https://bullhorn.github.io/novo-elements/docs/#/form-controls/chips/design">read more</a>.</p>
<hr>
<h3 id="option">Select &amp; DropDowns <a href="https://bullhorn.github.io/novo-elements/docs/#/updates/v6#option">#</a></h3>
<p>We already talked about the change from imperative to declarative. We have consolidated all of our display of option/menu-items used by many components into a single implmenation of <code>novo-option</code> and groupings with <code>novo-optgroup</code>.  Several new patterns for searching within optgroups are works in progress, but coming soon.  The major change is how to migrate <code>novo-dropdown</code> contents to the new implementation.</p>
<p><strong>Old Way</strong></p>
<pre><code class="language-html"><span class="hljs-tag">&lt;<span class="hljs-name">novo-dropdown</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>trigger<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">list</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">dropdown-item-header</span>&gt;</span>Cats<span class="hljs-tag">&lt;/<span class="hljs-name">dropdown-item-header</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">item</span> (<span class="hljs-attr">action</span>)=<span class="hljs-string">&quot;action(&#x27;1&#x27;)&quot;</span>&gt;</span>Persian<span class="hljs-tag">&lt;/<span class="hljs-name">item</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">item</span> (<span class="hljs-attr">action</span>)=<span class="hljs-string">&quot;action(&#x27;2&#x27;)&quot;</span>&gt;</span>Maine Coon<span class="hljs-tag">&lt;/<span class="hljs-name">item</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">dropdown-item-header</span>&gt;</span>Dogs<span class="hljs-tag">&lt;/<span class="hljs-name">dropdown-item-header</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">item</span> (<span class="hljs-attr">action</span>)=<span class="hljs-string">&quot;action(&#x27;3&#x27;)&quot;</span>&gt;</span>Cocker Spaniel<span class="hljs-tag">&lt;/<span class="hljs-name">item</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">item</span> (<span class="hljs-attr">action</span>)=<span class="hljs-string">&quot;action(&#x27;4&#x27;)&quot;</span>&gt;</span>Poodle<span class="hljs-tag">&lt;/<span class="hljs-name">item</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">list</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">novo-dropdown</span>&gt;</span>
</code></pre>
<p><strong>New and Shiny Way</strong></p>
<pre><code class="language-html"><span class="hljs-tag">&lt;<span class="hljs-name">novo-dropdown</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>trigger<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">novo-optgroup</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;Cats&quot;</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">novo-option</span> (<span class="hljs-attr">action</span>)=<span class="hljs-string">&quot;action(&#x27;1&#x27;)&quot;</span>&gt;</span>Persian<span class="hljs-tag">&lt;/<span class="hljs-name">novo-option</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">novo-option</span> (<span class="hljs-attr">action</span>)=<span class="hljs-string">&quot;action(&#x27;2&#x27;)&quot;</span>&gt;</span>Maine Coon<span class="hljs-tag">&lt;/<span class="hljs-name">novo-option</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">novo-optgroup</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">novo-optgroup</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;Dogs&quot;</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">novo-option</span> (<span class="hljs-attr">action</span>)=<span class="hljs-string">&quot;action(&#x27;3&#x27;)&quot;</span>&gt;</span>Cocker Spaniel<span class="hljs-tag">&lt;/<span class="hljs-name">novo-option</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">novo-option</span> (<span class="hljs-attr">action</span>)=<span class="hljs-string">&quot;action(&#x27;4&#x27;)&quot;</span>&gt;</span>Poodle<span class="hljs-tag">&lt;/<span class="hljs-name">novo-option</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">novo-optgroup</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">novo-dropdown</span>&gt;</span>
</code></pre>
<h2 id="preview-features">Preview Features <a href="https://bullhorn.github.io/novo-elements/docs/#/updates/v6#preview-features">#</a></h2>
<h3 id="utility-directives">Utility Directives <a href="https://bullhorn.github.io/novo-elements/docs/#/updates/v6#utility-directives">#</a></h3>
<p>Composing layouts is difficult especially when you need to create css classes for all your container.  It gets very repetitive add <code>display: flex</code> and <code>flex-direction: row</code>.  Now we have new utility components and directive to compose the general layout of a page without writing any css.  The goal is reduce application specific css to zero.  Here are the new features we have added to support this.</p>
<ul>
<li><code>&lt;novo-box&gt;</code></li>
<li><code>&lt;novo-flex&gt;</code> or <code>&lt;novo-row&gt;</code></li>
<li><code>&lt;novo-stack&gt;</code> or <code>&lt;novo-col&gt;</code></li>
</ul>
<table>
<thead>
<tr>
<th>prop</th>
<th>CSS Property</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>direction</code></td>
<td><code>flex-direction</code></td>
<td><code>Use flex or stack, but you can overried if needed</code></td>
</tr>
<tr>
<td><code>align</code></td>
<td><code>align-items</code></td>
<td><code>Aligns the content along the primary axis</code></td>
</tr>
<tr>
<td><code>justify</code></td>
<td><code>justify-content</code></td>
<td><code>Aligns the content along the secondary axis</code></td>
</tr>
</tbody>
</table>
<p>In addition to these layout components you can add directives (attributes) to any element on your page. All of these elements are <strong>theme aware</strong> as in they will look up the value from the design token library and use that value.</p>
<table>
<thead>
<tr>
<th>Prop</th>
<th>CSS Property</th>
<th>Design Token</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>margin</code></td>
<td><code>margin</code></td>
<td><code>spacing</code></td>
</tr>
<tr>
<td><code>mt</code>, <code>marginTop</code></td>
<td><code>margin-top</code></td>
<td><code>spacing</code></td>
</tr>
<tr>
<td><code>mr</code>, <code>marginRight</code></td>
<td><code>margin-right</code></td>
<td><code>spacing</code></td>
</tr>
<tr>
<td><code>mb</code>, <code>marginBottom</code></td>
<td><code>margin-bottom</code></td>
<td><code>spacing</code></td>
</tr>
<tr>
<td><code>ml</code>, <code>marginLeft</code></td>
<td><code>margin-left</code></td>
<td><code>spacing</code></td>
</tr>
<tr>
<td><code>mx</code></td>
<td><code>margin-left</code> and <code>margin-right</code></td>
<td><code>spacing</code></td>
</tr>
<tr>
<td><code>my</code></td>
<td><code>margin-top</code> and <code>margin-bottom</code></td>
<td><code>spacing</code></td>
</tr>
<tr>
<td><code>padding</code></td>
<td><code>padding</code></td>
<td><code>spacing</code></td>
</tr>
<tr>
<td><code>pt</code>, <code>paddingTop</code></td>
<td><code>padding-top</code></td>
<td><code>spacing</code></td>
</tr>
<tr>
<td><code>pr</code>, <code>paddingRight</code></td>
<td><code>padding-right</code></td>
<td><code>spacing</code></td>
</tr>
<tr>
<td><code>pb</code>, <code>paddingBottom</code></td>
<td><code>padding-bottom</code></td>
<td><code>spacing</code></td>
</tr>
<tr>
<td><code>pl</code>, <code>paddingLeft</code></td>
<td><code>padding-left</code></td>
<td><code>spacing</code></td>
</tr>
<tr>
<td><code>px</code></td>
<td><code>padding-left</code> and <code>padding-right</code></td>
<td><code>spacing</code></td>
</tr>
<tr>
<td><code>py</code></td>
<td><code>padding-top</code> and <code>padding-bottom</code></td>
<td><code>spacing</code></td>
</tr>
<tr>
<td><code>bg</code></td>
<td><code>background-color</code></td>
<td><code>color</code></td>
</tr>
<tr>
<td><code>color</code></td>
<td><code>color</code></td>
<td><code>color</code></td>
</tr>
<tr>
<td><code>accent</code></td>
<td><code>class</code></td>
<td><code>color</code></td>
</tr>
<tr>
<td><code>theme</code></td>
<td><code>class</code></td>
<td><code>color</code></td>
</tr>
</tbody>
</table>
<p>For Example:</p>
<pre><code class="language-html"><span class="hljs-comment">&lt;!-- This will create a row with three columns each containing a stacked icon over text --&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">novo-flex</span> <span class="hljs-attr">gap</span>=<span class="hljs-string">&quot;lg&quot;</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">novo-stack</span> <span class="hljs-attr">padding</span>=<span class="hljs-string">&quot;md&quot;</span> <span class="hljs-attr">bg</span>=<span class="hljs-string">&quot;candidate&quot;</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">novo-icon</span>&gt;</span>candidate<span class="hljs-tag">&lt;/<span class="hljs-name">novo-icon</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">novo-text</span>&gt;</span>Ferdinand del Toro<span class="hljs-tag">&lt;/<span class="hljs-name">novo-text</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">novo-stack</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">novo-stack</span> <span class="hljs-attr">padding</span>=<span class="hljs-string">&quot;md&quot;</span> <span class="hljs-attr">bg</span>=<span class="hljs-string">&quot;candidate&quot;</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">novo-icon</span>&gt;</span>contact<span class="hljs-tag">&lt;/<span class="hljs-name">novo-icon</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">novo-text</span>&gt;</span>Ferdinand del Toro<span class="hljs-tag">&lt;/<span class="hljs-name">novo-text</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">novo-stack</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">novo-stack</span> <span class="hljs-attr">padding</span>=<span class="hljs-string">&quot;md&quot;</span> <span class="hljs-attr">bg</span>=<span class="hljs-string">&quot;company&quot;</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">novo-icon</span> <span class="hljs-attr">mb</span>=<span class="hljs-string">&quot;sm&quot;</span>&gt;</span>company<span class="hljs-tag">&lt;/<span class="hljs-name">novo-icon</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">novo-text</span>&gt;</span>Bullhorn<span class="hljs-tag">&lt;/<span class="hljs-name">novo-text</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">novo-stack</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">novo-flex</span>&gt;</span>
</code></pre>
<h3 id="field">New Field Component <a href="https://bullhorn.github.io/novo-elements/docs/#/updates/v6#field">#</a></h3>
<p>A new experimental <code>novo-field</code> component has been added to help improve the future of <code>novo-form</code> (which it is not currently using).  The <code>novo-field</code> and its supporting cast of components and directives makes it really easy to compose static forms.</p>
<pre><code class="language-html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> [<span class="hljs-attr">formGroup</span>]=<span class="hljs-string">&quot;data&quot;</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">novo-fields</span> <span class="hljs-attr">appearance</span>=<span class="hljs-string">&quot;filled&quot;</span> <span class="hljs-attr">layout</span>=<span class="hljs-string">&quot;vertical&quot;</span> [<span class="hljs-attr">fullWidth</span>]=<span class="hljs-string">&quot;true&quot;</span>&gt;</span>
    <span class="hljs-comment">&lt;!-- Notice the novoInput directive --&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">novo-field</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">novo-label</span>&gt;</span>Pick a Number?<span class="hljs-tag">&lt;/<span class="hljs-name">novo-label</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">novoInput</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;number&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;Ex. 12&quot;</span> [<span class="hljs-attr">formControl</span>]=<span class="hljs-string">&quot;numberControl&quot;</span> <span class="hljs-attr">min</span>=<span class="hljs-string">&quot;10&quot;</span> /&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">novo-error</span> *<span class="hljs-attr">ngIf</span>=<span class="hljs-string">&quot;numberControl.invalid&quot;</span>&gt;</span>Minimum: 10<span class="hljs-tag">&lt;/<span class="hljs-name">novo-error</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">novo-field</span>&gt;</span>
    <span class="hljs-comment">&lt;!-- Easily attach pickers or custom autocompletes to a novoInput --&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">novo-field</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">novo-label</span>&gt;</span>Date of Birth<span class="hljs-tag">&lt;/<span class="hljs-name">novo-label</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">novoInput</span> <span class="hljs-attr">dateFormat</span> [<span class="hljs-attr">picker</span>]=<span class="hljs-string">&quot;datepicker&quot;</span> [<span class="hljs-attr">formControl</span>]=<span class="hljs-string">&quot;dateControl&quot;</span> /&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">novo-picker-toggle</span> <span class="hljs-attr">novoSuffix</span> <span class="hljs-attr">icon</span>=<span class="hljs-string">&quot;calendar&quot;</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">novo-date-picker</span> #<span class="hljs-attr">datepicker</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">novo-date-picker</span>&gt;</span>
      <span class="hljs-tag">&lt;/<span class="hljs-name">novo-picker-toggle</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">novo-field</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">novo-fields</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span>
</code></pre>
<p>View the docs to <a href="https://bullhorn.github.io/novo-elements/docs/#/components/field/design">read more</a>.</p>
<h2 id="notable-changes">Notable changes <a href="https://bullhorn.github.io/novo-elements/docs/#/updates/v6#notable-changes">#</a></h2>
<ul>
<li><code>novo-table</code> is now deprecated use <code>novo-data-table</code> instead</li>
<li><code>appendToBody</code> on dropdowns and pickers is deprecated</li>
<li><code>list</code> and <code>item</code> are not valid web-component or angular standard tags.  use <code>novo-list</code> and <code>novo-list-item</code>, but use <code>novo-option</code> and <code>novo-optgroup</code> inside of a dropdown.</li>
<li><code>list</code> and <code>item</code> are not valid web-component or angular standard tags.  use <code>novo-list</code> and <code>novo-list-item</code>, but use <code>novo-option</code> and <code>novo-optgroup</code> inside of a dropdown.</li>
<li><code>range</code> input on <code>date-picker</code> is deprecated please use <code>mode=&quot;range&quot;</code></li>
<li><code>week</code> input on <code>date-picker</code> is deprecated please use <code>mode=&quot;week&quot;</code></li>
</ul>
<h2 id="thanks">Thank you <a href="https://bullhorn.github.io/novo-elements/docs/#/updates/v6#thanks">#</a></h2>
<p>Last but certainly not least, a big <em>Thank You</em> to the contributors of Novo Elements throughout the years. For this release a special shout out to our developers Dan Voegelin and Charles Barnes, the automation team for helping us test the changes: Jon Eman, Tiffany Bertolozzi, Tony Phu and Ashley Schroeder, and our UX Team include but not limited to: Jon Braun, Madeliene Valcour, Katie Todd, Daniel Long, Angela Wang and Gloria Nam.</p>
`, isInline: true }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: v6Page, decorators: [{
            type: Component,
            args: [{
                    selector: 'v6-page',
                    template: `<h1>🚀 February 2022 (version 6 - Golden)</h1>
<p><strong>Release v6.0.0</strong>: This release contains several component updates and additional new components. Initial refactoring of component architecture to support future efforts to improve the design systems consistency along with improvements to the developer experience.</p>
<p>Note: This update is a major release which includes changes that require updates to your code. When updating to Novo Elements V6 from prior versions, the following commands are required:</p>
<p>First follow the steps to update your angular app to <a href="https://update.angular.io/?v=9.0-10.0">Version 10</a></p>
<pre><code><span class="hljs-attribute">npm</span> install --save timezone-support&#64;<span class="hljs-number">2</span> novo-design-tokens&#64;<span class="hljs-number">0</span> angular-imask&#64;<span class="hljs-number">6</span> imask&#64;<span class="hljs-number">6</span>
<span class="hljs-attribute">npm</span> install --save novo-elements&#64;<span class="hljs-number">6</span>
<span class="hljs-attribute">ng</span> update novo-elements --migrate-only --from=<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span> --to=<span class="hljs-number">6</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span> --force --<span class="hljs-literal">allow</span>-dirty  
</code></pre>
<p>For any issues that are not corrected with the above command, please ask questions in the <a href="https://github.com/bullhorn/novo-elements/discussions/categories/q-a">Q&amp;A Page</a> in github.</p>
<p>Welcome to the February 2022 release of Novo Elements. There are many updates in this version that we hope you will like, some of the key highlights include:</p>
<ul>
<li><a href="https://bullhorn.github.io/novo-elements/docs/#/updates/v6#dev-principle">Development Principle</a> - Philosophy on why we are making these changes.</li>
<li><a href="https://bullhorn.github.io/novo-elements/docs/#/updates/v6#improved-docs">Improved Documentation</a> - Check out the new Design &amp; Developer Guideline.</li>
<li><a href="https://bullhorn.github.io/novo-elements/docs/#/updates/v6#design-tokens">Design Token &amp; Themes</a> - The Bullhorn brand has evolved and the design system.</li>
<li><strong>New Components</strong>
<ul>
<li><a href="https://bullhorn.github.io/novo-elements/docs/#/updates/v6#aside">Aside</a> - A replacement implementation for Preview slideouts, that is easy to use and works like modals.</li>
<li><a href="https://bullhorn.github.io/novo-elements/docs/#/updates/v6#autocomplete">Autocomplete</a> - Low-level feature to help composability of custom pickers.</li>
<li><a href="https://bullhorn.github.io/novo-elements/docs/#/updates/v6#avatar">Avatar</a> - Display user and entity images with fallback display.</li>
<li><a href="https://bullhorn.github.io/novo-elements/docs/#/updates/v6#breadcrumbs">Breadcrumbs</a> - Show nested navigation hierarchy.</li>
<li><a href="https://bullhorn.github.io/novo-elements/docs/#/updates/v6#menu">Menu</a> - Coalesce options into floating overlay with a myriad of trigger functionality.</li>
<li><a href="https://bullhorn.github.io/novo-elements/docs/#/updates/v6#layouts">Layout</a> - Easy to setup layouts with side navigation.</li>
<li><a href="https://bullhorn.github.io/novo-elements/docs/#/updates/v6#color-picker">Color Picker</a> - Pick a color, works with form inputs.</li>
<li><a href="https://bullhorn.github.io/novo-elements/docs/#/updates/v6#toolbar">Toolbar</a> - More flexible toolbar control, to use for page headers or navigation.</li>
</ul>
</li>
<li><strong>Updated Components</strong>
<ul>
<li><a href="https://bullhorn.github.io/novo-elements/docs/#/updates/v6#calendar">Calendar</a> - Support for multi-day selection, multi-month view, and can now be used independant of the data picker.</li>
<li><a href="https://bullhorn.github.io/novo-elements/docs/#/updates/v6#modals">Modal</a> - New animation and more events to better control Modals.</li>
<li><a href="https://bullhorn.github.io/novo-elements/docs/#/updates/v6#chips">Chips</a> - Still a WIP, but Chip, ChipList and ChipInput are now independant components that can be composed together separately.</li>
<li><a href="https://bullhorn.github.io/novo-elements/docs/#/updates/v6#select">Select &amp; Dropdown</a> - Overhaul of these component to consolidate functionality into the new <code>novo-option</code> component, to create a more declarative design.</li>
</ul>
</li>
<li><a href="https://bullhorn.github.io/novo-elements/docs/#/updates/v6#preview-features">Preview Features</a> - Check some new features that are still in development.</li>
<li><a href="https://bullhorn.github.io/novo-elements/docs/#/updates/v6#notable-changes">Notable Changes</a> - We changed some things, we fixed some things, hopefully left everything better than before!</li>
</ul>
<blockquote>
<div class="p">If you'd like to read these release notes online, go to <a href="https://bullhorn.github.io/novo-elements/updates">Updates</a> on <a href="https://bullhorn.github.io/novo-elements">bullhorn.github.io/novo-elements</a>.</div>
</blockquote>
<p><strong>Notice</strong>: Want to try new features as soon as possible? You can always view the <code>upcoming</code> relase documentation for the <a href="https://bullhorn.github.io/novo-elements">Next Branch</a>. The code is available on <a href="https://github.com/bullhorn/novo-elements/tree/next">Github</a> follow the guides to build and try the latest updates as soon as they are available.</p>
<h2 id="dev-principle">Development Principles <a href="https://bullhorn.github.io/novo-elements/docs/#/updates/v6#dev-principle">#</a></h2>
<p>The overall philosophy for the changes and improvement for the design system stems from the core principle of making each component more declarative vs imperative. To illustrate this with an example:</p>
<p><strong>Source Options</strong></p>
<pre><code class="language-ts"><span class="hljs-keyword">public</span> <span class="hljs-attr">options</span>: <span class="hljs-title class_">Array</span>&lt;<span class="hljs-built_in">any</span>&gt; = [
  &#123; <span class="hljs-attr">label</span>: <span class="hljs-string">&#x27;One&#x27;</span>, <span class="hljs-attr">value</span>: <span class="hljs-number">1</span> &#125;,
  &#123; <span class="hljs-attr">label</span>: <span class="hljs-string">&#x27;Two&#x27;</span>, <span class="hljs-attr">value</span>: <span class="hljs-number">2</span> &#125;,
  &#123; <span class="hljs-attr">label</span>: <span class="hljs-string">&#x27;Zero&#x27;</span>, <span class="hljs-attr">value</span>: <span class="hljs-number">0</span> &#125;,
  &#123; <span class="hljs-attr">label</span>: <span class="hljs-string">&#x27;Four&#x27;</span>, <span class="hljs-attr">value</span>: <span class="hljs-number">4</span>, <span class="hljs-attr">readOnly</span>: <span class="hljs-literal">true</span> &#125;,
];
</code></pre>
<p><strong>Old Way (Imperative)</strong></p>
<pre><code class="language-html"><span class="hljs-tag">&lt;<span class="hljs-name">novo-select</span> <span class="hljs-attr">formControlName</span>=<span class="hljs-string">&quot;example&quot;</span> [<span class="hljs-attr">options</span>]=<span class="hljs-string">&quot;options&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">novo-select</span>&gt;</span>
</code></pre>
<p><strong>New and Shiny Way (Declarative)</strong></p>
<pre><code class="language-html"><span class="hljs-tag">&lt;<span class="hljs-name">novo-select</span> <span class="hljs-attr">formControlName</span>=<span class="hljs-string">&quot;example&quot;</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">novo-option</span> *<span class="hljs-attr">ngFor</span>=<span class="hljs-string">&quot;let option of options&quot;</span> [<span class="hljs-attr">value</span>]=<span class="hljs-string">&quot;option.value&quot;</span> [<span class="hljs-attr">disabled</span>]=<span class="hljs-string">&quot;option.readonly&quot;</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">novo-icon</span>&gt;</span>calculator<span class="hljs-tag">&lt;<span class="hljs-name">novo-icon</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-symbol">&amp;#123;</span><span class="hljs-symbol">&amp;#123;</span>option.label<span class="hljs-symbol">&amp;#125;</span><span class="hljs-symbol">&amp;#125;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">novo-option</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">novo-select</span>&gt;</span>
</code></pre>
<p>While the <strong>New and Shiny Way</strong> might seem verbose, it actually creates infinite flexibility within the implementation.  When the developer is composing features within their application, the component will support things like adding icons on the left and right, displaying two rows of info in the options, alternatively before in our imperative design the design system would have to have be augmented to support subtle new variants.</p>
<h2 id="improved-documentation">Improved Documentation <a href="https://bullhorn.github.io/novo-elements/docs/#/updates/v6#improved-documentation">#</a></h2>
<p>The number one complaint we heard about the design system was that the documentation was sparse and not helpful. With the help of the UX teams we have Audited more than half of the components in the design system and added guidelines on the appropiate usage.  Developer docs with implementation and api details as well as an improvement to the Examples.</p>
<p><img src="assets/images/updates/v6/v6-improved-docs.gif" alt="Design Guideline &amp; Best Practices" width="640px"></p>
<h2 id="design-tokens">Design Token &amp; Themes <a href="https://bullhorn.github.io/novo-elements/docs/#/updates/v6#design-tokens">#</a></h2>
<p>A significant milestone was reached in v6 which is to create a <a href="https://github.com/amzn/style-dictionary">Style Dictionary</a> to isolate our variables into a <a href="https://github.com/bullhorn/novo-design-tokens">design tokens library</a>.  A Style Dictionary uses design tokens to define styles once and use those styles on any platform or language. This will allow the novo design system to help us create a coheosive look and feel across all our product suites regardless of the technologies being used. It also helps create better structure of our variables and tokens to ensure ease of use.</p>
<p>Future Plans are to:</p>
<ul>
<li>Create a base Bullhorn css stylesheet.</li>
<li>Migrate all web tokens from sass variable to css variables</li>
</ul>
<h2 id="new-components">New Components<a href="https://bullhorn.github.io/novo-elements/docs/#/updates/v6#new-components">#</a></h2>
<h3 id="aside">Aside <a href="https://bullhorn.github.io/novo-elements/docs/#/updates/v6#aside">#</a></h3>
<p>Asides are slideouts designed to provide a view into related content within the page without navigating away. Asides work similar to Modal but the content is meant to be correlated and the workflow should be non-blocking.</p>
<p>View the docs to <a href="https://bullhorn.github.io/novo-elements/docs/#/components/aside/design">read more</a>.</p>
<p><img src="assets/images/updates/v6/v6-aside.gif" alt="New Aside Component" width="640px"></p>
<hr>
<h3 id="auto-complete">Autocomplete <a href="https://bullhorn.github.io/novo-elements/docs/#/updates/v6#auto-complete">#</a></h3>
<p>The autocomplete component is designed to provide a list of options as the user types that can be used to set the field value. The component can be used to set more complex data to the form. Usually the input does not require a valid option to be selected.</p>
<p>View the docs to <a href="https://bullhorn.github.io/novo-elements/docs/#/components/autocomplete/design">read more</a>.</p>
<p><img src="assets/images/AutocompleteOverview.png" alt="New Autocomplete Component" width="640px"></p>
<hr>
<h3 id="avatar">Avatar <a href="https://bullhorn.github.io/novo-elements/docs/#/updates/v6#avatar">#</a></h3>
<p>Avatars are images used to represent users and organizations. They typically are squares with rounded edges.</p>
<p>An avatar acts as a proxy for a user or entity (such as a company) in a product. They're often combined with status or presence indicators to give more context. Users generally upload their own image, otherwise, a default image is displayed</p>
<p>View the docs to <a href="https://bullhorn.github.io/novo-elements/docs/#/components/avatar/design">read more</a>.</p>
<p><img src="assets/images/AvatarOverview.png" alt="New Avatar Component" width="640px"></p>
<hr>
<h3 id="breadcrumbs">Breadcrumbs <a href="https://bullhorn.github.io/novo-elements/docs/#/updates/v6#breadcrumbs">#</a></h3>
<p>A breadcrumb displays the current location within a hierarchy. It allows going back to states higher up in the hierarchy.</p>
<p>View the docs to <a href="https://bullhorn.github.io/novo-elements/docs/#/components/breadcrumbs/design">read more</a>.</p>
<hr>
<h3 id="menu">Menu <a href="https://bullhorn.github.io/novo-elements/docs/#/updates/v6#menu">#</a></h3>
<p>Menu allow users to take an action by selecting from a list of choices revealed upon opening a temporary menu.</p>
<p>Menus are contextual and all for actions to be performed based upon the context of the trigger or selection. Menus are great for consolidating many actions available to the user and can be used in a variety of different ways. Menus can be triggered from any element but usually limited to links, button, and icons.</p>
<p>View the docs to <a href="https://bullhorn.github.io/novo-elements/docs/#/components/menu/design">read more</a>.</p>
<p><img src="assets/images/MenuOverview.png" alt="New Menu Component" width="640px"></p>
<hr>
<h3 id="layout">Layout <a href="https://bullhorn.github.io/novo-elements/docs/#/updates/v6#layout">#</a></h3>
<p>This is a series of components that introduce the ability to configure your application layout, we introduce the a new side navigation panel that can dock on the left or right or hide and collapse to make a more responsive application.</p>
<p>Check out the <a href="https://bullhorn.github.io/novo-elements/docs/#/layouts/sidenav">example</a> to learn more.</p>
<p><img src="assets/images/updates/v6/v6-sidenav.gif" alt="New Layout Components" width="640px"></p>
<hr>
<h3 id="color-picker">Color Picker <a href="https://bullhorn.github.io/novo-elements/docs/#/updates/v6#color-picker">#</a></h3>
<p>Color Picker allow users to easily select a color swatch. It comes in a handful of varieties based on the content of the field.</p>
<p>View the docs to <a href="https://bullhorn.github.io/novo-elements/docs/#/form-controls/color-picker">read more</a>.</p>
<hr>
<h3 id="toolbar">Toolbar <a href="https://bullhorn.github.io/novo-elements/docs/#/updates/v6#toolbar">#</a></h3>
<p>Toolbars are containers attached to the top or bottom of a page that contain actions and/or navigation. Toolbars can stack on-top of each providing varying levels of content. Toolbars usually act as headers or footers of the page.</p>
<p>View the docs to <a href="https://bullhorn.github.io/novo-elements/docs/#/components/toolbar/design">read more</a>.</p>
<p><img src="assets/images/ToolbarOverview.png" alt="New Toolbar Component" width="640px"></p>
<h2 id="updated-components">Updated Components <a href="https://bullhorn.github.io/novo-elements/docs/#/updates/v6#updated-components">#</a></h2>
<h3 id="calendar">Calendar <a href="https://bullhorn.github.io/novo-elements/docs/#/updates/v6#calendar">#</a></h3>
<p>The calendar has been refactored into smaller components to allow for a cleaner implementation when composing for the datepicker. Support for multi-day selection and multi-month view have been added. see new props below:</p>
<table>
<thead>
<tr>
<th>Prop</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>mode</code></td>
<td><code>string</code></td>
<td>The selection mode. Possible values are <code>single</code>, <code>multiple</code>, <code>range</code>, <code>week</code></td>
</tr>
<tr>
<td><code>numberOfMonths</code></td>
<td><code>number</code></td>
<td>Defaults to <code>1</code>, the calendar should flex and wrap within the view.</td>
</tr>
</tbody>
</table>
<hr>
<h3 id="modal">Modal <a href="https://bullhorn.github.io/novo-elements/docs/#/updates/v6#modal">#</a></h3>
<p>There are two objects injected into the Modal <code>NovoModalRef</code> and <code>NovoModalParams</code>.  Typing support for the NovoModalParams is difficult.  You no longer need to do this you only need the single reference to <code>NovoModalRef</code> which now accepts a generic. <code>ref:NovoModalRef&lt;DeleteModalParams&gt;</code> will now type the <code>ref.params</code>.</p>
<p><code>NovoModalRef</code> used to only have the <code>onClosed</code> which returns a promise with and value returned from the Modal to the calling component.  We have added two new observables for <code>beforeClose</code> and <code>afterClosed</code> in order to</p>
<p>Modals now have a smooth animation when opened and closed.</p>
<p>View the docs to <a href="https://bullhorn.github.io/novo-elements/docs/#/components/modals/design">read more</a>.</p>
<hr>
<h3 id="chips">Chips <a href="https://bullhorn.github.io/novo-elements/docs/#/updates/v6#chips">#</a></h3>
<p>This milestone, we introduce the Side Panel, a new surface in the workbench opposite the Side Bar, where you can house views from the Side Bar or the bottom Panel. Unlike moving the bottom Panel to the left or the right of the editor, the new Side Panel works in addition to the bottom Panel so you can see more sets of views at once.</p>
<p>View the docs to <a href="https://bullhorn.github.io/novo-elements/docs/#/form-controls/chips/design">read more</a>.</p>
<hr>
<h3 id="option">Select &amp; DropDowns <a href="https://bullhorn.github.io/novo-elements/docs/#/updates/v6#option">#</a></h3>
<p>We already talked about the change from imperative to declarative. We have consolidated all of our display of option/menu-items used by many components into a single implmenation of <code>novo-option</code> and groupings with <code>novo-optgroup</code>.  Several new patterns for searching within optgroups are works in progress, but coming soon.  The major change is how to migrate <code>novo-dropdown</code> contents to the new implementation.</p>
<p><strong>Old Way</strong></p>
<pre><code class="language-html"><span class="hljs-tag">&lt;<span class="hljs-name">novo-dropdown</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>trigger<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">list</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">dropdown-item-header</span>&gt;</span>Cats<span class="hljs-tag">&lt;/<span class="hljs-name">dropdown-item-header</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">item</span> (<span class="hljs-attr">action</span>)=<span class="hljs-string">&quot;action(&#x27;1&#x27;)&quot;</span>&gt;</span>Persian<span class="hljs-tag">&lt;/<span class="hljs-name">item</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">item</span> (<span class="hljs-attr">action</span>)=<span class="hljs-string">&quot;action(&#x27;2&#x27;)&quot;</span>&gt;</span>Maine Coon<span class="hljs-tag">&lt;/<span class="hljs-name">item</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">dropdown-item-header</span>&gt;</span>Dogs<span class="hljs-tag">&lt;/<span class="hljs-name">dropdown-item-header</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">item</span> (<span class="hljs-attr">action</span>)=<span class="hljs-string">&quot;action(&#x27;3&#x27;)&quot;</span>&gt;</span>Cocker Spaniel<span class="hljs-tag">&lt;/<span class="hljs-name">item</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">item</span> (<span class="hljs-attr">action</span>)=<span class="hljs-string">&quot;action(&#x27;4&#x27;)&quot;</span>&gt;</span>Poodle<span class="hljs-tag">&lt;/<span class="hljs-name">item</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">list</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">novo-dropdown</span>&gt;</span>
</code></pre>
<p><strong>New and Shiny Way</strong></p>
<pre><code class="language-html"><span class="hljs-tag">&lt;<span class="hljs-name">novo-dropdown</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>trigger<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">novo-optgroup</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;Cats&quot;</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">novo-option</span> (<span class="hljs-attr">action</span>)=<span class="hljs-string">&quot;action(&#x27;1&#x27;)&quot;</span>&gt;</span>Persian<span class="hljs-tag">&lt;/<span class="hljs-name">novo-option</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">novo-option</span> (<span class="hljs-attr">action</span>)=<span class="hljs-string">&quot;action(&#x27;2&#x27;)&quot;</span>&gt;</span>Maine Coon<span class="hljs-tag">&lt;/<span class="hljs-name">novo-option</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">novo-optgroup</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">novo-optgroup</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;Dogs&quot;</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">novo-option</span> (<span class="hljs-attr">action</span>)=<span class="hljs-string">&quot;action(&#x27;3&#x27;)&quot;</span>&gt;</span>Cocker Spaniel<span class="hljs-tag">&lt;/<span class="hljs-name">novo-option</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">novo-option</span> (<span class="hljs-attr">action</span>)=<span class="hljs-string">&quot;action(&#x27;4&#x27;)&quot;</span>&gt;</span>Poodle<span class="hljs-tag">&lt;/<span class="hljs-name">novo-option</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">novo-optgroup</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">novo-dropdown</span>&gt;</span>
</code></pre>
<h2 id="preview-features">Preview Features <a href="https://bullhorn.github.io/novo-elements/docs/#/updates/v6#preview-features">#</a></h2>
<h3 id="utility-directives">Utility Directives <a href="https://bullhorn.github.io/novo-elements/docs/#/updates/v6#utility-directives">#</a></h3>
<p>Composing layouts is difficult especially when you need to create css classes for all your container.  It gets very repetitive add <code>display: flex</code> and <code>flex-direction: row</code>.  Now we have new utility components and directive to compose the general layout of a page without writing any css.  The goal is reduce application specific css to zero.  Here are the new features we have added to support this.</p>
<ul>
<li><code>&lt;novo-box&gt;</code></li>
<li><code>&lt;novo-flex&gt;</code> or <code>&lt;novo-row&gt;</code></li>
<li><code>&lt;novo-stack&gt;</code> or <code>&lt;novo-col&gt;</code></li>
</ul>
<table>
<thead>
<tr>
<th>prop</th>
<th>CSS Property</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>direction</code></td>
<td><code>flex-direction</code></td>
<td><code>Use flex or stack, but you can overried if needed</code></td>
</tr>
<tr>
<td><code>align</code></td>
<td><code>align-items</code></td>
<td><code>Aligns the content along the primary axis</code></td>
</tr>
<tr>
<td><code>justify</code></td>
<td><code>justify-content</code></td>
<td><code>Aligns the content along the secondary axis</code></td>
</tr>
</tbody>
</table>
<p>In addition to these layout components you can add directives (attributes) to any element on your page. All of these elements are <strong>theme aware</strong> as in they will look up the value from the design token library and use that value.</p>
<table>
<thead>
<tr>
<th>Prop</th>
<th>CSS Property</th>
<th>Design Token</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>margin</code></td>
<td><code>margin</code></td>
<td><code>spacing</code></td>
</tr>
<tr>
<td><code>mt</code>, <code>marginTop</code></td>
<td><code>margin-top</code></td>
<td><code>spacing</code></td>
</tr>
<tr>
<td><code>mr</code>, <code>marginRight</code></td>
<td><code>margin-right</code></td>
<td><code>spacing</code></td>
</tr>
<tr>
<td><code>mb</code>, <code>marginBottom</code></td>
<td><code>margin-bottom</code></td>
<td><code>spacing</code></td>
</tr>
<tr>
<td><code>ml</code>, <code>marginLeft</code></td>
<td><code>margin-left</code></td>
<td><code>spacing</code></td>
</tr>
<tr>
<td><code>mx</code></td>
<td><code>margin-left</code> and <code>margin-right</code></td>
<td><code>spacing</code></td>
</tr>
<tr>
<td><code>my</code></td>
<td><code>margin-top</code> and <code>margin-bottom</code></td>
<td><code>spacing</code></td>
</tr>
<tr>
<td><code>padding</code></td>
<td><code>padding</code></td>
<td><code>spacing</code></td>
</tr>
<tr>
<td><code>pt</code>, <code>paddingTop</code></td>
<td><code>padding-top</code></td>
<td><code>spacing</code></td>
</tr>
<tr>
<td><code>pr</code>, <code>paddingRight</code></td>
<td><code>padding-right</code></td>
<td><code>spacing</code></td>
</tr>
<tr>
<td><code>pb</code>, <code>paddingBottom</code></td>
<td><code>padding-bottom</code></td>
<td><code>spacing</code></td>
</tr>
<tr>
<td><code>pl</code>, <code>paddingLeft</code></td>
<td><code>padding-left</code></td>
<td><code>spacing</code></td>
</tr>
<tr>
<td><code>px</code></td>
<td><code>padding-left</code> and <code>padding-right</code></td>
<td><code>spacing</code></td>
</tr>
<tr>
<td><code>py</code></td>
<td><code>padding-top</code> and <code>padding-bottom</code></td>
<td><code>spacing</code></td>
</tr>
<tr>
<td><code>bg</code></td>
<td><code>background-color</code></td>
<td><code>color</code></td>
</tr>
<tr>
<td><code>color</code></td>
<td><code>color</code></td>
<td><code>color</code></td>
</tr>
<tr>
<td><code>accent</code></td>
<td><code>class</code></td>
<td><code>color</code></td>
</tr>
<tr>
<td><code>theme</code></td>
<td><code>class</code></td>
<td><code>color</code></td>
</tr>
</tbody>
</table>
<p>For Example:</p>
<pre><code class="language-html"><span class="hljs-comment">&lt;!-- This will create a row with three columns each containing a stacked icon over text --&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">novo-flex</span> <span class="hljs-attr">gap</span>=<span class="hljs-string">&quot;lg&quot;</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">novo-stack</span> <span class="hljs-attr">padding</span>=<span class="hljs-string">&quot;md&quot;</span> <span class="hljs-attr">bg</span>=<span class="hljs-string">&quot;candidate&quot;</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">novo-icon</span>&gt;</span>candidate<span class="hljs-tag">&lt;/<span class="hljs-name">novo-icon</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">novo-text</span>&gt;</span>Ferdinand del Toro<span class="hljs-tag">&lt;/<span class="hljs-name">novo-text</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">novo-stack</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">novo-stack</span> <span class="hljs-attr">padding</span>=<span class="hljs-string">&quot;md&quot;</span> <span class="hljs-attr">bg</span>=<span class="hljs-string">&quot;candidate&quot;</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">novo-icon</span>&gt;</span>contact<span class="hljs-tag">&lt;/<span class="hljs-name">novo-icon</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">novo-text</span>&gt;</span>Ferdinand del Toro<span class="hljs-tag">&lt;/<span class="hljs-name">novo-text</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">novo-stack</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">novo-stack</span> <span class="hljs-attr">padding</span>=<span class="hljs-string">&quot;md&quot;</span> <span class="hljs-attr">bg</span>=<span class="hljs-string">&quot;company&quot;</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">novo-icon</span> <span class="hljs-attr">mb</span>=<span class="hljs-string">&quot;sm&quot;</span>&gt;</span>company<span class="hljs-tag">&lt;/<span class="hljs-name">novo-icon</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">novo-text</span>&gt;</span>Bullhorn<span class="hljs-tag">&lt;/<span class="hljs-name">novo-text</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">novo-stack</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">novo-flex</span>&gt;</span>
</code></pre>
<h3 id="field">New Field Component <a href="https://bullhorn.github.io/novo-elements/docs/#/updates/v6#field">#</a></h3>
<p>A new experimental <code>novo-field</code> component has been added to help improve the future of <code>novo-form</code> (which it is not currently using).  The <code>novo-field</code> and its supporting cast of components and directives makes it really easy to compose static forms.</p>
<pre><code class="language-html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> [<span class="hljs-attr">formGroup</span>]=<span class="hljs-string">&quot;data&quot;</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">novo-fields</span> <span class="hljs-attr">appearance</span>=<span class="hljs-string">&quot;filled&quot;</span> <span class="hljs-attr">layout</span>=<span class="hljs-string">&quot;vertical&quot;</span> [<span class="hljs-attr">fullWidth</span>]=<span class="hljs-string">&quot;true&quot;</span>&gt;</span>
    <span class="hljs-comment">&lt;!-- Notice the novoInput directive --&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">novo-field</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">novo-label</span>&gt;</span>Pick a Number?<span class="hljs-tag">&lt;/<span class="hljs-name">novo-label</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">novoInput</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;number&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;Ex. 12&quot;</span> [<span class="hljs-attr">formControl</span>]=<span class="hljs-string">&quot;numberControl&quot;</span> <span class="hljs-attr">min</span>=<span class="hljs-string">&quot;10&quot;</span> /&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">novo-error</span> *<span class="hljs-attr">ngIf</span>=<span class="hljs-string">&quot;numberControl.invalid&quot;</span>&gt;</span>Minimum: 10<span class="hljs-tag">&lt;/<span class="hljs-name">novo-error</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">novo-field</span>&gt;</span>
    <span class="hljs-comment">&lt;!-- Easily attach pickers or custom autocompletes to a novoInput --&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">novo-field</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">novo-label</span>&gt;</span>Date of Birth<span class="hljs-tag">&lt;/<span class="hljs-name">novo-label</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">novoInput</span> <span class="hljs-attr">dateFormat</span> [<span class="hljs-attr">picker</span>]=<span class="hljs-string">&quot;datepicker&quot;</span> [<span class="hljs-attr">formControl</span>]=<span class="hljs-string">&quot;dateControl&quot;</span> /&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">novo-picker-toggle</span> <span class="hljs-attr">novoSuffix</span> <span class="hljs-attr">icon</span>=<span class="hljs-string">&quot;calendar&quot;</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">novo-date-picker</span> #<span class="hljs-attr">datepicker</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">novo-date-picker</span>&gt;</span>
      <span class="hljs-tag">&lt;/<span class="hljs-name">novo-picker-toggle</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">novo-field</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">novo-fields</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span>
</code></pre>
<p>View the docs to <a href="https://bullhorn.github.io/novo-elements/docs/#/components/field/design">read more</a>.</p>
<h2 id="notable-changes">Notable changes <a href="https://bullhorn.github.io/novo-elements/docs/#/updates/v6#notable-changes">#</a></h2>
<ul>
<li><code>novo-table</code> is now deprecated use <code>novo-data-table</code> instead</li>
<li><code>appendToBody</code> on dropdowns and pickers is deprecated</li>
<li><code>list</code> and <code>item</code> are not valid web-component or angular standard tags.  use <code>novo-list</code> and <code>novo-list-item</code>, but use <code>novo-option</code> and <code>novo-optgroup</code> inside of a dropdown.</li>
<li><code>list</code> and <code>item</code> are not valid web-component or angular standard tags.  use <code>novo-list</code> and <code>novo-list-item</code>, but use <code>novo-option</code> and <code>novo-optgroup</code> inside of a dropdown.</li>
<li><code>range</code> input on <code>date-picker</code> is deprecated please use <code>mode=&quot;range&quot;</code></li>
<li><code>week</code> input on <code>date-picker</code> is deprecated please use <code>mode=&quot;week&quot;</code></li>
</ul>
<h2 id="thanks">Thank you <a href="https://bullhorn.github.io/novo-elements/docs/#/updates/v6#thanks">#</a></h2>
<p>Last but certainly not least, a big <em>Thank You</em> to the contributors of Novo Elements throughout the years. For this release a special shout out to our developers Dan Voegelin and Charles Barnes, the automation team for helping us test the changes: Jon Eman, Tiffany Bertolozzi, Tony Phu and Ashley Schroeder, and our UX Team include but not limited to: Jon Braun, Madeliene Valcour, Katie Todd, Daniel Long, Angela Wang and Gloria Nam.</p>
`,
                    host: { class: 'markdown-page' },
                    standalone: false,
                }]
        }] });
class v11Page {
    constructor() {
        this.params = {};
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: v11Page, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: v11Page, isStandalone: false, selector: "v11-page", host: { classAttribute: "markdown-page" }, ngImport: i0, template: `<h1>🎉 October 2025 (version 11)</h1>
<p><strong>Announcement</strong>: Novo Elements is now on Angular 19!</p>
<p>This brings Novo Elements up to the latest versions of both Angular and Typescript.</p>
<h2>Upgrading to v11</h2>
<ul>
<li>Ensure your node version is compatible with Angular 19 which requires <code>^18.19.0</code> or <code>^20.9.0</code> or <code>22.x</code>.</li>
</ul>
<h2 id="notable-changes">Notable changes <a href="https://bullhorn.github.io/novo-elements/docs/#/updates/v11-announce#notable-changes">#</a></h2>
<h3>Angular Upgrade</h3>
<ul>
<li>Update to Angular 19 <a href="https://github.com/bullhorn/novo-elements/pull/1706">#1706</a></li>
</ul>
<h3>Date Picker</h3>
<ul>
<li>Add optional Cancel/Save buttons to Date Picker <a href="https://github.com/bullhorn/novo-elements/pull/1698">#1698</a></li>
<li>Add optional dateForInitialView input <a href="https://github.com/bullhorn/novo-elements/pull/1635">#1635</a></li>
</ul>
<h3>Data Table</h3>
<ul>
<li>Add option to show the total number of records <a href="https://github.com/bullhorn/novo-elements/pull/1648">#1648</a></li>
</ul>
<h3>Components</h3>
<ul>
<li>Select: Fixed keyboard navigation <a href="https://github.com/bullhorn/novo-elements/pull/1715">#1715</a></li>
<li>Button: Add support for two icon buttons <a href="https://github.com/bullhorn/novo-elements/pull/1643">#1643</a></li>
<li>Aside: Making the Aside component draggable <a href="https://github.com/bullhorn/novo-elements/pull/1660">#1660</a></li>
<li>novo-field: Added disabled state styling <a href="https://github.com/bullhorn/novo-elements/pull/1644">#1644</a></li>
<li>NovoOverlay: Contextual custom overlay containers <a href="https://github.com/bullhorn/novo-elements/pull/1639">#1639</a></li>
<li>SwitchControl: Add change propagation to Switch Control Template <a href="https://github.com/bullhorn/novo-elements/pull/1593">#1593</a></li>
<li>Autocomplete: Introduce makeFirstItemActive option <a href="https://github.com/bullhorn/novo-elements/pull/1574">#1574</a></li>
<li>Select: Add icon option to select <a href="https://github.com/bullhorn/novo-elements/pull/1570">#1570</a></li>
<li>Novo Notification: Added novo-dropdown to ng-content <a href="https://github.com/bullhorn/novo-elements/pull/1568">#1568</a></li>
<li>Tiles: Restyling the novo-tiles component to be more legible <a href="https://github.com/bullhorn/novo-elements/pull/1590">#1590</a></li>
</ul>
<h3>Google Places</h3>
<ul>
<li>Add postal_codes to AddressData for better locality support <a href="https://github.com/bullhorn/novo-elements/pull/1703">#1703</a></li>
</ul>
`, isInline: true }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: v11Page, decorators: [{
            type: Component,
            args: [{
                    selector: 'v11-page',
                    template: `<h1>🎉 October 2025 (version 11)</h1>
<p><strong>Announcement</strong>: Novo Elements is now on Angular 19!</p>
<p>This brings Novo Elements up to the latest versions of both Angular and Typescript.</p>
<h2>Upgrading to v11</h2>
<ul>
<li>Ensure your node version is compatible with Angular 19 which requires <code>^18.19.0</code> or <code>^20.9.0</code> or <code>22.x</code>.</li>
</ul>
<h2 id="notable-changes">Notable changes <a href="https://bullhorn.github.io/novo-elements/docs/#/updates/v11-announce#notable-changes">#</a></h2>
<h3>Angular Upgrade</h3>
<ul>
<li>Update to Angular 19 <a href="https://github.com/bullhorn/novo-elements/pull/1706">#1706</a></li>
</ul>
<h3>Date Picker</h3>
<ul>
<li>Add optional Cancel/Save buttons to Date Picker <a href="https://github.com/bullhorn/novo-elements/pull/1698">#1698</a></li>
<li>Add optional dateForInitialView input <a href="https://github.com/bullhorn/novo-elements/pull/1635">#1635</a></li>
</ul>
<h3>Data Table</h3>
<ul>
<li>Add option to show the total number of records <a href="https://github.com/bullhorn/novo-elements/pull/1648">#1648</a></li>
</ul>
<h3>Components</h3>
<ul>
<li>Select: Fixed keyboard navigation <a href="https://github.com/bullhorn/novo-elements/pull/1715">#1715</a></li>
<li>Button: Add support for two icon buttons <a href="https://github.com/bullhorn/novo-elements/pull/1643">#1643</a></li>
<li>Aside: Making the Aside component draggable <a href="https://github.com/bullhorn/novo-elements/pull/1660">#1660</a></li>
<li>novo-field: Added disabled state styling <a href="https://github.com/bullhorn/novo-elements/pull/1644">#1644</a></li>
<li>NovoOverlay: Contextual custom overlay containers <a href="https://github.com/bullhorn/novo-elements/pull/1639">#1639</a></li>
<li>SwitchControl: Add change propagation to Switch Control Template <a href="https://github.com/bullhorn/novo-elements/pull/1593">#1593</a></li>
<li>Autocomplete: Introduce makeFirstItemActive option <a href="https://github.com/bullhorn/novo-elements/pull/1574">#1574</a></li>
<li>Select: Add icon option to select <a href="https://github.com/bullhorn/novo-elements/pull/1570">#1570</a></li>
<li>Novo Notification: Added novo-dropdown to ng-content <a href="https://github.com/bullhorn/novo-elements/pull/1568">#1568</a></li>
<li>Tiles: Restyling the novo-tiles component to be more legible <a href="https://github.com/bullhorn/novo-elements/pull/1590">#1590</a></li>
</ul>
<h3>Google Places</h3>
<ul>
<li>Add postal_codes to AddressData for better locality support <a href="https://github.com/bullhorn/novo-elements/pull/1703">#1703</a></li>
</ul>
`,
                    host: { class: 'markdown-page' },
                    standalone: false,
                }]
        }] });
class v10Page {
    constructor() {
        this.params = {};
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: v10Page, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: v10Page, isStandalone: false, selector: "v10-page", host: { classAttribute: "markdown-page" }, ngImport: i0, template: `<h1>🎉 April 2024 (version 10)</h1>
<p><strong>Announcement</strong>: Novo Elements is now on Angular 17!</p>
<p>This brings Novo Elements up to the latest versions of both Angular and Typescript.<br>
Some key highlights include:</p>
<ul>
<li>Removing the long-since deprecated Table component.</li>
<li>Removing the Dragula add-on.</li>
</ul>
<h2>Upgrading to v10</h2>
<ul>
<li>Ensure your node version is compatible with Angular 17 which requires <code>^18.13.0</code> or <code>^20.9.0</code>.</li>
<li>If your application is using the Novo Elements <code>dragula</code> add-on, you will need to refactor it using the guide below.</li>
<li>If your application is still using the Novo Elements <code>table</code> component, you will need to refactor it to use the <code>novo-data-table</code> component.</li>
</ul>
<h2>Dragula</h2>
<p>There are a few options for Novo Elements users who wish to use drag and drop functionality on our components.</p>
<p>For basic new implementations we recommend our new lightweight <a href="https://bullhorn.github.io/novo-elements/docs/#/utils/drag%20and%20drop">drag-drop component</a> which should handle most simple use cases going forward.</p>
<p>If you have more advanced needs or are refactoring a component that is currently using the previous Novo Elements dragula add-on directive and service, we recommend switching over to use the <a href="https://github.com/valor-software/ng2-dragula">ng2-dragula</a> library as it is better maintained than our &#64;bullhorn/dragula library and has a very similar API which greatly reduces the refactor effort. If you are choosing to leverage this library here are some key differences to keep in mind:</p>
<ul>
<li>NovoDragulaModule, NovoDragulaService imports from 'novo-elements' will now be DragulaModule, DragulaService imports from 'ng2-dragula'</li>
<li>add DragulaModule.forRoot() to your app module imports</li>
<li>NovoDragulaService.setOptions() calls will now be DragulaService.createGroup()</li>
<li>NovoDragulaService events will now be function calls - ie NovoDragulaService.drop.subscribe() is now DragulaService.drop().subscribe()</li>
<li>the return values from these events are no longer arrays with specific properties at certain indexes, but are now objects with defined properties</li>
<li>some CSS additions may be necessary, either by importing an ng2-dragula stylesheet or adding the styles manually (see readme link below)</li>
<li>the dragulaModel input will no longer mutate the array you pass in, but return a new array with the changes, so you will want to use two-way data binding in your templates for this</li>
<li>as of 4/24 there is a bug in the current ng2-dragula npm 5.0.1-5.0.2 releases around the required peer dependency angular versions, so you may need to override these in your package.json until it's fixed</li>
</ul>
<p>Other changes which may be relevant (such as the css changes) may be listed in the <a href="https://github.com/valor-software/ng2-dragula/tree/master">ng2-dragula readme</a>. Event return values and other changes can be discerned from the <a href="https://github.com/valor-software/ng2-dragula/blob/master/libs/ng2-dragula/src/components/dragula.service.ts">ng2-dragula DragulaService file</a>.</p>
<h2 id="notable-changes">Notable changes <a href="https://bullhorn.github.io/novo-elements/docs/#/updates/v10-announce#notable-changes">#</a></h2>
<ul>
<li>update to ng17 <a href="https://github.com/bullhorn/novo-elements/pull/1501">#1501</a></li>
<li>deleting the table component <a href="https://github.com/bullhorn/novo-elements/pull/1513">#1513</a></li>
<li>bump follow-redirects from 1.15.4 to 1.15.6 <a href="https://github.com/bullhorn/novo-elements/pull/1520">#1520</a></li>
<li>deleting dragula add-on <a href="https://github.com/bullhorn/novo-elements/pull/1517">#1517</a></li>
<li>When handling AppBridge events, pass origin to handler <a href="https://github.com/bullhorn/novo-elements/pull/1509">#1509</a></li>
<li>added new hidden chips feature to Chips picker <a href="https://github.com/bullhorn/novo-elements/pull/1521">#1521</a></li>
<li>Fixes to an error in Control affecting maxlength fields <a href="https://github.com/bullhorn/novo-elements/pull/1518">#1518</a></li>
</ul>
`, isInline: true }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: v10Page, decorators: [{
            type: Component,
            args: [{
                    selector: 'v10-page',
                    template: `<h1>🎉 April 2024 (version 10)</h1>
<p><strong>Announcement</strong>: Novo Elements is now on Angular 17!</p>
<p>This brings Novo Elements up to the latest versions of both Angular and Typescript.<br>
Some key highlights include:</p>
<ul>
<li>Removing the long-since deprecated Table component.</li>
<li>Removing the Dragula add-on.</li>
</ul>
<h2>Upgrading to v10</h2>
<ul>
<li>Ensure your node version is compatible with Angular 17 which requires <code>^18.13.0</code> or <code>^20.9.0</code>.</li>
<li>If your application is using the Novo Elements <code>dragula</code> add-on, you will need to refactor it using the guide below.</li>
<li>If your application is still using the Novo Elements <code>table</code> component, you will need to refactor it to use the <code>novo-data-table</code> component.</li>
</ul>
<h2>Dragula</h2>
<p>There are a few options for Novo Elements users who wish to use drag and drop functionality on our components.</p>
<p>For basic new implementations we recommend our new lightweight <a href="https://bullhorn.github.io/novo-elements/docs/#/utils/drag%20and%20drop">drag-drop component</a> which should handle most simple use cases going forward.</p>
<p>If you have more advanced needs or are refactoring a component that is currently using the previous Novo Elements dragula add-on directive and service, we recommend switching over to use the <a href="https://github.com/valor-software/ng2-dragula">ng2-dragula</a> library as it is better maintained than our &#64;bullhorn/dragula library and has a very similar API which greatly reduces the refactor effort. If you are choosing to leverage this library here are some key differences to keep in mind:</p>
<ul>
<li>NovoDragulaModule, NovoDragulaService imports from 'novo-elements' will now be DragulaModule, DragulaService imports from 'ng2-dragula'</li>
<li>add DragulaModule.forRoot() to your app module imports</li>
<li>NovoDragulaService.setOptions() calls will now be DragulaService.createGroup()</li>
<li>NovoDragulaService events will now be function calls - ie NovoDragulaService.drop.subscribe() is now DragulaService.drop().subscribe()</li>
<li>the return values from these events are no longer arrays with specific properties at certain indexes, but are now objects with defined properties</li>
<li>some CSS additions may be necessary, either by importing an ng2-dragula stylesheet or adding the styles manually (see readme link below)</li>
<li>the dragulaModel input will no longer mutate the array you pass in, but return a new array with the changes, so you will want to use two-way data binding in your templates for this</li>
<li>as of 4/24 there is a bug in the current ng2-dragula npm 5.0.1-5.0.2 releases around the required peer dependency angular versions, so you may need to override these in your package.json until it's fixed</li>
</ul>
<p>Other changes which may be relevant (such as the css changes) may be listed in the <a href="https://github.com/valor-software/ng2-dragula/tree/master">ng2-dragula readme</a>. Event return values and other changes can be discerned from the <a href="https://github.com/valor-software/ng2-dragula/blob/master/libs/ng2-dragula/src/components/dragula.service.ts">ng2-dragula DragulaService file</a>.</p>
<h2 id="notable-changes">Notable changes <a href="https://bullhorn.github.io/novo-elements/docs/#/updates/v10-announce#notable-changes">#</a></h2>
<ul>
<li>update to ng17 <a href="https://github.com/bullhorn/novo-elements/pull/1501">#1501</a></li>
<li>deleting the table component <a href="https://github.com/bullhorn/novo-elements/pull/1513">#1513</a></li>
<li>bump follow-redirects from 1.15.4 to 1.15.6 <a href="https://github.com/bullhorn/novo-elements/pull/1520">#1520</a></li>
<li>deleting dragula add-on <a href="https://github.com/bullhorn/novo-elements/pull/1517">#1517</a></li>
<li>When handling AppBridge events, pass origin to handler <a href="https://github.com/bullhorn/novo-elements/pull/1509">#1509</a></li>
<li>added new hidden chips feature to Chips picker <a href="https://github.com/bullhorn/novo-elements/pull/1521">#1521</a></li>
<li>Fixes to an error in Control affecting maxlength fields <a href="https://github.com/bullhorn/novo-elements/pull/1518">#1518</a></li>
</ul>
`,
                    host: { class: 'markdown-page' },
                    standalone: false,
                }]
        }] });
class TemplatesPage {
    constructor() {
        this.params = {};
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: TemplatesPage, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: TemplatesPage, isStandalone: false, selector: "templates-page", host: { classAttribute: "markdown-page" }, ngImport: i0, template: `<h2>Bullhorn Application Templates</h2>
<p>Bullhorn provides customization of the user experience with custom tabs, custom cards, custom actions and more.</p>
<p>The <a href="https://github.com/bullhorn/extension-samples">Bullhorn Extension Samples</a> repo
provides several examples for getting started building custom apps using Novo Elements.</p>
`, isInline: true }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: TemplatesPage, decorators: [{
            type: Component,
            args: [{
                    selector: 'templates-page',
                    template: `<h2>Bullhorn Application Templates</h2>
<p>Bullhorn provides customization of the user experience with custom tabs, custom cards, custom actions and more.</p>
<p>The <a href="https://github.com/bullhorn/extension-samples">Bullhorn Extension Samples</a> repo
provides several examples for getting started building custom apps using Novo Elements.</p>
`,
                    host: { class: 'markdown-page' },
                    standalone: false,
                }]
        }] });
class PatternsPage {
    constructor() {
        this.params = {};
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: PatternsPage, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: PatternsPage, isStandalone: false, selector: "patterns-page", host: { classAttribute: "markdown-page" }, ngImport: i0, template: `<h1>Design Patterns</h1>
<p>The following are examples of know composition patterns to create a common user experience. The component library is design to be used in these patterns.</p>
<h2>Activity Sections</h2>
<p>Displaying a series of lists in expandable sections, like in the activity tab.</p>
<p><code-example example="activity-section"></code-example></p>
<h2>Record Headers</h2>
<p>Entity Record Headers Patterns.</p>
<p><code-example example="record-header"></code-example></p>
<h2>Details Card</h2>
<p>When Displaying list of fields &amp; values in a card, follow this pattern.</p>
<p><code-example example="details-card"></code-example></p>
<h2>Card Form</h2>
<p>Displaying a form inside a cards, used for email &amp; sms messages</p>
<p><code-example example="card-form"></code-example></p>
`, isInline: true, dependencies: [{ kind: "component", type: CodeExampleComponent, selector: "code-example", inputs: ["example"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: PatternsPage, decorators: [{
            type: Component,
            args: [{
                    selector: 'patterns-page',
                    template: `<h1>Design Patterns</h1>
<p>The following are examples of know composition patterns to create a common user experience. The component library is design to be used in these patterns.</p>
<h2>Activity Sections</h2>
<p>Displaying a series of lists in expandable sections, like in the activity tab.</p>
<p><code-example example="activity-section"></code-example></p>
<h2>Record Headers</h2>
<p>Entity Record Headers Patterns.</p>
<p><code-example example="record-header"></code-example></p>
<h2>Details Card</h2>
<p>When Displaying list of fields &amp; values in a card, follow this pattern.</p>
<p><code-example example="details-card"></code-example></p>
<h2>Card Form</h2>
<p>Displaying a form inside a cards, used for email &amp; sms messages</p>
<p><code-example example="card-form"></code-example></p>
`,
                    host: { class: 'markdown-page' },
                    standalone: false,
                }]
        }] });
class PatternsTestPage {
    constructor() {
        this.params = {};
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: PatternsTestPage, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: PatternsTestPage, isStandalone: false, selector: "patterns-test-page", host: { classAttribute: "markdown-page" }, ngImport: i0, template: `<h2 id="demo">Element demos</h2>
<p>This is supposed to be a demo page so we need more elements!</p>
<h3 id="form-elements">Form elements</h3>
<form>
  <label for="email">Email</label>
  <input type="email" name="email" id="email" placeholder="john.doe&#64;gmail.com" />
<p><label for="id">User id (read only)</label>
<input readonly name="id" id="id" value="04D6H89Z" /></p>
<p><label for="disabled">Random disabled input</label>
<input disabled name="disabled" id="disabled" placeholder="Because why not?" /></p>
<p><label for="about">About me</label></p>
<textarea name="about" id="about" placeholder="I am a textarea..."></textarea>
<p><label>Choose a Doe:</label></p>
  <div>
    <input type="radio" id="john" name="drone" value="john" checked />
    <label for="john">John Doe</label>
  </div>
  <div>
    <input type="radio" id="jane" name="drone" value="jane" checked />
    <label for="jane">Jane Doe</label>
  </div>
  <div>
    <input type="radio" id="johnny" name="drone" value="johnny" checked />
    <label for="johnny">Johnny Doe</label>
  </div>
  <br />
  <input type="checkbox" name="remember" id="remember" checked />
  <label for="remember">Remember me</label>
  <input type="submit" value="Submit" />
  <input type="reset" value="Reset" />
</form>
<h3 id="code">Code</h3>
<p>
  Below is some code, you can copy it with <kbd>Ctrl-C</kbd>. Did you know,
  <code>alert(1)</code> can show an alert in JavaScript!
</p>
<pre><code>// This logs a message to the console and check out the scrollbar.<br>console.log('Hello, world!')</code></pre>
<h3 id="other">Other</h3>
<p>Here's a horizontal rule and image because I don't know where else to put them.</p>
<img src="https://placekitten.com/408/287" alt="Example kitten" />
<hr />
<p>And here's a nicely marked up table!</p>
<table>
  <thead>
    <tr>
      <th>Name</th>
      <th>Quantity</th>
      <th>Price</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Godzilla</td>
      <td>2</td>
      <td>$299.99</td>
    </tr>
    <tr>
      <td>Mozilla</td>
      <td>10</td>
      <td>$100,000.00</td>
    </tr>
    <tr>
      <td>Quesadilla</td>
      <td>1</td>
      <td>$2.22</td>
    </tr>
  </tbody>
</table>
<details>
  <summary>Some summary/details can't hurt!</summary>
  <p>Lorem ipsum dolor sit blah blah.</p>
</details>
<p>The dialog (form, and menu) tag</p>
<div>
  <button type="button" id="dialog-trigger">
    Show me the dialog!
  </button>
  <span id="dialog-result"></span>
</div>
<dialog id="dialog">
  <header>This is a sample dialog</header>
  <form method="dialog">
    <p>What is your favorite pet animal?</p>
    <menu>
      <button value="feline">Cats</button>
      <button value="canine">Dogs</button>
      <button value="other">Others</button>
    </menu>
  </form>
</dialog>
<h3 id="typography">Typography</h3>
<p>
  Lorem ipsum dolor sit amet, consectetur adipiscing elit. Quisque dictum hendrerit velit, quis
  ullamcorper sem congue ac. Quisque id magna rhoncus, sodales massa vel, vestibulum elit. Duis
  ornare accumsan egestas. Proin maximus lacus interdum leo molestie convallis. Orci varius
  natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Ut iaculis risus eu
  felis feugiat, eu mollis neque elementum. Donec interdum, nisl id dignissim iaculis, felis dui
  aliquet dui, non fermentum velit lectus ac quam. Class aptent taciti sociosqu ad litora
  torquent per conubia nostra, per inceptos himenaeos.
  <strong>This is strong,</strong> this is normal, <b>this is just bold,</b>
  <em>and this is emphasized!</em> And heck, <a href="/">here</a>'s a link.
</p>
<blockquote cite="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/blockquote">
  "The HTML blockquote Element (or HTML Block Quotation Element) indicates that the enclosed
  text is an extended quotation. Usually, this is rendered visually by indentation (see
  <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/blockquote#Usage_notes"
    >Notes</a
  >
  for how to change it). A URL for the source of the quotation may be given using the
  <code>cite</code> attribute, while a text representation of the source can be given using the
  <code>&lt;cite&gt;</code> cite element."
  <footer>
    <cite>MDN, "The Block Quotation element"</cite>
  </footer>
</blockquote>
<ul>
  <li>Unordered list item 1</li>
  <li>Unordered list item 2</li>
  <li>Unordered list item 3</li>
</ul>
<ol>
  <li>Ordered list item 1</li>
  <li>Ordered list item 2</li>
  <li>Ordered list item 3</li>
</ol>
<p>Addresses are also styled to be <strong>awesome</strong>!</p>
<address>
  <a href="mailto:john.doe&#64;example.com">john.doe&#64;example.com</a><br />
  <a href="tel:778-330-2389">778-330-2389</a><br />
  <a href="sms:666-666-6666">666-666-6666</a><br />
</address>
<br />
<h1>Heading 1</h1>
<h2>Heading 2</h2>
<h3>Heading 3</h3>
<h4>Heading 4</h4>
<h5>Heading 5</h5>
<h6>Heading 6</h6>
<footer>
  <a href="#">Back to top ⬆</a>
</footer>
`, isInline: true }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: PatternsTestPage, decorators: [{
            type: Component,
            args: [{
                    selector: 'patterns-test-page',
                    template: `<h2 id="demo">Element demos</h2>
<p>This is supposed to be a demo page so we need more elements!</p>
<h3 id="form-elements">Form elements</h3>
<form>
  <label for="email">Email</label>
  <input type="email" name="email" id="email" placeholder="john.doe&#64;gmail.com" />
<p><label for="id">User id (read only)</label>
<input readonly name="id" id="id" value="04D6H89Z" /></p>
<p><label for="disabled">Random disabled input</label>
<input disabled name="disabled" id="disabled" placeholder="Because why not?" /></p>
<p><label for="about">About me</label></p>
<textarea name="about" id="about" placeholder="I am a textarea..."></textarea>
<p><label>Choose a Doe:</label></p>
  <div>
    <input type="radio" id="john" name="drone" value="john" checked />
    <label for="john">John Doe</label>
  </div>
  <div>
    <input type="radio" id="jane" name="drone" value="jane" checked />
    <label for="jane">Jane Doe</label>
  </div>
  <div>
    <input type="radio" id="johnny" name="drone" value="johnny" checked />
    <label for="johnny">Johnny Doe</label>
  </div>
  <br />
  <input type="checkbox" name="remember" id="remember" checked />
  <label for="remember">Remember me</label>
  <input type="submit" value="Submit" />
  <input type="reset" value="Reset" />
</form>
<h3 id="code">Code</h3>
<p>
  Below is some code, you can copy it with <kbd>Ctrl-C</kbd>. Did you know,
  <code>alert(1)</code> can show an alert in JavaScript!
</p>
<pre><code>// This logs a message to the console and check out the scrollbar.<br>console.log('Hello, world!')</code></pre>
<h3 id="other">Other</h3>
<p>Here's a horizontal rule and image because I don't know where else to put them.</p>
<img src="https://placekitten.com/408/287" alt="Example kitten" />
<hr />
<p>And here's a nicely marked up table!</p>
<table>
  <thead>
    <tr>
      <th>Name</th>
      <th>Quantity</th>
      <th>Price</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Godzilla</td>
      <td>2</td>
      <td>$299.99</td>
    </tr>
    <tr>
      <td>Mozilla</td>
      <td>10</td>
      <td>$100,000.00</td>
    </tr>
    <tr>
      <td>Quesadilla</td>
      <td>1</td>
      <td>$2.22</td>
    </tr>
  </tbody>
</table>
<details>
  <summary>Some summary/details can't hurt!</summary>
  <p>Lorem ipsum dolor sit blah blah.</p>
</details>
<p>The dialog (form, and menu) tag</p>
<div>
  <button type="button" id="dialog-trigger">
    Show me the dialog!
  </button>
  <span id="dialog-result"></span>
</div>
<dialog id="dialog">
  <header>This is a sample dialog</header>
  <form method="dialog">
    <p>What is your favorite pet animal?</p>
    <menu>
      <button value="feline">Cats</button>
      <button value="canine">Dogs</button>
      <button value="other">Others</button>
    </menu>
  </form>
</dialog>
<h3 id="typography">Typography</h3>
<p>
  Lorem ipsum dolor sit amet, consectetur adipiscing elit. Quisque dictum hendrerit velit, quis
  ullamcorper sem congue ac. Quisque id magna rhoncus, sodales massa vel, vestibulum elit. Duis
  ornare accumsan egestas. Proin maximus lacus interdum leo molestie convallis. Orci varius
  natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Ut iaculis risus eu
  felis feugiat, eu mollis neque elementum. Donec interdum, nisl id dignissim iaculis, felis dui
  aliquet dui, non fermentum velit lectus ac quam. Class aptent taciti sociosqu ad litora
  torquent per conubia nostra, per inceptos himenaeos.
  <strong>This is strong,</strong> this is normal, <b>this is just bold,</b>
  <em>and this is emphasized!</em> And heck, <a href="/">here</a>'s a link.
</p>
<blockquote cite="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/blockquote">
  "The HTML blockquote Element (or HTML Block Quotation Element) indicates that the enclosed
  text is an extended quotation. Usually, this is rendered visually by indentation (see
  <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/blockquote#Usage_notes"
    >Notes</a
  >
  for how to change it). A URL for the source of the quotation may be given using the
  <code>cite</code> attribute, while a text representation of the source can be given using the
  <code>&lt;cite&gt;</code> cite element."
  <footer>
    <cite>MDN, "The Block Quotation element"</cite>
  </footer>
</blockquote>
<ul>
  <li>Unordered list item 1</li>
  <li>Unordered list item 2</li>
  <li>Unordered list item 3</li>
</ul>
<ol>
  <li>Ordered list item 1</li>
  <li>Ordered list item 2</li>
  <li>Ordered list item 3</li>
</ol>
<p>Addresses are also styled to be <strong>awesome</strong>!</p>
<address>
  <a href="mailto:john.doe&#64;example.com">john.doe&#64;example.com</a><br />
  <a href="tel:778-330-2389">778-330-2389</a><br />
  <a href="sms:666-666-6666">666-666-6666</a><br />
</address>
<br />
<h1>Heading 1</h1>
<h2>Heading 2</h2>
<h3>Heading 3</h3>
<h4>Heading 4</h4>
<h5>Heading 5</h5>
<h6>Heading 6</h6>
<footer>
  <a href="#">Back to top ⬆</a>
</footer>
`,
                    host: { class: 'markdown-page' },
                    standalone: false,
                }]
        }] });
class PatternsNativeFormsPage {
    constructor() {
        this.params = {};
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: PatternsNativeFormsPage, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: PatternsNativeFormsPage, isStandalone: false, selector: "patterns-native-forms-page", host: { classAttribute: "markdown-page" }, ngImport: i0, template: `<h1>Native Form Styles</h1>
<form action="/form/submit" method="post">
  <fieldset>
    <legend>Personal information</legend>
    <label for="name"> First name: </label>
    <input id="name" type="text" name="firstname" placeholder="First name" required>
    <label for="last">Last name:</label>
    <input id="last" type="text" name="lastname" placeholder="Last name" required>
    <br>
    <br>
    <label for="age">Age:</label>
    <input id="age" type="number" min="10" max="100" step="1" name="number-of-colors">
    <label for="website">Website:</label>
    <input id="website" type="url" multiple>
    <br>
    <br>
    <label for="address">Email address:</label>
    <input id="address" type="email" name="email" placeholder="YourEmail&#64;example.com" required>
    <label for="tel">Tel.:</label>
    <input id="tel" type="tel" placeholder="123-456-7890" pattern="[0-9]&#123;3&#125;-[0-9]&#123;3&#125;-[0-9]&#123;4&#125;">
    <br>
    <br>
  </fieldset>
  <fieldset>
    <legend>Getting to know YOU</legend>
    <label for="color">Favourite color:</label>
    <input id="color" type="color" name="color" value="#1c87c9" />
    <br>
    <p>Motivation level:</p>
    <input type="range" min="0" max="10" value="4">
    <br>
    <p>Favourite season:</p>
    <input type="radio" name="season" value="winter"> Winter
    <br>
    <input type="radio" name="season" value="autumn"> Autumn
    <br>
    <input type="radio" name="season" value="summer"> Summer
    <br>
    <input type="radio" name="season" value="spring"> Spring
    <br>
    <p>Favourite music:</p>
    <input type="radio" name="music" value="jazz"> Jazz
    <br>
    <input type="radio" name="music" value="blues"> Blues
    <br>
    <input type="radio" name="music" value="pop"> Pop
    <br>
    <input type="radio" name="music" value="rock"> Rock
    <br>
  </fieldset>
  <fieldset>
    <legend>Availability</legend>
    <label for="project">When you will be ready to start the Project?</label>
    <input id="project" type="date" name="date" value="2018-01-01" min="2018-01-01" max="2018-04-01">
    <br>
    <label for="hours">Mention your preferred working hours:</label>
    <input id="hours" type="time" name="time" value="09:00" />
    <label for="time">To </label>
    <input id="time" type="time" name="time" value="18:00" />
    <br>
    <label for="password"> Enter your password:</label>
    <input id="password" type="password" name="password" minlength="6" required placeholder="6 characters minimum" />
    <br>
    <br>
    <input type="submit" value="Send">
    <input type="reset" value="Reset">
  </fieldset>
</form>
`, isInline: true }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: PatternsNativeFormsPage, decorators: [{
            type: Component,
            args: [{
                    selector: 'patterns-native-forms-page',
                    template: `<h1>Native Form Styles</h1>
<form action="/form/submit" method="post">
  <fieldset>
    <legend>Personal information</legend>
    <label for="name"> First name: </label>
    <input id="name" type="text" name="firstname" placeholder="First name" required>
    <label for="last">Last name:</label>
    <input id="last" type="text" name="lastname" placeholder="Last name" required>
    <br>
    <br>
    <label for="age">Age:</label>
    <input id="age" type="number" min="10" max="100" step="1" name="number-of-colors">
    <label for="website">Website:</label>
    <input id="website" type="url" multiple>
    <br>
    <br>
    <label for="address">Email address:</label>
    <input id="address" type="email" name="email" placeholder="YourEmail&#64;example.com" required>
    <label for="tel">Tel.:</label>
    <input id="tel" type="tel" placeholder="123-456-7890" pattern="[0-9]&#123;3&#125;-[0-9]&#123;3&#125;-[0-9]&#123;4&#125;">
    <br>
    <br>
  </fieldset>
  <fieldset>
    <legend>Getting to know YOU</legend>
    <label for="color">Favourite color:</label>
    <input id="color" type="color" name="color" value="#1c87c9" />
    <br>
    <p>Motivation level:</p>
    <input type="range" min="0" max="10" value="4">
    <br>
    <p>Favourite season:</p>
    <input type="radio" name="season" value="winter"> Winter
    <br>
    <input type="radio" name="season" value="autumn"> Autumn
    <br>
    <input type="radio" name="season" value="summer"> Summer
    <br>
    <input type="radio" name="season" value="spring"> Spring
    <br>
    <p>Favourite music:</p>
    <input type="radio" name="music" value="jazz"> Jazz
    <br>
    <input type="radio" name="music" value="blues"> Blues
    <br>
    <input type="radio" name="music" value="pop"> Pop
    <br>
    <input type="radio" name="music" value="rock"> Rock
    <br>
  </fieldset>
  <fieldset>
    <legend>Availability</legend>
    <label for="project">When you will be ready to start the Project?</label>
    <input id="project" type="date" name="date" value="2018-01-01" min="2018-01-01" max="2018-04-01">
    <br>
    <label for="hours">Mention your preferred working hours:</label>
    <input id="hours" type="time" name="time" value="09:00" />
    <label for="time">To </label>
    <input id="time" type="time" name="time" value="18:00" />
    <br>
    <label for="password"> Enter your password:</label>
    <input id="password" type="password" name="password" minlength="6" required placeholder="6 characters minimum" />
    <br>
    <br>
    <input type="submit" value="Send">
    <input type="reset" value="Reset">
  </fieldset>
</form>
`,
                    host: { class: 'markdown-page' },
                    standalone: false,
                }]
        }] });
class LayoutsPage {
    constructor() {
        this.params = {};
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: LayoutsPage, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: LayoutsPage, isStandalone: false, selector: "layouts-page", host: { classAttribute: "markdown-page" }, ngImport: i0, template: `<h1>Layouts</h1>
<p>This is a landing page</p>
`, isInline: true }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: LayoutsPage, decorators: [{
            type: Component,
            args: [{
                    selector: 'layouts-page',
                    template: `<h1>Layouts</h1>
<p>This is a landing page</p>
`,
                    host: { class: 'markdown-page' },
                    standalone: false,
                }]
        }] });
class TabsExamplesPage {
    constructor() {
        this.params = {};
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: TabsExamplesPage, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: TabsExamplesPage, isStandalone: false, selector: "tabs-examples-page", host: { classAttribute: "markdown-page" }, ngImport: i0, template: `<h2>Themes</h2>
<h3>Color</h3>
<p>Colored background tab navigation gets the theme <code>theme=&quot;color&quot;</code></p>
<p><code-example example="tabs-color"></code-example></p>
<h3>White</h3>
<p>White background tab navigation gets the theme <code>theme=&quot;white&quot;</code></p>
<p><code-example example="tabs-basic"></code-example></p>
<h2>Styles</h2>
<p>Condensed tabs to help utilize more space with <code>condensed=&quot;true&quot;</code></p>
<p><code-example example="tabs-condensed"></code-example></p>
<h2>Types</h2>
<h3>Vertical</h3>
<p>Vertical tabs get a direction attribute <code>direction=&quot;vertical&quot;</code></p>
<p><code-example example="tabs-vertical"></code-example></p>
<h3>Button Tab Bars</h3>
<p>Tabbed Button Bars get a similar style treatment to the <code>&quot;header&quot;</code> theme button.</p>
<!-- <code-example example="tabs-condensed"></code-example> -->
<h2>As Application Routing Mechanism</h2>
<p>Follows the same color/white theme as above, but doesn't use the &quot;novo-tabs&quot; tag and you have to add the classes and html accordingly. The header will now control and route your application and put the content in the &quot;router-outlet&quot; and look/feel like our tabs component.</p>
<p><code-example example="tabs-router"></code-example></p>
`, isInline: true, dependencies: [{ kind: "component", type: CodeExampleComponent, selector: "code-example", inputs: ["example"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: TabsExamplesPage, decorators: [{
            type: Component,
            args: [{
                    selector: 'tabs-examples-page',
                    template: `<h2>Themes</h2>
<h3>Color</h3>
<p>Colored background tab navigation gets the theme <code>theme=&quot;color&quot;</code></p>
<p><code-example example="tabs-color"></code-example></p>
<h3>White</h3>
<p>White background tab navigation gets the theme <code>theme=&quot;white&quot;</code></p>
<p><code-example example="tabs-basic"></code-example></p>
<h2>Styles</h2>
<p>Condensed tabs to help utilize more space with <code>condensed=&quot;true&quot;</code></p>
<p><code-example example="tabs-condensed"></code-example></p>
<h2>Types</h2>
<h3>Vertical</h3>
<p>Vertical tabs get a direction attribute <code>direction=&quot;vertical&quot;</code></p>
<p><code-example example="tabs-vertical"></code-example></p>
<h3>Button Tab Bars</h3>
<p>Tabbed Button Bars get a similar style treatment to the <code>&quot;header&quot;</code> theme button.</p>
<!-- <code-example example="tabs-condensed"></code-example> -->
<h2>As Application Routing Mechanism</h2>
<p>Follows the same color/white theme as above, but doesn't use the &quot;novo-tabs&quot; tag and you have to add the classes and html accordingly. The header will now control and route your application and put the content in the &quot;router-outlet&quot; and look/feel like our tabs component.</p>
<p><code-example example="tabs-router"></code-example></p>
`,
                    host: { class: 'markdown-page' },
                    standalone: false,
                }]
        }] });
class TabsDevelopPage {
    constructor() {
        this.params = {};
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: TabsDevelopPage, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: TabsDevelopPage, isStandalone: false, selector: "tabs-develop-page", host: { classAttribute: "markdown-page" }, ngImport: i0, template: `<h1>Technical Details</h1>
<ul>
<li><strong>source:</strong> <a href="https://github.com/bullhorn/novo-elements/blob/master/projects/novo-elements/src/elements/tabs">(github)</a></li>
<li><strong>module:</strong> <code>import &#123; NovoTabModule &#125; form 'novo-elements/modal';</code></li>
</ul>
<p><strong>Basic Usage</strong></p>
<pre><code class="language-html"><span class="hljs-tag">&lt;<span class="hljs-name">novo-nav</span> [<span class="hljs-attr">outlet</span>]=<span class="hljs-string">&quot;ref&quot;</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">novo-tab</span>&gt;</span>Overview<span class="hljs-tag">&lt;/<span class="hljs-name">novo-tab</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">novo-tab</span>&gt;</span>Activity<span class="hljs-tag">&lt;/<span class="hljs-name">novo-tab</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">novo-nav</span>&gt;</span>

<span class="hljs-tag">&lt;<span class="hljs-name">novo-nav-outlet</span> #<span class="hljs-attr">ref</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">novo-nav-content</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Overview<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">novo-nav-content</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">novo-nav-content</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Activity<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">novo-nav-content</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">novo-nav-outlet</span>&gt;</span>
</code></pre>
<h1>Roadmap</h1>
<ul class="contains-task-list">
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"> Improve Typing Support</li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> Deprecate <code>condensed</code> in favor of <code>size</code></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> Deprecate <code>novo-tab-link</code> and make router navigation easier...</li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> Make color and theming consistent</li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> Dark Mode</li>
</ul>
<h1>Changelog</h1>
<h3>5.0.0</h3>
<p><em>Should be backwards compatible</em></p>
<h1>Components</h1>
<h2>NovoNavElement <code>novo-nav</code></h2>
<p>All tabs must be incapsulated in a <code>novo-nav</code> container. The nav will control the context and active tab.</p>
<h3>Properties</h3>
<table>
<thead>
<tr>
<th style="text-align:left">Name</th>
<th style="text-align:left">Type</th>
<th style="text-align:left">Default</th>
<th style="text-align:left">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">theme</td>
<td style="text-align:left"><em>String</em></td>
<td style="text-align:left">--</td>
<td style="text-align:left">Color theme used to display tab color.</td>
</tr>
<tr>
<td style="text-align:left">direction</td>
<td style="text-align:left"><em>String</em></td>
<td style="text-align:left">horizontal</td>
<td style="text-align:left">The layout direction of the tabs. (<code>horizontal</code> or <code>vertical</code>)</td>
</tr>
<tr>
<td style="text-align:left">outlet</td>
<td style="text-align:left"><em>Ref</em></td>
<td style="text-align:left">--</td>
<td style="text-align:left">refs to the <code>novo-tab-outlet</code> these navigation controls.</td>
</tr>
<tr>
<td style="text-align:left">router</td>
<td style="text-align:left"><em>NgRouter</em></td>
<td style="text-align:left">--</td>
<td style="text-align:left">an instance of an angular router. Used when tabs are used for page nav.</td>
</tr>
<tr>
<td style="text-align:left">condensed</td>
<td style="text-align:left"><em>Boolean</em></td>
<td style="text-align:left">false</td>
<td style="text-align:left"><strong>Deprecated</strong> used to show a more compact view.</td>
</tr>
</tbody>
</table>
<h2>NovoTabElement <code>novo-tab</code></h2>
<p>The core element for displaying tabs.</p>
<h3>Properties</h3>
<table>
<thead>
<tr>
<th style="text-align:left">Name</th>
<th style="text-align:left">Type</th>
<th style="text-align:left">Default</th>
<th style="text-align:left">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">active</td>
<td style="text-align:left"><em>Boolean</em></td>
<td style="text-align:left">false</td>
<td style="text-align:left">Whether this tab is current active tab. Can be set manually but value is controlled by <code>novo-nav</code>.</td>
</tr>
<tr>
<td style="text-align:left">color</td>
<td style="text-align:left"><em>String</em></td>
<td style="text-align:left">--</td>
<td style="text-align:left">highlight color to use when this tab is active.</td>
</tr>
<tr>
<td style="text-align:left">disabled</td>
<td style="text-align:left"><em>Object</em></td>
<td style="text-align:left">false</td>
<td style="text-align:left">Whether the tab will accept user interactions.</td>
</tr>
</tbody>
</table>
<h2>NovoTabLinkElement <code>novo-tab-link</code></h2>
<p>Used instead of <code>novo-tab</code> when using router navigation.</p>
<h3>Properties</h3>
<table>
<thead>
<tr>
<th style="text-align:left">Name</th>
<th style="text-align:left">Type</th>
<th style="text-align:left">Default</th>
<th style="text-align:left">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">active</td>
<td style="text-align:left"><em>Boolean</em></td>
<td style="text-align:left">false</td>
<td style="text-align:left">Whether this tab is current active tab. Can be set manually but value is controlled by <code>novo-nav</code></td>
</tr>
<tr>
<td style="text-align:left">disabled</td>
<td style="text-align:left"><em>Object</em></td>
<td style="text-align:left">false</td>
<td style="text-align:left">Whether the tab will accept user interactions.</td>
</tr>
</tbody>
</table>
<h2>NovoNavOutletElement <code>novo-nav-outlet</code></h2>
<p>The Container for all the <code>novo-nav-content</code>. A <code>#</code> reference should be added an passed to the <code>novo-nav</code> component to link the content to the tab view. The order of the content should be the same as the tabs that control them.</p>
<h2>NovoNavContentElement <code>novo-nav-content</code></h2>
<p>Used to incapsulate the navigation content. This wrapper will ensure on the active content is displayed.</p>
`, isInline: true }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: TabsDevelopPage, decorators: [{
            type: Component,
            args: [{
                    selector: 'tabs-develop-page',
                    template: `<h1>Technical Details</h1>
<ul>
<li><strong>source:</strong> <a href="https://github.com/bullhorn/novo-elements/blob/master/projects/novo-elements/src/elements/tabs">(github)</a></li>
<li><strong>module:</strong> <code>import &#123; NovoTabModule &#125; form 'novo-elements/modal';</code></li>
</ul>
<p><strong>Basic Usage</strong></p>
<pre><code class="language-html"><span class="hljs-tag">&lt;<span class="hljs-name">novo-nav</span> [<span class="hljs-attr">outlet</span>]=<span class="hljs-string">&quot;ref&quot;</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">novo-tab</span>&gt;</span>Overview<span class="hljs-tag">&lt;/<span class="hljs-name">novo-tab</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">novo-tab</span>&gt;</span>Activity<span class="hljs-tag">&lt;/<span class="hljs-name">novo-tab</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">novo-nav</span>&gt;</span>

<span class="hljs-tag">&lt;<span class="hljs-name">novo-nav-outlet</span> #<span class="hljs-attr">ref</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">novo-nav-content</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Overview<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">novo-nav-content</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">novo-nav-content</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Activity<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">novo-nav-content</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">novo-nav-outlet</span>&gt;</span>
</code></pre>
<h1>Roadmap</h1>
<ul class="contains-task-list">
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"> Improve Typing Support</li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> Deprecate <code>condensed</code> in favor of <code>size</code></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> Deprecate <code>novo-tab-link</code> and make router navigation easier...</li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> Make color and theming consistent</li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> Dark Mode</li>
</ul>
<h1>Changelog</h1>
<h3>5.0.0</h3>
<p><em>Should be backwards compatible</em></p>
<h1>Components</h1>
<h2>NovoNavElement <code>novo-nav</code></h2>
<p>All tabs must be incapsulated in a <code>novo-nav</code> container. The nav will control the context and active tab.</p>
<h3>Properties</h3>
<table>
<thead>
<tr>
<th style="text-align:left">Name</th>
<th style="text-align:left">Type</th>
<th style="text-align:left">Default</th>
<th style="text-align:left">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">theme</td>
<td style="text-align:left"><em>String</em></td>
<td style="text-align:left">--</td>
<td style="text-align:left">Color theme used to display tab color.</td>
</tr>
<tr>
<td style="text-align:left">direction</td>
<td style="text-align:left"><em>String</em></td>
<td style="text-align:left">horizontal</td>
<td style="text-align:left">The layout direction of the tabs. (<code>horizontal</code> or <code>vertical</code>)</td>
</tr>
<tr>
<td style="text-align:left">outlet</td>
<td style="text-align:left"><em>Ref</em></td>
<td style="text-align:left">--</td>
<td style="text-align:left">refs to the <code>novo-tab-outlet</code> these navigation controls.</td>
</tr>
<tr>
<td style="text-align:left">router</td>
<td style="text-align:left"><em>NgRouter</em></td>
<td style="text-align:left">--</td>
<td style="text-align:left">an instance of an angular router. Used when tabs are used for page nav.</td>
</tr>
<tr>
<td style="text-align:left">condensed</td>
<td style="text-align:left"><em>Boolean</em></td>
<td style="text-align:left">false</td>
<td style="text-align:left"><strong>Deprecated</strong> used to show a more compact view.</td>
</tr>
</tbody>
</table>
<h2>NovoTabElement <code>novo-tab</code></h2>
<p>The core element for displaying tabs.</p>
<h3>Properties</h3>
<table>
<thead>
<tr>
<th style="text-align:left">Name</th>
<th style="text-align:left">Type</th>
<th style="text-align:left">Default</th>
<th style="text-align:left">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">active</td>
<td style="text-align:left"><em>Boolean</em></td>
<td style="text-align:left">false</td>
<td style="text-align:left">Whether this tab is current active tab. Can be set manually but value is controlled by <code>novo-nav</code>.</td>
</tr>
<tr>
<td style="text-align:left">color</td>
<td style="text-align:left"><em>String</em></td>
<td style="text-align:left">--</td>
<td style="text-align:left">highlight color to use when this tab is active.</td>
</tr>
<tr>
<td style="text-align:left">disabled</td>
<td style="text-align:left"><em>Object</em></td>
<td style="text-align:left">false</td>
<td style="text-align:left">Whether the tab will accept user interactions.</td>
</tr>
</tbody>
</table>
<h2>NovoTabLinkElement <code>novo-tab-link</code></h2>
<p>Used instead of <code>novo-tab</code> when using router navigation.</p>
<h3>Properties</h3>
<table>
<thead>
<tr>
<th style="text-align:left">Name</th>
<th style="text-align:left">Type</th>
<th style="text-align:left">Default</th>
<th style="text-align:left">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">active</td>
<td style="text-align:left"><em>Boolean</em></td>
<td style="text-align:left">false</td>
<td style="text-align:left">Whether this tab is current active tab. Can be set manually but value is controlled by <code>novo-nav</code></td>
</tr>
<tr>
<td style="text-align:left">disabled</td>
<td style="text-align:left"><em>Object</em></td>
<td style="text-align:left">false</td>
<td style="text-align:left">Whether the tab will accept user interactions.</td>
</tr>
</tbody>
</table>
<h2>NovoNavOutletElement <code>novo-nav-outlet</code></h2>
<p>The Container for all the <code>novo-nav-content</code>. A <code>#</code> reference should be added an passed to the <code>novo-nav</code> component to link the content to the tab view. The order of the content should be the same as the tabs that control them.</p>
<h2>NovoNavContentElement <code>novo-nav-content</code></h2>
<p>Used to incapsulate the navigation content. This wrapper will ensure on the active content is displayed.</p>
`,
                    host: { class: 'markdown-page' },
                    standalone: false,
                }]
        }] });
class TabsDesignPage {
    constructor() {
        this.params = {};
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: TabsDesignPage, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: TabsDesignPage, isStandalone: false, selector: "tabs-design-page", host: { classAttribute: "markdown-page" }, ngImport: i0, template: `<h2>Usage</h2>
<novo-grid columns="2" align="start" gap="2rem">
<div>
<p>Tabs make it easy to explore and switch between different views or functional aspects of an app or to browse categorized data sets. Tabs are used to section information over multiple pages within the same context. Only a single tab can be open at a time, allowing the user to focus on the information that the tab contains.</p>
</div>
<img src="assets/images/ButtonOverview.png"/>
<div>
<h3>Use When</h3>
<ul class="contains-do-list">
<li class="bullhorn-do-item">
<p><novo-icon color="grass" mr="md" size="md">check</novo-icon><novo-text color="grass"> When a page contains a lot of information that can be clearly grouped and named.</novo-text></p>
<p>E.g. A Candidate record page can be split up into Work History, Credentials, Education, etc.</p>
</li>
<li class="bullhorn-do-item">
<p><novo-icon color="grass" mr="md" size="md">check</novo-icon><novo-text color="grass"> For top level page navigation</novo-text></p>
<p>For example: Vertical tabs can be used in a side navigation to switch between pages or bottom tabs can be used in mobile.</p>
</li>
</ul>
</div>
<div>
<h3>Don′t Use When</h3>
<ul class="contains-do-list">
<li class="bullhorn-do-item">
<p><novo-icon color="grapefruit" mr="md" size="md">times</novo-icon><novo-text color="grapefruit"> Do not use to separate related content into multiple parts or break up (inter)actions that are important to continue with the user’s workflow.</novo-text></p>
<p>A user should be able to start and finish an action within a single tab. Instead consider using a Stepper component. Within a form, to organize and grouping fields together use a section divider.</p>
</li>
<li class="bullhorn-do-item">
<p><novo-icon color="grapefruit" mr="md" size="md">times</novo-icon><novo-text color="grapefruit"> Do not use when the users needs to see the information on each tab at the same time.</novo-text></p>
<p>If users need to see correlated content that is not on the tab they are viewing, consider using a Slideout. Or when data needs to be grouped further, use Cards.</p>
</li>
<li class="bullhorn-do-item">
<p><novo-icon color="grapefruit" mr="md" size="md">times</novo-icon><novo-text color="grapefruit"> Do not use to control the view of a single component, instead use radio buttons or tiles (button bar / segmented button).</novo-text></p>
<p>Don’t use tab to switch table data between states (past, present) (original, adjusted).</p>
</li>
</ul>
</div>
</novo-grid>
<h2>Anatomy</h2>
<novo-grid columns="2" align="start" gap="2rem">
<img src="assets/images/ModalAnatomy.png" width="450">
<div>
<ol>
<li>
<p><strong>Container</strong><br>
Tabs consist of a title that is descriptive of the information it holds. The currently selected tab is indicated by a colored bar that sits either below or left of the title (depending on the configuration). When the amount of tabs doesn't fit in the given space, a dropdown labeled More is added to the far right side of the tab bar. This dropdown contains all the overflowing tabs.</p>
</li>
<li>
<p><strong>Active Indicator</strong><br>
This is the visual symbol that represents which tab is currently active or being viewed.</p>
</li>
<li>
<p><strong>Leading Icon (Optional)</strong><br>
Should be avoided unless absolutely necessary, primarily used for mobile or responsive design</p>
</li>
<li>
<p><strong>Trailing Icon (Optional)</strong><br>
Should be avoided unless absolutely necessary, primarily used to display status to user</p>
</li>
</ol>
</div>
</novo-grid>
<h2>Best Practices</h2>
<ul>
<li>
<p>Tab labels should provide clear and concise descriptions of the content within
Avoid having more than 2 words unless the name of a product or entity prevents this.</p>
</li>
<li>
<p>Tab contents should be categorically independent from the content of other tabs, so the user is not confused by where information might be.</p>
</li>
</ul>
<h2>Color</h2>
<blockquote class="two-columns">
<blockquote>
<div class="p"><img src="https://via.placeholder.com/350x250" alt="placeholder"></div>
<div class="p"><strong>Theme - background</strong></div>
<div class="p">Any theme color can be applied to tabs which will make the background color match the color.
Any theme color can be applied to tabs with the <code>color</code> attribute to change the text color</div>
</blockquote>
<blockquote>
<div class="p"><img src="https://via.placeholder.com/350x250" alt="placeholder"></div>
<div class="p"><strong>Regular tabs</strong></div>
<div class="p">The currently selected tab is indicated by the blue title and the blue bar that sits below or left of the title. The other tabs are using a grey font.</div>
</blockquote>
<blockquote>
<div class="p"><img src="https://via.placeholder.com/350x250" alt="placeholder"></div>
<div class="p"><strong>White tabs</strong></div>
<div class="p">When tabs are used on a colored background, e.g. on a slide out, the currently selected tab is indicated by the white title and the white bar that sits below or left of the title. The other tabs are using a white font with a 70% opacity, leaving the background color to shine through.</div>
</blockquote>
</blockquote>
<h2>How to configure</h2>
<novo-grid columns="2" align="start" gap="2rem">
<blockquote>
<div class="p"><img src="https://via.placeholder.com/350x250" alt="placeholder"></div>
<ul class="contains-do-list">
<li class="bullhorn-do-item"><novo-icon color="grass" mr="md" size="md">check</novo-icon><novo-text color="grass"> Horizontal Tabs</novo-text></li>
</ul>
<div class="p">This is the default behavior</div>
</blockquote>
<blockquote>
<div class="p"><img src="https://via.placeholder.com/350x250" alt="placeholder"></div>
<ul class="contains-do-list">
<li class="bullhorn-do-item"><novo-icon color="grapefruit" mr="md" size="md">times</novo-icon><novo-text color="grapefruit"> Vertical Tabs</novo-text></li>
</ul>
<div class="p">TBW...</div>
</blockquote>
</novo-grid>
<h2>Patterns</h2>
<novo-grid columns="2" align="start" gap="2rem">
<blockquote>
<div class="p"><strong>Tab with Status</strong></div>
<div class="p">When displaying a status for tab to the user add a trailing icon to that tab. eg. if the tab has an error state use a trailing icon[color=negative] for that tab.</div>
</blockquote>
<p><img src="https://via.placeholder.com/350x250" alt="placeholder"></p>
<blockquote>
<div class="p"><strong>White tabs</strong></div>
<div class="p">When tabs are used on a colored background, e.g. on a slide out, the currently selected tab is indicated by the white title and the white bar that sits below or left of the title. The other tabs are using a white font with a 70% opacity, leaving the background color to shine through.</div>
</blockquote>
<p><img src="https://via.placeholder.com/350x250" alt="placeholder"></p>
</novo-grid>
<h2>Accessibility</h2>
<ul>
<li>When implementing logic to update which tab item is active be sure to account for triggering the state on click, touch, and keyboard interactions.</li>
<li><code>&lt;novo-tabs&gt;</code> should include the aria <code>tablist</code> role and novo-tab should include the aria tab role.</li>
<li>If used for page navigation then novo-tabs should include the aria <code>nav</code> role</li>
</ul>
`, isInline: true, dependencies: [{ kind: "component", type: i2$1.NovoGridElement, selector: "novo-grid", inputs: ["direction", "align", "justify", "columns"] }, { kind: "component", type: i2$1.NovoIconComponent, selector: "novo-icon", inputs: ["raised", "theme", "shape", "color", "size", "smaller", "larger", "alt", "name"] }, { kind: "component", type: i2$1.NovoText, selector: "novo-text,[novo-text]", inputs: ["block"] }, { kind: "directive", type: i2$1.MarginDirective, selector: "[m],[margin],[marginTop],[marginRight],[marginBottom],[marginLeft],[marginX],[marginY],[mt],[mr],[mb],[ml],[mx],[my]", inputs: ["margin", "m", "marginLeft", "ml", "marginRight", "mr", "marginTop", "mt", "marginBottom", "mb", "marginX", "mx", "marginY", "my"] }, { kind: "directive", type: i2$1.GapDirective, selector: "[gap]", inputs: ["gap"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: TabsDesignPage, decorators: [{
            type: Component,
            args: [{
                    selector: 'tabs-design-page',
                    template: `<h2>Usage</h2>
<novo-grid columns="2" align="start" gap="2rem">
<div>
<p>Tabs make it easy to explore and switch between different views or functional aspects of an app or to browse categorized data sets. Tabs are used to section information over multiple pages within the same context. Only a single tab can be open at a time, allowing the user to focus on the information that the tab contains.</p>
</div>
<img src="assets/images/ButtonOverview.png"/>
<div>
<h3>Use When</h3>
<ul class="contains-do-list">
<li class="bullhorn-do-item">
<p><novo-icon color="grass" mr="md" size="md">check</novo-icon><novo-text color="grass"> When a page contains a lot of information that can be clearly grouped and named.</novo-text></p>
<p>E.g. A Candidate record page can be split up into Work History, Credentials, Education, etc.</p>
</li>
<li class="bullhorn-do-item">
<p><novo-icon color="grass" mr="md" size="md">check</novo-icon><novo-text color="grass"> For top level page navigation</novo-text></p>
<p>For example: Vertical tabs can be used in a side navigation to switch between pages or bottom tabs can be used in mobile.</p>
</li>
</ul>
</div>
<div>
<h3>Don′t Use When</h3>
<ul class="contains-do-list">
<li class="bullhorn-do-item">
<p><novo-icon color="grapefruit" mr="md" size="md">times</novo-icon><novo-text color="grapefruit"> Do not use to separate related content into multiple parts or break up (inter)actions that are important to continue with the user’s workflow.</novo-text></p>
<p>A user should be able to start and finish an action within a single tab. Instead consider using a Stepper component. Within a form, to organize and grouping fields together use a section divider.</p>
</li>
<li class="bullhorn-do-item">
<p><novo-icon color="grapefruit" mr="md" size="md">times</novo-icon><novo-text color="grapefruit"> Do not use when the users needs to see the information on each tab at the same time.</novo-text></p>
<p>If users need to see correlated content that is not on the tab they are viewing, consider using a Slideout. Or when data needs to be grouped further, use Cards.</p>
</li>
<li class="bullhorn-do-item">
<p><novo-icon color="grapefruit" mr="md" size="md">times</novo-icon><novo-text color="grapefruit"> Do not use to control the view of a single component, instead use radio buttons or tiles (button bar / segmented button).</novo-text></p>
<p>Don’t use tab to switch table data between states (past, present) (original, adjusted).</p>
</li>
</ul>
</div>
</novo-grid>
<h2>Anatomy</h2>
<novo-grid columns="2" align="start" gap="2rem">
<img src="assets/images/ModalAnatomy.png" width="450">
<div>
<ol>
<li>
<p><strong>Container</strong><br>
Tabs consist of a title that is descriptive of the information it holds. The currently selected tab is indicated by a colored bar that sits either below or left of the title (depending on the configuration). When the amount of tabs doesn't fit in the given space, a dropdown labeled More is added to the far right side of the tab bar. This dropdown contains all the overflowing tabs.</p>
</li>
<li>
<p><strong>Active Indicator</strong><br>
This is the visual symbol that represents which tab is currently active or being viewed.</p>
</li>
<li>
<p><strong>Leading Icon (Optional)</strong><br>
Should be avoided unless absolutely necessary, primarily used for mobile or responsive design</p>
</li>
<li>
<p><strong>Trailing Icon (Optional)</strong><br>
Should be avoided unless absolutely necessary, primarily used to display status to user</p>
</li>
</ol>
</div>
</novo-grid>
<h2>Best Practices</h2>
<ul>
<li>
<p>Tab labels should provide clear and concise descriptions of the content within
Avoid having more than 2 words unless the name of a product or entity prevents this.</p>
</li>
<li>
<p>Tab contents should be categorically independent from the content of other tabs, so the user is not confused by where information might be.</p>
</li>
</ul>
<h2>Color</h2>
<blockquote class="two-columns">
<blockquote>
<div class="p"><img src="https://via.placeholder.com/350x250" alt="placeholder"></div>
<div class="p"><strong>Theme - background</strong></div>
<div class="p">Any theme color can be applied to tabs which will make the background color match the color.
Any theme color can be applied to tabs with the <code>color</code> attribute to change the text color</div>
</blockquote>
<blockquote>
<div class="p"><img src="https://via.placeholder.com/350x250" alt="placeholder"></div>
<div class="p"><strong>Regular tabs</strong></div>
<div class="p">The currently selected tab is indicated by the blue title and the blue bar that sits below or left of the title. The other tabs are using a grey font.</div>
</blockquote>
<blockquote>
<div class="p"><img src="https://via.placeholder.com/350x250" alt="placeholder"></div>
<div class="p"><strong>White tabs</strong></div>
<div class="p">When tabs are used on a colored background, e.g. on a slide out, the currently selected tab is indicated by the white title and the white bar that sits below or left of the title. The other tabs are using a white font with a 70% opacity, leaving the background color to shine through.</div>
</blockquote>
</blockquote>
<h2>How to configure</h2>
<novo-grid columns="2" align="start" gap="2rem">
<blockquote>
<div class="p"><img src="https://via.placeholder.com/350x250" alt="placeholder"></div>
<ul class="contains-do-list">
<li class="bullhorn-do-item"><novo-icon color="grass" mr="md" size="md">check</novo-icon><novo-text color="grass"> Horizontal Tabs</novo-text></li>
</ul>
<div class="p">This is the default behavior</div>
</blockquote>
<blockquote>
<div class="p"><img src="https://via.placeholder.com/350x250" alt="placeholder"></div>
<ul class="contains-do-list">
<li class="bullhorn-do-item"><novo-icon color="grapefruit" mr="md" size="md">times</novo-icon><novo-text color="grapefruit"> Vertical Tabs</novo-text></li>
</ul>
<div class="p">TBW...</div>
</blockquote>
</novo-grid>
<h2>Patterns</h2>
<novo-grid columns="2" align="start" gap="2rem">
<blockquote>
<div class="p"><strong>Tab with Status</strong></div>
<div class="p">When displaying a status for tab to the user add a trailing icon to that tab. eg. if the tab has an error state use a trailing icon[color=negative] for that tab.</div>
</blockquote>
<p><img src="https://via.placeholder.com/350x250" alt="placeholder"></p>
<blockquote>
<div class="p"><strong>White tabs</strong></div>
<div class="p">When tabs are used on a colored background, e.g. on a slide out, the currently selected tab is indicated by the white title and the white bar that sits below or left of the title. The other tabs are using a white font with a 70% opacity, leaving the background color to shine through.</div>
</blockquote>
<p><img src="https://via.placeholder.com/350x250" alt="placeholder"></p>
</novo-grid>
<h2>Accessibility</h2>
<ul>
<li>When implementing logic to update which tab item is active be sure to account for triggering the state on click, touch, and keyboard interactions.</li>
<li><code>&lt;novo-tabs&gt;</code> should include the aria <code>tablist</code> role and novo-tab should include the aria tab role.</li>
<li>If used for page navigation then novo-tabs should include the aria <code>nav</code> role</li>
</ul>
`,
                    host: { class: 'markdown-page' },
                    standalone: false,
                }]
        }] });
class StepperPage {
    constructor() {
        this.params = {};
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: StepperPage, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: StepperPage, isStandalone: false, selector: "stepper-page", host: { classAttribute: "markdown-page" }, ngImport: i0, template: `<h1>Steppers <a href="https://github.com/bullhorn/novo-elements/blob/master/projects/novo-elements/src/elements/stepper">(source)</a></h1>
<p>Stepper component provides a wizard-like workflow by dividing content into logical steps.</p>
<p>Material stepper builds on the foundation of the CDK stepper that is responsible for the logic that drives a stepped workflow. Material stepper extends the CDK stepper and has Material Design styling.</p>
<h2>Stepper variants</h2>
<p>There are two stepper components: novo-horizontal-stepper and novo-vertical-stepper. They can be used the same way. The only difference is the orientation of stepper.</p>
<h5>Horizontal Stepper</h5>
<p>This is the default stepper great for many reasons.</p>
<p><code-example example="stepper-horizontal"></code-example></p>
<h5>Linear stepper</h5>
<p>The linear attribute can be set on novo-horizontal-stepper and novo-vertical-stepper to create a linear stepper that requires the user to complete previous steps before proceeding to following steps. For each novo-step, the stepControl attribute can be set to the top level AbstractControl that is used to check the validity of the step.</p>
<p>There are two possible approaches. One is using a single form for stepper, and the other is using a different form for each step.</p>
<p>Alternatively, if you don't want to use the Angular forms, you can pass in the completed property to each of the steps which won't allow the user to continue until it becomes true. Note that if both completed and stepControl are set, the stepControl will take precedence.</p>
<h5>Vertical Stepper</h5>
<p>This is an alternative stepper great for many other reasons.</p>
<p><code-example example="stepper-vertical"></code-example></p>
`, isInline: true, dependencies: [{ kind: "component", type: CodeExampleComponent, selector: "code-example", inputs: ["example"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: StepperPage, decorators: [{
            type: Component,
            args: [{
                    selector: 'stepper-page',
                    template: `<h1>Steppers <a href="https://github.com/bullhorn/novo-elements/blob/master/projects/novo-elements/src/elements/stepper">(source)</a></h1>
<p>Stepper component provides a wizard-like workflow by dividing content into logical steps.</p>
<p>Material stepper builds on the foundation of the CDK stepper that is responsible for the logic that drives a stepped workflow. Material stepper extends the CDK stepper and has Material Design styling.</p>
<h2>Stepper variants</h2>
<p>There are two stepper components: novo-horizontal-stepper and novo-vertical-stepper. They can be used the same way. The only difference is the orientation of stepper.</p>
<h5>Horizontal Stepper</h5>
<p>This is the default stepper great for many reasons.</p>
<p><code-example example="stepper-horizontal"></code-example></p>
<h5>Linear stepper</h5>
<p>The linear attribute can be set on novo-horizontal-stepper and novo-vertical-stepper to create a linear stepper that requires the user to complete previous steps before proceeding to following steps. For each novo-step, the stepControl attribute can be set to the top level AbstractControl that is used to check the validity of the step.</p>
<p>There are two possible approaches. One is using a single form for stepper, and the other is using a different form for each step.</p>
<p>Alternatively, if you don't want to use the Angular forms, you can pass in the completed property to each of the steps which won't allow the user to continue until it becomes true. Note that if both completed and stepControl are set, the stepControl will take precedence.</p>
<h5>Vertical Stepper</h5>
<p>This is an alternative stepper great for many other reasons.</p>
<p><code-example example="stepper-vertical"></code-example></p>
`,
                    host: { class: 'markdown-page' },
                    standalone: false,
                }]
        }] });
class SidenavPage {
    constructor() {
        this.params = {};
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: SidenavPage, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: SidenavPage, isStandalone: false, selector: "sidenav-page", host: { classAttribute: "markdown-page" }, ngImport: i0, template: `<h1>SideNav <a href="https://github.com/bullhorn/novo-elements/blob/master/projects/novo-elements/src/elements/layout">(source)</a></h1>
<p>Components and elements for cards to make sure the loading/empty/layout views are all consistent.</p>
<h5>Examples</h5>
<h2>Basic SideNav (using attributes)</h2>
<p><code-example example="basic-sidenav"></code-example></p>
`, isInline: true, dependencies: [{ kind: "component", type: CodeExampleComponent, selector: "code-example", inputs: ["example"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: SidenavPage, decorators: [{
            type: Component,
            args: [{
                    selector: 'sidenav-page',
                    template: `<h1>SideNav <a href="https://github.com/bullhorn/novo-elements/blob/master/projects/novo-elements/src/elements/layout">(source)</a></h1>
<p>Components and elements for cards to make sure the loading/empty/layout views are all consistent.</p>
<h5>Examples</h5>
<h2>Basic SideNav (using attributes)</h2>
<p><code-example example="basic-sidenav"></code-example></p>
`,
                    host: { class: 'markdown-page' },
                    standalone: false,
                }]
        }] });
class ListPage {
    constructor() {
        this.params = {};
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: ListPage, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: ListPage, isStandalone: false, selector: "list-page", host: { classAttribute: "markdown-page" }, ngImport: i0, template: `<h1>List / Item <a href="https://github.com/bullhorn/novo-elements/blob/master/projects/novo-elements/src/elements/list">(source)</a></h1>
<p>Lists are used to display rows of information like entities or entity data and appear on cards, our mobile app, and several other places across the Bullhorn platform.</p>
<h2>Basic Usage</h2>
<h5>Standard List</h5>
<p>This is an example of a standard list.</p>
<p><code-example example="basic-list"></code-example></p>
<h5>Themed List</h5>
<p>This is an example of a themed list.</p>
<p><code-example example="themed-list"></code-example></p>
`, isInline: true, dependencies: [{ kind: "component", type: CodeExampleComponent, selector: "code-example", inputs: ["example"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: ListPage, decorators: [{
            type: Component,
            args: [{
                    selector: 'list-page',
                    template: `<h1>List / Item <a href="https://github.com/bullhorn/novo-elements/blob/master/projects/novo-elements/src/elements/list">(source)</a></h1>
<p>Lists are used to display rows of information like entities or entity data and appear on cards, our mobile app, and several other places across the Bullhorn platform.</p>
<h2>Basic Usage</h2>
<h5>Standard List</h5>
<p>This is an example of a standard list.</p>
<p><code-example example="basic-list"></code-example></p>
<h5>Themed List</h5>
<p>This is an example of a themed list.</p>
<p><code-example example="themed-list"></code-example></p>
`,
                    host: { class: 'markdown-page' },
                    standalone: false,
                }]
        }] });
class HeaderPage {
    constructor() {
        this.params = {};
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: HeaderPage, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: HeaderPage, isStandalone: false, selector: "header-page", host: { classAttribute: "markdown-page" }, ngImport: i0, template: `<h1>Headers <a href="https://github.com/bullhorn/novo-elements/blob/master/projects/novo-elements/src/elements/header">(source)</a></h1>
<p>Headers are used in Mainframe Record pages and some modals.</p>
<h2>Types</h2>
<h5>Record Header</h5>
<p>Record headers have details about the entity record and tabbed navigation.</p>
<p><code-example example="basic-header"></code-example></p>
<h5>Condensed</h5>
<p><code-example example="condensed-header"></code-example></p>
<h2>Options</h2>
<h5>SubTitle</h5>
<p><code-example example="header-subtitle"></code-example></p>
<h5>With Search</h5>
<p><code-example example="header-searchbar"></code-example></p>
`, isInline: true, dependencies: [{ kind: "component", type: CodeExampleComponent, selector: "code-example", inputs: ["example"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: HeaderPage, decorators: [{
            type: Component,
            args: [{
                    selector: 'header-page',
                    template: `<h1>Headers <a href="https://github.com/bullhorn/novo-elements/blob/master/projects/novo-elements/src/elements/header">(source)</a></h1>
<p>Headers are used in Mainframe Record pages and some modals.</p>
<h2>Types</h2>
<h5>Record Header</h5>
<p>Record headers have details about the entity record and tabbed navigation.</p>
<p><code-example example="basic-header"></code-example></p>
<h5>Condensed</h5>
<p><code-example example="condensed-header"></code-example></p>
<h2>Options</h2>
<h5>SubTitle</h5>
<p><code-example example="header-subtitle"></code-example></p>
<h5>With Search</h5>
<p><code-example example="header-searchbar"></code-example></p>
`,
                    host: { class: 'markdown-page' },
                    standalone: false,
                }]
        }] });
class ExpansionPage {
    constructor() {
        this.params = {};
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: ExpansionPage, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: ExpansionPage, isStandalone: false, selector: "expansion-page", host: { classAttribute: "markdown-page" }, ngImport: i0, template: `<h1>Expandable Containers<a href="https://github.com/bullhorn/novo-elements/blob/master/projects/novo-elements/src/elements/expansion">(source)</a></h1>
<p>Expansion Panel provides an expandable details-summary view. Each expansion-panel must include a header and may optionally include an action bar.</p>
<p>By default, the expansion-panel header includes a toggle icon at the end of the header to indicate the expansion state. This icon can be hidden via the hideToggle property.</p>
<h2>Basic Usage</h2>
<h5>Standard Expansion Panel</h5>
<p>This is an example of a standard list.</p>
<p><code-example example="basic-expansion"></code-example></p>
<h5>Accordion Expansion Panel</h5>
<p>This is an example of a Accordion.</p>
<p><code-example example="accordion"></code-example></p>
<h5>Lazy Expansion Panel</h5>
<p>This is an example of a Lazy loaded list.</p>
<p><code-example example="lazy-expansion"></code-example></p>
<h5>Patterns</h5>
<p>Check out the <a routerLink="/patterns">Activity Section</a> pattern</p>
`, isInline: true, dependencies: [{ kind: "directive", type: i1$3.RouterLink, selector: "[routerLink]", inputs: ["target", "queryParams", "fragment", "queryParamsHandling", "state", "info", "relativeTo", "preserveFragment", "skipLocationChange", "replaceUrl", "routerLink"] }, { kind: "component", type: CodeExampleComponent, selector: "code-example", inputs: ["example"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: ExpansionPage, decorators: [{
            type: Component,
            args: [{
                    selector: 'expansion-page',
                    template: `<h1>Expandable Containers<a href="https://github.com/bullhorn/novo-elements/blob/master/projects/novo-elements/src/elements/expansion">(source)</a></h1>
<p>Expansion Panel provides an expandable details-summary view. Each expansion-panel must include a header and may optionally include an action bar.</p>
<p>By default, the expansion-panel header includes a toggle icon at the end of the header to indicate the expansion state. This icon can be hidden via the hideToggle property.</p>
<h2>Basic Usage</h2>
<h5>Standard Expansion Panel</h5>
<p>This is an example of a standard list.</p>
<p><code-example example="basic-expansion"></code-example></p>
<h5>Accordion Expansion Panel</h5>
<p>This is an example of a Accordion.</p>
<p><code-example example="accordion"></code-example></p>
<h5>Lazy Expansion Panel</h5>
<p>This is an example of a Lazy loaded list.</p>
<p><code-example example="lazy-expansion"></code-example></p>
<h5>Patterns</h5>
<p>Check out the <a routerLink="/patterns">Activity Section</a> pattern</p>
`,
                    host: { class: 'markdown-page' },
                    standalone: false,
                }]
        }] });
class CardExamplesPage {
    constructor() {
        this.params = {};
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: CardExamplesPage, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: CardExamplesPage, isStandalone: false, selector: "card-examples-page", host: { classAttribute: "markdown-page" }, ngImport: i0, template: `<h2>Basic Card (using attributes)</h2>
<p><code-example example="basic-card"></code-example></p>
<h2>Card (using config object and card-actions)</h2>
<p><code-example example="card-config"></code-example></p>
<h2>Card with Image</h2>
<p><code-example example="card-with-image"></code-example></p>
`, isInline: true, dependencies: [{ kind: "component", type: CodeExampleComponent, selector: "code-example", inputs: ["example"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: CardExamplesPage, decorators: [{
            type: Component,
            args: [{
                    selector: 'card-examples-page',
                    template: `<h2>Basic Card (using attributes)</h2>
<p><code-example example="basic-card"></code-example></p>
<h2>Card (using config object and card-actions)</h2>
<p><code-example example="card-config"></code-example></p>
<h2>Card with Image</h2>
<p><code-example example="card-with-image"></code-example></p>
`,
                    host: { class: 'markdown-page' },
                    standalone: false,
                }]
        }] });
class CardDevelopPage {
    constructor() {
        this.params = {};
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: CardDevelopPage, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: CardDevelopPage, isStandalone: false, selector: "card-develop-page", host: { classAttribute: "markdown-page" }, ngImport: i0, template: `<h1>Technical Details</h1>
<ul>
<li><strong>source:</strong> <a href="https://github.com/bullhorn/novo-elements/blob/master/projects/novo-elements/src/elements/card">(github)</a></li>
<li><strong>module:</strong> <code>import &#123; NovoCardModule &#125; form 'novo-elements';</code></li>
</ul>
<p><strong>Basic Usage</strong></p>
<pre><code class="language-html"><span class="hljs-tag">&lt;<span class="hljs-name">novo-card</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">novo-card-header</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">novo-title</span>&gt;</span>Ferdinand the Bull<span class="hljs-tag">&lt;/<span class="hljs-name">novo-title</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">novo-action</span> <span class="hljs-attr">icon</span>=<span class="hljs-string">&quot;times&quot;</span> <span class="hljs-attr">tooltip</span>=<span class="hljs-string">&quot;Close Card&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">novo-action</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">novo-card-header</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">novo-card-content</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">novo-card-content</span> <span class="hljs-attr">condensed</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">novo-list</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;bgc-off-white-striped&quot;</span> <span class="hljs-attr">direction</span>=<span class="hljs-string">&quot;vertical&quot;</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">novo-value</span> <span class="hljs-attr">row</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;Author&quot;</span> <span class="hljs-attr">data</span>=<span class="hljs-string">&quot;Munro Leaf&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">novo-value</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">novo-value</span> <span class="hljs-attr">row</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;Cover artist&quot;</span> <span class="hljs-attr">data</span>=<span class="hljs-string">&quot;Robert Lawson&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">novo-value</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">novo-value</span> <span class="hljs-attr">row</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;Language&quot;</span> <span class="hljs-attr">data</span>=<span class="hljs-string">&quot;English&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">novo-value</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">novo-value</span> <span class="hljs-attr">row</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;Published&quot;</span> <span class="hljs-attr">data</span>=<span class="hljs-string">&quot;1936&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">novo-value</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">novo-value</span> <span class="hljs-attr">row</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;Genre&quot;</span> <span class="hljs-attr">data</span>=<span class="hljs-string">&quot;Childrens&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">novo-value</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">novo-list</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">novo-card-content</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">novo-card-footer</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">novo-button</span>&gt;</span> PIN <span class="hljs-tag">&lt;<span class="hljs-name">novo-icon</span>&gt;</span>pin<span class="hljs-tag">&lt;/<span class="hljs-name">novo-icon</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">novo-button</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">novo-button</span>&gt;</span> SHARE <span class="hljs-tag">&lt;<span class="hljs-name">novo-icon</span>&gt;</span>share<span class="hljs-tag">&lt;/<span class="hljs-name">novo-icon</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">novo-button</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">novo-card-footer</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">novo-card</span>&gt;</span>
</code></pre>
<h1>Roadmap</h1>
<ul class="contains-task-list">
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"> Improve Typing Support</li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> Make color and theming consistent</li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> Dark Mode</li>
</ul>
<h1>Changelog</h1>
<h3>5.0.0</h3>
<p><strong>Deprecation</strong></p>
<ul>
<li>Switch to declarative component design vs old imperative design. Using the input attributes to set header values should be replaced by adding <code>novo-card-header</code> component following appropriate patterns per design system. This approach might seem like more code but it enables a more flexible component when creating new patterns.</li>
</ul>
<novo-text color="grapefruit"><novo-icon mr="1rem">times</novo-icon><strong>Stop using imperative propeties</strong></novo-text>
<novo-text><p>Explain this</p>
</novo-text>
<pre><code class="language-html"><span class="hljs-tag">&lt;<span class="hljs-name">novo-card</span>
  [<span class="hljs-attr">title</span>]=<span class="hljs-string">&quot;&#x27;All Attributes&#x27;&quot;</span>
  <span class="hljs-attr">icon</span>=<span class="hljs-string">&quot;activity&quot;</span>
  [<span class="hljs-attr">loading</span>]=<span class="hljs-string">&quot;loading&quot;</span>
  [<span class="hljs-attr">message</span>]=<span class="hljs-string">&quot;message&quot;</span>
  [<span class="hljs-attr">messageIcon</span>]=<span class="hljs-string">&quot;messageIcon&quot;</span>
  [<span class="hljs-attr">refresh</span>]=<span class="hljs-string">&quot;refresh&quot;</span>
  [<span class="hljs-attr">move</span>]=<span class="hljs-string">&quot;move&quot;</span>
  [<span class="hljs-attr">close</span>]=<span class="hljs-string">&quot;close&quot;</span>
  (<span class="hljs-attr">onRefresh</span>)=<span class="hljs-string">&quot;onRefresh()&quot;</span>
  (<span class="hljs-attr">onClose</span>)=<span class="hljs-string">&quot;onClose()&quot;</span>
  [<span class="hljs-attr">padding</span>]=<span class="hljs-string">&quot;padding&quot;</span>
&gt;</span>
  Stop using this pattern
<span class="hljs-tag">&lt;/<span class="hljs-name">novo-card</span>&gt;</span>
</code></pre>
<novo-text color="grass"><novo-icon mr="1rem">check</novo-icon><strong>Add structured content to create your layout</strong></novo-text>
<novo-text><p>Explain this</p>
</novo-text>
<pre><code class="language-html"><span class="hljs-tag">&lt;<span class="hljs-name">novo-card</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">novo-card-header</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">novo-title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">novo-title</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">novo-action</span> <span class="hljs-attr">icon</span>=<span class="hljs-string">&quot;times&quot;</span> <span class="hljs-attr">tooltip</span>=<span class="hljs-string">&quot;Close Card&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">novo-action</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">novo-card-header</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">novo-card-content</span>&gt;</span> Any Content Can Go Here <span class="hljs-tag">&lt;/<span class="hljs-name">novo-card-content</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">novo-card-footer</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">novo-button</span>&gt;</span> Action <span class="hljs-tag">&lt;<span class="hljs-name">novo-icon</span>&gt;</span>arrow-right<span class="hljs-tag">&lt;/<span class="hljs-name">novo-icon</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">novo-button</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">novo-card-footer</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">novo-card</span>&gt;</span>
</code></pre>
<h1>Components</h1>
<h2>NovoCardElement <code>novo-card</code></h2>
<p>Container Element for the card. Can optionally contain <code>novo-card-header</code>, <code>novo-card-footer</code>, and <code>novo-card-content</code> to provide a better layout to the card when displaying more structured data.</p>
<h3>Properties</h3>
<p>| Name | Type | Default | Description |
| :---------- | :-------- | :------ | :------------------------------------------------------------------------------- | |
| padding | <em>Boolean</em> | true | <strong>deprecated</strong> whether the card has padding by default. |
| config | <em>Object</em> | &#123;&#125; | <strong>deprecated</strong> |
| title | <em>String</em> | -- ' | <strong>deprecated</strong> Text to display in header |
| message | <em>String</em> | -- | <strong>deprecated</strong> Displays a warning message when the card has an error or warning. |
| messageIcon | <em>String</em> | -- | <strong>deprecated</strong> Icon to display in the banner with <code>message</code>. |
| icon | <em>String</em> | -- | <strong>deprecated</strong> Icon to display in header with the title. |
| iconTooltip | <em>String</em> | -- | <strong>deprecated</strong> Tooltip for the icon in the header. |
| refresh | <em>Boolean</em> | -- | <strong>deprecated</strong> Show refresh button in header. |
| close | <em>Boolean</em> | -- | <strong>deprecated</strong> Show close button in header. |
| inline | <em>Boolean</em> | -- | <strong>wip</strong> Whether the card is render as display: <code>block</code> or <code>inline-block</code>. |
| inset | <em>String</em> | -- | <strong>wip</strong> Inset padding to add to the card |</p>
<h2>NovoCardHeader <code>novo-card-header</code></h2>
<p>Container row for the card header</p>
<h2>NovoCardContent <code>novo-card-content</code></h2>
<p>Container row for the card content</p>
<h2>NovoCardFooter <code>novo-card-footer</code></h2>
<p>Container row for the card footer</p>
`, isInline: true, dependencies: [{ kind: "component", type: i2$1.NovoIconComponent, selector: "novo-icon", inputs: ["raised", "theme", "shape", "color", "size", "smaller", "larger", "alt", "name"] }, { kind: "component", type: i2$1.NovoText, selector: "novo-text,[novo-text]", inputs: ["block"] }, { kind: "directive", type: i2$1.MarginDirective, selector: "[m],[margin],[marginTop],[marginRight],[marginBottom],[marginLeft],[marginX],[marginY],[mt],[mr],[mb],[ml],[mx],[my]", inputs: ["margin", "m", "marginLeft", "ml", "marginRight", "mr", "marginTop", "mt", "marginBottom", "mb", "marginX", "mx", "marginY", "my"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: CardDevelopPage, decorators: [{
            type: Component,
            args: [{
                    selector: 'card-develop-page',
                    template: `<h1>Technical Details</h1>
<ul>
<li><strong>source:</strong> <a href="https://github.com/bullhorn/novo-elements/blob/master/projects/novo-elements/src/elements/card">(github)</a></li>
<li><strong>module:</strong> <code>import &#123; NovoCardModule &#125; form 'novo-elements';</code></li>
</ul>
<p><strong>Basic Usage</strong></p>
<pre><code class="language-html"><span class="hljs-tag">&lt;<span class="hljs-name">novo-card</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">novo-card-header</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">novo-title</span>&gt;</span>Ferdinand the Bull<span class="hljs-tag">&lt;/<span class="hljs-name">novo-title</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">novo-action</span> <span class="hljs-attr">icon</span>=<span class="hljs-string">&quot;times&quot;</span> <span class="hljs-attr">tooltip</span>=<span class="hljs-string">&quot;Close Card&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">novo-action</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">novo-card-header</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">novo-card-content</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">novo-card-content</span> <span class="hljs-attr">condensed</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">novo-list</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;bgc-off-white-striped&quot;</span> <span class="hljs-attr">direction</span>=<span class="hljs-string">&quot;vertical&quot;</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">novo-value</span> <span class="hljs-attr">row</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;Author&quot;</span> <span class="hljs-attr">data</span>=<span class="hljs-string">&quot;Munro Leaf&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">novo-value</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">novo-value</span> <span class="hljs-attr">row</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;Cover artist&quot;</span> <span class="hljs-attr">data</span>=<span class="hljs-string">&quot;Robert Lawson&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">novo-value</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">novo-value</span> <span class="hljs-attr">row</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;Language&quot;</span> <span class="hljs-attr">data</span>=<span class="hljs-string">&quot;English&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">novo-value</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">novo-value</span> <span class="hljs-attr">row</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;Published&quot;</span> <span class="hljs-attr">data</span>=<span class="hljs-string">&quot;1936&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">novo-value</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">novo-value</span> <span class="hljs-attr">row</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;Genre&quot;</span> <span class="hljs-attr">data</span>=<span class="hljs-string">&quot;Childrens&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">novo-value</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">novo-list</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">novo-card-content</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">novo-card-footer</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">novo-button</span>&gt;</span> PIN <span class="hljs-tag">&lt;<span class="hljs-name">novo-icon</span>&gt;</span>pin<span class="hljs-tag">&lt;/<span class="hljs-name">novo-icon</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">novo-button</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">novo-button</span>&gt;</span> SHARE <span class="hljs-tag">&lt;<span class="hljs-name">novo-icon</span>&gt;</span>share<span class="hljs-tag">&lt;/<span class="hljs-name">novo-icon</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">novo-button</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">novo-card-footer</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">novo-card</span>&gt;</span>
</code></pre>
<h1>Roadmap</h1>
<ul class="contains-task-list">
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"> Improve Typing Support</li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> Make color and theming consistent</li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> Dark Mode</li>
</ul>
<h1>Changelog</h1>
<h3>5.0.0</h3>
<p><strong>Deprecation</strong></p>
<ul>
<li>Switch to declarative component design vs old imperative design. Using the input attributes to set header values should be replaced by adding <code>novo-card-header</code> component following appropriate patterns per design system. This approach might seem like more code but it enables a more flexible component when creating new patterns.</li>
</ul>
<novo-text color="grapefruit"><novo-icon mr="1rem">times</novo-icon><strong>Stop using imperative propeties</strong></novo-text>
<novo-text><p>Explain this</p>
</novo-text>
<pre><code class="language-html"><span class="hljs-tag">&lt;<span class="hljs-name">novo-card</span>
  [<span class="hljs-attr">title</span>]=<span class="hljs-string">&quot;&#x27;All Attributes&#x27;&quot;</span>
  <span class="hljs-attr">icon</span>=<span class="hljs-string">&quot;activity&quot;</span>
  [<span class="hljs-attr">loading</span>]=<span class="hljs-string">&quot;loading&quot;</span>
  [<span class="hljs-attr">message</span>]=<span class="hljs-string">&quot;message&quot;</span>
  [<span class="hljs-attr">messageIcon</span>]=<span class="hljs-string">&quot;messageIcon&quot;</span>
  [<span class="hljs-attr">refresh</span>]=<span class="hljs-string">&quot;refresh&quot;</span>
  [<span class="hljs-attr">move</span>]=<span class="hljs-string">&quot;move&quot;</span>
  [<span class="hljs-attr">close</span>]=<span class="hljs-string">&quot;close&quot;</span>
  (<span class="hljs-attr">onRefresh</span>)=<span class="hljs-string">&quot;onRefresh()&quot;</span>
  (<span class="hljs-attr">onClose</span>)=<span class="hljs-string">&quot;onClose()&quot;</span>
  [<span class="hljs-attr">padding</span>]=<span class="hljs-string">&quot;padding&quot;</span>
&gt;</span>
  Stop using this pattern
<span class="hljs-tag">&lt;/<span class="hljs-name">novo-card</span>&gt;</span>
</code></pre>
<novo-text color="grass"><novo-icon mr="1rem">check</novo-icon><strong>Add structured content to create your layout</strong></novo-text>
<novo-text><p>Explain this</p>
</novo-text>
<pre><code class="language-html"><span class="hljs-tag">&lt;<span class="hljs-name">novo-card</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">novo-card-header</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">novo-title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">novo-title</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">novo-action</span> <span class="hljs-attr">icon</span>=<span class="hljs-string">&quot;times&quot;</span> <span class="hljs-attr">tooltip</span>=<span class="hljs-string">&quot;Close Card&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">novo-action</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">novo-card-header</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">novo-card-content</span>&gt;</span> Any Content Can Go Here <span class="hljs-tag">&lt;/<span class="hljs-name">novo-card-content</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">novo-card-footer</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">novo-button</span>&gt;</span> Action <span class="hljs-tag">&lt;<span class="hljs-name">novo-icon</span>&gt;</span>arrow-right<span class="hljs-tag">&lt;/<span class="hljs-name">novo-icon</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">novo-button</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">novo-card-footer</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">novo-card</span>&gt;</span>
</code></pre>
<h1>Components</h1>
<h2>NovoCardElement <code>novo-card</code></h2>
<p>Container Element for the card. Can optionally contain <code>novo-card-header</code>, <code>novo-card-footer</code>, and <code>novo-card-content</code> to provide a better layout to the card when displaying more structured data.</p>
<h3>Properties</h3>
<p>| Name | Type | Default | Description |
| :---------- | :-------- | :------ | :------------------------------------------------------------------------------- | |
| padding | <em>Boolean</em> | true | <strong>deprecated</strong> whether the card has padding by default. |
| config | <em>Object</em> | &#123;&#125; | <strong>deprecated</strong> |
| title | <em>String</em> | -- ' | <strong>deprecated</strong> Text to display in header |
| message | <em>String</em> | -- | <strong>deprecated</strong> Displays a warning message when the card has an error or warning. |
| messageIcon | <em>String</em> | -- | <strong>deprecated</strong> Icon to display in the banner with <code>message</code>. |
| icon | <em>String</em> | -- | <strong>deprecated</strong> Icon to display in header with the title. |
| iconTooltip | <em>String</em> | -- | <strong>deprecated</strong> Tooltip for the icon in the header. |
| refresh | <em>Boolean</em> | -- | <strong>deprecated</strong> Show refresh button in header. |
| close | <em>Boolean</em> | -- | <strong>deprecated</strong> Show close button in header. |
| inline | <em>Boolean</em> | -- | <strong>wip</strong> Whether the card is render as display: <code>block</code> or <code>inline-block</code>. |
| inset | <em>String</em> | -- | <strong>wip</strong> Inset padding to add to the card |</p>
<h2>NovoCardHeader <code>novo-card-header</code></h2>
<p>Container row for the card header</p>
<h2>NovoCardContent <code>novo-card-content</code></h2>
<p>Container row for the card content</p>
<h2>NovoCardFooter <code>novo-card-footer</code></h2>
<p>Container row for the card footer</p>
`,
                    host: { class: 'markdown-page' },
                    standalone: false,
                }]
        }] });
class CardDesignPage {
    constructor() {
        this.params = {};
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: CardDesignPage, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: CardDesignPage, isStandalone: false, selector: "card-design-page", host: { classAttribute: "markdown-page" }, ngImport: i0, template: `<h2>Usage Guidelines</h2>
<novo-grid columns="2" align="start" gap="2rem">
<div>
<h3>Use When</h3>
<ul class="contains-do-list">
<li class="bullhorn-do-item">
<p><novo-icon color="grass" mr="md" size="md">check</novo-icon><novo-text color="grass"> When information can be grouped and the user might need access to multiple groups of information at once.</novo-text></p>
<p>TBW</p>
</li>
<li class="bullhorn-do-item">
<p><novo-icon color="grass" mr="md" size="md">check</novo-icon><novo-text color="grass"> When providing a summary of content as an entry point to a larger grouping of information</novo-text></p>
<p>TBW</p>
</li>
</ul>
</div>
<div>
<h3>Don′t Use When</h3>
<ul class="contains-do-list">
<li class="bullhorn-do-item">
<p><novo-icon color="grapefruit" mr="md" size="md">times</novo-icon><novo-text color="grapefruit"> When a lot of information on the card makes it too large. Instead consider using a modal or showing the information on a new page.</novo-text></p>
<p>TBW</p>
</li>
</ul>
</div>
</novo-grid>
<h2>Anatomy</h2>
<novo-grid columns="2" align="start" gap="2rem">
<img src="assets/images/ModalAnatomy.png" width="450">
<div>
<ol>
<li>
<p><strong>Header</strong><br>
Cards can have a header row that always contains a title. If the card can be reordered on the page, a handle is placed left of the title that allows dragging of the card. Between the handle and the title an icon can be added. On the far right of the header row, actions can be added.</p>
</li>
<li>
<p><strong>Shadow</strong><br>
Novo-elements has 5 elevation layers by default; cards should float just above the content they are contained within.</p>
</li>
</ol>
</div>
</novo-grid>
<h2>Best Practices</h2>
<ul>
<li>Card dimensions are based on its content and the container in which it resides.</li>
<li>Apply custom heights and width to meet product requirements.</li>
<li>Avoid the appearance of nested cards, and therefore don’t use cards within a modal or another card.</li>
<li>When creating a group of cards, use consistently sized content within a grid or flex layout.</li>
</ul>
<h2>Color</h2>
<blockquote class="two-columns">
<blockquote>
<div class="p"><img src="https://via.placeholder.com/350x250" alt="placeholder"></div>
<div class="p"><strong>Theme - background</strong></div>
<div class="p">Any theme color can be applied to tabs which will make the background color match the color.
Any theme color can be applied to tabs with the <code>color</code> attribute to change the text color</div>
</blockquote>
</blockquote>
<h2>Patterns</h2>
<novo-grid columns="2" align="start" gap="2rem">
<blockquote>
<div class="p"><strong>Details Card</strong></div>
<div class="p">Cards can use a list to display information. In this case the label and content are ordered left to right. Every other row has a darker background to improve readability.</div>
</blockquote>
<p><img src="https://via.placeholder.com/350x250" alt="placeholder"></p>
</novo-grid>
<h2>Accessibility</h2>
<ul>
<li>If using an illustrative image for the supplement content, it’s generally safe to use an empty or null alternative text for example alt=&quot;&quot;</li>
</ul>
`, isInline: true, dependencies: [{ kind: "component", type: i2$1.NovoGridElement, selector: "novo-grid", inputs: ["direction", "align", "justify", "columns"] }, { kind: "component", type: i2$1.NovoIconComponent, selector: "novo-icon", inputs: ["raised", "theme", "shape", "color", "size", "smaller", "larger", "alt", "name"] }, { kind: "component", type: i2$1.NovoText, selector: "novo-text,[novo-text]", inputs: ["block"] }, { kind: "directive", type: i2$1.MarginDirective, selector: "[m],[margin],[marginTop],[marginRight],[marginBottom],[marginLeft],[marginX],[marginY],[mt],[mr],[mb],[ml],[mx],[my]", inputs: ["margin", "m", "marginLeft", "ml", "marginRight", "mr", "marginTop", "mt", "marginBottom", "mb", "marginX", "mx", "marginY", "my"] }, { kind: "directive", type: i2$1.GapDirective, selector: "[gap]", inputs: ["gap"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: CardDesignPage, decorators: [{
            type: Component,
            args: [{
                    selector: 'card-design-page',
                    template: `<h2>Usage Guidelines</h2>
<novo-grid columns="2" align="start" gap="2rem">
<div>
<h3>Use When</h3>
<ul class="contains-do-list">
<li class="bullhorn-do-item">
<p><novo-icon color="grass" mr="md" size="md">check</novo-icon><novo-text color="grass"> When information can be grouped and the user might need access to multiple groups of information at once.</novo-text></p>
<p>TBW</p>
</li>
<li class="bullhorn-do-item">
<p><novo-icon color="grass" mr="md" size="md">check</novo-icon><novo-text color="grass"> When providing a summary of content as an entry point to a larger grouping of information</novo-text></p>
<p>TBW</p>
</li>
</ul>
</div>
<div>
<h3>Don′t Use When</h3>
<ul class="contains-do-list">
<li class="bullhorn-do-item">
<p><novo-icon color="grapefruit" mr="md" size="md">times</novo-icon><novo-text color="grapefruit"> When a lot of information on the card makes it too large. Instead consider using a modal or showing the information on a new page.</novo-text></p>
<p>TBW</p>
</li>
</ul>
</div>
</novo-grid>
<h2>Anatomy</h2>
<novo-grid columns="2" align="start" gap="2rem">
<img src="assets/images/ModalAnatomy.png" width="450">
<div>
<ol>
<li>
<p><strong>Header</strong><br>
Cards can have a header row that always contains a title. If the card can be reordered on the page, a handle is placed left of the title that allows dragging of the card. Between the handle and the title an icon can be added. On the far right of the header row, actions can be added.</p>
</li>
<li>
<p><strong>Shadow</strong><br>
Novo-elements has 5 elevation layers by default; cards should float just above the content they are contained within.</p>
</li>
</ol>
</div>
</novo-grid>
<h2>Best Practices</h2>
<ul>
<li>Card dimensions are based on its content and the container in which it resides.</li>
<li>Apply custom heights and width to meet product requirements.</li>
<li>Avoid the appearance of nested cards, and therefore don’t use cards within a modal or another card.</li>
<li>When creating a group of cards, use consistently sized content within a grid or flex layout.</li>
</ul>
<h2>Color</h2>
<blockquote class="two-columns">
<blockquote>
<div class="p"><img src="https://via.placeholder.com/350x250" alt="placeholder"></div>
<div class="p"><strong>Theme - background</strong></div>
<div class="p">Any theme color can be applied to tabs which will make the background color match the color.
Any theme color can be applied to tabs with the <code>color</code> attribute to change the text color</div>
</blockquote>
</blockquote>
<h2>Patterns</h2>
<novo-grid columns="2" align="start" gap="2rem">
<blockquote>
<div class="p"><strong>Details Card</strong></div>
<div class="p">Cards can use a list to display information. In this case the label and content are ordered left to right. Every other row has a darker background to improve readability.</div>
</blockquote>
<p><img src="https://via.placeholder.com/350x250" alt="placeholder"></p>
</novo-grid>
<h2>Accessibility</h2>
<ul>
<li>If using an illustrative image for the supplement content, it’s generally safe to use an empty or null alternative text for example alt=&quot;&quot;</li>
</ul>
`,
                    host: { class: 'markdown-page' },
                    standalone: false,
                }]
        }] });
class CardDescriptionPage {
    constructor() {
        this.params = {};
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: CardDescriptionPage, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: CardDescriptionPage, isStandalone: false, selector: "card-description-page", host: { classAttribute: "markdown-page" }, ngImport: i0, template: `<novo-grid columns="2" align="start" gap="2rem">
<div>
<p>A card is a container that organizes a related grouping of information. Cards can sometimes be configured and reordered on a page allowing for optimal user customization. A card is content container for the presentation information with a shared singular context, usually related in some way to the main content.</p>
</div>
<img src="https://via.placeholder.com/350x250"/>
<div>
`, isInline: true, dependencies: [{ kind: "component", type: i2$1.NovoGridElement, selector: "novo-grid", inputs: ["direction", "align", "justify", "columns"] }, { kind: "directive", type: i2$1.GapDirective, selector: "[gap]", inputs: ["gap"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: CardDescriptionPage, decorators: [{
            type: Component,
            args: [{
                    selector: 'card-description-page',
                    template: `<novo-grid columns="2" align="start" gap="2rem">
<div>
<p>A card is a container that organizes a related grouping of information. Cards can sometimes be configured and reordered on a page allowing for optimal user customization. A card is content container for the presentation information with a shared singular context, usually related in some way to the main content.</p>
</div>
<img src="https://via.placeholder.com/350x250"/>
<div>
`,
                    host: { class: 'markdown-page' },
                    standalone: false,
                }]
        }] });
class HomePage {
    constructor() {
        this.params = {};
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: HomePage, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: HomePage, isStandalone: false, selector: "home-page", host: { classAttribute: "markdown-page" }, ngImport: i0, template: `<h1>Novo Elements, Bullhorn's design system</h1>
<blockquote>
<div class="p">Version 6.0 is now available! Read about the new features and fixes <a href="#/updates/v6">here</a>.</div>
</blockquote>
<h2>Crafted amid Complexity</h2>
<p>Enterprise software is highly complex and demands a high level of flexibility. Design offers clarity and enables us to make deep, powerful connections.</p>
<img class="cover-img" src="assets/images/DesignSystem.png" width="100%"/>
<novo-grid columns="3" align="start" gap="2rem">
<blockquote>
<h5>A NEW STANDARD</h5>
<div class="p">Elegance in utility helps to create a system for humans, not robots. We strive not just to empower users but to delight them in the process.</div>
</blockquote>
<blockquote>
<h5>INSIGHTS AT SCALE</h5>
<div class="p">Vast data reservoirs need a finely tuned system to surface the critical information right when it is needed, no matter the scale or setting.</div>
</blockquote>
<blockquote>
<h5>POWER IN FLEXIBILITY</h5>
<div class="p">Users have vastly differing needs and goals. By identifying key commonalities and themes, we provide a strong experience for all.</div>
</blockquote>
</novo-grid>
<h2>Quick Start</h2>
<p>Use the Angular CLI's installation schematic to set up your project by running the following command:</p>
<pre><code class="language-bash">
<span class="hljs-comment"># Install</span>
ng add novo-elements

</code></pre>
<p>The ng add command will install Novo-Element and Novo Design Tokens library, it will additionally perform the following actions:</p>
<ul>
<li>Add project dependencies to package.json</li>
<li>Add the Gotham and Montserrat font to your index.html</li>
<li>Add the Bullhorn Glyphicon font to your index.html</li>
<li>Add a few global CSS styles to:</li>
</ul>
<p>You did it! Your application is now configured to use Novo Elements.</p>
<h2>Using a component</h2>
<p>Let's add a <strong>button</strong> component to our app and verify that everything works.</p>
<p>You need to import the <code>NovoButtonModule</code> for the component to display, add the following lines to your <code>app.module.ts</code> file.</p>
<pre><code class="language-ts"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">NovoButtonModule</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;novo-elements&#x27;</span>;

<span class="hljs-meta">&#64;NgModule</span> (&#123;
  <span class="hljs-attr">imports</span>: [
    <span class="hljs-title class_">NovoButtonModule</span>,
  ]
&#125;)
<span class="hljs-keyword">class</span> <span class="hljs-title class_">AppModule</span> &#123;&#125;
</code></pre>
<p>Add the <code>&lt;novo-button&gt;</code> tag to the <code>app.component.html</code> like so:</p>
<pre><code class="language-html"><span class="hljs-tag">&lt;<span class="hljs-name">novo-button</span> <span class="hljs-attr">theme</span>=<span class="hljs-string">&quot;primary&quot;</span>&gt;</span>Default<span class="hljs-tag">&lt;/<span class="hljs-name">novo-button</span>&gt;</span>
</code></pre>
<p>Run your local dev server:</p>
<pre><code class="language-bash">ng serve
</code></pre>
<p>Open your browser to (http://localhost:4200)[http://localhost:4200] to see the results!</p>
<h2>References</h2>
<p>Looking for the Bullhorn corporate brand guidelines?<br>
<a href="https://brandfolder.com/bullhorn">Bullhorn Brand Folder</a></p>
`, isInline: true, dependencies: [{ kind: "component", type: i2$1.NovoGridElement, selector: "novo-grid", inputs: ["direction", "align", "justify", "columns"] }, { kind: "directive", type: i2$1.GapDirective, selector: "[gap]", inputs: ["gap"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: HomePage, decorators: [{
            type: Component,
            args: [{
                    selector: 'home-page',
                    template: `<h1>Novo Elements, Bullhorn's design system</h1>
<blockquote>
<div class="p">Version 6.0 is now available! Read about the new features and fixes <a href="#/updates/v6">here</a>.</div>
</blockquote>
<h2>Crafted amid Complexity</h2>
<p>Enterprise software is highly complex and demands a high level of flexibility. Design offers clarity and enables us to make deep, powerful connections.</p>
<img class="cover-img" src="assets/images/DesignSystem.png" width="100%"/>
<novo-grid columns="3" align="start" gap="2rem">
<blockquote>
<h5>A NEW STANDARD</h5>
<div class="p">Elegance in utility helps to create a system for humans, not robots. We strive not just to empower users but to delight them in the process.</div>
</blockquote>
<blockquote>
<h5>INSIGHTS AT SCALE</h5>
<div class="p">Vast data reservoirs need a finely tuned system to surface the critical information right when it is needed, no matter the scale or setting.</div>
</blockquote>
<blockquote>
<h5>POWER IN FLEXIBILITY</h5>
<div class="p">Users have vastly differing needs and goals. By identifying key commonalities and themes, we provide a strong experience for all.</div>
</blockquote>
</novo-grid>
<h2>Quick Start</h2>
<p>Use the Angular CLI's installation schematic to set up your project by running the following command:</p>
<pre><code class="language-bash">
<span class="hljs-comment"># Install</span>
ng add novo-elements

</code></pre>
<p>The ng add command will install Novo-Element and Novo Design Tokens library, it will additionally perform the following actions:</p>
<ul>
<li>Add project dependencies to package.json</li>
<li>Add the Gotham and Montserrat font to your index.html</li>
<li>Add the Bullhorn Glyphicon font to your index.html</li>
<li>Add a few global CSS styles to:</li>
</ul>
<p>You did it! Your application is now configured to use Novo Elements.</p>
<h2>Using a component</h2>
<p>Let's add a <strong>button</strong> component to our app and verify that everything works.</p>
<p>You need to import the <code>NovoButtonModule</code> for the component to display, add the following lines to your <code>app.module.ts</code> file.</p>
<pre><code class="language-ts"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">NovoButtonModule</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;novo-elements&#x27;</span>;

<span class="hljs-meta">&#64;NgModule</span> (&#123;
  <span class="hljs-attr">imports</span>: [
    <span class="hljs-title class_">NovoButtonModule</span>,
  ]
&#125;)
<span class="hljs-keyword">class</span> <span class="hljs-title class_">AppModule</span> &#123;&#125;
</code></pre>
<p>Add the <code>&lt;novo-button&gt;</code> tag to the <code>app.component.html</code> like so:</p>
<pre><code class="language-html"><span class="hljs-tag">&lt;<span class="hljs-name">novo-button</span> <span class="hljs-attr">theme</span>=<span class="hljs-string">&quot;primary&quot;</span>&gt;</span>Default<span class="hljs-tag">&lt;/<span class="hljs-name">novo-button</span>&gt;</span>
</code></pre>
<p>Run your local dev server:</p>
<pre><code class="language-bash">ng serve
</code></pre>
<p>Open your browser to (http://localhost:4200)[http://localhost:4200] to see the results!</p>
<h2>References</h2>
<p>Looking for the Bullhorn corporate brand guidelines?<br>
<a href="https://brandfolder.com/bullhorn">Bullhorn Brand Folder</a></p>
`,
                    host: { class: 'markdown-page' },
                    standalone: false,
                }]
        }] });
class FormControlsPage {
    constructor() {
        this.params = {};
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: FormControlsPage, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: FormControlsPage, isStandalone: false, selector: "form-controls-page", host: { classAttribute: "markdown-page" }, ngImport: i0, template: `<h1>Form Controls</h1>
<p>This is a landing page</p>
`, isInline: true }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: FormControlsPage, decorators: [{
            type: Component,
            args: [{
                    selector: 'form-controls-page',
                    template: `<h1>Form Controls</h1>
<p>This is a landing page</p>
`,
                    host: { class: 'markdown-page' },
                    standalone: false,
                }]
        }] });
class ValuePage {
    constructor() {
        this.params = {};
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: ValuePage, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: ValuePage, isStandalone: false, selector: "value-page", host: { classAttribute: "markdown-page" }, ngImport: i0, template: `<h1>Value/Details/Summary <a href="https://github.com/bullhorn/novo-elements/blob/master/projects/novo-elements/src/elements/value">(source)</a></h1>
<p>Used to render data based on its field type provided in meta. It has two themes, DEFAULT - horizontal view and MOBILE - vertical view</p>
<h2>Mobile Theme</h2>
<h5>Value/Details/Summary</h5>
<p>Render SCALAR fields</p>
<p><code-example example="basic-value"></code-example></p>
<h5>Category Value</h5>
<p>Render TO_ONE fields</p>
<p><code-example example="category-value"></code-example></p>
<h5>Using Icons w/Values</h5>
<p>Render fields with one or multiple icons on the right with an onclick event that calls a function on the meta object</p>
<p><code-example example="icon-value"></code-example></p>
<h5>CorporateUser</h5>
<p>Render TO_ONE fields with CorporateUser as an Associated Entity</p>
<p><code-example example="corporate-user-value"></code-example></p>
<h5>Custom Formatter</h5>
<p>Render Entity TO_ONE fields as links</p>
<p><code-example example="formatter-value"></code-example></p>
<h5>External Links</h5>
<p>Render external links</p>
<p><code-example example="external-link-value"></code-example></p>
<h5>DateTime</h5>
<p>Render DateTime and Timestamp fields in the localized Date format</p>
<p><code-example example="date-time-value"></code-example></p>
<h5>Address</h5>
<p>Render Address fields</p>
<p><code-example example="address-value"></code-example></p>
<h5>Associated Entities</h5>
<p>Render associated fields</p>
<p><code-example example="associated-value"></code-example></p>
<h5>Entity Lists</h5>
<p>Render entity lists</p>
<p><code-example example="entity-list-value"></code-example></p>
<h5>Multi Options</h5>
<p>Render multi option fields (Checkbox, radio, etc.)</p>
<p><code-example example="multi-option-value"></code-example></p>
`, isInline: true, dependencies: [{ kind: "component", type: CodeExampleComponent, selector: "code-example", inputs: ["example"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: ValuePage, decorators: [{
            type: Component,
            args: [{
                    selector: 'value-page',
                    template: `<h1>Value/Details/Summary <a href="https://github.com/bullhorn/novo-elements/blob/master/projects/novo-elements/src/elements/value">(source)</a></h1>
<p>Used to render data based on its field type provided in meta. It has two themes, DEFAULT - horizontal view and MOBILE - vertical view</p>
<h2>Mobile Theme</h2>
<h5>Value/Details/Summary</h5>
<p>Render SCALAR fields</p>
<p><code-example example="basic-value"></code-example></p>
<h5>Category Value</h5>
<p>Render TO_ONE fields</p>
<p><code-example example="category-value"></code-example></p>
<h5>Using Icons w/Values</h5>
<p>Render fields with one or multiple icons on the right with an onclick event that calls a function on the meta object</p>
<p><code-example example="icon-value"></code-example></p>
<h5>CorporateUser</h5>
<p>Render TO_ONE fields with CorporateUser as an Associated Entity</p>
<p><code-example example="corporate-user-value"></code-example></p>
<h5>Custom Formatter</h5>
<p>Render Entity TO_ONE fields as links</p>
<p><code-example example="formatter-value"></code-example></p>
<h5>External Links</h5>
<p>Render external links</p>
<p><code-example example="external-link-value"></code-example></p>
<h5>DateTime</h5>
<p>Render DateTime and Timestamp fields in the localized Date format</p>
<p><code-example example="date-time-value"></code-example></p>
<h5>Address</h5>
<p>Render Address fields</p>
<p><code-example example="address-value"></code-example></p>
<h5>Associated Entities</h5>
<p>Render associated fields</p>
<p><code-example example="associated-value"></code-example></p>
<h5>Entity Lists</h5>
<p>Render entity lists</p>
<p><code-example example="entity-list-value"></code-example></p>
<h5>Multi Options</h5>
<p>Render multi option fields (Checkbox, radio, etc.)</p>
<p><code-example example="multi-option-value"></code-example></p>
`,
                    host: { class: 'markdown-page' },
                    standalone: false,
                }]
        }] });
class TimezonePage {
    constructor() {
        this.params = {};
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: TimezonePage, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: TimezonePage, isStandalone: false, selector: "timezone-page", host: { classAttribute: "markdown-page" }, ngImport: i0, template: `<h1>Checkbox <a href="https://github.com/bullhorn/novo-elements/blob/master/projects/novo-elements/src/elements/form/controls/timezone/TimezoneControl">(source)</a></h1>
<h5>Basic</h5>
<p><code-example example="timezone"></code-example></p>
`, isInline: true, dependencies: [{ kind: "component", type: CodeExampleComponent, selector: "code-example", inputs: ["example"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: TimezonePage, decorators: [{
            type: Component,
            args: [{
                    selector: 'timezone-page',
                    template: `<h1>Checkbox <a href="https://github.com/bullhorn/novo-elements/blob/master/projects/novo-elements/src/elements/form/controls/timezone/TimezoneControl">(source)</a></h1>
<h5>Basic</h5>
<p><code-example example="timezone"></code-example></p>
`,
                    host: { class: 'markdown-page' },
                    standalone: false,
                }]
        }] });
class TimePickerExamplesPage {
    constructor() {
        this.params = {};
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: TimePickerExamplesPage, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: TimePickerExamplesPage, isStandalone: false, selector: "time-picker-examples-page", host: { classAttribute: "markdown-page" }, ngImport: i0, template: `<h2>Standalone Time Picker</h2>
<p>Time pickers come in 12 hour or 24 hour style.</p>
<p><code-example example="time-picker"></code-example></p>
`, isInline: true, dependencies: [{ kind: "component", type: CodeExampleComponent, selector: "code-example", inputs: ["example"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: TimePickerExamplesPage, decorators: [{
            type: Component,
            args: [{
                    selector: 'time-picker-examples-page',
                    template: `<h2>Standalone Time Picker</h2>
<p>Time pickers come in 12 hour or 24 hour style.</p>
<p><code-example example="time-picker"></code-example></p>
`,
                    host: { class: 'markdown-page' },
                    standalone: false,
                }]
        }] });
class TimePickerDevelopPage {
    constructor() {
        this.params = {};
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: TimePickerDevelopPage, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: TimePickerDevelopPage, isStandalone: false, selector: "time-picker-develop-page", host: { classAttribute: "markdown-page" }, ngImport: i0, template: `<h1>Technical Details</h1>
<ul>
<li><strong>source:</strong> <a href="https://github.com/bullhorn/novo-elements/blob/master/projects/novo-elements/src/elements/time-picker">(github)</a></li>
<li><strong>module:</strong> <code>import &#123; NovoTimePickerModule &#125; from 'novo-elements';</code></li>
</ul>
<p><strong>Usage</strong></p>
<p>A <code>novo-date-time-picker</code> can be used standalone, but typically it is displayed in an overlay triggered by an input. This component is merely are wrapper around the <code>novo-date-picker</code> and the <code>novo-time-picker</code> components with a transition between them.</p>
<pre><code class="language-html"><span class="hljs-comment">&lt;!-- Deprecated Usage --&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">novo-time-picker-input</span> [(<span class="hljs-attr">ngModel</span>)]=<span class="hljs-string">&quot;time&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">novo-time-picker-input</span>&gt;</span>
</code></pre>
<pre><code class="language-html"><span class="hljs-comment">&lt;!-- Preferred Usage --&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">novo-field</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">novo-label</span>&gt;</span>Set an Alarm<span class="hljs-tag">&lt;/<span class="hljs-name">novo-label</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">novoInput</span> [(<span class="hljs-attr">ngModel</span>)]=<span class="hljs-string">&quot;time&quot;</span> <span class="hljs-attr">timeFormat</span>=<span class="hljs-string">&quot;iso8601&quot;</span> [<span class="hljs-attr">picker</span>]=<span class="hljs-string">&quot;timepicker&quot;</span> /&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">novo-picker-toggle</span> <span class="hljs-attr">novoSuffix</span> <span class="hljs-attr">icon</span>=<span class="hljs-string">&quot;clock&quot;</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">novo-time-picker</span> #<span class="hljs-attr">timepicker</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">novo-time-picker</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">novo-picker-toggle</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">novo-field</span>&gt;</span>
</code></pre>
<h1>Roadmap</h1>
<ul class="contains-task-list">
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> Make color and theming consistent</li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> Dark Mode</li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> Remove <code>NovoTimePickerInputElement</code></li>
</ul>
<h1>Changelog</h1>
<h3>5.0.0</h3>
<p><strong>Deprecation</strong></p>
<ul>
<li><code>novo-time-picker-input</code> should no longer be used, instead use a <code>novo-field</code> with a picker toggle shown in the preferred usage example above.</li>
</ul>
<h1>Directives</h1>
<h2>NovoTimeFormatDirective <code>[timeFormat]</code></h2>
<p>The <code>[timeFormat]</code> directive is used to specify the format the input should display &quot;date&quot; values in. Currently we are using <code>imask</code> and <code>angular-imask</code> library to provide these formats and create the auto-correction/completion when typing into the input field.</p>
<h1>Components</h1>
<h2>NovoTimePickerInputElement <code>novo-time-picker-input</code></h2>
<p>The <code>novo-time-picker-input</code> is deprecated, but it still used with the dynamic form containers. It is a convienent wrapper componet for an input with a time picker trigger. Most inputs are just pass throughs to the <code>novo-time-picker</code> instance.</p>
<h3>Properties</h3>
<p><props-table component="NovoTimePickerInputElement"></props-table></p>
<h2>NovoTimePickerElement <code>novo-time-picker</code></h2>
<p>The <code>novo-time-picker</code> component is used to allow the user to select the time of the day similar to the browsers native time picker. The main benefit is that we can control timezones and formatting based on user and agency configuration rather than using the computers default settings.</p>
<h3>Properties</h3>
<p><props-table component="NovoTimePickerElement"></props-table></p>
`, isInline: true, dependencies: [{ kind: "component", type: PropsTableComponent, selector: "props-table", inputs: ["component", "kinds"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: TimePickerDevelopPage, decorators: [{
            type: Component,
            args: [{
                    selector: 'time-picker-develop-page',
                    template: `<h1>Technical Details</h1>
<ul>
<li><strong>source:</strong> <a href="https://github.com/bullhorn/novo-elements/blob/master/projects/novo-elements/src/elements/time-picker">(github)</a></li>
<li><strong>module:</strong> <code>import &#123; NovoTimePickerModule &#125; from 'novo-elements';</code></li>
</ul>
<p><strong>Usage</strong></p>
<p>A <code>novo-date-time-picker</code> can be used standalone, but typically it is displayed in an overlay triggered by an input. This component is merely are wrapper around the <code>novo-date-picker</code> and the <code>novo-time-picker</code> components with a transition between them.</p>
<pre><code class="language-html"><span class="hljs-comment">&lt;!-- Deprecated Usage --&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">novo-time-picker-input</span> [(<span class="hljs-attr">ngModel</span>)]=<span class="hljs-string">&quot;time&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">novo-time-picker-input</span>&gt;</span>
</code></pre>
<pre><code class="language-html"><span class="hljs-comment">&lt;!-- Preferred Usage --&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">novo-field</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">novo-label</span>&gt;</span>Set an Alarm<span class="hljs-tag">&lt;/<span class="hljs-name">novo-label</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">novoInput</span> [(<span class="hljs-attr">ngModel</span>)]=<span class="hljs-string">&quot;time&quot;</span> <span class="hljs-attr">timeFormat</span>=<span class="hljs-string">&quot;iso8601&quot;</span> [<span class="hljs-attr">picker</span>]=<span class="hljs-string">&quot;timepicker&quot;</span> /&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">novo-picker-toggle</span> <span class="hljs-attr">novoSuffix</span> <span class="hljs-attr">icon</span>=<span class="hljs-string">&quot;clock&quot;</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">novo-time-picker</span> #<span class="hljs-attr">timepicker</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">novo-time-picker</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">novo-picker-toggle</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">novo-field</span>&gt;</span>
</code></pre>
<h1>Roadmap</h1>
<ul class="contains-task-list">
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> Make color and theming consistent</li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> Dark Mode</li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> Remove <code>NovoTimePickerInputElement</code></li>
</ul>
<h1>Changelog</h1>
<h3>5.0.0</h3>
<p><strong>Deprecation</strong></p>
<ul>
<li><code>novo-time-picker-input</code> should no longer be used, instead use a <code>novo-field</code> with a picker toggle shown in the preferred usage example above.</li>
</ul>
<h1>Directives</h1>
<h2>NovoTimeFormatDirective <code>[timeFormat]</code></h2>
<p>The <code>[timeFormat]</code> directive is used to specify the format the input should display &quot;date&quot; values in. Currently we are using <code>imask</code> and <code>angular-imask</code> library to provide these formats and create the auto-correction/completion when typing into the input field.</p>
<h1>Components</h1>
<h2>NovoTimePickerInputElement <code>novo-time-picker-input</code></h2>
<p>The <code>novo-time-picker-input</code> is deprecated, but it still used with the dynamic form containers. It is a convienent wrapper componet for an input with a time picker trigger. Most inputs are just pass throughs to the <code>novo-time-picker</code> instance.</p>
<h3>Properties</h3>
<p><props-table component="NovoTimePickerInputElement"></props-table></p>
<h2>NovoTimePickerElement <code>novo-time-picker</code></h2>
<p>The <code>novo-time-picker</code> component is used to allow the user to select the time of the day similar to the browsers native time picker. The main benefit is that we can control timezones and formatting based on user and agency configuration rather than using the computers default settings.</p>
<h3>Properties</h3>
<p><props-table component="NovoTimePickerElement"></props-table></p>
`,
                    host: { class: 'markdown-page' },
                    standalone: false,
                }]
        }] });
class TimePickerDesignPage {
    constructor() {
        this.params = {};
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: TimePickerDesignPage, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: TimePickerDesignPage, isStandalone: false, selector: "time-picker-design-page", host: { classAttribute: "markdown-page" }, ngImport: i0, template: `<h2>Usage</h2>
<novo-grid columns="2" align="start" gap="2rem">
<div>
<p>Time Pickers allow users to easily select a time. It comes in a handful of varieties based on the content of the field.</p>
</div>
<p><img src="assets/images/TimePickerOverview.png" alt="TimePicker"></p>
</novo-grid>
<h2>Best Practices</h2>
<ul>
<li>Use when a single date selection is required from the user, especially when additional context is around the date selection is needed. e.g. selecting a date within a specific date range.</li>
<li>Always use <code>novo-time-picker-input</code> when part of a larger form.</li>
<li>Only use standalone <code>time-picker</code> as filter for content displayed on the page.</li>
</ul>
<h2>Anatomy</h2>
<novo-grid columns="2" align="start" gap="2rem">
<p><img src="assets/images/TimePickerOverview.png" alt="TimePicker Anatomy" width="450"></p>
<div>
<ol>
<li>
<p><strong>Container</strong><br>
Defines the layout for the form field (horizontal vs vertical)</p>
</li>
<li>
<p><strong>Input Prefix (Optional element)</strong><br>
An element/icon displayed before the input. eg. $</p>
</li>
<li>
<p><strong>Label</strong><br>
A label for a group of menu actions.</p>
</li>
<li>
<p><strong>Input Control</strong><br>
The element representing the input control: <code>input</code>, <code>select</code>, etc...</p>
</li>
<li>
<p><strong>Input Suffix (Optional element)</strong><br>
The element/icon displayed after the input. eg. calendar icon for date picker.</p>
</li>
<li>
<p><strong>Helper/Error text (Optional element)</strong><br>
Caption text to display helpful information, warnings, or errors.</p>
</li>
</ol>
</div>
</novo-grid>
<h2>Best Practices</h2>
<ul>
<li>Use spinner to display that an action invoked by the user is performing but not complete.</li>
<li>Use loading when loading data from the server to intialize content.</li>
<li>If a spinner is triggered by a button, place the spinner in the button, and disable the button while the spinner is visible.</li>
<li>If only a portion of a page is loading new content or being updated, place the loading element in that part of the page.</li>
<li>There should only be a single loading element on a page at one time.</li>
</ul>
<h2>How to configure</h2>
<novo-grid columns="2" align="start" gap="2rem">
<blockquote>
<div class="p"><img src="https://via.placeholder.com/350x250" alt="placeholder"></div>
<ul class="contains-do-list">
<li class="bullhorn-do-item"><novo-icon color="grass" mr="md" size="md">check</novo-icon><novo-text color="grass"> Always do this</novo-text></li>
</ul>
<div class="p">Explain this</div>
</blockquote>
<blockquote>
<div class="p"><img src="https://via.placeholder.com/350x250" alt="placeholder"></div>
<ul class="contains-do-list">
<li class="bullhorn-do-item"><novo-icon color="grapefruit" mr="md" size="md">times</novo-icon><novo-text color="grapefruit"> Never do this</novo-text></li>
</ul>
<div class="p">Explain this</div>
</blockquote>
</novo-grid>
<h2>Patterns</h2>
<novo-grid columns="2" align="start" gap="2rem">
<blockquote>
<div class="p"><strong>Pattern</strong></div>
<div class="p">Why is it configured like this</div>
</blockquote>
<p><img src="https://via.placeholder.com/350x250" alt="placeholder"></p>
<blockquote>
<div class="p"><strong>Pattern</strong></div>
<div class="p">Why is it configured like this</div>
</blockquote>
<p><img src="https://via.placeholder.com/350x250" alt="placeholder"></p>
</novo-grid>
<h2>Accessibility</h2>
<p><strong>Implementation</strong></p>
<p>Always include an <code>alt</code> attribute describing the information that is visually displayed in the image.</p>
`, isInline: true, dependencies: [{ kind: "component", type: i2$1.NovoGridElement, selector: "novo-grid", inputs: ["direction", "align", "justify", "columns"] }, { kind: "component", type: i2$1.NovoIconComponent, selector: "novo-icon", inputs: ["raised", "theme", "shape", "color", "size", "smaller", "larger", "alt", "name"] }, { kind: "component", type: i2$1.NovoText, selector: "novo-text,[novo-text]", inputs: ["block"] }, { kind: "directive", type: i2$1.MarginDirective, selector: "[m],[margin],[marginTop],[marginRight],[marginBottom],[marginLeft],[marginX],[marginY],[mt],[mr],[mb],[ml],[mx],[my]", inputs: ["margin", "m", "marginLeft", "ml", "marginRight", "mr", "marginTop", "mt", "marginBottom", "mb", "marginX", "mx", "marginY", "my"] }, { kind: "directive", type: i2$1.GapDirective, selector: "[gap]", inputs: ["gap"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: TimePickerDesignPage, decorators: [{
            type: Component,
            args: [{
                    selector: 'time-picker-design-page',
                    template: `<h2>Usage</h2>
<novo-grid columns="2" align="start" gap="2rem">
<div>
<p>Time Pickers allow users to easily select a time. It comes in a handful of varieties based on the content of the field.</p>
</div>
<p><img src="assets/images/TimePickerOverview.png" alt="TimePicker"></p>
</novo-grid>
<h2>Best Practices</h2>
<ul>
<li>Use when a single date selection is required from the user, especially when additional context is around the date selection is needed. e.g. selecting a date within a specific date range.</li>
<li>Always use <code>novo-time-picker-input</code> when part of a larger form.</li>
<li>Only use standalone <code>time-picker</code> as filter for content displayed on the page.</li>
</ul>
<h2>Anatomy</h2>
<novo-grid columns="2" align="start" gap="2rem">
<p><img src="assets/images/TimePickerOverview.png" alt="TimePicker Anatomy" width="450"></p>
<div>
<ol>
<li>
<p><strong>Container</strong><br>
Defines the layout for the form field (horizontal vs vertical)</p>
</li>
<li>
<p><strong>Input Prefix (Optional element)</strong><br>
An element/icon displayed before the input. eg. $</p>
</li>
<li>
<p><strong>Label</strong><br>
A label for a group of menu actions.</p>
</li>
<li>
<p><strong>Input Control</strong><br>
The element representing the input control: <code>input</code>, <code>select</code>, etc...</p>
</li>
<li>
<p><strong>Input Suffix (Optional element)</strong><br>
The element/icon displayed after the input. eg. calendar icon for date picker.</p>
</li>
<li>
<p><strong>Helper/Error text (Optional element)</strong><br>
Caption text to display helpful information, warnings, or errors.</p>
</li>
</ol>
</div>
</novo-grid>
<h2>Best Practices</h2>
<ul>
<li>Use spinner to display that an action invoked by the user is performing but not complete.</li>
<li>Use loading when loading data from the server to intialize content.</li>
<li>If a spinner is triggered by a button, place the spinner in the button, and disable the button while the spinner is visible.</li>
<li>If only a portion of a page is loading new content or being updated, place the loading element in that part of the page.</li>
<li>There should only be a single loading element on a page at one time.</li>
</ul>
<h2>How to configure</h2>
<novo-grid columns="2" align="start" gap="2rem">
<blockquote>
<div class="p"><img src="https://via.placeholder.com/350x250" alt="placeholder"></div>
<ul class="contains-do-list">
<li class="bullhorn-do-item"><novo-icon color="grass" mr="md" size="md">check</novo-icon><novo-text color="grass"> Always do this</novo-text></li>
</ul>
<div class="p">Explain this</div>
</blockquote>
<blockquote>
<div class="p"><img src="https://via.placeholder.com/350x250" alt="placeholder"></div>
<ul class="contains-do-list">
<li class="bullhorn-do-item"><novo-icon color="grapefruit" mr="md" size="md">times</novo-icon><novo-text color="grapefruit"> Never do this</novo-text></li>
</ul>
<div class="p">Explain this</div>
</blockquote>
</novo-grid>
<h2>Patterns</h2>
<novo-grid columns="2" align="start" gap="2rem">
<blockquote>
<div class="p"><strong>Pattern</strong></div>
<div class="p">Why is it configured like this</div>
</blockquote>
<p><img src="https://via.placeholder.com/350x250" alt="placeholder"></p>
<blockquote>
<div class="p"><strong>Pattern</strong></div>
<div class="p">Why is it configured like this</div>
</blockquote>
<p><img src="https://via.placeholder.com/350x250" alt="placeholder"></p>
</novo-grid>
<h2>Accessibility</h2>
<p><strong>Implementation</strong></p>
<p>Always include an <code>alt</code> attribute describing the information that is visually displayed in the image.</p>
`,
                    host: { class: 'markdown-page' },
                    standalone: false,
                }]
        }] });
class TilesPage {
    constructor() {
        this.params = {};
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: TilesPage, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: TilesPage, isStandalone: false, selector: "tiles-page", host: { classAttribute: "markdown-page" }, ngImport: i0, template: `<h1>Tiles <a href="https://github.com/bullhorn/novo-elements/blob/master/projects/novo-elements/src/elements/tiles">(source)</a></h1>
<p>This component is intended to behave akin to the radio button component.</p>
<h4>Demo</h4>
<p><code-example example="tiles-usage"></code-example></p>
<h4>Code</h4>
`, isInline: true, dependencies: [{ kind: "component", type: CodeExampleComponent, selector: "code-example", inputs: ["example"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: TilesPage, decorators: [{
            type: Component,
            args: [{
                    selector: 'tiles-page',
                    template: `<h1>Tiles <a href="https://github.com/bullhorn/novo-elements/blob/master/projects/novo-elements/src/elements/tiles">(source)</a></h1>
<p>This component is intended to behave akin to the radio button component.</p>
<h4>Demo</h4>
<p><code-example example="tiles-usage"></code-example></p>
<h4>Code</h4>
`,
                    host: { class: 'markdown-page' },
                    standalone: false,
                }]
        }] });
class SelectPage {
    constructor() {
        this.params = {};
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: SelectPage, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: SelectPage, isStandalone: false, selector: "select-page", host: { classAttribute: "markdown-page" }, ngImport: i0, template: `<h1>Select <a href="https://github.com/bullhorn/novo-elements/blob/master/projects/novo-elements/src/elements/select">(source)</a></h1>
<p>The select element (<code>novo-select</code>) represents a control that presents a menu of options. The options within are set by the <code>items</code> attribute. Options can be pre-selected for the user using the <code>value</code> attribute.</p>
<h5>Basic Examples</h5>
<p>By clicking on the <code>novo-select</code> element, the options list will be displayed. Select any of the options by clicking on the item in the list. The value selected will be displayed and the options list will be removed.</p>
<p><code-example example="basic-select"></code-example></p>
<h5>Basic Selections With Search</h5>
<p>Use the <code>novo-select-search</code> to provide searching functionality to the select component. Can be used to support remote options.</p>
<p><code-example example="basic-select-with-search"></code-example></p>
<h5>Lots of Options</h5>
<p>The most common need for the <code>select</code> component is when there are too many options that would fit on on the screen. The options list will display appropriately and scroll as needed.</p>
<p><code-example example="long-select"></code-example></p>
<h5>Multiple Selections</h5>
<p>When many option can be selected, use the <code>multiple</code> attribute which allows for a simple iterface to select multiple options.</p>
<p><code-example example="multiple-select"></code-example></p>
<h5>Multiple Selections With Search</h5>
<p>The <code>novo-select-search</code> is compatible with the <code>multiple</code> option as well.</p>
<p><code-example example="multiple-select-with-search"></code-example></p>
<h5>Legacy Options</h5>
<p>When a value is set manually on a <code>novo-select</code> that is not reflected in its options, it will be displayed as a disabled option. The value can be removed, but will not appear subsequently. This behavior can be disabled with the <code>hideLegacyOptions</code> input.</p>
<p><code-example example="legacy-select-option"></code-example></p>
`, isInline: true, dependencies: [{ kind: "component", type: CodeExampleComponent, selector: "code-example", inputs: ["example"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: SelectPage, decorators: [{
            type: Component,
            args: [{
                    selector: 'select-page',
                    template: `<h1>Select <a href="https://github.com/bullhorn/novo-elements/blob/master/projects/novo-elements/src/elements/select">(source)</a></h1>
<p>The select element (<code>novo-select</code>) represents a control that presents a menu of options. The options within are set by the <code>items</code> attribute. Options can be pre-selected for the user using the <code>value</code> attribute.</p>
<h5>Basic Examples</h5>
<p>By clicking on the <code>novo-select</code> element, the options list will be displayed. Select any of the options by clicking on the item in the list. The value selected will be displayed and the options list will be removed.</p>
<p><code-example example="basic-select"></code-example></p>
<h5>Basic Selections With Search</h5>
<p>Use the <code>novo-select-search</code> to provide searching functionality to the select component. Can be used to support remote options.</p>
<p><code-example example="basic-select-with-search"></code-example></p>
<h5>Lots of Options</h5>
<p>The most common need for the <code>select</code> component is when there are too many options that would fit on on the screen. The options list will display appropriately and scroll as needed.</p>
<p><code-example example="long-select"></code-example></p>
<h5>Multiple Selections</h5>
<p>When many option can be selected, use the <code>multiple</code> attribute which allows for a simple iterface to select multiple options.</p>
<p><code-example example="multiple-select"></code-example></p>
<h5>Multiple Selections With Search</h5>
<p>The <code>novo-select-search</code> is compatible with the <code>multiple</code> option as well.</p>
<p><code-example example="multiple-select-with-search"></code-example></p>
<h5>Legacy Options</h5>
<p>When a value is set manually on a <code>novo-select</code> that is not reflected in its options, it will be displayed as a disabled option. The value can be removed, but will not appear subsequently. This behavior can be disabled with the <code>hideLegacyOptions</code> input.</p>
<p><code-example example="legacy-select-option"></code-example></p>
`,
                    host: { class: 'markdown-page' },
                    standalone: false,
                }]
        }] });
class RadioButtonsPage {
    constructor() {
        this.params = {};
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: RadioButtonsPage, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: RadioButtonsPage, isStandalone: false, selector: "radio-buttons-page", host: { classAttribute: "markdown-page" }, ngImport: i0, template: `<h1>Radio <a href="https://github.com/bullhorn/novo-elements/blob/master/projects/novo-elements/src/elements/radio">(source)</a></h1>
<p>A radio group</p>
<h5>Basic</h5>
<p><code-example example="basic-radio"></code-example></p>
<h5>Vertical</h5>
<p><code-example example="vertical-radio"></code-example></p>
<h5>Button Radio</h5>
<p><code-example example="button-radio"></code-example></p>
<h5>Icon Radio</h5>
<p><code-example example="icon-radio"></code-example></p>
`, isInline: true, dependencies: [{ kind: "component", type: CodeExampleComponent, selector: "code-example", inputs: ["example"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: RadioButtonsPage, decorators: [{
            type: Component,
            args: [{
                    selector: 'radio-buttons-page',
                    template: `<h1>Radio <a href="https://github.com/bullhorn/novo-elements/blob/master/projects/novo-elements/src/elements/radio">(source)</a></h1>
<p>A radio group</p>
<h5>Basic</h5>
<p><code-example example="basic-radio"></code-example></p>
<h5>Vertical</h5>
<p><code-example example="vertical-radio"></code-example></p>
<h5>Button Radio</h5>
<p><code-example example="button-radio"></code-example></p>
<h5>Icon Radio</h5>
<p><code-example example="icon-radio"></code-example></p>
`,
                    host: { class: 'markdown-page' },
                    standalone: false,
                }]
        }] });
class PickerPage {
    constructor() {
        this.params = {};
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: PickerPage, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: PickerPage, isStandalone: false, selector: "picker-page", host: { classAttribute: "markdown-page" }, ngImport: i0, template: `<h1>Picker <a href="https://github.com/bullhorn/novo-elements/blob/master/projects/novo-elements/src/elements/picker">(source)</a></h1>
<p>The picker element (<code>input[picker]</code>) represents a control that presents a menu of options. The options within are set by the <code>items</code> attribute. Options can be pre-pickered for the user using the <code>value</code> attribute.</p>
<h5>Basic Examples</h5>
<p>By clicking on the <code>input</code> element, the options list will be displayed. picker any of the options by clicking on the item in the list. The value pickered will be displayed and the options list will be removed.</p>
<p><code-example example="basic-picker"></code-example></p>
<h5>Async Examples (With Infinite Scroll)</h5>
<p>By clicking on the <code>input</code> element, the options list will be displayed. picker any of the options by clicking on the item in the list. The value pickered will be displayed and the options list will be removed.</p>
<p><code-example example="async-picker"></code-example></p>
<h5>Formatted Picker Examples</h5>
<p>By clicking on the <code>input</code> element, the options list will be displayed. picker any of the options by clicking on the item in the list. The value pickered will be displayed and the options list will be removed.</p>
<p><code-example example="formatted-picker"></code-example></p>
<h5>Custom Picker Examples</h5>
<p>By clicking on the <code>input</code> element, the options list will be displayed. picker any of the options by clicking on the item in the list. The value pickered will be displayed and the options list will be removed.</p>
<p><code-example example="custom-picker-results"></code-example></p>
<h5>Overriding the Result Template</h5>
<p>You can provide a string to override the base result template. You have access to <code>match</code> which is the data to be displayed.</p>
<p><code-example example="override-template"></code-example></p>
<h5>Default Options</h5>
<p>You can set a function or array for the default options on the config, for these options to appear when the user clicks in and doesn't have enough keys entered to perform a search</p>
<p><code-example example="default-options-picker"></code-example></p>
<h5>Entity Single Picker</h5>
<p>You can provide custom config to style the picker to select entities too!</p>
<p><code-example example="entity-picker"></code-example></p>
<h5>Grouped Multi Picker (categories) with Picker</h5>
<p>Having custom templates makes it easy to customize the functionality of the picker, here is an example of a category selector</p>
<p><code-example example="grouped-picker"></code-example></p>
<h5>Mixed Multi Picker (primary and secondary) with Picker</h5>
<p>It is possible to mix regular options with options with static or dynamic nested options</p>
<p><code-example example="mixed-picker"></code-example></p>
`, isInline: true, dependencies: [{ kind: "component", type: CodeExampleComponent, selector: "code-example", inputs: ["example"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: PickerPage, decorators: [{
            type: Component,
            args: [{
                    selector: 'picker-page',
                    template: `<h1>Picker <a href="https://github.com/bullhorn/novo-elements/blob/master/projects/novo-elements/src/elements/picker">(source)</a></h1>
<p>The picker element (<code>input[picker]</code>) represents a control that presents a menu of options. The options within are set by the <code>items</code> attribute. Options can be pre-pickered for the user using the <code>value</code> attribute.</p>
<h5>Basic Examples</h5>
<p>By clicking on the <code>input</code> element, the options list will be displayed. picker any of the options by clicking on the item in the list. The value pickered will be displayed and the options list will be removed.</p>
<p><code-example example="basic-picker"></code-example></p>
<h5>Async Examples (With Infinite Scroll)</h5>
<p>By clicking on the <code>input</code> element, the options list will be displayed. picker any of the options by clicking on the item in the list. The value pickered will be displayed and the options list will be removed.</p>
<p><code-example example="async-picker"></code-example></p>
<h5>Formatted Picker Examples</h5>
<p>By clicking on the <code>input</code> element, the options list will be displayed. picker any of the options by clicking on the item in the list. The value pickered will be displayed and the options list will be removed.</p>
<p><code-example example="formatted-picker"></code-example></p>
<h5>Custom Picker Examples</h5>
<p>By clicking on the <code>input</code> element, the options list will be displayed. picker any of the options by clicking on the item in the list. The value pickered will be displayed and the options list will be removed.</p>
<p><code-example example="custom-picker-results"></code-example></p>
<h5>Overriding the Result Template</h5>
<p>You can provide a string to override the base result template. You have access to <code>match</code> which is the data to be displayed.</p>
<p><code-example example="override-template"></code-example></p>
<h5>Default Options</h5>
<p>You can set a function or array for the default options on the config, for these options to appear when the user clicks in and doesn't have enough keys entered to perform a search</p>
<p><code-example example="default-options-picker"></code-example></p>
<h5>Entity Single Picker</h5>
<p>You can provide custom config to style the picker to select entities too!</p>
<p><code-example example="entity-picker"></code-example></p>
<h5>Grouped Multi Picker (categories) with Picker</h5>
<p>Having custom templates makes it easy to customize the functionality of the picker, here is an example of a category selector</p>
<p><code-example example="grouped-picker"></code-example></p>
<h5>Mixed Multi Picker (primary and secondary) with Picker</h5>
<p>It is possible to mix regular options with options with static or dynamic nested options</p>
<p><code-example example="mixed-picker"></code-example></p>
`,
                    host: { class: 'markdown-page' },
                    standalone: false,
                }]
        }] });
class MultiPickerPage {
    constructor() {
        this.params = {};
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: MultiPickerPage, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: MultiPickerPage, isStandalone: false, selector: "multi-picker-page", host: { classAttribute: "markdown-page" }, ngImport: i0, template: `<h1>MultiPicker <a href="https://github.com/bullhorn/novo-elements/blob/master/projects/novo-elements/src/elements/multi-picker">(source)</a></h1>
<p>The multipicker element (<code>multipicker</code>) represents a control that presents a menu of options of multiple types. The options within are set by the <code>source</code> attribute. Options can be pre-selected for the user using the <code>ngModel</code> attribute. Multipicker is the multi-category version of <code>chips</code></p>
<p>.</p>
<h5>Basic Example</h5>
<p>By clicking on the <code>multi-picker</code> element, the options list will be displayed. Select any of the options by clicking on the item in the list. The value selected will be added to the list of selected values.</p>
<p><code-example example="basic-multi-picker"></code-example></p>
<h5>Nested Example</h5>
<p>The multipicker can also support a parent-child relationship between the types, such as the relationship between a state with many cities or a department with users.</p>
<p><code-example example="nested-multi-picker"></code-example></p>
`, isInline: true, dependencies: [{ kind: "component", type: CodeExampleComponent, selector: "code-example", inputs: ["example"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: MultiPickerPage, decorators: [{
            type: Component,
            args: [{
                    selector: 'multi-picker-page',
                    template: `<h1>MultiPicker <a href="https://github.com/bullhorn/novo-elements/blob/master/projects/novo-elements/src/elements/multi-picker">(source)</a></h1>
<p>The multipicker element (<code>multipicker</code>) represents a control that presents a menu of options of multiple types. The options within are set by the <code>source</code> attribute. Options can be pre-selected for the user using the <code>ngModel</code> attribute. Multipicker is the multi-category version of <code>chips</code></p>
<p>.</p>
<h5>Basic Example</h5>
<p>By clicking on the <code>multi-picker</code> element, the options list will be displayed. Select any of the options by clicking on the item in the list. The value selected will be added to the list of selected values.</p>
<p><code-example example="basic-multi-picker"></code-example></p>
<h5>Nested Example</h5>
<p>The multipicker can also support a parent-child relationship between the types, such as the relationship between a state with many cities or a department with users.</p>
<p><code-example example="nested-multi-picker"></code-example></p>
`,
                    host: { class: 'markdown-page' },
                    standalone: false,
                }]
        }] });
class FormGroupsPage {
    constructor() {
        this.params = {};
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: FormGroupsPage, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: FormGroupsPage, isStandalone: false, selector: "form-groups-page", host: { classAttribute: "markdown-page" }, ngImport: i0, template: `<h1>Grouped Forms / Form Controls <a href="https://github.com/bullhorn/novo-elements/blob/master/projects/novo-elements/src/elements/form">(source)</a></h1>
<p>Useful when needing to group smaller sections of forms, can be used in the larger form. Static or Dynamic too!</p>
<h5>Horizontal</h5>
<p><code-example example="horizontal"></code-example></p>
<h5>Horizontal (options)</h5>
<p><code-example example="horizontal-options"></code-example></p>
<h5>Vertical</h5>
<p><code-example example="vertical"></code-example></p>
<h5>Horizontal (options)</h5>
<p><code-example example="vertical-options"></code-example></p>
<h5>Custom Template (you control everything!)</h5>
<p><code-example example="custom-template"></code-example></p>
`, isInline: true, dependencies: [{ kind: "component", type: CodeExampleComponent, selector: "code-example", inputs: ["example"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: FormGroupsPage, decorators: [{
            type: Component,
            args: [{
                    selector: 'form-groups-page',
                    template: `<h1>Grouped Forms / Form Controls <a href="https://github.com/bullhorn/novo-elements/blob/master/projects/novo-elements/src/elements/form">(source)</a></h1>
<p>Useful when needing to group smaller sections of forms, can be used in the larger form. Static or Dynamic too!</p>
<h5>Horizontal</h5>
<p><code-example example="horizontal"></code-example></p>
<h5>Horizontal (options)</h5>
<p><code-example example="horizontal-options"></code-example></p>
<h5>Vertical</h5>
<p><code-example example="vertical"></code-example></p>
<h5>Horizontal (options)</h5>
<p><code-example example="vertical-options"></code-example></p>
<h5>Custom Template (you control everything!)</h5>
<p><code-example example="custom-template"></code-example></p>
`,
                    host: { class: 'markdown-page' },
                    standalone: false,
                }]
        }] });
class FormPage {
    constructor() {
        this.params = {};
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: FormPage, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: FormPage, isStandalone: false, selector: "form-page", host: { classAttribute: "markdown-page" }, ngImport: i0, template: `<h1>Forms <a href="https://github.com/bullhorn/novo-elements/blob/master/projects/novo-elements/src/elements/form">(source)</a></h1>
<p>Forms use inputs and labels to submit user content. But you already knew that. What you may not know is that our forms come in two styles 'Static' and 'Dynamic'.
This is the Static Form demo.</p>
<h2>Static Form</h2>
<p>Static forms <code>&lt;novo-form /&gt;</code>.</p>
<h5>Textbox Based Controls</h5>
<p><code-example example="text-based-controls"></code-example></p>
<h5>Checkbox Controls</h5>
<p><code-example example="check-box-controls"></code-example></p>
<h5>File Input Controls</h5>
<p><code-example example="file-input-controls"></code-example></p>
<h5>Calendar Controls</h5>
<p><code-example example="calendar-input-controls"></code-example></p>
<h5>Picker Controls</h5>
<p><code-example example="picker-controls"></code-example></p>
<h5>Address Controls</h5>
<p><code-example example="address-control"></code-example></p>
<h5>Number Range Controls</h5>
<p><code-example example="number-range-control"></code-example></p>
`, isInline: true, dependencies: [{ kind: "component", type: CodeExampleComponent, selector: "code-example", inputs: ["example"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: FormPage, decorators: [{
            type: Component,
            args: [{
                    selector: 'form-page',
                    template: `<h1>Forms <a href="https://github.com/bullhorn/novo-elements/blob/master/projects/novo-elements/src/elements/form">(source)</a></h1>
<p>Forms use inputs and labels to submit user content. But you already knew that. What you may not know is that our forms come in two styles 'Static' and 'Dynamic'.
This is the Static Form demo.</p>
<h2>Static Form</h2>
<p>Static forms <code>&lt;novo-form /&gt;</code>.</p>
<h5>Textbox Based Controls</h5>
<p><code-example example="text-based-controls"></code-example></p>
<h5>Checkbox Controls</h5>
<p><code-example example="check-box-controls"></code-example></p>
<h5>File Input Controls</h5>
<p><code-example example="file-input-controls"></code-example></p>
<h5>Calendar Controls</h5>
<p><code-example example="calendar-input-controls"></code-example></p>
<h5>Picker Controls</h5>
<p><code-example example="picker-controls"></code-example></p>
<h5>Address Controls</h5>
<p><code-example example="address-control"></code-example></p>
<h5>Number Range Controls</h5>
<p><code-example example="number-range-control"></code-example></p>
`,
                    host: { class: 'markdown-page' },
                    standalone: false,
                }]
        }] });
class DynamicFormPage {
    constructor() {
        this.params = {};
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: DynamicFormPage, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: DynamicFormPage, isStandalone: false, selector: "dynamic-form-page", host: { classAttribute: "markdown-page" }, ngImport: i0, template: `<h1>Dynamic Forms <a href="https://github.com/bullhorn/novo-elements/blob/master/projects/novo-elements/src/elements/form">(source)</a></h1>
<p>Forms use inputs and labels to submit user content. But you already knew that. What you may not know is that our forms come in two styles 'Static' and 'Dynamic'.
This is the Dynamic Form demo.</p>
<h2>Dynamic Form</h2>
<p>Dynamic forms are composed of one element, <code>&lt;novo-dynamic-form [controls]=&quot;controls&quot;/&gt;</code> and allow you to pass in the controls and form and it will create the form for you.</p>
<h5>Basic</h5>
<p><code-example example="dynamic-form"></code-example></p>
<h5>Vertical</h5>
<p><code-example example="vertical-dynamic-form"></code-example></p>
<h5>Fieldsets</h5>
<p><code-example example="dynamic-form-field-sets"></code-example></p>
<h5>Updating Fields/Status</h5>
<p><code-example example="updating-form"></code-example></p>
<h5>Disabled Field States</h5>
<p><code-example example="disabled-form"></code-example></p>
<h5>Enable/Disable All Fields in Form</h5>
<p><code-example example="enable-disable-all-fields-in-form"></code-example></p>
`, isInline: true, dependencies: [{ kind: "component", type: CodeExampleComponent, selector: "code-example", inputs: ["example"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: DynamicFormPage, decorators: [{
            type: Component,
            args: [{
                    selector: 'dynamic-form-page',
                    template: `<h1>Dynamic Forms <a href="https://github.com/bullhorn/novo-elements/blob/master/projects/novo-elements/src/elements/form">(source)</a></h1>
<p>Forms use inputs and labels to submit user content. But you already knew that. What you may not know is that our forms come in two styles 'Static' and 'Dynamic'.
This is the Dynamic Form demo.</p>
<h2>Dynamic Form</h2>
<p>Dynamic forms are composed of one element, <code>&lt;novo-dynamic-form [controls]=&quot;controls&quot;/&gt;</code> and allow you to pass in the controls and form and it will create the form for you.</p>
<h5>Basic</h5>
<p><code-example example="dynamic-form"></code-example></p>
<h5>Vertical</h5>
<p><code-example example="vertical-dynamic-form"></code-example></p>
<h5>Fieldsets</h5>
<p><code-example example="dynamic-form-field-sets"></code-example></p>
<h5>Updating Fields/Status</h5>
<p><code-example example="updating-form"></code-example></p>
<h5>Disabled Field States</h5>
<p><code-example example="disabled-form"></code-example></p>
<h5>Enable/Disable All Fields in Form</h5>
<p><code-example example="enable-disable-all-fields-in-form"></code-example></p>
`,
                    host: { class: 'markdown-page' },
                    standalone: false,
                }]
        }] });
class DateTimePickerExamplesPage {
    constructor() {
        this.params = {};
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: DateTimePickerExamplesPage, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: DateTimePickerExamplesPage, isStandalone: false, selector: "date-time-picker-examples-page", host: { classAttribute: "markdown-page" }, ngImport: i0, template: `<h2>Date Time Picker</h2>
<p><code-example example="date-time"></code-example></p>
<h2>Date Time Input Picker</h2>
<p><code-example example="date-time-input"></code-example></p>
`, isInline: true, dependencies: [{ kind: "component", type: CodeExampleComponent, selector: "code-example", inputs: ["example"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: DateTimePickerExamplesPage, decorators: [{
            type: Component,
            args: [{
                    selector: 'date-time-picker-examples-page',
                    template: `<h2>Date Time Picker</h2>
<p><code-example example="date-time"></code-example></p>
<h2>Date Time Input Picker</h2>
<p><code-example example="date-time-input"></code-example></p>
`,
                    host: { class: 'markdown-page' },
                    standalone: false,
                }]
        }] });
class DateTimePickerDevelopPage {
    constructor() {
        this.params = {};
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: DateTimePickerDevelopPage, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: DateTimePickerDevelopPage, isStandalone: false, selector: "date-time-picker-develop-page", host: { classAttribute: "markdown-page" }, ngImport: i0, template: `<h1>Technical Details</h1>
<ul>
<li><strong>source:</strong> <a href="https://github.com/bullhorn/novo-elements/blob/master/projects/novo-elements/src/elements/date-time-picker">(github)</a></li>
<li><strong>module:</strong> <code>import &#123; NovoDateTimePickerModule &#125; from 'novo-elements';</code></li>
</ul>
<p><strong>Usage</strong></p>
<p>A <code>novo-date-time-picker</code> can be used standalone, but typically it is displayed in an overlay triggered by an input. This component is merely are wrapper around the <code>novo-date-picker</code> and the <code>novo-time-picker</code> components with a transition between them.</p>
<pre><code class="language-html"><span class="hljs-comment">&lt;!-- Deprecated Usage --&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">novo-date-time-picker-input</span> [(<span class="hljs-attr">ngModel</span>)]=<span class="hljs-string">&quot;dateTimeInput&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">novo-date-time-picker-input</span>&gt;</span>
</code></pre>
<pre><code class="language-html"><span class="hljs-comment">&lt;!-- Preferred Usage --&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">novo-field</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">novo-label</span>&gt;</span>Date of Birth<span class="hljs-tag">&lt;/<span class="hljs-name">novo-label</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">novoInput</span> <span class="hljs-attr">dateTimeFormat</span>=<span class="hljs-string">&quot;iso8601&quot;</span> [<span class="hljs-attr">picker</span>]=<span class="hljs-string">&quot;datetimepicker&quot;</span> [(<span class="hljs-attr">ngModel</span>)]=<span class="hljs-string">&quot;date&quot;</span> /&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">novo-picker-toggle</span> <span class="hljs-attr">novoSuffix</span> <span class="hljs-attr">icon</span>=<span class="hljs-string">&quot;calendar&quot;</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">novo-date-time-picker</span> #<span class="hljs-attr">datetimepicker</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">novo-date-time-picker</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">novo-picker-toggle</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">novo-field</span>&gt;</span>
</code></pre>
<h1>Roadmap</h1>
<ul class="contains-task-list">
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> Make color and theming consistent</li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> Dark Mode</li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> Remove <code>DateTimePickerInputElement</code></li>
</ul>
<h1>Changelog</h1>
<h3>5.0.0</h3>
<p><strong>Deprecation</strong></p>
<ul>
<li><code>novo-date-time-picker-input</code> should no longer be used, instead use a <code>novo-field</code> with a picker toggle shown in the preferred usage example above.</li>
</ul>
<h1>Directives</h1>
<h2>NovoDateTimeFormatDirective <code>[dateTimeFormat]</code></h2>
<p>The <code>[dateTimeFormat]</code> directive is used to specify the format the input should display &quot;date&quot; values in. Currently we are using <code>imask</code> and <code>angular-imask</code> library to provide these formats and create the auto-correction/completion when typing into the input field.</p>
<h1>Components</h1>
<h2>NovoDateTimePickerInputElement <code>novo-date-picker-input</code></h2>
<p>The <code>novo-date-time-picker-input</code> is deprecated, but it still used with the dynamic form containers. It is a convienent wrapper componet for an input with a date picker trigger. Most inputs are just pass throughs to the <code>novo-date-picker</code> or <code>novo-time-picker</code> instance.</p>
<h3>Properties</h3>
<p><props-table component="NovoDatePickerInputElement"></props-table></p>
<h2>NovoDateTimePickerElement <code>novo-date-time-picker</code></h2>
<p>The <code>novo-spinner</code> component displays the circular loading visual, usually used within the button to indicate the action is performing but not complete yet.</p>
<h3>Properties</h3>
<p><props-table component="NovoDatePickerElement"></props-table></p>
`, isInline: true, dependencies: [{ kind: "component", type: PropsTableComponent, selector: "props-table", inputs: ["component", "kinds"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: DateTimePickerDevelopPage, decorators: [{
            type: Component,
            args: [{
                    selector: 'date-time-picker-develop-page',
                    template: `<h1>Technical Details</h1>
<ul>
<li><strong>source:</strong> <a href="https://github.com/bullhorn/novo-elements/blob/master/projects/novo-elements/src/elements/date-time-picker">(github)</a></li>
<li><strong>module:</strong> <code>import &#123; NovoDateTimePickerModule &#125; from 'novo-elements';</code></li>
</ul>
<p><strong>Usage</strong></p>
<p>A <code>novo-date-time-picker</code> can be used standalone, but typically it is displayed in an overlay triggered by an input. This component is merely are wrapper around the <code>novo-date-picker</code> and the <code>novo-time-picker</code> components with a transition between them.</p>
<pre><code class="language-html"><span class="hljs-comment">&lt;!-- Deprecated Usage --&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">novo-date-time-picker-input</span> [(<span class="hljs-attr">ngModel</span>)]=<span class="hljs-string">&quot;dateTimeInput&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">novo-date-time-picker-input</span>&gt;</span>
</code></pre>
<pre><code class="language-html"><span class="hljs-comment">&lt;!-- Preferred Usage --&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">novo-field</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">novo-label</span>&gt;</span>Date of Birth<span class="hljs-tag">&lt;/<span class="hljs-name">novo-label</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">novoInput</span> <span class="hljs-attr">dateTimeFormat</span>=<span class="hljs-string">&quot;iso8601&quot;</span> [<span class="hljs-attr">picker</span>]=<span class="hljs-string">&quot;datetimepicker&quot;</span> [(<span class="hljs-attr">ngModel</span>)]=<span class="hljs-string">&quot;date&quot;</span> /&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">novo-picker-toggle</span> <span class="hljs-attr">novoSuffix</span> <span class="hljs-attr">icon</span>=<span class="hljs-string">&quot;calendar&quot;</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">novo-date-time-picker</span> #<span class="hljs-attr">datetimepicker</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">novo-date-time-picker</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">novo-picker-toggle</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">novo-field</span>&gt;</span>
</code></pre>
<h1>Roadmap</h1>
<ul class="contains-task-list">
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> Make color and theming consistent</li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> Dark Mode</li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> Remove <code>DateTimePickerInputElement</code></li>
</ul>
<h1>Changelog</h1>
<h3>5.0.0</h3>
<p><strong>Deprecation</strong></p>
<ul>
<li><code>novo-date-time-picker-input</code> should no longer be used, instead use a <code>novo-field</code> with a picker toggle shown in the preferred usage example above.</li>
</ul>
<h1>Directives</h1>
<h2>NovoDateTimeFormatDirective <code>[dateTimeFormat]</code></h2>
<p>The <code>[dateTimeFormat]</code> directive is used to specify the format the input should display &quot;date&quot; values in. Currently we are using <code>imask</code> and <code>angular-imask</code> library to provide these formats and create the auto-correction/completion when typing into the input field.</p>
<h1>Components</h1>
<h2>NovoDateTimePickerInputElement <code>novo-date-picker-input</code></h2>
<p>The <code>novo-date-time-picker-input</code> is deprecated, but it still used with the dynamic form containers. It is a convienent wrapper componet for an input with a date picker trigger. Most inputs are just pass throughs to the <code>novo-date-picker</code> or <code>novo-time-picker</code> instance.</p>
<h3>Properties</h3>
<p><props-table component="NovoDatePickerInputElement"></props-table></p>
<h2>NovoDateTimePickerElement <code>novo-date-time-picker</code></h2>
<p>The <code>novo-spinner</code> component displays the circular loading visual, usually used within the button to indicate the action is performing but not complete yet.</p>
<h3>Properties</h3>
<p><props-table component="NovoDatePickerElement"></props-table></p>
`,
                    host: { class: 'markdown-page' },
                    standalone: false,
                }]
        }] });
class DateTimePickerDesignPage {
    constructor() {
        this.params = {};
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: DateTimePickerDesignPage, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: DateTimePickerDesignPage, isStandalone: false, selector: "date-time-picker-design-page", host: { classAttribute: "markdown-page" }, ngImport: i0, template: `<h2>Usage</h2>
<novo-grid columns="2" align="start" gap="2rem">
<div>
<p>Date Time Pickers allow users to easily select a time and date. It comes in a handful of varieties based on the content of the field.</p>
</div>
<p><img src="assets/images/DateTimePickerOverview.png" alt="DateTimePicker"></p>
</novo-grid>
<h2>Best Practices</h2>
<ul>
<li>Use when a single date selection is required from the user, especially when additional context is around the date selection is needed. e.g. selecting a date within a specific date range.</li>
<li>Always use <code>novo-date-picker-input</code> when part of a larger form.</li>
<li>Only use standalone <code>date-picker</code> as filter for content displayed on the page.</li>
</ul>
<h2>Anatomy</h2>
<novo-grid columns="2" align="start" gap="2rem">
<p><img src="assets/images/DateTimePickerOverview.png" alt="DateTimePicker Anatomy" width="450"></p>
<div>
<ol>
<li>
<p><strong>Container</strong><br>
Defines the layout for the form field (horizontal vs vertical)</p>
</li>
<li>
<p><strong>Input Prefix (Optional element)</strong><br>
An element/icon displayed before the input. eg. $</p>
</li>
<li>
<p><strong>Label</strong><br>
A label for a group of menu actions.</p>
</li>
<li>
<p><strong>Input Control</strong><br>
The element representing the input control: <code>input</code>, <code>select</code>, etc...</p>
</li>
<li>
<p><strong>Input Suffix (Optional element)</strong><br>
The element/icon displayed after the input. eg. calendar icon for date picker.</p>
</li>
<li>
<p><strong>Helper/Error text (Optional element)</strong><br>
Caption text to display helpful information, warnings, or errors.</p>
</li>
</ol>
</div>
</novo-grid>
<h2>Best Practices</h2>
<ul>
<li>Use spinner to display that an action invoked by the user is performing but not complete.</li>
<li>Use loading when loading data from the server to intialize content.</li>
<li>If a spinner is triggered by a button, place the spinner in the button, and disable the button while the spinner is visible.</li>
<li>If only a portion of a page is loading new content or being updated, place the loading element in that part of the page.</li>
<li>There should only be a single loading element on a page at one time.</li>
</ul>
<h2>Accessibility</h2>
<p><strong>Implementation</strong></p>
<p>Always include an <code>alt</code> attribute describing the information that is visually displayed in the image.</p>
`, isInline: true, dependencies: [{ kind: "component", type: i2$1.NovoGridElement, selector: "novo-grid", inputs: ["direction", "align", "justify", "columns"] }, { kind: "directive", type: i2$1.GapDirective, selector: "[gap]", inputs: ["gap"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: DateTimePickerDesignPage, decorators: [{
            type: Component,
            args: [{
                    selector: 'date-time-picker-design-page',
                    template: `<h2>Usage</h2>
<novo-grid columns="2" align="start" gap="2rem">
<div>
<p>Date Time Pickers allow users to easily select a time and date. It comes in a handful of varieties based on the content of the field.</p>
</div>
<p><img src="assets/images/DateTimePickerOverview.png" alt="DateTimePicker"></p>
</novo-grid>
<h2>Best Practices</h2>
<ul>
<li>Use when a single date selection is required from the user, especially when additional context is around the date selection is needed. e.g. selecting a date within a specific date range.</li>
<li>Always use <code>novo-date-picker-input</code> when part of a larger form.</li>
<li>Only use standalone <code>date-picker</code> as filter for content displayed on the page.</li>
</ul>
<h2>Anatomy</h2>
<novo-grid columns="2" align="start" gap="2rem">
<p><img src="assets/images/DateTimePickerOverview.png" alt="DateTimePicker Anatomy" width="450"></p>
<div>
<ol>
<li>
<p><strong>Container</strong><br>
Defines the layout for the form field (horizontal vs vertical)</p>
</li>
<li>
<p><strong>Input Prefix (Optional element)</strong><br>
An element/icon displayed before the input. eg. $</p>
</li>
<li>
<p><strong>Label</strong><br>
A label for a group of menu actions.</p>
</li>
<li>
<p><strong>Input Control</strong><br>
The element representing the input control: <code>input</code>, <code>select</code>, etc...</p>
</li>
<li>
<p><strong>Input Suffix (Optional element)</strong><br>
The element/icon displayed after the input. eg. calendar icon for date picker.</p>
</li>
<li>
<p><strong>Helper/Error text (Optional element)</strong><br>
Caption text to display helpful information, warnings, or errors.</p>
</li>
</ol>
</div>
</novo-grid>
<h2>Best Practices</h2>
<ul>
<li>Use spinner to display that an action invoked by the user is performing but not complete.</li>
<li>Use loading when loading data from the server to intialize content.</li>
<li>If a spinner is triggered by a button, place the spinner in the button, and disable the button while the spinner is visible.</li>
<li>If only a portion of a page is loading new content or being updated, place the loading element in that part of the page.</li>
<li>There should only be a single loading element on a page at one time.</li>
</ul>
<h2>Accessibility</h2>
<p><strong>Implementation</strong></p>
<p>Always include an <code>alt</code> attribute describing the information that is visually displayed in the image.</p>
`,
                    host: { class: 'markdown-page' },
                    standalone: false,
                }]
        }] });
class DatePickerExamplesPage {
    constructor() {
        this.params = {};
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: DatePickerExamplesPage, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: DatePickerExamplesPage, isStandalone: false, selector: "date-picker-examples-page", host: { classAttribute: "markdown-page" }, ngImport: i0, template: `<h2>Date Picker Standalone</h2>
<p><code-example example="date-picker"></code-example></p>
<h2>Date Picker Input</h2>
<p><code-example example="date-picker-input"></code-example></p>
<h2>Range Picker</h2>
<p><code-example example="date-range-input"></code-example></p>
<h2>Customizing Week Start</h2>
<p><code-example example="week-start"></code-example></p>
<h5>Date Picker Limits</h5>
<p><code-example example="date-picker-limits"></code-example></p>
<h2>Different Locale</h2>
<p>TBD</p>
`, isInline: true, dependencies: [{ kind: "component", type: CodeExampleComponent, selector: "code-example", inputs: ["example"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: DatePickerExamplesPage, decorators: [{
            type: Component,
            args: [{
                    selector: 'date-picker-examples-page',
                    template: `<h2>Date Picker Standalone</h2>
<p><code-example example="date-picker"></code-example></p>
<h2>Date Picker Input</h2>
<p><code-example example="date-picker-input"></code-example></p>
<h2>Range Picker</h2>
<p><code-example example="date-range-input"></code-example></p>
<h2>Customizing Week Start</h2>
<p><code-example example="week-start"></code-example></p>
<h5>Date Picker Limits</h5>
<p><code-example example="date-picker-limits"></code-example></p>
<h2>Different Locale</h2>
<p>TBD</p>
`,
                    host: { class: 'markdown-page' },
                    standalone: false,
                }]
        }] });
class DatePickerDevelopPage {
    constructor() {
        this.params = {};
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: DatePickerDevelopPage, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: DatePickerDevelopPage, isStandalone: false, selector: "date-picker-develop-page", host: { classAttribute: "markdown-page" }, ngImport: i0, template: `<h1>Technical Details</h1>
<ul>
<li><strong>source:</strong> <a href="https://github.com/bullhorn/novo-elements/blob/master/projects/novo-elements/src/elements/date-picker">(github)</a></li>
<li><strong>module:</strong> <code>import &#123; NovoDatePickerModule &#125; from 'novo-elements';</code></li>
</ul>
<p><strong>Usage</strong></p>
<p>A <code>date-picker</code> can be used standalone, but typically it is displayed in an overlay triggered by an input. As of <code>v5</code> we have abstracted the functionality of the date picker it to 3 separate parts, the <code>date-picker</code> component to allow the selection of dates, the <code>dateFormat</code> directive to format dates to the correct format to display in the input, and the <code>novo-picker-toggle</code> which is used by various components to add an overlay to any <code>novo-field</code>.</p>
<p>The <code>date-picker</code> is built using the <code>novo-calendar</code> component examples of which can be seen <a href="/components/calendar">here</a>.</p>
<pre><code class="language-html"><span class="hljs-comment">&lt;!-- Deprecated Usage --&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">novo-date-picker-input</span> [(<span class="hljs-attr">ngModel</span>)]=<span class="hljs-string">&quot;date&quot;</span> <span class="hljs-attr">format</span>=<span class="hljs-string">&quot;mm/dd/yyyy&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">novo-date-picker-input</span>&gt;</span>
</code></pre>
<pre><code class="language-html"><span class="hljs-comment">&lt;!-- Preferred Usage --&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">novo-field</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">novo-label</span>&gt;</span>Date of Birth<span class="hljs-tag">&lt;/<span class="hljs-name">novo-label</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">novoInput</span> <span class="hljs-attr">dateFormat</span>=<span class="hljs-string">&quot;iso8601&quot;</span> [<span class="hljs-attr">picker</span>]=<span class="hljs-string">&quot;datepicker&quot;</span> [(<span class="hljs-attr">ngModel</span>)]=<span class="hljs-string">&quot;date&quot;</span> /&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">novo-picker-toggle</span> <span class="hljs-attr">novoSuffix</span> <span class="hljs-attr">icon</span>=<span class="hljs-string">&quot;calendar&quot;</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">novo-date-picker</span> #<span class="hljs-attr">datepicker</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">novo-date-picker</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">novo-picker-toggle</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">novo-field</span>&gt;</span>
</code></pre>
<h1>Roadmap</h1>
<ul class="contains-task-list">
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> Make color and theming consistent</li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> Dark Mode</li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> Remove <code>DatePickerInputElement</code></li>
</ul>
<h1>Changelog</h1>
<h3>5.0.0</h3>
<p><strong>Deprecation</strong></p>
<ul>
<li><code>novo-date-picker-input</code> should no longer be used, instead use a <code>novo-field</code> with a date-picker toggle shown in the preferred usage example above.</li>
</ul>
<h1>Directives</h1>
<h2>NovoDateFormatDirective <code>[dateFormat]</code></h2>
<p>The <code>[dateFormat]</code> directive is used to specify the format the input should display &quot;date&quot; values in. Currently we are using <code>imask</code> and <code>angular-imask</code> library to provide these formats and create the auto-correction/completion when typing into the input field.</p>
<h1>Components</h1>
<h2>NovoDatePickerInputElement <code>novo-date-picker-input</code></h2>
<p>The <code>novo-date-picker-input</code> is deprecated, but it still used with the dynamic form containers. It is a convienent wrapper componet for an input with a date picker trigger. Most inputs are just pass throughs to the <code>novo-date-picker</code> instance.</p>
<h3>Properties</h3>
<p><props-table component="NovoDatePickerInputElement"></props-table></p>
<h2>NovoDatePickerElement <code>novo-date-picker</code></h2>
<p>The <code>novo-spinner</code> component displays the circular loading visual, usually used within the button to indicate the action is performing but not complete yet.</p>
<h3>Properties</h3>
<p><props-table component="NovoDatePickerElement"></props-table></p>
`, isInline: true, dependencies: [{ kind: "component", type: PropsTableComponent, selector: "props-table", inputs: ["component", "kinds"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: DatePickerDevelopPage, decorators: [{
            type: Component,
            args: [{
                    selector: 'date-picker-develop-page',
                    template: `<h1>Technical Details</h1>
<ul>
<li><strong>source:</strong> <a href="https://github.com/bullhorn/novo-elements/blob/master/projects/novo-elements/src/elements/date-picker">(github)</a></li>
<li><strong>module:</strong> <code>import &#123; NovoDatePickerModule &#125; from 'novo-elements';</code></li>
</ul>
<p><strong>Usage</strong></p>
<p>A <code>date-picker</code> can be used standalone, but typically it is displayed in an overlay triggered by an input. As of <code>v5</code> we have abstracted the functionality of the date picker it to 3 separate parts, the <code>date-picker</code> component to allow the selection of dates, the <code>dateFormat</code> directive to format dates to the correct format to display in the input, and the <code>novo-picker-toggle</code> which is used by various components to add an overlay to any <code>novo-field</code>.</p>
<p>The <code>date-picker</code> is built using the <code>novo-calendar</code> component examples of which can be seen <a href="/components/calendar">here</a>.</p>
<pre><code class="language-html"><span class="hljs-comment">&lt;!-- Deprecated Usage --&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">novo-date-picker-input</span> [(<span class="hljs-attr">ngModel</span>)]=<span class="hljs-string">&quot;date&quot;</span> <span class="hljs-attr">format</span>=<span class="hljs-string">&quot;mm/dd/yyyy&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">novo-date-picker-input</span>&gt;</span>
</code></pre>
<pre><code class="language-html"><span class="hljs-comment">&lt;!-- Preferred Usage --&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">novo-field</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">novo-label</span>&gt;</span>Date of Birth<span class="hljs-tag">&lt;/<span class="hljs-name">novo-label</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">novoInput</span> <span class="hljs-attr">dateFormat</span>=<span class="hljs-string">&quot;iso8601&quot;</span> [<span class="hljs-attr">picker</span>]=<span class="hljs-string">&quot;datepicker&quot;</span> [(<span class="hljs-attr">ngModel</span>)]=<span class="hljs-string">&quot;date&quot;</span> /&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">novo-picker-toggle</span> <span class="hljs-attr">novoSuffix</span> <span class="hljs-attr">icon</span>=<span class="hljs-string">&quot;calendar&quot;</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">novo-date-picker</span> #<span class="hljs-attr">datepicker</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">novo-date-picker</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">novo-picker-toggle</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">novo-field</span>&gt;</span>
</code></pre>
<h1>Roadmap</h1>
<ul class="contains-task-list">
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> Make color and theming consistent</li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> Dark Mode</li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> Remove <code>DatePickerInputElement</code></li>
</ul>
<h1>Changelog</h1>
<h3>5.0.0</h3>
<p><strong>Deprecation</strong></p>
<ul>
<li><code>novo-date-picker-input</code> should no longer be used, instead use a <code>novo-field</code> with a date-picker toggle shown in the preferred usage example above.</li>
</ul>
<h1>Directives</h1>
<h2>NovoDateFormatDirective <code>[dateFormat]</code></h2>
<p>The <code>[dateFormat]</code> directive is used to specify the format the input should display &quot;date&quot; values in. Currently we are using <code>imask</code> and <code>angular-imask</code> library to provide these formats and create the auto-correction/completion when typing into the input field.</p>
<h1>Components</h1>
<h2>NovoDatePickerInputElement <code>novo-date-picker-input</code></h2>
<p>The <code>novo-date-picker-input</code> is deprecated, but it still used with the dynamic form containers. It is a convienent wrapper componet for an input with a date picker trigger. Most inputs are just pass throughs to the <code>novo-date-picker</code> instance.</p>
<h3>Properties</h3>
<p><props-table component="NovoDatePickerInputElement"></props-table></p>
<h2>NovoDatePickerElement <code>novo-date-picker</code></h2>
<p>The <code>novo-spinner</code> component displays the circular loading visual, usually used within the button to indicate the action is performing but not complete yet.</p>
<h3>Properties</h3>
<p><props-table component="NovoDatePickerElement"></props-table></p>
`,
                    host: { class: 'markdown-page' },
                    standalone: false,
                }]
        }] });
class DatePickerDesignPage {
    constructor() {
        this.params = {};
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: DatePickerDesignPage, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: DatePickerDesignPage, isStandalone: false, selector: "date-picker-design-page", host: { classAttribute: "markdown-page" }, ngImport: i0, template: `<h2>Usage</h2>
<novo-grid columns="2" align="start" gap="2rem">
<div>
<p>Date Pickers allow users to easily select a date. It comes in a handful of varieties based on the content of the field.</p>
</div>
<p><img src="assets/images/DatePickerOverview.png" alt="DatePicker"></p>
</novo-grid>
<h2>Best Practices</h2>
<ul>
<li>Use when a single date selection is required from the user, especially when additional context is around the date selection is needed. e.g. selecting a date within a specific date range.</li>
<li>Always use <code>novo-date-picker-input</code> when part of a larger form.</li>
<li>Only use standalone <code>date-picker</code> as filter for content displayed on the page.</li>
</ul>
<h2>Anatomy</h2>
<novo-grid columns="2" align="start" gap="2rem">
<p><img src="assets/images/DatePickerOverview.png" alt="DatePicker Anatomy" width="450"></p>
<div>
<ol>
<li>
<p><strong>Container</strong><br>
Defines the layout for the form field (horizontal vs vertical)</p>
</li>
<li>
<p><strong>Input Prefix (Optional element)</strong><br>
An element/icon displayed before the input. eg. $</p>
</li>
<li>
<p><strong>Label</strong><br>
A label for a group of menu actions.</p>
</li>
<li>
<p><strong>Input Control</strong><br>
The element representing the input control: <code>input</code>, <code>select</code>, etc...</p>
</li>
<li>
<p><strong>Input Suffix (Optional element)</strong><br>
The element/icon displayed after the input. eg. calendar icon for date picker.</p>
</li>
<li>
<p><strong>Helper/Error text (Optional element)</strong><br>
Caption text to display helpful information, warnings, or errors.</p>
</li>
</ol>
</div>
</novo-grid>
<h2>Best Practices</h2>
<ul>
<li>Use spinner to display that an action invoked by the user is performing but not complete.</li>
<li>Use loading when loading data from the server to intialize content.</li>
<li>If a spinner is triggered by a button, place the spinner in the button, and disable the button while the spinner is visible.</li>
<li>If only a portion of a page is loading new content or being updated, place the loading element in that part of the page.</li>
<li>There should only be a single loading element on a page at one time.</li>
</ul>
<h2>Accessibility</h2>
<p><strong>Implementation</strong></p>
<p>Always include an <code>alt</code> attribute describing the information that is visually displayed in the image.</p>
`, isInline: true, dependencies: [{ kind: "component", type: i2$1.NovoGridElement, selector: "novo-grid", inputs: ["direction", "align", "justify", "columns"] }, { kind: "directive", type: i2$1.GapDirective, selector: "[gap]", inputs: ["gap"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: DatePickerDesignPage, decorators: [{
            type: Component,
            args: [{
                    selector: 'date-picker-design-page',
                    template: `<h2>Usage</h2>
<novo-grid columns="2" align="start" gap="2rem">
<div>
<p>Date Pickers allow users to easily select a date. It comes in a handful of varieties based on the content of the field.</p>
</div>
<p><img src="assets/images/DatePickerOverview.png" alt="DatePicker"></p>
</novo-grid>
<h2>Best Practices</h2>
<ul>
<li>Use when a single date selection is required from the user, especially when additional context is around the date selection is needed. e.g. selecting a date within a specific date range.</li>
<li>Always use <code>novo-date-picker-input</code> when part of a larger form.</li>
<li>Only use standalone <code>date-picker</code> as filter for content displayed on the page.</li>
</ul>
<h2>Anatomy</h2>
<novo-grid columns="2" align="start" gap="2rem">
<p><img src="assets/images/DatePickerOverview.png" alt="DatePicker Anatomy" width="450"></p>
<div>
<ol>
<li>
<p><strong>Container</strong><br>
Defines the layout for the form field (horizontal vs vertical)</p>
</li>
<li>
<p><strong>Input Prefix (Optional element)</strong><br>
An element/icon displayed before the input. eg. $</p>
</li>
<li>
<p><strong>Label</strong><br>
A label for a group of menu actions.</p>
</li>
<li>
<p><strong>Input Control</strong><br>
The element representing the input control: <code>input</code>, <code>select</code>, etc...</p>
</li>
<li>
<p><strong>Input Suffix (Optional element)</strong><br>
The element/icon displayed after the input. eg. calendar icon for date picker.</p>
</li>
<li>
<p><strong>Helper/Error text (Optional element)</strong><br>
Caption text to display helpful information, warnings, or errors.</p>
</li>
</ol>
</div>
</novo-grid>
<h2>Best Practices</h2>
<ul>
<li>Use spinner to display that an action invoked by the user is performing but not complete.</li>
<li>Use loading when loading data from the server to intialize content.</li>
<li>If a spinner is triggered by a button, place the spinner in the button, and disable the button while the spinner is visible.</li>
<li>If only a portion of a page is loading new content or being updated, place the loading element in that part of the page.</li>
<li>There should only be a single loading element on a page at one time.</li>
</ul>
<h2>Accessibility</h2>
<p><strong>Implementation</strong></p>
<p>Always include an <code>alt</code> attribute describing the information that is visually displayed in the image.</p>
`,
                    host: { class: 'markdown-page' },
                    standalone: false,
                }]
        }] });
class ColorPickerPage {
    constructor() {
        this.params = {};
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: ColorPickerPage, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: ColorPickerPage, isStandalone: false, selector: "color-picker-page", host: { classAttribute: "markdown-page" }, ngImport: i0, template: `<h1>Color Pickers</h1>
<p>These allow users to easily select a color swatch. It comes in a handful of varieties based on the content of the field.</p>
<h2>Color Picker <a href="https://github.com/bullhorn/novo-elements/blob/master/projects/novo-elements/src/elements/date-picker">(source)</a></h2>
<p>The color picker is used to select a color. It appears in all date picker fields.</p>
<h5>Basic Usage</h5>
<p><code-example example="color-picker"></code-example></p>
<h5>Color Input Example</h5>
<p><code-example example="color-input"></code-example></p>
`, isInline: true, dependencies: [{ kind: "component", type: CodeExampleComponent, selector: "code-example", inputs: ["example"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: ColorPickerPage, decorators: [{
            type: Component,
            args: [{
                    selector: 'color-picker-page',
                    template: `<h1>Color Pickers</h1>
<p>These allow users to easily select a color swatch. It comes in a handful of varieties based on the content of the field.</p>
<h2>Color Picker <a href="https://github.com/bullhorn/novo-elements/blob/master/projects/novo-elements/src/elements/date-picker">(source)</a></h2>
<p>The color picker is used to select a color. It appears in all date picker fields.</p>
<h5>Basic Usage</h5>
<p><code-example example="color-picker"></code-example></p>
<h5>Color Input Example</h5>
<p><code-example example="color-input"></code-example></p>
`,
                    host: { class: 'markdown-page' },
                    standalone: false,
                }]
        }] });
class CkEditorPage {
    constructor() {
        this.params = {};
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: CkEditorPage, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: CkEditorPage, isStandalone: false, selector: "ck-editor-page", host: { classAttribute: "markdown-page" }, ngImport: i0, template: `<h1>CK Editor <a href="https://github.com/bullhorn/novo-elements/blob/master/projects/novo-elements/src/addons/ckeditor">(source)</a></h1>
<p>Basic HTML editor using CK Editor.</p>
<h5>Basic Example</h5>
<p><code-example example="basic-editor"></code-example></p>
<h5>Minimal Example</h5>
<p><code-example example="minimal-editor"></code-example></p>
`, isInline: true, dependencies: [{ kind: "component", type: CodeExampleComponent, selector: "code-example", inputs: ["example"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: CkEditorPage, decorators: [{
            type: Component,
            args: [{
                    selector: 'ck-editor-page',
                    template: `<h1>CK Editor <a href="https://github.com/bullhorn/novo-elements/blob/master/projects/novo-elements/src/addons/ckeditor">(source)</a></h1>
<p>Basic HTML editor using CK Editor.</p>
<h5>Basic Example</h5>
<p><code-example example="basic-editor"></code-example></p>
<h5>Minimal Example</h5>
<p><code-example example="minimal-editor"></code-example></p>
`,
                    host: { class: 'markdown-page' },
                    standalone: false,
                }]
        }] });
class ChipsExamplesPage {
    constructor() {
        this.params = {};
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: ChipsExamplesPage, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: ChipsExamplesPage, isStandalone: false, selector: "chips-examples-page", host: { classAttribute: "markdown-page" }, ngImport: i0, template: `<h2>Chip Usage</h2>
<p>The <code>chip</code> element can be used for several purposes, such as tags, badges, filters, or declare multi-inputs.</p>
<p><code-example example="chip-usage"></code-example></p>
<h2>Basic Examples</h2>
<p>By clicking on the <code>chips</code> element, the options list will be displayed. Select any of the options by clicking on the item in the list. The value selected will be added to the list of selected values.</p>
<p><code-example example="basic-chips"></code-example></p>
<h2>Allow Custom Values</h2>
<p>With the <code>allowCustomValues</code> input property set to true, the user is allowed to set custom values by simply typing into the input and pressing enter.</p>
<p><code-example example="custom-values"></code-example></p>
<h2>Async Examples</h2>
<p>By clicking on the <code>chips</code> element, the options list will be displayed. Select any of the options by clicking on the item in the list. The value selected will be added to the list of selected values.</p>
<p><code-example example="async-chips"></code-example></p>
<h2>Formatted Examples</h2>
<p>By clicking on the <code>chips</code> element, the options list will be displayed. Select any of the options by clicking on the item in the list. The value selected will be added to the list of selected values.</p>
<p><code-example example="formatted-chips"></code-example></p>
<h2>Options Closing Example</h2>
<p>By clicking on the <code>chips</code> element, the options list will be displayed. Select any of the options by clicking on the item in the list. The value selected will be added to the list of selected values and the options list will be removed.</p>
<p><code-example example="close-on-select-chips"></code-example></p>
<h2>Grouped Multi Picker (categories) with Chips</h2>
<p>Having custom templates makes it easy to customize the functionality of the picker, here is an example of a category selector</p>
<p><code-example example="grouped-multi-picker"></code-example></p>
<h2>Row Chips Example</h2>
<p>By clicking on the <code>row-chips</code> element, the options list will be displayed.  Select any of the options by clicking on the item in the list.  The value selected will be added to the list of selected values as a new row. By clicking the delete icon at the end of the row, the row will be removed from the list of selected values.</p>
<p><code-example example="row-chips"></code-example></p>
<h2>Hide Chips Example</h2>
<p>Setting the <code>hiddenChipsLimit</code> property via the <code>source</code> Input will limit the number of chips shown to the <code>hiddenChipsLimit</code> set. A clickable suffix label will toggle the visibility of the hidden chips.</p>
<p><code-example example="hide-chips"></code-example></p>
`, isInline: true, dependencies: [{ kind: "component", type: CodeExampleComponent, selector: "code-example", inputs: ["example"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: ChipsExamplesPage, decorators: [{
            type: Component,
            args: [{
                    selector: 'chips-examples-page',
                    template: `<h2>Chip Usage</h2>
<p>The <code>chip</code> element can be used for several purposes, such as tags, badges, filters, or declare multi-inputs.</p>
<p><code-example example="chip-usage"></code-example></p>
<h2>Basic Examples</h2>
<p>By clicking on the <code>chips</code> element, the options list will be displayed. Select any of the options by clicking on the item in the list. The value selected will be added to the list of selected values.</p>
<p><code-example example="basic-chips"></code-example></p>
<h2>Allow Custom Values</h2>
<p>With the <code>allowCustomValues</code> input property set to true, the user is allowed to set custom values by simply typing into the input and pressing enter.</p>
<p><code-example example="custom-values"></code-example></p>
<h2>Async Examples</h2>
<p>By clicking on the <code>chips</code> element, the options list will be displayed. Select any of the options by clicking on the item in the list. The value selected will be added to the list of selected values.</p>
<p><code-example example="async-chips"></code-example></p>
<h2>Formatted Examples</h2>
<p>By clicking on the <code>chips</code> element, the options list will be displayed. Select any of the options by clicking on the item in the list. The value selected will be added to the list of selected values.</p>
<p><code-example example="formatted-chips"></code-example></p>
<h2>Options Closing Example</h2>
<p>By clicking on the <code>chips</code> element, the options list will be displayed. Select any of the options by clicking on the item in the list. The value selected will be added to the list of selected values and the options list will be removed.</p>
<p><code-example example="close-on-select-chips"></code-example></p>
<h2>Grouped Multi Picker (categories) with Chips</h2>
<p>Having custom templates makes it easy to customize the functionality of the picker, here is an example of a category selector</p>
<p><code-example example="grouped-multi-picker"></code-example></p>
<h2>Row Chips Example</h2>
<p>By clicking on the <code>row-chips</code> element, the options list will be displayed.  Select any of the options by clicking on the item in the list.  The value selected will be added to the list of selected values as a new row. By clicking the delete icon at the end of the row, the row will be removed from the list of selected values.</p>
<p><code-example example="row-chips"></code-example></p>
<h2>Hide Chips Example</h2>
<p>Setting the <code>hiddenChipsLimit</code> property via the <code>source</code> Input will limit the number of chips shown to the <code>hiddenChipsLimit</code> set. A clickable suffix label will toggle the visibility of the hidden chips.</p>
<p><code-example example="hide-chips"></code-example></p>
`,
                    host: { class: 'markdown-page' },
                    standalone: false,
                }]
        }] });
class ChipsDevelopPage {
    constructor() {
        this.params = {};
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: ChipsDevelopPage, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: ChipsDevelopPage, isStandalone: false, selector: "chips-develop-page", host: { classAttribute: "markdown-page" }, ngImport: i0, template: `<h1>Technical Details</h1>
<ul>
<li><strong>source:</strong> <a href="https://github.com/bullhorn/novo-elements/blob/master/projects/novo-elements/src/elements/chips">(github)</a></li>
<li><strong>module:</strong> <strong>part of</strong> <code>NovoChipsModule</code></li>
</ul>
<p><strong>Usage</strong></p>
<pre><code class="language-html"><span class="hljs-tag">&lt;<span class="hljs-name">novo-chip-list</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">novo-chip</span>&gt;</span>Celtics<span class="hljs-tag">&lt;/<span class="hljs-name">novo-chips</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">novo-chip</span>&gt;</span>Bulls<span class="hljs-tag">&lt;/<span class="hljs-name">novo-chips</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">novo-chip-list</span>&gt;</span>
</code></pre>
<h1>Roadmap</h1>
<ul class="contains-task-list">
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"> Dark Mode</li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"> Chip List</li>
</ul>
<h1>Changelog</h1>
<h3>6.0.0</h3>
<p>Chips are now separated into their atomic parts: <code>novo-chip</code>, <code>novo-chip-list</code>, <code>novo-chip-input</code>.</p>
<h1>Components</h1>
<h2>NovoChipElement <code>novo-chip</code></h2>
<p>The <code>novo-chip</code> component is the lowest level component for the chips module.  Contains all the styles contained with a single chip.  This component can start being used for more use-cases other than the multi-select picker.</p>
<h3>Properties</h3>
<p><props-table component="NovoChipElement"></props-table></p>
<h2>NovoChipListElement <code>novo-chip-list</code></h2>
<p>The <code>novo-chip-list</code> is just a container to wrap many chips within.  This should control basic flow and layout of the contained chips.</p>
<h3>Properties</h3>
<p><props-table component="NovoChipListElement"></props-table></p>
`, isInline: true, dependencies: [{ kind: "component", type: PropsTableComponent, selector: "props-table", inputs: ["component", "kinds"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: ChipsDevelopPage, decorators: [{
            type: Component,
            args: [{
                    selector: 'chips-develop-page',
                    template: `<h1>Technical Details</h1>
<ul>
<li><strong>source:</strong> <a href="https://github.com/bullhorn/novo-elements/blob/master/projects/novo-elements/src/elements/chips">(github)</a></li>
<li><strong>module:</strong> <strong>part of</strong> <code>NovoChipsModule</code></li>
</ul>
<p><strong>Usage</strong></p>
<pre><code class="language-html"><span class="hljs-tag">&lt;<span class="hljs-name">novo-chip-list</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">novo-chip</span>&gt;</span>Celtics<span class="hljs-tag">&lt;/<span class="hljs-name">novo-chips</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">novo-chip</span>&gt;</span>Bulls<span class="hljs-tag">&lt;/<span class="hljs-name">novo-chips</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">novo-chip-list</span>&gt;</span>
</code></pre>
<h1>Roadmap</h1>
<ul class="contains-task-list">
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"> Dark Mode</li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"> Chip List</li>
</ul>
<h1>Changelog</h1>
<h3>6.0.0</h3>
<p>Chips are now separated into their atomic parts: <code>novo-chip</code>, <code>novo-chip-list</code>, <code>novo-chip-input</code>.</p>
<h1>Components</h1>
<h2>NovoChipElement <code>novo-chip</code></h2>
<p>The <code>novo-chip</code> component is the lowest level component for the chips module.  Contains all the styles contained with a single chip.  This component can start being used for more use-cases other than the multi-select picker.</p>
<h3>Properties</h3>
<p><props-table component="NovoChipElement"></props-table></p>
<h2>NovoChipListElement <code>novo-chip-list</code></h2>
<p>The <code>novo-chip-list</code> is just a container to wrap many chips within.  This should control basic flow and layout of the contained chips.</p>
<h3>Properties</h3>
<p><props-table component="NovoChipListElement"></props-table></p>
`,
                    host: { class: 'markdown-page' },
                    standalone: false,
                }]
        }] });
class ChipsDesignPage {
    constructor() {
        this.params = {};
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: ChipsDesignPage, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: ChipsDesignPage, isStandalone: false, selector: "chips-design-page", host: { classAttribute: "markdown-page" }, ngImport: i0, template: `<h2>Usage</h2>
<novo-grid columns="2" align="start" gap="2rem">
<div>
<p>Chips show the user that a view or component represents data from multiple contexts. They can present as keywords, people or selected values, whether as an form input or filter criteria.</p>
</div>
<img src="assets/images/ChipsOverview.png"/>
<div>
<h3>Use When</h3>
<ul class="contains-do-list">
<li class="bullhorn-do-item"><novo-icon color="grass" mr="md" size="md">check</novo-icon><novo-text color="grass"> When you can select multiple items in a picker and you have selected the item.</novo-text></li>
</ul>
</div>
<div>
<h3>Don′t Use When</h3>
<ul class="contains-do-list">
<li class="bullhorn-do-item"><novo-icon color="grapefruit" mr="md" size="md">times</novo-icon><novo-text color="grapefruit"> When the user is only allowed to make a single selection from a picker input.</novo-text></li>
</ul>
</div>
</novo-grid>
<h2>Anatomy</h2>
<novo-grid columns="2" align="start" gap="2rem">
<img src="assets/images/ChipsAnatomy.png" width="450">
<div>
<ol>
<li>
<p><strong>Container</strong><br>
This defines the boundaries of the chip.</p>
</li>
<li>
<p><strong>Remove Button (Optional)</strong><br>
Chips that can be removed should include the ‘close’ icon.</p>
</li>
<li>
<p><strong>Text</strong><br>
This will contain the display value of the chip.</p>
</li>
<li>
<p><strong>Indicator/Avatar/Icon</strong><br>
To convey additional context to the user about the type of content, use the Chip Indicator. ie, This should be set to the contact icon and color when displaying contact data vs the candidate icon and color when the Chip represents a selected candidate</p>
</li>
<li>
<p><strong>Preview (optional)</strong><br>
Additional details can be displayed in a Chip Preview PopOver, see [New Component]</p>
</li>
</ol>
</div>
</novo-grid>
<h2>Behaviors</h2>
<novo-grid columns="2" align="start" gap="2rem">
<blockquote>
<div class="p"><strong>Text Overflow</strong></div>
<div class="p">When the chip text is too long for the available horizontal space, it truncates. The full text should be revealed with a tooltip on hover.</div>
</blockquote>
<blockquote>
<div class="p"><strong>Chip List Overflow</strong></div>
<div class="p">When horizontal space is limited in a chip list, the individual chips wrap to form another line.</div>
</blockquote>
</novo-grid>
<h2>Accessibility</h2>
<p><strong>KeyBoard Controls</strong></p>
<p>The user should be able to use the <code>up</code> and <code>own</code> arrows to navigate between options and press <code>enter</code> to select the active option.</p>
<p><strong>Implementation</strong></p>
<p>The component should follow the <a href="https://www.w3.org/TR/wai-aria-practices/examples/combobox/aria1.1pattern/listbox-combo.html">ARIA combobox interaction</a> pattern and have a role of <code>combobox</code>.</p>
`, isInline: true, dependencies: [{ kind: "component", type: i2$1.NovoGridElement, selector: "novo-grid", inputs: ["direction", "align", "justify", "columns"] }, { kind: "component", type: i2$1.NovoIconComponent, selector: "novo-icon", inputs: ["raised", "theme", "shape", "color", "size", "smaller", "larger", "alt", "name"] }, { kind: "component", type: i2$1.NovoText, selector: "novo-text,[novo-text]", inputs: ["block"] }, { kind: "directive", type: i2$1.MarginDirective, selector: "[m],[margin],[marginTop],[marginRight],[marginBottom],[marginLeft],[marginX],[marginY],[mt],[mr],[mb],[ml],[mx],[my]", inputs: ["margin", "m", "marginLeft", "ml", "marginRight", "mr", "marginTop", "mt", "marginBottom", "mb", "marginX", "mx", "marginY", "my"] }, { kind: "directive", type: i2$1.GapDirective, selector: "[gap]", inputs: ["gap"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: ChipsDesignPage, decorators: [{
            type: Component,
            args: [{
                    selector: 'chips-design-page',
                    template: `<h2>Usage</h2>
<novo-grid columns="2" align="start" gap="2rem">
<div>
<p>Chips show the user that a view or component represents data from multiple contexts. They can present as keywords, people or selected values, whether as an form input or filter criteria.</p>
</div>
<img src="assets/images/ChipsOverview.png"/>
<div>
<h3>Use When</h3>
<ul class="contains-do-list">
<li class="bullhorn-do-item"><novo-icon color="grass" mr="md" size="md">check</novo-icon><novo-text color="grass"> When you can select multiple items in a picker and you have selected the item.</novo-text></li>
</ul>
</div>
<div>
<h3>Don′t Use When</h3>
<ul class="contains-do-list">
<li class="bullhorn-do-item"><novo-icon color="grapefruit" mr="md" size="md">times</novo-icon><novo-text color="grapefruit"> When the user is only allowed to make a single selection from a picker input.</novo-text></li>
</ul>
</div>
</novo-grid>
<h2>Anatomy</h2>
<novo-grid columns="2" align="start" gap="2rem">
<img src="assets/images/ChipsAnatomy.png" width="450">
<div>
<ol>
<li>
<p><strong>Container</strong><br>
This defines the boundaries of the chip.</p>
</li>
<li>
<p><strong>Remove Button (Optional)</strong><br>
Chips that can be removed should include the ‘close’ icon.</p>
</li>
<li>
<p><strong>Text</strong><br>
This will contain the display value of the chip.</p>
</li>
<li>
<p><strong>Indicator/Avatar/Icon</strong><br>
To convey additional context to the user about the type of content, use the Chip Indicator. ie, This should be set to the contact icon and color when displaying contact data vs the candidate icon and color when the Chip represents a selected candidate</p>
</li>
<li>
<p><strong>Preview (optional)</strong><br>
Additional details can be displayed in a Chip Preview PopOver, see [New Component]</p>
</li>
</ol>
</div>
</novo-grid>
<h2>Behaviors</h2>
<novo-grid columns="2" align="start" gap="2rem">
<blockquote>
<div class="p"><strong>Text Overflow</strong></div>
<div class="p">When the chip text is too long for the available horizontal space, it truncates. The full text should be revealed with a tooltip on hover.</div>
</blockquote>
<blockquote>
<div class="p"><strong>Chip List Overflow</strong></div>
<div class="p">When horizontal space is limited in a chip list, the individual chips wrap to form another line.</div>
</blockquote>
</novo-grid>
<h2>Accessibility</h2>
<p><strong>KeyBoard Controls</strong></p>
<p>The user should be able to use the <code>up</code> and <code>own</code> arrows to navigate between options and press <code>enter</code> to select the active option.</p>
<p><strong>Implementation</strong></p>
<p>The component should follow the <a href="https://www.w3.org/TR/wai-aria-practices/examples/combobox/aria1.1pattern/listbox-combo.html">ARIA combobox interaction</a> pattern and have a role of <code>combobox</code>.</p>
`,
                    host: { class: 'markdown-page' },
                    standalone: false,
                }]
        }] });
class CheckboxPage {
    constructor() {
        this.params = {};
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: CheckboxPage, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: CheckboxPage, isStandalone: false, selector: "checkbox-page", host: { classAttribute: "markdown-page" }, ngImport: i0, template: `<h1>Checkbox <a href="https://github.com/bullhorn/novo-elements/blob/master/projects/novo-elements/src/elements/checkbox">(source)</a></h1>
<h5>Basic</h5>
<p><code-example example="basic-checkbox"></code-example></p>
<h5>List</h5>
<p><code-example example="checkbox-list"></code-example></p>
`, isInline: true, dependencies: [{ kind: "component", type: CodeExampleComponent, selector: "code-example", inputs: ["example"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: CheckboxPage, decorators: [{
            type: Component,
            args: [{
                    selector: 'checkbox-page',
                    template: `<h1>Checkbox <a href="https://github.com/bullhorn/novo-elements/blob/master/projects/novo-elements/src/elements/checkbox">(source)</a></h1>
<h5>Basic</h5>
<p><code-example example="basic-checkbox"></code-example></p>
<h5>List</h5>
<p><code-example example="checkbox-list"></code-example></p>
`,
                    host: { class: 'markdown-page' },
                    standalone: false,
                }]
        }] });
class DesignPage {
    constructor() {
        this.params = {};
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: DesignPage, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: DesignPage, isStandalone: false, selector: "design-page", host: { classAttribute: "markdown-page" }, ngImport: i0, template: `<h1>Design</h1>
<p>This is a landing page</p>
`, isInline: true }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: DesignPage, decorators: [{
            type: Component,
            args: [{
                    selector: 'design-page',
                    template: `<h1>Design</h1>
<p>This is a landing page</p>
`,
                    host: { class: 'markdown-page' },
                    standalone: false,
                }]
        }] });
class TypographyPage {
    constructor() {
        this.params = {};
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: TypographyPage, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: TypographyPage, isStandalone: false, selector: "typography-page", host: { classAttribute: "markdown-page" }, ngImport: i0, template: `<h1>Typography</h1>
<novo-grid columns="200px 1fr" align="start" gap="2rem">
<p><img src="assets/images/TypographyPageIcon.svg" alt=""></p>
<blockquote>
<h2>Gotham, Montserrat.</h2>
<div class="p">Bullhorn's Branding uses the Gotham font family, this is not a free font. With that in mind we build novo-elements to work with both the Gotham font and Monteserrat which is a very similar font face available on Google Fonts.  Both fonts provide a characters that are clean and easy to read with good weight when the font-size is small.</div>
<div class="p"><a href="https://www.typography.com/fonts/gotham/overview">Gotham Font Overview</a></div>
<div class="p"><a href="https://fonts.google.com/specimen/Montserrat">Montserrat Typeface on Google Fonts</a></div>
</blockquote>
</novo-grid>
<h2>Best Practices</h2>
<ul class="contains-do-list">
<li class="bullhorn-do-item"><novo-icon color="grass" mr="md" size="md">check</novo-icon><novo-text color="grass"> Limit line length to 70–80 characters.</novo-text></li>
<li class="bullhorn-do-item"><novo-icon color="grass" mr="md" size="md">check</novo-icon><novo-text color="grass"> Paragraph text should be a minimum of 14pt.</novo-text></li>
<li class="bullhorn-do-item"><novo-icon color="grass" mr="md" size="md">check</novo-icon><novo-text color="grass"> Small fonts need more spacing.</novo-text></li>
<li class="bullhorn-do-item"><novo-icon color="grass" mr="md" size="md">check</novo-icon><novo-text color="grass"> Check your line spacing when you change font or font size.</novo-text></li>
</ul>
<h3>Design Principle: Clarity</h3>
<p>Proper line length, adequate white space, and appropriate line breaks are necessary to preserve readability, rhythm, and overall clarity.</p>
<h5>Line Height</h5>
<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco labor.</p>
<p>These lines are too close for comfort</p>
<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco labor.</p>
<p>Thumbs up for great readability</p>
<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco labor.</p>
<p>I'm losing focus with all this space</p>
<h3>Design Principle: Balance</h3>
<p>Typographic balance is critical to readability and understanding information hierarchy. The weight and size of the font helps determine which element on a page receives a user’s attention first.</p>
<h5>Line Length</h5>
<hr>
<p>In general when determinining readability we try to stay within the optimal line length of <strong>55-75</strong> characters, this varies based on the layout the text is contained within as well as the size of the font. Becauase of the condensed nature of the data we generally present most common is for the text to fill its container but when necessary we apply these principles.</p>
<ul>
<li>🚫 <strong>30</strong> Short lines interrupt the reader's rhythm</li>
<li>✅ <strong>55-75</strong> Optimal line length for readability</li>
<li>🚫 <strong>100</strong> Difficult to jump to the next line</li>
</ul>
<typedef-example>
  <typedef-content>
    <novo-text [lineLength]="lineLength.value">
      The Highland (Scottish Gaelic: Bò Ghàidhealach; Scots: Hielan coo) is a Scottish breed of rustic cattle. It originated in the <novo-link>Scottish Highlands</novo-link> and the Outer Hebrides islands of Scotland and has long horns and a long shaggy coat. It is a hardy breed, bred to withstand the intemperate conditions in the region. The first herd-book dates from 1885; two different types – a smaller island type, usually black, and a larger mainland type, usually dun – were registered as a single breed. It is reared primarily for beef, and has been exported to several other countries.<sup>[1]</sup>
    </novo-text>
  </typedef-content>
  <typedef-specs>
    <novo-label>Line Length</novo-label>
    <novo-radio-group #lineLength appearance="vertical">
      <novo-radio name="length" value="small">small (40)</novo-radio>
      <novo-radio checked name="length" value="medium">medium (55)</novo-radio>
      <novo-radio name="length" value="large">large (70)</novo-radio>
    </novo-radio-group>
  </typedef-specs>
  <typedef-snippet>
    <code class="tc-positive">&lt;novo-text&gt;...&lt;/novo-text&gt;</code> or <code class="tc-negative">&#64;include novo-body-text()</code>
  </typedef-snippet>
</typedef-example>
<h5>How does this work with responsive design?</h5>
<p>Line length is always relative to its font-size. This means that if a font scales up or down in sizing (relative to its device's screen size) the line length will automatically scale with it. Line length is about maintaining a comfortable reading flow and rhythm from line to line.</p>
<p><strong>When implementing</strong>, native line length will always be secondary to the width of the text's container. This means that if a screen's width is smaller than the text's native line length, the text will wrap early.</p>
<h2>Styles</h2>
<p>There a number of general styles that are present throughout the application. To maintain consistency, these styles should be adhered to as much as possible. Most text components can be adjusted by setting the <code>size</code>, <code>length</code>, <code>weight</code>, or <code>color</code> attributes, these values are all theme aware based on novo design tokens.</p>
<h2>Body Text</h2>
<p>Body text is available in three different sizes. Use body text to present the bulk of a page’s content. All body text uses a line height of 1.375 relative to the font size.</p>
<typedef-example>
  <typedef-content>
    <novo-text>
      The Highland (Scottish Gaelic: Bò Ghàidhealach; Scots: Hielan coo) is a Scottish breed of rustic cattle. It originated in the <novo-link>Scottish Highlands</novo-link> and the Outer Hebrides islands of Scotland and has long horns and a long shaggy coat. It is a hardy breed, bred to withstand the intemperate conditions in the region. The first herd-book dates from 1885; two different types – a smaller island type, usually black, and a larger mainland type, usually dun – were registered as a single breed. It is reared primarily for beef, and has been exported to several other countries.<sup>[1]</sup>
    </novo-text>
  </typedef-content>
  <typedef-specs>
    <novo-label>Body Text</novo-label>
    <dl>
      <dt>Font Size       </dt><dd>1.2rem</dd>
      <dt>Line Height     </dt><dd>1.375</dd>
      <dt>Font Weight     </dt><dd>400</dd>
      <dt>Max Line Length </dt><dd>550px</dd>
    </dl>
  </typedef-specs>
  <typedef-snippet>
    <code class="tc-positive">&lt;novo-text&gt;...&lt;/novo-text&gt;</code> or <code class="tc-negative">&#64;include novo-body-text-medium()</code>
  </typedef-snippet>
</typedef-example>
<typedef-example>
  <typedef-content>
    <novo-text larger>
      The Highland (Scottish Gaelic: Bò Ghàidhealach; Scots: Hielan coo) is a Scottish breed of rustic cattle. It originated in the <novo-link>Scottish Highlands</novo-link> and the Outer Hebrides islands of Scotland and has long horns and a long shaggy coat. It is a hardy breed, bred to withstand the intemperate conditions in the region. The first herd-book dates from 1885; two different types – a smaller island type, usually black, and a larger mainland type, usually dun – were registered as a single breed. It is reared primarily for beef, and has been exported to several other countries.<sup>[1]</sup>
    </novo-text>
  </typedef-content>
  <typedef-specs>
    <novo-label>Body Larger</novo-label>
    <dl>
      <dt>Font Size       </dt><dd>1.4rem</dd>
      <dt>Line Height     </dt><dd>1.375</dd>
      <dt>Font Weight     </dt><dd>400</dd>
      <dt>Max Line Length </dt><dd>550px</dd>
    </dl>
  </typedef-specs>
  <typedef-snippet>
    <code class="tc-positive">&lt;novo-text larger&gt;...&lt;/novo-text&gt;</code>
  </typedef-snippet>
</typedef-example>
<typedef-example>
  <typedef-content>
    <novo-text smaller>
      The Highland (Scottish Gaelic: Bò Ghàidhealach; Scots: Hielan coo) is a Scottish breed of rustic cattle. It originated in the <novo-link>Scottish Highlands</novo-link> and the Outer Hebrides islands of Scotland and has long horns and a long shaggy coat. It is a hardy breed, bred to withstand the intemperate conditions in the region. The first herd-book dates from 1885; two different types – a smaller island type, usually black, and a larger mainland type, usually dun – were registered as a single breed. It is reared primarily for beef, and has been exported to several other countries.<sup>[1]</sup>
    </novo-text>
  </typedef-content>
  <typedef-specs>
    <novo-label>Body Smaller</novo-label>
    <dl>
      <dt>Font Size       </dt><dd>1.1rem</dd>
      <dt>Line Height     </dt><dd>1.375</dd>
      <dt>Font Weight     </dt><dd>400</dd>
      <dt>Max Line Length </dt><dd>550px</dd>
    </dl>
  </typedef-specs>
  <typedef-snippet>
    <code class="tc-positive">&lt;novo-text size="small"&gt;...&lt;/novo-text&gt;</code>
  </typedef-snippet>
</typedef-example>
<h2>Title Text</h2>
<p>Titles are available in six different sizes. To create an optical balance between the six levels, titles are set in two weights: Condensed Thin and Condensed Light. All titles use a line height of 1.375 relative to the font size.</p>
<p>Title mixins and constants can be applied to any HTML element, but we recommend using &lt;h1&gt; through &lt;h6&gt; elements for titles to ensure markup is semantic and accessible.</p>
<typedef-example>
  <typedef-content>
    <novo-title>
      Creating an incredible customer experience
    </novo-title>
  </typedef-content>
  <typedef-specs>
    <novo-label>Title</novo-label>
    <dl>
      <dt>Font Size       </dt><dd>1.8rem</dd>
      <dt>Line Height     </dt><dd>1.375</dd>
      <dt>Font Weight     </dt><dd>500</dd>
    </dl>
  </typedef-specs>
  <typedef-snippet>
    <code class="tc-positive">&lt;novo-title&gt;...&lt;/novo-title&gt;</code> or <code class="tc-negative">&#64;include novo-title-text()</code>
  </typedef-snippet>
</typedef-example>
<typedef-example>
  <typedef-content>
    <novo-title [size]="size.value">
      Creating an incredible customer experience
    </novo-title>
  </typedef-content>
  <typedef-specs>
     <novo-label>Size</novo-label>
    <novo-radio-group #size appearance="vertical" value="xl">
      <novo-radio value="xs">xs</novo-radio>
      <novo-radio value="sm">sm</novo-radio>
      <novo-radio value="md">md</novo-radio>
      <novo-radio value="lg">lg</novo-radio>
      <novo-radio value="xl">xl</novo-radio>
      <novo-radio value="2xl">2xl</novo-radio>
    </novo-radio-group>
  </typedef-specs>
  <typedef-snippet>
    <code class="tc-positive">&lt;novo-title&gt;...&lt;/novo-title&gt;</code> or <code class="tc-negative">&#64;include novo-title-text()</code>
  </typedef-snippet>
</typedef-example>
<h2>Label Text</h2>
<p>These are the base colors of the application.</p>
<p><code-example example="label"></code-example></p>
<h2>Caption Text</h2>
<p>These are the base colors of the application.</p>
<p><code-example example="caption"></code-example></p>
<h2>Link Text</h2>
<p>These are the base colors of the application.</p>
<p><code-example example="link"></code-example></p>
`, isInline: true, dependencies: [{ kind: "component", type: i2$1.NovoGridElement, selector: "novo-grid", inputs: ["direction", "align", "justify", "columns"] }, { kind: "component", type: i2$1.NovoRadioElement, selector: "novo-radio", inputs: ["id", "name", "tabindex", "vertical", "label", "button", "theme", "size", "icon", "color", "disabled", "checked", "value"], outputs: ["change", "blur", "focus"] }, { kind: "component", type: i2$1.NovoRadioGroup, selector: "novo-radio-group", inputs: ["id", "tabindex", "errorStateMatcher", "appearance", "value", "name", "disabled", "required", "placeholder"], outputs: ["change", "blur"] }, { kind: "component", type: i2$1.NovoIconComponent, selector: "novo-icon", inputs: ["raised", "theme", "shape", "color", "size", "smaller", "larger", "alt", "name"] }, { kind: "component", type: i2$1.NovoText, selector: "novo-text,[novo-text]", inputs: ["block"] }, { kind: "component", type: i2$1.NovoTitle, selector: "novo-title,[novo-title]" }, { kind: "component", type: i2$1.NovoLabel, selector: "novo-label,[novo-label]", inputs: ["id"] }, { kind: "component", type: i2$1.NovoLink, selector: "novo-link", inputs: ["href"] }, { kind: "directive", type: i2$1.MarginDirective, selector: "[m],[margin],[marginTop],[marginRight],[marginBottom],[marginLeft],[marginX],[marginY],[mt],[mr],[mb],[ml],[mx],[my]", inputs: ["margin", "m", "marginLeft", "ml", "marginRight", "mr", "marginTop", "mt", "marginBottom", "mb", "marginX", "mx", "marginY", "my"] }, { kind: "directive", type: i2$1.GapDirective, selector: "[gap]", inputs: ["gap"] }, { kind: "component", type: CodeExampleComponent, selector: "code-example", inputs: ["example"] }, { kind: "component", type: TypedefContent, selector: "typedef-content" }, { kind: "component", type: TypedefExample, selector: "typedef-example" }, { kind: "component", type: TypedefSnippet, selector: "typedef-snippet" }, { kind: "component", type: TypedefSpec, selector: "typedef-specs" }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: TypographyPage, decorators: [{
            type: Component,
            args: [{
                    selector: 'typography-page',
                    template: `<h1>Typography</h1>
<novo-grid columns="200px 1fr" align="start" gap="2rem">
<p><img src="assets/images/TypographyPageIcon.svg" alt=""></p>
<blockquote>
<h2>Gotham, Montserrat.</h2>
<div class="p">Bullhorn's Branding uses the Gotham font family, this is not a free font. With that in mind we build novo-elements to work with both the Gotham font and Monteserrat which is a very similar font face available on Google Fonts.  Both fonts provide a characters that are clean and easy to read with good weight when the font-size is small.</div>
<div class="p"><a href="https://www.typography.com/fonts/gotham/overview">Gotham Font Overview</a></div>
<div class="p"><a href="https://fonts.google.com/specimen/Montserrat">Montserrat Typeface on Google Fonts</a></div>
</blockquote>
</novo-grid>
<h2>Best Practices</h2>
<ul class="contains-do-list">
<li class="bullhorn-do-item"><novo-icon color="grass" mr="md" size="md">check</novo-icon><novo-text color="grass"> Limit line length to 70–80 characters.</novo-text></li>
<li class="bullhorn-do-item"><novo-icon color="grass" mr="md" size="md">check</novo-icon><novo-text color="grass"> Paragraph text should be a minimum of 14pt.</novo-text></li>
<li class="bullhorn-do-item"><novo-icon color="grass" mr="md" size="md">check</novo-icon><novo-text color="grass"> Small fonts need more spacing.</novo-text></li>
<li class="bullhorn-do-item"><novo-icon color="grass" mr="md" size="md">check</novo-icon><novo-text color="grass"> Check your line spacing when you change font or font size.</novo-text></li>
</ul>
<h3>Design Principle: Clarity</h3>
<p>Proper line length, adequate white space, and appropriate line breaks are necessary to preserve readability, rhythm, and overall clarity.</p>
<h5>Line Height</h5>
<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco labor.</p>
<p>These lines are too close for comfort</p>
<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco labor.</p>
<p>Thumbs up for great readability</p>
<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco labor.</p>
<p>I'm losing focus with all this space</p>
<h3>Design Principle: Balance</h3>
<p>Typographic balance is critical to readability and understanding information hierarchy. The weight and size of the font helps determine which element on a page receives a user’s attention first.</p>
<h5>Line Length</h5>
<hr>
<p>In general when determinining readability we try to stay within the optimal line length of <strong>55-75</strong> characters, this varies based on the layout the text is contained within as well as the size of the font. Becauase of the condensed nature of the data we generally present most common is for the text to fill its container but when necessary we apply these principles.</p>
<ul>
<li>🚫 <strong>30</strong> Short lines interrupt the reader's rhythm</li>
<li>✅ <strong>55-75</strong> Optimal line length for readability</li>
<li>🚫 <strong>100</strong> Difficult to jump to the next line</li>
</ul>
<typedef-example>
  <typedef-content>
    <novo-text [lineLength]="lineLength.value">
      The Highland (Scottish Gaelic: Bò Ghàidhealach; Scots: Hielan coo) is a Scottish breed of rustic cattle. It originated in the <novo-link>Scottish Highlands</novo-link> and the Outer Hebrides islands of Scotland and has long horns and a long shaggy coat. It is a hardy breed, bred to withstand the intemperate conditions in the region. The first herd-book dates from 1885; two different types – a smaller island type, usually black, and a larger mainland type, usually dun – were registered as a single breed. It is reared primarily for beef, and has been exported to several other countries.<sup>[1]</sup>
    </novo-text>
  </typedef-content>
  <typedef-specs>
    <novo-label>Line Length</novo-label>
    <novo-radio-group #lineLength appearance="vertical">
      <novo-radio name="length" value="small">small (40)</novo-radio>
      <novo-radio checked name="length" value="medium">medium (55)</novo-radio>
      <novo-radio name="length" value="large">large (70)</novo-radio>
    </novo-radio-group>
  </typedef-specs>
  <typedef-snippet>
    <code class="tc-positive">&lt;novo-text&gt;...&lt;/novo-text&gt;</code> or <code class="tc-negative">&#64;include novo-body-text()</code>
  </typedef-snippet>
</typedef-example>
<h5>How does this work with responsive design?</h5>
<p>Line length is always relative to its font-size. This means that if a font scales up or down in sizing (relative to its device's screen size) the line length will automatically scale with it. Line length is about maintaining a comfortable reading flow and rhythm from line to line.</p>
<p><strong>When implementing</strong>, native line length will always be secondary to the width of the text's container. This means that if a screen's width is smaller than the text's native line length, the text will wrap early.</p>
<h2>Styles</h2>
<p>There a number of general styles that are present throughout the application. To maintain consistency, these styles should be adhered to as much as possible. Most text components can be adjusted by setting the <code>size</code>, <code>length</code>, <code>weight</code>, or <code>color</code> attributes, these values are all theme aware based on novo design tokens.</p>
<h2>Body Text</h2>
<p>Body text is available in three different sizes. Use body text to present the bulk of a page’s content. All body text uses a line height of 1.375 relative to the font size.</p>
<typedef-example>
  <typedef-content>
    <novo-text>
      The Highland (Scottish Gaelic: Bò Ghàidhealach; Scots: Hielan coo) is a Scottish breed of rustic cattle. It originated in the <novo-link>Scottish Highlands</novo-link> and the Outer Hebrides islands of Scotland and has long horns and a long shaggy coat. It is a hardy breed, bred to withstand the intemperate conditions in the region. The first herd-book dates from 1885; two different types – a smaller island type, usually black, and a larger mainland type, usually dun – were registered as a single breed. It is reared primarily for beef, and has been exported to several other countries.<sup>[1]</sup>
    </novo-text>
  </typedef-content>
  <typedef-specs>
    <novo-label>Body Text</novo-label>
    <dl>
      <dt>Font Size       </dt><dd>1.2rem</dd>
      <dt>Line Height     </dt><dd>1.375</dd>
      <dt>Font Weight     </dt><dd>400</dd>
      <dt>Max Line Length </dt><dd>550px</dd>
    </dl>
  </typedef-specs>
  <typedef-snippet>
    <code class="tc-positive">&lt;novo-text&gt;...&lt;/novo-text&gt;</code> or <code class="tc-negative">&#64;include novo-body-text-medium()</code>
  </typedef-snippet>
</typedef-example>
<typedef-example>
  <typedef-content>
    <novo-text larger>
      The Highland (Scottish Gaelic: Bò Ghàidhealach; Scots: Hielan coo) is a Scottish breed of rustic cattle. It originated in the <novo-link>Scottish Highlands</novo-link> and the Outer Hebrides islands of Scotland and has long horns and a long shaggy coat. It is a hardy breed, bred to withstand the intemperate conditions in the region. The first herd-book dates from 1885; two different types – a smaller island type, usually black, and a larger mainland type, usually dun – were registered as a single breed. It is reared primarily for beef, and has been exported to several other countries.<sup>[1]</sup>
    </novo-text>
  </typedef-content>
  <typedef-specs>
    <novo-label>Body Larger</novo-label>
    <dl>
      <dt>Font Size       </dt><dd>1.4rem</dd>
      <dt>Line Height     </dt><dd>1.375</dd>
      <dt>Font Weight     </dt><dd>400</dd>
      <dt>Max Line Length </dt><dd>550px</dd>
    </dl>
  </typedef-specs>
  <typedef-snippet>
    <code class="tc-positive">&lt;novo-text larger&gt;...&lt;/novo-text&gt;</code>
  </typedef-snippet>
</typedef-example>
<typedef-example>
  <typedef-content>
    <novo-text smaller>
      The Highland (Scottish Gaelic: Bò Ghàidhealach; Scots: Hielan coo) is a Scottish breed of rustic cattle. It originated in the <novo-link>Scottish Highlands</novo-link> and the Outer Hebrides islands of Scotland and has long horns and a long shaggy coat. It is a hardy breed, bred to withstand the intemperate conditions in the region. The first herd-book dates from 1885; two different types – a smaller island type, usually black, and a larger mainland type, usually dun – were registered as a single breed. It is reared primarily for beef, and has been exported to several other countries.<sup>[1]</sup>
    </novo-text>
  </typedef-content>
  <typedef-specs>
    <novo-label>Body Smaller</novo-label>
    <dl>
      <dt>Font Size       </dt><dd>1.1rem</dd>
      <dt>Line Height     </dt><dd>1.375</dd>
      <dt>Font Weight     </dt><dd>400</dd>
      <dt>Max Line Length </dt><dd>550px</dd>
    </dl>
  </typedef-specs>
  <typedef-snippet>
    <code class="tc-positive">&lt;novo-text size="small"&gt;...&lt;/novo-text&gt;</code>
  </typedef-snippet>
</typedef-example>
<h2>Title Text</h2>
<p>Titles are available in six different sizes. To create an optical balance between the six levels, titles are set in two weights: Condensed Thin and Condensed Light. All titles use a line height of 1.375 relative to the font size.</p>
<p>Title mixins and constants can be applied to any HTML element, but we recommend using &lt;h1&gt; through &lt;h6&gt; elements for titles to ensure markup is semantic and accessible.</p>
<typedef-example>
  <typedef-content>
    <novo-title>
      Creating an incredible customer experience
    </novo-title>
  </typedef-content>
  <typedef-specs>
    <novo-label>Title</novo-label>
    <dl>
      <dt>Font Size       </dt><dd>1.8rem</dd>
      <dt>Line Height     </dt><dd>1.375</dd>
      <dt>Font Weight     </dt><dd>500</dd>
    </dl>
  </typedef-specs>
  <typedef-snippet>
    <code class="tc-positive">&lt;novo-title&gt;...&lt;/novo-title&gt;</code> or <code class="tc-negative">&#64;include novo-title-text()</code>
  </typedef-snippet>
</typedef-example>
<typedef-example>
  <typedef-content>
    <novo-title [size]="size.value">
      Creating an incredible customer experience
    </novo-title>
  </typedef-content>
  <typedef-specs>
     <novo-label>Size</novo-label>
    <novo-radio-group #size appearance="vertical" value="xl">
      <novo-radio value="xs">xs</novo-radio>
      <novo-radio value="sm">sm</novo-radio>
      <novo-radio value="md">md</novo-radio>
      <novo-radio value="lg">lg</novo-radio>
      <novo-radio value="xl">xl</novo-radio>
      <novo-radio value="2xl">2xl</novo-radio>
    </novo-radio-group>
  </typedef-specs>
  <typedef-snippet>
    <code class="tc-positive">&lt;novo-title&gt;...&lt;/novo-title&gt;</code> or <code class="tc-negative">&#64;include novo-title-text()</code>
  </typedef-snippet>
</typedef-example>
<h2>Label Text</h2>
<p>These are the base colors of the application.</p>
<p><code-example example="label"></code-example></p>
<h2>Caption Text</h2>
<p>These are the base colors of the application.</p>
<p><code-example example="caption"></code-example></p>
<h2>Link Text</h2>
<p>These are the base colors of the application.</p>
<p><code-example example="link"></code-example></p>
`,
                    host: { class: 'markdown-page' },
                    standalone: false,
                }]
        }] });
class SpacingPage {
    constructor() {
        this.params = {};
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: SpacingPage, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: SpacingPage, isStandalone: false, selector: "spacing-page", host: { classAttribute: "markdown-page" }, ngImport: i0, template: `<h1>Spacing</h1>
<h2>Consistency at Scale</h2>
<p>Novo Elements makes use of spacing variables to create consistency across all of the components in our system. This consistency contributes to a subconscious feeling of order and harmony, while also eliminating guesswork for designers and developers.</p>
<p>We use a base-10px grid for consistent and easy to use sizing. Since units use ten pixels as the base, 1(rem) equals 10px, 2 equals 20px, .5 equals 5px (and so on).</p>
<h2>Usage</h2>
<novo-grid columns="2">
<novo-box padding="xl">
  <novo-text>
    When building layouts and components, our spacing directives hook into a Theme file for returning values. This allows us to constrain the possibilities available to a component to only what's defined in our spacing system and thus reduce drift.
  </novo-text>
</novo-box>
<figure-example theme="">
<img src="assets/images/SpacingSizeUnits.png" width="250">
<novo-text>
  <novo-icon color="neutral">board</novo-icon>
  <strong>Spacing Variables</strong>
</novo-text>
<novo-text>Use Spacing Variables not pixels</novo-text>
</figure-example>
</novo-grid>
<novo-grid columns="2">
<figure-example theme="">
<pre><code class="language-html"><span class="hljs-tag">&lt;<span class="hljs-name">novo-box</span> <span class="hljs-attr">margin</span>=<span class="hljs-string">&quot;xs&quot;</span> <span class="hljs-attr">padding</span>=<span class="hljs-string">&quot;xl&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">novo-box</span>&gt;</span>
</code></pre>
<novo-text color="grass"><novo-icon mr="1rem">check</novo-icon><strong>Always use theme variables</strong></novo-text>
<novo-text><p>Explain this</p>
</novo-text>
</figure-example>
<figure-example theme="">
<pre><code class="language-html"><span class="hljs-tag">&lt;<span class="hljs-name">novo-box</span> <span class="hljs-attr">margin</span>=<span class="hljs-string">&quot;10px&quot;</span> <span class="hljs-attr">padding</span>=<span class="hljs-string">&quot;10px&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">novo-box</span>&gt;</span>
</code></pre>
<novo-text color="grapefruit"><novo-icon mr="1rem">times</novo-icon><strong>Never set explicit pixels for spacing</strong></novo-text>
<novo-text><p>Explain this</p>
</novo-text>
</figure-example>
</novo-grid>
<h2>Our Variables (&amp; Mix-ins?)</h2>
<p>Apply spacing constants to components to set element's padding and margins.</p>
<typedef-example>
  <typedef-content>
    <novo-flex gap="1rem">
      <novo-box bg="ocean"><novo-box margin="xs" padding="xl" bg="grass">xs/xl</novo-box></novo-box>
      <novo-box bg="ocean"><novo-box margin="sm" padding="lg" bg="grass">sm/lg</novo-box></novo-box>
      <novo-box bg="ocean"><novo-box margin="md" padding="md" bg="grass">md/md</novo-box></novo-box>
      <novo-box bg="ocean"><novo-box margin="lg" padding="sm" bg="grass">lg/sm</novo-box></novo-box>
      <novo-box bg="ocean"><novo-box margin="xl" padding="xs" bg="grass">xl/xs</novo-box></novo-box>
    </novo-flex>
  </typedef-content>
  <typedef-specs>
    <novo-label color="grass">Padding</novo-label><br/>
    <novo-label color="ocean">Margin</novo-label>
    <dl>
      <dt>xs </dt><dd>0.4rem</dd>
      <dt>sm </dt><dd>0.8rem</dd>
      <dt>md </dt><dd>1.2rem</dd>
      <dt>lg </dt><dd>1.6rem</dd>
      <dt>xl </dt><dd>2rem</dd>
    </dl>
  </typedef-specs>
  <typedef-snippet>
    <novo-label>html</novo-label>
    <pre><code txc="ocean">&lt;novo-box margin="xs" padding="xl"&gt;...&lt;/novo-box&gt;</code><br/></pre>
  </typedef-snippet>
  <typedef-snippet>
    <novo-label>scss</novo-label>
    <pre><code>.box &#123;\n  &#64;include novo-padding-medium(); // use mixin \n  margin: $spacing-xs; // or use scss variables\n  padding: $spacing-xl;\n&#125; &#125;&#125;</code></pre>
  </typedef-snippet>
</typedef-example>
<!-- 
<typedef-example>
  <typedef-content>
    <novo-flex gap="1rem">
      <novo-box bg="ocean"><novo-box margin="xs" padding="xl" bg="white">xs</novo-box></novo-box>
      <novo-box bg="ocean"><novo-box margin="sm" padding="lg" bg="white">sm</novo-box></novo-box>
      <novo-box bg="ocean"><novo-box margin="md" padding="md" bg="white">md</novo-box></novo-box>
      <novo-box bg="ocean"><novo-box margin="lg" padding="sm" bg="white">lg</novo-box></novo-box>
      <novo-box bg="ocean"><novo-box margin="xl" padding="xs" bg="white">xl</novo-box></novo-box>
    </novo-flex>
  </typedef-content>
  <typedef-specs>
    <novo-label>Margin</novo-label>
    <dl>
      <dt>Font Size       </dt><dd>1.2rem</dd>
      <dt>Line Height     </dt><dd>1.375 (28px)</dd>
      <dt>Font Weight     </dt><dd>300</dd>
      <dt>Max Line Length </dt><dd>550px</dd>
    </dl>
  </typedef-specs>
  <typedef-snippet>
    <code class="tc-positive">&lt;novo-box margin="sm"&gt;...&lt;/novo-box&gt;</code> or <code class="tc-negative">&#64;include novo-margin-medium()</code>
  </typedef-snippet>
</typedef-example> -->
`, isInline: true, dependencies: [{ kind: "component", type: i2$1.NovoFlexElement, selector: "novo-flex,novo-row", inputs: ["direction", "align", "justify", "wrap", "gap"] }, { kind: "component", type: i2$1.NovoGridElement, selector: "novo-grid", inputs: ["direction", "align", "justify", "columns"] }, { kind: "component", type: i2$1.NovoBoxElement, selector: "novo-box", inputs: ["direction", "align", "justify", "wrap", "gap"] }, { kind: "component", type: i2$1.NovoIconComponent, selector: "novo-icon", inputs: ["raised", "theme", "shape", "color", "size", "smaller", "larger", "alt", "name"] }, { kind: "component", type: i2$1.NovoText, selector: "novo-text,[novo-text]", inputs: ["block"] }, { kind: "component", type: i2$1.NovoLabel, selector: "novo-label,[novo-label]", inputs: ["id"] }, { kind: "directive", type: i2$1.MarginDirective, selector: "[m],[margin],[marginTop],[marginRight],[marginBottom],[marginLeft],[marginX],[marginY],[mt],[mr],[mb],[ml],[mx],[my]", inputs: ["margin", "m", "marginLeft", "ml", "marginRight", "mr", "marginTop", "mt", "marginBottom", "mb", "marginX", "mx", "marginY", "my"] }, { kind: "directive", type: i2$1.PaddingDirective, selector: "[p],[padding],[paddingTop],[paddingRight],[paddingBottom],[paddingLeft],[paddingX],[paddingY],[pt],[pr],[pb],[pl],[px],[py]", inputs: ["padding", "p", "paddingLeft", "pl", "paddingRight", "pr", "paddingTop", "pt", "paddingBottom", "pb", "paddingX", "px", "paddingY", "py"] }, { kind: "directive", type: i2$1.BackgroundColorDirective, selector: "[bg]", inputs: ["bg"] }, { kind: "directive", type: i2$1.TextColorDirective, selector: "[txc]", inputs: ["txc"] }, { kind: "directive", type: i2$1.GapDirective, selector: "[gap]", inputs: ["gap"] }, { kind: "directive", type: i2$1.ThemeColorDirective, selector: "[theme]", inputs: ["theme"] }, { kind: "component", type: TypedefContent, selector: "typedef-content" }, { kind: "component", type: TypedefExample, selector: "typedef-example" }, { kind: "component", type: TypedefSnippet, selector: "typedef-snippet" }, { kind: "component", type: TypedefSpec, selector: "typedef-specs" }, { kind: "component", type: FigureExample, selector: "figure-example", inputs: ["theme"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: SpacingPage, decorators: [{
            type: Component,
            args: [{
                    selector: 'spacing-page',
                    template: `<h1>Spacing</h1>
<h2>Consistency at Scale</h2>
<p>Novo Elements makes use of spacing variables to create consistency across all of the components in our system. This consistency contributes to a subconscious feeling of order and harmony, while also eliminating guesswork for designers and developers.</p>
<p>We use a base-10px grid for consistent and easy to use sizing. Since units use ten pixels as the base, 1(rem) equals 10px, 2 equals 20px, .5 equals 5px (and so on).</p>
<h2>Usage</h2>
<novo-grid columns="2">
<novo-box padding="xl">
  <novo-text>
    When building layouts and components, our spacing directives hook into a Theme file for returning values. This allows us to constrain the possibilities available to a component to only what's defined in our spacing system and thus reduce drift.
  </novo-text>
</novo-box>
<figure-example theme="">
<img src="assets/images/SpacingSizeUnits.png" width="250">
<novo-text>
  <novo-icon color="neutral">board</novo-icon>
  <strong>Spacing Variables</strong>
</novo-text>
<novo-text>Use Spacing Variables not pixels</novo-text>
</figure-example>
</novo-grid>
<novo-grid columns="2">
<figure-example theme="">
<pre><code class="language-html"><span class="hljs-tag">&lt;<span class="hljs-name">novo-box</span> <span class="hljs-attr">margin</span>=<span class="hljs-string">&quot;xs&quot;</span> <span class="hljs-attr">padding</span>=<span class="hljs-string">&quot;xl&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">novo-box</span>&gt;</span>
</code></pre>
<novo-text color="grass"><novo-icon mr="1rem">check</novo-icon><strong>Always use theme variables</strong></novo-text>
<novo-text><p>Explain this</p>
</novo-text>
</figure-example>
<figure-example theme="">
<pre><code class="language-html"><span class="hljs-tag">&lt;<span class="hljs-name">novo-box</span> <span class="hljs-attr">margin</span>=<span class="hljs-string">&quot;10px&quot;</span> <span class="hljs-attr">padding</span>=<span class="hljs-string">&quot;10px&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">novo-box</span>&gt;</span>
</code></pre>
<novo-text color="grapefruit"><novo-icon mr="1rem">times</novo-icon><strong>Never set explicit pixels for spacing</strong></novo-text>
<novo-text><p>Explain this</p>
</novo-text>
</figure-example>
</novo-grid>
<h2>Our Variables (&amp; Mix-ins?)</h2>
<p>Apply spacing constants to components to set element's padding and margins.</p>
<typedef-example>
  <typedef-content>
    <novo-flex gap="1rem">
      <novo-box bg="ocean"><novo-box margin="xs" padding="xl" bg="grass">xs/xl</novo-box></novo-box>
      <novo-box bg="ocean"><novo-box margin="sm" padding="lg" bg="grass">sm/lg</novo-box></novo-box>
      <novo-box bg="ocean"><novo-box margin="md" padding="md" bg="grass">md/md</novo-box></novo-box>
      <novo-box bg="ocean"><novo-box margin="lg" padding="sm" bg="grass">lg/sm</novo-box></novo-box>
      <novo-box bg="ocean"><novo-box margin="xl" padding="xs" bg="grass">xl/xs</novo-box></novo-box>
    </novo-flex>
  </typedef-content>
  <typedef-specs>
    <novo-label color="grass">Padding</novo-label><br/>
    <novo-label color="ocean">Margin</novo-label>
    <dl>
      <dt>xs </dt><dd>0.4rem</dd>
      <dt>sm </dt><dd>0.8rem</dd>
      <dt>md </dt><dd>1.2rem</dd>
      <dt>lg </dt><dd>1.6rem</dd>
      <dt>xl </dt><dd>2rem</dd>
    </dl>
  </typedef-specs>
  <typedef-snippet>
    <novo-label>html</novo-label>
    <pre><code txc="ocean">&lt;novo-box margin="xs" padding="xl"&gt;...&lt;/novo-box&gt;</code><br/></pre>
  </typedef-snippet>
  <typedef-snippet>
    <novo-label>scss</novo-label>
    <pre><code>.box &#123;\n  &#64;include novo-padding-medium(); // use mixin \n  margin: $spacing-xs; // or use scss variables\n  padding: $spacing-xl;\n&#125; &#125;&#125;</code></pre>
  </typedef-snippet>
</typedef-example>
<!-- 
<typedef-example>
  <typedef-content>
    <novo-flex gap="1rem">
      <novo-box bg="ocean"><novo-box margin="xs" padding="xl" bg="white">xs</novo-box></novo-box>
      <novo-box bg="ocean"><novo-box margin="sm" padding="lg" bg="white">sm</novo-box></novo-box>
      <novo-box bg="ocean"><novo-box margin="md" padding="md" bg="white">md</novo-box></novo-box>
      <novo-box bg="ocean"><novo-box margin="lg" padding="sm" bg="white">lg</novo-box></novo-box>
      <novo-box bg="ocean"><novo-box margin="xl" padding="xs" bg="white">xl</novo-box></novo-box>
    </novo-flex>
  </typedef-content>
  <typedef-specs>
    <novo-label>Margin</novo-label>
    <dl>
      <dt>Font Size       </dt><dd>1.2rem</dd>
      <dt>Line Height     </dt><dd>1.375 (28px)</dd>
      <dt>Font Weight     </dt><dd>300</dd>
      <dt>Max Line Length </dt><dd>550px</dd>
    </dl>
  </typedef-specs>
  <typedef-snippet>
    <code class="tc-positive">&lt;novo-box margin="sm"&gt;...&lt;/novo-box&gt;</code> or <code class="tc-negative">&#64;include novo-margin-medium()</code>
  </typedef-snippet>
</typedef-example> -->
`,
                    host: { class: 'markdown-page' },
                    standalone: false,
                }]
        }] });
class IconographyPage {
    constructor() {
        this.params = {};
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: IconographyPage, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: IconographyPage, isStandalone: false, selector: "iconography-page", host: { classAttribute: "markdown-page" }, ngImport: i0, template: `<h1>Iconography</h1>
<h2>Certified Pixel-Perfect</h2>
<novo-grid columns="1fr 200px" gap="2rem">
  <novo-text>Icons are used to represent an action or concept through the most simplistic imagery possible. Icons give additional context to written material, allowing the user to quickly comprehend any given concept. The icons are designed on a highly specific grid to ensure maximum clarity even at a small size. Their design is friendly, human, and bold.</novo-text>
  <img src="assets/images/IconographyPageIcon.svg" width="64px">
</novo-grid>
<p><a href="http://bullhorn.github.io/bullhorn-icons/">Bullhorn's Icon Set</a></p>
<p><iconset-example></iconset-example></p>
<h2>Visual Guidelines</h2>
<p>An icon will always have slightly larger dimensions than text when they are paired together. This ensures that the icon is visually the same size as the text and that it scales proportionally.</p>
<h5>Base sizing</h5>
<p>Icons placed next to typography should alays follow this convention.</p>
<p>Bullhorn Glyphicons <strong>Size:</strong> 1.29em <strong>Padding:</strong> .25em <strong>Border Radius:</strong> .625em</p>
<h5>Scaling</h5>
<p>Make sure to scale the corner radius appropriately when enlarging or decreasing the size of the icon.</p>
<novo-grid columns="2">
  <figure-example>
    <img src="assets/images/IconographyScalingDo.svg">
    <novo-text color="grass">
      <novo-icon mr="1rem">check</novo-icon>
      <strong>Always maintain the proportions</strong>
    </novo-text>
    <novo-text>The border radius should scale as the icon does in order to keep the same aspect ratio.</novo-text>
  </figure-example>
  <figure-example>
    <img src="assets/images/IconographyScalingDont.svg">
    <novo-text color="grapefruit">
      <novo-icon mr="1rem">times</novo-icon>
      <strong>That doesn't look like a rectangle</strong>
    </novo-text>
    <novo-text>If the border radius isn't relative to the size of the icon, you will create inconsistent patterns within the application.</novo-text>
  </figure-example>
</novo-grid>
<h5>Padding</h5>
<p>To preserve readability, icons should have sufficient padding from the edges of their containers. Additionally, the icons should be visually centered in their containers.</p>
<novo-grid columns="2">
  <figure-example>
    <img src="assets/images/IconographyPaddingDo.svg">
    <novo-text color="grass">
      <novo-icon mr="1rem">check</novo-icon>
      <strong>It's good to have some breathing room</strong>
    </novo-text>
    <novo-text>Consistent spacing will create a more concise and fluid layout that will allow the user to parse information on the page easier.</novo-text>
  </figure-example>
  <figure-example>
    <img src="assets/images/IconographyPaddingDont.svg">
    <novo-text color="grapefruit">
      <novo-icon mr="1rem">times</novo-icon>
      <strong>It's getting crowded in here</strong>
    </novo-text>
    <novo-text>Give icons the space they need, the color and background color can convey additional meaning. That meaning can be obscured if the layout seems to crowded. </novo-text>
  </figure-example>
</novo-grid>
`, isInline: true, dependencies: [{ kind: "component", type: i2$1.NovoGridElement, selector: "novo-grid", inputs: ["direction", "align", "justify", "columns"] }, { kind: "component", type: i2$1.NovoIconComponent, selector: "novo-icon", inputs: ["raised", "theme", "shape", "color", "size", "smaller", "larger", "alt", "name"] }, { kind: "component", type: i2$1.NovoText, selector: "novo-text,[novo-text]", inputs: ["block"] }, { kind: "directive", type: i2$1.MarginDirective, selector: "[m],[margin],[marginTop],[marginRight],[marginBottom],[marginLeft],[marginX],[marginY],[mt],[mr],[mb],[ml],[mx],[my]", inputs: ["margin", "m", "marginLeft", "ml", "marginRight", "mr", "marginTop", "mt", "marginBottom", "mb", "marginX", "mx", "marginY", "my"] }, { kind: "directive", type: i2$1.GapDirective, selector: "[gap]", inputs: ["gap"] }, { kind: "component", type: IconsetExample, selector: "iconset-example" }, { kind: "component", type: FigureExample, selector: "figure-example", inputs: ["theme"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: IconographyPage, decorators: [{
            type: Component,
            args: [{
                    selector: 'iconography-page',
                    template: `<h1>Iconography</h1>
<h2>Certified Pixel-Perfect</h2>
<novo-grid columns="1fr 200px" gap="2rem">
  <novo-text>Icons are used to represent an action or concept through the most simplistic imagery possible. Icons give additional context to written material, allowing the user to quickly comprehend any given concept. The icons are designed on a highly specific grid to ensure maximum clarity even at a small size. Their design is friendly, human, and bold.</novo-text>
  <img src="assets/images/IconographyPageIcon.svg" width="64px">
</novo-grid>
<p><a href="http://bullhorn.github.io/bullhorn-icons/">Bullhorn's Icon Set</a></p>
<p><iconset-example></iconset-example></p>
<h2>Visual Guidelines</h2>
<p>An icon will always have slightly larger dimensions than text when they are paired together. This ensures that the icon is visually the same size as the text and that it scales proportionally.</p>
<h5>Base sizing</h5>
<p>Icons placed next to typography should alays follow this convention.</p>
<p>Bullhorn Glyphicons <strong>Size:</strong> 1.29em <strong>Padding:</strong> .25em <strong>Border Radius:</strong> .625em</p>
<h5>Scaling</h5>
<p>Make sure to scale the corner radius appropriately when enlarging or decreasing the size of the icon.</p>
<novo-grid columns="2">
  <figure-example>
    <img src="assets/images/IconographyScalingDo.svg">
    <novo-text color="grass">
      <novo-icon mr="1rem">check</novo-icon>
      <strong>Always maintain the proportions</strong>
    </novo-text>
    <novo-text>The border radius should scale as the icon does in order to keep the same aspect ratio.</novo-text>
  </figure-example>
  <figure-example>
    <img src="assets/images/IconographyScalingDont.svg">
    <novo-text color="grapefruit">
      <novo-icon mr="1rem">times</novo-icon>
      <strong>That doesn't look like a rectangle</strong>
    </novo-text>
    <novo-text>If the border radius isn't relative to the size of the icon, you will create inconsistent patterns within the application.</novo-text>
  </figure-example>
</novo-grid>
<h5>Padding</h5>
<p>To preserve readability, icons should have sufficient padding from the edges of their containers. Additionally, the icons should be visually centered in their containers.</p>
<novo-grid columns="2">
  <figure-example>
    <img src="assets/images/IconographyPaddingDo.svg">
    <novo-text color="grass">
      <novo-icon mr="1rem">check</novo-icon>
      <strong>It's good to have some breathing room</strong>
    </novo-text>
    <novo-text>Consistent spacing will create a more concise and fluid layout that will allow the user to parse information on the page easier.</novo-text>
  </figure-example>
  <figure-example>
    <img src="assets/images/IconographyPaddingDont.svg">
    <novo-text color="grapefruit">
      <novo-icon mr="1rem">times</novo-icon>
      <strong>It's getting crowded in here</strong>
    </novo-text>
    <novo-text>Give icons the space they need, the color and background color can convey additional meaning. That meaning can be obscured if the layout seems to crowded. </novo-text>
  </figure-example>
</novo-grid>
`,
                    host: { class: 'markdown-page' },
                    standalone: false,
                }]
        }] });
class CompositionPage {
    constructor() {
        this.params = {};
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: CompositionPage, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: CompositionPage, isStandalone: false, selector: "composition-page", host: { classAttribute: "markdown-page" }, ngImport: i0, template: `<h1>Composition</h1>
<h2>A universal language</h2>
<p>Comprehensive design principles and language helps maintain usability and a sense of harmony across a large family of products. Consistency and common elements greatly reduce the user effort requred to learn a new interface.</p>
<h2>Mainframe</h2>
<p>The Mainframe refers to the permanently fixed portions of the application that never change. It contains the primary navigation and core functions.</p>
<blockquote>
<h6>Design Principles: Hierarchy &amp; Unity</h6>
<div class="p">Unity implies relation through proximity, size, and color. Making elements clearly distinct or unified helps create a strong visual hierarchy. This is important because it helps to easily differentiate the level of importance between different elements, and controls a user's cognitive flow.</div>
</blockquote>
<novo-grid columns="2" align="start" gap="2rem">
<blockquote>
<div class="p"><strong>Top Frame</strong></div>
<div class="p">The top frame contains key functions (Find, Add) and navigation to the Resource Center and to User Profile options.</div>
</blockquote>
<p class="markdown-img"><img src="assets/images/LayoutMainframeTopFrame.svg" alt="mainframe"></p>
<blockquote>
<div class="p"><strong>Bowling Alley</strong></div>
<div class="p">The bowling alley is where all active items are displayed, allowing users to easily shift between them.</div>
</blockquote>
<p class="markdown-img"><img src="assets/images/LayoutMainframeBowlingAlley.svg" alt="bowling alley"></p>
<blockquote>
<div class="p"><strong>Menu</strong></div>
<div class="p">The menu functions as the primary navigation for the application. It contains links to every list, the dashboard, admin functions, tools, and third-party applications. The items on the menu can be toggled, grouped, and organized however the user wishes.</div>
</blockquote>
<p class="markdown-img"><img src="assets/images/LayoutMainframeMenu.svg" alt="menu"></p>
</novo-grid>
<h2>Headers</h2>
<p>Headers hold key information and controls for a page. They serve as a wayfinding marker to help the user understand context and easily access important actions.</p>
<h6>Design Principles: Navigation &amp; Consistency</h6>
<p>A consistent navigation structure allows users to master an interface much more quickly, as they know that certain functions are always in the same place. We use headers to provide quick access to key functions and aid findability of data in a complex system.</p>
<novo-grid columns="2" align="start" gap="2rem">
<blockquote>
<div class="p"><strong>Overviews &amp; Slideouts</strong></div>
<div class="p">Overview and Slideout headers are dominant features which focus the user's attention to the context of a particular record and contains key information on the left, and actions on the right. These headers inherit the color of the entity type.</div>
</blockquote>
<p class="markdown-img"><img src="assets/images/LayoutMainframeHeaderOverview.svg" alt="overview header"></p>
<blockquote>
<div class="p"><strong>List Headers</strong></div>
<div class="p">List headers contain the filter and column controls for the list and the primary actions. They are fixed so that results can eaily be modified and actioned regardless of scrolling position.</div>
</blockquote>
<p class="markdown-img"><img src="assets/images/LayoutMainframeHeaderList.svg" alt="list header"></p>
<blockquote>
<div class="p"><strong>Add &amp; Edit Pages</strong></div>
<div class="p">The headers of Add and Edit pages generally serve as a simple visual element to help provide context.</div>
</blockquote>
<p class="markdown-img"><img src="assets/images/LayoutMainframeHeaderEditPage.svg" alt="add page header"></p>
</novo-grid>
<h2>Cards</h2>
<p>Essential to our design paradigm, cards are independent blocks of information. They can contain text, tables, and data visualizations. They offer a curated view of data. Bringing the most pertinent information to the forefont, they allow users to scan large amounts of data quickly.</p>
<blockquote>
<div class="p"><strong>Design Principle: Cards</strong></div>
<div class="p">The card system scales easily, both in individual size and in groups. Because of this, cards are essential to our design language. Cards balance and align very easily, promoting findability. These handy little containers also provide a contextually relevant home for all content.</div>
</blockquote>
<blockquote>
<div class="p"><strong>Hint:</strong> This is a great place for third-party developers to fit into the Bullhorn system. <strong>Are you a developer?</strong> Check out card markup and documentation here</div>
</blockquote>
<novo-grid columns="2" align="start" gap="2rem">
<blockquote>
<div class="p"><strong>Basic Structure</strong></div>
<div class="p">Cards have a header which contains the card title and the card controls. The controls can vary depending on card type, gut generally include move, refresh, configure, and remove. The content area has padding by default but can also run edge-to-edge. Pulse cards have a special icon next to the title.</div>
</blockquote>
<p class="markdown-img"><img src="assets/images/LayoutMainframeCardsNPSCard.svg" alt="card"></p>
<blockquote>
<div class="p"><strong>Dashboard &amp; Overviews</strong></div>
<div class="p">Dashboards and Records Overviews are the primary home for our cards. They offer a customizable workspace to arrange and configure to most appropriately fit the user's needs. Cards have a fixed height, but mildly flexible width. They can also be expanded to full-screen. The &quot;add card&quot; control is always located in the top right, to be consistent with the placement of action buttons on tables and lists.</div>
</blockquote>
<p class="markdown-img"><img src="assets/images/LayoutMainframeCardsDashboard.svg" alt="dashboard cards"></p>
<blockquote>
<div class="p"><strong>Slideouts and Mobile</strong></div>
<div class="p">Cards are so flexible, they also work well in a mobile setting. They help users to easily scan chunks of information and find what they need.</div>
</blockquote>
<p class="markdown-img"><img src="assets/images/LayoutMobileCard.svg" alt="mobile cards"></p>
</novo-grid>`, isInline: true, dependencies: [{ kind: "component", type: i2$1.NovoGridElement, selector: "novo-grid", inputs: ["direction", "align", "justify", "columns"] }, { kind: "directive", type: i2$1.GapDirective, selector: "[gap]", inputs: ["gap"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: CompositionPage, decorators: [{
            type: Component,
            args: [{
                    selector: 'composition-page',
                    template: `<h1>Composition</h1>
<h2>A universal language</h2>
<p>Comprehensive design principles and language helps maintain usability and a sense of harmony across a large family of products. Consistency and common elements greatly reduce the user effort requred to learn a new interface.</p>
<h2>Mainframe</h2>
<p>The Mainframe refers to the permanently fixed portions of the application that never change. It contains the primary navigation and core functions.</p>
<blockquote>
<h6>Design Principles: Hierarchy &amp; Unity</h6>
<div class="p">Unity implies relation through proximity, size, and color. Making elements clearly distinct or unified helps create a strong visual hierarchy. This is important because it helps to easily differentiate the level of importance between different elements, and controls a user's cognitive flow.</div>
</blockquote>
<novo-grid columns="2" align="start" gap="2rem">
<blockquote>
<div class="p"><strong>Top Frame</strong></div>
<div class="p">The top frame contains key functions (Find, Add) and navigation to the Resource Center and to User Profile options.</div>
</blockquote>
<p class="markdown-img"><img src="assets/images/LayoutMainframeTopFrame.svg" alt="mainframe"></p>
<blockquote>
<div class="p"><strong>Bowling Alley</strong></div>
<div class="p">The bowling alley is where all active items are displayed, allowing users to easily shift between them.</div>
</blockquote>
<p class="markdown-img"><img src="assets/images/LayoutMainframeBowlingAlley.svg" alt="bowling alley"></p>
<blockquote>
<div class="p"><strong>Menu</strong></div>
<div class="p">The menu functions as the primary navigation for the application. It contains links to every list, the dashboard, admin functions, tools, and third-party applications. The items on the menu can be toggled, grouped, and organized however the user wishes.</div>
</blockquote>
<p class="markdown-img"><img src="assets/images/LayoutMainframeMenu.svg" alt="menu"></p>
</novo-grid>
<h2>Headers</h2>
<p>Headers hold key information and controls for a page. They serve as a wayfinding marker to help the user understand context and easily access important actions.</p>
<h6>Design Principles: Navigation &amp; Consistency</h6>
<p>A consistent navigation structure allows users to master an interface much more quickly, as they know that certain functions are always in the same place. We use headers to provide quick access to key functions and aid findability of data in a complex system.</p>
<novo-grid columns="2" align="start" gap="2rem">
<blockquote>
<div class="p"><strong>Overviews &amp; Slideouts</strong></div>
<div class="p">Overview and Slideout headers are dominant features which focus the user's attention to the context of a particular record and contains key information on the left, and actions on the right. These headers inherit the color of the entity type.</div>
</blockquote>
<p class="markdown-img"><img src="assets/images/LayoutMainframeHeaderOverview.svg" alt="overview header"></p>
<blockquote>
<div class="p"><strong>List Headers</strong></div>
<div class="p">List headers contain the filter and column controls for the list and the primary actions. They are fixed so that results can eaily be modified and actioned regardless of scrolling position.</div>
</blockquote>
<p class="markdown-img"><img src="assets/images/LayoutMainframeHeaderList.svg" alt="list header"></p>
<blockquote>
<div class="p"><strong>Add &amp; Edit Pages</strong></div>
<div class="p">The headers of Add and Edit pages generally serve as a simple visual element to help provide context.</div>
</blockquote>
<p class="markdown-img"><img src="assets/images/LayoutMainframeHeaderEditPage.svg" alt="add page header"></p>
</novo-grid>
<h2>Cards</h2>
<p>Essential to our design paradigm, cards are independent blocks of information. They can contain text, tables, and data visualizations. They offer a curated view of data. Bringing the most pertinent information to the forefont, they allow users to scan large amounts of data quickly.</p>
<blockquote>
<div class="p"><strong>Design Principle: Cards</strong></div>
<div class="p">The card system scales easily, both in individual size and in groups. Because of this, cards are essential to our design language. Cards balance and align very easily, promoting findability. These handy little containers also provide a contextually relevant home for all content.</div>
</blockquote>
<blockquote>
<div class="p"><strong>Hint:</strong> This is a great place for third-party developers to fit into the Bullhorn system. <strong>Are you a developer?</strong> Check out card markup and documentation here</div>
</blockquote>
<novo-grid columns="2" align="start" gap="2rem">
<blockquote>
<div class="p"><strong>Basic Structure</strong></div>
<div class="p">Cards have a header which contains the card title and the card controls. The controls can vary depending on card type, gut generally include move, refresh, configure, and remove. The content area has padding by default but can also run edge-to-edge. Pulse cards have a special icon next to the title.</div>
</blockquote>
<p class="markdown-img"><img src="assets/images/LayoutMainframeCardsNPSCard.svg" alt="card"></p>
<blockquote>
<div class="p"><strong>Dashboard &amp; Overviews</strong></div>
<div class="p">Dashboards and Records Overviews are the primary home for our cards. They offer a customizable workspace to arrange and configure to most appropriately fit the user's needs. Cards have a fixed height, but mildly flexible width. They can also be expanded to full-screen. The &quot;add card&quot; control is always located in the top right, to be consistent with the placement of action buttons on tables and lists.</div>
</blockquote>
<p class="markdown-img"><img src="assets/images/LayoutMainframeCardsDashboard.svg" alt="dashboard cards"></p>
<blockquote>
<div class="p"><strong>Slideouts and Mobile</strong></div>
<div class="p">Cards are so flexible, they also work well in a mobile setting. They help users to easily scan chunks of information and find what they need.</div>
</blockquote>
<p class="markdown-img"><img src="assets/images/LayoutMobileCard.svg" alt="mobile cards"></p>
</novo-grid>`,
                    host: { class: 'markdown-page' },
                    standalone: false,
                }]
        }] });
class ColorsPage {
    constructor() {
        this.params = {};
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: ColorsPage, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: ColorsPage, isStandalone: false, selector: "colors-page", host: { classAttribute: "markdown-page" }, ngImport: i0, template: `<h1>Color</h1>
<h2>Efficient and expressive</h2>
<p>Our colors are bold, fresh, and approachable. They are expressive and delightful, but selected with usability and accessibility in mind.</p>
<h2>Primary Colors</h2>
<p>These are the base colors of the application.</p>
<p><primary-colors-example></primary-colors-example></p>
<h2>Entity Colors</h2>
<p>This bold palette uses carefully balanced colors to distinguish entities from one another.</p>
<p><entity-colors-example></entity-colors-example></p>
<h2>Analyltics Colors</h2>
<p>This palette features vibrant, bold colors for use in data visualization.</p>
<p><analytics-colors-example></analytics-colors-example></p>
`, isInline: true, dependencies: [{ kind: "component", type: PrimaryColorsExample, selector: "primary-colors-example" }, { kind: "component", type: EntityColorsExample, selector: "entity-colors-example" }, { kind: "component", type: AnalyticsColorsExample, selector: "analytics-colors-example" }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: ColorsPage, decorators: [{
            type: Component,
            args: [{
                    selector: 'colors-page',
                    template: `<h1>Color</h1>
<h2>Efficient and expressive</h2>
<p>Our colors are bold, fresh, and approachable. They are expressive and delightful, but selected with usability and accessibility in mind.</p>
<h2>Primary Colors</h2>
<p>These are the base colors of the application.</p>
<p><primary-colors-example></primary-colors-example></p>
<h2>Entity Colors</h2>
<p>This bold palette uses carefully balanced colors to distinguish entities from one another.</p>
<p><entity-colors-example></entity-colors-example></p>
<h2>Analyltics Colors</h2>
<p>This palette features vibrant, bold colors for use in data visualization.</p>
<p><analytics-colors-example></analytics-colors-example></p>
`,
                    host: { class: 'markdown-page' },
                    standalone: false,
                }]
        }] });
class ComponentsPage {
    constructor() {
        this.params = {};
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: ComponentsPage, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: ComponentsPage, isStandalone: false, selector: "components-page", host: { classAttribute: "markdown-page" }, ngImport: i0, template: `<h1>Components</h1>
<p>This is a landing page</p>
`, isInline: true }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: ComponentsPage, decorators: [{
            type: Component,
            args: [{
                    selector: 'components-page',
                    template: `<h1>Components</h1>
<p>This is a landing page</p>
`,
                    host: { class: 'markdown-page' },
                    standalone: false,
                }]
        }] });
class TooltipExamplesPage {
    constructor() {
        this.params = {};
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: TooltipExamplesPage, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: TooltipExamplesPage, isStandalone: false, selector: "tooltip-examples-page", host: { classAttribute: "markdown-page" }, ngImport: i0, template: `<h2>Placement</h2>
<p><code-example example="tooltip-placement"></code-example></p>
<h2>Alignment</h2>
<p><code-example example="tooltip-align"></code-example></p>
<h2>Types</h2>
<p><code-example example="tooltip-types"></code-example></p>
<h2>Sizes</h2>
<p><code-example example="tooltip-sizes"></code-example></p>
<h2>Options</h2>
<p><code-example example="tooltip-options"></code-example></p>
<h2>Toggle Trigger</h2>
<p><code-example example="tooltip-toggle"></code-example></p>
<h2>Overflow</h2>
<p><code-example example="tooltip-overflow"></code-example></p>
`, isInline: true, dependencies: [{ kind: "component", type: CodeExampleComponent, selector: "code-example", inputs: ["example"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: TooltipExamplesPage, decorators: [{
            type: Component,
            args: [{
                    selector: 'tooltip-examples-page',
                    template: `<h2>Placement</h2>
<p><code-example example="tooltip-placement"></code-example></p>
<h2>Alignment</h2>
<p><code-example example="tooltip-align"></code-example></p>
<h2>Types</h2>
<p><code-example example="tooltip-types"></code-example></p>
<h2>Sizes</h2>
<p><code-example example="tooltip-sizes"></code-example></p>
<h2>Options</h2>
<p><code-example example="tooltip-options"></code-example></p>
<h2>Toggle Trigger</h2>
<p><code-example example="tooltip-toggle"></code-example></p>
<h2>Overflow</h2>
<p><code-example example="tooltip-overflow"></code-example></p>
`,
                    host: { class: 'markdown-page' },
                    standalone: false,
                }]
        }] });
class TooltipDevelopPage {
    constructor() {
        this.params = {};
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: TooltipDevelopPage, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: TooltipDevelopPage, isStandalone: false, selector: "tooltip-develop-page", host: { classAttribute: "markdown-page" }, ngImport: i0, template: `<h1>Technical Details</h1>
<p>Tooltips are used as system notifications. They can contain custom text titles and messages, as well as any icons from bh-icons and any color from our color palletes.</p>
<ul>
<li><strong>source:</strong> <a href="https://github.com/bullhorn/novo-elements/blob/master/projects/novo-elements/src/elements/tooltip">(github)</a></li>
<li><strong>module:</strong> <code>import &#123; NovoTooltipModule &#125; from 'novo-elements';</code></li>
</ul>
<p><strong>Usage</strong></p>
<pre><code class="language-html"><span class="hljs-tag">&lt;<span class="hljs-name">novo-field</span> <span class="hljs-attr">layout</span>=<span class="hljs-string">&quot;horizontal&quot;</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">novo-label</span> <span class="hljs-attr">tooltip</span>=<span class="hljs-string">&quot;This Field is REQUIRED&quot;</span> <span class="hljs-attr">tooltipPosition</span>=<span class="hljs-string">&quot;top-left&quot;</span>&gt;</span>Amount<span class="hljs-tag">&lt;/<span class="hljs-name">novo-label</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">novoInput</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;number&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;example-right-align&quot;</span> /&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">novo-field</span>&gt;</span>
</code></pre>
<h1>Roadmap</h1>
<ul class="contains-task-list">
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"> Improve Typing Support</li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> Make color and theming consistent</li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> Dark Mode</li>
</ul>
<h1>Changelog</h1>
<h3>6.0.0</h3>
<p><em>none</em></p>
<h1>Components</h1>
<h2>TooltipDirective <code>[tooltip]</code></h2>
<p>Adds a tooltip to the element the directive is attached too. Use the input option to align and control how the tooltip displays.</p>
<h3>Properties</h3>
<p><props-table component="TooltipDirective"></props-table></p>
`, isInline: true, dependencies: [{ kind: "component", type: PropsTableComponent, selector: "props-table", inputs: ["component", "kinds"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: TooltipDevelopPage, decorators: [{
            type: Component,
            args: [{
                    selector: 'tooltip-develop-page',
                    template: `<h1>Technical Details</h1>
<p>Tooltips are used as system notifications. They can contain custom text titles and messages, as well as any icons from bh-icons and any color from our color palletes.</p>
<ul>
<li><strong>source:</strong> <a href="https://github.com/bullhorn/novo-elements/blob/master/projects/novo-elements/src/elements/tooltip">(github)</a></li>
<li><strong>module:</strong> <code>import &#123; NovoTooltipModule &#125; from 'novo-elements';</code></li>
</ul>
<p><strong>Usage</strong></p>
<pre><code class="language-html"><span class="hljs-tag">&lt;<span class="hljs-name">novo-field</span> <span class="hljs-attr">layout</span>=<span class="hljs-string">&quot;horizontal&quot;</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">novo-label</span> <span class="hljs-attr">tooltip</span>=<span class="hljs-string">&quot;This Field is REQUIRED&quot;</span> <span class="hljs-attr">tooltipPosition</span>=<span class="hljs-string">&quot;top-left&quot;</span>&gt;</span>Amount<span class="hljs-tag">&lt;/<span class="hljs-name">novo-label</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">novoInput</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;number&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;example-right-align&quot;</span> /&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">novo-field</span>&gt;</span>
</code></pre>
<h1>Roadmap</h1>
<ul class="contains-task-list">
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"> Improve Typing Support</li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> Make color and theming consistent</li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> Dark Mode</li>
</ul>
<h1>Changelog</h1>
<h3>6.0.0</h3>
<p><em>none</em></p>
<h1>Components</h1>
<h2>TooltipDirective <code>[tooltip]</code></h2>
<p>Adds a tooltip to the element the directive is attached too. Use the input option to align and control how the tooltip displays.</p>
<h3>Properties</h3>
<p><props-table component="TooltipDirective"></props-table></p>
`,
                    host: { class: 'markdown-page' },
                    standalone: false,
                }]
        }] });
class TooltipDesignPage {
    constructor() {
        this.params = {};
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: TooltipDesignPage, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: TooltipDesignPage, isStandalone: false, selector: "tooltip-design-page", host: { classAttribute: "markdown-page" }, ngImport: i0, template: `<h2>Usage</h2>
<novo-grid columns="2" align="start" gap="2rem">
<div>
<p>Tooltips are layered containers that provide basic identifying information about an elment.  The are usually triggered by hovering over the buttons and icons. Tooltips are meant to stand out visually through their contrasting container color to draw immediate attention to their contents.</p>
</div>
<img src="assets/images/TooltipOverview.png"/>
<div>
<p><img src="assets/images/TooltipGoodUsage.png" alt="Good Usage"></p>
<h3>Use When</h3>
<ul class="contains-do-list">
<li class="bullhorn-do-item">
<p><novo-icon color="grass" mr="md" size="md">check</novo-icon><novo-text color="grass"> Providing a short description of a page element or control.</novo-text></p>
<p>Page elements or contorls such as buttons and form fields can use tooltips for context.</p>
</li>
<li class="bullhorn-do-item">
<p><novo-icon color="grass" mr="md" size="md">check</novo-icon><novo-text color="grass"> Describing the action of an icon-only button.</novo-text></p>
<p>In case icon images are hard to view or do not load, tooltips are used to describe their actions.</p>
</li>
<li class="bullhorn-do-item">
<p><novo-icon color="grass" mr="md" size="md">check</novo-icon><novo-text color="grass"> Revealing the full text of truncated data.</novo-text></p>
<p>In a table view, a tooltip can help reveal header names which maybe truncated.</p>
</li>
</ul>
</div>
<div>
<p><img src="assets/images/TooltipBadUsage.png" alt="Bad Usage"></p>
<h3>Don′t Use When</h3>
<ul class="contains-do-list">
<li class="bullhorn-do-item">
<p><novo-icon color="grapefruit" mr="md" size="md">times</novo-icon><novo-text color="grapefruit"> Don't use for describing supplemental information.</novo-text></p>
<p>Consider using a <a href="#components/pop%20over/design">popover</a> instead.</p>
</li>
<li class="bullhorn-do-item">
<p><novo-icon color="grapefruit" mr="md" size="md">times</novo-icon><novo-text color="grapefruit"> Don't use when interactions are needed from the user.</novo-text></p>
<p>If the information inside is used to exend a workflow or user interaction, consider using a <a href="#components/modal/design">modal</a> or <a href="#components/pop%20over/design">popover</a> instead.</p>
</li>
<li class="bullhorn-do-item">
<p><novo-icon color="grapefruit" mr="md" size="md">times</novo-icon><novo-text color="grapefruit"> Don't use tooltips to communicate crucial information</novo-text></p>
<p>If you have help text that must be read, consider using a <a href="#components/tip%20well/design">tip well</a> instead.</p>
</li>
<li class="bullhorn-do-item">
<p><novo-icon color="grapefruit" mr="md" size="md">times</novo-icon><novo-text color="grapefruit"> Don't use to display a message based on incorrect action.</novo-text></p>
<p>Consider using a <a href="#components/toaster/design">toast</a> instead.</p>
</li>
</ul>
</div>
</novo-grid>
<h2>Anatomy</h2>
<novo-grid columns="2" align="start" gap="2rem">
<img src="assets/images/TooltipAnatomy.png" width="450">
<div>
<ol>
<li>
<p><strong>Container</strong><br>
Contains the entire body of the tooltip. This container will be positioned based on the aligment of the trigger element. The container should appear elevated with a shadow to separate it form the page.  The height depends on the number of lines and the width is decided contextually based on when it looks best for the tooltip to split into another line.</p>
</li>
<li>
<p><strong>Trigger</strong><br>
The triangular element that anchors the tooltip and controls how the tooltip wil be triggered via hover.</p>
</li>
<li>
<p><strong>Content</strong><br>
The tooltip contents are defined based upon the application needs and business use-case.</p>
</li>
</ol>
</div>
</novo-grid>
<h2>Best Practices</h2>
<ul>
<li>Depending on usage a maximum of three lines in a tooltip is a good guideline, the tip is supposed to be quick and concise.</li>
<li>When choosing which tooltip position to use, try not to block important content, and make sure that the tooltip is still on the screen and readable.</li>
<li>For longer tooltips, choose an approriate width based on a readable line-length.</li>
</ul>
<h2>Options</h2>
<novo-grid columns="2" align="start" gap="2rem">
<blockquote>
<div class="p"><strong>Colors</strong></div>
<div class="p">Tooltips also come in semantic variants: informative (blue), positive (green), and negative (red). These use semantic colors to communicate the meaning.</div>
</blockquote>
<p><img src="assets/images/TooltipColor.png" alt="Tooltip Colors"></p>
<blockquote>
<div class="p"><strong>Sizing</strong></div>
<div class="p">When the label is too long for the available horizontal space, it wraps to form another line. To control the visually display text-length you can set the size of the tooltip with the <code>tooltip-size</code> property.</div>
</blockquote>
<p><img src="assets/images/TooltipSize.png" alt="Tooltip Size"></p>
<blockquote>
<div class="p"><strong>Placement</strong></div>
<div class="p">A tooltip is positioned in relation to its source. The placement property values are at the: <code>top</code>, <code>top left</code>, <code>top right</code>, <code>bottom</code>, <code>bottom left</code>, <code>bottom right</code>, <code>left</code>, <code>right</code>. The default placement value is at the right.</div>
</blockquote>
<p><img src="assets/images/TooltipPosition.png" alt="Tooltip Placement"></p>
</novo-grid>
`, isInline: true, dependencies: [{ kind: "component", type: i2$1.NovoGridElement, selector: "novo-grid", inputs: ["direction", "align", "justify", "columns"] }, { kind: "component", type: i2$1.NovoIconComponent, selector: "novo-icon", inputs: ["raised", "theme", "shape", "color", "size", "smaller", "larger", "alt", "name"] }, { kind: "component", type: i2$1.NovoText, selector: "novo-text,[novo-text]", inputs: ["block"] }, { kind: "directive", type: i2$1.MarginDirective, selector: "[m],[margin],[marginTop],[marginRight],[marginBottom],[marginLeft],[marginX],[marginY],[mt],[mr],[mb],[ml],[mx],[my]", inputs: ["margin", "m", "marginLeft", "ml", "marginRight", "mr", "marginTop", "mt", "marginBottom", "mb", "marginX", "mx", "marginY", "my"] }, { kind: "directive", type: i2$1.GapDirective, selector: "[gap]", inputs: ["gap"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: TooltipDesignPage, decorators: [{
            type: Component,
            args: [{
                    selector: 'tooltip-design-page',
                    template: `<h2>Usage</h2>
<novo-grid columns="2" align="start" gap="2rem">
<div>
<p>Tooltips are layered containers that provide basic identifying information about an elment.  The are usually triggered by hovering over the buttons and icons. Tooltips are meant to stand out visually through their contrasting container color to draw immediate attention to their contents.</p>
</div>
<img src="assets/images/TooltipOverview.png"/>
<div>
<p><img src="assets/images/TooltipGoodUsage.png" alt="Good Usage"></p>
<h3>Use When</h3>
<ul class="contains-do-list">
<li class="bullhorn-do-item">
<p><novo-icon color="grass" mr="md" size="md">check</novo-icon><novo-text color="grass"> Providing a short description of a page element or control.</novo-text></p>
<p>Page elements or contorls such as buttons and form fields can use tooltips for context.</p>
</li>
<li class="bullhorn-do-item">
<p><novo-icon color="grass" mr="md" size="md">check</novo-icon><novo-text color="grass"> Describing the action of an icon-only button.</novo-text></p>
<p>In case icon images are hard to view or do not load, tooltips are used to describe their actions.</p>
</li>
<li class="bullhorn-do-item">
<p><novo-icon color="grass" mr="md" size="md">check</novo-icon><novo-text color="grass"> Revealing the full text of truncated data.</novo-text></p>
<p>In a table view, a tooltip can help reveal header names which maybe truncated.</p>
</li>
</ul>
</div>
<div>
<p><img src="assets/images/TooltipBadUsage.png" alt="Bad Usage"></p>
<h3>Don′t Use When</h3>
<ul class="contains-do-list">
<li class="bullhorn-do-item">
<p><novo-icon color="grapefruit" mr="md" size="md">times</novo-icon><novo-text color="grapefruit"> Don't use for describing supplemental information.</novo-text></p>
<p>Consider using a <a href="#components/pop%20over/design">popover</a> instead.</p>
</li>
<li class="bullhorn-do-item">
<p><novo-icon color="grapefruit" mr="md" size="md">times</novo-icon><novo-text color="grapefruit"> Don't use when interactions are needed from the user.</novo-text></p>
<p>If the information inside is used to exend a workflow or user interaction, consider using a <a href="#components/modal/design">modal</a> or <a href="#components/pop%20over/design">popover</a> instead.</p>
</li>
<li class="bullhorn-do-item">
<p><novo-icon color="grapefruit" mr="md" size="md">times</novo-icon><novo-text color="grapefruit"> Don't use tooltips to communicate crucial information</novo-text></p>
<p>If you have help text that must be read, consider using a <a href="#components/tip%20well/design">tip well</a> instead.</p>
</li>
<li class="bullhorn-do-item">
<p><novo-icon color="grapefruit" mr="md" size="md">times</novo-icon><novo-text color="grapefruit"> Don't use to display a message based on incorrect action.</novo-text></p>
<p>Consider using a <a href="#components/toaster/design">toast</a> instead.</p>
</li>
</ul>
</div>
</novo-grid>
<h2>Anatomy</h2>
<novo-grid columns="2" align="start" gap="2rem">
<img src="assets/images/TooltipAnatomy.png" width="450">
<div>
<ol>
<li>
<p><strong>Container</strong><br>
Contains the entire body of the tooltip. This container will be positioned based on the aligment of the trigger element. The container should appear elevated with a shadow to separate it form the page.  The height depends on the number of lines and the width is decided contextually based on when it looks best for the tooltip to split into another line.</p>
</li>
<li>
<p><strong>Trigger</strong><br>
The triangular element that anchors the tooltip and controls how the tooltip wil be triggered via hover.</p>
</li>
<li>
<p><strong>Content</strong><br>
The tooltip contents are defined based upon the application needs and business use-case.</p>
</li>
</ol>
</div>
</novo-grid>
<h2>Best Practices</h2>
<ul>
<li>Depending on usage a maximum of three lines in a tooltip is a good guideline, the tip is supposed to be quick and concise.</li>
<li>When choosing which tooltip position to use, try not to block important content, and make sure that the tooltip is still on the screen and readable.</li>
<li>For longer tooltips, choose an approriate width based on a readable line-length.</li>
</ul>
<h2>Options</h2>
<novo-grid columns="2" align="start" gap="2rem">
<blockquote>
<div class="p"><strong>Colors</strong></div>
<div class="p">Tooltips also come in semantic variants: informative (blue), positive (green), and negative (red). These use semantic colors to communicate the meaning.</div>
</blockquote>
<p><img src="assets/images/TooltipColor.png" alt="Tooltip Colors"></p>
<blockquote>
<div class="p"><strong>Sizing</strong></div>
<div class="p">When the label is too long for the available horizontal space, it wraps to form another line. To control the visually display text-length you can set the size of the tooltip with the <code>tooltip-size</code> property.</div>
</blockquote>
<p><img src="assets/images/TooltipSize.png" alt="Tooltip Size"></p>
<blockquote>
<div class="p"><strong>Placement</strong></div>
<div class="p">A tooltip is positioned in relation to its source. The placement property values are at the: <code>top</code>, <code>top left</code>, <code>top right</code>, <code>bottom</code>, <code>bottom left</code>, <code>bottom right</code>, <code>left</code>, <code>right</code>. The default placement value is at the right.</div>
</blockquote>
<p><img src="assets/images/TooltipPosition.png" alt="Tooltip Placement"></p>
</novo-grid>
`,
                    host: { class: 'markdown-page' },
                    standalone: false,
                }]
        }] });
class ToolbarExamplesPage {
    constructor() {
        this.params = {};
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: ToolbarExamplesPage, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: ToolbarExamplesPage, isStandalone: false, selector: "toolbar-examples-page", host: { classAttribute: "markdown-page" }, ngImport: i0, template: `<h2>Basic Usage</h2>
<p><code-example example="basic-toolbar"></code-example></p>
<h2>MultiRow Demo</h2>
<p><code-example example="multi-row-toolbar"></code-example></p>
`, isInline: true, dependencies: [{ kind: "component", type: CodeExampleComponent, selector: "code-example", inputs: ["example"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: ToolbarExamplesPage, decorators: [{
            type: Component,
            args: [{
                    selector: 'toolbar-examples-page',
                    template: `<h2>Basic Usage</h2>
<p><code-example example="basic-toolbar"></code-example></p>
<h2>MultiRow Demo</h2>
<p><code-example example="multi-row-toolbar"></code-example></p>
`,
                    host: { class: 'markdown-page' },
                    standalone: false,
                }]
        }] });
class ToolbarDevelopPage {
    constructor() {
        this.params = {};
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: ToolbarDevelopPage, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: ToolbarDevelopPage, isStandalone: false, selector: "toolbar-develop-page", host: { classAttribute: "markdown-page" }, ngImport: i0, template: `<h1>Technical Details</h1>
<p>Toolbars are used as ephemeral containers of helpful text. The importance of the content is usually short-lived and no longer needed once disseminated.</p>
<ul>
<li><strong>source:</strong> <a href="https://github.com/bullhorn/novo-elements/blob/master/projects/novo-elements/src/elements/toolbar">(github)</a></li>
<li><strong>module:</strong> <code>import &#123; NovoToolbarModule &#125; from 'novo-elements';</code></li>
</ul>
<p><strong>Usage</strong></p>
<pre><code class="language-html"><span class="hljs-tag">&lt;<span class="hljs-name">novo-toolbar</span> <span class="hljs-attr">color</span>=<span class="hljs-string">&quot;company&quot;</span> <span class="hljs-attr">gap</span>=<span class="hljs-string">&quot;1rem&quot;</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">novo-icon</span>&gt;</span>company<span class="hljs-tag">&lt;/<span class="hljs-name">novo-icon</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">novo-title</span>&gt;</span>Taurus Industries<span class="hljs-tag">&lt;/<span class="hljs-name">novo-title</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;example-spacer&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">novo-action</span> <span class="hljs-attr">icon</span>=<span class="hljs-string">&quot;share&quot;</span> <span class="hljs-attr">tooltip</span>=<span class="hljs-string">&quot;Share&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">novo-action</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">novo-action</span> <span class="hljs-attr">icon</span>=<span class="hljs-string">&quot;print&quot;</span> <span class="hljs-attr">tooltip</span>=<span class="hljs-string">&quot;Print&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">novo-action</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">novo-action</span> <span class="hljs-attr">icon</span>=<span class="hljs-string">&quot;times&quot;</span> <span class="hljs-attr">tooltip</span>=<span class="hljs-string">&quot;Close&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">novo-action</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">novo-toolbar</span>&gt;</span>
</code></pre>
<h1>Roadmap</h1>
<ul class="contains-task-list">
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"> Improve Typing Support</li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"> Dark Mode</li>
</ul>
<h1>Changelog</h1>
<h3>6.0.0</h3>
<ul>
<li>Added in this version</li>
</ul>
<h1>Components</h1>
<h2>NovoToolbarElement <code>novo-toolbar</code></h2>
<p>The <code>novo-toolbar</code> component is just a container, look at patterns to determine correct usage.</p>
<h3>Properties</h3>
<p><props-table component="NovoToolbar"></props-table></p>
<h2>NovoToolbarRowElement <code>novo-toolbar-row</code></h2>
<p>The <code>novo-toolbar-row</code> component is also just a container to help create multi-row toolbars, look at examples to determine correct usage.</p>
<h3>Properties</h3>
<p><props-table component="NovoToolbarRow"></props-table></p>
`, isInline: true, dependencies: [{ kind: "component", type: PropsTableComponent, selector: "props-table", inputs: ["component", "kinds"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: ToolbarDevelopPage, decorators: [{
            type: Component,
            args: [{
                    selector: 'toolbar-develop-page',
                    template: `<h1>Technical Details</h1>
<p>Toolbars are used as ephemeral containers of helpful text. The importance of the content is usually short-lived and no longer needed once disseminated.</p>
<ul>
<li><strong>source:</strong> <a href="https://github.com/bullhorn/novo-elements/blob/master/projects/novo-elements/src/elements/toolbar">(github)</a></li>
<li><strong>module:</strong> <code>import &#123; NovoToolbarModule &#125; from 'novo-elements';</code></li>
</ul>
<p><strong>Usage</strong></p>
<pre><code class="language-html"><span class="hljs-tag">&lt;<span class="hljs-name">novo-toolbar</span> <span class="hljs-attr">color</span>=<span class="hljs-string">&quot;company&quot;</span> <span class="hljs-attr">gap</span>=<span class="hljs-string">&quot;1rem&quot;</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">novo-icon</span>&gt;</span>company<span class="hljs-tag">&lt;/<span class="hljs-name">novo-icon</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">novo-title</span>&gt;</span>Taurus Industries<span class="hljs-tag">&lt;/<span class="hljs-name">novo-title</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;example-spacer&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">novo-action</span> <span class="hljs-attr">icon</span>=<span class="hljs-string">&quot;share&quot;</span> <span class="hljs-attr">tooltip</span>=<span class="hljs-string">&quot;Share&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">novo-action</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">novo-action</span> <span class="hljs-attr">icon</span>=<span class="hljs-string">&quot;print&quot;</span> <span class="hljs-attr">tooltip</span>=<span class="hljs-string">&quot;Print&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">novo-action</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">novo-action</span> <span class="hljs-attr">icon</span>=<span class="hljs-string">&quot;times&quot;</span> <span class="hljs-attr">tooltip</span>=<span class="hljs-string">&quot;Close&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">novo-action</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">novo-toolbar</span>&gt;</span>
</code></pre>
<h1>Roadmap</h1>
<ul class="contains-task-list">
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"> Improve Typing Support</li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"> Dark Mode</li>
</ul>
<h1>Changelog</h1>
<h3>6.0.0</h3>
<ul>
<li>Added in this version</li>
</ul>
<h1>Components</h1>
<h2>NovoToolbarElement <code>novo-toolbar</code></h2>
<p>The <code>novo-toolbar</code> component is just a container, look at patterns to determine correct usage.</p>
<h3>Properties</h3>
<p><props-table component="NovoToolbar"></props-table></p>
<h2>NovoToolbarRowElement <code>novo-toolbar-row</code></h2>
<p>The <code>novo-toolbar-row</code> component is also just a container to help create multi-row toolbars, look at examples to determine correct usage.</p>
<h3>Properties</h3>
<p><props-table component="NovoToolbarRow"></props-table></p>
`,
                    host: { class: 'markdown-page' },
                    standalone: false,
                }]
        }] });
class ToolbarDesignPage {
    constructor() {
        this.params = {};
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: ToolbarDesignPage, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: ToolbarDesignPage, isStandalone: false, selector: "toolbar-design-page", host: { classAttribute: "markdown-page" }, ngImport: i0, template: `<h2>Usage</h2>
<novo-grid columns="2" align="start" gap="2rem">
<div>
<p>Toolbars are containers attached to the top or bottom of a page that contain actions and/or navigation.  Toolbars can stack on-top of each providing varying levels of content.  Toolbars usually act as headers or footers of the page.</p>
</div>
<img src="assets/images/ToolbarOverview.png"/>
<div>
<h3>Use When</h3>
<ul class="contains-do-list">
<li class="bullhorn-do-item"><novo-icon color="grass" mr="md" size="md">check</novo-icon><novo-text color="grass"> The page needs navigation to its various sections.</novo-text></li>
<li class="bullhorn-do-item"><novo-icon color="grass" mr="md" size="md">check</novo-icon><novo-text color="grass"> The page needs to set the context of the page (ie. header with title)</novo-text></li>
<li class="bullhorn-do-item"><novo-icon color="grass" mr="md" size="md">check</novo-icon><novo-text color="grass"> Global Actions, preferences, setting, filters need to be displayed.</novo-text></li>
</ul>
</div>
<div>
<h3>Don′t Use When</h3>
<ul class="contains-do-list">
<li class="bullhorn-do-item"><novo-icon color="grapefruit" mr="md" size="md">times</novo-icon><novo-text color="grapefruit"> Don't use to divide/separate content.</novo-text></li>
<li class="bullhorn-do-item"><novo-icon color="grapefruit" mr="md" size="md">times</novo-icon><novo-text color="grapefruit"> Don’t use it to display multi-line text content.</novo-text></li>
<li class="bullhorn-do-item"><novo-icon color="grapefruit" mr="md" size="md">times</novo-icon><novo-text color="grapefruit"> Don't use it for background color only.</novo-text></li>
</ul>
</div>
</novo-grid>
<h2>Anatomy</h2>
<novo-flex justify="center">
  <img src="assets/images/ToolbarAnatomy.png">
</novo-flex>
<h2>Options</h2>
<novo-grid columns="2" align="start" gap="2rem">
<blockquote>
<div class="p"><img src="https://via.placeholder.com/350x200" alt="placeholder"></div>
<div class="p"><strong>Sizes</strong></div>
<div class="p">A toolbar container can be <code>sm</code>, <code>md</code>, or <code>lg</code>, which can be set by the <code>size</code> property. This will affect the height and horizontal padding of the container. Toolbars should all be the same size or stacked in descending sizes.</div>
</blockquote>
<blockquote>
<div class="p"><img src="https://via.placeholder.com/350x200" alt="placeholder"></div>
<div class="p"><strong>Dividers</strong></div>
<div class="p">Use <code>&lt;novo-divider vertical&gt;</code> to separate section in a toolbar row. Divider can be used to separate stacked toolbars but only when the toolbars are the same color.</div>
</blockquote>
<blockquote>
<div class="p"><img src="https://via.placeholder.com/350x200" alt="placeholder"></div>
<div class="p"><strong>Branding/Title</strong></div>
<div class="p">Branding in general should be setup on the left side of the toolbar. Your toolbar should either have a title or branding but not both.</div>
</blockquote>
<blockquote>
<div class="p"><img src="https://via.placeholder.com/350x200" alt="placeholder"></div>
<div class="p"><strong>Menu or Icon</strong></div>
<div class="p">If you page has side navigation or a menu, than a menu icon can appear before the title or branding. If the toolbar doesn't need the <code>menu</code> icon, you may use and static icon to help add context to your title, but you should never have both.</div>
</blockquote>
<blockquote>
<div class="p"><img src="https://via.placeholder.com/350x200" alt="placeholder"></div>
<div class="p"><strong>Tabs</strong></div>
<div class="p">Whether or not your toolbar needs top level nav, tabs should always be positioned to the right of the icon or branding.</div>
</blockquote>
<blockquote>
<div class="p"><img src="https://via.placeholder.com/350x200" alt="placeholder"></div>
<div class="p"><strong>Search</strong></div>
<div class="p">You can include search functionality in your toolbar.</div>
</blockquote>
</novo-grid>
<h2>Accessibility</h2>
<p><strong>Implementation</strong></p>
<p>Always include an <code>alt</code> attribute describing the information that is visually displayed in the image.</p>
`, isInline: true, dependencies: [{ kind: "component", type: i2$1.NovoFlexElement, selector: "novo-flex,novo-row", inputs: ["direction", "align", "justify", "wrap", "gap"] }, { kind: "component", type: i2$1.NovoGridElement, selector: "novo-grid", inputs: ["direction", "align", "justify", "columns"] }, { kind: "component", type: i2$1.NovoIconComponent, selector: "novo-icon", inputs: ["raised", "theme", "shape", "color", "size", "smaller", "larger", "alt", "name"] }, { kind: "component", type: i2$1.NovoText, selector: "novo-text,[novo-text]", inputs: ["block"] }, { kind: "directive", type: i2$1.MarginDirective, selector: "[m],[margin],[marginTop],[marginRight],[marginBottom],[marginLeft],[marginX],[marginY],[mt],[mr],[mb],[ml],[mx],[my]", inputs: ["margin", "m", "marginLeft", "ml", "marginRight", "mr", "marginTop", "mt", "marginBottom", "mb", "marginX", "mx", "marginY", "my"] }, { kind: "directive", type: i2$1.GapDirective, selector: "[gap]", inputs: ["gap"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: ToolbarDesignPage, decorators: [{
            type: Component,
            args: [{
                    selector: 'toolbar-design-page',
                    template: `<h2>Usage</h2>
<novo-grid columns="2" align="start" gap="2rem">
<div>
<p>Toolbars are containers attached to the top or bottom of a page that contain actions and/or navigation.  Toolbars can stack on-top of each providing varying levels of content.  Toolbars usually act as headers or footers of the page.</p>
</div>
<img src="assets/images/ToolbarOverview.png"/>
<div>
<h3>Use When</h3>
<ul class="contains-do-list">
<li class="bullhorn-do-item"><novo-icon color="grass" mr="md" size="md">check</novo-icon><novo-text color="grass"> The page needs navigation to its various sections.</novo-text></li>
<li class="bullhorn-do-item"><novo-icon color="grass" mr="md" size="md">check</novo-icon><novo-text color="grass"> The page needs to set the context of the page (ie. header with title)</novo-text></li>
<li class="bullhorn-do-item"><novo-icon color="grass" mr="md" size="md">check</novo-icon><novo-text color="grass"> Global Actions, preferences, setting, filters need to be displayed.</novo-text></li>
</ul>
</div>
<div>
<h3>Don′t Use When</h3>
<ul class="contains-do-list">
<li class="bullhorn-do-item"><novo-icon color="grapefruit" mr="md" size="md">times</novo-icon><novo-text color="grapefruit"> Don't use to divide/separate content.</novo-text></li>
<li class="bullhorn-do-item"><novo-icon color="grapefruit" mr="md" size="md">times</novo-icon><novo-text color="grapefruit"> Don’t use it to display multi-line text content.</novo-text></li>
<li class="bullhorn-do-item"><novo-icon color="grapefruit" mr="md" size="md">times</novo-icon><novo-text color="grapefruit"> Don't use it for background color only.</novo-text></li>
</ul>
</div>
</novo-grid>
<h2>Anatomy</h2>
<novo-flex justify="center">
  <img src="assets/images/ToolbarAnatomy.png">
</novo-flex>
<h2>Options</h2>
<novo-grid columns="2" align="start" gap="2rem">
<blockquote>
<div class="p"><img src="https://via.placeholder.com/350x200" alt="placeholder"></div>
<div class="p"><strong>Sizes</strong></div>
<div class="p">A toolbar container can be <code>sm</code>, <code>md</code>, or <code>lg</code>, which can be set by the <code>size</code> property. This will affect the height and horizontal padding of the container. Toolbars should all be the same size or stacked in descending sizes.</div>
</blockquote>
<blockquote>
<div class="p"><img src="https://via.placeholder.com/350x200" alt="placeholder"></div>
<div class="p"><strong>Dividers</strong></div>
<div class="p">Use <code>&lt;novo-divider vertical&gt;</code> to separate section in a toolbar row. Divider can be used to separate stacked toolbars but only when the toolbars are the same color.</div>
</blockquote>
<blockquote>
<div class="p"><img src="https://via.placeholder.com/350x200" alt="placeholder"></div>
<div class="p"><strong>Branding/Title</strong></div>
<div class="p">Branding in general should be setup on the left side of the toolbar. Your toolbar should either have a title or branding but not both.</div>
</blockquote>
<blockquote>
<div class="p"><img src="https://via.placeholder.com/350x200" alt="placeholder"></div>
<div class="p"><strong>Menu or Icon</strong></div>
<div class="p">If you page has side navigation or a menu, than a menu icon can appear before the title or branding. If the toolbar doesn't need the <code>menu</code> icon, you may use and static icon to help add context to your title, but you should never have both.</div>
</blockquote>
<blockquote>
<div class="p"><img src="https://via.placeholder.com/350x200" alt="placeholder"></div>
<div class="p"><strong>Tabs</strong></div>
<div class="p">Whether or not your toolbar needs top level nav, tabs should always be positioned to the right of the icon or branding.</div>
</blockquote>
<blockquote>
<div class="p"><img src="https://via.placeholder.com/350x200" alt="placeholder"></div>
<div class="p"><strong>Search</strong></div>
<div class="p">You can include search functionality in your toolbar.</div>
</blockquote>
</novo-grid>
<h2>Accessibility</h2>
<p><strong>Implementation</strong></p>
<p>Always include an <code>alt</code> attribute describing the information that is visually displayed in the image.</p>
`,
                    host: { class: 'markdown-page' },
                    standalone: false,
                }]
        }] });
class ToasterExamplesPage {
    constructor() {
        this.params = {};
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: ToasterExamplesPage, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: ToasterExamplesPage, isStandalone: false, selector: "toaster-examples-page", host: { classAttribute: "markdown-page" }, ngImport: i0, template: `<h2>Alert</h2>
<p>This type of toast notification takes a template, a style, and a location.</p>
<h2>Toast Options</h2>
<p><code-example example="toast-options"></code-example></p>
<h2>Embedded Toast</h2>
<p><code-example example="toast-usage"></code-example></p>
<h2>Toaster Service</h2>
<p><code-example example="toast-service"></code-example></p>
<h2>Toaster Actions</h2>
<p><code-example example="toast-actions"></code-example></p>
`, isInline: true, dependencies: [{ kind: "component", type: CodeExampleComponent, selector: "code-example", inputs: ["example"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: ToasterExamplesPage, decorators: [{
            type: Component,
            args: [{
                    selector: 'toaster-examples-page',
                    template: `<h2>Alert</h2>
<p>This type of toast notification takes a template, a style, and a location.</p>
<h2>Toast Options</h2>
<p><code-example example="toast-options"></code-example></p>
<h2>Embedded Toast</h2>
<p><code-example example="toast-usage"></code-example></p>
<h2>Toaster Service</h2>
<p><code-example example="toast-service"></code-example></p>
<h2>Toaster Actions</h2>
<p><code-example example="toast-actions"></code-example></p>
`,
                    host: { class: 'markdown-page' },
                    standalone: false,
                }]
        }] });
class ToasterDevelopPage {
    constructor() {
        this.params = {};
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: ToasterDevelopPage, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: ToasterDevelopPage, isStandalone: false, selector: "toaster-develop-page", host: { classAttribute: "markdown-page" }, ngImport: i0, template: `<h1>Technical Details</h1>
<p>Toasts are used as system notifications. They can contain custom text titles and messages, as well as any icons from bh-icons and any color from our color palletes.</p>
<ul>
<li><strong>source:</strong> <a href="https://github.com/bullhorn/novo-elements/blob/master/projects/novo-elements/src/elements/field">(github)</a></li>
<li><strong>module:</strong> <code>import &#123; NovoFieldModule &#125; from 'novo-elements';</code></li>
</ul>
<p><strong>Usage</strong></p>
<pre><code class="language-html"><span class="hljs-tag">&lt;<span class="hljs-name">novo-field</span> <span class="hljs-attr">layout</span>=<span class="hljs-string">&quot;horizontal&quot;</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">novo-label</span>&gt;</span>Amount<span class="hljs-tag">&lt;/<span class="hljs-name">novo-label</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">novoInput</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;number&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;example-right-align&quot;</span> /&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">novoPrefix</span>&gt;</span>$<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">novoSuffix</span>&gt;</span>.00<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">novo-hint</span>&gt;</span>Enter some money<span class="hljs-tag">&lt;/<span class="hljs-name">novo-hint</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">novo-field</span>&gt;</span>
</code></pre>
<h1>Roadmap</h1>
<ul class="contains-task-list">
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"> Improve Typing Support</li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> Make color and theming consistent</li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> Dark Mode</li>
</ul>
<h1>Changelog</h1>
<h3>5.0.0</h3>
<p><strong>Deprecation</strong></p>
<ul>
<li>You should no longer use <code>list</code> and <code>item</code> components, these are non-standard components and have been replaced with <code>novo-option</code> as used in the usage above.</li>
</ul>
<h1>Components</h1>
<h2>NovoFieldElement <code>novo-field</code></h2>
<p>The <code>novo-field</code> component expects 1 <code>button</code> or <code>novo-button</code> as the trigger for the menu list which is comprised of all the <code>novo-option</code> or <code>novo-optgroup</code> child components.</p>
<h3>Properties</h3>
<p><props-table component="NovoFieldElement"></props-table></p>
<h1>Directive</h1>
<h2>NovoInput <code>[novoInput]</code></h2>
<p>The <code>novoInput</code> component expects 1 <code>button</code> or <code>novo-button</code> as the trigger for the menu list which is comprised of all the <code>novo-option</code> or <code>novo-optgroup</code> child components.</p>
<h3>Properties</h3>
<p><props-table component="NovoInput"></props-table></p>
`, isInline: true, dependencies: [{ kind: "component", type: PropsTableComponent, selector: "props-table", inputs: ["component", "kinds"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: ToasterDevelopPage, decorators: [{
            type: Component,
            args: [{
                    selector: 'toaster-develop-page',
                    template: `<h1>Technical Details</h1>
<p>Toasts are used as system notifications. They can contain custom text titles and messages, as well as any icons from bh-icons and any color from our color palletes.</p>
<ul>
<li><strong>source:</strong> <a href="https://github.com/bullhorn/novo-elements/blob/master/projects/novo-elements/src/elements/field">(github)</a></li>
<li><strong>module:</strong> <code>import &#123; NovoFieldModule &#125; from 'novo-elements';</code></li>
</ul>
<p><strong>Usage</strong></p>
<pre><code class="language-html"><span class="hljs-tag">&lt;<span class="hljs-name">novo-field</span> <span class="hljs-attr">layout</span>=<span class="hljs-string">&quot;horizontal&quot;</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">novo-label</span>&gt;</span>Amount<span class="hljs-tag">&lt;/<span class="hljs-name">novo-label</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">novoInput</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;number&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;example-right-align&quot;</span> /&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">novoPrefix</span>&gt;</span>$<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">novoSuffix</span>&gt;</span>.00<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">novo-hint</span>&gt;</span>Enter some money<span class="hljs-tag">&lt;/<span class="hljs-name">novo-hint</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">novo-field</span>&gt;</span>
</code></pre>
<h1>Roadmap</h1>
<ul class="contains-task-list">
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"> Improve Typing Support</li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> Make color and theming consistent</li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> Dark Mode</li>
</ul>
<h1>Changelog</h1>
<h3>5.0.0</h3>
<p><strong>Deprecation</strong></p>
<ul>
<li>You should no longer use <code>list</code> and <code>item</code> components, these are non-standard components and have been replaced with <code>novo-option</code> as used in the usage above.</li>
</ul>
<h1>Components</h1>
<h2>NovoFieldElement <code>novo-field</code></h2>
<p>The <code>novo-field</code> component expects 1 <code>button</code> or <code>novo-button</code> as the trigger for the menu list which is comprised of all the <code>novo-option</code> or <code>novo-optgroup</code> child components.</p>
<h3>Properties</h3>
<p><props-table component="NovoFieldElement"></props-table></p>
<h1>Directive</h1>
<h2>NovoInput <code>[novoInput]</code></h2>
<p>The <code>novoInput</code> component expects 1 <code>button</code> or <code>novo-button</code> as the trigger for the menu list which is comprised of all the <code>novo-option</code> or <code>novo-optgroup</code> child components.</p>
<h3>Properties</h3>
<p><props-table component="NovoInput"></props-table></p>
`,
                    host: { class: 'markdown-page' },
                    standalone: false,
                }]
        }] });
class ToasterDesignPage {
    constructor() {
        this.params = {};
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: ToasterDesignPage, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: ToasterDesignPage, isStandalone: false, selector: "toaster-design-page", host: { classAttribute: "markdown-page" }, ngImport: i0, template: `<h2>Usage</h2>
<novo-grid columns="2" align="start" gap="2rem">
<div>
<p>A toast provides feedback about an operation while maintaining visibility and interaction with the current activity. It conveys information to the user that is not critical and does not require specific attention. A toast does not prevent the user from continuing their activity.</p>
<p>When the user is not presented with some form of confirmation about the completion of the action.</p>
<p><strong>Works with following input types</strong></p>
<ul>
<li>Default input, select, textarea</li>
<li>novo-select</li>
<li>novo-datepicker</li>
</ul>
</div>
<img src="assets/images/ToastBanners.png"/>
<div>
<h3>Use When</h3>
<ul class="contains-do-list">
<li class="bullhorn-do-item"><novo-icon color="grass" mr="md" size="md">check</novo-icon><novo-text color="grass"> Use a Banner when a form cannot be saved to show an error occurred.</novo-text></li>
<li class="bullhorn-do-item"><novo-icon color="grass" mr="md" size="md">check</novo-icon><novo-text color="grass"> Use a Banner when an action can’t be completed due to an error or failure.</novo-text></li>
<li class="bullhorn-do-item"><novo-icon color="grass" mr="md" size="md">check</novo-icon><novo-text color="grass"> Use a Growl when an action is successfully performed and the context, i.e. modal, is no longer available.</novo-text></li>
<li class="bullhorn-do-item"><novo-icon color="grass" mr="md" size="md">check</novo-icon><novo-text color="grass"> When an action happens asynchronously, e.g. file upload.</novo-text></li>
</ul>
</div>
<div>
<h3>Don′t Use When</h3>
<ul class="contains-do-list">
<li class="bullhorn-do-item"><novo-icon color="grapefruit" mr="md" size="md">times</novo-icon><novo-text color="grapefruit"> Don’t use it to confirm an action, a toast should be reactive not pro-active.</novo-text></li>
</ul>
</div>
</novo-grid>
<h2>Anatomy</h2>
<novo-grid columns="2" align="start" gap="2rem">
<img src="assets/images/ToastBanners.png" width="450">
<div>
<ol>
<li>
<p><strong>Icon</strong><br>
Use an Icon to quickly convey context of the action. ie. If a file is ready to download, show a download or file icon.</p>
</li>
<li>
<p><strong>Title (Optional)</strong><br>
Used to quickly describe the action that occurred. eg. File Uploaded!</p>
</li>
<li>
<p><strong>Message</strong><br>
A longer description of the outcome of the related action.</p>
</li>
<li>
<p><strong>Follow-up Action (Optional)</strong><br>
By default the a toast will always have a dismiss action, but can also have a follow up action related to the previous action, eg. Undo, Open, View....</p>
</li>
</ol>
</div>
</novo-grid>
<h2>Best Practices</h2>
<ul>
<li>Use a banner when a form can’t be saved, banner appears, should be dismissed manually</li>
<li>Use a growl when something is successfully saved, growl should disappears after X seconds</li>
<li>A toast should only have 1 follow-up action.</li>
<li>If the toast has an follow-up action, i.e. Undo, View, etc, then dismiss the Toast manually…</li>
<li>If a growl has no follow-up action, the toast should dismiss automatically after X seconds</li>
<li>If the growl has under 30 characters, dismiss automatically after 3 seconds</li>
<li>If the growl has between 30 and 100 characters, dismiss automatically after 10 seconds</li>
<li>If the growl has over 100 characters, dismiss manually</li>
<li>If the growl has over X characters or X lines of text, add a View More action</li>
</ul>
<h2>Color</h2>
<p><strong>How to use color</strong></p>
<p>Background utilises color to indicate status of the message. Icon is often synonymous with the status of the color, <em>e.g. warning icon goes with yellow background</em></p>
<h2>Behaviors</h2>
<p><strong>Movement</strong></p>
<p>A toast appears through an animated movement to draw the users attention. A banner slides in from the top of the page. A growl slides in from the side of the screen on which it is located. Multiple growls will stack by moving to the background when a new one appears.</p>
<novo-grid columns="2" align="start" gap="2rem">
<blockquote>
<div class="p"><strong>Embedded</strong></div>
<div class="p">Banners should be used as static notifications, usually shown at the top of content.</div>
</blockquote>
<p><img src="assets/images/ToastEmbedded.png" alt="placeholder"></p>
<blockquote>
<div class="p"><strong>Position</strong></div>
<div class="p">Growl notifications can be displayed at the top, left, right, bottom or corner of the page. Notification will also stack on top of each other until dismissed.  In general that an application use the same location for all growl notications, so the user will know where to look for them.</div>
</blockquote>
<p><img src="assets/images/ToastLayout.png" alt="placeholder"></p>
<blockquote>
<div class="p"><strong>Actions</strong></div>
<div class="p">Growls and Banners can have actions that can be invoked before being dismissed.  This action should be contextual to the action that triggered the toast in the first place.  eg. Actions like &quot;Undo&quot; or &quot;See more&quot; are common use-case, this helps create a workflow that is streamlined for the user but provides optional actions when needed.</div>
</blockquote>
<p><img src="assets/images/ToastGrowlAction.png" alt="placeholder"></p>
</novo-grid>
<h2>How to configure</h2>
<novo-grid columns="2" align="start" gap="2rem">
<blockquote>
<div class="p"><img src="https://via.placeholder.com/350x250" alt="placeholder"></div>
<ul class="contains-do-list">
<li class="bullhorn-do-item"><novo-icon color="grass" mr="md" size="md">check</novo-icon><novo-text color="grass"> Always do this</novo-text></li>
</ul>
<div class="p">Explain this</div>
</blockquote>
<blockquote>
<div class="p"><img src="https://via.placeholder.com/350x250" alt="placeholder"></div>
<ul class="contains-do-list">
<li class="bullhorn-do-item"><novo-icon color="grapefruit" mr="md" size="md">times</novo-icon><novo-text color="grapefruit"> Never do this</novo-text></li>
</ul>
<div class="p">Explain this</div>
</blockquote>
</novo-grid>
<h2>Accessibility</h2>
<p><strong>Implementation</strong></p>
<p>Always include an <code>alt</code> attribute describing the information that is visually displayed in the image.</p>
`, isInline: true, dependencies: [{ kind: "component", type: i2$1.NovoGridElement, selector: "novo-grid", inputs: ["direction", "align", "justify", "columns"] }, { kind: "component", type: i2$1.NovoIconComponent, selector: "novo-icon", inputs: ["raised", "theme", "shape", "color", "size", "smaller", "larger", "alt", "name"] }, { kind: "component", type: i2$1.NovoText, selector: "novo-text,[novo-text]", inputs: ["block"] }, { kind: "directive", type: i2$1.MarginDirective, selector: "[m],[margin],[marginTop],[marginRight],[marginBottom],[marginLeft],[marginX],[marginY],[mt],[mr],[mb],[ml],[mx],[my]", inputs: ["margin", "m", "marginLeft", "ml", "marginRight", "mr", "marginTop", "mt", "marginBottom", "mb", "marginX", "mx", "marginY", "my"] }, { kind: "directive", type: i2$1.GapDirective, selector: "[gap]", inputs: ["gap"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: ToasterDesignPage, decorators: [{
            type: Component,
            args: [{
                    selector: 'toaster-design-page',
                    template: `<h2>Usage</h2>
<novo-grid columns="2" align="start" gap="2rem">
<div>
<p>A toast provides feedback about an operation while maintaining visibility and interaction with the current activity. It conveys information to the user that is not critical and does not require specific attention. A toast does not prevent the user from continuing their activity.</p>
<p>When the user is not presented with some form of confirmation about the completion of the action.</p>
<p><strong>Works with following input types</strong></p>
<ul>
<li>Default input, select, textarea</li>
<li>novo-select</li>
<li>novo-datepicker</li>
</ul>
</div>
<img src="assets/images/ToastBanners.png"/>
<div>
<h3>Use When</h3>
<ul class="contains-do-list">
<li class="bullhorn-do-item"><novo-icon color="grass" mr="md" size="md">check</novo-icon><novo-text color="grass"> Use a Banner when a form cannot be saved to show an error occurred.</novo-text></li>
<li class="bullhorn-do-item"><novo-icon color="grass" mr="md" size="md">check</novo-icon><novo-text color="grass"> Use a Banner when an action can’t be completed due to an error or failure.</novo-text></li>
<li class="bullhorn-do-item"><novo-icon color="grass" mr="md" size="md">check</novo-icon><novo-text color="grass"> Use a Growl when an action is successfully performed and the context, i.e. modal, is no longer available.</novo-text></li>
<li class="bullhorn-do-item"><novo-icon color="grass" mr="md" size="md">check</novo-icon><novo-text color="grass"> When an action happens asynchronously, e.g. file upload.</novo-text></li>
</ul>
</div>
<div>
<h3>Don′t Use When</h3>
<ul class="contains-do-list">
<li class="bullhorn-do-item"><novo-icon color="grapefruit" mr="md" size="md">times</novo-icon><novo-text color="grapefruit"> Don’t use it to confirm an action, a toast should be reactive not pro-active.</novo-text></li>
</ul>
</div>
</novo-grid>
<h2>Anatomy</h2>
<novo-grid columns="2" align="start" gap="2rem">
<img src="assets/images/ToastBanners.png" width="450">
<div>
<ol>
<li>
<p><strong>Icon</strong><br>
Use an Icon to quickly convey context of the action. ie. If a file is ready to download, show a download or file icon.</p>
</li>
<li>
<p><strong>Title (Optional)</strong><br>
Used to quickly describe the action that occurred. eg. File Uploaded!</p>
</li>
<li>
<p><strong>Message</strong><br>
A longer description of the outcome of the related action.</p>
</li>
<li>
<p><strong>Follow-up Action (Optional)</strong><br>
By default the a toast will always have a dismiss action, but can also have a follow up action related to the previous action, eg. Undo, Open, View....</p>
</li>
</ol>
</div>
</novo-grid>
<h2>Best Practices</h2>
<ul>
<li>Use a banner when a form can’t be saved, banner appears, should be dismissed manually</li>
<li>Use a growl when something is successfully saved, growl should disappears after X seconds</li>
<li>A toast should only have 1 follow-up action.</li>
<li>If the toast has an follow-up action, i.e. Undo, View, etc, then dismiss the Toast manually…</li>
<li>If a growl has no follow-up action, the toast should dismiss automatically after X seconds</li>
<li>If the growl has under 30 characters, dismiss automatically after 3 seconds</li>
<li>If the growl has between 30 and 100 characters, dismiss automatically after 10 seconds</li>
<li>If the growl has over 100 characters, dismiss manually</li>
<li>If the growl has over X characters or X lines of text, add a View More action</li>
</ul>
<h2>Color</h2>
<p><strong>How to use color</strong></p>
<p>Background utilises color to indicate status of the message. Icon is often synonymous with the status of the color, <em>e.g. warning icon goes with yellow background</em></p>
<h2>Behaviors</h2>
<p><strong>Movement</strong></p>
<p>A toast appears through an animated movement to draw the users attention. A banner slides in from the top of the page. A growl slides in from the side of the screen on which it is located. Multiple growls will stack by moving to the background when a new one appears.</p>
<novo-grid columns="2" align="start" gap="2rem">
<blockquote>
<div class="p"><strong>Embedded</strong></div>
<div class="p">Banners should be used as static notifications, usually shown at the top of content.</div>
</blockquote>
<p><img src="assets/images/ToastEmbedded.png" alt="placeholder"></p>
<blockquote>
<div class="p"><strong>Position</strong></div>
<div class="p">Growl notifications can be displayed at the top, left, right, bottom or corner of the page. Notification will also stack on top of each other until dismissed.  In general that an application use the same location for all growl notications, so the user will know where to look for them.</div>
</blockquote>
<p><img src="assets/images/ToastLayout.png" alt="placeholder"></p>
<blockquote>
<div class="p"><strong>Actions</strong></div>
<div class="p">Growls and Banners can have actions that can be invoked before being dismissed.  This action should be contextual to the action that triggered the toast in the first place.  eg. Actions like &quot;Undo&quot; or &quot;See more&quot; are common use-case, this helps create a workflow that is streamlined for the user but provides optional actions when needed.</div>
</blockquote>
<p><img src="assets/images/ToastGrowlAction.png" alt="placeholder"></p>
</novo-grid>
<h2>How to configure</h2>
<novo-grid columns="2" align="start" gap="2rem">
<blockquote>
<div class="p"><img src="https://via.placeholder.com/350x250" alt="placeholder"></div>
<ul class="contains-do-list">
<li class="bullhorn-do-item"><novo-icon color="grass" mr="md" size="md">check</novo-icon><novo-text color="grass"> Always do this</novo-text></li>
</ul>
<div class="p">Explain this</div>
</blockquote>
<blockquote>
<div class="p"><img src="https://via.placeholder.com/350x250" alt="placeholder"></div>
<ul class="contains-do-list">
<li class="bullhorn-do-item"><novo-icon color="grapefruit" mr="md" size="md">times</novo-icon><novo-text color="grapefruit"> Never do this</novo-text></li>
</ul>
<div class="p">Explain this</div>
</blockquote>
</novo-grid>
<h2>Accessibility</h2>
<p><strong>Implementation</strong></p>
<p>Always include an <code>alt</code> attribute describing the information that is visually displayed in the image.</p>
`,
                    host: { class: 'markdown-page' },
                    standalone: false,
                }]
        }] });
class TipWellExamplesPage {
    constructor() {
        this.params = {};
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: TipWellExamplesPage, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: TipWellExamplesPage, isStandalone: false, selector: "tip-well-examples-page", host: { classAttribute: "markdown-page" }, ngImport: i0, template: `<h2>Basic Usage</h2>
<p><code-example example="basic-tip-well"></code-example></p>
<h2>No Button Demo</h2>
<p><code-example example="buttonless-tip-well"></code-example></p>
<h2>Icon Demo</h2>
<p><code-example example="icon-tip-well"></code-example></p>
<h2>HTML Demo</h2>
<p><code-example example="html-tip-well"></code-example></p>
`, isInline: true, dependencies: [{ kind: "component", type: CodeExampleComponent, selector: "code-example", inputs: ["example"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: TipWellExamplesPage, decorators: [{
            type: Component,
            args: [{
                    selector: 'tip-well-examples-page',
                    template: `<h2>Basic Usage</h2>
<p><code-example example="basic-tip-well"></code-example></p>
<h2>No Button Demo</h2>
<p><code-example example="buttonless-tip-well"></code-example></p>
<h2>Icon Demo</h2>
<p><code-example example="icon-tip-well"></code-example></p>
<h2>HTML Demo</h2>
<p><code-example example="html-tip-well"></code-example></p>
`,
                    host: { class: 'markdown-page' },
                    standalone: false,
                }]
        }] });
class TipWellDevelopPage {
    constructor() {
        this.params = {};
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: TipWellDevelopPage, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: TipWellDevelopPage, isStandalone: false, selector: "tip-well-develop-page", host: { classAttribute: "markdown-page" }, ngImport: i0, template: `<h1>Technical Details</h1>
<p>Tip Wells are used as ephemeral containers of helpful text. The importance of the content is usually short-lived and no longer needed once disseminated.</p>
<ul>
<li><strong>source:</strong> <a href="https://github.com/bullhorn/novo-elements/blob/master/projects/novo-elements/src/elements/tip-well">(github)</a></li>
<li><strong>module:</strong> <code>import &#123; NovoTipWellModule &#125; from 'novo-elements';</code></li>
</ul>
<p><strong>Usage</strong></p>
<pre><code class="language-html"><span class="hljs-tag">&lt;<span class="hljs-name">novo-tip-well</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Demo&quot;</span> <span class="hljs-attr">icon</span>=<span class="hljs-string">&quot;info&quot;</span>&gt;</span>
  Sed sodales ligula et fermentum bibendum. Aliquam tincidunt sagittis leo eget auctor. Fusce eu sagittis metus, ut viverra magna. Mauris mollis nisl nec libero tincidunt posuere.
<span class="hljs-tag">&lt;/<span class="hljs-name">novo-tip-well</span>&gt;</span>
</code></pre>
<h1>Roadmap</h1>
<ul class="contains-task-list">
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"> Improve Typing Support</li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"> Dark Mode</li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> Create a Provider for TipWell states</li>
</ul>
<h1>Changelog</h1>
<h3>6.0.0</h3>
<p><strong>Deprecation</strong></p>
<ul>
<li>You should no longer use <code>tip</code> property and instead add the contents as children with the template.</li>
</ul>
<h1>Components</h1>
<h2>NovoTipWellElement <code>novo-tip-well</code></h2>
<p>The <code>novo-tip-well</code> component expects a <code>name</code> property, which will be used to store the state of the tipwell in local-storage.</p>
<h3>Properties</h3>
<p><props-table component="NovoTipWellElement"></props-table></p>
`, isInline: true, dependencies: [{ kind: "component", type: PropsTableComponent, selector: "props-table", inputs: ["component", "kinds"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: TipWellDevelopPage, decorators: [{
            type: Component,
            args: [{
                    selector: 'tip-well-develop-page',
                    template: `<h1>Technical Details</h1>
<p>Tip Wells are used as ephemeral containers of helpful text. The importance of the content is usually short-lived and no longer needed once disseminated.</p>
<ul>
<li><strong>source:</strong> <a href="https://github.com/bullhorn/novo-elements/blob/master/projects/novo-elements/src/elements/tip-well">(github)</a></li>
<li><strong>module:</strong> <code>import &#123; NovoTipWellModule &#125; from 'novo-elements';</code></li>
</ul>
<p><strong>Usage</strong></p>
<pre><code class="language-html"><span class="hljs-tag">&lt;<span class="hljs-name">novo-tip-well</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Demo&quot;</span> <span class="hljs-attr">icon</span>=<span class="hljs-string">&quot;info&quot;</span>&gt;</span>
  Sed sodales ligula et fermentum bibendum. Aliquam tincidunt sagittis leo eget auctor. Fusce eu sagittis metus, ut viverra magna. Mauris mollis nisl nec libero tincidunt posuere.
<span class="hljs-tag">&lt;/<span class="hljs-name">novo-tip-well</span>&gt;</span>
</code></pre>
<h1>Roadmap</h1>
<ul class="contains-task-list">
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"> Improve Typing Support</li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"> Dark Mode</li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> Create a Provider for TipWell states</li>
</ul>
<h1>Changelog</h1>
<h3>6.0.0</h3>
<p><strong>Deprecation</strong></p>
<ul>
<li>You should no longer use <code>tip</code> property and instead add the contents as children with the template.</li>
</ul>
<h1>Components</h1>
<h2>NovoTipWellElement <code>novo-tip-well</code></h2>
<p>The <code>novo-tip-well</code> component expects a <code>name</code> property, which will be used to store the state of the tipwell in local-storage.</p>
<h3>Properties</h3>
<p><props-table component="NovoTipWellElement"></props-table></p>
`,
                    host: { class: 'markdown-page' },
                    standalone: false,
                }]
        }] });
class TipWellDesignPage {
    constructor() {
        this.params = {};
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: TipWellDesignPage, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: TipWellDesignPage, isStandalone: false, selector: "tip-well-design-page", host: { classAttribute: "markdown-page" }, ngImport: i0, template: `<h2>Usage</h2>
<novo-grid columns="2" align="start" gap="2rem">
<div>
<p>The TipWell is a small container for displaying help text.  It is meant to be shown only once and dismissable to the user.  Typical usage is to provide additional detail on data being displayed or explain how a feature works to the user for their first time using it.</p>
</div>
<img src="assets/images/TipWellOverview.png"/>
<div>
<h3>Use When</h3>
<ul class="contains-do-list">
<li class="bullhorn-do-item"><novo-icon color="grass" mr="md" size="md">check</novo-icon><novo-text color="grass"> The help text is no longer needed after the user has read the contents.</novo-text></li>
<li class="bullhorn-do-item"><novo-icon color="grass" mr="md" size="md">check</novo-icon><novo-text color="grass"> To provide additional context and links related to the data to educate the user on how the a feature works.</novo-text></li>
</ul>
</div>
<div>
<h3>Don′t Use When</h3>
<ul class="contains-do-list">
<li class="bullhorn-do-item"><novo-icon color="grapefruit" mr="md" size="md">times</novo-icon><novo-text color="grapefruit"> Don’t use it show error states, use novo-error or a banner.</novo-text></li>
<li class="bullhorn-do-item"><novo-icon color="grapefruit" mr="md" size="md">times</novo-icon><novo-text color="grapefruit"> Don’t use it to display tutorials.</novo-text></li>
<li class="bullhorn-do-item"><novo-icon color="grapefruit" mr="md" size="md">times</novo-icon><novo-text color="grapefruit"> Don’t use it to explain text fields, use novo-hint.</novo-text></li>
</ul>
</div>
</novo-grid>
<h2>Anatomy</h2>
<novo-grid columns="2" align="start" gap="2rem">
<img src="assets/images/ToastBanners.png" width="450">
<div>
<ol>
<li>
<p><strong>Icon</strong><br>
Use an Icon to quickly convey context of the action. ie. If a file is ready to download, show a download or file icon.</p>
</li>
<li>
<p><strong>Container</strong><br>
Used to quickly describe the action that occurred. eg. File Uploaded!</p>
</li>
<li>
<p><strong>Dismiss Action</strong><br>
A longer description of the outcome of the related action.</p>
</li>
</ol>
</div>
</novo-grid>
<h2>Accessibility</h2>
<p><strong>Implementation</strong></p>
<p>Always include an <code>alt</code> attribute describing the information that is visually displayed in the image.</p>
`, isInline: true, dependencies: [{ kind: "component", type: i2$1.NovoGridElement, selector: "novo-grid", inputs: ["direction", "align", "justify", "columns"] }, { kind: "component", type: i2$1.NovoIconComponent, selector: "novo-icon", inputs: ["raised", "theme", "shape", "color", "size", "smaller", "larger", "alt", "name"] }, { kind: "component", type: i2$1.NovoText, selector: "novo-text,[novo-text]", inputs: ["block"] }, { kind: "directive", type: i2$1.MarginDirective, selector: "[m],[margin],[marginTop],[marginRight],[marginBottom],[marginLeft],[marginX],[marginY],[mt],[mr],[mb],[ml],[mx],[my]", inputs: ["margin", "m", "marginLeft", "ml", "marginRight", "mr", "marginTop", "mt", "marginBottom", "mb", "marginX", "mx", "marginY", "my"] }, { kind: "directive", type: i2$1.GapDirective, selector: "[gap]", inputs: ["gap"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: TipWellDesignPage, decorators: [{
            type: Component,
            args: [{
                    selector: 'tip-well-design-page',
                    template: `<h2>Usage</h2>
<novo-grid columns="2" align="start" gap="2rem">
<div>
<p>The TipWell is a small container for displaying help text.  It is meant to be shown only once and dismissable to the user.  Typical usage is to provide additional detail on data being displayed or explain how a feature works to the user for their first time using it.</p>
</div>
<img src="assets/images/TipWellOverview.png"/>
<div>
<h3>Use When</h3>
<ul class="contains-do-list">
<li class="bullhorn-do-item"><novo-icon color="grass" mr="md" size="md">check</novo-icon><novo-text color="grass"> The help text is no longer needed after the user has read the contents.</novo-text></li>
<li class="bullhorn-do-item"><novo-icon color="grass" mr="md" size="md">check</novo-icon><novo-text color="grass"> To provide additional context and links related to the data to educate the user on how the a feature works.</novo-text></li>
</ul>
</div>
<div>
<h3>Don′t Use When</h3>
<ul class="contains-do-list">
<li class="bullhorn-do-item"><novo-icon color="grapefruit" mr="md" size="md">times</novo-icon><novo-text color="grapefruit"> Don’t use it show error states, use novo-error or a banner.</novo-text></li>
<li class="bullhorn-do-item"><novo-icon color="grapefruit" mr="md" size="md">times</novo-icon><novo-text color="grapefruit"> Don’t use it to display tutorials.</novo-text></li>
<li class="bullhorn-do-item"><novo-icon color="grapefruit" mr="md" size="md">times</novo-icon><novo-text color="grapefruit"> Don’t use it to explain text fields, use novo-hint.</novo-text></li>
</ul>
</div>
</novo-grid>
<h2>Anatomy</h2>
<novo-grid columns="2" align="start" gap="2rem">
<img src="assets/images/ToastBanners.png" width="450">
<div>
<ol>
<li>
<p><strong>Icon</strong><br>
Use an Icon to quickly convey context of the action. ie. If a file is ready to download, show a download or file icon.</p>
</li>
<li>
<p><strong>Container</strong><br>
Used to quickly describe the action that occurred. eg. File Uploaded!</p>
</li>
<li>
<p><strong>Dismiss Action</strong><br>
A longer description of the outcome of the related action.</p>
</li>
</ol>
</div>
</novo-grid>
<h2>Accessibility</h2>
<p><strong>Implementation</strong></p>
<p>Always include an <code>alt</code> attribute describing the information that is visually displayed in the image.</p>
`,
                    host: { class: 'markdown-page' },
                    standalone: false,
                }]
        }] });
class TabbedGroupPickerPage {
    constructor() {
        this.params = {};
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: TabbedGroupPickerPage, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: TabbedGroupPickerPage, isStandalone: false, selector: "tabbed-group-picker-page", host: { classAttribute: "markdown-page" }, ngImport: i0, template: `<h1>Tabbed Group Picker <a href="https://github.com/bullhorn/novo-elements/blob/master/projects/novo-elements/src/elements/tabbed-group-picker">(source)</a></h1>
<p>Tabbed Group Picker allows for nested selection of groups and members via a tabbed interface.</p>
<h2>Basic</h2>
<p>In its most basic usage, Tabbed Group Picker allows for selection of arbitrary sets of data that have no group/member relationship. Each data set appears on its own tab. The values returned must be javascript primitives (typically string or number).</p>
<p><code-example example="tabbed-group-picker-basic"></code-example></p>
<h2>Quick Select</h2>
<p>Tabbed Group Picker provides a configurable quick select interface. For each quick select item, the developer provides the data type, values (or the 'all' flag), and a label. Tabbed Group Picker builds the quick select menu and synchronizes the quick select checkboxes with the data checkboxes (in both directions).</p>
<p><code-example example="tabbed-group-picker-quick-select"></code-example></p>
<h2>Groups</h2>
<p><code-example example="tabbed-group-picker-groups"></code-example></p>
<h2>Big Groups</h2>
<p><code-example example="tabbed-group-picker-big-groups"></code-example></p>
<h2>Selection Disabled</h2>
<p>When checkboxes are disabled in the activation picker, we can still listen for &quot;activation&quot; events when an item has been clicked.</p>
<p><code-example example="tabbed-group-picker-no-selection"></code-example></p>
<h2>Footer</h2>
<p><code-example example="tabbed-group-picker-footer"></code-example></p>
`, isInline: true, dependencies: [{ kind: "component", type: CodeExampleComponent, selector: "code-example", inputs: ["example"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: TabbedGroupPickerPage, decorators: [{
            type: Component,
            args: [{
                    selector: 'tabbed-group-picker-page',
                    template: `<h1>Tabbed Group Picker <a href="https://github.com/bullhorn/novo-elements/blob/master/projects/novo-elements/src/elements/tabbed-group-picker">(source)</a></h1>
<p>Tabbed Group Picker allows for nested selection of groups and members via a tabbed interface.</p>
<h2>Basic</h2>
<p>In its most basic usage, Tabbed Group Picker allows for selection of arbitrary sets of data that have no group/member relationship. Each data set appears on its own tab. The values returned must be javascript primitives (typically string or number).</p>
<p><code-example example="tabbed-group-picker-basic"></code-example></p>
<h2>Quick Select</h2>
<p>Tabbed Group Picker provides a configurable quick select interface. For each quick select item, the developer provides the data type, values (or the 'all' flag), and a label. Tabbed Group Picker builds the quick select menu and synchronizes the quick select checkboxes with the data checkboxes (in both directions).</p>
<p><code-example example="tabbed-group-picker-quick-select"></code-example></p>
<h2>Groups</h2>
<p><code-example example="tabbed-group-picker-groups"></code-example></p>
<h2>Big Groups</h2>
<p><code-example example="tabbed-group-picker-big-groups"></code-example></p>
<h2>Selection Disabled</h2>
<p>When checkboxes are disabled in the activation picker, we can still listen for &quot;activation&quot; events when an item has been clicked.</p>
<p><code-example example="tabbed-group-picker-no-selection"></code-example></p>
<h2>Footer</h2>
<p><code-example example="tabbed-group-picker-footer"></code-example></p>
`,
                    host: { class: 'markdown-page' },
                    standalone: false,
                }]
        }] });
class SwitchPage {
    constructor() {
        this.params = {};
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: SwitchPage, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: SwitchPage, isStandalone: false, selector: "switch-page", host: { classAttribute: "markdown-page" }, ngImport: i0, template: `<h1>Switches &amp; Toggles <a href="https://github.com/bullhorn/novo-elements/blob/master/projects/novo-elements/src/elements/switch">(source)</a></h1>
<p>Loading animations are used to help indicate to the user that some sort of progress is taking place. These are especially helpful for intensive operations that might take extra time.</p>
<h2>Types</h2>
<h5>Tiles</h5>
<p>Similar to radio buttons, tiles are used to select a single item. Tiles have a higher visibility than radio buttons, and are used more frequently in data visualizations. Tiles stretch horizontally, so the list they pull from must be small.</p>
<h5>Switches</h5>
<p>Switches are a binary toggle that allow the user to select one of two options. They are most frequently used for an on-off model.</p>
<p><code-example example="switch-usage"></code-example></p>
`, isInline: true, dependencies: [{ kind: "component", type: CodeExampleComponent, selector: "code-example", inputs: ["example"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: SwitchPage, decorators: [{
            type: Component,
            args: [{
                    selector: 'switch-page',
                    template: `<h1>Switches &amp; Toggles <a href="https://github.com/bullhorn/novo-elements/blob/master/projects/novo-elements/src/elements/switch">(source)</a></h1>
<p>Loading animations are used to help indicate to the user that some sort of progress is taking place. These are especially helpful for intensive operations that might take extra time.</p>
<h2>Types</h2>
<h5>Tiles</h5>
<p>Similar to radio buttons, tiles are used to select a single item. Tiles have a higher visibility than radio buttons, and are used more frequently in data visualizations. Tiles stretch horizontally, so the list they pull from must be small.</p>
<h5>Switches</h5>
<p>Switches are a binary toggle that allow the user to select one of two options. They are most frequently used for an on-off model.</p>
<p><code-example example="switch-usage"></code-example></p>
`,
                    host: { class: 'markdown-page' },
                    standalone: false,
                }]
        }] });
class SlidesPage {
    constructor() {
        this.params = {};
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: SlidesPage, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: SlidesPage, isStandalone: false, selector: "slides-page", host: { classAttribute: "markdown-page" }, ngImport: i0, template: `<h1>slides</h1>
<h1>Slides <a href="https://github.com/bullhorn/novo-elements/blob/master/projects/novo-elements/src/elements/slides">(source)</a></h1>
<p>Slide element to toggle some information</p>
<h5>Basic</h5>
<p><code-example example="basic-slide"></code-example></p>
`, isInline: true, dependencies: [{ kind: "component", type: CodeExampleComponent, selector: "code-example", inputs: ["example"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: SlidesPage, decorators: [{
            type: Component,
            args: [{
                    selector: 'slides-page',
                    template: `<h1>slides</h1>
<h1>Slides <a href="https://github.com/bullhorn/novo-elements/blob/master/projects/novo-elements/src/elements/slides">(source)</a></h1>
<p>Slide element to toggle some information</p>
<h5>Basic</h5>
<p><code-example example="basic-slide"></code-example></p>
`,
                    host: { class: 'markdown-page' },
                    standalone: false,
                }]
        }] });
class SearchPage {
    constructor() {
        this.params = {};
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: SearchPage, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: SearchPage, isStandalone: false, selector: "search-page", host: { classAttribute: "markdown-page" }, ngImport: i0, template: `<h1>Search Input <a href="https://github.com/bullhorn/novo-elements/blob/master/projects/novo-elements/src/elements/switch">(source)</a></h1>
<p>Loading animations are used to help indicate to the user that some sort of progress is taking place. These are especially helpful for intensive operations that might take extra time.</p>
<h2>Types</h2>
<h5>Searches</h5>
<p>Searches are a binary toggle that allow the user to select one of two options. They are most frequently used for an on-off model.</p>
<p><code-example example="search-usage"></code-example></p>
`, isInline: true, dependencies: [{ kind: "component", type: CodeExampleComponent, selector: "code-example", inputs: ["example"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: SearchPage, decorators: [{
            type: Component,
            args: [{
                    selector: 'search-page',
                    template: `<h1>Search Input <a href="https://github.com/bullhorn/novo-elements/blob/master/projects/novo-elements/src/elements/switch">(source)</a></h1>
<p>Loading animations are used to help indicate to the user that some sort of progress is taking place. These are especially helpful for intensive operations that might take extra time.</p>
<h2>Types</h2>
<h5>Searches</h5>
<p>Searches are a binary toggle that allow the user to select one of two options. They are most frequently used for an on-off model.</p>
<p><code-example example="search-usage"></code-example></p>
`,
                    host: { class: 'markdown-page' },
                    standalone: false,
                }]
        }] });
class QueryBuilderExamplesPage {
    constructor() {
        this.params = {};
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: QueryBuilderExamplesPage, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: QueryBuilderExamplesPage, isStandalone: false, selector: "query-builder-examples-page", host: { classAttribute: "markdown-page" }, ngImport: i0, template: `<h2>Just a basic Criteria Builder</h2>
<p>A common use case is to just collect a list of criteria to build as a query.  A Criteria can contain multiple conditions which will need to be joined by a conjunctions (and/or).</p>
<p><code-example example="just-criteria"></code-example></p>
<h1>Single Field Criteria Builder</h1>
<p>While the Criteria Builder can support multiple fields at once, its UI can also be configured to express a condition on a single field specified in via configuration input. This mode is more suitable for compact scenarios.</p>
<p><code-example example="single-field-criteria"></code-example></p>
<h2>Full Query Builder</h2>
<p>The difference between the Query and Criteria Builder is that it allow for the user to define multiple criteria and join them as either inclusion or exclusion criteria.  ie. Find <code>where fruit.seeds &gt;= 1 and not fruit.name='Avacodo'</code></p>
<p>TBW</p>
<!-- <code-example example="just-criteria"></code-example> -->`, isInline: true, dependencies: [{ kind: "component", type: CodeExampleComponent, selector: "code-example", inputs: ["example"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: QueryBuilderExamplesPage, decorators: [{
            type: Component,
            args: [{
                    selector: 'query-builder-examples-page',
                    template: `<h2>Just a basic Criteria Builder</h2>
<p>A common use case is to just collect a list of criteria to build as a query.  A Criteria can contain multiple conditions which will need to be joined by a conjunctions (and/or).</p>
<p><code-example example="just-criteria"></code-example></p>
<h1>Single Field Criteria Builder</h1>
<p>While the Criteria Builder can support multiple fields at once, its UI can also be configured to express a condition on a single field specified in via configuration input. This mode is more suitable for compact scenarios.</p>
<p><code-example example="single-field-criteria"></code-example></p>
<h2>Full Query Builder</h2>
<p>The difference between the Query and Criteria Builder is that it allow for the user to define multiple criteria and join them as either inclusion or exclusion criteria.  ie. Find <code>where fruit.seeds &gt;= 1 and not fruit.name='Avacodo'</code></p>
<p>TBW</p>
<!-- <code-example example="just-criteria"></code-example> -->`,
                    host: { class: 'markdown-page' },
                    standalone: false,
                }]
        }] });
class QueryBuilderDevelopPage {
    constructor() {
        this.params = {};
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: QueryBuilderDevelopPage, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: QueryBuilderDevelopPage, isStandalone: false, selector: "query-builder-develop-page", host: { classAttribute: "markdown-page" }, ngImport: i0, template: `<h1>Technical Details</h1>
<ul>
<li><strong>source:</strong> <a href="https://github.com/bullhorn/novo-elements/blob/master/projects/novo-elements/src/elements/query-builder">(github)</a></li>
<li><strong>module:</strong> <code>import &#123; QueryBuilderModule &#125; from 'novo-elements';</code></li>
</ul>
<p><strong>Basic Usage</strong></p>
<pre><code class="language-html"><span class="hljs-tag">&lt;<span class="hljs-name">novo-query-builder</span> <span class="hljs-attr">controlName</span>=<span class="hljs-string">&quot;criteria&quot;</span> [<span class="hljs-attr">config</span>]=<span class="hljs-string">&quot;config&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">novo-query-builder</span>&gt;</span>
</code></pre>
<h1>Roadmap</h1>
<ul class="contains-task-list">
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"> Custom conditions inputs</li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> Dark Mode</li>
</ul>
<h1>Changelog</h1>
<h3>7.x.x</h3>
<p>Initial Implementation</p>
<h1>Components</h1>
<h2>QueryBuilderComponent <code>novo-query-builder</code></h2>
<p>All tabs must be incapsulated in a <code>novo-nav</code> container. The nav will control the context and active tab.</p>
<h3>Properties</h3>
<p><props-table component="QueryBuilderComponent"></props-table></p>
<h2>ExpressionBuilderComponent <code>novo-expression-builder</code></h2>
<p>All tabs must be incapsulated in a <code>novo-nav</code> container. The nav will control the context and active tab.</p>
<h3>Properties</h3>
<p><props-table component="ExpressionBuilderComponent"></props-table></p>
<h1>Custom Condition Field Definitions</h1>
<p>Your implementation might require a custom input type to specifically define how you want to query against your data. Since your implementation will have to convert the query builder form to the query syntax of your system, you can add custom field definitions to override the defaults or provide new implementations.</p>
<p>First you need to create your custom condition</p>
<pre><code class="language-typescript"><span class="hljs-comment">// custom-condition-field-def.html</span>
<span class="hljs-meta">&#64;Component</span>(&#123;
  <span class="hljs-attr">selector</span>: <span class="hljs-string">&#x27;custom-condition-field-def&#x27;</span>,
  <span class="hljs-attr">template</span>: <span class="hljs-string">&#x27;custom-condition-field-def.html,
  encapsulation: ViewEncapsulation.None,
  changeDetection: ChangeDetectionStrategy.Default,
&#125;)
export class CustomConditionFieldDef extends DefaultFilterFieldDef implements OnInit &#123;
  defaultOperator = &#x27;</span>includeAny<span class="hljs-string">&#x27;;
&#125;
</span></code></pre>
<pre><code class="language-html"><span class="hljs-comment">&lt;!-- custom-condition-field-def.html --&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">ng-container</span> <span class="hljs-attr">novoFilterFieldTypeDef</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">novo-field</span> *<span class="hljs-attr">novoFilterFieldOperatorsDef</span>=<span class="hljs-string">&quot;let formGroup&quot;</span> [<span class="hljs-attr">formGroup</span>]=<span class="hljs-string">&quot;formGroup&quot;</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">novo-select</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;Operator...&quot;</span> <span class="hljs-attr">formControlName</span>=<span class="hljs-string">&quot;operator&quot;</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">novo-option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;includeAny&quot;</span>&gt;</span>Include Any<span class="hljs-tag">&lt;/<span class="hljs-name">novo-option</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">novo-option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;includeAll&quot;</span>&gt;</span>Include All<span class="hljs-tag">&lt;/<span class="hljs-name">novo-option</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">novo-option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;excludeAny&quot;</span>&gt;</span>Exclude<span class="hljs-tag">&lt;/<span class="hljs-name">novo-option</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">novo-select</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">novo-field</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">novo-field</span> *<span class="hljs-attr">novoFilterFieldInputDef</span>=<span class="hljs-string">&quot;let formGroup; fieldMeta as meta&quot;</span> [<span class="hljs-attr">formGroup</span>]=<span class="hljs-string">&quot;formGroup&quot;</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">novo-select</span> <span class="hljs-attr">formControlName</span>=<span class="hljs-string">&quot;value&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;Select...&quot;</span> [<span class="hljs-attr">multiple</span>]=<span class="hljs-string">&quot;true&quot;</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">novo-select-search</span> [<span class="hljs-attr">formControl</span>]=<span class="hljs-string">&quot;searchCtrl&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">novo-select-search</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">novo-option</span> *<span class="hljs-attr">ngFor</span>=<span class="hljs-string">&quot;let option of remoteResults | async&quot;</span> [<span class="hljs-attr">value</span>]=<span class="hljs-string">&quot;option.id&quot;</span>&gt;</span>
        <span class="hljs-symbol">&amp;#123;</span><span class="hljs-symbol">&amp;#123;</span> option.name <span class="hljs-symbol">&amp;#125;</span><span class="hljs-symbol">&amp;#125;</span>
      <span class="hljs-tag">&lt;/<span class="hljs-name">novo-option</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">novo-select</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">novo-field</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">ng-container</span>&gt;</span>
</code></pre>
<h4><strong>open(component, params)</strong></h4>
<p>Used to open all modals via the service. Use <code>params</code> to pass values to you component.</p>
<table>
<thead>
<tr>
<th style="text-align:left">Name</th>
<th style="text-align:left">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">component</td>
<td style="text-align:left"><em>Class</em><br>The angular component which represents the Modal to be opened.</td>
</tr>
<tr>
<td style="text-align:left">params</td>
<td style="text-align:left"><em>Object</em><br><strong>Optional</strong> arguments that will be injected into <code>NovoAsideRef.params</code></td>
</tr>
</tbody>
</table>
<p><em>Note:</em> All modal components should be declared as <code>entryComponents</code> in the module.</p>
`, isInline: true, dependencies: [{ kind: "component", type: PropsTableComponent, selector: "props-table", inputs: ["component", "kinds"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: QueryBuilderDevelopPage, decorators: [{
            type: Component,
            args: [{
                    selector: 'query-builder-develop-page',
                    template: `<h1>Technical Details</h1>
<ul>
<li><strong>source:</strong> <a href="https://github.com/bullhorn/novo-elements/blob/master/projects/novo-elements/src/elements/query-builder">(github)</a></li>
<li><strong>module:</strong> <code>import &#123; QueryBuilderModule &#125; from 'novo-elements';</code></li>
</ul>
<p><strong>Basic Usage</strong></p>
<pre><code class="language-html"><span class="hljs-tag">&lt;<span class="hljs-name">novo-query-builder</span> <span class="hljs-attr">controlName</span>=<span class="hljs-string">&quot;criteria&quot;</span> [<span class="hljs-attr">config</span>]=<span class="hljs-string">&quot;config&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">novo-query-builder</span>&gt;</span>
</code></pre>
<h1>Roadmap</h1>
<ul class="contains-task-list">
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"> Custom conditions inputs</li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> Dark Mode</li>
</ul>
<h1>Changelog</h1>
<h3>7.x.x</h3>
<p>Initial Implementation</p>
<h1>Components</h1>
<h2>QueryBuilderComponent <code>novo-query-builder</code></h2>
<p>All tabs must be incapsulated in a <code>novo-nav</code> container. The nav will control the context and active tab.</p>
<h3>Properties</h3>
<p><props-table component="QueryBuilderComponent"></props-table></p>
<h2>ExpressionBuilderComponent <code>novo-expression-builder</code></h2>
<p>All tabs must be incapsulated in a <code>novo-nav</code> container. The nav will control the context and active tab.</p>
<h3>Properties</h3>
<p><props-table component="ExpressionBuilderComponent"></props-table></p>
<h1>Custom Condition Field Definitions</h1>
<p>Your implementation might require a custom input type to specifically define how you want to query against your data. Since your implementation will have to convert the query builder form to the query syntax of your system, you can add custom field definitions to override the defaults or provide new implementations.</p>
<p>First you need to create your custom condition</p>
<pre><code class="language-typescript"><span class="hljs-comment">// custom-condition-field-def.html</span>
<span class="hljs-meta">&#64;Component</span>(&#123;
  <span class="hljs-attr">selector</span>: <span class="hljs-string">&#x27;custom-condition-field-def&#x27;</span>,
  <span class="hljs-attr">template</span>: <span class="hljs-string">&#x27;custom-condition-field-def.html,
  encapsulation: ViewEncapsulation.None,
  changeDetection: ChangeDetectionStrategy.Default,
&#125;)
export class CustomConditionFieldDef extends DefaultFilterFieldDef implements OnInit &#123;
  defaultOperator = &#x27;</span>includeAny<span class="hljs-string">&#x27;;
&#125;
</span></code></pre>
<pre><code class="language-html"><span class="hljs-comment">&lt;!-- custom-condition-field-def.html --&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">ng-container</span> <span class="hljs-attr">novoFilterFieldTypeDef</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">novo-field</span> *<span class="hljs-attr">novoFilterFieldOperatorsDef</span>=<span class="hljs-string">&quot;let formGroup&quot;</span> [<span class="hljs-attr">formGroup</span>]=<span class="hljs-string">&quot;formGroup&quot;</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">novo-select</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;Operator...&quot;</span> <span class="hljs-attr">formControlName</span>=<span class="hljs-string">&quot;operator&quot;</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">novo-option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;includeAny&quot;</span>&gt;</span>Include Any<span class="hljs-tag">&lt;/<span class="hljs-name">novo-option</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">novo-option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;includeAll&quot;</span>&gt;</span>Include All<span class="hljs-tag">&lt;/<span class="hljs-name">novo-option</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">novo-option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;excludeAny&quot;</span>&gt;</span>Exclude<span class="hljs-tag">&lt;/<span class="hljs-name">novo-option</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">novo-select</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">novo-field</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">novo-field</span> *<span class="hljs-attr">novoFilterFieldInputDef</span>=<span class="hljs-string">&quot;let formGroup; fieldMeta as meta&quot;</span> [<span class="hljs-attr">formGroup</span>]=<span class="hljs-string">&quot;formGroup&quot;</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">novo-select</span> <span class="hljs-attr">formControlName</span>=<span class="hljs-string">&quot;value&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;Select...&quot;</span> [<span class="hljs-attr">multiple</span>]=<span class="hljs-string">&quot;true&quot;</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">novo-select-search</span> [<span class="hljs-attr">formControl</span>]=<span class="hljs-string">&quot;searchCtrl&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">novo-select-search</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">novo-option</span> *<span class="hljs-attr">ngFor</span>=<span class="hljs-string">&quot;let option of remoteResults | async&quot;</span> [<span class="hljs-attr">value</span>]=<span class="hljs-string">&quot;option.id&quot;</span>&gt;</span>
        <span class="hljs-symbol">&amp;#123;</span><span class="hljs-symbol">&amp;#123;</span> option.name <span class="hljs-symbol">&amp;#125;</span><span class="hljs-symbol">&amp;#125;</span>
      <span class="hljs-tag">&lt;/<span class="hljs-name">novo-option</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">novo-select</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">novo-field</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">ng-container</span>&gt;</span>
</code></pre>
<h4><strong>open(component, params)</strong></h4>
<p>Used to open all modals via the service. Use <code>params</code> to pass values to you component.</p>
<table>
<thead>
<tr>
<th style="text-align:left">Name</th>
<th style="text-align:left">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">component</td>
<td style="text-align:left"><em>Class</em><br>The angular component which represents the Modal to be opened.</td>
</tr>
<tr>
<td style="text-align:left">params</td>
<td style="text-align:left"><em>Object</em><br><strong>Optional</strong> arguments that will be injected into <code>NovoAsideRef.params</code></td>
</tr>
</tbody>
</table>
<p><em>Note:</em> All modal components should be declared as <code>entryComponents</code> in the module.</p>
`,
                    host: { class: 'markdown-page' },
                    standalone: false,
                }]
        }] });
class QueryBuilderDesignPage {
    constructor() {
        this.params = {};
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: QueryBuilderDesignPage, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: QueryBuilderDesignPage, isStandalone: false, selector: "query-builder-design-page", host: { classAttribute: "markdown-page" }, ngImport: i0, template: `<h2>Usage</h2>
<novo-grid columns="2" align="start" gap="2rem">
<div>
<p>Asides are slideouts designed to provide a view into related content within the page without navigating away.  Asides work similar to Modal but the content is meant to be correlated and the workflow should be non-blocking.</p>
</div>
<img src="assets/images/AsideOverview.png"/>
<div>
<h3>Use When</h3>
<ul class="contains-do-list">
<li class="bullhorn-do-item"><novo-icon color="grass" mr="md" size="md">check</novo-icon><novo-text color="grass"> Providing supporting visual content, e.g., an image or chart, within the context of a larger composition</novo-text></li>
<li class="bullhorn-do-item"><novo-icon color="grass" mr="md" size="md">check</novo-icon><novo-text color="grass"> The content provided doesn't block the workflow of the previous context.</novo-text></li>
</ul>
</div>
<div>
<h3>Don′t Use When</h3>
<ul class="contains-do-list">
<li class="bullhorn-do-item"><novo-icon color="grapefruit" mr="md" size="md">times</novo-icon><novo-text color="grapefruit"> The content of the aside requires immediate action or response. Instead, use a modal.</novo-text></li>
</ul>
</div>
</novo-grid>
<h2>Best Practices</h2>
<ul>
<li>Ensure the content opened is highly correlated to the context that opened it. When showing a preview of a related content that can opened for various contexts, present the user with the data related to the context that opened it, rather than the same view.</li>
<li>When using an aside to present the user with a form, ensure that it is beneficial to have the current view still available to the user, if not consider opening a new page.</li>
</ul>
<h2>Patterns</h2>
<novo-grid columns="2" align="start" gap="2rem">
<blockquote>
<div class="p"><img src="https://via.placeholder.com/350x250" alt="placeholder"></div>
<ul class="contains-do-list">
<li class="bullhorn-do-item"><novo-icon color="grass" mr="md" size="md">check</novo-icon><novo-text color="grass"> Form Slideout</novo-text></li>
</ul>
<div class="p">Utilize the aside to open quick forms within the application. With the <code>aside</code> you can provide a workflow to enter data quickly while still provide a partial view of the parent context. This will allow the user to maintain context and see how the addition of new data affects there current view.</div>
</blockquote>
<blockquote>
<div class="p"><img src="https://via.placeholder.com/350x250" alt="placeholder"></div>
<ul class="contains-do-list">
<li class="bullhorn-do-item"><novo-icon color="grapefruit" mr="md" size="md">times</novo-icon><novo-text color="grapefruit"> Record Preview</novo-text></li>
</ul>
<div class="p">Utilize the aside to open record previews within the application. With the <code>aside</code> you can allow the user to view a significant amount data about a related entity with losing the context of the current view.</div>
</blockquote>
</novo-grid>
<h2>Accessibility</h2>
<p><strong>Implementation</strong></p>
<p>Always include an <code>alt</code> attribute describing the information that is visually displayed in the image.</p>
`, isInline: true, dependencies: [{ kind: "component", type: i2$1.NovoGridElement, selector: "novo-grid", inputs: ["direction", "align", "justify", "columns"] }, { kind: "component", type: i2$1.NovoIconComponent, selector: "novo-icon", inputs: ["raised", "theme", "shape", "color", "size", "smaller", "larger", "alt", "name"] }, { kind: "component", type: i2$1.NovoText, selector: "novo-text,[novo-text]", inputs: ["block"] }, { kind: "directive", type: i2$1.MarginDirective, selector: "[m],[margin],[marginTop],[marginRight],[marginBottom],[marginLeft],[marginX],[marginY],[mt],[mr],[mb],[ml],[mx],[my]", inputs: ["margin", "m", "marginLeft", "ml", "marginRight", "mr", "marginTop", "mt", "marginBottom", "mb", "marginX", "mx", "marginY", "my"] }, { kind: "directive", type: i2$1.GapDirective, selector: "[gap]", inputs: ["gap"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: QueryBuilderDesignPage, decorators: [{
            type: Component,
            args: [{
                    selector: 'query-builder-design-page',
                    template: `<h2>Usage</h2>
<novo-grid columns="2" align="start" gap="2rem">
<div>
<p>Asides are slideouts designed to provide a view into related content within the page without navigating away.  Asides work similar to Modal but the content is meant to be correlated and the workflow should be non-blocking.</p>
</div>
<img src="assets/images/AsideOverview.png"/>
<div>
<h3>Use When</h3>
<ul class="contains-do-list">
<li class="bullhorn-do-item"><novo-icon color="grass" mr="md" size="md">check</novo-icon><novo-text color="grass"> Providing supporting visual content, e.g., an image or chart, within the context of a larger composition</novo-text></li>
<li class="bullhorn-do-item"><novo-icon color="grass" mr="md" size="md">check</novo-icon><novo-text color="grass"> The content provided doesn't block the workflow of the previous context.</novo-text></li>
</ul>
</div>
<div>
<h3>Don′t Use When</h3>
<ul class="contains-do-list">
<li class="bullhorn-do-item"><novo-icon color="grapefruit" mr="md" size="md">times</novo-icon><novo-text color="grapefruit"> The content of the aside requires immediate action or response. Instead, use a modal.</novo-text></li>
</ul>
</div>
</novo-grid>
<h2>Best Practices</h2>
<ul>
<li>Ensure the content opened is highly correlated to the context that opened it. When showing a preview of a related content that can opened for various contexts, present the user with the data related to the context that opened it, rather than the same view.</li>
<li>When using an aside to present the user with a form, ensure that it is beneficial to have the current view still available to the user, if not consider opening a new page.</li>
</ul>
<h2>Patterns</h2>
<novo-grid columns="2" align="start" gap="2rem">
<blockquote>
<div class="p"><img src="https://via.placeholder.com/350x250" alt="placeholder"></div>
<ul class="contains-do-list">
<li class="bullhorn-do-item"><novo-icon color="grass" mr="md" size="md">check</novo-icon><novo-text color="grass"> Form Slideout</novo-text></li>
</ul>
<div class="p">Utilize the aside to open quick forms within the application. With the <code>aside</code> you can provide a workflow to enter data quickly while still provide a partial view of the parent context. This will allow the user to maintain context and see how the addition of new data affects there current view.</div>
</blockquote>
<blockquote>
<div class="p"><img src="https://via.placeholder.com/350x250" alt="placeholder"></div>
<ul class="contains-do-list">
<li class="bullhorn-do-item"><novo-icon color="grapefruit" mr="md" size="md">times</novo-icon><novo-text color="grapefruit"> Record Preview</novo-text></li>
</ul>
<div class="p">Utilize the aside to open record previews within the application. With the <code>aside</code> you can allow the user to view a significant amount data about a related entity with losing the context of the current view.</div>
</blockquote>
</novo-grid>
<h2>Accessibility</h2>
<p><strong>Implementation</strong></p>
<p>Always include an <code>alt</code> attribute describing the information that is visually displayed in the image.</p>
`,
                    host: { class: 'markdown-page' },
                    standalone: false,
                }]
        }] });
class ProgressUsagePage {
    constructor() {
        this.params = {};
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: ProgressUsagePage, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: ProgressUsagePage, isStandalone: false, selector: "progress-usage-page", host: { classAttribute: "markdown-page" }, ngImport: i0, template: `<novo-grid columns="2" align="start" gap="2rem">
<div>
<h3>Why?</h3>
<p>Progress bars are used to show how much of a task is complete, like loading data.</p>
</div>
<img src="https://via.placeholder.com/350x250"/>
<div>
<h3>Use When</h3>
<ul class="contains-do-list">
<li class="bullhorn-do-item"><novo-icon color="grass" mr="md" size="md">check</novo-icon><novo-text color="grass"> Processing an long running action.</novo-text></li>
<li class="bullhorn-do-item"><novo-icon color="grass" mr="md" size="md">check</novo-icon><novo-text color="grass"> Displaying metrics data that can be represents as a bar.</novo-text></li>
</ul>
</div>
<div>
<h3>Don′t Use When</h3>
<ul class="contains-do-list">
<li class="bullhorn-do-item"><novo-icon color="grapefruit" mr="md" size="md">times</novo-icon><novo-text color="grapefruit"> Loading content.</novo-text></li>
<li class="bullhorn-do-item"><novo-icon color="grapefruit" mr="md" size="md">times</novo-icon><novo-text color="grapefruit"> To show page loading state, use (loading)[../loading].</novo-text></li>
</ul>
</div>
</novo-grid>
`, isInline: true, dependencies: [{ kind: "component", type: i2$1.NovoGridElement, selector: "novo-grid", inputs: ["direction", "align", "justify", "columns"] }, { kind: "component", type: i2$1.NovoIconComponent, selector: "novo-icon", inputs: ["raised", "theme", "shape", "color", "size", "smaller", "larger", "alt", "name"] }, { kind: "component", type: i2$1.NovoText, selector: "novo-text,[novo-text]", inputs: ["block"] }, { kind: "directive", type: i2$1.MarginDirective, selector: "[m],[margin],[marginTop],[marginRight],[marginBottom],[marginLeft],[marginX],[marginY],[mt],[mr],[mb],[ml],[mx],[my]", inputs: ["margin", "m", "marginLeft", "ml", "marginRight", "mr", "marginTop", "mt", "marginBottom", "mb", "marginX", "mx", "marginY", "my"] }, { kind: "directive", type: i2$1.GapDirective, selector: "[gap]", inputs: ["gap"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: ProgressUsagePage, decorators: [{
            type: Component,
            args: [{
                    selector: 'progress-usage-page',
                    template: `<novo-grid columns="2" align="start" gap="2rem">
<div>
<h3>Why?</h3>
<p>Progress bars are used to show how much of a task is complete, like loading data.</p>
</div>
<img src="https://via.placeholder.com/350x250"/>
<div>
<h3>Use When</h3>
<ul class="contains-do-list">
<li class="bullhorn-do-item"><novo-icon color="grass" mr="md" size="md">check</novo-icon><novo-text color="grass"> Processing an long running action.</novo-text></li>
<li class="bullhorn-do-item"><novo-icon color="grass" mr="md" size="md">check</novo-icon><novo-text color="grass"> Displaying metrics data that can be represents as a bar.</novo-text></li>
</ul>
</div>
<div>
<h3>Don′t Use When</h3>
<ul class="contains-do-list">
<li class="bullhorn-do-item"><novo-icon color="grapefruit" mr="md" size="md">times</novo-icon><novo-text color="grapefruit"> Loading content.</novo-text></li>
<li class="bullhorn-do-item"><novo-icon color="grapefruit" mr="md" size="md">times</novo-icon><novo-text color="grapefruit"> To show page loading state, use (loading)[../loading].</novo-text></li>
</ul>
</div>
</novo-grid>
`,
                    host: { class: 'markdown-page' },
                    standalone: false,
                }]
        }] });
class ProgressExamplesPage {
    constructor() {
        this.params = {};
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: ProgressExamplesPage, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: ProgressExamplesPage, isStandalone: false, selector: "progress-examples-page", host: { classAttribute: "markdown-page" }, ngImport: i0, template: `<h2>Progress Bar</h2>
<p>Progress bars are generally linear and can show the percent complete of a task. Progress can also be indeterminate.</p>
<p><code-example example="progress-bar-usage"></code-example></p>
<h2>Radial Progress Bars</h2>
<p>Radial Progress can be used to show a percent complete or multiple statuses in a circle.</p>
<p><code-example example="progress-bar-radial-usage"></code-example></p>
`, isInline: true, dependencies: [{ kind: "component", type: CodeExampleComponent, selector: "code-example", inputs: ["example"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: ProgressExamplesPage, decorators: [{
            type: Component,
            args: [{
                    selector: 'progress-examples-page',
                    template: `<h2>Progress Bar</h2>
<p>Progress bars are generally linear and can show the percent complete of a task. Progress can also be indeterminate.</p>
<p><code-example example="progress-bar-usage"></code-example></p>
<h2>Radial Progress Bars</h2>
<p>Radial Progress can be used to show a percent complete or multiple statuses in a circle.</p>
<p><code-example example="progress-bar-radial-usage"></code-example></p>
`,
                    host: { class: 'markdown-page' },
                    standalone: false,
                }]
        }] });
class ProgressDevelopPage {
    constructor() {
        this.params = {};
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: ProgressDevelopPage, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: ProgressDevelopPage, isStandalone: false, selector: "progress-develop-page", host: { classAttribute: "markdown-page" }, ngImport: i0, template: `<h1>Technical Details</h1>
<ul>
<li><strong>source:</strong> <a href="https://github.com/bullhorn/novo-elements/blob/master/projects/novo-elements/src/elements/loading">(github)</a></li>
<li><strong>module:</strong> <code>import &#123; NovoProgressModule &#125; from 'novo-elements';</code></li>
</ul>
<p><strong>Usage</strong></p>
<pre><code class="language-html"><span class="hljs-tag">&lt;<span class="hljs-name">novo-progress</span> <span class="hljs-attr">total</span>=<span class="hljs-string">&quot;300&quot;</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">novo-progress-bar</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;120&quot;</span> <span class="hljs-attr">color</span>=<span class="hljs-string">&quot;success&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">novo-progress-bar</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">novo-progress-bar</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;40&quot;</span> <span class="hljs-attr">color</span>=<span class="hljs-string">&quot;negative&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">novo-progress-bar</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">novo-progress</span>&gt;</span>
</code></pre>
<h1>Roadmap</h1>
<ul class="contains-task-list">
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> Make color and theming consistent</li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> Dark Mode</li>
</ul>
<h1>Components</h1>
<h2>NovoProgressElement <code>novo-progress</code></h2>
<p>The <code>novo-progress</code> component displays the loading bar in a linear or radial line. This commonly used for showing the state of a long running process, like a file upload. The progress bar can also be used for reporting on progress made towards a goal, eg. 5 of 10 shifts filled.</p>
<h3>Properties</h3>
<p><props-table component="NovoProgressElement"></props-table></p>
`, isInline: true, dependencies: [{ kind: "component", type: PropsTableComponent, selector: "props-table", inputs: ["component", "kinds"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: ProgressDevelopPage, decorators: [{
            type: Component,
            args: [{
                    selector: 'progress-develop-page',
                    template: `<h1>Technical Details</h1>
<ul>
<li><strong>source:</strong> <a href="https://github.com/bullhorn/novo-elements/blob/master/projects/novo-elements/src/elements/loading">(github)</a></li>
<li><strong>module:</strong> <code>import &#123; NovoProgressModule &#125; from 'novo-elements';</code></li>
</ul>
<p><strong>Usage</strong></p>
<pre><code class="language-html"><span class="hljs-tag">&lt;<span class="hljs-name">novo-progress</span> <span class="hljs-attr">total</span>=<span class="hljs-string">&quot;300&quot;</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">novo-progress-bar</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;120&quot;</span> <span class="hljs-attr">color</span>=<span class="hljs-string">&quot;success&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">novo-progress-bar</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">novo-progress-bar</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;40&quot;</span> <span class="hljs-attr">color</span>=<span class="hljs-string">&quot;negative&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">novo-progress-bar</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">novo-progress</span>&gt;</span>
</code></pre>
<h1>Roadmap</h1>
<ul class="contains-task-list">
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> Make color and theming consistent</li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> Dark Mode</li>
</ul>
<h1>Components</h1>
<h2>NovoProgressElement <code>novo-progress</code></h2>
<p>The <code>novo-progress</code> component displays the loading bar in a linear or radial line. This commonly used for showing the state of a long running process, like a file upload. The progress bar can also be used for reporting on progress made towards a goal, eg. 5 of 10 shifts filled.</p>
<h3>Properties</h3>
<p><props-table component="NovoProgressElement"></props-table></p>
`,
                    host: { class: 'markdown-page' },
                    standalone: false,
                }]
        }] });
class ProgressDesignPage {
    constructor() {
        this.params = {};
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: ProgressDesignPage, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: ProgressDesignPage, isStandalone: false, selector: "progress-design-page", host: { classAttribute: "markdown-page" }, ngImport: i0, template: `<h2>Anatomy</h2>
<novo-grid columns="2" align="start" gap="2rem">
<img src="assets/images/ModalAnatomy.png" width="450">
<div>
<ol>
<li>
<p><strong>Container</strong><br>
Defines the layout for the form field (horizontal vs vertical)</p>
</li>
<li>
<p><strong>Input Prefix (Optional element)</strong><br>
An element/icon displayed before the input. eg. $</p>
</li>
<li>
<p><strong>Label</strong><br>
A label for a group of menu actions.</p>
</li>
<li>
<p><strong>Input Control</strong><br>
The element representing the input control: <code>input</code>, <code>select</code>, etc...</p>
</li>
<li>
<p><strong>Input Suffix (Optional element)</strong><br>
The element/icon displayed after the input. eg. calendar icon for date picker.</p>
</li>
<li>
<p><strong>Helper/Error text (Optional element)</strong><br>
Caption text to display helpful information, warnings, or errors.</p>
</li>
</ol>
</div>
</novo-grid>
<h2>Best Practices</h2>
<ul>
<li>Use spinner to display that an action invoked by the user is performing but not complete.</li>
<li>Use loading when loading data from the server to intialize content.</li>
<li>If a spinner is triggered by a button, place the spinner in the button, and disable the button while the spinner is visible.</li>
<li>If only a portion of a page is loading new content or being updated, place the loading element in that part of the page.</li>
<li>There should only be a single loading element on a page at one time.</li>
</ul>
<h2>How to configure</h2>
<novo-grid columns="2" align="start" gap="2rem">
<blockquote>
<div class="p"><img src="https://via.placeholder.com/350x250" alt="placeholder"></div>
<ul class="contains-do-list">
<li class="bullhorn-do-item"><novo-icon color="grass" mr="md" size="md">check</novo-icon><novo-text color="grass"> Always do this</novo-text></li>
</ul>
<div class="p">Explain this</div>
</blockquote>
<blockquote>
<div class="p"><img src="https://via.placeholder.com/350x250" alt="placeholder"></div>
<ul class="contains-do-list">
<li class="bullhorn-do-item"><novo-icon color="grapefruit" mr="md" size="md">times</novo-icon><novo-text color="grapefruit"> Never do this</novo-text></li>
</ul>
<div class="p">Explain this</div>
</blockquote>
</novo-grid>
<h2>Patterns</h2>
<novo-grid columns="2" align="start" gap="2rem">
<blockquote>
<div class="p"><strong>Pattern</strong></div>
<div class="p">Why is it configured like this</div>
</blockquote>
<p><img src="https://via.placeholder.com/350x250" alt="placeholder"></p>
<blockquote>
<div class="p"><strong>Pattern</strong></div>
<div class="p">Why is it configured like this</div>
</blockquote>
<p><img src="https://via.placeholder.com/350x250" alt="placeholder"></p>
</novo-grid>
<h2>Accessibility</h2>
<p><strong>Implementation</strong></p>
<p>Always include an <code>alt</code> attribute describing the information that is visually displayed in the image.</p>
`, isInline: true, dependencies: [{ kind: "component", type: i2$1.NovoGridElement, selector: "novo-grid", inputs: ["direction", "align", "justify", "columns"] }, { kind: "component", type: i2$1.NovoIconComponent, selector: "novo-icon", inputs: ["raised", "theme", "shape", "color", "size", "smaller", "larger", "alt", "name"] }, { kind: "component", type: i2$1.NovoText, selector: "novo-text,[novo-text]", inputs: ["block"] }, { kind: "directive", type: i2$1.MarginDirective, selector: "[m],[margin],[marginTop],[marginRight],[marginBottom],[marginLeft],[marginX],[marginY],[mt],[mr],[mb],[ml],[mx],[my]", inputs: ["margin", "m", "marginLeft", "ml", "marginRight", "mr", "marginTop", "mt", "marginBottom", "mb", "marginX", "mx", "marginY", "my"] }, { kind: "directive", type: i2$1.GapDirective, selector: "[gap]", inputs: ["gap"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: ProgressDesignPage, decorators: [{
            type: Component,
            args: [{
                    selector: 'progress-design-page',
                    template: `<h2>Anatomy</h2>
<novo-grid columns="2" align="start" gap="2rem">
<img src="assets/images/ModalAnatomy.png" width="450">
<div>
<ol>
<li>
<p><strong>Container</strong><br>
Defines the layout for the form field (horizontal vs vertical)</p>
</li>
<li>
<p><strong>Input Prefix (Optional element)</strong><br>
An element/icon displayed before the input. eg. $</p>
</li>
<li>
<p><strong>Label</strong><br>
A label for a group of menu actions.</p>
</li>
<li>
<p><strong>Input Control</strong><br>
The element representing the input control: <code>input</code>, <code>select</code>, etc...</p>
</li>
<li>
<p><strong>Input Suffix (Optional element)</strong><br>
The element/icon displayed after the input. eg. calendar icon for date picker.</p>
</li>
<li>
<p><strong>Helper/Error text (Optional element)</strong><br>
Caption text to display helpful information, warnings, or errors.</p>
</li>
</ol>
</div>
</novo-grid>
<h2>Best Practices</h2>
<ul>
<li>Use spinner to display that an action invoked by the user is performing but not complete.</li>
<li>Use loading when loading data from the server to intialize content.</li>
<li>If a spinner is triggered by a button, place the spinner in the button, and disable the button while the spinner is visible.</li>
<li>If only a portion of a page is loading new content or being updated, place the loading element in that part of the page.</li>
<li>There should only be a single loading element on a page at one time.</li>
</ul>
<h2>How to configure</h2>
<novo-grid columns="2" align="start" gap="2rem">
<blockquote>
<div class="p"><img src="https://via.placeholder.com/350x250" alt="placeholder"></div>
<ul class="contains-do-list">
<li class="bullhorn-do-item"><novo-icon color="grass" mr="md" size="md">check</novo-icon><novo-text color="grass"> Always do this</novo-text></li>
</ul>
<div class="p">Explain this</div>
</blockquote>
<blockquote>
<div class="p"><img src="https://via.placeholder.com/350x250" alt="placeholder"></div>
<ul class="contains-do-list">
<li class="bullhorn-do-item"><novo-icon color="grapefruit" mr="md" size="md">times</novo-icon><novo-text color="grapefruit"> Never do this</novo-text></li>
</ul>
<div class="p">Explain this</div>
</blockquote>
</novo-grid>
<h2>Patterns</h2>
<novo-grid columns="2" align="start" gap="2rem">
<blockquote>
<div class="p"><strong>Pattern</strong></div>
<div class="p">Why is it configured like this</div>
</blockquote>
<p><img src="https://via.placeholder.com/350x250" alt="placeholder"></p>
<blockquote>
<div class="p"><strong>Pattern</strong></div>
<div class="p">Why is it configured like this</div>
</blockquote>
<p><img src="https://via.placeholder.com/350x250" alt="placeholder"></p>
</novo-grid>
<h2>Accessibility</h2>
<p><strong>Implementation</strong></p>
<p>Always include an <code>alt</code> attribute describing the information that is visually displayed in the image.</p>
`,
                    host: { class: 'markdown-page' },
                    standalone: false,
                }]
        }] });
class PopoverExamplesPage {
    constructor() {
        this.params = {};
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: PopoverExamplesPage, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: PopoverExamplesPage, isStandalone: false, selector: "popover-examples-page", host: { classAttribute: "markdown-page" }, ngImport: i0, template: `<h2>Placement</h2>
<p><code-example example="pop-over-placement"></code-example></p>
<h2>Horizontal Alignment</h2>
<p><code-example example="pop-over-horizontal"></code-example></p>
<h2>Vertical Alignment</h2>
<p><code-example example="pop-over-vertical"></code-example></p>
<h2>Behavior</h2>
<p><code-example example="pop-over-behaviors"></code-example></p>
<h2>Dynamic HTML in PopOver</h2>
<p><code-example example="pop-over-dynamic"></code-example></p>
<h2>Automatic Placement of PopOver</h2>
<p><code-example example="pop-over-auto-placement"></code-example></p>
`, isInline: true, dependencies: [{ kind: "component", type: CodeExampleComponent, selector: "code-example", inputs: ["example"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: PopoverExamplesPage, decorators: [{
            type: Component,
            args: [{
                    selector: 'popover-examples-page',
                    template: `<h2>Placement</h2>
<p><code-example example="pop-over-placement"></code-example></p>
<h2>Horizontal Alignment</h2>
<p><code-example example="pop-over-horizontal"></code-example></p>
<h2>Vertical Alignment</h2>
<p><code-example example="pop-over-vertical"></code-example></p>
<h2>Behavior</h2>
<p><code-example example="pop-over-behaviors"></code-example></p>
<h2>Dynamic HTML in PopOver</h2>
<p><code-example example="pop-over-dynamic"></code-example></p>
<h2>Automatic Placement of PopOver</h2>
<p><code-example example="pop-over-auto-placement"></code-example></p>
`,
                    host: { class: 'markdown-page' },
                    standalone: false,
                }]
        }] });
class PopoverDevelopPage {
    constructor() {
        this.params = {};
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: PopoverDevelopPage, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: PopoverDevelopPage, isStandalone: false, selector: "popover-develop-page", host: { classAttribute: "markdown-page" }, ngImport: i0, template: `<h1>Technical Details</h1>
<p>Tooltips are used as system notifications. They can contain custom text titles and messages, as well as any icons from bh-icons and any color from our color palletes.</p>
<ul>
<li><strong>source:</strong> <a href="https://github.com/bullhorn/novo-elements/blob/master/projects/novo-elements/src/elements/tooltips">(github)</a></li>
<li><strong>module:</strong> <code>import &#123; NovoFieldModule &#125; from 'novo-elements';</code></li>
</ul>
<p><strong>Usage</strong></p>
<pre><code class="language-html"><span class="hljs-tag">&lt;<span class="hljs-name">novo-field</span> <span class="hljs-attr">layout</span>=<span class="hljs-string">&quot;horizontal&quot;</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">novo-label</span>&gt;</span>Amount<span class="hljs-tag">&lt;/<span class="hljs-name">novo-label</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">novoInput</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;number&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;example-right-align&quot;</span> /&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">novoPrefix</span>&gt;</span>$<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">novoSuffix</span>&gt;</span>.00<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">novo-hint</span>&gt;</span>Enter some money<span class="hljs-tag">&lt;/<span class="hljs-name">novo-hint</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">novo-field</span>&gt;</span>
</code></pre>
<h1>Roadmap</h1>
<ul class="contains-task-list">
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"> Improve Typing Support</li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> Make color and theming consistent</li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> Dark Mode</li>
</ul>
<h1>Changelog</h1>
<h3>5.0.0</h3>
<p><strong>Deprecation</strong></p>
<ul>
<li>You should no longer use <code>list</code> and <code>item</code> components, these are non-standard components and have been replaced with <code>novo-option</code> as used in the usage above.</li>
</ul>
<h1>Components</h1>
<h2>NovoFieldElement <code>novo-field</code></h2>
<p>The <code>novo-field</code> component expects 1 <code>button</code> or <code>novo-button</code> as the trigger for the menu list which is comprised of all the <code>novo-option</code> or <code>novo-optgroup</code> child components.</p>
<h3>Properties</h3>
<p><props-table component="NovoFieldElement"></props-table></p>
<h1>Directive</h1>
<h2>NovoInput <code>[novoInput]</code></h2>
<p>The <code>novoInput</code> component expects 1 <code>button</code> or <code>novo-button</code> as the trigger for the menu list which is comprised of all the <code>novo-option</code> or <code>novo-optgroup</code> child components.</p>
<h3>Properties</h3>
<p><props-table component="NovoInput"></props-table></p>
`, isInline: true, dependencies: [{ kind: "component", type: PropsTableComponent, selector: "props-table", inputs: ["component", "kinds"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: PopoverDevelopPage, decorators: [{
            type: Component,
            args: [{
                    selector: 'popover-develop-page',
                    template: `<h1>Technical Details</h1>
<p>Tooltips are used as system notifications. They can contain custom text titles and messages, as well as any icons from bh-icons and any color from our color palletes.</p>
<ul>
<li><strong>source:</strong> <a href="https://github.com/bullhorn/novo-elements/blob/master/projects/novo-elements/src/elements/tooltips">(github)</a></li>
<li><strong>module:</strong> <code>import &#123; NovoFieldModule &#125; from 'novo-elements';</code></li>
</ul>
<p><strong>Usage</strong></p>
<pre><code class="language-html"><span class="hljs-tag">&lt;<span class="hljs-name">novo-field</span> <span class="hljs-attr">layout</span>=<span class="hljs-string">&quot;horizontal&quot;</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">novo-label</span>&gt;</span>Amount<span class="hljs-tag">&lt;/<span class="hljs-name">novo-label</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">novoInput</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;number&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;example-right-align&quot;</span> /&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">novoPrefix</span>&gt;</span>$<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">novoSuffix</span>&gt;</span>.00<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">novo-hint</span>&gt;</span>Enter some money<span class="hljs-tag">&lt;/<span class="hljs-name">novo-hint</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">novo-field</span>&gt;</span>
</code></pre>
<h1>Roadmap</h1>
<ul class="contains-task-list">
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"> Improve Typing Support</li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> Make color and theming consistent</li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> Dark Mode</li>
</ul>
<h1>Changelog</h1>
<h3>5.0.0</h3>
<p><strong>Deprecation</strong></p>
<ul>
<li>You should no longer use <code>list</code> and <code>item</code> components, these are non-standard components and have been replaced with <code>novo-option</code> as used in the usage above.</li>
</ul>
<h1>Components</h1>
<h2>NovoFieldElement <code>novo-field</code></h2>
<p>The <code>novo-field</code> component expects 1 <code>button</code> or <code>novo-button</code> as the trigger for the menu list which is comprised of all the <code>novo-option</code> or <code>novo-optgroup</code> child components.</p>
<h3>Properties</h3>
<p><props-table component="NovoFieldElement"></props-table></p>
<h1>Directive</h1>
<h2>NovoInput <code>[novoInput]</code></h2>
<p>The <code>novoInput</code> component expects 1 <code>button</code> or <code>novo-button</code> as the trigger for the menu list which is comprised of all the <code>novo-option</code> or <code>novo-optgroup</code> child components.</p>
<h3>Properties</h3>
<p><props-table component="NovoInput"></props-table></p>
`,
                    host: { class: 'markdown-page' },
                    standalone: false,
                }]
        }] });
class PopoverDesignPage {
    constructor() {
        this.params = {};
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: PopoverDesignPage, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: PopoverDesignPage, isStandalone: false, selector: "popover-design-page", host: { classAttribute: "markdown-page" }, ngImport: i0, template: `<h2>Usage</h2>
<novo-grid columns="2" align="start" gap="2rem">
<div>
<p>Popovers are layered containers that hold additional information or controls. Popovers are containers used to display transient content such as menus, options, additional actions, and more. They visually stand out through stroke and drop shadow and float on top of the interface.</p>
</div>
<img src="assets/images/PopoverOverview.png"/>
<div>
<h3>Use When</h3>
<ul class="contains-do-list">
<li class="bullhorn-do-item"><novo-icon color="grass" mr="md" size="md">check</novo-icon><novo-text color="grass"> Displaying supplementary content or actions, without obscuring the page.</novo-text></li>
<li class="bullhorn-do-item"><novo-icon color="grass" mr="md" size="md">check</novo-icon><novo-text color="grass"> Creating a menu by placing a list group inside of a popover.</novo-text></li>
</ul>
</div>
<div>
<h3>Don′t Use When</h3>
<ul class="contains-do-list">
<li class="bullhorn-do-item"><novo-icon color="grapefruit" mr="md" size="md">times</novo-icon><novo-text color="grapefruit"> When content is 10 words or fewer. Instead, use a tooltip.</novo-text></li>
<li class="bullhorn-do-item"><novo-icon color="grapefruit" mr="md" size="md">times</novo-icon><novo-text color="grapefruit"> Requiring a user to complete a complex task. Instead, use a modal or a separate page.</novo-text></li>
</ul>
</div>
</novo-grid>
<h2>Anatomy</h2>
<novo-grid columns="2" align="start" gap="2rem">
<img src="assets/images/PopoverAnatomy.png" width="450">
<div>
<ol>
<li>
<p><strong>Content</strong><br>
The pop-overs contents, defined based on the application needs and business use-cases.</p>
</li>
<li>
<p><strong>Trigger</strong><br>
The element that anchors the popover and controls how the popover will be trigger (click, hover).</p>
</li>
<li>
<p><strong>Container</strong><br>
The popover container will be positioned based on the alignment to the trigger element.</p>
</li>
</ol>
</div>
</novo-grid>
<h2>Guidelines</h2>
<novo-grid columns="2" align="start" gap="2rem">
<blockquote>
<div class="p"><img src="assets/images/PopoverPointer.png" alt="placeholder"></div>
<div class="p"><strong>With Pointer</strong></div>
<div class="p">By default, popovers have a pointers. Popovers without a pointer should be used when the trigger has a visually distinctive selected state, in order to show the connection between the popover and its trigger.</div>
<div class="p">Most Popovers should have a pointer which should be used to help show the connection to the trigger, in cases where the trigger is not easily identifiable.</div>
</blockquote>
<blockquote>
<div class="p"><img src="assets/images/PopoverPosition.png" alt="placeholder"></div>
<div class="p"><strong>Placement</strong></div>
<div class="p">A popover is positioned in relation to its source. The placement property values are the following: top, top left, top right, top start, top end, bottom, bottom left, bottom right, bottom start, bottom end, left, left top, left bottom, start, start top, start bottom, right, right top, right bottom, end, end top, end bottom. The default placement value is at the top.</div>
</blockquote>
</novo-grid>
<h2>Accessibility</h2>
<p><strong>Implementation</strong></p>
<p>the popover should follow the Aria <code>complementary</code> role <a href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles/complementary_role">guidelines</a>.</p>
`, isInline: true, dependencies: [{ kind: "component", type: i2$1.NovoGridElement, selector: "novo-grid", inputs: ["direction", "align", "justify", "columns"] }, { kind: "component", type: i2$1.NovoIconComponent, selector: "novo-icon", inputs: ["raised", "theme", "shape", "color", "size", "smaller", "larger", "alt", "name"] }, { kind: "component", type: i2$1.NovoText, selector: "novo-text,[novo-text]", inputs: ["block"] }, { kind: "directive", type: i2$1.MarginDirective, selector: "[m],[margin],[marginTop],[marginRight],[marginBottom],[marginLeft],[marginX],[marginY],[mt],[mr],[mb],[ml],[mx],[my]", inputs: ["margin", "m", "marginLeft", "ml", "marginRight", "mr", "marginTop", "mt", "marginBottom", "mb", "marginX", "mx", "marginY", "my"] }, { kind: "directive", type: i2$1.GapDirective, selector: "[gap]", inputs: ["gap"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: PopoverDesignPage, decorators: [{
            type: Component,
            args: [{
                    selector: 'popover-design-page',
                    template: `<h2>Usage</h2>
<novo-grid columns="2" align="start" gap="2rem">
<div>
<p>Popovers are layered containers that hold additional information or controls. Popovers are containers used to display transient content such as menus, options, additional actions, and more. They visually stand out through stroke and drop shadow and float on top of the interface.</p>
</div>
<img src="assets/images/PopoverOverview.png"/>
<div>
<h3>Use When</h3>
<ul class="contains-do-list">
<li class="bullhorn-do-item"><novo-icon color="grass" mr="md" size="md">check</novo-icon><novo-text color="grass"> Displaying supplementary content or actions, without obscuring the page.</novo-text></li>
<li class="bullhorn-do-item"><novo-icon color="grass" mr="md" size="md">check</novo-icon><novo-text color="grass"> Creating a menu by placing a list group inside of a popover.</novo-text></li>
</ul>
</div>
<div>
<h3>Don′t Use When</h3>
<ul class="contains-do-list">
<li class="bullhorn-do-item"><novo-icon color="grapefruit" mr="md" size="md">times</novo-icon><novo-text color="grapefruit"> When content is 10 words or fewer. Instead, use a tooltip.</novo-text></li>
<li class="bullhorn-do-item"><novo-icon color="grapefruit" mr="md" size="md">times</novo-icon><novo-text color="grapefruit"> Requiring a user to complete a complex task. Instead, use a modal or a separate page.</novo-text></li>
</ul>
</div>
</novo-grid>
<h2>Anatomy</h2>
<novo-grid columns="2" align="start" gap="2rem">
<img src="assets/images/PopoverAnatomy.png" width="450">
<div>
<ol>
<li>
<p><strong>Content</strong><br>
The pop-overs contents, defined based on the application needs and business use-cases.</p>
</li>
<li>
<p><strong>Trigger</strong><br>
The element that anchors the popover and controls how the popover will be trigger (click, hover).</p>
</li>
<li>
<p><strong>Container</strong><br>
The popover container will be positioned based on the alignment to the trigger element.</p>
</li>
</ol>
</div>
</novo-grid>
<h2>Guidelines</h2>
<novo-grid columns="2" align="start" gap="2rem">
<blockquote>
<div class="p"><img src="assets/images/PopoverPointer.png" alt="placeholder"></div>
<div class="p"><strong>With Pointer</strong></div>
<div class="p">By default, popovers have a pointers. Popovers without a pointer should be used when the trigger has a visually distinctive selected state, in order to show the connection between the popover and its trigger.</div>
<div class="p">Most Popovers should have a pointer which should be used to help show the connection to the trigger, in cases where the trigger is not easily identifiable.</div>
</blockquote>
<blockquote>
<div class="p"><img src="assets/images/PopoverPosition.png" alt="placeholder"></div>
<div class="p"><strong>Placement</strong></div>
<div class="p">A popover is positioned in relation to its source. The placement property values are the following: top, top left, top right, top start, top end, bottom, bottom left, bottom right, bottom start, bottom end, left, left top, left bottom, start, start top, start bottom, right, right top, right bottom, end, end top, end bottom. The default placement value is at the top.</div>
</blockquote>
</novo-grid>
<h2>Accessibility</h2>
<p><strong>Implementation</strong></p>
<p>the popover should follow the Aria <code>complementary</code> role <a href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles/complementary_role">guidelines</a>.</p>
`,
                    host: { class: 'markdown-page' },
                    standalone: false,
                }]
        }] });
class NonIdealStateExamplesPage {
    constructor() {
        this.params = {};
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: NonIdealStateExamplesPage, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: NonIdealStateExamplesPage, isStandalone: false, selector: "non-ideal-state-examples-page", host: { classAttribute: "markdown-page" }, ngImport: i0, template: `<h2>Basic Usage</h2>
<p>Basic use-case is to display an icon, message, and reason for this state to occur. And provide a call to action for the user.</p>
<p><code-example example="non-ideal-state-usage"></code-example></p>
<p>The call to action doesn't necessarily need to be a button, for example:</p>
<p><code-example example="non-ideal-state-search-usage"></code-example>
<code-example example="non-ideal-state-loading-usage"></code-example></p>
`, isInline: true, dependencies: [{ kind: "component", type: CodeExampleComponent, selector: "code-example", inputs: ["example"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: NonIdealStateExamplesPage, decorators: [{
            type: Component,
            args: [{
                    selector: 'non-ideal-state-examples-page',
                    template: `<h2>Basic Usage</h2>
<p>Basic use-case is to display an icon, message, and reason for this state to occur. And provide a call to action for the user.</p>
<p><code-example example="non-ideal-state-usage"></code-example></p>
<p>The call to action doesn't necessarily need to be a button, for example:</p>
<p><code-example example="non-ideal-state-search-usage"></code-example>
<code-example example="non-ideal-state-loading-usage"></code-example></p>
`,
                    host: { class: 'markdown-page' },
                    standalone: false,
                }]
        }] });
class NonIdealStateDevelopPage {
    constructor() {
        this.params = {};
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: NonIdealStateDevelopPage, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: NonIdealStateDevelopPage, isStandalone: false, selector: "non-ideal-state-develop-page", host: { classAttribute: "markdown-page" }, ngImport: i0, template: `<h1>Technical Details</h1>
<ul>
<li><strong>source:</strong> <a href="https://github.com/bullhorn/novo-elements/blob/master/projects/novo-elements/src/elements/non-ideal-state">(github)</a></li>
<li><strong>module:</strong> <code>import &#123; NovoNonIdealStateModule &#125; form 'novo-elements/modal';</code></li>
</ul>
<p><strong>Basic Usage</strong></p>
<pre><code class="language-html"><span class="hljs-tag">&lt;<span class="hljs-name">novo-non-ideal-state</span> <span class="hljs-attr">icon</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;This folder is empty&quot;</span> <span class="hljs-attr">description</span>=<span class="hljs-string">&quot;Upload a new file to populate the folder.&quot;</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">novo-button</span> <span class="hljs-attr">theme</span>=<span class="hljs-string">&quot;primary&quot;</span> <span class="hljs-attr">icon</span>=<span class="hljs-string">&quot;upload&quot;</span>&gt;</span>Upload<span class="hljs-tag">&lt;/<span class="hljs-name">novo-button</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">novo-non-ideal-state</span>&gt;</span>
</code></pre>
<h1>Roadmap</h1>
<ul class="contains-task-list">
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"> Improve Typing Support</li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> Make color and theming consistent</li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> Dark Mode</li>
</ul>
<h1>Changelog</h1>
<h3>6.0.0</h3>
<p><em>Added in this version</em></p>
<h1>Components</h1>
<h2>NovoNavElement <code>novo-non-ideal-state</code></h2>
<p>Used as a placeholder template when every components or views are in a non-ideal state suchas empty, error, loading, etc...</p>
<h3>Properties</h3>
<p><props-table component="NonIdealStateElement"></props-table></p>
`, isInline: true, dependencies: [{ kind: "component", type: PropsTableComponent, selector: "props-table", inputs: ["component", "kinds"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: NonIdealStateDevelopPage, decorators: [{
            type: Component,
            args: [{
                    selector: 'non-ideal-state-develop-page',
                    template: `<h1>Technical Details</h1>
<ul>
<li><strong>source:</strong> <a href="https://github.com/bullhorn/novo-elements/blob/master/projects/novo-elements/src/elements/non-ideal-state">(github)</a></li>
<li><strong>module:</strong> <code>import &#123; NovoNonIdealStateModule &#125; form 'novo-elements/modal';</code></li>
</ul>
<p><strong>Basic Usage</strong></p>
<pre><code class="language-html"><span class="hljs-tag">&lt;<span class="hljs-name">novo-non-ideal-state</span> <span class="hljs-attr">icon</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;This folder is empty&quot;</span> <span class="hljs-attr">description</span>=<span class="hljs-string">&quot;Upload a new file to populate the folder.&quot;</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">novo-button</span> <span class="hljs-attr">theme</span>=<span class="hljs-string">&quot;primary&quot;</span> <span class="hljs-attr">icon</span>=<span class="hljs-string">&quot;upload&quot;</span>&gt;</span>Upload<span class="hljs-tag">&lt;/<span class="hljs-name">novo-button</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">novo-non-ideal-state</span>&gt;</span>
</code></pre>
<h1>Roadmap</h1>
<ul class="contains-task-list">
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"> Improve Typing Support</li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> Make color and theming consistent</li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> Dark Mode</li>
</ul>
<h1>Changelog</h1>
<h3>6.0.0</h3>
<p><em>Added in this version</em></p>
<h1>Components</h1>
<h2>NovoNavElement <code>novo-non-ideal-state</code></h2>
<p>Used as a placeholder template when every components or views are in a non-ideal state suchas empty, error, loading, etc...</p>
<h3>Properties</h3>
<p><props-table component="NonIdealStateElement"></props-table></p>
`,
                    host: { class: 'markdown-page' },
                    standalone: false,
                }]
        }] });
class NonIdealStateDesignPage {
    constructor() {
        this.params = {};
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: NonIdealStateDesignPage, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: NonIdealStateDesignPage, isStandalone: false, selector: "non-ideal-state-design-page", host: { classAttribute: "markdown-page" }, ngImport: i0, template: `<h2>Usage</h2>
<novo-grid columns="2" align="start" gap="2rem">
<div>
<p>Non-ideal UI states inform the user that some content is unavailable. There are several types of non-ideal states, including:</p>
<ul>
<li><strong>Empty state</strong>: when a list has no data in it yet, or a container's contents have been intentionally removed.</li>
<li><strong>Loading state</strong>: when waiting for data to load, Best practice is to show a spinner for this state, with optional explanatory text below the spinner.</li>
<li><strong>Error state</strong>: its broken (for instance, 404 and 500 HTTP errors). In this case, best practice is to add a call to action directing the user what to do next.</li>
</ul>
</div>
<img src="https://via.placeholder.com/350x250"/>
<div>
<h3>Use When</h3>
<ul class="contains-do-list">
<li class="bullhorn-do-item"><novo-icon color="grass" mr="md" size="md">check</novo-icon><novo-text color="grass"> Content is missing from a page and you need to communicate why.</novo-text></li>
<li class="bullhorn-do-item"><novo-icon color="grass" mr="md" size="md">check</novo-icon><novo-text color="grass"> A user is starting a new workflow and hasn’t created any content yet.</novo-text></li>
<li class="bullhorn-do-item"><novo-icon color="grass" mr="md" size="md">check</novo-icon><novo-text color="grass"> A user has nothing more to do. For example, when they have completed all tasks, read all messages, or seen all notifications</novo-text></li>
</ul>
</div>
<div>
<h3>Don′t Use When</h3>
<ul class="contains-do-list">
<li class="bullhorn-do-item"><novo-icon color="grapefruit" mr="md" size="md">times</novo-icon><novo-text color="grapefruit"> tbw</novo-text></li>
</ul>
</div>
</novo-grid>
<h2>Anatomy</h2>
<novo-grid columns="2" align="start" gap="2rem">
<img src="assets/images/ModalAnatomy.png" width="450">
<div>
<ol>
<li>
<p><strong>Title</strong><br>
Briefly summarizes what went wrong (or right).</p>
</li>
<li>
<p><strong>Message</strong><br>
Provides additional context and offers guidance on next steps.</p>
</li>
<li>
<p><strong>Icon (Optional)</strong><br>
Should be avoided unless absolutely necessary, primarily used for mobile or responsive design</p>
</li>
<li>
<p><strong>List (Optional)</strong><br>
Lists out criteria or additional options.</p>
</li>
<li>
<p><strong>Action (Optional)</strong><br>
Displays interactive content (eg. Button) that allow a user to take an action as a result of the non ideal state.</p>
</li>
</ol>
</div>
</novo-grid>
<h2>Best Practices</h2>
<ul>
<li>
<p>Center non-ideal states horizontally and vertically within their container.</p>
</li>
<li>
<p>When including an action, use the corresponding size variation. For example, a large empty state should use a large button.</p>
</li>
<li>
<p>Non-ideal states include a maximum width to ensure optimal typographic line lengths and will scale down fluidly on smaller viewports.</p>
</li>
</ul>
<h2>Patterns</h2>
<novo-grid columns="2" align="start" gap="2rem">
<blockquote>
<div class="p"><strong>Data Table Empty States</strong></div>
<div class="p">Data Tables inherently have an non-ideal states when no records currently exist. It is a good pattern to provide this context to the user but also to provide them with an action to &quot;Add your first record&quot;.</div>
</blockquote>
<p><img src="https://via.placeholder.com/350x250" alt="placeholder"></p>
<blockquote>
<div class="p"><strong>Picker no search results</strong></div>
<div class="p">Whenever a component or view has a search feature you will always create a non-ideal state when the search returns no matching records. Best practice would be to provide a list of alternative search options.</div>
</blockquote>
<p><img src="https://via.placeholder.com/350x250" alt="placeholder"></p>
</novo-grid>
<h2>Accessibility</h2>
<ul>
<li>Never rely on an empty state’s icon alone to communicate meaning. Craft your empty state’s text content to provide a user with everything they need to know, even if they are unable to see the page.</li>
<li>Reference the accessibility guidelines for buttons when including an action in the empty state.</li>
<li>Add role=&quot;presentation&quot; to purely decorational empty state icons to ensure they are ignored by screen readers.</li>
</ul>
`, isInline: true, dependencies: [{ kind: "component", type: i2$1.NovoGridElement, selector: "novo-grid", inputs: ["direction", "align", "justify", "columns"] }, { kind: "component", type: i2$1.NovoIconComponent, selector: "novo-icon", inputs: ["raised", "theme", "shape", "color", "size", "smaller", "larger", "alt", "name"] }, { kind: "component", type: i2$1.NovoText, selector: "novo-text,[novo-text]", inputs: ["block"] }, { kind: "directive", type: i2$1.MarginDirective, selector: "[m],[margin],[marginTop],[marginRight],[marginBottom],[marginLeft],[marginX],[marginY],[mt],[mr],[mb],[ml],[mx],[my]", inputs: ["margin", "m", "marginLeft", "ml", "marginRight", "mr", "marginTop", "mt", "marginBottom", "mb", "marginX", "mx", "marginY", "my"] }, { kind: "directive", type: i2$1.GapDirective, selector: "[gap]", inputs: ["gap"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: NonIdealStateDesignPage, decorators: [{
            type: Component,
            args: [{
                    selector: 'non-ideal-state-design-page',
                    template: `<h2>Usage</h2>
<novo-grid columns="2" align="start" gap="2rem">
<div>
<p>Non-ideal UI states inform the user that some content is unavailable. There are several types of non-ideal states, including:</p>
<ul>
<li><strong>Empty state</strong>: when a list has no data in it yet, or a container's contents have been intentionally removed.</li>
<li><strong>Loading state</strong>: when waiting for data to load, Best practice is to show a spinner for this state, with optional explanatory text below the spinner.</li>
<li><strong>Error state</strong>: its broken (for instance, 404 and 500 HTTP errors). In this case, best practice is to add a call to action directing the user what to do next.</li>
</ul>
</div>
<img src="https://via.placeholder.com/350x250"/>
<div>
<h3>Use When</h3>
<ul class="contains-do-list">
<li class="bullhorn-do-item"><novo-icon color="grass" mr="md" size="md">check</novo-icon><novo-text color="grass"> Content is missing from a page and you need to communicate why.</novo-text></li>
<li class="bullhorn-do-item"><novo-icon color="grass" mr="md" size="md">check</novo-icon><novo-text color="grass"> A user is starting a new workflow and hasn’t created any content yet.</novo-text></li>
<li class="bullhorn-do-item"><novo-icon color="grass" mr="md" size="md">check</novo-icon><novo-text color="grass"> A user has nothing more to do. For example, when they have completed all tasks, read all messages, or seen all notifications</novo-text></li>
</ul>
</div>
<div>
<h3>Don′t Use When</h3>
<ul class="contains-do-list">
<li class="bullhorn-do-item"><novo-icon color="grapefruit" mr="md" size="md">times</novo-icon><novo-text color="grapefruit"> tbw</novo-text></li>
</ul>
</div>
</novo-grid>
<h2>Anatomy</h2>
<novo-grid columns="2" align="start" gap="2rem">
<img src="assets/images/ModalAnatomy.png" width="450">
<div>
<ol>
<li>
<p><strong>Title</strong><br>
Briefly summarizes what went wrong (or right).</p>
</li>
<li>
<p><strong>Message</strong><br>
Provides additional context and offers guidance on next steps.</p>
</li>
<li>
<p><strong>Icon (Optional)</strong><br>
Should be avoided unless absolutely necessary, primarily used for mobile or responsive design</p>
</li>
<li>
<p><strong>List (Optional)</strong><br>
Lists out criteria or additional options.</p>
</li>
<li>
<p><strong>Action (Optional)</strong><br>
Displays interactive content (eg. Button) that allow a user to take an action as a result of the non ideal state.</p>
</li>
</ol>
</div>
</novo-grid>
<h2>Best Practices</h2>
<ul>
<li>
<p>Center non-ideal states horizontally and vertically within their container.</p>
</li>
<li>
<p>When including an action, use the corresponding size variation. For example, a large empty state should use a large button.</p>
</li>
<li>
<p>Non-ideal states include a maximum width to ensure optimal typographic line lengths and will scale down fluidly on smaller viewports.</p>
</li>
</ul>
<h2>Patterns</h2>
<novo-grid columns="2" align="start" gap="2rem">
<blockquote>
<div class="p"><strong>Data Table Empty States</strong></div>
<div class="p">Data Tables inherently have an non-ideal states when no records currently exist. It is a good pattern to provide this context to the user but also to provide them with an action to &quot;Add your first record&quot;.</div>
</blockquote>
<p><img src="https://via.placeholder.com/350x250" alt="placeholder"></p>
<blockquote>
<div class="p"><strong>Picker no search results</strong></div>
<div class="p">Whenever a component or view has a search feature you will always create a non-ideal state when the search returns no matching records. Best practice would be to provide a list of alternative search options.</div>
</blockquote>
<p><img src="https://via.placeholder.com/350x250" alt="placeholder"></p>
</novo-grid>
<h2>Accessibility</h2>
<ul>
<li>Never rely on an empty state’s icon alone to communicate meaning. Craft your empty state’s text content to provide a user with everything they need to know, even if they are unable to see the page.</li>
<li>Reference the accessibility guidelines for buttons when including an action in the empty state.</li>
<li>Add role=&quot;presentation&quot; to purely decorational empty state icons to ensure they are ignored by screen readers.</li>
</ul>
`,
                    host: { class: 'markdown-page' },
                    standalone: false,
                }]
        }] });
class ModalExamplesPage {
    constructor() {
        this.params = {};
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: ModalExamplesPage, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: ModalExamplesPage, isStandalone: false, selector: "modal-examples-page", host: { classAttribute: "markdown-page" }, ngImport: i0, template: `<h2>Notification Modals</h2>
<h3>Success</h3>
<p>This modal uses only a primary action button. It is a confirmation that an action has been completed when the result is not immediately apparent. A workflow modal often transitions into a success modal.</p>
<p><code-example example="success-modal"></code-example></p>
<h3>Warning</h3>
<p>Warning modals ask for additional confirmation to complete an action because the action is either irreversible or there is an exception. The first line should always clarify the action or eventual result.</p>
<p><code-example example="warning-modal"></code-example></p>
<h3>Error</h3>
<p>Error modals indicate that an attempted action has failed. The first line should apologize and state the what happened. The second line should quickly attempt to explain to the user why this has happened, and instruct the user on the best course of action.</p>
<p><code-example example="error-modal"></code-example></p>
<h3>Custom</h3>
<p>In the case where &quot;Success&quot;, &quot;Warning&quot;, and &quot;Error&quot; notifications aren't enough, use the custom notification. Custom notifications allow any of the Bullhorn Icons to be used in the notification.</p>
<p><code-example example="custom-modal"></code-example></p>
<h2>Workflow Modals</h2>
<h3>Add</h3>
<p>Add modals have a colored title bar based on the record type being created. Additionally, due to a greater than average amount of content, they have fixed footers.</p>
<p><code-example example="modal-add-form"></code-example></p>
<h3>Edit &amp; Send</h3>
<p>Edit, Send, and non-Add workflow modals possess a plain header to remind the user of the action they are taking. They generally have a neutralizing button, and a primary button.</p>
<p><code-example example="modal-edit-form"></code-example></p>
`, isInline: true, dependencies: [{ kind: "component", type: CodeExampleComponent, selector: "code-example", inputs: ["example"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: ModalExamplesPage, decorators: [{
            type: Component,
            args: [{
                    selector: 'modal-examples-page',
                    template: `<h2>Notification Modals</h2>
<h3>Success</h3>
<p>This modal uses only a primary action button. It is a confirmation that an action has been completed when the result is not immediately apparent. A workflow modal often transitions into a success modal.</p>
<p><code-example example="success-modal"></code-example></p>
<h3>Warning</h3>
<p>Warning modals ask for additional confirmation to complete an action because the action is either irreversible or there is an exception. The first line should always clarify the action or eventual result.</p>
<p><code-example example="warning-modal"></code-example></p>
<h3>Error</h3>
<p>Error modals indicate that an attempted action has failed. The first line should apologize and state the what happened. The second line should quickly attempt to explain to the user why this has happened, and instruct the user on the best course of action.</p>
<p><code-example example="error-modal"></code-example></p>
<h3>Custom</h3>
<p>In the case where &quot;Success&quot;, &quot;Warning&quot;, and &quot;Error&quot; notifications aren't enough, use the custom notification. Custom notifications allow any of the Bullhorn Icons to be used in the notification.</p>
<p><code-example example="custom-modal"></code-example></p>
<h2>Workflow Modals</h2>
<h3>Add</h3>
<p>Add modals have a colored title bar based on the record type being created. Additionally, due to a greater than average amount of content, they have fixed footers.</p>
<p><code-example example="modal-add-form"></code-example></p>
<h3>Edit &amp; Send</h3>
<p>Edit, Send, and non-Add workflow modals possess a plain header to remind the user of the action they are taking. They generally have a neutralizing button, and a primary button.</p>
<p><code-example example="modal-edit-form"></code-example></p>
`,
                    host: { class: 'markdown-page' },
                    standalone: false,
                }]
        }] });
class ModalDevelopPage {
    constructor() {
        this.params = {};
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: ModalDevelopPage, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: ModalDevelopPage, isStandalone: false, selector: "modal-develop-page", host: { classAttribute: "markdown-page" }, ngImport: i0, template: `<h1>Technical Details</h1>
<ul>
<li><strong>source:</strong> <a href="https://github.com/bullhorn/novo-elements/blob/master/projects/novo-elements/src/elements/modal">(github)</a></li>
<li><strong>module:</strong> <code>import &#123; NovoModal &#125; form 'novo-elements/modal';</code></li>
<li><strong>service:</strong> <code>import &#123; NovoModalService &#125; form 'novo-elements/modal';</code></li>
</ul>
<h1>Roadmap</h1>
<ul class="contains-task-list">
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"> Improve Typing Support</li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> Remove <code>NovoModalParams</code> support in v6.0.0</li>
</ul>
<h1>Changelog</h1>
<h3>5.0.0</h3>
<p><strong>Deprecation</strong></p>
<ul>
<li>
<p><code>NovoModalParams</code> should no longer be used, instead use <code>NovoModalRef.params</code>. This is because <code>NovoModalRef</code> accepts a generic for the params property.</p>
<pre><code class="language-typescript"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">MyParams</span> &#123;
  <span class="hljs-attr">isDefault</span>: <span class="hljs-built_in">boolean</span>;
&#125;
...
<span class="hljs-title function_">constructor</span>(<span class="hljs-params"><span class="hljs-attr">ref</span>:<span class="hljs-title class_">NovoModalRef</span>&lt;<span class="hljs-title class_">MyParams</span>&gt;</span>) &#123;
  <span class="hljs-keyword">if</span>(ref.<span class="hljs-property">params</span>.<span class="hljs-property">isDefault</span>) &#123;
    <span class="hljs-comment">/* ^ Will not need to by type cast */</span>
  &#125;
&#125;
</code></pre>
</li>
</ul>
<h2>Properties</h2>
<p><em>No Properties</em></p>
<h1>Services</h1>
<h2>NovoModalService</h2>
<p>Modals should be invoked via <code>NovoModalService</code> and therefore all properties should be private or internal. Any values that need to be passed to the your <code>Modal</code> instance should be passed by the service and available in your modal.</p>
<pre><code class="language-typescript"><span class="hljs-meta">&#64;Component</span>(&#123;...&#125;)
<span class="hljs-keyword">class</span> <span class="hljs-title class_">RandomComponent</span> &#123;
  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"><span class="hljs-keyword">private</span> <span class="hljs-attr">modal</span>:<span class="hljs-title class_">NovoModalService</span></span>) &#123;&#125;
  <span class="hljs-title function_">handleAction</span>(<span class="hljs-params"></span>) &#123;
    <span class="hljs-keyword">const</span> ref = <span class="hljs-variable language_">this</span>.<span class="hljs-property">modal</span>.<span class="hljs-title function_">open</span>(<span class="hljs-title class_">ConfirmDeleteModal</span>, &#123; <span class="hljs-attr">record</span>: <span class="hljs-number">123</span> &#125;);
    <span class="hljs-comment">/* you can listen to the close event */</span>
    ref.<span class="hljs-property">onClosed</span>.<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">result</span>) =&gt;</span> &#123;
      <span class="hljs-comment">/* result is the argument sent via the ref */</span>
      <span class="hljs-keyword">if</span> (res === <span class="hljs-string">&#x27;success&#x27;</span>) &#123;
        <span class="hljs-comment">/* perfom some action */</span>
      &#125;
    &#125;);
    <span class="hljs-comment">/* close the modal from the parent */</span>
    ref.<span class="hljs-title function_">close</span>(<span class="hljs-string">&#x27;success&#x27;</span>)
  &#125;
&#125;
</code></pre>
<h3>Methods</h3>
<h4><strong>open(component, params)</strong></h4>
<p>Used to open all modals via the service. Use <code>params</code> to pass values to you component.</p>
<table>
<thead>
<tr>
<th style="text-align:left">Name</th>
<th style="text-align:left">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">component</td>
<td style="text-align:left"><em>Class</em><br>The angular component which represents the Modal to be opened.</td>
</tr>
<tr>
<td style="text-align:left">params</td>
<td style="text-align:left"><em>Object</em><br><strong>Optional</strong> arguments that will be injected into <code>NovoModalRef.params</code></td>
</tr>
</tbody>
</table>
<p><em>Note:</em> All modal components should be declared as <code>entryComponents</code> in the module.</p>
<h2>NovoModalRef&lt;T&gt;</h2>
<p><code>NovoModalRef</code> should be injected into your modal component and all pass params can be accessed in the <code>params</code> property.</p>
<pre><code class="language-typescript"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">DeleteModalParams</span> &#123;
  <span class="hljs-attr">record</span>: <span class="hljs-built_in">number</span>;
&#125;
<span class="hljs-meta">&#64;Component</span>(&#123;&#125;)
<span class="hljs-keyword">class</span> <span class="hljs-title class_">ConfirmDeleteModal</span> &#123;
  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"><span class="hljs-attr">ref</span>:<span class="hljs-title class_">NovoModalRef</span>&lt;<span class="hljs-title class_">DeleteModalParams</span>&gt;</span>) &#123;
    <span class="hljs-comment">/**
     * All passed values are available
     * via ref.params
     **/</span>
  &#125;

  <span class="hljs-title function_">handleClose</span>(<span class="hljs-params"></span>) &#123;
    <span class="hljs-comment">/* To close the modal use the close method */</span>
    <span class="hljs-variable language_">this</span>.<span class="hljs-property">ref</span>.<span class="hljs-title function_">close</span>(<span class="hljs-comment">/* Return a value */</span>)
  &#125;

&#125;
</code></pre>
<h3>Methods</h3>
<h4><strong>close(response)</strong></h4>
<p>Will close the modal will emit events to both the <code>beforeClose</code> and <code>afterClosed</code> observables, as well as the .</p>
<table>
<thead>
<tr>
<th style="text-align:left">Name</th>
<th style="text-align:left">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">response</td>
<td style="text-align:left"><em>any</em><br>Any value you wish to return to calling components, will be resovled in the <code>onClosed</code> promise.</td>
</tr>
</tbody>
</table>
`, isInline: true }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: ModalDevelopPage, decorators: [{
            type: Component,
            args: [{
                    selector: 'modal-develop-page',
                    template: `<h1>Technical Details</h1>
<ul>
<li><strong>source:</strong> <a href="https://github.com/bullhorn/novo-elements/blob/master/projects/novo-elements/src/elements/modal">(github)</a></li>
<li><strong>module:</strong> <code>import &#123; NovoModal &#125; form 'novo-elements/modal';</code></li>
<li><strong>service:</strong> <code>import &#123; NovoModalService &#125; form 'novo-elements/modal';</code></li>
</ul>
<h1>Roadmap</h1>
<ul class="contains-task-list">
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"> Improve Typing Support</li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> Remove <code>NovoModalParams</code> support in v6.0.0</li>
</ul>
<h1>Changelog</h1>
<h3>5.0.0</h3>
<p><strong>Deprecation</strong></p>
<ul>
<li>
<p><code>NovoModalParams</code> should no longer be used, instead use <code>NovoModalRef.params</code>. This is because <code>NovoModalRef</code> accepts a generic for the params property.</p>
<pre><code class="language-typescript"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">MyParams</span> &#123;
  <span class="hljs-attr">isDefault</span>: <span class="hljs-built_in">boolean</span>;
&#125;
...
<span class="hljs-title function_">constructor</span>(<span class="hljs-params"><span class="hljs-attr">ref</span>:<span class="hljs-title class_">NovoModalRef</span>&lt;<span class="hljs-title class_">MyParams</span>&gt;</span>) &#123;
  <span class="hljs-keyword">if</span>(ref.<span class="hljs-property">params</span>.<span class="hljs-property">isDefault</span>) &#123;
    <span class="hljs-comment">/* ^ Will not need to by type cast */</span>
  &#125;
&#125;
</code></pre>
</li>
</ul>
<h2>Properties</h2>
<p><em>No Properties</em></p>
<h1>Services</h1>
<h2>NovoModalService</h2>
<p>Modals should be invoked via <code>NovoModalService</code> and therefore all properties should be private or internal. Any values that need to be passed to the your <code>Modal</code> instance should be passed by the service and available in your modal.</p>
<pre><code class="language-typescript"><span class="hljs-meta">&#64;Component</span>(&#123;...&#125;)
<span class="hljs-keyword">class</span> <span class="hljs-title class_">RandomComponent</span> &#123;
  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"><span class="hljs-keyword">private</span> <span class="hljs-attr">modal</span>:<span class="hljs-title class_">NovoModalService</span></span>) &#123;&#125;
  <span class="hljs-title function_">handleAction</span>(<span class="hljs-params"></span>) &#123;
    <span class="hljs-keyword">const</span> ref = <span class="hljs-variable language_">this</span>.<span class="hljs-property">modal</span>.<span class="hljs-title function_">open</span>(<span class="hljs-title class_">ConfirmDeleteModal</span>, &#123; <span class="hljs-attr">record</span>: <span class="hljs-number">123</span> &#125;);
    <span class="hljs-comment">/* you can listen to the close event */</span>
    ref.<span class="hljs-property">onClosed</span>.<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">result</span>) =&gt;</span> &#123;
      <span class="hljs-comment">/* result is the argument sent via the ref */</span>
      <span class="hljs-keyword">if</span> (res === <span class="hljs-string">&#x27;success&#x27;</span>) &#123;
        <span class="hljs-comment">/* perfom some action */</span>
      &#125;
    &#125;);
    <span class="hljs-comment">/* close the modal from the parent */</span>
    ref.<span class="hljs-title function_">close</span>(<span class="hljs-string">&#x27;success&#x27;</span>)
  &#125;
&#125;
</code></pre>
<h3>Methods</h3>
<h4><strong>open(component, params)</strong></h4>
<p>Used to open all modals via the service. Use <code>params</code> to pass values to you component.</p>
<table>
<thead>
<tr>
<th style="text-align:left">Name</th>
<th style="text-align:left">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">component</td>
<td style="text-align:left"><em>Class</em><br>The angular component which represents the Modal to be opened.</td>
</tr>
<tr>
<td style="text-align:left">params</td>
<td style="text-align:left"><em>Object</em><br><strong>Optional</strong> arguments that will be injected into <code>NovoModalRef.params</code></td>
</tr>
</tbody>
</table>
<p><em>Note:</em> All modal components should be declared as <code>entryComponents</code> in the module.</p>
<h2>NovoModalRef&lt;T&gt;</h2>
<p><code>NovoModalRef</code> should be injected into your modal component and all pass params can be accessed in the <code>params</code> property.</p>
<pre><code class="language-typescript"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">DeleteModalParams</span> &#123;
  <span class="hljs-attr">record</span>: <span class="hljs-built_in">number</span>;
&#125;
<span class="hljs-meta">&#64;Component</span>(&#123;&#125;)
<span class="hljs-keyword">class</span> <span class="hljs-title class_">ConfirmDeleteModal</span> &#123;
  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"><span class="hljs-attr">ref</span>:<span class="hljs-title class_">NovoModalRef</span>&lt;<span class="hljs-title class_">DeleteModalParams</span>&gt;</span>) &#123;
    <span class="hljs-comment">/**
     * All passed values are available
     * via ref.params
     **/</span>
  &#125;

  <span class="hljs-title function_">handleClose</span>(<span class="hljs-params"></span>) &#123;
    <span class="hljs-comment">/* To close the modal use the close method */</span>
    <span class="hljs-variable language_">this</span>.<span class="hljs-property">ref</span>.<span class="hljs-title function_">close</span>(<span class="hljs-comment">/* Return a value */</span>)
  &#125;

&#125;
</code></pre>
<h3>Methods</h3>
<h4><strong>close(response)</strong></h4>
<p>Will close the modal will emit events to both the <code>beforeClose</code> and <code>afterClosed</code> observables, as well as the .</p>
<table>
<thead>
<tr>
<th style="text-align:left">Name</th>
<th style="text-align:left">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">response</td>
<td style="text-align:left"><em>any</em><br>Any value you wish to return to calling components, will be resovled in the <code>onClosed</code> promise.</td>
</tr>
</tbody>
</table>
`,
                    host: { class: 'markdown-page' },
                    standalone: false,
                }]
        }] });
class ModalDesignPage {
    constructor() {
        this.params = {};
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: ModalDesignPage, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: ModalDesignPage, isStandalone: false, selector: "modal-design-page", host: { classAttribute: "markdown-page" }, ngImport: i0, template: `<h2>Usage</h2>
<novo-grid columns="2" align="start" gap="2rem">
<div>
<p>A modal is a pop-up dialog that appears on top of the main content, requiring the user to focus only on the content that the modal presents.</p>
<p>Modals are used to inform the user of something critical, force a decision, or extend a series of tasks. There are two categories of modals in the system: confirmation and workflow.</p>
</div>
<img src="https://via.placeholder.com/350x250"/>
<div>
<h3>Use When</h3>
<ul class="contains-do-list">
<li class="bullhorn-do-item">
<p><novo-icon color="grass" mr="md" size="md">check</novo-icon><novo-text color="grass"> Do use to confirm irreversible actions:</novo-text></p>
<p>Use a notification modal to ask the user to confirm when performing an irreversible action such as deleting a record, navigating away from something unsaved, or converting a file.</p>
</li>
<li class="bullhorn-do-item">
<p><novo-icon color="grass" mr="md" size="md">check</novo-icon><novo-text color="grass"> Do use to confirm actions that will affect other records:</novo-text></p>
<p>Use notification modals to make the user aware that their action will affect other records. The modal should ask them to confirm this action and explicitly say what the changes to other records will be. (find an example for this - deleting shifts could work, sending out bulk emails)</p>
</li>
<li class="bullhorn-do-item">
<p><novo-icon color="grass" mr="md" size="md">check</novo-icon><novo-text color="grass"> Do use for a task related to the main content:</novo-text></p>
<p>Workflow modals should always be related to the main content of the screen they are on top of. For example, when assigning candidates to shifts in the Scheduler.</p>
</li>
</ul>
</div>
<div>
<h3>Don′t Use When</h3>
<ul class="contains-do-list">
<li class="bullhorn-do-item">
<p><novo-icon color="grapefruit" mr="md" size="md">times</novo-icon><novo-text color="grapefruit"> Don’t use to confirm an action that has already happened:</novo-text></p>
<p>Don’t use a notification modal to confirm an action that has already been completed. Conveying information that does not require action is not critical enough to fully obscure the main content of the page. Use a <a href="/components/toast">toast</a> instead.</p>
</li>
<li class="bullhorn-do-item">
<p><novo-icon color="grapefruit" mr="md" size="md">times</novo-icon><novo-text color="grapefruit"> Don’t use for a task unrelated to the main content:</novo-text></p>
<p>Don’t obscure the main content of the screen for a task that is not directly related to the subject matter of that screen. Open a new page or use a <a href="/components/aside">slideout</a> instead.</p>
</li>
</ul>
</div>
</novo-grid>
<h2>Anatomy</h2>
<novo-grid columns="2" align="start" gap="2rem">
<img src="assets/images/ModalAnatomy.png" width="450">
<div>
<ol>
<li>
<p><strong>Container</strong><br>
Description and purpose of this element</p>
</li>
<li>
<p><strong>Header</strong><br>
Description and purpose of this element</p>
</li>
<li>
<p><strong>Icon (Optional)</strong><br>
Description and purpose of this element</p>
</li>
<li>
<p><strong>Title (Optional)</strong><br>
Description and purpose of this element</p>
</li>
<li>
<p><strong>Content</strong><br>
Description and purpose of this element</p>
</li>
<li>
<p><strong>Footer</strong><br>
Description and purpose of this element</p>
</li>
</ol>
</div>
</novo-grid>
<h2>Best Practices</h2>
<ul class="contains-do-list">
<li class="bullhorn-do-item">
<p><novo-icon color="grass" mr="md" size="md">check</novo-icon><novo-text color="grass"> Do Use Multiple Columns to make content digestible:</novo-text></p>
<p>If a Modal contains a lot of data, multiple columns help to make sure the user doesn’t miss any aspects of the task at hand. (Example - Make Offer modal from shifts, conflict management from shifts)</p>
</li>
<li class="bullhorn-do-item">
<p><novo-icon color="grapefruit" mr="md" size="md">times</novo-icon><novo-text color="grapefruit"> Don’t Use a lot of scrolling in a narrow space:</novo-text></p>
<p>Too much scrolling makes content hard to digest, and can cause the user to miss important information or steps in a task.</p>
<p>Consider using a full page or a slideout if the modal can’t display the full content without significant scrolling.</p>
</li>
</ul>
<h3>Footer Usage</h3>
<ul>
<li>The footer will usually be comprised of Primary button and a ‘Standard’ button</li>
<li>If there’s more than one action available from the modal, use a Secondary button for the less important of those actions.</li>
<li>If the primary action off of the modal is DESTRUCTIVE, use a red Primary button. RED ($grapefruit, $negative)</li>
</ul>
<h2>Color</h2>
<blockquote class="two-columns">
<blockquote>
<div class="p"><img src="https://via.placeholder.com/350x250" alt="placeholder"></div>
<ul class="contains-do-list">
<li class="bullhorn-do-item"><novo-icon color="grass" mr="md" size="md">check</novo-icon><novo-text color="grass"> Do use color to relate modals in a multi-step workflow:</novo-text></li>
</ul>
<div class="p">Carry over the Entity color from the main content of the screen if the task in the modal is directly related to that Entity. (Ex: adding a shift)</div>
</blockquote>
<blockquote>
<div class="p"><img src="https://via.placeholder.com/350x250" alt="placeholder"></div>
<ul class="contains-do-list">
<li class="bullhorn-do-item"><novo-icon color="grapefruit" mr="md" size="md">times</novo-icon><novo-text color="grapefruit"> Don’t use an Entity Color for something unrelated:</novo-text></li>
</ul>
<div class="p">Don’t use an Entity color in the header of a modal if the task is not directly related to that Entity. Instead, make reference to the entity elsewhere in the modal if necessary.</div>
</blockquote>
</blockquote>
<h2>Accessibility</h2>
<ul class="contains-do-list">
<li class="bullhorn-do-item">
<p><novo-icon color="grass" mr="md" size="md">check</novo-icon><novo-text color="grass"> Do use multiple avenues to convey meaning</novo-text></p>
<p>Using color, iconography, and text together to convey a warning makes it clearer for people to understand. (show delete modal that is right)</p>
</li>
<li class="bullhorn-do-item">
<p><novo-icon color="grapefruit" mr="md" size="md">times</novo-icon><novo-text color="grapefruit"> Don’t rely on just color to convey meaning</novo-text></p>
<p>Using color alone to indicate a destructive action may not be clear to everyone. (show a modal with red yes button but no ‘delete’ in the text or trashcan)</p>
</li>
</ul>
<h3>Keyboard Behaviors</h3>
<p>When a dialog opens, focus moves to an element inside the dialog. See notes below regarding initial focus placement.</p>
<ul>
<li>Tab:
<ul>
<li>Moves focus to the next tabbable element inside the dialog.</li>
<li>If focus is on the last tabbable element inside the dialog, moves focus to the first tabbable element inside the dialog.</li>
</ul>
</li>
<li>Shift + Tab:
<ul>
<li>Moves focus to the previous tabbable element inside the dialog.</li>
<li>If focus is on the first tabbable element inside the dialog, moves focus to the last tabbable element inside the dialog.</li>
</ul>
</li>
<li>Escape: Closes the dialog.</li>
</ul>
<h3>Roles, States, and Properties</h3>
<p>The element that contains all elements of the dialog, including the alert message and any dialog buttons, has role <code>alertdialog</code>.</p>
<ul>
<li>The element with role alertdialog has either:
<ul>
<li>A value for aria-labelledby that refers to the element containing the title of the dialog if the dialog has a visible label.</li>
<li>A value for aria-label if the dialog does not have a visible label.</li>
</ul>
</li>
<li>The element with role alertdialog has a value set for aria-describedby that refers to the element containing the alert message.</li>
</ul>
<h2>Behaviors</h2>
<p><strong>Workflow modals</strong> should be triggered either from a button or link on the main content of the screen to initiate a workflow (add shift, add certification)</p>
<p><strong>Confirmation Modals</strong> should be triggered immediately as the action they are confirming is triggered. (example: after ‘delete record’ is clicked from action dropdown)</p>
<h3>Expansion</h3>
<p>If the content in the modal gets bigger, the modal should expand before adding scrolling.</p>
<h2>Patterns</h2>
<novo-grid columns="2" align="start" gap="2rem">
<blockquote>
<div class="p"><strong>Pattern</strong></div>
<div class="p">Why is it configured like this</div>
</blockquote>
<p><img src="https://via.placeholder.com/350x250" alt="placeholder"></p>
<blockquote>
<div class="p"><strong>Pattern</strong></div>
<div class="p">Why is it configured like this</div>
</blockquote>
<p><img src="https://via.placeholder.com/350x250" alt="placeholder"></p>
</novo-grid>
`, isInline: true, dependencies: [{ kind: "component", type: i2$1.NovoGridElement, selector: "novo-grid", inputs: ["direction", "align", "justify", "columns"] }, { kind: "component", type: i2$1.NovoIconComponent, selector: "novo-icon", inputs: ["raised", "theme", "shape", "color", "size", "smaller", "larger", "alt", "name"] }, { kind: "component", type: i2$1.NovoText, selector: "novo-text,[novo-text]", inputs: ["block"] }, { kind: "directive", type: i2$1.MarginDirective, selector: "[m],[margin],[marginTop],[marginRight],[marginBottom],[marginLeft],[marginX],[marginY],[mt],[mr],[mb],[ml],[mx],[my]", inputs: ["margin", "m", "marginLeft", "ml", "marginRight", "mr", "marginTop", "mt", "marginBottom", "mb", "marginX", "mx", "marginY", "my"] }, { kind: "directive", type: i2$1.GapDirective, selector: "[gap]", inputs: ["gap"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: ModalDesignPage, decorators: [{
            type: Component,
            args: [{
                    selector: 'modal-design-page',
                    template: `<h2>Usage</h2>
<novo-grid columns="2" align="start" gap="2rem">
<div>
<p>A modal is a pop-up dialog that appears on top of the main content, requiring the user to focus only on the content that the modal presents.</p>
<p>Modals are used to inform the user of something critical, force a decision, or extend a series of tasks. There are two categories of modals in the system: confirmation and workflow.</p>
</div>
<img src="https://via.placeholder.com/350x250"/>
<div>
<h3>Use When</h3>
<ul class="contains-do-list">
<li class="bullhorn-do-item">
<p><novo-icon color="grass" mr="md" size="md">check</novo-icon><novo-text color="grass"> Do use to confirm irreversible actions:</novo-text></p>
<p>Use a notification modal to ask the user to confirm when performing an irreversible action such as deleting a record, navigating away from something unsaved, or converting a file.</p>
</li>
<li class="bullhorn-do-item">
<p><novo-icon color="grass" mr="md" size="md">check</novo-icon><novo-text color="grass"> Do use to confirm actions that will affect other records:</novo-text></p>
<p>Use notification modals to make the user aware that their action will affect other records. The modal should ask them to confirm this action and explicitly say what the changes to other records will be. (find an example for this - deleting shifts could work, sending out bulk emails)</p>
</li>
<li class="bullhorn-do-item">
<p><novo-icon color="grass" mr="md" size="md">check</novo-icon><novo-text color="grass"> Do use for a task related to the main content:</novo-text></p>
<p>Workflow modals should always be related to the main content of the screen they are on top of. For example, when assigning candidates to shifts in the Scheduler.</p>
</li>
</ul>
</div>
<div>
<h3>Don′t Use When</h3>
<ul class="contains-do-list">
<li class="bullhorn-do-item">
<p><novo-icon color="grapefruit" mr="md" size="md">times</novo-icon><novo-text color="grapefruit"> Don’t use to confirm an action that has already happened:</novo-text></p>
<p>Don’t use a notification modal to confirm an action that has already been completed. Conveying information that does not require action is not critical enough to fully obscure the main content of the page. Use a <a href="/components/toast">toast</a> instead.</p>
</li>
<li class="bullhorn-do-item">
<p><novo-icon color="grapefruit" mr="md" size="md">times</novo-icon><novo-text color="grapefruit"> Don’t use for a task unrelated to the main content:</novo-text></p>
<p>Don’t obscure the main content of the screen for a task that is not directly related to the subject matter of that screen. Open a new page or use a <a href="/components/aside">slideout</a> instead.</p>
</li>
</ul>
</div>
</novo-grid>
<h2>Anatomy</h2>
<novo-grid columns="2" align="start" gap="2rem">
<img src="assets/images/ModalAnatomy.png" width="450">
<div>
<ol>
<li>
<p><strong>Container</strong><br>
Description and purpose of this element</p>
</li>
<li>
<p><strong>Header</strong><br>
Description and purpose of this element</p>
</li>
<li>
<p><strong>Icon (Optional)</strong><br>
Description and purpose of this element</p>
</li>
<li>
<p><strong>Title (Optional)</strong><br>
Description and purpose of this element</p>
</li>
<li>
<p><strong>Content</strong><br>
Description and purpose of this element</p>
</li>
<li>
<p><strong>Footer</strong><br>
Description and purpose of this element</p>
</li>
</ol>
</div>
</novo-grid>
<h2>Best Practices</h2>
<ul class="contains-do-list">
<li class="bullhorn-do-item">
<p><novo-icon color="grass" mr="md" size="md">check</novo-icon><novo-text color="grass"> Do Use Multiple Columns to make content digestible:</novo-text></p>
<p>If a Modal contains a lot of data, multiple columns help to make sure the user doesn’t miss any aspects of the task at hand. (Example - Make Offer modal from shifts, conflict management from shifts)</p>
</li>
<li class="bullhorn-do-item">
<p><novo-icon color="grapefruit" mr="md" size="md">times</novo-icon><novo-text color="grapefruit"> Don’t Use a lot of scrolling in a narrow space:</novo-text></p>
<p>Too much scrolling makes content hard to digest, and can cause the user to miss important information or steps in a task.</p>
<p>Consider using a full page or a slideout if the modal can’t display the full content without significant scrolling.</p>
</li>
</ul>
<h3>Footer Usage</h3>
<ul>
<li>The footer will usually be comprised of Primary button and a ‘Standard’ button</li>
<li>If there’s more than one action available from the modal, use a Secondary button for the less important of those actions.</li>
<li>If the primary action off of the modal is DESTRUCTIVE, use a red Primary button. RED ($grapefruit, $negative)</li>
</ul>
<h2>Color</h2>
<blockquote class="two-columns">
<blockquote>
<div class="p"><img src="https://via.placeholder.com/350x250" alt="placeholder"></div>
<ul class="contains-do-list">
<li class="bullhorn-do-item"><novo-icon color="grass" mr="md" size="md">check</novo-icon><novo-text color="grass"> Do use color to relate modals in a multi-step workflow:</novo-text></li>
</ul>
<div class="p">Carry over the Entity color from the main content of the screen if the task in the modal is directly related to that Entity. (Ex: adding a shift)</div>
</blockquote>
<blockquote>
<div class="p"><img src="https://via.placeholder.com/350x250" alt="placeholder"></div>
<ul class="contains-do-list">
<li class="bullhorn-do-item"><novo-icon color="grapefruit" mr="md" size="md">times</novo-icon><novo-text color="grapefruit"> Don’t use an Entity Color for something unrelated:</novo-text></li>
</ul>
<div class="p">Don’t use an Entity color in the header of a modal if the task is not directly related to that Entity. Instead, make reference to the entity elsewhere in the modal if necessary.</div>
</blockquote>
</blockquote>
<h2>Accessibility</h2>
<ul class="contains-do-list">
<li class="bullhorn-do-item">
<p><novo-icon color="grass" mr="md" size="md">check</novo-icon><novo-text color="grass"> Do use multiple avenues to convey meaning</novo-text></p>
<p>Using color, iconography, and text together to convey a warning makes it clearer for people to understand. (show delete modal that is right)</p>
</li>
<li class="bullhorn-do-item">
<p><novo-icon color="grapefruit" mr="md" size="md">times</novo-icon><novo-text color="grapefruit"> Don’t rely on just color to convey meaning</novo-text></p>
<p>Using color alone to indicate a destructive action may not be clear to everyone. (show a modal with red yes button but no ‘delete’ in the text or trashcan)</p>
</li>
</ul>
<h3>Keyboard Behaviors</h3>
<p>When a dialog opens, focus moves to an element inside the dialog. See notes below regarding initial focus placement.</p>
<ul>
<li>Tab:
<ul>
<li>Moves focus to the next tabbable element inside the dialog.</li>
<li>If focus is on the last tabbable element inside the dialog, moves focus to the first tabbable element inside the dialog.</li>
</ul>
</li>
<li>Shift + Tab:
<ul>
<li>Moves focus to the previous tabbable element inside the dialog.</li>
<li>If focus is on the first tabbable element inside the dialog, moves focus to the last tabbable element inside the dialog.</li>
</ul>
</li>
<li>Escape: Closes the dialog.</li>
</ul>
<h3>Roles, States, and Properties</h3>
<p>The element that contains all elements of the dialog, including the alert message and any dialog buttons, has role <code>alertdialog</code>.</p>
<ul>
<li>The element with role alertdialog has either:
<ul>
<li>A value for aria-labelledby that refers to the element containing the title of the dialog if the dialog has a visible label.</li>
<li>A value for aria-label if the dialog does not have a visible label.</li>
</ul>
</li>
<li>The element with role alertdialog has a value set for aria-describedby that refers to the element containing the alert message.</li>
</ul>
<h2>Behaviors</h2>
<p><strong>Workflow modals</strong> should be triggered either from a button or link on the main content of the screen to initiate a workflow (add shift, add certification)</p>
<p><strong>Confirmation Modals</strong> should be triggered immediately as the action they are confirming is triggered. (example: after ‘delete record’ is clicked from action dropdown)</p>
<h3>Expansion</h3>
<p>If the content in the modal gets bigger, the modal should expand before adding scrolling.</p>
<h2>Patterns</h2>
<novo-grid columns="2" align="start" gap="2rem">
<blockquote>
<div class="p"><strong>Pattern</strong></div>
<div class="p">Why is it configured like this</div>
</blockquote>
<p><img src="https://via.placeholder.com/350x250" alt="placeholder"></p>
<blockquote>
<div class="p"><strong>Pattern</strong></div>
<div class="p">Why is it configured like this</div>
</blockquote>
<p><img src="https://via.placeholder.com/350x250" alt="placeholder"></p>
</novo-grid>
`,
                    host: { class: 'markdown-page' },
                    standalone: false,
                }]
        }] });
class MenuExamplesPage {
    constructor() {
        this.params = {};
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: MenuExamplesPage, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: MenuExamplesPage, isStandalone: false, selector: "menu-examples-page", host: { classAttribute: "markdown-page" }, ngImport: i0, template: `<h2>Basic Menu</h2>
<p>This is a simple menu.</p>
<p><code-example example="basic-menu"></code-example></p>
<h2>Nested Menu</h2>
<p>This is an example of how you can have sub-menus for each menu item.</p>
<p><code-example example="nested-menu"></code-example></p>
<h2>Menu Context</h2>
<p>TBW of an example when you can define a context to pass to the context menu to control visibility or to use on the callback action.</p>
<p><code-example example="menu-context"></code-example></p>
`, isInline: true, dependencies: [{ kind: "component", type: CodeExampleComponent, selector: "code-example", inputs: ["example"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: MenuExamplesPage, decorators: [{
            type: Component,
            args: [{
                    selector: 'menu-examples-page',
                    template: `<h2>Basic Menu</h2>
<p>This is a simple menu.</p>
<p><code-example example="basic-menu"></code-example></p>
<h2>Nested Menu</h2>
<p>This is an example of how you can have sub-menus for each menu item.</p>
<p><code-example example="nested-menu"></code-example></p>
<h2>Menu Context</h2>
<p>TBW of an example when you can define a context to pass to the context menu to control visibility or to use on the callback action.</p>
<p><code-example example="menu-context"></code-example></p>
`,
                    host: { class: 'markdown-page' },
                    standalone: false,
                }]
        }] });
class MenuDevelopPage {
    constructor() {
        this.params = {};
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: MenuDevelopPage, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: MenuDevelopPage, isStandalone: false, selector: "menu-develop-page", host: { classAttribute: "markdown-page" }, ngImport: i0, template: `<h1>Technical Details</h1>
<ul>
<li><strong>source:</strong> <a href="https://github.com/bullhorn/novo-elements/blob/master/projects/novo-elements/src/elements/loading">(github)</a></li>
<li><strong>module:</strong> <code>import &#123; NovoMenuModule &#125; from 'novo-elements';</code></li>
</ul>
<p><strong>Usage</strong></p>
<pre><code class="language-html"><span class="hljs-comment">&lt;!-- Define a menu with a set of menuItems --&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">novo-menu</span> #<span class="hljs-attr">menu</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">novo-option</span> *<span class="hljs-attr">menuItem</span> (<span class="hljs-attr">click</span>)=<span class="hljs-string">&quot;handleViewDetails($event)&quot;</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">novo-icon</span>&gt;</span>preview<span class="hljs-tag">&lt;/<span class="hljs-name">novo-icon</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>View Details<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">novo-option</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">novo-divider</span> *<span class="hljs-attr">menuItem</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">novo-divider</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">novo-option</span> (<span class="hljs-attr">click</span>)=<span class="hljs-string">&quot;handleDelete($event)&quot;</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">novo-icon</span>&gt;</span>delete-o<span class="hljs-tag">&lt;/<span class="hljs-name">novo-icon</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>Delete Record<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">novo-option</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">novo-menu</span>&gt;</span>
<span class="hljs-comment">&lt;!-- Add menu attribute to link the menu to an element --&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">novo-button</span> [<span class="hljs-attr">menu</span>]=<span class="hljs-string">&quot;menu&quot;</span>&gt;</span>Actions<span class="hljs-tag">&lt;/<span class="hljs-name">novo-button</span>&gt;</span>
</code></pre>
<h1>Roadmap</h1>
<ul class="contains-task-list">
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> Dark Mode</li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> Consolidate with <code>novo-dropdown</code></li>
</ul>
<h1>Components</h1>
<h2>NovoLoadingElement <code>novo-menu</code></h2>
<p>The <code>novo-menu</code> component is a hidden wrapper that holds the templates for a menu. When a menu is triggered by the element with the matching <code>[menu]</code> attribute, a new instance of the menuItems will be created and the context will be passed to</p>
<h3>Properties</h3>
<p><props-table component="MenuComponent"></props-table></p>
<h2>MenuDirective <code>[menu]</code></h2>
<p>This will define an element as a trigger for the menu. Use the <code>#</code> notation to make a reference to the <code>novo-menu</code> container, then pass the reference as the value of the attribute to link them together. A menu can be shared between multiple triggers, use the <code>menuContext</code> attribute to perform actions based on that context. The context can be reference in the structural directive <code>menuItem</code> as the implicit value, ie <code>*menuItem=&quot;let item&quot;</code>, <code>item</code> will be equal to <code>menuContext</code>.</p>
<pre><code class="language-html"><span class="hljs-tag">&lt;<span class="hljs-name">novo-menu</span> #<span class="hljs-attr">menu</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">novo-option</span> *<span class="hljs-attr">menuItem</span>=<span class="hljs-string">&quot;let item&quot;</span> (<span class="hljs-attr">click</span>)=<span class="hljs-string">&quot;alert(item)&quot;</span>&gt;</span>Speak<span class="hljs-tag">&lt;/<span class="hljs-name">novo-option</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">novo-menu</span>&gt;</span>
<span class="hljs-comment">&lt;!-- The speak action will display moooo! --&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">novo-button</span> [<span class="hljs-attr">menu</span>]=<span class="hljs-string">&quot;menu&quot;</span> <span class="hljs-attr">menuContext</span>=<span class="hljs-string">&quot;mooooo!&quot;</span>&gt;</span>Cow<span class="hljs-tag">&lt;/<span class="hljs-name">novo-button</span>&gt;</span>
<span class="hljs-comment">&lt;!-- The speak action will display bark! --&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">novo-button</span> [<span class="hljs-attr">menu</span>]=<span class="hljs-string">&quot;menu&quot;</span> <span class="hljs-attr">menuContext</span>=<span class="hljs-string">&quot;bark!&quot;</span>&gt;</span>Dog<span class="hljs-tag">&lt;/<span class="hljs-name">novo-button</span>&gt;</span>
</code></pre>
<h3>Properties</h3>
<p><props-table component="MenuDirective"></props-table></p>
<h2>MenuItemDirective <code>*menuItem</code></h2>
<p>A structural directive to be used with <code>novo-option</code> to create menu items. The <code>menuContext</code> set on the trigger will be passed to the implicit value, ie <code>*menuItem=&quot;let item&quot;</code>, <code>item</code> will be equal to <code>menuContext</code>.</p>
<h3>Properties</h3>
<p><props-table component="MenuItemDirective"></props-table></p>
`, isInline: true, dependencies: [{ kind: "component", type: PropsTableComponent, selector: "props-table", inputs: ["component", "kinds"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: MenuDevelopPage, decorators: [{
            type: Component,
            args: [{
                    selector: 'menu-develop-page',
                    template: `<h1>Technical Details</h1>
<ul>
<li><strong>source:</strong> <a href="https://github.com/bullhorn/novo-elements/blob/master/projects/novo-elements/src/elements/loading">(github)</a></li>
<li><strong>module:</strong> <code>import &#123; NovoMenuModule &#125; from 'novo-elements';</code></li>
</ul>
<p><strong>Usage</strong></p>
<pre><code class="language-html"><span class="hljs-comment">&lt;!-- Define a menu with a set of menuItems --&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">novo-menu</span> #<span class="hljs-attr">menu</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">novo-option</span> *<span class="hljs-attr">menuItem</span> (<span class="hljs-attr">click</span>)=<span class="hljs-string">&quot;handleViewDetails($event)&quot;</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">novo-icon</span>&gt;</span>preview<span class="hljs-tag">&lt;/<span class="hljs-name">novo-icon</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>View Details<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">novo-option</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">novo-divider</span> *<span class="hljs-attr">menuItem</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">novo-divider</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">novo-option</span> (<span class="hljs-attr">click</span>)=<span class="hljs-string">&quot;handleDelete($event)&quot;</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">novo-icon</span>&gt;</span>delete-o<span class="hljs-tag">&lt;/<span class="hljs-name">novo-icon</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>Delete Record<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">novo-option</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">novo-menu</span>&gt;</span>
<span class="hljs-comment">&lt;!-- Add menu attribute to link the menu to an element --&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">novo-button</span> [<span class="hljs-attr">menu</span>]=<span class="hljs-string">&quot;menu&quot;</span>&gt;</span>Actions<span class="hljs-tag">&lt;/<span class="hljs-name">novo-button</span>&gt;</span>
</code></pre>
<h1>Roadmap</h1>
<ul class="contains-task-list">
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> Dark Mode</li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> Consolidate with <code>novo-dropdown</code></li>
</ul>
<h1>Components</h1>
<h2>NovoLoadingElement <code>novo-menu</code></h2>
<p>The <code>novo-menu</code> component is a hidden wrapper that holds the templates for a menu. When a menu is triggered by the element with the matching <code>[menu]</code> attribute, a new instance of the menuItems will be created and the context will be passed to</p>
<h3>Properties</h3>
<p><props-table component="MenuComponent"></props-table></p>
<h2>MenuDirective <code>[menu]</code></h2>
<p>This will define an element as a trigger for the menu. Use the <code>#</code> notation to make a reference to the <code>novo-menu</code> container, then pass the reference as the value of the attribute to link them together. A menu can be shared between multiple triggers, use the <code>menuContext</code> attribute to perform actions based on that context. The context can be reference in the structural directive <code>menuItem</code> as the implicit value, ie <code>*menuItem=&quot;let item&quot;</code>, <code>item</code> will be equal to <code>menuContext</code>.</p>
<pre><code class="language-html"><span class="hljs-tag">&lt;<span class="hljs-name">novo-menu</span> #<span class="hljs-attr">menu</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">novo-option</span> *<span class="hljs-attr">menuItem</span>=<span class="hljs-string">&quot;let item&quot;</span> (<span class="hljs-attr">click</span>)=<span class="hljs-string">&quot;alert(item)&quot;</span>&gt;</span>Speak<span class="hljs-tag">&lt;/<span class="hljs-name">novo-option</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">novo-menu</span>&gt;</span>
<span class="hljs-comment">&lt;!-- The speak action will display moooo! --&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">novo-button</span> [<span class="hljs-attr">menu</span>]=<span class="hljs-string">&quot;menu&quot;</span> <span class="hljs-attr">menuContext</span>=<span class="hljs-string">&quot;mooooo!&quot;</span>&gt;</span>Cow<span class="hljs-tag">&lt;/<span class="hljs-name">novo-button</span>&gt;</span>
<span class="hljs-comment">&lt;!-- The speak action will display bark! --&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">novo-button</span> [<span class="hljs-attr">menu</span>]=<span class="hljs-string">&quot;menu&quot;</span> <span class="hljs-attr">menuContext</span>=<span class="hljs-string">&quot;bark!&quot;</span>&gt;</span>Dog<span class="hljs-tag">&lt;/<span class="hljs-name">novo-button</span>&gt;</span>
</code></pre>
<h3>Properties</h3>
<p><props-table component="MenuDirective"></props-table></p>
<h2>MenuItemDirective <code>*menuItem</code></h2>
<p>A structural directive to be used with <code>novo-option</code> to create menu items. The <code>menuContext</code> set on the trigger will be passed to the implicit value, ie <code>*menuItem=&quot;let item&quot;</code>, <code>item</code> will be equal to <code>menuContext</code>.</p>
<h3>Properties</h3>
<p><props-table component="MenuItemDirective"></props-table></p>
`,
                    host: { class: 'markdown-page' },
                    standalone: false,
                }]
        }] });
class MenuDesignPage {
    constructor() {
        this.params = {};
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: MenuDesignPage, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: MenuDesignPage, isStandalone: false, selector: "menu-design-page", host: { classAttribute: "markdown-page" }, ngImport: i0, template: `<h2>Usage</h2>
<novo-grid columns="2" align="start" gap="2rem">
<div>
<p>Menu allow users to take an action by selecting from a list of choices revealed upon opening a temporary menu.</p>
<p>Menus are contextual and all for actions to be performed based upon the context of the trigger or selection. Menus are great for consolidating many actions available to the user and can be used in a variety of different ways. Menus can be triggered from any element but usually limited to links, button, and icons.</p>
</div>
<img src="assets/images/MenuOverview.png"/>
<div>
<h3>Use When</h3>
<ul class="contains-do-list">
<li class="bullhorn-do-item"><novo-icon color="grass" mr="md" size="md">check</novo-icon><novo-text color="grass"> Displaying multiple actions to perform on an item or selection</novo-text></li>
<li class="bullhorn-do-item"><novo-icon color="grass" mr="md" size="md">check</novo-icon><novo-text color="grass"> Processing an long running action.</novo-text></li>
</ul>
</div>
<div>
<h3>Don′t Use When</h3>
<ul class="contains-do-list">
<li class="bullhorn-do-item"><novo-icon color="grapefruit" mr="md" size="md">times</novo-icon><novo-text color="grapefruit"> To select a value, use a select</novo-text></li>
<li class="bullhorn-do-item"><novo-icon color="grapefruit" mr="md" size="md">times</novo-icon><novo-text color="grapefruit"> Top Level Page Actions, use a Dropdown.</novo-text></li>
</ul>
</div>
</novo-grid>
<h2>Anatomy</h2>
<novo-grid columns="2" align="start" gap="2rem">
<img src="assets/images/MenuAnatomy.png" width="450">
<div>
<ol>
<li>
<p><strong>Container</strong><br>
Defines the layout for the form field (horizontal vs vertical)</p>
</li>
<li>
<p><strong>Option</strong><br>
An element/icon displayed before the input. eg. $</p>
</li>
<li>
<p><strong>Divider</strong><br>
A label for a group of menu actions.</p>
</li>
<li>
<p><strong>SubMenu Indicator</strong><br>
The element representing the input control: <code>input</code>, <code>select</code>, etc...</p>
</li>
</ol>
</div>
</novo-grid>
<h2>Best Practices</h2>
<ul>
<li>Organize actions in groups divided by rules. This helps users remember command locations, or find less used commands based on proximity to others. One should also group sets of mutually exclusive or multiple selectable options.</li>
<li>Use icons sparingly, for high value commands, and don’t mix icons with selection checks, as it makes parsing commands difficult.</li>
<li>Avoid submenus of submenus as they can be difficult to invoke or remember.</li>
</ul>
<h2>Behaviors</h2>
<novo-grid columns="2" align="start" gap="2rem">
<blockquote>
<div class="p"><img src="assets/images/MenuScrollable.png" alt="placeholder"></div>
<div class="p"><strong>Scrolling</strong></div>
<div class="p">If not all of the options can be presented within the view, then the menu
should be scrollable.  To prevent confusion with the user that the only
options available are those viewable, a persistent scrollbar should be
shown.</div>
</blockquote>
<blockquote>
<div class="p"><img src="assets/images/MenuPosition.png" alt="placeholder"></div>
<div class="p"><strong>Position</strong></div>
<div class="p">The menu should be placed differently based on the context that triggers
it.  For DropDown Menu the Menu should be placed below the button, aligned
right or left based on the alignment of the button within its layout.
ie. if the button is positioned at the end of a header (flex-end) then the
right side of the menu should align with the right side of the button.</div>
<div class="p">If there is not enough room below an button it is acceptable for the menu
to drop up instead.</div>
</blockquote>
<blockquote>
<div class="p"><img src="assets/images/MenuContext.png" alt="placeholder"></div>
<div class="p"><strong>Context Menu</strong></div>
<div class="p">A button is not required to trigger a menu. Any element can be set to trigger a menu
on click or right-click.  Context Menus can provide addition data to be used when
displaying the menu. eg. Menu items can be hidden/shown based on the values within
that context and context can be passed to the click actions.</div>
</blockquote>
<blockquote>
<div class="p"><img src="assets/images/MenuOverview.png" alt="placeholder"></div>
<div class="p"><strong>Cascading Menu</strong></div>
<div class="p"><em>Beta</em>  When the large variety of options are available to the user, categorize these
options to create multiple levels of hierarchy.</div>
<div class="p">SubMenus are just menus triggered of a menu-item of parent. SubMenus shoudld appear to
the right or left of parent list items, depending on available space.</div>
</blockquote>
</novo-grid>
<h2>Accessibility</h2>
<p><strong>Implementation</strong></p>
<p>Always include an <code>alt</code> attribute describing the information that is visually displayed in the image.</p>
`, isInline: true, dependencies: [{ kind: "component", type: i2$1.NovoGridElement, selector: "novo-grid", inputs: ["direction", "align", "justify", "columns"] }, { kind: "component", type: i2$1.NovoIconComponent, selector: "novo-icon", inputs: ["raised", "theme", "shape", "color", "size", "smaller", "larger", "alt", "name"] }, { kind: "component", type: i2$1.NovoText, selector: "novo-text,[novo-text]", inputs: ["block"] }, { kind: "directive", type: i2$1.MarginDirective, selector: "[m],[margin],[marginTop],[marginRight],[marginBottom],[marginLeft],[marginX],[marginY],[mt],[mr],[mb],[ml],[mx],[my]", inputs: ["margin", "m", "marginLeft", "ml", "marginRight", "mr", "marginTop", "mt", "marginBottom", "mb", "marginX", "mx", "marginY", "my"] }, { kind: "directive", type: i2$1.GapDirective, selector: "[gap]", inputs: ["gap"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: MenuDesignPage, decorators: [{
            type: Component,
            args: [{
                    selector: 'menu-design-page',
                    template: `<h2>Usage</h2>
<novo-grid columns="2" align="start" gap="2rem">
<div>
<p>Menu allow users to take an action by selecting from a list of choices revealed upon opening a temporary menu.</p>
<p>Menus are contextual and all for actions to be performed based upon the context of the trigger or selection. Menus are great for consolidating many actions available to the user and can be used in a variety of different ways. Menus can be triggered from any element but usually limited to links, button, and icons.</p>
</div>
<img src="assets/images/MenuOverview.png"/>
<div>
<h3>Use When</h3>
<ul class="contains-do-list">
<li class="bullhorn-do-item"><novo-icon color="grass" mr="md" size="md">check</novo-icon><novo-text color="grass"> Displaying multiple actions to perform on an item or selection</novo-text></li>
<li class="bullhorn-do-item"><novo-icon color="grass" mr="md" size="md">check</novo-icon><novo-text color="grass"> Processing an long running action.</novo-text></li>
</ul>
</div>
<div>
<h3>Don′t Use When</h3>
<ul class="contains-do-list">
<li class="bullhorn-do-item"><novo-icon color="grapefruit" mr="md" size="md">times</novo-icon><novo-text color="grapefruit"> To select a value, use a select</novo-text></li>
<li class="bullhorn-do-item"><novo-icon color="grapefruit" mr="md" size="md">times</novo-icon><novo-text color="grapefruit"> Top Level Page Actions, use a Dropdown.</novo-text></li>
</ul>
</div>
</novo-grid>
<h2>Anatomy</h2>
<novo-grid columns="2" align="start" gap="2rem">
<img src="assets/images/MenuAnatomy.png" width="450">
<div>
<ol>
<li>
<p><strong>Container</strong><br>
Defines the layout for the form field (horizontal vs vertical)</p>
</li>
<li>
<p><strong>Option</strong><br>
An element/icon displayed before the input. eg. $</p>
</li>
<li>
<p><strong>Divider</strong><br>
A label for a group of menu actions.</p>
</li>
<li>
<p><strong>SubMenu Indicator</strong><br>
The element representing the input control: <code>input</code>, <code>select</code>, etc...</p>
</li>
</ol>
</div>
</novo-grid>
<h2>Best Practices</h2>
<ul>
<li>Organize actions in groups divided by rules. This helps users remember command locations, or find less used commands based on proximity to others. One should also group sets of mutually exclusive or multiple selectable options.</li>
<li>Use icons sparingly, for high value commands, and don’t mix icons with selection checks, as it makes parsing commands difficult.</li>
<li>Avoid submenus of submenus as they can be difficult to invoke or remember.</li>
</ul>
<h2>Behaviors</h2>
<novo-grid columns="2" align="start" gap="2rem">
<blockquote>
<div class="p"><img src="assets/images/MenuScrollable.png" alt="placeholder"></div>
<div class="p"><strong>Scrolling</strong></div>
<div class="p">If not all of the options can be presented within the view, then the menu
should be scrollable.  To prevent confusion with the user that the only
options available are those viewable, a persistent scrollbar should be
shown.</div>
</blockquote>
<blockquote>
<div class="p"><img src="assets/images/MenuPosition.png" alt="placeholder"></div>
<div class="p"><strong>Position</strong></div>
<div class="p">The menu should be placed differently based on the context that triggers
it.  For DropDown Menu the Menu should be placed below the button, aligned
right or left based on the alignment of the button within its layout.
ie. if the button is positioned at the end of a header (flex-end) then the
right side of the menu should align with the right side of the button.</div>
<div class="p">If there is not enough room below an button it is acceptable for the menu
to drop up instead.</div>
</blockquote>
<blockquote>
<div class="p"><img src="assets/images/MenuContext.png" alt="placeholder"></div>
<div class="p"><strong>Context Menu</strong></div>
<div class="p">A button is not required to trigger a menu. Any element can be set to trigger a menu
on click or right-click.  Context Menus can provide addition data to be used when
displaying the menu. eg. Menu items can be hidden/shown based on the values within
that context and context can be passed to the click actions.</div>
</blockquote>
<blockquote>
<div class="p"><img src="assets/images/MenuOverview.png" alt="placeholder"></div>
<div class="p"><strong>Cascading Menu</strong></div>
<div class="p"><em>Beta</em>  When the large variety of options are available to the user, categorize these
options to create multiple levels of hierarchy.</div>
<div class="p">SubMenus are just menus triggered of a menu-item of parent. SubMenus shoudld appear to
the right or left of parent list items, depending on available space.</div>
</blockquote>
</novo-grid>
<h2>Accessibility</h2>
<p><strong>Implementation</strong></p>
<p>Always include an <code>alt</code> attribute describing the information that is visually displayed in the image.</p>
`,
                    host: { class: 'markdown-page' },
                    standalone: false,
                }]
        }] });
class LoadingExamplesPage {
    constructor() {
        this.params = {};
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: LoadingExamplesPage, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: LoadingExamplesPage, isStandalone: false, selector: "loading-examples-page", host: { classAttribute: "markdown-page" }, ngImport: i0, template: `<h2>Line</h2>
<p>The Dot Line animation is indeterminate.</p>
<p><code-example example="loading-line"></code-example></p>
<h2>Spinner</h2>
<p>The Dot Spinner animation is used as an alternate to the loading line animation.</p>
<p><code-example example="loading-circle"></code-example></p>
`, isInline: true, dependencies: [{ kind: "component", type: CodeExampleComponent, selector: "code-example", inputs: ["example"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: LoadingExamplesPage, decorators: [{
            type: Component,
            args: [{
                    selector: 'loading-examples-page',
                    template: `<h2>Line</h2>
<p>The Dot Line animation is indeterminate.</p>
<p><code-example example="loading-line"></code-example></p>
<h2>Spinner</h2>
<p>The Dot Spinner animation is used as an alternate to the loading line animation.</p>
<p><code-example example="loading-circle"></code-example></p>
`,
                    host: { class: 'markdown-page' },
                    standalone: false,
                }]
        }] });
class LoadingDevelopPage {
    constructor() {
        this.params = {};
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: LoadingDevelopPage, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: LoadingDevelopPage, isStandalone: false, selector: "loading-develop-page", host: { classAttribute: "markdown-page" }, ngImport: i0, template: `<h1>Technical Details</h1>
<ul>
<li><strong>source:</strong> <a href="https://github.com/bullhorn/novo-elements/blob/master/projects/novo-elements/src/elements/loading">(github)</a></li>
<li><strong>module:</strong> <code>import &#123; NovoLoadingModule &#125; from 'novo-elements';</code></li>
</ul>
<p><strong>Usage</strong></p>
<pre><code class="language-html"><span class="hljs-tag">&lt;<span class="hljs-name">novo-loading</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">novo-loading</span>&gt;</span>
</code></pre>
<h1>Roadmap</h1>
<ul class="contains-task-list">
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> Make color and theming consistent</li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> Dark Mode</li>
</ul>
<h1>Components</h1>
<h2>NovoLoadingElement <code>novo-loading</code></h2>
<p>The <code>novo-loading</code> component displays the loading dots in a linear line. This commonly used for loading the page, content within a modal, or when refreshing data within a table.</p>
<h3>Properties</h3>
<p><props-table component="NovoLoadingElement"></props-table></p>
<h2>NovoSpinnerElement <code>novo-spinner</code></h2>
<p>The <code>novo-spinner</code> component displays the circular loading visual, usually used within the button to indicate the action is performing but not complete yet.</p>
<h3>Properties</h3>
<p><props-table component="NovoSpinnerElement"></props-table></p>
`, isInline: true, dependencies: [{ kind: "component", type: PropsTableComponent, selector: "props-table", inputs: ["component", "kinds"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: LoadingDevelopPage, decorators: [{
            type: Component,
            args: [{
                    selector: 'loading-develop-page',
                    template: `<h1>Technical Details</h1>
<ul>
<li><strong>source:</strong> <a href="https://github.com/bullhorn/novo-elements/blob/master/projects/novo-elements/src/elements/loading">(github)</a></li>
<li><strong>module:</strong> <code>import &#123; NovoLoadingModule &#125; from 'novo-elements';</code></li>
</ul>
<p><strong>Usage</strong></p>
<pre><code class="language-html"><span class="hljs-tag">&lt;<span class="hljs-name">novo-loading</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">novo-loading</span>&gt;</span>
</code></pre>
<h1>Roadmap</h1>
<ul class="contains-task-list">
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> Make color and theming consistent</li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> Dark Mode</li>
</ul>
<h1>Components</h1>
<h2>NovoLoadingElement <code>novo-loading</code></h2>
<p>The <code>novo-loading</code> component displays the loading dots in a linear line. This commonly used for loading the page, content within a modal, or when refreshing data within a table.</p>
<h3>Properties</h3>
<p><props-table component="NovoLoadingElement"></props-table></p>
<h2>NovoSpinnerElement <code>novo-spinner</code></h2>
<p>The <code>novo-spinner</code> component displays the circular loading visual, usually used within the button to indicate the action is performing but not complete yet.</p>
<h3>Properties</h3>
<p><props-table component="NovoSpinnerElement"></props-table></p>
`,
                    host: { class: 'markdown-page' },
                    standalone: false,
                }]
        }] });
class LoadingDesignPage {
    constructor() {
        this.params = {};
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: LoadingDesignPage, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: LoadingDesignPage, isStandalone: false, selector: "loading-design-page", host: { classAttribute: "markdown-page" }, ngImport: i0, template: `<h2>Usage</h2>
<novo-grid columns="2" align="start" gap="2rem">
<div>
<p>Loading animations are used to help indicate to the user that some sort of progress is taking place. These are especially helpful for intensive operations that might take extra time.</p>
</div>
<img src="https://via.placeholder.com/350x250"/>
<div>
<h3>Use When</h3>
<ul class="contains-do-list">
<li class="bullhorn-do-item"><novo-icon color="grass" mr="md" size="md">check</novo-icon><novo-text color="grass"> Loading content.</novo-text></li>
<li class="bullhorn-do-item"><novo-icon color="grass" mr="md" size="md">check</novo-icon><novo-text color="grass"> Processing an long running action.</novo-text></li>
</ul>
</div>
<div>
<h3>Don′t Use When</h3>
<ul class="contains-do-list">
<li class="bullhorn-do-item"><novo-icon color="grapefruit" mr="md" size="md">times</novo-icon><novo-text color="grapefruit"> When not loading data.</novo-text></li>
</ul>
</div>
</novo-grid>
<h2>Anatomy</h2>
<novo-grid columns="2" align="start" gap="2rem">
<img src="assets/images/ModalAnatomy.png" width="450">
<div>
<ol>
<li>
<p><strong>Container</strong><br>
Defines the layout for the form field (horizontal vs vertical)</p>
</li>
<li>
<p><strong>Input Prefix (Optional element)</strong><br>
An element/icon displayed before the input. eg. $</p>
</li>
<li>
<p><strong>Label</strong><br>
A label for a group of menu actions.</p>
</li>
<li>
<p><strong>Input Control</strong><br>
The element representing the input control: <code>input</code>, <code>select</code>, etc...</p>
</li>
<li>
<p><strong>Input Suffix (Optional element)</strong><br>
The element/icon displayed after the input. eg. calendar icon for date picker.</p>
</li>
<li>
<p><strong>Helper/Error text (Optional element)</strong><br>
Caption text to display helpful information, warnings, or errors.</p>
</li>
</ol>
</div>
</novo-grid>
<h2>Best Practices</h2>
<ul>
<li>Use spinner to display that an action invoked by the user is performing but not complete.</li>
<li>Use loading when loading data from the server to intialize content.</li>
<li>If a spinner is triggered by a button, place the spinner in the button, and disable the button while the spinner is visible.</li>
<li>If only a portion of a page is loading new content or being updated, place the loading element in that part of the page.</li>
<li>There should only be a single loading element on a page at one time.</li>
</ul>
<h2>How to configure</h2>
<novo-grid columns="2" align="start" gap="2rem">
<blockquote>
<div class="p"><img src="https://via.placeholder.com/350x250" alt="placeholder"></div>
<ul class="contains-do-list">
<li class="bullhorn-do-item"><novo-icon color="grass" mr="md" size="md">check</novo-icon><novo-text color="grass"> Always do this</novo-text></li>
</ul>
<div class="p">Explain this</div>
</blockquote>
<blockquote>
<div class="p"><img src="https://via.placeholder.com/350x250" alt="placeholder"></div>
<ul class="contains-do-list">
<li class="bullhorn-do-item"><novo-icon color="grapefruit" mr="md" size="md">times</novo-icon><novo-text color="grapefruit"> Never do this</novo-text></li>
</ul>
<div class="p">Explain this</div>
</blockquote>
</novo-grid>
<h2>Patterns</h2>
<novo-grid columns="2" align="start" gap="2rem">
<blockquote>
<div class="p"><strong>Pattern</strong></div>
<div class="p">Why is it configured like this</div>
</blockquote>
<p><img src="https://via.placeholder.com/350x250" alt="placeholder"></p>
<blockquote>
<div class="p"><strong>Pattern</strong></div>
<div class="p">Why is it configured like this</div>
</blockquote>
<p><img src="https://via.placeholder.com/350x250" alt="placeholder"></p>
</novo-grid>
<h2>Accessibility</h2>
<p><strong>Implementation</strong></p>
<p>Always include an <code>alt</code> attribute describing the information that is visually displayed in the image.</p>
`, isInline: true, dependencies: [{ kind: "component", type: i2$1.NovoGridElement, selector: "novo-grid", inputs: ["direction", "align", "justify", "columns"] }, { kind: "component", type: i2$1.NovoIconComponent, selector: "novo-icon", inputs: ["raised", "theme", "shape", "color", "size", "smaller", "larger", "alt", "name"] }, { kind: "component", type: i2$1.NovoText, selector: "novo-text,[novo-text]", inputs: ["block"] }, { kind: "directive", type: i2$1.MarginDirective, selector: "[m],[margin],[marginTop],[marginRight],[marginBottom],[marginLeft],[marginX],[marginY],[mt],[mr],[mb],[ml],[mx],[my]", inputs: ["margin", "m", "marginLeft", "ml", "marginRight", "mr", "marginTop", "mt", "marginBottom", "mb", "marginX", "mx", "marginY", "my"] }, { kind: "directive", type: i2$1.GapDirective, selector: "[gap]", inputs: ["gap"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: LoadingDesignPage, decorators: [{
            type: Component,
            args: [{
                    selector: 'loading-design-page',
                    template: `<h2>Usage</h2>
<novo-grid columns="2" align="start" gap="2rem">
<div>
<p>Loading animations are used to help indicate to the user that some sort of progress is taking place. These are especially helpful for intensive operations that might take extra time.</p>
</div>
<img src="https://via.placeholder.com/350x250"/>
<div>
<h3>Use When</h3>
<ul class="contains-do-list">
<li class="bullhorn-do-item"><novo-icon color="grass" mr="md" size="md">check</novo-icon><novo-text color="grass"> Loading content.</novo-text></li>
<li class="bullhorn-do-item"><novo-icon color="grass" mr="md" size="md">check</novo-icon><novo-text color="grass"> Processing an long running action.</novo-text></li>
</ul>
</div>
<div>
<h3>Don′t Use When</h3>
<ul class="contains-do-list">
<li class="bullhorn-do-item"><novo-icon color="grapefruit" mr="md" size="md">times</novo-icon><novo-text color="grapefruit"> When not loading data.</novo-text></li>
</ul>
</div>
</novo-grid>
<h2>Anatomy</h2>
<novo-grid columns="2" align="start" gap="2rem">
<img src="assets/images/ModalAnatomy.png" width="450">
<div>
<ol>
<li>
<p><strong>Container</strong><br>
Defines the layout for the form field (horizontal vs vertical)</p>
</li>
<li>
<p><strong>Input Prefix (Optional element)</strong><br>
An element/icon displayed before the input. eg. $</p>
</li>
<li>
<p><strong>Label</strong><br>
A label for a group of menu actions.</p>
</li>
<li>
<p><strong>Input Control</strong><br>
The element representing the input control: <code>input</code>, <code>select</code>, etc...</p>
</li>
<li>
<p><strong>Input Suffix (Optional element)</strong><br>
The element/icon displayed after the input. eg. calendar icon for date picker.</p>
</li>
<li>
<p><strong>Helper/Error text (Optional element)</strong><br>
Caption text to display helpful information, warnings, or errors.</p>
</li>
</ol>
</div>
</novo-grid>
<h2>Best Practices</h2>
<ul>
<li>Use spinner to display that an action invoked by the user is performing but not complete.</li>
<li>Use loading when loading data from the server to intialize content.</li>
<li>If a spinner is triggered by a button, place the spinner in the button, and disable the button while the spinner is visible.</li>
<li>If only a portion of a page is loading new content or being updated, place the loading element in that part of the page.</li>
<li>There should only be a single loading element on a page at one time.</li>
</ul>
<h2>How to configure</h2>
<novo-grid columns="2" align="start" gap="2rem">
<blockquote>
<div class="p"><img src="https://via.placeholder.com/350x250" alt="placeholder"></div>
<ul class="contains-do-list">
<li class="bullhorn-do-item"><novo-icon color="grass" mr="md" size="md">check</novo-icon><novo-text color="grass"> Always do this</novo-text></li>
</ul>
<div class="p">Explain this</div>
</blockquote>
<blockquote>
<div class="p"><img src="https://via.placeholder.com/350x250" alt="placeholder"></div>
<ul class="contains-do-list">
<li class="bullhorn-do-item"><novo-icon color="grapefruit" mr="md" size="md">times</novo-icon><novo-text color="grapefruit"> Never do this</novo-text></li>
</ul>
<div class="p">Explain this</div>
</blockquote>
</novo-grid>
<h2>Patterns</h2>
<novo-grid columns="2" align="start" gap="2rem">
<blockquote>
<div class="p"><strong>Pattern</strong></div>
<div class="p">Why is it configured like this</div>
</blockquote>
<p><img src="https://via.placeholder.com/350x250" alt="placeholder"></p>
<blockquote>
<div class="p"><strong>Pattern</strong></div>
<div class="p">Why is it configured like this</div>
</blockquote>
<p><img src="https://via.placeholder.com/350x250" alt="placeholder"></p>
</novo-grid>
<h2>Accessibility</h2>
<p><strong>Implementation</strong></p>
<p>Always include an <code>alt</code> attribute describing the information that is visually displayed in the image.</p>
`,
                    host: { class: 'markdown-page' },
                    standalone: false,
                }]
        }] });
class IconExamplesPage {
    constructor() {
        this.params = {};
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: IconExamplesPage, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: IconExamplesPage, isStandalone: false, selector: "icon-examples-page", host: { classAttribute: "markdown-page" }, ngImport: i0, template: `<h2>Basic Usage</h2>
<p><code-example example="basic-icons"></code-example></p>
<h2>Themes &amp; Colors</h2>
<p><code-example example="themed-icons"></code-example></p>
<h2>Raised Icons</h2>
<p><code-example example="raised-icons"></code-example></p>
`, isInline: true, dependencies: [{ kind: "component", type: CodeExampleComponent, selector: "code-example", inputs: ["example"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: IconExamplesPage, decorators: [{
            type: Component,
            args: [{
                    selector: 'icon-examples-page',
                    template: `<h2>Basic Usage</h2>
<p><code-example example="basic-icons"></code-example></p>
<h2>Themes &amp; Colors</h2>
<p><code-example example="themed-icons"></code-example></p>
<h2>Raised Icons</h2>
<p><code-example example="raised-icons"></code-example></p>
`,
                    host: { class: 'markdown-page' },
                    standalone: false,
                }]
        }] });
class IconDevelopPage {
    constructor() {
        this.params = {};
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: IconDevelopPage, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: IconDevelopPage, isStandalone: false, selector: "icon-develop-page", host: { classAttribute: "markdown-page" }, ngImport: i0, template: `<h1>Technical Details</h1>
<ul>
<li><strong>source:</strong> <a href="https://github.com/bullhorn/novo-elements/blob/master/projects/novo-elements/src/elements/icon">(github)</a></li>
<li><strong>module:</strong> <code>import &#123; NovoIconModule &#125; from 'novo-elements';</code></li>
</ul>
<p><strong>Usage</strong></p>
<pre><code class="language-html"><span class="hljs-tag">&lt;<span class="hljs-name">novo-icon</span>&gt;</span>bull<span class="hljs-tag">&lt;/<span class="hljs-name">novo-icon</span>&gt;</span>
</code></pre>
<h1>Roadmap</h1>
<ul class="contains-task-list">
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> Make color and theming consistent</li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> Dark Mode</li>
</ul>
<h1>Components</h1>
<h2>NovoIconComponent <code>novo-icon</code></h2>
<p>The <code>novo-icon</code> component is used as a convience wrapper for all the bullhorn icons. This is to enable consistent styling when using the icons in various usecase, ie. inline, headers, buttons, etc...</p>
<h3>Properties</h3>
<p><props-table component="NovoIconComponent"></props-table></p>
`, isInline: true, dependencies: [{ kind: "component", type: PropsTableComponent, selector: "props-table", inputs: ["component", "kinds"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: IconDevelopPage, decorators: [{
            type: Component,
            args: [{
                    selector: 'icon-develop-page',
                    template: `<h1>Technical Details</h1>
<ul>
<li><strong>source:</strong> <a href="https://github.com/bullhorn/novo-elements/blob/master/projects/novo-elements/src/elements/icon">(github)</a></li>
<li><strong>module:</strong> <code>import &#123; NovoIconModule &#125; from 'novo-elements';</code></li>
</ul>
<p><strong>Usage</strong></p>
<pre><code class="language-html"><span class="hljs-tag">&lt;<span class="hljs-name">novo-icon</span>&gt;</span>bull<span class="hljs-tag">&lt;/<span class="hljs-name">novo-icon</span>&gt;</span>
</code></pre>
<h1>Roadmap</h1>
<ul class="contains-task-list">
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> Make color and theming consistent</li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> Dark Mode</li>
</ul>
<h1>Components</h1>
<h2>NovoIconComponent <code>novo-icon</code></h2>
<p>The <code>novo-icon</code> component is used as a convience wrapper for all the bullhorn icons. This is to enable consistent styling when using the icons in various usecase, ie. inline, headers, buttons, etc...</p>
<h3>Properties</h3>
<p><props-table component="NovoIconComponent"></props-table></p>
`,
                    host: { class: 'markdown-page' },
                    standalone: false,
                }]
        }] });
class IconDesignPage {
    constructor() {
        this.params = {};
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: IconDesignPage, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: IconDesignPage, isStandalone: false, selector: "icon-design-page", host: { classAttribute: "markdown-page" }, ngImport: i0, template: `<h2>Usage</h2>
<novo-grid columns="2" align="start" gap="2rem">
<div>
<p>If you want to use bullhorn icons, it is easier to use the <code>novo-icon</code> element to style them. You can always style them within the <code>i</code> tag too.</p>
<p><strong>Use When</strong></p>
<ul class="contains-do-list">
<li class="bullhorn-do-item"><novo-icon color="grass" mr="md" size="md">check</novo-icon><novo-text color="grass"> Additional context for action is required.</novo-text></li>
<li class="bullhorn-do-item"><novo-icon color="grass" mr="md" size="md">check</novo-icon><novo-text color="grass"> Help user easily identify what action does.</novo-text></li>
<li class="bullhorn-do-item"><novo-icon color="grass" mr="md" size="md">check</novo-icon><novo-text color="grass"> Help identify state, ie. error, warning, etc.</novo-text></li>
<li class="bullhorn-do-item"><novo-icon color="grass" mr="md" size="md">check</novo-icon><novo-text color="grass"> Spacing is limited.</novo-text></li>
</ul>
</div>
<img src="https://via.placeholder.com/350x250"/>
</novo-grid>
<h2>Best Practices</h2>
<ul>
<li>Use spinner to display that an action invoked by the user is performing but not complete.</li>
<li>Use loading when loading data from the server to intialize content.</li>
<li>If a spinner is triggered by a button, place the spinner in the button, and disable the button while the spinner is visible.</li>
<li>If only a portion of a page is loading new content or being updated, place the loading element in that part of the page.</li>
<li>There should only be a single loading element on a page at one time.</li>
</ul>
<h2>Variations</h2>
<novo-grid columns="2" align="start" gap="2rem">
<blockquote>
<div class="p"><strong>Color</strong></div>
<div class="p">Use color to convey additional meaning when displaying icons. Application colors such as <code>success</code> and <code>negative</code> can help express the meaning of the context being used.  Entity colors such as <code>job</code> and <code>candidate</code> can help the user identify context quickly when parsing large amounts of data.</div>
</blockquote>
<blockquote>
<div class="p"><strong>Filled</strong></div>
<div class="p">Icons can have color and optionally you can set the background color to show as well. This creates a visual emphasis on the icon and context it is describing. This style can be used when it is important to draw more attention to an item or when it asthetically makes sense for the icon to have a heavier presence in the UI.</div>
</blockquote>
</novo-grid>
<h2>Accessibility</h2>
<p><strong>Implementation</strong></p>
<p>Always include an <code>alt</code> attribute describing the information that is visually displayed in the image.</p>
`, isInline: true, dependencies: [{ kind: "component", type: i2$1.NovoGridElement, selector: "novo-grid", inputs: ["direction", "align", "justify", "columns"] }, { kind: "component", type: i2$1.NovoIconComponent, selector: "novo-icon", inputs: ["raised", "theme", "shape", "color", "size", "smaller", "larger", "alt", "name"] }, { kind: "component", type: i2$1.NovoText, selector: "novo-text,[novo-text]", inputs: ["block"] }, { kind: "directive", type: i2$1.MarginDirective, selector: "[m],[margin],[marginTop],[marginRight],[marginBottom],[marginLeft],[marginX],[marginY],[mt],[mr],[mb],[ml],[mx],[my]", inputs: ["margin", "m", "marginLeft", "ml", "marginRight", "mr", "marginTop", "mt", "marginBottom", "mb", "marginX", "mx", "marginY", "my"] }, { kind: "directive", type: i2$1.GapDirective, selector: "[gap]", inputs: ["gap"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: IconDesignPage, decorators: [{
            type: Component,
            args: [{
                    selector: 'icon-design-page',
                    template: `<h2>Usage</h2>
<novo-grid columns="2" align="start" gap="2rem">
<div>
<p>If you want to use bullhorn icons, it is easier to use the <code>novo-icon</code> element to style them. You can always style them within the <code>i</code> tag too.</p>
<p><strong>Use When</strong></p>
<ul class="contains-do-list">
<li class="bullhorn-do-item"><novo-icon color="grass" mr="md" size="md">check</novo-icon><novo-text color="grass"> Additional context for action is required.</novo-text></li>
<li class="bullhorn-do-item"><novo-icon color="grass" mr="md" size="md">check</novo-icon><novo-text color="grass"> Help user easily identify what action does.</novo-text></li>
<li class="bullhorn-do-item"><novo-icon color="grass" mr="md" size="md">check</novo-icon><novo-text color="grass"> Help identify state, ie. error, warning, etc.</novo-text></li>
<li class="bullhorn-do-item"><novo-icon color="grass" mr="md" size="md">check</novo-icon><novo-text color="grass"> Spacing is limited.</novo-text></li>
</ul>
</div>
<img src="https://via.placeholder.com/350x250"/>
</novo-grid>
<h2>Best Practices</h2>
<ul>
<li>Use spinner to display that an action invoked by the user is performing but not complete.</li>
<li>Use loading when loading data from the server to intialize content.</li>
<li>If a spinner is triggered by a button, place the spinner in the button, and disable the button while the spinner is visible.</li>
<li>If only a portion of a page is loading new content or being updated, place the loading element in that part of the page.</li>
<li>There should only be a single loading element on a page at one time.</li>
</ul>
<h2>Variations</h2>
<novo-grid columns="2" align="start" gap="2rem">
<blockquote>
<div class="p"><strong>Color</strong></div>
<div class="p">Use color to convey additional meaning when displaying icons. Application colors such as <code>success</code> and <code>negative</code> can help express the meaning of the context being used.  Entity colors such as <code>job</code> and <code>candidate</code> can help the user identify context quickly when parsing large amounts of data.</div>
</blockquote>
<blockquote>
<div class="p"><strong>Filled</strong></div>
<div class="p">Icons can have color and optionally you can set the background color to show as well. This creates a visual emphasis on the icon and context it is describing. This style can be used when it is important to draw more attention to an item or when it asthetically makes sense for the icon to have a heavier presence in the UI.</div>
</blockquote>
</novo-grid>
<h2>Accessibility</h2>
<p><strong>Implementation</strong></p>
<p>Always include an <code>alt</code> attribute describing the information that is visually displayed in the image.</p>
`,
                    host: { class: 'markdown-page' },
                    standalone: false,
                }]
        }] });
class FieldExamplesPage {
    constructor() {
        this.params = {};
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: FieldExamplesPage, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: FieldExamplesPage, isStandalone: false, selector: "field-examples-page", host: { classAttribute: "markdown-page" }, ngImport: i0, template: `<h2>Basic Usage</h2>
<p>tbw...</p>
<p><code-example example="field-usage"></code-example></p>
<h2>Anatomy</h2>
<p>Form fields consists of the following parts:</p>
<ul>
<li>Container</li>
<li>Leading icon (Optional element)</li>
<li>Label</li>
<li>Placeholder/Input text</li>
<li>Trailing icon (Optional element)</li>
<li>Helper text/Error text (Optional element)</li>
</ul>
<p>See how they are used below...</p>
<p><code-example example="field-anatomy"></code-example></p>
<h2>Native Controls</h2>
<p>The following input types can be used with novoInput:</p>
<ul>
<li>Text: text, password, email, search, tel, url, number</li>
<li>Date: date, datetime-local, month, week, time</li>
<li>Other: color, range</li>
</ul>
<p><code-example example="field-native"></code-example></p>
<h2>Form Controls</h2>
<p>How to use form fields tied to a form with FormControls and validation</p>
<p><code-example example="form-usage"></code-example></p>
`, isInline: true, dependencies: [{ kind: "component", type: CodeExampleComponent, selector: "code-example", inputs: ["example"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: FieldExamplesPage, decorators: [{
            type: Component,
            args: [{
                    selector: 'field-examples-page',
                    template: `<h2>Basic Usage</h2>
<p>tbw...</p>
<p><code-example example="field-usage"></code-example></p>
<h2>Anatomy</h2>
<p>Form fields consists of the following parts:</p>
<ul>
<li>Container</li>
<li>Leading icon (Optional element)</li>
<li>Label</li>
<li>Placeholder/Input text</li>
<li>Trailing icon (Optional element)</li>
<li>Helper text/Error text (Optional element)</li>
</ul>
<p>See how they are used below...</p>
<p><code-example example="field-anatomy"></code-example></p>
<h2>Native Controls</h2>
<p>The following input types can be used with novoInput:</p>
<ul>
<li>Text: text, password, email, search, tel, url, number</li>
<li>Date: date, datetime-local, month, week, time</li>
<li>Other: color, range</li>
</ul>
<p><code-example example="field-native"></code-example></p>
<h2>Form Controls</h2>
<p>How to use form fields tied to a form with FormControls and validation</p>
<p><code-example example="form-usage"></code-example></p>
`,
                    host: { class: 'markdown-page' },
                    standalone: false,
                }]
        }] });
class FieldDevelopPage {
    constructor() {
        this.params = {};
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: FieldDevelopPage, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: FieldDevelopPage, isStandalone: false, selector: "field-develop-page", host: { classAttribute: "markdown-page" }, ngImport: i0, template: `<h1>Technical Details</h1>
<ul>
<li><strong>source:</strong> <a href="https://github.com/bullhorn/novo-elements/blob/master/projects/novo-elements/src/elements/field">(github)</a></li>
<li><strong>module:</strong> <code>import &#123; NovoFieldModule &#125; from 'novo-elements';</code></li>
</ul>
<p><strong>Usage</strong></p>
<pre><code class="language-html"><span class="hljs-tag">&lt;<span class="hljs-name">novo-field</span> <span class="hljs-attr">layout</span>=<span class="hljs-string">&quot;horizontal&quot;</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">novo-label</span>&gt;</span>Amount<span class="hljs-tag">&lt;/<span class="hljs-name">novo-label</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">novoInput</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;number&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;example-right-align&quot;</span> /&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">novoPrefix</span>&gt;</span>$<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">novoSuffix</span>&gt;</span>.00<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">novo-hint</span>&gt;</span>Enter some money<span class="hljs-tag">&lt;/<span class="hljs-name">novo-hint</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">novo-field</span>&gt;</span>
</code></pre>
<h1>Roadmap</h1>
<ul class="contains-task-list">
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"> Improve Typing Support</li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> Make color and theming consistent</li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> Dark Mode</li>
</ul>
<h1>Changelog</h1>
<h3>5.0.0</h3>
<p><strong>Deprecation</strong></p>
<ul>
<li>You should no longer use <code>list</code> and <code>item</code> components, these are non-standard components and have been replaced with <code>novo-option</code> as used in the usage above.</li>
</ul>
<h1>Components</h1>
<h2>NovoFieldElement <code>novo-field</code></h2>
<p>The <code>novo-field</code> component expects 1 <code>button</code> or <code>novo-button</code> as the trigger for the menu list which is comprised of all the <code>novo-option</code> or <code>novo-optgroup</code> child components.</p>
<h3>Properties</h3>
<p><props-table component="NovoFieldElement"></props-table></p>
<h1>Directive</h1>
<h2>NovoInput <code>[novoInput]</code></h2>
<p>The <code>novoInput</code> component expects 1 <code>button</code> or <code>novo-button</code> as the trigger for the menu list which is comprised of all the <code>novo-option</code> or <code>novo-optgroup</code> child components.</p>
<h3>Properties</h3>
<p><props-table component="NovoInput"></props-table></p>
`, isInline: true, dependencies: [{ kind: "component", type: PropsTableComponent, selector: "props-table", inputs: ["component", "kinds"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: FieldDevelopPage, decorators: [{
            type: Component,
            args: [{
                    selector: 'field-develop-page',
                    template: `<h1>Technical Details</h1>
<ul>
<li><strong>source:</strong> <a href="https://github.com/bullhorn/novo-elements/blob/master/projects/novo-elements/src/elements/field">(github)</a></li>
<li><strong>module:</strong> <code>import &#123; NovoFieldModule &#125; from 'novo-elements';</code></li>
</ul>
<p><strong>Usage</strong></p>
<pre><code class="language-html"><span class="hljs-tag">&lt;<span class="hljs-name">novo-field</span> <span class="hljs-attr">layout</span>=<span class="hljs-string">&quot;horizontal&quot;</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">novo-label</span>&gt;</span>Amount<span class="hljs-tag">&lt;/<span class="hljs-name">novo-label</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">novoInput</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;number&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;example-right-align&quot;</span> /&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">novoPrefix</span>&gt;</span>$<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">novoSuffix</span>&gt;</span>.00<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">novo-hint</span>&gt;</span>Enter some money<span class="hljs-tag">&lt;/<span class="hljs-name">novo-hint</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">novo-field</span>&gt;</span>
</code></pre>
<h1>Roadmap</h1>
<ul class="contains-task-list">
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"> Improve Typing Support</li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> Make color and theming consistent</li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> Dark Mode</li>
</ul>
<h1>Changelog</h1>
<h3>5.0.0</h3>
<p><strong>Deprecation</strong></p>
<ul>
<li>You should no longer use <code>list</code> and <code>item</code> components, these are non-standard components and have been replaced with <code>novo-option</code> as used in the usage above.</li>
</ul>
<h1>Components</h1>
<h2>NovoFieldElement <code>novo-field</code></h2>
<p>The <code>novo-field</code> component expects 1 <code>button</code> or <code>novo-button</code> as the trigger for the menu list which is comprised of all the <code>novo-option</code> or <code>novo-optgroup</code> child components.</p>
<h3>Properties</h3>
<p><props-table component="NovoFieldElement"></props-table></p>
<h1>Directive</h1>
<h2>NovoInput <code>[novoInput]</code></h2>
<p>The <code>novoInput</code> component expects 1 <code>button</code> or <code>novo-button</code> as the trigger for the menu list which is comprised of all the <code>novo-option</code> or <code>novo-optgroup</code> child components.</p>
<h3>Properties</h3>
<p><props-table component="NovoInput"></props-table></p>
`,
                    host: { class: 'markdown-page' },
                    standalone: false,
                }]
        }] });
class FieldDesignPage {
    constructor() {
        this.params = {};
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: FieldDesignPage, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: FieldDesignPage, isStandalone: false, selector: "field-design-page", host: { classAttribute: "markdown-page" }, ngImport: i0, template: `<novo-grid columns="2" align="start" gap="2rem">
<div>
<h3>Why?</h3>
<p>A Field is a component used to wrap several Angular Material components and apply common Text field styles such as the underline, label and hint messages.</p>
<p>In this document, &quot;form field&quot; refers to the wrapper component <code>&lt;novo-field&gt;</code> and &quot;form field control&quot; refers to the component that the <code>&lt;novo-field&gt;</code> is wrapping (e.g. the input, textarea, select, etc.)</p>
<p><strong>Works with following input types</strong></p>
<ul>
<li>Default input, select, textarea</li>
<li>novo-select</li>
<li>novo-datepicker</li>
</ul>
</div>
<img src="assets/images/FieldOverview.png"/>
<div>
<h3>Use When</h3>
<ul class="contains-do-list">
<li class="bullhorn-do-item"><novo-icon color="grass" mr="md" size="md">check</novo-icon><novo-text color="grass"> A user must enter text data</novo-text></li>
</ul>
</div>
<div>
<h3>Don′t Use When</h3>
<ul class="contains-do-list">
<li class="bullhorn-do-item"><novo-icon color="grapefruit" mr="md" size="md">times</novo-icon><novo-text color="grapefruit"> Gathering multiple lines of text. Instead, use a text area.</novo-text></li>
<li class="bullhorn-do-item"><novo-icon color="grapefruit" mr="md" size="md">times</novo-icon><novo-text color="grapefruit"> Selecting value from preset list, use a select or radio.</novo-text></li>
</ul>
</div>
</novo-grid>
<h2>Anatomy</h2>
<novo-grid columns="2" align="start" gap="2rem">
<img src="assets/images/FieldAnatomy.png" width="450">
<div>
<ol>
<li>
<p><strong>Container</strong><br>
Defines the layout for the form field (horizontal vs vertical)</p>
</li>
<li>
<p><strong>Input Prefix (Optional element)</strong><br>
An element/icon displayed before the input. eg. $</p>
</li>
<li>
<p><strong>Label</strong><br>
A label for a group of menu actions.</p>
</li>
<li>
<p><strong>Input Control</strong><br>
The element representing the input control: <code>input</code>, <code>select</code>, etc...</p>
</li>
<li>
<p><strong>Input Suffix (Optional element)</strong><br>
The element/icon displayed after the input. eg. calendar icon for date picker.</p>
</li>
<li>
<p><strong>Helper/Error text (Optional element)</strong><br>
Caption text to display helpful information, warnings, or errors.</p>
</li>
</ol>
</div>
</novo-grid>
<h2>Best Practices</h2>
<ul>
<li>Only supply placeholder text where clarification is required, try not to overuse it.</li>
<li>Place labels directly above the input, and align to the left.</li>
</ul>
<h2>Accessibility</h2>
<p><strong>Implementation</strong></p>
<p>Always include an <code>alt</code> attribute describing the information that is visually displayed in the image.</p>
`, isInline: true, dependencies: [{ kind: "component", type: i2$1.NovoGridElement, selector: "novo-grid", inputs: ["direction", "align", "justify", "columns"] }, { kind: "component", type: i2$1.NovoIconComponent, selector: "novo-icon", inputs: ["raised", "theme", "shape", "color", "size", "smaller", "larger", "alt", "name"] }, { kind: "component", type: i2$1.NovoText, selector: "novo-text,[novo-text]", inputs: ["block"] }, { kind: "directive", type: i2$1.MarginDirective, selector: "[m],[margin],[marginTop],[marginRight],[marginBottom],[marginLeft],[marginX],[marginY],[mt],[mr],[mb],[ml],[mx],[my]", inputs: ["margin", "m", "marginLeft", "ml", "marginRight", "mr", "marginTop", "mt", "marginBottom", "mb", "marginX", "mx", "marginY", "my"] }, { kind: "directive", type: i2$1.GapDirective, selector: "[gap]", inputs: ["gap"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: FieldDesignPage, decorators: [{
            type: Component,
            args: [{
                    selector: 'field-design-page',
                    template: `<novo-grid columns="2" align="start" gap="2rem">
<div>
<h3>Why?</h3>
<p>A Field is a component used to wrap several Angular Material components and apply common Text field styles such as the underline, label and hint messages.</p>
<p>In this document, &quot;form field&quot; refers to the wrapper component <code>&lt;novo-field&gt;</code> and &quot;form field control&quot; refers to the component that the <code>&lt;novo-field&gt;</code> is wrapping (e.g. the input, textarea, select, etc.)</p>
<p><strong>Works with following input types</strong></p>
<ul>
<li>Default input, select, textarea</li>
<li>novo-select</li>
<li>novo-datepicker</li>
</ul>
</div>
<img src="assets/images/FieldOverview.png"/>
<div>
<h3>Use When</h3>
<ul class="contains-do-list">
<li class="bullhorn-do-item"><novo-icon color="grass" mr="md" size="md">check</novo-icon><novo-text color="grass"> A user must enter text data</novo-text></li>
</ul>
</div>
<div>
<h3>Don′t Use When</h3>
<ul class="contains-do-list">
<li class="bullhorn-do-item"><novo-icon color="grapefruit" mr="md" size="md">times</novo-icon><novo-text color="grapefruit"> Gathering multiple lines of text. Instead, use a text area.</novo-text></li>
<li class="bullhorn-do-item"><novo-icon color="grapefruit" mr="md" size="md">times</novo-icon><novo-text color="grapefruit"> Selecting value from preset list, use a select or radio.</novo-text></li>
</ul>
</div>
</novo-grid>
<h2>Anatomy</h2>
<novo-grid columns="2" align="start" gap="2rem">
<img src="assets/images/FieldAnatomy.png" width="450">
<div>
<ol>
<li>
<p><strong>Container</strong><br>
Defines the layout for the form field (horizontal vs vertical)</p>
</li>
<li>
<p><strong>Input Prefix (Optional element)</strong><br>
An element/icon displayed before the input. eg. $</p>
</li>
<li>
<p><strong>Label</strong><br>
A label for a group of menu actions.</p>
</li>
<li>
<p><strong>Input Control</strong><br>
The element representing the input control: <code>input</code>, <code>select</code>, etc...</p>
</li>
<li>
<p><strong>Input Suffix (Optional element)</strong><br>
The element/icon displayed after the input. eg. calendar icon for date picker.</p>
</li>
<li>
<p><strong>Helper/Error text (Optional element)</strong><br>
Caption text to display helpful information, warnings, or errors.</p>
</li>
</ol>
</div>
</novo-grid>
<h2>Best Practices</h2>
<ul>
<li>Only supply placeholder text where clarification is required, try not to overuse it.</li>
<li>Place labels directly above the input, and align to the left.</li>
</ul>
<h2>Accessibility</h2>
<p><strong>Implementation</strong></p>
<p>Always include an <code>alt</code> attribute describing the information that is visually displayed in the image.</p>
`,
                    host: { class: 'markdown-page' },
                    standalone: false,
                }]
        }] });
class DropdownExamplesPage {
    constructor() {
        this.params = {};
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: DropdownExamplesPage, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: DropdownExamplesPage, isStandalone: false, selector: "dropdown-examples-page", host: { classAttribute: "markdown-page" }, ngImport: i0, template: `<h2>Dropdown Menu</h2>
<p>This is a simple dropdown menu.</p>
<p><code-example example="basic-drop-down"></code-example></p>
<h2>Dropdown Position Options</h2>
<p>This is an example of how dropdowns can be positioned. Use the [side] input to specify how the popup positions or re-positions itself on the page using a preferred location and one or more fallback locations:</p>
<p><code-example example="position-drop-down"></code-example></p>
<h2>Lots of data!</h2>
<p>Crazy large dropdown to demonstrate how the smart positioning works.</p>
<p><code-example example="large-drop-down"></code-example></p>
<h2>Scrollable Container Class</h2>
<p>This is an example of using a dropdown within a scrollable container. Simply place the directive cdkScrollable on the ancestor element that does the scrolling.</p>
<p><code-example example="scrollable-drop-down"></code-example></p>
<h2>Custom Class</h2>
<p>You can have custom classes on the dropdown container that opens up by using the &quot;containerClass&quot; property. Use scrollStrategy to close, block or reposition the dropdown when the parent scrolls. The default scrollStrategy is reposition.</p>
<p><code-example example="custom-drop-down"></code-example></p>
<h2>Keep Open</h2>
<p>You can set the &quot;keepOpen&quot; property on the &quot;item&quot; in order to keep it from closing the dropdown automatically.</p>
<p><code-example example="multi-drop-down"></code-example></p>
<h2>Scroll to Selected Item</h2>
<p>Dropdown with a large number of items. Selecting an item far down the list and reopening the dropdown will automatically scroll down to the selected item.</p>
<p><code-example example="scroll-to-item-drop-down"></code-example></p>
`, isInline: true, dependencies: [{ kind: "component", type: CodeExampleComponent, selector: "code-example", inputs: ["example"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: DropdownExamplesPage, decorators: [{
            type: Component,
            args: [{
                    selector: 'dropdown-examples-page',
                    template: `<h2>Dropdown Menu</h2>
<p>This is a simple dropdown menu.</p>
<p><code-example example="basic-drop-down"></code-example></p>
<h2>Dropdown Position Options</h2>
<p>This is an example of how dropdowns can be positioned. Use the [side] input to specify how the popup positions or re-positions itself on the page using a preferred location and one or more fallback locations:</p>
<p><code-example example="position-drop-down"></code-example></p>
<h2>Lots of data!</h2>
<p>Crazy large dropdown to demonstrate how the smart positioning works.</p>
<p><code-example example="large-drop-down"></code-example></p>
<h2>Scrollable Container Class</h2>
<p>This is an example of using a dropdown within a scrollable container. Simply place the directive cdkScrollable on the ancestor element that does the scrolling.</p>
<p><code-example example="scrollable-drop-down"></code-example></p>
<h2>Custom Class</h2>
<p>You can have custom classes on the dropdown container that opens up by using the &quot;containerClass&quot; property. Use scrollStrategy to close, block or reposition the dropdown when the parent scrolls. The default scrollStrategy is reposition.</p>
<p><code-example example="custom-drop-down"></code-example></p>
<h2>Keep Open</h2>
<p>You can set the &quot;keepOpen&quot; property on the &quot;item&quot; in order to keep it from closing the dropdown automatically.</p>
<p><code-example example="multi-drop-down"></code-example></p>
<h2>Scroll to Selected Item</h2>
<p>Dropdown with a large number of items. Selecting an item far down the list and reopening the dropdown will automatically scroll down to the selected item.</p>
<p><code-example example="scroll-to-item-drop-down"></code-example></p>
`,
                    host: { class: 'markdown-page' },
                    standalone: false,
                }]
        }] });
class DropdownDevelopPage {
    constructor() {
        this.params = {};
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: DropdownDevelopPage, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: DropdownDevelopPage, isStandalone: false, selector: "dropdown-develop-page", host: { classAttribute: "markdown-page" }, ngImport: i0, template: `<h1>Technical Details</h1>
<ul>
<li><strong>source:</strong> <a href="https://github.com/bullhorn/novo-elements/blob/master/projects/novo-elements/src/elements/dropdown">(github)</a></li>
<li><strong>module:</strong> <code>import &#123; NovoDropdownModule &#125; from 'novo-elements';</code></li>
</ul>
<p><strong>Basic Usage</strong></p>
<pre><code class="language-html"><span class="hljs-tag">&lt;<span class="hljs-name">novo-dropdown</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">novo-button</span> <span class="hljs-attr">theme</span>=<span class="hljs-string">&quot;secondary&quot;</span> <span class="hljs-attr">icon</span>=<span class="hljs-string">&quot;collapse&quot;</span>&gt;</span>Actions<span class="hljs-tag">&lt;/<span class="hljs-name">novo-button</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">novo-option</span> (<span class="hljs-attr">click</span>)=<span class="hljs-string">&quot;alert(&#x27;Item 1&#x27;)&quot;</span>&gt;</span>Menu Item 1<span class="hljs-tag">&lt;/<span class="hljs-name">novo-option</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">novo-option</span> (<span class="hljs-attr">click</span>)=<span class="hljs-string">&quot;alert(&#x27;Item 2&#x27;)&quot;</span>&gt;</span>Menu Item 2<span class="hljs-tag">&lt;/<span class="hljs-name">novo-option</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">novo-dropdown</span>&gt;</span>
</code></pre>
<h1>Roadmap</h1>
<ul class="contains-task-list">
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"> Improve Typing Support</li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> Make color and theming consistent</li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> Dark Mode</li>
</ul>
<h1>Changelog</h1>
<h3>5.0.0</h3>
<p><strong>Deprecation</strong></p>
<ul>
<li>You should no longer use <code>list</code> and <code>item</code> components, these are non-standard components and have been replaced with <code>novo-option</code> as used in the usage above.</li>
</ul>
<h1>Components</h1>
<h2>NovoDropdownElement <code>novo-dropdown</code></h2>
<p>The <code>novo-dropdown</code> component expects 1 <code>button</code> or <code>novo-button</code> as the trigger for the menu list which is comprised of all the <code>novo-option</code> or <code>novo-optgroup</code> child components.</p>
<h3>Properties</h3>
<p><props-table component="NovoDropdownElement"></props-table></p>
`, isInline: true, dependencies: [{ kind: "component", type: PropsTableComponent, selector: "props-table", inputs: ["component", "kinds"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: DropdownDevelopPage, decorators: [{
            type: Component,
            args: [{
                    selector: 'dropdown-develop-page',
                    template: `<h1>Technical Details</h1>
<ul>
<li><strong>source:</strong> <a href="https://github.com/bullhorn/novo-elements/blob/master/projects/novo-elements/src/elements/dropdown">(github)</a></li>
<li><strong>module:</strong> <code>import &#123; NovoDropdownModule &#125; from 'novo-elements';</code></li>
</ul>
<p><strong>Basic Usage</strong></p>
<pre><code class="language-html"><span class="hljs-tag">&lt;<span class="hljs-name">novo-dropdown</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">novo-button</span> <span class="hljs-attr">theme</span>=<span class="hljs-string">&quot;secondary&quot;</span> <span class="hljs-attr">icon</span>=<span class="hljs-string">&quot;collapse&quot;</span>&gt;</span>Actions<span class="hljs-tag">&lt;/<span class="hljs-name">novo-button</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">novo-option</span> (<span class="hljs-attr">click</span>)=<span class="hljs-string">&quot;alert(&#x27;Item 1&#x27;)&quot;</span>&gt;</span>Menu Item 1<span class="hljs-tag">&lt;/<span class="hljs-name">novo-option</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">novo-option</span> (<span class="hljs-attr">click</span>)=<span class="hljs-string">&quot;alert(&#x27;Item 2&#x27;)&quot;</span>&gt;</span>Menu Item 2<span class="hljs-tag">&lt;/<span class="hljs-name">novo-option</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">novo-dropdown</span>&gt;</span>
</code></pre>
<h1>Roadmap</h1>
<ul class="contains-task-list">
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"> Improve Typing Support</li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> Make color and theming consistent</li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> Dark Mode</li>
</ul>
<h1>Changelog</h1>
<h3>5.0.0</h3>
<p><strong>Deprecation</strong></p>
<ul>
<li>You should no longer use <code>list</code> and <code>item</code> components, these are non-standard components and have been replaced with <code>novo-option</code> as used in the usage above.</li>
</ul>
<h1>Components</h1>
<h2>NovoDropdownElement <code>novo-dropdown</code></h2>
<p>The <code>novo-dropdown</code> component expects 1 <code>button</code> or <code>novo-button</code> as the trigger for the menu list which is comprised of all the <code>novo-option</code> or <code>novo-optgroup</code> child components.</p>
<h3>Properties</h3>
<p><props-table component="NovoDropdownElement"></props-table></p>
`,
                    host: { class: 'markdown-page' },
                    standalone: false,
                }]
        }] });
class DropdownDesignPage {
    constructor() {
        this.params = {};
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: DropdownDesignPage, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: DropdownDesignPage, isStandalone: false, selector: "dropdown-design-page", host: { classAttribute: "markdown-page" }, ngImport: i0, template: `<novo-grid columns="2" align="start" gap="2rem">
<div>
<h3>Why?</h3>
<p>Dropdown allow users to take an action by selecting from a list of choices revealed upon opening a temporary menu.</p>
</div>
<img src="https://via.placeholder.com/350x250"/>
<div>
<h3>Use When</h3>
<ul class="contains-do-list">
<li class="bullhorn-do-item"><novo-icon color="grass" mr="md" size="md">check</novo-icon><novo-text color="grass"> Affording interaction to key behaviors and features.</novo-text></li>
<li class="bullhorn-do-item"><novo-icon color="grass" mr="md" size="md">check</novo-icon><novo-text color="grass"> Confirming or submitting information entered into a form.</novo-text></li>
<li class="bullhorn-do-item"><novo-icon color="grass" mr="md" size="md">check</novo-icon><novo-text color="grass"> Cancelling an action.</novo-text></li>
<li class="bullhorn-do-item"><novo-icon color="grass" mr="md" size="md">check</novo-icon><novo-text color="grass"> Resetting a form or dataset.</novo-text></li>
<li class="bullhorn-do-item"><novo-icon color="grass" mr="md" size="md">check</novo-icon><novo-text color="grass"> Closing a container or section.</novo-text></li>
<li class="bullhorn-do-item"><novo-icon color="grass" mr="md" size="md">check</novo-icon><novo-text color="grass"> Opening a popover.</novo-text></li>
<li class="bullhorn-do-item"><novo-icon color="grass" mr="md" size="md">check</novo-icon><novo-text color="grass"> Moving forward or backward through a stepper workflow.</novo-text></li>
<li class="bullhorn-do-item"><novo-icon color="grass" mr="md" size="md">check</novo-icon><novo-text color="grass"> Creating an object within a group.</novo-text></li>
<li class="bullhorn-do-item"><novo-icon color="grass" mr="md" size="md">check</novo-icon><novo-text color="grass"> Applying a non-critical action to a dataset.</novo-text></li>
</ul>
</div>
<div>
<h3>Don′t Use When</h3>
<ul class="contains-do-list">
<li class="bullhorn-do-item"><novo-icon color="grapefruit" mr="md" size="md">times</novo-icon><novo-text color="grapefruit"> Displaying a collection of links to sections. Use links instead.</novo-text></li>
<li class="bullhorn-do-item"><novo-icon color="grapefruit" mr="md" size="md">times</novo-icon><novo-text color="grapefruit"> Linking to an external site. Use links instead.</novo-text></li>
</ul>
</div>
</novo-grid>
<h2>Anatomy</h2>
<novo-grid columns="2" align="start" gap="2rem">
<img src="assets/images/ModalAnatomy.png" width="450">
<div>
<ol>
<li>
<p><strong>Trigger</strong><br>
A button that may contain an icon, or be labeled with text.</p>
</li>
<li>
<p><strong>Menu</strong><br>
Container for all options and option groups.</p>
</li>
<li>
<p><strong>Option Group (Optional)</strong><br>
A label for a group of menu actions.</p>
</li>
<li>
<p><strong>Option</strong><br>
The action items displayed within the list.</p>
</li>
</ol>
</div>
</novo-grid>
<h2>Best Practices</h2>
<ul>
<li>A number of components can be used to give people the ability to select options. See the list of related components below for advice on choosing the right one.</li>
<li>When organizing dropdown menu items, sort the list in a logical order by putting the most selected option at the top, if known. Test and refine over time to re-evaluate if all menu items are needed.</li>
<li>For long lists, group related menu items. If including radio buttons and checkboxes as menu items, try grouping related actions.</li>
<li>Grouped items are separated by a short, uppercase title that describes the options in that sub-category.</li>
</ul>
<h2>How to configure</h2>
<novo-grid columns="2" align="start" gap="2rem">
<blockquote>
<div class="p"><img src="https://via.placeholder.com/350x250" alt="placeholder"></div>
<ul class="contains-do-list">
<li class="bullhorn-do-item"><novo-icon color="grass" mr="md" size="md">check</novo-icon><novo-text color="grass"> Always do this</novo-text></li>
</ul>
<div class="p">Explain this</div>
</blockquote>
<blockquote>
<div class="p"><img src="https://via.placeholder.com/350x250" alt="placeholder"></div>
<ul class="contains-do-list">
<li class="bullhorn-do-item"><novo-icon color="grapefruit" mr="md" size="md">times</novo-icon><novo-text color="grapefruit"> Never do this</novo-text></li>
</ul>
<div class="p">Explain this</div>
</blockquote>
</novo-grid>
<h2>Patterns</h2>
<novo-grid columns="2" align="start" gap="2rem">
<blockquote>
<div class="p"><strong>Pattern</strong></div>
<div class="p">Why is it configured like this</div>
</blockquote>
<p><img src="https://via.placeholder.com/350x250" alt="placeholder"></p>
<blockquote>
<div class="p"><strong>Pattern</strong></div>
<div class="p">Why is it configured like this</div>
</blockquote>
<p><img src="https://via.placeholder.com/350x250" alt="placeholder"></p>
</novo-grid>
<h2>Accessibility</h2>
<p><strong>Implementation</strong></p>
<p>Always include an <code>alt</code> attribute describing the information that is visually displayed in the image.</p>
`, isInline: true, dependencies: [{ kind: "component", type: i2$1.NovoGridElement, selector: "novo-grid", inputs: ["direction", "align", "justify", "columns"] }, { kind: "component", type: i2$1.NovoIconComponent, selector: "novo-icon", inputs: ["raised", "theme", "shape", "color", "size", "smaller", "larger", "alt", "name"] }, { kind: "component", type: i2$1.NovoText, selector: "novo-text,[novo-text]", inputs: ["block"] }, { kind: "directive", type: i2$1.MarginDirective, selector: "[m],[margin],[marginTop],[marginRight],[marginBottom],[marginLeft],[marginX],[marginY],[mt],[mr],[mb],[ml],[mx],[my]", inputs: ["margin", "m", "marginLeft", "ml", "marginRight", "mr", "marginTop", "mt", "marginBottom", "mb", "marginX", "mx", "marginY", "my"] }, { kind: "directive", type: i2$1.GapDirective, selector: "[gap]", inputs: ["gap"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: DropdownDesignPage, decorators: [{
            type: Component,
            args: [{
                    selector: 'dropdown-design-page',
                    template: `<novo-grid columns="2" align="start" gap="2rem">
<div>
<h3>Why?</h3>
<p>Dropdown allow users to take an action by selecting from a list of choices revealed upon opening a temporary menu.</p>
</div>
<img src="https://via.placeholder.com/350x250"/>
<div>
<h3>Use When</h3>
<ul class="contains-do-list">
<li class="bullhorn-do-item"><novo-icon color="grass" mr="md" size="md">check</novo-icon><novo-text color="grass"> Affording interaction to key behaviors and features.</novo-text></li>
<li class="bullhorn-do-item"><novo-icon color="grass" mr="md" size="md">check</novo-icon><novo-text color="grass"> Confirming or submitting information entered into a form.</novo-text></li>
<li class="bullhorn-do-item"><novo-icon color="grass" mr="md" size="md">check</novo-icon><novo-text color="grass"> Cancelling an action.</novo-text></li>
<li class="bullhorn-do-item"><novo-icon color="grass" mr="md" size="md">check</novo-icon><novo-text color="grass"> Resetting a form or dataset.</novo-text></li>
<li class="bullhorn-do-item"><novo-icon color="grass" mr="md" size="md">check</novo-icon><novo-text color="grass"> Closing a container or section.</novo-text></li>
<li class="bullhorn-do-item"><novo-icon color="grass" mr="md" size="md">check</novo-icon><novo-text color="grass"> Opening a popover.</novo-text></li>
<li class="bullhorn-do-item"><novo-icon color="grass" mr="md" size="md">check</novo-icon><novo-text color="grass"> Moving forward or backward through a stepper workflow.</novo-text></li>
<li class="bullhorn-do-item"><novo-icon color="grass" mr="md" size="md">check</novo-icon><novo-text color="grass"> Creating an object within a group.</novo-text></li>
<li class="bullhorn-do-item"><novo-icon color="grass" mr="md" size="md">check</novo-icon><novo-text color="grass"> Applying a non-critical action to a dataset.</novo-text></li>
</ul>
</div>
<div>
<h3>Don′t Use When</h3>
<ul class="contains-do-list">
<li class="bullhorn-do-item"><novo-icon color="grapefruit" mr="md" size="md">times</novo-icon><novo-text color="grapefruit"> Displaying a collection of links to sections. Use links instead.</novo-text></li>
<li class="bullhorn-do-item"><novo-icon color="grapefruit" mr="md" size="md">times</novo-icon><novo-text color="grapefruit"> Linking to an external site. Use links instead.</novo-text></li>
</ul>
</div>
</novo-grid>
<h2>Anatomy</h2>
<novo-grid columns="2" align="start" gap="2rem">
<img src="assets/images/ModalAnatomy.png" width="450">
<div>
<ol>
<li>
<p><strong>Trigger</strong><br>
A button that may contain an icon, or be labeled with text.</p>
</li>
<li>
<p><strong>Menu</strong><br>
Container for all options and option groups.</p>
</li>
<li>
<p><strong>Option Group (Optional)</strong><br>
A label for a group of menu actions.</p>
</li>
<li>
<p><strong>Option</strong><br>
The action items displayed within the list.</p>
</li>
</ol>
</div>
</novo-grid>
<h2>Best Practices</h2>
<ul>
<li>A number of components can be used to give people the ability to select options. See the list of related components below for advice on choosing the right one.</li>
<li>When organizing dropdown menu items, sort the list in a logical order by putting the most selected option at the top, if known. Test and refine over time to re-evaluate if all menu items are needed.</li>
<li>For long lists, group related menu items. If including radio buttons and checkboxes as menu items, try grouping related actions.</li>
<li>Grouped items are separated by a short, uppercase title that describes the options in that sub-category.</li>
</ul>
<h2>How to configure</h2>
<novo-grid columns="2" align="start" gap="2rem">
<blockquote>
<div class="p"><img src="https://via.placeholder.com/350x250" alt="placeholder"></div>
<ul class="contains-do-list">
<li class="bullhorn-do-item"><novo-icon color="grass" mr="md" size="md">check</novo-icon><novo-text color="grass"> Always do this</novo-text></li>
</ul>
<div class="p">Explain this</div>
</blockquote>
<blockquote>
<div class="p"><img src="https://via.placeholder.com/350x250" alt="placeholder"></div>
<ul class="contains-do-list">
<li class="bullhorn-do-item"><novo-icon color="grapefruit" mr="md" size="md">times</novo-icon><novo-text color="grapefruit"> Never do this</novo-text></li>
</ul>
<div class="p">Explain this</div>
</blockquote>
</novo-grid>
<h2>Patterns</h2>
<novo-grid columns="2" align="start" gap="2rem">
<blockquote>
<div class="p"><strong>Pattern</strong></div>
<div class="p">Why is it configured like this</div>
</blockquote>
<p><img src="https://via.placeholder.com/350x250" alt="placeholder"></p>
<blockquote>
<div class="p"><strong>Pattern</strong></div>
<div class="p">Why is it configured like this</div>
</blockquote>
<p><img src="https://via.placeholder.com/350x250" alt="placeholder"></p>
</novo-grid>
<h2>Accessibility</h2>
<p><strong>Implementation</strong></p>
<p>Always include an <code>alt</code> attribute describing the information that is visually displayed in the image.</p>
`,
                    host: { class: 'markdown-page' },
                    standalone: false,
                }]
        }] });
class DataTablePage {
    constructor() {
        this.params = {};
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: DataTablePage, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: DataTablePage, isStandalone: false, selector: "data-table-page", host: { classAttribute: "markdown-page" }, ngImport: i0, template: `<h1>Data Table <a href="https://github.com/bullhorn/novo-elements/blob/master/projects/novo-elements/src/elements/data-table">(source)</a></h1>
<h5>Working with static data</h5>
<h6>Change Dataset</h6>
<h6>Change Pagination Style</h6>
<h6>Toggle Global Search</h6>
<h6>Configure Columns</h6>
<p>Configure Columns</p>
<h6>Configure Columns</h6>
<p>Show Row Details (first table) Hide Row Details (first table)</p>
<h5>Passing an array of rows</h5>
<p><code-example example="data-table-rows"></code-example></p>
<h5>Using the static data service</h5>
<p><code-example example="data-table-service"></code-example></p>
<h5>Working with remote data</h5>
<h5>Using the remote data service</h5>
<p>Data won't actually change, the URL will update with the proper request it will make!</p>
<h6>URL</h6>
<p><code-example example="data-table-remote"></code-example></p>
`, isInline: true, dependencies: [{ kind: "component", type: CodeExampleComponent, selector: "code-example", inputs: ["example"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: DataTablePage, decorators: [{
            type: Component,
            args: [{
                    selector: 'data-table-page',
                    template: `<h1>Data Table <a href="https://github.com/bullhorn/novo-elements/blob/master/projects/novo-elements/src/elements/data-table">(source)</a></h1>
<h5>Working with static data</h5>
<h6>Change Dataset</h6>
<h6>Change Pagination Style</h6>
<h6>Toggle Global Search</h6>
<h6>Configure Columns</h6>
<p>Configure Columns</p>
<h6>Configure Columns</h6>
<p>Show Row Details (first table) Hide Row Details (first table)</p>
<h5>Passing an array of rows</h5>
<p><code-example example="data-table-rows"></code-example></p>
<h5>Using the static data service</h5>
<p><code-example example="data-table-service"></code-example></p>
<h5>Working with remote data</h5>
<h5>Using the remote data service</h5>
<p>Data won't actually change, the URL will update with the proper request it will make!</p>
<h6>URL</h6>
<p><code-example example="data-table-remote"></code-example></p>
`,
                    host: { class: 'markdown-page' },
                    standalone: false,
                }]
        }] });
class CalendarExamplesPage {
    constructor() {
        this.params = {};
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: CalendarExamplesPage, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: CalendarExamplesPage, isStandalone: false, selector: "calendar-examples-page", host: { classAttribute: "markdown-page" }, ngImport: i0, template: `<h2>Basic Usage</h2>
<p><code-example example="calendar"></code-example></p>
`, isInline: true, dependencies: [{ kind: "component", type: CodeExampleComponent, selector: "code-example", inputs: ["example"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: CalendarExamplesPage, decorators: [{
            type: Component,
            args: [{
                    selector: 'calendar-examples-page',
                    template: `<h2>Basic Usage</h2>
<p><code-example example="calendar"></code-example></p>
`,
                    host: { class: 'markdown-page' },
                    standalone: false,
                }]
        }] });
class CalendarDevelopPage {
    constructor() {
        this.params = {};
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: CalendarDevelopPage, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: CalendarDevelopPage, isStandalone: false, selector: "calendar-develop-page", host: { classAttribute: "markdown-page" }, ngImport: i0, template: `<h1>Technical Details</h1>
<ul>
<li><strong>source:</strong> <a href="https://github.com/bullhorn/novo-elements/blob/master/projects/novo-elements/src/elements/calendar">(github)</a></li>
<li><strong>module:</strong> <code>import &#123; NovoCalendarModule &#125; form 'novo-elements';</code></li>
</ul>
<p><strong>Basic Usage</strong></p>
<typedef-example>
  <typedef-content>
    <novo-calendar
    [mode]="mode.value"
    [numberOfMonths]="months.value"
    ></novo-calendar>
  </typedef-content>
  <typedef-specs>
    <novo-label>Selection mode</novo-label>
    <novo-radio-group #mode appearance="vertical" value="single">
      <novo-radio name="mode" value="single">single</novo-radio>
      <novo-radio name="mode" value="multiple">multiple</novo-radio>
      <novo-radio name="mode" value="range">range</novo-radio>
      <novo-radio name="mode" value="week">week</novo-radio>
    </novo-radio-group>
    <novo-label># of Months</novo-label>
    <novo-radio-group #months appearance="vertical" value="1">
      <novo-radio name="months" value="1">1</novo-radio>
      <novo-radio name="months" value="2">2</novo-radio>
    </novo-radio-group>
  </typedef-specs>
  <typedef-snippet>
<pre><code class="language-html"><span class="hljs-tag">&lt;<span class="hljs-name">novo-calendar</span> [<span class="hljs-attr">activeDate</span>]=<span class="hljs-string">&quot;birthday&quot;</span> <span class="hljs-attr">mode</span>=<span class="hljs-string">&quot;single&quot;</span> <span class="hljs-attr">numberOfMonths</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">novo-calendar</span>&gt;</span>
</code></pre>
  </typedef-snippet>
</typedef-example>
<h1>Roadmap</h1>
<ul class="contains-task-list">
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"> Improve Typing Support</li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> Make color and theming consistent</li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> Dark Mode</li>
</ul>
<h1>Changelog</h1>
<h3>6.0.0</h3>
<p><em>added in this version</em></p>
<h1>Components</h1>
<h2>NovoCalendarElement <code>novo-calendar</code></h2>
<p>All tabs must be incapsulated in a <code>novo-nav</code> container. The nav will control the context and active tab.</p>
<h3>Properties</h3>
<p><props-table component="NovoCalendarElement"></props-table></p>
`, isInline: true, dependencies: [{ kind: "component", type: i2$1.NovoCalendarElement, selector: "novo-calendar", inputs: ["minYear", "maxYear", "minDate", "maxDate", "activeView", "layout", "selected", "preview", "overlays", "disabledDateMessage", "activeDate", "weekStartsOn", "numberOfMonths", "mode"], outputs: ["selectedChange", "previewChange", "activeDateChange"] }, { kind: "component", type: i2$1.NovoRadioElement, selector: "novo-radio", inputs: ["id", "name", "tabindex", "vertical", "label", "button", "theme", "size", "icon", "color", "disabled", "checked", "value"], outputs: ["change", "blur", "focus"] }, { kind: "component", type: i2$1.NovoRadioGroup, selector: "novo-radio-group", inputs: ["id", "tabindex", "errorStateMatcher", "appearance", "value", "name", "disabled", "required", "placeholder"], outputs: ["change", "blur"] }, { kind: "component", type: i2$1.NovoLabel, selector: "novo-label,[novo-label]", inputs: ["id"] }, { kind: "component", type: TypedefContent, selector: "typedef-content" }, { kind: "component", type: TypedefExample, selector: "typedef-example" }, { kind: "component", type: TypedefSnippet, selector: "typedef-snippet" }, { kind: "component", type: TypedefSpec, selector: "typedef-specs" }, { kind: "component", type: PropsTableComponent, selector: "props-table", inputs: ["component", "kinds"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: CalendarDevelopPage, decorators: [{
            type: Component,
            args: [{
                    selector: 'calendar-develop-page',
                    template: `<h1>Technical Details</h1>
<ul>
<li><strong>source:</strong> <a href="https://github.com/bullhorn/novo-elements/blob/master/projects/novo-elements/src/elements/calendar">(github)</a></li>
<li><strong>module:</strong> <code>import &#123; NovoCalendarModule &#125; form 'novo-elements';</code></li>
</ul>
<p><strong>Basic Usage</strong></p>
<typedef-example>
  <typedef-content>
    <novo-calendar
    [mode]="mode.value"
    [numberOfMonths]="months.value"
    ></novo-calendar>
  </typedef-content>
  <typedef-specs>
    <novo-label>Selection mode</novo-label>
    <novo-radio-group #mode appearance="vertical" value="single">
      <novo-radio name="mode" value="single">single</novo-radio>
      <novo-radio name="mode" value="multiple">multiple</novo-radio>
      <novo-radio name="mode" value="range">range</novo-radio>
      <novo-radio name="mode" value="week">week</novo-radio>
    </novo-radio-group>
    <novo-label># of Months</novo-label>
    <novo-radio-group #months appearance="vertical" value="1">
      <novo-radio name="months" value="1">1</novo-radio>
      <novo-radio name="months" value="2">2</novo-radio>
    </novo-radio-group>
  </typedef-specs>
  <typedef-snippet>
<pre><code class="language-html"><span class="hljs-tag">&lt;<span class="hljs-name">novo-calendar</span> [<span class="hljs-attr">activeDate</span>]=<span class="hljs-string">&quot;birthday&quot;</span> <span class="hljs-attr">mode</span>=<span class="hljs-string">&quot;single&quot;</span> <span class="hljs-attr">numberOfMonths</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">novo-calendar</span>&gt;</span>
</code></pre>
  </typedef-snippet>
</typedef-example>
<h1>Roadmap</h1>
<ul class="contains-task-list">
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"> Improve Typing Support</li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> Make color and theming consistent</li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> Dark Mode</li>
</ul>
<h1>Changelog</h1>
<h3>6.0.0</h3>
<p><em>added in this version</em></p>
<h1>Components</h1>
<h2>NovoCalendarElement <code>novo-calendar</code></h2>
<p>All tabs must be incapsulated in a <code>novo-nav</code> container. The nav will control the context and active tab.</p>
<h3>Properties</h3>
<p><props-table component="NovoCalendarElement"></props-table></p>
`,
                    host: { class: 'markdown-page' },
                    standalone: false,
                }]
        }] });
class CalendarDesignPage {
    constructor() {
        this.params = {};
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: CalendarDesignPage, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: CalendarDesignPage, isStandalone: false, selector: "calendar-design-page", host: { classAttribute: "markdown-page" }, ngImport: i0, template: `<h2>Usage</h2>
<novo-grid columns="2" align="start" gap="2rem">
<div>
<p>Calendars allow users to easily select dates. It comes in a handful of varieties based on the data the user is trying to enter, ie. A Single Date, Date Ranges, or Multiple Dates.</p>
<p>The <code>novo-calendar</code> component is used to select a dates in a reactive way to be used in the presentation or filtering of data within a view container. The <code>novo-calendar</code> component is not a FormControl itself but is use in the <code>novo-date-picker</code> component when selecting dates.</p>
</div>
<p><img src="assets/images/CalendarOverview.png" alt="placeholder"></p>
<div>
<h3>Use When</h3>
<ul class="contains-do-list">
<li class="bullhorn-do-item">
<p><novo-icon color="grass" mr="md" size="md">check</novo-icon><novo-text color="grass"> When the user needs to select a date to control or filter data on the page.</novo-text></p>
<p>The <code>novo-calendar</code> component by itself is just a way to store a date or date range value in the view model.  These date can be used to manipulate the UI.</p>
</li>
</ul>
</div>
<div>
<h3>Don′t Use When</h3>
<ul class="contains-do-list">
<li class="bullhorn-do-item">
<p><novo-icon color="grapefruit" mr="md" size="md">times</novo-icon><novo-text color="grapefruit"> When you are capturing dates as part of a Form.</novo-text></p>
<p>If you need to store the date(s) in a Form with validation, you should use the <code>date-picker</code> component, which wraps the calendar in a FormControl.</p>
</li>
</ul>
</div>
</novo-grid>
<h2>Anatomy</h2>
<novo-grid columns="2" align="start" gap="2rem">
<img src="assets/images/CalendarAnatomy.png" width="450">
<div>
<ol>
<li>
<p><strong>Month/Year Indicator</strong><br>
These indicators are clickable and will diplay a Month or Year selection view.</p>
</li>
<li>
<p><strong>Next/Prev Buttons</strong><br>
These buttons will control the current viewable month, allowing the user to move the view forward and backwards a month.</p>
</li>
<li>
<p><strong>Current Date</strong><br>
The current date should always have an indicator to help the user</p>
</li>
<li>
<p><strong>Selected Date</strong><br>
Selected Date(s) will be highlighted as such.  When a range of dates are selected the selection will appear continous.</p>
</li>
</ol>
</div>
</novo-grid>
<h2>Best Practices</h2>
<ul>
<li>Card dimensions are based on its content and the container in which it resides.</li>
<li>Apply custom heights and width to meet product requirements.</li>
<li>Avoid the appearance of nested cards, and therefore don’t use cards within a modal or another card.</li>
<li>When creating a group of cards, use consistently sized content within a grid or flex layout.</li>
</ul>
<h2>Behaviors</h2>
<novo-grid columns="2" align="start" gap="2rem">
<blockquote>
<div class="p"><img src="assets/images/CalendarMultiMonth.png" alt="placeholder"></div>
<div class="p"><strong>Multiple Months</strong></div>
<div class="p">Sometimes dates and ranges are more valueable to see over the multiple months,
for this reason the component allows you to show consecutive months in the view.
The view is responsive and will show the months horizontally first, to have a vertical
list just set a fixed width on the container.</div>
</blockquote>
<blockquote>
<div class="p"><img src="assets/images/CalendarRange.png" alt="placeholder"></div>
<div class="p"><strong>Range Selection</strong></div>
<div class="p">When selection a range of dates...</div>
</blockquote>
<blockquote>
<div class="p"><img src="assets/images/CalendarWeek.png" alt="placeholder"></div>
<div class="p"><strong>Week Selection</strong></div>
<div class="p">Sometimes selecting the by a fixed range of dates, like the week is necessary to ensure the right data is selected. For example, when selecting a pay period or work week.  Using this selection mode with the appropriate <code>weekStart</code> property to set which day the week starts on.</div>
</blockquote>
</novo-grid>
<h2>Accessibility</h2>
<ul>
<li>If using an illustrative image for the supplement content, it’s generally safe to use an empty or null alternative text for example alt=&quot;&quot;</li>
</ul>
`, isInline: true, dependencies: [{ kind: "component", type: i2$1.NovoGridElement, selector: "novo-grid", inputs: ["direction", "align", "justify", "columns"] }, { kind: "component", type: i2$1.NovoIconComponent, selector: "novo-icon", inputs: ["raised", "theme", "shape", "color", "size", "smaller", "larger", "alt", "name"] }, { kind: "component", type: i2$1.NovoText, selector: "novo-text,[novo-text]", inputs: ["block"] }, { kind: "directive", type: i2$1.MarginDirective, selector: "[m],[margin],[marginTop],[marginRight],[marginBottom],[marginLeft],[marginX],[marginY],[mt],[mr],[mb],[ml],[mx],[my]", inputs: ["margin", "m", "marginLeft", "ml", "marginRight", "mr", "marginTop", "mt", "marginBottom", "mb", "marginX", "mx", "marginY", "my"] }, { kind: "directive", type: i2$1.GapDirective, selector: "[gap]", inputs: ["gap"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: CalendarDesignPage, decorators: [{
            type: Component,
            args: [{
                    selector: 'calendar-design-page',
                    template: `<h2>Usage</h2>
<novo-grid columns="2" align="start" gap="2rem">
<div>
<p>Calendars allow users to easily select dates. It comes in a handful of varieties based on the data the user is trying to enter, ie. A Single Date, Date Ranges, or Multiple Dates.</p>
<p>The <code>novo-calendar</code> component is used to select a dates in a reactive way to be used in the presentation or filtering of data within a view container. The <code>novo-calendar</code> component is not a FormControl itself but is use in the <code>novo-date-picker</code> component when selecting dates.</p>
</div>
<p><img src="assets/images/CalendarOverview.png" alt="placeholder"></p>
<div>
<h3>Use When</h3>
<ul class="contains-do-list">
<li class="bullhorn-do-item">
<p><novo-icon color="grass" mr="md" size="md">check</novo-icon><novo-text color="grass"> When the user needs to select a date to control or filter data on the page.</novo-text></p>
<p>The <code>novo-calendar</code> component by itself is just a way to store a date or date range value in the view model.  These date can be used to manipulate the UI.</p>
</li>
</ul>
</div>
<div>
<h3>Don′t Use When</h3>
<ul class="contains-do-list">
<li class="bullhorn-do-item">
<p><novo-icon color="grapefruit" mr="md" size="md">times</novo-icon><novo-text color="grapefruit"> When you are capturing dates as part of a Form.</novo-text></p>
<p>If you need to store the date(s) in a Form with validation, you should use the <code>date-picker</code> component, which wraps the calendar in a FormControl.</p>
</li>
</ul>
</div>
</novo-grid>
<h2>Anatomy</h2>
<novo-grid columns="2" align="start" gap="2rem">
<img src="assets/images/CalendarAnatomy.png" width="450">
<div>
<ol>
<li>
<p><strong>Month/Year Indicator</strong><br>
These indicators are clickable and will diplay a Month or Year selection view.</p>
</li>
<li>
<p><strong>Next/Prev Buttons</strong><br>
These buttons will control the current viewable month, allowing the user to move the view forward and backwards a month.</p>
</li>
<li>
<p><strong>Current Date</strong><br>
The current date should always have an indicator to help the user</p>
</li>
<li>
<p><strong>Selected Date</strong><br>
Selected Date(s) will be highlighted as such.  When a range of dates are selected the selection will appear continous.</p>
</li>
</ol>
</div>
</novo-grid>
<h2>Best Practices</h2>
<ul>
<li>Card dimensions are based on its content and the container in which it resides.</li>
<li>Apply custom heights and width to meet product requirements.</li>
<li>Avoid the appearance of nested cards, and therefore don’t use cards within a modal or another card.</li>
<li>When creating a group of cards, use consistently sized content within a grid or flex layout.</li>
</ul>
<h2>Behaviors</h2>
<novo-grid columns="2" align="start" gap="2rem">
<blockquote>
<div class="p"><img src="assets/images/CalendarMultiMonth.png" alt="placeholder"></div>
<div class="p"><strong>Multiple Months</strong></div>
<div class="p">Sometimes dates and ranges are more valueable to see over the multiple months,
for this reason the component allows you to show consecutive months in the view.
The view is responsive and will show the months horizontally first, to have a vertical
list just set a fixed width on the container.</div>
</blockquote>
<blockquote>
<div class="p"><img src="assets/images/CalendarRange.png" alt="placeholder"></div>
<div class="p"><strong>Range Selection</strong></div>
<div class="p">When selection a range of dates...</div>
</blockquote>
<blockquote>
<div class="p"><img src="assets/images/CalendarWeek.png" alt="placeholder"></div>
<div class="p"><strong>Week Selection</strong></div>
<div class="p">Sometimes selecting the by a fixed range of dates, like the week is necessary to ensure the right data is selected. For example, when selecting a pay period or work week.  Using this selection mode with the appropriate <code>weekStart</code> property to set which day the week starts on.</div>
</blockquote>
</novo-grid>
<h2>Accessibility</h2>
<ul>
<li>If using an illustrative image for the supplement content, it’s generally safe to use an empty or null alternative text for example alt=&quot;&quot;</li>
</ul>
`,
                    host: { class: 'markdown-page' },
                    standalone: false,
                }]
        }] });
class ButtonExamplesPage {
    constructor() {
        this.params = {};
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: ButtonExamplesPage, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: ButtonExamplesPage, isStandalone: false, selector: "button-examples-page", host: { classAttribute: "markdown-page" }, ngImport: i0, template: `<h2>Themes</h2>
<p>Bullhorn button themes were hand crafted to make your life easier. Most buttons used in the Bullhorn platform should utilize a <code>theme</code> attribute. Theme attributes provide access to every variation of Bullhorn UX approved buttons. Depending on the theme, some buttons may also utilize <code>icon</code>, <code>side</code>, and <code>inverse</code> attributes. Button are divided by function into four main categories: Primary, Secondary, Neutralizing, Subtractive. There are also three other button types that are independent of function: Dialogue, Icon, and Header.</p>
<h2>Colors</h2>
<p>Acceptable colors include <code>Primary</code>, <code>Success</code>, <code>Warning</code>, <code>Negative</code>, and <strong>all analytics colors</strong> which can be found in the color section of the style guide.</p>
<p><code-example example="button-overview"></code-example></p>
<h2>Primary</h2>
<p>Primary buttons are used to as primary calls-to-action. They should <strong>always</strong> get an <code>icon</code> attribute. Primary buttons with a &quot;success&quot; color <code>color=&quot;success&quot;</code> are used for saving and will almost always contain a &quot;check&quot; icon. Negative color primary buttons <code>color=&quot;negative&quot;</code> are used to delete, clear, or otherwise remove an extant element. Primary buttons should never have a <code>side</code> attribute.</p>
<!-- Example: ButtonOverviewExample -->
<p><code-example example="button-primary"></code-example></p>
<h2>Secondary</h2>
<p>Secondary buttons are used as an alternative Primary button or when there is a second major action on a page. They usually appears only in Overview and Slideout headers. This theme with an <code>inverse</code> attribute is often used as the action button in dropdown menus.</p>
<p><code-example example="button-secondary"></code-example></p>
<p>Secondary buttons can also get an <code>inverse</code> attribute for use on a colored background.</p>
<p><code-example example="button-inverse"></code-example></p>
<h2>Dialogue</h2>
<p>Similar to icon buttons, dialogue buttons require less visual dominance but often need additional helper text. Dialogue buttons <em>may</em> contain <strong>any</strong> icon and a <code>side</code> may be specified eg:<code>side=&quot;right&quot;</code> to place the icon on the right or left side of the text. Dialogue buttons may also use an <code>inverse</code> attribute to change its text color to white.</p>
<p><code-example example="button-dialogue"></code-example></p>
<h2>Standard</h2>
<p>Standard buttons are the most generic button style. Standard buttons by default are styled identically to standard buttons with a <code>color=&quot;light&quot;</code> attribute. Typically, a standard button is used to cancel an action, or to cease any additional progress. Although standard buttons <em>can</em> get an <code>icon</code> attribute, they should almost never be used with an icon. If your proposed design calls for a standard button with an icon, consider using a different button theme, like dialogue.</p>
<p><code-example example="button-standard"></code-example></p>
<h2>Icon</h2>
<p>The <code>icon</code> theme is used to create <strong>icon-only</strong> buttons, which contain no text. They can occupy any of the four main functions but require far less visual dominance than normal buttons. Icon buttons <strong>always</strong> have an <code>icon</code> attribute and can use <strong>any</strong> icon. Icon buttons may also use an <code>inverse</code> attribute to change its icon color to white.</p>
<p><code-example example="button-icon"></code-example></p>
<h2>Fab</h2>
<p>Fab buttons are used to as primary calls-to-action. They should <strong>always</strong> get an <code>icon</code> attribute. Fab buttons with a &quot;success&quot; color <code>color=&quot;success&quot;</code> are used for saving and will almost always contain a &quot;check&quot; icon. Negative color primary buttons <code>color=&quot;negative&quot;</code> are used to delete, clear, or otherwise remove an extant element. Fab buttons should never have a <code>side</code> attribute.</p>
<p><code-example example="button-fab"></code-example></p>
<h2>Dynamic</h2>
<p>Button parameters can be dynamically set and change at runtime. The styles should change and be applied when the values change.</p>
<p><code-example example="button-dynamic"></code-example></p>
<h2>Loading</h2>
<p>Buttons can display a loading state when given the &quot;loading&quot; parameter. When loading is true the button will be disabled and get a loading spinner.</p>
<p><code-example example="button-loading"></code-example></p>
<h2>Two Icons</h2>
<p>A second icon can be specified, and it will take the opposite side of the primary icon.</p>
<p><code-example example="button-two-icon"></code-example></p>
`, isInline: true, dependencies: [{ kind: "component", type: CodeExampleComponent, selector: "code-example", inputs: ["example"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: ButtonExamplesPage, decorators: [{
            type: Component,
            args: [{
                    selector: 'button-examples-page',
                    template: `<h2>Themes</h2>
<p>Bullhorn button themes were hand crafted to make your life easier. Most buttons used in the Bullhorn platform should utilize a <code>theme</code> attribute. Theme attributes provide access to every variation of Bullhorn UX approved buttons. Depending on the theme, some buttons may also utilize <code>icon</code>, <code>side</code>, and <code>inverse</code> attributes. Button are divided by function into four main categories: Primary, Secondary, Neutralizing, Subtractive. There are also three other button types that are independent of function: Dialogue, Icon, and Header.</p>
<h2>Colors</h2>
<p>Acceptable colors include <code>Primary</code>, <code>Success</code>, <code>Warning</code>, <code>Negative</code>, and <strong>all analytics colors</strong> which can be found in the color section of the style guide.</p>
<p><code-example example="button-overview"></code-example></p>
<h2>Primary</h2>
<p>Primary buttons are used to as primary calls-to-action. They should <strong>always</strong> get an <code>icon</code> attribute. Primary buttons with a &quot;success&quot; color <code>color=&quot;success&quot;</code> are used for saving and will almost always contain a &quot;check&quot; icon. Negative color primary buttons <code>color=&quot;negative&quot;</code> are used to delete, clear, or otherwise remove an extant element. Primary buttons should never have a <code>side</code> attribute.</p>
<!-- Example: ButtonOverviewExample -->
<p><code-example example="button-primary"></code-example></p>
<h2>Secondary</h2>
<p>Secondary buttons are used as an alternative Primary button or when there is a second major action on a page. They usually appears only in Overview and Slideout headers. This theme with an <code>inverse</code> attribute is often used as the action button in dropdown menus.</p>
<p><code-example example="button-secondary"></code-example></p>
<p>Secondary buttons can also get an <code>inverse</code> attribute for use on a colored background.</p>
<p><code-example example="button-inverse"></code-example></p>
<h2>Dialogue</h2>
<p>Similar to icon buttons, dialogue buttons require less visual dominance but often need additional helper text. Dialogue buttons <em>may</em> contain <strong>any</strong> icon and a <code>side</code> may be specified eg:<code>side=&quot;right&quot;</code> to place the icon on the right or left side of the text. Dialogue buttons may also use an <code>inverse</code> attribute to change its text color to white.</p>
<p><code-example example="button-dialogue"></code-example></p>
<h2>Standard</h2>
<p>Standard buttons are the most generic button style. Standard buttons by default are styled identically to standard buttons with a <code>color=&quot;light&quot;</code> attribute. Typically, a standard button is used to cancel an action, or to cease any additional progress. Although standard buttons <em>can</em> get an <code>icon</code> attribute, they should almost never be used with an icon. If your proposed design calls for a standard button with an icon, consider using a different button theme, like dialogue.</p>
<p><code-example example="button-standard"></code-example></p>
<h2>Icon</h2>
<p>The <code>icon</code> theme is used to create <strong>icon-only</strong> buttons, which contain no text. They can occupy any of the four main functions but require far less visual dominance than normal buttons. Icon buttons <strong>always</strong> have an <code>icon</code> attribute and can use <strong>any</strong> icon. Icon buttons may also use an <code>inverse</code> attribute to change its icon color to white.</p>
<p><code-example example="button-icon"></code-example></p>
<h2>Fab</h2>
<p>Fab buttons are used to as primary calls-to-action. They should <strong>always</strong> get an <code>icon</code> attribute. Fab buttons with a &quot;success&quot; color <code>color=&quot;success&quot;</code> are used for saving and will almost always contain a &quot;check&quot; icon. Negative color primary buttons <code>color=&quot;negative&quot;</code> are used to delete, clear, or otherwise remove an extant element. Fab buttons should never have a <code>side</code> attribute.</p>
<p><code-example example="button-fab"></code-example></p>
<h2>Dynamic</h2>
<p>Button parameters can be dynamically set and change at runtime. The styles should change and be applied when the values change.</p>
<p><code-example example="button-dynamic"></code-example></p>
<h2>Loading</h2>
<p>Buttons can display a loading state when given the &quot;loading&quot; parameter. When loading is true the button will be disabled and get a loading spinner.</p>
<p><code-example example="button-loading"></code-example></p>
<h2>Two Icons</h2>
<p>A second icon can be specified, and it will take the opposite side of the primary icon.</p>
<p><code-example example="button-two-icon"></code-example></p>
`,
                    host: { class: 'markdown-page' },
                    standalone: false,
                }]
        }] });
class ButtonDevelopPage {
    constructor() {
        this.params = {};
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: ButtonDevelopPage, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: ButtonDevelopPage, isStandalone: false, selector: "button-develop-page", host: { classAttribute: "markdown-page" }, ngImport: i0, template: `<h1>Technical Details</h1>
<ul>
<li><strong>source:</strong> <a href="https://github.com/bullhorn/novo-elements/blob/master/projects/novo-elements/src/elements/button">(github)</a></li>
<li><strong>module:</strong> <code>import &#123; NovoButtonModule &#125; from 'novo-elements';</code></li>
</ul>
<p><strong>Basic Usage</strong></p>
<pre><code class="language-html"><span class="hljs-tag">&lt;<span class="hljs-name">novo-button</span>&gt;</span>Save<span class="hljs-tag">&lt;/<span class="hljs-name">novo-button</span>&gt;</span>
</code></pre>
<h1>Roadmap</h1>
<ul class="contains-task-list">
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"> Improve Typing Support</li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"> Make color and theming consistent</li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"> Dark Mode</li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> Depreacted <code>theme</code> property in favor of <code>type</code></li>
</ul>
<h1>Changelog</h1>
<h3>6.0.0</h3>
<p><em>better sizing</em></p>
<h1>Components</h1>
<h2>NovoButtonElement <code>novo-button</code></h2>
<p>All tabs must be incapsulated in a <code>novo-nav</code> container. The nav will control the context and active tab.</p>
<h3>Properties</h3>
<p><props-table component="NovoButtonElement"></props-table></p>
`, isInline: true, dependencies: [{ kind: "component", type: PropsTableComponent, selector: "props-table", inputs: ["component", "kinds"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: ButtonDevelopPage, decorators: [{
            type: Component,
            args: [{
                    selector: 'button-develop-page',
                    template: `<h1>Technical Details</h1>
<ul>
<li><strong>source:</strong> <a href="https://github.com/bullhorn/novo-elements/blob/master/projects/novo-elements/src/elements/button">(github)</a></li>
<li><strong>module:</strong> <code>import &#123; NovoButtonModule &#125; from 'novo-elements';</code></li>
</ul>
<p><strong>Basic Usage</strong></p>
<pre><code class="language-html"><span class="hljs-tag">&lt;<span class="hljs-name">novo-button</span>&gt;</span>Save<span class="hljs-tag">&lt;/<span class="hljs-name">novo-button</span>&gt;</span>
</code></pre>
<h1>Roadmap</h1>
<ul class="contains-task-list">
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"> Improve Typing Support</li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"> Make color and theming consistent</li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"> Dark Mode</li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> Depreacted <code>theme</code> property in favor of <code>type</code></li>
</ul>
<h1>Changelog</h1>
<h3>6.0.0</h3>
<p><em>better sizing</em></p>
<h1>Components</h1>
<h2>NovoButtonElement <code>novo-button</code></h2>
<p>All tabs must be incapsulated in a <code>novo-nav</code> container. The nav will control the context and active tab.</p>
<h3>Properties</h3>
<p><props-table component="NovoButtonElement"></props-table></p>
`,
                    host: { class: 'markdown-page' },
                    standalone: false,
                }]
        }] });
class ButtonDesignPage {
    constructor() {
        this.params = {};
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: ButtonDesignPage, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: ButtonDesignPage, isStandalone: false, selector: "button-design-page", host: { classAttribute: "markdown-page" }, ngImport: i0, template: `<h2>Usage</h2>
<novo-grid columns="2" align="start" gap="2rem">
<div>
<p>A button clearly indicates a point of action for the user. Bullhorn buttons come in a variety of themes, custom tailored to fit your use-case.</p>
<p>Bullhorn button themes were hand crafted to make your life easier. Most buttons used in the Bullhorn platform should utilize a <code>theme</code> attribute. Theme attributes provide access to every variation of Bullhorn UX approved buttons. Depending on the theme, some buttons may also utilize <code>icon</code>, <code>side</code>, and <code>inverse</code> attributes. Button are divided by function into four main categories: Primary, Secondary, Neutralizing, Subtractive. There are also three other button types that are independent of function: Dialogue, Icon, and Header.</p>
</div>
<img src="assets/images/ButtonOverview.png"/>
<div>
<h3>Use When</h3>
<ul class="contains-do-list">
<li class="bullhorn-do-item"><novo-icon color="grass" mr="md" size="md">check</novo-icon><novo-text color="grass"> Affording interaction to key behaviors and features.</novo-text></li>
<li class="bullhorn-do-item"><novo-icon color="grass" mr="md" size="md">check</novo-icon><novo-text color="grass"> Confirming or submitting information entered into a form.</novo-text></li>
<li class="bullhorn-do-item"><novo-icon color="grass" mr="md" size="md">check</novo-icon><novo-text color="grass"> Cancelling an action.</novo-text></li>
<li class="bullhorn-do-item"><novo-icon color="grass" mr="md" size="md">check</novo-icon><novo-text color="grass"> Resetting a form or dataset.</novo-text></li>
<li class="bullhorn-do-item"><novo-icon color="grass" mr="md" size="md">check</novo-icon><novo-text color="grass"> Closing a container or section.</novo-text></li>
<li class="bullhorn-do-item"><novo-icon color="grass" mr="md" size="md">check</novo-icon><novo-text color="grass"> Opening a popover.</novo-text></li>
<li class="bullhorn-do-item"><novo-icon color="grass" mr="md" size="md">check</novo-icon><novo-text color="grass"> Moving forward or backward through a stepper workflow.</novo-text></li>
<li class="bullhorn-do-item"><novo-icon color="grass" mr="md" size="md">check</novo-icon><novo-text color="grass"> Creating an object within a group.</novo-text></li>
<li class="bullhorn-do-item"><novo-icon color="grass" mr="md" size="md">check</novo-icon><novo-text color="grass"> Applying a non-critical action to a dataset.</novo-text></li>
</ul>
</div>
<div>
<h3>Don′t Use When</h3>
<ul class="contains-do-list">
<li class="bullhorn-do-item"><novo-icon color="grapefruit" mr="md" size="md">times</novo-icon><novo-text color="grapefruit"> Displaying a collection of links to sections. Use links instead.</novo-text></li>
<li class="bullhorn-do-item"><novo-icon color="grapefruit" mr="md" size="md">times</novo-icon><novo-text color="grapefruit"> Linking to an external site. Use links instead.</novo-text></li>
</ul>
</div>
</novo-grid>
<h2>Anatomy</h2>
<novo-grid columns="2" align="start" gap="2rem">
<img src="assets/images/ButtonAnatomy.png" width="450">
<div>
<ol>
<li>
<p><strong>Container</strong><br>
The button container is displayed differently based on the type of button.</p>
</li>
<li>
<p><strong>Icon (Optional)</strong><br>
Icons can be display to the left or right of the text.</p>
</li>
<li>
<p><strong>Text (Optional)</strong><br>
Use text that conveys the action performed when clicked, this should be a Verb.</p>
</li>
</ol>
</div>
</novo-grid>
<h2>Types</h2>
<novo-grid columns="2" align="start" gap="2rem">
<div>
<ol>
<li>
<p><strong>Basic</strong><br>
The basic button is used when a light weight action is needed or when placed within a component that would make the button to noisy. ie.  When adding an actions button to a table row.</p>
</li>
<li>
<p><strong>Primary</strong><br>
Should be used to draw attention to the user that this is the primary call to action for the current view. eg. Save on an Edit Page.</p>
</li>
<li>
<p><strong>Secondary</strong><br>
This is used to convey Alternative actions that can be taken within a view that are important to the workflow.</p>
</li>
<li>
<p><strong>Standard</strong><br>
Used to provide a equally weighted option that is optional when displayed next to a primary or secondary button.  eg. Close button for a Modal.</p>
</li>
</ol>
</div>
<img src="assets/images/ButtonTypes.png" width="450">
</novo-grid>
<h2>Behaviors</h2>
<novo-grid columns="2" align="start" gap="2rem">
<blockquote>
<div class="p"><strong>Icons</strong></div>
<div class="p">Buttons can be configured with an Icon (<code>icon=&quot;check&quot;</code>) with <code>side=&quot;left&quot;</code> or <code>side=&quot;right&quot;</code>(default). The context should usually determine the placement of the icon. When the button text is a predicate, eg. <strong>Add Candidate</strong>, the <code>bhi-add</code> icon should be a prefix. When the button text is imperative, eg . <strong>Save</strong>, then icon should be display as a suffix. Exception may occur.</div>
</blockquote>
<p><img src="assets/images/ButtonWithIcon.png" alt="placeholder"></p>
<blockquote>
<div class="p"><strong>Only Icon</strong></div>
<div class="p">When spacing is limited and an actions meaning can be conveyed with just an icon, it is acceptable to use the <code>icon</code> or <code>fab</code> themed buttons.  In general icon buttons are used to help provide actions withing complex components, eg. next and previous in the <code>novo-calendar</code> or <code>novo-pagination</code> components.  The <code>novo-action</code> button is a wrapper for icon buttons to show in the <code>novo-header</code> action area.</div>
</blockquote>
<p><img src="assets/images/ButtonIcons.png" alt="placeholder"></p>
</novo-grid>
<h2>Accessibility</h2>
<p><strong>Implementation</strong></p>
<p>Always include an <code>aria-label</code> or <code>aria-labelledby</code> attribute when using icon buttons. When the button is disabled <code>aria-disabled=&quot;true&quot;</code> and <code>tabindex=&quot;-1&quot;</code> should be set automatically by the component.</p>
`, isInline: true, dependencies: [{ kind: "component", type: i2$1.NovoGridElement, selector: "novo-grid", inputs: ["direction", "align", "justify", "columns"] }, { kind: "component", type: i2$1.NovoIconComponent, selector: "novo-icon", inputs: ["raised", "theme", "shape", "color", "size", "smaller", "larger", "alt", "name"] }, { kind: "component", type: i2$1.NovoText, selector: "novo-text,[novo-text]", inputs: ["block"] }, { kind: "directive", type: i2$1.MarginDirective, selector: "[m],[margin],[marginTop],[marginRight],[marginBottom],[marginLeft],[marginX],[marginY],[mt],[mr],[mb],[ml],[mx],[my]", inputs: ["margin", "m", "marginLeft", "ml", "marginRight", "mr", "marginTop", "mt", "marginBottom", "mb", "marginX", "mx", "marginY", "my"] }, { kind: "directive", type: i2$1.GapDirective, selector: "[gap]", inputs: ["gap"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: ButtonDesignPage, decorators: [{
            type: Component,
            args: [{
                    selector: 'button-design-page',
                    template: `<h2>Usage</h2>
<novo-grid columns="2" align="start" gap="2rem">
<div>
<p>A button clearly indicates a point of action for the user. Bullhorn buttons come in a variety of themes, custom tailored to fit your use-case.</p>
<p>Bullhorn button themes were hand crafted to make your life easier. Most buttons used in the Bullhorn platform should utilize a <code>theme</code> attribute. Theme attributes provide access to every variation of Bullhorn UX approved buttons. Depending on the theme, some buttons may also utilize <code>icon</code>, <code>side</code>, and <code>inverse</code> attributes. Button are divided by function into four main categories: Primary, Secondary, Neutralizing, Subtractive. There are also three other button types that are independent of function: Dialogue, Icon, and Header.</p>
</div>
<img src="assets/images/ButtonOverview.png"/>
<div>
<h3>Use When</h3>
<ul class="contains-do-list">
<li class="bullhorn-do-item"><novo-icon color="grass" mr="md" size="md">check</novo-icon><novo-text color="grass"> Affording interaction to key behaviors and features.</novo-text></li>
<li class="bullhorn-do-item"><novo-icon color="grass" mr="md" size="md">check</novo-icon><novo-text color="grass"> Confirming or submitting information entered into a form.</novo-text></li>
<li class="bullhorn-do-item"><novo-icon color="grass" mr="md" size="md">check</novo-icon><novo-text color="grass"> Cancelling an action.</novo-text></li>
<li class="bullhorn-do-item"><novo-icon color="grass" mr="md" size="md">check</novo-icon><novo-text color="grass"> Resetting a form or dataset.</novo-text></li>
<li class="bullhorn-do-item"><novo-icon color="grass" mr="md" size="md">check</novo-icon><novo-text color="grass"> Closing a container or section.</novo-text></li>
<li class="bullhorn-do-item"><novo-icon color="grass" mr="md" size="md">check</novo-icon><novo-text color="grass"> Opening a popover.</novo-text></li>
<li class="bullhorn-do-item"><novo-icon color="grass" mr="md" size="md">check</novo-icon><novo-text color="grass"> Moving forward or backward through a stepper workflow.</novo-text></li>
<li class="bullhorn-do-item"><novo-icon color="grass" mr="md" size="md">check</novo-icon><novo-text color="grass"> Creating an object within a group.</novo-text></li>
<li class="bullhorn-do-item"><novo-icon color="grass" mr="md" size="md">check</novo-icon><novo-text color="grass"> Applying a non-critical action to a dataset.</novo-text></li>
</ul>
</div>
<div>
<h3>Don′t Use When</h3>
<ul class="contains-do-list">
<li class="bullhorn-do-item"><novo-icon color="grapefruit" mr="md" size="md">times</novo-icon><novo-text color="grapefruit"> Displaying a collection of links to sections. Use links instead.</novo-text></li>
<li class="bullhorn-do-item"><novo-icon color="grapefruit" mr="md" size="md">times</novo-icon><novo-text color="grapefruit"> Linking to an external site. Use links instead.</novo-text></li>
</ul>
</div>
</novo-grid>
<h2>Anatomy</h2>
<novo-grid columns="2" align="start" gap="2rem">
<img src="assets/images/ButtonAnatomy.png" width="450">
<div>
<ol>
<li>
<p><strong>Container</strong><br>
The button container is displayed differently based on the type of button.</p>
</li>
<li>
<p><strong>Icon (Optional)</strong><br>
Icons can be display to the left or right of the text.</p>
</li>
<li>
<p><strong>Text (Optional)</strong><br>
Use text that conveys the action performed when clicked, this should be a Verb.</p>
</li>
</ol>
</div>
</novo-grid>
<h2>Types</h2>
<novo-grid columns="2" align="start" gap="2rem">
<div>
<ol>
<li>
<p><strong>Basic</strong><br>
The basic button is used when a light weight action is needed or when placed within a component that would make the button to noisy. ie.  When adding an actions button to a table row.</p>
</li>
<li>
<p><strong>Primary</strong><br>
Should be used to draw attention to the user that this is the primary call to action for the current view. eg. Save on an Edit Page.</p>
</li>
<li>
<p><strong>Secondary</strong><br>
This is used to convey Alternative actions that can be taken within a view that are important to the workflow.</p>
</li>
<li>
<p><strong>Standard</strong><br>
Used to provide a equally weighted option that is optional when displayed next to a primary or secondary button.  eg. Close button for a Modal.</p>
</li>
</ol>
</div>
<img src="assets/images/ButtonTypes.png" width="450">
</novo-grid>
<h2>Behaviors</h2>
<novo-grid columns="2" align="start" gap="2rem">
<blockquote>
<div class="p"><strong>Icons</strong></div>
<div class="p">Buttons can be configured with an Icon (<code>icon=&quot;check&quot;</code>) with <code>side=&quot;left&quot;</code> or <code>side=&quot;right&quot;</code>(default). The context should usually determine the placement of the icon. When the button text is a predicate, eg. <strong>Add Candidate</strong>, the <code>bhi-add</code> icon should be a prefix. When the button text is imperative, eg . <strong>Save</strong>, then icon should be display as a suffix. Exception may occur.</div>
</blockquote>
<p><img src="assets/images/ButtonWithIcon.png" alt="placeholder"></p>
<blockquote>
<div class="p"><strong>Only Icon</strong></div>
<div class="p">When spacing is limited and an actions meaning can be conveyed with just an icon, it is acceptable to use the <code>icon</code> or <code>fab</code> themed buttons.  In general icon buttons are used to help provide actions withing complex components, eg. next and previous in the <code>novo-calendar</code> or <code>novo-pagination</code> components.  The <code>novo-action</code> button is a wrapper for icon buttons to show in the <code>novo-header</code> action area.</div>
</blockquote>
<p><img src="assets/images/ButtonIcons.png" alt="placeholder"></p>
</novo-grid>
<h2>Accessibility</h2>
<p><strong>Implementation</strong></p>
<p>Always include an <code>aria-label</code> or <code>aria-labelledby</code> attribute when using icon buttons. When the button is disabled <code>aria-disabled=&quot;true&quot;</code> and <code>tabindex=&quot;-1&quot;</code> should be set automatically by the component.</p>
`,
                    host: { class: 'markdown-page' },
                    standalone: false,
                }]
        }] });
class BreadcrumbExamplesPage {
    constructor() {
        this.params = {};
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: BreadcrumbExamplesPage, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: BreadcrumbExamplesPage, isStandalone: false, selector: "breadcrumb-examples-page", host: { classAttribute: "markdown-page" }, ngImport: i0, template: `<h2>Static</h2>
<p>Breadcrumbs can be use statical with the <code>novo-breadcrumb</code> and <code>novo-breadcrumb-item</code> elements. You can also set the breadcrumb item to have a menu too.</p>
<p><code-example example="breadcrumb-usage"></code-example></p>
<h2>Dynamic</h2>
<p>If you need to build the breadcrumbs dynamically based on data within the app you can use the <code>source</code> attribute pass the values of the breadcrumb.</p>
<p><code-example example="breadcrumb-source-usage"></code-example></p>
`, isInline: true, dependencies: [{ kind: "component", type: CodeExampleComponent, selector: "code-example", inputs: ["example"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: BreadcrumbExamplesPage, decorators: [{
            type: Component,
            args: [{
                    selector: 'breadcrumb-examples-page',
                    template: `<h2>Static</h2>
<p>Breadcrumbs can be use statical with the <code>novo-breadcrumb</code> and <code>novo-breadcrumb-item</code> elements. You can also set the breadcrumb item to have a menu too.</p>
<p><code-example example="breadcrumb-usage"></code-example></p>
<h2>Dynamic</h2>
<p>If you need to build the breadcrumbs dynamically based on data within the app you can use the <code>source</code> attribute pass the values of the breadcrumb.</p>
<p><code-example example="breadcrumb-source-usage"></code-example></p>
`,
                    host: { class: 'markdown-page' },
                    standalone: false,
                }]
        }] });
class BreadcrumbDevelopPage {
    constructor() {
        this.params = {};
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: BreadcrumbDevelopPage, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: BreadcrumbDevelopPage, isStandalone: false, selector: "breadcrumb-develop-page", host: { classAttribute: "markdown-page" }, ngImport: i0, template: `<h1>Technical Details</h1>
<ul>
<li><strong>source:</strong> <a href="https://github.com/bullhorn/novo-elements/blob/master/projects/novo-elements/src/elements/breadcrumbs">(github)</a></li>
<li><strong>module:</strong> <code>import &#123; NovoBreadcrumbModule &#125; form 'novo-elements';</code></li>
</ul>
<p><strong>Basic Usage</strong></p>
<pre><code class="language-html"><span class="hljs-tag">&lt;<span class="hljs-name">novo-breadcrumb</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">novo-breadcrumb-item</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">routerLink</span>=<span class="hljs-string">&quot;/components/get-start&quot;</span>&gt;</span>Home<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">novo-breadcrumb-item</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">novo-breadcrumb-item</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>Components<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">novo-breadcrumb-item</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">novo-breadcrumb</span>&gt;</span>
</code></pre>
<h1>Roadmap</h1>
<ul class="contains-task-list">
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"> Improve Typing Support</li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> Make color and theming consistent</li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> Dark Mode</li>
</ul>
<h1>Changelog</h1>
<h3>5.0.0</h3>
<p><em>new in v5</em></p>
<h1>Components</h1>
<h2>NovoBreadcrumbElement <code>novo-breadcrumb</code></h2>
<p>Container Element for the card. Can optionally contain <code>novo-card-header</code>, <code>novo-card-footer</code>, and <code>novo-card-content</code> to provide a better layout to the card when displaying more structured data.</p>
<h3>Properties</h3>
<table>
<thead>
<tr>
<th style="text-align:left">Name</th>
<th style="text-align:left">Type</th>
<th style="text-align:left">Default</th>
<th style="text-align:left">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">source</td>
<td style="text-align:left"><em>SourceConfig[]</em></td>
<td style="text-align:left">--</td>
<td style="text-align:left">used for dynamic breadcrumbs in a more imperative approach.</td>
</tr>
<tr>
<td style="text-align:left">separatorIcon</td>
<td style="text-align:left"><em>TemplateRef</em></td>
<td style="text-align:left">--</td>
<td style="text-align:left">defaults to template with slash character.</td>
</tr>
</tbody>
</table>
<h2>NovoBreadcrumbItemElement <code>novo-breadcrumb-item</code></h2>
<p>Represents an section in the breadcrumb list, can be an anchor tag to link to previous content, static text, or a dropdown...</p>
<h3>Properties</h3>
<table>
<thead>
<tr>
<th style="text-align:left">Name</th>
<th style="text-align:left">Type</th>
<th style="text-align:left">Default</th>
<th style="text-align:left">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">showMenu</td>
<td style="text-align:left">boolean</td>
<td style="text-align:left">false</td>
<td style="text-align:left">TBW</td>
</tr>
<tr>
<td style="text-align:left">customMenuTemplate</td>
<td style="text-align:left"><em>TemplateRef</em></td>
<td style="text-align:left">--</td>
<td style="text-align:left">TBW</td>
</tr>
<tr>
<td style="text-align:left">menuList</td>
<td style="text-align:left"><em>MenuConfig[]</em></td>
<td style="text-align:left">--</td>
<td style="text-align:left">TBW</td>
</tr>
<tr>
<td style="text-align:left">isSearch</td>
<td style="text-align:left"><em>boolean</em></td>
<td style="text-align:left">false</td>
<td style="text-align:left">TBW</td>
</tr>
</tbody>
</table>
`, isInline: true }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: BreadcrumbDevelopPage, decorators: [{
            type: Component,
            args: [{
                    selector: 'breadcrumb-develop-page',
                    template: `<h1>Technical Details</h1>
<ul>
<li><strong>source:</strong> <a href="https://github.com/bullhorn/novo-elements/blob/master/projects/novo-elements/src/elements/breadcrumbs">(github)</a></li>
<li><strong>module:</strong> <code>import &#123; NovoBreadcrumbModule &#125; form 'novo-elements';</code></li>
</ul>
<p><strong>Basic Usage</strong></p>
<pre><code class="language-html"><span class="hljs-tag">&lt;<span class="hljs-name">novo-breadcrumb</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">novo-breadcrumb-item</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">routerLink</span>=<span class="hljs-string">&quot;/components/get-start&quot;</span>&gt;</span>Home<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">novo-breadcrumb-item</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">novo-breadcrumb-item</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>Components<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">novo-breadcrumb-item</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">novo-breadcrumb</span>&gt;</span>
</code></pre>
<h1>Roadmap</h1>
<ul class="contains-task-list">
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"> Improve Typing Support</li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> Make color and theming consistent</li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> Dark Mode</li>
</ul>
<h1>Changelog</h1>
<h3>5.0.0</h3>
<p><em>new in v5</em></p>
<h1>Components</h1>
<h2>NovoBreadcrumbElement <code>novo-breadcrumb</code></h2>
<p>Container Element for the card. Can optionally contain <code>novo-card-header</code>, <code>novo-card-footer</code>, and <code>novo-card-content</code> to provide a better layout to the card when displaying more structured data.</p>
<h3>Properties</h3>
<table>
<thead>
<tr>
<th style="text-align:left">Name</th>
<th style="text-align:left">Type</th>
<th style="text-align:left">Default</th>
<th style="text-align:left">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">source</td>
<td style="text-align:left"><em>SourceConfig[]</em></td>
<td style="text-align:left">--</td>
<td style="text-align:left">used for dynamic breadcrumbs in a more imperative approach.</td>
</tr>
<tr>
<td style="text-align:left">separatorIcon</td>
<td style="text-align:left"><em>TemplateRef</em></td>
<td style="text-align:left">--</td>
<td style="text-align:left">defaults to template with slash character.</td>
</tr>
</tbody>
</table>
<h2>NovoBreadcrumbItemElement <code>novo-breadcrumb-item</code></h2>
<p>Represents an section in the breadcrumb list, can be an anchor tag to link to previous content, static text, or a dropdown...</p>
<h3>Properties</h3>
<table>
<thead>
<tr>
<th style="text-align:left">Name</th>
<th style="text-align:left">Type</th>
<th style="text-align:left">Default</th>
<th style="text-align:left">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">showMenu</td>
<td style="text-align:left">boolean</td>
<td style="text-align:left">false</td>
<td style="text-align:left">TBW</td>
</tr>
<tr>
<td style="text-align:left">customMenuTemplate</td>
<td style="text-align:left"><em>TemplateRef</em></td>
<td style="text-align:left">--</td>
<td style="text-align:left">TBW</td>
</tr>
<tr>
<td style="text-align:left">menuList</td>
<td style="text-align:left"><em>MenuConfig[]</em></td>
<td style="text-align:left">--</td>
<td style="text-align:left">TBW</td>
</tr>
<tr>
<td style="text-align:left">isSearch</td>
<td style="text-align:left"><em>boolean</em></td>
<td style="text-align:left">false</td>
<td style="text-align:left">TBW</td>
</tr>
</tbody>
</table>
`,
                    host: { class: 'markdown-page' },
                    standalone: false,
                }]
        }] });
class BreadcrumbDesignPage {
    constructor() {
        this.params = {};
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: BreadcrumbDesignPage, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: BreadcrumbDesignPage, isStandalone: false, selector: "breadcrumb-design-page", host: { classAttribute: "markdown-page" }, ngImport: i0, template: `<h2>Usage</h2>
<novo-grid columns="2" align="start" gap="2rem">
<div>
<p>A breadcrumb displays the current location within a hierarchy. It allows going back to states higher up in the hierarchy.</p>
</div>
<img src="assets/images/BreadcrumbsOverview.png"/>
</novo-grid>
<h3>Use When</h3>
<ul class="contains-do-list">
<li class="bullhorn-do-item"><novo-icon color="grass" mr="md" size="md">check</novo-icon><novo-text color="grass"> When the system has more than two layers in a hierarchy.</novo-text></li>
<li class="bullhorn-do-item"><novo-icon color="grass" mr="md" size="md">check</novo-icon><novo-text color="grass"> When you need to inform the user of where they are.</novo-text></li>
<li class="bullhorn-do-item"><novo-icon color="grass" mr="md" size="md">check</novo-icon><novo-text color="grass"> When the user may need to navigate back to a higher level.</novo-text></li>
<li class="bullhorn-do-item"><novo-icon color="grass" mr="md" size="md">check</novo-icon><novo-text color="grass"> When the application has multi-layer architecture.</novo-text></li>
</ul>
<h2>Best Practices</h2>
<ul>
<li>Ensure the content opened is highly correlated to the context that opened it. When showing a preview of a related content that can opened for various contexts, present the user with the data related to the context that opened it, rather than the same view.</li>
<li>When using an aside to present the user with a form, ensure that it is beneficial to have the current view still available to the user, if not consider opening a new page.</li>
</ul>
<h2>Accessibility</h2>
<p><strong>Implementation</strong></p>
<p>This component is intended to follow the <a href="https://www.w3.org/TR/wai-aria-practices/#breadcrumb">Aria Breadcrumb Design Pattern</a>.</p>
`, isInline: true, dependencies: [{ kind: "component", type: i2$1.NovoGridElement, selector: "novo-grid", inputs: ["direction", "align", "justify", "columns"] }, { kind: "component", type: i2$1.NovoIconComponent, selector: "novo-icon", inputs: ["raised", "theme", "shape", "color", "size", "smaller", "larger", "alt", "name"] }, { kind: "component", type: i2$1.NovoText, selector: "novo-text,[novo-text]", inputs: ["block"] }, { kind: "directive", type: i2$1.MarginDirective, selector: "[m],[margin],[marginTop],[marginRight],[marginBottom],[marginLeft],[marginX],[marginY],[mt],[mr],[mb],[ml],[mx],[my]", inputs: ["margin", "m", "marginLeft", "ml", "marginRight", "mr", "marginTop", "mt", "marginBottom", "mb", "marginX", "mx", "marginY", "my"] }, { kind: "directive", type: i2$1.GapDirective, selector: "[gap]", inputs: ["gap"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: BreadcrumbDesignPage, decorators: [{
            type: Component,
            args: [{
                    selector: 'breadcrumb-design-page',
                    template: `<h2>Usage</h2>
<novo-grid columns="2" align="start" gap="2rem">
<div>
<p>A breadcrumb displays the current location within a hierarchy. It allows going back to states higher up in the hierarchy.</p>
</div>
<img src="assets/images/BreadcrumbsOverview.png"/>
</novo-grid>
<h3>Use When</h3>
<ul class="contains-do-list">
<li class="bullhorn-do-item"><novo-icon color="grass" mr="md" size="md">check</novo-icon><novo-text color="grass"> When the system has more than two layers in a hierarchy.</novo-text></li>
<li class="bullhorn-do-item"><novo-icon color="grass" mr="md" size="md">check</novo-icon><novo-text color="grass"> When you need to inform the user of where they are.</novo-text></li>
<li class="bullhorn-do-item"><novo-icon color="grass" mr="md" size="md">check</novo-icon><novo-text color="grass"> When the user may need to navigate back to a higher level.</novo-text></li>
<li class="bullhorn-do-item"><novo-icon color="grass" mr="md" size="md">check</novo-icon><novo-text color="grass"> When the application has multi-layer architecture.</novo-text></li>
</ul>
<h2>Best Practices</h2>
<ul>
<li>Ensure the content opened is highly correlated to the context that opened it. When showing a preview of a related content that can opened for various contexts, present the user with the data related to the context that opened it, rather than the same view.</li>
<li>When using an aside to present the user with a form, ensure that it is beneficial to have the current view still available to the user, if not consider opening a new page.</li>
</ul>
<h2>Accessibility</h2>
<p><strong>Implementation</strong></p>
<p>This component is intended to follow the <a href="https://www.w3.org/TR/wai-aria-practices/#breadcrumb">Aria Breadcrumb Design Pattern</a>.</p>
`,
                    host: { class: 'markdown-page' },
                    standalone: false,
                }]
        }] });
class AvatarExamplesPage {
    constructor() {
        this.params = {};
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: AvatarExamplesPage, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: AvatarExamplesPage, isStandalone: false, selector: "avatar-examples-page", host: { classAttribute: "markdown-page" }, ngImport: i0, template: `<h2>Types</h2>
<h3>Avatar</h3>
<p>Avatars are images used to represent users and organizations. They typically are squares with rounded edges.</p>
<p><code-example example="avatar-usage"></code-example></p>
<h3>Avatar Stack</h3>
<p>AvatarStack is used to display more than one Avatar in an inline stack.</p>
<p><code-example example="avatar-stack-usage"></code-example></p>
`, isInline: true, dependencies: [{ kind: "component", type: CodeExampleComponent, selector: "code-example", inputs: ["example"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: AvatarExamplesPage, decorators: [{
            type: Component,
            args: [{
                    selector: 'avatar-examples-page',
                    template: `<h2>Types</h2>
<h3>Avatar</h3>
<p>Avatars are images used to represent users and organizations. They typically are squares with rounded edges.</p>
<p><code-example example="avatar-usage"></code-example></p>
<h3>Avatar Stack</h3>
<p>AvatarStack is used to display more than one Avatar in an inline stack.</p>
<p><code-example example="avatar-stack-usage"></code-example></p>
`,
                    host: { class: 'markdown-page' },
                    standalone: false,
                }]
        }] });
class AvatarDevelopPage {
    constructor() {
        this.params = {};
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: AvatarDevelopPage, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: AvatarDevelopPage, isStandalone: false, selector: "avatar-develop-page", host: { classAttribute: "markdown-page" }, ngImport: i0, template: `<h1>Technical Details</h1>
<ul>
<li><strong>source:</strong> <a href="https://github.com/bullhorn/novo-elements/blob/master/projects/novo-elements/src/elements/avatar">(github)</a></li>
<li><strong>module:</strong> <code>import &#123; NovoAvatarModule &#125; form 'novo-elements';</code></li>
</ul>
<p><strong>Basic Usage</strong></p>
<pre><code class="language-html"><span class="hljs-tag">&lt;<span class="hljs-name">novo-avatar</span> [<span class="hljs-attr">source</span>]=<span class="hljs-string">&quot;&#123;name: &#x27;Brian Kimball&#x27;&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">novo-avatar</span>&gt;</span>
</code></pre>
<h1>Roadmap</h1>
<ul class="contains-task-list">
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"> Improve Typing Support</li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> Make color and theming consistent</li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> Dark Mode</li>
</ul>
<h1>Changelog</h1>
<h3>5.0.0</h3>
<p><em>added in this version</em></p>
<h1>Components</h1>
<h2>NovoAvatarElement <code>novo-avatar</code></h2>
<p>All tabs must be incapsulated in a <code>novo-nav</code> container. The nav will control the context and active tab.</p>
<h3>Properties</h3>
<table>
<thead>
<tr>
<th style="text-align:left">Name</th>
<th style="text-align:left">Type</th>
<th style="text-align:left">Default</th>
<th style="text-align:left">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">theme</td>
<td style="text-align:left"><em>String</em></td>
<td style="text-align:left">--</td>
<td style="text-align:left">Color theme used.</td>
</tr>
<tr>
<td style="text-align:left">color</td>
<td style="text-align:left"><em>String</em></td>
<td style="text-align:left">--</td>
<td style="text-align:left">Color theme used.</td>
</tr>
<tr>
<td style="text-align:left">label</td>
<td style="text-align:left"><em>String</em></td>
<td style="text-align:left">--</td>
<td style="text-align:left">refs to the <code>novo-tab-outlet</code> these navigation controls.</td>
</tr>
<tr>
<td style="text-align:left">source</td>
<td style="text-align:left"><em>Object</em></td>
<td style="text-align:left">--</td>
<td style="text-align:left">Object containing props used to generate avatar. <code>name</code>, <code>firstName</code>, or <code>profileImage</code></td>
</tr>
<tr>
<td style="text-align:left">size</td>
<td style="text-align:left"><em>Size</em></td>
<td style="text-align:left">'medium'</td>
<td style="text-align:left">Determines the height and widht of the avatar. (<code>small</code>, <code>medium</code> or <code>large</code>)</td>
</tr>
</tbody>
</table>
<h2>NovoAvatarStackElement <code>novo-avatar-stack</code></h2>
<p>An avatar stack displays a number of avatars grouped together in a row or list.</p>
<h3>Properties</h3>
<table>
<thead>
<tr>
<th style="text-align:left">Name</th>
<th style="text-align:left">Type</th>
<th style="text-align:left">Default</th>
<th style="text-align:left">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">total</td>
<td style="text-align:left"><em>Number</em></td>
<td style="text-align:left">--</td>
<td style="text-align:left">Used to calculate <code>+N</code> icon based on ViewChildren added</td>
</tr>
</tbody>
</table>
`, isInline: true }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: AvatarDevelopPage, decorators: [{
            type: Component,
            args: [{
                    selector: 'avatar-develop-page',
                    template: `<h1>Technical Details</h1>
<ul>
<li><strong>source:</strong> <a href="https://github.com/bullhorn/novo-elements/blob/master/projects/novo-elements/src/elements/avatar">(github)</a></li>
<li><strong>module:</strong> <code>import &#123; NovoAvatarModule &#125; form 'novo-elements';</code></li>
</ul>
<p><strong>Basic Usage</strong></p>
<pre><code class="language-html"><span class="hljs-tag">&lt;<span class="hljs-name">novo-avatar</span> [<span class="hljs-attr">source</span>]=<span class="hljs-string">&quot;&#123;name: &#x27;Brian Kimball&#x27;&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">novo-avatar</span>&gt;</span>
</code></pre>
<h1>Roadmap</h1>
<ul class="contains-task-list">
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"> Improve Typing Support</li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> Make color and theming consistent</li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> Dark Mode</li>
</ul>
<h1>Changelog</h1>
<h3>5.0.0</h3>
<p><em>added in this version</em></p>
<h1>Components</h1>
<h2>NovoAvatarElement <code>novo-avatar</code></h2>
<p>All tabs must be incapsulated in a <code>novo-nav</code> container. The nav will control the context and active tab.</p>
<h3>Properties</h3>
<table>
<thead>
<tr>
<th style="text-align:left">Name</th>
<th style="text-align:left">Type</th>
<th style="text-align:left">Default</th>
<th style="text-align:left">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">theme</td>
<td style="text-align:left"><em>String</em></td>
<td style="text-align:left">--</td>
<td style="text-align:left">Color theme used.</td>
</tr>
<tr>
<td style="text-align:left">color</td>
<td style="text-align:left"><em>String</em></td>
<td style="text-align:left">--</td>
<td style="text-align:left">Color theme used.</td>
</tr>
<tr>
<td style="text-align:left">label</td>
<td style="text-align:left"><em>String</em></td>
<td style="text-align:left">--</td>
<td style="text-align:left">refs to the <code>novo-tab-outlet</code> these navigation controls.</td>
</tr>
<tr>
<td style="text-align:left">source</td>
<td style="text-align:left"><em>Object</em></td>
<td style="text-align:left">--</td>
<td style="text-align:left">Object containing props used to generate avatar. <code>name</code>, <code>firstName</code>, or <code>profileImage</code></td>
</tr>
<tr>
<td style="text-align:left">size</td>
<td style="text-align:left"><em>Size</em></td>
<td style="text-align:left">'medium'</td>
<td style="text-align:left">Determines the height and widht of the avatar. (<code>small</code>, <code>medium</code> or <code>large</code>)</td>
</tr>
</tbody>
</table>
<h2>NovoAvatarStackElement <code>novo-avatar-stack</code></h2>
<p>An avatar stack displays a number of avatars grouped together in a row or list.</p>
<h3>Properties</h3>
<table>
<thead>
<tr>
<th style="text-align:left">Name</th>
<th style="text-align:left">Type</th>
<th style="text-align:left">Default</th>
<th style="text-align:left">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">total</td>
<td style="text-align:left"><em>Number</em></td>
<td style="text-align:left">--</td>
<td style="text-align:left">Used to calculate <code>+N</code> icon based on ViewChildren added</td>
</tr>
</tbody>
</table>
`,
                    host: { class: 'markdown-page' },
                    standalone: false,
                }]
        }] });
class AvatarDesignPage {
    constructor() {
        this.params = {};
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: AvatarDesignPage, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: AvatarDesignPage, isStandalone: false, selector: "avatar-design-page", host: { classAttribute: "markdown-page" }, ngImport: i0, template: `<h2>Usage</h2>
<novo-grid columns="2" align="start" gap="2rem">
<div>
<p>Avatars are images used to represent users and organizations. They typically are squares with rounded edges.</p>
<p>An avatar acts as a proxy for a user or entity (such as a company) in a product. They're often combined with status or presence indicators to give more context. Users generally upload their own image, otherwise, a default image is displayed</p>
</div>
<img src="assets/images/AvatarOverview.png"/>
</novo-grid>
<h2>Best Practices</h2>
<ul>
<li>circular avatars to quickly identify people (users, contact)</li>
<li>square avatars to help identify other entities like companies, jobs</li>
</ul>
<h2>Patterns</h2>
<novo-grid columns="2" align="start" gap="2rem">
<blockquote>
<div class="p"><strong>Avatar Menu</strong></div>
<div class="p">Avatars are a great place to attach a menu with options that you can perform against that user.  This is a common web paradigm that the user will understand intuitively.</div>
</blockquote>
<p><img src="assets/images/AvatarMenu.png" alt="placeholder"></p>
<blockquote>
<div class="p"><strong>Avatar Stack</strong></div>
<div class="p">Avatars are a great place to attach a menu with options that you can perform against that user.  This is a common web paradigm that the user will understand intuitively.</div>
</blockquote>
<p><img src="assets/images/AvatarStack.gif" alt="placeholder"></p>
</novo-grid>
<h2>Accessibility</h2>
<p><strong>ARIA Implementation</strong></p>
<p>Always include an <code>alt</code> attribute describing the information that is visually displayed in the image.</p>
`, isInline: true, dependencies: [{ kind: "component", type: i2$1.NovoGridElement, selector: "novo-grid", inputs: ["direction", "align", "justify", "columns"] }, { kind: "directive", type: i2$1.GapDirective, selector: "[gap]", inputs: ["gap"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: AvatarDesignPage, decorators: [{
            type: Component,
            args: [{
                    selector: 'avatar-design-page',
                    template: `<h2>Usage</h2>
<novo-grid columns="2" align="start" gap="2rem">
<div>
<p>Avatars are images used to represent users and organizations. They typically are squares with rounded edges.</p>
<p>An avatar acts as a proxy for a user or entity (such as a company) in a product. They're often combined with status or presence indicators to give more context. Users generally upload their own image, otherwise, a default image is displayed</p>
</div>
<img src="assets/images/AvatarOverview.png"/>
</novo-grid>
<h2>Best Practices</h2>
<ul>
<li>circular avatars to quickly identify people (users, contact)</li>
<li>square avatars to help identify other entities like companies, jobs</li>
</ul>
<h2>Patterns</h2>
<novo-grid columns="2" align="start" gap="2rem">
<blockquote>
<div class="p"><strong>Avatar Menu</strong></div>
<div class="p">Avatars are a great place to attach a menu with options that you can perform against that user.  This is a common web paradigm that the user will understand intuitively.</div>
</blockquote>
<p><img src="assets/images/AvatarMenu.png" alt="placeholder"></p>
<blockquote>
<div class="p"><strong>Avatar Stack</strong></div>
<div class="p">Avatars are a great place to attach a menu with options that you can perform against that user.  This is a common web paradigm that the user will understand intuitively.</div>
</blockquote>
<p><img src="assets/images/AvatarStack.gif" alt="placeholder"></p>
</novo-grid>
<h2>Accessibility</h2>
<p><strong>ARIA Implementation</strong></p>
<p>Always include an <code>alt</code> attribute describing the information that is visually displayed in the image.</p>
`,
                    host: { class: 'markdown-page' },
                    standalone: false,
                }]
        }] });
class AutocompleteExamplesPage {
    constructor() {
        this.params = {};
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: AutocompleteExamplesPage, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: AutocompleteExamplesPage, isStandalone: false, selector: "autocomplete-examples-page", host: { classAttribute: "markdown-page" }, ngImport: i0, template: `<h2>Autocomplete</h2>
<p>tbw...</p>
<p><code-example example="autocomplete-usage"></code-example></p>
<h2>Autocomplete with Chips</h2>
<p>tbw...</p>
<p><code-example example="autocomplete-with-chips"></code-example></p>
<h2>Autocomplete with Stacked Chips</h2>
<p>tbw...</p>
<p><code-example example="autocomplete-stacked-chips"></code-example></p>
<h2>Autocomplete Textarea</h2>
<p>tbw...</p>
<p><code-example example="autocomplete-textarea"></code-example></p>
`, isInline: true, dependencies: [{ kind: "component", type: CodeExampleComponent, selector: "code-example", inputs: ["example"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: AutocompleteExamplesPage, decorators: [{
            type: Component,
            args: [{
                    selector: 'autocomplete-examples-page',
                    template: `<h2>Autocomplete</h2>
<p>tbw...</p>
<p><code-example example="autocomplete-usage"></code-example></p>
<h2>Autocomplete with Chips</h2>
<p>tbw...</p>
<p><code-example example="autocomplete-with-chips"></code-example></p>
<h2>Autocomplete with Stacked Chips</h2>
<p>tbw...</p>
<p><code-example example="autocomplete-stacked-chips"></code-example></p>
<h2>Autocomplete Textarea</h2>
<p>tbw...</p>
<p><code-example example="autocomplete-textarea"></code-example></p>
`,
                    host: { class: 'markdown-page' },
                    standalone: false,
                }]
        }] });
class AutocompleteDevelopPage {
    constructor() {
        this.params = {};
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: AutocompleteDevelopPage, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: AutocompleteDevelopPage, isStandalone: false, selector: "autocomplete-develop-page", host: { classAttribute: "markdown-page" }, ngImport: i0, template: `<h1>Technical Details</h1>
<ul>
<li><strong>source:</strong> <a href="https://github.com/bullhorn/novo-elements/blob/master/projects/novo-elements/src/elements/loading">(github)</a></li>
<li><strong>module:</strong> <strong>part of</strong> <code>NovoFieldModule</code></li>
</ul>
<p><strong>Usage</strong></p>
<pre><code class="language-html"><span class="hljs-tag">&lt;<span class="hljs-name">novo-field</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;example-full-width&quot;</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">novo-label</span>&gt;</span>Number<span class="hljs-tag">&lt;/<span class="hljs-name">novo-label</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">novoInput</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;Pick one&quot;</span> <span class="hljs-attr">autocomplete</span>=<span class="hljs-string">&quot;off&quot;</span> /&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">novo-autocomplete</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">novo-option</span> [<span class="hljs-attr">value</span>]=<span class="hljs-string">&quot;1&quot;</span>&gt;</span>One<span class="hljs-tag">&lt;/<span class="hljs-name">novo-option</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">novo-option</span> [<span class="hljs-attr">value</span>]=<span class="hljs-string">&quot;2&quot;</span>&gt;</span>Two<span class="hljs-tag">&lt;/<span class="hljs-name">novo-option</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">novo-option</span> [<span class="hljs-attr">value</span>]=<span class="hljs-string">&quot;3&quot;</span>&gt;</span>Three<span class="hljs-tag">&lt;/<span class="hljs-name">novo-option</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">novo-autocomplete</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">novo-field</span>&gt;</span>
</code></pre>
<h1>Roadmap</h1>
<ul class="contains-task-list">
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> Default filtering of options</li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> Dark Mode</li>
</ul>
<h1>Components</h1>
<h2>NovoAutocompleteElement <code>novo-autocomplete</code></h2>
<p>The <code>novo-autocomplete</code> component automatically links its list of values to the the novoInput of the <code>novo-field</code>. Subscribe to value changes inorder to update your options list.</p>
<h3>Properties</h3>
<p><props-table component="NovoAutocompleteElement"></props-table></p>
`, isInline: true, dependencies: [{ kind: "component", type: PropsTableComponent, selector: "props-table", inputs: ["component", "kinds"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: AutocompleteDevelopPage, decorators: [{
            type: Component,
            args: [{
                    selector: 'autocomplete-develop-page',
                    template: `<h1>Technical Details</h1>
<ul>
<li><strong>source:</strong> <a href="https://github.com/bullhorn/novo-elements/blob/master/projects/novo-elements/src/elements/loading">(github)</a></li>
<li><strong>module:</strong> <strong>part of</strong> <code>NovoFieldModule</code></li>
</ul>
<p><strong>Usage</strong></p>
<pre><code class="language-html"><span class="hljs-tag">&lt;<span class="hljs-name">novo-field</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;example-full-width&quot;</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">novo-label</span>&gt;</span>Number<span class="hljs-tag">&lt;/<span class="hljs-name">novo-label</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">novoInput</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;Pick one&quot;</span> <span class="hljs-attr">autocomplete</span>=<span class="hljs-string">&quot;off&quot;</span> /&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">novo-autocomplete</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">novo-option</span> [<span class="hljs-attr">value</span>]=<span class="hljs-string">&quot;1&quot;</span>&gt;</span>One<span class="hljs-tag">&lt;/<span class="hljs-name">novo-option</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">novo-option</span> [<span class="hljs-attr">value</span>]=<span class="hljs-string">&quot;2&quot;</span>&gt;</span>Two<span class="hljs-tag">&lt;/<span class="hljs-name">novo-option</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">novo-option</span> [<span class="hljs-attr">value</span>]=<span class="hljs-string">&quot;3&quot;</span>&gt;</span>Three<span class="hljs-tag">&lt;/<span class="hljs-name">novo-option</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">novo-autocomplete</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">novo-field</span>&gt;</span>
</code></pre>
<h1>Roadmap</h1>
<ul class="contains-task-list">
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> Default filtering of options</li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> Dark Mode</li>
</ul>
<h1>Components</h1>
<h2>NovoAutocompleteElement <code>novo-autocomplete</code></h2>
<p>The <code>novo-autocomplete</code> component automatically links its list of values to the the novoInput of the <code>novo-field</code>. Subscribe to value changes inorder to update your options list.</p>
<h3>Properties</h3>
<p><props-table component="NovoAutocompleteElement"></props-table></p>
`,
                    host: { class: 'markdown-page' },
                    standalone: false,
                }]
        }] });
class AutocompleteDesignPage {
    constructor() {
        this.params = {};
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: AutocompleteDesignPage, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: AutocompleteDesignPage, isStandalone: false, selector: "autocomplete-design-page", host: { classAttribute: "markdown-page" }, ngImport: i0, template: `<h2>Usage</h2>
<novo-grid columns="2" align="start" gap="2rem">
<div>
<p>The autocomplete component is designed to provide a list of options as the user types that can be used to set the field value.  The component can be used to set more complex data to the form. Usually the input does not require a valid option to be selected.</p>
</div>
<img src="assets/images/AutocompleteOverview.png"/>
<div>
<h3>Use When</h3>
<ul class="contains-do-list">
<li class="bullhorn-do-item"><novo-icon color="grass" mr="md" size="md">check</novo-icon><novo-text color="grass"> A list of possible values are known but not required.</novo-text></li>
</ul>
</div>
<div>
<h3>Don′t Use When</h3>
<ul class="contains-do-list">
<li class="bullhorn-do-item"><novo-icon color="grapefruit" mr="md" size="md">times</novo-icon><novo-text color="grapefruit"> The form field requires the value to be one of the predefined options. use a select or picker instead.</novo-text></li>
</ul>
</div>
</novo-grid>
<h2>Best Practices</h2>
<ul>
<li>Use spinner to display that an action invoked by the user is performing but not complete.</li>
<li>Use loading when loading data from the server to intialize content.</li>
<li>If a spinner is triggered by a button, place the spinner in the button, and disable the button while the spinner is visible.</li>
<li>If only a portion of a page is loading new content or being updated, place the loading element in that part of the page.</li>
<li>There should only be a single loading element on a page at one time.</li>
</ul>
<h2>Behaviors</h2>
<novo-grid columns="2" align="start" gap="2rem">
<blockquote>
<div class="p"><strong>Sizing</strong></div>
<div class="p">A popovers width should match the width of the input it is correlated to a min width of 15rem is set to avoid readability issues.  The popover have a fixed height and should be scrollable, a persistent scrollbar should be visible if this is the case.</div>
</blockquote>
<blockquote>
<div class="p"><strong>Multiple Selections</strong></div>
<div class="p">When the input allows multiple selection the autocomplete popover should add values to the input as a comma-separated list.  The component can be paired with a chip-list as-well.</div>
</blockquote>
</novo-grid>
<h2>Accessibility</h2>
<p><strong>KeyBoard Controls</strong></p>
<p>The user should be able to use the <code>up</code> and <code>own</code> arrows to navigate between options and press <code>enter</code> to select the active option.</p>
<p><strong>Implementation</strong></p>
<p>The component should follow the <a href="https://www.w3.org/TR/wai-aria-practices/examples/combobox/aria1.1pattern/listbox-combo.html">ARIA combobox interaction</a> pattern and have a role of <code>combobox</code>.</p>
`, isInline: true, dependencies: [{ kind: "component", type: i2$1.NovoGridElement, selector: "novo-grid", inputs: ["direction", "align", "justify", "columns"] }, { kind: "component", type: i2$1.NovoIconComponent, selector: "novo-icon", inputs: ["raised", "theme", "shape", "color", "size", "smaller", "larger", "alt", "name"] }, { kind: "component", type: i2$1.NovoText, selector: "novo-text,[novo-text]", inputs: ["block"] }, { kind: "directive", type: i2$1.MarginDirective, selector: "[m],[margin],[marginTop],[marginRight],[marginBottom],[marginLeft],[marginX],[marginY],[mt],[mr],[mb],[ml],[mx],[my]", inputs: ["margin", "m", "marginLeft", "ml", "marginRight", "mr", "marginTop", "mt", "marginBottom", "mb", "marginX", "mx", "marginY", "my"] }, { kind: "directive", type: i2$1.GapDirective, selector: "[gap]", inputs: ["gap"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: AutocompleteDesignPage, decorators: [{
            type: Component,
            args: [{
                    selector: 'autocomplete-design-page',
                    template: `<h2>Usage</h2>
<novo-grid columns="2" align="start" gap="2rem">
<div>
<p>The autocomplete component is designed to provide a list of options as the user types that can be used to set the field value.  The component can be used to set more complex data to the form. Usually the input does not require a valid option to be selected.</p>
</div>
<img src="assets/images/AutocompleteOverview.png"/>
<div>
<h3>Use When</h3>
<ul class="contains-do-list">
<li class="bullhorn-do-item"><novo-icon color="grass" mr="md" size="md">check</novo-icon><novo-text color="grass"> A list of possible values are known but not required.</novo-text></li>
</ul>
</div>
<div>
<h3>Don′t Use When</h3>
<ul class="contains-do-list">
<li class="bullhorn-do-item"><novo-icon color="grapefruit" mr="md" size="md">times</novo-icon><novo-text color="grapefruit"> The form field requires the value to be one of the predefined options. use a select or picker instead.</novo-text></li>
</ul>
</div>
</novo-grid>
<h2>Best Practices</h2>
<ul>
<li>Use spinner to display that an action invoked by the user is performing but not complete.</li>
<li>Use loading when loading data from the server to intialize content.</li>
<li>If a spinner is triggered by a button, place the spinner in the button, and disable the button while the spinner is visible.</li>
<li>If only a portion of a page is loading new content or being updated, place the loading element in that part of the page.</li>
<li>There should only be a single loading element on a page at one time.</li>
</ul>
<h2>Behaviors</h2>
<novo-grid columns="2" align="start" gap="2rem">
<blockquote>
<div class="p"><strong>Sizing</strong></div>
<div class="p">A popovers width should match the width of the input it is correlated to a min width of 15rem is set to avoid readability issues.  The popover have a fixed height and should be scrollable, a persistent scrollbar should be visible if this is the case.</div>
</blockquote>
<blockquote>
<div class="p"><strong>Multiple Selections</strong></div>
<div class="p">When the input allows multiple selection the autocomplete popover should add values to the input as a comma-separated list.  The component can be paired with a chip-list as-well.</div>
</blockquote>
</novo-grid>
<h2>Accessibility</h2>
<p><strong>KeyBoard Controls</strong></p>
<p>The user should be able to use the <code>up</code> and <code>own</code> arrows to navigate between options and press <code>enter</code> to select the active option.</p>
<p><strong>Implementation</strong></p>
<p>The component should follow the <a href="https://www.w3.org/TR/wai-aria-practices/examples/combobox/aria1.1pattern/listbox-combo.html">ARIA combobox interaction</a> pattern and have a role of <code>combobox</code>.</p>
`,
                    host: { class: 'markdown-page' },
                    standalone: false,
                }]
        }] });
class AsideExamplesPage {
    constructor() {
        this.params = {};
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: AsideExamplesPage, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: AsideExamplesPage, isStandalone: false, selector: "aside-examples-page", host: { classAttribute: "markdown-page" }, ngImport: i0, template: `<h2>Custom</h2>
<p>In the case where &quot;Success&quot;, &quot;Warning&quot;, and &quot;Error&quot; notifications aren't enough, use the custom notification. Custom notifications allow any of the Bullhorn Icons to be used in the notification.</p>
<p><code-example example="aside-usage"></code-example></p>
<h2>Add</h2>
<p>Add modals have a colored title bar based on the record type being created. Additionally, due to a greater than average amount of content, they have fixed footers.</p>
<p><code-example example="aside-form"></code-example></p>
`, isInline: true, dependencies: [{ kind: "component", type: CodeExampleComponent, selector: "code-example", inputs: ["example"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: AsideExamplesPage, decorators: [{
            type: Component,
            args: [{
                    selector: 'aside-examples-page',
                    template: `<h2>Custom</h2>
<p>In the case where &quot;Success&quot;, &quot;Warning&quot;, and &quot;Error&quot; notifications aren't enough, use the custom notification. Custom notifications allow any of the Bullhorn Icons to be used in the notification.</p>
<p><code-example example="aside-usage"></code-example></p>
<h2>Add</h2>
<p>Add modals have a colored title bar based on the record type being created. Additionally, due to a greater than average amount of content, they have fixed footers.</p>
<p><code-example example="aside-form"></code-example></p>
`,
                    host: { class: 'markdown-page' },
                    standalone: false,
                }]
        }] });
class AsideDevelopPage {
    constructor() {
        this.params = {};
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: AsideDevelopPage, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: AsideDevelopPage, isStandalone: false, selector: "aside-develop-page", host: { classAttribute: "markdown-page" }, ngImport: i0, template: `<h1>Technical Details</h1>
<ul>
<li><strong>source:</strong> <a href="https://github.com/bullhorn/novo-elements/blob/master/projects/novo-elements/src/elements/aside">(github)</a></li>
<li><strong>module:</strong> <code>import &#123; NovoAsideModule &#125; from 'novo-elements';</code></li>
<li><strong>service:</strong> <code>import &#123; NovoAsideService &#125; form 'novo-elements/aside';</code></li>
</ul>
<h1>Roadmap</h1>
<ul class="contains-task-list">
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> Better support for common patterns</li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> Investigate Sharing injection tokens with Modal</li>
</ul>
<h1>Changelog</h1>
<h3>5.0.0</h3>
<p><em>Added in v5.0.0</em></p>
<h2>Properties</h2>
<p><em>No Properties</em></p>
<h1>Services</h1>
<h2>NovoAsideService</h2>
<p>Asides (a.k.a. Slideout) should be invoked via <code>NovoAsideService</code> and therefore all properties should be private or internal. Any values that need to be passed to the your <code>aside</code> instance should be passed by the service and will be available in your slideout via <code>NovoAsideRef.params</code>.</p>
<pre><code class="language-typescript"><span class="hljs-meta">&#64;Component</span>(&#123;...&#125;)
<span class="hljs-keyword">class</span> <span class="hljs-title class_">RandomComponent</span> &#123;
  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"><span class="hljs-keyword">private</span> <span class="hljs-attr">aside</span>:<span class="hljs-title class_">NovoAsideService</span></span>) &#123;&#125;
  <span class="hljs-title function_">handleAction</span>(<span class="hljs-params"></span>) &#123;
    <span class="hljs-keyword">const</span> ref = <span class="hljs-variable language_">this</span>.<span class="hljs-property">aside</span>.<span class="hljs-title function_">open</span>(<span class="hljs-title class_">AddFormSlideout</span>, &#123; <span class="hljs-attr">record</span>: <span class="hljs-number">123</span> &#125;);
    <span class="hljs-comment">/* you can listen to the close event */</span>
    ref.<span class="hljs-property">onClosed</span>.<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">result</span>) =&gt;</span> &#123;
      <span class="hljs-comment">/* result is the argument sent via the ref */</span>
      <span class="hljs-keyword">if</span> (res === <span class="hljs-string">&#x27;success&#x27;</span>) &#123;
        <span class="hljs-comment">/* perfom some action */</span>
      &#125;
    &#125;);
    <span class="hljs-comment">/* close the slideout from the parent */</span>
    ref.<span class="hljs-title function_">close</span>(<span class="hljs-string">&#x27;success&#x27;</span>)
  &#125;
&#125;
</code></pre>
<h3>Methods</h3>
<h4><strong>open(component, params)</strong></h4>
<p>Used to open all modals via the service. Use <code>params</code> to pass values to you component.</p>
<table>
<thead>
<tr>
<th style="text-align:left">Name</th>
<th style="text-align:left">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">component</td>
<td style="text-align:left"><em>Class</em><br>The angular component which represents the Modal to be opened.</td>
</tr>
<tr>
<td style="text-align:left">params</td>
<td style="text-align:left"><em>Object</em><br><strong>Optional</strong> arguments that will be injected into <code>NovoAsideRef.params</code></td>
</tr>
</tbody>
</table>
<p><em>Note:</em> All modal components should be declared as <code>entryComponents</code> in the module.</p>
<h2>NovoAsideRef&lt;T&gt;</h2>
<p><code>NovoAsideRef</code> should be injected into your modal component and all pass params can be accessed in the <code>params</code> property.</p>
<pre><code class="language-typescript"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">AddFormParams</span> &#123;
  <span class="hljs-attr">record</span>: <span class="hljs-built_in">number</span>;
&#125;
<span class="hljs-meta">&#64;Component</span>(&#123;&#125;)
<span class="hljs-keyword">class</span> <span class="hljs-title class_">AddFormSlideout</span> &#123;
  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"><span class="hljs-attr">ref</span>:<span class="hljs-title class_">NovoAsideRef</span>&lt;<span class="hljs-title class_">AddFormParams</span>&gt;</span>) &#123;
    <span class="hljs-comment">/**
     * All passed values are available
     * via ref.params
     **/</span>
  &#125;

  <span class="hljs-title function_">handleClose</span>(<span class="hljs-params"></span>) &#123;
    <span class="hljs-comment">/* To close the modal use the close method */</span>
    <span class="hljs-variable language_">this</span>.<span class="hljs-property">ref</span>.<span class="hljs-title function_">close</span>(<span class="hljs-comment">/* Return a value */</span>)
  &#125;

&#125;
</code></pre>
<h3>Methods</h3>
<h4><strong>close(response)</strong></h4>
<p>Will close the modal will emit events to both the <code>beforeClose</code> and <code>afterClosed</code> observables, as well as the .</p>
<table>
<thead>
<tr>
<th style="text-align:left">Name</th>
<th style="text-align:left">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">response</td>
<td style="text-align:left"><em>any</em><br>Any value you wish to return to calling components, will be resovled in the <code>onClosed</code> promise.</td>
</tr>
</tbody>
</table>
`, isInline: true }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: AsideDevelopPage, decorators: [{
            type: Component,
            args: [{
                    selector: 'aside-develop-page',
                    template: `<h1>Technical Details</h1>
<ul>
<li><strong>source:</strong> <a href="https://github.com/bullhorn/novo-elements/blob/master/projects/novo-elements/src/elements/aside">(github)</a></li>
<li><strong>module:</strong> <code>import &#123; NovoAsideModule &#125; from 'novo-elements';</code></li>
<li><strong>service:</strong> <code>import &#123; NovoAsideService &#125; form 'novo-elements/aside';</code></li>
</ul>
<h1>Roadmap</h1>
<ul class="contains-task-list">
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> Better support for common patterns</li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> Investigate Sharing injection tokens with Modal</li>
</ul>
<h1>Changelog</h1>
<h3>5.0.0</h3>
<p><em>Added in v5.0.0</em></p>
<h2>Properties</h2>
<p><em>No Properties</em></p>
<h1>Services</h1>
<h2>NovoAsideService</h2>
<p>Asides (a.k.a. Slideout) should be invoked via <code>NovoAsideService</code> and therefore all properties should be private or internal. Any values that need to be passed to the your <code>aside</code> instance should be passed by the service and will be available in your slideout via <code>NovoAsideRef.params</code>.</p>
<pre><code class="language-typescript"><span class="hljs-meta">&#64;Component</span>(&#123;...&#125;)
<span class="hljs-keyword">class</span> <span class="hljs-title class_">RandomComponent</span> &#123;
  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"><span class="hljs-keyword">private</span> <span class="hljs-attr">aside</span>:<span class="hljs-title class_">NovoAsideService</span></span>) &#123;&#125;
  <span class="hljs-title function_">handleAction</span>(<span class="hljs-params"></span>) &#123;
    <span class="hljs-keyword">const</span> ref = <span class="hljs-variable language_">this</span>.<span class="hljs-property">aside</span>.<span class="hljs-title function_">open</span>(<span class="hljs-title class_">AddFormSlideout</span>, &#123; <span class="hljs-attr">record</span>: <span class="hljs-number">123</span> &#125;);
    <span class="hljs-comment">/* you can listen to the close event */</span>
    ref.<span class="hljs-property">onClosed</span>.<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">result</span>) =&gt;</span> &#123;
      <span class="hljs-comment">/* result is the argument sent via the ref */</span>
      <span class="hljs-keyword">if</span> (res === <span class="hljs-string">&#x27;success&#x27;</span>) &#123;
        <span class="hljs-comment">/* perfom some action */</span>
      &#125;
    &#125;);
    <span class="hljs-comment">/* close the slideout from the parent */</span>
    ref.<span class="hljs-title function_">close</span>(<span class="hljs-string">&#x27;success&#x27;</span>)
  &#125;
&#125;
</code></pre>
<h3>Methods</h3>
<h4><strong>open(component, params)</strong></h4>
<p>Used to open all modals via the service. Use <code>params</code> to pass values to you component.</p>
<table>
<thead>
<tr>
<th style="text-align:left">Name</th>
<th style="text-align:left">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">component</td>
<td style="text-align:left"><em>Class</em><br>The angular component which represents the Modal to be opened.</td>
</tr>
<tr>
<td style="text-align:left">params</td>
<td style="text-align:left"><em>Object</em><br><strong>Optional</strong> arguments that will be injected into <code>NovoAsideRef.params</code></td>
</tr>
</tbody>
</table>
<p><em>Note:</em> All modal components should be declared as <code>entryComponents</code> in the module.</p>
<h2>NovoAsideRef&lt;T&gt;</h2>
<p><code>NovoAsideRef</code> should be injected into your modal component and all pass params can be accessed in the <code>params</code> property.</p>
<pre><code class="language-typescript"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">AddFormParams</span> &#123;
  <span class="hljs-attr">record</span>: <span class="hljs-built_in">number</span>;
&#125;
<span class="hljs-meta">&#64;Component</span>(&#123;&#125;)
<span class="hljs-keyword">class</span> <span class="hljs-title class_">AddFormSlideout</span> &#123;
  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"><span class="hljs-attr">ref</span>:<span class="hljs-title class_">NovoAsideRef</span>&lt;<span class="hljs-title class_">AddFormParams</span>&gt;</span>) &#123;
    <span class="hljs-comment">/**
     * All passed values are available
     * via ref.params
     **/</span>
  &#125;

  <span class="hljs-title function_">handleClose</span>(<span class="hljs-params"></span>) &#123;
    <span class="hljs-comment">/* To close the modal use the close method */</span>
    <span class="hljs-variable language_">this</span>.<span class="hljs-property">ref</span>.<span class="hljs-title function_">close</span>(<span class="hljs-comment">/* Return a value */</span>)
  &#125;

&#125;
</code></pre>
<h3>Methods</h3>
<h4><strong>close(response)</strong></h4>
<p>Will close the modal will emit events to both the <code>beforeClose</code> and <code>afterClosed</code> observables, as well as the .</p>
<table>
<thead>
<tr>
<th style="text-align:left">Name</th>
<th style="text-align:left">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">response</td>
<td style="text-align:left"><em>any</em><br>Any value you wish to return to calling components, will be resovled in the <code>onClosed</code> promise.</td>
</tr>
</tbody>
</table>
`,
                    host: { class: 'markdown-page' },
                    standalone: false,
                }]
        }] });
class AsideDesignPage {
    constructor() {
        this.params = {};
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: AsideDesignPage, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: AsideDesignPage, isStandalone: false, selector: "aside-design-page", host: { classAttribute: "markdown-page" }, ngImport: i0, template: `<h2>Usage</h2>
<novo-grid columns="2" align="start" gap="2rem">
<div>
<p>Asides are slideouts designed to provide a view into related content within the page without navigating away.  Asides work similar to Modal but the content is meant to be correlated and the workflow should be non-blocking.</p>
</div>
<img src="assets/images/AsideOverview.png"/>
<div>
<h3>Use When</h3>
<ul class="contains-do-list">
<li class="bullhorn-do-item"><novo-icon color="grass" mr="md" size="md">check</novo-icon><novo-text color="grass"> Providing supporting visual content, e.g., an image or chart, within the context of a larger composition</novo-text></li>
<li class="bullhorn-do-item"><novo-icon color="grass" mr="md" size="md">check</novo-icon><novo-text color="grass"> The content provided doesn't block the workflow of the previous context.</novo-text></li>
</ul>
</div>
<div>
<h3>Don′t Use When</h3>
<ul class="contains-do-list">
<li class="bullhorn-do-item"><novo-icon color="grapefruit" mr="md" size="md">times</novo-icon><novo-text color="grapefruit"> The content of the aside requires immediate action or response. Instead, use a modal.</novo-text></li>
</ul>
</div>
</novo-grid>
<h2>Best Practices</h2>
<ul>
<li>Ensure the content opened is highly correlated to the context that opened it. When showing a preview of a related content that can opened for various contexts, present the user with the data related to the context that opened it, rather than the same view.</li>
<li>When using an aside to present the user with a form, ensure that it is beneficial to have the current view still available to the user, if not consider opening a new page.</li>
</ul>
<h2>Patterns</h2>
<novo-grid columns="2" align="start" gap="2rem">
<blockquote>
<div class="p"><img src="https://via.placeholder.com/350x250" alt="placeholder"></div>
<ul class="contains-do-list">
<li class="bullhorn-do-item"><novo-icon color="grass" mr="md" size="md">check</novo-icon><novo-text color="grass"> Form Slideout</novo-text></li>
</ul>
<div class="p">Utilize the aside to open quick forms within the application. With the <code>aside</code> you can provide a workflow to enter data quickly while still provide a partial view of the parent context. This will allow the user to maintain context and see how the addition of new data affects there current view.</div>
</blockquote>
<blockquote>
<div class="p"><img src="https://via.placeholder.com/350x250" alt="placeholder"></div>
<ul class="contains-do-list">
<li class="bullhorn-do-item"><novo-icon color="grapefruit" mr="md" size="md">times</novo-icon><novo-text color="grapefruit"> Record Preview</novo-text></li>
</ul>
<div class="p">Utilize the aside to open record previews within the application. With the <code>aside</code> you can allow the user to view a significant amount data about a related entity with losing the context of the current view.</div>
</blockquote>
</novo-grid>
<h2>Accessibility</h2>
<p><strong>Implementation</strong></p>
<p>Always include an <code>alt</code> attribute describing the information that is visually displayed in the image.</p>
`, isInline: true, dependencies: [{ kind: "component", type: i2$1.NovoGridElement, selector: "novo-grid", inputs: ["direction", "align", "justify", "columns"] }, { kind: "component", type: i2$1.NovoIconComponent, selector: "novo-icon", inputs: ["raised", "theme", "shape", "color", "size", "smaller", "larger", "alt", "name"] }, { kind: "component", type: i2$1.NovoText, selector: "novo-text,[novo-text]", inputs: ["block"] }, { kind: "directive", type: i2$1.MarginDirective, selector: "[m],[margin],[marginTop],[marginRight],[marginBottom],[marginLeft],[marginX],[marginY],[mt],[mr],[mb],[ml],[mx],[my]", inputs: ["margin", "m", "marginLeft", "ml", "marginRight", "mr", "marginTop", "mt", "marginBottom", "mb", "marginX", "mx", "marginY", "my"] }, { kind: "directive", type: i2$1.GapDirective, selector: "[gap]", inputs: ["gap"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: AsideDesignPage, decorators: [{
            type: Component,
            args: [{
                    selector: 'aside-design-page',
                    template: `<h2>Usage</h2>
<novo-grid columns="2" align="start" gap="2rem">
<div>
<p>Asides are slideouts designed to provide a view into related content within the page without navigating away.  Asides work similar to Modal but the content is meant to be correlated and the workflow should be non-blocking.</p>
</div>
<img src="assets/images/AsideOverview.png"/>
<div>
<h3>Use When</h3>
<ul class="contains-do-list">
<li class="bullhorn-do-item"><novo-icon color="grass" mr="md" size="md">check</novo-icon><novo-text color="grass"> Providing supporting visual content, e.g., an image or chart, within the context of a larger composition</novo-text></li>
<li class="bullhorn-do-item"><novo-icon color="grass" mr="md" size="md">check</novo-icon><novo-text color="grass"> The content provided doesn't block the workflow of the previous context.</novo-text></li>
</ul>
</div>
<div>
<h3>Don′t Use When</h3>
<ul class="contains-do-list">
<li class="bullhorn-do-item"><novo-icon color="grapefruit" mr="md" size="md">times</novo-icon><novo-text color="grapefruit"> The content of the aside requires immediate action or response. Instead, use a modal.</novo-text></li>
</ul>
</div>
</novo-grid>
<h2>Best Practices</h2>
<ul>
<li>Ensure the content opened is highly correlated to the context that opened it. When showing a preview of a related content that can opened for various contexts, present the user with the data related to the context that opened it, rather than the same view.</li>
<li>When using an aside to present the user with a form, ensure that it is beneficial to have the current view still available to the user, if not consider opening a new page.</li>
</ul>
<h2>Patterns</h2>
<novo-grid columns="2" align="start" gap="2rem">
<blockquote>
<div class="p"><img src="https://via.placeholder.com/350x250" alt="placeholder"></div>
<ul class="contains-do-list">
<li class="bullhorn-do-item"><novo-icon color="grass" mr="md" size="md">check</novo-icon><novo-text color="grass"> Form Slideout</novo-text></li>
</ul>
<div class="p">Utilize the aside to open quick forms within the application. With the <code>aside</code> you can provide a workflow to enter data quickly while still provide a partial view of the parent context. This will allow the user to maintain context and see how the addition of new data affects there current view.</div>
</blockquote>
<blockquote>
<div class="p"><img src="https://via.placeholder.com/350x250" alt="placeholder"></div>
<ul class="contains-do-list">
<li class="bullhorn-do-item"><novo-icon color="grapefruit" mr="md" size="md">times</novo-icon><novo-text color="grapefruit"> Record Preview</novo-text></li>
</ul>
<div class="p">Utilize the aside to open record previews within the application. With the <code>aside</code> you can allow the user to view a significant amount data about a related entity with losing the context of the current view.</div>
</blockquote>
</novo-grid>
<h2>Accessibility</h2>
<p><strong>Implementation</strong></p>
<p>Always include an <code>alt</code> attribute describing the information that is visually displayed in the image.</p>
`,
                    host: { class: 'markdown-page' },
                    standalone: false,
                }]
        }] });
class AgendaExamplesPage {
    constructor() {
        this.params = {};
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: AgendaExamplesPage, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: AgendaExamplesPage, isStandalone: false, selector: "agenda-examples-page", host: { classAttribute: "markdown-page" }, ngImport: i0, template: `<h2>Agenda Example</h2>
<p><code-example example="agenda"></code-example></p>
`, isInline: true, dependencies: [{ kind: "component", type: CodeExampleComponent, selector: "code-example", inputs: ["example"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: AgendaExamplesPage, decorators: [{
            type: Component,
            args: [{
                    selector: 'agenda-examples-page',
                    template: `<h2>Agenda Example</h2>
<p><code-example example="agenda"></code-example></p>
`,
                    host: { class: 'markdown-page' },
                    standalone: false,
                }]
        }] });
class AgendaDevelopPage {
    constructor() {
        this.params = {};
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: AgendaDevelopPage, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: AgendaDevelopPage, isStandalone: false, selector: "agenda-develop-page", host: { classAttribute: "markdown-page" }, ngImport: i0, template: `<h1>Technical Details</h1>
<ul>
<li><strong>source:</strong> <a href="https://github.com/bullhorn/novo-elements/blob/master/projects/novo-elements/src/elements/avatar">(github)</a></li>
<li><strong>module:</strong> <code>import &#123; NovoAgendaModule &#125; form 'novo-elements';</code></li>
</ul>
<p><strong>Basic Usage</strong></p>
<pre><code class="language-html">  <span class="hljs-tag">&lt;<span class="hljs-name">novo-agenda-month</span> [(<span class="hljs-attr">viewDate</span>)]=<span class="hljs-string">&quot;viewDate&quot;</span> [<span class="hljs-attr">events</span>]=<span class="hljs-string">&quot;events&quot;</span>
    (<span class="hljs-attr">dayClicked</span>)=<span class="hljs-string">&quot;dayClicked($event.day.date)&quot;</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">novo-agenda-month</span>&gt;</span>
</code></pre>
<h1>Roadmap</h1>
<ul class="contains-task-list">
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"> Improve Typing Support</li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> Make color and theming consistent</li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> Dark Mode</li>
</ul>
<h1>Changelog</h1>
<h3>6.0.0</h3>
<p><em>renamed to Agenda in this version</em></p>
<h1>Components</h1>
<h2>NovoAgendaMonthViewElement <code>novo-agenda-month</code></h2>
<p>Display <code>events</code> with a Month view calendar.</p>
<h3>Properties</h3>
<p><props-table component="NovoAgendaMonthViewElement"></props-table></p>
<h2>NovoAgendaWeekViewElement <code>novo-agenda-month</code></h2>
<p>Display <code>events</code> within a Week view calendar.</p>
<h3>Properties</h3>
<p><props-table component="NovoAgendaWeekViewElement"></props-table></p>
<h2>NovoAgendaDayViewElement <code>novo-agenda-month</code></h2>
<p>Display <code>events</code> within single day view</p>
<h3>Properties</h3>
<p><props-table component="NovoAgendaDayViewElement"></props-table></p>
`, isInline: true, dependencies: [{ kind: "component", type: PropsTableComponent, selector: "props-table", inputs: ["component", "kinds"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: AgendaDevelopPage, decorators: [{
            type: Component,
            args: [{
                    selector: 'agenda-develop-page',
                    template: `<h1>Technical Details</h1>
<ul>
<li><strong>source:</strong> <a href="https://github.com/bullhorn/novo-elements/blob/master/projects/novo-elements/src/elements/avatar">(github)</a></li>
<li><strong>module:</strong> <code>import &#123; NovoAgendaModule &#125; form 'novo-elements';</code></li>
</ul>
<p><strong>Basic Usage</strong></p>
<pre><code class="language-html">  <span class="hljs-tag">&lt;<span class="hljs-name">novo-agenda-month</span> [(<span class="hljs-attr">viewDate</span>)]=<span class="hljs-string">&quot;viewDate&quot;</span> [<span class="hljs-attr">events</span>]=<span class="hljs-string">&quot;events&quot;</span>
    (<span class="hljs-attr">dayClicked</span>)=<span class="hljs-string">&quot;dayClicked($event.day.date)&quot;</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">novo-agenda-month</span>&gt;</span>
</code></pre>
<h1>Roadmap</h1>
<ul class="contains-task-list">
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"> Improve Typing Support</li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> Make color and theming consistent</li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> Dark Mode</li>
</ul>
<h1>Changelog</h1>
<h3>6.0.0</h3>
<p><em>renamed to Agenda in this version</em></p>
<h1>Components</h1>
<h2>NovoAgendaMonthViewElement <code>novo-agenda-month</code></h2>
<p>Display <code>events</code> with a Month view calendar.</p>
<h3>Properties</h3>
<p><props-table component="NovoAgendaMonthViewElement"></props-table></p>
<h2>NovoAgendaWeekViewElement <code>novo-agenda-month</code></h2>
<p>Display <code>events</code> within a Week view calendar.</p>
<h3>Properties</h3>
<p><props-table component="NovoAgendaWeekViewElement"></props-table></p>
<h2>NovoAgendaDayViewElement <code>novo-agenda-month</code></h2>
<p>Display <code>events</code> within single day view</p>
<h3>Properties</h3>
<p><props-table component="NovoAgendaDayViewElement"></props-table></p>
`,
                    host: { class: 'markdown-page' },
                    standalone: false,
                }]
        }] });
class AgendaDesignPage {
    constructor() {
        this.params = {};
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: AgendaDesignPage, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.15", type: AgendaDesignPage, isStandalone: false, selector: "agenda-design-page", host: { classAttribute: "markdown-page" }, ngImport: i0, template: `<h2>Usage</h2>
<novo-grid columns="2" align="start" gap="2rem">
<div>
Used to help display scheduled events for the day/week/month. The agenda component allow you to display events for any range grouped by days.  You can provide custom templates to each view to modify how the event is displayed and to add additional content.
</div>
<p><img src="assets/images/AgendaDayView.png" alt="Overview"></p>
<div>
<h3>Use When</h3>
<ul class="contains-do-list">
<li class="bullhorn-do-item">
<p><novo-icon color="grass" mr="md" size="md">check</novo-icon><novo-text color="grass"> When representing scheduled events or a history of actions.</novo-text></p>
<p>The Agenda should be used to plot dates or events already tracked in the system and should be used as a way to visualize those events.</p>
</li>
</ul>
</div>
<div>
<h3>Don′t Use When</h3>
<ul class="contains-do-list">
<li class="bullhorn-do-item">
<p><novo-icon color="grapefruit" mr="md" size="md">times</novo-icon><novo-text color="grapefruit"> Don't use to select a date or range of dates.</novo-text></p>
<p>While the Agenda and events can be interactive it should not be used to select dates.  Instead use the <code>calendar</code> or <code>date-picker</code></p>
</li>
</ul>
</div>
</novo-grid>
<h2>Best Practices</h2>
<ul>
<li>Ensure the view has enough space to display the Agenda components, the often take up the whole page.</li>
<li>Allow the user to switch between Month, Week, Day views of their data.</li>
<li>Avoid showing to many types of events, the views will get bloated and hard to read.</li>
</ul>
<h2>Options</h2>
<novo-grid columns="2" align="start" gap="2rem">
<blockquote>
<div class="p"><strong>Month View</strong></div>
<div class="p">Used to present the user with a calendar of scheduled event for a month.  The event styles can be overridden with a custom template, this allows the implementation to determine how the display should change based on the context of the scheduled event.</div>
</blockquote>
<p><img src="assets/images/AgendaMonthView.png" alt="Month View"></p>
<p><img src="assets/images/AgendaWeekView.png" alt="Week View"></p>
<blockquote>
<div class="p"><strong>Week View</strong></div>
<div class="p">The agenda's week view component can disply the scheduled events showing the 5-7 days of that week.  Unlike the Month View, events will be plotted vertically based on the time of day the event starts. Event containers height will only be as tall as the duration of the event.</div>
</blockquote>
<blockquote>
<div class="p"><strong>Day View</strong></div>
<div class="p">Similar to the Week View but only display events for a single day.  This is helpful when the week view is very congested because this allows overlapping events to stack horizontally, allowing for better readability.</div>
</blockquote>
<p><img src="assets/images/AgendaDayView.png" alt="Day View"></p>
</novo-grid>
<h2>Accessibility</h2>
<ul>
<li>If using an illustrative image for the supplement content, it’s generally safe to use an empty or null alternative text for example alt=&quot;&quot;</li>
</ul>
`, isInline: true, dependencies: [{ kind: "component", type: i2$1.NovoGridElement, selector: "novo-grid", inputs: ["direction", "align", "justify", "columns"] }, { kind: "component", type: i2$1.NovoIconComponent, selector: "novo-icon", inputs: ["raised", "theme", "shape", "color", "size", "smaller", "larger", "alt", "name"] }, { kind: "component", type: i2$1.NovoText, selector: "novo-text,[novo-text]", inputs: ["block"] }, { kind: "directive", type: i2$1.MarginDirective, selector: "[m],[margin],[marginTop],[marginRight],[marginBottom],[marginLeft],[marginX],[marginY],[mt],[mr],[mb],[ml],[mx],[my]", inputs: ["margin", "m", "marginLeft", "ml", "marginRight", "mr", "marginTop", "mt", "marginBottom", "mb", "marginX", "mx", "marginY", "my"] }, { kind: "directive", type: i2$1.GapDirective, selector: "[gap]", inputs: ["gap"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: AgendaDesignPage, decorators: [{
            type: Component,
            args: [{
                    selector: 'agenda-design-page',
                    template: `<h2>Usage</h2>
<novo-grid columns="2" align="start" gap="2rem">
<div>
Used to help display scheduled events for the day/week/month. The agenda component allow you to display events for any range grouped by days.  You can provide custom templates to each view to modify how the event is displayed and to add additional content.
</div>
<p><img src="assets/images/AgendaDayView.png" alt="Overview"></p>
<div>
<h3>Use When</h3>
<ul class="contains-do-list">
<li class="bullhorn-do-item">
<p><novo-icon color="grass" mr="md" size="md">check</novo-icon><novo-text color="grass"> When representing scheduled events or a history of actions.</novo-text></p>
<p>The Agenda should be used to plot dates or events already tracked in the system and should be used as a way to visualize those events.</p>
</li>
</ul>
</div>
<div>
<h3>Don′t Use When</h3>
<ul class="contains-do-list">
<li class="bullhorn-do-item">
<p><novo-icon color="grapefruit" mr="md" size="md">times</novo-icon><novo-text color="grapefruit"> Don't use to select a date or range of dates.</novo-text></p>
<p>While the Agenda and events can be interactive it should not be used to select dates.  Instead use the <code>calendar</code> or <code>date-picker</code></p>
</li>
</ul>
</div>
</novo-grid>
<h2>Best Practices</h2>
<ul>
<li>Ensure the view has enough space to display the Agenda components, the often take up the whole page.</li>
<li>Allow the user to switch between Month, Week, Day views of their data.</li>
<li>Avoid showing to many types of events, the views will get bloated and hard to read.</li>
</ul>
<h2>Options</h2>
<novo-grid columns="2" align="start" gap="2rem">
<blockquote>
<div class="p"><strong>Month View</strong></div>
<div class="p">Used to present the user with a calendar of scheduled event for a month.  The event styles can be overridden with a custom template, this allows the implementation to determine how the display should change based on the context of the scheduled event.</div>
</blockquote>
<p><img src="assets/images/AgendaMonthView.png" alt="Month View"></p>
<p><img src="assets/images/AgendaWeekView.png" alt="Week View"></p>
<blockquote>
<div class="p"><strong>Week View</strong></div>
<div class="p">The agenda's week view component can disply the scheduled events showing the 5-7 days of that week.  Unlike the Month View, events will be plotted vertically based on the time of day the event starts. Event containers height will only be as tall as the duration of the event.</div>
</blockquote>
<blockquote>
<div class="p"><strong>Day View</strong></div>
<div class="p">Similar to the Week View but only display events for a single day.  This is helpful when the week view is very congested because this allows overlapping events to stack horizontally, allowing for better readability.</div>
</blockquote>
<p><img src="assets/images/AgendaDayView.png" alt="Day View"></p>
</novo-grid>
<h2>Accessibility</h2>
<ul>
<li>If using an illustrative image for the supplement content, it’s generally safe to use an empty or null alternative text for example alt=&quot;&quot;</li>
</ul>
`,
                    host: { class: 'markdown-page' },
                    standalone: false,
                }]
        }] });
const routes = [
    //{ path: '', component: Home, data: {} },
    { path: 'utils/security', component: SecurityPage, data: { order: '1', title: 'Security', section: 'utils' } },
    { path: 'utils/quick note', component: QuickNotePage, data: { order: '1', title: 'Quick Note', section: 'utils' } },
    { path: 'utils/pipes', component: PipesPage, data: { order: '2', title: 'Pipes', section: 'utils' } },
    { path: 'utils/field-interactions', component: FieldInteractionsPage, data: { order: '3', title: 'Field Interactions', section: 'utils' } },
    { path: 'utils/drag and drop', component: DragDropPage, data: { order: '1', title: 'Drag and Drop', section: 'utils', tag: 'new' } },
    { path: 'utils/code editor', component: CodeEditorPage, data: { order: '1', title: 'Code Editor', section: 'utils', tag: 'new' } },
    { path: 'utils/ace editor', component: AceEditorPage, data: { order: '1', title: 'Ace Editor', section: 'utils', tag: 'deprecated' } },
    { path: 'updates/v9-announce', component: v9Page, data: { order: '3', title: 'v9', section: 'updates' } },
    { path: 'updates/v8-announce', component: v8Page, data: { order: '4', title: 'v8', section: 'updates' } },
    { path: 'updates/v7-announce', component: v7Page, data: { order: '5', title: 'v7', section: 'updates' } },
    { path: 'updates/v6', component: v6Page, data: { order: '6', title: 'v6', section: 'updates' } },
    { path: 'updates/v11-announce', component: v11Page, data: { order: '1', title: 'v11', section: 'updates', tag: 'new' } },
    { path: 'updates/v10-announce', component: v10Page, data: { order: '2', title: 'v10', section: 'updates' } },
    { path: 'templates', component: TemplatesPage, data: { order: '4', title: 'Templates', section: 'src' } },
    { path: 'patterns', component: PatternsPage, data: { order: '5', title: 'Patterns', section: 'src' } },
    { path: 'layouts', component: LayoutsPage, data: { order: '6', title: 'Layouts', section: 'src' } },
    { path: 'home', component: HomePage, data: { order: '1', title: 'Introduction', section: 'src' } },
    { path: 'form-controls', component: FormControlsPage, data: { order: '12', title: 'Form Controls', section: 'src' } },
    { path: 'design', component: DesignPage, data: { order: '26', title: 'Design', section: 'src' } },
    { path: 'components', component: ComponentsPage, data: { order: '32', title: 'Components', section: 'src' } },
    {
        path: 'patterns/patterns',
        component: TabsLayout,
        data: { title: 'Patterns', section: 'patterns', pages: [{ title: 'Test', route: './test' }, { title: 'Native Forms', route: './native-forms' }], description: null },
        children: [{ path: 'test', component: PatternsTestPage },
            { path: 'native-forms', component: PatternsNativeFormsPage },
            { path: '', redirectTo: '/patterns/patterns/test', pathMatch: 'full' },
        ]
    },
    {
        path: 'layouts/tabs',
        component: TabsLayout,
        data: { title: 'Tabs', section: 'layouts', pages: [{ title: 'Design', route: './design' }, { title: 'Develop', route: './develop' }, { title: 'Examples', route: './examples' }], description: null },
        children: [{ path: 'design', component: TabsDesignPage },
            { path: 'develop', component: TabsDevelopPage },
            { path: 'examples', component: TabsExamplesPage },
            { path: '', redirectTo: '/layouts/tabs/design', pathMatch: 'full' },
        ]
    },
    { path: 'layouts/stepper', component: StepperPage, data: { order: '7', title: 'Stepper', section: 'layouts' } },
    { path: 'layouts/sidenav', component: SidenavPage, data: { order: '8', title: 'Sidenav', section: 'layouts' } },
    { path: 'layouts/list', component: ListPage, data: { order: '9', title: 'List', section: 'layouts' } },
    { path: 'layouts/header', component: HeaderPage, data: { order: '10', title: 'Header', section: 'layouts' } },
    { path: 'layouts/expansion', component: ExpansionPage, data: { order: '11', title: 'Expansion', section: 'layouts' } },
    {
        path: 'layouts/card',
        component: TabsLayout,
        data: { title: 'Card', section: 'layouts', pages: [{ title: 'Design', route: './design' }, { title: 'Develop', route: './develop' }, { title: 'Examples', route: './examples' }], description: CardDescriptionPage },
        children: [{ path: 'design', component: CardDesignPage },
            { path: 'develop', component: CardDevelopPage },
            { path: 'examples', component: CardExamplesPage },
            { path: '', redirectTo: '/layouts/card/design', pathMatch: 'full' },
        ]
    },
    { path: 'form-controls/value', component: ValuePage, data: { order: '13', title: 'Value', section: 'form-controls' } },
    { path: 'form-controls/timezone', component: TimezonePage, data: { order: '14', title: 'Timezone', section: 'form-controls' } },
    { path: 'form-controls/tiles', component: TilesPage, data: { order: '15', title: 'Tiles', section: 'form-controls' } },
    { path: 'form-controls/select', component: SelectPage, data: { order: '16', title: 'Select', section: 'form-controls' } },
    { path: 'form-controls/radio-buttons', component: RadioButtonsPage, data: { order: '17', title: 'Radio Buttons', section: 'form-controls' } },
    { path: 'form-controls/picker', component: PickerPage, data: { order: '18', title: 'Picker', section: 'form-controls' } },
    { path: 'form-controls/multi-picker', component: MultiPickerPage, data: { order: '19', title: 'Multi Picker', section: 'form-controls' } },
    { path: 'form-controls/form-groups', component: FormGroupsPage, data: { order: '20', title: 'Form Groups', section: 'form-controls' } },
    { path: 'form-controls/form', component: FormPage, data: { order: '21', title: 'Form', section: 'form-controls' } },
    { path: 'form-controls/dynamic-form', component: DynamicFormPage, data: { order: '22', title: 'Dynamic Form', section: 'form-controls' } },
    { path: 'form-controls/color-picker', component: ColorPickerPage, data: { order: '23', title: 'Color Picker', section: 'form-controls' } },
    { path: 'form-controls/ck-editor', component: CkEditorPage, data: { order: '24', title: 'Ck Editor', section: 'form-controls' } },
    { path: 'form-controls/checkbox', component: CheckboxPage, data: { order: '25', title: 'Checkbox', section: 'form-controls' } },
    {
        path: 'form-controls/time picker',
        component: TabsLayout,
        data: { title: 'Time Picker', section: 'form-controls', pages: [{ title: 'Design', route: './design' }, { title: 'Develop', route: './develop' }, { title: 'Examples', route: './examples' }], description: null },
        children: [{ path: 'design', component: TimePickerDesignPage },
            { path: 'develop', component: TimePickerDevelopPage },
            { path: 'examples', component: TimePickerExamplesPage },
            { path: '', redirectTo: '/form-controls/time picker/design', pathMatch: 'full' },
        ]
    },
    {
        path: 'form-controls/date time picker',
        component: TabsLayout,
        data: { title: 'Date Time Picker', section: 'form-controls', pages: [{ title: 'Design', route: './design' }, { title: 'Develop', route: './develop' }, { title: 'Examples', route: './examples' }], description: null },
        children: [{ path: 'design', component: DateTimePickerDesignPage },
            { path: 'develop', component: DateTimePickerDevelopPage },
            { path: 'examples', component: DateTimePickerExamplesPage },
            { path: '', redirectTo: '/form-controls/date time picker/design', pathMatch: 'full' },
        ]
    },
    {
        path: 'form-controls/date picker',
        component: TabsLayout,
        data: { title: 'Date Picker', section: 'form-controls', pages: [{ title: 'Design', route: './design' }, { title: 'Develop', route: './develop' }, { title: 'Examples', route: './examples' }], description: null },
        children: [{ path: 'design', component: DatePickerDesignPage },
            { path: 'develop', component: DatePickerDevelopPage },
            { path: 'examples', component: DatePickerExamplesPage },
            { path: '', redirectTo: '/form-controls/date picker/design', pathMatch: 'full' },
        ]
    },
    {
        path: 'form-controls/chips',
        component: TabsLayout,
        data: { title: 'Chips', section: 'form-controls', pages: [{ title: 'Design', route: './design' }, { title: 'Develop', route: './develop' }, { title: 'Examples', route: './examples' }], description: null },
        children: [{ path: 'design', component: ChipsDesignPage },
            { path: 'develop', component: ChipsDevelopPage },
            { path: 'examples', component: ChipsExamplesPage },
            { path: '', redirectTo: '/form-controls/chips/design', pathMatch: 'full' },
        ]
    },
    { path: 'design/typography', component: TypographyPage, data: { order: '27', title: 'Typography', section: 'design' } },
    { path: 'design/spacing', component: SpacingPage, data: { order: '28', title: 'Spacing', section: 'design' } },
    { path: 'design/iconography', component: IconographyPage, data: { order: '29', title: 'Iconography', section: 'design' } },
    { path: 'design/composition', component: CompositionPage, data: { order: '30', title: 'Composition', section: 'design' } },
    { path: 'design/colors', component: ColorsPage, data: { order: '31', title: 'Colors', section: 'design' } },
    {
        path: 'components/tooltip',
        component: TabsLayout,
        data: { title: 'Tooltip', section: 'components', pages: [{ title: 'Design', route: './design' }, { title: 'Develop', route: './develop' }, { title: 'Examples', route: './examples' }], description: null },
        children: [{ path: 'design', component: TooltipDesignPage },
            { path: 'develop', component: TooltipDevelopPage },
            { path: 'examples', component: TooltipExamplesPage },
            { path: '', redirectTo: '/components/tooltip/design', pathMatch: 'full' },
        ]
    },
    {
        path: 'components/toolbar',
        component: TabsLayout,
        data: { title: 'Toolbar', section: 'components', pages: [{ title: 'Design', route: './design' }, { title: 'Develop', route: './develop' }, { title: 'Examples', route: './examples' }], description: null },
        children: [{ path: 'design', component: ToolbarDesignPage },
            { path: 'develop', component: ToolbarDevelopPage },
            { path: 'examples', component: ToolbarExamplesPage },
            { path: '', redirectTo: '/components/toolbar/design', pathMatch: 'full' },
        ]
    },
    {
        path: 'components/toaster',
        component: TabsLayout,
        data: { title: 'Toaster', section: 'components', pages: [{ title: 'Design', route: './design' }, { title: 'Develop', route: './develop' }, { title: 'Examples', route: './examples' }], description: null },
        children: [{ path: 'design', component: ToasterDesignPage },
            { path: 'develop', component: ToasterDevelopPage },
            { path: 'examples', component: ToasterExamplesPage },
            { path: '', redirectTo: '/components/toaster/design', pathMatch: 'full' },
        ]
    },
    {
        path: 'components/tip well',
        component: TabsLayout,
        data: { title: 'Tip Well', section: 'components', pages: [{ title: 'Design', route: './design' }, { title: 'Develop', route: './develop' }, { title: 'Examples', route: './examples' }], description: null },
        children: [{ path: 'design', component: TipWellDesignPage },
            { path: 'develop', component: TipWellDevelopPage },
            { path: 'examples', component: TipWellExamplesPage },
            { path: '', redirectTo: '/components/tip well/design', pathMatch: 'full' },
        ]
    },
    { path: 'components/tabbed-group-picker', component: TabbedGroupPickerPage, data: { order: '33', title: 'Tabbed Group Picker', section: 'components' } },
    { path: 'components/switch', component: SwitchPage, data: { order: '34', title: 'Switch', section: 'components' } },
    { path: 'components/slides', component: SlidesPage, data: { order: '35', title: 'Slides', section: 'components' } },
    { path: 'components/search', component: SearchPage, data: { order: '36', title: 'Search', section: 'components' } },
    {
        path: 'components/query builder',
        component: TabsLayout,
        data: { title: 'Query Builder', section: 'components', pages: [{ title: 'Design', route: './design' }, { title: 'Develop', route: './develop' }, { title: 'Examples', route: './examples' }], description: null },
        children: [{ path: 'design', component: QueryBuilderDesignPage },
            { path: 'develop', component: QueryBuilderDevelopPage },
            { path: 'examples', component: QueryBuilderExamplesPage },
            { path: '', redirectTo: '/components/query builder/design', pathMatch: 'full' },
        ]
    },
    {
        path: 'components/progress',
        component: TabsLayout,
        data: { title: 'Progress', section: 'components', pages: [{ title: 'Usage', route: './usage' }, { title: 'Design', route: './design' }, { title: 'Develop', route: './develop' }, { title: 'Examples', route: './examples' }], description: null },
        children: [{ path: 'usage', component: ProgressUsagePage },
            { path: 'design', component: ProgressDesignPage },
            { path: 'develop', component: ProgressDevelopPage },
            { path: 'examples', component: ProgressExamplesPage },
            { path: '', redirectTo: '/components/progress/usage', pathMatch: 'full' },
        ]
    },
    {
        path: 'components/pop over',
        component: TabsLayout,
        data: { title: 'Pop Over', section: 'components', pages: [{ title: 'Design', route: './design' }, { title: 'Develop', route: './develop' }, { title: 'Examples', route: './examples' }], description: null },
        children: [{ path: 'design', component: PopoverDesignPage },
            { path: 'develop', component: PopoverDevelopPage },
            { path: 'examples', component: PopoverExamplesPage },
            { path: '', redirectTo: '/components/pop over/design', pathMatch: 'full' },
        ]
    },
    {
        path: 'components/non ideal state',
        component: TabsLayout,
        data: { title: 'Non Ideal State', section: 'components', pages: [{ title: 'Design', route: './design' }, { title: 'Develop', route: './develop' }, { title: 'Examples', route: './examples' }], description: null },
        children: [{ path: 'design', component: NonIdealStateDesignPage },
            { path: 'develop', component: NonIdealStateDevelopPage },
            { path: 'examples', component: NonIdealStateExamplesPage },
            { path: '', redirectTo: '/components/non ideal state/design', pathMatch: 'full' },
        ]
    },
    {
        path: 'components/modals',
        component: TabsLayout,
        data: { title: 'Modals', section: 'components', pages: [{ title: 'Design', route: './design' }, { title: 'Develop', route: './develop' }, { title: 'Examples', route: './examples' }], description: null },
        children: [{ path: 'design', component: ModalDesignPage },
            { path: 'develop', component: ModalDevelopPage },
            { path: 'examples', component: ModalExamplesPage },
            { path: '', redirectTo: '/components/modals/design', pathMatch: 'full' },
        ]
    },
    {
        path: 'components/menu',
        component: TabsLayout,
        data: { title: 'Menu', section: 'components', pages: [{ title: 'Design', route: './design' }, { title: 'Develop', route: './develop' }, { title: 'Examples', route: './examples' }], description: null },
        children: [{ path: 'design', component: MenuDesignPage },
            { path: 'develop', component: MenuDevelopPage },
            { path: 'examples', component: MenuExamplesPage },
            { path: '', redirectTo: '/components/menu/design', pathMatch: 'full' },
        ]
    },
    {
        path: 'components/loading',
        component: TabsLayout,
        data: { title: 'Loading', section: 'components', pages: [{ title: 'Design', route: './design' }, { title: 'Develop', route: './develop' }, { title: 'Examples', route: './examples' }], description: null },
        children: [{ path: 'design', component: LoadingDesignPage },
            { path: 'develop', component: LoadingDevelopPage },
            { path: 'examples', component: LoadingExamplesPage },
            { path: '', redirectTo: '/components/loading/design', pathMatch: 'full' },
        ]
    },
    {
        path: 'components/icon',
        component: TabsLayout,
        data: { title: 'Icon', section: 'components', pages: [{ title: 'Design', route: './design' }, { title: 'Develop', route: './develop' }, { title: 'Examples', route: './examples' }], description: null },
        children: [{ path: 'design', component: IconDesignPage },
            { path: 'develop', component: IconDevelopPage },
            { path: 'examples', component: IconExamplesPage },
            { path: '', redirectTo: '/components/icon/design', pathMatch: 'full' },
        ]
    },
    {
        path: 'components/field',
        component: TabsLayout,
        data: { title: 'Field', section: 'components', pages: [{ title: 'Design', route: './design' }, { title: 'Develop', route: './develop' }, { title: 'Examples', route: './examples' }], description: null },
        children: [{ path: 'design', component: FieldDesignPage },
            { path: 'develop', component: FieldDevelopPage },
            { path: 'examples', component: FieldExamplesPage },
            { path: '', redirectTo: '/components/field/design', pathMatch: 'full' },
        ]
    },
    {
        path: 'components/dropdown',
        component: TabsLayout,
        data: { title: 'Dropdown', section: 'components', pages: [{ title: 'Design', route: './design' }, { title: 'Develop', route: './develop' }, { title: 'Examples', route: './examples' }], description: null },
        children: [{ path: 'design', component: DropdownDesignPage },
            { path: 'develop', component: DropdownDevelopPage },
            { path: 'examples', component: DropdownExamplesPage },
            { path: '', redirectTo: '/components/dropdown/design', pathMatch: 'full' },
        ]
    },
    { path: 'components/data-table', component: DataTablePage, data: { order: '37', title: 'Data Table', section: 'components' } },
    {
        path: 'components/calendar',
        component: TabsLayout,
        data: { title: 'Calendar', section: 'components', pages: [{ title: 'Design', route: './design' }, { title: 'Develop', route: './develop' }, { title: 'Examples', route: './examples' }], description: null },
        children: [{ path: 'design', component: CalendarDesignPage },
            { path: 'develop', component: CalendarDevelopPage },
            { path: 'examples', component: CalendarExamplesPage },
            { path: '', redirectTo: '/components/calendar/design', pathMatch: 'full' },
        ]
    },
    {
        path: 'components/button',
        component: TabsLayout,
        data: { title: 'Button', section: 'components', pages: [{ title: 'Design', route: './design' }, { title: 'Develop', route: './develop' }, { title: 'Examples', route: './examples' }], description: null },
        children: [{ path: 'design', component: ButtonDesignPage },
            { path: 'develop', component: ButtonDevelopPage },
            { path: 'examples', component: ButtonExamplesPage },
            { path: '', redirectTo: '/components/button/design', pathMatch: 'full' },
        ]
    },
    {
        path: 'components/breadcrumbs',
        component: TabsLayout,
        data: { title: 'Breadcrumbs', section: 'components', pages: [{ title: 'Design', route: './design' }, { title: 'Develop', route: './develop' }, { title: 'Examples', route: './examples' }], description: null },
        children: [{ path: 'design', component: BreadcrumbDesignPage },
            { path: 'develop', component: BreadcrumbDevelopPage },
            { path: 'examples', component: BreadcrumbExamplesPage },
            { path: '', redirectTo: '/components/breadcrumbs/design', pathMatch: 'full' },
        ]
    },
    {
        path: 'components/avatar',
        component: TabsLayout,
        data: { title: 'Avatar', section: 'components', pages: [{ title: 'Design', route: './design' }, { title: 'Develop', route: './develop' }, { title: 'Examples', route: './examples' }], description: null },
        children: [{ path: 'design', component: AvatarDesignPage },
            { path: 'develop', component: AvatarDevelopPage },
            { path: 'examples', component: AvatarExamplesPage },
            { path: '', redirectTo: '/components/avatar/design', pathMatch: 'full' },
        ]
    },
    {
        path: 'components/autocomplete',
        component: TabsLayout,
        data: { title: 'Autocomplete', section: 'components', pages: [{ title: 'Design', route: './design' }, { title: 'Develop', route: './develop' }, { title: 'Examples', route: './examples' }], description: null },
        children: [{ path: 'design', component: AutocompleteDesignPage },
            { path: 'develop', component: AutocompleteDevelopPage },
            { path: 'examples', component: AutocompleteExamplesPage },
            { path: '', redirectTo: '/components/autocomplete/design', pathMatch: 'full' },
        ]
    },
    {
        path: 'components/aside',
        component: TabsLayout,
        data: { title: 'Aside', section: 'components', pages: [{ title: 'Design', route: './design' }, { title: 'Develop', route: './develop' }, { title: 'Examples', route: './examples' }], description: null },
        children: [{ path: 'design', component: AsideDesignPage },
            { path: 'develop', component: AsideDevelopPage },
            { path: 'examples', component: AsideExamplesPage },
            { path: '', redirectTo: '/components/aside/design', pathMatch: 'full' },
        ]
    },
    {
        path: 'components/agenda',
        component: TabsLayout,
        data: { title: 'Agenda', section: 'components', pages: [{ title: 'Design', route: './design' }, { title: 'Develop', route: './develop' }, { title: 'Examples', route: './examples' }], description: null },
        children: [{ path: 'design', component: AgendaDesignPage },
            { path: 'develop', component: AgendaDevelopPage },
            { path: 'examples', component: AgendaExamplesPage },
            { path: '', redirectTo: '/components/agenda/design', pathMatch: 'full' },
        ]
    },
    // Catch All
    { path: '**', redirectTo: '/home', data: {} },
];
const PAGE_LIST = [
    SecurityPage, QuickNotePage, PipesPage, FieldInteractionsPage, DragDropPage, CodeEditorPage, AceEditorPage, v9Page, v8Page, v7Page, v6Page, v11Page, v10Page, TemplatesPage, PatternsPage, PatternsTestPage, PatternsNativeFormsPage, LayoutsPage, TabsExamplesPage, TabsDevelopPage, TabsDesignPage, StepperPage, SidenavPage, ListPage, HeaderPage, ExpansionPage, CardExamplesPage, CardDevelopPage, CardDesignPage, CardDescriptionPage, HomePage, FormControlsPage, ValuePage, TimezonePage, TimePickerExamplesPage, TimePickerDevelopPage, TimePickerDesignPage, TilesPage, SelectPage, RadioButtonsPage, PickerPage, MultiPickerPage, FormGroupsPage, FormPage, DynamicFormPage, DateTimePickerExamplesPage, DateTimePickerDevelopPage, DateTimePickerDesignPage, DatePickerExamplesPage, DatePickerDevelopPage, DatePickerDesignPage, ColorPickerPage, CkEditorPage, ChipsExamplesPage, ChipsDevelopPage, ChipsDesignPage, CheckboxPage, DesignPage, TypographyPage, SpacingPage, IconographyPage, CompositionPage, ColorsPage, ComponentsPage, TooltipExamplesPage, TooltipDevelopPage, TooltipDesignPage, ToolbarExamplesPage, ToolbarDevelopPage, ToolbarDesignPage, ToasterExamplesPage, ToasterDevelopPage, ToasterDesignPage, TipWellExamplesPage, TipWellDevelopPage, TipWellDesignPage, TabbedGroupPickerPage, SwitchPage, SlidesPage, SearchPage, QueryBuilderExamplesPage, QueryBuilderDevelopPage, QueryBuilderDesignPage, ProgressUsagePage, ProgressExamplesPage, ProgressDevelopPage, ProgressDesignPage, PopoverExamplesPage, PopoverDevelopPage, PopoverDesignPage, NonIdealStateExamplesPage, NonIdealStateDevelopPage, NonIdealStateDesignPage, ModalExamplesPage, ModalDevelopPage, ModalDesignPage, MenuExamplesPage, MenuDevelopPage, MenuDesignPage, LoadingExamplesPage, LoadingDevelopPage, LoadingDesignPage, IconExamplesPage, IconDevelopPage, IconDesignPage, FieldExamplesPage, FieldDevelopPage, FieldDesignPage, DropdownExamplesPage, DropdownDevelopPage, DropdownDesignPage, DataTablePage, CalendarExamplesPage, CalendarDevelopPage, CalendarDesignPage, ButtonExamplesPage, ButtonDevelopPage, ButtonDesignPage, BreadcrumbExamplesPage, BreadcrumbDevelopPage, BreadcrumbDesignPage, AvatarExamplesPage, AvatarDevelopPage, AvatarDesignPage, AutocompleteExamplesPage, AutocompleteDevelopPage, AutocompleteDesignPage, AsideExamplesPage, AsideDevelopPage, AsideDesignPage, AgendaExamplesPage, AgendaDevelopPage, AgendaDesignPage
];
class NovoExamplesRoutesModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: NovoExamplesRoutesModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "19.2.15", ngImport: i0, type: NovoExamplesRoutesModule, declarations: [SecurityPage, QuickNotePage, PipesPage, FieldInteractionsPage, DragDropPage, CodeEditorPage, AceEditorPage, v9Page, v8Page, v7Page, v6Page, v11Page, v10Page, TemplatesPage, PatternsPage, PatternsTestPage, PatternsNativeFormsPage, LayoutsPage, TabsExamplesPage, TabsDevelopPage, TabsDesignPage, StepperPage, SidenavPage, ListPage, HeaderPage, ExpansionPage, CardExamplesPage, CardDevelopPage, CardDesignPage, CardDescriptionPage, HomePage, FormControlsPage, ValuePage, TimezonePage, TimePickerExamplesPage, TimePickerDevelopPage, TimePickerDesignPage, TilesPage, SelectPage, RadioButtonsPage, PickerPage, MultiPickerPage, FormGroupsPage, FormPage, DynamicFormPage, DateTimePickerExamplesPage, DateTimePickerDevelopPage, DateTimePickerDesignPage, DatePickerExamplesPage, DatePickerDevelopPage, DatePickerDesignPage, ColorPickerPage, CkEditorPage, ChipsExamplesPage, ChipsDevelopPage, ChipsDesignPage, CheckboxPage, DesignPage, TypographyPage, SpacingPage, IconographyPage, CompositionPage, ColorsPage, ComponentsPage, TooltipExamplesPage, TooltipDevelopPage, TooltipDesignPage, ToolbarExamplesPage, ToolbarDevelopPage, ToolbarDesignPage, ToasterExamplesPage, ToasterDevelopPage, ToasterDesignPage, TipWellExamplesPage, TipWellDevelopPage, TipWellDesignPage, TabbedGroupPickerPage, SwitchPage, SlidesPage, SearchPage, QueryBuilderExamplesPage, QueryBuilderDevelopPage, QueryBuilderDesignPage, ProgressUsagePage, ProgressExamplesPage, ProgressDevelopPage, ProgressDesignPage, PopoverExamplesPage, PopoverDevelopPage, PopoverDesignPage, NonIdealStateExamplesPage, NonIdealStateDevelopPage, NonIdealStateDesignPage, ModalExamplesPage, ModalDevelopPage, ModalDesignPage, MenuExamplesPage, MenuDevelopPage, MenuDesignPage, LoadingExamplesPage, LoadingDevelopPage, LoadingDesignPage, IconExamplesPage, IconDevelopPage, IconDesignPage, FieldExamplesPage, FieldDevelopPage, FieldDesignPage, DropdownExamplesPage, DropdownDevelopPage, DropdownDesignPage, DataTablePage, CalendarExamplesPage, CalendarDevelopPage, CalendarDesignPage, ButtonExamplesPage, ButtonDevelopPage, ButtonDesignPage, BreadcrumbExamplesPage, BreadcrumbDevelopPage, BreadcrumbDesignPage, AvatarExamplesPage, AvatarDevelopPage, AvatarDesignPage, AutocompleteExamplesPage, AutocompleteDevelopPage, AutocompleteDesignPage, AsideExamplesPage, AsideDevelopPage, AsideDesignPage, AgendaExamplesPage, AgendaDevelopPage, AgendaDesignPage], imports: [i1$3.RouterModule, NovoElementsModule, NovoExamplesModule, NovoExamplesSharedModule], exports: [RouterModule] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: NovoExamplesRoutesModule, imports: [RouterModule.forRoot(routes, { useHash: true, anchorScrolling: 'enabled' }), NovoElementsModule, NovoExamplesModule, NovoExamplesSharedModule, RouterModule] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.15", ngImport: i0, type: NovoExamplesRoutesModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: PAGE_LIST,
                    imports: [RouterModule.forRoot(routes, { useHash: true, anchorScrolling: 'enabled' }), NovoElementsModule, NovoExamplesModule, NovoExamplesSharedModule],
                    exports: [RouterModule],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { AccordionExample, AceEditorPage, ActivitySectionExample, AddressControlExample, AddressValueExample, AgendaDesignPage, AgendaDevelopPage, AgendaExample, AgendaExamplesPage, AnalyticsColorsExample, AsideCustomDemo, AsideDesignPage, AsideDevelopPage, AsideExamplesPage, AsideFormDemo, AsideFormExample, AsideUsageExample, AssociatedValueExample, AsyncChipsExample, AsyncPickerExample, AutocompleteDesignPage, AutocompleteDevelopPage, AutocompleteExamplesPage, AutocompleteStackedChipsExample, AutocompleteTextareaExample, AutocompleteUsageExample, AutocompleteWithChipsExample, AvatarDesignPage, AvatarDevelopPage, AvatarExamplesPage, AvatarStackUsageExample, AvatarUsageExample, BasicAceExample, BasicCardExample, BasicCheckboxExample, BasicChipsExample, BasicCodeExample, BasicDropDownExample, BasicEditorExample, BasicExpansionExample, BasicHeaderExample, BasicIconsExample, BasicListExample, BasicMenuExample, BasicMultiPickerExample, BasicPickerExample, BasicQuickNoteExample, BasicRadioExample, BasicSelectExample, BasicSelectWithSearchExample, BasicSidenavExample, BasicSlideExample, BasicTimezoneExample, BasicTipWellExample, BasicToolbarExample, BasicValueExample, BreadcrumbDesignPage, BreadcrumbDevelopPage, BreadcrumbExamplesPage, BreadcrumbSourceUsageExample, BreadcrumbUsageExample, ButtonDesignPage, ButtonDevelopPage, ButtonDialogueExample, ButtonDynamicExample, ButtonExamplesPage, ButtonFabExample, ButtonIconExample, ButtonInverseExample, ButtonLoadingExample, ButtonOverviewExample, ButtonPrimaryExample, ButtonRadioExample, ButtonSecondaryExample, ButtonStandardExample, ButtonTwoIconExample, ButtonlessTipWellExample, CalendarDesignPage, CalendarDevelopPage, CalendarExample, CalendarExamplesPage, CalendarInputControlsExample, CaptionExample, CardConfigExample, CardDescriptionPage, CardDesignPage, CardDevelopPage, CardExamplesPage, CardFormExample, CardWithImageExample, CategoryValueExample, CheckBoxControlsExample, CheckboxListExample, CheckboxPage, ChipUsageExample, ChipsDesignPage, ChipsDevelopPage, ChipsExamplesPage, CkEditorPage, CloseOnSelectChipsExample, CodeEditorPage, CodeExampleComponent, CodeSnippetComponent, ColorInputExample, ColorPickerExample, ColorPickerPage, ColorsPage, ComponentsPage, CompositionPage, CondensedHeaderExample, ConfigureColumnsModal, CorporateUserValueExample, CustomDemoControlExample, CustomDropDownExample, CustomModalExample, CustomPickerConditionDef, CustomPickerResults, CustomPickerResultsExample, CustomQuickNoteExample, CustomQuickNoteResults, CustomQuickNoteResultsExample, CustomTemplateExample, CustomValuesExample, DataTablePage, DataTableRemoteExample, DataTableRowsExample, DataTableServiceExample, DatePickerDesignPage, DatePickerDevelopPage, DatePickerExample, DatePickerExamplesPage, DatePickerInputExample, DatePickerLimitsExample, DateRangeInputExample, DateTimeExample, DateTimeInputExample, DateTimePickerDesignPage, DateTimePickerDevelopPage, DateTimePickerExamplesPage, DateTimeValueExample, DefaultLayout, DefaultOptionsPickerExample, DesignPage, DetailsCardExample, DisabledFormExample, DragDropExample, DragDropPage, DropdownDesignPage, DropdownDevelopPage, DropdownExamplesPage, DynamicFormExample, DynamicFormFieldSetsExample, DynamicFormPage, EXAMPLE_COMPONENTS, EXAMPLE_LIST, EnableDisableAllFieldsInFormExample, EntityColorsExample, EntityListValueExample, EntityPickerExample, ErrorModalExample, ExampleData, ExpansionPage, ExtendedLabelService, ExternalLinkValueExample, FiAddingRemovingExample, FiAsyncExample, FiCalculationExample, FiConfirmExample, FiDescriptionExample, FiEnableDisableExample, FiGlobalsExample, FiHideShowExample, FiMessagingExample, FiModifyAddedPickerExample, FiModifyOptionsExample, FiNestedExample, FiPopoverExample, FiRequiredExample, FiTooltipExample, FiValidationExample, FieldAnatomyExample, FieldComponentsExample, FieldDesignPage, FieldDevelopPage, FieldExamplesPage, FieldInteractionsPage, FieldNativeExample, FieldUsageExample, FigureExample, FileInputControlsExample, FormControlsPage, FormGroupsPage, FormPage, FormUsageExample, FormattedChipsExample, FormattedPickerExample, FormatterValueExample, GroupedMultiPickerExample, GroupedPickerExample, HeaderPage, HeaderSearchbarExample, HeaderSubtitleExample, HideChipsExample, HighlightJS, HomePage, HorizontalExample, HorizontalOptionsExample, HtmlTipWellExample, IconDesignPage, IconDevelopPage, IconExamplesPage, IconRadioExample, IconTipWellExample, IconValueExample, IconographyPage, IconsetExample, JustCriteriaExample, LabelExample, LargeDropDownExample, LayoutsPage, LazyExpansionExample, LegacySelectOptionExample, LinkExample, ListPage, LoadingCircleExample, LoadingDesignPage, LoadingDevelopPage, LoadingExamplesPage, LoadingLineExample, LongSelectExample, MenuContextExample, MenuDesignPage, MenuDevelopPage, MenuExamplesPage, MinimalEditorExample, MixedPickerExample, ModalAddFormDemo, ModalAddFormExample, ModalCustomDemo, ModalDesignPage, ModalDevelopPage, ModalEditFormDemo, ModalEditFormExample, ModalErrorDemo, ModalExamplesPage, ModalSuccessDemo, ModalWarningDemo, MultiDateExample, MultiDropDownExample, MultiOptionValueExample, MultiPickerPage, MultiRowToolbarExample, MultipleSelectExample, MultipleSelectWithSearchExample, NestedMenuExample, NestedMultiPickerExample, NonIdealStateDesignPage, NonIdealStateDevelopPage, NonIdealStateExamplesPage, NonIdealStateLoadingUsageExample, NonIdealStateSearchUsageExample, NonIdealStateUsageExample, NovoExamplesModule, NovoExamplesRoutesModule, NovoExamplesSharedModule, NumberRangeControlExample, OverrideTemplateExample, PAGE_LIST, PatternsNativeFormsPage, PatternsPage, PatternsTestPage, PickerControlsExample, PickerPage, PipesPage, PluralizeExample, PopOverAutoPlacementExample, PopOverBehaviorsExample, PopOverDynamicExample, PopOverHorizontalExample, PopOverPlacementExample, PopOverVerticalExample, PopoverDesignPage, PopoverDevelopPage, PopoverExamplesPage, PositionDropDownExample, PrimaryColorsExample, ProgressBarRadialUsageExample, ProgressBarUsageExample, ProgressDesignPage, ProgressDevelopPage, ProgressExamplesPage, ProgressUsagePage, PropsTableComponent, QueryBuilderDesignPage, QueryBuilderDevelopPage, QueryBuilderExamplesPage, QuickNotePage, RadioButtonsPage, RaisedIconsExample, RecordHeaderExample, RowChipsExample, ScrollToItemDropDownExample, ScrollableDropDownExample, SearchPage, SearchUsageExample, SecurityExample, SecurityPage, SelectPage, SidenavPage, SingleFieldCriteriaExample, SlidesPage, SpacingPage, StepperHorizontalExample, StepperPage, StepperVerticalExample, SuccessModalExample, SwitchPage, SwitchUsageExample, TabbedGroupPickerBasicExample, TabbedGroupPickerBigGroupsExample, TabbedGroupPickerFooterExample, TabbedGroupPickerGroupsExample, TabbedGroupPickerNoSelectionExample, TabbedGroupPickerPage, TabbedGroupPickerQuickSelectExample, TabsBasicExample, TabsColorExample, TabsCondensedExample, TabsDesignPage, TabsDevelopPage, TabsExamplesPage, TabsLayout, TabsRouterExample, TabsVerticalExample, TemplatesPage, TextBasedControlsExample, TextExample, ThemedIconsExample, ThemedListExample, TilesPage, TilesUsageExample, TimeExample, TimePickerDesignPage, TimePickerDevelopPage, TimePickerExample, TimePickerExamplesPage, TimezonePage, TipWellDesignPage, TipWellDevelopPage, TipWellExamplesPage, TitleExample, ToastActionsExample, ToastOptionsExample, ToastServiceExample, ToastUsageExample, ToasterDesignPage, ToasterDevelopPage, ToasterExamplesPage, ToolbarDesignPage, ToolbarDevelopPage, ToolbarExamplesPage, TooltipAlignExample, TooltipDesignPage, TooltipDevelopPage, TooltipExamplesPage, TooltipOptionsExample, TooltipOverflowExample, TooltipPlacementExample, TooltipSizesExample, TooltipToggleExample, TooltipTypesExample, TypedefContent, TypedefExample, TypedefSnippet, TypedefSpec, TypographyPage, UpdatingFormExample, ValuePage, VerticalDynamicFormExample, VerticalExample, VerticalOptionsExample, VerticalRadioExample, WarningModalExample, WeekStartExample, allColors, analyticsColors, entityColors, primaryColors, v10Page, v11Page, v6Page, v7Page, v8Page, v9Page };
//# sourceMappingURL=novo-examples.mjs.map
