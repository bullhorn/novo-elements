import { ChangeDetectorRef, ElementRef, EventEmitter, OnInit } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';
import { NovoLabelService } from 'novo-elements/services';
import type { DatePickerSelectModes, NovoDateSelectEvent, NovoDateSelectionStrategy, NovoMonthSelectEvent, NovoYearSelectEvent, OverlayDate } from 'novo-elements/utils';
import * as i0 from "@angular/core";
export declare class NovoCalendarElement implements OnInit {
    labels: NovoLabelService;
    private element;
    private cdr;
    private _sanitizer;
    minYear: string | number;
    maxYear: string | number;
    minDate: string | number;
    maxDate: string | number;
    activeView: string;
    layout: string;
    _selected: Date[];
    get selected(): Date[];
    set selected(value: Date[]);
    selectedChange: EventEmitter<Date[]>;
    preview: Date[];
    previewChange: EventEmitter<Date[]>;
    activeDateChange: EventEmitter<Date>;
    overlays: OverlayDate[];
    disabledDateMessage: string;
    _activeDate: Date;
    _mode: DatePickerSelectModes;
    _numberOfMonths: number[];
    _weekStartsOn: Day;
    _strategy: NovoDateSelectionStrategy<any>;
    months: any;
    get activeDate(): Date;
    set activeDate(value: Date);
    get weekStartsOn(): Day;
    set weekStartsOn(value: Day);
    get numberOfMonths(): number;
    set numberOfMonths(value: number);
    get mode(): DatePickerSelectModes;
    set mode(value: DatePickerSelectModes);
    get hb_width(): import("@angular/platform-browser").SafeStyle;
    get hb_horiztonal(): boolean;
    get hb_vertical(): boolean;
    constructor(labels: NovoLabelService, element: ElementRef, cdr: ChangeDetectorRef, _sanitizer: DomSanitizer);
    ngOnInit(): void;
    updateView(activeDate: Date): void;
    setToday(): void;
    monthSelected({ event, month }: NovoMonthSelectEvent): void;
    yearSelected({ event, year }: NovoYearSelectEvent): void;
    dateSelected({ event, day }: NovoDateSelectEvent): void;
    updatePreview({ event, day }: NovoDateSelectEvent): void;
    prevMonth(event: Event): void;
    nextMonth(event: Event): void;
    openView(event: Event, type: string): void;
    _isRange(): boolean;
    static ɵfac: i0.ɵɵFactoryDeclaration<NovoCalendarElement, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<NovoCalendarElement, "novo-calendar", never, { "minYear": { "alias": "minYear"; "required": false; }; "maxYear": { "alias": "maxYear"; "required": false; }; "minDate": { "alias": "minDate"; "required": false; }; "maxDate": { "alias": "maxDate"; "required": false; }; "activeView": { "alias": "activeView"; "required": false; }; "layout": { "alias": "layout"; "required": false; }; "selected": { "alias": "selected"; "required": false; }; "preview": { "alias": "preview"; "required": false; }; "overlays": { "alias": "overlays"; "required": false; }; "disabledDateMessage": { "alias": "disabledDateMessage"; "required": false; }; "activeDate": { "alias": "activeDate"; "required": false; }; "weekStartsOn": { "alias": "weekStartsOn"; "required": false; }; "numberOfMonths": { "alias": "numberOfMonths"; "required": false; }; "mode": { "alias": "mode"; "required": false; }; }, { "selectedChange": "selectedChange"; "previewChange": "previewChange"; "activeDateChange": "activeDateChange"; }, never, never, false, never>;
}
