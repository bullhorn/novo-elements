import { AfterContentChecked, AfterViewInit, ChangeDetectorRef, OnDestroy, OnInit, QueryList } from '@angular/core';
import { ControlContainer, FormArray, FormBuilder, UntypedFormGroup } from '@angular/forms';
import { NovoTabbedGroupPickerElement, TabbedGroupPickerButtonConfig, TabbedGroupPickerTab } from 'novo-elements/elements/tabbed-group-picker';
import { NovoLabelService } from 'novo-elements/services';
import { ConditionGroupComponent } from '../condition-group/condition-group.component';
import { NovoConditionFieldDef } from '../query-builder.directives';
import { QueryBuilderService } from '../query-builder.service';
import { BaseFieldDef, Condition, ConditionGroup, Conjunction, AddressCriteriaConfig, DateCriteriaConfig } from '../query-builder.types';
import * as i0 from "@angular/core";
export declare class CriteriaBuilderComponent implements OnInit, OnDestroy, AfterContentChecked, AfterViewInit {
    private controlContainer;
    private formBuilder;
    private cdr;
    qbs: QueryBuilderService;
    labels: NovoLabelService;
    config: any;
    controlName: string;
    allowedGroupings: Conjunction[];
    editTypeFn: (field: BaseFieldDef) => string;
    addressConfig: AddressCriteriaConfig;
    dateConfig: DateCriteriaConfig;
    canBeEmpty: boolean;
    set HideFirstOperator(hide: boolean);
    get hideFirstOperator(): boolean;
    private _hideFirstOperator;
    _contentFieldDefs: QueryList<NovoConditionFieldDef>;
    scopedFieldPicker: import("@angular/core").Signal<NovoTabbedGroupPickerElement>;
    conditionGroups: import("@angular/core").Signal<readonly ConditionGroupComponent[]>;
    parentForm: UntypedFormGroup;
    innerForm: UntypedFormGroup;
    tabbedGroupPickerTabs: import("@angular/core").Signal<TabbedGroupPickerTab[]>;
    addButtonConfig: TabbedGroupPickerButtonConfig;
    /** Subject that emits when the component has been destroyed. */
    private readonly _onDestroy;
    constructor(controlContainer: ControlContainer, formBuilder: FormBuilder, cdr: ChangeDetectorRef, qbs: QueryBuilderService, labels: NovoLabelService);
    ngOnInit(): void;
    ngAfterContentChecked(): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    private isConditionGroup;
    private setInitialValue;
    get root(): FormArray;
    addConditionGroup(data?: any): void;
    newConditionGroup(data: ConditionGroup): UntypedFormGroup;
    newCondition({ field, operator, scope, value, supportingValue }?: Condition): UntypedFormGroup;
    getFieldEntity(fieldConfigs: any, scope: any): any;
    removeConditionGroupAt(index: number): void;
    clearAllConditions(): void;
    onFieldSelect(field: any): void;
    private _configureQueryBuilderService;
    private _registerFieldDefs;
    static ɵfac: i0.ɵɵFactoryDeclaration<CriteriaBuilderComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<CriteriaBuilderComponent, "novo-criteria-builder", never, { "config": { "alias": "config"; "required": false; }; "controlName": { "alias": "controlName"; "required": false; }; "allowedGroupings": { "alias": "allowedGroupings"; "required": false; }; "editTypeFn": { "alias": "editTypeFn"; "required": false; }; "addressConfig": { "alias": "addressConfig"; "required": false; }; "dateConfig": { "alias": "dateConfig"; "required": false; }; "canBeEmpty": { "alias": "canBeEmpty"; "required": false; }; "HideFirstOperator": { "alias": "hideFirstOperator"; "required": false; }; }, {}, ["_contentFieldDefs"], never, false, never>;
}
