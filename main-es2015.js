(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["main"],{

/***/ "./demo/$$_lazy_route_resource lazy recursive":
/*!***********************************************************!*\
  !*** ./demo/$$_lazy_route_resource lazy namespace object ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function webpackEmptyAsyncContext(req) {
	// Here Promise.resolve().then() is used instead of new Promise() to prevent
	// uncaught exception popping up in devtools
	return Promise.resolve().then(function() {
		var e = new Error("Cannot find module '" + req + "'");
		e.code = 'MODULE_NOT_FOUND';
		throw e;
	});
}
webpackEmptyAsyncContext.keys = function() { return []; };
webpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;
module.exports = webpackEmptyAsyncContext;
webpackEmptyAsyncContext.id = "./demo/$$_lazy_route_resource lazy recursive";

/***/ }),

/***/ "./demo/app/app.component.ts":
/*!***********************************!*\
  !*** ./demo/app/app.component.ts ***!
  \***********************************/
/*! exports provided: AppComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AppComponent", function() { return AppComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm2015/router.js");
/* harmony import */ var novo_elements__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! novo-elements */ "./dist/novo-elements/fesm2015/novo-elements.js");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __importDefault = (undefined && undefined.__importDefault) || function (mod) {
  return (mod && mod.__esModule) ? mod : { "default": mod };
};
// NG2


// Vendor

let AppComponent = class AppComponent {
    constructor(router, viewContainerRef, toaster, modalService) {
        this.menuOpen = false;
        toaster.parentViewContainer = viewContainerRef;
        modalService.parentViewContainer = viewContainerRef;
        this.menuOpen = false;
        this.designRoutes = router.config.filter((r) => r.data.section === 'design').sort(this.sortMenu);
        this.componentRoutes = router.config.filter((r) => r.data.section === 'components').sort(this.sortMenu);
        this.formRoutes = router.config.filter((r) => r.data.section === 'form-controls').sort(this.sortMenu);
        this.layoutRoutes = router.config.filter((r) => r.data.section === 'layouts').sort(this.sortMenu);
        this.utilRoutes = router.config.filter((r) => r.data.section === 'utils').sort(this.sortMenu);
        router.events.subscribe(() => {
            window.scrollTo(0, 0);
            this.menuOpen = false;
        });
    }
    sortMenu(a, b) {
        if (a.data.title < b.data.title) {
            return -1;
        }
        if (a.data.title > b.data.title) {
            return 1;
        }
        return 0;
    }
    toggleMenu() {
        this.menuOpen = !this.menuOpen;
    }
};
AppComponent.ctorParameters = () => [
    { type: _angular_router__WEBPACK_IMPORTED_MODULE_1__["Router"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewContainerRef"] },
    { type: novo_elements__WEBPACK_IMPORTED_MODULE_2__["NovoToastService"] },
    { type: novo_elements__WEBPACK_IMPORTED_MODULE_2__["NovoModalService"] }
];
AppComponent = __decorate([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
        selector: 'novo-demo-app',
        template: __importDefault(__webpack_require__(/*! raw-loader!./app.component.html */ "./node_modules/raw-loader/dist/cjs.js!./demo/app/app.component.html")).default,
    }),
    __metadata("design:paramtypes", [_angular_router__WEBPACK_IMPORTED_MODULE_1__["Router"], _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewContainerRef"], novo_elements__WEBPACK_IMPORTED_MODULE_2__["NovoToastService"], novo_elements__WEBPACK_IMPORTED_MODULE_2__["NovoModalService"]])
], AppComponent);



/***/ }),

/***/ "./demo/app/app.module.ts":
/*!********************************!*\
  !*** ./demo/app/app.module.ts ***!
  \********************************/
/*! exports provided: provideFieldInteractionAPI, provideAppBridgeService, AppModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "provideFieldInteractionAPI", function() { return provideFieldInteractionAPI; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "provideAppBridgeService", function() { return provideAppBridgeService; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AppModule", function() { return AppModule; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _angular_platform_browser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/platform-browser */ "./node_modules/@angular/platform-browser/fesm2015/platform-browser.js");
/* harmony import */ var _angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/platform-browser/animations */ "./node_modules/@angular/platform-browser/fesm2015/animations.js");
/* harmony import */ var _angular_common_http__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/common/http */ "./node_modules/@angular/common/fesm2015/http.js");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm2015/forms.js");
/* harmony import */ var _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/cdk/scrolling */ "./node_modules/@angular/cdk/esm2015/scrolling.js");
/* harmony import */ var novo_examples__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! novo-examples */ "./dist/novo-examples/fesm2015/novo-examples.js");
/* harmony import */ var novo_elements__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! novo-elements */ "./dist/novo-elements/fesm2015/novo-elements.js");
/* harmony import */ var _app_component__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./app.component */ "./demo/app/app.component.ts");
/* harmony import */ var _environments_environment__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../environments/environment */ "./demo/environments/environment.ts");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __importDefault = (undefined && undefined.__importDefault) || function (mod) {
  return (mod && mod.__esModule) ? mod : { "default": mod };
};
// NG2







// Vendor



function provideFieldInteractionAPI(toast, modal, formUtils, http, labels) {
    const fieldInteractionApi = new novo_elements__WEBPACK_IMPORTED_MODULE_7__["FieldInteractionApi"](toast, modal, formUtils, http, labels);
    fieldInteractionApi.globals = {
        TEST: 'I AM A GLOBAL!',
    };
    return fieldInteractionApi;
}
function provideAppBridgeService(http) {
    if (!_environments_environment__WEBPACK_IMPORTED_MODULE_9__["environment"].production) {
        return new novo_elements__WEBPACK_IMPORTED_MODULE_7__["DevAppBridgeService"](http);
    }
    return new novo_elements__WEBPACK_IMPORTED_MODULE_7__["AppBridgeService"]();
}
let AppModule = class AppModule {
};
AppModule = __decorate([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"])({
        declarations: [_app_component__WEBPACK_IMPORTED_MODULE_8__["AppComponent"]],
        imports: [
            // NG2
            _angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_2__["BrowserAnimationsModule"],
            _angular_platform_browser__WEBPACK_IMPORTED_MODULE_1__["BrowserModule"],
            _angular_forms__WEBPACK_IMPORTED_MODULE_4__["FormsModule"],
            _angular_common_http__WEBPACK_IMPORTED_MODULE_3__["HttpClientModule"],
            _angular_forms__WEBPACK_IMPORTED_MODULE_4__["ReactiveFormsModule"],
            _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_5__["ScrollingModule"],
            // Vendor
            novo_elements__WEBPACK_IMPORTED_MODULE_7__["NovoElementsModule"],
            novo_elements__WEBPACK_IMPORTED_MODULE_7__["NovoElementProviders"].forRoot(),
            // APP
            novo_examples__WEBPACK_IMPORTED_MODULE_6__["NovoExamplesRoutesModule"],
        ],
        providers: [
            // NovoTemplateService,
            novo_elements__WEBPACK_IMPORTED_MODULE_7__["FormUtils"],
            novo_elements__WEBPACK_IMPORTED_MODULE_7__["NovoLabelService"],
            {
                provide: novo_elements__WEBPACK_IMPORTED_MODULE_7__["FieldInteractionApi"],
                useFactory: provideFieldInteractionAPI,
                deps: [novo_elements__WEBPACK_IMPORTED_MODULE_7__["NovoToastService"], novo_elements__WEBPACK_IMPORTED_MODULE_7__["NovoModalService"], novo_elements__WEBPACK_IMPORTED_MODULE_7__["FormUtils"], _angular_common_http__WEBPACK_IMPORTED_MODULE_3__["HttpClient"], novo_elements__WEBPACK_IMPORTED_MODULE_7__["NovoLabelService"]],
            },
            {
                provide: novo_elements__WEBPACK_IMPORTED_MODULE_7__["AppBridgeService"],
                useFactory: provideAppBridgeService,
                deps: [_angular_common_http__WEBPACK_IMPORTED_MODULE_3__["HttpClient"]],
            },
        ],
        entryComponents: [_app_component__WEBPACK_IMPORTED_MODULE_8__["AppComponent"]],
        bootstrap: [_app_component__WEBPACK_IMPORTED_MODULE_8__["AppComponent"]],
    })
], AppModule);



/***/ }),

/***/ "./demo/environments/environment.ts":
/*!******************************************!*\
  !*** ./demo/environments/environment.ts ***!
  \******************************************/
/*! exports provided: environment */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "environment", function() { return environment; });
// This file can be replaced during build by using the `fileReplacements` array.
// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.
// The list of file replacements can be found in `angular.json`.
var __importDefault = (undefined && undefined.__importDefault) || function (mod) {
  return (mod && mod.__esModule) ? mod : { "default": mod };
};
const environment = {
    production: false,
};
/*
 * In development mode, to ignore zone related error stack frames such as
 * `zone.run`, `zoneDelegate.invokeTask` for easier debugging, you can
 * import the following file, but please comment it out in production mode
 * because it will have performance impact when throw error
 */
// import 'zone.js/dist/zone-error';  // Included with Angular CLI.


/***/ }),

/***/ "./demo/main.ts":
/*!**********************!*\
  !*** ./demo/main.ts ***!
  \**********************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _angular_platform_browser_dynamic__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/platform-browser-dynamic */ "./node_modules/@angular/platform-browser-dynamic/fesm2015/platform-browser-dynamic.js");
/* harmony import */ var _app_app_module__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./app/app.module */ "./demo/app/app.module.ts");
/* harmony import */ var _environments_environment__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./environments/environment */ "./demo/environments/environment.ts");
var __importDefault = (undefined && undefined.__importDefault) || function (mod) {
  return (mod && mod.__esModule) ? mod : { "default": mod };
};




if (_environments_environment__WEBPACK_IMPORTED_MODULE_3__["environment"].production) {
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["enableProdMode"])();
}
Object(_angular_platform_browser_dynamic__WEBPACK_IMPORTED_MODULE_1__["platformBrowserDynamic"])()
    .bootstrapModule(_app_app_module__WEBPACK_IMPORTED_MODULE_2__["AppModule"])
    .catch((err) => console.log(err));


/***/ }),

/***/ "./dist/chomsky/fesm2015/chomsky.js":
/*!******************************************!*\
  !*** ./dist/chomsky/fesm2015/chomsky.js ***!
  \******************************************/
/*! exports provided: ChomskyModule, TranslateDirective, TranslatePipe, TranslateService, ɵa */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ChomskyModule", function() { return ChomskyModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TranslateDirective", function() { return TranslateDirective; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TranslatePipe", function() { return TranslatePipe; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TranslateService", function() { return TranslateService; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵa", function() { return Chomsky; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/_esm2015/index.js");
/* harmony import */ var _angular_platform_browser__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/platform-browser */ "./node_modules/@angular/platform-browser/fesm2015/platform-browser.js");




/**
 * @fileoverview added by tsickle
 * Generated from: utils/loader.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class Loader {
    /**
     * @param {?} url
     * @return {?}
     */
    load(url) {
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        (resolve, reject) => {
            /** @type {?} */
            const xhr = new XMLHttpRequest();
            xhr.open('GET', url);
            xhr.onload = (/**
             * @return {?}
             */
            () => {
                if (xhr.status === 200) {
                    try {
                        resolve(JSON.parse(xhr.responseText));
                    }
                    catch (e) {
                        reject(`Parse Error: Invalid JSON`);
                    }
                }
                else {
                    reject(xhr.statusText);
                }
            });
            xhr.onerror = (/**
             * @return {?}
             */
            () => {
                reject('Network Error');
            });
            xhr.send();
        }));
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: utils/object-assign-deep.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @param {?} obj
 * @return {?}
 */
function isObject(obj) {
    return obj && typeof obj === 'object' && !Array.isArray(obj) && obj !== null;
}
/**
 * @param {?} obj
 * @return {?}
 */
function isFunction(obj) {
    return !!(obj && obj.constructor && obj.call && obj.apply);
}
/**
 * @param {...?} args
 * @return {?}
 */
function mergeDeep(...args) {
    /** @type {?} */
    const startIndex = 1;
    /** @type {?} */
    const output = Object(args[0] || {});
    // Cycle the source object arguments.
    for (let a = startIndex; a < args.length; a++) {
        /** @type {?} */
        const from = args[a];
        /** @type {?} */
        const keys = Object.keys(Object(from));
        // Cycle the properties.
        for (let k = 0; k < keys.length; k++) {
            /** @type {?} */
            const key = keys[k];
            // Merge arrays.
            if (Array.isArray(output[key]) || Array.isArray(from[key])) {
                /** @type {?} */
                const o = Array.isArray(output[key]) ? output[key].slice() : [];
                /** @type {?} */
                const f = Array.isArray(from[key]) ? from[key].slice() : [];
                output[key] = o.concat(f);
            }
            else if (isFunction(output[key]) || isFunction(from[key])) {
                // Copy functions references.
                output[key] = from[key];
            }
            else if (isObject(output[key]) || isObject(from[key])) {
                // Extend objects.
                output[key] = mergeDeep(output[key], from[key]);
            }
            else {
                // Copy all other types.
                output[key] = from[key];
            }
        }
    }
    return output;
}

/**
 * @fileoverview added by tsickle
 * Generated from: utils/currency-overrides.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const currencyOverridesMap = {
    PLN: 'zł',
    SGD: 'S$',
    HUF: 'Ft',
    DKK: 'kr.',
    SEK: 'kr',
    NOK: 'kr',
    ZAR: 'R',
    RUB: '₽',
};

/**
 * @fileoverview added by tsickle
 * Generated from: utils/formats.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @record
 */
function IFormatDefaults() { }
if (false) {}
class Formats {
    constructor() {
        // Format formatDefaults
        this.defaults = {
            number: {},
            currency: {},
            date: {},
        };
        // Initially set the locale to the browser
        this.setLocale(window.navigator.language);
    }
    /**
     * @param {?} overrides
     * @return {?}
     */
    override(overrides) {
        if (overrides.locale) {
            this.setLocale(overrides.locale);
            delete overrides['locale'];
        }
        this.defaults = overrides;
    }
    /**
     * @param {?} locale
     * @return {?}
     */
    setLocale(locale) {
        this.locale = locale;
    }
    /**
     * @param {?} value
     * @param {?=} format
     * @return {?}
     */
    formatNumber(value, format) {
        /** @type {?} */
        const _format = mergeDeep({}, this.defaults.number, format);
        return new Intl.NumberFormat([this.locale, 'en-US'], _format).format(value);
    }
    /**
     * @param {?} value
     * @param {?=} format
     * @return {?}
     */
    formatCurrency(value, format) {
        /** @type {?} */
        const _format = typeof format === 'string'
            ? mergeDeep({}, { currency: format }, this.defaults.currency)
            : mergeDeep({}, format, this.defaults.currency);
        /** @type {?} */
        const options = mergeDeep({ style: 'currency', currency: 'USD' }, _format);
        if (this.overrideCurrency) {
            if (this.overrideCurrency === 'None') {
                return new Intl.NumberFormat([this.locale, 'en-US'], { minimumFractionDigits: 2, maximumFractionDigits: 2 }).format(value);
            }
            options.currency = this.overrideCurrency;
        }
        /** @type {?} */
        const currencyValue = new Intl.NumberFormat([this.locale, 'en-US'], options).format(value);
        return currencyOverridesMap[options.currency]
            ? currencyValue.replace(options.currency, currencyOverridesMap[options.currency])
            : currencyValue;
    }
    /**
     * @param {?} format
     * @return {?}
     */
    getDateOptions(format) {
        /** @type {?} */
        const shortHands = mergeDeep({}, this.defaults.date);
        /** @type {?} */
        let options = typeof format === 'string' ? shortHands[format] : format;
        if (!options || Object.keys(options).length === 0) {
            options = shortHands.dateShort;
        }
        if (this.use24HourTime) {
            options.hour12 = false;
        }
        return options;
    }
    /**
     * @param {?} value
     * @param {?=} format
     * @return {?}
     */
    formatDate(value, format) {
        /** @type {?} */
        const _value = value === null || value === undefined || value === '' ? new Date() : new Date(value);
        /** @type {?} */
        const options = this.getDateOptions(format);
        /** @type {?} */
        const locales = [...(this.overrideDateFormat ? [this.overrideDateFormat] : []), this.locale, 'en-US'];
        return new Intl.DateTimeFormat(locales, options).format(_value);
    }
    /**
     * @param {?} value
     * @param {?=} format
     * @return {?}
     */
    formatTime(value, format) {
        /** @type {?} */
        const _value = value === null || value === undefined || value === '' ? new Date() : new Date(value);
        /** @type {?} */
        const options = this.getDateOptions(format);
        /** @type {?} */
        const locales = [...(this.overrideDateFormat ? [this.overrideDateFormat] : []), this.locale, 'en-US'];
        /** @type {?} */
        let timeParts = Intl.DateTimeFormat(locales, options)
            .formatToParts(_value)
            .reduce((/**
         * @param {?} obj
         * @param {?} part
         * @return {?}
         */
        (obj, part) => {
            obj[part.type] = part.value;
            return obj;
        }), {});
        if (this.use24HourTime) {
            timeParts.hour = timeParts.hour === '24' ? '0' : timeParts.hour;
        }
        else {
            timeParts.hour = timeParts.hour === '0' ? '12' : timeParts.hour;
        }
        /** @type {?} */
        const dayPeriodPropertyName = Object.keys(timeParts).find((/**
         * @param {?} n
         * @return {?}
         */
        (n) => n.toLowerCase() === 'dayperiod'));
        /** @type {?} */
        const dayperiod = timeParts[dayPeriodPropertyName] || '';
        return `${timeParts.hour}:${timeParts.minute}${dayperiod}`;
    }
    /**
     * @param {?} value
     * @param {?=} format
     * @return {?}
     */
    format(value, format) {
        if (!value) {
            return value;
        }
        switch (format) {
            case 'uppercase':
                return value.toUpperCase();
            case 'lowercase':
                return value.toLowerCase();
            case 'title':
                return value.replace(/\w\S*/g, (/**
                 * @param {?} txt
                 * @return {?}
                 */
                (txt) => {
                    return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
                }));
            case 'denormalize':
                return value.replace(/([A-Z])/g, ' $1').replace(/^./, (/**
                 * @param {?} str
                 * @return {?}
                 */
                (str) => {
                    return str.toUpperCase();
                }));
            default:
                return value;
        }
    }
}
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: utils/dictionary-manager.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DictionaryManager {
    constructor() {
        this.dictionaries = {};
    }
    /**
     * @param {?} locale
     * @return {?}
     */
    contains(locale) {
        return !!this.dictionaries[locale];
    }
    /**
     * @param {?} locale
     * @return {?}
     */
    get(locale) {
        return this.dictionaries[locale] || this.dictionaries[locale.split('-')[0]];
    }
    /**
     * @param {?} locale
     * @param {?} translations
     * @param {?} fallbackTranslations
     * @return {?}
     */
    add(locale, translations, fallbackTranslations) {
        this.dictionaries[locale] = mergeDeep({}, fallbackTranslations, translations);
    }
}
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: utils/chomsky.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// Default formats
/** @type {?} */
const FORMAT_DEFAULTS = {
    number: {
        style: 'decimal',
    },
    currency: {
        style: 'currency',
        currency: 'USD',
    },
    date: {
        short: {
            // DD/MM/YYYY, HH:MM A - 02/14/2017, 1:17 PM
            month: '2-digit',
            day: '2-digit',
            year: 'numeric',
            hour: 'numeric',
            minute: '2-digit',
            hour12: true,
        },
        medium: {
            // MMM DD, YYYY, HH:MM A - Feb 14, 2017, 1:17 PM
            month: 'short',
            day: '2-digit',
            year: 'numeric',
            hour: 'numeric',
            minute: '2-digit',
            hour12: true,
        },
        long: {
            // MMMM DD, YYYY, HH:MM A - Febuary 14, 2017, 1:17 PM
            month: 'long',
            day: '2-digit',
            year: 'numeric',
            hour: 'numeric',
            minute: '2-digit',
            hour12: true,
        },
        dateShort: {
            // DEFAULT: DD/MM/YYYY - 02/14/2017
            month: '2-digit',
            day: '2-digit',
            year: 'numeric',
        },
        dateMedium: {
            // MMM DD, YYYY - Feb 14, 2017
            month: 'short',
            day: '2-digit',
            year: 'numeric',
        },
        dateLong: {
            // MMMM DD, YYYY - Febuary 14, 2017
            month: 'long',
            day: '2-digit',
            year: 'numeric',
        },
        timeShort: {
            // HH:MM A - 1:17 PM
            hour: 'numeric',
            minute: '2-digit',
            hour12: true,
        },
        timeLong: {
            // HH:MM A Z - 1:17 PM CST
            hour: 'numeric',
            minute: '2-digit',
            timeZoneName: 'short',
            hour12: true,
        },
    },
};
class Chomsky {
    /**
     * @param {?=} locale
     */
    constructor(locale) {
        // Loader to load translations from a JSON file
        this.loader = new Loader();
        // Default location for translations
        this.location = 'i18n/';
        // Current locale
        this.currentLocale = window.navigator.language;
        // Dictionary Manger to handle translations that have been loaded
        this.dictionaryManager = new DictionaryManager();
        // Custom formats based on the locale
        this.formats = new Formats();
        // Object for default replacements, so users don't have to pass around each time
        this.defaultReplacements = {};
        // Handle for when the locale changes
        this.onLocaleChange = new rxjs__WEBPACK_IMPORTED_MODULE_1__["Subject"]();
        if (locale) {
            this.use(locale);
        }
    }
    /**
     * @param {?} location
     * @return {?}
     */
    setLocation(location) {
        this.location = location;
    }
    /**
     * @param {?} defaultReplacements
     * @return {?}
     */
    setDefaultReplacements(defaultReplacements) {
        this.defaultReplacements = defaultReplacements;
    }
    /**
     * @param {?} currency
     * @return {?}
     */
    overrideCurrency(currency) {
        this.formats.overrideCurrency = currency;
    }
    /**
     * @param {?} use24HourTime
     * @return {?}
     */
    forceDisplayTo24HourTime(use24HourTime) {
        this.formats.use24HourTime = use24HourTime;
    }
    /**
     * @param {?} dateFormatString
     * @return {?}
     */
    overrideDateFormat(dateFormatString) {
        this.formats.overrideDateFormat = dateFormatString;
    }
    /**
     * @param {?} locale
     * @return {?}
     */
    use(locale) {
        // Capture the pending task
        /** @type {?} */
        let pending;
        // If we don't have the translations, load them
        if (!this.dictionaryManager.get(locale)) {
            pending = this.getTranslations(locale);
        }
        // Return the pending if we are fetching
        if (typeof pending !== 'undefined') {
            return pending;
        }
        else {
            // Split out the language code from the locale
            /** @type {?} */
            const languageCode = (locale.split('-')[0] || '').toLowerCase();
            // Return the translations if they are already loaded
            /** @type {?} */
            const currentTranslations = [this.dictionaryManager.get(locale), this.dictionaryManager.get(languageCode)];
            this.applyLanguage(locale, currentTranslations[0], currentTranslations[1]);
            return Object(rxjs__WEBPACK_IMPORTED_MODULE_1__["of"])(currentTranslations);
        }
    }
    /**
     * @param {?} key
     * @param {?=} interpolation
     * @return {?}
     */
    translate(key, interpolation) {
        /** @type {?} */
        let value = this.getValue(key);
        // Handle pluralization
        if (value && typeof value === 'object') {
            if (typeof interpolation === 'object') {
                /** @type {?} */
                const gender = interpolation.gender || 'other';
                if (gender) {
                    if (interpolation.quantity === 0 || interpolation.quantity) {
                        if (value[gender].hasOwnProperty(interpolation.quantity)) {
                            value = value[gender][interpolation.quantity];
                        }
                        else {
                            if (interpolation.quantity === 0) {
                                value = value[gender].zero;
                            }
                            else {
                                value = value[gender].many;
                            }
                        }
                    }
                    else {
                        throw new Error('Missing "quantity" property on the replacements!');
                    }
                }
            }
        }
        // Handle interpolation
        if ((interpolation || this.defaultReplacements) && value) {
            /** @type {?} */
            const replacements = Object.assign({}, this.defaultReplacements, interpolation);
            value = value.replace(/{([^}]*)}/gi, (/**
             * @param {?} m
             * @param {?} param
             * @return {?}
             */
            (m, param) => {
                /** @type {?} */
                const params = param.split(':');
                if (params.length === 1) {
                    /** @type {?} */
                    let match = '';
                    if (replacements.hasOwnProperty(param)) {
                        match = replacements[param];
                    }
                    else {
                        match = replacements;
                    }
                    return match;
                }
                /** @type {?} */
                const unparsedValue = replacements[params[0]] || interpolation;
                switch (params[1]) {
                    case 'date':
                        return this.formatDate(unparsedValue, params[2]);
                    case 'currency':
                        return this.formatCurrency(unparsedValue, params[2]);
                    case 'number':
                        return this.formatNumber(unparsedValue, params[2]);
                    case 'format':
                        /** @type {?} */
                        const formats = params[2].split(',');
                        /** @type {?} */
                        let formattedString = unparsedValue;
                        if (formats.length) {
                            for (const format of formats) {
                                formattedString = this.format(formattedString, format);
                            }
                        }
                        else {
                            formattedString = this.format(unparsedValue, params[2]);
                        }
                        return formattedString;
                    default:
                        return '';
                }
            }));
        }
        // Return the key if no value is present.
        return value || key;
    }
    /**
     * @param {?} value
     * @param {?=} format
     * @return {?}
     */
    format(value, format) {
        return this.formats.format(value, format);
    }
    /**
     * @param {?} date
     * @param {?=} format
     * @return {?}
     */
    formatDate(date, format) {
        return this.formats.formatDate(date, format);
    }
    /**
     * @param {?} date
     * @param {?=} format
     * @return {?}
     */
    formatTime(date, format) {
        return this.formats.formatTime(date, format);
    }
    /**
     * @param {?} value
     * @param {?=} format
     * @return {?}
     */
    formatCurrency(value, format) {
        return this.formats.formatCurrency(value, format);
    }
    /**
     * @param {?} value
     * @param {?=} format
     * @return {?}
     */
    formatNumber(value, format) {
        return this.formats.formatNumber(value, format);
    }
    /**
     * @private
     * @param {?} key
     * @return {?}
     */
    getValue(key) {
        /** @type {?} */
        let value;
        /** @type {?} */
        const translations = this.dictionaryManager.get(this.currentLocale);
        if (translations) {
            /** @type {?} */
            const tokens = key.split('.');
            value = translations[tokens[0]];
            if (value) {
                for (let i = 1; i < tokens.length; i++) {
                    if (!value) {
                        value = translations[tokens[i]];
                    }
                    else {
                        value = value[tokens[i]];
                    }
                }
            }
        }
        return value;
    }
    /**
     * @private
     * @param {?} locale
     * @return {?}
     */
    getTranslations(locale) {
        // Split out the language code from the locale
        /** @type {?} */
        const languageCode = (locale.split('-')[0] || '').toLowerCase();
        // Fetch the fallback language first
        return Object(rxjs__WEBPACK_IMPORTED_MODULE_1__["from"])(new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        (resolve, reject) => {
            this.translationFetcher(languageCode).then((/**
             * @param {?} fallbackTranslations
             * @return {?}
             */
            (fallbackTranslations) => {
                this.translationFetcher(locale).then((/**
                 * @param {?} translations
                 * @return {?}
                 */
                (translations) => {
                    this.applyLanguage(locale, translations, fallbackTranslations);
                    resolve(true);
                }), (/**
                 * @param {?} error
                 * @return {?}
                 */
                (error) => {
                    console.error(`[Chomsky] - Cannot find the locale translation file! (${locale}):`, error);
                    this.applyLanguage(locale, {}, fallbackTranslations);
                    resolve(true);
                }));
            }), (/**
             * @param {?} error
             * @return {?}
             */
            (error) => {
                console.error(`[Chomsky] - Cannot find the base translation file! (${languageCode}):`, error);
                this.applyLanguage(locale, {}, {});
                resolve(true);
            }));
        })));
    }
    /**
     * @private
     * @param {?} locale
     * @param {?} translations
     * @param {?} fallbackTranslations
     * @return {?}
     */
    applyLanguage(locale, translations, fallbackTranslations) {
        // Set current locale
        this.currentLocale = locale;
        // Set locale on formats too
        this.formats.setLocale(locale);
        // Handle overrides
        /** @type {?} */
        const overrides = {};
        if (translations && translations.hasOwnProperty('_defaults_')) {
            mergeDeep(overrides, translations._defaults_);
            delete translations['_defaults_'];
        }
        if (fallbackTranslations && fallbackTranslations.hasOwnProperty('_defaults_')) {
            mergeDeep(overrides, fallbackTranslations._defaults_);
            delete translations['_defaults_'];
        }
        this.formats.override(mergeDeep({}, FORMAT_DEFAULTS, overrides));
        // Add the translations to the DictionaryManager
        this.dictionaryManager.add(locale, translations, fallbackTranslations);
        // Emit a change event
        this.onLocaleChange.next(locale);
    }
    /**
     * @private
     * @param {?} locale
     * @return {?}
     */
    translationFetcher(locale) {
        return this.loader.load(`${this.location}${locale}.json`);
    }
}
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: translate/translate.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const TranslateService = new Chomsky();

/**
 * @fileoverview added by tsickle
 * Generated from: translate/translate.pipe.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class TranslatePipe {
    /**
     * @param {?=} changeDetector
     */
    constructor(changeDetector) {
        this.changeDetector = changeDetector;
        this.lastKey = '';
        this.lastParams = '';
        this.onLangChange = null;
        this.changeDetector = changeDetector;
    }
    /**
     * @param {?} objectOne
     * @param {?} objectTwo
     * @return {?}
     */
    equals(objectOne, objectTwo) {
        if (objectOne === objectTwo) {
            return true;
        }
        if (objectOne === null || objectTwo === null) {
            return false;
        }
        /** @type {?} */
        const typeOne = typeof objectOne;
        /** @type {?} */
        const typeTwo = typeof objectTwo;
        /** @type {?} */
        let length;
        /** @type {?} */
        let key;
        /** @type {?} */
        let keySet;
        if (typeOne === typeTwo && typeOne === 'object') {
            if (Array.isArray(objectOne)) {
                // Array checker
                if (!Array.isArray(objectTwo)) {
                    return false;
                }
                if ((length = objectOne.length) === objectTwo.length) {
                    for (key = 0; key < length; key++) {
                        if (!this.equals(objectOne[key], objectTwo[key])) {
                            return false;
                        }
                    }
                    return true;
                }
            }
            else {
                // Object checker
                if (Array.isArray(objectTwo)) {
                    return false;
                }
                keySet = Object.create(null);
                for (key in objectOne) {
                    if (key) {
                        if (!this.equals(objectOne[key], objectTwo[key])) {
                            return false;
                        }
                        keySet[key] = true;
                    }
                }
                for (key in objectTwo) {
                    if (!(key in keySet) && typeof objectTwo[key] !== 'undefined') {
                        return false;
                    }
                }
                return true;
            }
        }
        return false;
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.unsubscribe();
    }
    /**
     * @param {?} phraseKey
     * @param {?} dynamicVariables
     * @return {?}
     */
    updateValue(phraseKey, dynamicVariables) {
        this.value = TranslateService.translate(phraseKey, dynamicVariables);
        this.changeDetector.markForCheck();
    }
    /**
     * @param {?} phraseKey
     * @param {?=} dynamicVariables
     * @return {?}
     */
    transform(phraseKey, dynamicVariables) {
        if (!phraseKey || phraseKey.length === 0) {
            return null;
        }
        if (this.equals(phraseKey, this.lastKey) && this.equals(dynamicVariables, this.lastParams)) {
            return this.value;
        }
        this.lastKey = phraseKey;
        this.lastParams = dynamicVariables;
        this.updateValue(phraseKey, dynamicVariables);
        this.unsubscribe();
        this.onLangChange = TranslateService.onLocaleChange.subscribe((/**
         * @return {?}
         */
        () => {
            this.updateValue(phraseKey, dynamicVariables);
        }));
        return this.value;
    }
    /**
     * @return {?}
     */
    unsubscribe() {
        if (this.onLangChange) {
            this.onLangChange.unsubscribe();
            this.onLangChange = undefined;
        }
    }
}
TranslatePipe.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Pipe"], args: [{
                name: 'translate',
                pure: false,
            },] }
];
/** @nocollapse */
TranslatePipe.ctorParameters = () => [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectorRef"] }
];
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: translate/translate.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class TranslateDirective {
    /**
     * @param {?} sanitizer
     */
    constructor(sanitizer) {
        this.sanitizer = sanitizer;
    }
    /**
     * @return {?}
     */
    get innerHTML() {
        return this.translatedValue;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        TranslateService.onLocaleChange.subscribe((/**
         * @return {?}
         */
        () => {
            this.translatedValue = this.renderContent(this.translate, this.dynamicValues);
        }));
        this.translatedValue = this.renderContent(this.translate, this.dynamicValues);
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        TranslateService.onLocaleChange.unsubscribe();
    }
    /**
     * @param {?} key
     * @param {?} interpolation
     * @return {?}
     */
    renderContent(key, interpolation) {
        return this.sanitizer.bypassSecurityTrustHtml(TranslateService.translate(key, interpolation));
    }
}
TranslateDirective.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{
                selector: '[translate]',
            },] }
];
/** @nocollapse */
TranslateDirective.ctorParameters = () => [
    { type: _angular_platform_browser__WEBPACK_IMPORTED_MODULE_2__["DomSanitizer"] }
];
TranslateDirective.propDecorators = {
    translate: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    dynamicValues: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    innerHTML: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostBinding"], args: ['innerHTML',] }]
};
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: chomsky.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ChomskyModule {
}
ChomskyModule.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                declarations: [TranslatePipe, TranslateDirective],
                exports: [TranslatePipe, TranslateDirective],
            },] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: index.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: chomsky.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */


//# sourceMappingURL=chomsky.js.map


/***/ }),

/***/ "./dist/novo-elements/fesm2015/novo-elements.js":
/*!******************************************************!*\
  !*** ./dist/novo-elements/fesm2015/novo-elements.js ***!
  \******************************************************/
/*! exports provided: AceEditorControl, ActivityTableDataSource, ActivityTableRenderers, AddressControl, AppBridge, AppBridgeHandler, AppBridgeService, ArrayCollection, BaseControl, BasePickerResults, BaseRenderer, BrowserGlobalRef, COUNTRIES, CalendarEventResponse, CardActionsElement, CardElement, CheckListControl, CheckboxControl, ChecklistPickerResults, CollectionEvent, ComponentUtils, ControlFactory, CustomControl, DataTableBigDecimalRendererPipe, DataTableInterpolatePipe, DateCell, DateControl, DateTableCurrencyRendererPipe, DateTableDateRendererPipe, DateTableDateTimeRendererPipe, DateTableNumberRendererPipe, DateTableTimeRendererPipe, DateTimeControl, DayOfMonthPipe, DecodeURIPipe, Deferred, DevAppBridge, DevAppBridgeService, DistributionListPickerResults, EditorControl, EndOfWeekDisplayPipe, EntityList, EntityPickerResult, EntityPickerResults, FieldInteractionApi, FileControl, FormUtils, FormValidators, GlobalRef, GooglePlacesModule, GooglePlacesService, GroupByPipe, GroupedControl, GroupedMultiPickerResults, Helpers, HoursPipe, KeyCodes, LocalStorageService, MonthDayPipe, MonthPipe, NOVO_VALUE_THEME, NOVO_VALUE_TYPE, NativeSelectControl, NovoAccordion, NovoAceEditor, NovoAceEditorModule, NovoActivityTable, NovoActivityTableActions, NovoActivityTableCustomFilter, NovoActivityTableCustomHeader, NovoActivityTableEmptyMessage, NovoActivityTableNoResultsMessage, NovoActivityTableState, NovoAddressElement, NovoAutoSize, NovoButtonElement, NovoButtonModule, NovoCKEditorElement, NovoCalendarAllDayEventElement, NovoCalendarDateChangeElement, NovoCalendarDayEventElement, NovoCalendarDayViewElement, NovoCalendarHourSegmentElement, NovoCalendarModule, NovoCalendarMonthDayElement, NovoCalendarMonthHeaderElement, NovoCalendarMonthViewElement, NovoCalendarWeekEventElement, NovoCalendarWeekHeaderElement, NovoCalendarWeekViewElement, NovoCardModule, NovoCategoryDropdownElement, NovoCategoryDropdownModule, NovoCheckListElement, NovoCheckboxElement, NovoChipElement, NovoChipsElement, NovoChipsModule, NovoCommonModule, NovoControlElement, NovoControlGroup, NovoControlTemplates, NovoDataTable, NovoDataTableClearButton, NovoDataTableFilterUtils, NovoDataTableModule, NovoDatePickerElement, NovoDatePickerInputElement, NovoDatePickerModule, NovoDateTimePickerElement, NovoDateTimePickerInputElement, NovoDateTimePickerModule, NovoDragulaElement, NovoDragulaModule, NovoDragulaService, NovoDropDownItemHeaderElement, NovoDropdownCell, NovoDropdownElement, NovoDropdownListElement, NovoDropdownModule, NovoDynamicFormElement, NovoElementProviders, NovoElementsModule, NovoEventTypeLegendElement, NovoExpansionModule, NovoExpansionPanel, NovoExpansionPanelActionRow, NovoExpansionPanelContent, NovoExpansionPanelDescription, NovoExpansionPanelHeader, NovoExpansionPanelTitle, NovoFieldsetHeaderElement, NovoFile, NovoFileInputElement, NovoFormControl, NovoFormElement, NovoFormExtrasModule, NovoFormGroup, NovoFormModule, NovoHeaderComponent, NovoHeaderModule, NovoHeaderSpacer, NovoHorizontalStepper, NovoIconComponent, NovoIconModule, NovoIsLoadingDirective, NovoItemAvatarElement, NovoItemContentElement, NovoItemDateElement, NovoItemElement, NovoItemEndElement, NovoItemHeaderElement, NovoItemTitleElement, NovoLabelService, NovoListElement, NovoListItemElement, NovoListModule, NovoLoadedDirective, NovoLoadingElement, NovoLoadingModule, NovoModalElement, NovoModalModule, NovoModalNotificationElement, NovoModalParams, NovoModalRef, NovoModalService, NovoMultiPickerElement, NovoMultiPickerModule, NovoNavContentElement, NovoNavElement, NovoNavHeaderElement, NovoNavOutletElement, NovoNovoCKEditorModule, NovoOverlayModule, NovoOverlayTemplateComponent, NovoPickerElement, NovoPickerModule, NovoPipesModule, NovoPopOverModule, NovoQuickNoteModule, NovoRadioElement, NovoRadioGroup, NovoRadioModule, NovoRowChipElement, NovoRowChipsElement, NovoSearchBoxElement, NovoSearchBoxModule, NovoSelectElement, NovoSelectModule, NovoSelection, NovoSimpleActionCell, NovoSimpleCell, NovoSimpleCellDef, NovoSimpleCellHeader, NovoSimpleCheckboxCell, NovoSimpleCheckboxHeaderCell, NovoSimpleColumnDef, NovoSimpleEmptyHeaderCell, NovoSimpleFilterFocus, NovoSimpleHeaderCell, NovoSimpleHeaderCellDef, NovoSimpleHeaderRow, NovoSimpleHeaderRowDef, NovoSimpleRow, NovoSimpleRowDef, NovoSimpleTableModule, NovoSimpleTablePagination, NovoSkeletonDirective, NovoSliderElement, NovoSliderModule, NovoSortFilter, NovoSpinnerElement, NovoStep, NovoStepHeader, NovoStepLabel, NovoStepStatus, NovoStepper, NovoStepperModule, NovoSwitchElement, NovoSwitchModule, NovoTabButtonElement, NovoTabElement, NovoTabLinkElement, NovoTabModule, NovoTabbedGroupPickerElement, NovoTabbedGroupPickerModule, NovoTable, NovoTableActionsElement, NovoTableElement, NovoTableExtrasModule, NovoTableFooterElement, NovoTableHeaderElement, NovoTableKeepFilterFocus, NovoTableMode, NovoTableModule, NovoTemplate, NovoTemplateService, NovoTilesElement, NovoTilesModule, NovoTimePickerElement, NovoTimePickerInputElement, NovoTimePickerModule, NovoTipWellElement, NovoTipWellModule, NovoToastElement, NovoToastModule, NovoToastService, NovoTooltipModule, NovoUtilActionComponent, NovoUtilsComponent, NovoValueElement, NovoValueModule, NovoVerticalStepper, OptionsService, OutsideClick, PagedArrayCollection, Pagination, PercentageCell, PickerControl, PickerResults, PlacesListComponent, PluralPipe, PopOverContent, PopOverDirective, QuickNoteControl, QuickNoteElement, QuickNoteResults, RadioControl, ReadOnlyControl, RemoteActivityTableService, RemoteDataTableService, RenderPipe, RowDetails, Security, SelectControl, SkillsSpecialtyPickerResults, StaticActivityTableService, StaticDataTableService, TableCell, TableFilter, TablePickerControl, TextAreaControl, TextBoxControl, ThOrderable, ThSortable, TilesControl, TimeControl, TooltipDirective, Unless, UnlessModule, WeekdayPipe, WorkersCompCodesPickerResults, YearPipe, findByCountryCode, findByCountryId, findByCountryName, getCountries, getStateObjects, getStates, notify, ɵa, ɵb, ɵc, ɵd, ɵe, ɵf, ɵg, ɵh, ɵi, ɵj, ɵk, ɵl, ɵm, ɵn, ɵo, ɵp, ɵq, ɵr, ɵs, ɵt, ɵu */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AceEditorControl", function() { return AceEditorControl; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ActivityTableDataSource", function() { return ActivityTableDataSource; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ActivityTableRenderers", function() { return ActivityTableRenderers; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AddressControl", function() { return AddressControl; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AppBridge", function() { return AppBridge; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AppBridgeHandler", function() { return AppBridgeHandler; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AppBridgeService", function() { return AppBridgeService; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ArrayCollection", function() { return ArrayCollection; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BaseControl", function() { return BaseControl; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BasePickerResults", function() { return BasePickerResults; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BaseRenderer", function() { return BaseRenderer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BrowserGlobalRef", function() { return BrowserGlobalRef; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "COUNTRIES", function() { return COUNTRIES; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CalendarEventResponse", function() { return CalendarEventResponse; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CardActionsElement", function() { return CardActionsElement; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CardElement", function() { return CardElement; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CheckListControl", function() { return CheckListControl; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CheckboxControl", function() { return CheckboxControl; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ChecklistPickerResults", function() { return ChecklistPickerResults; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CollectionEvent", function() { return CollectionEvent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ComponentUtils", function() { return ComponentUtils; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ControlFactory", function() { return ControlFactory; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CustomControl", function() { return CustomControl; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DataTableBigDecimalRendererPipe", function() { return DataTableBigDecimalRendererPipe; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DataTableInterpolatePipe", function() { return DataTableInterpolatePipe; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DateCell", function() { return DateCell; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DateControl", function() { return DateControl; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DateTableCurrencyRendererPipe", function() { return DateTableCurrencyRendererPipe; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DateTableDateRendererPipe", function() { return DateTableDateRendererPipe; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DateTableDateTimeRendererPipe", function() { return DateTableDateTimeRendererPipe; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DateTableNumberRendererPipe", function() { return DateTableNumberRendererPipe; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DateTableTimeRendererPipe", function() { return DateTableTimeRendererPipe; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DateTimeControl", function() { return DateTimeControl; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DayOfMonthPipe", function() { return DayOfMonthPipe; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DecodeURIPipe", function() { return DecodeURIPipe; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Deferred", function() { return Deferred; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DevAppBridge", function() { return DevAppBridge; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DevAppBridgeService", function() { return DevAppBridgeService; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DistributionListPickerResults", function() { return DistributionListPickerResults; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EditorControl", function() { return EditorControl; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EndOfWeekDisplayPipe", function() { return EndOfWeekDisplayPipe; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EntityList", function() { return EntityList; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EntityPickerResult", function() { return EntityPickerResult; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EntityPickerResults", function() { return EntityPickerResults; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FieldInteractionApi", function() { return FieldInteractionApi; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FileControl", function() { return FileControl; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FormUtils", function() { return FormUtils; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FormValidators", function() { return FormValidators; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GlobalRef", function() { return GlobalRef; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GooglePlacesModule", function() { return GooglePlacesModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GooglePlacesService", function() { return GooglePlacesService; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GroupByPipe", function() { return GroupByPipe; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GroupedControl", function() { return GroupedControl; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GroupedMultiPickerResults", function() { return GroupedMultiPickerResults; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Helpers", function() { return Helpers; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HoursPipe", function() { return HoursPipe; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "KeyCodes", function() { return KeyCodes; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LocalStorageService", function() { return LocalStorageService; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MonthDayPipe", function() { return MonthDayPipe; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MonthPipe", function() { return MonthPipe; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NOVO_VALUE_THEME", function() { return NOVO_VALUE_THEME; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NOVO_VALUE_TYPE", function() { return NOVO_VALUE_TYPE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NativeSelectControl", function() { return NativeSelectControl; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoAccordion", function() { return NovoAccordion; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoAceEditor", function() { return NovoAceEditor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoAceEditorModule", function() { return NovoAceEditorModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoActivityTable", function() { return NovoActivityTable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoActivityTableActions", function() { return NovoActivityTableActions; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoActivityTableCustomFilter", function() { return NovoActivityTableCustomFilter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoActivityTableCustomHeader", function() { return NovoActivityTableCustomHeader; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoActivityTableEmptyMessage", function() { return NovoActivityTableEmptyMessage; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoActivityTableNoResultsMessage", function() { return NovoActivityTableNoResultsMessage; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoActivityTableState", function() { return NovoActivityTableState; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoAddressElement", function() { return NovoAddressElement; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoAutoSize", function() { return NovoAutoSize; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoButtonElement", function() { return NovoButtonElement; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoButtonModule", function() { return NovoButtonModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoCKEditorElement", function() { return NovoCKEditorElement; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoCalendarAllDayEventElement", function() { return NovoCalendarAllDayEventElement; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoCalendarDateChangeElement", function() { return NovoCalendarDateChangeElement; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoCalendarDayEventElement", function() { return NovoCalendarDayEventElement; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoCalendarDayViewElement", function() { return NovoCalendarDayViewElement; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoCalendarHourSegmentElement", function() { return NovoCalendarHourSegmentElement; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoCalendarModule", function() { return NovoCalendarModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoCalendarMonthDayElement", function() { return NovoCalendarMonthDayElement; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoCalendarMonthHeaderElement", function() { return NovoCalendarMonthHeaderElement; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoCalendarMonthViewElement", function() { return NovoCalendarMonthViewElement; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoCalendarWeekEventElement", function() { return NovoCalendarWeekEventElement; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoCalendarWeekHeaderElement", function() { return NovoCalendarWeekHeaderElement; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoCalendarWeekViewElement", function() { return NovoCalendarWeekViewElement; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoCardModule", function() { return NovoCardModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoCategoryDropdownElement", function() { return NovoCategoryDropdownElement; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoCategoryDropdownModule", function() { return NovoCategoryDropdownModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoCheckListElement", function() { return NovoCheckListElement; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoCheckboxElement", function() { return NovoCheckboxElement; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoChipElement", function() { return NovoChipElement; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoChipsElement", function() { return NovoChipsElement; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoChipsModule", function() { return NovoChipsModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoCommonModule", function() { return NovoCommonModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoControlElement", function() { return NovoControlElement; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoControlGroup", function() { return NovoControlGroup; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoControlTemplates", function() { return NovoControlTemplates; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoDataTable", function() { return NovoDataTable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoDataTableClearButton", function() { return NovoDataTableClearButton; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoDataTableFilterUtils", function() { return NovoDataTableFilterUtils; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoDataTableModule", function() { return NovoDataTableModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoDatePickerElement", function() { return NovoDatePickerElement; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoDatePickerInputElement", function() { return NovoDatePickerInputElement; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoDatePickerModule", function() { return NovoDatePickerModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoDateTimePickerElement", function() { return NovoDateTimePickerElement; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoDateTimePickerInputElement", function() { return NovoDateTimePickerInputElement; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoDateTimePickerModule", function() { return NovoDateTimePickerModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoDragulaElement", function() { return NovoDragulaElement; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoDragulaModule", function() { return NovoDragulaModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoDragulaService", function() { return NovoDragulaService; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoDropDownItemHeaderElement", function() { return NovoDropDownItemHeaderElement; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoDropdownCell", function() { return NovoDropdownCell; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoDropdownElement", function() { return NovoDropdownElement; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoDropdownListElement", function() { return NovoDropdownListElement; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoDropdownModule", function() { return NovoDropdownModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoDynamicFormElement", function() { return NovoDynamicFormElement; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoElementProviders", function() { return NovoElementProviders; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoElementsModule", function() { return NovoElementsModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoEventTypeLegendElement", function() { return NovoEventTypeLegendElement; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoExpansionModule", function() { return NovoExpansionModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoExpansionPanel", function() { return NovoExpansionPanel; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoExpansionPanelActionRow", function() { return NovoExpansionPanelActionRow; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoExpansionPanelContent", function() { return NovoExpansionPanelContent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoExpansionPanelDescription", function() { return NovoExpansionPanelDescription; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoExpansionPanelHeader", function() { return NovoExpansionPanelHeader; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoExpansionPanelTitle", function() { return NovoExpansionPanelTitle; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoFieldsetHeaderElement", function() { return NovoFieldsetHeaderElement; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoFile", function() { return NovoFile; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoFileInputElement", function() { return NovoFileInputElement; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoFormControl", function() { return NovoFormControl; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoFormElement", function() { return NovoFormElement; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoFormExtrasModule", function() { return NovoFormExtrasModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoFormGroup", function() { return NovoFormGroup; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoFormModule", function() { return NovoFormModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoHeaderComponent", function() { return NovoHeaderComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoHeaderModule", function() { return NovoHeaderModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoHeaderSpacer", function() { return NovoHeaderSpacer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoHorizontalStepper", function() { return NovoHorizontalStepper; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoIconComponent", function() { return NovoIconComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoIconModule", function() { return NovoIconModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoIsLoadingDirective", function() { return NovoIsLoadingDirective; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoItemAvatarElement", function() { return NovoItemAvatarElement; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoItemContentElement", function() { return NovoItemContentElement; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoItemDateElement", function() { return NovoItemDateElement; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoItemElement", function() { return NovoItemElement; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoItemEndElement", function() { return NovoItemEndElement; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoItemHeaderElement", function() { return NovoItemHeaderElement; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoItemTitleElement", function() { return NovoItemTitleElement; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoLabelService", function() { return NovoLabelService; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoListElement", function() { return NovoListElement; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoListItemElement", function() { return NovoListItemElement; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoListModule", function() { return NovoListModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoLoadedDirective", function() { return NovoLoadedDirective; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoLoadingElement", function() { return NovoLoadingElement; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoLoadingModule", function() { return NovoLoadingModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoModalElement", function() { return NovoModalElement; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoModalModule", function() { return NovoModalModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoModalNotificationElement", function() { return NovoModalNotificationElement; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoModalParams", function() { return NovoModalParams; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoModalRef", function() { return NovoModalRef; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoModalService", function() { return NovoModalService; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoMultiPickerElement", function() { return NovoMultiPickerElement; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoMultiPickerModule", function() { return NovoMultiPickerModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoNavContentElement", function() { return NovoNavContentElement; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoNavElement", function() { return NovoNavElement; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoNavHeaderElement", function() { return NovoNavHeaderElement; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoNavOutletElement", function() { return NovoNavOutletElement; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoNovoCKEditorModule", function() { return NovoNovoCKEditorModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoOverlayModule", function() { return NovoOverlayModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoOverlayTemplateComponent", function() { return NovoOverlayTemplateComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoPickerElement", function() { return NovoPickerElement; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoPickerModule", function() { return NovoPickerModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoPipesModule", function() { return NovoPipesModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoPopOverModule", function() { return NovoPopOverModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoQuickNoteModule", function() { return NovoQuickNoteModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoRadioElement", function() { return NovoRadioElement; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoRadioGroup", function() { return NovoRadioGroup; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoRadioModule", function() { return NovoRadioModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoRowChipElement", function() { return NovoRowChipElement; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoRowChipsElement", function() { return NovoRowChipsElement; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoSearchBoxElement", function() { return NovoSearchBoxElement; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoSearchBoxModule", function() { return NovoSearchBoxModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoSelectElement", function() { return NovoSelectElement; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoSelectModule", function() { return NovoSelectModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoSelection", function() { return NovoSelection; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoSimpleActionCell", function() { return NovoSimpleActionCell; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoSimpleCell", function() { return NovoSimpleCell; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoSimpleCellDef", function() { return NovoSimpleCellDef; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoSimpleCellHeader", function() { return NovoSimpleCellHeader; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoSimpleCheckboxCell", function() { return NovoSimpleCheckboxCell; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoSimpleCheckboxHeaderCell", function() { return NovoSimpleCheckboxHeaderCell; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoSimpleColumnDef", function() { return NovoSimpleColumnDef; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoSimpleEmptyHeaderCell", function() { return NovoSimpleEmptyHeaderCell; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoSimpleFilterFocus", function() { return NovoSimpleFilterFocus; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoSimpleHeaderCell", function() { return NovoSimpleHeaderCell; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoSimpleHeaderCellDef", function() { return NovoSimpleHeaderCellDef; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoSimpleHeaderRow", function() { return NovoSimpleHeaderRow; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoSimpleHeaderRowDef", function() { return NovoSimpleHeaderRowDef; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoSimpleRow", function() { return NovoSimpleRow; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoSimpleRowDef", function() { return NovoSimpleRowDef; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoSimpleTableModule", function() { return NovoSimpleTableModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoSimpleTablePagination", function() { return NovoSimpleTablePagination; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoSkeletonDirective", function() { return NovoSkeletonDirective; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoSliderElement", function() { return NovoSliderElement; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoSliderModule", function() { return NovoSliderModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoSortFilter", function() { return NovoSortFilter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoSpinnerElement", function() { return NovoSpinnerElement; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoStep", function() { return NovoStep; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoStepHeader", function() { return NovoStepHeader; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoStepLabel", function() { return NovoStepLabel; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoStepStatus", function() { return NovoStepStatus; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoStepper", function() { return NovoStepper; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoStepperModule", function() { return NovoStepperModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoSwitchElement", function() { return NovoSwitchElement; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoSwitchModule", function() { return NovoSwitchModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoTabButtonElement", function() { return NovoTabButtonElement; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoTabElement", function() { return NovoTabElement; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoTabLinkElement", function() { return NovoTabLinkElement; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoTabModule", function() { return NovoTabModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoTabbedGroupPickerElement", function() { return NovoTabbedGroupPickerElement; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoTabbedGroupPickerModule", function() { return NovoTabbedGroupPickerModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoTable", function() { return NovoTable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoTableActionsElement", function() { return NovoTableActionsElement; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoTableElement", function() { return NovoTableElement; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoTableExtrasModule", function() { return NovoTableExtrasModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoTableFooterElement", function() { return NovoTableFooterElement; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoTableHeaderElement", function() { return NovoTableHeaderElement; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoTableKeepFilterFocus", function() { return NovoTableKeepFilterFocus; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoTableMode", function() { return NovoTableMode; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoTableModule", function() { return NovoTableModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoTemplate", function() { return NovoTemplate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoTemplateService", function() { return NovoTemplateService; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoTilesElement", function() { return NovoTilesElement; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoTilesModule", function() { return NovoTilesModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoTimePickerElement", function() { return NovoTimePickerElement; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoTimePickerInputElement", function() { return NovoTimePickerInputElement; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoTimePickerModule", function() { return NovoTimePickerModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoTipWellElement", function() { return NovoTipWellElement; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoTipWellModule", function() { return NovoTipWellModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoToastElement", function() { return NovoToastElement; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoToastModule", function() { return NovoToastModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoToastService", function() { return NovoToastService; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoTooltipModule", function() { return NovoTooltipModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoUtilActionComponent", function() { return NovoUtilActionComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoUtilsComponent", function() { return NovoUtilsComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoValueElement", function() { return NovoValueElement; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoValueModule", function() { return NovoValueModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoVerticalStepper", function() { return NovoVerticalStepper; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OptionsService", function() { return OptionsService; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OutsideClick", function() { return OutsideClick; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PagedArrayCollection", function() { return PagedArrayCollection; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Pagination", function() { return Pagination; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PercentageCell", function() { return PercentageCell; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PickerControl", function() { return PickerControl; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PickerResults", function() { return PickerResults; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PlacesListComponent", function() { return PlacesListComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PluralPipe", function() { return PluralPipe; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PopOverContent", function() { return PopOverContent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PopOverDirective", function() { return PopOverDirective; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "QuickNoteControl", function() { return QuickNoteControl; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "QuickNoteElement", function() { return QuickNoteElement; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "QuickNoteResults", function() { return QuickNoteResults; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RadioControl", function() { return RadioControl; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ReadOnlyControl", function() { return ReadOnlyControl; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RemoteActivityTableService", function() { return RemoteActivityTableService; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RemoteDataTableService", function() { return RemoteDataTableService; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RenderPipe", function() { return RenderPipe; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RowDetails", function() { return RowDetails; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Security", function() { return Security; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SelectControl", function() { return SelectControl; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SkillsSpecialtyPickerResults", function() { return SkillsSpecialtyPickerResults; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "StaticActivityTableService", function() { return StaticActivityTableService; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "StaticDataTableService", function() { return StaticDataTableService; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TableCell", function() { return TableCell; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TableFilter", function() { return TableFilter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TablePickerControl", function() { return TablePickerControl; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TextAreaControl", function() { return TextAreaControl; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TextBoxControl", function() { return TextBoxControl; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ThOrderable", function() { return ThOrderable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ThSortable", function() { return ThSortable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TilesControl", function() { return TilesControl; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TimeControl", function() { return TimeControl; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TooltipDirective", function() { return TooltipDirective; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Unless", function() { return Unless; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UnlessModule", function() { return UnlessModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WeekdayPipe", function() { return WeekdayPipe; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WorkersCompCodesPickerResults", function() { return WorkersCompCodesPickerResults; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "YearPipe", function() { return YearPipe; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "findByCountryCode", function() { return findByCountryCode; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "findByCountryId", function() { return findByCountryId; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "findByCountryName", function() { return findByCountryName; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getCountries", function() { return getCountries; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getStateObjects", function() { return getStateObjects; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getStates", function() { return getStates; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "notify", function() { return notify; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵa", function() { return NovoFieldsetElement; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵb", function() { return NovoModalContainerElement; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵc", function() { return NovoTooltip; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵd", function() { return DataTableState; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵe", function() { return NovoDataTableCellHeader; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵf", function() { return NovoDataTableSortFilter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵg", function() { return DateFormatService; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵh", function() { return NovoDataTableHeaderCell; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵi", function() { return NovoDataTableCell; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵj", function() { return NovoDataTableHeaderRow; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵk", function() { return NovoDataTableRow; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵl", function() { return NovoDataTablePagination; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵm", function() { return NovoDataTableCheckboxCell; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵn", function() { return NovoDataTableCheckboxHeaderCell; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵo", function() { return NovoDataTableExpandCell; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵp", function() { return NovoDataTableExpandHeaderCell; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵq", function() { return NovoDataTableExpandDirective; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵr", function() { return novoExpansionAnimations; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵs", function() { return ControlConfirmModal; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵt", function() { return ControlPromptModal; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵu", function() { return novoStepperAnimations; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm2015/forms.js");
/* harmony import */ var brace_index__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! brace/index */ "./node_modules/brace/index.js");
/* harmony import */ var brace_index__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(brace_index__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var brace_theme_chrome__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! brace/theme/chrome */ "./node_modules/brace/theme/chrome.js");
/* harmony import */ var brace_theme_chrome__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(brace_theme_chrome__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var brace_mode_javascript__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! brace/mode/javascript */ "./node_modules/brace/mode/javascript.js");
/* harmony import */ var brace_mode_javascript__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(brace_mode_javascript__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var brace_ext_language_tools_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! brace/ext/language_tools.js */ "./node_modules/brace/ext/language_tools.js");
/* harmony import */ var brace_ext_language_tools_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(brace_ext_language_tools_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm2015/common.js");
/* harmony import */ var _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @angular/cdk/overlay */ "./node_modules/@angular/cdk/esm2015/overlay.js");
/* harmony import */ var _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @angular/cdk/portal */ "./node_modules/@angular/cdk/esm2015/portal.js");
/* harmony import */ var _angular_animations__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @angular/animations */ "./node_modules/@angular/animations/fesm2015/animations.js");
/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! date-fns */ "./node_modules/date-fns/index.js");
/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(date_fns__WEBPACK_IMPORTED_MODULE_10__);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/_esm2015/index.js");
/* harmony import */ var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @angular/cdk/coercion */ "./node_modules/@angular/cdk/esm2015/coercion.js");
/* harmony import */ var _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @angular/cdk/scrolling */ "./node_modules/@angular/cdk/esm2015/scrolling.js");
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! rxjs/operators */ "./node_modules/rxjs/_esm2015/operators/index.js");
/* harmony import */ var _angular_platform_browser__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @angular/platform-browser */ "./node_modules/@angular/platform-browser/fesm2015/platform-browser.js");
/* harmony import */ var _angular_cdk_table__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @angular/cdk/table */ "./node_modules/@angular/cdk/esm2015/table.js");
/* harmony import */ var _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! @angular/cdk/a11y */ "./node_modules/@angular/cdk/esm2015/a11y.js");
/* harmony import */ var _bullhorn_dragula__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! @bullhorn/dragula */ "./node_modules/@bullhorn/dragula/dragula.js");
/* harmony import */ var _bullhorn_dragula__WEBPACK_IMPORTED_MODULE_18___default = /*#__PURE__*/__webpack_require__.n(_bullhorn_dragula__WEBPACK_IMPORTED_MODULE_18__);
/* harmony import */ var _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! @angular/cdk/keycodes */ "./node_modules/@angular/cdk/esm2015/keycodes.js");
/* harmony import */ var angular2_text_mask__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! angular2-text-mask */ "./node_modules/angular2-text-mask/dist/angular2TextMask.js");
/* harmony import */ var angular2_text_mask__WEBPACK_IMPORTED_MODULE_20___default = /*#__PURE__*/__webpack_require__.n(angular2_text_mask__WEBPACK_IMPORTED_MODULE_20__);
/* harmony import */ var text_mask_addons_dist_createAutoCorrectedDatePipe__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! text-mask-addons/dist/createAutoCorrectedDatePipe */ "./node_modules/text-mask-addons/dist/createAutoCorrectedDatePipe.js");
/* harmony import */ var text_mask_addons_dist_createAutoCorrectedDatePipe__WEBPACK_IMPORTED_MODULE_21___default = /*#__PURE__*/__webpack_require__.n(text_mask_addons_dist_createAutoCorrectedDatePipe__WEBPACK_IMPORTED_MODULE_21__);
/* harmony import */ var _angular_cdk_accordion__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! @angular/cdk/accordion */ "./node_modules/@angular/cdk/esm2015/accordion.js");
/* harmony import */ var _angular_cdk_collections__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! @angular/cdk/collections */ "./node_modules/@angular/cdk/esm2015/collections.js");
/* harmony import */ var _angular_common_http__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! @angular/common/http */ "./node_modules/@angular/common/fesm2015/http.js");
/* harmony import */ var _angular_cdk_stepper__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! @angular/cdk/stepper */ "./node_modules/@angular/cdk/esm2015/stepper.js");
/* harmony import */ var _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! @angular/cdk/bidi */ "./node_modules/@angular/cdk/esm2015/bidi.js");




























/**
 * @fileoverview added by tsickle
 * Generated from: utils/Helpers.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// @dynamic
class Helpers {
    /**
     * Swallows an event to stop further execution
     * @param {?} event
     * @return {?}
     */
    static swallowEvent(event) {
        if (event) {
            event.stopPropagation();
            event.preventDefault();
        }
    }
    /**
     * @param {?} str
     * @param {?} props
     * @return {?}
     */
    static interpolate(str, props) {
        if (this.isDate(props)) {
            props = this.dateToObject(props);
        }
        return str.replace(/\$([\w\.]+)/g, (/**
         * @param {?} original
         * @param {?} key
         * @return {?}
         */
        (original, key) => {
            /** @type {?} */
            const keys = key.split('.');
            /** @type {?} */
            let value = props[keys.shift()];
            while (keys.length && value !== undefined) {
                /** @type {?} */
                const k = keys.shift();
                value = k ? value[k] : `${value}.`;
            }
            return value !== undefined ? value : '';
        }));
    }
    /**
     * @param {?} formatString
     * @param {?} data
     * @return {?}
     */
    static interpolateWithFallback(formatString, data) {
        // Format string can be an array, it will attempt to interpolate each item
        // in the array, if there is a failure to replace it will mark it as such
        // It will either return the first successful replacement of ALL variables,
        // or an empty string
        if (Array.isArray(formatString)) {
            /** @type {?} */
            const successes = [];
            /** @type {?} */
            const failures = [];
            formatString.forEach((/**
             * @param {?} format
             * @return {?}
             */
            (format) => {
                /** @type {?} */
                let isSuccess = true;
                /** @type {?} */
                const attempt = format.replace(/\$([\w\.]+)/g, (/**
                 * @param {?} original
                 * @param {?} key
                 * @return {?}
                 */
                (original, key) => {
                    /** @type {?} */
                    const keys = key.split('.');
                    /** @type {?} */
                    let value = data[keys.shift()];
                    while (keys.length && value !== undefined) {
                        /** @type {?} */
                        const k = keys.shift();
                        value = k ? value[k] : `${value}.`;
                    }
                    if (isSuccess && Helpers.isEmpty(value)) {
                        isSuccess = false;
                    }
                    return Helpers.isEmpty(value) ? '' : value;
                }));
                if (isSuccess) {
                    successes.push(attempt);
                }
                else {
                    failures.push(attempt);
                }
            }));
            if (successes.length !== 0) {
                return successes[0];
            }
            return '';
        }
        else {
            return Helpers.interpolate(formatString, data);
        }
    }
    /**
     * Verifies that an object has every property expected by a string to interpolate
     * @param {?} str   The string to interpolate
     * @param {?} props The params to replace in string.
     * @return {?}
     */
    static validateInterpolationProps(str, props) {
        /** @type {?} */
        const keys = str.match(/\$([\w\.]+)/g);
        return keys.every((/**
         * @param {?} key
         * @return {?}
         */
        (key) => {
            return props.hasOwnProperty(key.substr(1));
        }));
    }
    /**
     * @param {?} item
     * @return {?}
     */
    static isObject(item) {
        return item && typeof item === 'object' && !Array.isArray(item) && item !== null;
    }
    /**
     * Checks to see if the object is a string
     * @param {?} obj
     * @return {?}
     */
    static isString(obj) {
        return typeof obj === 'string';
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    static escapeString(obj) {
        if (Helpers.isString(obj)) {
            return obj.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
        }
        return obj;
    }
    /**
     * @param {?} val
     * @param {?=} includeNegatives
     * @return {?}
     */
    static isNumber(val, includeNegatives = false) {
        /** @type {?} */
        const numberRegex = includeNegatives ? /^-{0,1}\d*\.?\d*$/ : /^\d*\.?\d*$/;
        if (typeof val === 'string') {
            return val.length > 0 && val !== '.' && numberRegex.test(val);
        }
        else {
            return !isNaN(parseFloat(val));
        }
    }
    /**
     * Checks to see if the object is a undefined or null
     * @param {?} obj
     * @return {?}
     */
    static isBlank(obj) {
        return obj === undefined || obj === null;
    }
    /**
     * Checks to see if the object is a undefined or null
     * @param {?} obj
     * @return {?}
     */
    static isEmpty(obj) {
        return Helpers.isBlank(obj) || obj === '' || (Array.isArray(obj) && obj.length === 0);
    }
    /**
     * Checks to see if the object is a function
     * @param {?} obj
     * @return {?}
     */
    static isFunction(obj) {
        return !!(obj && obj.constructor && obj.call && obj.apply);
    }
    /**
     * Checks to see if the object is a Date
     * @param {?} obj
     * @return {?}
     */
    static isDate(obj) {
        return obj instanceof Date;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    static convertToArray(obj) {
        if (obj === undefined) {
            return [];
        }
        else if (!Array.isArray(obj)) {
            return [obj];
        }
        return obj;
    }
    /**
     * @param {?} fields
     * @param {?=} reverse
     * @return {?}
     */
    static sortByField(fields, reverse = false) {
        return (/**
         * @param {?} previous
         * @param {?} current
         * @return {?}
         */
        (previous, current) => {
            if (Helpers.isFunction(fields)) {
                return fields(reverse ? 'desc' : 'asc', previous, current);
            }
            if (!Array.isArray(fields)) {
                fields = [fields];
            }
            for (let i = 0; i < fields.length; i++) {
                /** @type {?} */
                const field = fields[i];
                /** @type {?} */
                let first = previous[field] || '';
                /** @type {?} */
                let second = current[field] || '';
                if (Helpers.isDate(first) && Helpers.isDate(second)) {
                    // Dates
                    first = first.getTime();
                    second = second.getTime();
                }
                else if (Helpers.isString(first) && Helpers.isString(second)) {
                    // Basic strings
                    first = first.toLowerCase();
                    second = second.toLowerCase();
                }
                else {
                    // Numbers
                    first = isNaN(Number(first)) ? first : Number(first);
                    second = isNaN(Number(second)) ? second : Number(second);
                }
                if (first > second) {
                    return reverse ? -1 : 1;
                }
                else if (first < second) {
                    return reverse ? 1 : -1;
                }
            }
            return 0;
        });
    }
    /**
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    static filterByField(key, value) {
        return (/**
         * @param {?} item
         * @return {?}
         */
        (item) => {
            /** @type {?} */
            const results = [];
            /** @type {?} */
            let field = can(item).have(key);
            if (value instanceof Function) {
                results.push(value(field, item));
            }
            else if (Array.isArray(value)) {
                results.push(value.includes(field));
            }
            else if (value instanceof Object) {
                if (field instanceof Date) {
                    field = field.getTime();
                }
                if (value.min) {
                    results.push(field >= value.min);
                }
                if (value.max) {
                    results.push(field <= value.max);
                }
                if (value.any && Array.isArray(value.any)) {
                    if (Array.isArray(field)) {
                        results.push(value.any.some((/**
                         * @param {?} v
                         * @return {?}
                         */
                        (v) => field.includes(v))));
                    }
                    else {
                        results.push(value.any.includes(field));
                    }
                }
                if (value.all && Array.isArray(value.all)) {
                    results.push(value.all.every((/**
                     * @param {?} v
                     * @return {?}
                     */
                    (v) => field.includes(v))));
                }
                if (value.not) {
                    results.push(!Helpers.filterByField(key, value.not)(item));
                }
                for (const subkey in value) {
                    if (['min', 'max', 'any', 'all', 'not'].indexOf(subkey) < 0) {
                        /** @type {?} */
                        const subvalue = value[subkey];
                        results.push(Helpers.filterByField(`${key}.${subkey}`, subvalue)(item));
                    }
                }
            }
            else {
                results.push(JSON.stringify(field).match(new RegExp(value, 'gi')));
            }
            return results.every((/**
             * @param {?} x
             * @return {?}
             */
            (x) => x));
        });
    }
    /**
     * @param {?} element
     * @param {?} selector
     * @return {?}
     */
    static findAncestor(element, selector) {
        while ((element = element.parentElement) && !element.matches.call(element, selector))
            ; // tslint:disable-line
        return element;
    }
    /**
     * @param {?} item
     * @return {?}
     */
    static deepClone(item) {
        if (Array.isArray(item)) {
            /** @type {?} */
            const newArr = [];
            for (let i = item.length; i-- > 0;) {
                // tslint:disable-line
                newArr[i] = Helpers.deepClone(item[i]);
            }
            return newArr;
        }
        if (typeof item === 'function' && !/\(\) \{ \[native/.test(item.toString())) {
            /** @type {?} */
            let obj;
            for (const k in item) {
                if (k in item) {
                    obj[k] = Helpers.deepClone(item[k]);
                }
            }
            return obj;
        }
        if (item && typeof item === 'object') {
            /** @type {?} */
            const obj = {};
            for (const k in item) {
                if (k in item) {
                    obj[k] = Helpers.deepClone(item[k]);
                }
            }
            return obj;
        }
        return item;
    }
    /**
     * @param {...?} objs
     * @return {?}
     */
    static deepAssign(...objs) {
        if (objs.length < 2) {
            throw new Error('Need two or more objects to merge');
        }
        /** @type {?} */
        const target = Object.assign({}, objs[0]);
        for (let i = 1; i < objs.length; i++) {
            /** @type {?} */
            const source = Object.assign({}, objs[i]);
            Object.keys(source).forEach((/**
             * @param {?} prop
             * @return {?}
             */
            (prop) => {
                /** @type {?} */
                const value = source[prop];
                if (Helpers.isObject(value)) {
                    if (target.hasOwnProperty(prop) && Helpers.isObject(target[prop])) {
                        target[prop] = Helpers.deepAssign(target[prop], value);
                    }
                    else {
                        target[prop] = value;
                    }
                }
                else if (Array.isArray(value)) {
                    if (target.hasOwnProperty(prop) && Array.isArray(target[prop])) {
                        /** @type {?} */
                        const targetArray = target[prop];
                        value.forEach((/**
                         * @param {?} sourceItem
                         * @param {?} itemIndex
                         * @return {?}
                         */
                        (sourceItem, itemIndex) => {
                            if (itemIndex < targetArray.length) {
                                /** @type {?} */
                                const targetItem = targetArray[itemIndex];
                                if (Object.is(targetItem, sourceItem)) {
                                    return;
                                }
                                if (Helpers.isObject(targetItem) && Helpers.isObject(sourceItem)) {
                                    targetArray[itemIndex] = Helpers.deepAssign(targetItem, sourceItem);
                                }
                                else if (Array.isArray(targetItem) && Array.isArray(sourceItem)) {
                                    targetArray[itemIndex] = Helpers.deepAssign(targetItem, sourceItem);
                                }
                                else {
                                    targetArray[itemIndex] = sourceItem;
                                }
                            }
                            else {
                                targetArray.push(sourceItem);
                            }
                        }));
                    }
                    else {
                        target[prop] = value;
                    }
                }
                else {
                    target[prop] = value;
                }
            }));
        }
        return target;
    }
    /**
     * Workaround for Edge browser since Element:nextElementSibling is undefined inside of template directives
     * @param {?} element any document element
     * @return {?} the next sibling node that is of type: Element
     */
    static getNextElementSibling(element) {
        if (element.nextElementSibling) {
            return element.nextElementSibling;
        }
        else {
            /** @type {?} */
            let e = element.nextSibling;
            while (e && 1 !== e.nodeType) {
                e = e.nextSibling;
            }
            return e;
        }
    }
    /**
     * @param {?} date
     * @return {?}
     */
    static dateToObject(date) {
        /** @type {?} */
        const dateObj = {
            day: '',
            dayPeriod: '',
            era: '',
            hour: '',
            minute: '',
            month: '',
            second: '',
            weekday: '',
            year: '',
        };
        Intl.DateTimeFormat('en-US', {
            day: 'numeric',
            era: 'short',
            hour: 'numeric',
            minute: 'numeric',
            month: 'numeric',
            second: 'numeric',
            weekday: 'long',
            year: 'numeric',
        })
            .formatToParts(date)
            .forEach((/**
         * @param {?} dateTimeFormatPart
         * @return {?}
         */
        (dateTimeFormatPart) => {
            if (dateTimeFormatPart.type !== 'literal') {
                dateObj[dateTimeFormatPart.type] = dateTimeFormatPart.value;
            }
        }));
        return dateObj;
    }
}
class Can {
    /**
     * @param {?} obj
     */
    constructor(obj) {
        this.obj = obj;
    }
    /**
     * @param {?} key
     * @return {?}
     */
    have(key) {
        /** @type {?} */
        const props = key.split('.');
        /** @type {?} */
        let item = this.obj;
        for (let i = 0; i < props.length; i++) {
            item = item[props[i]];
            if (this.check(item) === false) {
                return item;
            }
        }
        return item;
    }
    /**
     * @param {?} thing
     * @return {?}
     */
    check(thing) {
        return thing !== void 0;
    }
}
if (false) {}
/**
 * @param {?} obj
 * @return {?}
 */
function can(obj) {
    return new Can(obj);
}
// Assumes data is already sorted
/**
 * @template T
 * @param {?} item
 * @param {?} array
 * @param {?} compare
 * @return {?}
 */
function binarySearch(item, array, compare) {
    return search(0, array.length - 1);
    /**
     * @param {?} min
     * @param {?} max
     * @return {?}
     */
    function search(min, max) {
        if (min > max) {
            return undefined;
        }
        /** @type {?} */
        const guess = min + Math.floor((max - min) / 2);
        /** @type {?} */
        const comparison = compare(item, array[guess]);
        if (comparison === 0) {
            return array[guess];
        }
        else if (comparison === -1) {
            return search(min, guess - 1);
        }
        else if (comparison === 1) {
            return search(guess + 1, max);
        }
        else {
            throw new Error(`Input mismatch: ${JSON.stringify(item)} not comparable to ${JSON.stringify(array[guess])}`);
        }
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: elements/ace-editor/AceEditor.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const ACE_VALUE_ACCESSOR = {
    provide: _angular_forms__WEBPACK_IMPORTED_MODULE_1__["NG_VALUE_ACCESSOR"],
    useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["forwardRef"])((/**
     * @return {?}
     */
    () => NovoAceEditor)),
    multi: true,
};
class NovoAceEditor {
    /**
     * @param {?} elementRef
     */
    constructor(elementRef) {
        this.elementRef = elementRef;
        this.blur = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.focus = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this._options = {
            showPrintMargin: false,
            displayIndentGuides: true,
        };
        this._theme = 'chrome';
        this._mode = 'javascript';
        this.text = '';
        this.onChange = (/**
         * @param {?} _
         * @return {?}
         */
        (_) => { });
        this.onTouched = (/**
         * @return {?}
         */
        () => { });
    }
    /**
     * @param {?} theme
     * @return {?}
     */
    set theme(theme) {
        this.setTheme(theme);
    }
    /**
     * @param {?} options
     * @return {?}
     */
    set options(options) {
        this.setOptions(options);
    }
    /**
     * @param {?} mode
     * @return {?}
     */
    set mode(mode) {
        this.setMode(mode);
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.editor) {
            this.editor.destroy();
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.initializeEditor();
        this.initializeOptions();
        this.initializeEvents();
    }
    /**
     * @private
     * @return {?}
     */
    initializeEditor() {
        /** @type {?} */
        const el = this.elementRef.nativeElement;
        this.editor = ace.edit(el);
        this.editor.$blockScrolling = Infinity;
    }
    /**
     * @private
     * @return {?}
     */
    initializeOptions() {
        this.setOptions(this._options || {});
        this.setTheme(this._theme);
        this.setMode(this._mode);
    }
    /**
     * @private
     * @return {?}
     */
    initializeEvents() {
        this.editor.on('focus', (/**
         * @param {?} event
         * @return {?}
         */
        (event) => this.focus.emit(event)));
        this.editor.on('blur', (/**
         * @param {?} event
         * @return {?}
         */
        (event) => this.focus.emit(event)));
        this.editor.on('change', (/**
         * @return {?}
         */
        () => this.updateText()));
        this.editor.on('paste', (/**
         * @return {?}
         */
        () => this.updateText()));
    }
    /**
     * @private
     * @return {?}
     */
    updateText() {
        /** @type {?} */
        const newVal = this.editor.getValue();
        if (newVal === this.oldText) {
            return;
        }
        this.text = newVal;
        this.onChange(newVal);
        this.oldText = newVal;
    }
    /**
     * @private
     * @param {?} text
     * @return {?}
     */
    setText(text) {
        if (Helpers.isBlank(text)) {
            text = '';
        }
        if (this.text !== text) {
            this.text = text;
            this.editor.setValue(text);
            this.onChange(text);
            this.editor.clearSelection();
        }
    }
    /**
     * @private
     * @param {?} options
     * @return {?}
     */
    setOptions(options) {
        this._options = options;
        this.editor.setOptions(options || {});
    }
    /**
     * @private
     * @param {?} theme
     * @return {?}
     */
    setTheme(theme) {
        this._theme = theme;
        this.editor.setTheme(`ace/theme/${theme}`);
    }
    /**
     * @private
     * @param {?} mode
     * @return {?}
     */
    setMode(mode) {
        this._mode = mode;
        this.editor.getSession().setMode(`ace/mode/${this._mode}`);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        this.setText(value);
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.onChange = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
}
NovoAceEditor.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'novo-ace-editor',
                template: '',
                providers: [ACE_VALUE_ACCESSOR]
            }] }
];
/** @nocollapse */
NovoAceEditor.ctorParameters = () => [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"] }
];
NovoAceEditor.propDecorators = {
    theme: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    options: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    mode: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    name: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    blur: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    focus: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }]
};
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: elements/ace-editor/AceEditor.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NovoAceEditorModule {
}
NovoAceEditorModule.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                imports: [_angular_common__WEBPACK_IMPORTED_MODULE_6__["CommonModule"]],
                declarations: [NovoAceEditor],
                exports: [NovoAceEditor],
            },] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: elements/button/Button.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NovoButtonElement {
    constructor() {
        this.side = 'right';
    }
    /**
     * @param {?} icon
     * @return {?}
     */
    set icon(icon) {
        if (icon) {
            this._icon = `bhi-${icon}`;
        }
    }
    /**
     * @return {?}
     */
    get icon() {
        return this._icon;
    }
}
NovoButtonElement.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'button[theme]',
                host: {
                    '[attr.theme]': 'theme',
                    '[attr.color]': 'color',
                    '[attr.icon]': 'icon',
                    '[attr.loading]': 'loading',
                    '[attr.side]': 'side',
                },
                template: `
    <div class="flex-wrapper">
      <!--Left Icon-->
      <i *ngIf="icon && side === 'left' && !loading" [ngClass]="icon"></i>
      <!--Transcluded Content-->
      <ng-content></ng-content>
      <!--Right Icon-->
      <i *ngIf="icon && side === 'right' && !loading" [ngClass]="icon"></i>
      <!--Loading-->
      <i *ngIf="loading" class="loading">
        <svg
          version="1.1"
          xmlns="http://www.w3.org/2000/svg"
          xmlns:xlink="http://www.w3.org/1999/xlink"
          xmlns:a="http://ns.adobe.com/AdobeSVGViewerExtensions/3.0/"
          x="0px"
          y="0px"
          width="18.2px"
          height="18.5px"
          viewBox="0 0 18.2 18.5"
          style="enable-background:new 0 0 18.2 18.5;"
          xml:space="preserve"
        >
          <style type="text/css">
            .spinner {
              fill: #ffffff;
            }
          </style>
          <path
            class="spinner"
            d="M9.2,18.5C4.1,18.5,0,14.4,0,9.2S4.1,0,9.2,0c0.9,0,1.9,0.1,2.7,0.4c0.8,0.2,1.2,1.1,1,1.9
                        c-0.2,0.8-1.1,1.2-1.9,1C10.5,3.1,9.9,3,9.2,3C5.8,3,3,5.8,3,9.2s2.8,6.2,6.2,6.2c2.8,0,5.3-1.9,6-4.7c0.2-0.8,1-1.3,1.8-1.1
                        c0.8,0.2,1.3,1,1.1,1.8C17.1,15.7,13.4,18.5,9.2,18.5z"
          />
        </svg>
      </i>
    </div>
  `,
                changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectionStrategy"].OnPush
            }] }
];
NovoButtonElement.propDecorators = {
    color: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    side: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    theme: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    loading: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    icon: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }]
};
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: elements/button/Button.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NovoButtonModule {
}
NovoButtonModule.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                imports: [_angular_common__WEBPACK_IMPORTED_MODULE_6__["CommonModule"]],
                declarations: [NovoButtonElement],
                exports: [NovoButtonElement],
            },] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: elements/tooltip/Tooltip.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NovoTooltip {
}
NovoTooltip.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'novo-tooltip',
                template: `<div [@state]="noAnimate ? 'no-animation' : 'visible'"
  [ngClass]="[tooltipType, this.rounded ? 'rounded' : '', size ? size : '', this.preline? 'preline' : '', position]">{{message}}</div>`,
                animations: [
                    Object(_angular_animations__WEBPACK_IMPORTED_MODULE_9__["trigger"])('state', [
                        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_9__["state"])('initial, void, hidden', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_9__["style"])({ opacity: '0' })),
                        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_9__["state"])('visible', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_9__["style"])({ opacity: '1' })),
                        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_9__["transition"])('* => visible', [
                            Object(_angular_animations__WEBPACK_IMPORTED_MODULE_9__["style"])({
                                opacity: 0,
                                visibility: 'visible',
                            }),
                            Object(_angular_animations__WEBPACK_IMPORTED_MODULE_9__["animate"])('0.3s ease-in'),
                        ]),
                        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_9__["transition"])('* => hidden', [
                            Object(_angular_animations__WEBPACK_IMPORTED_MODULE_9__["style"])({
                                opacity: 1,
                                visibility: 'hidden',
                            }),
                            Object(_angular_animations__WEBPACK_IMPORTED_MODULE_9__["animate"])('0.3s ease-in'),
                        ]),
                    ]),
                ],
                styles: ["novo-tooltip div{background:#383838;color:#fff;padding:8px 10px;font-size:12px;font-family:\"Helvetica Neue\",Helvetica,Arial,sans-serif;line-height:12px;white-space:nowrap;text-shadow:0 -1px 0 #000;box-shadow:4px 4px 8px rgba(0,0,0,.3)}novo-tooltip div.error{background-color:#b34e4d;text-shadow:0 -1px 0 #592726}novo-tooltip div.info{background-color:#3986ac;text-shadow:0 -1px 0 #1a3c4d}novo-tooltip div.warning{background-color:#c09854;text-shadow:0 -1px 0 #6c5328}novo-tooltip div.success{background-color:#458746;text-shadow:0 -1px 0 #1a321a}novo-tooltip div.rounded{border-radius:4px}novo-tooltip div.extra-large,novo-tooltip div.large,novo-tooltip div.medium,novo-tooltip div.small{white-space:normal;line-height:1.4em;word-wrap:break-word}novo-tooltip div.extra-large{width:400px;font-size:1.2vh}novo-tooltip div.large{width:300px}novo-tooltip div.medium{width:150px}novo-tooltip div.small{width:80px}novo-tooltip div.preline{white-space:pre-line}novo-tooltip div.top:before{margin-bottom:-11px;left:calc(50% - 6px);bottom:0;border-top-color:#383838}novo-tooltip div.top.error:before{border-top-color:#b34e4d}novo-tooltip div.top.info:before{border-top-color:#3986ac}novo-tooltip div.top.warning:before{border-top-color:#c09854}novo-tooltip div.top.success:before{border-top-color:#458746}novo-tooltip div.top-left:before{border-top-color:#383838;margin-right:0;margin-bottom:-11px;right:0;bottom:0}novo-tooltip div.top-left.error:before{border-top-color:#b34e4d}novo-tooltip div.top-left.info:before{border-top-color:#3986ac}novo-tooltip div.top-left.warning:before{border-top-color:#c09854}novo-tooltip div.top-left.success:before{border-top-color:#458746}novo-tooltip div.top-right:before{border-top-color:#383838;margin-left:0;margin-bottom:-11px;left:0;bottom:0}novo-tooltip div.top-right.error:before{border-top-color:#b34e4d}novo-tooltip div.top-right.info:before{border-top-color:#3986ac}novo-tooltip div.top-right.warning:before{border-top-color:#c09854}novo-tooltip div.top-right.success:before{border-top-color:#458746}novo-tooltip div.bottom:before{margin-top:-11px;left:calc(50% - 6px);top:0;border-bottom-color:#383838}novo-tooltip div.bottom.error:before{border-top-color:#b34e4d}novo-tooltip div.bottom.info:before{border-top-color:#3986ac}novo-tooltip div.bottom.warning:before{border-top-color:#c09854}novo-tooltip div.bottom.success:before{border-top-color:#458746}novo-tooltip div.bottom-left:before{border-bottom-color:#383838;margin-right:0;margin-top:-11px;right:0;top:0}novo-tooltip div.bottom-left.error:before{border-bottom-color:#b34e4d}novo-tooltip div.bottom-left.info:before{border-bottom-color:#3986ac}novo-tooltip div.bottom-left.warning:before{border-bottom-color:#c09854}novo-tooltip div.bottom-left.success:before{border-bottom-color:#458746}novo-tooltip div.bottom-right:before{border-bottom-color:#383838;margin-left:0;margin-top:-11px;left:0;top:0}novo-tooltip div.bottom-right.error:before{border-bottom-color:#b34e4d}novo-tooltip div.bottom-right.info:before{border-bottom-color:#3986ac}novo-tooltip div.bottom-right.warning:before{border-bottom-color:#c09854}novo-tooltip div.bottom-right.success:before{border-bottom-color:#458746}novo-tooltip div.left:before{border-left-color:#383838;margin-right:-11px;margin-bottom:-6px;right:0;bottom:50%}novo-tooltip div.left.error:before{border-left-color:#b34e4d}novo-tooltip div.left.info:before{border-left-color:#3986ac}novo-tooltip div.left.warning:before{border-left-color:#c09854}novo-tooltip div.left.success:before{border-left-color:#458746}novo-tooltip div.right:before{left:0;bottom:50%;border-right-color:#383838;margin-left:-11px;margin-bottom:-6px}novo-tooltip div.right.error:before{border-right-color:#b34e4d}novo-tooltip div.right.info:before{border-right-color:#3986ac}novo-tooltip div.right.warning:before{border-right-color:#c09854}novo-tooltip div.right.success:before{border-right-color:#458746}novo-tooltip div:before{content:\"\";position:absolute;background:0 0;border:6px solid transparent;box-sizing:border-box}"]
            }] }
];
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: elements/tooltip/Tooltip.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class TooltipDirective {
    /**
     * @param {?} overlay
     * @param {?} viewContainerRef
     * @param {?} elementRef
     */
    constructor(overlay, viewContainerRef, elementRef) {
        this.overlay = overlay;
        this.viewContainerRef = viewContainerRef;
        this.elementRef = elementRef;
        this.position = 'top';
        this.type = 'normal';
        this.active = true;
        this.removeArrow = false;
        this.autoPosition = false;
    }
    /**
     * @param {?} position
     * @return {?}
     */
    isPosition(position) {
        return position.toLowerCase() === (this.position || '').toLowerCase();
    }
    /**
     * @param {?} type
     * @return {?}
     */
    isType(type) {
        return type.toLowerCase() === (this.type || '').toLowerCase();
    }
    /**
     * @param {?} size
     * @return {?}
     */
    isSize(size) {
        return size.toLowerCase() === (this.size || '').toLowerCase();
    }
    /**
     * @return {?}
     */
    onMouseEnter() {
        if (this.tooltip && this.active && !this.always) {
            this.show();
        }
    }
    /**
     * @return {?}
     */
    onMouseLeave() {
        if (this.overlayRef && !this.always) {
            this.hide();
            this.overlayRef.dispose();
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.tooltip && this.always && this.active) {
            this.show();
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.overlayRef && !this.always) {
            this.hide();
            this.overlayRef.dispose();
        }
    }
    /**
     * @private
     * @return {?}
     */
    show() {
        /** @type {?} */
        const overlayState = new _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_7__["OverlayConfig"]();
        overlayState.positionStrategy = this.getPosition();
        if (this.always) {
            overlayState.scrollStrategy = this.overlay.scrollStrategies.reposition();
        }
        else {
            overlayState.scrollStrategy = this.overlay.scrollStrategies.close();
        }
        overlayState.scrollStrategy.enable();
        this.overlayRef = this.overlay.create(overlayState);
        this.overlayRef.detach();
        this.portal = this.portal || new _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_8__["ComponentPortal"](NovoTooltip, this.viewContainerRef);
        /** @type {?} */
        const tooltipInstance = this.overlayRef.attach(this.portal).instance;
        tooltipInstance.message = this.tooltip;
        tooltipInstance.tooltipType = this.type;
        tooltipInstance.rounded = this.rounded;
        tooltipInstance.size = this.size;
        tooltipInstance.preline = this.preline;
        tooltipInstance.noAnimate = this.noAnimate;
        tooltipInstance.position = this.removeArrow ? 'no-arrow' : this.position;
    }
    /**
     * @private
     * @return {?}
     */
    hide() {
        if (this.overlayRef) {
            this.overlayRef.detach();
        }
    }
    /**
     * @private
     * @return {?}
     */
    getPosition() {
        /** @type {?} */
        let strategy;
        /** @type {?} */
        let originPosition;
        /** @type {?} */
        let overlayPosition;
        /** @type {?} */
        let offsetX;
        /** @type {?} */
        let offsetY;
        switch (this.position) {
            case 'right':
                originPosition = { originX: 'end', originY: 'center' };
                overlayPosition = { overlayX: 'start', overlayY: 'center' };
                offsetX = 8;
                offsetY = 0;
                break;
            case 'bottom':
                originPosition = { originX: 'center', originY: 'bottom' };
                overlayPosition = { overlayX: 'center', overlayY: 'top' };
                offsetX = 0;
                offsetY = 8;
                break;
            case 'top':
                originPosition = { originX: 'center', originY: 'top' };
                overlayPosition = { overlayX: 'center', overlayY: 'bottom' };
                offsetX = 0;
                offsetY = -8;
                break;
            case 'left':
                originPosition = { originX: 'start', originY: 'center' };
                overlayPosition = { overlayX: 'end', overlayY: 'center' };
                offsetX = -8;
                offsetY = 0;
                break;
            case 'top-left':
                originPosition = { originX: 'start', originY: 'top' };
                overlayPosition = { overlayX: 'end', overlayY: 'bottom' };
                offsetX = 8;
                offsetY = -8;
                break;
            case 'bottom-left':
                originPosition = { originX: 'start', originY: 'bottom' };
                overlayPosition = { overlayX: 'end', overlayY: 'top' };
                offsetX = 8;
                offsetY = 8;
                break;
            case 'top-right':
                originPosition = { originX: 'end', originY: 'top' };
                overlayPosition = { overlayX: 'start', overlayY: 'bottom' };
                offsetX = -8;
                offsetY = -8;
                break;
            case 'bottom-right':
                originPosition = { originX: 'end', originY: 'bottom' };
                overlayPosition = { overlayX: 'start', overlayY: 'top' };
                offsetX = -8;
                offsetY = 8;
                break;
            default:
                break;
        }
        strategy = this.overlay
            .position()
            .connectedTo(this.elementRef, originPosition, overlayPosition)
            .withOffsetX(offsetX)
            .withOffsetY(offsetY);
        return this.autoPosition ? this.withFallbackStrategy(strategy) : strategy;
    }
    /**
     * @private
     * @param {?} strategy
     * @return {?}
     */
    withFallbackStrategy(strategy) {
        strategy
            .withFallbackPosition({ originX: 'center', originY: 'bottom' }, { overlayX: 'center', overlayY: 'top' }, 0, 8)
            .withFallbackPosition({ originX: 'end', originY: 'bottom' }, { overlayX: 'end', overlayY: 'top' }, 0, 8)
            .withFallbackPosition({ originX: 'end', originY: 'center' }, { overlayX: 'start', overlayY: 'center' }, 8, 0)
            .withFallbackPosition({ originX: 'start', originY: 'center' }, { overlayX: 'end', overlayY: 'center' }, -8, 0)
            .withFallbackPosition({ originX: 'center', originY: 'top' }, { overlayX: 'center', overlayY: 'bottom' }, 0, -8)
            .withFallbackPosition({ originX: 'start', originY: 'bottom' }, { overlayX: 'start', overlayY: 'top' }, 0, 8)
            .withFallbackPosition({ originX: 'start', originY: 'top' }, { overlayX: 'start', overlayY: 'bottom' }, 0, -8)
            .withFallbackPosition({ originX: 'end', originY: 'top' }, { overlayX: 'end', overlayY: 'bottom' }, 0, -8)
            .withFallbackPosition({ originX: 'start', originY: 'top' }, { overlayX: 'end', overlayY: 'bottom' }, 8, -8)
            .withFallbackPosition({ originX: 'start', originY: 'bottom' }, { overlayX: 'end', overlayY: 'top' }, 8, 8)
            .withFallbackPosition({ originX: 'end', originY: 'top' }, { overlayX: 'start', overlayY: 'bottom' }, -8, -8)
            .withFallbackPosition({ originX: 'end', originY: 'bottom' }, { overlayX: 'start', overlayY: 'top' }, -8, 8);
        return strategy;
    }
}
TooltipDirective.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{
                selector: '[tooltip]',
                host: {
                    '[attr.data-hint]': 'tooltip',
                },
            },] }
];
/** @nocollapse */
TooltipDirective.ctorParameters = () => [
    { type: _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_7__["Overlay"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewContainerRef"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"] }
];
TooltipDirective.propDecorators = {
    tooltip: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    position: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"], args: ['tooltipPosition',] }],
    type: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"], args: ['tooltipType',] }],
    size: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"], args: ['tooltipSize',] }],
    bounce: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"], args: ['tooltipBounce',] }],
    noAnimate: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"], args: ['tooltipNoAnimate',] }],
    rounded: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"], args: ['tooltipRounded',] }],
    always: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"], args: ['tooltipAlways',] }],
    active: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"], args: ['tooltipActive',] }],
    preline: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"], args: ['tooltipPreline',] }],
    removeArrow: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"], args: ['removeTooltipArrow',] }],
    autoPosition: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"], args: ['tooltipAutoPosition',] }],
    onMouseEnter: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostListener"], args: ['mouseenter',] }],
    onMouseLeave: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostListener"], args: ['mouseleave',] }]
};
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: elements/tooltip/Tooltip.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NovoTooltipModule {
}
NovoTooltipModule.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                declarations: [TooltipDirective, NovoTooltip],
                exports: [TooltipDirective],
                entryComponents: [NovoTooltip],
                imports: [_angular_common__WEBPACK_IMPORTED_MODULE_6__["CommonModule"]],
            },] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: pipes/plural/Plural.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// Rule storage - pluralize and singularize need to be run sequentially,
// while other rules can be optimized using an object for instant lookups.
/** @type {?} */
const pluralRules = [];
/** @type {?} */
const singularRules = [];
/** @type {?} */
const uncountables = {};
/** @type {?} */
const irregularPlurals = {};
/** @type {?} */
const irregularSingles = {};
/**
 * Title case a string.
 * @param {?} str
 * @return {?}
 */
function toTitleCase(str) {
    return str.charAt(0).toUpperCase() + str.substr(1).toLowerCase();
}
/**
 * Sanitize a pluralization rule to a usable regular expression.
 * @param {?} rule
 * @return {?}
 */
function sanitizeRule(rule) {
    if (typeof rule === 'string') {
        return new RegExp('^' + rule + '$', 'i');
    }
    return rule;
}
/**
 * Pass in a word token to produce a function that can replicate the case on
 * another word.
 * @param {?} word
 * @param {?} token
 * @return {?}
 */
function restoreCase(word, token) {
    // Upper cased words. E.g. "HELLO".
    if (word === word.toUpperCase()) {
        return token.toUpperCase();
    }
    // Title cased words. E.g. "Title".
    if (word[0] === word[0].toUpperCase()) {
        return toTitleCase(token);
    }
    // Lower cased words. E.g. "test".
    return token.toLowerCase();
}
/**
 * Interpolate a regexp string.
 * @param {?} str
 * @param {?} args
 * @return {?}
 */
function interpolate(str, args) {
    return str.replace(/\$(\d{1,2})/g, (/**
     * @param {?} match
     * @param {?} index
     * @return {?}
     */
    (match, index) => {
        return args[index] || '';
    }));
}
/**
 * Sanitize a word by passing in the word and sanitization rules.
 * @param {?} token
 * @param {?} word
 * @param {?} collection
 * @return {?}
 */
function sanitizeWord(token, word, collection) {
    // Empty string or doesn't need fixing.
    if (!token.length || uncountables.hasOwnProperty(token)) {
        return word;
    }
    /** @type {?} */
    let len = collection.length;
    // Iterate over the sanitization rules and use the first one to match.
    while (len--) {
        /** @type {?} */
        const rule = collection[len];
        // If the rule passes, return the replacement.
        if (rule[0].test(word)) {
            return word.replace(rule[0], (/**
             * @param {?} match
             * @param {?} index
             * @param {?} words
             * @return {?}
             */
            (match, index, words) => {
                /** @type {?} */
                const result = interpolate(rule[1], [match, index, words]);
                if (match === '') {
                    return restoreCase(words[index - 1], result);
                }
                return restoreCase(match, result);
            }));
        }
    }
    return word;
}
/**
 * Replace a word with the updated word.
 * @param {?} replaceMap
 * @param {?} keepMap
 * @param {?} rules
 * @return {?}
 */
function replaceWord(replaceMap, keepMap, rules) {
    return (/**
     * @param {?} word
     * @return {?}
     */
    (word) => {
        // Get the correct token and case restoration functions.
        /** @type {?} */
        const token = word.toLowerCase();
        // Check against the keep object map.
        if (keepMap.hasOwnProperty(token)) {
            return restoreCase(word, token);
        }
        // Check against the replacement map for a direct word replacement.
        if (replaceMap.hasOwnProperty(token)) {
            return restoreCase(word, replaceMap[token]);
        }
        // Run all the rules against the word.
        return sanitizeWord(token, word, rules);
    });
}
class Pluralize {
    /**
     * @param {?} word
     * @param {?=} count
     * @param {?=} inclusive
     * @return {?}
     */
    static pluralize(word, count = 1, inclusive) {
        /** @type {?} */
        const pluralized = count === 1 ? Pluralize.singular(word) : Pluralize.plural(word);
        return (inclusive ? `${count} ` : '') + pluralized;
    }
    /**
     * @param {?} word
     * @return {?}
     */
    static singular(word) {
        return replaceWord(irregularSingles, irregularPlurals, pluralRules)(word);
    }
    /**
     * @param {?} word
     * @return {?}
     */
    static plural(word) {
        return replaceWord(irregularPlurals, irregularSingles, singularRules)(word);
    }
    /**
     * @param {?} rule
     * @param {?} replacement
     * @return {?}
     */
    static addPluralRule(rule, replacement) {
        pluralRules.push([sanitizeRule(rule), replacement]);
    }
    /**
     * @param {?} rule
     * @param {?} replacement
     * @return {?}
     */
    static addSingularRule(rule, replacement) {
        singularRules.push([sanitizeRule(rule), replacement]);
    }
    /**
     * @param {?} word
     * @return {?}
     */
    static addUncountableRule(word) {
        if (typeof word === 'string') {
            uncountables[word.toLowerCase()] = true;
            return;
        }
        // Set singular and plural references for the word.
        Pluralize.addPluralRule(word, '$0');
        Pluralize.addSingularRule(word, '$0');
    }
    /**
     * @param {?} single
     * @param {?} plural
     * @return {?}
     */
    static addIrregularRule(single, plural) {
        /** @type {?} */
        const one = plural.toLowerCase();
        /** @type {?} */
        const many = single.toLowerCase();
        irregularSingles[one] = many;
        irregularPlurals[many] = one;
    }
}
/**
 * Irregular rules.
 */
[
    // Pronouns.
    ['I', 'we'],
    ['me', 'us'],
    ['he', 'they'],
    ['she', 'they'],
    ['them', 'them'],
    ['myself', 'ourselves'],
    ['yourself', 'yourselves'],
    ['itself', 'themselves'],
    ['herself', 'themselves'],
    ['himself', 'themselves'],
    ['themself', 'themselves'],
    ['is', 'are'],
    ['this', 'these'],
    ['that', 'those'],
    // Words ending in with a consonant and `o`.
    ['echo', 'echoes'],
    ['dingo', 'dingoes'],
    ['volcano', 'volcanoes'],
    ['tornado', 'tornadoes'],
    ['torpedo', 'torpedoes'],
    // Ends with `us`.
    ['genus', 'genera'],
    ['viscus', 'viscera'],
    // Ends with `ma`.
    ['stigma', 'stigmata'],
    ['stoma', 'stomata'],
    ['dogma', 'dogmata'],
    ['lemma', 'lemmata'],
    ['schema', 'schemata'],
    ['anathema', 'anathemata'],
    // Other irregular rules.
    ['ox', 'oxen'],
    ['axe', 'axes'],
    ['die', 'dice'],
    ['yes', 'yeses'],
    ['foot', 'feet'],
    ['eave', 'eaves'],
    ['goose', 'geese'],
    ['tooth', 'teeth'],
    ['quiz', 'quizzes'],
    ['human', 'humans'],
    ['proof', 'proofs'],
    ['carve', 'carves'],
    ['valve', 'valves'],
    ['thief', 'thieves'],
    ['genie', 'genies'],
    ['groove', 'grooves'],
    ['pickaxe', 'pickaxes'],
    ['whiskey', 'whiskies'],
].forEach((/**
 * @param {?} rule
 * @return {?}
 */
(rule) => {
    return Pluralize.addIrregularRule(rule[0], rule[1]);
}));
/**
 * Pluralization rules.
 */
[
    [/s?$/i, 's'],
    [/([^aeiou]ese)$/i, '$1'],
    [/(ax|test)is$/i, '$1es'],
    [/(alias|[^aou]us|tlas|gas|ris)$/i, '$1es'],
    [/(e[mn]u)s?$/i, '$1s'],
    [/([^l]ias|[aeiou]las|[emjzr]as|[iu]am)$/i, '$1'],
    [/(alumn|syllab|octop|vir|radi|nucle|fung|cact|stimul|termin|bacill|foc|uter|loc|strat)(?:us|i)$/i, '$1i'],
    [/(alumn|alg|vertebr)(?:a|ae)$/i, '$1ae'],
    [/(seraph|cherub)(?:im)?$/i, '$1im'],
    [/(her|at|gr)o$/i, '$1oes'],
    [/(agend|addend|millenni|dat|extrem|bacteri|desiderat|strat|candelabr|errat|ov|symposi|curricul|automat|quor)(?:a|um)$/i, '$1a'],
    [/(apheli|hyperbat|periheli|asyndet|noumen|phenomen|criteri|organ|prolegomen|hedr|automat)(?:a|on)$/i, '$1a'],
    [/sis$/i, 'ses'],
    [/(?:(kni|wi|li)fe|(ar|l|ea|eo|oa|hoo)f)$/i, '$1$2ves'],
    [/([^aeiouy]|qu)y$/i, '$1ies'],
    [/([^ch][ieo][ln])ey$/i, '$1ies'],
    [/(x|ch|ss|sh|zz)$/i, '$1es'],
    [/(matr|cod|mur|sil|vert|ind|append)(?:ix|ex)$/i, '$1ices'],
    [/(m|l)(?:ice|ouse)$/i, '$1ice'],
    [/(pe)(?:rson|ople)$/i, '$1ople'],
    [/(child)(?:ren)?$/i, '$1ren'],
    [/eaux$/i, '$0'],
    [/m[ae]n$/i, 'men'],
    ['thou', 'you'],
].forEach((/**
 * @param {?} rule
 * @return {?}
 */
(rule) => {
    return Pluralize.addPluralRule(rule[0], rule[1]);
}));
/**
 * Singularization rules.
 */
[
    [/s$/i, ''],
    [/(ss)$/i, '$1'],
    [/((a)naly|(b)a|(d)iagno|(p)arenthe|(p)rogno|(s)ynop|(t)he)(?:sis|ses)$/i, '$1sis'],
    [/(^analy)(?:sis|ses)$/i, '$1sis'],
    [/(wi|kni|(?:after|half|high|low|mid|non|night|[^\w]|^)li)ves$/i, '$1fe'],
    [/(ar|(?:wo|[ae])l|[eo][ao])ves$/i, '$1f'],
    [/([^aeiouy]|qu)ies$/i, '$1y'],
    [/(^[pl]|zomb|^(?:neck)?t|[aeo][lt]|cut)ies$/i, '$1ie'],
    [/(\b(?:mon|smil))ies$/i, '$1ey'],
    [/(m|l)ice$/i, '$1ouse'],
    [/(seraph|cherub)im$/i, '$1'],
    [/(x|ch|ss|sh|zz|tto|go|cho|alias|[^aou]us|tlas|gas|(?:her|at|gr)o|ris)(?:es)?$/i, '$1'],
    [/(e[mn]u)s?$/i, '$1'],
    [/(movie|twelve)s$/i, '$1'],
    [/(cris|test|diagnos)(?:is|es)$/i, '$1is'],
    [/(alumn|syllab|octop|vir|radi|nucle|fung|cact|stimul|termin|bacill|foc|uter|loc|strat)(?:us|i)$/i, '$1us'],
    [/(agend|addend|millenni|dat|extrem|bacteri|desiderat|strat|candelabr|errat|ov|symposi|curricul|quor)a$/i, '$1um'],
    [/(apheli|hyperbat|periheli|asyndet|noumen|phenomen|criteri|organ|prolegomen|hedr|automat)a$/i, '$1on'],
    [/(alumn|alg|vertebr)ae$/i, '$1a'],
    [/(cod|mur|sil|vert|ind)ices$/i, '$1ex'],
    [/(matr|append)ices$/i, '$1ix'],
    [/(pe)(rson|ople)$/i, '$1rson'],
    [/(child)ren$/i, '$1'],
    [/(eau)x?$/i, '$1'],
    [/men$/i, 'man'],
].forEach((/**
 * @param {?} rule
 * @return {?}
 */
(rule) => {
    return Pluralize.addSingularRule(rule[0], rule[1]);
}));
/**
 * Uncountable rules.
 */
[
    // Singular words with no plurals.
    'advice',
    'adulthood',
    'agenda',
    'aid',
    'alcohol',
    'ammo',
    'athletics',
    'bison',
    'blood',
    'bream',
    'buffalo',
    'butter',
    'carp',
    'cash',
    'chassis',
    'chess',
    'clothing',
    'commerce',
    'cod',
    'cooperation',
    'corps',
    'digestion',
    'debris',
    'diabetes',
    'energy',
    'equipment',
    'elk',
    'excretion',
    'expertise',
    'flounder',
    'fun',
    'gallows',
    'garbage',
    'graffiti',
    'headquarters',
    'health',
    'herpes',
    'highjinks',
    'homework',
    'housework',
    'information',
    'jeans',
    'justice',
    'kudos',
    'labour',
    'literature',
    'machinery',
    'mackerel',
    'media',
    'mews',
    'moose',
    'music',
    'news',
    'pike',
    'plankton',
    'pliers',
    'pollution',
    'premises',
    'rain',
    'research',
    'rice',
    'salmon',
    'scissors',
    'series',
    'sewage',
    'shambles',
    'shrimp',
    'species',
    'staff',
    'swine',
    'trout',
    'traffic',
    'transporation',
    'tuna',
    'wealth',
    'welfare',
    'whiting',
    'wildebeest',
    'wildlife',
    'you',
    // Regexes.
    /pox$/i,
    /ois$/i,
    /deer$/i,
    /fish$/i,
    /sheep$/i,
    /measles$/i,
    /[^aeiou]ese$/i,
].forEach(Pluralize.addUncountableRule);
class PluralPipe {
    /**
     * @param {?} value
     * @return {?}
     */
    transform(value) {
        return Pluralize.pluralize(value);
    }
}
PluralPipe.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Pipe"], args: [{ name: 'plural' },] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: pipes/decode-uri/DecodeURI.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DecodeURIPipe {
    /**
     * @param {?} encodedString
     * @return {?}
     */
    transform(encodedString) {
        /** @type {?} */
        let decodedString = '';
        if (!Helpers.isBlank(encodedString) && typeof encodedString === 'string') {
            decodedString = decodeURIComponent(encodedString);
        }
        return decodedString;
    }
}
DecodeURIPipe.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Pipe"], args: [{ name: 'decodeURI' },] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: pipes/group-by/GroupBy.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class GroupByPipe {
    /**
     * @param {?} input
     * @param {?} prop
     * @return {?}
     */
    transform(input, prop) {
        if (!Array.isArray(input)) {
            return input;
        }
        /** @type {?} */
        const arr = {};
        for (const value of input) {
            /** @type {?} */
            const field = can(value).have(prop);
            if (Helpers.isBlank(arr[field])) {
                arr[field] = [];
            }
            arr[field].push(value);
        }
        return Object.keys(arr).map((/**
         * @param {?} key
         * @return {?}
         */
        (key) => ({ key, value: arr[key] })));
    }
}
GroupByPipe.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Pipe"], args: [{
                name: 'groupBy',
            },] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: pipes/Pipes.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NovoPipesModule {
}
NovoPipesModule.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                declarations: [PluralPipe, DecodeURIPipe, GroupByPipe],
                exports: [PluralPipe, DecodeURIPipe, GroupByPipe],
            },] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: elements/calendar/common/EventTypeLegend.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NovoEventTypeLegendElement {
    constructor() {
        this.eventTypeClicked = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
    }
}
NovoEventTypeLegendElement.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'novo-event-type-legend',
                template: `
    <ng-template #defaultTemplate>
      <div class="cal-event-legend">
        <div class="cal-event-type"
          *ngFor="let type of events | groupBy : 'type'"
          (click)="$event.stopPropagation(); eventTypeClicked.emit({event:type?.key})">
          <div class="cal-event-type-swatch"></div><div>{{type?.key}}</div>
        </div>
      </div>
    </ng-template>
    <ng-template
      [ngTemplateOutlet]="customTemplate || defaultTemplate"
      [ngTemplateOutletContext]="{events: events, eventTypeClicked: eventTypeClicked}">
    </ng-template>
  `
            }] }
];
NovoEventTypeLegendElement.propDecorators = {
    events: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    customTemplate: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    eventTypeClicked: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }]
};
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: elements/calendar/common/CalendarDateChange.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NovoCalendarDateChangeElement {
    /**
     * @param {?} locale
     */
    constructor(locale) {
        /**
         * Called when the view date is changed
         */
        this.viewDateChange = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.locale = locale;
    }
    /**
     * @hidden
     * @return {?}
     */
    subtractDate() {
        this.changeDate(-1);
    }
    /**
     * @return {?}
     */
    addDate() {
        this.changeDate(1);
    }
    /**
     * @param {?} unit
     * @return {?}
     */
    changeDate(unit) {
        /** @type {?} */
        const addFn = {
            day: date_fns__WEBPACK_IMPORTED_MODULE_10__["addDays"],
            week: date_fns__WEBPACK_IMPORTED_MODULE_10__["addWeeks"],
            month: date_fns__WEBPACK_IMPORTED_MODULE_10__["addMonths"],
        }[this.view];
        this.viewDateChange.emit(addFn(this.viewDate, unit));
    }
    /**
     * @return {?}
     */
    get startOfWeek() {
        return Object(date_fns__WEBPACK_IMPORTED_MODULE_10__["startOfWeek"])(this.viewDate);
    }
    /**
     * @return {?}
     */
    get endOfWeek() {
        return Object(date_fns__WEBPACK_IMPORTED_MODULE_10__["endOfWeek"])(this.viewDate);
    }
}
NovoCalendarDateChangeElement.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'novo-calendar-date-change',
                template: `
    <div class="cal-date-change">
        <i class="bhi-arrow-left" (click)="subtractDate()" ></i>
        <span [ngSwitch]="view">
            <span *ngSwitchCase="'month'">{{ ( viewDate | month:locale ) + ' ' + ( viewDate | year:locale ) }}</span>
            <span *ngSwitchCase="'week'">{{ ( startOfWeek | monthday:locale:'long' ) + ' - ' + ( endOfWeek | endofweekdisplay:startOfWeek:locale:'long' ) }}</span>
            <span *ngSwitchCase="'day'">{{ ( viewDate | weekday:locale:'long' ) + ', ' + ( viewDate | month:locale ) + ' ' + ( viewDate | dayofmonth:locale ) }}</span>
        </span>
        <i class="bhi-arrow-right" (click)="addDate()"></i>
    </div>
  `
            }] }
];
/** @nocollapse */
NovoCalendarDateChangeElement.ctorParameters = () => [
    { type: String, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["LOCALE_ID"],] }] }
];
NovoCalendarDateChangeElement.propDecorators = {
    view: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    viewDate: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    locale: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    viewDateChange: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }]
};
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: utils/calendar-utils/CalendarUtils.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const WEEKEND_DAY_NUMBERS = [0, 6];
/** @type {?} */
const DAYS_IN_WEEK = 7;
/** @type {?} */
const HOURS_IN_DAY = 24;
/** @type {?} */
const MINUTES_IN_HOUR = 60;
/** @enum {number} */
const CalendarEventResponse = {
    Maybe: 0,
    Accepted: 1,
    Rejected: 2,
};
CalendarEventResponse[CalendarEventResponse.Maybe] = 'Maybe';
CalendarEventResponse[CalendarEventResponse.Accepted] = 'Accepted';
CalendarEventResponse[CalendarEventResponse.Rejected] = 'Rejected';
/**
 * @record
 */
function CalendarEventTimesChangedEvent() { }
if (false) {}
/**
 * @record
 */
function WeekDay() { }
if (false) {}
/**
 * @record
 */
function EventColor() { }
if (false) {}
/**
 * @record
 */
function EventAction() { }
if (false) {}
/**
 * @record
 */
function CalendarEvent() { }
if (false) {}
/**
 * @record
 */
function WeekViewEvent() { }
if (false) {}
/**
 * @record
 */
function WeekViewEventRow() { }
if (false) {}
/**
 * @record
 */
function MonthViewDay() { }
if (false) {}
/**
 * @record
 */
function MonthView() { }
if (false) {}
/**
 * @record
 */
function DayViewEvent() { }
if (false) {}
/**
 * @record
 */
function DayView() { }
if (false) {}
/**
 * @record
 */
function DayViewHourSegment() { }
if (false) {}
/**
 * @record
 */
function DayViewHour() { }
if (false) {}
/**
 * @record
 */
function IsEventInPeriodArgs() { }
if (false) {}
/**
 * @record
 */
function GetEventsInPeriodArgs() { }
if (false) {}
/**
 * @record
 */
function GetDayViewArgs() { }
if (false) {}
/**
 * @param {?} __0
 * @return {?}
 */
function getExcludedDays({ startDate, days, excluded }) {
    if (excluded.length < 1) {
        return 0;
    }
    /** @type {?} */
    let day = startDate.getDay();
    /** @type {?} */
    let reduce = 0;
    for (let i = 0; i < days; i++) {
        if (day === DAYS_IN_WEEK) {
            day = 0;
        }
        if (excluded.some((/**
         * @param {?} e
         * @return {?}
         */
        (e) => e === day))) {
            reduce++;
        }
        day++;
    }
    return reduce;
}
/**
 * @param {?} __0
 * @return {?}
 */
function getWeekViewEventSpan({ event, offset, startOfWeek, excluded, }) {
    /** @type {?} */
    const begin = event.start < startOfWeek ? startOfWeek : event.start;
    /** @type {?} */
    let span = 1;
    if (event.end) {
        span = Object(date_fns__WEBPACK_IMPORTED_MODULE_10__["differenceInDays"])(Object(date_fns__WEBPACK_IMPORTED_MODULE_10__["addMinutes"])(Object(date_fns__WEBPACK_IMPORTED_MODULE_10__["endOfDay"])(event.end), 1), Object(date_fns__WEBPACK_IMPORTED_MODULE_10__["startOfDay"])(begin));
    }
    /** @type {?} */
    const totalLength = offset + span;
    if (totalLength > DAYS_IN_WEEK) {
        span = DAYS_IN_WEEK - offset;
    }
    return span - getExcludedDays({ startDate: begin, days: span, excluded });
}
/**
 * @param {?} __0
 * @return {?}
 */
function getWeekViewEventOffset({ event, startOfWeek, excluded = [], }) {
    if (event.start < startOfWeek) {
        return 0;
    }
    /** @type {?} */
    const distance = Object(date_fns__WEBPACK_IMPORTED_MODULE_10__["differenceInDays"])(event.start, startOfWeek);
    return distance - getExcludedDays({ startDate: startOfWeek, days: distance, excluded });
}
/**
 * @param {?} __0
 * @return {?}
 */
function isEventIsPeriod({ event, periodStart, periodEnd }) {
    /** @type {?} */
    const eventStart = event.start;
    /** @type {?} */
    const eventEnd = event.end || event.start;
    if (eventStart > periodStart && eventStart < periodEnd) {
        return true;
    }
    if (eventEnd > periodStart && eventEnd < periodEnd) {
        return true;
    }
    if (eventStart < periodStart && eventEnd > periodEnd) {
        return true;
    }
    if (Object(date_fns__WEBPACK_IMPORTED_MODULE_10__["isSameSecond"])(eventStart, periodStart) || Object(date_fns__WEBPACK_IMPORTED_MODULE_10__["isSameSecond"])(eventStart, periodEnd)) {
        return true;
    }
    if (Object(date_fns__WEBPACK_IMPORTED_MODULE_10__["isSameSecond"])(eventEnd, periodStart) || Object(date_fns__WEBPACK_IMPORTED_MODULE_10__["isSameSecond"])(eventEnd, periodEnd)) {
        return true;
    }
    return false;
}
/**
 * @param {?} __0
 * @return {?}
 */
function getEventsInPeriod({ events, periodStart, periodEnd }) {
    return events.filter((/**
     * @param {?} event
     * @return {?}
     */
    (event) => isEventIsPeriod({ event, periodStart, periodEnd })));
}
/**
 * @param {?} events
 * @param {?} dayStart
 * @param {?} dayEnd
 * @return {?}
 */
function getEventsInTimeRange(events, dayStart, dayEnd) {
    return events.filter((/**
     * @param {?} event
     * @return {?}
     */
    (event) => {
        /** @type {?} */
        const eventStart = event.start;
        /** @type {?} */
        const eventEnd = event.end || eventStart;
        /** @type {?} */
        const startOfView = Object(date_fns__WEBPACK_IMPORTED_MODULE_10__["setMinutes"])(Object(date_fns__WEBPACK_IMPORTED_MODULE_10__["setHours"])(Object(date_fns__WEBPACK_IMPORTED_MODULE_10__["startOfDay"])(eventStart), dayStart.hour), dayStart.minute);
        /** @type {?} */
        const endOfView = Object(date_fns__WEBPACK_IMPORTED_MODULE_10__["setMinutes"])(Object(date_fns__WEBPACK_IMPORTED_MODULE_10__["setHours"])(Object(date_fns__WEBPACK_IMPORTED_MODULE_10__["startOfMinute"])(eventStart), dayEnd.hour), dayEnd.minute);
        return Object(date_fns__WEBPACK_IMPORTED_MODULE_10__["isAfter"])(eventEnd, startOfView) && Object(date_fns__WEBPACK_IMPORTED_MODULE_10__["isBefore"])(eventStart, endOfView);
    }));
}
/**
 * @param {?} __0
 * @return {?}
 */
function getWeekDay({ date }) {
    /** @type {?} */
    const today = Object(date_fns__WEBPACK_IMPORTED_MODULE_10__["startOfDay"])(new Date());
    return {
        date,
        isPast: date < today,
        isToday: Object(date_fns__WEBPACK_IMPORTED_MODULE_10__["isSameDay"])(date, today),
        isFuture: date > today,
        isWeekend: WEEKEND_DAY_NUMBERS.indexOf(Object(date_fns__WEBPACK_IMPORTED_MODULE_10__["getDay"])(date)) > -1,
    };
}
/**
 * @param {?} __0
 * @return {?}
 */
function getWeekViewHeader({ viewDate, weekStartsOn, excluded = [], }) {
    /** @type {?} */
    const start = Object(date_fns__WEBPACK_IMPORTED_MODULE_10__["startOfWeek"])(viewDate, { weekStartsOn });
    /** @type {?} */
    const days = [];
    for (let i = 0; i < DAYS_IN_WEEK; i++) {
        /** @type {?} */
        const date = Object(date_fns__WEBPACK_IMPORTED_MODULE_10__["addDays"])(start, i);
        if (!excluded.some((/**
         * @param {?} e
         * @return {?}
         */
        (e) => date.getDay() === e))) {
            days.push(getWeekDay({ date }));
        }
    }
    return days;
}
/**
 * @param {?} __0
 * @return {?}
 */
function getWeekView({ events = [], viewDate, weekStartsOn, excluded = [], hourSegments, segmentHeight, dayStart, dayEnd, }) {
    if (!events) {
        events = [];
    }
    /** @type {?} */
    const startOfViewWeek = Object(date_fns__WEBPACK_IMPORTED_MODULE_10__["startOfWeek"])(viewDate, { weekStartsOn });
    /** @type {?} */
    const endOfViewWeek = Object(date_fns__WEBPACK_IMPORTED_MODULE_10__["endOfWeek"])(viewDate, { weekStartsOn });
    /** @type {?} */
    const maxRange = DAYS_IN_WEEK - excluded.length;
    /** @type {?} */
    const eventsMapped = getEventsInTimeRange(getEventsInPeriod({ events, periodStart: startOfViewWeek, periodEnd: endOfViewWeek }), dayStart, dayEnd)
        .map((/**
     * @param {?} event
     * @return {?}
     */
    (event) => {
        /** @type {?} */
        const offset = getWeekViewEventOffset({ event, startOfWeek: startOfViewWeek, excluded });
        /** @type {?} */
        const span = 1;
        return { event, offset, span };
    }))
        .filter((/**
     * @param {?} e
     * @return {?}
     */
    (e) => e.offset < maxRange))
        .filter((/**
     * @param {?} e
     * @return {?}
     */
    (e) => e.span > 0))
        .map((/**
     * @param {?} entry
     * @return {?}
     */
    (entry) => ({
        event: entry.event,
        offset: entry.offset,
        span: entry.span,
        startsBeforeWeek: entry.event.start < startOfViewWeek,
        endsAfterWeek: (entry.event.end || entry.event.start) > endOfViewWeek,
        top: 0,
    })))
        .sort((/**
     * @param {?} itemA
     * @param {?} itemB
     * @return {?}
     */
    (itemA, itemB) => {
        /** @type {?} */
        const startSecondsDiff = Object(date_fns__WEBPACK_IMPORTED_MODULE_10__["differenceInSeconds"])(itemA.event.start, itemB.event.start);
        if (startSecondsDiff === 0) {
            return Object(date_fns__WEBPACK_IMPORTED_MODULE_10__["differenceInSeconds"])(itemB.event.end || itemB.event.start, itemA.event.end || itemA.event.start);
        }
        return startSecondsDiff;
    }))
        .map((/**
     * @param {?} entry
     * @return {?}
     */
    (entry) => {
        /** @type {?} */
        const startOfView = Object(date_fns__WEBPACK_IMPORTED_MODULE_10__["setMinutes"])(Object(date_fns__WEBPACK_IMPORTED_MODULE_10__["setHours"])(Object(date_fns__WEBPACK_IMPORTED_MODULE_10__["startOfDay"])(entry.event.start), dayStart.hour), dayStart.minute);
        /** @type {?} */
        const endOfView = Object(date_fns__WEBPACK_IMPORTED_MODULE_10__["setMinutes"])(Object(date_fns__WEBPACK_IMPORTED_MODULE_10__["setHours"])(Object(date_fns__WEBPACK_IMPORTED_MODULE_10__["startOfMinute"])(Object(date_fns__WEBPACK_IMPORTED_MODULE_10__["endOfDay"])(entry.event.start)), dayEnd.hour), dayEnd.minute);
        /** @type {?} */
        const eventStart = entry.event.start;
        /** @type {?} */
        const eventEnd = entry.event.end || eventStart;
        /** @type {?} */
        const hourHeightModifier = (hourSegments * segmentHeight) / MINUTES_IN_HOUR;
        if (eventStart > startOfView) {
            entry.top += Object(date_fns__WEBPACK_IMPORTED_MODULE_10__["differenceInMinutes"])(eventStart, startOfView);
        }
        entry.top *= hourHeightModifier;
        /** @type {?} */
        const startsBeforeDay = eventStart < startOfView;
        /** @type {?} */
        const endsAfterDay = eventEnd > endOfView;
        /** @type {?} */
        const startDate = startsBeforeDay ? startOfView : eventStart;
        /** @type {?} */
        const endDate = endsAfterDay ? endOfView : eventEnd;
        /** @type {?} */
        let height = Object(date_fns__WEBPACK_IMPORTED_MODULE_10__["differenceInMinutes"])(endDate, startDate);
        if (!entry.event.end) {
            height = segmentHeight;
        }
        else {
            height *= hourHeightModifier;
        }
        entry.height = height;
        return entry;
    }));
    /** @type {?} */
    const eventRows = [];
    /** @type {?} */
    const allocatedEvents = [];
    eventsMapped.forEach((/**
     * @param {?} event
     * @param {?} index
     * @return {?}
     */
    (event, index) => {
        if (allocatedEvents.indexOf(event) === -1) {
            allocatedEvents.push(event);
            /** @type {?} */
            const otherRowEvents = eventsMapped.slice(index + 1).filter((/**
             * @param {?} nextEvent
             * @return {?}
             */
            (nextEvent) => {
                return nextEvent.top === event.top && nextEvent.offset === event.offset;
            }));
            if (otherRowEvents.length > 0) {
                /** @type {?} */
                const totalEventsForRow = otherRowEvents.length + 1;
                event.span = 1 / totalEventsForRow;
                /** @type {?} */
                let nextOffset = event.span + event.offset;
                otherRowEvents.forEach((/**
                 * @param {?} nextEvent
                 * @return {?}
                 */
                (nextEvent) => {
                    nextEvent.offset = nextOffset;
                    nextEvent.span = event.span;
                    nextOffset = nextEvent.span + nextEvent.offset;
                }));
                allocatedEvents.push(...otherRowEvents);
            }
            eventRows.push({
                row: [event, ...otherRowEvents],
            });
        }
    }));
    return eventRows;
}
/**
 * @param {?} __0
 * @return {?}
 */
function getMonthView({ events = [], viewDate, weekStartsOn, excluded = [], }) {
    if (!events) {
        events = [];
    }
    /** @type {?} */
    const start = Object(date_fns__WEBPACK_IMPORTED_MODULE_10__["startOfWeek"])(Object(date_fns__WEBPACK_IMPORTED_MODULE_10__["startOfMonth"])(viewDate), { weekStartsOn });
    /** @type {?} */
    const end = Object(date_fns__WEBPACK_IMPORTED_MODULE_10__["endOfWeek"])(Object(date_fns__WEBPACK_IMPORTED_MODULE_10__["endOfMonth"])(viewDate), { weekStartsOn });
    /** @type {?} */
    const eventsInMonth = getEventsInPeriod({
        events,
        periodStart: start,
        periodEnd: end,
    });
    /** @type {?} */
    const days = [];
    for (let i = 0; i < Object(date_fns__WEBPACK_IMPORTED_MODULE_10__["differenceInDays"])(end, start) + 1; i++) {
        /** @type {?} */
        const date = Object(date_fns__WEBPACK_IMPORTED_MODULE_10__["addDays"])(start, i);
        if (!excluded.some((/**
         * @param {?} e
         * @return {?}
         */
        (e) => date.getDay() === e))) {
            /** @type {?} */
            const day = (/** @type {?} */ (getWeekDay({ date })));
            /** @type {?} */
            const calEvents = getEventsInPeriod({
                events: eventsInMonth,
                periodStart: Object(date_fns__WEBPACK_IMPORTED_MODULE_10__["startOfDay"])(date),
                periodEnd: Object(date_fns__WEBPACK_IMPORTED_MODULE_10__["endOfDay"])(date),
            });
            day.inMonth = Object(date_fns__WEBPACK_IMPORTED_MODULE_10__["isSameMonth"])(date, viewDate);
            day.events = calEvents;
            day.badgeTotal = calEvents.length;
            days.push(day);
        }
    }
    /** @type {?} */
    const totalDaysVisibleInWeek = DAYS_IN_WEEK - excluded.length;
    /** @type {?} */
    const rows = Math.floor(days.length / totalDaysVisibleInWeek);
    /** @type {?} */
    const rowOffsets = [];
    for (let i = 0; i < rows; i++) {
        rowOffsets.push(i * totalDaysVisibleInWeek);
    }
    return {
        rowOffsets,
        totalDaysVisibleInWeek,
        days,
    };
}
/**
 * @param {?} __0
 * @return {?}
 */
function getDayView({ events = [], viewDate, hourSegments, dayStart, dayEnd, eventWidth, segmentHeight }) {
    if (!events) {
        events = [];
    }
    /** @type {?} */
    const startOfView = Object(date_fns__WEBPACK_IMPORTED_MODULE_10__["setMinutes"])(Object(date_fns__WEBPACK_IMPORTED_MODULE_10__["setHours"])(Object(date_fns__WEBPACK_IMPORTED_MODULE_10__["startOfDay"])(viewDate), dayStart.hour), dayStart.minute);
    /** @type {?} */
    const endOfView = Object(date_fns__WEBPACK_IMPORTED_MODULE_10__["setMinutes"])(Object(date_fns__WEBPACK_IMPORTED_MODULE_10__["setHours"])(Object(date_fns__WEBPACK_IMPORTED_MODULE_10__["startOfMinute"])(Object(date_fns__WEBPACK_IMPORTED_MODULE_10__["endOfDay"])(viewDate)), dayEnd.hour), dayEnd.minute);
    /** @type {?} */
    const previousDayEvents = [];
    /** @type {?} */
    const dayViewEvents = getEventsInTimeRange(getEventsInPeriod({
        events: events.filter((/**
         * @param {?} event
         * @return {?}
         */
        (event) => !event.allDay)),
        periodStart: startOfView,
        periodEnd: endOfView,
    }), dayStart, dayEnd)
        .sort((/**
     * @param {?} eventA
     * @param {?} eventB
     * @return {?}
     */
    (eventA, eventB) => {
        return eventA.start.valueOf() - eventB.start.valueOf();
    }))
        .map((/**
     * @param {?} event
     * @return {?}
     */
    (event) => {
        /** @type {?} */
        const eventStart = event.start;
        /** @type {?} */
        const eventEnd = event.end || eventStart;
        /** @type {?} */
        const startsBeforeDay = eventStart < startOfView;
        /** @type {?} */
        const endsAfterDay = eventEnd > endOfView;
        /** @type {?} */
        const hourHeightModifier = (hourSegments * segmentHeight) / MINUTES_IN_HOUR;
        /** @type {?} */
        let top = 0;
        if (eventStart > startOfView) {
            top += Object(date_fns__WEBPACK_IMPORTED_MODULE_10__["differenceInMinutes"])(eventStart, startOfView);
        }
        top *= hourHeightModifier;
        /** @type {?} */
        const startDate = startsBeforeDay ? startOfView : eventStart;
        /** @type {?} */
        const endDate = endsAfterDay ? endOfView : eventEnd;
        /** @type {?} */
        let height = Object(date_fns__WEBPACK_IMPORTED_MODULE_10__["differenceInMinutes"])(endDate, startDate);
        if (!event.end) {
            height = segmentHeight;
        }
        else {
            height *= hourHeightModifier;
        }
        /** @type {?} */
        const bottom = top + height;
        /** @type {?} */
        const overlappingPreviousEvents = previousDayEvents.filter((/**
         * @param {?} previousEvent
         * @return {?}
         */
        (previousEvent) => {
            /** @type {?} */
            const previousEventTop = previousEvent.top;
            /** @type {?} */
            const previousEventBottom = previousEvent.top + previousEvent.height;
            if (top < previousEventBottom && previousEventBottom < bottom) {
                return true;
            }
            else if (previousEventTop <= top && bottom <= previousEventBottom) {
                return true;
            }
            return false;
        }));
        /** @type {?} */
        let left = 0;
        while (overlappingPreviousEvents.some((/**
         * @param {?} previousEvent
         * @return {?}
         */
        (previousEvent) => previousEvent.left === left))) {
            left += eventWidth;
        }
        /** @type {?} */
        const dayEvent = {
            event,
            height,
            width: eventWidth,
            top,
            left,
            startsBeforeDay,
            endsAfterDay,
        };
        if (height > 0) {
            previousDayEvents.push(dayEvent);
        }
        return dayEvent;
    }))
        .filter((/**
     * @param {?} dayEvent
     * @return {?}
     */
    (dayEvent) => dayEvent.height > 0));
    /** @type {?} */
    const width = Math.max(...dayViewEvents.map((/**
     * @param {?} event
     * @return {?}
     */
    (event) => event.left + event.width)));
    /** @type {?} */
    const allDayEvents = getEventsInPeriod({
        events: events.filter((/**
         * @param {?} event
         * @return {?}
         */
        (event) => event.allDay)),
        periodStart: Object(date_fns__WEBPACK_IMPORTED_MODULE_10__["startOfDay"])(startOfView),
        periodEnd: Object(date_fns__WEBPACK_IMPORTED_MODULE_10__["endOfDay"])(endOfView),
    });
    return {
        events: dayViewEvents,
        width,
        allDayEvents,
    };
}
/**
 * @param {?} __0
 * @return {?}
 */
function getDayViewHourGrid({ viewDate, hourSegments, dayStart, dayEnd, }) {
    /** @type {?} */
    const hours = [];
    /** @type {?} */
    const startOfView = Object(date_fns__WEBPACK_IMPORTED_MODULE_10__["setMinutes"])(Object(date_fns__WEBPACK_IMPORTED_MODULE_10__["setHours"])(Object(date_fns__WEBPACK_IMPORTED_MODULE_10__["startOfDay"])(viewDate), dayStart.hour), dayStart.minute);
    /** @type {?} */
    const endOfView = Object(date_fns__WEBPACK_IMPORTED_MODULE_10__["setMinutes"])(Object(date_fns__WEBPACK_IMPORTED_MODULE_10__["setHours"])(Object(date_fns__WEBPACK_IMPORTED_MODULE_10__["startOfMinute"])(Object(date_fns__WEBPACK_IMPORTED_MODULE_10__["endOfDay"])(viewDate)), dayEnd.hour), dayEnd.minute);
    /** @type {?} */
    const segmentDuration = MINUTES_IN_HOUR / hourSegments;
    /** @type {?} */
    const startOfViewDay = Object(date_fns__WEBPACK_IMPORTED_MODULE_10__["startOfDay"])(viewDate);
    for (let i = 0; i < HOURS_IN_DAY; i++) {
        /** @type {?} */
        const segments = [];
        for (let j = 0; j < hourSegments; j++) {
            /** @type {?} */
            const date = Object(date_fns__WEBPACK_IMPORTED_MODULE_10__["addMinutes"])(Object(date_fns__WEBPACK_IMPORTED_MODULE_10__["addHours"])(startOfViewDay, i), j * segmentDuration);
            if (date >= startOfView && date < endOfView) {
                segments.push({
                    date,
                    isStart: j === 0,
                });
            }
        }
        if (segments.length > 0) {
            hours.push({ segments });
        }
    }
    return hours;
}

/**
 * @fileoverview added by tsickle
 * Generated from: elements/calendar/month/CalendarMonthView.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Shows all events on a given month. Example usage:
 *
 * ```
 * &lt;novo-calendar-month-view
 *  [viewDate]="viewDate"
 *  [events]="events"&gt;
 * &lt;/novo-calendar-month-view&gt;
 * ```
 */
class NovoCalendarMonthViewElement {
    /**
     * @hidden
     * @param {?} cdr
     * @param {?} locale
     */
    constructor(cdr, locale) {
        this.cdr = cdr;
        /**
         * An array of events to display on view
         */
        this.events = [];
        /**
         * An array of day indexes (0 = sunday, 1 = monday etc) that will be hidden on the view
         */
        this.excludeDays = [];
        /**
         * The locale used to format dates
         */
        this.locale = 'en-US';
        /**
         * The placement of the event tooltip
         */
        this.tooltipPosition = 'top';
        /**
         * Called when the day cell is clicked
         */
        this.dayClicked = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        /**
         * Called when the event title is clicked
         */
        this.eventClicked = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        /**
         * Called when an event is dragged and dropped
         */
        this.eventTimesChanged = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.viewDateChange = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.locale = locale;
    }
    /**
     * @hidden
     * @return {?}
     */
    ngOnInit() {
        if (this.refresh) {
            this.refreshSubscription = this.refresh.subscribe((/**
             * @return {?}
             */
            () => {
                this.refreshAll();
                this.cdr.markForCheck();
            }));
        }
    }
    /**
     * @hidden
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes.viewDate || changes.excludeDays) {
            this.refreshHeader();
        }
        if (changes.viewDate || changes.events || changes.excludeDays) {
            this.refreshBody();
        }
    }
    /**
     * @hidden
     * @return {?}
     */
    ngOnDestroy() {
        if (this.refreshSubscription) {
            this.refreshSubscription.unsubscribe();
        }
    }
    /**
     * @hidden
     * @param {?} day
     * @param {?} event
     * @return {?}
     */
    eventDropped(day, event) {
        /** @type {?} */
        const year = Object(date_fns__WEBPACK_IMPORTED_MODULE_10__["getYear"])(day.date);
        /** @type {?} */
        const month = Object(date_fns__WEBPACK_IMPORTED_MODULE_10__["getMonth"])(day.date);
        /** @type {?} */
        const date = Object(date_fns__WEBPACK_IMPORTED_MODULE_10__["getDate"])(day.date);
        /** @type {?} */
        const newStart = Object(date_fns__WEBPACK_IMPORTED_MODULE_10__["setYear"])(Object(date_fns__WEBPACK_IMPORTED_MODULE_10__["setMonth"])(Object(date_fns__WEBPACK_IMPORTED_MODULE_10__["setDate"])(event.start, date), month), year);
        /** @type {?} */
        let newEnd;
        if (event.end) {
            /** @type {?} */
            const secondsDiff = Object(date_fns__WEBPACK_IMPORTED_MODULE_10__["differenceInSeconds"])(newStart, event.start);
            newEnd = Object(date_fns__WEBPACK_IMPORTED_MODULE_10__["addSeconds"])(event.end, secondsDiff);
        }
        this.eventTimesChanged.emit({ event, newStart, newEnd });
    }
    /**
     * @private
     * @return {?}
     */
    refreshHeader() {
        this.columnHeaders = getWeekViewHeader({
            viewDate: this.viewDate,
            weekStartsOn: this.weekStartsOn,
            excluded: this.excludeDays,
        });
    }
    /**
     * @private
     * @return {?}
     */
    refreshBody() {
        this.view = getMonthView({
            events: this.events,
            viewDate: this.viewDate,
            weekStartsOn: this.weekStartsOn,
            excluded: this.excludeDays,
        });
        if (this.dayModifier) {
            this.view.days.forEach((/**
             * @param {?} day
             * @return {?}
             */
            (day) => this.dayModifier(day)));
        }
    }
    /**
     * @return {?}
     */
    refreshAll() {
        this.refreshHeader();
        this.refreshBody();
        this.viewDateChange.emit(this.viewDate);
    }
}
NovoCalendarMonthViewElement.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'novo-calendar-month',
                template: `
    <div class="calendar-month-view">
       <novo-calendar-month-header
         [(viewDate)]="viewDate"
         [days]="columnHeaders"
         [locale]="locale"
         [customTemplate]="headerTemplate"
         (viewDateChange)="refreshAll()">
       </novo-calendar-month-header>
      <div class="calendar-days">
        <div *ngFor="let rowIndex of view.rowOffsets">
          <div class="calendar-cell-row">
            <novo-calendar-month-day
              *ngFor="let day of view.days | slice : rowIndex : rowIndex + (view.totalDaysVisibleInWeek)"
              [day]="day"
              [locale]="locale"
              [customTemplate]="cellTemplate"
              (click)="dayClicked.emit({day: day})"
              (eventClicked)="eventClicked.emit({ day: day, event: $event.event})">
            </novo-calendar-month-day>
          </div>
        </div>
      </div>
    </div>
  `
            }] }
];
/** @nocollapse */
NovoCalendarMonthViewElement.ctorParameters = () => [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectorRef"] },
    { type: String, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["LOCALE_ID"],] }] }
];
NovoCalendarMonthViewElement.propDecorators = {
    viewDate: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    events: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    excludeDays: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    dayModifier: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    refresh: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    locale: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    tooltipPosition: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    weekStartsOn: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    headerTemplate: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    cellTemplate: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    dayClicked: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    eventClicked: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    eventTimesChanged: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    viewDateChange: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }]
};
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: elements/calendar/month/CalendarMonthHeader.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NovoCalendarMonthHeaderElement {
    constructor() {
        /**
         * Called when the view date is changed
         */
        this.viewDateChange = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    prevMonth(event) {
        this.viewDateChange.emit(Object(date_fns__WEBPACK_IMPORTED_MODULE_10__["subMonths"])(this.viewDate, 1));
    }
    /**
     * @param {?} event
     * @return {?}
     */
    nextMonth(event) {
        this.viewDateChange.emit(Object(date_fns__WEBPACK_IMPORTED_MODULE_10__["addMonths"])(this.viewDate, 1));
    }
}
NovoCalendarMonthHeaderElement.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'novo-calendar-month-header',
                template: `
    <ng-template #defaultTemplate>
      <div class="calendar-header">
        <div class="calendar-header-top">
          <button theme="icon" icon="previous" (click)="prevMonth($event)"></button>
          <div class="calendar-month">{{ viewDate | month:locale }}</div>
          <button theme="icon" icon="next" (click)="nextMonth($event)"></button>
        </div>
        <div class="calendar-weekdays">
          <div
            class="calendar-weekday"
            *ngFor="let day of days"
            [class.calendar-past]="day.isPast"
            [class.calendar-today]="day.isToday"
            [class.calendar-future]="day.isFuture"
            [class.calendar-weekend]="day.isWeekend">
            {{ day.date | weekday:locale }}
          </div>
        </div>
      </div>
    </ng-template>
    <ng-template
      [ngTemplateOutlet]="customTemplate || defaultTemplate"
      [ngTemplateOutletContext]="{days: days, locale: locale, viewDate: viewDate}">
    </ng-template>
  `
            }] }
];
NovoCalendarMonthHeaderElement.propDecorators = {
    viewDate: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    days: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    locale: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    customTemplate: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    viewDateChange: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }]
};
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: elements/calendar/month/CalendarMonthDay.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NovoCalendarMonthDayElement {
    constructor() {
        this.eventClicked = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
    }
    /**
     * @return {?}
     */
    get accepted() {
        if (!this.day) {
            return [];
        }
        return this.day.events.filter((/**
         * @param {?} evt
         * @return {?}
         */
        (evt) => {
            return evt.response === CalendarEventResponse.Accepted;
        }));
    }
    /**
     * @return {?}
     */
    get rejected() {
        if (!this.day) {
            return [];
        }
        return this.day.events.filter((/**
         * @param {?} evt
         * @return {?}
         */
        (evt) => {
            return evt.response === CalendarEventResponse.Rejected;
        }));
    }
    /**
     * @return {?}
     */
    get maybes() {
        if (!this.day) {
            return [];
        }
        return this.day.events.filter((/**
         * @param {?} evt
         * @return {?}
         */
        (evt) => {
            return evt.response === CalendarEventResponse.Maybe;
        }));
    }
}
NovoCalendarMonthDayElement.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'novo-calendar-month-day',
                template: `
    <ng-template #defaultTemplate>
      <div class="calendar-day-top">
        <span class="calendar-day-badge" *ngIf="day.badgeTotal > 0">{{ day.badgeTotal }}</span>
        <span class="calendar-day-number">{{ day.date | dayofmonth:locale }}</span>
      </div>
      <div class="calendar-events">
        <div
          class="calendar-event"
          *ngFor="let type of day.events | groupBy : 'type'"
          [style.backgroundColor]="type?.value[0]?.color.primary"
          [ngClass]="type?.value[0]?.cssClass"
          (click)="$event.stopPropagation(); eventClicked.emit({event:type?.value[0]})">
          {{type?.value.length}}
        </div>
      </div>
    </ng-template>
    <ng-template
      [ngTemplateOutlet]="customTemplate || defaultTemplate"
      [ngTemplateOutletContext]="{
        day: day,
        locale: locale,
        tooltipPosition: tooltipPosition,
        eventClicked: eventClicked,
        accepted: accepted,
        rejected: rejected,
        maybes: maybes
      }">
    </ng-template>
  `,
                host: {
                    '[class]': '"calendar-cell calendar-day-cell " + day?.cssClass',
                    '[class.calendar-day-accepted]': 'accepted.length',
                    '[class.calendar-day-rejected]': 'rejected.length',
                    '[class.calendar-past]': 'day.isPast',
                    '[class.calendar-today]': 'day.isToday',
                    '[class.calendar-future]': 'day.isFuture',
                    '[class.calendar-weekend]': 'day.isWeekend',
                    '[class.calendar-in-month]': 'day.inMonth',
                    '[class.calendar-out-month]': '!day.inMonth',
                    '[class.calendar-has-events]': 'day.events.length > 0',
                    '[style.backgroundColor]': 'day.backgroundColor',
                }
            }] }
];
NovoCalendarMonthDayElement.propDecorators = {
    day: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    locale: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    tooltipPosition: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    customTemplate: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    eventClicked: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }]
};
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: elements/calendar/week/CalendarWeekView.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @hidden
 * @type {?}
 */
const SEGMENT_HEIGHT = 30;
/**
 * @hidden
 * @type {?}
 */
const MINUTES_IN_HOUR$1 = 60;
/**
 * Shows all events on a given week. Example usage:
 *
 * ```typescript
 * &lt;novo-calendar-week
 *  [viewDate]="viewDate"
 *  [events]="events"&gt;
 * &lt;/novo-calendar-week&gt;
 * ```
 */
class NovoCalendarWeekViewElement {
    /**
     * @hidden
     * @param {?} cdr
     * @param {?} locale
     */
    constructor(cdr, locale) {
        this.cdr = cdr;
        /**
         * An array of events to display on view
         */
        this.events = [];
        /**
         * An array of day indexes (0 = sunday, 1 = monday etc) that will be hidden on the view
         */
        this.excludeDays = [];
        /**
         * The placement of the event tooltip
         */
        this.tooltipPosition = 'bottom';
        /**
         * The precision to display events.
         * `days` will round event start and end dates to the nearest day and `minutes` will not do this rounding
         */
        this.precision = 'days';
        /**
         * The number of segments in an hour. Must be <= 6
         */
        this.hourSegments = 2;
        /**
         * The day start hours in 24 hour time. Must be 0-23
         */
        this.dayStartHour = 0;
        /**
         * The day start minutes. Must be 0-59
         */
        this.dayStartMinute = 0;
        /**
         * The day end hours in 24 hour time. Must be 0-23
         */
        this.dayEndHour = 23;
        /**
         * The day end minutes. Must be 0-59
         */
        this.dayEndMinute = 59;
        /**
         * Called when an hour segment is clicked
         */
        this.hourSegmentClicked = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        /**
         * Called when a header week day is clicked
         */
        this.dayClicked = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        /**
         * Called when the event title is clicked
         */
        this.eventClicked = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        /**
         * Called when an event is resized or dragged and dropped
         */
        this.eventTimesChanged = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        /**
         * @hidden
         */
        this.hours = [];
        /**
         * @hidden
         */
        this.eventRows = [];
        this.locale = locale;
    }
    /**
     * @hidden
     * @return {?}
     */
    ngOnInit() {
        if (this.refresh) {
            this.refreshSubscription = this.refresh.subscribe((/**
             * @return {?}
             */
            () => {
                this.refreshAll();
                this.cdr.detectChanges();
            }));
        }
    }
    /**
     * @hidden
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes.viewDate || changes.excludeDays) {
            this.refreshHeader();
        }
        if (changes.events || changes.viewDate || changes.excludeDays) {
            this.refreshBody();
        }
        if (changes.viewDate || changes.dayStartHour || changes.dayStartMinute || changes.dayEndHour || changes.dayEndMinute) {
            this.refreshHourGrid();
        }
    }
    /**
     * @hidden
     * @return {?}
     */
    ngOnDestroy() {
        if (this.refreshSubscription) {
            this.refreshSubscription.unsubscribe();
        }
    }
    /*
        resizeStarted(weekViewContainer: HTMLElement, weekEvent: WeekViewEvent, resizeEvent: ResizeEvent): void {
          this.currentResize = {
            originalOffset: weekEvent.offset,
            originalSpan: weekEvent.span,
            edge: typeof resizeEvent.edges.left !== 'undefined' ? 'left' : 'right'
          };
          const resizeHelper: CalendarResizeHelper = new CalendarResizeHelper(weekViewContainer, this.getDayColumnWidth(weekViewContainer));
          this.validateResize = ({rectangle}) => resizeHelper.validateResize({rectangle});
          this.cdr.detectChanges();
        }
    
        resizing(weekEvent: WeekViewEvent, resizeEvent: ResizeEvent, dayWidth: number): void {
          if (resizeEvent.edges.left) {
            const diff: number = Math.round(+resizeEvent.edges.left / dayWidth);
            weekEvent.offset = this.currentResize.originalOffset + diff;
            weekEvent.span = this.currentResize.originalSpan - diff;
          } else if (resizeEvent.edges.right) {
            const diff: number = Math.round(+resizeEvent.edges.right / dayWidth);
            weekEvent.span = this.currentResize.originalSpan + diff;
          }
        }
    
        resizeEnded(weekEvent: WeekViewEvent): void {
    
          let daysDiff: number;
          if (this.currentResize.edge === 'left') {
            daysDiff = weekEvent.offset - this.currentResize.originalOffset;
          } else {
            daysDiff = weekEvent.span - this.currentResize.originalSpan;
          }
    
          weekEvent.offset = this.currentResize.originalOffset;
          weekEvent.span = this.currentResize.originalSpan;
    
          let newStart: Date = weekEvent.event.start;
          let newEnd: Date = weekEvent.event.end;
          if (this.currentResize.edge === 'left') {
            newStart = addDays(newStart, daysDiff);
          } else if (newEnd) {
            newEnd = addDays(newEnd, daysDiff);
          }
    
          this.eventTimesChanged.emit({newStart, newEnd, event: weekEvent.event});
          this.currentResize = null;
    
        }
    
        eventDragged(weekEvent: WeekViewEvent, draggedByPx: number, dayWidth: number): void {
    
          const daysDragged: number = draggedByPx / dayWidth;
          const newStart: Date = addDays(weekEvent.event.start, daysDragged);
          let newEnd: Date;
          if (weekEvent.event.end) {
            newEnd = addDays(weekEvent.event.end, daysDragged);
          }
    
          this.eventTimesChanged.emit({newStart, newEnd, event: weekEvent.event});
    
        }
    
        dragStart(weekViewContainer: HTMLElement, event: HTMLElement): void {
          const dragHelper: CalendarDragHelper = new CalendarDragHelper(weekViewContainer, event);
          this.validateDrag = ({x, y}) => !this.currentResize && dragHelper.validateDrag({x, y});
          this.cdr.detectChanges();
        }
        */
    /**
     * @param {?} eventRowContainer
     * @return {?}
     */
    getDayColumnWidth(eventRowContainer) {
        return Math.floor(eventRowContainer.offsetWidth / this.days.length);
    }
    /**
     * @private
     * @return {?}
     */
    refreshHeader() {
        this.days = getWeekViewHeader({
            viewDate: this.viewDate,
            weekStartsOn: this.weekStartsOn,
            excluded: this.excludeDays,
        });
    }
    /**
     * @private
     * @return {?}
     */
    refreshBody() {
        this.eventRows = getWeekView({
            events: this.events,
            viewDate: this.viewDate,
            weekStartsOn: this.weekStartsOn,
            excluded: this.excludeDays,
            hourSegments: this.hourSegments,
            segmentHeight: SEGMENT_HEIGHT,
            dayStart: {
                hour: this.dayStartHour,
                minute: this.dayStartMinute,
            },
            dayEnd: {
                hour: this.dayEndHour,
                minute: this.dayEndMinute,
            },
        });
    }
    /**
     * @private
     * @return {?}
     */
    refreshHourGrid() {
        this.hours = getDayViewHourGrid({
            viewDate: this.viewDate,
            hourSegments: this.hourSegments,
            dayStart: {
                hour: this.dayStartHour,
                minute: this.dayStartMinute,
            },
            dayEnd: {
                hour: this.dayEndHour,
                minute: this.dayEndMinute,
            },
        });
        // if (this.hourSegmentModifier) {
        //   this.hours.forEach(hour => {
        //     hour.segments.forEach(segment => this.hourSegmentModifier(segment));
        //   });
        // }
    }
    /**
     * @private
     * @return {?}
     */
    refreshAll() {
        this.refreshHeader();
        this.refreshHourGrid();
        this.refreshBody();
    }
}
NovoCalendarWeekViewElement.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'novo-calendar-week',
                template: `
    <div class="cal-week-view" #weekViewContainer>
      <novo-calendar-week-header
        [days]="days"
        [locale]="locale"
        [customTemplate]="headerTemplate"
        (dayClicked)="dayClicked.emit($event)">
      </novo-calendar-week-header>
      <div *ngFor="let eventRow of eventRows" #eventRowContainer>
        <div
          class="cal-event-container"
          #event
          *ngFor="let weekEvent of eventRow.row"
          [style.width]="((100 / days.length) * weekEvent.span) + '%'"
          [style.marginTop.px]="weekEvent.top"
          [style.height.px]="weekEvent.height"
          [style.marginLeft]="((100 / days.length) * weekEvent.offset) + '%'">
          <novo-calendar-week-event
            [weekEvent]="weekEvent"
            [tooltipPosition]="tooltipPosition"
            [customTemplate]="eventTemplate"
            (eventClicked)="eventClicked.emit($event)">
          </novo-calendar-week-event>
        </div>
      </div>
      <div class="cal-hour" *ngFor="let hour of hours" [style.minWidth.px]="70">
        <novo-calendar-day-hour-segment
          *ngFor="let segment of hour.segments"
          [segment]="segment"
          [locale]="locale"
          [customTemplate]="hourSegmentTemplate"
          (click)="hourSegmentClicked.emit({date: segment.date})">
        </novo-calendar-day-hour-segment>
      </div>
    </div>
  `
            }] }
];
/** @nocollapse */
NovoCalendarWeekViewElement.ctorParameters = () => [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectorRef"] },
    { type: String, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["LOCALE_ID"],] }] }
];
NovoCalendarWeekViewElement.propDecorators = {
    viewDate: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    events: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    excludeDays: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    refresh: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    locale: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    tooltipPosition: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    weekStartsOn: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    headerTemplate: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    eventTemplate: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    precision: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    hourSegments: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    dayStartHour: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    dayStartMinute: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    dayEndHour: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    dayEndMinute: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    hourSegmentTemplate: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    hourSegmentClicked: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    dayClicked: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    eventClicked: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    eventTimesChanged: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }]
};
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: elements/calendar/week/CalendarWeekHeader.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NovoCalendarWeekHeaderElement {
    constructor() {
        this.dayClicked = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.eventDropped = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
    }
}
NovoCalendarWeekHeaderElement.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'novo-calendar-week-header',
                template: `
    <ng-template #defaultTemplate>
      <div class="cal-day-headers">
        <div
          class="cal-header"
          *ngFor="let day of days"
          [class.cal-past]="day.isPast"
          [class.cal-today]="day.isToday"
          [class.cal-future]="day.isFuture"
          [class.cal-weekend]="day.isWeekend"
          [class.cal-drag-over]="day.dragOver"
          (click)="dayClicked.emit({date: day.date})"
          mwlDroppable
          (dragEnter)="day.dragOver = true"
          (dragLeave)="day.dragOver = false"
          (drop)="day.dragOver = false; eventDropped.emit({event: $event.dropData.event, newStart: day.date})">
          <b>{{ day.date | weekday:locale:'long'}}</b><br>
          <span>{{ day.date | monthday:locale }}</span>
        </div>
      </div>
    </ng-template>
    <ng-template
      [ngTemplateOutlet]="customTemplate || defaultTemplate"
      [ngTemplateOutletContext]="{days: days, locale: locale, dayClicked: dayClicked, eventDropped: eventDropped}">
    </ng-template>
  `
            }] }
];
NovoCalendarWeekHeaderElement.propDecorators = {
    days: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    locale: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    customTemplate: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    dayClicked: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    eventDropped: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }]
};
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: elements/calendar/week/CalendarWeekEvent.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NovoCalendarWeekEventElement {
    constructor() {
        this.eventClicked = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
    }
}
NovoCalendarWeekEventElement.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'novo-calendar-week-event',
                template: `
    <ng-template #defaultTemplate>
      <div
        class="cal-event"
        [class.cal-starts-within-week]="!weekEvent.startsBeforeWeek"
        [class.cal-ends-within-week]="!weekEvent.endsAfterWeek"
        [ngClass]="weekEvent.event?.cssClass"
        [tooltip]="weekEvent.event.description"
        [tooltipPosition]="tooltipPosition"
        (click)="eventClicked.emit({event: weekEvent.event})">
        <div class="cal-event-ribbon" [style.backgroundColor]="weekEvent.event.color.primary"></div>
        <div class="cal-event-title">{{weekEvent.event?.title}}</div>
        <div class="cal-event-description">{{weekEvent.event?.description}}</div>
      </div>
    </ng-template>
    <ng-template
      [ngTemplateOutlet]="customTemplate || defaultTemplate"
      [ngTemplateOutletContext]="{weekEvent: weekEvent, tooltipPosition: tooltipPosition, eventClicked: eventClicked}">
    </ng-template>
  `
            }] }
];
NovoCalendarWeekEventElement.propDecorators = {
    weekEvent: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    tooltipPosition: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    customTemplate: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    eventClicked: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }]
};
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: elements/calendar/day/CalendarDayView.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @hidden
 * @type {?}
 */
const SEGMENT_HEIGHT$1 = 30;
/**
 * @hidden
 * @type {?}
 */
const MINUTES_IN_HOUR$2 = 60;
/**
 * Shows all events on a given day. Example usage:
 *
 * ```typescript
 * &lt;novo-calendar-day
 *  [viewDate]="viewDate"
 *  [events]="events"&gt;
 * &lt;/novo-calendar-day&gt;
 * ```
 */
class NovoCalendarDayViewElement {
    /**
     * @hidden
     * @param {?} cdr
     * @param {?} locale
     */
    constructor(cdr, locale) {
        this.cdr = cdr;
        /**
         * An array of events to display on view
         */
        this.events = [];
        /**
         * The number of segments in an hour. Must be <= 6
         */
        this.hourSegments = 2;
        /**
         * The day start hours in 24 hour time. Must be 0-23
         */
        this.dayStartHour = 0;
        /**
         * The day start minutes. Must be 0-59
         */
        this.dayStartMinute = 0;
        /**
         * The day end hours in 24 hour time. Must be 0-23
         */
        this.dayEndHour = 23;
        /**
         * The day end minutes. Must be 0-59
         */
        this.dayEndMinute = 59;
        /**
         * The width in pixels of each event on the view
         */
        this.eventWidth = 150;
        /**
         * The grid size to snap resizing and dragging of events to
         */
        this.eventSnapSize = 30;
        /**
         * The placement of the event tooltip
         */
        this.tooltipPosition = 'top';
        /**
         * Called when an event title is clicked
         */
        this.eventClicked = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        /**
         * Called when an hour segment is clicked
         */
        this.hourSegmentClicked = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        /**
         * Called when an event is resized or dragged and dropped
         */
        this.eventTimesChanged = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        /**
         * @hidden
         */
        this.hours = [];
        /**
         * @hidden
         */
        this.width = 0;
        this.locale = locale;
    }
    /**
     * @hidden
     * @return {?}
     */
    ngOnInit() {
        if (this.refresh) {
            this.refreshSubscription = this.refresh.subscribe((/**
             * @return {?}
             */
            () => {
                this.refreshAll();
                this.cdr.detectChanges();
            }));
        }
    }
    /**
     * @hidden
     * @return {?}
     */
    ngOnDestroy() {
        if (this.refreshSubscription) {
            this.refreshSubscription.unsubscribe();
        }
    }
    /**
     * @hidden
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes.viewDate || changes.dayStartHour || changes.dayStartMinute || changes.dayEndHour || changes.dayEndMinute) {
            this.refreshHourGrid();
        }
        if (changes.viewDate ||
            changes.events ||
            changes.dayStartHour ||
            changes.dayStartMinute ||
            changes.dayEndHour ||
            changes.dayEndMinute ||
            changes.eventWidth) {
            this.refreshView();
        }
    }
    /*
        eventDropped(dropEvent: {dropData?: {event?: CalendarEvent}}, segment: DayViewHourSegment): void {
          if (dropEvent.dropData && dropEvent.dropData.event) {
            this.eventTimesChanged.emit({event: dropEvent.dropData.event, newStart: segment.date});
          }
        }
    
        resizeStarted(event: DayViewEvent, resizeEvent: ResizeEvent, dayViewContainer: HTMLElement): void {
          this.currentResize = {
            originalTop: event.top,
            originalHeight: event.height,
            edge: typeof resizeEvent.edges.top !== 'undefined' ? 'top' : 'bottom'
          };
          const resizeHelper: CalendarResizeHelper = new CalendarResizeHelper(dayViewContainer);
          this.validateResize = ({rectangle}) => resizeHelper.validateResize({rectangle});
          this.cdr.detectChanges();
        }
    
        resizing(event: DayViewEvent, resizeEvent: ResizeEvent): void {
          if (resizeEvent.edges.top) {
            event.top = this.currentResize.originalTop + +resizeEvent.edges.top;
            event.height = this.currentResize.originalHeight - +resizeEvent.edges.top;
          } else if (resizeEvent.edges.bottom) {
            event.height = this.currentResize.originalHeight + +resizeEvent.edges.bottom;
          }
        }
    
        resizeEnded(dayEvent: DayViewEvent): void {
    
          let pixelsMoved: number;
          if (this.currentResize.edge === 'top') {
            pixelsMoved = (dayEvent.top - this.currentResize.originalTop);
          } else {
            pixelsMoved = (dayEvent.height - this.currentResize.originalHeight);
          }
    
          dayEvent.top = this.currentResize.originalTop;
          dayEvent.height = this.currentResize.originalHeight;
    
          const pixelAmountInMinutes: number = MINUTES_IN_HOUR / (this.hourSegments * SEGMENT_HEIGHT);
          const minutesMoved: number = pixelsMoved * pixelAmountInMinutes;
          let newStart: Date = dayEvent.event.start;
          let newEnd: Date = dayEvent.event.end;
          if (this.currentResize.edge === 'top') {
            newStart = addMinutes(newStart, minutesMoved);
          } else if (newEnd) {
            newEnd = addMinutes(newEnd, minutesMoved);
          }
    
          this.eventTimesChanged.emit({newStart, newEnd, event: dayEvent.event});
          this.currentResize = null;
    
        }
    
        dragStart(event: HTMLElement, dayViewContainer: HTMLElement): void {
          const dragHelper: CalendarDragHelper = new CalendarDragHelper(dayViewContainer, event);
          this.validateDrag = ({x, y}) => !this.currentResize && dragHelper.validateDrag({x, y});
          this.cdr.detectChanges();
        }
    
        eventDragged(dayEvent: DayViewEvent, draggedInPixels: number): void {
          const pixelAmountInMinutes: number = MINUTES_IN_HOUR / (this.hourSegments * SEGMENT_HEIGHT);
          const minutesMoved: number = draggedInPixels * pixelAmountInMinutes;
          const newStart: Date = addMinutes(dayEvent.event.start, minutesMoved);
          let newEnd: Date;
          if (dayEvent.event.end) {
            newEnd = addMinutes(dayEvent.event.end, minutesMoved);
          }
          this.eventTimesChanged.emit({newStart, newEnd, event: dayEvent.event});
        }
        */
    /**
     * @private
     * @return {?}
     */
    refreshHourGrid() {
        this.hours = getDayViewHourGrid({
            viewDate: this.viewDate,
            hourSegments: this.hourSegments,
            dayStart: {
                hour: this.dayStartHour,
                minute: this.dayStartMinute,
            },
            dayEnd: {
                hour: this.dayEndHour,
                minute: this.dayEndMinute,
            },
        });
        if (this.hourSegmentModifier) {
            this.hours.forEach((/**
             * @param {?} hour
             * @return {?}
             */
            (hour) => {
                hour.segments.forEach((/**
                 * @param {?} segment
                 * @return {?}
                 */
                (segment) => this.hourSegmentModifier(segment)));
            }));
        }
    }
    /**
     * @private
     * @return {?}
     */
    refreshView() {
        this.view = getDayView({
            events: this.events,
            viewDate: this.viewDate,
            hourSegments: this.hourSegments,
            dayStart: {
                hour: this.dayStartHour,
                minute: this.dayStartMinute,
            },
            dayEnd: {
                hour: this.dayEndHour,
                minute: this.dayEndMinute,
            },
            eventWidth: this.eventWidth,
            segmentHeight: SEGMENT_HEIGHT$1,
        });
    }
    /**
     * @private
     * @return {?}
     */
    refreshAll() {
        this.refreshHourGrid();
        this.refreshView();
    }
}
NovoCalendarDayViewElement.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'novo-calendar-day',
                template: `
    <div class="cal-day-view" #dayViewContainer>
      <novo-calendar-all-day-event
        *ngFor="let event of view.allDayEvents"
        [event]="event"
        [customTemplate]="allDayEventTemplate"
        (eventClicked)="eventClicked.emit({event: event})">
      </novo-calendar-all-day-event>
      <div class="cal-hour-rows">
        <div class="cal-events">
          <div
            #event
            *ngFor="let dayEvent of view?.events"
            class="cal-event-container"
            [style.marginTop.px]="dayEvent.top"
            [style.height.px]="dayEvent.height"
            [style.marginLeft.px]="dayEvent.left + 70"
            [style.width.px]="dayEvent.width - 1">
            <novo-calendar-day-event
              [dayEvent]="dayEvent"
              [tooltipPosition]="tooltipPosition"
              [customTemplate]="eventTemplate"
              (eventClicked)="eventClicked.emit($event)">
            </novo-calendar-day-event>
          </div>
        </div>
        <div class="cal-hour" *ngFor="let hour of hours" [style.minWidth.px]="view?.width + 70">
          <novo-calendar-day-hour-segment
            *ngFor="let segment of hour.segments"
            [segment]="segment"
            [locale]="locale"
            [customTemplate]="hourSegmentTemplate"
            (click)="hourSegmentClicked.emit({date: segment.date})">
          </novo-calendar-day-hour-segment>
        </div>
      </div>
    </div>
  `
            }] }
];
/** @nocollapse */
NovoCalendarDayViewElement.ctorParameters = () => [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectorRef"] },
    { type: String, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["LOCALE_ID"],] }] }
];
NovoCalendarDayViewElement.propDecorators = {
    viewDate: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    events: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    hourSegments: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    dayStartHour: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    dayStartMinute: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    dayEndHour: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    dayEndMinute: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    eventWidth: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    refresh: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    locale: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    hourSegmentModifier: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    eventSnapSize: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    tooltipPosition: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    hourSegmentTemplate: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    allDayEventTemplate: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    eventTemplate: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    eventClicked: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    hourSegmentClicked: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    eventTimesChanged: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }]
};
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: elements/calendar/day/CalendarDayEvent.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NovoCalendarDayEventElement {
    constructor() {
        this.eventClicked = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
    }
}
NovoCalendarDayEventElement.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'novo-calendar-day-event',
                template: `
    <ng-template #defaultTemplate>
      <div
        class="cal-event"
        [style.borderColor]="dayEvent.event.color.secondary"
        [class.cal-starts-within-day]="!dayEvent.startsBeforeDay"
        [class.cal-ends-within-day]="!dayEvent.endsAfterDay"
        [ngClass]="dayEvent.event.cssClass"
        [tooltip]="dayEvent.event.description"
        [tooltipPosition]="tooltipPosition"
        (click)="eventClicked.emit({event: dayEvent.event})">
          <div class="cal-event-ribbon" [style.backgroundColor]="dayEvent.event.color.primary"></div>
          <div class="cal-event-group">
            <div class="cal-event-title">{{dayEvent.event.title}}</div>
            <div class="cal-event-description">{{dayEvent.event?.description}}</div>
          </div>
      </div>
    </ng-template>
    <ng-template
      [ngTemplateOutlet]="customTemplate || defaultTemplate"
      [ngTemplateOutletContext]="{dayEvent: dayEvent, tooltipPosition: tooltipPosition, eventClicked: eventClicked}">
    </ng-template>
  `
            }] }
];
NovoCalendarDayEventElement.propDecorators = {
    dayEvent: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    tooltipPosition: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    customTemplate: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    eventClicked: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }]
};
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: elements/calendar/day/CalendarHourSegment.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NovoCalendarHourSegmentElement {
}
NovoCalendarHourSegmentElement.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'novo-calendar-day-hour-segment',
                template: `
    <ng-template #defaultTemplate>
      <div
        class="cal-hour-segment"
        [class.cal-hour-start]="segment.isStart"
        [class.cal-after-hour-start]="!segment.isStart"
        [ngClass]="segment.cssClass">
        <div class="cal-time">
          {{ segment.date | hours:locale }}
        </div>
      </div>
    </ng-template>
    <ng-template
      [ngTemplateOutlet]="customTemplate || defaultTemplate"
      [ngTemplateOutletContext]="{
        segment: segment,
        locale: locale
      }">
    </ng-template>
  `
            }] }
];
NovoCalendarHourSegmentElement.propDecorators = {
    segment: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    locale: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    customTemplate: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }]
};
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: elements/calendar/day/CalendarAllDayEvent.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NovoCalendarAllDayEventElement {
    constructor() {
        this.eventClicked = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
    }
}
NovoCalendarAllDayEventElement.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'novo-calendar-all-day-event',
                template: `
    <ng-template #defaultTemplate>
      <div
        class="cal-all-day-event"
        [style.backgroundColor]="event.color.secondary"
        [style.borderColor]="event.color.primary">
        {{event.title}}
        <!--<novo-calendar-event-title
          [event]="event"
          view="day"
          (click)="eventClicked.emit()">
        </novo-calendar-event-title>
        <novo-calendar-event-actions [event]="event"></novo-calendar-event-actions>-->
      </div>
    </ng-template>
    <ng-template
      [ngTemplateOutlet]="customTemplate || defaultTemplate"
      [ngTemplateOutletContext]="{
        event: event,
        eventClicked: eventClicked
      }">
    </ng-template>
  `
            }] }
];
NovoCalendarAllDayEventElement.propDecorators = {
    event: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    customTemplate: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    eventClicked: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }]
};
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: elements/calendar/pipe/Weekday.pipe.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class WeekdayPipe {
    /**
     * @param {?=} locale
     */
    constructor(locale = 'en-US') {
        this.locale = locale;
    }
    /**
     * @param {?} date
     * @param {?=} locale
     * @param {?=} method
     * @return {?}
     */
    transform(date, locale = this.locale, method = 'short') {
        return new Intl.DateTimeFormat(locale, { weekday: method }).format(date);
    }
}
WeekdayPipe.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Pipe"], args: [{ name: 'weekday' },] }
];
/** @nocollapse */
WeekdayPipe.ctorParameters = () => [
    { type: String, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["LOCALE_ID"],] }] }
];
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: elements/calendar/pipe/Month.pipe.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class MonthPipe {
    /**
     * @param {?=} locale
     */
    constructor(locale = 'en-US') {
        this.locale = locale;
    }
    /**
     * @param {?} date
     * @param {?=} locale
     * @param {?=} method
     * @return {?}
     */
    transform(date, locale = this.locale, method = 'long') {
        return new Intl.DateTimeFormat(locale, { month: method }).format(date);
    }
}
MonthPipe.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Pipe"], args: [{ name: 'month' },] }
];
/** @nocollapse */
MonthPipe.ctorParameters = () => [
    { type: String, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["LOCALE_ID"],] }] }
];
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: elements/calendar/pipe/MonthDay.pipe.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class MonthDayPipe {
    /**
     * @param {?=} locale
     */
    constructor(locale = 'en-US') {
        this.locale = locale;
    }
    /**
     * @param {?} date
     * @param {?=} locale
     * @param {?=} method
     * @return {?}
     */
    transform(date, locale = this.locale, method = 'short') {
        return new Intl.DateTimeFormat(locale, { month: method, day: 'numeric' }).format(date);
    }
}
MonthDayPipe.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Pipe"], args: [{ name: 'monthday' },] }
];
/** @nocollapse */
MonthDayPipe.ctorParameters = () => [
    { type: String, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["LOCALE_ID"],] }] }
];
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: elements/calendar/pipe/Year.pipe.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class YearPipe {
    /**
     * @param {?=} locale
     */
    constructor(locale = 'en-US') {
        this.locale = locale;
    }
    /**
     * @param {?} date
     * @param {?=} locale
     * @param {?=} method
     * @return {?}
     */
    transform(date, locale = this.locale, method = 'numeric') {
        return new Intl.DateTimeFormat(locale, { year: method }).format(date);
    }
}
YearPipe.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Pipe"], args: [{ name: 'year' },] }
];
/** @nocollapse */
YearPipe.ctorParameters = () => [
    { type: String, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["LOCALE_ID"],] }] }
];
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: elements/calendar/pipe/Hours.pipe.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class HoursPipe {
    /**
     * @param {?=} locale
     */
    constructor(locale = 'en-US') {
        this.locale = locale;
    }
    /**
     * @param {?} date
     * @param {?=} locale
     * @param {?=} method
     * @return {?}
     */
    transform(date, locale = this.locale, method = 'numeric') {
        return new Intl.DateTimeFormat(locale, { hour: method }).format(date);
    }
}
HoursPipe.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Pipe"], args: [{ name: 'hours' },] }
];
/** @nocollapse */
HoursPipe.ctorParameters = () => [
    { type: String, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["LOCALE_ID"],] }] }
];
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: elements/calendar/pipe/DayOfMonth.pipe.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DayOfMonthPipe {
    /**
     * @param {?=} locale
     */
    constructor(locale = 'en-US') {
        this.locale = locale;
    }
    /**
     * @param {?} date
     * @param {?=} locale
     * @param {?=} method
     * @return {?}
     */
    transform(date, locale = this.locale, method = 'numeric') {
        return new Intl.DateTimeFormat(locale, { day: method }).format(date);
    }
}
DayOfMonthPipe.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Pipe"], args: [{ name: 'dayofmonth' },] }
];
/** @nocollapse */
DayOfMonthPipe.ctorParameters = () => [
    { type: String, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["LOCALE_ID"],] }] }
];
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: elements/calendar/pipe/EndOfWeekDisplayPipe.pipe.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class EndOfWeekDisplayPipe {
    /**
     * @param {?=} locale
     */
    constructor(locale = 'en-US') {
        this.locale = locale;
    }
    /**
     * @param {?} endOfWeek
     * @param {?} startOfWeek
     * @param {?=} locale
     * @param {?=} method
     * @return {?}
     */
    transform(endOfWeek, startOfWeek, locale = this.locale, method = 'short') {
        if (endOfWeek.getMonth() === startOfWeek.getMonth()) {
            return new Intl.DateTimeFormat(locale, { day: 'numeric' }).format(endOfWeek);
        }
        return new Intl.DateTimeFormat(locale, { month: method, day: 'numeric' }).format(endOfWeek);
    }
}
EndOfWeekDisplayPipe.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Pipe"], args: [{ name: 'endofweekdisplay' },] }
];
/** @nocollapse */
EndOfWeekDisplayPipe.ctorParameters = () => [
    { type: String, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["LOCALE_ID"],] }] }
];
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: elements/calendar/Calendar.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NovoCalendarModule {
}
NovoCalendarModule.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                imports: [_angular_common__WEBPACK_IMPORTED_MODULE_6__["CommonModule"], NovoButtonModule, NovoTooltipModule, NovoPipesModule],
                declarations: [
                    NovoEventTypeLegendElement,
                    NovoCalendarMonthViewElement,
                    NovoCalendarMonthHeaderElement,
                    NovoCalendarMonthDayElement,
                    NovoCalendarWeekViewElement,
                    NovoCalendarWeekHeaderElement,
                    NovoCalendarWeekEventElement,
                    NovoCalendarDayViewElement,
                    NovoCalendarDayEventElement,
                    NovoCalendarHourSegmentElement,
                    NovoCalendarAllDayEventElement,
                    NovoCalendarDateChangeElement,
                    WeekdayPipe,
                    DayOfMonthPipe,
                    MonthPipe,
                    MonthDayPipe,
                    YearPipe,
                    HoursPipe,
                    EndOfWeekDisplayPipe,
                ],
                exports: [
                    NovoEventTypeLegendElement,
                    NovoCalendarMonthViewElement,
                    NovoCalendarMonthHeaderElement,
                    NovoCalendarMonthDayElement,
                    NovoCalendarWeekViewElement,
                    NovoCalendarWeekHeaderElement,
                    NovoCalendarWeekEventElement,
                    NovoCalendarDayViewElement,
                    NovoCalendarDayEventElement,
                    NovoCalendarHourSegmentElement,
                    NovoCalendarAllDayEventElement,
                    NovoCalendarDateChangeElement,
                    WeekdayPipe,
                    DayOfMonthPipe,
                    MonthPipe,
                    MonthDayPipe,
                    YearPipe,
                    HoursPipe,
                    EndOfWeekDisplayPipe,
                ],
            },] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: services/novo-label-service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @record
 */
function TimeFormatParts() { }
if (false) {}
/**
 * @record
 */
function BigDecimalFormatOptions() { }
if (false) {}
class NovoLabelService {
    /**
     * @param {?=} userLocale
     */
    constructor(userLocale = 'en-US') {
        this.userLocale = userLocale;
        this.filters = 'Filter';
        this.clear = 'Clear';
        this.sort = 'Sort';
        this.distributionListOwner = 'Owner';
        this.dateAdded = 'Date Added';
        this.emptyTableMessage = 'No Records to display...';
        this.noMatchingRecordsMessage = 'No Matching Records';
        this.erroredTableMessage = 'Oops! An error occurred.';
        this.pickerError = 'Oops! An error occurred.';
        this.pickerTextFieldEmpty = 'Begin typing to see results.';
        this.pickerEmpty = 'No results to display...';
        this.tabbedGroupPickerEmpty = 'No results found';
        this.quickNoteError = 'Oops! An error occurred.';
        this.quickNoteEmpty = 'No results to display...';
        this.required = 'Required';
        this.numberTooLarge = 'Number is too large';
        this.save = 'Save';
        this.cancel = 'Cancel';
        this.next = 'Next';
        this.itemsPerPage = 'Items per page:';
        this.select = 'Select...';
        this.selected = 'Selected';
        this.selectAllOnPage = 'Select all on page';
        this.deselectAll = 'Deselect all';
        this.refresh = 'Refresh';
        this.close = 'Close';
        this.move = 'Move';
        this.startDate = 'Start Date';
        this.endDate = 'End Date';
        this.rate = 'Rate';
        this.more = 'more';
        this.clearAll = 'CLEAR ALL';
        this.clearAllNormalCase = 'Clear All';
        this.clearSort = 'Clear Sort';
        this.clearFilter = 'Clear Filter';
        this.today = 'Today';
        this.now = 'Now';
        this.isRequired = 'is required';
        this.notValidYear = 'is not a valid year';
        this.isTooLarge = 'is too large';
        this.invalidAddress = 'requires at least one field filled out';
        this.invalidEmail = 'requires a valid email (ex. abc@123.com)';
        this.minLength = 'is required to be a minimum length of';
        this.past1Day = 'Past 1 Day';
        this.past7Days = 'Past 7 Days';
        this.past30Days = 'Past 30 Days';
        this.past90Days = 'Past 90 Days';
        this.past1Year = 'Past 1 Year';
        this.next1Day = 'Next 1 Day';
        this.next7Days = 'Next 7 Days';
        this.next30Days = 'Next 30 Days';
        this.next90Days = 'Next 90 Days';
        this.next1Year = 'Next 1 Year';
        this.customDateRange = 'Custom Date Range';
        this.backToPresetFilters = 'Back to Preset Filters';
        this.okGotIt = 'Ok, Got it';
        this.address = 'Address';
        this.address1 = 'Address';
        this.apt = 'Apt'; // TODO delete
        // TODO delete
        this.address2 = 'Apt';
        this.city = 'City / Locality';
        this.state = 'State / Region';
        this.zip = 'Postal Code';
        this.zipCode = 'Postal Code'; // TODO delete
        // TODO delete
        this.country = 'Country';
        this.or = 'or';
        this.clickToBrowse = 'click to browse';
        this.chooseAFile = 'Choose a file';
        this.no = 'No';
        this.yes = 'Yes';
        this.search = 'SEARCH';
        this.noItems = 'There are no items';
        this.dateFormat = 'MM/dd/yyyy';
        this.dateFormatPlaceholder = 'MM/DD/YYYY';
        this.timeFormatPlaceholderAM = 'hh:mm AM';
        this.timeFormatPlaceholder24Hour = 'HH:mm';
        this.timeFormatAM = 'AM';
        this.timeFormatPM = 'PM';
        this.confirmChangesModalMessage = 'Are you sure you want to change this field?';
        this.promptModalMessage = 'Do you want to perform the following changes?';
        this.asyncFailure = 'Async validation was not called within the 10s threshold, you might want to reload the page to try again';
        this.previous = 'Previous';
        this.actions = 'Actions';
        this.all = 'All';
        this.groupedMultiPickerEmpty = 'No items to display';
        this.groupedMultiPickerSelectCategory = 'Select a category from the right to get started';
        this.add = 'Add';
        this.encryptedFieldTooltip = 'This data has been stored at the highest level of security';
        this.noStatesForCountry = 'No states available for the selected country';
        this.selectCountryFirst = 'Please select a country before selecting a state';
        this.invalidIntegerInput = 'Special characters are not allowed for';
        this.maxRecordsReached = 'Sorry, you have reached the maximum number of records allowed for this field';
        this.selectFilterOptions = 'Please select one or more filter options below.';
    }
    /**
     * @param {?} field
     * @param {?} maxlength
     * @return {?}
     */
    maxlengthMetWithField(field, maxlength) {
        return `Sorry, you have reached the maximum character count of ${maxlength} for ${field}.`;
    }
    /**
     * @param {?} maxlength
     * @return {?}
     */
    maxlengthMet(maxlength) {
        return `Sorry, you have reached the maximum character count of ${maxlength} for this field.`;
    }
    /**
     * @param {?} field
     * @param {?} maxlength
     * @return {?}
     */
    invalidMaxlengthWithField(field, maxlength) {
        return `Sorry, you have exceeded the maximum character count of ${maxlength} for ${field}.`;
    }
    /**
     * @param {?} maxlength
     * @return {?}
     */
    invalidMaxlength(maxlength) {
        return `Sorry, you have exceeded the maximum character count of ${maxlength} for this field.`;
    }
    /**
     * @param {?} toMany
     * @return {?}
     */
    getToManyPlusMore(toMany) {
        return `+${toMany.quantity} more`;
    }
    /**
     * @param {?} selected
     * @return {?}
     */
    selectedRecords(selected) {
        return `${selected} records are selected.`;
    }
    /**
     * @param {?} shown
     * @param {?} total
     * @return {?}
     */
    showingXofXResults(shown, total) {
        return `Showing ${shown} of ${total} Results.`;
    }
    /**
     * @param {?} total
     * @param {?=} select
     * @return {?}
     */
    totalRecords(total, select = false) {
        return select ? `Select all ${total} records.` : `De-select remaining ${total} records.`;
    }
    /**
     * @return {?}
     */
    dateFormatString() {
        return this.dateFormat;
    }
    /**
     * @param {?} tabLabelPlural
     * @return {?}
     */
    tabbedGroupClearSuggestion(tabLabelPlural) {
        return `Clear your search to see all ${tabLabelPlural}.`;
    }
    /**
     * @param {?} value
     * @param {?} format
     * @return {?}
     */
    formatDateWithFormat(value, format) {
        /** @type {?} */
        const date = value instanceof Date ? value : new Date(value);
        if (date.getTime() !== date.getTime()) {
            return value;
        }
        return new Intl.DateTimeFormat(this.userLocale, format).format(date);
    }
    /**
     * @param {?} param
     * @return {?}
     */
    formatToTimeOnly(param) { }
    /**
     * @param {?} param
     * @return {?}
     */
    formatToDateOnly(param) { }
    /**
     * @param {?} value
     * @param {?} format
     * @return {?}
     */
    formatTimeWithFormat(value, format) {
        /** @type {?} */
        const date = value instanceof Date ? value : new Date(value);
        if (date.getTime() !== date.getTime()) {
            return value;
        }
        /** @type {?} */
        const timeParts = Intl.DateTimeFormat(this.userLocale, format)
            .formatToParts(date)
            .reduce((/**
         * @param {?} obj
         * @param {?} part
         * @return {?}
         */
        (obj, part) => {
            obj[part.type] = part.value;
            return obj;
        }), {});
        /** @type {?} */
        const dayperiod = timeParts.dayperiod ? timeParts.dayperiod : '';
        return `${timeParts.hour}:${timeParts.minute}${dayperiod}`;
    }
    /**
     * @return {?}
     */
    getWeekdays() {
        /**
         * @param {?} dayOfWeek
         * @return {?}
         */
        function getDay(dayOfWeek) {
            /** @type {?} */
            const dt = new Date();
            return dt.setDate(dt.getDate() - dt.getDay() + dayOfWeek);
        }
        return [getDay(0), getDay(1), getDay(2), getDay(3), getDay(4), getDay(5), getDay(6)].reduce((/**
         * @param {?} weekdays
         * @param {?} dt
         * @return {?}
         */
        (weekdays, dt) => {
            weekdays.push(new Intl.DateTimeFormat(this.userLocale, { weekday: 'long' }).format(dt));
            return weekdays;
        }), []);
    }
    /**
     * @return {?}
     */
    getMonths() {
        /**
         * @param {?} month
         * @return {?}
         */
        function getMonth(month) {
            /** @type {?} */
            const dt = new Date();
            return dt.setMonth(month, 1);
        }
        return [
            getMonth(0),
            getMonth(1),
            getMonth(2),
            getMonth(3),
            getMonth(4),
            getMonth(5),
            getMonth(6),
            getMonth(7),
            getMonth(8),
            getMonth(9),
            getMonth(10),
            getMonth(11),
        ].reduce((/**
         * @param {?} months
         * @param {?} dt
         * @return {?}
         */
        (months, dt) => {
            months.push(new Intl.DateTimeFormat(this.userLocale, { month: 'long' }).format(dt));
            return months;
        }), []);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    getProperty(value) {
        return this[value];
    }
    /**
     * @param {?} page
     * @param {?} pageSize
     * @param {?} length
     * @param {?} short
     * @return {?}
     */
    getRangeText(page, pageSize, length, short) {
        if (length === 0 || pageSize === 0) {
            return `Displaying 0 of ${length}`;
        }
        length = Math.max(length, 0);
        /** @type {?} */
        const startIndex = page * pageSize;
        // If the start index exceeds the list length, do not try and fix the end index to the end.
        /** @type {?} */
        const endIndex = startIndex < length ? Math.min(startIndex + pageSize, length) : startIndex + pageSize;
        return short ? `${startIndex + 1} - ${endIndex}/${length}` : `Displaying ${startIndex + 1} - ${endIndex} of ${length}`;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    formatCurrency(value) {
        /** @type {?} */
        const options = { style: 'currency', currency: 'USD' };
        return new Intl.NumberFormat(this.userLocale, options).format(value);
    }
    /**
     * Extends the Intl.numberFormat capability with two extra features:
     *  - Does NOT round values, but instead truncates to maximumFractionDigits
     *  - By default uses accounting format for negative numbers: (3.14) instead of -3.14.
     *
     * @param {?} value           The number value to convert to string
     * @param {?=} overrideOptions Allows for overriding options used and passed to Intl.NumberFormat()
     * @return {?}
     */
    formatBigDecimal(value, overrideOptions) {
        /** @type {?} */
        const defaultOptions = {
            style: 'decimal',
            minimumFractionDigits: 2,
            maximumFractionDigits: 2,
            useAccountingFormat: true,
        };
        /** @type {?} */
        const options = Object.assign(defaultOptions, overrideOptions);
        /** @type {?} */
        const truncatedValue = this.truncateToPrecision(value, options.maximumFractionDigits);
        /** @type {?} */
        let _value = new Intl.NumberFormat(this.userLocale, options).format(truncatedValue);
        if (value < 0) {
            _value = options.useAccountingFormat ? `(${_value.slice(1)})` : `-${_value.slice(1)}`;
        }
        return _value;
    }
    /**
     * Performs a string-based truncating of a number with no rounding
     * @param {?} value
     * @param {?} precision
     * @return {?}
     */
    truncateToPrecision(value, precision) {
        /** @type {?} */
        let valueAsString = value ? value.toString() : '0';
        /** @type {?} */
        const decimalIndex = valueAsString.indexOf('.');
        if (decimalIndex > -1 && decimalIndex + precision + 1 < valueAsString.length) {
            valueAsString = valueAsString.substring(0, valueAsString.indexOf('.') + precision + 1);
        }
        return Number(valueAsString);
    }
    /**
     * @param {?} value
     * @param {?=} options
     * @return {?}
     */
    formatNumber(value, options) {
        return new Intl.NumberFormat(this.userLocale, options).format(value);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    formatDateShort(value) {
        /** @type {?} */
        const options = {
            // DD/MM/YYYY, HH:MM A - 02/14/2017, 1:17 PM
            month: '2-digit',
            day: '2-digit',
            year: 'numeric',
            hour: 'numeric',
            minute: '2-digit',
        };
        /** @type {?} */
        const _value = value === null || value === undefined || value === '' ? new Date() : new Date(value);
        return new Intl.DateTimeFormat(this.userLocale, options).format(_value);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    formatTime(value) {
        /** @type {?} */
        const options = {
            // HH:MM A - 1:17 PM
            hour: 'numeric',
            minute: '2-digit',
        };
        /** @type {?} */
        const _value = value === null || value === undefined || value === '' ? new Date() : new Date(value);
        return new Intl.DateTimeFormat(this.userLocale, options).format(_value);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    formatDate(value) {
        /** @type {?} */
        const options = {
            // DD/MM/YYYY - 02/14/2017
            month: '2-digit',
            day: '2-digit',
            year: 'numeric',
        };
        /** @type {?} */
        const _value = value === null || value === undefined || value === '' ? new Date() : new Date(value);
        return new Intl.DateTimeFormat(this.userLocale, options).format(_value);
    }
}
NovoLabelService.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"] }
];
/** @nocollapse */
NovoLabelService.ctorParameters = () => [
    { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["LOCALE_ID"],] }] }
];
if (false) {}
/** @type {?} */
const NOVO_ELEMENTS_LABELS_PROVIDERS = [{ provide: NovoLabelService, useClass: NovoLabelService }];

/**
 * @fileoverview added by tsickle
 * Generated from: elements/card/Card.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class CardActionsElement {
}
CardActionsElement.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'novo-card-actions',
                template: '<ng-content></ng-content>'
            }] }
];
class CardElement {
    /**
     * @param {?} labels
     */
    constructor(labels) {
        this.padding = true;
        this.config = {};
        this.onClose = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.onRefresh = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.labels = labels;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.config = this.config || {};
    }
    /**
     * @param {?=} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        this.config = this.config || {};
        this.cardAutomationId = `${(this.title || this.config.title || 'no-title').toLowerCase().replace(/\s/g, '-')}-card`;
        /** @type {?} */
        const newIcon = this.icon || this.config.icon;
        /** @type {?} */
        const newMessageIcon = this.messageIcon || this.config.messageIcon;
        this.iconClass = newIcon ? `bhi-${newIcon}` : null;
        this.messageIconClass = newMessageIcon ? `bhi-${newMessageIcon}` : null;
    }
    /**
     * @return {?}
     */
    toggleClose() {
        if (!this.config.onClose) {
            this.onClose.next();
        }
        else {
            this.config.onClose();
        }
    }
    /**
     * @return {?}
     */
    toggleRefresh() {
        if (!this.config.onRefresh) {
            this.onRefresh.next();
        }
        else {
            this.config.onRefresh();
        }
    }
}
CardElement.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'novo-card',
                template: `
        <div class="novo-card" [attr.data-automation-id]="cardAutomationId" [ngClass]="{'no-padding': !padding}" [class.loading]="loading || config.loading">
            <!--Loading-->
            <div class="card-loading-container" *ngIf="loading || config.loading">
                <novo-loading theme="line" [attr.data-automation-id]="cardAutomationId + '-loading'"></novo-loading>
            </div>
            <!--Card Header-->
            <header>
                <div class="title">
                    <!--Grabber Icon-->
                    <span tooltip="{{ labels.move }}" tooltipPosition="bottom-right"><i *ngIf="move || config.move" class="bhi-move" [attr.data-automation-id]="cardAutomationId + '-move'"></i></span>
                    <!--Card Title-->
                    <h3 [attr.data-automation-id]="cardAutomationId + '-title'"><span [tooltip]="iconTooltip" tooltipPosition="right"><i *ngIf="icon" [ngClass]="iconClass"></i></span> {{title || config.title}}</h3>
                </div>
                <!--Card Actions-->
                <div class="actions" [attr.data-automation-id]="cardAutomationId + '-actions'">
                    <ng-content select="novo-card-actions"></ng-content>
                    <button theme="icon" icon="refresh"  (click)="toggleRefresh()" *ngIf="refresh || config.refresh" [attr.data-automation-id]="cardAutomationId + '-refresh'" tooltip="{{ labels.refresh }}" tooltipPosition="bottom-left"></button>
                    <button theme="icon" icon="close-o" (click)="toggleClose()" *ngIf="close || config.close" [attr.data-automation-id]="cardAutomationId + '-close'" tooltip="{{ labels.close }}" tooltipPosition="bottom-left"></button>
                </div>
            </header>
            <!--Card Main-->
            <main>
                <!--Content (transcluded)-->
                <ng-content *ngIf="!(loading || config.loading) && !(message || config.message)"></ng-content>
                <!--Error/Empty Message-->
                <p class="card-message" *ngIf="!(loading || config.loading) && (message || config.message)" [attr.data-automation-id]="cardAutomationId + '-message'"><i *ngIf="messageIconClass" [ngClass]="messageIconClass"></i> <span [innerHtml]="message || config.message"></span></p>
            </main>
            <!--Card Footer-->
            <ng-content *ngIf="!(loading || config.loading) && !(message || config.message)" select="footer"></ng-content>
        </div>
    `
            }] }
];
/** @nocollapse */
CardElement.ctorParameters = () => [
    { type: NovoLabelService }
];
CardElement.propDecorators = {
    padding: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    config: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    title: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    message: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    messageIcon: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    icon: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    iconTooltip: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    refresh: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    close: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    move: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    loading: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    onClose: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    onRefresh: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }]
};
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: elements/loading/Loading.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NovoLoadingElement {
}
NovoLoadingElement.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'novo-loading',
                host: {
                    '[class]': 'theme || ""',
                },
                template: `
        <span class="dot"></span>
        <span class="dot"></span>
        <span class="dot"></span>
        <span class="dot"></span>
        <span class="dot"></span>
    `
            }] }
];
NovoLoadingElement.propDecorators = {
    theme: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }]
};
if (false) {}
class NovoSpinnerElement {
}
NovoSpinnerElement.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'novo-spinner',
                template: `
        <svg class="bullhornSpinner" [ngClass]="theme" height="100" width="100" viewBox="0 0 100 100" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" [attr.inverse]="inverse">
            <title>Bullhorn Spinner Animation</title>
            <desc>Spinner animation indicating loading</desc>
            <defs>
                <style>
                    .bullhornSpinner g.circleGroup {
                        -webkit-filter: url("{{baseHref || ''}}#gooEffect");
                        filter: url("{{baseHref || ''}}#gooEffect");
                    }
                    _:-webkit-full-screen:not(:root:root), .bullhornSpinner g.circleGroup {
                        -webkit-filter: none;
                        filter: none;
                    }
                    @supports (-webkit-text-size-adjust:none) and (not (-ms-accelerator:true)) and (not (-moz-appearance:none)) {
                        .bullhornSpinner g.circleGroup {
                            -webkit-filter: none;
                            filter: none;
                        }
                    }
                    @supports (-webkit-text-size-adjust:none) and (not (-ms-accelerator:true)) and (not (-moz-appearance:none)) {
                        .bullhornSpinner g.circleGroup {
                            -webkit-filter: none;
                            filter: none;
                        }
                    }
                </style>
                <filter id="gooEffect">
                    <feGaussianBlur in="SourceGraphic" stdDeviation="5" result="blur" />
                    <feColorMatrix in="blur" mode="matrix" values="
                            1.3 0 0 0 0
                            0 1.3 0 0 0
                            0 0 1.3 0 0
                            0 0 0 19 -7" result="gooEffect" />
                    <feComposite in="SourceGraphic" in2="gooEffect" operator="atop" />
                </filter>
            </defs>
            <path d="M 43 43 L 54 45 L 80 40 L 43 43" stroke="none" fill="none" id="firstLinePath"/>
            <path d="M 43 43 L 48 41 L 48 18 L 43 43" stroke="none" fill="none" id="secondLinePath"/>
            <path d="M 43 43 L 42 45 L 15 40 L 43 43" stroke="none" fill="none" id="thirdLinePath"/>
            <path d="M 43 43 L 44 52 L 29 78 L 43 43" stroke="none" fill="none" id="fourthLinePath"/>
            <path d="M 43 43 L 52 52 L 68 78 L 43 43" stroke="none" fill="none" id="fifthLinePath"/>
            <g class="circleGroup" transform="translate(7, 7)">
                <circle r="6" cx="0" cy="0">
                    <!-- Define the motion path animation -->
                    <animateMotion dur="3.4" repeatCount="indefinite">
                        <mpath xlink:href="#firstLinePath"/>
                    </animateMotion>
                </circle>
                <circle r="6" cx="0" cy="0">
                    <!-- Define the motion path animation -->
                    <animateMotion dur="3.4" repeatCount="indefinite">
                        <mpath xlink:href="#secondLinePath"/>
                    </animateMotion>
                </circle>
                <circle r="6" cx="0" cy="0">
                    <!-- Define the motion path animation -->
                    <animateMotion dur="3.4" repeatCount="indefinite">
                        <mpath xlink:href="#thirdLinePath"/>
                    </animateMotion>
                </circle>
                <circle r="6" cx="0" cy="0">
                    <!-- Define the motion path animation -->
                    <animateMotion dur="3.4" repeatCount="indefinite">
                        <mpath xlink:href="#fourthLinePath"/>
                    </animateMotion>
                </circle>
                <circle r="6" cx="0" cy="0">
                    <!-- Define the motion path animation -->
                    <animateMotion dur="3.4" repeatCount="indefinite">
                        <mpath xlink:href="#fifthLinePath"/>
                    </animateMotion>
                </circle>
            </g>
        </svg>
    `
            }] }
];
NovoSpinnerElement.propDecorators = {
    theme: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    inverse: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    baseHref: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }]
};
if (false) {}
class NovoSkeletonDirective {
    constructor() {
        this.skeleton = true;
    }
}
NovoSkeletonDirective.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{
                selector: '[skeleton]',
            },] }
];
NovoSkeletonDirective.propDecorators = {
    skeleton: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostBinding"], args: ['class.skeleton',] }]
};
if (false) {}
class NovoLoadedDirective {
}
NovoLoadedDirective.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{
                selector: '[loaded]',
            },] }
];
class NovoIsLoadingDirective {
    /**
     * @param {?} viewContainer
     */
    constructor(viewContainer) {
        this.viewContainer = viewContainer;
        this.hasView = false;
        this.skeletonViews = [];
        this.loadedViews = [];
    }
    /**
     * @param {?} condition
     * @return {?}
     */
    set isLoading(condition) {
        if (!condition && !this.hasView) {
            this.destroyViews(this.loadedViews);
            this.skeletonViews = this.createViews(this.skeletonTemplates);
            this.hasView = true;
        }
        else if (condition && this.hasView) {
            this.destroyViews(this.skeletonViews);
            this.loadedViews = this.createViews(this.loadedTemplates);
            this.hasView = false;
        }
    }
    /**
     * @param {?} templates
     * @return {?}
     */
    createViews(templates) {
        return templates && templates.map((/**
         * @param {?} v
         * @return {?}
         */
        (v) => this.viewContainer.createEmbeddedView(v)));
    }
    /**
     * @param {?} views
     * @return {?}
     */
    destroyViews(views) {
        if (views) {
            for (const view of views) {
                view.destroy();
            }
        }
    }
}
NovoIsLoadingDirective.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{
                selector: '[isLoading]',
            },] }
];
/** @nocollapse */
NovoIsLoadingDirective.ctorParameters = () => [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewContainerRef"] }
];
NovoIsLoadingDirective.propDecorators = {
    skeletonTemplates: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ContentChildren"], args: [NovoSkeletonDirective, { read: _angular_core__WEBPACK_IMPORTED_MODULE_0__["TemplateRef"] },] }],
    loadedTemplates: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ContentChildren"], args: [NovoLoadedDirective, { read: _angular_core__WEBPACK_IMPORTED_MODULE_0__["TemplateRef"] },] }],
    isLoading: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }]
};
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: elements/loading/Loading.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NovoLoadingModule {
}
NovoLoadingModule.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                imports: [_angular_common__WEBPACK_IMPORTED_MODULE_6__["CommonModule"]],
                declarations: [NovoLoadingElement, NovoSpinnerElement, NovoIsLoadingDirective, NovoLoadedDirective, NovoSkeletonDirective],
                exports: [NovoLoadingElement, NovoSpinnerElement, NovoIsLoadingDirective, NovoLoadedDirective, NovoSkeletonDirective],
            },] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: elements/card/Card.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NovoCardModule {
}
NovoCardModule.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                imports: [_angular_common__WEBPACK_IMPORTED_MODULE_6__["CommonModule"], NovoButtonModule, NovoLoadingModule, NovoTooltipModule],
                declarations: [CardElement, CardActionsElement],
                exports: [CardElement, CardActionsElement],
            },] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: utils/outside-click/OutsideClick.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Outside click helper, makes to set the element as inactive when clicking outside of it
 */
class OutsideClick {
    /**
     * @param {?} element
     */
    constructor(element) {
        this.active = false;
        this.onActiveChange = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        // Component element
        this.element = element;
        // Outside click handler
        // Property because `this.func.bind(this)` returns a new function each time
        this.onOutsideClick = this.handleOutsideClick.bind(this);
    }
    /**
     * When the element is destroyed, make sure to remove the handler
     * @return {?}
     */
    ngOnDestroy() {
        window.removeEventListener('click', this.onOutsideClick);
    }
    /**
     * Toggles the element as active and adds/removes the outside click handler
     * @param {?=} event
     * @param {?=} forceValue
     * @return {?}
     */
    toggleActive(event, forceValue) {
        // Reverse the active property (if forceValue, use that)
        this.active = !Helpers.isBlank(forceValue) ? forceValue : !this.active;
        // Bind window click events to hide on outside click
        if (this.active) {
            window.addEventListener('click', this.onOutsideClick);
        }
        else {
            window.removeEventListener('click', this.onOutsideClick);
        }
        // Fire the active change event
        this.onActiveChange.emit(this.active);
    }
    /**
     * When clicking outside, checks the element and closes if outside
     * @param {?} event
     * @return {?}
     */
    handleOutsideClick(event) {
        // If the elements doesn't contain the target element, it is an outside click
        /** @type {?} */
        let outsideClick = !this.element.nativeElement.contains(event.target);
        if (this.otherElement && outsideClick) {
            outsideClick = !this.otherElement.nativeElement.contains(event.target);
        }
        if (outsideClick) {
            this.toggleActive(event, false);
        }
    }
}
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: utils/key-codes/KeyCodes.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// Helper to keep track of key codes
/** @type {?} */
const KeyCodes = {
    BACKSPACE: 8,
    TAB: 9,
    NUM_CENTER: 12,
    ENTER: 13,
    RETURN: 13,
    SHIFT: 16,
    CTRL: 17,
    ALT: 18,
    PAUSE: 19,
    CAPS_LOCK: 20,
    ESC: 27,
    SPACE: 32,
    PAGE_UP: 33,
    PAGE_DOWN: 34,
    HASH_SYMBOL: 35,
    HOME: 36,
    LEFT: 37,
    UP: 38,
    RIGHT: 39,
    DOWN: 40,
    PRINT_SCREEN: 44,
    INSERT: 45,
    DELETE: 46,
    ZERO: 48,
    ONE: 49,
    TWO: 50,
    THREE: 51,
    FOUR: 52,
    FIVE: 53,
    SIX: 54,
    SEVEN: 55,
    EIGHT: 56,
    NINE: 57,
    AT_SYMBOL: 64,
    A: 65,
    B: 66,
    C: 67,
    D: 68,
    E: 69,
    F: 70,
    G: 71,
    H: 72,
    I: 73,
    J: 74,
    K: 75,
    L: 76,
    M: 77,
    N: 78,
    O: 79,
    P: 80,
    Q: 81,
    R: 82,
    S: 83,
    T: 84,
    U: 85,
    V: 86,
    W: 87,
    X: 88,
    Y: 89,
    Z: 90,
    CONTEXT_MENU: 93,
    NUM_ZERO: 96,
    NUM_ONE: 97,
    NUM_TWO: 98,
    NUM_THREE: 99,
    NUM_FOUR: 100,
    NUM_FIVE: 101,
    NUM_SIX: 102,
    NUM_SEVEN: 103,
    NUM_EIGHT: 104,
    NUM_NINE: 105,
    NUM_MULTIPLY: 106,
    NUM_PLUS: 107,
    NUM_MINUS: 109,
    NUM_PERIOD: 110,
    NUM_DIVISION: 111,
    F1: 112,
    F2: 113,
    F3: 114,
    F4: 115,
    F5: 116,
    F6: 117,
    F7: 118,
    F8: 119,
    F9: 120,
    F10: 121,
    F11: 122,
    F12: 123,
    DASH: 189,
    PERIOD: 190,
    FORWARD_SLASH: 191,
};

/**
 * @fileoverview added by tsickle
 * Generated from: elements/category-dropdown/CategoryDropdown.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NovoCategoryDropdownElement extends OutsideClick {
    /**
     * @param {?} element
     * @param {?} labels
     */
    constructor(element, labels) {
        super(element);
        this.labels = labels;
        this._query = '';
        this._categoryMap = {};
        this._categories = [];
        // Boolean to keep the selection persist when closing the dropdown
        this.persistSelection = false;
        // Boolean to close the dropdown on selection
        this.closeOnSelect = false;
        // Event that is emitted whenever an item is selected
        this._select = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        // Event that is emitted whenever a category is selected
        this.categorySelected = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.clickHandler = this.toggleActive.bind(this);
    }
    /**
     * @param {?} categories
     * @return {?}
     */
    set categories(categories) {
        this._masterCategoryMap = Object.assign({}, categories);
        this._categoryMap = Object.assign({}, categories);
        this._categories = Object.keys(categories);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        /** @type {?} */
        const button = this.element.nativeElement.querySelector('button');
        button.addEventListener('click', this.clickHandler);
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        /** @type {?} */
        const button = this.element.nativeElement.querySelector('button');
        if (button) {
            button.removeEventListener('click', this.clickHandler);
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onKeyDown(event) {
        if (this.active && (event.keyCode === KeyCodes.ESC || event.keyCode === KeyCodes.ENTER)) {
            this.toggleActive();
        }
    }
    /**
     * @return {?}
     */
    clearSelection() {
        this._categories.forEach((/**
         * @param {?} category
         * @return {?}
         */
        (category) => {
            this._categoryMap[category].forEach((/**
             * @param {?} item
             * @return {?}
             */
            (item) => {
                item.selected = false;
            }));
        }));
    }
    /**
     * @param {?} event
     * @param {?} item
     * @return {?}
     */
    select(event, item) {
        Helpers.swallowEvent(event);
        // If we persist the selection, clear and show a check
        if (this.persistSelection) {
            this.clearSelection();
            item.selected = true;
        }
        // Emit the item
        this._select.emit(item);
        // Close, if input is set
        if (this.closeOnSelect) {
            this.toggleActive();
        }
    }
    /**
     * @param {?} category
     * @return {?}
     */
    onCategorySelected(category) {
        this.categorySelected.emit(category);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    clearQuery(event) {
        Helpers.swallowEvent(event);
        this._query = '';
        // Reset the categories
        this._categories.forEach((/**
         * @param {?} category
         * @return {?}
         */
        (category) => {
            this._categoryMap[category] = this._masterCategoryMap[category];
        }));
    }
    /**
     * @param {?} query
     * @return {?}
     */
    queryCategories(query) {
        // Save the query
        this._query = query;
        // Check timeout
        if (this._queryTimeout) {
            clearTimeout(this._queryTimeout);
        }
        // Store a timeout, to debounce user input
        this._queryTimeout = setTimeout((/**
         * @return {?}
         */
        () => {
            this._categories.forEach((/**
             * @param {?} category
             * @return {?}
             */
            (category) => {
                if (this.search.compare) {
                    this._categoryMap[category] = this._masterCategoryMap[category].filter((/**
                     * @param {?} item
                     * @return {?}
                     */
                    (item) => this.search.compare(query, item)));
                }
                else {
                    this._categoryMap[category] = this._masterCategoryMap[category].filter((/**
                     * @param {?} item
                     * @return {?}
                     */
                    (item) => ~item.label.toLowerCase().indexOf(query.toLowerCase())));
                }
            }));
        }), this.search.debounce || 300);
    }
    /**
     * @param {?} event
     * @param {?} link
     * @return {?}
     */
    executeClickCallback(event, link) {
        link.callback(event);
        // Close, if input is set
        if (this.closeOnSelect) {
            this.toggleActive();
        }
    }
}
NovoCategoryDropdownElement.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'novo-category-dropdown',
                template: `
        <ng-content select="button"></ng-content>
        <div class="dropdown-container" *ngIf="active">
            <div class="novo-category-dropdown-search" *ngIf="search" data-automation-id="novo-category-dropdown-search">
                <input type="text" [placeholder]="search.placeholder || labels.search" [value]="_query" (input)="queryCategories($event.target.value)"/>
                <i class="bhi-search" *ngIf="!_query"></i>
                <i class="bhi-times" *ngIf="_query" (click)="clearQuery($event)"></i>
            </div>
            <novo-nav theme="white" [outlet]="novoCategoryDropdownOutlet" direction="vertical">
                <novo-tab *ngFor="let category of _categories" [attr.data-automation-id]="category" (activeChange)="onCategorySelected(category)">
                    <span>{{ category }} ({{ _categoryMap[category].length }})</span>
                </novo-tab>
            </novo-nav>
            <novo-nav-outlet #novoCategoryDropdownOutlet>
                <novo-nav-content *ngFor="let category of _categories">
                    <novo-list direction="vertical">
                        <novo-list-item *ngFor="let item of _categoryMap[category]" (click)="select($event, item)" [attr.data-automation-id]="item.label">
                            <item-content>{{ item.label }}</item-content>
                            <item-end class="novo-category-dropdown-hover" *ngIf="item.hoverText && !item.selected">{{ item.hoverText }}</item-end>
                            <item-end class="novo-category-dropdown-hover" *ngIf="item.hoverIcon && !item.selected"><i class="bhi-{{ item.hoverIcon }}"></i></item-end>
                            <item-end *ngIf="item.selected"><i class="bhi-check"></i></item-end>
                        </novo-list-item>
                        <novo-list-item *ngIf="_categoryMap[category].length === 0 && search" class="novo-category-dropdown-empty-item">
                            <item-content>{{ search.emptyMessage || labels.noItems }}</item-content>
                        </novo-list-item>
                    </novo-list>
                </novo-nav-content>
            </novo-nav-outlet>
            <footer *ngIf="footer" class="novo-category-dropdown-footer-align-{{ footer.align || 'right' }}">
                <a *ngFor="let link of footer.links" (click)="executeClickCallback($event, link)">{{ link.label }}</a>
            </footer>
        </div>
    `,
                host: {
                    '(keydown)': 'onKeyDown($event)',
                    '[class.active]': 'active',
                }
            }] }
];
/** @nocollapse */
NovoCategoryDropdownElement.ctorParameters = () => [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"] },
    { type: NovoLabelService }
];
NovoCategoryDropdownElement.propDecorators = {
    persistSelection: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    closeOnSelect: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    search: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    footer: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    _select: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"], args: ['itemSelected',] }],
    categorySelected: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    categories: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }]
};
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: elements/tabs/Tabs.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NovoNavElement {
    constructor() {
        this.theme = '';
        this.direction = '';
        this.condensed = false;
        this.items = [];
    }
    /**
     * @param {?} item
     * @return {?}
     */
    select(item) {
        /**
         * Deactivate all other tabs
         * @param {?} items
         * @return {?}
         */
        function _deactivateAllItems(items) {
            items.forEach((/**
             * @param {?} t
             * @return {?}
             */
            (t) => {
                if (t.active === true) {
                    // t.deselected.next();
                }
                t.active = false;
            }));
        }
        _deactivateAllItems(this.items);
        item.active = true;
        if (this.outlet) {
            this.outlet.show(this.items.indexOf(item));
        }
        // TODO - remove hack to make DOM rerender - jgodi
        /** @type {?} */
        const element = (/** @type {?} */ (document.querySelector('novo-tab-link.active span.indicator')));
        if (element) {
            element.style.opacity = 0.99;
            setTimeout((/**
             * @return {?}
             */
            () => {
                element.style.opacity = 1;
            }), 10);
        }
    }
    /**
     * @param {?} item
     * @return {?}
     */
    add(item) {
        if (this.items.length === 0) {
            item.active = true;
            // item.selected.next();
        }
        this.items.push(item);
    }
}
NovoNavElement.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'novo-nav',
                template: '<ng-content></ng-content>'
            }] }
];
NovoNavElement.propDecorators = {
    theme: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    direction: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    outlet: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    router: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    condensed: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostBinding"], args: ['class.condensed',] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }]
};
if (false) {}
class NovoTabElement {
    /**
     * @param {?} nav
     */
    constructor(nav) {
        this.active = false;
        this.disabled = false;
        this.activeChange = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.nav = nav;
        this.nav.add(this);
    }
    /**
     * @return {?}
     */
    select() {
        if (!this.disabled) {
            this.activeChange.emit(true);
            this.nav.select(this);
        }
    }
}
NovoTabElement.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'novo-tab',
                host: {
                    '(click)': 'select()',
                    '[class.active]': 'active',
                    '[class.disabled]': 'disabled',
                },
                template: `
        <div class="novo-tab-link">
            <ng-content></ng-content>
        </div>
        <span class="indicator"></span>
   `
            }] }
];
/** @nocollapse */
NovoTabElement.ctorParameters = () => [
    { type: NovoNavElement }
];
NovoTabElement.propDecorators = {
    active: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    disabled: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    activeChange: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }]
};
if (false) {}
class NovoTabButtonElement {
    /**
     * @param {?} nav
     */
    constructor(nav) {
        this.active = false;
        this.disabled = false;
        this.nav = nav;
        this.nav.add(this);
    }
    /**
     * @return {?}
     */
    select() {
        if (!this.disabled) {
            this.nav.select(this);
        }
    }
}
NovoTabButtonElement.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'novo-tab-button',
                host: {
                    '(click)': 'select()',
                    '[class.active]': 'active',
                    '[class.disabled]': 'disabled',
                },
                template: '<ng-content></ng-content>'
            }] }
];
/** @nocollapse */
NovoTabButtonElement.ctorParameters = () => [
    { type: NovoNavElement }
];
NovoTabButtonElement.propDecorators = {
    active: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    disabled: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }]
};
if (false) {}
class NovoTabLinkElement {
    /**
     * @param {?} nav
     */
    constructor(nav) {
        this.active = false;
        this.disabled = false;
        this.nav = nav;
        this.nav.add(this);
    }
    /**
     * @return {?}
     */
    select() {
        if (!this.disabled) {
            this.nav.select(this);
        }
    }
}
NovoTabLinkElement.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'novo-tab-link',
                host: {
                    '(click)': 'select()',
                    '[class.active]': 'active',
                    '[class.disabled]': 'disabled',
                },
                template: `
        <div class="novo-tab-link">
            <ng-content></ng-content>
        </div>
        <span class="indicator"></span>
    `
            }] }
];
/** @nocollapse */
NovoTabLinkElement.ctorParameters = () => [
    { type: NovoNavElement }
];
NovoTabLinkElement.propDecorators = {
    active: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    disabled: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }]
};
if (false) {}
class NovoNavOutletElement {
    constructor() {
        this.items = [];
    }
    /**
     * @param {?} index
     * @return {?}
     */
    show(index) {
        /** @type {?} */
        const item = this.items[index];
        /**
         * Deactivates other tab items
         * @param {?} items - deactivated items
         * @return {?}
         */
        function _deactivateAllItems(items) {
            items.forEach((/**
             * @param {?} t
             * @return {?}
             */
            (t) => {
                if (t.active === true) {
                    // t.deselected.next();
                }
                t.active = false;
            }));
        }
        _deactivateAllItems(this.items);
        item.active = true;
    }
    /**
     * @param {?} item
     * @return {?}
     */
    add(item) {
        if (this.items.length === 0) {
            item.active = true;
        }
        this.items.push(item);
    }
}
NovoNavOutletElement.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'novo-nav-outlet',
                template: '<ng-content></ng-content>'
            }] }
];
if (false) {}
class NovoNavContentElement {
    /**
     * @param {?} outlet
     */
    constructor(outlet) {
        this.active = false;
        outlet.add(this);
    }
}
NovoNavContentElement.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'novo-nav-content',
                host: {
                    '[class.active]': 'active',
                },
                template: '<ng-content></ng-content>'
            }] }
];
/** @nocollapse */
NovoNavContentElement.ctorParameters = () => [
    { type: NovoNavOutletElement }
];
NovoNavContentElement.propDecorators = {
    active: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }]
};
if (false) {}
class NovoNavHeaderElement {
    /**
     * @param {?} outlet
     */
    constructor(outlet) {
        this.active = false;
        this.active = this.active || false;
        this.outlet = outlet;
    }
    /**
     * @param {?=} event
     * @return {?}
     */
    show(event) {
        try {
            /** @type {?} */
            const INDEX = this.outlet.items.indexOf(this.forElement);
            if (INDEX > -1) {
                this.outlet.show(INDEX);
            }
        }
        catch (err) {
            // do nothing
        }
    }
}
NovoNavHeaderElement.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'novo-nav-header',
                host: {
                    '[class.active]': 'active',
                    '(click)': 'show($event)',
                },
                template: '<ng-content></ng-content>'
            }] }
];
/** @nocollapse */
NovoNavHeaderElement.ctorParameters = () => [
    { type: NovoNavOutletElement }
];
NovoNavHeaderElement.propDecorators = {
    active: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    forElement: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"], args: ['for',] }]
};
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: elements/tabs/Tabs.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NovoTabModule {
}
NovoTabModule.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                imports: [_angular_common__WEBPACK_IMPORTED_MODULE_6__["CommonModule"]],
                declarations: [
                    NovoNavElement,
                    NovoTabElement,
                    NovoTabButtonElement,
                    NovoTabLinkElement,
                    NovoNavOutletElement,
                    NovoNavContentElement,
                    NovoNavHeaderElement,
                ],
                exports: [
                    NovoNavElement,
                    NovoTabElement,
                    NovoTabButtonElement,
                    NovoTabLinkElement,
                    NovoNavOutletElement,
                    NovoNavContentElement,
                    NovoNavHeaderElement,
                ],
            },] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: elements/list/List.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NovoListElement {
    /**
     * @param {?} element
     */
    constructor(element) {
        this.element = element;
    }
}
NovoListElement.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'novo-list',
                host: {
                    '[class.vertical-list]': 'direction === "vertical"',
                    '[class.horizontal-list]': 'direction === "horizontal"',
                    '[attr.theme]': 'theme',
                },
                template: `
        <ng-content></ng-content>
    `
            }] }
];
/** @nocollapse */
NovoListElement.ctorParameters = () => [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"] }
];
NovoListElement.propDecorators = {
    theme: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    direction: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }]
};
if (false) {}
class NovoListItemElement {
    /**
     * @param {?} element
     */
    constructor(element) {
        this.element = element;
        this.avatar = false;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.avatar = !!this.element.nativeElement.querySelector('item-avatar');
    }
}
NovoListItemElement.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'novo-list-item',
                template: `
        <div class="list-item" [ngClass]="{'avatar': avatar}">
            <ng-content select="item-header"></ng-content>
            <ng-content select="item-content"></ng-content>
        </div>
        <ng-content></ng-content>
        <ng-content select="item-end"></ng-content>
    `
            }] }
];
/** @nocollapse */
NovoListItemElement.ctorParameters = () => [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"] }
];
if (false) {}
class NovoItemAvatarElement {
    /**
     * @param {?=} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        this.iconClass = this.icon ? `bhi-${this.icon}` : null;
        this.classMap = [this.iconClass, this.icon];
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.ngOnChanges();
    }
}
NovoItemAvatarElement.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'item-avatar',
                template: `
        <i *ngIf="iconClass" [ngClass]="classMap" theme="contained"></i>
    `
            }] }
];
NovoItemAvatarElement.propDecorators = {
    icon: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }]
};
if (false) {}
class NovoItemTitleElement {
}
NovoItemTitleElement.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'item-title',
                template: `
        <h6><ng-content></ng-content></h6>
    `
            }] }
];
class NovoItemHeaderElement {
}
NovoItemHeaderElement.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'item-header',
                template: `
        <ng-content select="item-avatar"></ng-content>
        <ng-content select="item-title"></ng-content>
        <ng-content select="item-header-end"></ng-content>
    `
            }] }
];
class NovoItemDateElement {
}
NovoItemDateElement.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'item-header-end',
                template: `
        <ng-content></ng-content>
    `
            }] }
];
class NovoItemContentElement {
}
NovoItemContentElement.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'item-content',
                host: {
                    '[class.vertical-list]': 'direction === "vertical"',
                    '[class.horizontal-list]': 'direction === "horizontal"',
                },
                template: `
        <ng-content></ng-content>
    `
            }] }
];
NovoItemContentElement.propDecorators = {
    direction: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }]
};
if (false) {}
class NovoItemEndElement {
}
NovoItemEndElement.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'item-end',
                template: `
        <ng-content></ng-content>
    `
            }] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: elements/list/List.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NovoListModule {
}
NovoListModule.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                imports: [_angular_common__WEBPACK_IMPORTED_MODULE_6__["CommonModule"]],
                declarations: [
                    NovoListElement,
                    NovoListItemElement,
                    NovoItemAvatarElement,
                    NovoItemTitleElement,
                    NovoItemContentElement,
                    NovoItemEndElement,
                    NovoItemHeaderElement,
                    NovoItemDateElement,
                ],
                exports: [
                    NovoListElement,
                    NovoListItemElement,
                    NovoItemAvatarElement,
                    NovoItemTitleElement,
                    NovoItemHeaderElement,
                    NovoItemContentElement,
                    NovoItemEndElement,
                    NovoItemDateElement,
                ],
            },] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: elements/category-dropdown/CategoryDropdown.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NovoCategoryDropdownModule {
}
NovoCategoryDropdownModule.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                imports: [_angular_common__WEBPACK_IMPORTED_MODULE_6__["CommonModule"], NovoTabModule, NovoListModule],
                declarations: [NovoCategoryDropdownElement],
                exports: [NovoCategoryDropdownElement],
            },] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: utils/component-utils/ComponentUtils.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ComponentUtils {
    /**
     * @param {?} componentFactoryResolver
     */
    constructor(componentFactoryResolver) {
        this.componentFactoryResolver = componentFactoryResolver;
    }
    /**
     * @template T
     * @param {?} ComponentClass
     * @param {?} location
     * @param {?=} providers
     * @param {?=} onTop
     * @return {?}
     */
    append(ComponentClass, location, providers, onTop) {
        /** @type {?} */
        const componentFactory = this.componentFactoryResolver.resolveComponentFactory(ComponentClass);
        /** @type {?} */
        const parent = location.injector;
        /** @type {?} */
        const index = onTop ? 0 : location.length;
        return location.createComponent(componentFactory, index, _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injector"].create({ providers, parent }));
    }
}
ComponentUtils.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"] }
];
/** @nocollapse */
ComponentUtils.ctorParameters = () => [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ComponentFactoryResolver"] }
];
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: elements/chips/Chips.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// Value accessor for the component (supports ngModel)
/** @type {?} */
const CHIPS_VALUE_ACCESSOR = {
    provide: _angular_forms__WEBPACK_IMPORTED_MODULE_1__["NG_VALUE_ACCESSOR"],
    useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["forwardRef"])((/**
     * @return {?}
     */
    () => NovoChipsElement)),
    multi: true,
};
class NovoChipElement {
    constructor() {
        this.disabled = false;
        this.select = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.remove = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.deselect = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
    }
    /**
     * @param {?} type
     * @return {?}
     */
    set type(type) {
        this._type = type ? type.toLowerCase() : null;
    }
    /**
     * @param {?} e
     * @return {?}
     */
    onRemove(e) {
        if (e) {
            e.stopPropagation();
            e.preventDefault();
        }
        this.remove.emit(e);
        return false;
    }
    /**
     * @param {?} e
     * @return {?}
     */
    onSelect(e) {
        if (e) {
            e.stopPropagation();
            e.preventDefault();
        }
        this.select.emit(e);
        return false;
    }
    /**
     * @param {?} e
     * @return {?}
     */
    onDeselect(e) {
        if (e) {
            e.stopPropagation();
            e.preventDefault();
        }
        this.deselect.emit(e);
        return false;
    }
}
NovoChipElement.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'chip,novo-chip',
                template: `
        <span (click)="onSelect($event)" (mouseenter)="onSelect($event)" (mouseleave)="onDeselect($event)" [ngClass]="_type">
            <i *ngIf="_type" class="bhi-circle"></i>
            <span><ng-content></ng-content></span>
        </span>
        <i class="bhi-close" *ngIf="!disabled" (click)="onRemove($event)"></i>
    `
            }] }
];
NovoChipElement.propDecorators = {
    type: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    disabled: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    select: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    remove: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    deselect: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }]
};
if (false) {}
class NovoChipsElement {
    /**
     * @param {?} element
     * @param {?} componentUtils
     * @param {?} labels
     */
    constructor(element, componentUtils, labels) {
        this.element = element;
        this.componentUtils = componentUtils;
        this.labels = labels;
        this.closeOnSelect = false;
        this.placeholder = '';
        this._disablePickerInput = false;
        this.changed = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.focus = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.blur = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.typing = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.items = [];
        this.selected = null;
        this.config = {};
        // private data model
        this._value = '';
        this._items = new rxjs__WEBPACK_IMPORTED_MODULE_11__["ReplaySubject"](1);
        // Placeholders for the callbacks
        this.onModelChange = (/**
         * @return {?}
         */
        () => { });
        this.onModelTouched = (/**
         * @return {?}
         */
        () => { });
    }
    /**
     * @param {?} v
     * @return {?}
     */
    set disablePickerInput(v) {
        this._disablePickerInput = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_12__["coerceBooleanProperty"])(v);
    }
    /**
     * @return {?}
     */
    get disablePickerInput() {
        return this._disablePickerInput;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.setItems();
    }
    /**
     * @return {?}
     */
    get value() {
        return this._value;
    }
    /**
     * @param {?} selected
     * @return {?}
     */
    set value(selected) {
        this.itemToAdd = '';
        if (selected !== this._value) {
            this._value = selected;
            this.changed.emit({ value: selected, rawValue: this.items });
            this.onModelChange(selected);
        }
    }
    /**
     * @return {?}
     */
    clearValue() {
        this.items = [];
        this._items.next(this.items);
        this.value = null;
        this.changed.emit({ value: this.value, rawValue: this.items });
        this.onModelChange(this.value);
    }
    /**
     * @return {?}
     */
    setItems() {
        this.items = [];
        if (this.model && Array.isArray(this.model)) {
            /** @type {?} */
            const noLabels = [];
            for (const value of this.model) {
                /** @type {?} */
                let label;
                if (this.source && this.source.format && Helpers.validateInterpolationProps(this.source.format, value)) {
                    label = Helpers.interpolate(this.source.format, value);
                }
                if (this.source && label && label !== this.source.format) {
                    this.items.push({
                        value,
                        label,
                    });
                }
                else if (this.source.getLabels && typeof this.source.getLabels === 'function') {
                    noLabels.push(value);
                }
                else if (this.source.options && Array.isArray(this.source.options)) {
                    this.items.push(this.getLabelFromOptions(value));
                }
                else if (this.source.categoryMap && this.source.categoryMap.size) {
                    this.items.push(value);
                }
                else {
                    this.items.push({
                        value,
                        label: value,
                    });
                }
            }
            if (noLabels.length > 0 && this.source && this.source.getLabels && typeof this.source.getLabels === 'function') {
                this.source.getLabels(noLabels).then((/**
                 * @param {?} result
                 * @return {?}
                 */
                (result) => {
                    for (const value of result) {
                        if (value.hasOwnProperty('label')) {
                            this.items.push({
                                value,
                                label: value.label,
                            });
                        }
                        else if (this.source.options && Array.isArray(this.source.options)) {
                            this.items.push(this.getLabelFromOptions(value));
                        }
                        else {
                            this.items.push(value);
                        }
                    }
                    this._items.next(this.items);
                }));
            }
        }
        this.changed.emit({ value: this.model, rawValue: this.items });
        this._items.next(this.items);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    getLabelFromOptions(value) {
        /** @type {?} */
        let id = value;
        /** @type {?} */
        let optLabel = this.source.options.find((/**
         * @param {?} val
         * @return {?}
         */
        (val) => val.value === value));
        if (!optLabel && value.hasOwnProperty('id')) {
            optLabel = this.source.options.find((/**
             * @param {?} val
             * @return {?}
             */
            (val) => val.value === value.id));
            id = value.id;
        }
        return {
            value: id,
            label: optLabel ? optLabel.label : value,
        };
    }
    /**
     * @param {?=} event
     * @return {?}
     */
    deselectAll(event) {
        this.selected = null;
        this.hidePreview();
    }
    /**
     * @param {?=} event
     * @param {?=} item
     * @return {?}
     */
    select(event, item) {
        this.blur.emit(event);
        this.deselectAll();
        this.selected = item;
        this.showPreview();
    }
    /**
     * @param {?=} event
     * @param {?=} item
     * @return {?}
     */
    deselect(event, item) {
        this.blur.emit(event);
        this.deselectAll();
    }
    /**
     * @param {?=} event
     * @return {?}
     */
    onTyping(event) {
        this.typing.emit(event);
    }
    /**
     * @param {?=} event
     * @return {?}
     */
    onFocus(event) {
        this.deselectAll();
        this.element.nativeElement.classList.add('selected');
        this.focus.emit(event);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    add(event) {
        if (event && !(event instanceof Event)) {
            this.items.push(event);
            this.value = this.source && this.source.valueFormatter ? this.source.valueFormatter(this.items) : this.items.map((/**
             * @param {?} i
             * @return {?}
             */
            (i) => i.value));
            // Set focus on the picker
            /** @type {?} */
            const input = this.element.nativeElement.querySelector('novo-picker > input');
            if (input) {
                input.focus();
            }
        }
        this._items.next(this.items);
    }
    /**
     * @param {?} event
     * @param {?} item
     * @return {?}
     */
    remove(event, item) {
        if (event) {
            event.stopPropagation();
            event.preventDefault();
        }
        this.items.splice(this.items.indexOf(item), 1);
        this.deselectAll();
        this.value = this.source && this.source.valueFormatter ? this.source.valueFormatter(this.items) : this.items.map((/**
         * @param {?} i
         * @return {?}
         */
        (i) => i.value));
        this.changed.emit({ value: this.value.length ? this.value : '', rawValue: this.items });
        this.onModelChange(this.value.length ? this.value : '');
        this._items.next(this.items);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onKeyDown(event) {
        if (event.keyCode === KeyCodes.BACKSPACE) {
            if (event.target && event.target.value.length === 0 && this.items.length) {
                if (event) {
                    event.stopPropagation();
                    event.preventDefault();
                }
                if (this.selected) {
                    this.remove(event, this.selected);
                }
                else {
                    this.select(event, this.items[this.items.length - 1]);
                }
            }
        }
    }
    // Set touched on blur
    /**
     * @param {?} e
     * @return {?}
     */
    onTouched(e) {
        this.element.nativeElement.classList.remove('selected');
        this.onModelTouched();
        this.blur.emit(e);
    }
    /**
     * @param {?} model
     * @return {?}
     */
    writeValue(model) {
        this.model = model;
        this.setItems();
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.onModelChange = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.onModelTouched = fn;
    }
    /**
     * @param {?} disabled
     * @return {?}
     */
    setDisabledState(disabled) {
        this._disablePickerInput = disabled;
    }
    /**
     * \@description This method creates an instance of the preview (called popup) and adds all the bindings to that
     * instance. Will reuse the popup or create a new one if it does not already exist. Will only work if there is
     * a previewTemplate given in the config.
     * @return {?}
     */
    showPreview() {
        if (this.source.previewTemplate) {
            if (!this.popup) {
                this.popup = this.componentUtils.append(this.source.previewTemplate, this.preview);
            }
            this.popup.instance.match = this.selected;
        }
    }
    /**
     * \@description - This method deletes the preview popup from the DOM.
     * @return {?}
     */
    hidePreview() {
        if (this.popup) {
            this.popup.destroy();
            this.popup = null;
        }
    }
}
NovoChipsElement.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'chips,novo-chips',
                providers: [CHIPS_VALUE_ACCESSOR],
                template: `
        <div class="novo-chip-container">
          <novo-chip
              *ngFor="let item of _items | async"
              [type]="type || item?.value?.searchEntity"
              [class.selected]="item == selected"
              [disabled]="disablePickerInput"
              (remove)="remove($event, item)"
              (select)="select($event, item)"
              (deselect)="deselect($event, item)">
              {{ item.label }}
          </novo-chip>
        </div>
        <div class="chip-input-container" *ngIf="!maxlength || (maxlength && items.length < maxlength)">
            <novo-picker
                clearValueOnSelect="true"
                [closeOnSelect]="closeOnSelect"
                [config]="source"
                [disablePickerInput]="disablePickerInput"
                [placeholder]="placeholder"
                [(ngModel)]="itemToAdd"
                (select)="add($event)"
                (keydown)="onKeyDown($event)"
                (focus)="onFocus($event)"
                (typing)="onTyping($event)"
                (blur)="onTouched($event)"
                [selected]="items"
                [overrideElement]="element">
            </novo-picker>
        </div>
        <div class="preview-container">
            <span #preview></span>
        </div>
        <i class="bhi-search" [class.has-value]="items.length" *ngIf="!disablePickerInput"></i>
        <label class="clear-all" *ngIf="items.length && !disablePickerInput" (click)="clearValue()">{{ labels.clearAll }} <i class="bhi-times"></i></label>
   `,
                host: {
                    '[class.with-value]': 'items.length > 0',
                    '[class.disabled]': 'disablePickerInput',
                }
            }] }
];
/** @nocollapse */
NovoChipsElement.ctorParameters = () => [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"] },
    { type: ComponentUtils },
    { type: NovoLabelService }
];
NovoChipsElement.propDecorators = {
    closeOnSelect: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    placeholder: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    source: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    maxlength: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    type: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    disablePickerInput: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    changed: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    focus: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    blur: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    typing: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    preview: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"], args: ['preview', { read: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewContainerRef"], static: false },] }],
    value: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }]
};
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: elements/overlay/Overlay.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NovoOverlayTemplateComponent {
    /**
     * @param {?} overlay
     * @param {?} viewContainerRef
     * @param {?} zone
     * @param {?} changeDetectorRef
     * @param {?} document
     */
    constructor(overlay, viewContainerRef, zone, changeDetectorRef, document) {
        this.overlay = overlay;
        this.viewContainerRef = viewContainerRef;
        this.zone = zone;
        this.changeDetectorRef = changeDetectorRef;
        this.document = document;
        this.id = `novo-overlay-${Date.now()}`;
        this.position = 'default';
        this.scrollStrategy = 'reposition';
        this.closeOnSelect = true;
        this.select = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.closing = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.destroyOverlay();
    }
    /**
     * @return {?}
     */
    get panelOpen() {
        return this.overlayRef && this.overlayRef.hasAttached();
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set parent(value) {
        this._parent = value;
        this.checkSizes();
    }
    /**
     * @return {?}
     */
    get parent() {
        return this._parent;
    }
    /**
     * @return {?}
     */
    openPanel() {
        if (!this.overlayRef) {
            this.createOverlay(this.template);
        }
        else {
            this.checkSizes();
        }
        if (this.overlayRef && !this.overlayRef.hasAttached()) {
            this.overlayRef.attach(this.portal);
            this.closingActionsSubscription = this.subscribeToClosingActions();
        }
        this.changeDetectorRef.markForCheck();
        setTimeout((/**
         * @return {?}
         */
        () => {
            if (this.overlayRef) {
                this.overlayRef.updatePosition();
            }
        }));
    }
    /**
     * @return {?}
     */
    closePanel() {
        this.zone.run((/**
         * @return {?}
         */
        () => {
            if (this.overlayRef && this.overlayRef.hasAttached()) {
                this.overlayRef.detach();
                this.closingActionsSubscription.unsubscribe();
            }
            this.closing.emit(true);
            if (this.panelOpen) {
                this.changeDetectorRef.markForCheck();
            }
        }));
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onClosingAction(event) {
        this.closePanel();
    }
    /**
     * A stream of actions that should close the autocomplete panel, including
     * when an option is selected, on blur, and when TAB is pressed.
     * @return {?}
     */
    get panelClosingActions() {
        return Object(rxjs__WEBPACK_IMPORTED_MODULE_11__["merge"])(
        // this.overlayTemplate._keyManager.tabOut,
        this.outsideClickStream);
    }
    /**
     * Stream of clicks outside of the autocomplete panel.
     * @protected
     * @return {?}
     */
    get outsideClickStream() {
        if (!this.document) {
            return Object(rxjs__WEBPACK_IMPORTED_MODULE_11__["of"])();
        }
        return Object(rxjs__WEBPACK_IMPORTED_MODULE_11__["merge"])(Object(rxjs__WEBPACK_IMPORTED_MODULE_11__["fromEvent"])(this.document, 'mousedown'), Object(rxjs__WEBPACK_IMPORTED_MODULE_11__["fromEvent"])(this.document, 'touchend')).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_14__["filter"])((/**
         * @param {?} event
         * @return {?}
         */
        (event) => {
            /** @type {?} */
            const clickTarget = (/** @type {?} */ (event.target));
            /** @type {?} */
            const clicked = this.panelOpen &&
                clickTarget !== this.getConnectedElement().nativeElement &&
                !this.getConnectedElement().nativeElement.contains(clickTarget) &&
                (!!this.overlayRef && !this.overlayRef.overlayElement.contains(clickTarget));
            if (this.panelOpen && !!this.overlayRef && this.overlayRef.overlayElement.contains(clickTarget) && this.closeOnSelect) {
                this.select.emit(event);
            }
            return clicked;
        })));
    }
    /**
     * This method listens to a stream of panel closing actions and resets the
     * stream every time the option list changes.
     * @protected
     * @return {?}
     */
    subscribeToClosingActions() {
        /** @type {?} */
        const firstStable = this.zone.onStable.asObservable().pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_14__["first"])());
        // const valueChanges = Observable.from(this.value);
        // When the zone is stable initially, and when the option list changes...
        return (Object(rxjs__WEBPACK_IMPORTED_MODULE_11__["merge"])(firstStable)
            .pipe(
        // create a new stream of panelClosingActions, replacing any previous streams
        // that were created, and flatten it so our stream only emits closing events...
        Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_14__["switchMap"])((/**
         * @return {?}
         */
        () => {
            return this.panelClosingActions;
        })), 
        // when the first closing event occurs...
        Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_14__["first"])())
            // set the value, close the panel, and complete.
            .subscribe((/**
         * @param {?} event
         * @return {?}
         */
        (event) => this.onClosingAction(event))));
    }
    /**
     * @protected
     * @param {?} template
     * @return {?}
     */
    createOverlay(template) {
        this.portal = new _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_8__["TemplatePortal"](template, this.viewContainerRef);
        this.overlayRef = this.overlay.create(this.getOverlayConfig());
        this.overlayRef.backdropClick().subscribe((/**
         * @return {?}
         */
        () => this.closePanel()));
    }
    /**
     * @protected
     * @return {?}
     */
    destroyOverlay() {
        if (this.overlayRef) {
            this.closePanel();
            this.overlayRef.dispose();
            this.overlayRef = undefined;
        }
    }
    /**
     * @protected
     * @return {?}
     */
    getOverlayConfig() {
        /** @type {?} */
        const config = new _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_7__["OverlayConfig"]();
        if (!this.width) {
            config.width = this.getHostWidth();
        }
        else {
            config.width = this.width;
        }
        if (this.height) {
            config.height = this.height;
        }
        config.positionStrategy = this.getPosition();
        config.hasBackdrop = false;
        config.direction = 'ltr';
        config.scrollStrategy = this.getScrollStrategy();
        return config;
    }
    /**
     * Supports the following position strategies:
     * 'default', 'right', 'bottom', 'center', 'bottom-left', 'bottom-right', 'top-left', 'top-right'
     * @protected
     * @return {?}
     */
    getPosition() {
        if (this.position === 'center') {
            return this.overlay
                .position()
                .connectedTo(this.getConnectedElement(), { originX: 'start', originY: 'center' }, { overlayX: 'start', overlayY: 'center' })
                .withFallbackPosition({ originX: 'start', originY: 'top' }, { overlayX: 'start', overlayY: 'top' })
                .withFallbackPosition({ originX: 'start', originY: 'bottom' }, { overlayX: 'start', overlayY: 'bottom' });
        }
        const [originX, fallbackX] = this.position.includes('right') ? ['end', 'start'] : ['start', 'end'];
        const [originY, overlayY] = this.position.includes('top') ? ['top', 'bottom'] : ['bottom', 'top'];
        /** @type {?} */
        let strategy = this.overlay
            .position()
            .connectedTo(this.getConnectedElement(), { originX, originY }, { overlayX: originX, overlayY })
            .withDirection('ltr');
        if (this.position === 'bottom') {
            strategy = strategy.withFallbackPosition({ originX: fallbackX, originY: 'bottom' }, { overlayX: fallbackX, overlayY: 'top' });
        }
        else if (this.position === 'right' || this.position === 'default' || this.position.includes('above-below')) {
            strategy = strategy
                .withFallbackPosition({ originX, originY: 'top' }, { overlayX: originX, overlayY: 'bottom' })
                .withFallbackPosition({ originX: fallbackX, originY: 'bottom' }, { overlayX: fallbackX, overlayY: 'top' })
                .withFallbackPosition({ originX: fallbackX, originY: 'top' }, { overlayX: fallbackX, overlayY: 'bottom' });
            if (!this.position.includes('above-below')) {
                strategy = strategy
                    .withFallbackPosition({ originX, originY: 'center' }, { overlayX: originX, overlayY: 'center' })
                    .withFallbackPosition({ originX: fallbackX, originY: 'center' }, { overlayX: fallbackX, overlayY: 'center' });
            }
        }
        return strategy;
    }
    /**
     * @protected
     * @return {?}
     */
    getScrollStrategy() {
        switch (this.scrollStrategy) {
            case 'block':
                return this.overlay.scrollStrategies.block();
            case 'reposition':
                return this.overlay.scrollStrategies.reposition();
            default:
                return this.overlay.scrollStrategies.close();
        }
    }
    /**
     * @protected
     * @return {?}
     */
    checkSizes() {
        if (this.overlayRef) {
            if (!this.width) {
                this.overlayRef.getConfig().width = this.getHostWidth();
            }
            if (this.height) {
                this.overlayRef.getConfig().height = this.height;
            }
            this.overlayRef.updateSize(this.overlayRef.getConfig());
            this.overlayRef.updatePosition();
            this.changeDetectorRef.markForCheck();
        }
    }
    /**
     * @protected
     * @return {?}
     */
    getConnectedElement() {
        return this.parent;
    }
    /**
     * @protected
     * @return {?}
     */
    getHostWidth() {
        return this.getConnectedElement().nativeElement.getBoundingClientRect().width;
    }
}
NovoOverlayTemplateComponent.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'novo-overlay-template',
                template: `
    <ng-template>
      <div class="novo-overlay-panel" role="listbox" [id]="id" #panel><ng-content></ng-content></div>
    </ng-template>
  `,
                changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectionStrategy"].OnPush
            }] }
];
/** @nocollapse */
NovoOverlayTemplateComponent.ctorParameters = () => [
    { type: _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_7__["Overlay"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewContainerRef"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgZone"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectorRef"] },
    { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [_angular_common__WEBPACK_IMPORTED_MODULE_6__["DOCUMENT"],] }] }
];
NovoOverlayTemplateComponent.propDecorators = {
    template: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"], args: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["TemplateRef"], { static: false },] }],
    panel: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"], args: ['panel', { static: false },] }],
    position: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    scrollStrategy: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    width: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    height: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    closeOnSelect: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    select: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    closing: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    parent: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }]
};
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: elements/overlay/Overlay.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NovoOverlayModule {
}
NovoOverlayModule.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                imports: [_angular_common__WEBPACK_IMPORTED_MODULE_6__["CommonModule"], _angular_forms__WEBPACK_IMPORTED_MODULE_1__["FormsModule"], _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_7__["OverlayModule"], _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_13__["ScrollingModule"]],
                declarations: [NovoOverlayTemplateComponent],
                exports: [NovoOverlayTemplateComponent, _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_13__["ScrollingModule"]],
            },] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: elements/switch/Switch.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// Value accessor for the component (supports ngModel)
/** @type {?} */
const SWITCH_VALUE_ACCESSOR = {
    provide: _angular_forms__WEBPACK_IMPORTED_MODULE_1__["NG_VALUE_ACCESSOR"],
    useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["forwardRef"])((/**
     * @return {?}
     */
    () => NovoSwitchElement)),
    multi: true,
};
class NovoSwitchElement {
    /**
     * @param {?} ref
     */
    constructor(ref) {
        this.ref = ref;
        this.onChange = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this._disabled = false;
        this.onModelChange = (/**
         * @return {?}
         */
        () => { });
        this.onModelTouched = (/**
         * @return {?}
         */
        () => { });
    }
    /**
     * @return {?}
     */
    get disabled() {
        return this._disabled;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set disabled(value) {
        this._disabled = !value;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onKeydown(event) {
        if (event.keyCode === KeyCodes.SPACE) {
            event.preventDefault();
            this.toggle(event);
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    toggle(event) {
        if (event) {
            event.stopPropagation();
            event.preventDefault();
        }
        if (this.disabled) {
            return;
        }
        this.model = !this.model;
        this.onChange.next(this.model);
        this.onModelChange(this.model);
        this.ref.markForCheck();
    }
    /**
     * @param {?} model
     * @return {?}
     */
    writeValue(model) {
        this.model = model;
        this.ref.markForCheck();
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.onModelChange = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.onModelTouched = fn;
    }
}
NovoSwitchElement.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'novo-switch',
                providers: [SWITCH_VALUE_ACCESSOR],
                template: `
        <div (click)="toggle($event)">
            <div class="novo-switch-container">
                <div class="novo-switch-bar"></div>
                <div class="novo-switch-thumb-container">
                    <div class="novo-switch-thumb"></div>
                </div>
            </div>
            <div class="novo-switch-label"><ng-content></ng-content></div>
        </div>
    `,
                host: {
                    role: 'checkbox',
                    '[attr.aria-checked]': 'model',
                    '[attr.aria-disabled]': 'disabled',
                    '(keydown)': 'onKeydown($event)',
                    '[class]': 'theme',
                }
            }] }
];
/** @nocollapse */
NovoSwitchElement.ctorParameters = () => [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectorRef"] }
];
NovoSwitchElement.propDecorators = {
    theme: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    onChange: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    disabled: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"], args: ['disabled',] }]
};
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: elements/switch/Switch.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NovoSwitchModule {
}
NovoSwitchModule.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                imports: [_angular_common__WEBPACK_IMPORTED_MODULE_6__["CommonModule"], _angular_forms__WEBPACK_IMPORTED_MODULE_1__["FormsModule"]],
                declarations: [NovoSwitchElement],
                exports: [NovoSwitchElement],
            },] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: elements/picker/extras/base-picker-results/BasePickerResults.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description This is the actual list of matches that gets injected into the DOM. It's also the piece that can be
 * overwritten if custom list options are needed.
 */
class BasePickerResults {
    /**
     * @param {?} element
     * @param {?} ref
     */
    constructor(element, ref) {
        this._term = '';
        this.selected = [];
        this.matches = [];
        this.hasError = false;
        this.isLoading = false;
        this.isStatic = true;
        this.page = 0;
        this.lastPage = false;
        this.autoSelectFirstOption = true;
        this.optionsFunctionHasChanged = false;
        this.selectingMatches = false;
        this.element = element;
        this.ref = ref;
        this.scrollHandler = this.onScrollDown.bind(this);
    }
    /**
     * @return {?}
     */
    cleanUp() {
        /** @type {?} */
        const element = this.getListElement();
        if (element && element.hasAttribute('scrollListener')) {
            element.removeAttribute('scrollListener');
            element.removeEventListener('scroll', this.scrollHandler);
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onScrollDown(event) {
        /** @type {?} */
        const element = event.target;
        if (element) {
            /** @type {?} */
            const offset = element.offsetHeight + element.scrollTop;
            /** @type {?} */
            const bottom = element.scrollHeight - 300;
            if (offset >= bottom) {
                event.stopPropagation();
                if (!this.lastPage && !this.isLoading) {
                    this.processSearch();
                }
            }
        }
    }
    /**
     * @return {?}
     */
    get term() {
        return this._term;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set term(value) {
        if (this.shouldSearch(value)) {
            this._term = value;
            this.page = 0;
            this.optionsFunctionHasChanged = false;
            this.matches = [];
            this.processSearch(true);
        }
        else {
            this.addScrollListener();
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set config(value) {
        if (this.config && this.config.options !== value.options) {
            this.optionsFunctionHasChanged = true; // reset page so that new options call is used to search
        }
        this._config = value;
    }
    /**
     * @return {?}
     */
    get config() {
        return this._config;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    shouldSearch(value) {
        /** @type {?} */
        const termHasChanged = value !== this._term;
        /** @type {?} */
        const optionsNotYetCalled = this.page === 0;
        return termHasChanged || optionsNotYetCalled || this.optionsFunctionHasChanged;
    }
    /**
     * @return {?}
     */
    addScrollListener() {
        if (this.config.enableInfiniteScroll) {
            /** @type {?} */
            const element = this.getListElement();
            if (element && !element.hasAttribute('scrollListener')) {
                element.setAttribute('scrollListener', 'true');
                element.addEventListener('scroll', this.scrollHandler);
            }
        }
    }
    /**
     * @param {?=} shouldReset
     * @return {?}
     */
    processSearch(shouldReset) {
        this.hasError = false;
        this.isLoading = true;
        this.ref.markForCheck();
        this.search(this.term).subscribe((/**
         * @param {?} results
         * @return {?}
         */
        (results) => {
            if (shouldReset) {
                this.matches = [];
            }
            if (this.isStatic) {
                this.matches = this.filterData(results);
            }
            else {
                this.matches = this.matches.concat(results);
                this.lastPage = results && !results.length;
            }
            if (this.matches.length > 0 && this.autoSelectFirstOption && !this.selectingMatches) {
                this.nextActiveMatch();
            }
            this.isLoading = false;
            this.ref.markForCheck();
            setTimeout((/**
             * @return {?}
             */
            () => {
                this.overlay.updatePosition();
                this.addScrollListener();
            })); // @bkimball: This was added for Dylan Schulte, 9.18.2017 4:14PM EST, you're welcome!
        }), (/**
         * @param {?} err
         * @return {?}
         */
        (err) => {
            this.hasError = this.term && this.term.length !== 0;
            this.isLoading = false;
            this.lastPage = true;
            if (this.term && this.term.length !== 0) {
                console.error(err); // tslint:disable-lineno
            }
            this.ref.markForCheck();
        }));
    }
    /**
     * @param {?} term
     * @param {?=} mode
     * @return {?}
     */
    search(term, mode) {
        /** @type {?} */
        const options = this.config.options;
        return Object(rxjs__WEBPACK_IMPORTED_MODULE_11__["from"])(new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        (resolve, reject) => {
            // Check if there is match data
            if (options) {
                // Resolve the data
                if (Array.isArray(options)) {
                    this.isStatic = true;
                    // Arrays are returned immediately
                    resolve(this.structureArray(options));
                }
                else if (this.shouldCallOptionsFunction(term)) {
                    if ((options.hasOwnProperty('reject') && options.hasOwnProperty('resolve')) ||
                        Object.getPrototypeOf(options).hasOwnProperty('then')) {
                        this.isStatic = false;
                        // Promises (ES6 or Deferred) are resolved whenever they resolve
                        options.then(this.structureArray.bind(this)).then(resolve, reject);
                    }
                    else if (typeof options === 'function') {
                        this.isStatic = false;
                        // Promises (ES6 or Deferred) are resolved whenever they resolve
                        options(term, ++this.page)
                            .then(this.structureArray.bind(this))
                            .then(resolve, reject);
                    }
                    else {
                        // All other kinds of data are rejected
                        reject('The data provided is not an array or a promise');
                        throw new Error('The data provided is not an array or a promise');
                    }
                }
                else {
                    if (this.config.defaultOptions) {
                        this.isStatic = false;
                        if (typeof this.config.defaultOptions === 'function') {
                            /** @type {?} */
                            const defaultOptions = this.config.defaultOptions(term, ++this.page);
                            if (Object.getPrototypeOf(defaultOptions).hasOwnProperty('then')) {
                                defaultOptions.then(this.structureArray.bind(this)).then(resolve, reject);
                            }
                            else {
                                resolve(this.structureArray(defaultOptions));
                            }
                        }
                        else {
                            resolve(this.structureArray(this.config.defaultOptions));
                        }
                    }
                    else {
                        // No search term gets rejected
                        reject('No search term');
                    }
                }
            }
            else {
                // No data gets rejected
                reject('error');
            }
        })));
    }
    /**
     * @param {?} term
     * @return {?}
     */
    shouldCallOptionsFunction(term) {
        if (this.config && 'minSearchLength' in this.config && Number.isInteger(this.config.minSearchLength)) {
            return typeof term === 'string' && term.length >= this.config.minSearchLength;
        }
        else {
            return !!(term && term.length);
        }
    }
    /**
     * \@description This function structures an array of nodes into an array of objects with a
     * 'name' field by default.
     * @param {?} collection - the data once getData resolves it
     *
     * @return {?}
     */
    structureArray(collection) {
        /** @type {?} */
        const dataArray = collection.data ? collection.data : collection;
        if (dataArray && (typeof dataArray[0] === 'string' || typeof dataArray[0] === 'number')) {
            return collection.map((/**
             * @param {?} item
             * @return {?}
             */
            (item) => {
                return {
                    value: item,
                    label: item,
                };
            }));
        }
        return dataArray.map((/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            /** @type {?} */
            let value = this.config.field ? data[this.config.field] : data.value || data;
            if (this.config.valueFormat) {
                value = Helpers.interpolate(this.config.valueFormat, data);
            }
            /** @type {?} */
            const label = this.config.format ? Helpers.interpolate(this.config.format, data) : data.label || String(value);
            return { value, label, data };
        }));
    }
    /**
     * \@description This function loops through the picker options and creates a filtered list of objects that contain
     * the newSearch.
     * @param {?} matches - Collection of objects=
     *
     * @return {?}
     */
    filterData(matches) {
        if (this.term && matches) {
            return matches.filter((/**
             * @param {?} match
             * @return {?}
             */
            (match) => {
                return ~String(match.label)
                    .toLowerCase()
                    .indexOf(this.term.toLowerCase());
            }));
        }
        // Show no recent results template
        return matches;
    }
    /**
     * \@description This function is called when the user presses the enter key to call the selectMatch method.
     * @return {?}
     */
    selectActiveMatch() {
        this.selectMatch();
    }
    /**
     * \@description This function sets activeMatch to the match before the current node.
     * @return {?}
     */
    prevActiveMatch() {
        /** @type {?} */
        const index = this.matches.indexOf(this.activeMatch);
        this.activeMatch = this.matches[index - 1 < 0 ? this.matches.length - 1 : index - 1];
        this.scrollToActive();
        this.ref.markForCheck();
    }
    /**
     * \@description This function sets activeMatch to the match after the current node.
     * @return {?}
     */
    nextActiveMatch() {
        /** @type {?} */
        const index = this.matches.indexOf(this.activeMatch);
        this.activeMatch = this.matches[index + 1 > this.matches.length - 1 ? 0 : index + 1];
        this.scrollToActive();
        this.ref.markForCheck();
    }
    /**
     * @return {?}
     */
    getListElement() {
        return this.element.nativeElement;
    }
    /**
     * @return {?}
     */
    getChildrenOfListElement() {
        /** @type {?} */
        let children = [];
        if (this.getListElement()) {
            children = this.getListElement().children;
        }
        return children;
    }
    /**
     * @return {?}
     */
    scrollToActive() {
        /** @type {?} */
        const list = this.getListElement();
        /** @type {?} */
        const items = this.getChildrenOfListElement();
        /** @type {?} */
        const index = this.matches.indexOf(this.activeMatch);
        /** @type {?} */
        const item = items[index];
        if (item) {
            list.scrollTop = item.offsetTop;
        }
    }
    /**
     * \@description
     * @param {?} match
     * @return {?}
     */
    selectActive(match) {
        this.activeMatch = match;
    }
    /**
     * \@description
     * @param {?} match
     * @return {?}
     */
    isActive(match) {
        return this.activeMatch === match;
    }
    /**
     * \@description
     * @param {?=} event
     * @param {?=} item
     * @return {?}
     */
    selectMatch(event, item) {
        if (event) {
            event.stopPropagation();
            event.preventDefault();
        }
        /** @type {?} */
        const selected = this.activeMatch;
        if (selected && this.parent) {
            this.parent.value = selected;
            this.selectingMatches = true;
            if (this.parent.closeOnSelect) {
                this.parent.hideResults();
                this.selectingMatches = false;
            }
        }
        this.ref.markForCheck();
        return false;
    }
    /**
     * \@description This function captures the whole query string and replace it with the string that will be used to
     * match.
     * @param {?} queryToEscape
     * @return {?}
     */
    escapeRegexp(queryToEscape) {
        // Ex: if the capture is "a" the result will be \a
        return queryToEscape.replace(/([.?*+^$[\]\\(){}|-])/g, '\\$1');
    }
    /**
     * \@description This function should return a <strong>-tag wrapped HTML string.
     * @param {?} match
     * @param {?} query
     * @return {?}
     */
    highlight(match, query) {
        // Replaces the capture string with a the same string inside of a "strong" tag
        return query ? match.replace(new RegExp(this.escapeRegexp(query.trim()), 'gi'), '<strong>$&</strong>') : match;
    }
    /**
     * @param {?} match
     * @return {?}
     */
    preselected(match) {
        if (this.config.preselected) {
            /** @type {?} */
            const preselectedFunc = this.config.preselected;
            return (this.selected.findIndex((/**
             * @param {?} item
             * @return {?}
             */
            (item) => {
                return preselectedFunc(match, item);
            })) !== -1);
        }
        return (this.selected.findIndex((/**
         * @param {?} item
         * @return {?}
         */
        (item) => {
            /** @type {?} */
            let isPreselected = false;
            if (item && item.value && match && match.value) {
                if (item.value.id && match.value.id) {
                    isPreselected = item.value.id === match.value.id;
                }
                else if (item.value instanceof Object && item.value.hasOwnProperty('value')) {
                    isPreselected = item.value.value === match.value;
                }
                else {
                    isPreselected = item.value === match.value;
                }
            }
            return isPreselected;
        })) !== -1);
    }
}
BasePickerResults.propDecorators = {
    matches: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }]
};
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: elements/picker/extras/picker-results/PickerResults.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class PickerResults extends BasePickerResults {
    /**
     * @param {?} element
     * @param {?} labels
     * @param {?} ref
     */
    constructor(element, labels, ref) {
        super(element, ref);
        this.labels = labels;
    }
    /**
     * @return {?}
     */
    get hasNonErrorMessage() {
        return !this.isLoading && !this.matches.length && !this.hasError;
    }
    /**
     * @return {?}
     */
    getEmptyMessage() {
        if (this.shouldShowMessageForZeroLengthSearch()) {
            // this property comes from Field Interactions
            return this.config.emptyPickerMessage;
        }
        else {
            return this.term === '' ? this.labels.pickerTextFieldEmpty : this.labels.pickerEmpty;
        }
    }
    /**
     * @return {?}
     */
    shouldShowMessageForZeroLengthSearch() {
        return this.config && this.config.minSearchLength === 0 && this.term === '' && this.config.emptyPickerMessage;
    }
    /**
     * @return {?}
     */
    getListElement() {
        return this.element.nativeElement.querySelector('novo-list');
    }
}
PickerResults.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'picker-results',
                host: {
                    class: 'active',
                },
                template: `
    <novo-list *ngIf="matches.length > 0" direction="vertical">
      <novo-list-item
        *ngFor="let match of matches"
        (click)="selectMatch($event)"
        [class.active]="match === activeMatch"
        (mouseenter)="selectActive(match)"
        [class.disabled]="preselected(match)"
      >
        <item-content> <span [innerHtml]="highlight(match.label, term)"></span> </item-content>
      </novo-list-item>
      <novo-loading *ngIf="isLoading && matches.length > 0" theme="line"></novo-loading>
    </novo-list>
    <div class="picker-loader" *ngIf="isLoading && matches.length === 0"><novo-loading theme="line"></novo-loading></div>
    <p class="picker-error" *ngIf="hasError">{{ labels.pickerError }}</p>
    <p class="picker-null-results" *ngIf="hasNonErrorMessage">{{ getEmptyMessage() }}</p>
  `
            }] }
];
/** @nocollapse */
PickerResults.ctorParameters = () => [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"] },
    { type: NovoLabelService },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectorRef"] }
];
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: utils/notifier/notifier.util.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const notifications = {};
/**
 * @param {?} message
 * @return {?}
 */
function notify(message) {
    if (!Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["isDevMode"])() || message in notifications) {
        return;
    }
    notifications[message] = true;
    console.warn(message); // tslint:disable-line
}

/**
 * @fileoverview added by tsickle
 * Generated from: elements/picker/Picker.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// Value accessor for the component (supports ngModel)
/** @type {?} */
const PICKER_VALUE_ACCESSOR = {
    provide: _angular_forms__WEBPACK_IMPORTED_MODULE_1__["NG_VALUE_ACCESSOR"],
    useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["forwardRef"])((/**
     * @return {?}
     */
    () => NovoPickerElement)),
    multi: true,
};
/**
 * \@description This class is the directive definition of the Picker. If you add and attribute of `picker` to an input,
 * it will create an instance of the picker which wraps the input in all of the picker HTML elements and functionality.
 * Picker should be added as a two-way bound ngModel instance `[(picker)]=""` in order to have the picker options
 * dynamically populate.
 */
class NovoPickerElement {
    /**
     * @param {?} element
     * @param {?} componentUtils
     * @param {?} ref
     */
    constructor(element, componentUtils, ref) {
        this.element = element;
        this.componentUtils = componentUtils;
        this.ref = ref;
        this.closeOnSelect = true;
        this.selected = [];
        // Deprecated
        this.appendToBody = false;
        // Deprecated
        this.parentScrollAction = 'close';
        // Side the dropdown will open
        this.side = 'left';
        // Autoselects the first option in the results
        this.autoSelectFirstOption = true;
        this._disablePickerInput = false;
        // Emitter for selects
        this.changed = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.select = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.focus = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.blur = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.typing = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.term = '';
        this.onModelChange = (/**
         * @return {?}
         */
        () => { });
        this.onModelTouched = (/**
         * @return {?}
         */
        () => { });
    }
    // Disable from typing into the picker (result template does everything)
    /**
     * @param {?} v
     * @return {?}
     */
    set disablePickerInput(v) {
        this._disablePickerInput = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_12__["coerceBooleanProperty"])(v);
    }
    /**
     * @return {?}
     */
    get disablePickerInput() {
        return this._disablePickerInput;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.overrideElement) {
            this.element = this.overrideElement;
        }
        if (this.appendToBody) {
            notify(`'appendToBody' has been deprecated. Please remove this attribute.`);
        }
        // Custom results template
        this.resultsComponent = this.config.resultsTemplate || PickerResults;
        // Get all distinct key up events from the input and only fire if long enough and distinct
        // let input = this.element.nativeElement.querySelector('input');
        /** @type {?} */
        const pasteObserver = Object(rxjs__WEBPACK_IMPORTED_MODULE_11__["fromEvent"])(this.input.nativeElement, 'paste').pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_14__["debounceTime"])(250), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_14__["distinctUntilChanged"])());
        pasteObserver.subscribe((/**
         * @param {?} event
         * @return {?}
         */
        (event) => this.onDebouncedKeyup(event)), (/**
         * @param {?} err
         * @return {?}
         */
        (err) => this.hideResults(err)));
        /** @type {?} */
        const keyboardObserver = Object(rxjs__WEBPACK_IMPORTED_MODULE_11__["fromEvent"])(this.input.nativeElement, 'keyup').pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_14__["debounceTime"])(250), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_14__["distinctUntilChanged"])());
        keyboardObserver.subscribe((/**
         * @param {?} event
         * @return {?}
         */
        (event) => this.onDebouncedKeyup(event)), (/**
         * @param {?} err
         * @return {?}
         */
        (err) => this.hideResults(err)));
    }
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    onDebouncedKeyup(event) {
        if ([KeyCodes.ESC, KeyCodes.UP, KeyCodes.DOWN, KeyCodes.ENTER, KeyCodes.TAB].includes(event['keyCode'])) {
            return;
        }
        this.show(((/** @type {?} */ (event.target))).value);
    }
    /**
     * @return {?}
     */
    openPanel() {
        this.container.openPanel();
    }
    /**
     * @return {?}
     */
    closePanel() {
        this.container.closePanel();
    }
    /**
     * @return {?}
     */
    get panelOpen() {
        return this.container && this.container.panelOpen;
    }
    /**
     * @private
     * @param {?=} term
     * @return {?}
     */
    show(term) {
        this.openPanel();
        // Show the results inside
        this.showResults(term);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onKeyDown(event) {
        if (this.disablePickerInput) {
            Helpers.swallowEvent(event);
            return;
        }
        if (this.panelOpen && !this.disablePickerInput) {
            if (event.keyCode === KeyCodes.ESC || event.keyCode === KeyCodes.TAB) {
                this.hideResults();
                return;
            }
            if (event.keyCode === KeyCodes.UP) {
                this.popup.instance.prevActiveMatch();
                this.ref.markForCheck();
                return;
            }
            if (event.keyCode === KeyCodes.DOWN) {
                this.popup.instance.nextActiveMatch();
                this.ref.markForCheck();
                return;
            }
            if (event.keyCode === KeyCodes.ENTER) {
                /** @type {?} */
                const activeMatch = this.popup.instance.activeMatch;
                if (!this.selected.find((/**
                 * @param {?} selected
                 * @return {?}
                 */
                (selected) => activeMatch && activeMatch.value && selected.value === activeMatch.value))) {
                    this.popup.instance.selectActiveMatch();
                    this.ref.markForCheck();
                }
                return;
            }
            if ((event.keyCode === KeyCodes.BACKSPACE || event.keyCode === KeyCodes.DELETE) && !Helpers.isBlank(this._value)) {
                this.clearValue(false);
                this.closePanel();
            }
            if (event.keyCode === KeyCodes.DELETE && Helpers.isBlank(this._value)) {
                this.clearValue(true);
            }
        }
    }
    /**
     * @param {?} wipeTerm
     * @return {?}
     */
    clearValue(wipeTerm) {
        this._value = null;
        this.select.emit(this._value);
        this.changed.emit({ value: this._value, rawValue: { label: '', value: this._value } });
        this.onModelChange(this._value);
        if (wipeTerm) {
            this.term = '';
            this.hideResults();
        }
        this.ref.markForCheck();
    }
    /**
     * \@description When the input's focus event is called this method calls the debounced function that displays the
     * results.
     * @param {?} event
     * @return {?}
     */
    onFocus(event) {
        if (!this.panelOpen) {
            this.show();
        }
        this.focus.emit(event);
    }
    // Creates an instance of the results (called popup) and adds all the bindings to that instance.
    /**
     * @param {?=} term
     * @return {?}
     */
    showResults(term) {
        // Update Matches
        if (this.popup) {
            // Update existing list or create the DOM element
            this.popup.instance.config = this.config;
            this.popup.instance.term = this.term;
            this.popup.instance.selected = this.selected;
            this.popup.instance.autoSelectFirstOption = this.autoSelectFirstOption;
            this.ref.markForCheck();
        }
        else {
            this.popup = this.componentUtils.append(this.resultsComponent, this.results);
            this.popup.instance.parent = this;
            this.popup.instance.config = this.config;
            this.popup.instance.term = this.term;
            this.popup.instance.selected = this.selected;
            this.popup.instance.autoSelectFirstOption = this.autoSelectFirstOption;
            this.popup.instance.overlay = this.container.overlayRef;
            this.ref.markForCheck();
        }
    }
    // Tells the overlay component to hide the picker results from the DOM without deleting the dynamically allocated popup instance created in
    // showResults. The popup instance will remain in memory from the first time the results are shown until this component is destroyed.
    /**
     * @param {?=} err
     * @return {?}
     */
    hideResults(err) {
        this.closePanel();
        this.ref.markForCheck();
    }
    // Cleans up listeners for the popup - will get executed no matter how the popup is closed.
    /**
     * @return {?}
     */
    onOverlayClosed() {
        if (this.popup && this.popup.instance && this.popup.instance.cleanUp) {
            this.popup.instance.cleanUp();
        }
    }
    // get accessor
    /**
     * @return {?}
     */
    get value() {
        return this._value;
    }
    // set accessor including call the onchange callback
    /**
     * @param {?} selected
     * @return {?}
     */
    set value(selected) {
        if (!selected) {
            this.term = '';
            this._value = null;
            this.onModelChange(this._value);
        }
        else if (selected.value !== this._value) {
            this.term = this.clearValueOnSelect ? '' : selected.label;
            this._value = selected.value;
            this.changed.emit({ value: selected.value, rawValue: { label: this.term, value: selected.value } });
            this.select.emit(selected);
            this.onModelChange(selected.value);
            if (this.popup) {
                this.popup.instance.selected = this.selected;
            }
        }
        else {
            this.changed.emit({ value: selected.value, rawValue: { label: this.term, value: this._value } });
            this.select.emit(selected);
        }
        this.ref.markForCheck();
    }
    // Makes sure to clear the model if the user clears the text box
    /**
     * @param {?} event
     * @return {?}
     */
    checkTerm(event) {
        this.typing.emit(event);
        if (!event || !event.length) {
            this._value = null;
            this.onModelChange(this._value);
        }
        this.ref.markForCheck();
    }
    // Set touched on blur
    /**
     * @param {?=} event
     * @return {?}
     */
    onTouched(event) {
        this.onModelTouched();
        this.blur.emit(event);
    }
    // From ControlValueAccessor interface
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        if (this.clearValueOnSelect) {
            this.term = '';
        }
        else {
            if (typeof value === 'string' && !this.config.useGetLabels) {
                this.term = value;
            }
            else if (value && value.label) {
                this.term = value.label;
            }
            else if (value && value.firstName) {
                this.term = `${value.firstName} ${value.lastName}`;
            }
            else if (value && value.name) {
                this.term = value.name;
            }
            else if (typeof this.config.getLabels === 'function') {
                this.config.getLabels(value).then((/**
                 * @param {?} result
                 * @return {?}
                 */
                (result) => {
                    if (result) {
                        this.term = result.length ? result[0].label || '' : result.label || '';
                    }
                    else {
                        this.term = value;
                    }
                    this.ref.markForCheck();
                }));
            }
            else if (value && value.title) {
                this.term = value.title;
            }
            else {
                this.term = value || '';
            }
        }
        this._value = value;
        this.ref.markForCheck();
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.onModelChange = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.onModelTouched = fn;
    }
    /**
     * @param {?} disabled
     * @return {?}
     */
    setDisabledState(disabled) {
        this._disablePickerInput = disabled;
    }
}
NovoPickerElement.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'novo-picker',
                providers: [PICKER_VALUE_ACCESSOR],
                template: `
    <i class="bhi-more" *ngIf="config?.entityIcon && !_value"></i>
    <i class="bhi-{{ config?.entityIcon }} entity-icon {{ config?.entityIcon }}" *ngIf="config?.entityIcon && _value"></i>
    <input
      type="text"
      class="picker-input"
      [(ngModel)]="term"
      [class.entity-picker]="config?.entityIcon"
      [class.entity-selected]="config?.entityIcon && _value"
      (ngModelChange)="checkTerm($event)"
      [placeholder]="placeholder"
      (keydown)="onKeyDown($event)"
      (focus)="onFocus($event)"
      (click)="onFocus($event)"
      (blur)="onTouched($event)"
      autocomplete="off"
      #input
      [disabled]="disablePickerInput"
    />
    <i class="bhi-search" *ngIf="(!_value || clearValueOnSelect) && !disablePickerInput"></i>
    <i
      class="bhi-times"
      [class.entity-selected]="config?.entityIcon && _value"
      *ngIf="_value && !clearValueOnSelect && !disablePickerInput"
      (click)="clearValue(true)"
    ></i>
    <novo-overlay-template class="picker-results-container" [parent]="element" position="above-below" (closing)="onOverlayClosed()">
      <span #results></span>
      <ng-content></ng-content>
    </novo-overlay-template>
  `
            }] }
];
/** @nocollapse */
NovoPickerElement.ctorParameters = () => [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"] },
    { type: ComponentUtils },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectorRef"] }
];
NovoPickerElement.propDecorators = {
    results: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"], args: ['results', { read: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewContainerRef"], static: true },] }],
    config: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    placeholder: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    clearValueOnSelect: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    closeOnSelect: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    selected: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    appendToBody: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    parentScrollSelector: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    parentScrollAction: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    containerClass: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    side: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    autoSelectFirstOption: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    overrideElement: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    disablePickerInput: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    changed: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    select: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    focus: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    blur: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    typing: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    container: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"], args: [NovoOverlayTemplateComponent, { static: true },] }],
    input: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"], args: ['input', { static: true },] }]
};
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: elements/picker/extras/entity-picker-results/EntityPickerResults.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class EntityPickerResult {
    /**
     * @param {?} labels
     */
    constructor(labels) {
        this.labels = labels;
    }
    /**
     * \@description This function captures the whole query string and replace it with the string that will be used to
     * match.
     * @param {?} queryToEscape
     * @return {?}
     */
    escapeRegexp(queryToEscape) {
        // Ex: if the capture is "a" the result will be \a
        return queryToEscape.replace(/([.?*+^$[\]\\(){}|-])/g, '\\$1');
    }
    /**
     * \@description This function should return a <strong>-tag wrapped HTML string.
     * @param {?} match
     * @param {?} query
     * @return {?}
     */
    highlight(match, query) {
        // Replaces the capture string with a the same string inside of a "strong" tag
        return query && match ? match.replace(new RegExp(this.escapeRegexp(query.trim()), 'gi'), '<strong>$&</strong>') : match;
    }
    /**
     * @param {?=} result
     * @return {?}
     */
    getIconForResult(result) {
        if (result) {
            switch (result.searchEntity) {
                case 'ClientContact':
                    return 'person contact';
                case 'ClientCorporation':
                    return 'company';
                case 'Opportunity':
                    return 'opportunity';
                case 'Candidate':
                    return 'candidate';
                case 'Lead':
                    return 'lead';
                case 'JobOrder':
                    return 'job';
                case 'Placement':
                    return 'star placement';
                case 'CorporateUser':
                    return 'user';
                case 'CorporationDepartment':
                    return 'department';
                default:
                    return '';
            }
        }
        return '';
    }
    /**
     * @param {?=} date
     * @return {?}
     */
    renderTimestamp(date) {
        /** @type {?} */
        let timestamp = '';
        if (date) {
            timestamp = this.labels.formatDateWithFormat(date, { year: 'numeric', month: 'numeric', day: 'numeric' });
        }
        return timestamp;
    }
    /**
     * @param {?=} result
     * @return {?}
     */
    getNameForResult(result) {
        if (result) {
            switch (result.searchEntity) {
                case 'Lead':
                case 'CorporateUser':
                case 'ClientContact':
                case 'Candidate':
                case 'Person':
                    if ('firstName' in result) {
                        return `${result.firstName} ${result.lastName}`.trim();
                    }
                    return `${result.name || ''}`.trim();
                case 'ClientCorporation':
                    return `${result.name || ''}`.trim();
                case 'Opportunity':
                case 'JobOrder':
                    return `${result.id} | ${result.title || ''}`.trim();
                case 'Placement':
                    /** @type {?} */
                    let label = `${result.id}`;
                    if (result.candidate || result.jobOrder) {
                        if (result.candidate && result.jobOrder) {
                            label = `${label} | ${result.candidate.firstName} ${result.candidate.lastName} - ${result.jobOrder.title}`.trim();
                        }
                        else if (result.jobOrder) {
                            label = `${label} | ${result.jobOrder.title}`.trim();
                        }
                        else {
                            label = `${label} | ${result.candidate.firstName} ${result.candidate.lastName}`.trim();
                        }
                    }
                    return label;
                default:
                    return `${result.name || ''}`.trim();
            }
        }
        return '';
    }
}
EntityPickerResult.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'entity-picker-result',
                template: `
    <novo-list-item *ngIf="match.data">
      <item-header>
        <item-avatar [icon]="getIconForResult(match.data)"></item-avatar>
        <item-title> <span [innerHtml]="highlight(getNameForResult(match.data), term)"></span> </item-title>
      </item-header>
      <item-content direction="horizontal">
        <!-- COMPANY 1 -->
        <p class="company" *ngIf="match.data.companyName || match.data?.clientCorporation?.name">
          <i class="bhi-company"></i>
          <span [innerHtml]="highlight(match.data.companyName || match.data?.clientCorporation?.name, term)"></span>
        </p>
        <!-- CLIENT CONTACT -->
        <p class="contact" *ngIf="match.data?.clientContact?.firstName">
          <i class="bhi-person contact person"></i>
          <span [innerHtml]="highlight(match.data.clientContact.firstName + ' ' + match.data.clientContact.lastName, term)"></span>
        </p>
        <!-- CANDIDATE -->
        <p class="candidate" *ngIf="match.data.candidate && match.data.searchEntity === 'Placement'">
          <i class="bhi-candidate"></i>
          <span [innerHtml]="highlight(match.data.candidate.firstName + ' ' + match.data.candidate.lastName, term)"></span>
        </p>
        <!-- START & END DATE -->
        <p class="start-date" *ngIf="match.data.dateBegin && match.data.searchEntity === 'Placement'">
          <i class="bhi-calendar"></i>
          <span [innerHtml]="renderTimestamp(match.data.dateBegin) + ' - ' + renderTimestamp(match.data.dateEnd)"></span>
        </p>
        <!-- EMAIL -->
        <p class="email" *ngIf="match.data.email">
          <i class="bhi-email"></i> <span [innerHtml]="highlight(match.data.email, term)"></span>
        </p>
        <!-- PHONE -->
        <p class="phone" *ngIf="match.data.phone">
          <i class="bhi-phone"></i> <span [innerHtml]="highlight(match.data.phone, term)"></span>
        </p>
        <!-- ADDRESS -->
        <p class="location" *ngIf="match.data.address && (match.data.address.city || match.data.address.state)">
          <i class="bhi-location"></i> <span *ngIf="match.data.address.city" [innerHtml]="highlight(match.data.address.city, term)"></span>
          <span *ngIf="match.data.address.city && match.data.address.state">, </span>
          <span *ngIf="match.data.address.state" [innerHtml]="highlight(match.data.address.state, term)"></span>
        </p>
        <!-- STATUS -->
        <p class="status" *ngIf="match.data.status">
          <i class="bhi-info"></i> <span [innerHtml]="highlight(match.data.status, term)"></span>
        </p>
        <!-- OWNER -->
        <p class="owner" *ngIf="match.data.owner && match.data.owner.name && match.data.searchEntity === 'Candidate'">
          <i class="bhi-person"></i> <span [innerHtml]="highlight(match.data.owner.name, term)"></span>
        </p>
        <!-- PRIMARY DEPARTMENT -->
        <p
          class="primary-department"
          *ngIf="match.data.primaryDepartment && match.data.primaryDepartment.name && match.data.searchEntity === 'CorporateUser'"
        >
          <i class="bhi-department"></i> <span [innerHtml]="highlight(match.data.primaryDepartment.name, term)"></span>
        </p>
        <!-- OCCUPATION -->
        <p class="occupation" *ngIf="match.data.occupation && match.data.searchEntity === 'CorporateUser'">
          <i class="bhi-occupation"></i> <span [innerHtml]="highlight(match.data.occupation, term)"></span>
        </p>
      </item-content>
    </novo-list-item>
  `
            }] }
];
/** @nocollapse */
EntityPickerResult.ctorParameters = () => [
    { type: NovoLabelService }
];
EntityPickerResult.propDecorators = {
    match: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    term: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }]
};
if (false) {}
class EntityPickerResults extends BasePickerResults {
    /**
     * @param {?} element
     * @param {?} labels
     * @param {?} ref
     */
    constructor(element, labels, ref) {
        super(element, ref);
        this.labels = labels;
        this.select = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
    }
    /**
     * @return {?}
     */
    get hasNonErrorMessage() {
        return !this.isLoading && !this.matches.length && !this.hasError;
    }
    /**
     * @return {?}
     */
    getListElement() {
        return this.element.nativeElement.querySelector('novo-list');
    }
    /**
     * @param {?=} event
     * @param {?=} item
     * @return {?}
     */
    selectMatch(event, item) {
        this.select.next(item);
        return super.selectMatch(event, item);
    }
}
EntityPickerResults.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'entity-picker-results',
                template: `
    <novo-list *ngIf="matches.length > 0" direction="vertical">
      <entity-picker-result
        *ngFor="let match of matches"
        [match]="match"
        [term]="term"
        (click)="selectMatch($event, match)"
        [ngClass]="{ active: isActive(match) }"
        (mouseenter)="selectActive(match)"
        [class.disabled]="preselected(match)"
      >
      </entity-picker-result>
      <novo-loading theme="line" *ngIf="isLoading && matches.length > 0"></novo-loading>
    </novo-list>
    <p class="picker-error" *ngIf="hasError">{{ labels.pickerError }}</p>
    <p class="picker-null-results" *ngIf="hasNonErrorMessage && term !== ''">{{ labels.pickerEmpty }}</p>
    <p class="picker-null-results" *ngIf="hasNonErrorMessage && term === ''">{{ labels.pickerTextFieldEmpty }}</p>
  `
            }] }
];
/** @nocollapse */
EntityPickerResults.ctorParameters = () => [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"] },
    { type: NovoLabelService },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectorRef"] }
];
EntityPickerResults.propDecorators = {
    select: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }]
};
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: elements/picker/extras/checklist-picker-results/ChecklistPickerResults.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description This is the actual list of matches that gets injected into the DOM.
 */
class ChecklistPickerResults extends BasePickerResults {
    /**
     * @param {?} element
     * @param {?} labels
     * @param {?} ref
     */
    constructor(element, labels, ref) {
        super(element, ref);
        this.labels = labels;
    }
    /**
     * @return {?}
     */
    search() {
        /** @type {?} */
        const options = this.config.options;
        // only set this the first time
        return Object(rxjs__WEBPACK_IMPORTED_MODULE_11__["from"])(new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        (resolve, reject) => {
            // Check if there is match data
            if (options) {
                // Resolve the data
                if (Array.isArray(options)) {
                    this.isStatic = true;
                    // Arrays are returned immediately
                    resolve(options);
                }
                else {
                    // All other kinds of data are rejected
                    reject('The data provided is not an array or a promise');
                    throw new Error('The data provided is not an array or a promise');
                }
            }
            else {
                // No data gets rejected
                reject('error');
            }
        })));
    }
    /**
     * \@description This function loops through the picker options and creates a filtered list of objects that contain
     * the newSearch.
     * @param {?} matches - Collection of objects=
     *
     * @return {?}
     */
    filterData(matches) {
        if (this.term && matches) {
            this.filteredMatches = matches.map((/**
             * @param {?} section
             * @return {?}
             */
            (section) => {
                /** @type {?} */
                const items = section.originalData.filter((/**
                 * @param {?} match
                 * @return {?}
                 */
                (match) => {
                    return ~String(match.label)
                        .toLowerCase()
                        .indexOf(this.term.toLowerCase());
                }));
                section.data = items;
                return section;
            }), this);
            return this.filteredMatches;
        }
        else if (this.term === '') {
            matches.forEach((/**
             * @param {?} section
             * @return {?}
             */
            (section) => {
                section.data = section.originalData;
            }));
            return matches;
        }
        // Show no recent results template
        return matches;
    }
    /**
     * @param {?} event
     * @param {?} item
     * @return {?}
     */
    selectMatch(event, item) {
        Helpers.swallowEvent(event);
        if (item.indeterminate) {
            item.indeterminate = false;
            item.checked = true;
        }
        else {
            item.checked = !item.checked;
        }
        /** @type {?} */
        const selected = this.activeMatch;
        if (selected) {
            this.parent.value = selected;
        }
        this.ref.markForCheck();
        return false;
    }
}
ChecklistPickerResults.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'checklist-picker-results',
                host: {
                    class: 'active picker-results',
                },
                template: `
    <novo-loading theme="line" *ngIf="isLoading && !matches.length"></novo-loading>
    <ul *ngIf="matches.length > 0">
      <span *ngFor="let section of matches; let i = index">
        <li class="header caption" *ngIf="section.data.length > 0">{{ section.label || section.type }}</li>
        <li
          *ngFor="let match of section.data; let i = index"
          [ngClass]="{ checked: match.checked }"
          (click)="selectMatch($event, match)"
          [class.active]="match === activeMatch"
          (mouseenter)="selectActive(match)"
        >
          <label>
            <i
              [ngClass]="{
                'bhi-checkbox-empty': !match.checked,
                'bhi-checkbox-filled': match.checked,
                'bhi-checkbox-indeterminate': match.indeterminate
              }"
            ></i>
            {{ match.label }}
          </label>
        </li>
      </span>
    </ul>
    <p class="picker-error" *ngIf="hasError">{{ labels.pickerError }}</p>
    <p class="picker-null-results" *ngIf="!isLoading && !matches.length && !hasError && term !== ''">{{ labels.pickerEmpty }}</p>
  `
            }] }
];
/** @nocollapse */
ChecklistPickerResults.ctorParameters = () => [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"] },
    { type: NovoLabelService },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectorRef"] }
];
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: elements/picker/extras/grouped-multi-picker-results/GroupedMultiPickerResults.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class GroupedMultiPickerResults extends BasePickerResults {
    /**
     * @param {?} element
     * @param {?} renderer
     * @param {?} labels
     * @param {?} ref
     */
    constructor(element, renderer, labels, ref) {
        super(element, ref);
        this.renderer = renderer;
        this.labels = labels;
        this.customFilterEnabled = false;
        this.placeholder = '';
        this.internalMap = new Map();
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set term(value) {
        // Display all only will work for static categories
        if (this.config.displayAll && this.config.getItemsForCategoryAsync) {
            throw new Error('[GroupedMultiPickerResults] - you can only have `displayAll` with a static `categoryMap`. Not available with `getItemsForCategoryAsync`');
        }
        // Custom filter
        if (this.config.customFilter) {
            this.customFilterEnabled = true;
            this.customFilterLabel = this.config.customFilter.label;
            this.customFilterValue = !!this.config.customFilter.defaultFilterValue;
            this.ref.markForCheck();
            if (!this.customFilterLabel || !this.config.customFilter.matchFunction) {
                throw new Error('[GroupedMultiPickerResults] - custom filter/matchFunction set no label was provided!');
            }
        }
        else {
            this.customFilterEnabled = false;
        }
        // Configure ALL
        if (this.config.displayAll && !this.selectedCategory) {
            this.setAllCategory();
        }
        // Placeholder
        if (this.config.placeholder) {
            this.placeholder = this.config.placeholder;
        }
        // Focus
        setTimeout((/**
         * @return {?}
         */
        () => {
            this.inputElement.nativeElement.focus();
        }));
    }
    /**
     * @return {?}
     */
    get categories() {
        if (this.config.categories || this.config.categoryMap) {
            return (this.config.categories ||
                Array.from(this.config.categoryMap.values()).filter((/**
                 * @param {?} category
                 * @return {?}
                 */
                (category) => {
                    return category.value !== 'all';
                })));
        }
        return [];
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        // Subscribe to keyboard events and debounce
        this.keyboardSubscription = Object(rxjs__WEBPACK_IMPORTED_MODULE_11__["fromEvent"])(this.inputElement.nativeElement, 'keyup')
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_14__["debounceTime"])(350), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_14__["distinctUntilChanged"])())
            .subscribe((/**
         * @param {?} event
         * @return {?}
         */
        (event) => {
            this.searchTerm = event.target['value'];
            this.matches = this.filterData();
            this.ref.markForCheck();
        }));
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        // Cleanup
        this.keyboardSubscription.unsubscribe();
    }
    /**
     * @return {?}
     */
    setAllCategory() {
        // If we have display all, set the all categories up
        if (this.config.displayAll) {
            this.selectedCategory = { value: 'all', label: 'all' };
            /** @type {?} */
            const allItems = [];
            Array.from(this.config.categoryMap.values())
                .filter((/**
             * @param {?} category
             * @return {?}
             */
            (category) => {
                return category.value !== 'all';
            }))
                .forEach((/**
             * @param {?} v
             * @return {?}
             */
            (v) => allItems.push(...v.items)));
            this.matches = this.filter(allItems);
            this.config.categoryMap.set('all', { value: 'all', label: 'All', items: allItems });
            this.ref.markForCheck();
        }
    }
    /**
     * @param {?} category
     * @return {?}
     */
    selectCategory(category) {
        // Scroll to top
        this.renderer.setProperty(this.listElement.element.nativeElement, 'scrollTop', 0);
        // Set focus
        this.inputElement.nativeElement.focus();
        // Find new items
        /** @type {?} */
        const key = category.value;
        this.selectedCategory = category;
        // Clear
        this.matches = [];
        this.ref.markForCheck();
        // New matches
        this.getNewMatches(category, key);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    clearSearchTerm(event) {
        Helpers.swallowEvent(event);
        this.searchTerm = '';
        this.selectCategory({ value: this.selectedCategory.value, label: this.selectedCategory.label });
        this.ref.markForCheck();
    }
    /**
     * @param {?=} event
     * @param {?=} item
     * @return {?}
     */
    selectMatch(event, item) {
        // Set focus
        this.inputElement.nativeElement.focus();
        return super.selectMatch(event);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    fireCustomFilter(value) {
        this.customFilterValue = value;
        // Clear cache map
        this.internalMap.clear();
        // Only fire if we have a selected category
        if (this.selectCategory) {
            // Find new items
            /** @type {?} */
            const key = this.selectedCategory.value;
            // Get new matches
            this.getNewMatches(this.selectedCategory, key);
            this.ref.markForCheck();
        }
        // Focus
        setTimeout((/**
         * @return {?}
         */
        () => {
            this.inputElement.nativeElement.focus();
        }));
    }
    /**
     * @return {?}
     */
    filterData() {
        if (this.selectedCategory) {
            if (this.config.categoryMap) {
                return this.filter(this.config.categoryMap.get(this.selectedCategory.value).items);
            }
            else {
                return this.filter(this.internalMap.get(this.selectedCategory.value).items);
            }
        }
        return [];
    }
    /**
     * @private
     * @param {?} category
     * @param {?} key
     * @return {?}
     */
    getNewMatches(category, key) {
        // Get new matches
        if (this.config.categoryMap) {
            this.matches = this.filter(this.config.categoryMap.get(key).items);
            this.ref.markForCheck();
        }
        else {
            if (!this.config.getItemsForCategoryAsync) {
                throw new Error('The "config" for the Chips must include a function "getItemsForCategoryAsync(categoryKey: string)" to retrieve the items by category. Or if you have static data provide a "categoryMap"');
            }
            if (!this.internalMap.get(key)) {
                this.isLoading = true;
                this.config.getItemsForCategoryAsync(key, this.customFilterValue).then((/**
                 * @param {?} items
                 * @return {?}
                 */
                (items) => {
                    this.internalMap.set(key, { value: category.value, label: category.label, items });
                    this.matches = this.filter(items, true);
                    this.isLoading = false;
                    this.ref.markForCheck();
                    setTimeout((/**
                     * @return {?}
                     */
                    () => {
                        this.inputElement.nativeElement.focus();
                    }));
                }));
            }
            else {
                this.matches = this.filter(this.internalMap.get(key).items);
                this.ref.markForCheck();
            }
        }
    }
    /**
     * @private
     * @param {?} array
     * @param {?=} ignoreCustomFilter
     * @return {?}
     */
    filter(array, ignoreCustomFilter = false) {
        /** @type {?} */
        let matches = array;
        if (this.searchTerm && this.searchTerm.length !== 0 && this.selectedCategory) {
            matches = matches.filter((/**
             * @param {?} match
             * @return {?}
             */
            (match) => {
                /** @type {?} */
                const searchTerm = this.searchTerm.toLowerCase();
                return match.label.toLowerCase().indexOf(searchTerm) > -1 || match.value.toLowerCase().indexOf(searchTerm) > -1;
            }));
        }
        if (this.customFilterEnabled && this.config.customFilter.matchFunction && !ignoreCustomFilter) {
            matches = matches.filter((/**
             * @param {?} match
             * @return {?}
             */
            (match) => this.config.customFilter.matchFunction(match, this.customFilterValue)));
        }
        return matches;
    }
}
GroupedMultiPickerResults.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'grouped-multi-picker-results',
                template: `
        <div class="grouped-multi-picker-groups">
            <novo-list direction="vertical">
                <novo-list-item
                    *ngIf="config.displayAll"
                    (click)="selectCategory({ value: 'all', label: 'all' })"
                    [class.active]="selectedCategory?.value === 'all'"
                    data-automation-id="display-all"
                    [class.disabled]="isLoading">
                    <item-content>
                        <span data-automation-id="label">{{ labels.all }}</span>
                    </item-content>
                    <item-end>
                        <i class="bhi-next"></i>
                    </item-end>
                </novo-list-item>
                <novo-list-item
                    *ngFor="let category of categories"
                    (click)="selectCategory(category)"
                    [class.active]="selectedCategory?.value === category.value"
                    [attr.data-automation-id]="category.label"
                    [class.disabled]="isLoading">
                    <item-content>
                        <i *ngIf="category.iconClass" [class]="category.iconClass"></i>
                        <span data-automation-id="label">{{ category.label }}</span>
                    </item-content>
                    <item-end>
                        <i class="bhi-next"></i>
                    </item-end>
                </novo-list-item>
            </novo-list>
            <footer class="grouped-multi-picker-groups-footer" *ngIf="customFilterEnabled" data-automation-id="footer" [class.disabled]="isLoading">
                <novo-switch [(ngModel)]="customFilterValue" (onChange)="fireCustomFilter($event)" data-automation-id="switch"></novo-switch>
                <label data-automation-id="label">{{ customFilterLabel }}</label>
            </footer>
        </div>
        <div class="grouped-multi-picker-matches">
            <div class="grouped-multi-picker-input-container" [hidden]="!selectedCategory" data-automation-id="input-container">
                <input autofocus #input [(ngModel)]="searchTerm" [disabled]="isLoading" data-automation-id="input" [placeholder]="placeholder"/>
                <i class="bhi-search" *ngIf="!searchTerm" [class.disabled]="isLoading" data-automation-id="seach-icon"></i>
                <i class="bhi-times" *ngIf="searchTerm" (click)="clearSearchTerm($event)" [class.disabled]="isLoading" data-automation-id="remove-icon"></i>
            </div>
            <div class="grouped-multi-picker-list-container">
                <novo-list direction="vertical" #list>
                    <novo-list-item
                        *ngFor="let match of matches"
                        (click)="selectMatch($event)"
                        [class.active]="match === activeMatch"
                        (mouseenter)="selectActive(match)"
                        [class.disabled]="preselected(match) || isLoading"
                        [attr.data-automation-id]="match.label">
                        <item-content>
                            <span>{{ match.label }}</span>
                        </item-content>
                    </novo-list-item>
                </novo-list>
                <div class="grouped-multi-picker-no-results" *ngIf="matches.length === 0 && !isLoading && selectedCategory" data-automation-id="empty-message">
                    {{ labels.groupedMultiPickerEmpty }}
                </div>
                <div class="grouped-multi-picker-no-category" *ngIf="matches.length === 0 && !isLoading && !selectedCategory" data-automation-id="select-category-message">
                    {{ labels.groupedMultiPickerSelectCategory }}
                </div>
                <div class="grouped-multi-picker-loading" *ngIf="isLoading" data-automation-id="loading-message">
                    <novo-loading theme="line"></novo-loading>
                </div>
            </div>
        </div>
    `
            }] }
];
/** @nocollapse */
GroupedMultiPickerResults.ctorParameters = () => [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Renderer2"] },
    { type: NovoLabelService },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectorRef"] }
];
GroupedMultiPickerResults.propDecorators = {
    inputElement: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"], args: ['input', { static: true },] }],
    listElement: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"], args: ['list', { static: false },] }]
};
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: elements/picker/extras/skills-picker-results/SkillsSpecialtyPickerResults.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class SkillsSpecialtyPickerResults extends BasePickerResults {
    /**
     * @param {?} element
     * @param {?} labels
     * @param {?} ref
     */
    constructor(element, labels, ref) {
        super(element, ref);
        this.element = element;
        this.labels = labels;
        this.active = true;
        this.limitedTo = false;
        this.limit = 200;
    }
    /**
     * @return {?}
     */
    getListElement() {
        return this.element.nativeElement.querySelector('novo-list');
    }
    /**
     * \@name structureArray
     * \@description This function structures an array of nodes into an array of objects with a
     * 'name' field by default.
     * @param {?} collection - the data once getData resolves it
     *
     * @return {?}
     */
    structureArray(collection) {
        /** @type {?} */
        let data = collection;
        if (collection.hasOwnProperty('data')) {
            this.limitedTo = collection.limitedTo200;
            this.total = collection.total;
            data = collection.data;
        }
        else if (data.length > this.limit) {
            this.limitedTo = true;
            this.total = data.length;
            data = data.slice(0, this.limit);
        }
        return super.structureArray(data);
    }
}
SkillsSpecialtyPickerResults.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'skill-specialty-picker-results',
                template: `
    <section class="picker-loading" *ngIf="isLoading && !matches?.length"><novo-loading theme="line"></novo-loading></section>
    <novo-list *ngIf="matches.length > 0" direction="vertical">
      <novo-list-item
        *ngFor="let match of matches"
        (click)="selectMatch($event)"
        [class.active]="match === activeMatch"
        (mouseenter)="selectActive(match)"
        [class.disabled]="preselected(match)"
      >
        <item-content>
          <h6><span [innerHtml]="highlight(match.label, term)"></span></h6>
          <div class="category">
            <i class="bhi-category-tags"></i
            ><span [innerHtml]="highlight(match.data.categories || match.data.parentCategory.name, term)"></span>
          </div>
        </item-content>
      </novo-list-item>
      <novo-list-item *ngIf="limitedTo"
        ><div>{{ labels.showingXofXResults(limit, total) }}</div></novo-list-item
      >
      <novo-loading theme="line" *ngIf="isLoading && matches.length > 0"></novo-loading>
    </novo-list>
    <p class="picker-error" *ngIf="hasError">{{ labels.pickerError }}</p>
    <p class="picker-null" *ngIf="!isLoading && !matches.length && !hasError">{{ labels.pickerEmpty }}</p>
  `
            }] }
];
/** @nocollapse */
SkillsSpecialtyPickerResults.ctorParameters = () => [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"] },
    { type: NovoLabelService },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectorRef"] }
];
SkillsSpecialtyPickerResults.propDecorators = {
    active: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostBinding"], args: ['class.active',] }]
};
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: elements/picker/extras/distributionlist-picker-results/DistributionListPickerResults.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DistributionListPickerResults extends BasePickerResults {
    /**
     * @param {?} element
     * @param {?} sanitizer
     * @param {?} labels
     * @param {?} ref
     */
    constructor(element, sanitizer, labels, ref) {
        super(element, ref);
        this.sanitizer = sanitizer;
        this.labels = labels;
        this.active = true;
        this.sanitizer = sanitizer;
    }
    /**
     * @return {?}
     */
    get isHidden() {
        return this.matches.length === 0;
    }
    /**
     * @return {?}
     */
    getListElement() {
        return this.element.nativeElement.querySelector('novo-list');
    }
    /**
     * @param {?} html
     * @return {?}
     */
    sanitizeHTML(html) {
        return this.sanitizer.bypassSecurityTrustHtml(html);
    }
}
DistributionListPickerResults.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'distribution-list-picker-results',
                template: `
        <section class="picker-loading" *ngIf="isLoading && !matches?.length">
            <novo-loading theme="line"></novo-loading>
        </section>
        <novo-list direction="vertical" *ngIf="matches?.length > 0 && !hasError">
            <novo-list-item *ngFor="let match of matches" (click)="selectMatch($event)" [class.active]="match === activeMatch" (mouseenter)="selectActive(match)" [class.disabled]="preselected(match)">
                <item-header>
                    <item-title>
                        <span [innerHtml]="sanitizeHTML(match.label)"></span>
                    </item-title>
                </item-header>
                <item-content direction="horizontal">
                    <p>
                        <span class='label'>{{ labels.distributionListOwner }}: </span><span>{{ match?.data?.owner?.name }}</span>
                    </p>
                    <p>
                        <span class='label'>{{ labels.dateAdded }}: </span><span>{{ labels.formatDateWithFormat(match?.data?.dateAdded, { year: 'numeric', month: 'numeric', day: 'numeric' }) }}</span>
                    </p>
                </item-content>
            </novo-list-item>
            <novo-loading theme="line" *ngIf="isLoading && matches?.length > 0"></novo-loading>
        </novo-list>
    `
            }] }
];
/** @nocollapse */
DistributionListPickerResults.ctorParameters = () => [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"] },
    { type: _angular_platform_browser__WEBPACK_IMPORTED_MODULE_15__["DomSanitizer"] },
    { type: NovoLabelService },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectorRef"] }
];
DistributionListPickerResults.propDecorators = {
    active: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostBinding"], args: ['class.active',] }],
    isHidden: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostBinding"], args: ['hidden',] }]
};
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: elements/picker/extras/workers-comp-codes-picker-results/WorkersCompCodesPickerResults.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class WorkersCompCodesPickerResults extends BasePickerResults {
    /**
     * @param {?} element
     * @param {?} sanitizer
     * @param {?} labels
     * @param {?} ref
     */
    constructor(element, sanitizer, labels, ref) {
        super(element, ref);
        this.sanitizer = sanitizer;
        this.labels = labels;
        this.active = true;
        this.sanitizer = sanitizer;
    }
    /**
     * @return {?}
     */
    get isHidden() {
        return this.matches.length === 0;
    }
    /**
     * @return {?}
     */
    getListElement() {
        return this.element.nativeElement.querySelector('novo-list');
    }
    /**
     * @param {?} compCode
     * @param {?} name
     * @return {?}
     */
    sanitizeHTML(compCode, name) {
        return this.sanitizer.bypassSecurityTrustHtml(`${compCode} | ${name}`);
    }
}
WorkersCompCodesPickerResults.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'workers-comp-codes-picker-results',
                template: `
    <section class="picker-loading" *ngIf="isLoading && !matches?.length">
      <novo-loading theme="line"></novo-loading>
    </section>
    <novo-list direction="vertical" *ngIf="matches?.length > 0 && !hasError">
      <novo-list-item
        *ngFor="let match of matches"
        (click)="selectMatch($event)"
        [class.active]="match === activeMatch"
        (mouseenter)="selectActive(match)"
        [class.disabled]="preselected(match)"
      >
        <item-header>
          <item-title>
            <span [innerHtml]="sanitizeHTML(match?.data?.compensation?.code, match?.data?.compensation?.name)"></span>
          </item-title>
        </item-header>
        <item-content direction="horizontal">
          <p>
            <span class="label">{{ labels.state }}: </span><span>{{ match?.data?.compensation?.state }}</span>
          </p>
          <p>
            <span class="label">{{ labels.rate }}: </span><span>{{ labels.formatCurrency(match?.data?.rate) }}</span>
          </p>
        </item-content>
        <item-content direction="horizontal">
          <p>
            <span class="label">{{ labels.startDate }}: </span
            ><span>{{ labels.formatDateWithFormat(match?.data?.startDate, { year: 'numeric', month: 'numeric', day: 'numeric' }) }}</span>
          </p>
          <p>
            <span class="label">{{ labels.endDate }}: </span
            ><span>{{ labels.formatDateWithFormat(match?.data?.endDate, { year: 'numeric', month: 'numeric', day: 'numeric' }) }}</span>
          </p>
        </item-content>
      </novo-list-item>
      <novo-loading theme="line" *ngIf="isLoading && matches?.length > 0"></novo-loading>
    </novo-list>
  `
            }] }
];
/** @nocollapse */
WorkersCompCodesPickerResults.ctorParameters = () => [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"] },
    { type: _angular_platform_browser__WEBPACK_IMPORTED_MODULE_15__["DomSanitizer"] },
    { type: NovoLabelService },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectorRef"] }
];
WorkersCompCodesPickerResults.propDecorators = {
    active: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostBinding"], args: ['class.active',] }],
    isHidden: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostBinding"], args: ['hidden',] }]
};
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: elements/picker/Picker.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NovoPickerModule {
}
NovoPickerModule.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                imports: [_angular_common__WEBPACK_IMPORTED_MODULE_6__["CommonModule"], _angular_forms__WEBPACK_IMPORTED_MODULE_1__["FormsModule"], NovoLoadingModule, NovoListModule, NovoOverlayModule, NovoSwitchModule],
                declarations: [
                    NovoPickerElement,
                    PickerResults,
                    EntityPickerResult,
                    EntityPickerResults,
                    ChecklistPickerResults,
                    GroupedMultiPickerResults,
                    DistributionListPickerResults,
                    WorkersCompCodesPickerResults,
                    SkillsSpecialtyPickerResults,
                ],
                exports: [
                    NovoPickerElement,
                    PickerResults,
                    EntityPickerResult,
                    EntityPickerResults,
                    ChecklistPickerResults,
                    GroupedMultiPickerResults,
                    DistributionListPickerResults,
                    WorkersCompCodesPickerResults,
                    SkillsSpecialtyPickerResults,
                ],
                entryComponents: [
                    PickerResults,
                    EntityPickerResult,
                    EntityPickerResults,
                    ChecklistPickerResults,
                    GroupedMultiPickerResults,
                    DistributionListPickerResults,
                    WorkersCompCodesPickerResults,
                    SkillsSpecialtyPickerResults,
                ],
            },] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: elements/chips/RowChips.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// Value accessor for the component (supports ngModel)
/** @type {?} */
const CHIPS_VALUE_ACCESSOR$1 = {
    provide: _angular_forms__WEBPACK_IMPORTED_MODULE_1__["NG_VALUE_ACCESSOR"],
    useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["forwardRef"])((/**
     * @return {?}
     */
    () => NovoRowChipsElement)),
    multi: true,
};
class NovoRowChipElement extends NovoChipElement {
    /**
     * @param {?} e
     * @return {?}
     */
    onSelect(e) {
        return false;
    }
}
NovoRowChipElement.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'novo-row-chip',
                template: `<div class="novo-row-chips-columns"><ng-content></ng-content><i class="bhi-delete-o" *ngIf="!disabled" (click)="onRemove($event)"></i></div>`
            }] }
];
class NovoRowChipsElement extends NovoChipsElement {
    /**
     * @param {?} element
     * @param {?} componentUtils
     * @param {?} labels
     */
    constructor(element, componentUtils, labels) {
        super(element, componentUtils, labels);
        this.closeOnSelect = true;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onKeyDown(event) {
        return;
    }
}
NovoRowChipsElement.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'novo-row-chips',
                providers: [CHIPS_VALUE_ACCESSOR$1],
                host: {
                    '[class.with-value]': 'items.length > 0',
                },
                template: `
        <div class="novo-row-chips-columns" *ngIf="items.length > 0">
          <div class="column-label" *ngFor="let column of source.columns">{{ column.label }}</div>
        </div>
        <div class="novo-row-chips-empty-message" *ngIf="source.emptyReadOnlyMessage && disablePickerInput && items.length === 0">{{source.emptyReadOnlyMessage}}</div>
        <novo-row-chip
          *ngFor="let item of _items | async"
          [type]="type || item?.value?.searchEntity"
          [class.selected]="item == selected"
          [disabled]="disablePickerInput"
          (remove)="remove($event, item)"
          (select)="select($event, item)">
          <div class="column-data" *ngFor="let column of source.columns"><span>{{ column.data(item) }}</span></div>
        </novo-row-chip>
        <novo-picker
            clearValueOnSelect="true"
            [closeOnSelect]="closeOnSelect"
            [config]="source"
            [disablePickerInput]="disablePickerInput"
            [hidden]="disablePickerInput"
            [placeholder]="placeholder"
            [(ngModel)]="itemToAdd"
            (select)="add($event)"
            (keydown)="onKeyDown($event)"
            (focus)="onFocus($event)"
            (typing)="onTyping($event)"
            (blur)="onTouched($event)"
            [selected]="items"
            [overrideElement]="element"
            *ngIf="!maxlength || (maxlength && items.length < maxlength)">
        </novo-picker>
        <div class="preview-container">
            <span #preview></span>
        </div>
   `
            }] }
];
/** @nocollapse */
NovoRowChipsElement.ctorParameters = () => [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"] },
    { type: ComponentUtils },
    { type: NovoLabelService }
];
NovoRowChipsElement.propDecorators = {
    closeOnSelect: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }]
};
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: elements/chips/Chips.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NovoChipsModule {
}
NovoChipsModule.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                imports: [_angular_common__WEBPACK_IMPORTED_MODULE_6__["CommonModule"], _angular_forms__WEBPACK_IMPORTED_MODULE_1__["FormsModule"], NovoPickerModule],
                declarations: [NovoChipElement, NovoChipsElement, NovoRowChipElement, NovoRowChipsElement],
                exports: [NovoChipElement, NovoChipsElement, NovoRowChipElement, NovoRowChipsElement],
            },] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: elements/ckeditor/CKEditor.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// Value accessor for the component (supports ngModel)
/** @type {?} */
const CKEDITOR_CONTROL_VALUE_ACCESSOR = {
    provide: _angular_forms__WEBPACK_IMPORTED_MODULE_1__["NG_VALUE_ACCESSOR"],
    useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["forwardRef"])((/**
     * @return {?}
     */
    () => NovoCKEditorElement)),
    multi: true,
};
/**
 * CKEditor component
 * Usage :
 *  <novo-editor [(ngModel)]="data" [config]="{...}" debounce="500"></novo-editor>
 */
class NovoCKEditorElement {
    /**
     * @param {?} zone
     */
    constructor(zone) {
        this.zone = zone;
        this.startupFocus = false;
        this.fileBrowserImageUploadUrl = '';
        this.disabled = false;
        this.change = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.ready = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.blur = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.focus = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.paste = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.loaded = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this._value = '';
    }
    /**
     * @return {?}
     */
    get value() {
        return this._value;
    }
    /**
     * @param {?} v
     * @return {?}
     */
    set value(v) {
        if (v !== this._value) {
            this._value = v;
            this.onChange(v);
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.instance) {
            this.instance.focusManager.blur(true); // Remove focus from editor
            setTimeout((/**
             * @return {?}
             */
            () => {
                this.instance.removeAllListeners();
                /** @type {?} */
                const aInstance = CKEDITOR.instances[this.instance.name];
                if (aInstance) {
                    aInstance.destroy();
                }
                this.instance.destroy();
                this.instance = null;
            }));
        }
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        /** @type {?} */
        const config = Object.assign(this.getBaseConfig(), this.config);
        if (this.startupFocus) {
            config.startupFocus = true;
        }
        if (this.disabled) {
            config.readOnly = true;
        }
        this.ckeditorInit(config);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    updateValue(value) {
        this.zone.run((/**
         * @return {?}
         */
        () => {
            this.value = value;
            this.onChange(value);
            this.onTouched();
            this.change.emit(value);
        }));
    }
    /**
     * @private
     * @param {?} config
     * @return {?}
     */
    ckeditorInit(config) {
        if (!CKEDITOR) {
            console.error('Make sure to include CKEditor sources in your dependencies!');
            return;
        }
        // CKEditor replace textarea
        this.instance = CKEDITOR.replace(this.host.nativeElement, config);
        // Set initial value
        this.instance.setData(this.value);
        // listen for instanceReady event
        this.instance.on('instanceReady', (/**
         * @param {?} evt
         * @return {?}
         */
        (evt) => {
            // send the evt to the EventEmitter
            this.ready.emit(evt);
        }));
        // CKEditor change event
        this.instance.on('change', (/**
         * @return {?}
         */
        () => {
            this.onTouched();
            /** @type {?} */
            const value = this.instance.getData();
            // Debounce update
            if (this.debounce) {
                if (this.debounceTimeout) {
                    clearTimeout(this.debounceTimeout);
                }
                this.debounceTimeout = setTimeout((/**
                 * @return {?}
                 */
                () => {
                    this.updateValue(value);
                    this.debounceTimeout = null;
                }), parseInt(this.debounce, 10));
            }
            else {
                this.updateValue(value);
            }
        }));
        this.instance.on('blur', (/**
         * @param {?} event
         * @return {?}
         */
        (event) => {
            this.blur.emit(event);
        }));
        this.instance.on('focus', (/**
         * @param {?} event
         * @return {?}
         */
        (event) => {
            this.focus.emit(event);
        }));
        this.instance.on('paste', (/**
         * @param {?} event
         * @return {?}
         */
        (event) => {
            this.paste.emit(event);
        }));
        this.instance.on('loaded', (/**
         * @param {?} event
         * @return {?}
         */
        (event) => {
            this.loaded.emit(event);
        }));
    }
    /**
     * @return {?}
     */
    getBaseConfig() {
        /** @type {?} */
        const baseConfig = {
            enterMode: CKEDITOR.ENTER_BR,
            shiftEnterMode: CKEDITOR.ENTER_P,
            disableNativeSpellChecker: false,
            removePlugins: 'liststyle,tabletools,contextmenu',
            // allows browser based spell checking
            extraAllowedContent: '*(*){*};table tbody tr td th[*];',
            // allows class names (*) and inline styles {*} for all and attributes [*] on tables
            font_names: 'Arial/Arial, Helvetica, sans-serif;' +
                'Calibri/Calibri, Verdana, Geneva, sans-serif;' +
                'Comic Sans MS/Comic Sans MS, cursive;' +
                'Courier New/Courier New, Courier, monospace;' +
                'Georgia/Georgia, serif;' +
                'Lucida Sans Unicode/Lucida Sans Unicode, Lucida Grande, sans-serif;' +
                'Tahoma/Tahoma, Geneva, sans-serif;' +
                'Times New Roman/Times New Roman, Times, serif;' +
                'Trebuchet MS/Trebuchet MS, Helvetica, sans-serif;' +
                'Verdana/Verdana, Geneva, sans-serif',
        };
        /** @type {?} */
        const minimalConfig = {
            toolbar: [
                {
                    name: 'basicstyles',
                    items: [
                        'Styles',
                        'FontSize',
                        'Bold',
                        'Italic',
                        'Underline',
                        'TextColor',
                        '-',
                        'NumberedList',
                        'BulletedList',
                        'Outdent',
                        'Indent',
                        'Link',
                    ],
                },
            ],
        };
        /** @type {?} */
        const extendedConfig = {
            toolbar: [
                { name: 'clipboard', items: ['Paste', 'PasteText', 'PasteFromWord', 'Undo', 'Redo'] },
                {
                    name: 'paragraph',
                    items: [
                        'NumberedList',
                        'BulletedList',
                        'Outdent',
                        'Indent',
                        'Blockquote',
                        'JustifyLeft',
                        'JustifyCenter',
                        'JustifyRight',
                        'JustifyBlock',
                        'BidiLtr',
                        'BidiRtl',
                    ],
                },
                { name: 'links', items: ['Link'] },
                { name: 'insert', items: ['Image', 'Table', 'HorizontalRule'] },
                { name: 'tools', items: ['Maximize', 'Source'] },
                '/',
                { name: 'basicstyles', items: ['Bold', 'Italic', 'Underline', 'Strike', 'Subscript', 'Superscript'] },
                { name: 'styles', items: ['Styles', 'Format', 'Font', 'FontSize'] },
                { name: 'colors', items: ['TextColor', 'BGColor'] },
            ],
            filebrowserImageUploadUrl: this.fileBrowserImageUploadUrl,
        };
        return Object.assign(baseConfig, this.minimal ? minimalConfig : extendedConfig);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        this._value = value;
        if (this.instance) {
            this.instance.setData(value);
        }
    }
    /**
     * @param {?=} value
     * @return {?}
     */
    onChange(value) { }
    /**
     * @param {?=} event
     * @return {?}
     */
    onTouched(event) { }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.onChange = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    /**
     * @param {?} disabled
     * @return {?}
     */
    setDisabledState(disabled) {
        this.disabled = disabled;
        if (this.instance) {
            CKEDITOR.instances[this.instance.name].setReadOnly(disabled);
        }
    }
    /**
     * @param {?} text
     * @return {?}
     */
    insertText(text) {
        /** @type {?} */
        const trimmedText = text.trim();
        this.instance.insertText(trimmedText);
    }
}
NovoCKEditorElement.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'novo-editor',
                providers: [CKEDITOR_CONTROL_VALUE_ACCESSOR],
                template: '<textarea [name]="name" [id]="name" #host></textarea>'
            }] }
];
/** @nocollapse */
NovoCKEditorElement.ctorParameters = () => [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgZone"] }
];
NovoCKEditorElement.propDecorators = {
    config: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    debounce: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    name: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    minimal: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    startupFocus: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    fileBrowserImageUploadUrl: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    disabled: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    change: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    ready: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    blur: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    focus: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    paste: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    loaded: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    host: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"], args: ['host', { static: false },] }],
    value: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }]
};
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: elements/ckeditor/CKEditor.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NovoNovoCKEditorModule {
}
NovoNovoCKEditorModule.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                imports: [_angular_common__WEBPACK_IMPORTED_MODULE_6__["CommonModule"], _angular_forms__WEBPACK_IMPORTED_MODULE_1__["FormsModule"]],
                declarations: [NovoCKEditorElement],
                exports: [NovoCKEditorElement],
            },] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: elements/common/novo-template/novo-template.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NovoTemplate {
    /**
     * @param {?} template
     */
    constructor(template) {
        this.template = template;
    }
    /**
     * @return {?}
     */
    getType() {
        return this.name;
    }
}
NovoTemplate.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{
                selector: '[novoTemplate]',
            },] }
];
/** @nocollapse */
NovoTemplate.ctorParameters = () => [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["TemplateRef"] }
];
NovoTemplate.propDecorators = {
    type: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    name: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"], args: ['novoTemplate',] }]
};
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: elements/common/common.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NovoCommonModule {
}
NovoCommonModule.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                imports: [_angular_common__WEBPACK_IMPORTED_MODULE_6__["CommonModule"]],
                exports: [NovoTemplate],
                declarations: [NovoTemplate],
            },] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: elements/data-table/services/data-table-filter-utils.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NovoDataTableFilterUtils {
    /**
     * @param {?=} filter
     * @param {?=} type
     * @param {?=} multiSelect
     * @return {?}
     */
    static constructFilter(filter, type, multiSelect) {
        /** @type {?} */
        let actualFilter = filter;
        if (filter) {
            if (type && type === 'date') {
                if (filter.startDate && filter.endDate) {
                    actualFilter = {
                        min: Object(date_fns__WEBPACK_IMPORTED_MODULE_10__["startOfDay"])(filter.startDate.date),
                        max: Object(date_fns__WEBPACK_IMPORTED_MODULE_10__["startOfDay"])(Object(date_fns__WEBPACK_IMPORTED_MODULE_10__["addDays"])(Object(date_fns__WEBPACK_IMPORTED_MODULE_10__["startOfDay"])(filter.endDate.date), 1)),
                    };
                }
                else {
                    actualFilter = {
                        min: filter.min ? Object(date_fns__WEBPACK_IMPORTED_MODULE_10__["addDays"])(Object(date_fns__WEBPACK_IMPORTED_MODULE_10__["startOfToday"])(), filter.min) : Object(date_fns__WEBPACK_IMPORTED_MODULE_10__["startOfToday"])(),
                        max: filter.max ? Object(date_fns__WEBPACK_IMPORTED_MODULE_10__["addDays"])(Object(date_fns__WEBPACK_IMPORTED_MODULE_10__["endOfToday"])(), filter.max) : Object(date_fns__WEBPACK_IMPORTED_MODULE_10__["endOfToday"])(),
                    };
                }
            }
            if (multiSelect && Array.isArray(filter)) {
                actualFilter = filter.map((/**
                 * @param {?} filterItem
                 * @return {?}
                 */
                (filterItem) => {
                    if (filterItem && filterItem.hasOwnProperty('value')) {
                        return filterItem.value;
                    }
                    return filterItem;
                }));
            }
            else if (actualFilter && actualFilter.hasOwnProperty('value')) {
                actualFilter = filter.value;
            }
        }
        return actualFilter;
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: elements/data-table/state/data-table-state.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @template T
 */
class DataTableState {
    constructor() {
        this.selectionSource = new rxjs__WEBPACK_IMPORTED_MODULE_11__["Subject"]();
        this.paginationSource = new rxjs__WEBPACK_IMPORTED_MODULE_11__["Subject"]();
        this.sortFilterSource = new rxjs__WEBPACK_IMPORTED_MODULE_11__["Subject"]();
        this.resetSource = new rxjs__WEBPACK_IMPORTED_MODULE_11__["Subject"]();
        this.expandSource = new rxjs__WEBPACK_IMPORTED_MODULE_11__["Subject"]();
        this.dataLoaded = new rxjs__WEBPACK_IMPORTED_MODULE_11__["Subject"]();
        this.sort = undefined;
        this.filter = undefined;
        this.page = 0;
        this.pageSize = undefined;
        this.globalSearch = undefined;
        this.selectedRows = new Map();
        this.expandedRows = new Set();
        this.isForceRefresh = false;
        this.updates = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
    }
    /**
     * @return {?}
     */
    get userFiltered() {
        return !!(this.filter || this.sort || this.globalSearch || this.outsideFilter);
    }
    /**
     * @return {?}
     */
    get userFilteredInternal() {
        return !!(this.filter || this.sort || this.globalSearch);
    }
    /**
     * @return {?}
     */
    get selected() {
        return Array.from(this.selectedRows.values());
    }
    /**
     * @param {?=} fireUpdate
     * @param {?=} persistUserFilters
     * @return {?}
     */
    reset(fireUpdate = true, persistUserFilters) {
        if (!persistUserFilters) {
            this.sort = undefined;
            this.globalSearch = undefined;
            this.filter = undefined;
        }
        this.page = 0;
        this.selectedRows.clear();
        this.resetSource.next();
        this.onSortFilterChange();
        if (fireUpdate) {
            this.updates.emit({
                sort: this.sort,
                filter: this.filter,
                globalSearch: this.globalSearch,
            });
        }
    }
    /**
     * @param {?=} fireUpdate
     * @return {?}
     */
    clearSort(fireUpdate = true) {
        this.sort = undefined;
        this.page = 0;
        this.selectedRows.clear();
        this.resetSource.next();
        this.onSortFilterChange();
        if (fireUpdate) {
            this.updates.emit({
                sort: this.sort,
                filter: this.filter,
                globalSearch: this.globalSearch,
            });
        }
    }
    /**
     * @param {?=} fireUpdate
     * @return {?}
     */
    clearFilter(fireUpdate = true) {
        this.filter = undefined;
        this.globalSearch = undefined;
        this.page = 0;
        this.selectedRows.clear();
        this.resetSource.next();
        this.onSortFilterChange();
        if (fireUpdate) {
            this.updates.emit({
                sort: this.sort,
                filter: this.filter,
                globalSearch: this.globalSearch,
            });
        }
    }
    /**
     * @return {?}
     */
    onSelectionChange() {
        this.selectionSource.next();
    }
    /**
     * @param {?=} targetId
     * @return {?}
     */
    onExpandChange(targetId) {
        this.expandSource.next(targetId);
    }
    /**
     * @param {?} isPageSizeChange
     * @param {?} pageSize
     * @return {?}
     */
    onPaginationChange(isPageSizeChange, pageSize) {
        this.paginationSource.next({ isPageSizeChange, pageSize });
    }
    /**
     * @return {?}
     */
    onSortFilterChange() {
        this.sortFilterSource.next({
            sort: this.sort,
            filter: this.filter,
            globalSearch: this.globalSearch,
        });
    }
    /**
     * @param {?} preferences
     * @return {?}
     */
    setInitialSortFilter(preferences) {
        if (preferences) {
            if (preferences.sort) {
                this.sort = preferences.sort;
            }
            if (preferences.filter) {
                /** @type {?} */
                const filters = Helpers.convertToArray(preferences.filter);
                filters.forEach((/**
                 * @param {?} filter
                 * @return {?}
                 */
                (filter) => {
                    filter.value =
                        filter.selectedOption && filter.type
                            ? NovoDataTableFilterUtils.constructFilter(filter.selectedOption, filter.type)
                            : filter.value;
                }));
                this.filter = filters;
            }
        }
    }
}
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: elements/data-table/data-table-clear-button.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @template T
 */
class NovoDataTableClearButton {
    /**
     * @param {?} state
     * @param {?} ref
     * @param {?} labels
     */
    constructor(state, ref, labels) {
        this.state = state;
        this.ref = ref;
        this.labels = labels;
        this.sortClear = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.filterClear = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.allClear = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
    }
    /**
     * @return {?}
     */
    clearSort() {
        this.state.clearSort();
        this.sortClear.emit(true);
    }
    /**
     * @return {?}
     */
    clearFilter() {
        this.state.clearFilter();
        this.filterClear.emit(true);
    }
    /**
     * @return {?}
     */
    clearAll() {
        this.state.reset();
        this.allClear.emit(true);
        this.sortClear.emit(true);
        this.filterClear.emit(true);
    }
}
NovoDataTableClearButton.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'novo-data-table-clear-button',
                template: `
    <novo-dropdown side="bottom-right" class="novo-data-table-clear-button" data-automation-id="novo-data-table-clear-dropdown">
      <button type="button" theme="primary" color="negative" icon="collapse" data-automation-id="novo-data-table-clear-dropdown-btn">{{ labels.clear }}</button>
      <list>
          <item *ngIf="state.sort" (click)="clearSort()" data-automation-id="novo-data-table-clear-dropdown-clear-sort">{{ labels.clearSort }}</item>
          <item *ngIf="state.filter" (click)="clearFilter()" data-automation-id="novo-data-table-clear-dropdown-clear-filter">{{ labels.clearFilter }}</item>
          <item *ngIf="state.sort && state.filter" (click)="clearAll()" data-automation-id="novo-data-table-clear-dropdown-clear-all">{{ labels.clearAllNormalCase }}</item>
      </list>
    </novo-dropdown>
  `,
                changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectionStrategy"].OnPush
            }] }
];
/** @nocollapse */
NovoDataTableClearButton.ctorParameters = () => [
    { type: DataTableState },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectorRef"] },
    { type: NovoLabelService }
];
NovoDataTableClearButton.propDecorators = {
    sortClear: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    filterClear: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    allClear: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }]
};
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: elements/data-table/data-table.source.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @template T
 */
class DataTableSource extends _angular_cdk_table__WEBPACK_IMPORTED_MODULE_16__["DataSource"] {
    /**
     * @param {?} tableService
     * @param {?} state
     * @param {?} ref
     */
    constructor(tableService, state, ref) {
        super();
        this.tableService = tableService;
        this.state = state;
        this.ref = ref;
        this.total = 0;
        this.currentTotal = 0;
        this.current = 0;
        this.loading = false;
        this.pristine = true;
        this.totalSet = false;
    }
    /**
     * @return {?}
     */
    get totallyEmpty() {
        return this.total === 0;
    }
    /**
     * @return {?}
     */
    get currentlyEmpty() {
        return this.current === 0;
    }
    /**
     * @return {?}
     */
    connect() {
        /** @type {?} */
        const displayDataChanges = [this.state.updates];
        return Object(rxjs__WEBPACK_IMPORTED_MODULE_11__["merge"])(...displayDataChanges).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_14__["startWith"])(null), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_14__["switchMap"])((/**
         * @return {?}
         */
        () => {
            this.pristine = false;
            this.loading = true;
            return this.tableService.getTableResults(this.state.sort, this.state.filter, this.state.page, this.state.pageSize, this.state.globalSearch, this.state.outsideFilter);
        })), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_14__["map"])((/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            if (!this.totalSet || this.state.isForceRefresh) {
                this.total = data.total;
                this.totalSet = true;
                this.state.isForceRefresh = false;
            }
            else if (data.total > this.total) {
                this.total = data.total;
            }
            this.currentTotal = data.total;
            this.current = data.results.length;
            this.data = data.results;
            // Clear selection
            this.state.selectedRows.clear();
            this.state.onSelectionChange();
            // Mark changes
            setTimeout((/**
             * @return {?}
             */
            () => {
                this.ref.markForCheck();
                setTimeout((/**
                 * @return {?}
                 */
                () => {
                    this.loading = false;
                    this.state.dataLoaded.next();
                    this.ref.markForCheck();
                }));
            }));
            return data.results;
        })), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_14__["catchError"])((/**
         * @param {?} err
         * @param {?} caught
         * @return {?}
         */
        (err, caught) => {
            console.error(err, caught); // tslint: disable-line
            this.loading = false;
            return Object(rxjs__WEBPACK_IMPORTED_MODULE_11__["of"])(null);
        })));
    }
    /**
     * @return {?}
     */
    disconnect() { }
}
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: elements/data-table/services/static-data-table.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @template T
 */
class StaticDataTableService {
    /**
     * @param {?=} currentData
     */
    constructor(currentData = []) {
        this.currentData = currentData;
        this.originalData = [...currentData];
    }
    /**
     * @param {?} sort
     * @param {?} filter
     * @param {?=} page
     * @param {?=} pageSize
     * @param {?=} globalSearch
     * @param {?=} outsideFilter
     * @return {?}
     */
    getTableResults(sort, filter, page = 0, pageSize, globalSearch, outsideFilter) {
        this.currentData = [...this.originalData];
        /** @type {?} */
        let total = this.originalData.length;
        if (this.currentData.length !== 0) {
            if (globalSearch) {
                this.currentData = this.currentData.filter((/**
                 * @param {?} item
                 * @return {?}
                 */
                (item) => Object.keys(item).some((/**
                 * @param {?} key
                 * @return {?}
                 */
                (key) => `${item[key]}`.toLowerCase().includes(globalSearch.toLowerCase())))));
                total = this.currentData.length;
            }
            if (filter) {
                this.currentData = this.filterData(this.currentData, filter);
                total = this.currentData.length;
            }
            if (sort) {
                this.currentData = this.currentData.sort(Helpers.sortByField(sort.id, sort.value === 'desc'));
                total = this.currentData.length;
            }
            if (!sort && !filter && !globalSearch && !outsideFilter) {
                this.currentData = [...this.originalData];
            }
            if (!Helpers.isBlank(page) && !Helpers.isBlank(pageSize)) {
                this.currentData = this.currentData.slice(page * pageSize, (page + 1) * pageSize);
            }
        }
        return Object(rxjs__WEBPACK_IMPORTED_MODULE_11__["of"])({ results: this.currentData, total });
    }
    /**
     * @param {?} currentData
     * @param {?} filter
     * @return {?}
     */
    filterData(currentData, filter) {
        /** @type {?} */
        const filters = Helpers.convertToArray(filter);
        filters.forEach((/**
         * @param {?} aFilter
         * @return {?}
         */
        (aFilter) => {
            if (Array.isArray(aFilter.value)) {
                /** @type {?} */
                const values = Helpers.convertToArray(aFilter.value).map(Helpers.escapeString);
                currentData = currentData.filter(Helpers.filterByField(aFilter.id, values));
            }
            else {
                /** @type {?} */
                const value = Helpers.escapeString(aFilter.value);
                currentData = currentData.filter(Helpers.filterByField(aFilter.id, value));
            }
        }));
        return currentData;
    }
}
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: elements/dropdown/Dropdown.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NovoDropdownElement {
    /**
     * @param {?} element
     * @param {?} ref
     */
    constructor(element, ref) {
        this.element = element;
        this.ref = ref;
        this.parentScrollAction = 'close';
        this.side = 'default';
        this.scrollStrategy = 'reposition';
        this.width = -1; // Defaults to dynamic width (no hardcoded width value and no host width lookup)
        // Defaults to dynamic width (no hardcoded width value and no host width lookup)
        this.appendToBody = false; // Deprecated
        // Deprecated
        this.toggled = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.activeIndex = -1;
        this.filterTerm = '';
        this.clickHandler = this.togglePanel.bind(this);
        this.closeHandler = this.closePanel.bind(this);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.appendToBody) {
            notify(`'appendToBody' has been deprecated. Please remove this attribute.`);
        }
        // Add a click handler to the button to toggle the menu
        /** @type {?} */
        const button = this.element.nativeElement.querySelector('button');
        button.addEventListener('click', this.clickHandler);
        if (this.parentScrollSelector) {
            this.parentScrollElement = Helpers.findAncestor(this.element.nativeElement, this.parentScrollSelector);
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        // Remove listener
        /** @type {?} */
        const button = this.element.nativeElement.querySelector('button');
        if (button) {
            button.removeEventListener('click', this.clickHandler);
        }
        if (this.parentScrollElement && this.parentScrollAction === 'close') {
            this.parentScrollElement.removeEventListener('scroll', this.closeHandler);
        }
    }
    /**
     * @param {?} items
     * @return {?}
     */
    set items(items) {
        this._items = items;
        this.activeIndex = -1;
        // Get the innerText of all the items to allow for searching
        this._textItems = items.map((/**
         * @param {?} item
         * @return {?}
         */
        (item) => {
            return item.element.nativeElement.innerText;
        }));
    }
    /**
     * BEGIN: Convenient Panel Methods.
     * @return {?}
     */
    get panelOpen() {
        return this.overlay && this.overlay.panelOpen;
    }
    /**
     * @return {?}
     */
    openPanel() {
        this.overlay.openPanel();
        if (this.parentScrollElement && this.parentScrollAction === 'close') {
            this.parentScrollElement.addEventListener('scroll', this.closeHandler);
        }
        this.toggled.emit(true);
    }
    /**
     * @return {?}
     */
    closePanel() {
        this.overlay.closePanel();
        if (this.parentScrollElement && this.parentScrollAction === 'close') {
            this.parentScrollElement.removeEventListener('scroll', this.closeHandler);
        }
        // Clear active index
        if (this.activeIndex !== -1) {
            this._items.toArray()[this.activeIndex].active = false;
        }
        this.activeIndex = -1;
        this.ref.markForCheck();
        this.toggled.emit(false);
    }
    /**
     * @return {?}
     */
    togglePanel() {
        this.panelOpen ? this.closePanel() : this.openPanel();
    }
    /**
     * END: Convenient Panel Methods.
     * @param {?} event
     * @return {?}
     */
    onKeyDown(event) {
        if (this.panelOpen && event.keyCode === KeyCodes.ESC) {
            Helpers.swallowEvent(event);
            // active & esc hit -- close
            this.closePanel();
        }
        else if (event.keyCode === KeyCodes.ENTER) {
            Helpers.swallowEvent(event);
            // enter -- perform the "click"
            this._items.toArray()[this.activeIndex].onClick(event);
        }
        else if (event.keyCode === KeyCodes.DOWN) {
            Helpers.swallowEvent(event);
            // down - navigate through the list ignoring disabled ones
            if (this.activeIndex !== -1) {
                this._items.toArray()[this.activeIndex].active = false;
            }
            this.activeIndex++;
            if (this.activeIndex === this._items.length) {
                this.activeIndex = 0;
            }
            while (this._items.toArray()[this.activeIndex].disabled) {
                this.activeIndex++;
                if (this.activeIndex === this._items.length) {
                    this.activeIndex = 0;
                }
            }
            this._items.toArray()[this.activeIndex].active = true;
            this.scrollToActive();
        }
        else if (event.keyCode === KeyCodes.UP) {
            Helpers.swallowEvent(event);
            // up -- navigate through the list ignoring disabled ones
            if (this.activeIndex !== -1) {
                this._items.toArray()[this.activeIndex].active = false;
            }
            this.activeIndex--;
            if (this.activeIndex < 0) {
                this.activeIndex = this._items.length - 1;
            }
            while (this._items.toArray()[this.activeIndex].disabled) {
                this.activeIndex--;
                if (this.activeIndex < 0) {
                    this.activeIndex = this._items.length - 1;
                }
            }
            this._items.toArray()[this.activeIndex].active = true;
            this.scrollToActive();
        }
        else if ((event.keyCode >= 65 && event.keyCode <= 90) ||
            (event.keyCode >= 96 && event.keyCode <= 105) ||
            (event.keyCode >= 48 && event.keyCode <= 57) ||
            event.keyCode === KeyCodes.SPACE) {
            Helpers.swallowEvent(event);
            // A-Z, 0-9, space -- filter the list and scroll to active filter
            // filter has hard reset after 2s
            clearTimeout(this.filterTermTimeout);
            this.filterTermTimeout = setTimeout((/**
             * @return {?}
             */
            () => {
                this.filterTerm = '';
            }), 2000);
            /** @type {?} */
            const char = String.fromCharCode(event.keyCode);
            this.filterTerm = this.filterTerm.concat(char);
            /** @type {?} */
            const index = this._textItems.findIndex((/**
             * @param {?} value
             * @return {?}
             */
            (value) => {
                return new RegExp(`^${this.filterTerm.toLowerCase()}`).test(value.trim().toLowerCase());
            }));
            if (index !== -1) {
                if (this.activeIndex !== -1) {
                    this._items.toArray()[this.activeIndex].active = false;
                }
                this.activeIndex = index;
                this._items.toArray()[this.activeIndex].active = true;
                this.scrollToActive();
            }
        }
        else if ([KeyCodes.BACKSPACE, KeyCodes.DELETE].includes(event.keyCode)) {
            Helpers.swallowEvent(event);
            // backspace, delete -- remove partial filters
            clearTimeout(this.filterTermTimeout);
            this.filterTermTimeout = setTimeout((/**
             * @return {?}
             */
            () => {
                this.filterTerm = '';
            }), 2000);
            this.filterTerm = this.filterTerm.slice(0, -1);
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onOverlayKeyDown(event) {
        if (event.keyCode === KeyCodes.ESC || event.keyCode === KeyCodes.ENTER) {
            Helpers.swallowEvent(event);
            this.closePanel();
        }
    }
    /**
     * @private
     * @return {?}
     */
    scrollToActive() {
        /** @type {?} */
        const container = this.overlay.overlayRef.overlayElement.querySelector('.dropdown-container');
        /** @type {?} */
        const item = this._items.toArray()[this.activeIndex];
        if (container && item) {
            container.scrollTop = item.element.nativeElement.offsetTop;
        }
    }
}
NovoDropdownElement.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'novo-dropdown',
                template: `
    <ng-content select="button" #trigger></ng-content>
    <novo-overlay-template [parent]="element" [width]="width" [position]="side" [scrollStrategy]="scrollStrategy">
      <div
        class="dropdown-container {{ containerClass }}"
        [style.height.px]="height"
        [class.has-height]="!!height"
        (keydown)="onOverlayKeyDown($event)"
      >
        <ng-content></ng-content>
      </div>
    </novo-overlay-template>
  `
            }] }
];
/** @nocollapse */
NovoDropdownElement.ctorParameters = () => [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectorRef"] }
];
NovoDropdownElement.propDecorators = {
    parentScrollSelector: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    parentScrollAction: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    containerClass: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    side: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    scrollStrategy: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    height: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    width: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    appendToBody: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    toggled: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    overlay: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"], args: [NovoOverlayTemplateComponent, { static: false },] }],
    onKeyDown: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostListener"], args: ['keydown', ['$event'],] }]
};
if (false) {}
class NovoItemElement {
    /**
     * @param {?} dropdown
     * @param {?} element
     */
    constructor(dropdown, element) {
        this.dropdown = dropdown;
        this.element = element;
        this.keepOpen = false;
        this.action = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.active = false;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onClick(event) {
        // Poor man's disable
        if (!this.disabled) {
            // Close if keepOpen is false
            if (!this.keepOpen) {
                this.dropdown.closePanel();
            }
            // Emit the action
            this.action.emit({ originalEvent: event });
        }
    }
}
NovoItemElement.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'item',
                template: '<ng-content></ng-content>',
                host: {
                    '[class.disabled]': 'disabled',
                    '[class.active]': 'active',
                }
            }] }
];
/** @nocollapse */
NovoItemElement.ctorParameters = () => [
    { type: NovoDropdownElement },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"] }
];
NovoItemElement.propDecorators = {
    disabled: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    keepOpen: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    action: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    onClick: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostListener"], args: ['click', ['$event'],] }]
};
if (false) {}
class NovoDropdownListElement {
    /**
     * @param {?} dropdown
     */
    constructor(dropdown) {
        this.dropdown = dropdown;
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        this.dropdown.items = this.items;
        this.items.changes.subscribe((/**
         * @return {?}
         */
        () => {
            this.dropdown.items = this.items;
        }));
    }
}
NovoDropdownListElement.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'list',
                template: '<ng-content></ng-content>'
            }] }
];
/** @nocollapse */
NovoDropdownListElement.ctorParameters = () => [
    { type: NovoDropdownElement }
];
NovoDropdownListElement.propDecorators = {
    items: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ContentChildren"], args: [NovoItemElement,] }]
};
if (false) {}
class NovoDropDownItemHeaderElement {
}
NovoDropDownItemHeaderElement.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'dropdown-item-header',
                template: '<ng-content></ng-content>'
            }] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: elements/data-table/sort-filter/sort-filter.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @template T
 */
class NovoDataTableSortFilter {
    /**
     * @param {?} state
     */
    constructor(state) {
        this.state = state;
    }
    /**
     * @param {?} id
     * @param {?} type
     * @param {?} value
     * @param {?} transform
     * @param {?=} allowMultipleFilters
     * @param {?=} selectedOption
     * @return {?}
     */
    filter(id, type, value, transform, allowMultipleFilters = false, selectedOption) {
        /** @type {?} */
        let filter;
        if (allowMultipleFilters) {
            filter = this.resolveMultiFilter(id, type, value, transform, selectedOption);
        }
        else {
            if (!Helpers.isBlank(value)) {
                filter = Object.assign({ id, type, value, transform }, (selectedOption && { selectedOption }));
            }
            else {
                filter = undefined;
            }
        }
        this.state.filter = filter;
        this.state.reset(false, true);
        this.state.updates.next({ filter, sort: this.state.sort });
        this.state.onSortFilterChange();
    }
    /**
     * @param {?} id
     * @param {?} value
     * @param {?} transform
     * @return {?}
     */
    sort(id, value, transform) {
        /** @type {?} */
        const sort = { id, value, transform };
        this.state.sort = sort;
        this.state.reset(false, true);
        this.state.updates.next({ sort, filter: this.state.filter });
        this.state.onSortFilterChange();
    }
    /**
     * @param {?} id
     * @param {?} type
     * @param {?} value
     * @param {?} transform
     * @param {?} selectedOption
     * @return {?}
     */
    resolveMultiFilter(id, type, value, transform, selectedOption) {
        /** @type {?} */
        let filter;
        filter = Helpers.convertToArray(this.state.filter);
        /** @type {?} */
        const filterIndex = filter.findIndex((/**
         * @param {?} aFilter
         * @return {?}
         */
        (aFilter) => aFilter && aFilter.id === id));
        if (filterIndex > -1) {
            filter.splice(filterIndex, 1);
        }
        if (!Helpers.isBlank(value)) {
            filter = [...filter, Object.assign({ id, type, value, transform }, (selectedOption && { selectedOption }))];
        }
        if (filter.length < 1) {
            filter = undefined;
        }
        return filter;
    }
}
NovoDataTableSortFilter.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{
                selector: '[novoDataTableSortFilter]',
            },] }
];
/** @nocollapse */
NovoDataTableSortFilter.ctorParameters = () => [
    { type: DataTableState }
];
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: elements/data-table/cell-headers/data-table-header-cell.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @template T
 */
class NovoDataTableCellHeader {
    /**
     * @param {?} changeDetectorRef
     * @param {?} labels
     * @param {?} state
     * @param {?} renderer
     * @param {?} elementRef
     * @param {?} _sort
     * @param {?} _cdkColumnDef
     */
    constructor(changeDetectorRef, labels, state, renderer, elementRef, _sort, _cdkColumnDef) {
        this.changeDetectorRef = changeDetectorRef;
        this.labels = labels;
        this.state = state;
        this.renderer = renderer;
        this.elementRef = elementRef;
        this._sort = _sort;
        this._cdkColumnDef = _cdkColumnDef;
        this.allowMultipleFilters = false;
        this.icon = 'sortable';
        this.filterActive = false;
        this.sortActive = false;
        this.showCustomRange = false;
        this.multiSelect = false;
        this.multiSelectedOptions = [];
        this.multiSelectedOptionIsHidden = [];
        this.optionFilter = '';
        this.error = false;
        this.subscriptions = [];
        this._rerenderSubscription = state.updates.subscribe((/**
         * @param {?} change
         * @return {?}
         */
        (change) => this.checkSortFilterState(change)));
    }
    /**
     * @param {?} column
     * @return {?}
     */
    set column(column) {
        this._column = column;
        this.label = column.type === 'action' ? '' : column.label;
        this.labelIcon = column.labelIcon;
        this.config = {
            sortable: !!column.sortable,
            filterable: !!column.filterable,
            resizable: !!column.resizable,
        };
        this.resizable = this.config.resizable;
        /** @type {?} */
        const transforms = {};
        if (column.filterable && Helpers.isObject(column.filterable)) {
            this.config.filterConfig = (/** @type {?} */ (column.filterable));
            if (!this.config.filterConfig.type) {
                this.config.filterConfig = { type: 'text' };
            }
            if (((/** @type {?} */ (column.filterable))).transform) {
                transforms.filter = ((/** @type {?} */ (column.filterable))).transform;
            }
        }
        else {
            this.config.filterConfig = { type: 'text' };
        }
        if (column.sortable && Helpers.isObject(column.sortable)) {
            if (((/** @type {?} */ (column.sortable))).transform) {
                transforms.sort = ((/** @type {?} */ (column.sortable))).transform;
            }
        }
        if (this.config.filterConfig.type === 'date' && !this.config.filterConfig.options) {
            this.config.filterConfig.options = this.getDefaultDateFilterOptions();
        }
        this.config.transforms = transforms;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this._cdkColumnDef) {
            this.id = this._cdkColumnDef.name;
        }
        this.setupFilterOptions();
        this.changeDetectorRef.markForCheck();
    }
    /**
     * @return {?}
     */
    setupFilterOptions() {
        this.checkSortFilterState({ filter: this.state.filter, sort: this.state.sort }, true);
        this.multiSelect = this.config.filterConfig && this.config.filterConfig.type ? this.config.filterConfig.type === 'multi-select' : false;
        if (this.multiSelect) {
            this.multiSelectedOptions = this.filter ? [...this.filter] : [];
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this._rerenderSubscription.unsubscribe();
        this.subscriptions.forEach((/**
         * @param {?} subscription
         * @return {?}
         */
        (subscription) => {
            subscription.unsubscribe();
        }));
    }
    /**
     * @param {?} sortFilterState
     * @param {?=} initialConfig
     * @return {?}
     */
    checkSortFilterState(sortFilterState, initialConfig = false) {
        if (sortFilterState.sort && sortFilterState.sort.id === this.id) {
            this.icon = `sort-${sortFilterState.sort.value}`;
            this.sortActive = true;
        }
        else {
            this.icon = 'sortable';
            this.sortActive = false;
        }
        /** @type {?} */
        const tableFilter = Helpers.convertToArray(sortFilterState.filter);
        /** @type {?} */
        const thisFilter = tableFilter.find((/**
         * @param {?} filter
         * @return {?}
         */
        (filter) => filter && filter.id === this.id));
        if (thisFilter) {
            this.filterActive = true;
            if (initialConfig && thisFilter.type === 'date' && thisFilter.selectedOption) {
                this.activeDateFilter = thisFilter.selectedOption.label || this.labels.customDateRange;
            }
            this.filter = thisFilter.value;
        }
        else {
            this.filterActive = false;
            this.filter = undefined;
            this.activeDateFilter = undefined;
            this.multiSelectedOptions = [];
        }
        if (this.defaultSort && this.id === this.defaultSort.id) {
            this.icon = `sort-${this.defaultSort.value}`;
            this.sortActive = true;
        }
        this.multiSelect = this.config.filterConfig && this.config.filterConfig.type ? this.config.filterConfig.type === 'multi-select' : false;
        if (this.multiSelect) {
            this.multiSelectedOptions = this.filter ? [...this.filter] : [];
            if (this.config.filterConfig.options) {
                if (typeof this.config.filterConfig.options[0] === 'string') {
                    this.multiSelectedOptionIsHidden = ((/** @type {?} */ (this.config.filterConfig.options))).map((/**
                     * @param {?} option
                     * @return {?}
                     */
                    (option) => ({ option, hidden: false })));
                }
                else {
                    this.multiSelectedOptionIsHidden = ((/** @type {?} */ (this.config.filterConfig.options))).map((/**
                     * @param {?} option
                     * @return {?}
                     */
                    (option) => ({
                        option,
                        hidden: false,
                    })));
                }
            }
        }
        this.changeDetectorRef.markForCheck();
    }
    /**
     * @param {?} option
     * @param {?} optionsList
     * @return {?}
     */
    isSelected(option, optionsList) {
        if (optionsList) {
            /** @type {?} */
            const optionValue = option.hasOwnProperty('value') ? option.value : option;
            /** @type {?} */
            const found = optionsList.find((/**
             * @param {?} item
             * @return {?}
             */
            (item) => this.optionPresentCheck(item, optionValue)));
            return found !== undefined;
        }
        return false;
    }
    /**
     * @param {?} option
     * @return {?}
     */
    toggleSelection(option) {
        /** @type {?} */
        const optionValue = option.hasOwnProperty('value') ? option.value : option;
        /** @type {?} */
        const optionIndex = this.multiSelectedOptions.findIndex((/**
         * @param {?} item
         * @return {?}
         */
        (item) => this.optionPresentCheck(item, optionValue)));
        this.error = false;
        if (optionIndex > -1) {
            this.multiSelectedOptions.splice(optionIndex, 1);
            if (this.optionFilter &&
                !this.getOptionText(option)
                    .toLowerCase()
                    .startsWith(this.optionFilter.toLowerCase())) {
                this.multiSelectedOptionIsHidden[this.multiSelectedOptionIsHidden.findIndex((/**
                 * @param {?} record
                 * @return {?}
                 */
                (record) => record.option === option))].hidden = true;
            }
        }
        else {
            this.multiSelectedOptions.push(optionValue);
        }
    }
    /**
     * @param {?} item
     * @param {?} optionValue
     * @return {?}
     */
    optionPresentCheck(item, optionValue) {
        if (item.hasOwnProperty('value')) {
            return item.value === optionValue;
        }
        else {
            return item === optionValue;
        }
    }
    /**
     * @return {?}
     */
    cancel() {
        this.multiSelectedOptions = this.filter ? [...this.filter] : [];
        this.dropdown.closePanel();
        this.clearOptionFilter();
    }
    /**
     * @return {?}
     */
    filterMultiSelect() {
        if (this.multiSelectedOptions.length === 0 && !this.filter) {
            this.multiSelectHasVisibleOptions() && this.dropdown ? (this.error = true) : null;
        }
        else {
            this.clearOptionFilter();
            /** @type {?} */
            const actualFilter = this.multiSelectedOptions.length > 0 ? [...this.multiSelectedOptions] : undefined;
            this.filterData(actualFilter);
            this.dropdown.closePanel();
        }
    }
    /**
     * @param {?} optionFilter
     * @return {?}
     */
    multiSelectOptionFilter(optionFilter) {
        this.multiSelectedOptionIsHidden.forEach((/**
         * @param {?} record
         * @return {?}
         */
        (record) => {
            if (record.option) {
                record.hidden = !(this.getOptionText(record.option)
                    .toLowerCase()
                    .startsWith(optionFilter.toLowerCase()) || this.isSelected(record.option, this.multiSelectedOptions));
            }
        }));
    }
    /**
     * @param {?} option
     * @return {?}
     */
    multiSelectOptionIsHidden(option) {
        return this.multiSelectedOptionIsHidden.find((/**
         * @param {?} record
         * @return {?}
         */
        (record) => record.option === option)).hidden;
    }
    /**
     * @return {?}
     */
    multiSelectHasVisibleOptions() {
        return this.multiSelectedOptionIsHidden.some((/**
         * @param {?} record
         * @return {?}
         */
        (record) => !record.hidden));
    }
    /**
     * @private
     * @param {?} option
     * @return {?}
     */
    getOptionText(option) {
        if (typeof option !== 'object') {
            return option.toString();
        }
        else {
            /** @type {?} */
            const opt = (/** @type {?} */ (option));
            return (opt.label.length > 0 ? opt.label : opt.value).toString();
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    multiSelectOptionFilterHandleKeydown(event) {
        if (this.multiSelect) {
            this.error = false;
            if (this.dropdown.panelOpen && event.keyCode === KeyCodes.ESC) {
                // escape = clear text box and close
                Helpers.swallowEvent(event);
                this.clearOptionFilter();
                this.dropdown.closePanel();
            }
            else if (event.keyCode === KeyCodes.ENTER) {
                Helpers.swallowEvent(event);
                this.filterMultiSelect();
            }
            else if ((event.keyCode >= 65 && event.keyCode <= 90) ||
                (event.keyCode >= 96 && event.keyCode <= 105) ||
                (event.keyCode >= 48 && event.keyCode <= 57)) {
                this.optionFilterInput.nativeElement.focus();
            }
        }
    }
    /**
     * @private
     * @return {?}
     */
    clearOptionFilter() {
        this.error = false;
        if (this.optionFilter.length > 0) {
            this.optionFilter = '';
            this.multiSelectedOptionIsHidden.forEach((/**
             * @param {?} record
             * @return {?}
             */
            (record) => {
                record.hidden = false;
            }));
        }
    }
    /**
     * @param {?} mouseDownEvent
     * @return {?}
     */
    startResize(mouseDownEvent) {
        mouseDownEvent.preventDefault();
        /** @type {?} */
        const minimumWidth = 60 + (this.config.filterable ? 30 : 0) + (this.config.sortable ? 30 : 0);
        /** @type {?} */
        const startingWidth = this.elementRef.nativeElement.getBoundingClientRect().width;
        /** @type {?} */
        const mouseMoveSubscription = Object(rxjs__WEBPACK_IMPORTED_MODULE_11__["fromEvent"])(window.document, 'mousemove').subscribe((/**
         * @param {?} middleMouseEvent
         * @return {?}
         */
        (middleMouseEvent) => {
            /** @type {?} */
            const differenceWidth = middleMouseEvent.clientX - mouseDownEvent.clientX;
            /** @type {?} */
            let width = startingWidth + differenceWidth;
            if (width < minimumWidth) {
                width = minimumWidth;
            }
            this._column.width = width;
            this.renderer.setStyle(this.elementRef.nativeElement, 'min-width', `${this._column.width}px`);
            this.renderer.setStyle(this.elementRef.nativeElement, 'max-width', `${this._column.width}px`);
            this.renderer.setStyle(this.elementRef.nativeElement, 'width', `${this._column.width}px`);
            this.changeDetectorRef.markForCheck();
            this.resized.next(this._column);
        }));
        /** @type {?} */
        const mouseUpSubscription = Object(rxjs__WEBPACK_IMPORTED_MODULE_11__["fromEvent"])(window.document, 'mouseup').subscribe((/**
         * @return {?}
         */
        () => {
            mouseUpSubscription.unsubscribe();
            mouseMoveSubscription.unsubscribe();
            this.changeDetectorRef.markForCheck();
        }));
        this.subscriptions.push(mouseMoveSubscription);
        this.subscriptions.push(mouseUpSubscription);
    }
    /**
     * @param {?} event
     * @param {?} value
     * @return {?}
     */
    toggleCustomRange(event, value) {
        Helpers.swallowEvent(event);
        this.showCustomRange = value;
        this.changeDetectorRef.markForCheck();
        this.dropdown.openPanel(); // Ensures that the panel correctly updates to the dynamic size of the dropdown
    }
    /**
     * @return {?}
     */
    focusInput() {
        if (this.filterInput && this.filterInput.nativeElement) {
            setTimeout((/**
             * @return {?}
             */
            () => this.filterInput.nativeElement.focus()), 0);
        }
        if (this.multiSelect && this.dropdown) {
            this.dropdown.onKeyDown = (/**
             * @param {?} event
             * @return {?}
             */
            (event) => {
                this.multiSelectOptionFilterHandleKeydown(event);
            });
            setTimeout((/**
             * @return {?}
             */
            () => this.optionFilterInput.nativeElement.focus()), 0);
            this.changeDetectorRef.markForCheck();
        }
    }
    /**
     * @return {?}
     */
    sort() {
        if (this.changeTimeout) {
            clearTimeout(this.changeTimeout);
        }
        this.changeTimeout = setTimeout((/**
         * @return {?}
         */
        () => {
            this.direction = this.getNextSortDirection(this.direction);
            this._sort.sort(this.id, this.direction, this.config.transforms.sort);
            this.changeDetectorRef.markForCheck();
        }), 300);
    }
    /**
     * @param {?=} filter
     * @return {?}
     */
    filterData(filter) {
        /** @type {?} */
        let actualFilter = NovoDataTableFilterUtils.constructFilter(filter, this.config.filterConfig.type, this.multiSelect);
        /** @type {?} */
        const selectedOption = this.config.filterConfig.type === 'date' && filter ? filter : undefined;
        if (this.changeTimeout) {
            clearTimeout(this.changeTimeout);
        }
        this.changeTimeout = setTimeout((/**
         * @return {?}
         */
        () => {
            if (actualFilter === '') {
                actualFilter = undefined;
            }
            this._sort.filter(this.id, this.config.filterConfig.type, actualFilter, this.config.transforms.filter, this.allowMultipleFilters, selectedOption);
            this.changeDetectorRef.markForCheck();
        }), 300);
    }
    /**
     * @return {?}
     */
    clearFilter() {
        this.filter = undefined;
        this.multiSelectedOptions = [];
        this.activeDateFilter = undefined;
        this.filterData(undefined);
        this.clearOptionFilter();
        this.dropdown.closePanel();
    }
    /**
     * @private
     * @param {?} direction
     * @return {?}
     */
    getNextSortDirection(direction) {
        if (!direction) {
            return 'asc';
        }
        if (direction === 'asc') {
            return 'desc';
        }
        return 'asc';
    }
    /**
     * @private
     * @return {?}
     */
    getDefaultDateFilterOptions() {
        /** @type {?} */
        const opts = [
            { label: this.labels.past1Day, min: -1, max: 0 },
            { label: this.labels.past7Days, min: -7, max: 0 },
            { label: this.labels.past30Days, min: -30, max: 0 },
            { label: this.labels.past90Days, min: -90, max: 0 },
            { label: this.labels.past1Year, min: -366, max: 0 },
            { label: this.labels.next1Day, min: 0, max: 1 },
            { label: this.labels.next7Days, min: 0, max: 7 },
            { label: this.labels.next30Days, min: 0, max: 30 },
            { label: this.labels.next90Days, min: 0, max: 90 },
            { label: this.labels.next1Year, min: 0, max: 366 },
        ];
        return opts;
    }
}
NovoDataTableCellHeader.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: '[novo-data-table-cell-config]',
                template: `
    <i class="bhi-{{ labelIcon }} label-icon" *ngIf="labelIcon" data-automation-id="novo-data-table-header-icon"></i>
    <label data-automation-id="novo-data-table-label">{{ label }}</label>
    <div>
      <button
        *ngIf="config.sortable"
        tooltipPosition="right"
        [tooltip]="labels.sort"
        theme="icon"
        [icon]="icon"
        (click)="sort()"
        [class.active]="sortActive"
        data-automation-id="novo-data-table-sort"
        [attr.data-feature-id]="'novo-data-table-sort-' + this.id"
      ></button>
      <novo-dropdown
        *ngIf="config.filterable"
        side="right"
        parentScrollSelector=".novo-data-table-container"
        containerClass="data-table-dropdown"
        data-automation-id="novo-data-table-filter"
      >
        <button
          type="button"
          theme="icon"
          icon="filter"
          [class.active]="filterActive"
          (click)="focusInput()"
          tooltipPosition="right"
          [tooltip]="labels.filters"
          [attr.data-feature-id]="'novo-data-table-filter-' + this.id"
        ></button>
        <div class="header">
          <span>{{ labels.filters }}</span>
          <button
            theme="dialogue"
            color="negative"
            icon="times"
            (click)="clearFilter()"
            *ngIf="filter !== null && filter !== undefined && filter !== ''"
            data-automation-id="novo-data-table-filter-clear"
          >
            {{ labels.clear }}
          </button>
        </div>
        <ng-container [ngSwitch]="config.filterConfig.type">
          <list *ngSwitchCase="'date'">
            <ng-container *ngIf="!showCustomRange">
              <item
                [class.active]="activeDateFilter === option.label"
                *ngFor="let option of config.filterConfig.options"
                (click)="filterData(option)"
                [attr.data-automation-id]="'novo-data-table-filter-' + option.label"
              >
                {{ option.label }} <i class="bhi-check" *ngIf="activeDateFilter === option.label"></i>
              </item>
            </ng-container>
            <item
              [class.active]="labels.customDateRange === activeDateFilter"
              (click)="toggleCustomRange($event, true)"
              *ngIf="config.filterConfig.allowCustomRange && !showCustomRange"
              [keepOpen]="true"
            >
              {{ labels.customDateRange }} <i class="bhi-check" *ngIf="labels.customDateRange === activeDateFilter"></i>
            </item>
            <div class="calendar-container" *ngIf="showCustomRange">
              <div (click)="toggleCustomRange($event, false)"><i class="bhi-previous"></i>{{ labels.backToPresetFilters }}</div>
              <novo-date-picker (onSelect)="filterData($event)" [(ngModel)]="filter" range="true"></novo-date-picker>
            </div>
          </list>
          <list *ngSwitchCase="'select'">
            <item
              [class.active]="filter === option"
              *ngFor="let option of config.filterConfig.options"
              (click)="filterData(option)"
              [attr.data-automation-id]="'novo-data-table-filter-' + (option?.label || option)"
            >
              <span>{{ option?.label || option }}</span>
              <i class="bhi-check" *ngIf="option.hasOwnProperty('value') ? filter === option.value : filter === option"></i>
            </item>
          </list>
          <list *ngSwitchCase="'multi-select'">
            <div class="dropdown-list-filter" (keydown)="multiSelectOptionFilterHandleKeydown($event)">
              <item class="filter-search" keepOpen="true">
                <input
                  [(ngModel)]="optionFilter"
                  (ngModelChange)="multiSelectOptionFilter($event)"
                  #optionFilterInput
                  data-automation-id="novo-data-table-multi-select-option-filter-input"
                />
                <i class="bhi-search"></i>
                <span class="error-text" [hidden]="!error || !multiSelectHasVisibleOptions()">{{ labels.selectFilterOptions }}</span>
              </item>
            </div>
            <div class="dropdown-list-options">
              <item
                *ngFor="let option of config.filterConfig.options"
                [hidden]="multiSelectOptionIsHidden(option)"
                (click)="toggleSelection(option)"
                [attr.data-automation-id]="'novo-data-table-filter-' + (option?.label || option)"
                [keepOpen]="true"
              >
                <span>{{ option?.label || option }}</span>
                <i
                  [class.bhi-checkbox-empty]="!isSelected(option, multiSelectedOptions)"
                  [class.bhi-checkbox-filled]="isSelected(option, multiSelectedOptions)"
                ></i>
              </item>
            </div>
            <p class="filter-null-results" [hidden]="multiSelectHasVisibleOptions()">{{ labels.pickerEmpty }}</p>
          </list>
          <list *ngSwitchCase="'custom'">
            <item class="filter-search" keepOpen="true">
              <ng-container *ngTemplateOutlet="filterTemplate; context: { $implicit: config }"></ng-container>
            </item>
          </list>
          <list *ngSwitchDefault>
            <item class="filter-search" keepOpen="true">
              <input
                [type]="config.filterConfig.type"
                [(ngModel)]="filter"
                (ngModelChange)="filterData($event)"
                #filterInput
                data-automation-id="novo-data-table-filter-input"
              />
            </item>
          </list>
        </ng-container>
        <div class="footer" *ngIf="multiSelect">
          <button theme="dialogue" color="dark" (click)="cancel()" data-automation-id="novo-data-table-multi-select-cancel">
            {{ labels.cancel }}
          </button>
          <button theme="dialogue" color="positive" (click)="filterMultiSelect()" data-automation-id="novo-data-table-multi-select-filter">
            {{ labels.filters }}
          </button>
        </div>
      </novo-dropdown>
    </div>
    <div class="spacer"></div>
    <div class="data-table-header-resizable" *ngIf="config.resizable"><span (mousedown)="startResize($event)">&nbsp;</span></div>
  `,
                changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectionStrategy"].OnPush
            }] }
];
/** @nocollapse */
NovoDataTableCellHeader.ctorParameters = () => [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectorRef"] },
    { type: NovoLabelService },
    { type: DataTableState },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Renderer2"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"] },
    { type: NovoDataTableSortFilter, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"] }] },
    { type: _angular_cdk_table__WEBPACK_IMPORTED_MODULE_16__["CdkColumnDef"], decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"] }] }
];
NovoDataTableCellHeader.propDecorators = {
    filterInput: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"], args: ['filterInput', { static: false },] }],
    dropdown: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"], args: [NovoDropdownElement, { static: false },] }],
    optionFilterInput: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"], args: ['optionFilterInput', { static: false },] }],
    defaultSort: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    allowMultipleFilters: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    resized: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    filterTemplate: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    resizable: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostBinding"], args: ['class.resizable',] }],
    column: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"], args: ['novo-data-table-cell-config',] }],
    multiSelectOptionFilterHandleKeydown: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostListener"], args: ['keydown', ['$event'],] }]
};
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: elements/data-table/data-table.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @template T
 */
class NovoDataTable {
    /**
     * @param {?} labels
     * @param {?} ref
     * @param {?} state
     */
    constructor(labels, ref, state) {
        this.labels = labels;
        this.ref = ref;
        this.state = state;
        this.globalSearchHiddenClassToggle = false;
        this.resized = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.name = 'novo-data-table';
        this.allowMultipleFilters = false;
        this.rowIdentifier = 'id';
        this.activeRowIdentifier = '';
        // prettier-ignore
        this.trackByFn = (/**
         * @param {?} index
         * @param {?} item
         * @return {?}
         */
        (index, item) => item.id);
        this.templates = {};
        this.fixedHeader = false;
        this._hideGlobalSearch = true;
        this.preferencesChanged = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.loading = true;
        this.columnToTemplate = {};
        this.columnsLoaded = false;
        this.selection = new Set();
        this.scrollLeft = 0;
        this.expandable = false;
        this.initialized = false;
        this.scrollListenerHandler = this.scrollListener.bind(this);
        this.sortFilterSubscription = this.state.sortFilterSource.subscribe((/**
         * @param {?} event
         * @return {?}
         */
        (event) => {
            if (this.name !== 'novo-data-table') {
                this.preferencesChanged.emit({ name: this.name, sort: event.sort, filter: event.filter, globalSearch: event.globalSearch });
                this.performInteractions('change');
            }
            else {
                notify('Must have [name] set on data-table to use preferences!');
            }
        }));
        this.paginationSubscription = this.state.paginationSource.subscribe((/**
         * @param {?} event
         * @return {?}
         */
        (event) => {
            if (this.name !== 'novo-data-table') {
                if (event.isPageSizeChange) {
                    this.preferencesChanged.emit({ name: this.name, pageSize: event.pageSize });
                }
            }
            else {
                notify('Must have [name] set on data-table to use preferences!');
            }
        }));
        this.resetSubscription = this.state.resetSource.subscribe((/**
         * @return {?}
         */
        () => {
            setTimeout((/**
             * @return {?}
             */
            () => {
                this.ref.detectChanges();
            }), 300);
        }));
    }
    /**
     * @param {?} displayedColumns
     * @return {?}
     */
    set displayedColumns(displayedColumns) {
        if (this.displayedColumns && this.displayedColumns.length !== 0) {
            if (this.name !== 'novo-data-table') {
                this.preferencesChanged.emit({
                    name: this.name,
                    displayedColumns,
                });
            }
            else {
                notify('Must have [name] set on data-table to use preferences!');
            }
        }
        this._disabledColumns = displayedColumns;
        this.configureLastDisplayedColumn();
        if (this.initialized) {
            setTimeout((/**
             * @return {?}
             */
            () => {
                this.scrollListener();
            }));
        }
    }
    /**
     * @return {?}
     */
    get displayedColumns() {
        return this._disabledColumns;
    }
    /**
     * @param {?} service
     * @return {?}
     */
    set dataTableService(service) {
        this.loading = false;
        if (!service) {
            service = new StaticDataTableService([]);
        }
        this.dataSource = new DataTableSource(service, this.state, this.ref);
        this.ref.detectChanges();
    }
    /**
     * @param {?} rows
     * @return {?}
     */
    set rows(rows) {
        this.loading = false;
        /** @type {?} */
        const service = new StaticDataTableService(rows);
        this.dataSource = new DataTableSource(service, this.state, this.ref);
        this.ref.detectChanges();
    }
    /**
     * @param {?} outsideFilter
     * @return {?}
     */
    set outsideFilter(outsideFilter) {
        // Unsubscribe
        if (this.outsideFilterSubscription) {
            this.outsideFilterSubscription.unsubscribe();
        }
        if (outsideFilter) {
            // Re-subscribe
            this.outsideFilterSubscription = outsideFilter.subscribe((/**
             * @param {?} filter
             * @return {?}
             */
            (filter) => {
                this.state.outsideFilter = filter;
                this.state.updates.next({ globalSearch: this.state.globalSearch, filter: this.state.filter, sort: this.state.sort });
                this.ref.markForCheck();
            }));
        }
    }
    /**
     * @param {?} refreshSubject
     * @return {?}
     */
    set refreshSubject(refreshSubject) {
        // Unsubscribe
        if (this.refreshSubscription) {
            this.refreshSubscription.unsubscribe();
        }
        if (refreshSubject) {
            // Re-subscribe
            this.refreshSubscription = refreshSubject.subscribe((/**
             * @param {?} filter
             * @return {?}
             */
            (filter) => {
                this.state.isForceRefresh = true;
                this.state.updates.next({ globalSearch: this.state.globalSearch, filter: this.state.filter, sort: this.state.sort });
                this.ref.markForCheck();
            }));
        }
    }
    /**
     * @param {?} columns
     * @return {?}
     */
    set columns(columns) {
        this._columns = columns;
        this.configureColumns();
        this.performInteractions('init');
    }
    /**
     * @return {?}
     */
    get columns() {
        return this._columns;
    }
    /**
     * @param {?} v
     * @return {?}
     */
    set customFilter(v) {
        this._customFilter = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_12__["coerceBooleanProperty"])(v);
    }
    /**
     * @return {?}
     */
    get customFilter() {
        return this._customFilter;
    }
    /**
     * @param {?} v
     * @return {?}
     */
    set hasExandedRows(v) {
        this._hasExandedRows = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_12__["coerceBooleanProperty"])(v);
    }
    /**
     * @return {?}
     */
    get hasExandedRows() {
        return this._hasExandedRows;
    }
    /**
     * @param {?} v
     * @return {?}
     */
    set forceShowHeader(v) {
        this._forceShowHeader = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_12__["coerceBooleanProperty"])(v);
    }
    /**
     * @return {?}
     */
    get forceShowHeader() {
        return this._forceShowHeader;
    }
    /**
     * @param {?} v
     * @return {?}
     */
    set hideGlobalSearch(v) {
        this._hideGlobalSearch = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_12__["coerceBooleanProperty"])(v);
        this.globalSearchHiddenClassToggle = this._hideGlobalSearch;
    }
    /**
     * @return {?}
     */
    get hideGlobalSearch() {
        return this._hideGlobalSearch;
    }
    /**
     * @return {?}
     */
    get empty() {
        return this.dataSource && this.dataSource.totallyEmpty;
    }
    /**
     * @return {?}
     */
    get loadingClass() {
        return this.loading || (this.dataSource && this.dataSource.loading);
    }
    /**
     * @param {?} column
     * @param {?} newOptions
     * @return {?}
     */
    modifyCellHeaderMultiSelectFilterOptions(column, newOptions) {
        /** @type {?} */
        const header = this.cellHeaders.find((/**
         * @param {?} cellHeader
         * @return {?}
         */
        (cellHeader) => cellHeader.id === column));
        if (header && header.config && header.config.filterConfig && header.config.filterConfig.options) {
            /** @type {?} */
            const filterOptions = header.config.filterConfig.options;
            /** @type {?} */
            const optionsToKeep = filterOptions.filter((/**
             * @param {?} opt
             * @return {?}
             */
            (opt) => header.isSelected(opt, header.multiSelectedOptions) &&
                !newOptions.find((/**
                 * @param {?} newOpt
                 * @return {?}
                 */
                (newOpt) => opt.value && newOpt.value && newOpt.value === opt.value))));
            header.config.filterConfig.options = [...optionsToKeep, ...newOptions];
        }
        else {
            header.config.filterConfig['options'] = newOptions;
        }
        header.setupFilterOptions();
        header.changeDetectorRef.markForCheck();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.outsideFilterSubscription) {
            this.outsideFilterSubscription.unsubscribe();
        }
        if (this.novoDataTableContainer) {
            ((/** @type {?} */ (this.novoDataTableContainer.nativeElement))).removeEventListener('scroll', this.scrollListenerHandler);
        }
        if (this.refreshSubscription) {
            this.refreshSubscription.unsubscribe();
        }
        if (this.resetSubscription) {
            this.resetSubscription.unsubscribe();
        }
        if (this.sortFilterSubscription) {
            this.sortFilterSubscription.unsubscribe();
        }
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        if (this.displayedColumns && this.displayedColumns.length) {
            this.expandable = this.displayedColumns.includes('expand');
        }
        // Default templates defined here
        this.defaultTemplates.forEach((/**
         * @param {?} item
         * @return {?}
         */
        (item) => {
            // Only override if it doesn't already exist
            if (!this.templates[item.getType()]) {
                this.templates[item.getType()] = item.template;
            }
        }));
        // Custom templates passed in
        this.customTemplates.forEach((/**
         * @param {?} item
         * @return {?}
         */
        (item) => {
            // Override anything that is custom and in HTML
            this.templates[item.getType()] = item.template;
        }));
        // Load columns
        this.configureColumns();
        // State
        if (this.paginationOptions && !this.paginationOptions.page) {
            this.paginationOptions.page = 0;
        }
        if (this.paginationOptions && !this.paginationOptions.pageSize) {
            this.paginationOptions.pageSize = 50;
        }
        if (this.paginationOptions && !this.paginationOptions.pageSizeOptions) {
            this.paginationOptions.pageSizeOptions = [10, 25, 50, 100];
        }
        this.state.page = this.paginationOptions ? this.paginationOptions.page : undefined;
        this.state.pageSize = this.paginationOptions ? this.paginationOptions.pageSize : undefined;
        // Scrolling inside table
        ((/** @type {?} */ (this.novoDataTableContainer.nativeElement))).addEventListener('scroll', this.scrollListenerHandler);
        this.initialized = true;
        this.ref.markForCheck();
    }
    /**
     * @param {?} term
     * @return {?}
     */
    onSearchChange(term) {
        this.state.globalSearch = term;
        this.state.reset(false, true);
        this.state.updates.next({ globalSearch: term, filter: this.state.filter, sort: this.state.sort });
    }
    /**
     * @param {?} index
     * @param {?} item
     * @return {?}
     */
    trackColumnsBy(index, item) {
        return item.id;
    }
    /**
     * @param {?} check
     * @param {?} row
     * @return {?}
     */
    isDisabled(check, row) {
        if (check.disabled === true) {
            return true;
        }
        if (check.disabledFunc) {
            return check.disabledFunc(row);
        }
        return false;
    }
    /**
     * @param {?} row
     * @return {?}
     */
    isExpanded(row) {
        if (!row) {
            return false;
        }
        return this.state.expandedRows.has(`${row[this.rowIdentifier]}`);
    }
    /**
     * @param {?} row
     * @return {?}
     */
    expandRow(row) {
        /** @type {?} */
        const expanded = this.isExpanded(row);
        if (expanded) {
            this.state.expandedRows.delete(`${row[this.rowIdentifier]}`);
        }
        else {
            this.state.expandedRows.add(`${row[this.rowIdentifier]}`);
        }
        this.state.onExpandChange(((/** @type {?} */ (((/** @type {?} */ (row)))))).id);
    }
    /**
     * @param {?} expand
     * @return {?}
     */
    expandRows(expand) {
        (this.dataSource.data || []).forEach((/**
         * @param {?} row
         * @return {?}
         */
        (row) => {
            if (!expand) {
                this.state.expandedRows.delete(`${row[this.rowIdentifier]}`);
            }
            else {
                this.state.expandedRows.add(`${row[this.rowIdentifier]}`);
            }
        }));
        this.state.onExpandChange();
    }
    /**
     * @return {?}
     */
    allCurrentRowsExpanded() {
        for (let i = 0; i < (this.dataSource.data || []).length; i++) {
            if (!this.isExpanded((this.dataSource.data || [])[i])) {
                return false;
            }
        }
        return true;
    }
    /**
     * @param {?} row
     * @return {?}
     */
    isSelected(row) {
        if (!row) {
            return false;
        }
        return this.state.selectedRows.has(`${row[this.rowIdentifier]}`);
    }
    /**
     * @param {?} row
     * @return {?}
     */
    selectRow(row) {
        /** @type {?} */
        const selected = this.isSelected(row);
        if (selected) {
            this.state.selectedRows.delete(`${row[this.rowIdentifier]}`);
        }
        else {
            this.state.selectedRows.set(`${row[this.rowIdentifier]}`, row);
        }
        this.state.onSelectionChange();
    }
    /**
     * @param {?} selected
     * @return {?}
     */
    selectRows(selected) {
        (this.dataSource.data || []).forEach((/**
         * @param {?} row
         * @return {?}
         */
        (row) => {
            if (!selected) {
                this.state.selectedRows.delete(`${row[this.rowIdentifier]}`);
            }
            else {
                this.state.selectedRows.set(`${row[this.rowIdentifier]}`, row);
            }
        }));
        this.state.onSelectionChange();
    }
    /**
     * @return {?}
     */
    allCurrentRowsSelected() {
        for (let i = 0; i < (this.dataSource.data || []).length; i++) {
            if (!this.isSelected((this.dataSource.data || [])[i])) {
                return false;
            }
        }
        return true;
    }
    /**
     * @private
     * @return {?}
     */
    configureLastDisplayedColumn() {
        if (this.columns && this.displayedColumns && 0 !== this.columns.length && 0 !== this.displayedColumns.length) {
            this.columns.forEach((/**
             * @param {?} column
             * @return {?}
             */
            (column) => {
                if (column.initialResizable) {
                    column.resizable = column.initialResizable.resizable;
                    column.width = column.initialResizable.width;
                    column.initialResizable = undefined;
                }
            }));
            /** @type {?} */
            const resizableColumns = this.displayedColumns.filter((/**
             * @param {?} name
             * @return {?}
             */
            (name) => {
                return (this.columns.findIndex((/**
                 * @param {?} column
                 * @return {?}
                 */
                (column) => {
                    return column.resizable && column.id === name;
                })) !== -1);
            }));
            if (resizableColumns && resizableColumns.length > 0) {
                /** @type {?} */
                const lastResizableColumn = this.columns.find((/**
                 * @param {?} column
                 * @return {?}
                 */
                (column) => {
                    return column.id === resizableColumns[resizableColumns.length - 1];
                }));
                lastResizableColumn.initialResizable = {
                    resizable: lastResizableColumn.resizable,
                    width: lastResizableColumn.width,
                };
                lastResizableColumn.width = undefined;
                lastResizableColumn.resizable = false;
            }
        }
    }
    /**
     * @private
     * @return {?}
     */
    configureColumns() {
        if (this.columns && this.columns.length !== 0 && Object.keys(this.templates).length !== 0) {
            // Figure the column templates
            this.columns.forEach((/**
             * @param {?} column
             * @return {?}
             */
            (column) => {
                // Figure the template
                /** @type {?} */
                let templateName;
                if (column.template) {
                    // Pass it in as template
                    templateName = column.template;
                }
                else if (!!this.templates[column.id]) {
                    // Custom template for the column id
                    templateName = column.id;
                }
                else {
                    // Default to the defaulCellTemplate
                    if (column.type === 'action') {
                        if (column.action && column.action.options) {
                            if (!column.action.icon) {
                                column.action.icon = 'collapse';
                            }
                            templateName = 'dropdownCellTemplate';
                        }
                        else {
                            templateName = 'buttonCellTemplate';
                        }
                    }
                    else {
                        if (column.type === 'link:tel' || column.type === 'link:mailto') {
                            templateName = `${column.type.split(':')[1]}CellTemplate`;
                        }
                        else {
                            templateName = `${column.type}CellTemplate`;
                        }
                    }
                }
                this.columnToTemplate[column.id] = this.templates[templateName];
            }));
            this.configureLastDisplayedColumn();
            this.columnsLoaded = true;
        }
    }
    /**
     * @private
     * @return {?}
     */
    scrollListener() {
        /** @type {?} */
        const target = (/** @type {?} */ (this.novoDataTableContainer.nativeElement));
        /** @type {?} */
        const left = target.scrollLeft;
        if (left !== this.scrollLeft) {
            this.scrollLeft = target.scrollLeft;
        }
        this.ref.markForCheck();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    performInteractions(event) {
        if (this.listInteractions) {
            for (const column of this.columns) {
                /** @type {?} */
                const allListColumnInteractions = this.listInteractions[column.id];
                /** @type {?} */
                const listColumnInteraction = allListColumnInteractions && allListColumnInteractions.find((/**
                 * @param {?} int
                 * @return {?}
                 */
                (int) => int.event.includes(event)));
                if (listColumnInteraction) {
                    listColumnInteraction.script(this, column.id);
                }
            }
        }
    }
}
NovoDataTable.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'novo-data-table',
                animations: [
                    Object(_angular_animations__WEBPACK_IMPORTED_MODULE_9__["trigger"])('expand', [
                        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_9__["state"])('void', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_9__["style"])({ height: '0px', minHeight: '0', visibility: 'hidden' })),
                        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_9__["state"])('*', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_9__["style"])({ height: '*', visibility: 'visible' })),
                        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_9__["transition"])('void <=> *', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_9__["animate"])('70ms cubic-bezier(0.4, 0.0, 0.2, 1)')),
                    ]),
                ],
                template: `
    <header
      *ngIf="(!(dataSource?.totallyEmpty && !state.userFiltered) && !loading) || forceShowHeader"
      [class.empty]="hideGlobalSearch && !paginationOptions && !templates['customActions']"
    >
      <ng-container *ngTemplateOutlet="templates['customHeader']"></ng-container>
      <novo-search
        alwaysOpen="true"
        (searchChanged)="onSearchChange($event)"
        [(ngModel)]="state.globalSearch"
        *ngIf="!hideGlobalSearch"
        [placeholder]="searchOptions?.placeholder"
        [hint]="searchOptions?.tooltip"
      >
      </novo-search>
      <novo-data-table-pagination
        *ngIf="paginationOptions"
        [theme]="paginationOptions.theme"
        [length]="dataSource?.currentTotal"
        [page]="paginationOptions.page"
        [pageSize]="paginationOptions.pageSize"
        [pageSizeOptions]="paginationOptions.pageSizeOptions"
        [dataFeatureId]="paginatorDataFeatureId"
      >
      </novo-data-table-pagination>
      <div class="novo-data-table-actions" *ngIf="templates['customActions']">
        <ng-container *ngTemplateOutlet="templates['customActions']"></ng-container>
      </div>
    </header>
    <div class="novo-data-table-loading-mask" *ngIf="dataSource?.loading || loading" data-automation-id="novo-data-table-loading">
      <novo-loading></novo-loading>
    </div>
    <div class="novo-data-table-outside-container" [ngClass]="{ 'novo-data-table-outside-container-fixed': fixedHeader }">
      <div class="novo-data-table-custom-filter" *ngIf="customFilter">
        <ng-container *ngTemplateOutlet="templates['customFilter']"></ng-container>
      </div>
      <div
        #novoDataTableContainer
        class="novo-data-table-container"
        [ngClass]="{ 'novo-data-table-container-fixed': fixedHeader }"
        [class.empty-user-filtered]="dataSource?.currentlyEmpty && state.userFiltered"
        [class.empty]="dataSource?.totallyEmpty && !dataSource?.loading && !loading && !state.userFiltered && !dataSource.pristine"
      >
        <cdk-table
          *ngIf="columns?.length > 0 && columnsLoaded && dataSource"
          [dataSource]="dataSource"
          [trackBy]="trackByFn"
          novoDataTableSortFilter
          [class.expandable]="expandable"
          [class.empty]="dataSource?.currentlyEmpty && state.userFiltered"
          [hidden]="dataSource?.totallyEmpty && !state.userFiltered"
        >
          <ng-container cdkColumnDef="selection">
            <novo-data-table-checkbox-header-cell *cdkHeaderCellDef></novo-data-table-checkbox-header-cell>
            <novo-data-table-checkbox-cell *cdkCellDef="let row; let i = index" [row]="row"></novo-data-table-checkbox-cell>
          </ng-container>
          <ng-container cdkColumnDef="expand">
            <novo-data-table-expand-header-cell *cdkHeaderCellDef></novo-data-table-expand-header-cell>
            <novo-data-table-expand-cell *cdkCellDef="let row; let i = index" [row]="row"></novo-data-table-expand-cell>
          </ng-container>
          <ng-container *ngFor="let column of columns; trackBy: trackColumnsBy" [cdkColumnDef]="column.id">
            <novo-data-table-header-cell
              *cdkHeaderCellDef
              [column]="column"
              [filterTemplate]="templates['column-filter-' + column.id]"
              [novo-data-table-cell-config]="column"
              [resized]="resized"
              [defaultSort]="defaultSort"
              [allowMultipleFilters]="allowMultipleFilters"
              [class.empty]="column?.type === 'action' && !column?.label"
              [class.button-header-cell]="column?.type === 'expand' || (column?.type === 'action' && !column?.action?.options)"
              [class.dropdown-header-cell]="column?.type === 'action' && column?.action?.options"
              [class.fixed-header]="fixedHeader"
            ></novo-data-table-header-cell>
            <novo-data-table-cell
              *cdkCellDef="let row"
              [resized]="resized"
              [column]="column"
              [row]="row"
              [template]="columnToTemplate[column.id]"
              [class.empty]="column?.type === 'action' && !column?.label"
              [class.button-cell]="column?.type === 'expand' || (column?.type === 'action' && !column?.action?.options)"
              [class.dropdown-cell]="column?.type === 'action' && column?.action?.options"
            ></novo-data-table-cell>
          </ng-container>
          <novo-data-table-header-row
            *cdkHeaderRowDef="displayedColumns"
            [fixedHeader]="fixedHeader"
            data-automation-id="novo-data-table-header-row"
          ></novo-data-table-header-row>
          <novo-data-table-row
            *cdkRowDef="let row; columns: displayedColumns"
            [ngClass]="{ active: row[rowIdentifier] == activeRowIdentifier }"
            [novoDataTableExpand]="detailRowTemplate"
            [row]="row"
            [id]="name + '-' + row[rowIdentifier]"
            [dataAutomationId]="row[rowIdentifier]"
          ></novo-data-table-row>
        </cdk-table>
        <div class="novo-data-table-footer" *ngIf="templates['footer']">
          <ng-container *ngTemplateOutlet="templates['footer']; context: { $implicit: columns, data: dataSource.data }"></ng-container>
        </div>
        <div
          class="novo-data-table-no-results-container"
          [style.left.px]="scrollLeft"
          *ngIf="dataSource?.currentlyEmpty && state.userFiltered && !dataSource?.loading && !loading && !dataSource.pristine"
        >
          <div class="novo-data-table-empty-message">
            <ng-container *ngTemplateOutlet="templates['noResultsMessage'] || templates['defaultNoResultsMessage']"></ng-container>
          </div>
        </div>
      </div>
      <div
        class="novo-data-table-empty-container"
        *ngIf="dataSource?.totallyEmpty && !dataSource?.loading && !loading && !state.userFiltered && !dataSource.pristine"
      >
        <div class="novo-data-table-empty-message">
          <ng-container *ngTemplateOutlet="templates['emptyMessage'] || templates['defaultNoResultsMessage']"></ng-container>
        </div>
      </div>
    </div>
    <!-- DEFAULT CELL TEMPLATE -->
    <ng-template novoTemplate="textCellTemplate" let-row let-col="col">
      <span [style.width.px]="col?.width" [style.min-width.px]="col?.width" [style.max-width.px]="col?.width">{{
        row[col.id] | dataTableInterpolate: col
      }}</span>
    </ng-template>
    <ng-template novoTemplate="dateCellTemplate" let-row let-col="col">
      <span>{{ row[col.id] | dataTableInterpolate: col | dataTableDateRenderer: col }}</span>
    </ng-template>
    <ng-template novoTemplate="datetimeCellTemplate" let-row let-col="col">
      <span>{{ row[col.id] | dataTableInterpolate: col | dataTableDateTimeRenderer: col }}</span>
    </ng-template>
    <ng-template novoTemplate="timeCellTemplate" let-row let-col="col">
      <span>{{ row[col.id] | dataTableInterpolate: col | dataTableTimeRenderer: col }}</span>
    </ng-template>
    <ng-template novoTemplate="currencyCellTemplate" let-row let-col="col">
      <span>{{ row[col.id] | dataTableInterpolate: col | dataTableCurrencyRenderer: col }}</span>
    </ng-template>
    <ng-template novoTemplate="bigdecimalCellTemplate" let-row let-col="col">
      <span>{{ row[col.id] | dataTableInterpolate: col | dataTableBigDecimalRenderer: col }}</span>
    </ng-template>
    <ng-template novoTemplate="numberCellTemplate" let-row let-col="col">
      <span>{{ row[col.id] | dataTableInterpolate: col | dataTableNumberRenderer: col }}</span>
    </ng-template>
    <ng-template novoTemplate="percentCellTemplate" let-row let-col="col">
      <span>{{ row[col.id] | dataTableInterpolate: col | dataTableNumberRenderer: col:true }}</span>
    </ng-template>
    <ng-template novoTemplate="linkCellTemplate" let-row let-col="col">
      <a
        [attr.data-feature-id]="col?.attributes?.dataFeatureId"
        (click)="col.handlers?.click({ originalEvent: $event, row: row })"
        [style.width.px]="col?.width"
        [style.min-width.px]="col?.width"
        [style.max-width.px]="col?.width"
        >{{ row[col.id] | dataTableInterpolate: col }}</a
      >
    </ng-template>
    <ng-template novoTemplate="telCellTemplate" let-row let-col="col">
      <a href="tel:{{ row[col.id] | dataTableInterpolate: col }}" [target]="col?.attributes?.target">{{
        row[col.id] | dataTableInterpolate: col
      }}</a>
    </ng-template>
    <ng-template novoTemplate="mailtoCellTemplate" let-row let-col="col">
      <a href="mailto:{{ row[col.id] | dataTableInterpolate: col }}" [target]="col?.attributes?.target">{{
        row[col.id] | dataTableInterpolate: col
      }}</a>
    </ng-template>
    <ng-template novoTemplate="buttonCellTemplate" let-row let-col="col">
      <p [tooltip]="col?.action?.tooltip" tooltipPosition="right" [attr.data-feature-id]="col?.attributes?.dataFeatureId">
        <i
          class="bhi-{{ col?.action?.icon }} data-table-icon"
          (click)="col.handlers?.click({ originalEvent: $event, row: row })"
          [class.disabled]="isDisabled(col, row)"
        ></i>
      </p>
    </ng-template>
    <ng-template novoTemplate="dropdownCellTemplate" let-row let-col="col">
      <novo-dropdown parentScrollSelector=".novo-data-table-container" containerClass="novo-data-table-dropdown">
        <button type="button" theme="dialogue" [icon]="col.action.icon" inverse>{{ col.label }}</button>
        <list>
          <item
            *ngFor="let option of col?.action?.options"
            (action)="option.handlers.click({ originalEvent: $event?.originalEvent, row: row })"
            [disabled]="isDisabled(option, row)"
          >
            <span [attr.data-automation-id]="option.label">{{ option.label }}</span>
          </item>
        </list>
      </novo-dropdown>
    </ng-template>
    <ng-template novoTemplate="defaultNoResultsMessage">
      <h4><i class="bhi-search-question"></i> {{ labels.noMatchingRecordsMessage }}</h4>
    </ng-template>
    <ng-template novoTemplate="defaultEmptyMessage">
      <h4><i class="bhi-search-question"></i> {{ labels.emptyTableMessage }}</h4>
    </ng-template>
    <ng-template novoTemplate="expandedRow"> You did not provide an "expandedRow" template! </ng-template>
    <ng-template #detailRowTemplate let-row>
      <div class="novo-data-table-detail-row" [@expand] style="overflow: hidden">
        <ng-container *ngTemplateOutlet="templates['expandedRow']; context: { $implicit: row }"></ng-container>
      </div>
    </ng-template>
    <!-- CUSTOM CELLS PASSED IN -->
    <ng-content></ng-content>
  `,
                changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectionStrategy"].OnPush,
                providers: [DataTableState]
            }] }
];
/** @nocollapse */
NovoDataTable.ctorParameters = () => [
    { type: NovoLabelService },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectorRef"] },
    { type: DataTableState }
];
NovoDataTable.propDecorators = {
    globalSearchHiddenClassToggle: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostBinding"], args: ['class.global-search-hidden',] }],
    customTemplates: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ContentChildren"], args: [NovoTemplate,] }],
    defaultTemplates: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChildren"], args: [NovoTemplate,] }],
    cellHeaders: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChildren"], args: [NovoDataTableCellHeader,] }],
    novoDataTableContainer: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"], args: ['novoDataTableContainer', { static: false },] }],
    resized: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    displayedColumns: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    paginationOptions: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    searchOptions: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    defaultSort: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    name: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    allowMultipleFilters: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    rowIdentifier: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    activeRowIdentifier: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    trackByFn: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    templates: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    fixedHeader: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    paginatorDataFeatureId: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    dataTableService: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    rows: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    outsideFilter: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    refreshSubject: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    columns: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    customFilter: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    hasExandedRows: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    forceShowHeader: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    hideGlobalSearch: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    preferencesChanged: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    empty: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostBinding"], args: ['class.empty',] }],
    loadingClass: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostBinding"], args: ['class.loading',] }],
    listInteractions: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }]
};
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: elements/dropdown/Dropdown.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NovoDropdownModule {
}
NovoDropdownModule.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                imports: [NovoOverlayModule],
                declarations: [NovoDropdownElement, NovoItemElement, NovoDropdownListElement, NovoDropDownItemHeaderElement],
                exports: [NovoDropdownElement, NovoItemElement, NovoDropdownListElement, NovoDropDownItemHeaderElement],
            },] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: elements/select/Select.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// Value accessor for the component (supports ngModel)
/** @type {?} */
const SELECT_VALUE_ACCESSOR = {
    provide: _angular_forms__WEBPACK_IMPORTED_MODULE_1__["NG_VALUE_ACCESSOR"],
    useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["forwardRef"])((/**
     * @return {?}
     */
    () => NovoSelectElement)),
    multi: true,
};
class NovoSelectElement {
    /**
     * @param {?} element
     * @param {?} labels
     * @param {?} ref
     * @param {?} focusMonitor
     * @param {?} ngZone
     */
    constructor(element, labels, ref, focusMonitor, ngZone) {
        this.element = element;
        this.labels = labels;
        this.ref = ref;
        this.focusMonitor = focusMonitor;
        this.ngZone = ngZone;
        this.placeholder = 'Select...';
        this.onSelect = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.selectedIndex = -1;
        this.empty = true;
        this.header = {
            open: false,
            valid: true,
            value: '',
        };
        this.onModelChange = (/**
         * @return {?}
         */
        () => { });
        this.onModelTouched = (/**
         * @return {?}
         */
        () => { });
        this.filterTerm = '';
        this.disabled = false;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.focusMonitor.monitor(this.dropdown.nativeElement).subscribe((/**
         * @param {?} origin
         * @return {?}
         */
        (origin) => this.ngZone.run((/**
         * @return {?}
         */
        () => {
            if (origin === 'keyboard' && !this.disabled) {
                this.openPanel();
            }
        }))));
        this.ngOnChanges();
    }
    /**
     * @param {?=} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        this.readonly = this.readonly === true;
        if (this.options && this.options.length && typeof this.options[0] === 'string') {
            this.filteredOptions = this.options.map((/**
             * @param {?} item
             * @return {?}
             */
            (item) => {
                return { value: item, label: item };
            }));
        }
        else {
            this.filteredOptions = (this.options || [])
                .filter((/**
             * @param {?} item
             * @return {?}
             */
            (item) => {
                return !item.readOnly;
            }))
                .map((/**
             * @param {?} element
             * @return {?}
             */
            (element) => {
                return Object.assign({}, element, { active: false });
            }));
        }
        if (!this.model && !this.createdItem) {
            this.clear();
        }
        else if (this.createdItem) {
            /** @type {?} */
            const item = this.options.find((/**
             * @param {?} i
             * @return {?}
             */
            (i) => i.label === this.createdItem));
            /** @type {?} */
            const index = this.options.indexOf(item);
            this.select(item, index);
        }
        else {
            this.writeValue(this.model);
        }
        if (this.panelOpen) {
            this.openPanel();
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.focusMonitor.stopMonitoring(this.dropdown.nativeElement);
    }
    /**
     * BEGIN: Convienient Panel Methods.
     * @return {?}
     */
    openPanel() {
        this.overlay.openPanel();
    }
    /**
     * @return {?}
     */
    closePanel() {
        this.overlay.closePanel();
    }
    /**
     * @return {?}
     */
    togglePanel() {
        if (this.panelOpen) {
            this.closePanel();
        }
        else {
            setTimeout((/**
             * @return {?}
             */
            () => {
                this.dropdown.nativeElement.focus();
            }));
            this.openPanel();
        }
    }
    /**
     * @return {?}
     */
    get panelOpen() {
        return this.overlay && this.overlay.panelOpen;
    }
    /** END: Convenient Panel Methods. */
    /**
     * This method closes the panel, and if a value is specified, also sets the associated
     * control to that value. It will also mark the control as dirty if this interaction
     * stemmed from the user.
     * @param {?} event
     * @return {?}
     */
    setValueAndClose(event) {
        if (event.value && event.index >= 0) {
            this.select(event.value, event.index);
        }
        this.closePanel();
    }
    /**
     * @param {?} option
     * @param {?} i
     * @param {?=} fireEvents
     * @return {?}
     */
    select(option, i, fireEvents = true) {
        if (this.selected) {
            this.selected.active = false;
        }
        this.selectedIndex = i;
        this.selected = option;
        this.selected.active = true;
        this.empty = false;
        if (fireEvents) {
            this.onModelChange(this.selected.value);
            this.onSelect.emit({ selected: this.selected.value });
        }
    }
    /**
     * @return {?}
     */
    clear() {
        if (this.selected) {
            this.selected.active = false;
        }
        this.selected = {
            label: this.placeholder,
            value: null,
            active: false,
        };
        this.header = {
            open: false,
            valid: true,
            value: '',
        };
        this.selectedIndex = -1;
        this.empty = true;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onKeyDown(event) {
        // To prevent default window scrolling
        if ([KeyCodes.UP, KeyCodes.DOWN].includes(event.keyCode)) {
            event.preventDefault();
        }
        if ([KeyCodes.ESC, KeyCodes.TAB].includes(event.keyCode)) {
            this.closePanel();
        }
        else if (event.keyCode === KeyCodes.ENTER) {
            if (this.header.open && this.header.value) {
                this.saveHeader();
            }
            else {
                this.setValueAndClose({
                    value: this.filteredOptions[this.selectedIndex],
                    index: this.selectedIndex,
                });
            }
        }
        else if (event.keyCode === KeyCodes.UP) {
            if (!this.panelOpen) {
                this.openPanel();
            }
            if (this.selectedIndex > 0) {
                this.selectedIndex--;
                this.select(this.filteredOptions[this.selectedIndex], this.selectedIndex);
                this.scrollToSelected();
            }
        }
        else if (event.keyCode === KeyCodes.DOWN) {
            if (!this.panelOpen) {
                this.openPanel();
            }
            if (this.selectedIndex < this.filteredOptions.length - 1) {
                this.selectedIndex++;
                this.select(this.filteredOptions[this.selectedIndex], this.selectedIndex);
                this.scrollToSelected();
                if (this.header.open) {
                    this.toggleHeader(null, false);
                }
            }
        }
        else if (event.keyCode === KeyCodes.UP && this.selectedIndex === 0) {
            if (!this.panelOpen) {
                this.openPanel();
            }
            this.selectedIndex--;
            this.toggleHeader(null, true);
        }
        else if ((event.keyCode >= 65 && event.keyCode <= 90) || event.keyCode === KeyCodes.SPACE) {
            if (event.keyCode === KeyCodes.SPACE) {
                event.preventDefault();
            }
            if (!this.panelOpen) {
                this.openPanel();
            }
            clearTimeout(this.filterTermTimeout);
            this.filterTermTimeout = setTimeout((/**
             * @return {?}
             */
            () => {
                this.filterTerm = '';
            }), 2000);
            /** @type {?} */
            const char = String.fromCharCode(event.keyCode);
            this.filterTerm = this.filterTerm.concat(char);
            /** @type {?} */
            const item = this.filteredOptions.find((/**
             * @param {?} i
             * @return {?}
             */
            (i) => i.label.toUpperCase().indexOf(this.filterTerm) === 0));
            if (item) {
                this.select(item, this.filteredOptions.indexOf(item));
                this.scrollToSelected();
            }
        }
        else if ([KeyCodes.BACKSPACE, KeyCodes.DELETE].includes(event.keyCode)) {
            clearTimeout(this.filterTermTimeout);
            this.filterTermTimeout = setTimeout((/**
             * @return {?}
             */
            () => {
                this.filterTerm = '';
            }), 2000);
            this.filterTerm = this.filterTerm.slice(0, -1);
        }
    }
    /**
     * @return {?}
     */
    scrollToSelected() {
        this.scrollToIndex(this.selectedIndex);
    }
    /**
     * @param {?} index
     * @return {?}
     */
    scrollToIndex(index) {
        /** @type {?} */
        const element = this.overlay.overlayRef.overlayElement;
        /** @type {?} */
        const list = element.querySelector('.novo-select-list');
        /** @type {?} */
        const items = list.querySelectorAll('li');
        /** @type {?} */
        const item = items[this.headerConfig ? index + 1 : index];
        if (item) {
            list.scrollTop = item.offsetTop;
        }
    }
    /**
     * @param {?} event
     * @param {?=} forceValue
     * @return {?}
     */
    toggleHeader(event, forceValue = false) {
        if (event) {
            event.stopPropagation();
            event.preventDefault();
        }
        // Reverse the active property (if forceValue, use that)
        this.header = {
            open: forceValue !== undefined ? forceValue : !this.header.open,
            value: '',
            valid: true,
        };
    }
    /**
     * @param {?} match
     * @param {?} query
     * @return {?}
     */
    highlight(match, query) {
        // Replaces the capture string with a the same string inside of a "strong" tag
        return query ? match.replace(new RegExp(this.escapeRegexp(query), 'gi'), '<strong>$&</strong>') : match;
    }
    /**
     * @param {?} queryToEscape
     * @return {?}
     */
    escapeRegexp(queryToEscape) {
        // Ex: if the capture is "a" the result will be \a
        return queryToEscape.replace(/([.?*+^$[\]\\(){}|-])/g, '\\$1');
    }
    /**
     * @return {?}
     */
    saveHeader() {
        if (this.header.value) {
            this.headerConfig.onSave(this.header.value);
            this.createdItem = this.header.value;
            this.closePanel();
        }
        else {
            this.header.valid = false;
        }
    }
    /**
     * @param {?} model
     * @return {?}
     */
    writeValue(model) {
        this.model = model;
        if (this.options) {
            /** @type {?} */
            let item = this.filteredOptions.find((/**
             * @param {?} i
             * @return {?}
             */
            (i) => i.value === model || (model && i.value === model.id)));
            if (!item && !Helpers.isEmpty(model)) {
                item = {
                    label: model,
                    value: model,
                };
                if (!item.readOnly) {
                    this.options.unshift(item);
                }
            }
            if (item) {
                this.select(item, this.filteredOptions.indexOf(item), false);
                this.empty = false;
            }
            else {
                this.clear();
            }
        }
        this.ref.markForCheck();
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.onModelChange = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.onModelTouched = fn;
    }
    /**
     * @param {?} disabled
     * @return {?}
     */
    setDisabledState(disabled) {
        this.disabled = disabled;
    }
}
NovoSelectElement.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'novo-select',
                providers: [SELECT_VALUE_ACCESSOR],
                template: `
    <div #dropdownElement (click)="togglePanel(); (false)" tabIndex="{{ disabled ? -1 : 0 }}" type="button" [class.empty]="empty">
      {{ selected.label }}<i class="bhi-collapse"></i>
    </div>
    <novo-overlay-template [parent]="element" position="center" (closing)="dropdown.nativeElement.focus()">
      <ul class="novo-select-list" tabIndex="-1" [class.header]="headerConfig" [class.active]="panelOpen">
        <ng-content></ng-content>
        <li *ngIf="headerConfig" class="select-header" [class.open]="header.open">
          <button *ngIf="!header.open" (click)="toggleHeader($event); (false)" tabIndex="-1" type="button" class="header">
            <i class="bhi-add-thin"></i>&nbsp;{{ headerConfig.label }}
          </button>
          <div *ngIf="header.open" [ngClass]="{ active: header.open }">
            <input
              autofocus
              type="text"
              [placeholder]="headerConfig.placeholder"
              [attr.id]="name"
              autocomplete="false"
              [(ngModel)]="header.value"
              [ngClass]="{ invalid: !header.valid }"
            />
            <footer>
              <button (click)="toggleHeader($event, false)">{{ labels.cancel }}</button>
              <button (click)="saveHeader()" class="primary">{{ labels.save }}</button>
            </footer>
          </div>
        </li>
        <li
          *ngFor="let option of filteredOptions; let i = index"
          [ngClass]="{ active: option.active }"
          (click)="setValueAndClose({ value: option, index: i })"
          [attr.data-automation-value]="option.label"
        >
          <span [innerHtml]="highlight(option.label, filterTerm)"></span> <i *ngIf="option.active" class="bhi-check"></i>
        </li>
      </ul>
    </novo-overlay-template>
  `,
                host: {
                    '(keydown)': 'onKeyDown($event)',
                }
            }] }
];
/** @nocollapse */
NovoSelectElement.ctorParameters = () => [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"] },
    { type: NovoLabelService },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectorRef"] },
    { type: _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_17__["FocusMonitor"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgZone"] }
];
NovoSelectElement.propDecorators = {
    name: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    options: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    placeholder: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    readonly: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    headerConfig: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    onSelect: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    overlay: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"], args: [NovoOverlayTemplateComponent, { static: true },] }],
    dropdown: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"], args: ['dropdownElement', { static: true },] }],
    onKeyDown: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostListener"], args: ['keydown', ['$event'],] }]
};
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: elements/select/Select.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NovoSelectModule {
}
NovoSelectModule.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                imports: [_angular_common__WEBPACK_IMPORTED_MODULE_6__["CommonModule"], _angular_forms__WEBPACK_IMPORTED_MODULE_1__["FormsModule"], _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_17__["A11yModule"], NovoOverlayModule],
                declarations: [NovoSelectElement],
                exports: [NovoSelectElement],
            },] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: elements/dragula/DragulaService.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const dragula = _bullhorn_dragula__WEBPACK_IMPORTED_MODULE_18__;
class NovoDragulaService {
    constructor() {
        this.cancel = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.cloned = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.drag = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.dragend = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.drop = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.out = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.over = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.remove = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.shadow = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.dropModel = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.removeModel = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.events = ['cancel', 'cloned', 'drag', 'dragend', 'drop', 'out', 'over', 'remove', 'shadow', 'dropModel', 'removeModel'];
        this.bags = [];
    }
    /**
     * @param {?} name
     * @param {?} drake
     * @return {?}
     */
    add(name, drake) {
        /** @type {?} */
        let bag = this.find(name);
        if (bag) {
            throw new Error(`Bag named: ${name} already exists.`);
        }
        bag = {
            name,
            drake,
        };
        this.bags.push(bag);
        if (drake.models) {
            // models to sync with (must have same structure as containers)
            this.handleModels(name, drake);
        }
        if (!bag.initEvents) {
            this.setupEvents(bag);
        }
        return bag;
    }
    /**
     * @param {?} name
     * @return {?}
     */
    find(name) {
        for (let i = 0; i < this.bags.length; i++) {
            if (this.bags[i].name === name) {
                return this.bags[i];
            }
        }
        return null;
    }
    /**
     * @param {?} name
     * @return {?}
     */
    destroy(name) {
        /** @type {?} */
        const bag = this.find(name);
        /** @type {?} */
        const i = this.bags.indexOf(bag);
        this.bags.splice(i, 1);
        bag.drake.destroy();
    }
    /**
     * @param {?} name
     * @param {?} options
     * @return {?}
     */
    setOptions(name, options) {
        /** @type {?} */
        const bag = this.add(name, dragula(options));
        this.handleModels(name, bag.drake);
    }
    /**
     * @param {?} name
     * @param {?} drake
     * @return {?}
     */
    handleModels(name, drake) {
        /** @type {?} */
        let dragElm;
        /** @type {?} */
        let dragIndex;
        /** @type {?} */
        let dropIndex;
        /** @type {?} */
        let sourceModel;
        drake.on('remove', (/**
         * @param {?} el
         * @param {?} source
         * @return {?}
         */
        (el, source) => {
            if (!drake.models) {
                return;
            }
            sourceModel = drake.models[drake.containers.indexOf(source)];
            sourceModel.splice(dragIndex, 1);
            this.removeModel.emit([name, el, source]);
        }));
        drake.on('drag', (/**
         * @param {?} el
         * @param {?} source
         * @return {?}
         */
        (el, source) => {
            dragElm = el;
            dragIndex = this.domIndexOf(el, source);
        }));
        drake.on('drop', (/**
         * @param {?} dropElm
         * @param {?} target
         * @param {?} source
         * @return {?}
         */
        (dropElm, target, source) => {
            if (!drake.models) {
                return;
            }
            dropIndex = this.domIndexOf(dropElm, target);
            sourceModel = drake.models[drake.containers.indexOf(source)];
            if (target === source) {
                sourceModel.splice(dropIndex, 0, sourceModel.splice(dragIndex, 1)[0]);
            }
            else {
                /** @type {?} */
                const notCopy = dragElm === dropElm;
                /** @type {?} */
                const targetModel = drake.models[drake.containers.indexOf(target)];
                /** @type {?} */
                const dropElmModel = notCopy ? sourceModel[dragIndex] : JSON.parse(JSON.stringify(sourceModel[dragIndex]));
                if (notCopy) {
                    sourceModel.splice(dragIndex, 1);
                }
                targetModel.splice(dropIndex, 0, dropElmModel);
                target.removeChild(dropElm); // element must be removed for ngFor to apply correctly
            }
            this.dropModel.emit([name, dropElm, target, source]);
        }));
    }
    /**
     * @param {?} bag
     * @return {?}
     */
    setupEvents(bag) {
        bag.initEvents = true;
        /** @type {?} */
        const that = this;
        /** @type {?} */
        const emitter = (/**
         * @param {?} type
         * @return {?}
         */
        (type) => {
            /**
             * @return {?}
             */
            function replicate() {
                /** @type {?} */
                const args = Array.prototype.slice.call(arguments);
                that[type].emit([bag.name].concat(args));
            }
            bag.drake.on(type, replicate);
        });
        this.events.forEach(emitter);
    }
    /**
     * @param {?} child
     * @param {?} parent
     * @return {?}
     */
    domIndexOf(child, parent) {
        return Array.prototype.indexOf.call(parent.children, child);
    }
}
NovoDragulaService.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"] }
];
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: elements/dragula/Dragula.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const dragula$1 = _bullhorn_dragula__WEBPACK_IMPORTED_MODULE_18__;
class NovoDragulaElement {
    /**
     * @param {?} element
     * @param {?} dragulaService
     */
    constructor(element, dragulaService) {
        this.dragulaService = dragulaService;
        this.drake = null;
        this.container = element.nativeElement;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        /** @type {?} */
        const bag = this.dragulaService.find(this.bag);
        if (bag) {
            this.drake = bag.drake;
            this.checkModel();
            this.drake.containers.push(this.container);
        }
        else {
            this.drake = dragula$1({
                containers: [this.container],
            });
            this.checkModel();
            this.dragulaService.add(this.bag, this.drake);
        }
    }
    /**
     * @return {?}
     */
    checkModel() {
        if (this.dragulaModel) {
            if (this.drake.models) {
                this.drake.models.push(this.dragulaModel);
            }
            else {
                this.drake.models = [this.dragulaModel];
            }
        }
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes && changes.dragulaModel) {
            if (this.drake) {
                if (this.drake.models) {
                    /** @type {?} */
                    const modelIndex = this.drake.models.indexOf(changes.dragulaModel.previousValue);
                    this.drake.models.splice(modelIndex, 1, changes.dragulaModel.currentValue);
                }
                else {
                    this.drake.models = [changes.dragulaModel.currentValue];
                }
            }
        }
    }
}
NovoDragulaElement.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{
                selector: '[dragula]',
            },] }
];
/** @nocollapse */
NovoDragulaElement.ctorParameters = () => [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"] },
    { type: NovoDragulaService }
];
NovoDragulaElement.propDecorators = {
    bag: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"], args: ['dragula',] }],
    dragulaModel: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }]
};
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: elements/dragula/Dragula.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NovoDragulaModule {
}
NovoDragulaModule.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                declarations: [NovoDragulaElement],
                exports: [NovoDragulaElement],
            },] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: utils/countries/Countries.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/* tslint:disable:quotemark */
/**
 * AUTOGENERATED FILE - DO NOT EDIT
 * Generated by: https://bhsource.bullhorn.com/DEV_WORKSPACE/country-state-parser
 * Last generated on: Tue Feb 26 2019 15:45:12 GMT-0600 (Central Standard Time)
 */
/** @type {?} */
const COUNTRIES = [
    {
        code: 'US',
        id: 1,
        name: 'United States',
        states: [
            {
                code: 'AL',
                name: 'Alabama',
            },
            {
                code: 'AK',
                name: 'Alaska',
            },
            {
                code: 'AZ',
                name: 'Arizona',
            },
            {
                code: 'AR',
                name: 'Arkansas',
            },
            {
                code: 'CA',
                name: 'California',
            },
            {
                code: 'CO',
                name: 'Colorado',
            },
            {
                code: 'CT',
                name: 'Connecticut',
            },
            {
                code: 'DE',
                name: 'Delaware',
            },
            {
                code: 'DC',
                name: 'District Of Columbia',
            },
            {
                code: 'FL',
                name: 'Florida',
            },
            {
                code: 'GA',
                name: 'Georgia',
            },
            {
                code: 'GU',
                name: 'Guam',
            },
            {
                code: 'HI',
                name: 'Hawaii',
            },
            {
                code: 'ID',
                name: 'Idaho',
            },
            {
                code: 'IL',
                name: 'Illinois',
            },
            {
                code: 'IN',
                name: 'Indiana',
            },
            {
                code: 'IA',
                name: 'Iowa',
            },
            {
                code: 'KS',
                name: 'Kansas',
            },
            {
                code: 'KY',
                name: 'Kentucky',
            },
            {
                code: 'LA',
                name: 'Louisiana',
            },
            {
                code: 'ME',
                name: 'Maine',
            },
            {
                code: 'MH',
                name: 'Marshall Islands',
            },
            {
                code: 'MD',
                name: 'Maryland',
            },
            {
                code: 'MA',
                name: 'Massachusetts',
            },
            {
                code: 'MI',
                name: 'Michigan',
            },
            {
                code: 'MN',
                name: 'Minnesota',
            },
            {
                code: 'MS',
                name: 'Mississippi',
            },
            {
                code: 'MO',
                name: 'Missouri',
            },
            {
                code: 'MT',
                name: 'Montana',
            },
            {
                code: 'NE',
                name: 'Nebraska',
            },
            {
                code: 'NV',
                name: 'Nevada',
            },
            {
                code: 'NH',
                name: 'New Hampshire',
            },
            {
                code: 'NJ',
                name: 'New Jersey',
            },
            {
                code: 'NM',
                name: 'New Mexico',
            },
            {
                code: 'NY',
                name: 'New York',
            },
            {
                code: 'NC',
                name: 'North Carolina',
            },
            {
                code: 'ND',
                name: 'North Dakota',
            },
            {
                code: 'MP',
                name: 'Northern Mariana Islands',
            },
            {
                code: 'OH',
                name: 'Ohio',
            },
            {
                code: 'OK',
                name: 'Oklahoma',
            },
            {
                code: 'OR',
                name: 'Oregon',
            },
            {
                code: 'PW',
                name: 'Palau',
            },
            {
                code: 'PA',
                name: 'Pennsylvania',
            },
            {
                code: 'PR',
                name: 'Puerto Rico',
            },
            {
                code: 'RI',
                name: 'Rhode Island',
            },
            {
                code: 'SC',
                name: 'South Carolina',
            },
            {
                code: 'SD',
                name: 'South Dakota',
            },
            {
                code: 'TN',
                name: 'Tennessee',
            },
            {
                code: 'TX',
                name: 'Texas',
            },
            {
                code: 'UT',
                name: 'Utah',
            },
            {
                code: 'VT',
                name: 'Vermont',
            },
            {
                code: 'VI',
                name: 'Virgin Islands',
            },
            {
                code: 'VA',
                name: 'Virginia',
            },
            {
                code: 'WA',
                name: 'Washington',
            },
            {
                code: 'WV',
                name: 'West Virginia',
            },
            {
                code: 'WI',
                name: 'Wisconsin',
            },
            {
                code: 'WY',
                name: 'Wyoming',
            },
        ],
    },
    {
        code: 'UK',
        id: 2359,
        name: 'United Kingdom',
        states: [
            {
                code: 'ABD',
                name: 'Aberdeenshire',
            },
            {
                code: 'ALD',
                name: 'Alderney',
            },
            {
                code: 'ANS',
                name: 'Angus',
            },
            {
                code: 'ANN',
                name: 'Antrim and Newtownabbey',
            },
            {
                code: 'AGB',
                name: 'Argyllshire',
            },
            {
                code: 'ABC',
                name: 'Armagh',
            },
            {
                code: 'EAY',
                name: 'Ayrshire',
            },
            {
                code: 'BLA',
                name: 'Ballymena',
            },
            {
                code: 'BAY',
                name: 'Ballymoney',
            },
            {
                code: 'BNB',
                name: 'Banbridge',
            },
            {
                code: 'BAN',
                name: 'Banffshire',
            },
            {
                code: 'BDF',
                name: 'Bedfordshire',
            },
            {
                code: 'BFS',
                name: 'Belfast',
            },
            {
                code: 'BRK',
                name: 'Berkshire',
            },
            {
                code: 'BGW',
                name: 'Blaenau Gwent',
            },
            {
                code: 'SCB',
                name: 'Borders',
            },
            {
                code: 'BGE',
                name: 'Bridgend',
            },
            {
                code: 'BST',
                name: 'Bristol',
            },
            {
                code: 'BKM',
                name: 'Buckinghamshire',
            },
            {
                code: 'CAY',
                name: 'Caerphilly',
            },
            {
                code: 'CAI',
                name: 'Caithness',
            },
            {
                code: 'CAM',
                name: 'Cambridgeshire',
            },
            {
                code: 'CRF',
                name: 'Cardiff',
            },
            {
                code: 'CMN',
                name: 'Carmarthenshire',
            },
            {
                code: 'CKF',
                name: 'Carrickfergus',
            },
            {
                code: 'CAS',
                name: 'Castlereagh',
            },
            {
                code: 'CGN',
                name: 'Ceredigion',
            },
            {
                code: 'CHE',
                name: 'Cheshire',
            },
            {
                code: 'CLK',
                name: 'Clackmannanshire',
            },
            {
                code: 'CLR',
                name: 'Coleraine',
            },
            {
                code: 'CWY',
                name: 'Conwy',
            },
            {
                code: 'CKT',
                name: 'Cookstown',
            },
            {
                code: 'CON',
                name: 'Cornwall',
            },
            {
                code: 'DUR',
                name: 'County Durham',
            },
            {
                code: 'DRS',
                name: 'County Londonderry',
            },
            {
                code: 'CRA',
                name: 'Craigavon',
            },
            {
                code: 'CMA',
                name: 'Cumbria',
            },
            {
                code: 'DEN',
                name: 'Denbighshire',
            },
            {
                code: 'DBY',
                name: 'Derbyshire',
            },
            {
                code: 'DEV',
                name: 'Devon',
            },
            {
                code: 'DOR',
                name: 'Dorset',
            },
            {
                code: 'EDU',
                name: 'Dumbartonshire',
            },
            {
                code: 'DGY',
                name: 'Dumfries and Galloway',
            },
            {
                code: 'DGN',
                name: 'Dungannon and South Tyrone',
            },
            {
                code: 'ELN',
                name: 'East Lothian',
            },
            {
                code: 'ESX',
                name: 'East Sussex',
            },
            {
                code: 'ERY',
                name: 'East Yorkshire',
            },
            {
                code: 'ESS',
                name: 'Essex',
            },
            {
                code: 'FMO',
                name: 'Fermanagh and Omagh',
            },
            {
                code: 'FIF',
                name: 'Fife',
            },
            {
                code: 'FLN',
                name: 'Flintshire',
            },
            {
                code: 'GLG',
                name: 'Glasgow',
            },
            {
                code: 'GLS',
                name: 'Gloucestershire',
            },
            {
                code: 'LND',
                name: 'Greater London',
            },
            {
                code: 'MAN',
                name: 'Greater Manchester',
            },
            {
                code: 'GSY',
                name: 'Guernsey',
            },
            {
                code: 'GWN',
                name: 'Gwynedd',
            },
            {
                code: 'HAM',
                name: 'Hampshire',
            },
            {
                code: 'HEF',
                name: 'Herefordshire',
            },
            {
                code: 'HRM',
                name: 'Herm',
            },
            {
                code: 'HRT',
                name: 'Hertfordshire',
            },
            {
                code: 'HLD',
                name: 'Highland',
            },
            {
                code: 'INV',
                name: 'Inverness-shire',
            },
            {
                code: 'AGY',
                name: 'Isle of Anglesey',
            },
            {
                code: 'IOM',
                name: 'Isle of Man',
            },
            {
                code: 'IOW',
                name: 'Isle of Wight',
            },
            {
                code: 'JSY',
                name: 'Jersey',
            },
            {
                code: 'KEN',
                name: 'Kent',
            },
            {
                code: 'KCD',
                name: 'Kincardineshire',
            },
            {
                code: 'KKD',
                name: 'Kirkcudbrightshire',
            },
            {
                code: 'LAN',
                name: 'Lancashire',
            },
            {
                code: 'LRN',
                name: 'Larne',
            },
            {
                code: 'LEC',
                name: 'Leicestershire',
            },
            {
                code: 'LMV',
                name: 'Limavady',
            },
            {
                code: 'LIN',
                name: 'Lincolnshire',
            },
            {
                code: 'LBC',
                name: 'Lisburn and Castlereagh',
            },
            {
                code: 'MFT',
                name: 'Magherafelt',
            },
            {
                code: 'MER',
                name: 'Merseyside',
            },
            {
                code: 'MTY',
                name: 'Merthyr Tydfil',
            },
            {
                code: 'MLN',
                name: 'Midlothian',
            },
            {
                code: 'MON',
                name: 'Monmouthshire',
            },
            {
                code: 'MRY',
                name: 'Morayshire',
            },
            {
                code: 'MYL',
                name: 'Moyle',
            },
            {
                code: 'NAI',
                name: 'Nairn',
            },
            {
                code: 'NTL',
                name: 'Neath Port Talbot',
            },
            {
                code: 'NWP',
                name: 'Newport',
            },
            {
                code: 'NMD',
                name: 'Newry, Mourne and Down',
            },
            {
                code: 'NFK',
                name: 'Norfolk',
            },
            {
                code: 'AND',
                name: 'North Down and Ards',
            },
            {
                code: 'NLK',
                name: 'North Lanarkshire',
            },
            {
                code: 'NYK',
                name: 'North Yorkshire',
            },
            {
                code: 'NTH',
                name: 'Northamptonshire',
            },
            {
                code: 'NBL',
                name: 'Northumberland',
            },
            {
                code: 'NTT',
                name: 'Nottinghamshire',
            },
            {
                code: 'OMA',
                name: 'Omagh',
            },
            {
                code: 'ORK',
                name: 'Orkney Islands',
            },
            {
                code: 'OXF',
                name: 'Oxfordshire',
            },
            {
                code: 'PEM',
                name: 'Pembrokeshire',
            },
            {
                code: 'PKN',
                name: 'Perth and Kinross',
            },
            {
                code: 'PER',
                name: 'Perthshire and Kinross',
            },
            {
                code: 'POW',
                name: 'Powys',
            },
            {
                code: 'RCC',
                name: 'Redcar and Cleveland',
            },
            {
                code: 'RFW',
                name: 'Renfrewshire',
            },
            {
                code: 'RCT',
                name: 'Rhondda Cynon Taff',
            },
            {
                code: 'RUT',
                name: 'Rutland',
            },
            {
                code: 'SRK',
                name: 'Sark',
            },
            {
                code: 'ZET',
                name: 'Shetland Islands',
            },
            {
                code: 'SHR',
                name: 'Shropshire',
            },
            {
                code: 'SOM',
                name: 'Somerset',
            },
            {
                code: 'SLK',
                name: 'South Lanarkshire',
            },
            {
                code: 'SYK',
                name: 'South Yorkshire',
            },
            {
                code: 'STS',
                name: 'Staffordshire',
            },
            {
                code: 'STG',
                name: 'Stirlingshire',
            },
            {
                code: 'STR',
                name: 'Strabane',
            },
            {
                code: 'SFK',
                name: 'Suffolk',
            },
            {
                code: 'SRY',
                name: 'Surrey',
            },
            {
                code: 'SSX',
                name: 'Sussex',
            },
            {
                code: 'SUT',
                name: 'Sutherland',
            },
            {
                code: 'SWA',
                name: 'Swansea',
            },
            {
                code: 'TOF',
                name: 'Torfaen',
            },
            {
                code: 'TWR',
                name: 'Tyne and Wear',
            },
            {
                code: 'VGL',
                name: 'Vale of Glamorgan',
            },
            {
                code: 'WAR',
                name: 'Warwickshire',
            },
            {
                code: 'WLN',
                name: 'West Lothian',
            },
            {
                code: 'WMD',
                name: 'West Midlands',
            },
            {
                code: 'WSX',
                name: 'West Sussex',
            },
            {
                code: 'WRY',
                name: 'West Yorkshire',
            },
            {
                code: 'ELS',
                name: 'Western Isles',
            },
            {
                code: 'WIL',
                name: 'Wiltshire',
            },
            {
                code: 'WOR',
                name: 'Worcestershire',
            },
            {
                code: 'WRX',
                name: 'Wrexham',
            },
        ],
    },
    {
        code: 'AF',
        id: 2185,
        name: 'Afghanistan',
        states: [
            {
                code: 'AF01',
                name: 'Badakhshan',
            },
            {
                code: 'AF02',
                name: 'Badghis',
            },
            {
                code: 'AF03',
                name: 'Baghlan',
            },
            {
                code: 'AF30',
                name: 'Balkh',
            },
            {
                code: 'AF05',
                name: 'Bamian',
            },
            {
                code: 'AF41',
                name: 'Daikondi',
            },
            {
                code: 'AF06',
                name: 'Farah',
            },
            {
                code: 'AF07',
                name: 'Faryab',
            },
            {
                code: 'AF08',
                name: 'Ghazni',
            },
            {
                code: 'AF09',
                name: 'Ghowr',
            },
            {
                code: 'AF10',
                name: 'Helmand',
            },
            {
                code: 'AF11',
                name: 'Herat',
            },
            {
                code: 'AF31',
                name: 'Jowzjan',
            },
            {
                code: 'AF13',
                name: 'Kabul',
            },
            {
                code: 'AF23',
                name: 'Kandahar',
            },
            {
                code: 'AF14',
                name: 'Kapisa',
            },
            {
                code: 'AF37',
                name: 'Khowst',
            },
            {
                code: 'AF34',
                name: 'Konar',
            },
            {
                code: 'AF24',
                name: 'Kondoz',
            },
            {
                code: 'AF35',
                name: 'Laghman',
            },
            {
                code: 'AF17',
                name: 'Lowgar',
            },
            {
                code: 'AF18',
                name: 'Nangarhar',
            },
            {
                code: 'AF19',
                name: 'Nimruz',
            },
            {
                code: 'AF38',
                name: 'Nurestan',
            },
            {
                code: 'AF39',
                name: 'Oruzgan',
            },
            {
                code: 'AF36',
                name: 'Paktia',
            },
            {
                code: 'AF29',
                name: 'Paktika',
            },
            {
                code: 'AF42',
                name: 'Panjshir',
            },
            {
                code: 'AF40',
                name: 'Parvan',
            },
            {
                code: 'AF32',
                name: 'Samangan',
            },
            {
                code: 'AF33',
                name: 'Sar-e Pol',
            },
            {
                code: 'AF26',
                name: 'Takhar',
            },
            {
                code: 'AF27',
                name: 'Vardak',
            },
            {
                code: 'AF28',
                name: 'Zabol',
            },
        ],
    },
    {
        code: 'AX',
        id: 2407,
        name: 'Åland Islands',
        states: [],
    },
    {
        code: 'AL',
        id: 2186,
        name: 'Albania',
        states: [],
    },
    {
        code: 'DZ',
        id: 2187,
        name: 'Algeria',
        states: [
            {
                code: 'DZ.AR',
                name: 'Adrar',
            },
            {
                code: 'DZ.AD',
                name: 'Aïn Defla',
            },
            {
                code: 'DZ.AT',
                name: 'Aïn Témouchent',
            },
            {
                code: 'DZ.AL',
                name: 'Algiers',
            },
            {
                code: 'DZ.AN',
                name: 'Annaba',
            },
            {
                code: 'DZ.BT',
                name: 'Batna',
            },
            {
                code: 'DZ.BC',
                name: 'Béchar',
            },
            {
                code: 'DZ.BJ',
                name: 'Béjaïa',
            },
            {
                code: 'DZ.BS',
                name: 'Biskra',
            },
            {
                code: 'DZ.BL',
                name: 'Blida',
            },
            {
                code: 'DZ.BB',
                name: 'Bordj Bou Arréridj',
            },
            {
                code: 'DZ.BU',
                name: 'Bouira',
            },
            {
                code: 'DZ.BM',
                name: 'Boumerdès',
            },
            {
                code: 'DZ.CH',
                name: 'Chlef',
            },
            {
                code: 'DZ.CO',
                name: 'Constantine',
            },
            {
                code: 'DZ.DJ',
                name: 'Djelfa',
            },
            {
                code: 'DZ.EB',
                name: 'El Bayadh',
            },
            {
                code: 'DZ.EO',
                name: 'El Oued',
            },
            {
                code: 'DZ.ET',
                name: 'El Tarf',
            },
            {
                code: 'DZ.GR',
                name: 'Ghardaïa',
            },
            {
                code: 'DZ.GL',
                name: 'Guelma',
            },
            {
                code: 'DZ.IL',
                name: 'Illizi',
            },
            {
                code: 'DZ.JJ',
                name: 'Jijel',
            },
            {
                code: 'DZ.KH',
                name: 'Khenchela',
            },
            {
                code: 'DZ.LG',
                name: 'Laghouat',
            },
            {
                code: 'DZ.MC',
                name: 'Mascara',
            },
            {
                code: 'DZ.MD',
                name: 'Médéa',
            },
            {
                code: 'DZ.ML',
                name: 'Mila',
            },
            {
                code: 'DZ.MG',
                name: 'Mostaganem',
            },
            {
                code: 'DZ.MS',
                name: 'Msila',
            },
            {
                code: 'DZ.NA',
                name: 'Naama',
            },
            {
                code: 'DZ.OR',
                name: 'Oran',
            },
            {
                code: 'DZ.OG',
                name: 'Ouargla',
            },
            {
                code: 'DZ.OB',
                name: 'Oum el Bouaghi',
            },
            {
                code: 'DZ.RE',
                name: 'Relizane',
            },
            {
                code: 'DZ.SD',
                name: 'Saïda',
            },
            {
                code: 'DZ.SF',
                name: 'Sétif',
            },
            {
                code: 'DZ.SB',
                name: 'Sidi Bel Abbès',
            },
            {
                code: 'DZ.SK',
                name: 'Skikda',
            },
            {
                code: 'DZ.SA',
                name: 'Souk Ahras',
            },
            {
                code: 'DZ.TM',
                name: 'Tamanrasset',
            },
            {
                code: 'DZ.TB',
                name: 'Tébessa',
            },
            {
                code: 'DZ.TR',
                name: 'Tiaret',
            },
            {
                code: 'DZ.TN',
                name: 'Tindouf',
            },
            {
                code: 'DZ.TP',
                name: 'Tipaza',
            },
            {
                code: 'DZ.TS',
                name: 'Tissemsilt',
            },
            {
                code: 'DZ.TO',
                name: 'Tizi Ouzou',
            },
            {
                code: 'DZ.TL',
                name: 'Tlemcen',
            },
        ],
    },
    {
        code: 'AS',
        id: 2408,
        name: 'American Samoa',
        states: [],
    },
    {
        code: 'AD',
        id: 2188,
        name: 'Andorra',
        states: [],
    },
    {
        code: 'AO',
        id: 2189,
        name: 'Angola',
        states: [
            {
                code: 'AO19',
                name: 'Bengo',
            },
            {
                code: 'AO01',
                name: 'Benguela',
            },
            {
                code: 'AO02',
                name: 'Bié',
            },
            {
                code: 'AO03',
                name: 'Cabinda',
            },
            {
                code: 'AO04',
                name: 'Cuando Cubango',
            },
            {
                code: 'AO05',
                name: 'Cuanza Norte',
            },
            {
                code: 'AO06',
                name: 'Cuanza Sul',
            },
            {
                code: 'AO07',
                name: 'Cunene',
            },
            {
                code: 'AO08',
                name: 'Huambo',
            },
            {
                code: 'AO09',
                name: 'Huíla',
            },
            {
                code: 'AO20',
                name: 'Luanda',
            },
            {
                code: 'AO17',
                name: 'Lunda Norte',
            },
            {
                code: 'AO18',
                name: 'Lunda Sul',
            },
            {
                code: 'AO12',
                name: 'Malanje',
            },
            {
                code: 'AO14',
                name: 'Moxico',
            },
            {
                code: 'AO13',
                name: 'Namibe',
            },
            {
                code: 'AO15',
                name: 'Uíge',
            },
            {
                code: 'AO16',
                name: 'Zaire',
            },
        ],
    },
    {
        code: 'AI',
        id: 2409,
        name: 'Anguilla',
        states: [],
    },
    {
        code: 'AQ',
        id: 2190,
        name: 'Antarctica',
        states: [],
    },
    {
        code: 'AG',
        id: 2191,
        name: 'Antigua and Barbuda',
        states: [],
    },
    {
        code: 'AR',
        id: 2192,
        name: 'Argentina',
        states: [
            {
                code: 'AR01',
                name: 'Buenos Aires',
            },
            {
                code: 'AR02',
                name: 'Catamarca',
            },
            {
                code: 'AR03',
                name: 'Chaco',
            },
            {
                code: 'AR04',
                name: 'Chubut',
            },
            {
                code: 'AR07',
                name: 'Ciudad de Buenos Aires',
            },
            {
                code: 'AR05',
                name: 'Córdoba',
            },
            {
                code: 'AR06',
                name: 'Corrientes',
            },
            {
                code: 'AR08',
                name: 'Entre Ríos',
            },
            {
                code: 'AR09',
                name: 'Formosa',
            },
            {
                code: 'AR10',
                name: 'Jujuy',
            },
            {
                code: 'AR11',
                name: 'La Pampa',
            },
            {
                code: 'AR12',
                name: 'La Rioja',
            },
            {
                code: 'AR13',
                name: 'Mendoza',
            },
            {
                code: 'AR14',
                name: 'Misiones',
            },
            {
                code: 'AR15',
                name: 'Neuquén',
            },
            {
                code: 'AR16',
                name: 'Río Negro',
            },
            {
                code: 'AR17',
                name: 'Salta',
            },
            {
                code: 'AR18',
                name: 'San Juan',
            },
            {
                code: 'AR19',
                name: 'San Luis',
            },
            {
                code: 'AR20',
                name: 'Santa Cruz',
            },
            {
                code: 'AR21',
                name: 'Santa Fe',
            },
            {
                code: 'AR22',
                name: 'Santiago del Estero',
            },
            {
                code: 'AR23',
                name: 'Tierra del Fuego',
            },
            {
                code: 'AR24',
                name: 'Tucumán',
            },
        ],
    },
    {
        code: 'AM',
        id: 2193,
        name: 'Armenia',
        states: [],
    },
    {
        code: 'AB',
        id: 2373,
        name: 'Aruba',
        states: [
            {
                code: 'AW.AA',
                name: 'Aruba',
            },
        ],
    },
    {
        code: 'AU',
        id: 2194,
        name: 'Australia',
        states: [
            {
                code: 'ACT',
                name: 'Australian Capital Territory',
            },
            {
                code: 'NSW',
                name: 'New South Wales',
            },
            {
                code: 'NT',
                name: 'Northern Territory',
            },
            {
                code: 'QLD',
                name: 'Queensland',
            },
            {
                code: 'SA',
                name: 'South Australia',
            },
            {
                code: 'TAS',
                name: 'Tasmania',
            },
            {
                code: 'VIC',
                name: 'Victoria',
            },
            {
                code: 'WA',
                name: 'Western Australia',
            },
        ],
    },
    {
        code: 'AT',
        id: 2195,
        name: 'Austria',
        states: [
            {
                code: 'AU01',
                name: 'Burgenland',
            },
            {
                code: 'AU02',
                name: 'Carinthia',
            },
            {
                code: 'AU03',
                name: 'Lower Austria',
            },
            {
                code: 'AU05',
                name: 'Salzburg',
            },
            {
                code: 'AU06',
                name: 'Styria',
            },
            {
                code: 'AU07',
                name: 'Tyrol',
            },
            {
                code: 'AU04',
                name: 'Upper Austria',
            },
            {
                code: 'AU09',
                name: 'Vienna',
            },
            {
                code: 'AU08',
                name: 'Vorarlberg',
            },
        ],
    },
    {
        code: 'AZ',
        id: 2196,
        name: 'Azerbaijan',
        states: [
            {
                code: 'AZ-ABS',
                name: 'Absheron',
            },
            {
                code: 'AZ-AGM',
                name: 'Aghdam',
            },
            {
                code: 'AZ-AGS',
                name: 'Aghdash',
            },
            {
                code: 'AZ-AGC',
                name: 'Aghjabedi',
            },
            {
                code: 'AZ-AGA',
                name: 'Aghstafa',
            },
            {
                code: 'AZ-AGU',
                name: 'Aghsu',
            },
            {
                code: 'AZ-AB',
                name: 'Ali-Bairamly',
            },
            {
                code: 'AZ-AST',
                name: 'Astara',
            },
            {
                code: 'AZ-BAB',
                name: 'Babek',
            },
            {
                code: 'AZ-BA',
                name: 'Baku',
            },
            {
                code: 'AZ-BAL',
                name: 'Balaken',
            },
            {
                code: 'AZ-BAR',
                name: 'Barda',
            },
            {
                code: 'AZ-BEY',
                name: 'Beilagan',
            },
            {
                code: 'AZ-BIL',
                name: 'Bilasuvar',
            },
            {
                code: 'AZ-DAS',
                name: 'Dashkesan',
            },
            {
                code: 'AZ-DAV',
                name: 'Devechi',
            },
            {
                code: 'AZ-FUZ',
                name: 'Fizuli',
            },
            {
                code: 'AZ-QAB',
                name: 'Gabala',
            },
            {
                code: 'AZ-GAD',
                name: 'Gadabey',
            },
            {
                code: 'AZ-QAX',
                name: 'Gakh',
            },
            {
                code: 'AZ-GA',
                name: 'Ganja',
            },
            {
                code: 'AZ-QAZ',
                name: 'Gazakh',
            },
            {
                code: 'AZ-GOR',
                name: 'Geranboy',
            },
            {
                code: 'AZ-QOB',
                name: 'Gobustan',
            },
            {
                code: 'AZ-GOY',
                name: 'Goychay',
            },
            {
                code: 'AZ-QBA',
                name: 'Guba',
            },
            {
                code: 'AZ-QBI',
                name: 'Gubadly',
            },
            {
                code: 'AZ-QUS',
                name: 'Gusar',
            },
            {
                code: 'AZ-HAC',
                name: 'Hacuqabul',
            },
            {
                code: 'AZ-IMI',
                name: 'Imishli',
            },
            {
                code: 'AZ-ISM',
                name: 'Ismailly',
            },
            {
                code: 'AZ-CAL',
                name: 'Jalilabad',
            },
            {
                code: 'AZ-CAB',
                name: 'Jebrail',
            },
            {
                code: 'AZ-CUL',
                name: 'Julfa',
            },
            {
                code: 'AZ-KAL',
                name: 'Kelbajar',
            },
            {
                code: 'AZ-XAC',
                name: 'Khachmaz',
            },
            {
                code: 'AZ-XA',
                name: 'Khankendy',
            },
            {
                code: 'AZ-XAN',
                name: 'Khanlar',
            },
            {
                code: 'AZ-XCI',
                name: 'Khojaly',
            },
            {
                code: 'AZ-XVD',
                name: 'Khojavend',
            },
            {
                code: 'AZ-XIZ',
                name: 'Khyzy',
            },
            {
                code: 'AZ-KUR',
                name: 'Kyurdamir',
            },
            {
                code: 'AZ-LAC',
                name: 'Lachin',
            },
            {
                code: 'AZ-LAN',
                name: 'Lenkaran',
            },
            {
                code: 'AZ-LA',
                name: 'Lenkaran',
            },
            {
                code: 'AZ-LER',
                name: 'Lerik',
            },
            {
                code: 'AZ-MAS',
                name: 'Masally',
            },
            {
                code: 'AZ-MI',
                name: 'Mingechevir',
            },
            {
                code: 'AZ-NA',
                name: 'Naftalan',
            },
            {
                code: 'AZ-NX',
                name: 'Nakhchivan',
            },
            {
                code: 'AZ-NEF',
                name: 'Neftchala',
            },
            {
                code: 'AZ-OGU',
                name: 'Oghuz',
            },
            {
                code: 'AZ-ORD',
                name: 'Ordubad',
            },
            {
                code: 'AZ-SAT',
                name: 'Saatly',
            },
            {
                code: 'AZ-SAB',
                name: 'Sabirabad',
            },
            {
                code: 'AZ-SAL',
                name: 'Salyan',
            },
            {
                code: 'AZ-SMX',
                name: 'Samuh',
            },
            {
                code: 'AZ-SAD',
                name: 'Sedarak',
            },
            {
                code: 'AZ-SAH',
                name: 'Shahbuz',
            },
            {
                code: 'AZ-SMI',
                name: 'Shamakhy',
            },
            {
                code: 'AZ-SKR',
                name: 'Shamkir',
            },
            {
                code: 'AZ-SAK',
                name: 'Sheki',
            },
            {
                code: 'AZ-SA',
                name: 'Sheki',
            },
            {
                code: 'AZ-SAR',
                name: 'Sherur',
            },
            {
                code: 'AZ-SS',
                name: 'Shusha',
            },
            {
                code: 'AZ-SUS',
                name: 'Shusha',
            },
            {
                code: 'AZ-SIY',
                name: 'Siazan',
            },
            {
                code: 'AZ-SM',
                name: 'Sumgayit',
            },
            {
                code: 'AZ-TAR',
                name: 'Terter',
            },
            {
                code: 'AZ-TOV',
                name: 'Tovuz',
            },
            {
                code: 'AZ-UCA',
                name: 'Ujar',
            },
            {
                code: 'AZ-YAR',
                name: 'Yardymly',
            },
            {
                code: 'AZ-YE',
                name: 'Yevlakh',
            },
            {
                code: 'AZ-YEV',
                name: 'Yevlakh',
            },
            {
                code: 'AZ-ZAQ',
                name: 'Zagatala',
            },
            {
                code: 'AZ-ZAN',
                name: 'Zangilan',
            },
            {
                code: 'AZ-ZAR',
                name: 'Zerdab',
            },
        ],
    },
    {
        code: 'BS',
        id: 2197,
        name: 'Bahamas',
        states: [
            {
                code: 'BF24',
                name: 'Acklins',
            },
            {
                code: 'BF32',
                name: 'Berry Islands',
            },
            {
                code: 'BF05',
                name: 'Bimini',
            },
            {
                code: 'BF36',
                name: 'Black Point',
            },
            {
                code: 'BF06',
                name: 'Cat Island',
            },
            {
                code: 'BF37',
                name: 'Central Abaco',
            },
            {
                code: 'BF38',
                name: 'Central Andros',
            },
            {
                code: 'BF39',
                name: 'Central Eleuthera',
            },
            {
                code: 'BF25',
                name: 'City of Freeport',
            },
            {
                code: 'BF40',
                name: 'Crooked Island',
            },
            {
                code: 'BF41',
                name: 'East Grand Bahama',
            },
            {
                code: 'BF10',
                name: 'Exuma',
            },
            {
                code: 'BF42',
                name: 'Grand Cay',
            },
            {
                code: 'BS.GT\t',
                name: 'Green Turtle Cay',
            },
            {
                code: 'BF22',
                name: 'Harbour Island',
            },
            {
                code: 'BF43',
                name: 'Hope Town',
            },
            {
                code: 'BF13',
                name: 'Inagua',
            },
            {
                code: 'BF15',
                name: 'Long Island',
            },
            {
                code: 'BF44',
                name: 'Mangrove Cay',
            },
            {
                code: 'BF16',
                name: 'Mayaguana',
            },
            {
                code: 'BF45',
                name: "Moore's Island",
            },
            {
                code: 'BS.NW',
                name: 'New Providence',
            },
            {
                code: 'BF46',
                name: 'North Abaco',
            },
            {
                code: 'BF47',
                name: 'North Andros',
            },
            {
                code: 'BF48',
                name: 'North Eleuthera',
            },
            {
                code: 'BF18',
                name: 'Ragged Island',
            },
            {
                code: 'BF49',
                name: 'Rum Cay',
            },
            {
                code: 'BF35',
                name: 'San Salvador',
            },
            {
                code: 'BF50',
                name: 'South Abaco',
            },
            {
                code: 'BF51',
                name: 'South Andros',
            },
            {
                code: 'BF52',
                name: 'South Eleuthera',
            },
            {
                code: 'BF53',
                name: 'Spanish Wells',
            },
            {
                code: 'BF54',
                name: 'West Grand Bahama',
            },
        ],
    },
    {
        code: 'BH',
        id: 2198,
        name: 'Bahrain',
        states: [
            {
                code: 'BA16',
                name: 'Capital',
            },
            {
                code: 'BA19',
                name: 'Central',
            },
            {
                code: 'BA15',
                name: 'Muharraq',
            },
            {
                code: 'BA18',
                name: 'Northern',
            },
            {
                code: 'BA17',
                name: 'Southern',
            },
        ],
    },
    {
        code: 'BD',
        id: 2199,
        name: 'Bangladesh',
        states: [
            {
                code: 'BG85',
                name: 'Barisal',
            },
            {
                code: 'BG84',
                name: 'Chittagong',
            },
            {
                code: 'BG81',
                name: 'Dhaka',
            },
            {
                code: 'BG82',
                name: 'Khulna',
            },
            {
                code: 'BG81',
                name: 'Mymensingh',
            },
            {
                code: 'BG83',
                name: 'Rajshahi',
            },
            {
                code: 'BG87',
                name: 'Rangpur',
            },
            {
                code: 'BG86',
                name: 'Sylhet',
            },
        ],
    },
    {
        code: 'BB',
        id: 2200,
        name: 'Barbados',
        states: [
            {
                code: 'BB01',
                name: 'Christ Church',
            },
            {
                code: 'BB02',
                name: 'Saint Andrew',
            },
            {
                code: 'BB03',
                name: 'Saint George',
            },
            {
                code: 'BB04',
                name: 'Saint James',
            },
            {
                code: 'BB05',
                name: 'Saint John',
            },
            {
                code: 'BB06',
                name: 'Saint Joseph',
            },
            {
                code: 'BB07',
                name: 'Saint Lucy',
            },
            {
                code: 'BB08',
                name: 'Saint Michael',
            },
            {
                code: 'BB09',
                name: 'Saint Peter',
            },
            {
                code: 'BB10',
                name: 'Saint Philip',
            },
            {
                code: 'BB11',
                name: 'Saint Thomas',
            },
        ],
    },
    {
        code: 'BY',
        id: 2201,
        name: 'Belarus',
        states: [
            {
                code: 'BO01',
                name: 'Brest',
            },
            {
                code: 'BO02',
                name: 'Gomel',
            },
            {
                code: 'BO03',
                name: 'Grodno',
            },
            {
                code: 'BO05',
                name: 'Minsk',
            },
            {
                code: 'BO04',
                name: 'Minsk City',
            },
            {
                code: 'BO06',
                name: 'Mogilev',
            },
            {
                code: 'BO07',
                name: 'Vitebsk',
            },
        ],
    },
    {
        code: 'BE',
        id: 2202,
        name: 'Belgium',
        states: [
            {
                code: 'BE01',
                name: 'Antwerpen Province',
            },
            {
                code: 'BE11',
                name: 'Brussels-Capital Region',
            },
            {
                code: 'BE12',
                name: 'Flemish Brabant Province',
            },
            {
                code: 'BE03',
                name: 'Hainaut Province',
            },
            {
                code: 'BE04',
                name: 'Liege Province',
            },
            {
                code: 'BE05',
                name: 'Limburg Province',
            },
            {
                code: 'BE06',
                name: 'Luxembourg Province',
            },
            {
                code: 'BE07',
                name: 'Namur Province',
            },
            {
                code: 'BE08',
                name: 'Oost-Vlaanderen Province',
            },
            {
                code: 'BE10',
                name: 'Walloon Brabant Province',
            },
            {
                code: 'BE09',
                name: 'West-Vlaanderen Province',
            },
        ],
    },
    {
        code: 'BZ',
        id: 2203,
        name: 'Belize',
        states: [],
    },
    {
        code: 'BJ',
        id: 2204,
        name: 'Benin',
        states: [
            {
                code: 'BN07',
                name: 'Alibori',
            },
            {
                code: 'BN08',
                name: 'Atacora',
            },
            {
                code: 'BN09',
                name: 'Atlantique',
            },
            {
                code: 'BN10',
                name: 'Borgou',
            },
            {
                code: 'BN11',
                name: 'Collines',
            },
            {
                code: 'BN12',
                name: 'Couffo',
            },
            {
                code: 'BN13',
                name: 'Donga',
            },
            {
                code: 'BN14',
                name: 'Littoral',
            },
            {
                code: 'BN15',
                name: 'Mono',
            },
            {
                code: 'BN16',
                name: 'Ouémé',
            },
            {
                code: 'BN17',
                name: 'Plateau',
            },
            {
                code: 'BN18',
                name: 'Zou',
            },
        ],
    },
    {
        code: 'BU',
        id: 2372,
        name: 'Bermuda',
        states: [
            {
                code: 'BM.BD',
                name: 'Bermuda',
            },
            {
                code: 'BD01',
                name: 'Devonshire',
            },
            {
                code: 'BD03',
                name: 'Hamilton municipality',
            },
            {
                code: 'BD02',
                name: 'Hamilton',
            },
            {
                code: 'BD04',
                name: 'Paget',
            },
            {
                code: 'BD05',
                name: 'Pembroke',
            },
            {
                code: 'BD06',
                name: 'Saint George municipality',
            },
            {
                code: 'BD07',
                name: "Saint George's",
            },
            {
                code: 'BD08',
                name: 'Sandys',
            },
            {
                code: 'BD09',
                name: 'Smiths',
            },
            {
                code: 'BD10',
                name: 'Southampton',
            },
            {
                code: 'BD11',
                name: 'Warwick',
            },
        ],
    },
    {
        code: 'BT',
        id: 2205,
        name: 'Bhutan',
        states: [],
    },
    {
        code: 'BO',
        id: 2206,
        name: 'Bolivia; Plurinational State',
        states: [
            {
                code: 'BL01',
                name: 'Chuquisaca',
            },
            {
                code: 'BL02',
                name: 'Cochabamba',
            },
            {
                code: 'BL03',
                name: 'El Beni',
            },
            {
                code: 'BL04',
                name: 'La Paz',
            },
            {
                code: 'BL05',
                name: 'Oruro',
            },
            {
                code: 'BL06',
                name: 'Pando',
            },
            {
                code: 'BL07',
                name: 'Potosí',
            },
            {
                code: 'BL08',
                name: 'Santa Cruz',
            },
            {
                code: 'BL09',
                name: 'Tarija',
            },
        ],
    },
    {
        code: 'BQ',
        id: 2449,
        name: 'Bonaire',
        states: [
            {
                code: 'BQ.BO',
                name: 'Bonaire',
            },
            {
                code: 'BQ.SB',
                name: 'Saba',
            },
            {
                code: 'BQ.SE',
                name: 'Sint Eustatius',
            },
        ],
    },
    {
        code: 'BA',
        id: 2207,
        name: 'Bosnia and Herzegovina',
        states: [
            {
                code: 'BA-05',
                name: 'Bosansko-podrinjski kanton',
            },
            {
                code: 'BA-BRC',
                name: 'Brcko distrikt',
            },
            {
                code: 'BA-BIH',
                name: 'Federacija Bosna i Hercegovina',
            },
            {
                code: 'BA-07',
                name: 'Hercegovacko-neretvanski kanton',
            },
            {
                code: 'BA-09',
                name: 'Kanton Sarajevo',
            },
            {
                code: 'BA-10',
                name: 'Livanjski kanton',
            },
            {
                code: 'BA-02',
                name: 'Posavski kanton',
            },
            {
                code: 'BA-SRP',
                name: 'Republika Srpska',
            },
            {
                code: 'BA-06',
                name: 'Srednjobosanski kanton',
            },
            {
                code: 'BA-03',
                name: 'Tuzlanski kanton',
            },
            {
                code: 'BA-01',
                name: 'Unsko-sanski kanton',
            },
            {
                code: 'BA-08',
                name: 'Zapadnohercegovacki kanton',
            },
            {
                code: 'BA-04',
                name: 'Zenicko-dobojski kanton',
            },
        ],
    },
    {
        code: 'BW',
        id: 2208,
        name: 'Botswana',
        states: [
            {
                code: 'BC01',
                name: 'Central',
            },
            {
                code: 'BC12',
                name: 'Chobe',
            },
            {
                code: 'BC13',
                name: 'Francistown',
            },
            {
                code: 'BC14',
                name: 'Gaborone',
            },
            {
                code: 'BC03',
                name: 'Ghanzi',
            },
            {
                code: 'BC15',
                name: 'Jwaneng',
            },
            {
                code: 'BC04',
                name: 'Kgalagadi',
            },
            {
                code: 'BC05',
                name: 'Kgatleng',
            },
            {
                code: 'BC06',
                name: 'Kweneng',
            },
            {
                code: 'BC16',
                name: 'Lobatse',
            },
            {
                code: 'BC08',
                name: 'North-East',
            },
            {
                code: 'BC11',
                name: 'North-West',
            },
            {
                code: 'BC17',
                name: 'Selibe Phikwe',
            },
            {
                code: 'BC09',
                name: 'South East',
            },
            {
                code: 'BC10',
                name: 'Southern',
            },
            {
                code: 'BC18',
                name: 'Sowa Town',
            },
        ],
    },
    {
        code: 'BV',
        id: 2410,
        name: 'Bouvet Island',
        states: [],
    },
    {
        code: 'BR',
        id: 2209,
        name: 'Brazil',
        states: [
            {
                code: 'AC',
                name: 'Acre',
            },
            {
                code: 'AL',
                name: 'Alagoas',
            },
            {
                code: 'AP',
                name: 'Amapá',
            },
            {
                code: 'AM',
                name: 'Amazonas',
            },
            {
                code: 'BA',
                name: 'Bahia',
            },
            {
                code: 'CE',
                name: 'Ceará',
            },
            {
                code: 'DF',
                name: 'Distrito Federal',
            },
            {
                code: 'ES',
                name: 'Espírito Santo',
            },
            {
                code: 'GO',
                name: 'Goiás',
            },
            {
                code: 'MA',
                name: 'Maranhão',
            },
            {
                code: 'MT',
                name: 'Mato Grosso',
            },
            {
                code: 'MS',
                name: 'Mato Grosso do Sul',
            },
            {
                code: 'MG',
                name: 'Minas Gerais',
            },
            {
                code: 'PA',
                name: 'Pará',
            },
            {
                code: 'PR',
                name: 'Paraná',
            },
            {
                code: 'PB',
                name: 'Paraíba',
            },
            {
                code: 'PE',
                name: 'Pernambuco',
            },
            {
                code: 'PI',
                name: 'Piauí',
            },
            {
                code: 'RN',
                name: 'Rio Grande do Norte',
            },
            {
                code: 'RS',
                name: 'Rio Grande do Sul',
            },
            {
                code: 'RJ',
                name: 'Rio de Janeiro',
            },
            {
                code: 'RO',
                name: 'Rondônia',
            },
            {
                code: 'RR',
                name: 'Roraima',
            },
            {
                code: 'SC',
                name: 'Santa Catarina',
            },
            {
                code: 'SP',
                name: 'São Paulo',
            },
            {
                code: 'SE',
                name: 'Sergipe',
            },
            {
                code: 'TO',
                name: 'Tocantins',
            },
        ],
    },
    {
        code: 'IO',
        id: 2411,
        name: 'British Indian Ocean Territory',
        states: [],
    },
    {
        code: 'BN',
        id: 2210,
        name: 'Brunei Darussalam',
        states: [
            {
                code: 'BX01',
                name: 'Amo',
            },
            {
                code: 'BX02',
                name: 'Bandar Seri Begawan',
            },
            {
                code: 'BX03',
                name: 'Bangar',
            },
            {
                code: 'BX04',
                name: 'Batu Apoi',
            },
            {
                code: 'BX05',
                name: 'Berakas',
            },
            {
                code: 'BX06',
                name: 'Bokok',
            },
            {
                code: 'BX07',
                name: 'Bukit Sawat',
            },
            {
                code: 'BX08',
                name: 'Burong Pinggai Ayer',
            },
            {
                code: 'BX09',
                name: 'Gadong',
            },
            {
                code: 'BX10',
                name: 'Keriam',
            },
            {
                code: 'BX11',
                name: 'Kianggeh',
            },
            {
                code: 'BX12',
                name: 'Kilanas',
            },
            {
                code: 'BX13',
                name: 'Kiudang',
            },
            {
                code: 'BX14',
                name: 'Kota Batu',
            },
            {
                code: 'BX15',
                name: 'Kuala Balai',
            },
            {
                code: 'BX16',
                name: 'Kuala Belait',
            },
            {
                code: 'BX17',
                name: 'Labi',
            },
            {
                code: 'BX18',
                name: 'Labu',
            },
            {
                code: 'BX19',
                name: 'Lamunin',
            },
            {
                code: 'BX20',
                name: 'Liang',
            },
            {
                code: 'BX21',
                name: 'Lumapas',
            },
            {
                code: 'BX22',
                name: 'Melilas',
            },
            {
                code: 'BX23',
                name: 'Mentiri',
            },
            {
                code: 'BX24',
                name: 'Pekan Tutong',
            },
            {
                code: 'BX25',
                name: 'Pengkalan Batu',
            },
            {
                code: 'BX26',
                name: 'Peramu',
            },
            {
                code: 'BX27',
                name: 'Rambai',
            },
            {
                code: 'BX28',
                name: 'Saba',
            },
            {
                code: 'BX29',
                name: 'Sengkurong',
            },
            {
                code: 'BX30',
                name: 'Serasa',
            },
            {
                code: 'BX31',
                name: 'Seria',
            },
            {
                code: 'BX32',
                name: 'Sukang',
            },
            {
                code: 'BX33',
                name: 'Sungai Kebun',
            },
            {
                code: 'BX34',
                name: 'Sungai Kedayan',
            },
            {
                code: 'BX35',
                name: 'Tamoi',
            },
            {
                code: 'BX36',
                name: 'Tanjong Maya',
            },
            {
                code: 'BX37',
                name: 'Telisai',
            },
            {
                code: 'BX38',
                name: 'Ukong',
            },
        ],
    },
    {
        code: 'BG',
        id: 2211,
        name: 'Bulgaria',
        states: [
            {
                code: 'BU38',
                name: 'Blagoevgrad',
            },
            {
                code: 'BU39',
                name: 'Burgas',
            },
            {
                code: 'BU40',
                name: 'Dobrich',
            },
            {
                code: 'BU41',
                name: 'Gabrovo',
            },
            {
                code: 'BU42',
                name: 'Grad Sofiya',
            },
            {
                code: 'BU43',
                name: 'Khaskovo',
            },
            {
                code: 'BU44',
                name: 'Kurdzhali',
            },
            {
                code: 'BU45',
                name: 'Kyustendil',
            },
            {
                code: 'BU46',
                name: 'Lovech',
            },
            {
                code: 'BU47',
                name: 'Montana',
            },
            {
                code: 'BU48',
                name: 'Pazardzhik',
            },
            {
                code: 'BU49',
                name: 'Pernik',
            },
            {
                code: 'BU50',
                name: 'Pleven',
            },
            {
                code: 'BU51',
                name: 'Plovdiv',
            },
            {
                code: 'BU52',
                name: 'Razgrad',
            },
            {
                code: 'BU53',
                name: 'Ruse',
            },
            {
                code: 'BU54',
                name: 'Shumen',
            },
            {
                code: 'BU55',
                name: 'Silistra',
            },
            {
                code: 'BU56',
                name: 'Sliven',
            },
            {
                code: 'BU57',
                name: 'Smolyan',
            },
            {
                code: 'BU58',
                name: 'Sofiya',
            },
            {
                code: 'BU59',
                name: 'Stara Zagora',
            },
            {
                code: 'BU60',
                name: 'Turgovishte',
            },
            {
                code: 'BU61',
                name: 'Varna',
            },
            {
                code: 'BU62',
                name: 'Veliko Turnovo',
            },
            {
                code: 'BU63',
                name: 'Vidin',
            },
            {
                code: 'BU64',
                name: 'Vratsa',
            },
            {
                code: 'BU65',
                name: 'Yambol',
            },
        ],
    },
    {
        code: 'BF',
        id: 2212,
        name: 'Burkina Faso',
        states: [
            {
                code: 'UV79',
                name: 'Boucle du Mouhoun',
            },
            {
                code: 'UV80',
                name: 'Cascades',
            },
            {
                code: 'UV82',
                name: 'Centre Est',
            },
            {
                code: 'UV83',
                name: 'Centre Nord',
            },
            {
                code: 'UV84',
                name: 'Centre Ouest',
            },
            {
                code: 'UV81',
                name: 'Centre',
            },
            {
                code: 'UV85',
                name: 'Centre Sud',
            },
            {
                code: 'UV86',
                name: 'Est',
            },
            {
                code: 'UV87',
                name: 'Hauts Bassins',
            },
            {
                code: 'UV88',
                name: 'Nord',
            },
            {
                code: 'UV89',
                name: 'Plateau Central',
            },
            {
                code: 'UV90',
                name: 'Sahel',
            },
            {
                code: 'UV91',
                name: 'Sud-Ouest',
            },
        ],
    },
    {
        code: 'BM',
        id: 2385,
        name: 'Burma',
        states: [
            {
                code: 'BM03',
                name: 'Ayeyarwady',
            },
            {
                code: 'BM16',
                name: 'Bago',
            },
            {
                code: 'BM02',
                name: 'Chin',
            },
            {
                code: 'BM04',
                name: 'Kachin',
            },
            {
                code: 'BM06',
                name: 'Kayah',
            },
            {
                code: 'BM05',
                name: 'Kayin',
            },
            {
                code: 'BM15',
                name: 'Magway',
            },
            {
                code: 'BM08',
                name: 'Mandalay',
            },
            {
                code: 'BM13',
                name: 'Mon',
            },
            {
                code: 'BM18',
                name: 'Naypyidaw',
            },
            {
                code: 'BM01',
                name: 'Rakhine',
            },
            {
                code: 'BM10',
                name: 'Sagaing',
            },
            {
                code: 'BM11',
                name: 'Shan',
            },
            {
                code: 'BM12',
                name: 'Tanintharyi',
            },
            {
                code: 'BM17',
                name: 'Yangon',
            },
        ],
    },
    {
        code: 'BI',
        id: 2213,
        name: 'Burundi',
        states: [],
    },
    {
        code: 'KH',
        id: 2214,
        name: 'Cambodia',
        states: [
            {
                code: 'CB25',
                name: 'Bântéay Méanchey',
            },
            {
                code: 'CB29',
                name: 'Batdâmbâng',
            },
            {
                code: 'CB02',
                name: 'Kâmpóng Cham',
            },
            {
                code: 'CB03',
                name: 'Kâmpóng Chhnang',
            },
            {
                code: 'CB04',
                name: 'Kâmpóng Spœ',
            },
            {
                code: 'CB05',
                name: 'Kâmpóng Thum',
            },
            {
                code: 'CB21',
                name: 'Kâmpôt',
            },
            {
                code: 'CB07',
                name: 'Kândal',
            },
            {
                code: 'CB08',
                name: 'Kaôh Kong',
            },
            {
                code: 'CB09',
                name: 'Krâchéh',
            },
            {
                code: 'CB26',
                name: 'Krong Keb',
            },
            {
                code: 'CB30',
                name: 'Krong Pailin',
            },
            {
                code: 'CB28',
                name: 'Krong Preah Sihanouk',
            },
            {
                code: 'CB10',
                name: 'Môndól Kiri',
            },
            {
                code: 'CB27',
                name: 'Otdâr Méanchey',
            },
            {
                code: 'CB22',
                name: 'Phnom Penh',
            },
            {
                code: 'CB12',
                name: 'Pouthisat',
            },
            {
                code: 'CB13',
                name: 'Preah Vihéar',
            },
            {
                code: 'CB14',
                name: 'Prey Vêng',
            },
            {
                code: 'CB23',
                name: 'Rôtânôkiri',
            },
            {
                code: 'CB24',
                name: 'Siemréab',
            },
            {
                code: 'CB17',
                name: 'Stœ?ng Trêng',
            },
            {
                code: 'CB18',
                name: 'Svay Rieng',
            },
            {
                code: 'CB19',
                name: 'Takêv',
            },
            {
                code: 'CB31',
                name: 'Tbong Khmum',
            },
        ],
    },
    {
        code: 'CM',
        id: 2215,
        name: 'Cameroon',
        states: [
            {
                code: 'CM10',
                name: 'Adamaoua',
            },
            {
                code: 'CM11',
                name: 'Centre',
            },
            {
                code: 'CM04',
                name: 'Est',
            },
            {
                code: 'CM12',
                name: 'Extrême-Nord',
            },
            {
                code: 'CM05',
                name: 'Littoral',
            },
            {
                code: 'CM07',
                name: 'Nord-Ouest',
            },
            {
                code: 'CM13',
                name: 'Nord',
            },
            {
                code: 'CM08',
                name: 'Ouest',
            },
            {
                code: 'CM09',
                name: 'Sud-Ouest',
            },
            {
                code: 'CM14',
                name: 'Sud',
            },
        ],
    },
    {
        code: 'CA',
        id: 2216,
        name: 'Canada',
        states: [
            {
                code: 'AB',
                name: 'Alberta',
            },
            {
                code: 'BC',
                name: 'British Columbia',
            },
            {
                code: 'MB',
                name: 'Manitoba',
            },
            {
                code: 'NB',
                name: 'New Brunswick',
            },
            {
                code: 'NL',
                name: 'Newfoundland and Labrador',
            },
            {
                code: 'NT',
                name: 'Northwest Territories',
            },
            {
                code: 'NS',
                name: 'Nova Scotia',
            },
            {
                code: 'NU',
                name: 'Nunavut',
            },
            {
                code: 'ON',
                name: 'Ontario',
            },
            {
                code: 'PE',
                name: 'Prince Edward Island',
            },
            {
                code: 'QC',
                name: 'Quebec',
            },
            {
                code: 'SK',
                name: 'Saskatchewan',
            },
            {
                code: 'YT',
                name: 'Yukon',
            },
        ],
    },
    {
        code: 'CV',
        id: 2217,
        name: 'Cape Verde',
        states: [],
    },
    {
        code: 'KY',
        id: 2379,
        name: 'Cayman Islands',
        states: [
            {
                code: 'KY.BT',
                name: 'Bodden Town',
            },
            {
                code: 'KY.CJ',
                name: 'Cayman Islands',
            },
            {
                code: 'KY.EE',
                name: 'East End',
            },
            {
                code: 'KY.GT',
                name: 'George Town',
            },
            {
                code: 'KY.NS',
                name: 'North Side',
            },
            {
                code: 'KY.SI',
                name: 'Sister Islands',
            },
            {
                code: 'KY.WB',
                name: 'West Bay',
            },
        ],
    },
    {
        code: 'CF',
        id: 2218,
        name: 'Central African Republic',
        states: [
            {
                code: 'CT01',
                name: 'Bamingui-Bangoran',
            },
            {
                code: 'CT18',
                name: 'Bangui',
            },
            {
                code: 'CT02',
                name: 'Basse-Kotto',
            },
            {
                code: 'CT05',
                name: 'Haut-Mbomou',
            },
            {
                code: 'CT03',
                name: 'Haute-Kotto',
            },
            {
                code: 'CT06',
                name: 'Kémo',
            },
            {
                code: 'CT07',
                name: 'Lobaye',
            },
            {
                code: 'CT04',
                name: 'Mambéré-Kadéï',
            },
            {
                code: 'CT08',
                name: 'Mbomou',
            },
            {
                code: 'CT15',
                name: 'Nana-Grébizi',
            },
            {
                code: 'CT09',
                name: 'Nana-Mambéré',
            },
            {
                code: 'CT17',
                name: "Ombella-M'Poko",
            },
            {
                code: 'CT11',
                name: 'Ouaka',
            },
            {
                code: 'CT12',
                name: 'Ouham',
            },
            {
                code: 'CT13',
                name: 'Ouham-Pendé',
            },
            {
                code: 'CT16',
                name: 'Sangha-Mbaéré',
            },
            {
                code: 'CT14',
                name: 'Vakaga',
            },
        ],
    },
    {
        code: 'TD',
        id: 2219,
        name: 'Chad',
        states: [
            {
                code: 'CD22',
                name: 'Barh el Ghazel',
            },
            {
                code: 'CD01',
                name: 'Batha',
            },
            {
                code: 'CD23',
                name: 'Borkou',
            },
            {
                code: 'CD15',
                name: 'Chari-Baguirmi',
            },
            {
                code: 'CD27',
                name: 'Ennedi Est',
            },
            {
                code: 'CD28',
                name: 'Ennedi Ouest',
            },
            {
                code: 'CD05',
                name: 'Guéra',
            },
            {
                code: 'CD18',
                name: 'Hadjer-Lamis',
            },
            {
                code: 'CD06',
                name: 'Kanem',
            },
            {
                code: 'CD07',
                name: 'Lac',
            },
            {
                code: 'CD08',
                name: 'Logone Occidental',
            },
            {
                code: 'CD09',
                name: 'Logone Oriental',
            },
            {
                code: 'CD19',
                name: 'Mandoul',
            },
            {
                code: 'CD16',
                name: 'Mayo-Kebbi Est',
            },
            {
                code: 'CD20',
                name: 'Mayo-Kebbi Ouest',
            },
            {
                code: 'CD17',
                name: 'Moyen-Chari',
            },
            {
                code: 'CD12',
                name: 'Ouaddaï',
            },
            {
                code: 'CD13',
                name: 'Salamat',
            },
            {
                code: 'CD25',
                name: 'Sila',
            },
            {
                code: 'CD14',
                name: 'Tandjilé',
            },
            {
                code: 'CD26',
                name: 'Tibesti',
            },
            {
                code: 'CD21',
                name: "Ville de N'Djamena",
            },
            {
                code: 'CD02',
                name: 'Wadi Fira',
            },
        ],
    },
    {
        code: 'CH99',
        id: 2386,
        name: 'Channel Islands',
        states: [],
    },
    {
        code: 'CL',
        id: 2220,
        name: 'Chile',
        states: [
            {
                code: 'CL.AI',
                name: 'Aisén del General Carlos Ibáñez del Campo',
            },
            {
                code: 'CL.AN',
                name: 'Antofagasta',
            },
            {
                code: 'CL.AR',
                name: 'Araucanía',
            },
            {
                code: 'CL.AP',
                name: 'Arica and Parinacota',
            },
            {
                code: 'CL.AT',
                name: 'Atacama',
            },
            {
                code: 'CL.BI',
                name: 'Bío-Bío',
            },
            {
                code: 'CL.CO',
                name: 'Coquimbo',
            },
            {
                code: 'CL.LI',
                name: "Libertador General Bernardo O'Higgins",
            },
            {
                code: 'CL.LG',
                name: 'Los Lagos',
            },
            {
                code: 'CL.LR',
                name: 'Los Ríos',
            },
            {
                code: 'CL.MA',
                name: 'Magallanes y Antártica Chilena',
            },
            {
                code: 'CL.ML',
                name: 'Maule',
            },
            {
                code: 'CL.RM',
                name: 'Región Metropolitana de Santiago',
            },
            {
                code: 'CL.TP',
                name: 'Tarapacá',
            },
            {
                code: 'CL.VS',
                name: 'Valparaíso',
            },
        ],
    },
    {
        code: 'CN',
        id: 2221,
        name: 'China',
        states: [
            {
                code: 'CH01',
                name: 'Anhui',
            },
            {
                code: 'CH22',
                name: 'Beijing',
            },
            {
                code: 'CH33',
                name: 'Chongqing',
            },
            {
                code: 'CH07',
                name: 'Fujian',
            },
            {
                code: 'CH15',
                name: 'Gansu',
            },
            {
                code: 'CH17',
                name: 'Guangdon',
            },
            {
                code: 'CH30',
                name: 'Guangdong',
            },
            {
                code: 'CH16',
                name: 'Guangxi',
            },
            {
                code: 'CH18',
                name: 'Guizhou',
            },
            {
                code: 'CH31',
                name: 'Hainan',
            },
            {
                code: 'CH10',
                name: 'Hebei',
            },
            {
                code: 'CH08',
                name: 'Heilongjiang',
            },
            {
                code: 'CH09',
                name: 'Henan',
            },
            {
                code: 'CH34',
                name: 'Hong Kong',
            },
            {
                code: 'CH12',
                name: 'Hubei',
            },
            {
                code: 'CH11',
                name: 'Hunan',
            },
            {
                code: 'CH04',
                name: 'Jiangsu',
            },
            {
                code: 'CH03',
                name: 'Jiangxi',
            },
            {
                code: 'CH05',
                name: 'Jilin',
            },
            {
                code: 'CH19',
                name: 'Liaoning',
            },
            {
                code: 'CH20',
                name: 'Nei Mongol',
            },
            {
                code: 'CH21',
                name: 'Ningxia',
            },
            {
                code: 'CH06',
                name: 'Qinghai',
            },
            {
                code: 'CH26',
                name: 'Shaanxi',
            },
            {
                code: 'CH25',
                name: 'Shandong',
            },
            {
                code: 'CH23',
                name: 'Shanghai',
            },
            {
                code: 'CH24',
                name: 'Shanxi',
            },
            {
                code: 'CH32',
                name: 'Sichuan',
            },
            {
                code: 'CH27',
                name: 'Sichuan',
            },
            {
                code: 'CH28',
                name: 'Tianjin',
            },
            {
                code: 'CH13',
                name: 'Xinjiang',
            },
            {
                code: 'CH14',
                name: 'Xizang',
            },
            {
                code: 'CH29',
                name: 'Yunnan',
            },
            {
                code: 'CH02',
                name: 'Zhejiang',
            },
        ],
    },
    {
        code: 'CX',
        id: 2412,
        name: 'Christmas Island',
        states: [],
    },
    {
        code: 'CC',
        id: 2413,
        name: 'Cocos (Keeling) Islands',
        states: [],
    },
    {
        code: 'CO',
        id: 2222,
        name: 'Colombia',
        states: [
            {
                code: 'CO01',
                name: 'Amazonas',
            },
            {
                code: 'CO02',
                name: 'Antioquia',
            },
            {
                code: 'CO03',
                name: 'Arauca',
            },
            {
                code: 'CO04',
                name: 'Atlántico',
            },
            {
                code: 'CO35',
                name: 'Bolívar',
            },
            {
                code: 'CO36',
                name: 'Boyacá',
            },
            {
                code: 'CO37',
                name: 'Caldas',
            },
            {
                code: 'CO08',
                name: 'Caquetá',
            },
            {
                code: 'CO32',
                name: 'Casanare',
            },
            {
                code: 'CO09',
                name: 'Cauca',
            },
            {
                code: 'CO10',
                name: 'Cesar',
            },
            {
                code: 'CO11',
                name: 'Chocó',
            },
            {
                code: 'CO12',
                name: 'Córdoba',
            },
            {
                code: 'CO33',
                name: 'Cundinamarca',
            },
            {
                code: 'CO34',
                name: 'Distrito Capital',
            },
            {
                code: 'CO15',
                name: 'Guainía',
            },
            {
                code: 'CO14',
                name: 'Guaviare',
            },
            {
                code: 'CO16',
                name: 'Huila',
            },
            {
                code: 'CO17',
                name: 'La Guajira',
            },
            {
                code: 'CO38',
                name: 'Magdalena',
            },
            {
                code: 'CO19',
                name: 'Meta',
            },
            {
                code: 'CO20',
                name: 'Nariño',
            },
            {
                code: 'CO21',
                name: 'Norte de Santander',
            },
            {
                code: 'CO22',
                name: 'Putumayo',
            },
            {
                code: 'CO23',
                name: 'Quindío',
            },
            {
                code: 'CO24',
                name: 'Risaralda',
            },
            {
                code: 'CO25',
                name: 'San Andrés y Providencia',
            },
            {
                code: 'CO26',
                name: 'Santander',
            },
            {
                code: 'CO27',
                name: 'Sucre',
            },
            {
                code: 'CO28',
                name: 'Tolima',
            },
            {
                code: 'CO29',
                name: 'Valle del Cauca',
            },
            {
                code: 'CO30',
                name: 'Vaupés',
            },
            {
                code: 'CO31',
                name: 'Vichada',
            },
        ],
    },
    {
        code: 'KM',
        id: 2223,
        name: 'Comoros',
        states: [],
    },
    {
        code: 'ZR',
        id: 2368,
        name: 'Congo; Democratic Republic of',
        states: [
            {
                code: 'CD.BU',
                name: 'Bas-Uélé',
            },
            {
                code: 'CD.HK',
                name: 'Haut-Katanga',
            },
            {
                code: 'CD.HL',
                name: 'Haut-Lomami',
            },
            {
                code: 'CD.HU',
                name: 'Haut-Uélé',
            },
            {
                code: 'CD.IT',
                name: 'Ituri',
            },
            {
                code: 'CD.KS',
                name: 'Kasaï',
            },
            {
                code: 'CD.LL',
                name: 'Kasaï-Central',
            },
            {
                code: 'CD.KO',
                name: 'Kasaï Oriental',
            },
            {
                code: 'CD.KN',
                name: 'Kinshasa',
            },
            {
                code: 'CD.BC',
                name: 'Kongo Central',
            },
            {
                code: 'CD.KG',
                name: 'Kwango',
            },
            {
                code: 'CD.KU',
                name: 'Kwilu',
            },
            {
                code: 'CD.LM',
                name: 'Lomami',
            },
            {
                code: 'CD.LB',
                name: 'Lualaba',
            },
            {
                code: 'CD.MA',
                name: 'Mai-Ndombe',
            },
            {
                code: 'CD.MN',
                name: 'Maniema',
            },
            {
                code: 'CD.MO',
                name: 'Mongala',
            },
            {
                code: 'CD.NK',
                name: 'Nord-Kivu',
            },
            {
                code: 'CD.NU',
                name: 'Nord-Ubangi',
            },
            {
                code: 'CD.SN',
                name: 'Sankuru',
            },
            {
                code: 'CD.SK',
                name: 'Sud-Kivu',
            },
            {
                code: 'CD.SU',
                name: 'Sud-Ubangi',
            },
            {
                code: 'CD.TG',
                name: 'Tanganyika',
            },
            {
                code: 'CD.TO',
                name: 'Tshopo',
            },
            {
                code: 'CD.TP',
                name: 'Tshuapa',
            },
            {
                code: 'CD.ET',
                name: 'Équateur',
            },
        ],
    },
    {
        code: 'CG',
        id: 2383,
        name: 'Congo; Republic of',
        states: [],
    },
    {
        code: 'CK',
        id: 2414,
        name: 'Cook Islands',
        states: [],
    },
    {
        code: 'CR',
        id: 2226,
        name: 'Costa Rica',
        states: [
            {
                code: 'CS01',
                name: 'Alajuela',
            },
            {
                code: 'CS02',
                name: 'Cartago',
            },
            {
                code: 'CS03',
                name: 'Guanacaste',
            },
            {
                code: 'CS04',
                name: 'Heredia',
            },
            {
                code: 'CS06',
                name: 'Limón',
            },
            {
                code: 'CS07',
                name: 'Puntarenas',
            },
            {
                code: 'CS08',
                name: 'San José',
            },
        ],
    },
    {
        code: 'CI',
        id: 2227,
        name: "Cote D'Ivoire",
        states: [
            {
                code: 'IV93',
                name: 'Abidjan',
            },
            {
                code: 'IV76',
                name: 'Bas-Sassandra',
            },
            {
                code: 'IV94',
                name: 'Comoé',
            },
            {
                code: 'IV77',
                name: 'Denguélé',
            },
            {
                code: 'IV95',
                name: 'Gôh-Djiboua',
            },
            {
                code: 'IV81',
                name: 'Lacs',
            },
            {
                code: 'IV82',
                name: 'Lagunes',
            },
            {
                code: 'IV78',
                name: 'Montagnes',
            },
            {
                code: 'IV96',
                name: 'Sassandra-Marahoué',
            },
            {
                code: 'IV87',
                name: 'Savanes',
            },
            {
                code: 'IV90',
                name: 'Vallée du Bandama',
            },
            {
                code: 'IV97',
                name: 'Woroba',
            },
            {
                code: 'IV98',
                name: 'Yamoussoukro',
            },
            {
                code: 'IV92',
                name: 'Zanzan',
            },
        ],
    },
    {
        code: 'HR',
        id: 2228,
        name: 'Croatia',
        states: [
            {
                code: 'HR07',
                name: 'Bjelovarsko-bilogorska',
            },
            {
                code: 'HR12',
                name: 'Brodsko-posavska',
            },
            {
                code: 'HR19',
                name: 'Dubrovacko-neretvanska',
            },
            {
                code: 'HR21',
                name: 'Grad Zagreb',
            },
            {
                code: 'HR-18',
                name: 'Istarska',
            },
            {
                code: 'HR04',
                name: 'Karlovacka',
            },
            {
                code: 'HR06',
                name: 'Koprivnicko-križevacka',
            },
            {
                code: 'HR02',
                name: 'Krapinsko-zagorska',
            },
            {
                code: 'HR09',
                name: 'Licko-senjska',
            },
            {
                code: 'HR20',
                name: 'Medimurska',
            },
            {
                code: 'HR14',
                name: 'Osjecko-baranjska',
            },
            {
                code: 'HR11',
                name: 'Požeško-slavonska',
            },
            {
                code: 'HR08',
                name: 'Primorsko-goranska',
            },
            {
                code: 'HR15',
                name: 'Šibensko-kninska',
            },
            {
                code: 'HR03',
                name: 'Sisacko-moslavacka',
            },
            {
                code: 'HR17',
                name: 'Splitsko-dalmatinska',
            },
            {
                code: 'HR05',
                name: 'Varaždinska',
            },
            {
                code: 'HR10',
                name: 'Viroviticko-podravska',
            },
            {
                code: 'HR16',
                name: 'Vukovarsko-srijemska',
            },
            {
                code: 'HR13',
                name: 'Zadarska',
            },
            {
                code: 'HR01',
                name: 'Zagrebacka',
            },
        ],
    },
    {
        code: 'CU',
        id: 2229,
        name: 'Cuba',
        states: [
            {
                code: 'CU17',
                name: 'Artemisa',
            },
            {
                code: 'CU05',
                name: 'Camagüey',
            },
            {
                code: 'CU07',
                name: 'Ciego de Ávila',
            },
            {
                code: 'CU08',
                name: 'Cienfuegos',
            },
            {
                code: 'CU09',
                name: 'Granma',
            },
            {
                code: 'CU10',
                name: 'Guantánamo',
            },
            {
                code: 'CU12',
                name: 'Holguín',
            },
            {
                code: 'CU04',
                name: 'Isla de la Juventud',
            },
            {
                code: 'CU02',
                name: 'La Habana',
            },
            {
                code: 'CU13',
                name: 'Las Tunas',
            },
            {
                code: 'CU03',
                name: 'Matanzas',
            },
            {
                code: 'CU18',
                name: 'Mayabeque',
            },
            {
                code: 'CU01',
                name: 'Pinar del Río',
            },
            {
                code: 'CU14',
                name: 'Sancti Spíritus',
            },
            {
                code: 'CU15',
                name: 'Santiago de Cuba',
            },
            {
                code: 'CU16',
                name: 'Villa Clara',
            },
        ],
    },
    {
        code: 'C999',
        id: 2387,
        name: 'Curacao',
        states: [
            {
                code: 'CW.CU',
                name: 'Curacao',
            },
        ],
    },
    {
        code: 'CY',
        id: 2230,
        name: 'Cyprus',
        states: [
            {
                code: 'CY01',
                name: 'Famagusta',
            },
            {
                code: 'CY02',
                name: 'Kyrenia',
            },
            {
                code: 'CY03',
                name: 'Larnaca',
            },
            {
                code: 'CY05',
                name: 'Limassol',
            },
            {
                code: 'CY04',
                name: 'Nicosia',
            },
            {
                code: 'CY06',
                name: 'Paphos',
            },
        ],
    },
    {
        code: 'CZ',
        id: 2231,
        name: 'Czech Republic',
        states: [
            {
                code: 'JC',
                name: 'Jihoceský kraj',
            },
            {
                code: 'JM',
                name: 'Jihomoravský kraj',
            },
            {
                code: 'KA',
                name: 'Karlovarský kraj',
            },
            {
                code: 'KR',
                name: 'Královéhradecký kraj',
            },
            {
                code: 'LI',
                name: 'Liberecký kraj',
            },
            {
                code: 'MO',
                name: 'Moravskoslezský kraj',
            },
            {
                code: 'OL',
                name: 'Olomoucký kraj',
            },
            {
                code: 'PA',
                name: 'Pardubický kraj',
            },
            {
                code: 'PL',
                name: 'Plzenský kraj',
            },
            {
                code: 'PR',
                name: 'Praha, hlavní mesto',
            },
            {
                code: 'ST',
                name: 'Stredoceský kraj',
            },
            {
                code: 'VY',
                name: 'Vysocina',
            },
            {
                code: 'ZL',
                name: 'Zlínský kraj',
            },
            {
                code: 'US',
                name: 'Ústecký kraj',
            },
        ],
    },
    {
        code: 'DK',
        id: 2232,
        name: 'Denmark',
        states: [
            {
                code: 'DA01',
                name: 'Arhus County',
            },
            {
                code: 'DA02',
                name: 'Bornholm Regional Municipality',
            },
            {
                code: 'DA17',
                name: 'Capital Region',
            },
            {
                code: 'DA18',
                name: 'Central Jutland Region',
            },
            {
                code: 'DA16',
                name: 'Frederiksberg municipal',
            },
            {
                code: 'DA03',
                name: 'Frederiksborg County',
            },
            {
                code: 'DA04',
                name: 'Fyn County',
            },
            {
                code: 'DA06',
                name: 'Kobenhavn County',
            },
            {
                code: 'DA05',
                name: 'Kobenhavn municipal',
            },
            {
                code: 'DA07',
                name: 'Nordjylland County',
            },
            {
                code: 'DA19',
                name: 'North Jutland Region',
            },
            {
                code: 'DA08',
                name: 'Ribe County',
            },
            {
                code: 'DA09',
                name: 'Ringkobing County',
            },
            {
                code: 'DA10',
                name: 'Roskilde County',
            },
            {
                code: 'DA11',
                name: 'Sonderjylland County',
            },
            {
                code: 'DA21',
                name: 'South Denmark Region',
            },
            {
                code: 'DA12',
                name: 'Storstrom County',
            },
            {
                code: 'DA13',
                name: 'Vejle County',
            },
            {
                code: 'DA14',
                name: 'Vestsjaelland County',
            },
            {
                code: 'DA15',
                name: 'Viborg County',
            },
            {
                code: 'DA20',
                name: 'Zealand Region',
            },
        ],
    },
    {
        code: 'DJ',
        id: 2233,
        name: 'Djibouti',
        states: [],
    },
    {
        code: 'DM',
        id: 2234,
        name: 'Dominica',
        states: [],
    },
    {
        code: 'DO',
        id: 2235,
        name: 'Dominican Republic',
        states: [
            {
                code: 'DR01',
                name: 'Azua',
            },
            {
                code: 'DR02',
                name: 'Bahoruco',
            },
            {
                code: 'DR03',
                name: 'Barahona',
            },
            {
                code: 'DR04',
                name: 'Dajabón',
            },
            {
                code: 'DR34',
                name: 'Distrito Nacional',
            },
            {
                code: 'DR06',
                name: 'Duarte',
            },
            {
                code: 'DR28',
                name: 'El Seibo',
            },
            {
                code: 'DR11',
                name: 'Elías Piña',
            },
            {
                code: 'DR08',
                name: 'Espaillat',
            },
            {
                code: 'DR29',
                name: 'Hato Mayor',
            },
            {
                code: 'DR19',
                name: 'Hermanas Mirabal',
            },
            {
                code: 'DR09',
                name: 'Independencia',
            },
            {
                code: 'DR10',
                name: 'La Altagracia',
            },
            {
                code: 'DR12',
                name: 'La Romana',
            },
            {
                code: 'DR30',
                name: 'La Vega',
            },
            {
                code: 'DR14',
                name: 'María Trinidad Sánchez',
            },
            {
                code: 'DR31',
                name: 'Monseñor Nouel',
            },
            {
                code: 'DR15',
                name: 'Monte Cristi',
            },
            {
                code: 'DR32',
                name: 'Monte Plata',
            },
            {
                code: 'DR16',
                name: 'Pedernales',
            },
            {
                code: 'DR35',
                name: 'Peravia',
            },
            {
                code: 'DR18',
                name: 'Puerto Plata',
            },
            {
                code: 'DR20',
                name: 'Samaná',
            },
            {
                code: 'DR33',
                name: 'San Cristóbal',
            },
            {
                code: 'DR36',
                name: 'San José de Ocoa',
            },
            {
                code: 'DR23',
                name: 'San Juan',
            },
            {
                code: 'DR24',
                name: 'San Pedro de Macorís',
            },
            {
                code: 'DR21',
                name: 'Sánchez Ramírez',
            },
            {
                code: 'DR25',
                name: 'Santiago',
            },
            {
                code: 'DR26',
                name: 'Santiago Rodríguez',
            },
            {
                code: 'DR37',
                name: 'Santo Domingo',
            },
            {
                code: 'DR27',
                name: 'Valverde',
            },
        ],
    },
    {
        code: 'EC',
        id: 2236,
        name: 'Ecuador',
        states: [
            {
                code: 'EC02',
                name: 'Azuay',
            },
            {
                code: 'EC02',
                name: 'Azuay',
            },
            {
                code: 'EC03',
                name: 'Bolívar',
            },
            {
                code: 'EC04',
                name: 'Cañar',
            },
            {
                code: 'EC05',
                name: 'Carchi',
            },
            {
                code: 'EC06',
                name: 'Chimborazo',
            },
            {
                code: 'EC07',
                name: 'Cotopaxi',
            },
            {
                code: 'EC08',
                name: 'El Oro',
            },
            {
                code: 'EC09',
                name: 'Esmeraldas',
            },
            {
                code: 'EC01',
                name: 'Galápagos',
            },
            {
                code: 'EC10',
                name: 'Guayas',
            },
            {
                code: 'EC11',
                name: 'Imbabura',
            },
            {
                code: 'EC12',
                name: 'Loja',
            },
            {
                code: 'EC13',
                name: 'Los Ríos',
            },
            {
                code: 'EC14',
                name: 'Manabí',
            },
            {
                code: 'EC15',
                name: 'Morona-Santiago',
            },
            {
                code: 'EC23',
                name: 'Napo',
            },
            {
                code: 'EC24',
                name: 'Orellana',
            },
            {
                code: 'EC17',
                name: 'Pastaza',
            },
            {
                code: 'EC18',
                name: 'Pichincha',
            },
            {
                code: 'EC25',
                name: 'Santa Elena',
            },
            {
                code: 'EC26',
                name: 'Santo Domingo de los Tsáchilas',
            },
            {
                code: 'EC22',
                name: 'Sucumbíos',
            },
            {
                code: 'EC19',
                name: 'Tungurahua',
            },
            {
                code: 'EC20',
                name: 'Zamora-Chinchipe',
            },
        ],
    },
    {
        code: 'EG',
        id: 2237,
        name: 'Egypt',
        states: [
            {
                code: 'EG01',
                name: 'Ad Daqahliyah',
            },
            {
                code: 'EG02',
                name: 'Al Bahr al Ahmar',
            },
            {
                code: 'EG03',
                name: 'Al Buhayrah',
            },
            {
                code: 'EG04',
                name: 'Al Fayyum',
            },
            {
                code: 'EG05',
                name: 'Al Gharbiyah',
            },
            {
                code: 'EG06',
                name: 'Al Iskandariyah',
            },
            {
                code: 'EG07',
                name: 'Al Isma`iliyah',
            },
            {
                code: 'EG08',
                name: 'Al Jizah',
            },
            {
                code: 'EG09',
                name: 'Al Minufiyah',
            },
            {
                code: 'EG10',
                name: 'Al Minya',
            },
            {
                code: 'EG11',
                name: 'Al Qahirah',
            },
            {
                code: 'EG12',
                name: 'Al Qalyubiyah',
            },
            {
                code: 'EG28',
                name: 'Al Uqsur',
            },
            {
                code: 'EG13',
                name: 'Al Wadi al Jadid',
            },
            {
                code: 'EG15',
                name: 'As Suways',
            },
            {
                code: 'EG14',
                name: 'Ash Sharqiyah',
            },
            {
                code: 'EG16',
                name: 'Aswan',
            },
            {
                code: 'EG17',
                name: 'Asyut',
            },
            {
                code: 'EG18',
                name: 'Bani Suwayf',
            },
            {
                code: 'EG19',
                name: 'Bur Sa`id',
            },
            {
                code: 'EG20',
                name: 'Dumyat',
            },
            {
                code: 'EG26',
                name: 'Janub Sina',
            },
            {
                code: 'EG21',
                name: 'Kafr ash Shaykh',
            },
            {
                code: 'EG22',
                name: 'Matruh',
            },
            {
                code: 'EG23',
                name: 'Qina',
            },
            {
                code: 'EG27',
                name: 'Shamal Sina',
            },
            {
                code: 'EG24',
                name: 'Suhaj',
            },
        ],
    },
    {
        code: 'SV',
        id: 2238,
        name: 'El Salvador',
        states: [
            {
                code: 'ES01',
                name: 'Ahuachapán',
            },
            {
                code: 'ES02',
                name: 'Cabañas',
            },
            {
                code: 'ES03',
                name: 'Chalatenango',
            },
            {
                code: 'ES04',
                name: 'Cuscatlán',
            },
            {
                code: 'ES05',
                name: 'La Libertad',
            },
            {
                code: 'ES06',
                name: 'La Paz',
            },
            {
                code: 'ES07',
                name: 'La Unión',
            },
            {
                code: 'ES08',
                name: 'Morazán',
            },
            {
                code: 'ES09',
                name: 'San Miguel',
            },
            {
                code: 'ES10',
                name: 'San Salvador',
            },
            {
                code: 'ES12',
                name: 'San Vicente',
            },
            {
                code: 'ES11',
                name: 'Santa Ana',
            },
            {
                code: 'ES13',
                name: 'Sonsonate',
            },
            {
                code: 'ES14',
                name: 'Usulután',
            },
        ],
    },
    {
        code: 'GQ',
        id: 2239,
        name: 'Equatorial Guinea',
        states: [],
    },
    {
        code: 'ER',
        id: 2240,
        name: 'Eritrea',
        states: [],
    },
    {
        code: 'EE',
        id: 2241,
        name: 'Estonia',
        states: [
            {
                code: 'EN01',
                name: 'Harju',
            },
            {
                code: 'EN02',
                name: 'Hiiu',
            },
            {
                code: 'EN03',
                name: 'Ida-Viru',
            },
            {
                code: 'EN04',
                name: 'Järva',
            },
            {
                code: 'EN05',
                name: 'Jõgeva',
            },
            {
                code: 'EN07',
                name: 'Lääne',
            },
            {
                code: 'EN08',
                name: 'Lääne-Viru',
            },
            {
                code: 'EN11',
                name: 'Pärnu',
            },
            {
                code: 'EN12',
                name: 'Põlva',
            },
            {
                code: 'EN13',
                name: 'Rapla',
            },
            {
                code: 'EN14',
                name: 'Saare',
            },
            {
                code: 'EN18',
                name: 'Tartu',
            },
            {
                code: 'EN19',
                name: 'Valga',
            },
            {
                code: 'EN20',
                name: 'Viljandi',
            },
            {
                code: 'EN21',
                name: 'Võru',
            },
        ],
    },
    {
        code: 'ET',
        id: 2242,
        name: 'Ethiopia',
        states: [
            {
                code: 'ET44',
                name: 'Addis Ababa',
            },
            {
                code: 'ET45',
                name: 'Afar',
            },
            {
                code: 'ET46',
                name: 'Amhara',
            },
            {
                code: 'ET47',
                name: 'Benshangul-Gumaz',
            },
            {
                code: 'ET48',
                name: 'Dire Dawa',
            },
            {
                code: 'ET49',
                name: 'Gambela Peoples',
            },
            {
                code: 'ET50',
                name: 'Harari People',
            },
            {
                code: 'ET51',
                name: 'Oromia',
            },
            {
                code: 'ET52',
                name: 'Somali',
            },
            {
                code: 'ET54',
                name: 'Southern Nations, Nationalities and Peoples',
            },
            {
                code: 'ET53',
                name: 'Tigray',
            },
        ],
    },
    {
        code: 'FK',
        id: 2415,
        name: 'Falkland Islands (Malvinas)',
        states: [],
    },
    {
        code: 'FI99',
        id: 2388,
        name: 'Faroe Islands',
        states: [],
    },
    {
        code: 'FJ',
        id: 2243,
        name: 'Fiji',
        states: [],
    },
    {
        code: 'FI',
        id: 2244,
        name: 'Finland',
        states: [
            {
                code: 'FI-AL',
                name: 'Ahvenanmaan lääni',
            },
            {
                code: 'AX',
                name: 'Ahvenanmaa',
            },
            {
                code: 'FI.SK',
                name: 'Etelä-Karjala',
            },
            {
                code: 'FI.SO',
                name: 'Etelä-Pohjanmaa',
            },
            {
                code: 'FI.SS',
                name: 'Etelä-Savo',
            },
            {
                code: 'FI-ES',
                name: 'Etelä-Suomen lääni',
            },
            {
                code: 'FI-IS',
                name: 'Itä-Suomen lääni',
            },
            {
                code: 'FI.KA',
                name: 'Kainuu',
            },
            {
                code: 'FI.KH',
                name: 'Kanta-Häme',
            },
            {
                code: 'FI.CO',
                name: 'Keski-Pohjanmaa',
            },
            {
                code: 'FI.CF',
                name: 'Keski-Suomi',
            },
            {
                code: 'FI.KY',
                name: 'Kymenlaakso',
            },
            {
                code: 'FI-LS',
                name: 'Länsi-Suomen lääni',
            },
            {
                code: 'FI-LL',
                name: 'Lapin lääni',
            },
            {
                code: 'FI.LA',
                name: 'Lappi',
            },
            {
                code: 'FI-OL',
                name: 'Oulun lääni',
            },
            {
                code: 'FI.PH',
                name: 'Päijät-Häme',
            },
            {
                code: 'FI.TR',
                name: 'Pirkanmaa',
            },
            {
                code: 'FI.OS',
                name: 'Pohjanmaa',
            },
            {
                code: 'FI.NK',
                name: 'Pohjois-Karjala',
            },
            {
                code: 'FI.NO',
                name: 'Pohjois-Pohjanmaa',
            },
            {
                code: 'FI.NS',
                name: 'Pohjois-Savo',
            },
            {
                code: 'FI.SA',
                name: 'Satakunta',
            },
            {
                code: 'FI.US',
                name: 'Uusimaa',
            },
            {
                code: 'FI.SF',
                name: 'Varsinais-Suomi',
            },
        ],
    },
    {
        code: 'FR',
        id: 2245,
        name: 'France',
        states: [
            {
                code: 'FRC2',
                name: 'Ain',
            },
            {
                code: 'FRC3',
                name: 'Aisne',
            },
            {
                code: 'FRC4',
                name: 'Allier',
            },
            {
                code: 'FRC6',
                name: 'Alpes-Maritimes',
            },
            {
                code: 'FRC5',
                name: 'Alpes-de-Haute-Provence',
            },
            {
                code: 'FRC1',
                name: 'Alsace',
            },
            {
                code: 'FR97',
                name: 'Aquitaine',
            },
            {
                code: 'FRC7',
                name: 'Ardèche',
            },
            {
                code: 'FRC8',
                name: 'Ardennes',
            },
            {
                code: 'FRC9',
                name: 'Ariège',
            },
            {
                code: 'FRD1',
                name: 'Aube',
            },
            {
                code: 'FRD2',
                name: 'Aude',
            },
            {
                code: 'FR.AR',
                name: 'Auvergne-Rhône-Alpes',
            },
            {
                code: 'FR98',
                name: 'Auvergne',
            },
            {
                code: 'FRD3',
                name: 'Aveyron',
            },
            {
                code: 'FRD4',
                name: 'Bas-Rhin',
            },
            {
                code: 'FR99',
                name: 'Basse-Normandie',
            },
            {
                code: 'FRD5',
                name: 'Bouches-du-Rhône',
            },
            {
                code: 'FR.BF',
                name: 'Bourgogne-Franche-Comté',
            },
            {
                code: 'FRA1',
                name: 'Bourgogne',
            },
            {
                code: 'FRA2',
                name: 'Bretagne',
            },
            {
                code: 'FRD8',
                name: 'Calvados',
            },
            {
                code: 'FRD9',
                name: 'Cantal',
            },
            {
                code: 'FRA3',
                name: 'Centre',
            },
            {
                code: 'FR.CN',
                name: 'Centre-Val de Loire',
            },
            {
                code: 'FRA4',
                name: 'Champagne-Ardenne',
            },
            {
                code: 'FRE1',
                name: 'Charente-Maritime',
            },
            {
                code: 'FRE2',
                name: 'Charente',
            },
            {
                code: 'FRE3',
                name: 'Cher',
            },
            {
                code: 'FRE4',
                name: 'Corrèze',
            },
            {
                code: 'FRE5',
                name: 'Corse-du-Sud',
            },
            {
                code: 'FR.CE',
                name: 'Corse',
            },
            {
                code: 'FRD6',
                name: "Côte-d'Or",
            },
            {
                code: 'FRD7',
                name: "Côtes-d'Armor",
            },
            {
                code: 'FRE6',
                name: 'Creuse',
            },
            {
                code: 'FRE7',
                name: 'Deux-Sèvres',
            },
            {
                code: 'FRE8',
                name: 'Dordogne',
            },
            {
                code: 'FRE9',
                name: 'Doubs',
            },
            {
                code: 'FRF1',
                name: 'Drôme',
            },
            {
                code: 'FRF2',
                name: 'Essonne',
            },
            {
                code: 'FRF3',
                name: 'Eure-et-Loir',
            },
            {
                code: 'FRF4',
                name: 'Eure',
            },
            {
                code: 'FRF5',
                name: 'Finistère',
            },
            {
                code: 'FRA6',
                name: 'Franche-Comte',
            },
            {
                code: 'FRF6',
                name: 'Gard',
            },
            {
                code: 'FRF7',
                name: 'Gers',
            },
            {
                code: 'FRF8',
                name: 'Gironde',
            },
            {
                code: 'FR.AO',
                name: 'Grand Est',
            },
            {
                code: 'FRG1',
                name: 'Haut-Rhin',
            },
            {
                code: 'FRG2',
                name: 'Haute-Corse',
            },
            {
                code: 'FRG3',
                name: 'Haute-Garonne',
            },
            {
                code: 'FRG4',
                name: 'Haute-Loire',
            },
            {
                code: 'FRG5',
                name: 'Haute-Marne',
            },
            {
                code: 'FRA7',
                name: 'Haute-Normandie',
            },
            {
                code: 'FRG6',
                name: 'Haute-Saône',
            },
            {
                code: 'FRG7',
                name: 'Haute-Savoie',
            },
            {
                code: 'FRG8',
                name: 'Haute-Vienne',
            },
            {
                code: 'FRG9',
                name: 'Hautes-Alpes',
            },
            {
                code: 'FRH1',
                name: 'Hautes-Pyrénées',
            },
            {
                code: 'FR.NC',
                name: 'Hauts-de-France',
            },
            {
                code: 'FRH2',
                name: 'Hauts-de-Seine',
            },
            {
                code: 'FRF9',
                name: 'Hérault',
            },
            {
                code: 'FRA8',
                name: 'Ile-de-France',
            },
            {
                code: 'FRH3',
                name: 'Ille-et-Vilaine',
            },
            {
                code: 'FRH5',
                name: 'Indre',
            },
            {
                code: 'FRH4',
                name: 'Indre-et-Loire',
            },
            {
                code: 'FRH6',
                name: 'Isère',
            },
            {
                code: 'FRH7',
                name: 'Jura',
            },
            {
                code: 'FRH8',
                name: 'Landes',
            },
            {
                code: 'FRA9',
                name: 'Languedoc-Roussillon',
            },
            {
                code: 'FRB1',
                name: 'Limousin',
            },
            {
                code: 'FRI3',
                name: 'Loir-et-Cher',
            },
            {
                code: 'FRI2',
                name: 'Loiret',
            },
            {
                code: 'FRI1',
                name: 'Loire',
            },
            {
                code: 'FRH9',
                name: 'Loire-Atlantique',
            },
            {
                code: 'FRB2',
                name: 'Lorraine',
            },
            {
                code: 'FRI4',
                name: 'Lot-et-Garonne',
            },
            {
                code: 'FRI5',
                name: 'Lot',
            },
            {
                code: 'FRI6',
                name: 'Lozère',
            },
            {
                code: 'FRI7',
                name: 'Maine-et-Loire',
            },
            {
                code: 'FRI8',
                name: 'Manche',
            },
            {
                code: 'FRI9',
                name: 'Marne',
            },
            {
                code: 'FRJ1',
                name: 'Mayenne',
            },
            {
                code: 'FRJ2',
                name: 'Meurthe-et-Moselle',
            },
            {
                code: 'FRJ3',
                name: 'Meuse',
            },
            {
                code: 'FRB3',
                name: 'Midi-Pyrenees',
            },
            {
                code: 'FRJ4',
                name: 'Morbihan',
            },
            {
                code: 'FRJ5',
                name: 'Moselle',
            },
            {
                code: 'FRJ6',
                name: 'Nièvre',
            },
            {
                code: 'FRJ7',
                name: 'Nord France',
            },
            {
                code: 'FR67',
                name: 'Nord',
            },
            {
                code: 'FR.ND',
                name: 'Normandie',
            },
            {
                code: 'FR.AC',
                name: 'Nouvelle-Aquitaine',
            },
            {
                code: 'FR.LP',
                name: 'Occitanie',
            },
            {
                code: 'FRJ8',
                name: 'Oise',
            },
            {
                code: 'FRJ9',
                name: 'Orne',
            },
            {
                code: 'FRK1',
                name: 'Paris',
            },
            {
                code: 'FRB4',
                name: 'Pas-de-Calais',
            },
            {
                code: 'FRB5',
                name: 'Pays de la Loire',
            },
            {
                code: 'FRB6',
                name: 'Picardie',
            },
            {
                code: 'FRB7',
                name: 'Poitou-Charentes',
            },
            {
                code: 'FRB8',
                name: "Provence-Alpes-Cote d'Azur",
            },
            {
                code: 'FRK2',
                name: 'Puy-de-Dôme',
            },
            {
                code: 'FRK3',
                name: 'Pyrénées-Atlantiques',
            },
            {
                code: 'FRK4',
                name: 'Pyrénées-Orientales',
            },
            {
                code: 'FRB9',
                name: 'Rhône',
            },
            {
                code: 'FRK5',
                name: 'Saône-et-Loire',
            },
            {
                code: 'FRK6',
                name: 'Sarthe',
            },
            {
                code: 'FRK7',
                name: 'Savoie',
            },
            {
                code: 'FRK9',
                name: 'Seine-Maritime',
            },
            {
                code: 'FRL1',
                name: 'Seine-Saint-Denis',
            },
            {
                code: 'FRK8',
                name: 'Seine-et-Marne',
            },
            {
                code: 'FRL2',
                name: 'Somme',
            },
            {
                code: 'FRL3',
                name: 'Tarn-et-Garonne',
            },
            {
                code: 'FRL4',
                name: 'Tarn',
            },
            {
                code: 'FRL5',
                name: 'Territoire de Belfor',
            },
            {
                code: 'FR14',
                name: 'Territoire de Belfort',
            },
            {
                code: 'FRL6',
                name: "Val-d'Oise",
            },
            {
                code: 'FRL7',
                name: 'Val-de-Marne',
            },
            {
                code: 'FRL8',
                name: 'Var',
            },
            {
                code: 'FRL9',
                name: 'Vaucluse',
            },
            {
                code: 'FRM1',
                name: 'Vendée',
            },
            {
                code: 'FRM2',
                name: 'Vienne',
            },
            {
                code: 'FR94',
                name: 'Ville de Paris',
            },
            {
                code: 'FRM3',
                name: 'Vosges',
            },
            {
                code: 'FRM4',
                name: 'Yonne',
            },
            {
                code: 'FRM5',
                name: 'Yvelines',
            },
            {
                code: 'FR.IF',
                name: 'Île-de-France',
            },
        ],
    },
    {
        code: 'GF',
        id: 2416,
        name: 'French Guiana',
        states: [],
    },
    {
        code: 'PF',
        id: 2417,
        name: 'French Polynesia',
        states: [],
    },
    {
        code: 'TF',
        id: 2418,
        name: 'French Southern Territories',
        states: [],
    },
    {
        code: 'GA',
        id: 2246,
        name: 'Gabon',
        states: [
            {
                code: 'GB01',
                name: 'Estuaire',
            },
            {
                code: 'GB02',
                name: 'Haut-Ogooué',
            },
            {
                code: 'GB03',
                name: 'Moyen-Ogooué',
            },
            {
                code: 'GB04',
                name: 'Ngounié',
            },
            {
                code: 'GB05',
                name: 'Nyanga',
            },
            {
                code: 'GB06',
                name: 'Ogooué-Ivindo',
            },
            {
                code: 'GB07',
                name: 'Ogooué-Lolo',
            },
            {
                code: 'GB08',
                name: 'Ogooué-Maritime',
            },
            {
                code: 'GB09',
                name: 'Woleu-Ntem',
            },
        ],
    },
    {
        code: 'GM',
        id: 2389,
        name: 'Gambia',
        states: [
            {
                code: 'GA01',
                name: 'Banjul',
            },
            {
                code: 'GA03',
                name: 'Central River',
            },
            {
                code: 'GA02',
                name: 'Lower River',
            },
            {
                code: 'GA07',
                name: 'North Bank',
            },
            {
                code: 'GA04',
                name: 'Upper River',
            },
            {
                code: 'GA05',
                name: 'West Coast',
            },
        ],
    },
    {
        code: 'GE',
        id: 2248,
        name: 'Georgia',
        states: [
            {
                code: 'GG02',
                name: 'Abkhazia',
            },
            {
                code: 'GG04',
                name: 'Ajaria',
            },
            {
                code: 'GG65',
                name: 'Guria',
            },
            {
                code: 'GG66',
                name: 'Imereti',
            },
            {
                code: 'GG67',
                name: 'Kakheti',
            },
            {
                code: 'GG68',
                name: 'Kvemo Kartli',
            },
            {
                code: 'GG69',
                name: 'Mtskheta-Mtianeti',
            },
            {
                code: 'GG70',
                name: 'Racha-Lochkhumi-Kvemo Svaneti',
            },
            {
                code: 'GG71',
                name: 'Samegrelo-Zemo Svaneti',
            },
            {
                code: 'GG72',
                name: 'Samtskhe-Javakheti',
            },
            {
                code: 'GG73',
                name: 'Shida Kartli',
            },
            {
                code: 'GG51',
                name: 'Tbilisi',
            },
        ],
    },
    {
        code: 'DE',
        id: 2249,
        name: 'Germany',
        states: [
            {
                code: 'BW',
                name: 'Baden-Württemberg',
            },
            {
                code: 'BY',
                name: 'Bayern',
            },
            {
                code: 'BE',
                name: 'Berlin',
            },
            {
                code: 'BB',
                name: 'Brandenburg',
            },
            {
                code: 'HB',
                name: 'Bremen',
            },
            {
                code: 'HH',
                name: 'Hamburg',
            },
            {
                code: 'HE',
                name: 'Hessen',
            },
            {
                code: 'MV',
                name: 'Mecklenburg-Vorpommern',
            },
            {
                code: 'NI',
                name: 'Niedersachsen',
            },
            {
                code: 'NW',
                name: 'Nordrhein-Westfalen',
            },
            {
                code: 'RP',
                name: 'Rheinland-Pfalz',
            },
            {
                code: 'SL',
                name: 'Saarland',
            },
            {
                code: 'SN',
                name: 'Sachsen',
            },
            {
                code: 'ST',
                name: 'Sachsen-Anhalt',
            },
            {
                code: 'SH',
                name: 'Schleswig-Holstein',
            },
            {
                code: 'TH',
                name: 'Thüringen',
            },
        ],
    },
    {
        code: 'GH',
        id: 2250,
        name: 'Ghana',
        states: [
            {
                code: 'GH02',
                name: 'Ashanti',
            },
            {
                code: 'GH03',
                name: 'Brong-Ahafo',
            },
            {
                code: 'GH04',
                name: 'Central',
            },
            {
                code: 'GH05',
                name: 'Eastern',
            },
            {
                code: 'GH01',
                name: 'Greater Accra',
            },
            {
                code: 'GH06',
                name: 'Northern',
            },
            {
                code: 'GH10',
                name: 'Upper East',
            },
            {
                code: 'GH11',
                name: 'Upper West',
            },
            {
                code: 'GH08',
                name: 'Volta',
            },
            {
                code: 'GH09',
                name: 'Western',
            },
        ],
    },
    {
        code: 'G999',
        id: 2390,
        name: 'Gibraltar',
        states: [
            {
                code: 'GI.GI',
                name: 'Gibraltar',
            },
        ],
    },
    {
        code: 'GR',
        id: 2251,
        name: 'Greece',
        states: [
            {
                code: '13',
                name: 'Achaïa',
            },
            {
                code: '69',
                name: 'Agio Oros',
            },
            {
                code: '01',
                name: 'Aitolia kai Akarnania',
            },
            {
                code: '11',
                name: 'Argolida',
            },
            {
                code: '12',
                name: 'Arkadia',
            },
            {
                code: '31',
                name: 'Arta',
            },
            {
                code: 'A1',
                name: 'Attiki',
            },
            {
                code: '64',
                name: 'Chalkidiki',
            },
            {
                code: '94',
                name: 'Chania',
            },
            {
                code: '85',
                name: 'Chios',
            },
            {
                code: '81',
                name: 'Dodekanisos',
            },
            {
                code: '52',
                name: 'Drama',
            },
            {
                code: '71',
                name: 'Evros',
            },
            {
                code: '05',
                name: 'Evrytania',
            },
            {
                code: '04',
                name: 'Evvoia',
            },
            {
                code: '63',
                name: 'Florina',
            },
            {
                code: '07',
                name: 'Fokida',
            },
            {
                code: '06',
                name: 'Fthiotida',
            },
            {
                code: '51',
                name: 'Grevena',
            },
            {
                code: '14',
                name: 'Ileia',
            },
            {
                code: '53',
                name: 'Imathia',
            },
            {
                code: '33',
                name: 'Ioannina',
            },
            {
                code: '91',
                name: 'Irakleio',
            },
            {
                code: '41',
                name: 'Karditsa',
            },
            {
                code: '56',
                name: 'Kastoria',
            },
            {
                code: '55',
                name: 'Kavala',
            },
            {
                code: '23',
                name: 'Kefallonia',
            },
            {
                code: '22',
                name: 'Kerkyra',
            },
            {
                code: '57',
                name: 'Kilkis',
            },
            {
                code: '15',
                name: 'Korinthia',
            },
            {
                code: '58',
                name: 'Kozani',
            },
            {
                code: '82',
                name: 'Kyklades',
            },
            {
                code: '16',
                name: 'Lakonia',
            },
            {
                code: '42',
                name: 'Larisa',
            },
            {
                code: '92',
                name: 'Lasithi',
            },
            {
                code: '24',
                name: 'Lefkada',
            },
            {
                code: '83',
                name: 'Lesvos',
            },
            {
                code: '43',
                name: 'Magnisia',
            },
            {
                code: '17',
                name: 'Messinia',
            },
            {
                code: '59',
                name: 'Pella',
            },
            {
                code: '61',
                name: 'Pieria',
            },
            {
                code: '34',
                name: 'Preveza',
            },
            {
                code: '93',
                name: 'Rethymno',
            },
            {
                code: '73',
                name: 'Rodopi',
            },
            {
                code: '84',
                name: 'Samos',
            },
            {
                code: '62',
                name: 'Serres',
            },
            {
                code: '32',
                name: 'Thesprotia',
            },
            {
                code: '54',
                name: 'Thessaloniki',
            },
            {
                code: '44',
                name: 'Trikala',
            },
            {
                code: '03',
                name: 'Voiotia',
            },
            {
                code: '72',
                name: 'Xanthi',
            },
            {
                code: '21',
                name: 'Zakynthos',
            },
        ],
    },
    {
        code: 'GL',
        id: 2252,
        name: 'Greenland',
        states: [],
    },
    {
        code: 'GD',
        id: 2253,
        name: 'Grenada',
        states: [],
    },
    {
        code: 'GP',
        id: 2419,
        name: 'Guadeloupe',
        states: [],
    },
    {
        code: 'GU',
        id: 2376,
        name: 'Guam',
        states: [],
    },
    {
        code: 'GT',
        id: 2371,
        name: 'Guatemala',
        states: [
            {
                code: 'GT01',
                name: 'Alta Verapaz',
            },
            {
                code: 'GT02',
                name: 'Baja Verapaz',
            },
            {
                code: 'GT03',
                name: 'Chimaltenango',
            },
            {
                code: 'GT04',
                name: 'Chiquimula',
            },
            {
                code: 'GT05',
                name: 'El Progreso',
            },
            {
                code: 'GT06',
                name: 'Escuintla',
            },
            {
                code: 'GT07',
                name: 'Guatemala',
            },
            {
                code: 'GT08',
                name: 'Huehuetenango',
            },
            {
                code: 'GT09',
                name: 'Izabal',
            },
            {
                code: 'GT10',
                name: 'Jalapa',
            },
            {
                code: 'GT11',
                name: 'Jutiapa',
            },
            {
                code: 'GT12',
                name: 'Petén',
            },
            {
                code: 'GT13',
                name: 'Quetzaltenango',
            },
            {
                code: 'GT14',
                name: 'Quiché',
            },
            {
                code: 'GT15',
                name: 'Retalhuleu',
            },
            {
                code: 'GT16',
                name: 'Sacatepéquez',
            },
            {
                code: 'GT17',
                name: 'San Marcos',
            },
            {
                code: 'GT18',
                name: 'Santa Rosa',
            },
            {
                code: 'GT19',
                name: 'Sololá',
            },
            {
                code: 'GT20',
                name: 'Suchitepéquez',
            },
            {
                code: 'GT21',
                name: 'Totonicapán',
            },
            {
                code: 'GT22',
                name: 'Zacapa',
            },
        ],
    },
    {
        code: 'GG',
        id: 2420,
        name: 'Guernsey',
        states: [],
    },
    {
        code: 'GN',
        id: 2255,
        name: 'Guinea',
        states: [
            {
                code: 'GV01',
                name: 'Beyla',
            },
            {
                code: 'GV02',
                name: 'Boffa',
            },
            {
                code: 'GV03',
                name: 'Boké',
            },
            {
                code: 'GV04',
                name: 'Conakry',
            },
            {
                code: 'GV30',
                name: 'Coyah',
            },
            {
                code: 'GV05',
                name: 'Dabola',
            },
            {
                code: 'GV06',
                name: 'Dalaba',
            },
            {
                code: 'GV07',
                name: 'Dinguiraye',
            },
            {
                code: 'GV31',
                name: 'Dubréka',
            },
            {
                code: 'GV09',
                name: 'Faranah',
            },
            {
                code: 'GV10',
                name: 'Forécariah',
            },
            {
                code: 'GV11',
                name: 'Fria',
            },
            {
                code: 'GV12',
                name: 'Gaoual',
            },
            {
                code: 'GV13',
                name: 'Guéckédou',
            },
            {
                code: 'GV32',
                name: 'Kankan',
            },
            {
                code: 'GV15',
                name: 'Kérouané',
            },
            {
                code: 'GV16',
                name: 'Kindia',
            },
            {
                code: 'GV17',
                name: 'Kissidougou',
            },
            {
                code: 'GV33',
                name: 'Koubia',
            },
            {
                code: 'GV18',
                name: 'Koundara',
            },
            {
                code: 'GV19',
                name: 'Kouroussa',
            },
            {
                code: 'GV34',
                name: 'Labé',
            },
            {
                code: 'GV35',
                name: 'Lélouma',
            },
            {
                code: 'GV36',
                name: 'Lola',
            },
            {
                code: 'GV21',
                name: 'Macenta',
            },
            {
                code: 'GV22',
                name: 'Mali',
            },
            {
                code: 'GV23',
                name: 'Mamou',
            },
            {
                code: 'GV37',
                name: 'Mandiana',
            },
            {
                code: 'GV38',
                name: 'Nzérékoré',
            },
            {
                code: 'GV25',
                name: 'Pita',
            },
            {
                code: 'GV39',
                name: 'Siguiri',
            },
            {
                code: 'GV27',
                name: 'Télimélé',
            },
            {
                code: 'GV28',
                name: 'Tougué',
            },
            {
                code: 'GV29',
                name: 'Yomou',
            },
        ],
    },
    {
        code: 'GW',
        id: 2256,
        name: 'Guinea-Bissau',
        states: [
            {
                code: 'PU01',
                name: 'Bafatá',
            },
            {
                code: 'PU12',
                name: 'Biombo',
            },
            {
                code: 'PU11',
                name: 'Bissau',
            },
            {
                code: 'PU05',
                name: 'Bolama',
            },
            {
                code: 'PU06',
                name: 'Cacheu',
            },
            {
                code: 'PU10',
                name: 'Gabú',
            },
            {
                code: 'PU04',
                name: 'Oio',
            },
            {
                code: 'PU02',
                name: 'Quinara',
            },
            {
                code: 'PU07',
                name: 'Tombali',
            },
        ],
    },
    {
        code: 'GY',
        id: 2257,
        name: 'Guyana',
        states: [
            {
                code: 'GY10',
                name: 'Barima-Waini',
            },
            {
                code: 'GY11',
                name: 'Cuyuni-Mazaruni',
            },
            {
                code: 'GY12',
                name: 'Demerara-Mahaica',
            },
            {
                code: 'GY13',
                name: 'East Berbice-Corentyne',
            },
            {
                code: 'GY14',
                name: 'Essequibo Islands-West Demerara',
            },
            {
                code: 'GY15',
                name: 'Mahaica-Berbice',
            },
            {
                code: 'GY16',
                name: 'Pomeroon-Supenaam',
            },
            {
                code: 'GY17',
                name: 'Potaro-Siparuni',
            },
            {
                code: 'GY18',
                name: 'Upper Demerara-Berbice',
            },
            {
                code: 'GY19',
                name: 'Upper Takutu-Upper Essequibo',
            },
        ],
    },
    {
        code: 'HT',
        id: 2258,
        name: 'Haiti',
        states: [
            {
                code: 'HA07',
                name: 'Centre',
            },
            {
                code: 'HA14',
                name: "Grand' Anse",
            },
            {
                code: 'HA06',
                name: "L'Artibonite",
            },
            {
                code: 'HA15',
                name: 'Nippes',
            },
            {
                code: 'HA10',
                name: 'Nord-Est',
            },
            {
                code: 'HA03',
                name: 'Nord-Ouest',
            },
            {
                code: 'HA09',
                name: 'Nord',
            },
            {
                code: 'HA11',
                name: 'Ouest',
            },
            {
                code: 'HA13',
                name: 'Sud-Est',
            },
            {
                code: 'HA12',
                name: 'Sud',
            },
        ],
    },
    {
        code: 'HM',
        id: 2421,
        name: 'Heard and McDonald Islands',
        states: [],
    },
    {
        code: 'VA',
        id: 2362,
        name: 'Holy See (Vatican City State)',
        states: [],
    },
    {
        code: 'HN',
        id: 2259,
        name: 'Honduras',
        states: [
            {
                code: 'HO01',
                name: 'Atlántida',
            },
            {
                code: 'HO02',
                name: 'Choluteca',
            },
            {
                code: 'HO03',
                name: 'Colón',
            },
            {
                code: 'HO04',
                name: 'Comayagua',
            },
            {
                code: 'HO05',
                name: 'Copán',
            },
            {
                code: 'HO06',
                name: 'Cortés',
            },
            {
                code: 'HO07',
                name: 'El Paraíso',
            },
            {
                code: 'HO08',
                name: 'Francisco Morazán',
            },
            {
                code: 'HO09',
                name: 'Gracias a Dios',
            },
            {
                code: 'HO10',
                name: 'Intibucá',
            },
            {
                code: 'HO11',
                name: 'Islas de la Bahía',
            },
            {
                code: 'HO12',
                name: 'La Paz',
            },
            {
                code: 'HO13',
                name: 'Lempira',
            },
            {
                code: 'HO14',
                name: 'Ocotepeque',
            },
            {
                code: 'HO15',
                name: 'Olancho',
            },
            {
                code: 'HO16',
                name: 'Santa Bárbara',
            },
            {
                code: 'HO17',
                name: 'Valle',
            },
            {
                code: 'HO18',
                name: 'Yoro',
            },
        ],
    },
    {
        code: 'HK',
        id: 2377,
        name: 'Hong Kong',
        states: [
            {
                code: 'HK001',
                name: 'Hong Kong Island',
            },
            {
                code: 'HK002',
                name: 'Kowloon',
            },
            {
                code: 'HK003',
                name: 'New Territories',
            },
        ],
    },
    {
        code: 'HU',
        id: 2260,
        name: 'Hungary',
        states: [
            {
                code: 'BK',
                name: 'Bács-Kiskun',
            },
            {
                code: 'BA',
                name: 'Baranya',
            },
            {
                code: 'BE',
                name: 'Békés',
            },
            {
                code: 'BC',
                name: 'Békéscsaba',
            },
            {
                code: 'BZ',
                name: 'Borsod-Abaúj-Zemplén',
            },
            {
                code: 'BU',
                name: 'Budapest',
            },
            {
                code: 'CS',
                name: 'Csongrád',
            },
            {
                code: 'DE',
                name: 'Debrecen',
            },
            {
                code: 'DU',
                name: 'Dunaújváros',
            },
            {
                code: 'EG',
                name: 'Eger',
            },
            {
                code: 'ER',
                name: 'Erd',
            },
            {
                code: 'FE',
                name: 'Fejér',
            },
            {
                code: 'GY',
                name: 'Gyor',
            },
            {
                code: 'GS',
                name: 'Gyor-Moson-Sopron',
            },
            {
                code: 'HB',
                name: 'Hajdú-Bihar',
            },
            {
                code: 'HE',
                name: 'Heves',
            },
            {
                code: 'HV',
                name: 'Hódmezovásárhely',
            },
            {
                code: 'JN',
                name: 'Jász-Nagykun-Szolnok',
            },
            {
                code: 'KV',
                name: 'Kaposvár',
            },
            {
                code: 'KM',
                name: 'Kecskemét',
            },
            {
                code: 'KE',
                name: 'Komárom-Esztergom',
            },
            {
                code: 'MI',
                name: 'Miskolc',
            },
            {
                code: 'NK',
                name: 'Nagykanizsa',
            },
            {
                code: 'NO',
                name: 'Nógrád',
            },
            {
                code: 'NY',
                name: 'Nyíregyháza',
            },
            {
                code: 'PS',
                name: 'Pécs',
            },
            {
                code: 'PE',
                name: 'Pest',
            },
            {
                code: 'ST',
                name: 'Salgótarján',
            },
            {
                code: 'SO',
                name: 'Somogy',
            },
            {
                code: 'SN',
                name: 'Sopron',
            },
            {
                code: 'SZ',
                name: 'Szabolcs-Szatmár-Bereg',
            },
            {
                code: 'SD',
                name: 'Szeged',
            },
            {
                code: 'SF',
                name: 'Székesfehérvár',
            },
            {
                code: 'SS',
                name: 'Szekszárd',
            },
            {
                code: 'SK',
                name: 'Szolnok',
            },
            {
                code: 'SH',
                name: 'Szombathely',
            },
            {
                code: 'TB',
                name: 'Tatabánya',
            },
            {
                code: 'TO',
                name: 'Tolna',
            },
            {
                code: 'VA',
                name: 'Vas',
            },
            {
                code: 'VE',
                name: 'Veszprém',
            },
            {
                code: 'VM',
                name: 'Veszprém City',
            },
            {
                code: 'ZA',
                name: 'Zala',
            },
            {
                code: 'ZE',
                name: 'Zalaegerszeg',
            },
        ],
    },
    {
        code: 'IS',
        id: 2261,
        name: 'Iceland',
        states: [
            {
                code: '7',
                name: 'Austurland',
            },
            {
                code: '1',
                name: 'Höfuðborgarsvæði utan Reykjavíkur',
            },
            {
                code: '6',
                name: 'Norðurland eystra',
            },
            {
                code: '5',
                name: 'Norðurland vestra',
            },
            {
                code: '0',
                name: 'Reykjavík',
            },
            {
                code: '8',
                name: 'Suðurland',
            },
            {
                code: '2',
                name: 'Suðurnes',
            },
            {
                code: '4',
                name: 'Vestfirðir',
            },
            {
                code: '3',
                name: 'Vesturland',
            },
        ],
    },
    {
        code: 'IN',
        id: 2262,
        name: 'India',
        states: [
            {
                code: 'AN',
                name: 'Andaman and Nicobar Islands',
            },
            {
                code: 'AP',
                name: 'Andhra Pradesh',
            },
            {
                code: 'AR',
                name: 'Arunachal Pradesh',
            },
            {
                code: 'AS',
                name: 'Assam',
            },
            {
                code: 'BR',
                name: 'Bihar',
            },
            {
                code: 'CH',
                name: 'Chandigarh',
            },
            {
                code: 'CT',
                name: 'Chhattisgarh',
            },
            {
                code: 'DN',
                name: 'Dadra and Nagar Haveli',
            },
            {
                code: 'DD',
                name: 'Daman and Diu',
            },
            {
                code: 'DL',
                name: 'Delhi',
            },
            {
                code: 'GA',
                name: 'Goa',
            },
            {
                code: 'GJ',
                name: 'Gujarat',
            },
            {
                code: 'HR',
                name: 'Haryana',
            },
            {
                code: 'HP',
                name: 'Himachal Pradesh',
            },
            {
                code: 'JK',
                name: 'Jammu and Kashmir',
            },
            {
                code: 'JH',
                name: 'Jharkhand',
            },
            {
                code: 'KA',
                name: 'Karnataka',
            },
            {
                code: 'KL',
                name: 'Kerala',
            },
            {
                code: 'LD',
                name: 'Lakshadweep',
            },
            {
                code: 'MP',
                name: 'Madhya Pradesh',
            },
            {
                code: 'MH',
                name: 'Maharashtra',
            },
            {
                code: 'MN',
                name: 'Manipur',
            },
            {
                code: 'ML',
                name: 'Meghalaya',
            },
            {
                code: 'MZ',
                name: 'Mizoram',
            },
            {
                code: 'NL',
                name: 'Nagaland',
            },
            {
                code: 'OR',
                name: 'Orissa',
            },
            {
                code: 'PY',
                name: 'Pondicherry',
            },
            {
                code: 'PB',
                name: 'Punjab',
            },
            {
                code: 'RJ',
                name: 'Rajasthan',
            },
            {
                code: 'SK',
                name: 'Sikkim',
            },
            {
                code: 'TN',
                name: 'Tamil Nadu',
            },
            {
                code: 'TG',
                name: 'Telangana',
            },
            {
                code: 'TR',
                name: 'Tripura',
            },
            {
                code: 'UP',
                name: 'Uttar Pradesh',
            },
            {
                code: 'UL',
                name: 'Uttaranchal',
            },
            {
                code: 'WB',
                name: 'West Bengal',
            },
        ],
    },
    {
        code: 'ID',
        id: 2263,
        name: 'Indonesia',
        states: [
            {
                code: 'AC',
                name: 'Aceh',
            },
            {
                code: 'BA',
                name: 'Bali',
            },
            {
                code: 'BB',
                name: 'Bangka Belitung',
            },
            {
                code: 'BT',
                name: 'Banten',
            },
            {
                code: 'BE',
                name: 'Bengkulu',
            },
            {
                code: 'GO',
                name: 'Gorontalo',
            },
            {
                code: 'JK',
                name: 'Jakarta Raya',
            },
            {
                code: 'JA',
                name: 'Jambi',
            },
            {
                code: 'JB',
                name: 'Jawa Barat',
            },
            {
                code: 'JT',
                name: 'Jawa Tengah',
            },
            {
                code: 'JI',
                name: 'Jawa Timur',
            },
            {
                code: 'KB',
                name: 'Kalimantan Barat',
            },
            {
                code: 'KS',
                name: 'Kalimantan Selatan',
            },
            {
                code: 'KT',
                name: 'Kalimantan Tengah',
            },
            {
                code: 'KI',
                name: 'Kalimantan Timur',
            },
            {
                code: 'KR',
                name: 'Kepulauan Riau',
            },
            {
                code: 'LA',
                name: 'Lampung',
            },
            {
                code: 'MA',
                name: 'Maluku',
            },
            {
                code: 'MU',
                name: 'Maluku Utara',
            },
            {
                code: 'NB',
                name: 'Nusa Tenggara Barat',
            },
            {
                code: 'NT',
                name: 'Nusa Tenggara Timur',
            },
            {
                code: 'PA',
                name: 'Papua',
            },
            {
                code: 'PB',
                name: 'Papua Barat',
            },
            {
                code: 'RI',
                name: 'Riau',
            },
            {
                code: 'SR',
                name: 'Sulawesi Barat',
            },
            {
                code: 'SN',
                name: 'Sulawesi Selatan',
            },
            {
                code: 'ST',
                name: 'Sulawesi Tengah',
            },
            {
                code: 'SG',
                name: 'Sulawesi Tenggara',
            },
            {
                code: 'SA',
                name: 'Sulawesi Utara',
            },
            {
                code: 'SB',
                name: 'Sumatera Barat',
            },
            {
                code: 'SS',
                name: 'Sumatera Selatan',
            },
            {
                code: 'SU',
                name: 'Sumatera Utara',
            },
            {
                code: 'YO',
                name: 'Yogyakarta',
            },
        ],
    },
    {
        code: 'IR',
        id: 2264,
        name: 'Iran; Islamic Republic of',
        states: [
            {
                code: 'IR44',
                name: 'Alborz',
            },
            {
                code: 'IR32',
                name: 'Ardebil',
            },
            {
                code: 'IR22',
                name: 'Bushehr',
            },
            {
                code: 'IR03',
                name: 'Chahar Mahall and Bakhtiari',
            },
            {
                code: 'IR33',
                name: 'East Azarbaijan',
            },
            {
                code: 'IR28',
                name: 'Esfahan',
            },
            {
                code: 'IR07',
                name: 'Fars',
            },
            {
                code: 'IR08',
                name: 'Gilan',
            },
            {
                code: 'IR37',
                name: 'Golestan',
            },
            {
                code: 'IR09',
                name: 'Hamadan',
            },
            {
                code: 'IR11',
                name: 'Hormozgan',
            },
            {
                code: 'IR42',
                name: 'IRazavi Khorasan',
            },
            {
                code: 'IR10',
                name: 'Ilam',
            },
            {
                code: 'IR29',
                name: 'Kerman',
            },
            {
                code: 'IR13',
                name: 'Kermanshah',
            },
            {
                code: 'IR15',
                name: 'Khuzestan',
            },
            {
                code: 'IR05',
                name: 'Kohgiluyeh and Buyer Ahmad',
            },
            {
                code: 'IR16',
                name: 'Kordestan',
            },
            {
                code: 'IR23',
                name: 'Lorestan',
            },
            {
                code: 'IR34',
                name: 'Markazi',
            },
            {
                code: 'IR35',
                name: 'Mazandaran',
            },
            {
                code: 'IR43',
                name: 'North Khorasan',
            },
            {
                code: 'IR38',
                name: 'Qazvin',
            },
            {
                code: 'IR39',
                name: 'Qom',
            },
            {
                code: 'IR25',
                name: 'Semnan',
            },
            {
                code: 'IR04',
                name: 'Sistan and Baluchestan',
            },
            {
                code: 'IR41',
                name: 'South Khorasan',
            },
            {
                code: 'IR26',
                name: 'Tehran',
            },
            {
                code: 'IR01',
                name: 'West Azarbaijan',
            },
            {
                code: 'IR40',
                name: 'Yazd',
            },
            {
                code: 'IR36',
                name: 'Zanjan',
            },
        ],
    },
    {
        code: 'IQ',
        id: 2265,
        name: 'Iraq',
        states: [
            {
                code: 'IZ01',
                name: 'Al-Anbar',
            },
            {
                code: 'IZ02',
                name: 'Al-Basrah',
            },
            {
                code: 'IZ03',
                name: 'Al-Muthanna',
            },
            {
                code: 'IZ04',
                name: 'Al-Qadisiyah',
            },
            {
                code: 'IZ17',
                name: 'An-Najaf',
            },
            {
                code: 'IZ11',
                name: 'Arbil',
            },
            {
                code: 'IZ05',
                name: 'As-Sulaymaniyah',
            },
            {
                code: 'IZ13',
                name: "At-Ta'mim",
            },
            {
                code: 'IZ06',
                name: 'Babil',
            },
            {
                code: 'IZ07',
                name: 'Baghdad',
            },
            {
                code: 'IZ08',
                name: 'Dahuk',
            },
            {
                code: 'IZ09',
                name: 'Dhi Qar',
            },
            {
                code: 'IZ10',
                name: 'Diyala',
            },
            {
                code: 'IZ12',
                name: 'Karbala',
            },
            {
                code: 'IZ14',
                name: 'Maysan',
            },
            {
                code: 'IZ15',
                name: 'Ninawa',
            },
            {
                code: 'IZ18',
                name: 'Salah ad-Din',
            },
            {
                code: 'IZ16',
                name: 'Wasit',
            },
        ],
    },
    {
        code: 'IE',
        id: 2266,
        name: 'Ireland',
        states: [
            {
                code: 'CW',
                name: 'Carlow',
            },
            {
                code: 'CN',
                name: 'Cavan',
            },
            {
                code: 'CE',
                name: 'Clare',
            },
            {
                code: 'C',
                name: 'Connacht',
            },
            {
                code: 'CO',
                name: 'Cork',
            },
            {
                code: 'DL',
                name: 'Donegal',
            },
            {
                code: 'D',
                name: 'Dublin',
            },
            {
                code: 'G',
                name: 'Galway',
            },
            {
                code: 'KY',
                name: 'Kerry',
            },
            {
                code: 'KE',
                name: 'Kildare',
            },
            {
                code: 'KK',
                name: 'Kilkenny',
            },
            {
                code: 'LS',
                name: 'Laois',
            },
            {
                code: 'L',
                name: 'Leinster',
            },
            {
                code: 'LM',
                name: 'Leitrim',
            },
            {
                code: 'LK',
                name: 'Limerick',
            },
            {
                code: 'LD',
                name: 'Longford',
            },
            {
                code: 'LH',
                name: 'Louth',
            },
            {
                code: 'MO',
                name: 'Mayo',
            },
            {
                code: 'MH',
                name: 'Meath',
            },
            {
                code: 'MN',
                name: 'Monaghan',
            },
            {
                code: 'M',
                name: 'Munster',
            },
            {
                code: 'OY',
                name: 'Offaly',
            },
            {
                code: 'RN',
                name: 'Roscommon',
            },
            {
                code: 'SO',
                name: 'Sligo',
            },
            {
                code: 'TA',
                name: 'Tipperary',
            },
            {
                code: 'U',
                name: 'Ulster',
            },
            {
                code: 'WD',
                name: 'Waterford',
            },
            {
                code: 'WH',
                name: 'Westmeath',
            },
            {
                code: 'WX',
                name: 'Wexford',
            },
            {
                code: 'WW',
                name: 'Wicklow',
            },
        ],
    },
    {
        code: 'IM',
        id: 2445,
        name: 'Isle of Man',
        states: [],
    },
    {
        code: 'IL',
        id: 2267,
        name: 'Israel',
        states: [
            {
                code: 'IS01',
                name: 'HaDarom',
            },
            {
                code: 'IS02',
                name: 'HaMerkaz',
            },
            {
                code: 'IS03',
                name: 'HaZafon',
            },
            {
                code: 'IS04',
                name: 'Haifa',
            },
            {
                code: 'IS06',
                name: 'Jerusalem',
            },
            {
                code: 'IS05',
                name: 'Tel Aviv',
            },
        ],
    },
    {
        code: 'IT',
        id: 2268,
        name: 'Italy',
        states: [
            {
                code: '65',
                name: 'Abruzzo',
            },
            {
                code: 'AG',
                name: 'Agrigento',
            },
            {
                code: 'AL',
                name: 'Alessandria',
            },
            {
                code: 'AN',
                name: 'Ancona',
            },
            {
                code: 'AO',
                name: 'Aosta',
            },
            {
                code: 'AR',
                name: 'Arezzo',
            },
            {
                code: 'AP',
                name: 'Ascoli Piceno',
            },
            {
                code: 'AT',
                name: 'Asti',
            },
            {
                code: 'AV',
                name: 'Avellino',
            },
            {
                code: 'BA',
                name: 'Bari',
            },
            {
                code: 'BT',
                name: 'Barletta-Andria-Trani',
            },
            {
                code: '77',
                name: 'Basilicata',
            },
            {
                code: 'BL',
                name: 'Belluno',
            },
            {
                code: 'BN',
                name: 'Benevento',
            },
            {
                code: 'BG',
                name: 'Bergamo',
            },
            {
                code: 'BI',
                name: 'Biella',
            },
            {
                code: 'BO',
                name: 'Bologna',
            },
            {
                code: 'BZ',
                name: 'Bolzano',
            },
            {
                code: 'BS',
                name: 'Brescia',
            },
            {
                code: 'BR',
                name: 'Brindisi',
            },
            {
                code: 'CA',
                name: 'Cagliari',
            },
            {
                code: '78',
                name: 'Calabria',
            },
            {
                code: 'CL',
                name: 'Caltanissetta',
            },
            {
                code: '72',
                name: 'Campania',
            },
            {
                code: 'CB',
                name: 'Campobasso',
            },
            {
                code: 'CI',
                name: 'Carbonia-Iglesias',
            },
            {
                code: 'CE',
                name: 'Caserta',
            },
            {
                code: 'CT',
                name: 'Catania',
            },
            {
                code: 'CZ',
                name: 'Catanzaro',
            },
            {
                code: 'CH',
                name: 'Chieti',
            },
            {
                code: 'CO',
                name: 'Como',
            },
            {
                code: 'CS',
                name: 'Cosenza',
            },
            {
                code: 'CR',
                name: 'Cremona',
            },
            {
                code: 'KR',
                name: 'Crotone',
            },
            {
                code: 'CN',
                name: 'Cuneo',
            },
            {
                code: '45',
                name: 'Emilia-Romagna',
            },
            {
                code: 'EN',
                name: 'Enna',
            },
            {
                code: 'FM',
                name: 'Fermo',
            },
            {
                code: 'FE',
                name: 'Ferrara',
            },
            {
                code: 'FI',
                name: 'Firenze',
            },
            {
                code: 'FG',
                name: 'Foggia',
            },
            {
                code: 'FC',
                name: 'Forli-Cesena',
            },
            {
                code: '36',
                name: 'Friuli-Venezia Giulia',
            },
            {
                code: 'FR',
                name: 'Frosinone',
            },
            {
                code: 'GE',
                name: 'Genova',
            },
            {
                code: 'GO',
                name: 'Gorizia',
            },
            {
                code: 'GR',
                name: 'Grosseto',
            },
            {
                code: 'IM',
                name: 'Imperia',
            },
            {
                code: 'IS',
                name: 'Isernia',
            },
            {
                code: 'AQ',
                name: "L'Aquila",
            },
            {
                code: 'SP',
                name: 'La Spezia',
            },
            {
                code: 'LT',
                name: 'Latina',
            },
            {
                code: '62',
                name: 'Lazio',
            },
            {
                code: 'LE',
                name: 'Lecce',
            },
            {
                code: 'LC',
                name: 'Lecco',
            },
            {
                code: '42',
                name: 'Liguria',
            },
            {
                code: 'LI',
                name: 'Livorno',
            },
            {
                code: 'LO',
                name: 'Lodi',
            },
            {
                code: '25',
                name: 'Lombardia',
            },
            {
                code: 'LU',
                name: 'Lucca',
            },
            {
                code: 'MC',
                name: 'Macerata',
            },
            {
                code: 'MN',
                name: 'Mantova',
            },
            {
                code: '57',
                name: 'Marche',
            },
            {
                code: 'MS',
                name: 'Massa-Carrara',
            },
            {
                code: 'MT',
                name: 'Matera',
            },
            {
                code: 'VS',
                name: 'Medio Campidano',
            },
            {
                code: 'ME',
                name: 'Messina',
            },
            {
                code: 'MI',
                name: 'Milano',
            },
            {
                code: 'MO',
                name: 'Modena',
            },
            {
                code: '67',
                name: 'Molise',
            },
            {
                code: 'MB',
                name: 'Monza e Brianza',
            },
            {
                code: 'NA',
                name: 'Napoli',
            },
            {
                code: 'NO',
                name: 'Novara',
            },
            {
                code: 'NU',
                name: 'Nuoro',
            },
            {
                code: 'OG',
                name: 'Ogliastra',
            },
            {
                code: 'OT',
                name: 'Olbia-Tempio',
            },
            {
                code: 'OR',
                name: 'Oristano',
            },
            {
                code: 'PD',
                name: 'Padova',
            },
            {
                code: 'PA',
                name: 'Palermo',
            },
            {
                code: 'PR',
                name: 'Parma',
            },
            {
                code: 'PV',
                name: 'Pavia',
            },
            {
                code: 'PG',
                name: 'Perugia',
            },
            {
                code: 'PU',
                name: 'Pesaro e Urbino',
            },
            {
                code: 'PE',
                name: 'Pescara',
            },
            {
                code: 'PC',
                name: 'Piacenza',
            },
            {
                code: '21',
                name: 'Piemonte',
            },
            {
                code: 'PI',
                name: 'Pisa',
            },
            {
                code: 'PT',
                name: 'Pistoia',
            },
            {
                code: 'PN',
                name: 'Pordenone',
            },
            {
                code: 'PZ',
                name: 'Potenza',
            },
            {
                code: 'PO',
                name: 'Prato',
            },
            {
                code: '75',
                name: 'Puglia',
            },
            {
                code: 'RG',
                name: 'Ragusa',
            },
            {
                code: 'RA',
                name: 'Ravenna',
            },
            {
                code: 'RC',
                name: 'Reggio Calabria',
            },
            {
                code: 'RE',
                name: 'Reggio Emilia',
            },
            {
                code: 'RI',
                name: 'Rieti',
            },
            {
                code: 'RN',
                name: 'Rimini',
            },
            {
                code: 'RM',
                name: 'Roma',
            },
            {
                code: 'RO',
                name: 'Rovigo',
            },
            {
                code: 'SA',
                name: 'Salerno',
            },
            {
                code: '88',
                name: 'Sardegna',
            },
            {
                code: 'SS',
                name: 'Sassari',
            },
            {
                code: 'SV',
                name: 'Savona',
            },
            {
                code: '82',
                name: 'Sicilia',
            },
            {
                code: 'SI',
                name: 'Siena',
            },
            {
                code: 'SR',
                name: 'Siracusa',
            },
            {
                code: 'SO',
                name: 'Sondrio',
            },
            {
                code: 'TA',
                name: 'Taranto',
            },
            {
                code: 'TE',
                name: 'Teramo',
            },
            {
                code: 'TR',
                name: 'Terni',
            },
            {
                code: 'TO',
                name: 'Torino',
            },
            {
                code: '52',
                name: 'Toscana',
            },
            {
                code: 'TP',
                name: 'Trapani',
            },
            {
                code: '32',
                name: 'Trentino-Alto Adige',
            },
            {
                code: 'TN',
                name: 'Trento',
            },
            {
                code: 'TV',
                name: 'Treviso',
            },
            {
                code: 'TS',
                name: 'Trieste',
            },
            {
                code: 'UD',
                name: 'Udine',
            },
            {
                code: '55',
                name: 'Umbria',
            },
            {
                code: '23',
                name: "Valle d'Aosta",
            },
            {
                code: 'VA',
                name: 'Varese',
            },
            {
                code: '34',
                name: 'Veneto',
            },
            {
                code: 'VE',
                name: 'Venezia',
            },
            {
                code: 'VB',
                name: 'Verbano-Cusio-Ossola',
            },
            {
                code: 'VC',
                name: 'Vercelli',
            },
            {
                code: 'VR',
                name: 'Verona',
            },
            {
                code: 'VV',
                name: 'Vibo Valentia',
            },
            {
                code: 'VI',
                name: 'Vicenza',
            },
            {
                code: 'VT',
                name: 'Viterbo',
            },
        ],
    },
    {
        code: 'JM',
        id: 2269,
        name: 'Jamaica',
        states: [
            {
                code: 'JM01',
                name: 'Clarendon',
            },
            {
                code: 'JM02',
                name: 'Hanover',
            },
            {
                code: 'JM17',
                name: 'Kingston',
            },
            {
                code: 'JM04',
                name: 'Manchester',
            },
            {
                code: 'JM07',
                name: 'Portland',
            },
            {
                code: 'JM08',
                name: 'Saint Andrew',
            },
            {
                code: 'JM09',
                name: 'Saint Ann',
            },
            {
                code: 'JM10',
                name: 'Saint Catherine',
            },
            {
                code: 'JM11',
                name: 'Saint Elizabeth',
            },
            {
                code: 'JM12',
                name: 'Saint James',
            },
            {
                code: 'JM13',
                name: 'Saint Mary',
            },
            {
                code: 'JM14',
                name: 'Saint Thomas',
            },
            {
                code: 'JM15',
                name: 'Trelawny',
            },
            {
                code: 'JM16',
                name: 'Westmoreland',
            },
        ],
    },
    {
        code: 'JP',
        id: 2270,
        name: 'Japan',
        states: [
            {
                code: 'JP23',
                name: 'Aichi',
            },
            {
                code: 'JP05',
                name: 'Akita',
            },
            {
                code: 'JP02',
                name: 'Aomori',
            },
            {
                code: 'JP12',
                name: 'Chiba',
            },
            {
                code: 'JP38',
                name: 'Ehime',
            },
            {
                code: 'JP18',
                name: 'Fukui',
            },
            {
                code: 'JP40',
                name: 'Fukuoka',
            },
            {
                code: 'JP07',
                name: 'Fukushima',
            },
            {
                code: 'JP21',
                name: 'Gifu',
            },
            {
                code: 'JP10',
                name: 'Gunma',
            },
            {
                code: 'JP34',
                name: 'Hiroshima',
            },
            {
                code: 'JP01',
                name: 'Hokkaido',
            },
            {
                code: 'JP28',
                name: 'Hyogo',
            },
            {
                code: 'JP08',
                name: 'Ibaraki',
            },
            {
                code: 'JP17',
                name: 'Ishikawa',
            },
            {
                code: 'JP03',
                name: 'Iwate',
            },
            {
                code: 'JP37',
                name: 'Kagawa',
            },
            {
                code: 'JP46',
                name: 'Kagoshima',
            },
            {
                code: 'JP14',
                name: 'Kanagawa',
            },
            {
                code: 'JP39',
                name: 'Kochi',
            },
            {
                code: 'JP43',
                name: 'Kumamoto',
            },
            {
                code: 'JP26',
                name: 'Kyoto',
            },
            {
                code: 'JP24',
                name: 'Mie',
            },
            {
                code: 'JP04',
                name: 'Miyagi',
            },
            {
                code: 'JP45',
                name: 'Miyazaki',
            },
            {
                code: 'JP20',
                name: 'Nagano',
            },
            {
                code: 'JP42',
                name: 'Nagasaki',
            },
            {
                code: 'JP29',
                name: 'Nara',
            },
            {
                code: 'JP15',
                name: 'Niigata',
            },
            {
                code: 'JP44',
                name: 'Oita',
            },
            {
                code: 'JP33',
                name: 'Okayama',
            },
            {
                code: 'JP47',
                name: 'Okinawa',
            },
            {
                code: 'JP27',
                name: 'Osaka',
            },
            {
                code: 'JP41',
                name: 'Saga',
            },
            {
                code: 'JP11',
                name: 'Saitama',
            },
            {
                code: 'JP25',
                name: 'Shiga',
            },
            {
                code: 'JP32',
                name: 'Shimane',
            },
            {
                code: 'JP22',
                name: 'Shizuoka',
            },
            {
                code: 'JP09',
                name: 'Tochigi',
            },
            {
                code: 'JP36',
                name: 'Tokushima',
            },
            {
                code: 'JP13',
                name: 'Tokyo',
            },
            {
                code: 'JP31',
                name: 'Tottori',
            },
            {
                code: 'JP16',
                name: 'Toyama',
            },
            {
                code: 'JP30',
                name: 'Wakayama',
            },
            {
                code: 'JP06',
                name: 'Yamagata',
            },
            {
                code: 'JP35',
                name: 'Yamaguchi',
            },
            {
                code: 'JP19',
                name: 'Yamanashi',
            },
        ],
    },
    {
        code: 'JE',
        id: 2422,
        name: 'Jersey',
        states: [],
    },
    {
        code: 'JO',
        id: 2271,
        name: 'Jordan',
        states: [
            {
                code: 'JO01',
                name: 'Ajlun',
            },
            {
                code: 'JO02',
                name: 'Amman',
            },
            {
                code: 'JO03',
                name: 'Aqaba',
            },
            {
                code: 'JO04',
                name: 'Balqa',
            },
            {
                code: 'JO05',
                name: 'Irbid',
            },
            {
                code: 'JO06',
                name: 'JarasJ',
            },
            {
                code: 'JO07',
                name: 'Karak',
            },
            {
                code: 'JO08',
                name: "Ma'an",
            },
            {
                code: 'JO09',
                name: 'Madaba',
            },
            {
                code: 'JO10',
                name: 'Mafraq',
            },
            {
                code: 'JO11',
                name: 'Tafilah',
            },
            {
                code: 'JO12',
                name: 'Zarqa',
            },
        ],
    },
    {
        code: 'KZ',
        id: 2272,
        name: 'Kazakhstan',
        states: [
            {
                code: 'KZ01',
                name: 'Almaty',
            },
            {
                code: 'KZ02',
                name: 'Almaty (City)',
            },
            {
                code: 'KZ03',
                name: 'Aqmola',
            },
            {
                code: 'KZ04',
                name: 'Aqtöbe',
            },
            {
                code: 'KZ05',
                name: 'Astana',
            },
            {
                code: 'KZ06',
                name: 'Atyrau',
            },
            {
                code: 'KZ08',
                name: 'Bayqonyr',
            },
            {
                code: 'KZ15',
                name: 'East Kazakhstan',
            },
            {
                code: 'KZ09',
                name: 'Mangghystau',
            },
            {
                code: 'KZ16',
                name: 'North Kazakhstan',
            },
            {
                code: 'KZ11',
                name: 'Pavlodar',
            },
            {
                code: 'KZ12',
                name: 'Qaraghandy',
            },
            {
                code: 'KZ13',
                name: 'Qostanay',
            },
            {
                code: 'KZ14',
                name: 'Qyzylorda',
            },
            {
                code: 'KZ10',
                name: 'South Kazakhstan',
            },
            {
                code: 'KZ07',
                name: 'West Kazakhstan',
            },
            {
                code: 'KZ17',
                name: 'Zhambyl',
            },
        ],
    },
    {
        code: 'KE',
        id: 2273,
        name: 'Kenya',
        states: [
            {
                code: 'KE10',
                name: 'Baringo',
            },
            {
                code: 'KE11',
                name: 'Bomet',
            },
            {
                code: 'KE12',
                name: 'Bungoma',
            },
            {
                code: 'KE13',
                name: 'Busia',
            },
            {
                code: 'KE14',
                name: 'Elgeyo Marakwet',
            },
            {
                code: 'KE15',
                name: 'Embu',
            },
            {
                code: 'KE16',
                name: 'Garissa',
            },
            {
                code: 'KE17',
                name: 'Homa Bay',
            },
            {
                code: 'KE18',
                name: 'Isiolo',
            },
            {
                code: 'KE19',
                name: 'Kajiado',
            },
            {
                code: 'KE20',
                name: 'Kakamega',
            },
            {
                code: 'KE21',
                name: 'Kericho',
            },
            {
                code: 'KE22',
                name: 'Kiambu',
            },
            {
                code: 'KE23',
                name: 'Kilifi',
            },
            {
                code: 'KE24',
                name: 'Kirinyaga',
            },
            {
                code: 'KE25',
                name: 'Kisii',
            },
            {
                code: 'KE26',
                name: 'Kisumu',
            },
            {
                code: 'KE27',
                name: 'Kitui',
            },
            {
                code: 'KE28',
                name: 'Kwale',
            },
            {
                code: 'KE29',
                name: 'Laikipia',
            },
            {
                code: 'KE30',
                name: 'Lamu',
            },
            {
                code: 'KE31',
                name: 'Machakos',
            },
            {
                code: 'KE32',
                name: 'Makueni',
            },
            {
                code: 'KE33',
                name: 'Mandera',
            },
            {
                code: 'KE34',
                name: 'Marsabit',
            },
            {
                code: 'KE35',
                name: 'Meru',
            },
            {
                code: 'KE36',
                name: 'Migori',
            },
            {
                code: 'KE37',
                name: 'Mombasa',
            },
            {
                code: 'KE38',
                name: 'Murang',
            },
            {
                code: 'KE05',
                name: 'Nairobi',
            },
            {
                code: 'KE39',
                name: 'Nakuru',
            },
            {
                code: 'KE40',
                name: 'Nandi',
            },
            {
                code: 'KE41',
                name: 'Narok',
            },
            {
                code: 'KE42',
                name: 'Nyamira',
            },
            {
                code: 'KE43',
                name: 'Nyandarua',
            },
            {
                code: 'KE44',
                name: 'Nyeri',
            },
            {
                code: 'KE45',
                name: 'Samburu',
            },
            {
                code: 'KE46',
                name: 'Siaya',
            },
            {
                code: 'KE47',
                name: 'Taita Taveta',
            },
            {
                code: 'KE48',
                name: 'Tana River',
            },
            {
                code: 'KE49',
                name: 'Tharaka Nithi',
            },
            {
                code: 'KE50',
                name: 'Trans Nzoia',
            },
            {
                code: 'KE51',
                name: 'Turkana',
            },
            {
                code: 'KE52',
                name: 'Uasin Gishu',
            },
            {
                code: 'KE53',
                name: 'Vihiga',
            },
            {
                code: 'KE54',
                name: 'Wajir',
            },
            {
                code: 'KE55',
                name: 'West Pokot',
            },
        ],
    },
    {
        code: 'KI',
        id: 2391,
        name: 'Kiribati',
        states: [],
    },
    {
        code: 'KP',
        id: 2274,
        name: "Korea; Democratic People's Republic Of (North)",
        states: [
            {
                code: 'KN01',
                name: 'Chagang-do',
            },
            {
                code: 'KN17',
                name: 'Hamgyong-bukto',
            },
            {
                code: 'KN03',
                name: 'Hamgyong-namdo',
            },
            {
                code: 'KN07',
                name: 'Hwanghae-bukto',
            },
            {
                code: 'KN06',
                name: 'Hwanghae-namdo',
            },
            {
                code: 'KN09',
                name: 'Kangwon-do',
            },
            {
                code: 'KN18',
                name: 'Najin Sonbong-si',
            },
            {
                code: 'KN11',
                name: "P'yongan-bukto",
            },
            {
                code: 'KN15',
                name: "P'yongan-namdo",
            },
            {
                code: 'KN12',
                name: "P'yongyang-si",
            },
            {
                code: 'KN13',
                name: 'Yanggang-do',
            },
        ],
    },
    {
        code: 'KR',
        id: 2275,
        name: 'Korea; Republic Of (South)',
        states: [
            {
                code: 'KS10',
                name: 'Busan',
            },
            {
                code: 'KS05',
                name: 'Chungcheongbuk-do',
            },
            {
                code: 'KS17',
                name: 'Chungcheongnam-do',
            },
            {
                code: 'KS15',
                name: 'Daegu',
            },
            {
                code: 'KS19',
                name: 'Daejeon',
            },
            {
                code: 'KS06',
                name: 'Gangwon-do',
            },
            {
                code: 'KS18',
                name: 'Gwangju',
            },
            {
                code: 'KS13',
                name: 'Gyeonggi-do',
            },
            {
                code: 'KS14',
                name: 'Gyeongsangbuk-do',
            },
            {
                code: 'KS20',
                name: 'Gyeongsangnam-do',
            },
            {
                code: 'KS12',
                name: 'Incheon',
            },
            {
                code: 'KS01',
                name: 'Jeju-do',
            },
            {
                code: 'KS03',
                name: 'Jeollabuk-do',
            },
            {
                code: 'KS16',
                name: 'Jeollanam-do',
            },
            {
                code: 'KS22',
                name: 'Sejong',
            },
            {
                code: 'KS11',
                name: 'Seoul',
            },
            {
                code: 'KS21',
                name: 'Ulsan',
            },
        ],
    },
    {
        code: 'KV',
        id: 2392,
        name: 'Kosovo',
        states: [],
    },
    {
        code: 'KW',
        id: 2276,
        name: 'Kuwait',
        states: [
            {
                code: 'KU04',
                name: 'Al Ahmadi',
            },
            {
                code: 'KU07',
                name: 'Al Farwaniyah',
            },
            {
                code: 'KU05',
                name: 'Al Jahrah',
            },
            {
                code: 'KU02',
                name: 'Al Kuwayt',
            },
            {
                code: 'KU08',
                name: 'Hawalli',
            },
            {
                code: 'KU09',
                name: 'Mubarak Al-Kabir',
            },
        ],
    },
    {
        code: 'KG',
        id: 2277,
        name: 'Kyrgyzstan',
        states: [
            {
                code: 'KG09',
                name: 'Batken',
            },
            {
                code: 'KG01',
                name: 'Bishkek',
            },
            {
                code: 'KG02',
                name: 'Chüy',
            },
            {
                code: 'KG03',
                name: 'Jalal-Abad',
            },
            {
                code: 'KG04',
                name: 'Naryn',
            },
            {
                code: 'KG10',
                name: 'Osh [City]',
            },
            {
                code: 'KG08',
                name: 'Osh',
            },
            {
                code: 'KG06',
                name: 'Talas',
            },
            {
                code: 'KG07',
                name: 'Ysyk-Köl',
            },
        ],
    },
    {
        code: 'LA',
        id: 2278,
        name: "Lao People's Democratic Republic",
        states: [
            {
                code: 'LA01',
                name: 'Attapu',
            },
            {
                code: 'LA22',
                name: 'Bokeo',
            },
            {
                code: 'LA23',
                name: 'Bolikhamxai',
            },
            {
                code: 'LA02',
                name: 'Champasak',
            },
            {
                code: 'LA03',
                name: 'Houaphan',
            },
            {
                code: 'LA15',
                name: 'Khammouan',
            },
            {
                code: 'LA16',
                name: 'Louang Namtha',
            },
            {
                code: 'LA17',
                name: 'Louangphrabang',
            },
            {
                code: 'LA07',
                name: 'Oudômxai',
            },
            {
                code: 'LA18',
                name: 'Phôngsali',
            },
            {
                code: 'LA19',
                name: 'Saravan',
            },
            {
                code: 'LA20',
                name: 'Savannakhét',
            },
            {
                code: 'LA27',
                name: 'Vientiane',
            },
            {
                code: 'LA24',
                name: 'Vientiane [prefecture]',
            },
            {
                code: 'LA13',
                name: 'Xaignabouri',
            },
            {
                code: 'LA28',
                name: 'Xaisômboun',
            },
            {
                code: 'LA26',
                name: 'Xékong',
            },
            {
                code: 'LA14',
                name: 'Xiangkhoang',
            },
        ],
    },
    {
        code: 'LV',
        id: 2279,
        name: 'Latvia',
        states: [
            {
                code: 'LG34',
                name: 'Adaži',
            },
            {
                code: 'LG35',
                name: 'Aglona',
            },
            {
                code: 'LG36',
                name: 'Aizkraukle',
            },
            {
                code: 'LG37',
                name: 'Aizpute',
            },
            {
                code: 'LG38',
                name: 'Akniste',
            },
            {
                code: 'LG39',
                name: 'Aloja',
            },
            {
                code: 'LG40',
                name: 'Alsunga',
            },
            {
                code: 'LG41',
                name: 'Aluksne',
            },
            {
                code: 'LG42',
                name: 'Amata',
            },
            {
                code: 'LG43',
                name: 'Ape',
            },
            {
                code: 'LG44',
                name: 'Auce',
            },
            {
                code: 'LG45',
                name: 'Babite',
            },
            {
                code: 'LG46',
                name: 'Baldone',
            },
            {
                code: 'LG47',
                name: 'Baltinava',
            },
            {
                code: 'LG48',
                name: 'Balvi',
            },
            {
                code: 'LG49',
                name: 'Bauska',
            },
            {
                code: 'LG50',
                name: 'Beverina',
            },
            {
                code: 'LG51',
                name: 'Broceni',
            },
            {
                code: 'LG52',
                name: 'Burtnieki',
            },
            {
                code: 'LG53',
                name: 'Carnikava',
            },
            {
                code: 'LG54',
                name: 'Cesis',
            },
            {
                code: 'LG55',
                name: 'Cesvaine',
            },
            {
                code: 'LG56',
                name: 'Cibla',
            },
            {
                code: 'LG57',
                name: 'Dagda',
            },
            {
                code: 'LG06',
                name: 'Daugavpils',
            },
            {
                code: 'LG58',
                name: 'Daugavpils',
            },
            {
                code: 'LG59',
                name: 'Dobele',
            },
            {
                code: 'LG60',
                name: 'Dundaga',
            },
            {
                code: 'LG61',
                name: 'Durbe',
            },
            {
                code: 'LG62',
                name: 'Engure',
            },
            {
                code: 'LG63',
                name: 'Ergli',
            },
            {
                code: 'LG64',
                name: 'Garkalne',
            },
            {
                code: 'LG65',
                name: 'Grobina',
            },
            {
                code: 'LG66',
                name: 'Gulbene',
            },
            {
                code: 'LG67',
                name: 'Iecava',
            },
            {
                code: 'LG68',
                name: 'Ikškile',
            },
            {
                code: 'LG69',
                name: 'Ilukste',
            },
            {
                code: 'LG70',
                name: 'Incukalns',
            },
            {
                code: 'LG71',
                name: 'Jaunjelgava',
            },
            {
                code: 'LG72',
                name: 'Jaunpiebalga',
            },
            {
                code: 'LG73',
                name: 'Jaunpils',
            },
            {
                code: 'LG75',
                name: 'Jekabpils',
            },
            {
                code: 'LG74',
                name: 'Jekabpils',
            },
            {
                code: 'LG76',
                name: 'Jelgava',
            },
            {
                code: 'LG11',
                name: 'Jelgava',
            },
            {
                code: 'LG13',
                name: 'Jurmala',
            },
            {
                code: 'LG77',
                name: 'Kandava',
            },
            {
                code: 'LG78',
                name: 'Karsava',
            },
            {
                code: 'LG79',
                name: 'Kegums',
            },
            {
                code: 'LG80',
                name: 'Kekava',
            },
            {
                code: 'LG81',
                name: 'Kocenu',
            },
            {
                code: 'LG82',
                name: 'Koknese',
            },
            {
                code: 'LG83',
                name: 'Kraslava',
            },
            {
                code: 'LG84',
                name: 'Krimulda',
            },
            {
                code: 'LG85',
                name: 'Krustpils',
            },
            {
                code: 'LG86',
                name: 'Kuldiga',
            },
            {
                code: 'LG87',
                name: 'Lielvarde',
            },
            {
                code: 'LG16',
                name: 'Liepaja',
            },
            {
                code: 'LG88',
                name: 'Ligatne',
            },
            {
                code: 'LG89',
                name: 'Limbaži',
            },
            {
                code: 'LG90',
                name: 'Livani',
            },
            {
                code: 'LG91',
                name: 'Lubana',
            },
            {
                code: 'LG92',
                name: 'Ludza',
            },
            {
                code: 'LG93',
                name: 'Madona',
            },
            {
                code: 'LG94',
                name: 'Malpils',
            },
            {
                code: 'LG95',
                name: 'Marupe',
            },
            {
                code: 'LG96',
                name: 'Mazsalaca',
            },
            {
                code: 'LGF1',
                name: 'Mersraga',
            },
            {
                code: 'LG97',
                name: 'Naukšeni',
            },
            {
                code: 'LG98',
                name: 'Nereta',
            },
            {
                code: 'LG99',
                name: 'Nica',
            },
            {
                code: 'LGA1',
                name: 'Ogre',
            },
            {
                code: 'LGA2',
                name: 'Olaine',
            },
            {
                code: 'LGA3',
                name: 'Ozolnieki',
            },
            {
                code: 'LGA4',
                name: 'Pargauja',
            },
            {
                code: 'LGA5',
                name: 'Pavilosta',
            },
            {
                code: 'LGA6',
                name: 'Plavinas',
            },
            {
                code: 'LGA7',
                name: 'Preili',
            },
            {
                code: 'LGA8',
                name: 'Priekule',
            },
            {
                code: 'LGA9',
                name: 'Priekuli',
            },
            {
                code: 'LGB1',
                name: 'Rauna',
            },
            {
                code: 'LGB2',
                name: 'Rezekne',
            },
            {
                code: 'LG23',
                name: 'Rezekne',
            },
            {
                code: 'LGB3',
                name: 'Riebini',
            },
            {
                code: 'LG25',
                name: 'Riga',
            },
            {
                code: 'LGB4',
                name: 'Roja',
            },
            {
                code: 'LGB5',
                name: 'Ropaži',
            },
            {
                code: 'LGB6',
                name: 'Rucava',
            },
            {
                code: 'LGB7',
                name: 'Rugaji',
            },
            {
                code: 'LGB8',
                name: 'Rujiena',
            },
            {
                code: 'LGB9',
                name: 'Rundale',
            },
            {
                code: 'LGC1',
                name: 'Salacgriva',
            },
            {
                code: 'LGC2',
                name: 'Sala',
            },
            {
                code: 'LGC3',
                name: 'Salaspils',
            },
            {
                code: 'LGC4',
                name: 'Saldus',
            },
            {
                code: 'LGC5',
                name: 'Saulkrasti',
            },
            {
                code: 'LGC6',
                name: 'Seja',
            },
            {
                code: 'LGC7',
                name: 'Sigulda',
            },
            {
                code: 'LGC8',
                name: 'Skriveri',
            },
            {
                code: 'LGC9',
                name: 'Skrunda',
            },
            {
                code: 'LGD1',
                name: 'Smiltene',
            },
            {
                code: 'LGD2',
                name: 'Stopini',
            },
            {
                code: 'LGD3',
                name: 'Strenci',
            },
            {
                code: 'LGD4',
                name: 'Talsi',
            },
            {
                code: 'LGD5',
                name: 'Tervete',
            },
            {
                code: 'LGD6',
                name: 'Tukums',
            },
            {
                code: 'LGD7',
                name: 'Vainode',
            },
            {
                code: 'LGD8',
                name: 'Valka',
            },
            {
                code: 'LGD9',
                name: 'Valmiera',
            },
            {
                code: 'LGE1',
                name: 'Varaklani',
            },
            {
                code: 'LGE2',
                name: 'Varkava',
            },
            {
                code: 'LGE3',
                name: 'Vecpiebalga',
            },
            {
                code: 'LGE4',
                name: 'Vecumnieki',
            },
            {
                code: 'LGE5',
                name: 'Ventspils',
            },
            {
                code: 'LG32',
                name: 'Ventspils',
            },
            {
                code: 'LGE6',
                name: 'Viesite',
            },
            {
                code: 'LGE7',
                name: 'Vilaka',
            },
            {
                code: 'LGE8',
                name: 'Vilani',
            },
            {
                code: 'LGE9',
                name: 'Zilupe',
            },
        ],
    },
    {
        code: 'LB',
        id: 2280,
        name: 'Lebanon',
        states: [
            {
                code: 'LE10',
                name: 'Aakkar',
            },
            {
                code: 'LE07',
                name: 'An Nabatiyah',
            },
            {
                code: 'LE11',
                name: 'Baalbek-Hermel',
            },
            {
                code: 'LE04',
                name: 'Beirut',
            },
            {
                code: 'LE08',
                name: 'Beqaa',
            },
            {
                code: 'LE05',
                name: 'Mount Lebanon',
            },
            {
                code: 'LE09',
                name: 'North Lebanon',
            },
            {
                code: 'LE06',
                name: 'South Lebanon',
            },
        ],
    },
    {
        code: 'LS',
        id: 2281,
        name: 'Lesotho',
        states: [
            {
                code: 'LT10',
                name: 'Berea',
            },
            {
                code: 'LT11',
                name: 'Butha-Buthe',
            },
            {
                code: 'LT12',
                name: 'Leribe',
            },
            {
                code: 'LT14',
                name: 'Mafeteng',
            },
            {
                code: 'LT13',
                name: 'Mafeteng',
            },
            {
                code: 'LT15',
                name: "Mohale's Hoek",
            },
            {
                code: 'LT16',
                name: 'Mokhotlong',
            },
            {
                code: 'LT17',
                name: "Qacha's Nek",
            },
            {
                code: 'LT18',
                name: 'Quthing',
            },
            {
                code: 'LT19',
                name: 'Thaba-Tseka',
            },
        ],
    },
    {
        code: 'LR',
        id: 2282,
        name: 'Liberia',
        states: [
            {
                code: 'LI15',
                name: 'Bomi',
            },
            {
                code: 'LI01',
                name: 'Bong',
            },
            {
                code: 'LI21\t',
                name: 'Gbarpolu',
            },
            {
                code: 'LI11',
                name: 'Grand Bassa',
            },
            {
                code: 'LI12',
                name: 'Grand Cape Mount',
            },
            {
                code: 'LI19',
                name: 'Grand Gedeh',
            },
            {
                code: 'LI16',
                name: 'Grand Kru',
            },
            {
                code: 'LI20',
                name: 'Lofa',
            },
            {
                code: 'LI17',
                name: 'Margibi',
            },
            {
                code: 'LI13',
                name: 'Maryland',
            },
            {
                code: 'LI14',
                name: 'Montserrado',
            },
            {
                code: 'LI09',
                name: 'Nimba',
            },
            {
                code: 'LI22',
                name: 'River Gee',
            },
            {
                code: 'LI18',
                name: 'Rivercess',
            },
            {
                code: 'LI10',
                name: 'Sinoe',
            },
        ],
    },
    {
        code: 'LY',
        id: 2380,
        name: 'Libyan Arab Jamahiriya',
        states: [],
    },
    {
        code: 'LI',
        id: 2284,
        name: 'Liechtenstein',
        states: [],
    },
    {
        code: 'LT',
        id: 2285,
        name: 'Lithuania',
        states: [
            {
                code: 'LH56',
                name: 'Alytus',
            },
            {
                code: 'LH57',
                name: 'Kaunas',
            },
            {
                code: 'LH58',
                name: 'Klaipeda',
            },
            {
                code: 'LH59',
                name: 'Marijampole',
            },
            {
                code: 'LH60',
                name: 'Panevežys',
            },
            {
                code: 'LH61',
                name: 'Siauliai',
            },
            {
                code: 'LH62',
                name: 'Taurage',
            },
            {
                code: 'LH63',
                name: 'Telšiai',
            },
            {
                code: 'LH64',
                name: 'Utena',
            },
            {
                code: 'LH65',
                name: 'Vilnius',
            },
        ],
    },
    {
        code: 'LU',
        id: 2286,
        name: 'Luxembourg',
        states: [
            {
                code: 'LU01',
                name: 'Diekirch',
            },
            {
                code: 'LU02',
                name: 'Grevenmacher',
            },
            {
                code: 'LU03',
                name: 'Luxembourg',
            },
        ],
    },
    {
        code: 'MO',
        id: 2287,
        name: 'Macau',
        states: [],
    },
    {
        code: 'MK',
        id: 2288,
        name: 'Macedonia',
        states: [],
    },
    {
        code: 'YU',
        id: 2367,
        name: 'Macedonia; the Former Yugoslav Republic',
        states: [],
    },
    {
        code: 'MG',
        id: 2289,
        name: 'Madagascar',
        states: [
            {
                code: 'MA05',
                name: 'Antananarivo',
            },
            {
                code: 'MA01',
                name: 'Antsiranana',
            },
            {
                code: 'MA02',
                name: 'Fianarantsoa',
            },
            {
                code: 'MA03',
                name: 'Mahajanga',
            },
            {
                code: 'MA04',
                name: 'Toamasina',
            },
            {
                code: 'MA06',
                name: 'Toliara',
            },
        ],
    },
    {
        code: 'MW',
        id: 2290,
        name: 'Malawi',
        states: [
            {
                code: 'MI26',
                name: 'Balaka',
            },
            {
                code: 'MI24',
                name: 'Blantyre',
            },
            {
                code: 'MI02',
                name: 'Chikwawa',
            },
            {
                code: 'MI03',
                name: 'Chiradzulu',
            },
            {
                code: 'MI04',
                name: 'Chitipa',
            },
            {
                code: 'MI06',
                name: 'Dedza',
            },
            {
                code: 'MI07',
                name: 'Dowa',
            },
            {
                code: 'MI08',
                name: 'Karonga',
            },
            {
                code: 'MI09',
                name: 'Kasungu',
            },
            {
                code: 'MI27',
                name: 'Likoma',
            },
            {
                code: 'MI11',
                name: 'Lilongwe',
            },
            {
                code: 'MI28',
                name: 'Machinga',
            },
            {
                code: 'MI12',
                name: 'Mangochi',
            },
            {
                code: 'MI13',
                name: 'Mchinji',
            },
            {
                code: 'MI29',
                name: 'Mulanje',
            },
            {
                code: 'MI25',
                name: 'Mwanza',
            },
            {
                code: 'MI15',
                name: 'Mzimba',
            },
            {
                code: 'MI31',
                name: 'Neno',
            },
            {
                code: 'MI17',
                name: 'Nkhata Bay',
            },
            {
                code: 'MI18',
                name: 'Nkhotakota',
            },
            {
                code: 'MI19',
                name: 'Nsanje',
            },
            {
                code: 'MI16',
                name: 'Ntcheu',
            },
            {
                code: 'MI20',
                name: 'Ntchisi',
            },
            {
                code: 'MI30',
                name: 'Phalombe',
            },
            {
                code: 'MI21',
                name: 'Rumphi',
            },
            {
                code: 'MI22',
                name: 'Salima',
            },
            {
                code: 'MI05',
                name: 'Thyolo',
            },
            {
                code: 'MI23',
                name: 'Zomba',
            },
        ],
    },
    {
        code: 'MY',
        id: 2291,
        name: 'Malaysia',
        states: [
            {
                code: 'MY01',
                name: 'Johor',
            },
            {
                code: 'MY02',
                name: 'Kedah',
            },
            {
                code: 'MY03',
                name: 'Kelantan',
            },
            {
                code: 'MY04',
                name: 'Melaka',
            },
            {
                code: 'MY05',
                name: 'Negeri Sembilan',
            },
            {
                code: 'MY06',
                name: 'Pahang',
            },
            {
                code: 'MY08',
                name: 'Perak',
            },
            {
                code: 'MY09',
                name: 'Perlis',
            },
            {
                code: 'MY07',
                name: 'Pulau Pinang',
            },
            {
                code: 'MY12',
                name: 'Sabah',
            },
            {
                code: 'MY13',
                name: 'Sarawak',
            },
            {
                code: 'MY10',
                name: 'Selangor',
            },
            {
                code: 'MY11',
                name: 'Terengganu',
            },
            {
                code: 'MY14',
                name: 'W.P. Kuala Lumpur',
            },
            {
                code: 'MY15',
                name: 'W.P. Labuan',
            },
            {
                code: 'MY16',
                name: 'W.P. Putrajaya',
            },
        ],
    },
    {
        code: 'MV',
        id: 2384,
        name: 'Maldives; Republic of',
        states: [],
    },
    {
        code: 'ML',
        id: 2292,
        name: 'Mali',
        states: [
            {
                code: 'ML01',
                name: 'Bamako',
            },
            {
                code: 'ML09',
                name: 'Gao',
            },
            {
                code: 'ML03',
                name: 'Kayes',
            },
            {
                code: 'ML10',
                name: 'Kidal',
            },
            {
                code: 'ML07',
                name: 'Koulikoro',
            },
            {
                code: 'ML.ME',
                name: 'Ménaka',
            },
            {
                code: 'ML04',
                name: 'Mopti',
            },
            {
                code: 'ML05',
                name: 'Ségou',
            },
            {
                code: 'ML06',
                name: 'Sikasso',
            },
            {
                code: 'ML.TD',
                name: 'Taoudénit',
            },
            {
                code: 'ML08',
                name: 'Timbuktu',
            },
        ],
    },
    {
        code: 'MT',
        id: 2293,
        name: 'Malta',
        states: [
            {
                code: 'MT.CE',
                name: 'Central',
            },
            {
                code: 'MT.GO',
                name: 'Gozo',
            },
            {
                code: 'MT.NO',
                name: 'Northern',
            },
            {
                code: 'MT.SE',
                name: 'South Eastern',
            },
            {
                code: 'MT.SO',
                name: 'Southern',
            },
        ],
    },
    {
        code: 'RM',
        id: 2394,
        name: 'Marshall Islands',
        states: [],
    },
    {
        code: 'MQ',
        id: 2423,
        name: 'Martinique',
        states: [],
    },
    {
        code: 'MR',
        id: 2294,
        name: 'Mauritania',
        states: [
            {
                code: 'MR07',
                name: 'Adrar',
            },
            {
                code: 'MR03',
                name: 'Assaba',
            },
            {
                code: 'MR05',
                name: 'Brakna',
            },
            {
                code: 'MR08',
                name: 'Dakhlet Nouadhibou',
            },
            {
                code: 'MR04',
                name: 'Gorgol',
            },
            {
                code: 'MR10',
                name: 'Guidimaka',
            },
            {
                code: 'MR01',
                name: 'Hodh ech Chargui',
            },
            {
                code: 'MR02',
                name: 'Hodh el Gharbi',
            },
            {
                code: 'MR12',
                name: 'Inchiri',
            },
            {
                code: 'MR.NN',
                name: 'Nouakchott Nord',
            },
            {
                code: 'MR13',
                name: 'Nouakchott Ouest',
            },
            {
                code: 'MR.NS',
                name: 'Nouakchott Sud',
            },
            {
                code: 'MR09',
                name: 'Tagant',
            },
            {
                code: 'MR11',
                name: 'Tiris Zemmour',
            },
            {
                code: 'MR06',
                name: 'Trarza',
            },
        ],
    },
    {
        code: 'MU',
        id: 2295,
        name: 'Mauritius',
        states: [
            {
                code: 'MP21',
                name: 'Agalega Islands',
            },
            {
                code: 'MP12',
                name: 'Black River',
            },
            {
                code: 'MP22',
                name: 'Cargados Carajos',
            },
            {
                code: 'MP13',
                name: 'Flacq',
            },
            {
                code: 'MP14',
                name: 'Grand Port',
            },
            {
                code: 'MP15',
                name: 'Moka',
            },
            {
                code: 'MP16',
                name: 'Pamplemousses',
            },
            {
                code: 'MP17',
                name: 'Plaines Wilhems',
            },
            {
                code: 'MP18',
                name: 'Port Louis',
            },
            {
                code: 'MP19',
                name: 'Rivière du Rempart',
            },
            {
                code: 'MP23',
                name: 'Rodrigues',
            },
            {
                code: 'MP20',
                name: 'Savanne',
            },
        ],
    },
    {
        code: 'M999',
        id: 2393,
        name: 'Mayotte',
        states: [],
    },
    {
        code: 'MX',
        id: 2296,
        name: 'Mexico',
        states: [
            {
                code: 'AGU',
                name: 'Aguascalientes',
            },
            {
                code: 'BCS',
                name: 'Baja California Sur',
            },
            {
                code: 'BCN',
                name: 'Baja California',
            },
            {
                code: 'CAM',
                name: 'Campeche',
            },
            {
                code: 'CHP',
                name: 'Chiapas',
            },
            {
                code: 'CHH',
                name: 'Chihuahua',
            },
            {
                code: 'COA',
                name: 'Coahuila',
            },
            {
                code: 'COL',
                name: 'Colima',
            },
            {
                code: 'DIF',
                name: 'Distrito Federal',
            },
            {
                code: 'DUR',
                name: 'Durango',
            },
            {
                code: 'GUA',
                name: 'Guanajuato',
            },
            {
                code: 'GRO',
                name: 'Guerrero',
            },
            {
                code: 'HID',
                name: 'Hidalgo',
            },
            {
                code: 'JAL',
                name: 'Jalisco',
            },
            {
                code: 'MEX',
                name: 'México',
            },
            {
                code: 'MIC',
                name: 'Michoacán',
            },
            {
                code: 'MOR',
                name: 'Morelos',
            },
            {
                code: 'NAY',
                name: 'Nayarit',
            },
            {
                code: 'NLE',
                name: 'Nuevo León',
            },
            {
                code: 'OAX',
                name: 'Oaxaca',
            },
            {
                code: 'PUE',
                name: 'Puebla',
            },
            {
                code: 'QUE',
                name: 'Querétaro',
            },
            {
                code: 'ROO',
                name: 'Quintana Roo',
            },
            {
                code: 'SLP',
                name: 'San Luis Potosí',
            },
            {
                code: 'SIN',
                name: 'Sinaloa',
            },
            {
                code: 'SON',
                name: 'Sonora',
            },
            {
                code: 'TAB',
                name: 'Tabasco',
            },
            {
                code: 'TAM',
                name: 'Tamaulipas',
            },
            {
                code: 'TLA',
                name: 'Tlaxcala',
            },
            {
                code: 'VER',
                name: 'Veracruz',
            },
            {
                code: 'YUC',
                name: 'Yucatán',
            },
            {
                code: 'ZAC',
                name: 'Zacatecas',
            },
        ],
    },
    {
        code: 'FM',
        id: 2297,
        name: 'Micronesia; Federated States of',
        states: [
            {
                code: 'FM03',
                name: 'Chuuk',
            },
            {
                code: 'FM01',
                name: 'Kosrae',
            },
            {
                code: 'FM02',
                name: 'Pohnpei',
            },
            {
                code: 'FM04',
                name: 'Yap',
            },
        ],
    },
    {
        code: 'MD',
        id: 2395,
        name: 'Moldova; Republic of',
        states: [],
    },
    {
        code: 'MC',
        id: 2299,
        name: 'Monaco',
        states: [],
    },
    {
        code: 'MN',
        id: 2300,
        name: 'Mongolia',
        states: [],
    },
    {
        code: 'MJ',
        id: 2396,
        name: 'Montenegro',
        states: [
            {
                code: 'ME-1',
                name: 'Andrijevica',
            },
            {
                code: 'ME-2',
                name: 'Bar',
            },
            {
                code: 'ME-3',
                name: 'Berane',
            },
            {
                code: 'ME-4',
                name: 'Bijelo Polje',
            },
            {
                code: 'ME-5',
                name: 'Budva',
            },
            {
                code: 'ME-6',
                name: 'Cetinje',
            },
            {
                code: 'ME-7',
                name: 'Danilovgrad',
            },
            {
                code: 'ME-8',
                name: 'Herceg Novi',
            },
            {
                code: 'ME-9',
                name: 'Kolašin',
            },
            {
                code: 'ME-10',
                name: 'Kotor',
            },
            {
                code: 'ME-11',
                name: 'Mojkovac',
            },
            {
                code: 'ME-12',
                name: 'Nikšic',
            },
            {
                code: 'ME-13',
                name: 'Plav',
            },
            {
                code: 'ME-14',
                name: 'Pljevlja',
            },
            {
                code: 'ME-15',
                name: 'Plužine',
            },
            {
                code: 'ME-16',
                name: 'Podgorica',
            },
            {
                code: 'ME-17',
                name: 'Rožaje',
            },
            {
                code: 'ME-18',
                name: 'Šavnik',
            },
            {
                code: 'ME-19',
                name: 'Tivat',
            },
            {
                code: 'ME-20',
                name: 'Ulcinj',
            },
            {
                code: 'ME-21',
                name: 'Žabljak',
            },
        ],
    },
    {
        code: 'MS',
        id: 2424,
        name: 'Montserrat',
        states: [],
    },
    {
        code: 'MA',
        id: 2301,
        name: 'Morocco',
        states: [
            {
                code: 'MA.BK',
                name: 'Béni Mellal-Khénifra',
            },
            {
                code: 'MA.CS',
                name: 'Casablanca-Settat',
            },
            {
                code: 'MA.OL',
                name: 'Dakhla-Oued Ed-Dahab',
            },
            {
                code: 'MA.DT',
                name: 'Drâa-Tafilalet',
            },
            {
                code: 'MA.FK',
                name: 'Fès-Meknès',
            },
            {
                code: 'MA.GN',
                name: 'Guelmim-Oued Noun',
            },
            {
                code: 'MA.OF',
                name: "L'oriental",
            },
            {
                code: 'MA.LS',
                name: 'Laâyoune-Sakia al Hamra',
            },
            {
                code: 'MA.MS',
                name: 'Marrakech-Safi',
            },
            {
                code: 'MA.RK',
                name: 'Rabat-Salé-Kénitra',
            },
            {
                code: 'MA.SS',
                name: 'Souss-Massa',
            },
            {
                code: 'MA.TC',
                name: 'Tanger-Tétouan-Al Hoceima',
            },
        ],
    },
    {
        code: 'MZ',
        id: 2302,
        name: 'Mozambique',
        states: [
            {
                code: 'MZ01',
                name: 'Cabo Delgado',
            },
            {
                code: 'MZ02',
                name: 'Gaza',
            },
            {
                code: 'MZ03',
                name: 'Inhambane',
            },
            {
                code: 'MZ10',
                name: 'Manica',
            },
            {
                code: 'MZ11',
                name: 'Maputo [city]',
            },
            {
                code: 'MZ04',
                name: 'Maputo',
            },
            {
                code: 'MZ06',
                name: 'Nampula',
            },
            {
                code: 'MZ07',
                name: 'Niassa',
            },
            {
                code: 'MZ05',
                name: 'Sofala',
            },
            {
                code: 'MZ08',
                name: 'Tete',
            },
            {
                code: 'MZ09',
                name: 'Zambézia',
            },
        ],
    },
    {
        code: 'MM',
        id: 2303,
        name: 'Myanmar',
        states: [
            {
                code: 'MM.AY',
                name: 'Ayeyarwady',
            },
            {
                code: 'MM.BA',
                name: 'Bago',
            },
            {
                code: 'MM.CH',
                name: 'Chin',
            },
            {
                code: 'MM.KC',
                name: 'Kachin',
            },
            {
                code: 'MM.KH',
                name: 'Kayah',
            },
            {
                code: 'MM.KN',
                name: 'Kayin',
            },
            {
                code: 'MM.MG',
                name: 'Magway',
            },
            {
                code: 'MM.ML',
                name: 'Mandalay',
            },
            {
                code: 'MM.MO',
                name: 'Mon',
            },
            {
                code: 'MM.NY',
                name: 'Naypyidaw',
            },
            {
                code: 'MM.RA',
                name: 'Rakhine',
            },
            {
                code: 'MM.SA',
                name: 'Sagaing',
            },
            {
                code: 'MM.SH',
                name: 'Shan',
            },
            {
                code: 'MM.TN',
                name: 'Tanintharyi',
            },
            {
                code: 'MM.YA',
                name: 'Yangon',
            },
        ],
    },
    {
        code: 'NA',
        id: 2304,
        name: 'Namibia',
        states: [
            {
                code: 'WA29',
                name: 'Erongo',
            },
            {
                code: 'WA30',
                name: 'Hardap',
            },
            {
                code: 'WA31',
                name: 'Karas',
            },
            {
                code: 'WA40',
                name: 'Kavango East',
            },
            {
                code: 'WA41',
                name: 'Kavango West',
            },
            {
                code: 'WA21',
                name: 'Khomas',
            },
            {
                code: 'WA32',
                name: 'Kunene',
            },
            {
                code: 'WA33',
                name: 'Ohangwena',
            },
            {
                code: 'WA35',
                name: 'Omaheke',
            },
            {
                code: 'WA36',
                name: 'Omusati',
            },
            {
                code: 'WA37',
                name: 'Oshana',
            },
            {
                code: 'WA38',
                name: 'Oshikoto',
            },
            {
                code: 'WA39',
                name: 'Otjozondjupa',
            },
            {
                code: 'WA28',
                name: 'Zambezi',
            },
        ],
    },
    {
        code: 'NR',
        id: 2397,
        name: 'Nauru',
        states: [],
    },
    {
        code: 'NP',
        id: 2305,
        name: 'Nepal',
        states: [
            {
                code: 'NP.FI',
                name: 'Five',
            },
            {
                code: 'NP.FO',
                name: 'Four',
            },
            {
                code: 'NP.ON',
                name: 'One',
            },
            {
                code: 'NP.SE',
                name: 'Seven',
            },
            {
                code: 'NP.SI',
                name: 'Six',
            },
            {
                code: 'NP.TH',
                name: 'Three',
            },
            {
                code: 'NP.TW',
                name: 'Two',
            },
        ],
    },
    {
        code: 'NL',
        id: 2306,
        name: 'Netherlands',
        states: [
            {
                code: 'DR',
                name: 'Drenthe',
            },
            {
                code: 'FL',
                name: 'Flevoland',
            },
            {
                code: 'FR',
                name: 'Friesland',
            },
            {
                code: 'GE',
                name: 'Gelderland',
            },
            {
                code: 'GR',
                name: 'Groningen',
            },
            {
                code: 'LI',
                name: 'Limburg',
            },
            {
                code: 'NB',
                name: 'Noord-Brabant',
            },
            {
                code: 'NH',
                name: 'Noord-Holland',
            },
            {
                code: 'OV',
                name: 'Overijssel',
            },
            {
                code: 'UT',
                name: 'Utrecht',
            },
            {
                code: 'ZE',
                name: 'Zeeland',
            },
            {
                code: 'ZH',
                name: 'Zuid-Holland',
            },
        ],
    },
    {
        code: 'AN',
        id: 2425,
        name: 'Netherlands Antilles',
        states: [],
    },
    {
        code: 'NC',
        id: 2426,
        name: 'New Caledonia',
        states: [],
    },
    {
        code: 'NZ',
        id: 2307,
        name: 'New Zealand',
        states: [
            {
                code: 'AUK',
                name: 'Auckland',
            },
            {
                code: 'BOP',
                name: 'Bay of Plenty',
            },
            {
                code: 'CAN',
                name: 'Canterbury',
            },
            {
                code: 'CIT',
                name: 'Chatham Islands Territory',
            },
            {
                code: 'GIS',
                name: 'Gisborne',
            },
            {
                code: 'HKB',
                name: "Hawke's Bay",
            },
            {
                code: 'MWT',
                name: 'Manawatu-Wanganui',
            },
            {
                code: 'MBH',
                name: 'Marlborough',
            },
            {
                code: 'NSN',
                name: 'Nelson',
            },
            {
                code: 'N',
                name: 'North Island',
            },
            {
                code: 'NTL',
                name: 'Northland',
            },
            {
                code: 'OTA',
                name: 'Otago',
            },
            {
                code: 'S',
                name: 'South Island',
            },
            {
                code: 'STL',
                name: 'Southland',
            },
            {
                code: 'TKI',
                name: 'Taranaki',
            },
            {
                code: 'TAS',
                name: 'Tasman District',
            },
            {
                code: 'WKO',
                name: 'Waikato',
            },
            {
                code: 'WGN',
                name: 'Wellington',
            },
            {
                code: 'WTC',
                name: 'West Coast',
            },
        ],
    },
    {
        code: 'NI',
        id: 2308,
        name: 'Nicaragua',
        states: [
            {
                code: 'NU01',
                name: 'Boaco',
            },
            {
                code: 'NU02',
                name: 'Carazo',
            },
            {
                code: 'NU03',
                name: 'Chinandega',
            },
            {
                code: 'NU04',
                name: 'Chontales',
            },
            {
                code: 'NU05',
                name: 'Estelí',
            },
            {
                code: 'NU06',
                name: 'Granada',
            },
            {
                code: 'NU07',
                name: 'Jinotega',
            },
            {
                code: 'NU08',
                name: 'León',
            },
            {
                code: 'NU09',
                name: 'Madriz',
            },
            {
                code: 'NU10',
                name: 'Managua',
            },
            {
                code: 'NU11',
                name: 'Masaya',
            },
            {
                code: 'NU12',
                name: 'Matagalpa',
            },
            {
                code: 'NU13',
                name: 'Nueva Segovia',
            },
            {
                code: 'NU17',
                name: 'Región Autónoma del Caribe Norte',
            },
            {
                code: 'NU18',
                name: 'Región Autónoma del Caribe Sur',
            },
            {
                code: 'NU14',
                name: 'Río San Juan',
            },
            {
                code: 'NU15',
                name: 'Rivas',
            },
        ],
    },
    {
        code: 'NE',
        id: 2309,
        name: 'Niger',
        states: [
            {
                code: 'NG01',
                name: 'Agadez',
            },
            {
                code: 'NG02',
                name: 'Diffa',
            },
            {
                code: 'NG03',
                name: 'Dosso',
            },
            {
                code: 'NG04',
                name: 'Maradi',
            },
            {
                code: 'NG08',
                name: 'Niamey',
            },
            {
                code: 'NG06',
                name: 'Tahoua',
            },
            {
                code: 'NG09',
                name: 'Tillabéri',
            },
            {
                code: 'NG07',
                name: 'Zinder',
            },
        ],
    },
    {
        code: 'NG',
        id: 2310,
        name: 'Nigeria',
        states: [
            {
                code: 'NI45',
                name: 'Abia',
            },
            {
                code: 'NI35',
                name: 'Adamawa',
            },
            {
                code: 'NI21',
                name: 'Akwa Ibom',
            },
            {
                code: 'NI25',
                name: 'Anambra',
            },
            {
                code: 'NI46',
                name: 'Bauchi',
            },
            {
                code: 'NI52',
                name: 'Bayelsa',
            },
            {
                code: 'NI26',
                name: 'Benue',
            },
            {
                code: 'NI27',
                name: 'Borno',
            },
            {
                code: 'NI22',
                name: 'Cross River',
            },
            {
                code: 'NI36',
                name: 'Delta',
            },
            {
                code: 'NI53',
                name: 'Ebonyi',
            },
            {
                code: 'NI37',
                name: 'Edo',
            },
            {
                code: 'NI54',
                name: 'Ekiti',
            },
            {
                code: 'NI47',
                name: 'Enugu',
            },
            {
                code: 'NI11',
                name: 'Federal Capital Territory',
            },
            {
                code: 'NI55',
                name: 'Gombe',
            },
            {
                code: 'NI28',
                name: 'Imo',
            },
            {
                code: 'NI39',
                name: 'Jigawa',
            },
            {
                code: 'NI23',
                name: 'Kaduna',
            },
            {
                code: 'NI29',
                name: 'Kano',
            },
            {
                code: 'NI24',
                name: 'Katsina',
            },
            {
                code: 'NI40',
                name: 'Kebbi',
            },
            {
                code: 'NI41',
                name: 'Kogi',
            },
            {
                code: 'NI30',
                name: 'Kwara',
            },
            {
                code: 'NI05',
                name: 'Lagos',
            },
            {
                code: 'NI56',
                name: 'Nassarawa',
            },
            {
                code: 'NI31',
                name: 'Niger',
            },
            {
                code: 'NI16',
                name: 'Ogun',
            },
            {
                code: 'NI48',
                name: 'Ondo',
            },
            {
                code: 'NI42',
                name: 'Osun',
            },
            {
                code: 'NI32',
                name: 'Oyo',
            },
            {
                code: 'NI49',
                name: 'Plateau',
            },
            {
                code: 'NI50',
                name: 'Rivers',
            },
            {
                code: 'NI51',
                name: 'Sokoto',
            },
            {
                code: 'NI43',
                name: 'Taraba',
            },
            {
                code: 'NI44',
                name: 'Yobe',
            },
            {
                code: 'NI57',
                name: 'Zamfara',
            },
        ],
    },
    {
        code: 'NU',
        id: 2427,
        name: 'Niue',
        states: [],
    },
    {
        code: 'NF',
        id: 2428,
        name: 'Norfolk Island',
        states: [],
    },
    {
        code: 'MP',
        id: 2429,
        name: 'Northern Mariana Islands',
        states: [],
    },
    {
        code: 'NO',
        id: 2311,
        name: 'Norway',
        states: [
            {
                code: 'NO02',
                name: 'Akershus',
            },
            {
                code: 'NO09',
                name: 'Aust-Agder',
            },
            {
                code: 'NO06',
                name: 'Buskerud',
            },
            {
                code: 'NO20',
                name: 'Finnmark',
            },
            {
                code: 'NO04',
                name: 'Hedmark',
            },
            {
                code: 'NO12',
                name: 'Hordaland',
            },
            {
                code: 'NO22',
                name: 'Jan Mayen (Arctic Region)',
            },
            {
                code: 'NO15',
                name: 'Møre og Romsdal',
            },
            {
                code: 'NO17',
                name: 'Nord-Trøndelag',
            },
            {
                code: 'NO18',
                name: 'Nordland',
            },
            {
                code: 'NO05',
                name: 'Oppland',
            },
            {
                code: 'NO03',
                name: 'Oslo',
            },
            {
                code: 'NO01',
                name: 'Østfold',
            },
            {
                code: 'NO11',
                name: 'Rogaland',
            },
            {
                code: 'NO14',
                name: 'Sogn og Fjordane',
            },
            {
                code: 'NO16',
                name: 'Sør-Trøndelag',
            },
            {
                code: 'NO21',
                name: 'Svalbard (Arctic Region)',
            },
            {
                code: 'NO08',
                name: 'Telemark',
            },
            {
                code: 'NO19',
                name: 'Troms',
            },
            {
                code: 'NO10',
                name: 'Vest-Agder',
            },
            {
                code: 'NO07',
                name: 'Vestfold',
            },
        ],
    },
    {
        code: 'OM',
        id: 2312,
        name: 'Oman',
        states: [
            {
                code: 'MU01',
                name: 'Ad Dakhliyah',
            },
            {
                code: 'MU09',
                name: 'Adh Dhahirah',
            },
            {
                code: 'MU11',
                name: 'Al Batinah North',
            },
            {
                code: 'MU02',
                name: 'Al Batinah South',
            },
            {
                code: 'MU10',
                name: 'Al Buraymi',
            },
            {
                code: 'MU03',
                name: 'Al Wusta',
            },
            {
                code: 'MU12',
                name: 'Ash Sharqiyah North',
            },
            {
                code: 'MU04',
                name: 'Ash Sharqiyah South',
            },
            {
                code: 'MU08',
                name: 'Dhofar',
            },
            {
                code: 'MU07',
                name: 'Musandam',
            },
            {
                code: 'MU06',
                name: 'Muscat',
            },
        ],
    },
    {
        code: 'PK',
        id: 2313,
        name: 'Pakistan',
        states: [
            {
                code: 'PK06',
                name: 'Azad Kashmir',
            },
            {
                code: 'PK02',
                name: 'Balochistan',
            },
            {
                code: 'PK01',
                name: 'Federally Administered Tribal Areas',
            },
            {
                code: 'PK07',
                name: 'Gilgit-Baltistan',
            },
            {
                code: 'PK08',
                name: 'Islamabad',
            },
            {
                code: 'PK03',
                name: 'Khyber-Pakhtunkhwa',
            },
            {
                code: 'PK04',
                name: 'Punjab',
            },
            {
                code: 'PK05',
                name: 'Sindh',
            },
        ],
    },
    {
        code: 'PW',
        id: 2314,
        name: 'Palau',
        states: [],
    },
    {
        code: 'PS',
        id: 2430,
        name: 'Palestinian Territory; Occupied',
        states: [],
    },
    {
        code: 'PA',
        id: 2315,
        name: 'Panama',
        states: [
            {
                code: 'PM01',
                name: 'Bocas del Toro',
            },
            {
                code: 'PM02\t',
                name: 'Chiriquí',
            },
            {
                code: 'PM03',
                name: 'Coclé',
            },
            {
                code: 'PM04',
                name: 'Coclé',
            },
            {
                code: 'PM05',
                name: 'Darién',
            },
            {
                code: 'PM11',
                name: 'Emberá',
            },
            {
                code: 'PM06',
                name: 'Herrera',
            },
            {
                code: 'PM09',
                name: 'Kuna Yala',
            },
            {
                code: 'PM07',
                name: 'Los Santos',
            },
            {
                code: 'PM12',
                name: 'Ngäbe Buglé',
            },
            {
                code: 'PM13',
                name: 'Panamá Oeste',
            },
            {
                code: 'PM08',
                name: 'Panamá',
            },
            {
                code: 'PM10',
                name: 'Veraguas',
            },
        ],
    },
    {
        code: 'PG',
        id: 2316,
        name: 'Papua New Guinea',
        states: [
            {
                code: 'PP07',
                name: 'Bougainville',
            },
            {
                code: 'PP01',
                name: 'Central',
            },
            {
                code: 'PP08',
                name: 'Chimbu',
            },
            {
                code: 'PP10',
                name: 'East New Britain',
            },
            {
                code: 'PP11',
                name: 'East Sepik',
            },
            {
                code: 'PP09',
                name: 'Eastern Highlands',
            },
            {
                code: 'PP19',
                name: 'Enga',
            },
            {
                code: 'PP02',
                name: 'Gulf',
            },
            {
                code: 'PP21',
                name: 'Hela',
            },
            {
                code: 'PP22',
                name: 'Jiwaka',
            },
            {
                code: 'PP12',
                name: 'Madang',
            },
            {
                code: 'PP13',
                name: 'Manus',
            },
            {
                code: 'PP03',
                name: 'Milne Bay',
            },
            {
                code: 'PP14',
                name: 'Morobe',
            },
            {
                code: 'PP20',
                name: 'National Capital District',
            },
            {
                code: 'PP15',
                name: 'New Ireland',
            },
            {
                code: 'PP04',
                name: 'Northern',
            },
            {
                code: 'PP18',
                name: 'Sandaun',
            },
            {
                code: 'PP05',
                name: 'Southern Highlands',
            },
            {
                code: 'PP17',
                name: 'West New Britain',
            },
            {
                code: 'PP06',
                name: 'Western',
            },
            {
                code: 'PP16',
                name: 'Western Highlands',
            },
        ],
    },
    {
        code: 'PY',
        id: 2317,
        name: 'Paraguay',
        states: [
            {
                code: 'PA23',
                name: 'Alto Paraguay',
            },
            {
                code: 'PA01',
                name: 'Alto Paraná',
            },
            {
                code: 'PA02',
                name: 'Amambay',
            },
            {
                code: 'PA22',
                name: 'Asunción',
            },
            {
                code: 'PA24',
                name: 'Boquerón',
            },
            {
                code: 'PA04',
                name: 'Caaguazú',
            },
            {
                code: 'PA05',
                name: 'Caazapá',
            },
            {
                code: 'PA19',
                name: 'Canindeyú',
            },
            {
                code: 'PA06',
                name: 'Central',
            },
            {
                code: 'PA07',
                name: 'Concepción',
            },
            {
                code: 'PA08',
                name: 'Cordillera',
            },
            {
                code: 'PA10',
                name: 'Guairá',
            },
            {
                code: 'PA11',
                name: 'Itapúa',
            },
            {
                code: 'PA12',
                name: 'Misiones',
            },
            {
                code: 'PA15',
                name: 'Paraguarí',
            },
            {
                code: 'PA16',
                name: 'Presidente Hayes',
            },
            {
                code: 'PA17',
                name: 'San Pedro',
            },
            {
                code: 'PA13',
                name: 'Ñeembucú',
            },
        ],
    },
    {
        code: 'PE',
        id: 2318,
        name: 'Peru',
        states: [
            {
                code: 'PE01',
                name: 'Amazonas',
            },
            {
                code: 'PE02',
                name: 'Ancash',
            },
            {
                code: 'PE03',
                name: 'Apurímac',
            },
            {
                code: 'PE04',
                name: 'Arequipa',
            },
            {
                code: 'PE05',
                name: 'Ayacucho',
            },
            {
                code: 'PE06',
                name: 'Cajamarca',
            },
            {
                code: 'PE07',
                name: 'Callao',
            },
            {
                code: 'PE08',
                name: 'Cusco',
            },
            {
                code: 'PE09',
                name: 'Huancavelica',
            },
            {
                code: 'PE10',
                name: 'Huánuco',
            },
            {
                code: 'PE11',
                name: 'Ica',
            },
            {
                code: 'PE12',
                name: 'Junín',
            },
            {
                code: 'PE13',
                name: 'La Libertad',
            },
            {
                code: 'PE14',
                name: 'Lambayeque',
            },
            {
                code: 'PE15',
                name: 'Lima',
            },
            {
                code: 'PE26',
                name: 'Lima [Province]',
            },
            {
                code: 'PE16',
                name: 'Loreto',
            },
            {
                code: 'PE17',
                name: 'Madre de Dios',
            },
            {
                code: 'PE18',
                name: 'Moquegua',
            },
            {
                code: 'PE19',
                name: 'Pasco',
            },
            {
                code: 'PE20',
                name: 'Piura',
            },
            {
                code: 'PE21',
                name: 'Puno',
            },
            {
                code: 'PE22',
                name: 'San Martín',
            },
            {
                code: 'PE23',
                name: 'Tacna',
            },
            {
                code: 'PE24',
                name: 'Tumbes',
            },
            {
                code: 'PE25',
                name: 'Ucayali',
            },
        ],
    },
    {
        code: 'PH',
        id: 2319,
        name: 'Philippines',
        states: [
            {
                code: 'RP01',
                name: 'Abra',
            },
            {
                code: 'RP02',
                name: 'Agusan del Norte',
            },
            {
                code: 'RP03',
                name: 'Agusan del Sur',
            },
            {
                code: 'RP04',
                name: 'Aklan',
            },
            {
                code: 'RP05',
                name: 'Albay',
            },
            {
                code: 'RP06',
                name: 'Antique',
            },
            {
                code: 'RPH6',
                name: 'Apayao',
            },
            {
                code: 'RPG8',
                name: 'Aurora',
            },
            {
                code: 'RP22',
                name: 'Basilan',
            },
            {
                code: 'RP07',
                name: 'Bataan',
            },
            {
                code: 'RP08',
                name: 'Batanes',
            },
            {
                code: 'RP09',
                name: 'Batangas',
            },
            {
                code: 'RP10',
                name: 'Benguet',
            },
            {
                code: 'RPH9',
                name: 'Biliran',
            },
            {
                code: 'RP11',
                name: 'Bohol',
            },
            {
                code: 'RP12',
                name: 'Bukidnon',
            },
            {
                code: 'RP13',
                name: 'Bulacan',
            },
            {
                code: 'RP14',
                name: 'Cagayan',
            },
            {
                code: 'RP15',
                name: 'Camarines Norte',
            },
            {
                code: 'RP16',
                name: 'Camarines Sur',
            },
            {
                code: 'RP17',
                name: 'Camiguin',
            },
            {
                code: 'RP18',
                name: 'Capiz',
            },
            {
                code: 'RP19',
                name: 'Catanduanes',
            },
            {
                code: 'RP20',
                name: 'Cavite',
            },
            {
                code: 'RP21',
                name: 'Cebu',
            },
            {
                code: 'RPI6',
                name: 'Compostela Valley',
            },
            {
                code: 'RP57',
                name: 'Cotabato',
            },
            {
                code: 'RP26',
                name: 'Davao Oriental',
            },
            {
                code: 'RPI7',
                name: 'Davao del Norte',
            },
            {
                code: 'RP25',
                name: 'Davao del Sur',
            },
            {
                code: 'RPI9',
                name: 'Dinagat Islands',
            },
            {
                code: 'RP23',
                name: 'Eastern Samar',
            },
            {
                code: 'RPJ3',
                name: 'Guimaras',
            },
            {
                code: 'RP27',
                name: 'Ifugao',
            },
            {
                code: 'RP28',
                name: 'Ilocos Norte',
            },
            {
                code: 'RP29',
                name: 'Ilocos Sur',
            },
            {
                code: 'RP30',
                name: 'Iloilo',
            },
            {
                code: 'RP31',
                name: 'Isabela',
            },
            {
                code: 'RPJ7',
                name: 'Kalinga',
            },
            {
                code: 'RP36',
                name: 'La Union',
            },
            {
                code: 'RP33',
                name: 'Laguna',
            },
            {
                code: 'RP34',
                name: 'Lanao del Norte',
            },
            {
                code: 'RP35',
                name: 'Lanao del Sur',
            },
            {
                code: 'RP37',
                name: 'Leyte',
            },
            {
                code: 'RP56',
                name: 'Maguindanao',
            },
            {
                code: 'RP38',
                name: 'Marinduque',
            },
            {
                code: 'RP39',
                name: 'Masbate',
            },
            {
                code: 'RPD9',
                name: 'Metropolitan Manila',
            },
            {
                code: 'RP42',
                name: 'Misamis Occidental',
            },
            {
                code: 'RP43',
                name: 'Misamis Oriental',
            },
            {
                code: 'RP44',
                name: 'Mountain',
            },
            {
                code: 'RPH3',
                name: 'Negros Occidental',
            },
            {
                code: 'RP46',
                name: 'Negros Oriental',
            },
            {
                code: 'RP67',
                name: 'Northern Samar',
            },
            {
                code: 'RP47',
                name: 'Nueva Ecija',
            },
            {
                code: 'RP48',
                name: 'Nueva Vizcaya',
            },
            {
                code: 'RP40',
                name: 'Occidental Mindoro',
            },
            {
                code: 'RP41',
                name: 'Oriental Mindoro',
            },
            {
                code: 'RP49',
                name: 'Palawan',
            },
            {
                code: 'RP50',
                name: 'Pampanga',
            },
            {
                code: 'RP51',
                name: 'Pangasinan',
            },
            {
                code: 'RPH2',
                name: 'Quezon',
            },
            {
                code: 'RP68',
                name: 'Quirino',
            },
            {
                code: 'RP53',
                name: 'Rizal',
            },
            {
                code: 'RP54',
                name: 'Romblon',
            },
            {
                code: 'RP55',
                name: 'Samar',
            },
            {
                code: 'PH72',
                name: 'Sarangani',
            },
            {
                code: 'RP69',
                name: 'Siquijor',
            },
            {
                code: 'RP58',
                name: 'Sorsogon',
            },
            {
                code: 'RP70',
                name: 'South Cotabato',
            },
            {
                code: 'RP59',
                name: 'Southern Leyte',
            },
            {
                code: 'RP71',
                name: 'Sultan Kudarat',
            },
            {
                code: 'RP60',
                name: 'Sulu',
            },
            {
                code: 'RP61',
                name: 'Surigao del Norte',
            },
            {
                code: 'RP62',
                name: 'Surigao del Sur',
            },
            {
                code: 'RPO3',
                name: 'Tarlac',
            },
            {
                code: 'RPO4',
                name: 'Tawi-Tawi',
            },
            {
                code: 'RPP1',
                name: 'Zambales',
            },
            {
                code: 'RPG7',
                name: 'Zamboanga del Norte',
            },
            {
                code: 'RP65',
                name: 'Zamboanga del Sur',
            },
            {
                code: 'RP66',
                name: 'Zamboanga-Sibugay',
            },
        ],
    },
    {
        code: 'PN',
        id: 2431,
        name: 'Pitcairn',
        states: [],
    },
    {
        code: 'PL',
        id: 2320,
        name: 'Poland',
        states: [
            {
                code: 'PL-DS',
                name: 'Dolnoslaskie',
            },
            {
                code: 'PL-KP',
                name: 'Kujawsko-pomorskie',
            },
            {
                code: 'PL-LD',
                name: 'Lódzkie',
            },
            {
                code: 'PL-LU',
                name: 'Lubelskie',
            },
            {
                code: 'PL-LB',
                name: 'Lubuskie',
            },
            {
                code: 'PL-MA',
                name: 'Malopolskie',
            },
            {
                code: 'PL-MZ',
                name: 'Mazowieckie',
            },
            {
                code: 'PL-OP',
                name: 'Opolskie',
            },
            {
                code: 'PL-PK',
                name: 'Podkarpackie',
            },
            {
                code: 'PL-PD',
                name: 'Podlaskie',
            },
            {
                code: 'PL-PM',
                name: 'Pomorskie',
            },
            {
                code: 'PL-SL',
                name: 'Slaskie',
            },
            {
                code: 'PL-SK',
                name: 'Swietokrzyskie',
            },
            {
                code: 'PL-WN',
                name: 'Warminsko-mazurskie',
            },
            {
                code: 'PL-WP',
                name: 'Wielkopolskie',
            },
        ],
    },
    {
        code: 'PT',
        id: 2321,
        name: 'Portugal',
        states: [
            {
                code: 'PO23',
                name: 'Acores Autonomous',
            },
            {
                code: 'PO02',
                name: 'Aveiro',
            },
            {
                code: 'PO03',
                name: 'Beja',
            },
            {
                code: 'PO04',
                name: 'Braga',
            },
            {
                code: 'PO05',
                name: 'Braganca',
            },
            {
                code: 'PO06',
                name: 'Castelo Branco',
            },
            {
                code: 'PO07',
                name: 'Coimbra',
            },
            {
                code: 'PO08',
                name: 'Evora',
            },
            {
                code: 'PO09',
                name: 'Faro',
            },
            {
                code: 'PO11',
                name: 'Guarda',
            },
            {
                code: 'PO13',
                name: 'Leiria',
            },
            {
                code: 'PO14',
                name: 'Lisboa',
            },
            {
                code: 'PO10',
                name: 'Madeira Autonomous',
            },
            {
                code: 'PO16',
                name: 'Portalegre',
            },
            {
                code: 'PO17',
                name: 'Porto',
            },
            {
                code: 'PO18',
                name: 'Santarem',
            },
            {
                code: 'PO19',
                name: 'Setubal',
            },
            {
                code: 'PO20',
                name: 'Viana do Castelo',
            },
            {
                code: 'PO21',
                name: 'Vila Real',
            },
            {
                code: 'PO22',
                name: 'Viseu',
            },
        ],
    },
    {
        code: 'PR',
        id: 2374,
        name: 'Puerto Rico',
        states: [
            {
                code: 'PR.AJ',
                name: 'Adjuntas',
            },
            {
                code: 'PR.AD',
                name: 'Aguada',
            },
            {
                code: 'PR.AL',
                name: 'Aguadilla',
            },
            {
                code: 'PR.AB',
                name: 'Aguas Buenas',
            },
            {
                code: 'PR.AI',
                name: 'Aibonito',
            },
            {
                code: 'PR.AN',
                name: 'Añasco',
            },
            {
                code: 'PR.AC',
                name: 'Arecibo',
            },
            {
                code: 'PR.AR',
                name: 'Arroyo',
            },
            {
                code: 'PR.BC',
                name: 'Barceloneta',
            },
            {
                code: 'PR.BQ',
                name: 'Barranquitas',
            },
            {
                code: 'PR.BY',
                name: 'Bayamón',
            },
            {
                code: 'PR.CR',
                name: 'Cabo Rojo',
            },
            {
                code: 'PR.CG',
                name: 'Caguas',
            },
            {
                code: 'PR.CA',
                name: 'Camuy',
            },
            {
                code: 'PR.CV',
                name: 'Canóvanas',
            },
            {
                code: 'PR.CN',
                name: 'Carolina',
            },
            {
                code: 'PR.CT',
                name: 'Cataño',
            },
            {
                code: 'PR.CY',
                name: 'Cayey',
            },
            {
                code: 'PR.CB',
                name: 'Ceiba',
            },
            {
                code: 'PR.CL',
                name: 'Ciales',
            },
            {
                code: 'PR.CD',
                name: 'Cidra',
            },
            {
                code: 'PR.CO',
                name: 'Coamo',
            },
            {
                code: 'PR.CM',
                name: 'Comerío',
            },
            {
                code: 'PR.CZ',
                name: 'Corozal',
            },
            {
                code: 'PR.CU',
                name: 'Culebra',
            },
            {
                code: 'PR.DO',
                name: 'Dorado',
            },
            {
                code: 'PR.FJ',
                name: 'Fajardo',
            },
            {
                code: 'PR.FL',
                name: 'Florida',
            },
            {
                code: 'PR.GC',
                name: 'Guánica',
            },
            {
                code: 'PR.GM',
                name: 'Guayama',
            },
            {
                code: 'PR.GL',
                name: 'Guayanilla',
            },
            {
                code: 'PR.GB',
                name: 'Guaynabo',
            },
            {
                code: 'PR.GR',
                name: 'Gurabo',
            },
            {
                code: 'PR.HA',
                name: 'Hatillo',
            },
            {
                code: 'PR.HO',
                name: 'Hormigueros',
            },
            {
                code: 'PR.HU',
                name: 'Humacao',
            },
            {
                code: 'PR.IS',
                name: 'Isabela',
            },
            {
                code: 'PR.JY',
                name: 'Jayuya',
            },
            {
                code: 'PR.JD',
                name: 'Juana Díaz',
            },
            {
                code: 'PR.JC',
                name: 'Juncos',
            },
            {
                code: 'PR.LJ',
                name: 'Lajas',
            },
            {
                code: 'PR.LR',
                name: 'Lares',
            },
            {
                code: 'PR.LM',
                name: 'Las Marías',
            },
            {
                code: 'PR.LP',
                name: 'Las Piedras',
            },
            {
                code: 'PR.LZ',
                name: 'Loíza',
            },
            {
                code: 'PR.LQ',
                name: 'Luquillo',
            },
            {
                code: 'PR.MT',
                name: 'Manatí',
            },
            {
                code: 'PR.MR',
                name: 'Maricao',
            },
            {
                code: 'PR.MB',
                name: 'Maunabo',
            },
            {
                code: 'PR.MG',
                name: 'Mayagüez',
            },
            {
                code: 'PR.MC',
                name: 'Moca',
            },
            {
                code: 'PR.MV',
                name: 'Morovis',
            },
            {
                code: 'PR.NG',
                name: 'Naguabo',
            },
            {
                code: 'PR.NR',
                name: 'Naranjito',
            },
            {
                code: 'PR.OR',
                name: 'Orocovis',
            },
            {
                code: 'PR.PT',
                name: 'Patillas',
            },
            {
                code: 'PR.PN\t',
                name: 'Peñuelas',
            },
            {
                code: 'PR.PO',
                name: 'Ponce',
            },
            {
                code: 'PR.QB',
                name: 'Quebradillas',
            },
            {
                code: 'PR.RC',
                name: 'Rincón',
            },
            {
                code: 'PR.RG',
                name: 'Río Grande',
            },
            {
                code: 'PR.SB',
                name: 'Sabana Grande',
            },
            {
                code: 'PR.SA',
                name: 'Salinas',
            },
            {
                code: 'PR.SG',
                name: 'San Germán',
            },
            {
                code: 'PR.SJ',
                name: 'San Juan',
            },
            {
                code: 'PR.SL',
                name: 'San Lorenzo',
            },
            {
                code: 'PR.SS',
                name: 'San Sebastián',
            },
            {
                code: 'PR.SI',
                name: 'Santa Isabel',
            },
            {
                code: 'PR.TA',
                name: 'Toa Alta',
            },
            {
                code: 'PR.TB',
                name: 'Toa Baja',
            },
            {
                code: 'PR.TJ',
                name: 'Trujillo Alto',
            },
            {
                code: 'PR.UT',
                name: 'Utuado',
            },
            {
                code: 'PR.VA',
                name: 'Vega Alta',
            },
            {
                code: 'PR.VB',
                name: 'Vega Baja',
            },
            {
                code: 'PR.VQ',
                name: 'Vieques',
            },
            {
                code: 'PR.VL',
                name: 'Villalba',
            },
            {
                code: 'PR.YB',
                name: 'Yabucoa',
            },
            {
                code: 'PR.YU',
                name: 'Yauco',
            },
        ],
    },
    {
        code: 'QA',
        id: 2322,
        name: 'Qatar',
        states: [
            {
                code: 'QA01',
                name: 'Ad Dawhah',
            },
            {
                code: 'QA13',
                name: 'Al Daayen',
            },
            {
                code: 'QA04',
                name: 'Al Khawr',
            },
            {
                code: 'QA10',
                name: 'Al Wakrah',
            },
            {
                code: 'QA14',
                name: 'Al-Shahaniya',
            },
            {
                code: 'QA06',
                name: 'Ar Rayyan',
            },
            {
                code: 'QA08',
                name: 'Madinat ach Shamal',
            },
            {
                code: 'QA09',
                name: 'Umm Salal',
            },
        ],
    },
    {
        code: 'R999',
        id: 2398,
        name: 'Reunion',
        states: [],
    },
    {
        code: 'RO',
        id: 2323,
        name: 'Romania',
        states: [
            {
                code: 'RO-AB',
                name: 'Alba',
            },
            {
                code: 'RO-AR',
                name: 'Arad',
            },
            {
                code: 'RO-AG',
                name: 'Arges',
            },
            {
                code: 'RO-BC',
                name: 'Bacau',
            },
            {
                code: 'RO-BH',
                name: 'Bihor',
            },
            {
                code: 'RO-BN',
                name: 'Bistrita-Nasaud',
            },
            {
                code: 'RO-BT',
                name: 'Botosani',
            },
            {
                code: 'RO-BR',
                name: 'Braila',
            },
            {
                code: 'RO-BV',
                name: 'Brasov',
            },
            {
                code: 'RO-B',
                name: 'Bucuresti',
            },
            {
                code: 'RO-BZ',
                name: 'Buzau',
            },
            {
                code: 'RO-CL',
                name: 'Calarasi',
            },
            {
                code: 'RO-CS',
                name: 'Caras-Severin',
            },
            {
                code: 'RO-CJ',
                name: 'Cluj',
            },
            {
                code: 'RO-CT',
                name: 'Constanta',
            },
            {
                code: 'RO-CV',
                name: 'Covasna',
            },
            {
                code: 'RO-DB',
                name: 'Dâmbovita',
            },
            {
                code: 'RO-DJ',
                name: 'Dolj',
            },
            {
                code: 'RO-GL',
                name: 'Galati',
            },
            {
                code: 'RO-GR',
                name: 'Giurgiu',
            },
            {
                code: 'RO-GJ',
                name: 'Gorj',
            },
            {
                code: 'RO-HR',
                name: 'Harghita',
            },
            {
                code: 'RO-HD',
                name: 'Hunedoara',
            },
            {
                code: 'RO-IL',
                name: 'Ialomita',
            },
            {
                code: 'RO-IS',
                name: 'Iasi',
            },
            {
                code: 'RO-IF',
                name: 'Ilfov',
            },
            {
                code: 'RO-MM',
                name: 'Maramures',
            },
            {
                code: 'RO-MH',
                name: 'Mehedinti',
            },
            {
                code: 'RO-MS',
                name: 'Mures',
            },
            {
                code: 'RO-NT',
                name: 'Neamt',
            },
            {
                code: 'RO-OT',
                name: 'Olt',
            },
            {
                code: 'RO-PH',
                name: 'Prahova',
            },
            {
                code: 'RO-SJ',
                name: 'Salaj',
            },
            {
                code: 'RO-SM',
                name: 'Satu Mare',
            },
            {
                code: 'RO-SB',
                name: 'Sibiu',
            },
            {
                code: 'RO-SV',
                name: 'Suceava',
            },
            {
                code: 'RO-TR',
                name: 'Teleorman',
            },
            {
                code: 'RO-TM',
                name: 'Timis',
            },
            {
                code: 'RO-TL',
                name: 'Tulcea',
            },
            {
                code: 'RO-VL',
                name: 'Vâlcea',
            },
            {
                code: 'RO-VS',
                name: 'Vaslui',
            },
            {
                code: 'RO-VN',
                name: 'Vrancea',
            },
        ],
    },
    {
        code: 'RU',
        id: 2324,
        name: 'Russian Federation',
        states: [
            {
                code: 'RS01',
                name: 'Adygeya Republic',
            },
            {
                code: 'RS02',
                name: 'Aginskiy Buryatskiy Avtonomnyy Okrug',
            },
            {
                code: 'RS03',
                name: 'Altay Republic',
            },
            {
                code: 'RS04',
                name: 'Altayskiy Kray',
            },
            {
                code: 'RS05',
                name: "Amurskaya Oblast'",
            },
            {
                code: 'RS06',
                name: "Arkhangel'skaya Oblast'",
            },
            {
                code: 'RS07',
                name: "Astrakhanskaya Oblast'",
            },
            {
                code: 'RS08',
                name: 'Bashkortostan Republic',
            },
            {
                code: 'RS09',
                name: "Belgorodskaya Oblast'",
            },
            {
                code: 'RS10',
                name: "Bryanskaya Oblast'",
            },
            {
                code: 'RS11',
                name: 'Buryatiya Republic',
            },
            {
                code: 'RSCI',
                name: 'Chechnya Republic',
            },
            {
                code: 'RS13',
                name: "Chelyabinskaya Oblast'",
            },
            {
                code: 'RS14',
                name: "Chitinskaya Oblast'",
            },
            {
                code: 'RS15',
                name: 'Chukotskiy Avtonomnyy Okrug',
            },
            {
                code: 'RS16',
                name: 'Chuvashiya Republic',
            },
            {
                code: 'RS17',
                name: 'Dagestan Republic',
            },
            {
                code: 'RS18',
                name: 'Evenkiyskiy Avtonomnyy Okrug',
            },
            {
                code: 'RS20',
                name: "Irkutskaya Oblast'",
            },
            {
                code: 'RS21',
                name: "Ivanovskaya Oblast'",
            },
            {
                code: 'RS22',
                name: 'Kabardino-Balkariya Republic',
            },
            {
                code: 'RS23',
                name: "Kaliningradskaya Oblast'",
            },
            {
                code: 'RS24',
                name: 'Kalmykiya Republic',
            },
            {
                code: 'RS25',
                name: "Kaluzhskaya Oblast'",
            },
            {
                code: 'RS26',
                name: "Kamchatskaya Oblast'",
            },
            {
                code: 'RS27',
                name: 'Karachayevo-Cherkesiya Republic',
            },
            {
                code: 'RS28',
                name: 'Kareliya Republic',
            },
            {
                code: 'RS29',
                name: "Kemerovskaya Oblast'",
            },
            {
                code: 'RS30',
                name: 'Khabarovskiy Kray',
            },
            {
                code: 'RS31',
                name: 'Khakasiya Republic',
            },
            {
                code: 'RS32',
                name: 'Khanty-Mansiyskiy Avtonomnyy Okrug',
            },
            {
                code: 'RS33',
                name: "Kirovskaya Oblast'",
            },
            {
                code: 'RS34',
                name: 'Komi Republic',
            },
            {
                code: 'RS36',
                name: 'Koryakskiy Avtonomnyy Okrug',
            },
            {
                code: 'RS37',
                name: "Kostromskaya Oblast'",
            },
            {
                code: 'RS38',
                name: 'Krasnodarskiy Kray',
            },
            {
                code: 'RS39',
                name: 'Krasnoyarskiy Kray',
            },
            {
                code: 'RS40',
                name: "Kurganskaya Oblast'",
            },
            {
                code: 'RS41',
                name: "Kurskaya Oblast'",
            },
            {
                code: 'RS42',
                name: "Leningradskaya Oblast'",
            },
            {
                code: 'RS43',
                name: "Lipetskaya Oblast'",
            },
            {
                code: 'RS44',
                name: "Magadanskaya Oblast'",
            },
            {
                code: 'RS45',
                name: 'Mariy-El Republic',
            },
            {
                code: 'RS46',
                name: 'Mordoviya Republic',
            },
            {
                code: 'RS47',
                name: "Moskovskaya Oblast'",
            },
            {
                code: 'RS48',
                name: 'Moskva Federal City',
            },
            {
                code: 'RS49',
                name: "Murmanskaya Oblast'",
            },
            {
                code: 'RS50',
                name: 'Nenetskiy Avtonomnyy Okrug',
            },
            {
                code: 'RS51',
                name: "Nizhegorodskaya Oblast'",
            },
            {
                code: 'RS52',
                name: "Novgorodskaya Oblast'",
            },
            {
                code: 'RS53',
                name: "Novosibirskaya Oblast'",
            },
            {
                code: 'RS54',
                name: "Omskaya Oblast'",
            },
            {
                code: 'RS55',
                name: "Orenburgskaya Oblast'",
            },
            {
                code: 'RS56',
                name: "Orlovskaya Oblast'",
            },
            {
                code: 'RS57',
                name: "Penzenskaya Oblast'",
            },
            {
                code: 'RS90',
                name: 'Permskiy Kray',
            },
            {
                code: 'RS59',
                name: 'Primorskiy Kray',
            },
            {
                code: 'RS60',
                name: "Pskovskaya Oblast'",
            },
            {
                code: 'RS61',
                name: "Rostovskaya Oblast'",
            },
            {
                code: 'RS62',
                name: "Ryazanskaya Oblast'",
            },
            {
                code: 'RS63',
                name: 'Sakha (Yakutiya) Republic',
            },
            {
                code: 'RS64',
                name: "Sakhalinskaya Oblast'",
            },
            {
                code: 'RS65',
                name: "Samarskaya Oblast'",
            },
            {
                code: 'RS66',
                name: 'Sankt-Peterburg Federal City',
            },
            {
                code: 'RS67',
                name: "Saratovskaya Oblast'",
            },
            {
                code: 'RS68',
                name: 'Severnaya Osetiya-Alaniya Respublika',
            },
            {
                code: 'RS69',
                name: "Smolenskaya Oblast'",
            },
            {
                code: 'RS70',
                name: "Stavropol'skiy Kray",
            },
            {
                code: 'RS71',
                name: "Sverdlovskaya Oblast'",
            },
            {
                code: 'RS72',
                name: "Tambovskaya Oblast'",
            },
            {
                code: 'RS73',
                name: 'Tatarstan Republic',
            },
            {
                code: 'RS74',
                name: 'Taymyrskiy (Dolgano-Nenetskiy) Avtonomnyy Okrug',
            },
            {
                code: 'RS75',
                name: "Tomskaya Oblast'",
            },
            {
                code: 'RS76',
                name: "Tul'skaya Oblast'",
            },
            {
                code: 'RS77',
                name: "Tverskaya Oblast'",
            },
            {
                code: 'RS78',
                name: "Tyumenskaya Oblast'",
            },
            {
                code: 'RS79',
                name: 'Tyva Republic',
            },
            {
                code: 'RS80',
                name: 'Udmurtiya Republic',
            },
            {
                code: 'RS81',
                name: "Ul'yanovskaya Oblast'",
            },
            {
                code: 'RS82',
                name: "Ust'-Ordynskiy Buryatskiy Avtonomnyy Okrug",
            },
            {
                code: 'RS83',
                name: "Vladimirskaya Oblast'",
            },
            {
                code: 'RS84',
                name: "Volgogradskaya Oblast'",
            },
            {
                code: 'RS85',
                name: "Vologodskaya Oblast'",
            },
            {
                code: 'RS86',
                name: "Voronezhskaya Oblast'",
            },
            {
                code: 'RS87',
                name: 'Yamalo-Nenetskiy Avtonomnyy Okrug',
            },
            {
                code: 'RS88',
                name: "Yaroslavskaya Oblast'",
            },
            {
                code: 'RS89',
                name: "Yevreyskaya Avtonomnaya Oblast'",
            },
        ],
    },
    {
        code: 'RW',
        id: 2325,
        name: 'Rwanda',
        states: [
            {
                code: 'RW11',
                name: 'Eastern',
            },
            {
                code: 'RW12',
                name: 'Kigali City',
            },
            {
                code: 'RW13',
                name: 'Northern',
            },
            {
                code: 'RW15',
                name: 'Southern',
            },
            {
                code: 'RW14',
                name: 'Western',
            },
        ],
    },
    {
        code: 'BL',
        id: 2432,
        name: 'Saint Barthélemy',
        states: [],
    },
    {
        code: 'SH',
        id: 2433,
        name: 'Saint Helena; Ascension and Tristan Da Cunha',
        states: [],
    },
    {
        code: 'KN',
        id: 2399,
        name: 'Saint Kitts and Nevis',
        states: [],
    },
    {
        code: 'LC',
        id: 2326,
        name: 'Saint Lucia',
        states: [],
    },
    {
        code: 'MF',
        id: 2434,
        name: 'Saint Martin',
        states: [
            {
                code: 'MF.SM',
                name: 'Saint Martin',
            },
        ],
    },
    {
        code: 'PM',
        id: 2435,
        name: 'Saint Pierre And Miquelon',
        states: [],
    },
    {
        code: 'VC',
        id: 2400,
        name: 'Saint Vincent and Grenadines',
        states: [],
    },
    {
        code: 'WS',
        id: 2401,
        name: 'Samoa',
        states: [
            {
                code: 'WS01',
                name: "A'ana",
            },
            {
                code: 'WS02',
                name: 'Aiga-i-le-Tai',
            },
            {
                code: 'WS03',
                name: 'Atua',
            },
            {
                code: 'WS04',
                name: "Fa'asaleleaga",
            },
            {
                code: 'WS05',
                name: "Gaga'emauga",
            },
            {
                code: 'WS07',
                name: 'Gagaifomauga',
            },
            {
                code: 'WS08',
                name: 'Palauli',
            },
            {
                code: 'WS09',
                name: "Satupa'itea",
            },
            {
                code: 'WS10',
                name: 'Tuamasaga',
            },
            {
                code: 'WS06',
                name: "Va'a-o-Fonoti",
            },
            {
                code: 'WS11',
                name: 'Vaisigano',
            },
        ],
    },
    {
        code: 'SM',
        id: 2327,
        name: 'San Marino',
        states: [],
    },
    {
        code: 'TP',
        id: 2403,
        name: 'Sao Tome and Principe',
        states: [],
    },
    {
        code: 'SA',
        id: 2328,
        name: 'Saudi Arabia',
        states: [
            {
                code: 'SA02',
                name: 'Al Bahah',
            },
            {
                code: 'SA15',
                name: 'Al Hudud ash Shamaliyah',
            },
            {
                code: 'SA20',
                name: 'Al Jawf',
            },
            {
                code: 'SA05',
                name: 'Al Madinah',
            },
            {
                code: 'SA08',
                name: 'Al Qasim',
            },
            {
                code: 'SA10',
                name: 'Ar Riyad',
            },
            {
                code: 'SA06',
                name: 'Ash Sharqiyah',
            },
            {
                code: 'SA11',
                name: 'Asir',
            },
            {
                code: 'SA13',
                name: "Ha'il",
            },
            {
                code: 'SA17',
                name: 'Jizan',
            },
            {
                code: 'SA14',
                name: 'Makkah',
            },
            {
                code: 'SA16',
                name: 'Najran',
            },
            {
                code: 'SA19',
                name: 'Tabuk',
            },
        ],
    },
    {
        code: 'SN',
        id: 2329,
        name: 'Senegal',
        states: [
            {
                code: 'SG01',
                name: 'Dakar',
            },
            {
                code: 'SG03',
                name: 'Diourbel',
            },
            {
                code: 'SG09',
                name: 'Fatick',
            },
            {
                code: 'SG16',
                name: 'Kaffrine',
            },
            {
                code: 'SG10',
                name: 'Kaolack',
            },
            {
                code: 'SG17',
                name: 'Kédougou',
            },
            {
                code: 'SG11',
                name: 'Kolda',
            },
            {
                code: 'SG13',
                name: 'Louga',
            },
            {
                code: 'SG15',
                name: 'Matam',
            },
            {
                code: 'SG14',
                name: 'Saint-Louis',
            },
            {
                code: 'SG18',
                name: 'Sédhiou',
            },
            {
                code: 'SG05',
                name: 'Tambacounda',
            },
            {
                code: 'SG07',
                name: 'Thiès',
            },
            {
                code: 'SG12',
                name: 'Ziguinchor',
            },
        ],
    },
    {
        code: 'RI',
        id: 2402,
        name: 'Serbia',
        states: [
            {
                code: 'RS-00',
                name: 'Belgrade',
            },
            {
                code: 'RS-14',
                name: 'Borski okrug',
            },
            {
                code: 'RS-11',
                name: 'Branicevski okrug',
            },
            {
                code: 'RS-23',
                name: 'Jablanicki okrug',
            },
            {
                code: 'RS-06',
                name: 'Južnobanatski okrug',
            },
            {
                code: 'RS-04',
                name: 'Južnobanatski okrug',
            },
            {
                code: 'RS-09',
                name: 'Kolubarski okrug',
            },
            {
                code: 'RS-25',
                name: 'Kosovski okrug',
            },
            {
                code: 'RS-28',
                name: 'Kosovsko-Mitrovacki okrug',
            },
            {
                code: 'RS-29',
                name: 'Kosovsko-Pomoravski okrug',
            },
            {
                code: 'RS-08',
                name: 'Macvanski okrug',
            },
            {
                code: 'RS-17',
                name: 'Moravicki okrug',
            },
            {
                code: 'RS-20',
                name: 'Nišavski okrug',
            },
            {
                code: 'RS-24',
                name: 'Pcinjski okrug',
            },
            {
                code: 'RS-26',
                name: 'Pecki okrug',
            },
            {
                code: 'RS-22',
                name: 'Pirotski okrug',
            },
            {
                code: 'RS-10',
                name: 'Podunavski okrug',
            },
            {
                code: 'RS-13',
                name: 'Pomoravski okrug',
            },
            {
                code: 'RS-27',
                name: 'Prizrenski okrug',
            },
            {
                code: 'RS-19',
                name: 'Rasinski okrug',
            },
            {
                code: 'RS-18',
                name: 'Raška okrug',
            },
            {
                code: 'RS-01',
                name: 'Severnobacki okrug',
            },
            {
                code: 'RS-03',
                name: 'Severnobanatski okrug',
            },
            {
                code: 'RS-02',
                name: 'Srednjebanatski okrug',
            },
            {
                code: 'RS-07',
                name: 'Sremski okrug',
            },
            {
                code: 'RS-12',
                name: 'Šumadijski okrug',
            },
            {
                code: 'RS-21',
                name: 'Toplièki okrug',
            },
            {
                code: 'RS-15',
                name: 'Zajeèarski okrug',
            },
            {
                code: 'RS-05',
                name: 'Zapadnobaèki okrug',
            },
            {
                code: 'RS-16',
                name: 'Zlatiborski okrug',
            },
        ],
    },
    {
        code: 'SC',
        id: 2331,
        name: 'Seychelles',
        states: [],
    },
    {
        code: 'SL',
        id: 2332,
        name: 'Sierra Leone',
        states: [
            {
                code: 'SL01',
                name: 'Eastern',
            },
            {
                code: 'SL02',
                name: 'Northern',
            },
            {
                code: 'SL03',
                name: 'Southern',
            },
            {
                code: 'SL04',
                name: 'Western',
            },
        ],
    },
    {
        code: 'SG',
        id: 2333,
        name: 'Singapore',
        states: [
            {
                code: 'SG01',
                name: 'Central Singapore',
            },
            {
                code: 'SG02',
                name: 'North East',
            },
            {
                code: 'SG03',
                name: 'North West',
            },
            {
                code: 'SG04',
                name: 'South East',
            },
            {
                code: 'SG05',
                name: 'South West',
            },
        ],
    },
    {
        code: 'SX',
        id: 2448,
        name: 'Sint Maarten',
        states: [
            {
                code: 'SX.SM',
                name: 'Sint Maarten',
            },
        ],
    },
    {
        code: 'SK',
        id: 2334,
        name: 'Slovakia',
        states: [
            {
                code: 'SK-BC',
                name: 'Banskobystrický kraj',
            },
            {
                code: 'SK-BL',
                name: 'Bratislavský kraj',
            },
            {
                code: 'SK-KI',
                name: 'Košický kraj',
            },
            {
                code: 'SK-NI',
                name: 'Nitriansky kraj',
            },
            {
                code: 'SK-PV',
                name: 'Prešovský kraj',
            },
            {
                code: 'SK-TC',
                name: 'Trenciansky kraj',
            },
            {
                code: 'SK-TA',
                name: 'Trnavský kraj',
            },
            {
                code: 'SK-ZI',
                name: 'Žilinský kraj',
            },
        ],
    },
    {
        code: 'SI',
        id: 2335,
        name: 'Slovenia',
        states: [
            {
                code: 'SI-001',
                name: 'Ajdovšcina',
            },
            {
                code: 'SI-195',
                name: 'Apace',
            },
            {
                code: 'SI-002',
                name: 'Beltinci',
            },
            {
                code: 'SI-148',
                name: 'Benedikt',
            },
            {
                code: 'SI-149',
                name: 'Bistrica ob Sotli',
            },
            {
                code: 'SI-003',
                name: 'Bled',
            },
            {
                code: 'SI-150',
                name: 'Bloke',
            },
            {
                code: 'SI-004',
                name: 'Bohinj',
            },
            {
                code: 'SI-005',
                name: 'Borovnica',
            },
            {
                code: 'SI-006',
                name: 'Bovec',
            },
            {
                code: 'SI-151',
                name: 'Braslovce',
            },
            {
                code: 'SI-007',
                name: 'Brda',
            },
            {
                code: 'SI-009',
                name: 'Brežice',
            },
            {
                code: 'SI-008',
                name: 'Brezovica',
            },
            {
                code: 'SI-152',
                name: 'Cankova',
            },
            {
                code: 'SI-011',
                name: 'Celje',
            },
            {
                code: 'SI-012',
                name: 'Cerklje na Gorenjskem',
            },
            {
                code: 'SI-013',
                name: 'Cerknica',
            },
            {
                code: 'SI-014',
                name: 'Cerkno',
            },
            {
                code: 'SI-153',
                name: 'Cerkvenjak',
            },
            {
                code: 'SI-197',
                name: 'Cirkulane',
            },
            {
                code: 'SI-015',
                name: 'Crenšovci',
            },
            {
                code: 'SI-016',
                name: 'Crna na Koroškem',
            },
            {
                code: 'SI-017',
                name: 'Crnomelj',
            },
            {
                code: 'SI-018',
                name: 'Destrnik',
            },
            {
                code: 'SI-019',
                name: 'Divaca',
            },
            {
                code: 'SI-154',
                name: 'Dobje',
            },
            {
                code: 'SI-020',
                name: 'Dobrepolje',
            },
            {
                code: 'SI-155',
                name: 'Dobrna',
            },
            {
                code: 'SI-021',
                name: 'Dobrova-Polhov Gradec',
            },
            {
                code: 'SI-156',
                name: 'Dobrovnik/Dobronak',
            },
            {
                code: 'SI-022',
                name: 'Dol pri Ljubljani',
            },
            {
                code: 'SI-157',
                name: 'Dolenjske Toplice',
            },
            {
                code: 'SI-023',
                name: 'Domžale',
            },
            {
                code: 'SI-024',
                name: 'Dornava',
            },
            {
                code: 'SI-025',
                name: 'Dravograd',
            },
            {
                code: 'SI-026',
                name: 'Duplek',
            },
            {
                code: 'SI-027',
                name: 'Gorenja vas-Poljane',
            },
            {
                code: 'SI-028',
                name: 'Gorišnica',
            },
            {
                code: 'SI-207',
                name: 'Gorje',
            },
            {
                code: 'SI-029',
                name: 'Gornja Radgona',
            },
            {
                code: 'SI-030',
                name: 'Gornji Grad',
            },
            {
                code: 'SI-031',
                name: 'Gornji Petrovci',
            },
            {
                code: 'SI-158',
                name: 'Grad',
            },
            {
                code: 'SI-032',
                name: 'Grosuplje',
            },
            {
                code: 'SI-159',
                name: 'Hajdina',
            },
            {
                code: 'SI-160',
                name: 'Hoce-Slivnica',
            },
            {
                code: 'SI-161',
                name: 'Hodoš/Hodos',
            },
            {
                code: 'SI-162',
                name: 'Horjul',
            },
            {
                code: 'SI-034',
                name: 'Hrastnik',
            },
            {
                code: 'SI-035',
                name: 'Hrpelje-Kozina',
            },
            {
                code: 'SI-036',
                name: 'Idrija',
            },
            {
                code: 'SI-037',
                name: 'Ig',
            },
            {
                code: 'SI-038',
                name: 'Ilirska Bistrica',
            },
            {
                code: 'SI-039',
                name: 'Ivancna Gorica',
            },
            {
                code: 'SI-040',
                name: 'Izola/Isola',
            },
            {
                code: 'SI-041',
                name: 'Jesenice',
            },
            {
                code: 'SI-163',
                name: 'Jezersko',
            },
            {
                code: 'SI-042',
                name: 'Juršinci',
            },
            {
                code: 'SI-043',
                name: 'Kamnik',
            },
            {
                code: 'SI-044',
                name: 'Kanal',
            },
            {
                code: 'SI-045',
                name: 'Kidricevo',
            },
            {
                code: 'SI-046',
                name: 'Kobarid',
            },
            {
                code: 'SI-047',
                name: 'Kobilje',
            },
            {
                code: 'SI-048',
                name: 'Kocevje',
            },
            {
                code: 'SI-049',
                name: 'Komen',
            },
            {
                code: 'SI-164',
                name: 'Komenda',
            },
            {
                code: 'SI-050',
                name: 'Koper/Capodistria',
            },
            {
                code: 'SI-196',
                name: 'Kosanjevica na Krki',
            },
            {
                code: 'SI-165',
                name: 'Kostel',
            },
            {
                code: 'SI-051',
                name: 'Kozje',
            },
            {
                code: 'SI-052',
                name: 'Kranj',
            },
            {
                code: 'SI-053',
                name: 'Kranjska Gora',
            },
            {
                code: 'SI-166',
                name: 'Križevci',
            },
            {
                code: 'SI-054',
                name: 'Krško',
            },
            {
                code: 'SI-055',
                name: 'Kungota',
            },
            {
                code: 'SI-056',
                name: 'Kuzma',
            },
            {
                code: 'SI-057',
                name: 'Laško',
            },
            {
                code: 'SI-058',
                name: 'Lenart',
            },
            {
                code: 'SI-059',
                name: 'Lendava/Lendva',
            },
            {
                code: 'SI-060',
                name: 'Litija',
            },
            {
                code: 'SI-061',
                name: 'Ljubljana',
            },
            {
                code: 'SI-062',
                name: 'Ljubno',
            },
            {
                code: 'SI-063',
                name: 'Ljutomer',
            },
            {
                code: 'SI-208',
                name: 'Log-Dragomer',
            },
            {
                code: 'SI-064',
                name: 'Logatec',
            },
            {
                code: 'SI-065',
                name: 'Loška dolina',
            },
            {
                code: 'SI-066',
                name: 'Loški Potok',
            },
            {
                code: 'SI-167',
                name: 'Lovrenc na Pohorju',
            },
            {
                code: 'SI-067',
                name: 'Luce',
            },
            {
                code: 'SI-068',
                name: 'Lukovica',
            },
            {
                code: 'SI-069',
                name: 'Majšperk',
            },
            {
                code: 'SI-198',
                name: 'Makole',
            },
            {
                code: 'SI-070',
                name: 'Maribor',
            },
            {
                code: 'SI-168',
                name: 'Markovci',
            },
            {
                code: 'SI-071',
                name: 'Medvode',
            },
            {
                code: 'SI-072',
                name: 'Mengeš',
            },
            {
                code: 'SI-073',
                name: 'Metlika',
            },
            {
                code: 'SI-074',
                name: 'Mežica',
            },
            {
                code: 'SI-169',
                name: 'Miklavž na Dravskem polju',
            },
            {
                code: 'SI-075',
                name: 'Miren-Kostanjevica',
            },
            {
                code: 'SI-170',
                name: 'Mirna Pec',
            },
            {
                code: 'SI-076',
                name: 'Mislinja',
            },
            {
                code: 'SI-199',
                name: 'Mokronog-Trebelno',
            },
            {
                code: 'SI-077',
                name: 'Moravce',
            },
            {
                code: 'SI-078',
                name: 'Moravske Toplice',
            },
            {
                code: 'SI-079',
                name: 'Mozirje',
            },
            {
                code: 'SI-080',
                name: 'Murska Sobota',
            },
            {
                code: 'SI-081',
                name: 'Muta',
            },
            {
                code: 'SI-082',
                name: 'Naklo',
            },
            {
                code: 'SI-083',
                name: 'Nazarje',
            },
            {
                code: 'SI-084',
                name: 'Nova Gorica',
            },
            {
                code: 'SI-085',
                name: 'Novo mesto',
            },
            {
                code: 'SI-086',
                name: 'Odranci',
            },
            {
                code: 'SI-171',
                name: 'Oplotnica',
            },
            {
                code: 'SI-087',
                name: 'Ormož',
            },
            {
                code: 'SI-088',
                name: 'Osilnica',
            },
            {
                code: 'SI-089',
                name: 'Pesnica',
            },
            {
                code: 'SI-090',
                name: 'Piran/Pirano',
            },
            {
                code: 'SI-091',
                name: 'Pivka',
            },
            {
                code: 'SI-092',
                name: 'Podcetrtek',
            },
            {
                code: 'SI-172',
                name: 'Podlehnik',
            },
            {
                code: 'SI-093',
                name: 'Podvelka',
            },
            {
                code: 'SI-200',
                name: 'Poljcane',
            },
            {
                code: 'SI-173',
                name: 'Polzela',
            },
            {
                code: 'SI-094',
                name: 'Postojna',
            },
            {
                code: 'SI-174',
                name: 'Prebold',
            },
            {
                code: 'SI-095',
                name: 'Preddvor',
            },
            {
                code: 'SI-175',
                name: 'Prevalje',
            },
            {
                code: 'SI-096',
                name: 'Ptuj',
            },
            {
                code: 'SI-097',
                name: 'Puconci',
            },
            {
                code: 'SI-098',
                name: 'Race-Fram',
            },
            {
                code: 'SI-099',
                name: 'Radece',
            },
            {
                code: 'SI-100',
                name: 'Radenci',
            },
            {
                code: 'SI-101',
                name: 'Radlje ob Dravi',
            },
            {
                code: 'SI-102',
                name: 'Radovljica',
            },
            {
                code: 'SI-103',
                name: 'Ravne na Koroškem',
            },
            {
                code: 'SI-176',
                name: 'Razkrižje',
            },
            {
                code: 'SI-209',
                name: 'Recica ob Savinji',
            },
            {
                code: 'SI-201',
                name: 'Rence-Vogrsko',
            },
            {
                code: 'SI-177',
                name: 'Ribnica na Pohorju',
            },
            {
                code: 'SI-104',
                name: 'Ribnica',
            },
            {
                code: 'SI-106',
                name: 'Rogaška Slatina',
            },
            {
                code: 'SI-105',
                name: 'Rogašovci',
            },
            {
                code: 'SI-107',
                name: 'Rogatec',
            },
            {
                code: 'SI-108',
                name: 'Ruše',
            },
            {
                code: 'SI-033',
                name: 'Šalovci',
            },
            {
                code: 'SI-178',
                name: 'Selnica ob Dravi',
            },
            {
                code: 'SI-109',
                name: 'Semic',
            },
            {
                code: 'SI-183',
                name: 'Šempeter-Vrtojba',
            },
            {
                code: 'SI-117',
                name: 'Šencur',
            },
            {
                code: 'SI-118',
                name: 'Šentilj',
            },
            {
                code: 'SI-119',
                name: 'Šentjernej',
            },
            {
                code: 'SI-120',
                name: 'Šentjur pri Celju',
            },
            {
                code: 'SI-211',
                name: 'Šentrupert',
            },
            {
                code: 'SI-110',
                name: 'Sevnica',
            },
            {
                code: 'SI-111',
                name: 'Sežana',
            },
            {
                code: 'SI-121',
                name: 'Škocjan',
            },
            {
                code: 'SI-122',
                name: 'Škofja Loka',
            },
            {
                code: 'SI-123',
                name: 'Škofljica',
            },
            {
                code: 'SI-112',
                name: 'Slovenj Gradec',
            },
            {
                code: 'SI-113',
                name: 'Slovenska Bistrica',
            },
            {
                code: 'SI-114',
                name: 'Slovenske Konjice',
            },
            {
                code: 'SI-124',
                name: 'Šmarje pri Jelšah',
            },
            {
                code: 'SI-206',
                name: 'Šmarješke Toplice',
            },
            {
                code: 'SI-125',
                name: 'Šmartno ob Paki',
            },
            {
                code: 'SI-194',
                name: 'Šmartno pri Litiji',
            },
            {
                code: 'SI-194',
                name: 'Šmartno pri Litiji',
            },
            {
                code: 'SI-179',
                name: 'Sodražica',
            },
            {
                code: 'SI-180',
                name: 'Solcava',
            },
            {
                code: 'SI-126',
                name: 'Šoštanj',
            },
            {
                code: 'SI-202',
                name: 'Središce ob Dravi',
            },
            {
                code: 'SI-115',
                name: 'Starše',
            },
            {
                code: 'SI-127',
                name: 'Štore',
            },
            {
                code: 'SI-203',
                name: 'Straža',
            },
            {
                code: 'SI-181',
                name: 'Sveta Ana',
            },
            {
                code: 'SI-204',
                name: 'Sveta Trojica v Slovenskih Goricah',
            },
            {
                code: 'SI-182',
                name: 'Sveti Andraž v Slovenskih goricah',
            },
            {
                code: 'SI-116',
                name: 'Sveti Jurij',
            },
            {
                code: 'SI-210',
                name: 'Sveti Jurij v Slovenskih Goricah',
            },
            {
                code: 'SI-205',
                name: 'Sveti Tomaž',
            },
            {
                code: 'SI-184',
                name: 'Tabor',
            },
            {
                code: 'SI-010',
                name: 'Tišina',
            },
            {
                code: 'SI-128',
                name: 'Tolmin',
            },
            {
                code: 'SI-129',
                name: 'Trbovlje',
            },
            {
                code: 'SI-130',
                name: 'Trebnje',
            },
            {
                code: 'SI-185',
                name: 'Trnovska vas',
            },
            {
                code: 'SI-131',
                name: 'Tržic',
            },
            {
                code: 'SI-186',
                name: 'Trzin',
            },
            {
                code: 'SI-132',
                name: 'Turnišce',
            },
            {
                code: 'SI-133',
                name: 'Velenje',
            },
            {
                code: 'SI-187',
                name: 'Velika Polana',
            },
            {
                code: 'SI-134',
                name: 'Velike Lašce',
            },
            {
                code: 'SI-188',
                name: 'Veržej',
            },
            {
                code: 'SI-135',
                name: 'Videm',
            },
            {
                code: 'SI-136',
                name: 'Vipava',
            },
            {
                code: 'SI-137',
                name: 'Vitanje',
            },
            {
                code: 'SI-138',
                name: 'Vodice',
            },
            {
                code: 'SI-139',
                name: 'Vojnik',
            },
            {
                code: 'SI-189',
                name: 'Vransko',
            },
            {
                code: 'SI-140',
                name: 'Vrhnika',
            },
            {
                code: 'SI-141',
                name: 'Vuzenica',
            },
            {
                code: 'SI-142',
                name: 'Zagorje ob Savi',
            },
            {
                code: 'SI-190',
                name: 'Žalec',
            },
            {
                code: 'SI-143',
                name: 'Zavrc',
            },
            {
                code: 'SI-146',
                name: 'Železniki',
            },
            {
                code: 'SI-191',
                name: 'Žetale',
            },
            {
                code: 'SI-147',
                name: 'Žiri',
            },
            {
                code: 'SI-192',
                name: 'Žirovnica',
            },
            {
                code: 'SI-144',
                name: 'Zrece',
            },
            {
                code: 'SI-193',
                name: 'Žužemberk',
            },
        ],
    },
    {
        code: 'SB',
        id: 2336,
        name: 'Solomon Islands',
        states: [],
    },
    {
        code: 'SO',
        id: 2337,
        name: 'Somalia',
        states: [
            {
                code: 'SO21',
                name: 'Awdal',
            },
            {
                code: 'SO01',
                name: 'Bakool',
            },
            {
                code: 'SO02',
                name: 'Banaadir',
            },
            {
                code: 'SO03',
                name: 'Bari',
            },
            {
                code: 'SO04',
                name: 'Bay',
            },
            {
                code: 'SO05',
                name: 'Galguduud',
            },
            {
                code: 'SO06',
                name: 'Gedo',
            },
            {
                code: 'SO07',
                name: 'Hiiraan',
            },
            {
                code: 'SO08',
                name: 'Jubbada Dhexe',
            },
            {
                code: 'SO09',
                name: 'Jubbada Hoose',
            },
            {
                code: 'SO10',
                name: 'Mudug',
            },
            {
                code: 'SO18',
                name: 'Nugaal',
            },
            {
                code: 'SO12',
                name: 'Sanaag',
            },
            {
                code: 'SO13',
                name: 'Shabeellaha Dhexe',
            },
            {
                code: 'SO14',
                name: 'Shabeellaha Hoose',
            },
            {
                code: 'SO22',
                name: 'Sool',
            },
            {
                code: 'SO19',
                name: 'Togdheer',
            },
            {
                code: 'SO20',
                name: 'Woqooyi Galbeed',
            },
        ],
    },
    {
        code: 'ZA',
        id: 2338,
        name: 'South Africa',
        states: [
            {
                code: 'SF01',
                name: 'Cape Province',
            },
            {
                code: 'SF05',
                name: 'Eastern Cape',
            },
            {
                code: 'SF03',
                name: 'Free State',
            },
            {
                code: 'SF06',
                name: 'Gauteng',
            },
            {
                code: 'SF02',
                name: 'KwaZulu-Natal',
            },
            {
                code: 'SF09',
                name: 'Limpopo',
            },
            {
                code: 'SF07',
                name: 'Mpumalanga',
            },
            {
                code: 'SF10',
                name: 'North-West',
            },
            {
                code: 'SF08',
                name: 'Northern Cape',
            },
            {
                code: 'SF04',
                name: 'Transvaal',
            },
            {
                code: 'SF11',
                name: 'Western Cape',
            },
        ],
    },
    {
        code: 'GS',
        id: 2436,
        name: 'South Georgia and the South Sandwich Islands',
        states: [],
    },
    {
        code: 'SS',
        id: 2447,
        name: 'South Sudan',
        states: [
            {
                code: 'OD01',
                name: 'Central Equatoria',
            },
            {
                code: 'OD02',
                name: 'East Equatoria',
            },
            {
                code: 'OD03',
                name: 'Jungoli',
            },
            {
                code: 'OD04',
                name: 'Lakes',
            },
            {
                code: 'OD05',
                name: 'North Bahr-al-Ghazal',
            },
            {
                code: 'OD06',
                name: 'Unity',
            },
            {
                code: 'OD07',
                name: 'Upper Nile',
            },
            {
                code: 'OD08',
                name: 'Warap',
            },
            {
                code: 'OD09',
                name: 'West Bahr-al-Ghazal',
            },
            {
                code: 'OD10',
                name: 'West Equatoria',
            },
        ],
    },
    {
        code: 'ES',
        id: 2339,
        name: 'Spain',
        states: [
            {
                code: 'SP23',
                name: 'A Coruña',
            },
            {
                code: 'SP01',
                name: 'Alava',
            },
            {
                code: 'SP02',
                name: 'Albacete',
            },
            {
                code: 'SP03',
                name: 'Alicante',
            },
            {
                code: 'SP04',
                name: 'Almeria',
            },
            {
                code: 'SP51',
                name: 'Andalucia',
            },
            {
                code: 'SP52',
                name: 'Aragon',
            },
            {
                code: 'SP34',
                name: 'Asturias',
            },
            {
                code: 'SP05',
                name: 'Avila',
            },
            {
                code: 'SP06',
                name: 'Badajoz',
            },
            {
                code: 'SP08',
                name: 'Barcelona',
            },
            {
                code: 'SP09',
                name: 'Burgos',
            },
            {
                code: 'SP10',
                name: 'Caceres',
            },
            {
                code: 'SP11',
                name: 'Cadiz',
            },
            {
                code: 'SP53',
                name: 'Canarias',
            },
            {
                code: 'SP39',
                name: 'Cantabria',
            },
            {
                code: 'SP12',
                name: 'Castellon',
            },
            {
                code: 'SP55',
                name: 'Castilla y Leon',
            },
            {
                code: 'SP54',
                name: 'Castilla-La Mancha',
            },
            {
                code: 'SP56',
                name: 'Cataluna',
            },
            {
                code: 'SP13',
                name: 'Ciudad Real',
            },
            {
                code: 'SP14',
                name: 'Cordoba',
            },
            {
                code: 'SP15',
                name: 'Cuenca',
            },
            {
                code: 'SP57',
                name: 'Extremadura',
            },
            {
                code: 'SP58',
                name: 'Galicia',
            },
            {
                code: 'SP16',
                name: 'Gerona',
            },
            {
                code: 'SP17',
                name: 'Granada',
            },
            {
                code: 'SP18',
                name: 'Guadalajara',
            },
            {
                code: 'SP19',
                name: 'Guipuzcoa',
            },
            {
                code: 'SP20',
                name: 'Huelva',
            },
            {
                code: 'SP21',
                name: 'Huesca',
            },
            {
                code: 'SP07',
                name: 'Islas Baleares',
            },
            {
                code: 'SP22',
                name: 'Jaen',
            },
            {
                code: 'SP23',
                name: 'La Coruna',
            },
            {
                code: 'SP27',
                name: 'La Rioja',
            },
            {
                code: 'SP24',
                name: 'Las Palmas',
            },
            {
                code: 'SP25',
                name: 'Leon',
            },
            {
                code: 'SP26',
                name: 'Lerida',
            },
            {
                code: 'SP28',
                name: 'Lugo',
            },
            {
                code: 'SP29',
                name: 'Madrid',
            },
            {
                code: 'SP30',
                name: 'Malaga',
            },
            {
                code: 'SP31',
                name: 'Murcia',
            },
            {
                code: 'SP32',
                name: 'Navarra',
            },
            {
                code: 'SP33',
                name: 'Orense',
            },
            {
                code: 'SP59',
                name: 'Pais Vasco',
            },
            {
                code: 'SP35',
                name: 'Palencia',
            },
            {
                code: 'SP36',
                name: 'Pontevedra',
            },
            {
                code: 'SP37',
                name: 'Salamanca',
            },
            {
                code: 'SP38',
                name: 'Santa Cruz de Tenerife',
            },
            {
                code: 'SP40',
                name: 'Segovia',
            },
            {
                code: 'SP41',
                name: 'Sevilla',
            },
            {
                code: 'SP42',
                name: 'Soria',
            },
            {
                code: 'SP43',
                name: 'Tarragona',
            },
            {
                code: 'SP44',
                name: 'Teruel',
            },
            {
                code: 'SP45',
                name: 'Toledo',
            },
            {
                code: 'SP46',
                name: 'Valencia',
            },
            {
                code: 'SP60',
                name: 'Valenciana',
            },
            {
                code: 'SP47',
                name: 'Valladolid',
            },
            {
                code: 'SP48',
                name: 'Vizcaya',
            },
            {
                code: 'SP49',
                name: 'Zamora',
            },
            {
                code: 'SP50',
                name: 'Zaragoza',
            },
        ],
    },
    {
        code: 'LK',
        id: 2340,
        name: 'Sri Lanka',
        states: [],
    },
    {
        code: 'SD',
        id: 2341,
        name: 'Sudan',
        states: [
            {
                code: 'SU42',
                name: 'Blue Nile',
            },
            {
                code: 'SU61',
                name: 'Central Darfur',
            },
            {
                code: 'SU60',
                name: 'East Darfur',
            },
            {
                code: 'SU39',
                name: 'Gedarif',
            },
            {
                code: 'SU38',
                name: 'Gezira',
            },
            {
                code: 'SU52',
                name: 'Kassala',
            },
            {
                code: 'SU29',
                name: 'Khartoum',
            },
            {
                code: 'SU55',
                name: 'North Darfur',
            },
            {
                code: 'SU56',
                name: 'North Kordofan',
            },
            {
                code: 'SU43',
                name: 'Northern',
            },
            {
                code: 'SU36',
                name: 'Red Sea',
            },
            {
                code: 'SU53',
                name: 'River Nile',
            },
            {
                code: 'SU58',
                name: 'Sennar',
            },
            {
                code: 'SU49',
                name: 'South Darfur',
            },
            {
                code: 'SU50',
                name: 'South Kordofan',
            },
            {
                code: 'SU47',
                name: 'West Darfur',
            },
            {
                code: 'SU62',
                name: 'West Kordofan',
            },
            {
                code: 'SU41',
                name: 'White Nile',
            },
        ],
    },
    {
        code: 'SR',
        id: 2342,
        name: 'Suriname',
        states: [
            {
                code: 'NS10',
                name: 'Brokopondo',
            },
            {
                code: 'NS11',
                name: 'Commewijne',
            },
            {
                code: 'NS12',
                name: 'Coronie',
            },
            {
                code: 'NS13',
                name: 'Marowijne',
            },
            {
                code: 'NS14',
                name: 'Nickerie',
            },
            {
                code: 'NS16',
                name: 'Paramaribo',
            },
            {
                code: 'NS15',
                name: 'Para',
            },
            {
                code: 'NS17',
                name: 'Saramacca',
            },
            {
                code: 'NS18',
                name: 'Sipaliwini',
            },
            {
                code: 'NS19',
                name: 'Wanica',
            },
        ],
    },
    {
        code: 'SJ',
        id: 2437,
        name: 'Svalbard And Jan Mayen',
        states: [],
    },
    {
        code: 'SZ',
        id: 2343,
        name: 'Swaziland',
        states: [
            {
                code: 'WZ01',
                name: 'Hhohho',
            },
            {
                code: 'WZ02',
                name: 'Lubombo',
            },
            {
                code: 'WZ03',
                name: 'Manzini',
            },
            {
                code: 'WZ04',
                name: 'Shiselweni',
            },
        ],
    },
    {
        code: 'SE',
        id: 2344,
        name: 'Sweden',
        states: [
            {
                code: 'SE-K',
                name: 'Blekinge län',
            },
            {
                code: 'SE-W',
                name: 'Dalarnas län',
            },
            {
                code: 'SE-X',
                name: 'Gävleborgs län',
            },
            {
                code: 'SE-I',
                name: 'Gotlands län',
            },
            {
                code: 'SE-N',
                name: 'Hallands län',
            },
            {
                code: 'SE-Z',
                name: 'Jämtlands län',
            },
            {
                code: 'SE-F',
                name: 'Jönköpings län',
            },
            {
                code: 'SE-H',
                name: 'Kalmar län',
            },
            {
                code: 'SE-G',
                name: 'Kronobergs län',
            },
            {
                code: 'SE-BD',
                name: 'Norrbottens län',
            },
            {
                code: 'SE-M',
                name: 'Skåne län',
            },
            {
                code: 'SE-D',
                name: 'Södermanlands län',
            },
            {
                code: 'SE-AB',
                name: 'Stockholms län',
            },
            {
                code: 'SE-C',
                name: 'Uppsala län',
            },
            {
                code: 'SE-S',
                name: 'Värmlands län',
            },
            {
                code: 'SE-AC',
                name: 'Västerbottens län',
            },
            {
                code: 'SE-Y',
                name: 'Västernorrlands län',
            },
            {
                code: 'SE-U',
                name: 'Västmanlands län',
            },
            {
                code: 'SE-O',
                name: 'Västra Götalands län',
            },
            {
                code: 'SE-T',
                name: 'Örebro län',
            },
            {
                code: 'SE-E',
                name: 'Östergötlands län',
            },
        ],
    },
    {
        code: 'CH',
        id: 2345,
        name: 'Switzerland',
        states: [
            {
                code: 'AG',
                name: 'Aargau',
            },
            {
                code: 'AR',
                name: 'Appenzell Ausserrhoden',
            },
            {
                code: 'AI',
                name: 'Appenzell Innerrhoden',
            },
            {
                code: 'BL',
                name: 'Basel-Landschaft',
            },
            {
                code: 'BS',
                name: 'Basel-Stadt',
            },
            {
                code: 'BE',
                name: 'Bern',
            },
            {
                code: 'FR',
                name: 'Fribourg',
            },
            {
                code: 'GE',
                name: 'Genève',
            },
            {
                code: 'GL',
                name: 'Glarus',
            },
            {
                code: 'GR',
                name: 'Graubünden',
            },
            {
                code: 'JU',
                name: 'Jura',
            },
            {
                code: 'LU',
                name: 'Luzern',
            },
            {
                code: 'NE',
                name: 'Neuchâtel',
            },
            {
                code: 'NW',
                name: 'Nidwalden',
            },
            {
                code: 'OW',
                name: 'Obwalden',
            },
            {
                code: 'SG',
                name: 'Sankt Gallen',
            },
            {
                code: 'SH',
                name: 'Schaffhausen',
            },
            {
                code: 'SZ',
                name: 'Schwyz',
            },
            {
                code: 'SO',
                name: 'Solothurn',
            },
            {
                code: 'TG',
                name: 'Thurgau',
            },
            {
                code: 'TI',
                name: 'Ticino',
            },
            {
                code: 'UR',
                name: 'Uri',
            },
            {
                code: 'VS',
                name: 'Valais',
            },
            {
                code: 'VD',
                name: 'Vaud',
            },
            {
                code: 'ZG',
                name: 'Zug',
            },
            {
                code: 'ZH',
                name: 'Zürich',
            },
        ],
    },
    {
        code: 'SY',
        id: 2381,
        name: 'Syrian Arab Republic',
        states: [
            {
                code: 'SY01',
                name: 'Al Hasakah',
            },
            {
                code: 'SY09',
                name: 'Aleppo',
            },
            {
                code: 'SY04',
                name: 'Ar Raqqah',
            },
            {
                code: 'SY05',
                name: "As Suwayda'",
            },
            {
                code: 'SY13',
                name: 'Damascus',
            },
            {
                code: 'SY06',
                name: 'Dar`a',
            },
            {
                code: 'SY07',
                name: 'Dayr az Zawr',
            },
            {
                code: 'SY10',
                name: 'Hama',
            },
            {
                code: 'SY11',
                name: 'Hims',
            },
            {
                code: 'SY12',
                name: 'Idlib',
            },
            {
                code: 'SY02',
                name: 'Latakia',
            },
            {
                code: 'SY03',
                name: 'Quneitra',
            },
            {
                code: 'SY08',
                name: 'Rif Dimashq',
            },
            {
                code: 'SY14',
                name: 'Tartus',
            },
        ],
    },
    {
        code: 'TW',
        id: 2375,
        name: 'Taiwan',
        states: [
            {
                code: 'TW02',
                name: 'Kaohsiung',
            },
            {
                code: 'TW03',
                name: 'Taipei',
            },
        ],
    },
    {
        code: 'TJ',
        id: 2348,
        name: 'Tajikistan',
        states: [
            {
                code: 'TI01',
                name: 'Badakhshoni Kuni',
            },
            {
                code: 'TI04',
                name: 'Dushanbe',
            },
            {
                code: 'TI02',
                name: 'Khatlon',
            },
            {
                code: 'TI05',
                name: 'Regions of Republican Subordination',
            },
            {
                code: 'TI03',
                name: 'Sogd',
            },
        ],
    },
    {
        code: 'TZ',
        id: 2349,
        name: 'Tanzania',
        states: [
            {
                code: 'TZ26',
                name: 'Arusha',
            },
            {
                code: 'TZ23',
                name: 'Dar es Salaam',
            },
            {
                code: 'TZ03',
                name: 'Dodoma',
            },
            {
                code: 'TZ28',
                name: 'Geita',
            },
            {
                code: 'TZ04',
                name: 'Iringa',
            },
            {
                code: 'TZ19',
                name: 'Kagera',
            },
            {
                code: 'TZ29',
                name: 'Katavi',
            },
            {
                code: 'TZ05',
                name: 'Kigoma',
            },
            {
                code: 'TZ06',
                name: 'Kilimanjaro',
            },
            {
                code: 'TZ07',
                name: 'Lindi',
            },
            {
                code: 'TZ27',
                name: 'Manyara',
            },
            {
                code: 'TZ08',
                name: 'Mara',
            },
            {
                code: 'TZ09',
                name: 'Mbeya',
            },
            {
                code: 'TZ10',
                name: 'Morogoro',
            },
            {
                code: 'TZ11',
                name: 'Mtwara',
            },
            {
                code: 'TZ12',
                name: 'Mwanza',
            },
            {
                code: 'TZ30',
                name: 'Njombe',
            },
            {
                code: 'TZ13',
                name: 'Pemba North',
            },
            {
                code: 'TZ20',
                name: 'Pemba South',
            },
            {
                code: 'TZ02',
                name: 'Pwani',
            },
            {
                code: 'TZ24',
                name: 'Rukwa',
            },
            {
                code: 'TZ14',
                name: 'Ruvuma',
            },
            {
                code: 'TZ15',
                name: 'Shinyanga',
            },
            {
                code: 'TZ31',
                name: 'Simiyu',
            },
            {
                code: 'TZ16',
                name: 'Singida',
            },
            {
                code: 'TZ17',
                name: 'Tabora',
            },
            {
                code: 'TZ18',
                name: 'Tanga',
            },
            {
                code: 'TZ22',
                name: 'Zanzibar North',
            },
            {
                code: 'TZ21',
                name: 'Zanzibar South and Central',
            },
            {
                code: 'TZ25',
                name: 'Zanzibar West',
            },
        ],
    },
    {
        code: 'TH',
        id: 2350,
        name: 'Thailand',
        states: [
            {
                code: 'TH77',
                name: 'Amnat Charoen',
            },
            {
                code: 'TH35',
                name: 'Ang Thong',
            },
            {
                code: 'TH40',
                name: 'Bangkok Metropolis',
            },
            {
                code: 'TH81',
                name: 'Bueng Kan',
            },
            {
                code: 'TH28',
                name: 'Buri Ram',
            },
            {
                code: 'TH44',
                name: 'Chachoengsao',
            },
            {
                code: 'TH32',
                name: 'Chai Nat',
            },
            {
                code: 'TH26',
                name: 'Chaiyaphum',
            },
            {
                code: 'TH48',
                name: 'Chanthaburi',
            },
            {
                code: 'TH02',
                name: 'Chiang Mai',
            },
            {
                code: 'TH03',
                name: 'Chiang Rai',
            },
            {
                code: 'TH46',
                name: 'Chon Buri',
            },
            {
                code: 'TH58',
                name: 'Chumphon',
            },
            {
                code: 'TH23',
                name: 'Kalasin',
            },
            {
                code: 'TH11',
                name: 'Kamphaeng Phet',
            },
            {
                code: 'TH50',
                name: 'Kanchanaburi',
            },
            {
                code: 'TH22',
                name: 'Khon Kaen',
            },
            {
                code: 'TH63',
                name: 'Krabi',
            },
            {
                code: 'TH06',
                name: 'Lampang',
            },
            {
                code: 'TH05',
                name: 'Lamphun',
            },
            {
                code: 'TH18',
                name: 'Loei',
            },
            {
                code: 'TH34',
                name: 'Lop Buri',
            },
            {
                code: 'TH01',
                name: 'Mae Hong Son',
            },
            {
                code: 'TH24',
                name: 'Maha Sarakham',
            },
            {
                code: 'TH78',
                name: 'Mukdahan',
            },
            {
                code: 'TH43',
                name: 'Nakhon Nayok',
            },
            {
                code: 'TH53',
                name: 'Nakhon Pathom',
            },
            {
                code: 'TH73',
                name: 'Nakhon Phanom',
            },
            {
                code: 'TH27',
                name: 'Nakhon Ratchasima',
            },
            {
                code: 'TH16',
                name: 'Nakhon Sawan',
            },
            {
                code: 'TH64',
                name: 'Nakhon Si Thammarat',
            },
            {
                code: 'TH04',
                name: 'Nan',
            },
            {
                code: 'TH31',
                name: 'Narathiwat',
            },
            {
                code: 'TH79',
                name: 'Nong Bua Lam Phu',
            },
            {
                code: 'TH17',
                name: 'Nong Khai',
            },
            {
                code: 'TH38',
                name: 'Nonthaburi',
            },
            {
                code: 'TH39',
                name: 'Pathum Thani',
            },
            {
                code: 'TH69',
                name: 'Pattani',
            },
            {
                code: 'TH61',
                name: 'Phangnga',
            },
            {
                code: 'TH66',
                name: 'Phatthalung',
            },
            {
                code: 'TH41',
                name: 'Phayao',
            },
            {
                code: 'TH14',
                name: 'Phetchabun',
            },
            {
                code: 'TH56',
                name: 'Phetchaburi',
            },
            {
                code: 'TH13',
                name: 'Phichit',
            },
            {
                code: 'TH12',
                name: 'Phitsanulok',
            },
            {
                code: 'TH36',
                name: 'Phra Nakhon Si Ayutthaya',
            },
            {
                code: 'TH07',
                name: 'Phrae',
            },
            {
                code: 'TH62',
                name: 'Phuket',
            },
            {
                code: 'TH74',
                name: 'Prachin Buri',
            },
            {
                code: 'TH57',
                name: 'Prachuap Khiri Khan',
            },
            {
                code: 'TH59',
                name: 'Ranong',
            },
            {
                code: 'TH52',
                name: 'Ratchaburi',
            },
            {
                code: 'TH47',
                name: 'Rayong',
            },
            {
                code: 'TH25',
                name: 'Roi Et',
            },
            {
                code: 'TH80',
                name: 'Sa Kaeo',
            },
            {
                code: 'TH20',
                name: 'Sakon Nakhon',
            },
            {
                code: 'TH42',
                name: 'Samut Prakan',
            },
            {
                code: 'TH55',
                name: 'Samut Sakhon',
            },
            {
                code: 'TH54',
                name: 'Samut Songkhram',
            },
            {
                code: 'TH37',
                name: 'Saraburi',
            },
            {
                code: 'TH67',
                name: 'Satun',
            },
            {
                code: 'TH30',
                name: 'Si Sa Ket',
            },
            {
                code: 'TH33',
                name: 'Sing Buri',
            },
            {
                code: 'TH68',
                name: 'Songkhla',
            },
            {
                code: 'TH09',
                name: 'Sukhothai',
            },
            {
                code: 'TH51',
                name: 'Suphan Buri',
            },
            {
                code: 'TH60',
                name: 'Surat Thani',
            },
            {
                code: 'TH29',
                name: 'Surin',
            },
            {
                code: 'TH08',
                name: 'Tak',
            },
            {
                code: 'TH65',
                name: 'Trang',
            },
            {
                code: 'TH49',
                name: 'Trat',
            },
            {
                code: 'TH75',
                name: 'Ubon Ratchathani',
            },
            {
                code: 'TH76',
                name: 'Udon Thani',
            },
            {
                code: 'TH15',
                name: 'Uthai Thani',
            },
            {
                code: 'TH10',
                name: 'Uttaradit',
            },
            {
                code: 'TH70',
                name: 'Yala',
            },
            {
                code: 'TH72',
                name: 'Yasothon',
            },
        ],
    },
    {
        code: 'TL',
        id: 2404,
        name: 'Timor-Leste',
        states: [],
    },
    {
        code: 'TG',
        id: 2351,
        name: 'Togo',
        states: [
            {
                code: 'TO22',
                name: 'Centrale',
            },
            {
                code: 'TO23',
                name: 'Kara',
            },
            {
                code: 'TO24',
                name: 'Maritime',
            },
            {
                code: 'TO25',
                name: 'Plateaux',
            },
            {
                code: 'TO26',
                name: 'Savanes',
            },
        ],
    },
    {
        code: 'TK',
        id: 2438,
        name: 'Tokelau',
        states: [],
    },
    {
        code: 'TO',
        id: 2405,
        name: 'Tonga',
        states: [],
    },
    {
        code: 'TT',
        id: 2352,
        name: 'Trinidad and Tobago',
        states: [
            {
                code: 'TD01',
                name: 'Arima',
            },
            {
                code: 'TD13',
                name: 'Chaguanas',
            },
            {
                code: 'TD14',
                name: 'Couva/Tabaquite/Talparo',
            },
            {
                code: 'TD15',
                name: 'Diego Martin',
            },
            {
                code: 'TD11',
                name: 'Eastern Tobago',
            },
            {
                code: 'TD16',
                name: 'Mayaro/Rio Claro',
            },
            {
                code: 'TD17',
                name: 'Penal/Debe',
            },
            {
                code: 'TD18',
                name: 'Point Fortin',
            },
            {
                code: 'TD05',
                name: 'Port of Spain',
            },
            {
                code: 'TD19',
                name: 'Princes Town',
            },
            {
                code: 'TD10',
                name: 'San Fernando',
            },
            {
                code: 'TD20',
                name: 'San Juan/Laventille',
            },
            {
                code: 'TD21',
                name: 'Sangre Grande',
            },
            {
                code: 'TD22',
                name: 'Siparia',
            },
            {
                code: 'TD23',
                name: 'Tunapuna/Piarco',
            },
            {
                code: 'TD11',
                name: 'Western Tobago',
            },
        ],
    },
    {
        code: 'TN',
        id: 2353,
        name: 'Tunisia',
        states: [
            {
                code: 'TS38',
                name: 'Ariana',
            },
            {
                code: 'TS17',
                name: 'Béja',
            },
            {
                code: 'TS27',
                name: 'Ben Arous',
            },
            {
                code: 'TS18',
                name: 'Bizerte',
            },
            {
                code: 'TS29',
                name: 'Gabès',
            },
            {
                code: 'TS30',
                name: 'Gafsa',
            },
            {
                code: 'TS06',
                name: 'Jendouba',
            },
            {
                code: 'TS03',
                name: 'Kairouan',
            },
            {
                code: 'TS02',
                name: 'Kassérine',
            },
            {
                code: 'TS31',
                name: 'Kebili',
            },
            {
                code: 'TS14',
                name: 'Le Kef',
            },
            {
                code: 'TS15',
                name: 'Mahdia',
            },
            {
                code: 'TS39',
                name: 'Manouba',
            },
            {
                code: 'TS28',
                name: 'Médenine',
            },
            {
                code: 'TS16',
                name: 'Monastir',
            },
            {
                code: 'TS19',
                name: 'Nabeul',
            },
            {
                code: 'TS32',
                name: 'Sfax',
            },
            {
                code: 'TS33',
                name: 'Sidi Bou Zid',
            },
            {
                code: 'TS22',
                name: 'Siliana',
            },
            {
                code: 'TS23',
                name: 'Sousse',
            },
            {
                code: 'TS34',
                name: 'Tataouine',
            },
            {
                code: 'TS35',
                name: 'Tozeur',
            },
            {
                code: 'TS36',
                name: 'Tunis',
            },
            {
                code: 'TS37',
                name: 'Zaghouan',
            },
        ],
    },
    {
        code: 'TR',
        id: 2354,
        name: 'Turkey',
        states: [
            {
                code: 'TU81',
                name: 'Adana',
            },
            {
                code: 'TU02',
                name: 'Adiyaman',
            },
            {
                code: 'TU03',
                name: 'Afyonkarahisar',
            },
            {
                code: 'TU04',
                name: 'Agri',
            },
            {
                code: 'TU75',
                name: 'Aksaray',
            },
            {
                code: 'TU05',
                name: 'Amasya',
            },
            {
                code: 'TU68',
                name: 'Ankara',
            },
            {
                code: 'TU07',
                name: 'Antalya',
            },
            {
                code: 'TU86',
                name: 'Ardahan',
            },
            {
                code: 'TU08',
                name: 'Artvin',
            },
            {
                code: 'TU09',
                name: 'Aydin',
            },
            {
                code: 'TU10',
                name: 'Balikesir',
            },
            {
                code: 'TU87',
                name: 'Bartin',
            },
            {
                code: 'TU76',
                name: 'Batman',
            },
            {
                code: 'TU77',
                name: 'Bayburt',
            },
            {
                code: 'TU11',
                name: 'Bilecik',
            },
            {
                code: 'TU12',
                name: 'Bingöl',
            },
            {
                code: 'TU13',
                name: 'Bitlis',
            },
            {
                code: 'TU14',
                name: 'Bolu',
            },
            {
                code: 'TU15',
                name: 'Burdur',
            },
            {
                code: 'TU16',
                name: 'Bursa',
            },
            {
                code: 'TU17',
                name: 'Çanakkale',
            },
            {
                code: 'TU82',
                name: 'Çankiri',
            },
            {
                code: 'TU19',
                name: 'Çorum',
            },
            {
                code: 'TU20',
                name: 'Denizli',
            },
            {
                code: 'TU21',
                name: 'Diyarbakir',
            },
            {
                code: 'TU93',
                name: 'Düzce',
            },
            {
                code: 'TU22',
                name: 'Edirne',
            },
            {
                code: 'TU23',
                name: 'Elazig',
            },
            {
                code: 'TU24',
                name: 'Erzincan',
            },
            {
                code: 'TU25',
                name: 'Erzurum',
            },
            {
                code: 'TU26',
                name: 'Eskisehir',
            },
            {
                code: 'TU83',
                name: 'Gaziantep',
            },
            {
                code: 'TU28',
                name: 'Giresun',
            },
            {
                code: 'TU69',
                name: 'Gümüshane',
            },
            {
                code: 'TU70',
                name: 'Hakkari',
            },
            {
                code: 'TU31',
                name: 'Hatay',
            },
            {
                code: 'TU88',
                name: 'Igdir',
            },
            {
                code: 'TU33',
                name: 'Isparta',
            },
            {
                code: 'TU34',
                name: 'Istanbul',
            },
            {
                code: 'TU35',
                name: 'Izmir',
            },
            {
                code: 'TU46',
                name: 'Kahramanmaras',
            },
            {
                code: 'TU89',
                name: 'Karabük',
            },
            {
                code: 'TU78',
                name: 'Karaman',
            },
            {
                code: 'TU84',
                name: 'Kars',
            },
            {
                code: 'TU37',
                name: 'Kastamonu',
            },
            {
                code: 'TU38',
                name: 'Kayseri',
            },
            {
                code: 'TU90',
                name: 'Kilis',
            },
            {
                code: 'TU79',
                name: 'Kirikkale',
            },
            {
                code: 'TU39',
                name: 'Kirklareli',
            },
            {
                code: 'TU40',
                name: 'Kirsehir',
            },
            {
                code: 'TU41',
                name: 'Kocaeli',
            },
            {
                code: 'TU71',
                name: 'Konya',
            },
            {
                code: 'TU43',
                name: 'Kütahya',
            },
            {
                code: 'TU44',
                name: 'Malatya',
            },
            {
                code: 'TU45',
                name: 'Manisa',
            },
            {
                code: 'TU72',
                name: 'Mardin',
            },
            {
                code: 'TU32',
                name: 'Mersin',
            },
            {
                code: 'TU48',
                name: 'Mugla',
            },
            {
                code: 'TU49',
                name: 'Mus',
            },
            {
                code: 'TU50',
                name: 'Nevsehir',
            },
            {
                code: 'TU73',
                name: 'Nigde',
            },
            {
                code: 'TU52',
                name: 'Ordu',
            },
            {
                code: 'TU91',
                name: 'Osmaniye',
            },
            {
                code: 'TU53',
                name: 'Rize',
            },
            {
                code: 'TU54',
                name: 'Sakarya',
            },
            {
                code: 'TU55',
                name: 'Samsun',
            },
            {
                code: 'TU63',
                name: 'Sanliurfa',
            },
            {
                code: 'TU74',
                name: 'Siirt',
            },
            {
                code: 'TU57',
                name: 'Sinop',
            },
            {
                code: 'TU80',
                name: 'Sirnak',
            },
            {
                code: 'TU58',
                name: 'Sivas',
            },
            {
                code: 'TU59',
                name: 'Tekirdag',
            },
            {
                code: 'TU60',
                name: 'Tokat',
            },
            {
                code: 'TU61',
                name: 'Trabzon',
            },
            {
                code: 'TU62',
                name: 'Tunceli',
            },
            {
                code: 'TU64',
                name: 'Usak',
            },
            {
                code: 'TU65',
                name: 'Van',
            },
            {
                code: 'TU92',
                name: 'Yalova',
            },
            {
                code: 'TU66',
                name: 'Yozgat',
            },
            {
                code: 'TU85',
                name: 'Zonguldak',
            },
        ],
    },
    {
        code: 'TM',
        id: 2355,
        name: 'Turkmenistan',
        states: [
            {
                code: 'TX01',
                name: 'Ahal',
            },
            {
                code: 'TM.AB',
                name: 'Ashgabat',
            },
            {
                code: 'TX02',
                name: 'Balkan',
            },
            {
                code: 'TX03',
                name: 'Dashoguz',
            },
            {
                code: 'TX04',
                name: 'Lebap',
            },
            {
                code: 'TX05',
                name: 'Mary',
            },
        ],
    },
    {
        code: 'TC',
        id: 2439,
        name: 'Turks and Caicos Islands',
        states: [],
    },
    {
        code: 'TV',
        id: 2440,
        name: 'Tuvalu',
        states: [],
    },
    {
        code: 'UG',
        id: 2356,
        name: 'Uganda',
        states: [
            {
                code: 'UG.AI',
                name: 'Abim',
            },
            {
                code: 'UG.AD',
                name: 'Adjumani',
            },
            {
                code: 'UG.AG',
                name: 'Agago',
            },
            {
                code: 'UG.AL',
                name: 'Alebtong',
            },
            {
                code: 'UG.AT',
                name: 'Amolatar',
            },
            {
                code: 'UG.AZ',
                name: 'Amudat',
            },
            {
                code: 'UG.AM',
                name: 'Amuria',
            },
            {
                code: 'UG.AY',
                name: 'Amuru',
            },
            {
                code: 'UG.AQ',
                name: 'Apac',
            },
            {
                code: 'UG.AX',
                name: 'Arua',
            },
            {
                code: 'UG.BD',
                name: 'Budaka',
            },
            {
                code: 'UG.BA',
                name: 'Bududa',
            },
            {
                code: 'UG.BI',
                name: 'Bugiri',
            },
            {
                code: 'UG.BH',
                name: 'Buhweju',
            },
            {
                code: 'UG.BZ',
                name: 'Buikwe',
            },
            {
                code: 'UG.BE',
                name: 'Bukedea',
            },
            {
                code: 'UG.BM',
                name: 'Bukomansimbi',
            },
            {
                code: 'UG.BW',
                name: 'Bukwo',
            },
            {
                code: 'UG.BB',
                name: 'Bulambuli',
            },
            {
                code: 'UG.BL',
                name: 'Buliisa',
            },
            {
                code: 'UG.BX',
                name: 'Bundibugyo',
            },
            {
                code: 'UG.BC',
                name: 'Bushenyi',
            },
            {
                code: 'UG.BU',
                name: 'Busia',
            },
            {
                code: 'UG.BJ',
                name: 'Butaleja',
            },
            {
                code: 'UG.BT',
                name: 'Butambala',
            },
            {
                code: 'UG.BV',
                name: 'Buvuma',
            },
            {
                code: 'UG.BY',
                name: 'Buyende',
            },
            {
                code: 'UG.DO',
                name: 'Dokolo',
            },
            {
                code: 'UG.GM',
                name: 'Gomba',
            },
            {
                code: 'UG.GL',
                name: 'Gulu',
            },
            {
                code: 'UG.HO',
                name: 'Hoima',
            },
            {
                code: 'UG.IB',
                name: 'Ibanda',
            },
            {
                code: 'UG.IC',
                name: 'Iganga',
            },
            {
                code: 'UG.NG',
                name: 'Isingiro',
            },
            {
                code: 'UG.JI',
                name: 'Jinja',
            },
            {
                code: 'UG.AB',
                name: 'Kaabong',
            },
            {
                code: 'UG.KA',
                name: 'Kabale',
            },
            {
                code: 'UG.BR',
                name: 'Kabarole',
            },
            {
                code: 'UG.KD',
                name: 'Kaberamaido',
            },
            {
                code: 'UG.KN',
                name: 'Kalangala',
            },
            {
                code: 'UG.RO',
                name: 'Kaliro',
            },
            {
                code: 'UG.QA',
                name: 'Kalungu',
            },
            {
                code: 'UG.KM',
                name: 'Kampala',
            },
            {
                code: 'UG.QU',
                name: 'Kamuli',
            },
            {
                code: 'UG.KE',
                name: 'Kamwenge',
            },
            {
                code: 'UG.UU',
                name: 'Kanungu',
            },
            {
                code: 'UG.QP',
                name: 'Kapchorwa',
            },
            {
                code: 'UG.KS',
                name: 'Kasese',
            },
            {
                code: 'UG.KK',
                name: 'Katakwi',
            },
            {
                code: 'UG.KY',
                name: 'Kayunga',
            },
            {
                code: 'UG.KI',
                name: 'Kibaale',
            },
            {
                code: 'UG.QO',
                name: 'Kiboga',
            },
            {
                code: 'UG.QB',
                name: 'Kibuku',
            },
            {
                code: 'UG.KH',
                name: 'Kiruhuura',
            },
            {
                code: 'UG.QD',
                name: 'Kiryandongo',
            },
            {
                code: 'UG.KR',
                name: 'Kisoro',
            },
            {
                code: 'UG.QT',
                name: 'Kitgum',
            },
            {
                code: 'UG.OK',
                name: 'Koboko',
            },
            {
                code: 'UG.QL',
                name: 'Kole',
            },
            {
                code: 'UG.KF',
                name: 'Kotido',
            },
            {
                code: 'UG.QM',
                name: 'Kumi',
            },
            {
                code: 'UG.QW',
                name: 'Kween',
            },
            {
                code: 'UG.QZ',
                name: 'Kyankwanzi',
            },
            {
                code: 'UG.QG',
                name: 'Kyegegwa',
            },
            {
                code: 'UG.QJ',
                name: 'Kyenjojo',
            },
            {
                code: 'UG.LM',
                name: 'Lamwo',
            },
            {
                code: 'UG.LL',
                name: 'Lira',
            },
            {
                code: 'UG.LK',
                name: 'Luuka',
            },
            {
                code: 'UG.LW',
                name: 'Luwero',
            },
            {
                code: 'UG.LE',
                name: 'Lwengo',
            },
            {
                code: 'UG.LY',
                name: 'Lyantonde',
            },
            {
                code: 'UG.MW',
                name: 'Manafwa',
            },
            {
                code: 'UG.MQ',
                name: 'Masaka',
            },
            {
                code: 'UG.MZ',
                name: 'Masindi',
            },
            {
                code: 'UG.MG',
                name: 'Mayuge',
            },
            {
                code: 'UG.ME',
                name: 'Mbale',
            },
            {
                code: 'UG.RR',
                name: 'Mbarara',
            },
            {
                code: 'UG.MM',
                name: 'Mitoma',
            },
            {
                code: 'UG.TY',
                name: 'Mityana',
            },
            {
                code: 'UG.MX',
                name: 'Moroto',
            },
            {
                code: 'UG.MY',
                name: 'Moyo',
            },
            {
                code: 'UG.MJ',
                name: 'Mpigi',
            },
            {
                code: 'UG.MD',
                name: 'Mubende',
            },
            {
                code: 'UG.MV',
                name: 'Mukono',
            },
            {
                code: 'UG.NI',
                name: 'Nakapiripirit',
            },
            {
                code: 'UG.NK',
                name: 'Nakaseke',
            },
            {
                code: 'UG.NA',
                name: 'Nakasongola',
            },
            {
                code: 'UG.NY',
                name: 'Namayingo',
            },
            {
                code: 'UG.BK',
                name: 'Namutumba',
            },
            {
                code: 'UG.NQ',
                name: 'Napak',
            },
            {
                code: 'UG.NB',
                name: 'Nebbi',
            },
            {
                code: 'UG.NR',
                name: 'Ngora',
            },
            {
                code: 'UG.NO',
                name: 'Ntoroko',
            },
            {
                code: 'UG.NT',
                name: 'Ntungamo',
            },
            {
                code: 'UG.NW',
                name: 'Nwoya',
            },
            {
                code: 'UG.MH',
                name: 'Nyadri',
            },
            {
                code: 'UG.OT',
                name: 'Otuke',
            },
            {
                code: 'UG.OY',
                name: 'Oyam',
            },
            {
                code: 'UG.PR',
                name: 'Pader',
            },
            {
                code: 'UG.PS',
                name: 'Pallisa',
            },
            {
                code: 'UG.RI',
                name: 'Rakai',
            },
            {
                code: 'UG.RZ',
                name: 'Rubirizi',
            },
            {
                code: 'UG.RK',
                name: 'Rukungiri',
            },
            {
                code: 'UG.SE',
                name: 'Sembabule',
            },
            {
                code: 'UG.SX',
                name: 'Serere',
            },
            {
                code: 'UG.SH',
                name: 'Sheema',
            },
            {
                code: 'UG.SK',
                name: 'Sironko',
            },
            {
                code: 'UG.ST',
                name: 'Soroti',
            },
            {
                code: 'UG.TR',
                name: 'Tororo',
            },
            {
                code: 'UG.WA',
                name: 'Wakiso',
            },
            {
                code: 'UG.YU',
                name: 'Yumbe',
            },
            {
                code: 'UG.ZO',
                name: 'Zombo',
            },
        ],
    },
    {
        code: 'UA',
        id: 2357,
        name: 'Ukraine',
        states: [
            {
                code: 'UP01',
                name: 'Cherkasy',
            },
            {
                code: 'UP02',
                name: 'Chernihiv',
            },
            {
                code: 'UP03',
                name: 'Chernivtsi',
            },
            {
                code: 'UP11',
                name: 'Crimea',
            },
            {
                code: 'UP04',
                name: "Dnipropetrovs'k",
            },
            {
                code: 'UP05',
                name: "Donets'k",
            },
            {
                code: 'UP06',
                name: "Ivano-Frankivs'k",
            },
            {
                code: 'UP07',
                name: 'Kharkiv',
            },
            {
                code: 'UP08',
                name: 'Kherson',
            },
            {
                code: 'UP09',
                name: "Khmel'nyts'kyy",
            },
            {
                code: 'UP13',
                name: 'Kiev',
            },
            {
                code: 'UP12',
                name: 'Kiev City',
            },
            {
                code: 'UP10',
                name: 'Kirovohrad',
            },
            {
                code: 'UP15',
                name: "L'viv",
            },
            {
                code: 'UP14',
                name: "Luhans'k",
            },
            {
                code: 'UP16',
                name: 'Mykolayiv',
            },
            {
                code: 'UP17',
                name: 'Odessa',
            },
            {
                code: 'UP18',
                name: 'Poltava',
            },
            {
                code: 'UP19',
                name: 'Rivne',
            },
            {
                code: 'UP20',
                name: "Sevastopol' City",
            },
            {
                code: 'UP21',
                name: 'Sumy',
            },
            {
                code: 'UP22',
                name: "Ternopil'",
            },
            {
                code: 'UP25',
                name: 'Transcarpathia',
            },
            {
                code: 'UP23',
                name: 'Vinnytsya',
            },
            {
                code: 'UP24',
                name: 'Volyn',
            },
            {
                code: 'UP26',
                name: 'Zaporizhzhya',
            },
            {
                code: 'UP27',
                name: 'Zhytomyr',
            },
        ],
    },
    {
        code: 'AE',
        id: 2358,
        name: 'United Arab Emirates',
        states: [
            {
                code: 'AE02',
                name: "'Ajman",
            },
            {
                code: 'AE01',
                name: 'Abu Dhabi',
            },
            {
                code: 'AE04',
                name: 'Al Fujayrah',
            },
            {
                code: 'AE03',
                name: 'Dubai',
            },
            {
                code: 'AE05',
                name: "Ra's al Khaymah",
            },
            {
                code: 'AE06',
                name: 'Sharjah',
            },
            {
                code: 'AE07',
                name: 'Umm al Qaywayn',
            },
        ],
    },
    {
        code: 'UM',
        id: 2441,
        name: 'United States Minor Outlying Islands',
        states: [],
    },
    {
        code: 'UY',
        id: 2360,
        name: 'Uruguay',
        states: [],
    },
    {
        code: 'UZ',
        id: 2361,
        name: 'Uzbekistan',
        states: [
            {
                code: 'UZ01',
                name: 'Andijon',
            },
            {
                code: 'UZ02',
                name: 'Buxoro',
            },
            {
                code: 'UZ03',
                name: 'Farg`ona',
            },
            {
                code: 'UZ15',
                name: 'Jizzax',
            },
            {
                code: 'UZ09',
                name: 'Karakalpakstan',
            },
            {
                code: 'UZ08',
                name: 'Kashkadarya',
            },
            {
                code: 'UZ06',
                name: 'Namangan',
            },
            {
                code: 'UZ07',
                name: 'Navoi',
            },
            {
                code: 'UZ10',
                name: 'Samarkand',
            },
            {
                code: 'UZ16',
                name: 'Sirdaryo',
            },
            {
                code: 'UZ12',
                name: 'Surxondaryo',
            },
            {
                code: 'UZ13',
                name: 'Tashkent City',
            },
            {
                code: 'UZ14',
                name: 'Tashkent',
            },
            {
                code: 'UZ05',
                name: 'Xorazm',
            },
        ],
    },
    {
        code: 'NH',
        id: 2406,
        name: 'Vanuatu',
        states: [],
    },
    {
        code: 'VE',
        id: 2363,
        name: 'Venezuela; Bolivarian Republic of',
        states: [
            {
                code: 'VE01',
                name: 'Amazonas',
            },
            {
                code: 'VE02',
                name: 'Anzoátegui',
            },
            {
                code: 'VE03',
                name: 'Apure',
            },
            {
                code: 'VE04',
                name: 'Aragua',
            },
            {
                code: 'VE05',
                name: 'Barinas',
            },
            {
                code: 'VE06',
                name: 'Bolívar',
            },
            {
                code: 'VE07',
                name: 'Carabobo',
            },
            {
                code: 'VE08',
                name: 'Cojedes',
            },
            {
                code: 'VE09',
                name: 'Delta Amacuro',
            },
            {
                code: 'VE24',
                name: 'Dependencias Federales',
            },
            {
                code: 'VE25',
                name: 'Distrito Capital',
            },
            {
                code: 'VE11',
                name: 'Falcón',
            },
            {
                code: 'VE12',
                name: 'Guárico',
            },
            {
                code: 'VE13',
                name: 'Lara',
            },
            {
                code: 'VE14',
                name: 'Mérida',
            },
            {
                code: 'VE15',
                name: 'Miranda',
            },
            {
                code: 'VE16',
                name: 'Monagas',
            },
            {
                code: 'VE17',
                name: 'Nueva Esparta',
            },
            {
                code: 'VE18',
                name: 'Portuguesa',
            },
            {
                code: 'VE19',
                name: 'Sucre',
            },
            {
                code: 'VE20',
                name: 'Táchira',
            },
            {
                code: 'VE21',
                name: 'Trujillo',
            },
            {
                code: 'VE26',
                name: 'Vargas',
            },
            {
                code: 'VE22',
                name: 'Yaracuy',
            },
            {
                code: 'VE23',
                name: 'Zulia',
            },
        ],
    },
    {
        code: 'VN',
        id: 2364,
        name: 'Vietnam',
        states: [
            {
                code: 'VM01',
                name: 'An Giang',
            },
            {
                code: 'VM45',
                name: 'Ba Ria-Vung Tau',
            },
            {
                code: 'VM72',
                name: 'Bac Can',
            },
            {
                code: 'VM71',
                name: 'Bac Giang',
            },
            {
                code: 'VM73',
                name: 'Bac Lieu',
            },
            {
                code: 'VM74',
                name: 'Bac Ninh',
            },
            {
                code: 'VM03',
                name: 'Ben Tre',
            },
            {
                code: 'VM46',
                name: 'Binh Dinh',
            },
            {
                code: 'VM75',
                name: 'Binh Duong',
            },
            {
                code: 'VM76',
                name: 'Binh Phuoc',
            },
            {
                code: 'VM47',
                name: 'Binh Thuan',
            },
            {
                code: 'VM77',
                name: 'Ca Mau',
            },
            {
                code: 'VM87',
                name: 'Can Tho',
            },
            {
                code: 'VM05',
                name: 'Cao Bang',
            },
            {
                code: 'VM78',
                name: 'Da Nang',
            },
            {
                code: 'VM88',
                name: 'Dac Lac',
            },
            {
                code: 'VM91',
                name: 'Dac Nong',
            },
            {
                code: 'VM92',
                name: 'Dien Bien',
            },
            {
                code: 'VM43',
                name: 'Dong Nai',
            },
            {
                code: 'VM09',
                name: 'Dong Thap',
            },
            {
                code: 'VM49',
                name: 'Gia Lai',
            },
            {
                code: 'VM50',
                name: 'Ha Giang',
            },
            {
                code: 'VM80',
                name: 'Ha Nam',
            },
            {
                code: 'VM52',
                name: 'Ha Tinh',
            },
            {
                code: 'VM79',
                name: 'Hai Duong',
            },
            {
                code: 'VM13',
                name: 'Haiphong',
            },
            {
                code: 'VM44',
                name: 'Hanoi',
            },
            {
                code: 'VM93',
                name: 'Hau Giang',
            },
            {
                code: 'VM20',
                name: 'Ho Chi Minh',
            },
            {
                code: 'VM53',
                name: 'Hoa Binh',
            },
            {
                code: 'VM81',
                name: 'Hung Yen',
            },
            {
                code: 'VM54',
                name: 'Khanh Hoa',
            },
            {
                code: 'VM21',
                name: 'Kien Giang',
            },
            {
                code: 'VM55',
                name: 'Kon Tum',
            },
            {
                code: 'VM89',
                name: 'Lai Chau',
            },
            {
                code: 'VM23',
                name: 'Lam Dong',
            },
            {
                code: 'VM39',
                name: 'Lang Son',
            },
            {
                code: 'VM90',
                name: 'Lao Cai',
            },
            {
                code: 'VM24',
                name: 'Long An',
            },
            {
                code: 'VM82',
                name: 'Nam Dinh',
            },
            {
                code: 'VM58',
                name: 'Nghe An',
            },
            {
                code: 'VM59',
                name: 'Ninh Binh',
            },
            {
                code: 'VM60',
                name: 'Ninh Thuan',
            },
            {
                code: 'VM83',
                name: 'Phu Tho',
            },
            {
                code: 'VM61',
                name: 'Phu Yen',
            },
            {
                code: 'VM62',
                name: 'Quang Binh',
            },
            {
                code: 'VM84',
                name: 'Quang Nam',
            },
            {
                code: 'VM63',
                name: 'Quang Ngai',
            },
            {
                code: 'VM30',
                name: 'Quang Ninh',
            },
            {
                code: 'VM64',
                name: 'Quang Tri',
            },
            {
                code: 'VM65',
                name: 'Soc Trang',
            },
            {
                code: 'VM32',
                name: 'Son La',
            },
            {
                code: 'VM33',
                name: 'Tay Ninh',
            },
            {
                code: 'VM35',
                name: 'Thai Binh',
            },
            {
                code: 'VM85',
                name: 'Thai Nguyen',
            },
            {
                code: 'VM34',
                name: 'Thanh Hoa',
            },
            {
                code: 'VM66',
                name: 'Thua Thien-Hue',
            },
            {
                code: 'VM37',
                name: 'Tien Giang',
            },
            {
                code: 'VM67',
                name: 'Tra Vinh',
            },
            {
                code: 'VM68',
                name: 'Tuyen Quang',
            },
            {
                code: 'VM69',
                name: 'Vinh Long',
            },
            {
                code: 'VM86',
                name: 'Vinh Phuc',
            },
            {
                code: 'VM70',
                name: 'Yen Bai',
            },
        ],
    },
    {
        code: 'VG',
        id: 2446,
        name: 'Virgin Islands; British',
        states: [
            {
                code: 'VG.VI',
                name: 'British Virgin Islands',
            },
        ],
    },
    {
        code: 'VI',
        id: 2442,
        name: 'Virgin Islands; U.S.',
        states: [
            {
                code: '010',
                name: 'Saint Croix',
            },
            {
                code: '020',
                name: 'Saint John',
            },
            {
                code: '030',
                name: 'Saint Thomas',
            },
        ],
    },
    {
        code: 'WF',
        id: 2443,
        name: 'Wallis and Futuna',
        states: [],
    },
    {
        code: 'EH',
        id: 2444,
        name: 'Western Sahara',
        states: [],
    },
    {
        code: 'YE',
        id: 2382,
        name: 'Yemen',
        states: [
            {
                code: 'YM01',
                name: 'Abyan',
            },
            {
                code: 'YM20',
                name: "Al Bayda'",
            },
            {
                code: 'YM18',
                name: "Al Dali'",
            },
            {
                code: 'YM08',
                name: 'Al Hudaydah',
            },
            {
                code: 'YM21',
                name: 'Al Jawf',
            },
            {
                code: 'YM03',
                name: 'Al Mahrah',
            },
            {
                code: 'YM10',
                name: 'Al Mahwit',
            },
            {
                code: 'YM19',
                name: 'Amran',
            },
            {
                code: 'YM11',
                name: 'Dhamar',
            },
            {
                code: 'YM04',
                name: 'Hadramawt',
            },
            {
                code: 'YM22',
                name: 'Hajjah',
            },
            {
                code: 'YM23',
                name: 'Ibb',
            },
            {
                code: 'YM24',
                name: 'Lahij',
            },
            {
                code: 'YM14',
                name: "Ma'rib",
            },
            {
                code: 'YM27',
                name: 'Raymah',
            },
            {
                code: 'YM15',
                name: 'Sa`dah',
            },
            {
                code: 'YM16',
                name: "San`a'",
            },
            {
                code: 'YM26',
                name: "San`a' [City]",
            },
            {
                code: 'YM05',
                name: 'Shabwah',
            },
            {
                code: 'YM28',
                name: 'Socotra',
            },
            {
                code: 'YM25',
                name: 'Ta`izz',
            },
            {
                code: 'YM02',
                name: '`Adan',
            },
        ],
    },
    {
        code: 'ZM',
        id: 2369,
        name: 'Zambia',
        states: [
            {
                code: 'ZA02',
                name: 'Central',
            },
            {
                code: 'ZA08',
                name: 'Copperbelt',
            },
            {
                code: 'ZA03',
                name: 'Eastern',
            },
            {
                code: 'ZA04',
                name: 'Luapula',
            },
            {
                code: 'ZA09',
                name: 'Lusaka',
            },
            {
                code: 'ZA10',
                name: 'Muchinga',
            },
            {
                code: 'ZA06',
                name: 'North-Western',
            },
            {
                code: 'ZA05',
                name: 'Northern',
            },
            {
                code: 'ZA07',
                name: 'Southern',
            },
            {
                code: 'ZA01',
                name: 'Western',
            },
        ],
    },
    {
        code: 'ZW',
        id: 2370,
        name: 'Zimbabwe',
        states: [
            {
                code: 'ZI09',
                name: 'Bulawayo',
            },
            {
                code: 'ZI10',
                name: 'Harare',
            },
            {
                code: 'ZI01',
                name: 'Manicaland',
            },
            {
                code: 'ZI03',
                name: 'Mashonaland Central',
            },
            {
                code: 'ZI04',
                name: 'Mashonaland East',
            },
            {
                code: 'ZI05',
                name: 'Mashonaland West',
            },
            {
                code: 'ZI08',
                name: 'Masvingo',
            },
            {
                code: 'ZI06',
                name: 'Matabeleland North',
            },
            {
                code: 'ZI07',
                name: 'Matabeleland South',
            },
            {
                code: 'ZI02',
                name: 'Midlands',
            },
        ],
    },
    {
        code: 'NONE',
        id: 2378,
        name: '- None Specified -',
        states: [],
    },
];
/**
 * Gets all countries
 * @return {?}
 */
function getCountries() {
    return COUNTRIES.map((/**
     * @param {?} country
     * @return {?}
     */
    (country) => country.name));
}
/**
 * Gets a country by country ID
 * @param {?} id
 * @return {?}
 */
function findByCountryId(id) {
    return COUNTRIES.find((/**
     * @param {?} country
     * @return {?}
     */
    (country) => country.id === id));
}
/**
 * Gets a country by country name
 * @param {?} name - Name of country to find
 * @return {?}
 */
function findByCountryName(name) {
    return COUNTRIES.find((/**
     * @param {?} country
     * @return {?}
     */
    (country) => country.name === name.trim()));
}
/**
 * Gets a country by country code
 * @param {?} code - Code of country to find
 * @return {?}
 */
function findByCountryCode(code) {
    return COUNTRIES.find((/**
     * @param {?} country
     * @return {?}
     */
    (country) => country.code === code.trim()));
}
/**
 * Gets states by country name
 * @param {?} name - Name of the country to search by
 * @return {?}
 */
function getStateObjects(name) {
    if (name) {
        /** @type {?} */
        const foundCountry = COUNTRIES.find((/**
         * @param {?} country
         * @return {?}
         */
        (country) => country.name === name.trim()));
        return (foundCountry && foundCountry.states) || [];
    }
    return [];
}
/**
 * Gets state names by country name
 * @param {?} name - Name of the country to search by
 * @return {?}
 */
function getStates(name) {
    return getStateObjects(name).map((/**
     * @param {?} state
     * @return {?}
     */
    (state) => state.name));
}

/**
 * @fileoverview added by tsickle
 * Generated from: elements/form/extras/address/Address.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// Value accessor for the component (supports ngModel)
/** @type {?} */
const ADDRESS_VALUE_ACCESSOR = {
    provide: _angular_forms__WEBPACK_IMPORTED_MODULE_1__["NG_VALUE_ACCESSOR"],
    useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["forwardRef"])((/**
     * @return {?}
     */
    () => NovoAddressElement)),
    multi: true,
};
/**
 * @record
 */
function NovoAddressSubfieldConfig() { }
if (false) {}
/**
 * @record
 */
function NovoAddressConfig() { }
if (false) {}
class NovoAddressElement {
    /**
     * @param {?} labels
     */
    constructor(labels) {
        this.labels = labels;
        this._readOnly = false;
        this.states = [];
        this.fieldList = ['address1', 'address2', 'city', 'state', 'zip', 'countryID'];
        this.onModelChange = (/**
         * @return {?}
         */
        () => { });
        this.onModelTouched = (/**
         * @return {?}
         */
        () => { });
        this.focused = {};
        this.invalid = {};
        this.disabled = {};
        this.invalidMaxlength = {};
        this.valid = {};
        this.tooltip = {};
        this.initComplete = false;
        this.change = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.focus = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.blur = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.validityChange = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
    }
    /**
     * @param {?} readOnly
     * @return {?}
     */
    set readOnly(readOnly) {
        this._readOnly = readOnly;
        this.fieldList.forEach((/**
         * @param {?} field
         * @return {?}
         */
        (field) => {
            this.disabled[field] = this._readOnly;
        }));
        if (this.model) {
            this.updateStates();
        }
    }
    /**
     * @return {?}
     */
    get readOnly() {
        return this._readOnly;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (!this.config) {
            this.config = {};
        }
        if (this.model) {
            this.writeValue(this.model);
            this.updateControl();
        }
        else if (!this.model) {
            this.model = {};
        }
        this.initConfig();
        if (Helpers.isBlank(this.model.countryID)) {
            this.updateStates();
        }
    }
    /**
     * @return {?}
     */
    initConfig() {
        this.fieldList.forEach((/**
         * @param {?} field
         * @return {?}
         */
        (field) => {
            if (!this.config.hasOwnProperty(field)) {
                this.config[field] = {
                    hidden: true,
                };
            }
            if (!this.config[field].hasOwnProperty('label')) {
                this.config[field].label = this.labels[field];
            }
            if (this.config.required) {
                this.config[field].required = true;
            }
            if (this.config[field].readOnly || this.config.readOnly) {
                this.config[field].readOnly = true;
                this.disabled[field] = true;
            }
            if (field === 'countryID') {
                if (!this.config[field].pickerConfig) {
                    this.config.countryID.pickerConfig = this.getDefaultCountryConfig();
                }
                this.config[field].pickerConfig.defaultOptions = this.config.countryID.pickerConfig.options;
            }
            if (field === 'state') {
                if (!this.config[field].pickerConfig) {
                    this.config.state.pickerConfig = this.getDefaultStateConfig();
                    this.config[field].pickerConfig.defaultOptions = this.config[field].pickerConfig.options;
                }
                this.stateOptions = this.config[field].pickerConfig.options;
                this.config[field].pickerConfig.options = (/**
                 * @param {?=} query
                 * @return {?}
                 */
                (query = '') => {
                    return this.stateOptions(query, this.model.countryID);
                });
                this.config[field].pickerConfig.defaultOptions = this.stateOptions;
            }
        }));
    }
    /**
     * @param {?} field
     * @return {?}
     */
    isValid(field) {
        /** @type {?} */
        let valid = true;
        if (((this.config[field].required && (Helpers.isBlank(this.model[field]) || Helpers.isEmpty(this.model[field]))) ||
            !this.config[field].required) &&
            !(field === 'countryID' && this.config[field].required && !Helpers.isBlank(this.model.countryID)) &&
            !(field === 'state' &&
                this.config[field].required &&
                (!Helpers.isEmpty(this.model.state) ||
                    ((Helpers.isBlank(this.model.state) || Helpers.isEmpty(this.model.state)) &&
                        !Helpers.isBlank(this.model.countryName) &&
                        this.config.state.pickerConfig &&
                        this.config.state.pickerConfig.defaultOptions &&
                        this.config.state.pickerConfig.defaultOptions.length === 0)))) {
            valid = false;
        }
        else if (!Helpers.isEmpty(this.model[field]) &&
            !Helpers.isBlank(this.config[field].maxlength) &&
            this.config[field].maxlength < this.model[field].length) {
            valid = false;
        }
        this.valid[field] = valid;
    }
    /**
     * @param {?} field
     * @return {?}
     */
    isInvalid(field) {
        /** @type {?} */
        let invalid = false;
        /** @type {?} */
        let invalidMaxlength = false;
        if ((field !== 'countryID' &&
            field !== 'state' &&
            this.config[field].required &&
            Helpers.isEmpty(this.model[field]) &&
            !Helpers.isBlank(this.model[field])) ||
            (field === 'countryID' && this.config[field].required && Helpers.isBlank(this.model.countryName) && this.config[field].updated) ||
            (field === 'state' &&
                this.config[field].required &&
                (Helpers.isBlank(this.model.state) || Helpers.isEmpty(this.model.state)) &&
                !Helpers.isBlank(this.model.countryID) &&
                this.config[field].updated &&
                this.config.state.pickerConfig &&
                this.config.state.pickerConfig.defaultOptions &&
                this.config.state.pickerConfig.defaultOptions.length > 0)) {
            invalid = true;
        }
        else if (!Helpers.isEmpty(this.model[field]) &&
            !Helpers.isBlank(this.config[field].maxlength) &&
            this.config[field].maxlength < this.model[field].length) {
            invalid = true;
            invalidMaxlength = true;
        }
        this.invalid[field] = invalid;
        this.invalidMaxlength[field] = invalidMaxlength;
    }
    /**
     * @param {?} event
     * @param {?} field
     * @return {?}
     */
    onInput(event, field) {
        this.isInvalid(field);
        this.isValid(field);
        if (event) {
            this.change.emit({ value: this.model[field], field });
        }
    }
    /**
     * @param {?} event
     * @param {?} field
     * @return {?}
     */
    isFocused(event, field) {
        this.focused[field] = true;
        this.focus.emit({ event, field });
    }
    /**
     * @param {?} event
     * @param {?} field
     * @return {?}
     */
    isBlurred(event, field) {
        this.focused[field] = false;
        this.blur.emit({ event, field });
    }
    /**
     * @param {?} evt
     * @return {?}
     */
    onCountryChange(evt) {
        /** @type {?} */
        const country = evt && evt.rawValue ? evt.rawValue : null;
        /** @type {?} */
        let field;
        /** @type {?} */
        let statesUpdatable = false;
        this.config.countryID.updated = true;
        if (this.config.countryID.pickerConfig) {
            field = this.config.countryID.pickerConfig.field;
        }
        if (country && field && !Helpers.isBlank(country[field]) && this.model.countryID !== country[field]) {
            this.model.countryID = country[field];
            this.model.countryName = Helpers.interpolate(this.config.countryID.pickerConfig.format, country);
            this.disabled.state = false;
            this.tooltip.state = undefined;
            statesUpdatable = true;
        }
        else if (Helpers.isBlank(country) || Helpers.isBlank(country[field])) {
            this.model.countryID = undefined;
            this.model.countryName = undefined;
            this.disabled.state = true;
            this.tooltip.state = this.labels.selectCountryFirst;
            this.invalid.state = false;
            statesUpdatable = true;
        }
        // Update state
        if (statesUpdatable) {
            this.model.state = undefined;
            this.updateStates();
        }
        this.updateControl();
        this.onInput(null, 'countryID');
        this.onInput(null, 'state');
    }
    /**
     * @param {?} evt
     * @return {?}
     */
    onStateChange(evt) {
        /** @type {?} */
        const state = evt && evt.value ? evt.value : null;
        this.config.state.updated = true;
        this.model.state = state;
        this.updateControl();
        this.onInput(null, 'state');
    }
    /**
     * @param {?} model
     * @return {?}
     */
    setStateLabel(model) {
        /** @type {?} */
        const state = model.state;
        if (!Helpers.isBlank(state)) {
            if (this.config.state.required) {
                this.valid.state = true;
            }
            this.model.state = state;
        }
        else {
            this.model.state = undefined;
            if (this.config.state.required) {
                this.valid.state = false;
            }
        }
    }
    /**
     * @return {?}
     */
    updateStates() {
        if (this.config.state.pickerConfig.options && !Helpers.isBlank(this.model.countryID)) {
            this.config.state.pickerConfig.options = (/**
             * @param {?=} query
             * @return {?}
             */
            (query = '') => {
                return this.stateOptions(query, this.model.countryID);
            });
            this.stateOptions('', this.model.countryID).then((/**
             * @param {?} results
             * @return {?}
             */
            (results) => {
                this.config.state.pickerConfig.defaultOptions = results;
                if (results.length) {
                    this.tooltip.state = undefined;
                    this.disabled.state = this._readOnly;
                    this.setStateLabel(this.model);
                }
                else {
                    this.disabled.state = true;
                    this.tooltip.state = this.labels.noStatesForCountry;
                    if (this.config.state.required) {
                        this.valid.state = true;
                    }
                }
                this.validityChange.emit();
                this.onInput(null, 'state');
            }));
        }
        else {
            this.config.state.pickerConfig.defaultOptions = [];
            this.disabled.state = true;
            this.tooltip.state = this.labels.selectCountryFirst;
            if (this.config.state.required) {
                this.valid.state = false;
            }
        }
    }
    /**
     * @param {?=} filter
     * @param {?=} countryID
     * @return {?}
     */
    getStateOptions(filter = '', countryID) {
        if (countryID) {
            /** @type {?} */
            const country = findByCountryId(countryID);
            /** @type {?} */
            const states = getStates(country.name);
            if (filter) {
                return states.filter((/**
                 * @param {?} name
                 * @return {?}
                 */
                (name) => new RegExp(`${filter}`, 'gi').test(name)));
            }
            return states;
        }
        else {
            return [];
        }
    }
    /**
     * @return {?}
     */
    updateControl() {
        this.onModelChange(this.model);
        this.onInput(null, 'countryID');
        this.onInput(null, 'state');
    }
    /**
     * @param {?} model
     * @return {?}
     */
    writeValue(model) {
        /** @type {?} */
        let loadingCountries = false;
        if (model) {
            /** @type {?} */
            let countryName;
            if (model.countryName && model.countryID) {
                countryName = model.countryName;
            }
            else if (model.countryID) {
                if (this.config.countryID.pickerConfig && this.config.countryID.pickerConfig.getLabels) {
                    if (Helpers.isFunction(this.config.countryID.pickerConfig.getLabels)) {
                        /** @type {?} */
                        const promise = this.config.countryID.pickerConfig.getLabels(model.countryID);
                        loadingCountries = true;
                        if (promise.then) {
                            promise.then((/**
                             * @param {?} result
                             * @return {?}
                             */
                            (result) => {
                                loadingCountries = false;
                                countryName = Helpers.interpolateWithFallback(this.config.countryID.pickerConfig.format, result);
                                this.model = Object.assign(model, { countryName });
                                this.updateStates();
                            }));
                        }
                    }
                }
            }
            if (countryName) {
                countryName = countryName.trim();
                model.state = model.state || '';
                this.model = Object.assign(model, { countryName });
            }
            else {
                this.model = model;
            }
            if (!loadingCountries && !Helpers.isBlank(this.model.countryID)) {
                this.updateStates();
            }
        }
        this.fieldList.forEach((/**
         * @param {?} field
         * @return {?}
         */
        (field) => {
            this.onInput(null, field);
        }));
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.onModelChange = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.onModelTouched = fn;
    }
    /**
     * @private
     * @return {?}
     */
    getDefaultStateConfig() {
        return {
            field: 'value',
            format: '$label',
            options: (/**
             * @param {?=} query
             * @param {?=} countryID
             * @return {?}
             */
            (query = '', countryID) => {
                return Promise.resolve(this.getStateOptions(query, countryID));
            }),
            getLabels: (/**
             * @param {?} state
             * @return {?}
             */
            (state) => {
                return Promise.resolve(state);
            }),
        };
    }
    /**
     * @private
     * @return {?}
     */
    getDefaultCountryConfig() {
        return {
            field: 'value',
            format: '$label',
            options: (/**
             * @param {?=} query
             * @return {?}
             */
            (query = '') => {
                return new Promise((/**
                 * @param {?} resolve
                 * @return {?}
                 */
                (resolve) => {
                    /** @type {?} */
                    let countries = COUNTRIES;
                    if (query) {
                        countries = countries.filter((/**
                         * @param {?} country
                         * @return {?}
                         */
                        (country) => new RegExp(`${query}`, 'gi').test(country.name)));
                    }
                    return resolve(countries.map((/**
                     * @param {?} country
                     * @return {?}
                     */
                    (country) => ({ value: country.id, label: country.name }))));
                }));
            }),
            getLabels: (/**
             * @param {?} countryID
             * @return {?}
             */
            (countryID) => {
                return new Promise((/**
                 * @param {?} resolve
                 * @return {?}
                 */
                (resolve) => {
                    /** @type {?} */
                    const country = findByCountryId(countryID);
                    if (country) {
                        resolve({ value: country.id, label: country.name });
                    }
                    else {
                        resolve('');
                    }
                }));
            }),
        };
    }
}
NovoAddressElement.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'novo-address',
                providers: [ADDRESS_VALUE_ACCESSOR],
                template: `
    <span
      *ngIf="!config?.address1?.hidden"
      class="street-address"
      [class.invalid]="invalid.address1"
      [class.focus]="focused.address1"
      [class.disabled]="disabled.address1"
    >
      <i
        *ngIf="config.address1.required"
        class="required-indicator address1"
        [ngClass]="{ 'bhi-circle': !valid.address1, 'bhi-check': valid.address1 }"
      >
      </i>
      <input
        [class.maxlength-error]="invalidMaxlength.address1"
        type="text"
        id="address1"
        name="address1"
        [placeholder]="config.address1.label"
        [maxlength]="config?.address1?.maxlength"
        autocomplete="shipping street-address address-line-1"
        [(ngModel)]="model.address1"
        (ngModelChange)="updateControl()"
        (focus)="isFocused($event, 'address1')"
        (blur)="isBlurred($event, 'address1')"
        (input)="onInput($event, 'address1')"
      />
    </span>
    <span
      *ngIf="!config?.address2?.hidden"
      class="apt suite"
      [class.invalid]="invalid.address2"
      [class.focus]="focused.address2"
      [class.disabled]="disabled.address2"
    >
      <i
        *ngIf="config.address2.required"
        class="required-indicator address2"
        [ngClass]="{ 'bhi-circle': !valid.address2, 'bhi-check': valid.address2 }"
      >
      </i>
      <input
        [class.maxlength-error]="invalidMaxlength.address2"
        type="text"
        id="address2"
        name="address2"
        [placeholder]="config.address2.label"
        [maxlength]="config?.address2?.maxlength"
        autocomplete="shipping address-line-2"
        [(ngModel)]="model.address2"
        (ngModelChange)="updateControl()"
        (focus)="isFocused($event, 'address2')"
        (blur)="isBlurred($event, 'address2')"
        (input)="onInput($event, 'address2')"
      />
    </span>
    <span
      *ngIf="!config?.city?.hidden"
      class="city locality"
      [class.invalid]="invalid.city"
      [class.focus]="focused.city"
      [class.disabled]="disabled.city"
    >
      <i *ngIf="config.city.required" class="required-indicator" [ngClass]="{ 'bhi-circle': !valid.city, 'bhi-check': valid.city }"> </i>
      <input
        [class.maxlength-error]="invalidMaxlength.city"
        type="text"
        id="city"
        name="city"
        [placeholder]="config.city.label"
        autocomplete="shipping city locality"
        [maxlength]="config?.city?.maxlength"
        [(ngModel)]="model.city"
        (ngModelChange)="updateControl()"
        (focus)="isFocused($event, 'city')"
        (blur)="isBlurred($event, 'city')"
        (input)="onInput($event, 'city')"
      />
    </span>
    <span
      *ngIf="!config?.state?.hidden"
      class="state region"
      [class.invalid]="invalid.state"
      [class.focus]="focused.state"
      [class.disabled]="disabled.state"
      [tooltip]="tooltip.state"
    >
      <i *ngIf="config.state.required" class="required-indicator" [ngClass]="{ 'bhi-circle': !valid.state, 'bhi-check': valid.state }"> </i>
      <novo-picker
        [config]="config?.state?.pickerConfig"
        [placeholder]="config?.state?.label"
        (changed)="onStateChange($event)"
        autocomplete="shipping region"
        [(ngModel)]="model.state"
        [disablePickerInput]="disabled.state"
      ></novo-picker>
    </span>
    <span
      *ngIf="!config?.zip?.hidden"
      class="zip postal-code"
      [class.invalid]="invalid.zip"
      [class.focus]="focused.zip"
      [class.disabled]="disabled.zip"
    >
      <i *ngIf="config.zip.required" class="required-indicator" [ngClass]="{ 'bhi-circle': !valid.zip, 'bhi-check': valid.zip }"> </i>
      <input
        [class.maxlength-error]="invalidMaxlength.zip"
        type="text"
        id="zip"
        name="zip"
        [placeholder]="config.zip.label"
        autocomplete="shipping postal-code"
        [maxlength]="config?.zip?.maxlength"
        [(ngModel)]="model.zip"
        (ngModelChange)="updateControl()"
        (focus)="isFocused($event, 'zip')"
        (blur)="isBlurred($event, 'zip')"
        (input)="onInput($event, 'zip')"
      />
    </span>
    <span
      *ngIf="!config?.countryID?.hidden"
      class="country-name"
      [class.invalid]="invalid.countryID"
      [class.focus]="focused.countryID"
      [class.disabled]="disabled.countryID"
    >
      <i
        *ngIf="config.countryID.required"
        class="required-indicator"
        [ngClass]="{ 'bhi-circle': !valid.countryID, 'bhi-check': valid.countryID }"
      >
      </i>
      <novo-picker
        [config]="config?.countryID?.pickerConfig"
        [placeholder]="config.countryID.label"
        (changed)="onCountryChange($event)"
        autocomplete="shipping country"
        [(ngModel)]="model.countryID"
        [disablePickerInput]="disabled.countryID"
      ></novo-picker>
    </span>
  `
            }] }
];
/** @nocollapse */
NovoAddressElement.ctorParameters = () => [
    { type: NovoLabelService }
];
NovoAddressElement.propDecorators = {
    config: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    readOnly: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    change: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    focus: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    blur: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    validityChange: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }]
};
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: elements/form/extras/checkbox/Checkbox.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// Value accessor for the component (supports ngModel)
/** @type {?} */
const CHECKBOX_VALUE_ACCESSOR = {
    provide: _angular_forms__WEBPACK_IMPORTED_MODULE_1__["NG_VALUE_ACCESSOR"],
    useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["forwardRef"])((/**
     * @return {?}
     */
    () => NovoCheckboxElement)),
    multi: true,
};
/** @type {?} */
const LAYOUT_DEFAULTS = { iconStyle: 'box' };
class NovoCheckboxElement {
    /**
     * @param {?} ref
     */
    constructor(ref) {
        this.ref = ref;
        this.indeterminate = false;
        this.disabled = false;
        // TODO - avoid configs like this
        this.onSelect = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.boxIcon = true;
        this.onModelChange = (/**
         * @return {?}
         */
        () => { });
        this.onModelTouched = (/**
         * @return {?}
         */
        () => { });
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.layoutOptions = Object.assign({}, LAYOUT_DEFAULTS, this.layoutOptions);
        this.boxIcon = this.layoutOptions.iconStyle === 'box';
    }
    /**
     * @param {?} event
     * @return {?}
     */
    select(event) {
        Helpers.swallowEvent(event);
        if (!this.disabled) {
            this.model = !this.model;
            this.onModelChange(this.model);
            this.onSelect.emit({ originalEvent: event, value: this.model });
        }
    }
    /**
     * @param {?} model
     * @return {?}
     */
    writeValue(model) {
        this.model = model;
        this.ref.markForCheck();
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.onModelChange = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.onModelTouched = fn;
    }
    /**
     * @param {?} disabled
     * @return {?}
     */
    setDisabledState(disabled) {
        this.disabled = disabled;
    }
}
NovoCheckboxElement.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'novo-checkbox',
                providers: [CHECKBOX_VALUE_ACCESSOR],
                template: `
    <div class="check-box-group" [class.checked]="model" [class.disabled]="disabled">
        <input [name]="name" type="checkbox" [(ngModel)]="model" [attr.id]="name" [disabled]="disabled">
        <label [attr.for]="name" (click)="select($event)" [class.disabled]="disabled">
          <i [class.bhi-checkbox-empty]="!model && !indeterminate && boxIcon"
              [class.bhi-checkbox-filled]="model && !indeterminate && boxIcon"
              [class.bhi-checkbox-indeterminate]="indeterminate && boxIcon"
              [class.bhi-circle-o]="!model && !indeterminate && !boxIcon"
              [class.bhi-check]="model && !indeterminate && !boxIcon"
              [class.bhi-circle]="indeterminate && !boxIcon"></i>
          <span *ngIf="label">{{ label }}</span>
        </label>
    </div>
  `
            }] }
];
/** @nocollapse */
NovoCheckboxElement.ctorParameters = () => [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectorRef"] }
];
NovoCheckboxElement.propDecorators = {
    name: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    label: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    indeterminate: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    disabled: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    layoutOptions: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    onSelect: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }]
};
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: elements/form/extras/checkbox/CheckList.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// Value accessor for the component (supports ngModel)
/** @type {?} */
const CHECKLIST_VALUE_ACCESSOR = {
    provide: _angular_forms__WEBPACK_IMPORTED_MODULE_1__["NG_VALUE_ACCESSOR"],
    useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["forwardRef"])((/**
     * @return {?}
     */
    () => NovoCheckListElement)),
    multi: true,
};
class NovoCheckListElement {
    constructor() {
        this.onSelect = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.onModelChange = (/**
         * @return {?}
         */
        () => { });
        this.onModelTouched = (/**
         * @return {?}
         */
        () => { });
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.setModel();
        this.setupOptions();
    }
    /**
     * @param {?} event
     * @param {?} item
     * @return {?}
     */
    select(event, item) {
        Helpers.swallowEvent(event);
        if (!this.disabled) {
            item.checked = !item.checked;
            this.model = this._options.filter((/**
             * @param {?} checkBox
             * @return {?}
             */
            (checkBox) => checkBox.checked)).map((/**
             * @param {?} x
             * @return {?}
             */
            (x) => x.value));
            this.onModelChange(this.model.length > 0 ? this.model : '');
            this.onSelect.emit({ selected: this.model });
        }
    }
    /**
     * @return {?}
     */
    setupOptions() {
        this.options = this.options || [];
        this._options = [];
        if (this.options.length && !this.options[0].value) {
            this.options.forEach((/**
             * @param {?} option
             * @return {?}
             */
            (option) => {
                /** @type {?} */
                const formattedOption = {
                    value: option,
                    label: option,
                    checked: this.model && this.model.length && this.model.indexOf(option.value) !== -1,
                };
                this._options.push(formattedOption);
            }));
        }
        else {
            this.options.forEach((/**
             * @param {?} option
             * @return {?}
             */
            (option) => {
                /** @type {?} */
                const formattedOption = option;
                formattedOption.checked = this.model && this.model.length && this.model.indexOf(option.value) !== -1;
                this._options.push(formattedOption);
            }));
        }
    }
    /**
     * @return {?}
     */
    setModel() {
        /** @type {?} */
        const checkedOptions = this.options.filter((/**
         * @param {?} checkBox
         * @return {?}
         */
        (checkBox) => checkBox.checked)).map((/**
         * @param {?} x
         * @return {?}
         */
        (x) => x.value));
        this.writeValue(checkedOptions);
    }
    /**
     * @param {?} model
     * @return {?}
     */
    writeValue(model) {
        this.model = model || [];
        if (model) {
            this.setupOptions();
        }
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.onModelChange = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.onModelTouched = fn;
    }
    /**
     * @param {?} disabled
     * @return {?}
     */
    setDisabledState(disabled) {
        this.disabled = disabled;
    }
}
NovoCheckListElement.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'novo-check-list',
                providers: [CHECKLIST_VALUE_ACCESSOR],
                template: `
    <div
      class="check-box-group"
      *ngFor="let option of _options; let i = index"
      [ngClass]="{ checked: option.checked }"
      [class.disabled]="disabled"
      [attr.data-automation-id]="option.label"
    >
      <input
        [name]="name"
        type="checkbox"
        [ngModel]="option.checked"
        [attr.id]="name + i"
        [value]="option.checked"
        (change)="select($event, option)"
        [disabled]="disabled"
      />
      <label [attr.for]="name + i" (click)="select($event, option)">
        <i [ngClass]="{ 'bhi-checkbox-empty': !option.checked, 'bhi-checkbox-filled': option.checked }"></i>
        <span>{{ option.label }}</span>
      </label>
    </div>
  `
            }] }
];
NovoCheckListElement.propDecorators = {
    name: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    options: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    disabled: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    onSelect: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }]
};
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: elements/form/extras/file/extras/file/File.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NovoFile {
    /**
     * @param {?} file
     */
    constructor(file) {
        this.name = '';
        this.contentType = '';
        this.lastModified = 0;
        this.size = 0;
        this.loaded = false;
        this.reader = new FileReader();
        this.name = `${encodeURIComponent(file.name || '')}`;
        this.contentType = file.type;
        this.lastModified = file.lastModified;
        this.size = file.size;
        this.file = file;
        this.reader.onload = (/**
         * @param {?} event
         * @return {?}
         */
        (event) => {
            this.fileContents = event.target.result.split(',')[1];
            this.dataURL = event.target.result;
            this.loaded = true;
            if (this.readPromise) {
                this.readPromise(this);
            }
        });
    }
    /**
     * @return {?}
     */
    read() {
        return new Promise((/**
         * @param {?} resolve
         * @return {?}
         */
        (resolve) => {
            this.readPromise = resolve;
            // when the file is read it triggers the onload event above.
            this.reader.readAsDataURL(this.file);
        }));
    }
    /**
     * @return {?}
     */
    toJSON() {
        return {
            name: this.name,
            contentType: this.type,
            lastModified: this.lastModified,
            size: this.size,
            fileContents: this.fileContents,
        };
    }
}
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: elements/form/extras/file/FileInput.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// Value accessor for the component (supports ngModel)
/** @type {?} */
const FILE_VALUE_ACCESSOR = {
    provide: _angular_forms__WEBPACK_IMPORTED_MODULE_1__["NG_VALUE_ACCESSOR"],
    useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["forwardRef"])((/**
     * @return {?}
     */
    () => NovoFileInputElement)),
    multi: true,
};
/** @type {?} */
const LAYOUT_DEFAULTS$1 = { order: 'default', download: true, removable: true, labelStyle: 'default', draggable: false };
class NovoFileInputElement {
    /**
     * @param {?} element
     * @param {?} labels
     * @param {?} dragula
     */
    constructor(element, labels, dragula) {
        this.element = element;
        this.labels = labels;
        this.dragula = dragula;
        this.multiple = false;
        this.disabled = false;
        this.value = [];
        this.edit = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.save = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.delete = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.upload = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.elements = [];
        this.files = [];
        this.active = false;
        this.onModelChange = (/**
         * @return {?}
         */
        () => { });
        this.onModelTouched = (/**
         * @return {?}
         */
        () => { });
        this.commands = {
            dragenter: this.dragEnterHandler.bind(this),
            dragleave: this.dragLeaveHandler.bind(this),
            dragover: this.dragOverHandler.bind(this),
            drop: this.dropHandler.bind(this),
        };
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        ['dragenter', 'dragleave', 'dragover', 'drop'].forEach((/**
         * @param {?} type
         * @return {?}
         */
        (type) => {
            this.element.nativeElement.addEventListener(type, this.commands[type]);
        }));
        this.updateLayout();
        this.initializeDragula();
        this.setInitialFileList();
        this.dataFeatureId = this.dataFeatureId ? this.dataFeatureId : this.name;
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        ['dragenter', 'dragleave', 'dragover', 'drop'].forEach((/**
         * @param {?} type
         * @return {?}
         */
        (type) => {
            this.element.nativeElement.removeEventListener(type, this.commands[type]);
        }));
        /** @type {?} */
        const dragulaHasFileOutputBag = this.dragula.bags.length > 0 && this.dragula.bags.filter((/**
         * @param {?} x
         * @return {?}
         */
        (x) => x.name === this.fileOutputBag)).length > 0;
        if (dragulaHasFileOutputBag) {
            this.dragula.destroy(this.fileOutputBag);
        }
    }
    /**
     * @param {?=} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        this.onModelChange(this.model);
    }
    /**
     * @return {?}
     */
    updateLayout() {
        this.layoutOptions = Object.assign({}, LAYOUT_DEFAULTS$1, this.layoutOptions);
        this.insertTemplatesBasedOnLayout();
    }
    /**
     * @return {?}
     */
    insertTemplatesBasedOnLayout() {
        /** @type {?} */
        let order;
        switch (this.layoutOptions['order']) {
            case 'displayFilesBelow':
                order = ['fileInput', 'fileOutput'];
                break;
            default:
                order = ['fileOutput', 'fileInput'];
        }
        order.forEach((/**
         * @param {?} template
         * @return {?}
         */
        (template) => {
            this.container.createEmbeddedView(this[template], 0);
        }));
        return order;
    }
    /**
     * @return {?}
     */
    initializeDragula() {
        this.fileOutputBag = `file-output-${this.dragula.bags.length}`;
        this.dragula.setOptions(this.fileOutputBag, {
            moves: (/**
             * @param {?} el
             * @param {?} container
             * @param {?} handle
             * @return {?}
             */
            (el, container, handle) => {
                return this.layoutOptions.draggable;
            }),
        });
    }
    /**
     * @return {?}
     */
    setInitialFileList() {
        if (this.value) {
            this.files = this.value;
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    dragEnterHandler(event) {
        event.preventDefault();
        event.dataTransfer.dropEffect = 'copy';
        this.target = event.target;
        this.active = true;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    dragLeaveHandler(event) {
        event.preventDefault();
        if (this.target === event.target) {
            this.active = false;
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    dragOverHandler(event) {
        event.preventDefault();
        // no-op
    }
    /**
     * @param {?} event
     * @return {?}
     */
    dropHandler(event) {
        event.preventDefault();
        this.visible = false;
        if (event.dataTransfer.types[0] !== 'Files') {
            return;
        }
        /** @type {?} */
        const options = this.layoutOptions;
        /** @type {?} */
        const filelist = Array.from(event.dataTransfer.files);
        if (options.customActions) {
            this.upload.emit(this.multiple ? filelist : [filelist[0]]);
        }
        else {
            this.process(this.multiple ? filelist : [filelist[0]]);
        }
        this.active = false;
    }
    /**
     * @param {?} model
     * @return {?}
     */
    writeValue(model) {
        this.model = model;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.onModelChange = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.onModelTouched = fn;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    check(event) {
        this.process(Array.from(event.target.files));
    }
    /**
     * @param {?} files
     * @return {?}
     */
    validate(files) {
        /** @type {?} */
        let passedValidation = true;
        if (this.layoutOptions.customValidation) {
            this.layoutOptions.customValidation
                .filter((/**
             * @param {?} validation
             * @return {?}
             */
            (validation) => validation.action === 'upload'))
                .forEach((/**
             * @param {?} uploadValidation
             * @return {?}
             */
            (uploadValidation) => {
                passedValidation = uploadValidation.fn(files) && passedValidation;
            }));
        }
        return passedValidation;
    }
    /**
     * @param {?} filelist
     * @return {?}
     */
    process(filelist) {
        if (this.validate(filelist)) {
            Promise.all(filelist.map((/**
             * @param {?} file
             * @return {?}
             */
            (file) => this.readFile(file)))).then((/**
             * @param {?} files
             * @return {?}
             */
            (files) => {
                if (this.multiple) {
                    this.files.push(...files);
                }
                else {
                    this.files = files;
                }
                this.model = this.files;
                this.onModelChange(this.model);
            }));
        }
    }
    /**
     * @param {?} file
     * @return {?}
     */
    download(file) {
        window.open(file.dataURL, '_blank');
    }
    /**
     * @param {?} file
     * @return {?}
     */
    remove(file) {
        this.files.splice(this.files.findIndex((/**
         * @param {?} f
         * @return {?}
         */
        (f) => f.name === file.name && f.size === file.size)), 1);
        this.model = this.files;
        this.onModelChange(this.model);
    }
    /**
     * @param {?} file
     * @return {?}
     */
    readFile(file) {
        return new NovoFile(file).read();
    }
    /**
     * @param {?} file
     * @return {?}
     */
    customEdit(file) {
        this.edit.emit(file);
    }
    /**
     * @param {?} file
     * @return {?}
     */
    customSave(file) {
        this.save.emit(file);
    }
    /**
     * @param {?} file
     * @return {?}
     */
    customDelete(file) {
        this.delete.emit(file);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    customCheck(event) {
        this.upload.emit(event);
    }
    /**
     * @param {?} disabled
     * @return {?}
     */
    setDisabledState(disabled) {
        this.disabled = disabled;
    }
}
NovoFileInputElement.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'novo-file-input',
                providers: [FILE_VALUE_ACCESSOR],
                template: `
    <div #container></div>
    <ng-template #fileInput>
      <div class="file-input-group" [class.disabled]="disabled" [class.active]="active">
        <input
          *ngIf="!layoutOptions.customActions"
          type="file"
          [name]="name"
          [attr.id]="name"
          (change)="check($event)"
          [attr.multiple]="multiple"
          tabindex="-1"
          [attr.data-feature-id]="dataFeatureId"
        />
        <input
          *ngIf="layoutOptions.customActions"
          type="file"
          [name]="name"
          [attr.id]="name"
          (change)="customCheck($event)"
          [attr.multiple]="multiple"
          tabindex="-1"
          [attr.data-feature-id]="dataFeatureId"
        />
        <section [ngSwitch]="layoutOptions.labelStyle">
          <label *ngSwitchCase="'no-box'" [attr.for]="name" class="no-box">
            <div>
              <i class="bhi-dropzone"></i>{{ placeholder || labels.chooseAFile }} {{ labels.or }}
              <strong class="link">{{ labels.clickToBrowse }}</strong>
            </div>
          </label>
          <label *ngSwitchDefault [attr.for]="name" class="boxed">
            <span>{{ placeholder || labels.chooseAFile }}</span>
            <small
              >{{ labels.or }} <strong class="link">{{ labels.clickToBrowse }}</strong></small
            >
          </label>
        </section>
      </div>
    </ng-template>
    <ng-template #fileOutput>
      <div class="file-output-group" [dragula]="fileOutputBag" [dragulaModel]="files">
        <div class="file-item" *ngFor="let file of files" [class.disabled]="disabled">
          <i *ngIf="layoutOptions.draggable" class="bhi-move"></i>
          <label *ngIf="file.link"
            ><span
              ><a href="{{ file.link }}" target="_blank">{{ file.name | decodeURI }}</a></span
            ><span *ngIf="file.description">||</span><span>{{ file.description }}</span></label
          >
          <label *ngIf="!file.link">{{ file.name | decodeURI }}</label>
          <div class="actions" [attr.data-automation-id]="'file-actions'" *ngIf="file.loaded">
            <div *ngIf="!layoutOptions.customActions">
              <button
                *ngIf="layoutOptions.download"
                type="button"
                theme="icon"
                icon="save"
                (click)="download(file)"
                [attr.data-automation-id]="'file-download'"
                tabindex="-1"
              ></button>
              <button
                *ngIf="!disabled && (layoutOptions.removable || (!layoutOptions.removable && layoutOptions.removableWhenNew && !file.link))"
                type="button"
                theme="icon"
                icon="close"
                (click)="remove(file)"
                [attr.data-automation-id]="'file-remove'"
                tabindex="-1"
              ></button>
            </div>
            <div *ngIf="layoutOptions.customActions">
              <button
                *ngIf="layoutOptions.edit && !disabled"
                type="button"
                theme="icon"
                icon="edit"
                (click)="customEdit(file)"
                [attr.data-automation-id]="'file-edit'"
                tabindex="-1"
              ></button>
              <button
                *ngIf="layoutOptions.download"
                type="button"
                theme="icon"
                icon="save"
                (click)="customSave(file)"
                [attr.data-automation-id]="'file-download'"
                tabindex="-1"
              ></button>
              <button
                *ngIf="!disabled"
                type="button"
                theme="icon"
                icon="close"
                (click)="customDelete(file)"
                [attr.data-automation-id]="'file-remove'"
                tabindex="-1"
              ></button>
            </div>
          </div>
          <novo-loading *ngIf="!file.loaded"></novo-loading>
        </div>
      </div>
    </ng-template>
  `
            }] }
];
/** @nocollapse */
NovoFileInputElement.ctorParameters = () => [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"] },
    { type: NovoLabelService },
    { type: NovoDragulaService }
];
NovoFileInputElement.propDecorators = {
    fileInput: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"], args: ['fileInput', { static: true },] }],
    fileOutput: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"], args: ['fileOutput', { static: true },] }],
    container: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"], args: ['container', { read: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewContainerRef"], static: true },] }],
    name: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    multiple: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    disabled: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    placeholder: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    layoutOptions: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    value: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    dataFeatureId: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    edit: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    save: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    delete: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    upload: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }]
};
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: elements/form/extras/FormExtras.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NovoFormExtrasModule {
}
NovoFormExtrasModule.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                imports: [
                    _angular_common__WEBPACK_IMPORTED_MODULE_6__["CommonModule"],
                    _angular_forms__WEBPACK_IMPORTED_MODULE_1__["FormsModule"],
                    NovoPipesModule,
                    NovoButtonModule,
                    NovoSelectModule,
                    NovoPickerModule,
                    NovoLoadingModule,
                    NovoDragulaModule,
                    NovoTooltipModule,
                ],
                declarations: [NovoAddressElement, NovoCheckboxElement, NovoCheckListElement, NovoFileInputElement],
                exports: [NovoAddressElement, NovoCheckboxElement, NovoCheckListElement, NovoFileInputElement],
            },] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: elements/tiles/Tiles.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// Value accessor for the component (supports ngModel)
/** @type {?} */
const TILES_VALUE_ACCESSOR = {
    provide: _angular_forms__WEBPACK_IMPORTED_MODULE_1__["NG_VALUE_ACCESSOR"],
    useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["forwardRef"])((/**
     * @return {?}
     */
    () => NovoTilesElement)),
    multi: true,
};
class NovoTilesElement {
    /**
     * @param {?} element
     * @param {?} ref
     */
    constructor(element, ref) {
        this.element = element;
        this.ref = ref;
        this.name = new Date().getTime().toString();
        this.disabled = false;
        this.onChange = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.onSelectedOptionClick = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.onDisabledOptionClick = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this._options = [];
        this.activeTile = null;
        this.focused = false;
        this.onModelChange = (/**
         * @return {?}
         */
        () => { });
        this.onModelTouched = (/**
         * @return {?}
         */
        () => { });
    }
    /**
     * @param {?} focus
     * @return {?}
     */
    setFocus(focus) {
        this.focused = focus;
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        this.name = this.name || '';
        this.setupOptions();
    }
    /**
     * @param {?} change
     * @return {?}
     */
    ngOnChanges(change) {
        if (change['options'] && change['options'].currentValue && !change['options'].firstChange) {
            this.name = this.name || '';
            this._options = [];
            this.setupOptions();
        }
    }
    /**
     * @return {?}
     */
    setupOptions() {
        if (this.options && this.options.length && (this.options[0].value === undefined || this.options[0].value === null)) {
            this._options = this.options.map((/**
             * @param {?} x
             * @return {?}
             */
            (x) => {
                /** @type {?} */
                const item = { value: x, label: x, checked: this.model === x };
                if (item.checked) {
                    this.setTile(item);
                }
                return item;
            }));
        }
        else {
            this._options = this.options.map((/**
             * @param {?} x
             * @return {?}
             */
            (x) => {
                x.checked = this.model === x.value || (this.model && this.model.id === x.value);
                if (x.checked) {
                    this.setTile(x);
                }
                return x;
            }));
        }
        this.ref.markForCheck();
    }
    /**
     * @param {?} event
     * @param {?} item
     * @return {?}
     */
    select(event, item) {
        if (event) {
            event.stopPropagation();
            event.preventDefault();
        }
        if (!item.disabled) {
            if (item.checked) {
                this.onSelectedOptionClick.emit(item);
                return;
            }
            for (const option of this._options) {
                option.checked = false;
            }
            item.checked = !item.checked;
            this.onChange.emit(item.value);
            this.onModelChange(item.value);
            this.setTile(item);
            this.model = item.value;
        }
        else {
            this.onDisabledOptionClick.emit(item);
        }
        this.ref.markForCheck();
    }
    /**
     * @param {?} item
     * @return {?}
     */
    setTile(item) {
        if (item) {
            this.activeTile = item.value;
            this.ref.markForCheck();
        }
    }
    /**
     * @param {?} model
     * @return {?}
     */
    writeValue(model) {
        this.model = model;
        if (!Helpers.isBlank(model)) {
            this.setupOptions();
        }
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.onModelChange = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.onModelTouched = fn;
    }
    /**
     * @param {?} disabled
     * @return {?}
     */
    setDisabledState(disabled) {
        this.disabled = disabled;
    }
}
NovoTilesElement.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'novo-tiles',
                providers: [TILES_VALUE_ACCESSOR],
                template: `
    <div class="tile-container" [class.active]="focused" [class.disabled]="disabled">
      <div
        class="tile"
        *ngFor="let option of _options; let i = index"
        [ngClass]="{ active: option.checked, disabled: option.disabled }"
        (click)="select($event, option)"
        [attr.data-automation-id]="option.label || option"
      >
        <input
          class="tiles-input"
          [name]="name"
          type="radio"
          [value]="option.checked || option.value || option"
          [attr.id]="name + i"
          (change)="select($event, option)"
          (focus)="setFocus(true)"
          (blur)="setFocus(false)"
          [disabled]="disabled"
        />
        <label [attr.for]="name + i" [attr.data-automation-id]="option.label || option">
          {{ option.label || option }}
        </label>
      </div>
    </div>
  `,
                changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectionStrategy"].OnPush
            }] }
];
/** @nocollapse */
NovoTilesElement.ctorParameters = () => [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectorRef"] }
];
NovoTilesElement.propDecorators = {
    name: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    options: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    required: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    disabled: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"], args: ['controlDisabled',] }],
    onChange: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    onSelectedOptionClick: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    onDisabledOptionClick: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }]
};
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: elements/tiles/Tiles.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NovoTilesModule {
}
NovoTilesModule.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                imports: [_angular_common__WEBPACK_IMPORTED_MODULE_6__["CommonModule"], _angular_forms__WEBPACK_IMPORTED_MODULE_1__["ReactiveFormsModule"]],
                declarations: [NovoTilesElement],
                exports: [NovoTilesElement],
            },] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: elements/search/SearchBox.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// Value accessor for the component (supports ngModel)
/** @type {?} */
const SEARCH_VALUE_ACCESSOR = {
    provide: _angular_forms__WEBPACK_IMPORTED_MODULE_1__["NG_VALUE_ACCESSOR"],
    useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["forwardRef"])((/**
     * @return {?}
     */
    () => NovoSearchBoxElement)),
    multi: true,
};
class NovoSearchBoxElement {
    /**
     * @param {?} element
     * @param {?} labels
     * @param {?} _changeDetectorRef
     * @param {?} _zone
     */
    constructor(element, labels, _changeDetectorRef, _zone) {
        this.element = element;
        this.labels = labels;
        this._changeDetectorRef = _changeDetectorRef;
        this._zone = _zone;
        this.icon = 'search';
        this.placeholder = 'Search...';
        this.alwaysOpen = false;
        this.theme = 'positive';
        this.closeOnSelect = true;
        this.searchChanged = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.focused = false;
        /**
         * View -> model callback called when value changes
         */
        this._onChange = (/**
         * @return {?}
         */
        () => { });
        /**
         * View -> model callback called when autocomplete has been touched
         */
        this._onTouched = (/**
         * @return {?}
         */
        () => { });
    }
    /**
     * \@name showFasterFind
     * \@description This function shows the picker and adds the active class (for animation)
     * @param {?=} event
     * @param {?=} forceClose
     * @return {?}
     */
    showSearch(event, forceClose = false) {
        if (!this.panelOpen) {
            // Reset search
            // Set focus on search
            setTimeout((/**
             * @return {?}
             */
            () => {
                /** @type {?} */
                const element = this.input.nativeElement;
                if (element) {
                    element.focus();
                }
            }), 10);
        }
    }
    /**
     * @return {?}
     */
    onFocus() {
        this._zone.run((/**
         * @return {?}
         */
        () => {
            this.focused = true;
            this.openPanel();
        }));
    }
    /**
     * @return {?}
     */
    onBlur() {
        this.focused = false;
    }
    /**
     * BEGIN: Convenient Panel Methods.
     * @return {?}
     */
    openPanel() {
        this.overlay.openPanel();
    }
    /**
     * @return {?}
     */
    closePanel() {
        this.overlay.closePanel();
    }
    /**
     * @return {?}
     */
    get panelOpen() {
        return this.overlay && this.overlay.panelOpen;
    }
    /**
     * @return {?}
     */
    get active() {
        return this.panelOpen || this.alwaysOpen;
    }
    /**
     * END: Convenient Panel Methods.
     * @param {?} event
     * @return {?}
     */
    _handleKeydown(event) {
        if ((event.keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_19__["ESCAPE"] || event.keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_19__["ENTER"] || event.keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_19__["TAB"]) && this.panelOpen) {
            this.closePanel();
            event.stopPropagation();
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    _handleInput(event) {
        if (document.activeElement === event.target) {
            this._onChange(((/** @type {?} */ (event.target))).value);
            if (this.debounceSearchChange) {
                clearTimeout(this.debounceSearchChange);
            }
            this.debounceSearchChange = setTimeout((/**
             * @return {?}
             */
            () => {
                this.searchChanged.emit(((/** @type {?} */ (event.target))).value);
            }), 400);
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        this._setValue(value);
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this._onChange = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this._onTouched = fn;
    }
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    _setValue(value) {
        this.value = value;
        /** @type {?} */
        let toDisplay = value;
        if (value && this.displayField) {
            toDisplay = value.hasOwnProperty(this.displayField) ? value[this.displayField] : value;
        }
        // Simply falling back to an empty string if the display value is falsy does not work properly.
        // The display value can also be the number zero and shouldn't fall back to an empty string.
        this.displayValue = toDisplay ? toDisplay : '';
        this.input.nativeElement.value = this.displayValue;
        this._changeDetectorRef.markForCheck();
    }
    /**
     * This method closes the panel, and if a value is specified, also sets the associated
     * control to that value. It will also mark the control as dirty if this interaction
     * stemmed from the user.
     * @param {?} event
     * @return {?}
     */
    setValueAndClose(event) {
        if (event && event.value) {
            this._setValue(event.value);
            this._onChange(event.value);
        }
        this.closePanel();
    }
    /**
     * Clear any previous selected option and emit a selection change event for this option
     * @param {?} skip
     * @return {?}
     */
    clearValue(skip) {
        this.writeValue(null);
        this._onChange(null);
    }
}
NovoSearchBoxElement.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'novo-search',
                providers: [SEARCH_VALUE_ACCESSOR],
                changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectionStrategy"].OnPush,
                template: `
    <!-- SEARCH ICON -->
    <button
      theme="fab"
      [color]="theme"
      [icon]="icon"
      (click)="showSearch()"
      [tooltip]="hint"
      tooltipPosition="bottom"
      data-automation-id="novo-search-fab"
    ></button>
    <!-- SEARCH INPUT -->
    <input
      type="text"
      [attr.name]="name"
      [attr.value]="displayValue"
      [attr.placeholder]="placeholder"
      (focus)="onFocus()"
      (blur)="onBlur()"
      (keydown)="_handleKeydown($event)"
      (input)="_handleInput($event)"
      #input
      data-automation-id="novo-search-input"
    />
    <!-- SEARCH OVERLAY -->
    <novo-overlay-template
      [parent]="element"
      [closeOnSelect]="closeOnSelect"
      position="above-below"
      (select)="closePanel()"
      (closing)="onBlur()"
    >
      <ng-content></ng-content>
    </novo-overlay-template>
  `
            }] }
];
/** @nocollapse */
NovoSearchBoxElement.ctorParameters = () => [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"] },
    { type: NovoLabelService },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectorRef"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgZone"] }
];
NovoSearchBoxElement.propDecorators = {
    name: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    icon: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    placeholder: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    alwaysOpen: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    theme: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    closeOnSelect: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    displayField: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    displayValue: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    hint: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    searchChanged: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    focused: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostBinding"], args: ['class.focused',] }],
    overlay: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"], args: [NovoOverlayTemplateComponent, { static: false },] }],
    input: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"], args: ['input', { static: true },] }],
    active: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostBinding"], args: ['class.active',] }]
};
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: elements/search/SearchBox.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NovoSearchBoxModule {
}
NovoSearchBoxModule.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                imports: [_angular_common__WEBPACK_IMPORTED_MODULE_6__["CommonModule"], NovoButtonModule, NovoPickerModule, NovoTooltipModule, NovoOverlayModule],
                declarations: [NovoSearchBoxElement],
                exports: [NovoSearchBoxElement],
            },] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: elements/date-picker/DatePicker.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// Value accessor for the component (supports ngModel)
/** @type {?} */
const DATE_PICKER_VALUE_ACCESSOR = {
    provide: _angular_forms__WEBPACK_IMPORTED_MODULE_1__["NG_VALUE_ACCESSOR"],
    useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["forwardRef"])((/**
     * @return {?}
     */
    () => NovoDatePickerElement)),
    multi: true,
};
/**
 * @record
 */
function RangeModal() { }
if (false) {}
/**
 * @record
 */
function Day() { }
if (false) {}
class NovoDatePickerElement {
    /**
     * @param {?} labels
     * @param {?} element
     */
    constructor(labels, element) {
        this.labels = labels;
        this.element = element;
        this.weekStart = 0;
        // Select callback for output
        this.onSelect = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"](false);
        // List of all the weekdays
        this.weekdays = [];
        // List of all months
        this.months = [];
        // List of all years (generated in ngOnInit)
        this.years = [];
        // Default view mode (select days)
        this.view = 'days';
        this.rangeSelectMode = 'startDate';
        this._onChange = (/**
         * @return {?}
         */
        () => { });
        this._onTouched = (/**
         * @return {?}
         */
        () => { });
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        // Determine the year array
        /** @type {?} */
        const now = new Date();
        /** @type {?} */
        const start = this.minYear ? Number(this.minYear) : now.getFullYear() - 100;
        /** @type {?} */
        const end = this.maxYear ? Number(this.maxYear) : now.getFullYear() + 10;
        for (let i = start; i <= end; i++) {
            this.years.push(i);
        }
        // Set weekdays / months
        this.weekdays = this.setupWeekdays();
        this.months = this.labels.getMonths();
        // Set labels
        this.selectedLabel = this.labels.startDate;
        this.selected2Label = this.labels.endDate;
        this.updateView(this.model, false, true);
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        /** @type {?} */
        const weekRangeSelectChange = changes['weekRangeSelect'];
        if (weekRangeSelectChange &&
            weekRangeSelectChange.currentValue !== weekRangeSelectChange.previousValue &&
            !weekRangeSelectChange.firstChange) {
            this.clearRange();
        }
        /** @type {?} */
        const weekStartChanges = changes['weekStart'];
        if (weekStartChanges && weekStartChanges.currentValue !== weekStartChanges.previousValue && !weekStartChanges.firstChange) {
            this.weekdays = this.setupWeekdays();
            this.updateView(this.model, false, false);
        }
    }
    /**
     * @return {?}
     */
    setupWeekdays() {
        /** @type {?} */
        let weekdays = this.labels.getWeekdays();
        // Weekstart must be 0-6 (Sunday - Saturday)
        if (!Helpers.isBlank(this.weekStart) && this.weekStart > 0 && this.weekStart <= 6) {
            /** @type {?} */
            const newStart = weekdays.splice(this.weekStart);
            weekdays = [...newStart, ...weekdays];
        }
        return weekdays;
    }
    /**
     * @param {?} range
     * @param {?} day
     * @param {?} selected
     * @param {?} selected2
     * @param {?} hoverDay
     * @param {?} rangeSelectMode
     * @param {?} weekRangeSelect
     * @return {?}
     */
    isSelectingRange(range, day, selected, selected2, hoverDay, rangeSelectMode, weekRangeSelect) {
        if (range && !weekRangeSelect) {
            /** @type {?} */
            const isRangeModeEndDate = rangeSelectMode === 'endDate' && (selected && selected2 && Object(date_fns__WEBPACK_IMPORTED_MODULE_10__["isAfter"])(day, selected2) && Object(date_fns__WEBPACK_IMPORTED_MODULE_10__["isBefore"])(day, hoverDay));
            /** @type {?} */
            const isRangeModeStartDate = rangeSelectMode === 'startDate' && (selected && selected2 && Object(date_fns__WEBPACK_IMPORTED_MODULE_10__["isBefore"])(day, selected) && Object(date_fns__WEBPACK_IMPORTED_MODULE_10__["isAfter"])(day, hoverDay));
            /** @type {?} */
            const isNotSelected = !selected && selected2 && Object(date_fns__WEBPACK_IMPORTED_MODULE_10__["isBefore"])(day, selected2) && Object(date_fns__WEBPACK_IMPORTED_MODULE_10__["isAfter"])(day, hoverDay);
            /** @type {?} */
            const isNotSelected2 = selected && !selected2 && Object(date_fns__WEBPACK_IMPORTED_MODULE_10__["isAfter"])(day, selected) && Object(date_fns__WEBPACK_IMPORTED_MODULE_10__["isBefore"])(day, hoverDay);
            return isNotSelected2 || isNotSelected || isRangeModeStartDate || isRangeModeEndDate;
        }
        return false;
    }
    /**
     * @param {?} range
     * @param {?} day
     * @param {?} selected
     * @param {?} selected2
     * @return {?}
     */
    isEndFill(range, day, selected, selected2) {
        if (range && selected2 && selected) {
            return !Object(date_fns__WEBPACK_IMPORTED_MODULE_10__["isSameDay"])(selected, selected2) && Object(date_fns__WEBPACK_IMPORTED_MODULE_10__["isSameDay"])(day, selected2) && Object(date_fns__WEBPACK_IMPORTED_MODULE_10__["isAfter"])(day, selected);
        }
        return false;
    }
    /**
     * @param {?} range
     * @param {?} day
     * @param {?} selected
     * @param {?} selected2
     * @return {?}
     */
    isStartFill(range, day, selected, selected2) {
        if (range && selected2 && selected) {
            return !Object(date_fns__WEBPACK_IMPORTED_MODULE_10__["isSameDay"])(selected, selected2) && Object(date_fns__WEBPACK_IMPORTED_MODULE_10__["isSameDay"])(day, selected) && Object(date_fns__WEBPACK_IMPORTED_MODULE_10__["isBefore"])(day, selected2);
        }
        return false;
    }
    /**
     * @param {?} range
     * @param {?} day
     * @param {?} selected
     * @param {?} selected2
     * @return {?}
     */
    isFiller(range, day, selected, selected2) {
        if (range && selected2 && selected) {
            return ((Object(date_fns__WEBPACK_IMPORTED_MODULE_10__["isAfter"])(day, selected) && Object(date_fns__WEBPACK_IMPORTED_MODULE_10__["isBefore"])(day, selected2)) ||
                Object(date_fns__WEBPACK_IMPORTED_MODULE_10__["isSameDay"])(day, selected) ||
                Object(date_fns__WEBPACK_IMPORTED_MODULE_10__["isSameDay"])(day, selected2));
        }
        return false;
    }
    /**
     * @param {?} range
     * @param {?} day
     * @param {?} selected
     * @param {?} selected2
     * @return {?}
     */
    isSelected(range, day, selected, selected2) {
        if (range) {
            return (day &&
                ((selected &&
                    (day.getDate() === selected.getDate() &&
                        day.getMonth() === selected.getMonth() &&
                        day.getFullYear() === selected.getFullYear())) ||
                    (selected2 &&
                        (day.getDate() === selected2.getDate() &&
                            day.getMonth() === selected2.getMonth() &&
                            day.getFullYear() === selected2.getFullYear()))));
        }
        return day.getDate() === selected.getDate() && day.getMonth() === selected.getMonth() && day.getFullYear() === selected.getFullYear();
    }
    /**
     * @param {?} day
     * @param {?} start
     * @param {?} end
     * @return {?}
     */
    isDisabled(day, start, end) {
        return Object(date_fns__WEBPACK_IMPORTED_MODULE_10__["isBefore"])(day, start) || Object(date_fns__WEBPACK_IMPORTED_MODULE_10__["isAfter"])(day, end);
    }
    /**
     * @param {?} date
     * @param {?} fireEvents
     * @param {?} markedSelected
     * @return {?}
     */
    updateView(date, fireEvents, markedSelected) {
        if (date && date.startDate === null) {
            this.clearRange();
        }
        else {
            if (!date) {
                this.clearRange();
            }
            /** @type {?} */
            let value = date ? new Date(date) : new Date();
            value = this.removeTime(value);
            this.month = new Date(value);
            this.monthLabel = this.labels.formatDateWithFormat(this.month, { month: 'short' });
            /** @type {?} */
            const start = new Date(value.getTime());
            start.setDate(1);
            this.removeTime(start.setDate(1));
            this.buildMonth(start, this.month);
            if (markedSelected) {
                this.select(null, { date: value }, fireEvents);
            }
        }
    }
    /**
     * @return {?}
     */
    setToday() {
        /** @type {?} */
        const tmp = new Date();
        this.updateView(tmp, true, true);
        // Go back to days
        this.open(null, 'days');
    }
    /**
     * @return {?}
     */
    clearRange() {
        this.selected = null;
        this.selectedLabel = this.labels.startDate;
        this.selected2 = null;
        this.selected2Label = this.labels.endDate;
    }
    /**
     * @param {?} month
     * @return {?}
     */
    setMonth(month) {
        /** @type {?} */
        const date = this.month ? this.month : new Date();
        /** @type {?} */
        const tmp = Object(date_fns__WEBPACK_IMPORTED_MODULE_10__["setMonth"])(date, month);
        this.updateView(tmp, true, false);
        // Go back to days
        this.open(null, 'days');
    }
    /**
     * @param {?} year
     * @return {?}
     */
    setYear(year) {
        /** @type {?} */
        const date = this.month ? this.month : new Date();
        /** @type {?} */
        const tmp = Object(date_fns__WEBPACK_IMPORTED_MODULE_10__["setYear"])(date, year);
        this.updateView(tmp, true, false);
        // Go back to days
        this.open(null, 'days');
    }
    /**
     * @param {?} event
     * @param {?} day
     * @param {?} fireEvents
     * @return {?}
     */
    select(event, day, fireEvents) {
        Helpers.swallowEvent(event);
        if (this.range) {
            if (this.weekRangeSelect) {
                this.selected = Object(date_fns__WEBPACK_IMPORTED_MODULE_10__["startOfWeek"])(day.date, { weekStartsOn: this.weekStart });
                this.selected2 = Object(date_fns__WEBPACK_IMPORTED_MODULE_10__["endOfWeek"])(day.date, { weekStartsOn: this.weekStart });
                this.selectedLabel = this.labels.formatDateWithFormat(this.selected, {
                    month: 'short',
                    day: '2-digit',
                    year: 'numeric',
                });
                this.selected2Label = this.labels.formatDateWithFormat(this.selected2, {
                    month: 'short',
                    day: '2-digit',
                    year: 'numeric',
                });
                // Make sure to fire this, since we default to the current week selected!
                if (!fireEvents && this.weekRangeSelect) {
                    this.fireRangeSelect();
                }
            }
            else if (this.rangeSelectMode === 'startDate') {
                // SET START DATE
                this.selected = Object(date_fns__WEBPACK_IMPORTED_MODULE_10__["startOfDay"])(day.date);
                this.selectedLabel = this.labels.formatDateWithFormat(this.selected, {
                    month: 'short',
                    day: '2-digit',
                    year: 'numeric',
                });
                if (this.selected2 && Object(date_fns__WEBPACK_IMPORTED_MODULE_10__["isAfter"])(day.date, this.selected2)) {
                    // CLEAR END DATE
                    this.selected2 = null;
                    this.selected2Label = this.labels.endDate;
                }
                if (event) {
                    this.rangeSelectMode = 'endDate';
                }
            }
            else if (this.rangeSelectMode === 'endDate') {
                // SET END DATE
                this.selected2 = Object(date_fns__WEBPACK_IMPORTED_MODULE_10__["endOfDay"])(day.date);
                this.selected2Label = this.labels.formatDateWithFormat(this.selected2, {
                    month: 'short',
                    day: '2-digit',
                    year: 'numeric',
                });
                if (this.selected && Object(date_fns__WEBPACK_IMPORTED_MODULE_10__["isBefore"])(day.date, this.selected)) {
                    // CLEAR START DATE
                    this.selected = null;
                    this.selectedLabel = this.labels.startDate;
                }
                if (event) {
                    this.rangeSelectMode = 'startDate';
                }
            }
        }
        else {
            this.selected = day.date;
            this.selectedLabel = this.labels.formatDateWithFormat(this.selected, {
                month: 'short',
                day: '2-digit',
                year: 'numeric',
            });
            this.updateHeading();
        }
        if (fireEvents && this.selected) {
            // Emit our output
            if (this.range && this.selected && this.selected2) {
                this.fireRangeSelect();
                // Also, update the ngModel
                this._onChange({
                    startDate: this.selected,
                    endDate: this.selected2 ? this.selected2 : null,
                });
                this.model = {
                    startDate: this.selected,
                    endDate: this.selected2 ? this.selected2 : null,
                };
            }
            if (!this.range) {
                this.onSelect.next({
                    month: this.labels.formatDateWithFormat(this.selected, { month: 'long' }),
                    year: this.selected.getFullYear(),
                    day: this.labels.formatDateWithFormat(this.selected, { weekday: 'long' }),
                    date: this.selected,
                });
                // Also, update the ngModel
                this._onChange(this.selected);
                this.model = this.selected;
            }
        }
    }
    /**
     * @return {?}
     */
    fireRangeSelect() {
        // Make sure the start date is before the end date
        if (Object(date_fns__WEBPACK_IMPORTED_MODULE_10__["isBefore"])(this.selected, this.selected2)) {
            this.onSelect.next({
                startDate: {
                    month: this.labels.formatDateWithFormat(this.selected, { month: 'long' }),
                    year: this.selected.getFullYear(),
                    day: this.labels.formatDateWithFormat(this.selected, { weekday: 'long' }),
                    date: this.selected,
                },
                endDate: {
                    month: this.labels.formatDateWithFormat(this.selected2, { month: 'long' }),
                    year: this.selected2.getFullYear(),
                    day: this.labels.formatDateWithFormat(this.selected2, { weekday: 'long' }),
                    date: this.selected2,
                },
            });
        }
    }
    /**
     * @param {?} event
     * @param {?} type
     * @return {?}
     */
    open(event, type) {
        Helpers.swallowEvent(event);
        // If they click the toggle two time in a row, close it (go back to days)
        if (type === this.view) {
            this.view = 'days';
        }
        else {
            this.view = type;
        }
        // Make sure to scroll the selected one into view
        if (this.view === 'years' || this.view === 'months') {
            setTimeout((/**
             * @return {?}
             */
            () => {
                /** @type {?} */
                const container = this.element.nativeElement.querySelector(`.calendar-content.${this.view}`);
                /** @type {?} */
                const selectedItem = this.element.nativeElement.querySelector(`.calendar-content.${this.view} .${this.view === 'years' ? 'year' : 'month'}.selected`);
                if (container && selectedItem) {
                    container.scrollTop = selectedItem.offsetTop - 100;
                }
            }));
        }
        this.updateHeading();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    prevMonth(event) {
        Helpers.swallowEvent(event);
        /** @type {?} */
        const tmp = Object(date_fns__WEBPACK_IMPORTED_MODULE_10__["subMonths"])(this.month, 1);
        this.updateView(tmp, false, false);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    nextMonth(event) {
        Helpers.swallowEvent(event);
        /** @type {?} */
        const tmp = Object(date_fns__WEBPACK_IMPORTED_MODULE_10__["addMonths"])(this.month, 1);
        this.updateView(tmp, false, false);
    }
    /**
     * @return {?}
     */
    updateHeading() {
        if (!this.selected) {
            return;
        }
        this.heading = {
            month: this.labels.formatDateWithFormat(this.selected, { month: 'long' }),
            year: this.selected.getFullYear(),
            day: this.labels.formatDateWithFormat(this.selected, { weekday: 'long' }),
            date: this.selected.getDate(),
        };
    }
    /**
     * Remove the time aspect of the date
     * @param {?} date
     * @return {?} with time stripped out
     */
    removeTime(date) {
        /** @type {?} */
        const ret = new Date(date);
        ret.setHours(12);
        ret.setSeconds(0);
        ret.setMilliseconds(0);
        return ret;
    }
    /**
     * @param {?} start
     * @param {?} month
     * @return {?}
     */
    buildMonth(start, month) {
        // Reset the weeks
        this.weeks = [];
        // House keeping variables to know when we are done building the month
        /** @type {?} */
        let done = false;
        /** @type {?} */
        let date = Object(date_fns__WEBPACK_IMPORTED_MODULE_10__["startOfWeek"])(start, { weekStartsOn: this.weekStart });
        /** @type {?} */
        let monthIndex = date.getMonth();
        /** @type {?} */
        let count = 0;
        while (!done) {
            // Build the days for the weeks
            this.weeks.push({ days: this.buildWeek(new Date(date.getTime()), month) });
            // Increment variables for the next iteration
            date = Object(date_fns__WEBPACK_IMPORTED_MODULE_10__["addDays"])(date, 7);
            done = count++ > 2 && monthIndex !== date.getMonth();
            monthIndex = date.getMonth();
        }
    }
    /**
     * @param {?} date
     * @param {?} month
     * @return {?}
     */
    buildWeek(date, month) {
        // Build out of the days of the week
        /** @type {?} */
        const days = [];
        // Iterate over the days of the week
        for (let i = 0; i < 7; i++) {
            // Push a variable on the day array with lots of helpers to make the template easier
            days.push({
                name: this.weekdays[i],
                number: date.getDate(),
                isToday: Object(date_fns__WEBPACK_IMPORTED_MODULE_10__["isToday"])(date),
                date,
            });
            // Increment for the next iteration
            date = Object(date_fns__WEBPACK_IMPORTED_MODULE_10__["addDays"])(date, 1);
        }
        return days;
    }
    /**
     * @param {?} range
     * @return {?}
     */
    toggleRangeSelect(range) {
        this.rangeSelectMode = range;
    }
    /**
     * @param {?} event
     * @param {?} day
     * @return {?}
     */
    rangeHover(event, day) {
        this.hoverDay = day.date;
    }
    // ValueAccessor Functions
    /**
     * @param {?} model
     * @return {?}
     */
    writeValue(model) {
        this.model = model;
        if (Helpers.isDate(model)) {
            this.updateView(model, false, true);
        }
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this._onChange = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this._onTouched = fn;
    }
}
NovoDatePickerElement.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'novo-date-picker',
                providers: [DATE_PICKER_VALUE_ACCESSOR],
                animations: [
                    Object(_angular_animations__WEBPACK_IMPORTED_MODULE_9__["trigger"])('startDateTextState', [
                        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_9__["state"])('startDate', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_9__["style"])({
                            opacity: '1.0',
                        })),
                        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_9__["state"])('endDate', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_9__["style"])({
                            opacity: '0.6',
                        })),
                        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_9__["transition"])('startDate <=> endDate', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_9__["animate"])('200ms ease-in')),
                    ]),
                    Object(_angular_animations__WEBPACK_IMPORTED_MODULE_9__["trigger"])('endDateTextState', [
                        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_9__["state"])('startDate', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_9__["style"])({
                            opacity: '0.6',
                        })),
                        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_9__["state"])('endDate', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_9__["style"])({
                            opacity: '1.0',
                        })),
                        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_9__["transition"])('startDate <=> endDate', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_9__["animate"])('200ms ease-in')),
                    ]),
                    Object(_angular_animations__WEBPACK_IMPORTED_MODULE_9__["trigger"])('indicatorState', [
                        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_9__["state"])('startDate', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_9__["style"])({
                            transform: 'translateX(0%)',
                        })),
                        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_9__["state"])('endDate', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_9__["style"])({
                            transform: 'translateX(100%)',
                        })),
                        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_9__["transition"])('startDate <=> endDate', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_9__["animate"])('200ms ease-in')),
                    ]),
                ],
                template: `
        <div class="calendar">
            <div class="calendar-top" *ngIf="!inline && !range">
                <h4 class="day" [attr.data-automation-id]="heading?.day">{{heading?.day}}</h4>
                <h2 class="month" [attr.data-automation-id]="heading?.month">{{heading?.month}}</h2>
                <h1 class="date" [attr.data-automation-id]="heading?.date">{{heading?.date}}</h1>
                <h3 class="year" [attr.data-automation-id]="heading?.year">{{heading?.year}}</h3>
            </div>
            <div class="date-range-tabs" *ngIf="range" [class.week-select-mode]="weekRangeSelect">
                <span class="range-tab" (click)="toggleRangeSelect('startDate')" [@startDateTextState]="rangeSelectMode" data-automation-id="calendar-start-date">{{selectedLabel}}</span>
                <span class="range-tab" (click)="toggleRangeSelect('endDate')" [@endDateTextState]="rangeSelectMode" data-automation-id="calendar-end-date">{{selected2Label}}</span>
                <i class="indicator" [@indicatorState]="rangeSelectMode"></i>
            </div>
            <div class="calendar-header">
                <span class="previous" (click)="prevMonth($event)" data-automation-id="calendar-previous"></span>
                <span class="heading">
                    <span class="month" (click)="open($event, 'months')" data-automation-id="header-month">{{monthLabel}}</span>
                    <span class="year" (click)="open($event, 'years')" data-automation-id="header-year">{{month?.getFullYear()}}</span>
                </span>
                <span class="next" (click)="nextMonth($event)" data-automation-id="calendar-next"></span>
            </div>
            <table class="calendar-content days" cellspacing="0" cellpadding="0" [hidden]="!(view=='days')">
                <thead>
                    <tr>
                        <th *ngFor="let day of weekdays" title="{{day}}" class="weekday" [attr.data-automation-id]="day.substr(0, 2)">{{day.substr(0, 2)}}</th>
                    </tr>
                </thead>
                <tbody>
                    <tr *ngFor="let week of weeks">
                        <td *ngFor="let day of week.days" [ngClass]="{
                            today: day.isToday,
                            'notinmonth': day.date.getMonth() !== this.month.getMonth(),
                            selected: isSelected(range, day.date, selected, selected2),
                            filler: isFiller(range, day.date, selected, selected2),
                            startfill: isStartFill(range, day.date, selected, selected2),
                            endfill: isEndFill(range, day.date, selected, selected2),
                            'selecting-range': isSelectingRange(range, day.date, selected, selected2, hoverDay, rangeSelectMode, weekRangeSelect)
                           }" (mouseover)="rangeHover($event, day)" [attr.data-automation-id]="day.number">
                            <button class="day" [attr.data-automation-id]="day.number" [disabled]="isDisabled(day.date, start, end)" (click)="select($event, day, true)">{{day.number}}</button>
                        </td>
                    </tr>
                </tbody>
            </table>
            <section class="calendar-content months" [hidden]="view !== 'months'">
                <div *ngFor="let month of months;let i = index" (click)="setMonth(i)">
                    <div class="month" [ngClass]="{selected: i === selected?.getMonth()}" [attr.data-automation-id]="month">{{month}}</div>
                </div>
            </section>
            <section class="calendar-content years" [hidden]="view !== 'years'">
                <div *ngFor="let year of years" (click)="setYear(year)">
                    <div class="year" [ngClass]="{selected: year == selected?.getFullYear()}" [attr.data-automation-id]="year">{{year}}</div>
                </div>
            </section>
            <div class="calendar-footer">
                <span (click)="setToday()" class="today" data-automation-id="calendar-today">{{ labels.today }}</span>
            </div>
        </div>
    `
            }] }
];
/** @nocollapse */
NovoDatePickerElement.ctorParameters = () => [
    { type: NovoLabelService },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"] }
];
NovoDatePickerElement.propDecorators = {
    minYear: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    maxYear: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    start: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    end: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    inline: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    range: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    weekRangeSelect: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    weekStart: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    onSelect: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }]
};
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: services/date-format/DateFormat.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DateFormatService {
    /**
     * @param {?} labels
     */
    constructor(labels) {
        this.labels = labels;
    }
    /**
     * @param {?} militaryTime
     * @return {?}
     */
    getTimeMask(militaryTime) {
        /** @type {?} */
        let mask = [/\d/, /\d/, /:/, /\d/, /\d/];
        /** @type {?} */
        let timeFormatArray = [];
        /** @type {?} */
        const timeFormat = this.labels.timeFormatPlaceholderAM.toLowerCase();
        if (militaryTime) {
            return mask;
        }
        else {
            timeFormatArray = timeFormat.split('hh:mm');
            if (timeFormatArray && timeFormatArray.length) {
                mask = [];
                for (const timeFormatPart of timeFormatArray) {
                    if (timeFormatPart === '') {
                        mask = mask.concat([/\d/, /\d|:/, /:|\d/, /\d|\w|\s/, /\d|\s|\w/]);
                    }
                    else if (timeFormatPart.length) {
                        for (let i = 0; i < timeFormatPart.length; i++) {
                            mask.push(/\s|\w|\d|\./);
                        }
                    }
                }
            }
        }
        return mask;
    }
    /**
     * @return {?}
     */
    getDateMask() {
        return [/\d/, /\d|\/|\.|\-/, /\/|\.|\-|\d/, /\d|\/|\.|\-/, /\d|\/|\.|\-/, /\d|\/|\.|\-/, /\d|\/|\.|\-/, /\d|\/|\.|\-/, /\d/, /\d/];
    }
    /**
     * @param {?=} militaryTime
     * @return {?}
     */
    getDateTimeMask(militaryTime = false) {
        return [...this.getDateMask(), /\,?/, /\s/, ...this.getTimeMask(militaryTime)];
    }
    /**
     * @param {?} militaryTime
     * @return {?}
     */
    getTimePlaceHolder(militaryTime) {
        if (militaryTime) {
            return this.labels.timeFormatPlaceholder24Hour;
        }
        return this.labels.timeFormatPlaceholderAM;
    }
    /**
     * @param {?} dateString
     * @return {?}
     */
    parseDateString(dateString) {
        /** @type {?} */
        let dateFormat = this.labels.dateFormatString();
        /** @type {?} */
        const dateFormatRegex = /(\w+)[\/|\.|\-](\w+)[\/|\.|\-](\w+)/gi;
        /** @type {?} */
        const dateValueRegex = /(\d+)[\/|\.|\-](\d+)[\/|\.|\-](\d+)/gi;
        /** @type {?} */
        let dateFormatTokens;
        /** @type {?} */
        let dateValueTokens;
        /** @type {?} */
        let year;
        /** @type {?} */
        let month;
        /** @type {?} */
        let day;
        /** @type {?} */
        let date = new Date();
        if (Helpers.isEmpty(dateFormat)) {
            // Default to MM/dd/yyyy
            dateFormat = 'mm/dd/yyyy';
        }
        else {
            dateFormat = dateFormat.toLowerCase();
        }
        dateFormatTokens = dateFormatRegex.exec(dateFormat);
        dateValueTokens = dateValueRegex.exec(dateString);
        if (dateFormatTokens && dateFormatTokens.length === 4 && dateValueTokens && dateValueTokens.length === 4) {
            for (let i = 1; i < 4; i++) {
                if (dateFormatTokens[i].includes('m')) {
                    month = parseInt(dateValueTokens[i], 10) - 1;
                }
                else if (dateFormatTokens[i].includes('d')) {
                    day = parseInt(dateValueTokens[i], 10);
                }
                else {
                    year = parseInt(dateValueTokens[i], 10);
                }
            }
            if (month >= 0 && month <= 11 && year > 1900 && day > 0 && day <= 31) {
                date = new Date(year, month, day);
            }
        }
        else if (dateFormatTokens && dateFormatTokens.length === 4 && dateString.length >= 1) {
            /** @type {?} */
            const twoTokens = /\d{1,4}(\/|\.|\-)(\d{1,2})/.exec(dateString);
            /** @type {?} */
            const oneToken = /^(\d{1,4})$/.exec(dateString);
            /** @type {?} */
            const delimiter = /\w+(\/|\.|\-)\w+[\/|\.|\-]\w+/gi.exec(dateFormat);
            /** @type {?} */
            const dateStringWithDelimiter = dateString[dateString.length - 1].match(/\/|\.|\-/);
            if (twoTokens && twoTokens.length === 3 && this.isValidDatePart(twoTokens[2], dateFormatTokens[2]) && !dateStringWithDelimiter) {
                dateString = `${dateString}${delimiter[1]}`;
            }
            else if (oneToken && oneToken.length === 2 && this.isValidDatePart(oneToken[1], dateFormatTokens[1]) && !dateStringWithDelimiter) {
                dateString = `${dateString}${delimiter[1]}`;
            }
        }
        return [date, dateString];
    }
    /**
     * @param {?} timeString
     * @param {?} militaryTime
     * @return {?}
     */
    parseTimeString(timeString, militaryTime) {
        /** @type {?} */
        const value = new Date();
        /** @type {?} */
        let timeStringParts;
        /** @type {?} */
        let amFormat = this.labels.timeFormatAM;
        /** @type {?} */
        let pmFormat = this.labels.timeFormatPM;
        if (!(timeString && timeString.includes(':'))) {
            return [value, timeString];
        }
        if (!militaryTime && amFormat && pmFormat) {
            /** @type {?} */
            let splits = [];
            /** @type {?} */
            let pm = false;
            amFormat = this.labels.timeFormatAM.toLowerCase();
            pmFormat = this.labels.timeFormatPM.toLowerCase();
            timeString = timeString.toLowerCase();
            if (timeString.includes(amFormat)) {
                splits = timeString.split(amFormat);
            }
            else if (timeString.includes(pmFormat)) {
                splits = timeString.split(pmFormat);
                pm = true;
            }
            if (splits && splits.length) {
                for (const item of splits) {
                    if (item && item.trim().includes(':')) {
                        timeStringParts = item.trim().split(':');
                    }
                }
            }
            if (timeStringParts && timeStringParts.length && timeStringParts.length === 2) {
                /** @type {?} */
                let hours = parseInt(timeStringParts[0], 10);
                if (hours === 12 && pm) {
                    hours = 12;
                }
                else if (pm) {
                    hours = hours + 12;
                }
                else if (hours === 12) {
                    hours = 0;
                }
                value.setHours(hours);
                value.setMinutes(parseInt(timeStringParts[1], 10));
                value.setSeconds(0);
            }
        }
        else {
            timeStringParts = /(\d{1,2}):(\d{2})/.exec(timeString);
            if (timeStringParts && timeStringParts.length && timeStringParts.length === 3) {
                value.setHours(parseInt(timeStringParts[1], 10));
                value.setMinutes(parseInt(timeStringParts[2], 10));
                value.setSeconds(0);
            }
        }
        return [value, timeString];
    }
    /**
     * @param {?} dateTimeString
     * @param {?} militaryTime
     * @param {?} type
     * @return {?}
     */
    parseString(dateTimeString, militaryTime, type) {
        switch (type) {
            case 'datetime':
                /** @type {?} */
                const str = dateTimeString.replace(/-/g, '/');
                /** @type {?} */
                const parts = str.split(' ');
                const [dt, dts] = this.parseDateString(parts[0]);
                if (parts.length > 1) {
                    const [tm, tms] = this.parseTimeString(parts[1], militaryTime);
                    return [new Date(dt.setHours(tm.getHours(), tm.getMinutes())), `${dts} ${tms}`];
                }
                return [dt, dts];
            case 'date':
                return this.parseDateString(dateTimeString);
            case 'time':
                return this.parseTimeString(dateTimeString, militaryTime);
            default:
                return;
        }
    }
    /**
     * @param {?} value
     * @param {?} format
     * @return {?}
     */
    isValidDatePart(value, format) {
        /** @type {?} */
        const datePart = parseInt(value, 10);
        if (format.includes('m') && (datePart >= 2 || value.length === 2)) {
            return true;
        }
        else if (format.includes('d') && (datePart >= 4 || value.length === 2)) {
            return true;
        }
        else if (format.includes('y') && datePart >= 1000) {
            return true;
        }
        return false;
    }
}
DateFormatService.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"] }
];
/** @nocollapse */
DateFormatService.ctorParameters = () => [
    { type: NovoLabelService }
];
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: elements/date-picker/DatePickerInput.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// Value accessor for the component (supports ngModel)
/** @type {?} */
const DATE_VALUE_ACCESSOR = {
    provide: _angular_forms__WEBPACK_IMPORTED_MODULE_1__["NG_VALUE_ACCESSOR"],
    useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["forwardRef"])((/**
     * @return {?}
     */
    () => NovoDatePickerInputElement)),
    multi: true,
};
class NovoDatePickerInputElement {
    /**
     * @param {?} element
     * @param {?} labels
     * @param {?} _changeDetectorRef
     * @param {?} dateFormatService
     */
    constructor(element, labels, _changeDetectorRef, dateFormatService) {
        this.element = element;
        this.labels = labels;
        this._changeDetectorRef = _changeDetectorRef;
        this.dateFormatService = dateFormatService;
        this.formattedValue = '';
        /**
         * View -> model callback called when value changes
         */
        this._onChange = (/**
         * @return {?}
         */
        () => { });
        /**
         * View -> model callback called when autocomplete has been touched
         */
        this._onTouched = (/**
         * @return {?}
         */
        () => { });
        this.textMaskEnabled = true;
        this.allowInvalidDate = false;
        this.disabled = false;
        this.weekStart = 0;
        this.blurEvent = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.focusEvent = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.placeholder = this.labels.dateFormatString().toUpperCase() || this.labels.dateFormatPlaceholder;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.userDefinedFormat = this.format ? !this.format.match(/^(DD\/MM\/YYYY|MM\/DD\/YYYY)$/g) : false;
        if (!this.userDefinedFormat && this.textMaskEnabled && !this.allowInvalidDate) {
            this.maskOptions = this.maskOptions || {
                mask: this.dateFormatService.getDateMask(),
                pipe: text_mask_addons_dist_createAutoCorrectedDatePipe__WEBPACK_IMPORTED_MODULE_21___default()(this.format || this.labels.dateFormatString().toLowerCase()),
                keepCharPositions: false,
                guide: true,
            };
        }
        else {
            this.maskOptions = { mask: false };
        }
    }
    /**
     * BEGIN: Convenient Panel Methods.
     * @return {?}
     */
    openPanel() {
        if (!this.disabled) {
            this.overlay.openPanel();
        }
    }
    /**
     * @return {?}
     */
    closePanel() {
        this.overlay.closePanel();
    }
    /**
     * @return {?}
     */
    get panelOpen() {
        return this.overlay && this.overlay.panelOpen;
    }
    /**
     * END: Convenient Panel Methods.
     * @param {?} event
     * @return {?}
     */
    _handleKeydown(event) {
        if ((event.keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_19__["ESCAPE"] || event.keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_19__["ENTER"] || event.keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_19__["TAB"]) && this.panelOpen) {
            this._handleEvent(event, true);
            this.closePanel();
            event.stopPropagation();
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    _handleInput(event) {
        if (document.activeElement === event.target) {
            this._handleEvent(event, false);
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    _handleBlur(event) {
        this.blurEvent.emit(event);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    _handleFocus(event) {
        this.openPanel();
        this.focusEvent.emit(event);
    }
    /**
     * @param {?} event
     * @param {?} blur
     * @return {?}
     */
    _handleEvent(event, blur) {
        /** @type {?} */
        const value = ((/** @type {?} */ (event.target))).value;
        if (value === '') {
            this.clearValue();
            this.closePanel();
        }
        else {
            this.formatDate(value, blur);
            this.openPanel();
        }
    }
    /**
     * @protected
     * @param {?} value
     * @param {?} blur
     * @return {?}
     */
    formatDate(value, blur) {
        try {
            const [dateTimeValue, formatted] = this.dateFormatService.parseString(value, false, 'date');
            if (!isNaN(dateTimeValue.getUTCDate())) {
                /** @type {?} */
                const dt = new Date(dateTimeValue);
                this.dispatchOnChange(dt, blur);
            }
            else {
                this.dispatchOnChange(null, blur);
            }
        }
        catch (err) { }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        Promise.resolve(null).then((/**
         * @return {?}
         */
        () => this._setTriggerValue(value)));
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this._onChange = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this._onTouched = fn;
    }
    /**
     * @param {?} disabled
     * @return {?}
     */
    setDisabledState(disabled) {
        this.disabled = disabled;
    }
    /**
     * @param {?=} newValue
     * @param {?=} blur
     * @param {?=} skip
     * @return {?}
     */
    dispatchOnChange(newValue, blur = false, skip = false) {
        if (newValue !== this.value) {
            this._onChange(newValue);
            if (blur) {
                !skip && this.writeValue(newValue);
            }
            else {
                !skip && this._setCalendarValue(newValue);
            }
        }
    }
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    _setTriggerValue(value) {
        this._setCalendarValue(value);
        this._setFormValue(value);
        this._changeDetectorRef.markForCheck();
    }
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    _setCalendarValue(value) {
        if (value instanceof Date && this.value instanceof Date) {
            value = new Date(value).setHours(0, 0, 0, 0);
        }
        this.value = value;
    }
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    _setFormValue(value) {
        if (this.value) {
            /** @type {?} */
            const test = this.formatDateValue(this.value);
            this.formattedValue = test;
        }
    }
    /**
     * This method closes the panel, and if a value is specified, also sets the associated
     * control to that value. It will also mark the control as dirty if this interaction
     * stemmed from the user.
     * @param {?} event
     * @return {?}
     */
    setValueAndClose(event) {
        if (event && event.date) {
            this.dispatchOnChange(event.date, true);
        }
        this.closePanel();
    }
    /**
     * Clear any previous selected option and emit a selection change event for this option
     * @return {?}
     */
    clearValue() {
        this.formattedValue = '';
        this.dispatchOnChange(null);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    formatDateValue(value) {
        /** @type {?} */
        const originalValue = value;
        try {
            if (!value) {
                return '';
            }
            if (this.userDefinedFormat && Object(date_fns__WEBPACK_IMPORTED_MODULE_10__["isValid"])(value)) {
                return Object(date_fns__WEBPACK_IMPORTED_MODULE_10__["format"])(value, this.format);
            }
            if (!(value instanceof Date)) {
                value = new Date(value);
            }
            if (!(isNaN(value.valueOf()) && this.allowInvalidDate)) {
                return this.labels.formatDateWithFormat(value, {
                    month: '2-digit',
                    day: '2-digit',
                    year: 'numeric',
                });
            }
            else {
                return originalValue;
            }
        }
        catch (err) {
            return '';
        }
    }
    /**
     * @return {?}
     */
    get hasValue() {
        return !Helpers.isEmpty(this.value);
    }
}
NovoDatePickerInputElement.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'novo-date-picker-input',
                providers: [DATE_VALUE_ACCESSOR],
                template: `
    <input
      type="text"
      [name]="name"
      [(ngModel)]="formattedValue"
      [textMask]="maskOptions"
      [placeholder]="placeholder"
      (focus)="_handleFocus($event)"
      (keydown)="_handleKeydown($event)"
      (input)="_handleInput($event)"
      (blur)="_handleBlur($event)"
      #input
      data-automation-id="date-input"
      [disabled]="disabled"
    />
    <i *ngIf="!hasValue" (click)="openPanel()" class="bhi-calendar"></i>
    <i *ngIf="hasValue" (click)="clearValue()" class="bhi-times"></i>
    <novo-overlay-template [parent]="element" position="above-below">
      <novo-date-picker
        [start]="start"
        [end]="end"
        inline="true"
        (onSelect)="setValueAndClose($event)"
        [ngModel]="value"
        [weekStart]="weekStart"
      ></novo-date-picker>
    </novo-overlay-template>
  `
            }] }
];
/** @nocollapse */
NovoDatePickerInputElement.ctorParameters = () => [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"] },
    { type: NovoLabelService },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectorRef"] },
    { type: DateFormatService }
];
NovoDatePickerInputElement.propDecorators = {
    name: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    start: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    end: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    placeholder: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    maskOptions: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    format: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    textMaskEnabled: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    allowInvalidDate: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    disabled: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostBinding"], args: ['class.disabled',] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    weekStart: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    blurEvent: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    focusEvent: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    overlay: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"], args: [NovoOverlayTemplateComponent, { static: false },] }]
};
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: elements/date-picker/DatePicker.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NovoDatePickerModule {
}
NovoDatePickerModule.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                imports: [_angular_common__WEBPACK_IMPORTED_MODULE_6__["CommonModule"], _angular_forms__WEBPACK_IMPORTED_MODULE_1__["FormsModule"], NovoOverlayModule, angular2_text_mask__WEBPACK_IMPORTED_MODULE_20__["TextMaskModule"]],
                declarations: [NovoDatePickerElement, NovoDatePickerInputElement],
                exports: [NovoDatePickerElement, NovoDatePickerInputElement],
            },] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: elements/data-table/cells/data-table-cell.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @template T
 */
class NovoDataTableCell extends _angular_cdk_table__WEBPACK_IMPORTED_MODULE_16__["CdkCell"] {
    /**
     * @param {?} columnDef
     * @param {?} elementRef
     * @param {?} renderer
     */
    constructor(columnDef, elementRef, renderer) {
        super(columnDef, elementRef);
        this.elementRef = elementRef;
        this.renderer = renderer;
        this.role = 'gridcell';
        this.subscriptions = [];
        renderer.setAttribute(elementRef.nativeElement, 'data-automation-id', `novo-column-${columnDef.cssClassFriendlyName}`);
        renderer.addClass(elementRef.nativeElement, `novo-column-${columnDef.cssClassFriendlyName}`);
        renderer.addClass(elementRef.nativeElement, 'novo-data-table-cell');
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.column.cellClass) {
            this.renderer.addClass(this.elementRef.nativeElement, this.column.cellClass(this.row));
        }
        if (this.column.rightAlignCellContent) {
            this.renderer.addClass(this.elementRef.nativeElement, 'novo-data-table-cell-align-right');
        }
        this.calculateWidths();
        this.subscriptions.push(this.resized.subscribe((/**
         * @param {?} column
         * @return {?}
         */
        (column) => {
            if (column === this.column) {
                this.calculateWidths();
            }
        })));
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.subscriptions.forEach((/**
         * @param {?} subscription
         * @return {?}
         */
        (subscription) => {
            subscription.unsubscribe();
        }));
    }
    /**
     * @private
     * @return {?}
     */
    calculateWidths() {
        if (this.column.width) {
            this.renderer.setStyle(this.elementRef.nativeElement, 'min-width', `${this.column.width}px`);
            this.renderer.setStyle(this.elementRef.nativeElement, 'max-width', `${this.column.width}px`);
            this.renderer.setStyle(this.elementRef.nativeElement, 'width', `${this.column.width}px`);
        }
    }
}
NovoDataTableCell.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'novo-data-table-cell',
                template: `
    <ng-container *ngTemplateOutlet="template; context: {$implicit: row, col: column}"></ng-container>
  `,
                changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectionStrategy"].OnPush
            }] }
];
/** @nocollapse */
NovoDataTableCell.ctorParameters = () => [
    { type: _angular_cdk_table__WEBPACK_IMPORTED_MODULE_16__["CdkColumnDef"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Renderer2"] }
];
NovoDataTableCell.propDecorators = {
    role: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostBinding"], args: ['attr.role',] }],
    row: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    template: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    column: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    resized: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }]
};
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: elements/data-table/cells/data-table-checkbox-cell.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @template T
 */
class NovoDataTableCheckboxCell extends _angular_cdk_table__WEBPACK_IMPORTED_MODULE_16__["CdkCell"] {
    /**
     * @param {?} columnDef
     * @param {?} elementRef
     * @param {?} renderer
     * @param {?} dataTable
     * @param {?} ref
     */
    constructor(columnDef, elementRef, renderer, dataTable, ref) {
        super(columnDef, elementRef);
        this.columnDef = columnDef;
        this.dataTable = dataTable;
        this.ref = ref;
        this.role = 'gridcell';
        this.checked = false;
        renderer.setAttribute(elementRef.nativeElement, 'data-automation-id', `novo-checkbox-column-${columnDef.cssClassFriendlyName}`);
        renderer.addClass(elementRef.nativeElement, `novo-checkbox-column-${columnDef.cssClassFriendlyName}`);
        renderer.addClass(elementRef.nativeElement, 'novo-data-table-checkbox-cell');
        this.selectionSubscription = this.dataTable.state.selectionSource.subscribe((/**
         * @return {?}
         */
        () => {
            this.checked = this.dataTable.isSelected(this.row);
            this.ref.markForCheck();
        }));
        this.resetSubscription = this.dataTable.state.resetSource.subscribe((/**
         * @return {?}
         */
        () => {
            this.checked = false;
            this.ref.markForCheck();
        }));
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.checked = this.dataTable.isSelected(this.row);
    }
    /**
     * @return {?}
     */
    onClick() {
        this.dataTable.selectRow(this.row);
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.selectionSubscription) {
            this.selectionSubscription.unsubscribe();
        }
        if (this.resetSubscription) {
            this.resetSubscription.unsubscribe();
        }
    }
}
NovoDataTableCheckboxCell.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'novo-data-table-checkbox-cell',
                template: `
    <div class="data-table-checkbox" (click)="onClick()">
      <input type="checkbox" [checked]="checked">
      <label>
        <i [class.bhi-checkbox-empty]="!checked"
          [class.bhi-checkbox-filled]="checked"></i>
      </label>
    </div>
    `,
                changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectionStrategy"].OnPush
            }] }
];
/** @nocollapse */
NovoDataTableCheckboxCell.ctorParameters = () => [
    { type: _angular_cdk_table__WEBPACK_IMPORTED_MODULE_16__["CdkColumnDef"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Renderer2"] },
    { type: NovoDataTable },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectorRef"] }
];
NovoDataTableCheckboxCell.propDecorators = {
    role: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostBinding"], args: ['attr.role',] }],
    row: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }]
};
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: elements/data-table/cells/data-table-expand-cell.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @template T
 */
class NovoDataTableExpandCell extends _angular_cdk_table__WEBPACK_IMPORTED_MODULE_16__["CdkCell"] {
    /**
     * @param {?} columnDef
     * @param {?} elementRef
     * @param {?} renderer
     * @param {?} dataTable
     * @param {?} ref
     */
    constructor(columnDef, elementRef, renderer, dataTable, ref) {
        super(columnDef, elementRef);
        this.columnDef = columnDef;
        this.dataTable = dataTable;
        this.ref = ref;
        this.role = 'gridcell';
        this.expanded = false;
        renderer.setAttribute(elementRef.nativeElement, 'data-automation-id', `novo-expand-column-${columnDef.cssClassFriendlyName}`);
        renderer.addClass(elementRef.nativeElement, `novo-expand-column-${columnDef.cssClassFriendlyName}`);
        renderer.addClass(elementRef.nativeElement, 'novo-data-table-expand-cell');
        this.expandSubscription = this.dataTable.state.expandSource.subscribe((/**
         * @return {?}
         */
        () => {
            this.expanded = this.dataTable.isExpanded(this.row);
            this.ref.markForCheck();
        }));
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.expanded = this.dataTable.isExpanded(this.row);
    }
    /**
     * @return {?}
     */
    onClick() {
        this.dataTable.expandRow(this.row);
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.expandSubscription) {
            this.expandSubscription.unsubscribe();
        }
    }
}
NovoDataTableExpandCell.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'novo-data-table-expand-cell',
                template: `
    <i class="bhi-next data-table-icon" novo-data-table-expander="true" [class.expanded]="expanded"></i>
  `,
                changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectionStrategy"].OnPush
            }] }
];
/** @nocollapse */
NovoDataTableExpandCell.ctorParameters = () => [
    { type: _angular_cdk_table__WEBPACK_IMPORTED_MODULE_16__["CdkColumnDef"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Renderer2"] },
    { type: NovoDataTable },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectorRef"] }
];
NovoDataTableExpandCell.propDecorators = {
    role: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostBinding"], args: ['attr.role',] }],
    row: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }]
};
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: elements/data-table/rows/data-table-header-row.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NovoDataTableHeaderRow extends _angular_cdk_table__WEBPACK_IMPORTED_MODULE_16__["CdkHeaderRow"] {
    constructor() {
        super(...arguments);
        this.rowClass = 'novo-data-table-header-row';
        this.fixedHeader = false;
        this.role = 'row';
    }
}
NovoDataTableHeaderRow.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'novo-data-table-header-row',
                template: _angular_cdk_table__WEBPACK_IMPORTED_MODULE_16__["CDK_ROW_TEMPLATE"],
                changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectionStrategy"].OnPush
            }] }
];
NovoDataTableHeaderRow.propDecorators = {
    rowClass: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostBinding"], args: ['class',] }],
    fixedHeader: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostBinding"], args: ['class.fixed-header',] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    role: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostBinding"], args: ['attr.role',] }]
};
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: elements/data-table/rows/data-table-row.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NovoDataTableRow extends _angular_cdk_table__WEBPACK_IMPORTED_MODULE_16__["CdkRow"] {
    constructor() {
        super(...arguments);
        this.rowClass = 'novo-data-table-row';
        this.role = 'row';
    }
}
NovoDataTableRow.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'novo-data-table-row',
                template: _angular_cdk_table__WEBPACK_IMPORTED_MODULE_16__["CDK_ROW_TEMPLATE"],
                changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectionStrategy"].OnPush
            }] }
];
NovoDataTableRow.propDecorators = {
    rowClass: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostBinding"], args: ['class',] }],
    role: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostBinding"], args: ['attr.role',] }],
    id: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostBinding"], args: ['attr.id',] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    dataAutomationId: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostBinding"], args: ['attr.data-automation-id',] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }]
};
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: elements/data-table/cell-headers/data-table-expand-header-cell.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @template T
 */
class NovoDataTableExpandHeaderCell extends _angular_cdk_table__WEBPACK_IMPORTED_MODULE_16__["CdkHeaderCell"] {
    /**
     * @param {?} columnDef
     * @param {?} elementRef
     * @param {?} renderer
     * @param {?} dataTable
     * @param {?} ref
     */
    constructor(columnDef, elementRef, renderer, dataTable, ref) {
        super(columnDef, elementRef);
        this.dataTable = dataTable;
        this.ref = ref;
        this.role = 'columnheader';
        this.expanded = false;
        renderer.setAttribute(elementRef.nativeElement, 'data-automation-id', `novo-expand-column-header-${columnDef.cssClassFriendlyName}`);
        renderer.addClass(elementRef.nativeElement, `novo-expand-column-${columnDef.cssClassFriendlyName}`);
        renderer.addClass(elementRef.nativeElement, 'novo-data-table-expand-header-cell');
        this.expandSubscription = this.dataTable.state.expandSource.subscribe((/**
         * @return {?}
         */
        () => {
            this.expanded = this.dataTable.allCurrentRowsExpanded();
            this.ref.markForCheck();
        }));
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.expandSubscription) {
            this.expandSubscription.unsubscribe();
        }
    }
    /**
     * @return {?}
     */
    expandAll() {
        this.dataTable.expandRows(!this.expanded);
    }
}
NovoDataTableExpandHeaderCell.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'novo-data-table-expand-header-cell',
                template: `
    <i class="bhi-next data-table-icon" novo-data-table-expander="true" (click)="expandAll()" [class.expanded]="expanded"></i>
  `,
                changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectionStrategy"].OnPush
            }] }
];
/** @nocollapse */
NovoDataTableExpandHeaderCell.ctorParameters = () => [
    { type: _angular_cdk_table__WEBPACK_IMPORTED_MODULE_16__["CdkColumnDef"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Renderer2"] },
    { type: NovoDataTable },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectorRef"] }
];
NovoDataTableExpandHeaderCell.propDecorators = {
    role: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostBinding"], args: ['attr.role',] }]
};
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: elements/data-table/cell-headers/data-table-checkbox-header-cell.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @template T
 */
class NovoDataTableCheckboxHeaderCell extends _angular_cdk_table__WEBPACK_IMPORTED_MODULE_16__["CdkHeaderCell"] {
    /**
     * @param {?} columnDef
     * @param {?} elementRef
     * @param {?} renderer
     * @param {?} dataTable
     * @param {?} ref
     */
    constructor(columnDef, elementRef, renderer, dataTable, ref) {
        super(columnDef, elementRef);
        this.dataTable = dataTable;
        this.ref = ref;
        this.role = 'columnheader';
        this.checked = false;
        renderer.setAttribute(elementRef.nativeElement, 'data-automation-id', `novo-checkbox-column-header-${columnDef.cssClassFriendlyName}`);
        renderer.addClass(elementRef.nativeElement, `novo-checkbox-column-${columnDef.cssClassFriendlyName}`);
        renderer.addClass(elementRef.nativeElement, 'novo-data-table-checkbox-header-cell');
        this.selectionSubscription = this.dataTable.state.selectionSource.subscribe((/**
         * @return {?}
         */
        () => {
            this.checked = this.dataTable.allCurrentRowsSelected();
            this.ref.markForCheck();
        }));
        this.paginationSubscription = this.dataTable.state.paginationSource.subscribe((/**
         * @param {?} event
         * @return {?}
         */
        (event) => {
            if (event.isPageSizeChange) {
                this.checked = false;
                this.dataTable.selectRows(false);
            }
            else {
                this.checked = this.dataTable.allCurrentRowsSelected();
            }
            this.ref.markForCheck();
        }));
        this.resetSubscription = this.dataTable.state.resetSource.subscribe((/**
         * @return {?}
         */
        () => {
            this.checked = false;
            this.ref.markForCheck();
        }));
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.selectionSubscription) {
            this.selectionSubscription.unsubscribe();
        }
        if (this.paginationSubscription) {
            this.paginationSubscription.unsubscribe();
        }
        if (this.resetSubscription) {
            this.resetSubscription.unsubscribe();
        }
    }
    /**
     * @return {?}
     */
    onClick() {
        this.dataTable.selectRows(!this.checked);
    }
}
NovoDataTableCheckboxHeaderCell.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'novo-data-table-checkbox-header-cell',
                template: `
    <div class="data-table-checkbox" (click)="onClick()">
      <input type="checkbox" [checked]="checked">
      <label>
        <i [class.bhi-checkbox-empty]="!checked"
          [class.bhi-checkbox-filled]="checked"></i>
      </label>
    </div>
  `,
                changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectionStrategy"].OnPush
            }] }
];
/** @nocollapse */
NovoDataTableCheckboxHeaderCell.ctorParameters = () => [
    { type: _angular_cdk_table__WEBPACK_IMPORTED_MODULE_16__["CdkColumnDef"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Renderer2"] },
    { type: NovoDataTable },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectorRef"] }
];
NovoDataTableCheckboxHeaderCell.propDecorators = {
    role: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostBinding"], args: ['attr.role',] }]
};
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: elements/data-table/cell-headers/data-table-header-cell.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @template T
 */
class NovoDataTableHeaderCell extends _angular_cdk_table__WEBPACK_IMPORTED_MODULE_16__["CdkHeaderCell"] {
    /**
     * @param {?} columnDef
     * @param {?} elementRef
     * @param {?} renderer
     */
    constructor(columnDef, elementRef, renderer) {
        super(columnDef, elementRef);
        this.elementRef = elementRef;
        this.renderer = renderer;
        this.role = 'columnheader';
        renderer.setAttribute(elementRef.nativeElement, 'data-automation-id', `novo-column-header-${columnDef.cssClassFriendlyName}`);
        renderer.addClass(elementRef.nativeElement, `novo-column-${columnDef.cssClassFriendlyName}`);
        renderer.addClass(elementRef.nativeElement, 'novo-data-table-header-cell');
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.column.width) {
            this.renderer.setStyle(this.elementRef.nativeElement, 'min-width', `${this.column.width}px`);
            this.renderer.setStyle(this.elementRef.nativeElement, 'max-width', `${this.column.width}px`);
            this.renderer.setStyle(this.elementRef.nativeElement, 'width', `${this.column.width}px`);
        }
    }
}
NovoDataTableHeaderCell.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{
                selector: 'novo-data-table-header-cell',
            },] }
];
/** @nocollapse */
NovoDataTableHeaderCell.ctorParameters = () => [
    { type: _angular_cdk_table__WEBPACK_IMPORTED_MODULE_16__["CdkColumnDef"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Renderer2"] }
];
NovoDataTableHeaderCell.propDecorators = {
    role: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostBinding"], args: ['attr.role',] }],
    column: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }]
};
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: elements/data-table/pagination/data-table-pagination.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const MAX_PAGES_DISPLAYED = 5;
/**
 * @template T
 */
class NovoDataTablePagination {
    /**
     * @param {?} changeDetectorRef
     * @param {?} labels
     * @param {?} state
     */
    constructor(changeDetectorRef, labels, state) {
        this.changeDetectorRef = changeDetectorRef;
        this.labels = labels;
        this.state = state;
        this.theme = 'standard';
        this._page = 0;
        this._pageSizeOptions = [];
        this._length = 0;
        this.pageChange = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.resetSubscription = this.state.resetSource.subscribe((/**
         * @return {?}
         */
        () => {
            this.page = 0;
            this.changeDetectorRef.markForCheck();
        }));
    }
    /**
     * @return {?}
     */
    get page() {
        return this._page;
    }
    /**
     * @param {?} page
     * @return {?}
     */
    set page(page) {
        this._page = page;
        this.changeDetectorRef.markForCheck();
        this.longRangeLabel = this.labels.getRangeText(this.page, this.pageSize, this.length, false);
        this.shortRangeLabel = this.labels.getRangeText(this.page, this.pageSize, this.length, true);
        this.state.page = this._page;
    }
    /**
     * @return {?}
     */
    get pageSize() {
        return this._pageSize;
    }
    /**
     * @param {?} pageSize
     * @return {?}
     */
    set pageSize(pageSize) {
        this._pageSize = pageSize;
        this.updateDisplayedPageSizeOptions();
        this.state.pageSize = this._pageSize;
    }
    /**
     * @return {?}
     */
    get pageSizeOptions() {
        return this._pageSizeOptions;
    }
    /**
     * @param {?} pageSizeOptions
     * @return {?}
     */
    set pageSizeOptions(pageSizeOptions) {
        this._pageSizeOptions = pageSizeOptions;
        this.updateDisplayedPageSizeOptions();
    }
    /**
     * @return {?}
     */
    get length() {
        return this._length;
    }
    /**
     * @param {?} length
     * @return {?}
     */
    set length(length) {
        this._length = length;
        this.changeDetectorRef.markForCheck();
        this.longRangeLabel = this.labels.getRangeText(this.page, this.pageSize, this.length, false);
        this.shortRangeLabel = this.labels.getRangeText(this.page, this.pageSize, this.length, true);
        this.totalPages = this.calculateTotalPages();
        this.pages = this.getPages(this.page, this.totalPages);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this._initialized = true;
        this.updateDisplayedPageSizeOptions();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.resetSubscription.unsubscribe();
    }
    /**
     * @param {?} page
     * @return {?}
     */
    selectPage(page) {
        this.page = page;
        this.emitPageEvent();
    }
    /**
     * @return {?}
     */
    nextPage() {
        if (!this.hasNextPage()) {
            return;
        }
        this.page++;
        this.pages = this.getPages(this.page, this.totalPages);
        this.emitPageEvent();
    }
    /**
     * @return {?}
     */
    previousPage() {
        if (!this.hasPreviousPage()) {
            return;
        }
        this.page--;
        this.pages = this.getPages(this.page, this.totalPages);
        this.emitPageEvent();
    }
    /**
     * @return {?}
     */
    hasPreviousPage() {
        return this.page >= 1 && this.pageSize !== 0;
    }
    /**
     * @return {?}
     */
    hasNextPage() {
        /** @type {?} */
        const numberOfPages = Math.ceil(this.length / this.pageSize) - 1;
        return this.page < numberOfPages && this.pageSize !== 0;
    }
    /**
     * @param {?} pageSize
     * @return {?}
     */
    changePageSize(pageSize) {
        this.page = 0;
        this.pageSize = pageSize;
        this.emitPageEvent(true);
    }
    /**
     * @private
     * @return {?}
     */
    updateDisplayedPageSizeOptions() {
        if (!this._initialized) {
            return;
        }
        if (!this.displayedPageSizeOptions) {
            this.displayedPageSizeOptions = [];
            this.pageSizeOptions.forEach((/**
             * @param {?} option
             * @return {?}
             */
            (option) => {
                if (option.hasOwnProperty('value')) {
                    this.displayedPageSizeOptions.push(option);
                }
                else {
                    this.displayedPageSizeOptions.push({
                        value: option,
                        label: option,
                    });
                }
            }));
        }
        this.longRangeLabel = this.labels.getRangeText(this.page, this.pageSize, this.length, false);
        this.shortRangeLabel = this.labels.getRangeText(this.page, this.pageSize, this.length, true);
        this.totalPages = this.calculateTotalPages();
        this.pages = this.getPages(this.page, this.totalPages);
        this.changeDetectorRef.detectChanges();
    }
    /**
     * @private
     * @param {?=} isPageSizeChange
     * @return {?}
     */
    emitPageEvent(isPageSizeChange = false) {
        /** @type {?} */
        const event = {
            page: this.page,
            pageSize: this.pageSize,
            length: this.length,
            filter: this.state.filter,
            sort: this.state.sort,
        };
        this.pageChange.next(event);
        this.state.page = this.page;
        this.state.pageSize = this.pageSize;
        this.longRangeLabel = this.labels.getRangeText(this.page, this.pageSize, this.length, false);
        this.shortRangeLabel = this.labels.getRangeText(this.page, this.pageSize, this.length, true);
        this.totalPages = this.calculateTotalPages();
        this.pages = this.getPages(this.page, this.totalPages);
        this.state.updates.next(event);
        this.state.onPaginationChange(isPageSizeChange, this.pageSize);
    }
    /**
     * @private
     * @return {?}
     */
    calculateTotalPages() {
        /** @type {?} */
        const totalPages = this.pageSize < 1 ? 1 : Math.ceil(this.length / this.pageSize);
        return Math.max(totalPages || 0, 1);
    }
    /**
     * @private
     * @param {?} number
     * @param {?} text
     * @param {?} isActive
     * @return {?}
     */
    makePage(number, text, isActive) {
        return {
            number,
            text,
            active: isActive,
        };
    }
    /**
     * @private
     * @param {?} currentPage
     * @param {?} totalPages
     * @return {?}
     */
    getPages(currentPage, totalPages) {
        /** @type {?} */
        const pages = [];
        // Default page limits
        /** @type {?} */
        let startPage = 1;
        /** @type {?} */
        let endPage = totalPages;
        /** @type {?} */
        const isMaxSized = MAX_PAGES_DISPLAYED < totalPages;
        // Recompute if maxPagesDisplayed
        if (isMaxSized) {
            // Current page is displayed in the middle of the visible ones
            startPage = Math.max(currentPage - Math.floor(MAX_PAGES_DISPLAYED / 2), 1);
            endPage = startPage + MAX_PAGES_DISPLAYED - 1;
            // Adjust if limit is exceeded
            if (endPage > totalPages) {
                endPage = totalPages;
                startPage = endPage - MAX_PAGES_DISPLAYED + 1;
            }
        }
        // Add page number links
        for (let number = startPage; number <= endPage; number++) {
            /** @type {?} */
            const page = this.makePage(number, number.toString(), number === currentPage);
            pages.push(page);
        }
        return pages;
    }
}
NovoDataTablePagination.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'novo-data-table-pagination',
                template: `
      <ng-container *ngIf="theme === 'basic' || theme === 'basic-wide'">
        <div class="novo-data-table-pagination-size">
            <novo-tiles *ngIf="displayedPageSizeOptions.length > 1"
                        [(ngModel)]="pageSize"
                        [options]="displayedPageSizeOptions"
                        (onChange)="changePageSize($event)"
                        data-automation-id="novo-data-table-pagination-tiles">
            </novo-tiles>
            <div *ngIf="displayedPageSizeOptions.length <= 1">{{ pageSize }}</div>
        </div>

        <div class="novo-data-table-range-label-long" data-automation-id="novo-data-table-pagination-range-label-long">
            {{ longRangeLabel }}
        </div>
        <div class="novo-data-table-range-label-short" data-automation-id="novo-data-table-pagination-range-label-short">
            {{ shortRangeLabel }}
        </div>
        <span class="spacer novo-data-table-spacer" *ngIf="theme === 'basic-wide'"></span>
        <button theme="dialogue" type="button"
                class="novo-data-table-pagination-navigation-previous"
                (click)="previousPage()"
                icon="previous"
                side="left"
                [disabled]="!hasPreviousPage()"
                data-automation-id="novo-data-table-pagination-previous">
            <span>{{ labels.previous }}</span>
        </button>
        <button theme="dialogue" type="button"
                class="novo-data-table-pagination-navigation-next"
                (click)="nextPage()"
                icon="next"
                side="right"
                [disabled]="!hasNextPage()"
                data-automation-id="novo-data-table-pagination-next">
            <span>{{ labels.next }}</span>
        </button>
      </ng-container>
      <ng-container *ngIf="theme === 'standard'">
        <h5 class="rows">{{ labels.itemsPerPage }}</h5>
        <novo-select
          [options]="displayedPageSizeOptions"
          [placeholder]="labels.select"
          [(ngModel)]="pageSize"
          (onSelect)="changePageSize($event.selected)"
          data-automation-id="pager-select"
          [attr.data-feature-id]="dataFeatureId">
        </novo-select>
        <span class="spacer"></span>
        <ul class="pager" data-automation-id="pager">
            <li class="page" (click)="selectPage(page - 1)" [ngClass]="{ 'disabled': page === 0 }"><i class="bhi-previous" data-automation-id="pager-previous"></i></li>
            <li class="page" [ngClass]="{active: p.number === page + 1}" *ngFor="let p of pages" (click)="selectPage(p.number - 1)">{{ p.text }}</li>
            <li class="page" (click)="selectPage(page + 1)" [ngClass]="{ 'disabled': page + 1 === totalPages }"><i class="bhi-next" data-automation-id="pager-next"></i></li>
        </ul>
      </ng-container>
  `,
                changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectionStrategy"].OnPush
            }] }
];
/** @nocollapse */
NovoDataTablePagination.ctorParameters = () => [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectorRef"] },
    { type: NovoLabelService },
    { type: DataTableState }
];
NovoDataTablePagination.propDecorators = {
    theme: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostBinding"], args: ['class',] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    page: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    pageSize: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    dataFeatureId: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    pageSizeOptions: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    length: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    pageChange: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }]
};
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: elements/data-table/data-table.pipes.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @template T
 * @param {?} value
 * @param {?} col
 * @return {?}
 */
function interpolateCell(value, col) {
    if (col.format) {
        return Helpers.interpolateWithFallback(col.format, value);
    }
    return value;
}
/**
 * @template T
 */
class DataTableInterpolatePipe {
    /**
     * @param {?} value
     * @param {?} column
     * @return {?}
     */
    transform(value, column) {
        if (!Helpers.isEmpty(value)) {
            return interpolateCell(value, column);
        }
        return '';
    }
}
DataTableInterpolatePipe.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Pipe"], args: [{
                name: 'dataTableInterpolate',
                pure: true,
            },] }
];
/**
 * @template T
 */
class DateTableDateRendererPipe {
    /**
     * @param {?} labels
     */
    constructor(labels) {
        this.labels = labels;
    }
    /**
     * @param {?} value
     * @param {?} column
     * @return {?}
     */
    transform(value, column) {
        if (!Helpers.isEmpty(value)) {
            return column.format ? value : this.labels.formatDate(interpolateCell(value, column));
        }
        return '';
    }
}
DateTableDateRendererPipe.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Pipe"], args: [{
                name: 'dataTableDateRenderer',
                pure: true,
            },] }
];
/** @nocollapse */
DateTableDateRendererPipe.ctorParameters = () => [
    { type: NovoLabelService }
];
if (false) {}
/**
 * @template T
 */
class DateTableDateTimeRendererPipe {
    /**
     * @param {?} labels
     */
    constructor(labels) {
        this.labels = labels;
    }
    /**
     * @param {?} value
     * @param {?} column
     * @return {?}
     */
    transform(value, column) {
        if (!Helpers.isEmpty(value)) {
            return column.format ? value : this.labels.formatDateShort(interpolateCell(value, column));
        }
        return '';
    }
}
DateTableDateTimeRendererPipe.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Pipe"], args: [{
                name: 'dataTableDateTimeRenderer',
                pure: true,
            },] }
];
/** @nocollapse */
DateTableDateTimeRendererPipe.ctorParameters = () => [
    { type: NovoLabelService }
];
if (false) {}
/**
 * @template T
 */
class DateTableTimeRendererPipe {
    /**
     * @param {?} labels
     */
    constructor(labels) {
        this.labels = labels;
    }
    /**
     * @param {?} value
     * @param {?} column
     * @return {?}
     */
    transform(value, column) {
        if (!Helpers.isEmpty(value)) {
            return column.format ? value : this.labels.formatTime(interpolateCell(value, column));
        }
        return '';
    }
}
DateTableTimeRendererPipe.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Pipe"], args: [{
                name: 'dataTableTimeRenderer',
                pure: true,
            },] }
];
/** @nocollapse */
DateTableTimeRendererPipe.ctorParameters = () => [
    { type: NovoLabelService }
];
if (false) {}
/**
 * @template T
 */
class DateTableNumberRendererPipe {
    /**
     * @param {?} labels
     */
    constructor(labels) {
        this.labels = labels;
    }
    /**
     * @param {?} value
     * @param {?} column
     * @param {?=} isPercent
     * @return {?}
     */
    transform(value, column, isPercent = false) {
        if (!Helpers.isEmpty(value)) {
            /** @type {?} */
            let val = interpolateCell(value, column);
            if (isPercent && Helpers.isNumber(val)) {
                val = `${Number(val) * 100}`;
            }
            return `${this.labels.formatNumber(val)}${isPercent ? '%' : ''}`;
        }
        return '';
    }
}
DateTableNumberRendererPipe.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Pipe"], args: [{
                name: 'dataTableNumberRenderer',
                pure: true,
            },] }
];
/** @nocollapse */
DateTableNumberRendererPipe.ctorParameters = () => [
    { type: NovoLabelService }
];
if (false) {}
/**
 * @template T
 */
class DataTableBigDecimalRendererPipe {
    /**
     * @param {?} labels
     */
    constructor(labels) {
        this.labels = labels;
    }
    /**
     * @param {?} value
     * @param {?} column
     * @return {?}
     */
    transform(value, column) {
        if (!Helpers.isEmpty(value)) {
            /** @type {?} */
            const val = interpolateCell(value, column);
            return this.labels.formatBigDecimal(Number(val));
        }
        return '';
    }
}
DataTableBigDecimalRendererPipe.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Pipe"], args: [{
                name: 'dataTableBigDecimalRenderer',
                pure: true,
            },] }
];
/** @nocollapse */
DataTableBigDecimalRendererPipe.ctorParameters = () => [
    { type: NovoLabelService }
];
if (false) {}
/**
 * @template T
 */
class DateTableCurrencyRendererPipe {
    /**
     * @param {?} labels
     */
    constructor(labels) {
        this.labels = labels;
    }
    /**
     * @param {?} value
     * @param {?} column
     * @return {?}
     */
    transform(value, column) {
        if (!Helpers.isEmpty(value)) {
            /** @type {?} */
            const val = interpolateCell(value, column);
            return this.labels.formatCurrency(Number(val));
        }
        return '';
    }
}
DateTableCurrencyRendererPipe.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Pipe"], args: [{
                name: 'dataTableCurrencyRenderer',
                pure: true,
            },] }
];
/** @nocollapse */
DateTableCurrencyRendererPipe.ctorParameters = () => [
    { type: NovoLabelService }
];
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: elements/data-table/data-table-expand.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @template T
 */
class NovoDataTableExpandDirective {
    /**
     * @param {?} vcRef
     * @param {?} state
     * @param {?} dataTable
     */
    constructor(vcRef, state, dataTable) {
        this.vcRef = vcRef;
        this.state = state;
        this.dataTable = dataTable;
        this.shouldExpandAllRows = (/**
         * @param {?} targetId
         * @return {?}
         */
        (targetId) => targetId === undefined);
        this.shouldExpandOneRow = (/**
         * @param {?} targetId
         * @return {?}
         */
        (targetId) => targetId === ((/** @type {?} */ (((/** @type {?} */ (this.row)))))).id);
        this.subscription = this.state.expandSource.subscribe((/**
         * @param {?=} targetId
         * @return {?}
         */
        (targetId) => {
            if (this.shouldExpandAllRows(targetId) || this.shouldExpandOneRow(targetId)) {
                if (dataTable.isExpanded(this.row)) {
                    this.render();
                }
                else {
                    this.clear();
                }
            }
        }));
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.subscription.unsubscribe();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onClick(event) {
        if (((/** @type {?} */ (event.target))).hasAttribute('novo-data-table-expander')) {
            Helpers.swallowEvent(event);
            this.dataTable.expandRow(this.row);
        }
    }
    /**
     * @private
     * @return {?}
     */
    clear() {
        this.vcRef.clear();
    }
    /**
     * @private
     * @return {?}
     */
    render() {
        this.vcRef.clear();
        if (this.template && this.row) {
            this.vcRef.createEmbeddedView(this.template, { $implicit: this.row });
        }
    }
}
NovoDataTableExpandDirective.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{
                selector: '[novoDataTableExpand]',
            },] }
];
/** @nocollapse */
NovoDataTableExpandDirective.ctorParameters = () => [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewContainerRef"] },
    { type: DataTableState },
    { type: NovoDataTable }
];
NovoDataTableExpandDirective.propDecorators = {
    row: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    template: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"], args: ['novoDataTableExpand',] }],
    onClick: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostListener"], args: ['click', ['$event'],] }]
};
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: elements/data-table/data-table.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NovoDataTableModule {
}
NovoDataTableModule.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                imports: [
                    NovoDatePickerModule,
                    _angular_cdk_table__WEBPACK_IMPORTED_MODULE_16__["CdkTableModule"],
                    _angular_common__WEBPACK_IMPORTED_MODULE_6__["CommonModule"],
                    _angular_forms__WEBPACK_IMPORTED_MODULE_1__["FormsModule"],
                    NovoButtonModule,
                    NovoDropdownModule,
                    NovoFormExtrasModule,
                    NovoLoadingModule,
                    NovoTilesModule,
                    NovoSearchBoxModule,
                    NovoCommonModule,
                    NovoSelectModule,
                    NovoTooltipModule,
                ],
                declarations: [
                    DataTableInterpolatePipe,
                    DateTableDateRendererPipe,
                    DateTableCurrencyRendererPipe,
                    DateTableDateTimeRendererPipe,
                    DateTableNumberRendererPipe,
                    DateTableTimeRendererPipe,
                    DataTableBigDecimalRendererPipe,
                    NovoDataTableCellHeader,
                    NovoDataTableSortFilter,
                    NovoDataTableHeaderCell,
                    NovoDataTableCell,
                    NovoDataTableHeaderRow,
                    NovoDataTableRow,
                    NovoDataTablePagination,
                    NovoDataTableCheckboxCell,
                    NovoDataTableCheckboxHeaderCell,
                    NovoDataTableExpandCell,
                    NovoDataTableExpandHeaderCell,
                    NovoDataTable,
                    NovoDataTableExpandDirective,
                    NovoDataTableClearButton,
                ],
                providers: [DataTableState],
                exports: [
                    NovoDataTable,
                    DataTableInterpolatePipe,
                    DateTableDateRendererPipe,
                    DateTableCurrencyRendererPipe,
                    DateTableDateTimeRendererPipe,
                    DateTableNumberRendererPipe,
                    DateTableTimeRendererPipe,
                    DataTableBigDecimalRendererPipe,
                    NovoDataTableClearButton,
                ],
            },] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: elements/data-table/services/remote-data-table.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @abstract
 * @template T
 */
class RemoteDataTableService {
}
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: elements/date-time-picker/DateTimePicker.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// Value accessor for the component (supports ngModel)
/** @type {?} */
const DATE_TIME_PICKER_VALUE_ACCESSOR = {
    provide: _angular_forms__WEBPACK_IMPORTED_MODULE_1__["NG_VALUE_ACCESSOR"],
    useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["forwardRef"])((/**
     * @return {?}
     */
    () => NovoDateTimePickerElement)),
    multi: true,
};
class NovoDateTimePickerElement {
    /**
     * @param {?} labels
     * @param {?} element
     */
    constructor(labels, element) {
        this.labels = labels;
        this.element = element;
        this.weekStart = 0;
        // Select callback for output
        this.onSelect = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"](false);
        this.componentTabState = 'date';
        this.datePickerValue = new Date();
        this.timePickerValue = new Date();
        this._onChange = (/**
         * @return {?}
         */
        () => { });
        this._onTouched = (/**
         * @return {?}
         */
        () => { });
    }
    /**
     * @param {?} tab
     * @return {?}
     */
    toggleView(tab) {
        this.componentTabState = tab;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    setDateLabels(value) {
        this.selectedLabel = this.labels.formatDateWithFormat(value, {
            month: 'short',
            day: '2-digit',
            year: 'numeric',
        });
    }
    /**
     * @param {?} value
     * @return {?}
     */
    setTimeLabels(value) {
        /** @type {?} */
        let hours = value.getHours();
        /** @type {?} */
        const minutes = value.getMinutes();
        this.meridian = value.toLocaleTimeString().slice(-2);
        if (!this.military) {
            hours = this.meridian === 'PM' && hours > 12 ? hours - 12 : hours;
            // Special case for 12
            if (this.meridian === 'PM' && hours === 24) {
                hours = 12;
            }
            else if (this.meridian === 'AM' && hours === 0) {
                hours = 12;
            }
        }
        this.hours = hours.toString();
        this.minutes = minutes.toString().length === 1 ? `0${minutes.toString()}` : minutes.toString();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onDateSelected(event) {
        this.datePickerValue = event.date;
        this.model = this.createFullDateValue(this.datePickerValue, this.timePickerValue);
        this.setDateLabels(this.model);
        this.onSelect.emit({ date: this.model });
        this._onChange(this.model);
        this.toggleView('time');
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onTimeSelected(event) {
        this.timePickerValue = event.date;
        this.model = this.createFullDateValue(this.model, this.timePickerValue);
        this.setTimeLabels(this.model);
        this.onSelect.emit({ date: this.model });
        this._onChange(this.model);
    }
    /**
     * @param {?} datePickerValue
     * @param {?} timePickerValue
     * @return {?}
     */
    createFullDateValue(datePickerValue, timePickerValue) {
        return Object(date_fns__WEBPACK_IMPORTED_MODULE_10__["setMilliseconds"])(Object(date_fns__WEBPACK_IMPORTED_MODULE_10__["setSeconds"])(Object(date_fns__WEBPACK_IMPORTED_MODULE_10__["setMinutes"])(Object(date_fns__WEBPACK_IMPORTED_MODULE_10__["setHours"])(datePickerValue, Object(date_fns__WEBPACK_IMPORTED_MODULE_10__["getHours"])(timePickerValue)), Object(date_fns__WEBPACK_IMPORTED_MODULE_10__["getMinutes"])(timePickerValue)), Object(date_fns__WEBPACK_IMPORTED_MODULE_10__["getSeconds"])(timePickerValue)), Object(date_fns__WEBPACK_IMPORTED_MODULE_10__["getMilliseconds"])(timePickerValue));
    }
    // ValueAccessor Functions
    /**
     * @param {?} model
     * @return {?}
     */
    writeValue(model) {
        this.model = model;
        if (Helpers.isEmpty(model)) {
            this.model = new Date();
        }
        else if (!isNaN(model)) {
            this.model = new Date(model);
        }
        this.datePickerValue = this.model;
        this.timePickerValue = this.model;
        if (Helpers.isDate(this.model)) {
            this.setDateLabels(this.model);
            this.setTimeLabels(this.model);
        }
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this._onChange = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this._onTouched = fn;
    }
}
NovoDateTimePickerElement.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'novo-date-time-picker',
                providers: [DATE_TIME_PICKER_VALUE_ACCESSOR],
                animations: [
                    Object(_angular_animations__WEBPACK_IMPORTED_MODULE_9__["trigger"])('dateTextState', [
                        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_9__["state"])('date', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_9__["style"])({
                            opacity: '1.0',
                        })),
                        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_9__["state"])('time', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_9__["style"])({
                            opacity: '0.6',
                        })),
                        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_9__["transition"])('date <=> time', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_9__["animate"])('200ms ease-in')),
                    ]),
                    Object(_angular_animations__WEBPACK_IMPORTED_MODULE_9__["trigger"])('timeTextState', [
                        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_9__["state"])('date', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_9__["style"])({
                            opacity: '0.6',
                        })),
                        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_9__["state"])('time', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_9__["style"])({
                            opacity: '1.0',
                        })),
                        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_9__["transition"])('date <=> time', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_9__["animate"])('200ms ease-in')),
                    ]),
                    Object(_angular_animations__WEBPACK_IMPORTED_MODULE_9__["trigger"])('indicatorState', [
                        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_9__["state"])('date', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_9__["style"])({
                            transform: 'translateX(0%)',
                        })),
                        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_9__["state"])('time', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_9__["style"])({
                            transform: 'translateX(100%)',
                        })),
                        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_9__["transition"])('date <=> time', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_9__["animate"])('200ms ease-in')),
                    ]),
                    Object(_angular_animations__WEBPACK_IMPORTED_MODULE_9__["trigger"])('containerState', [
                        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_9__["state"])('date', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_9__["style"])({
                            transform: 'translateX(0%)',
                        })),
                        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_9__["state"])('time', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_9__["style"])({
                            transform: 'translateX(-100%)',
                        })),
                        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_9__["transition"])('date <=> time', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_9__["animate"])('200ms ease-in')),
                    ]),
                ],
                template: `
    <div class="date-time-container">
      <div class="date-time-tabs">
        <span
          class="date-tab"
          (click)="toggleView('date')"
          [@dateTextState]="componentTabState"
          data-automation-id="novo-date-time-date-tab"
          >{{ selectedLabel }}</span
        >
        <span
          class="time-tab"
          (click)="toggleView('time')"
          [@timeTextState]="componentTabState"
          data-automation-id="novo-date-time-time-tab"
        >
          <span class="hours" data-automation-id="novo-time-picker-hours">{{ hours }}</span
          >:<span class="minutes" data-automation-id="novo-time-picker-minutes">{{ minutes }}</span>
          <span *ngIf="!military" class="meridian"> {{ meridian }}</span>
        </span>
        <i class="date-time-indicator" [@indicatorState]="componentTabState"></i>
      </div>
      <div class="view-container" [@containerState]="componentTabState">
        <div class="calendar">
          <novo-date-picker
            (onSelect)="onDateSelected($event)"
            [(ngModel)]="model"
            inline="true"
            [minYear]="minYear"
            [maxYear]="maxYear"
            [start]="start"
            [end]="end"
            [weekStart]="weekStart"
          ></novo-date-picker>
        </div>
        <div class="time-picker">
          <novo-time-picker (onSelect)="onTimeSelected($event)" [(ngModel)]="model" [military]="military" inline="true"></novo-time-picker>
        </div>
      </div>
    </div>
  `
            }] }
];
/** @nocollapse */
NovoDateTimePickerElement.ctorParameters = () => [
    { type: NovoLabelService },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"] }
];
NovoDateTimePickerElement.propDecorators = {
    minYear: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    maxYear: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    start: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    end: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    military: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    weekStart: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    onSelect: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }]
};
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: elements/date-time-picker/DateTimePickerInput.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// Value accessor for the component (supports ngModel)
/** @type {?} */
const DATE_VALUE_ACCESSOR$1 = {
    provide: _angular_forms__WEBPACK_IMPORTED_MODULE_1__["NG_VALUE_ACCESSOR"],
    useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["forwardRef"])((/**
     * @return {?}
     */
    () => NovoDateTimePickerInputElement)),
    multi: true,
};
class NovoDateTimePickerInputElement {
    /**
     * @param {?} element
     * @param {?} labels
     * @param {?} _changeDetectorRef
     */
    constructor(element, labels, _changeDetectorRef) {
        this.element = element;
        this.labels = labels;
        this._changeDetectorRef = _changeDetectorRef;
        /**
         * View -> model callback called when value changes
         */
        this._onChange = (/**
         * @return {?}
         */
        () => { });
        /**
         * View -> model callback called when autocomplete has been touched
         */
        this._onTouched = (/**
         * @return {?}
         */
        () => { });
        this.military = false;
        this.disabled = false;
        this.weekStart = 0;
        this.blurEvent = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.focusEvent = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
    }
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        this.datePart = Object(date_fns__WEBPACK_IMPORTED_MODULE_10__["isDate"])(value) ? Object(date_fns__WEBPACK_IMPORTED_MODULE_10__["parse"])(value) : value;
        this.timePart = Object(date_fns__WEBPACK_IMPORTED_MODULE_10__["isDate"])(value) ? Object(date_fns__WEBPACK_IMPORTED_MODULE_10__["parse"])(value) : value;
        Promise.resolve(null).then((/**
         * @return {?}
         */
        () => this._setTriggerValue(value)));
    }
    /**
     * @param {?} event
     * @return {?}
     */
    updateDate(event) {
        this.datePart = event;
        this.checkParts();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    updateTime(event) {
        this.timePart = event;
        this.checkParts();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    handleBlur(event) {
        this.blurEvent.emit(event);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    handleFocus(event) {
        this.focusEvent.emit(event);
    }
    /**
     * @return {?}
     */
    checkParts() {
        try {
            if (this.datePart instanceof Date && this.timePart instanceof Date) {
                this.dispatchOnChange(new Date(this.datePart.getFullYear(), this.datePart.getMonth(), this.datePart.getDate(), this.timePart.getHours(), this.timePart.getMinutes()));
            }
            else if (this.datePart instanceof Date) {
                this.timePart = new Date(this.datePart.getFullYear(), this.datePart.getMonth(), this.datePart.getDate(), 12, 0);
                this.dispatchOnChange(new Date(this.datePart.getFullYear(), this.datePart.getMonth(), this.datePart.getDate(), this.timePart.getHours(), this.timePart.getMinutes()));
            }
            else {
                this.dispatchOnChange(null);
            }
        }
        catch (err) {
            // Date not valid
            this.dispatchOnChange(null);
        }
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this._onChange = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this._onTouched = fn;
    }
    /**
     * @param {?} disabled
     * @return {?}
     */
    setDisabledState(disabled) {
        this.disabled = disabled;
    }
    /**
     * @param {?=} newValue
     * @return {?}
     */
    dispatchOnChange(newValue) {
        if (newValue !== this.value) {
            this._onChange(newValue);
            this._setTriggerValue(newValue);
        }
    }
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    _setTriggerValue(value) {
        this.value = value;
        this._changeDetectorRef.markForCheck();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    setValue(event) {
        if (event && event.date) {
            this.dispatchOnChange(event.date);
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    setValueAndClose(event) {
        this.setValue(event);
    }
    /**
     * Clear any previous selected option and emit a selection change event for this option
     * @return {?}
     */
    clearValue() {
        this.dispatchOnChange(null);
    }
    /**
     * @return {?}
     */
    get hasValue() {
        return !Helpers.isEmpty(this.value);
    }
}
NovoDateTimePickerInputElement.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'novo-date-time-picker-input',
                providers: [DATE_VALUE_ACCESSOR$1],
                template: `
    <novo-date-picker-input
      [ngModel]="datePart"
      (ngModelChange)="updateDate($event)"
      [start]="start"
      [end]="end"
      [maskOptions]="maskOptions"
      (blurEvent)="handleBlur($event)"
      (focusEvent)="handleFocus($event)"
      [disabled]="disabled"
      [weekStart]="weekStart"
    ></novo-date-picker-input>
    <novo-time-picker-input
      [ngModel]="timePart"
      (ngModelChange)="updateTime($event)"
      [military]="military"
      (blurEvent)="handleBlur($event)"
      (focusEvent)="handleFocus($event)"
      [disabled]="disabled"
    ></novo-time-picker-input>
  `
            }] }
];
/** @nocollapse */
NovoDateTimePickerInputElement.ctorParameters = () => [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"] },
    { type: NovoLabelService },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectorRef"] }
];
NovoDateTimePickerInputElement.propDecorators = {
    name: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    start: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    end: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    placeholder: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    maskOptions: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    military: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    disabled: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    format: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    weekStart: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    blurEvent: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    focusEvent: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }]
};
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: elements/time-picker/TimePicker.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// Value accessor for the component (supports ngModel)
/** @type {?} */
const TIME_PICKER_VALUE_ACCESSOR = {
    provide: _angular_forms__WEBPACK_IMPORTED_MODULE_1__["NG_VALUE_ACCESSOR"],
    useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["forwardRef"])((/**
     * @return {?}
     */
    () => NovoTimePickerElement)),
    multi: true,
};
class NovoTimePickerElement {
    constructor() {
        this.military = false;
        this.analog = false;
        this.inline = false;
        this.onSelect = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.hours = 12;
        this.minutes = 0;
        this.value = null;
        this.increments = [];
        this.MERIDIANS = ['am', 'pm'];
        this.MINUTES = ['05', '10', '15', '20', '25', '30', '35', '40', '45', '50', '55', '00'];
        this.HOURS = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12'];
        this._onChange = (/**
         * @return {?}
         */
        () => { });
        this._onTouched = (/**
         * @return {?}
         */
        () => { });
    }
    /**
     * @param {?} arr
     * @return {?}
     */
    flatten(arr) {
        return Array.prototype.concat(...arr);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.military) {
            this.HOURS = ['0', ...this.HOURS, '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23'];
            this.increments = this.flatten([...this.HOURS.map((/**
                 * @param {?} hour
                 * @return {?}
                 */
                (hour) => [`${hour}:00`, `${hour}:15`, `${hour}:30`, `${hour}:45`]))]);
        }
        else {
            /** @type {?} */
            const hours = ['12', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11'];
            this.increments = this.flatten([
                ...hours.map((/**
                 * @param {?} hour
                 * @return {?}
                 */
                (hour) => [`${hour}:00 AM`, `${hour}:15 AM`, `${hour}:30 AM`, `${hour}:45 AM`])),
                ...hours.map((/**
                 * @param {?} hour
                 * @return {?}
                 */
                (hour) => [`${hour}:00 PM`, `${hour}:15 PM`, `${hour}:30 PM`, `${hour}:45 PM`])),
            ]);
        }
        this.ngOnChanges();
    }
    /**
     * @param {?=} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (this.model) {
            this.init(this.model, false);
        }
        else {
            this.selected = null;
            this.init(new Date(), false);
        }
    }
    /**
     * @param {?} value
     * @param {?} dispatch
     * @return {?}
     */
    init(value, dispatch) {
        /** @type {?} */
        const _value = new Date(value);
        /** @type {?} */
        let hours = _value.getHours();
        /** @type {?} */
        let minutes = _value.getMinutes();
        if (!this.military) {
            this.meridian = hours >= 12 ? 'pm' : 'am';
            hours = hours % 12;
            hours = hours || 12;
        }
        minutes = minutes < 10 ? `0${minutes}` : minutes;
        this.setHours(null, hours, dispatch);
        this.setMinutes(null, minutes, dispatch);
        this.checkBetween(minutes);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    checkBetween(value) {
        this.inBetween = this.MINUTES.indexOf(String(value)) < 0;
    }
    /**
     * @param {?} event
     * @param {?} value
     * @return {?}
     */
    setValue(event, value) {
        Helpers.swallowEvent(event);
        this.selected = value;
        const [time, meridian] = value.split(' ');
        const [hours, minutes] = time.split(':');
        this.hours = hours;
        this.minutes = minutes;
        this.meridian = meridian;
        this.dispatchChange();
    }
    /**
     * @param {?} event
     * @param {?} hours
     * @param {?} dispatch
     * @return {?}
     */
    setHours(event, hours, dispatch) {
        Helpers.swallowEvent(event);
        this.hours = hours;
        this.hoursClass = `hour-${hours}`;
        this.activeHour = hours;
        if (dispatch) {
            this.dispatchChange();
        }
    }
    /**
     * @param {?} event
     * @param {?} minutes
     * @param {?} dispatch
     * @return {?}
     */
    setMinutes(event, minutes, dispatch) {
        Helpers.swallowEvent(event);
        this.minutes = minutes;
        this.minutesClass = `min-${minutes}`;
        this.activeMinute = minutes;
        this.checkBetween(minutes);
        if (dispatch) {
            this.dispatchChange();
        }
    }
    /**
     * @param {?} event
     * @param {?} period
     * @param {?} dispatch
     * @return {?}
     */
    setPeriod(event, period, dispatch) {
        Helpers.swallowEvent(event);
        this.meridian = period;
        if (dispatch) {
            this.dispatchChange();
        }
    }
    /**
     * @return {?}
     */
    dispatchChange() {
        /** @type {?} */
        let hours = Number(this.hours);
        if (!this.military) {
            hours = this.meridian.toLowerCase() === 'pm' ? hours + 12 : hours;
            // Special case for 12
            if (this.meridian.toLowerCase() === 'pm' && hours === 24) {
                hours = 12;
            }
            else if (this.meridian.toLowerCase() === 'am' && hours === 12) {
                hours = 0;
            }
        }
        /** @type {?} */
        const value = new Date();
        value.setHours(hours);
        value.setMinutes(this.minutes);
        value.setSeconds(0);
        this.value = `${this.hours}:${this.minutes} ${this.meridian}`;
        this.onSelect.next({
            hours,
            minutes: this.minutes,
            meridian: this.meridian,
            date: value,
            text: this.value,
        });
        this._onChange(value);
    }
    // ValueAccessor Functions
    /**
     * @param {?} model
     * @return {?}
     */
    writeValue(model) {
        this.model = model;
        if (Helpers.isDate(model)) {
            this.init(model, false);
        }
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this._onChange = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this._onTouched = fn;
    }
}
NovoTimePickerElement.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'novo-time-picker',
                providers: [TIME_PICKER_VALUE_ACCESSOR],
                template: `
        <div class="digital" [class.inline]="inline" [class.military]="military">
            <div class="digital--inner">
                <span class="digital--clock" *ngIf="!inline">
                    <span class="hours" data-automation-id="novo-time-picker-hours">{{hours}}</span>:<span class="minutes" data-automation-id="novo-time-picker-minutes">{{minutes}}</span>
                </span>
                <div class="control-block" *ngIf="!military">
                    <span *ngFor="let period of MERIDIANS" class="digital--period" [class.active]="meridian==period" (click)="setPeriod($event, period, true)" [attr.data-automation-id]="period">{{period}}</span>
                </div>
            </div>
        </div>
        <div class="increments" *ngIf="!analog">
            <novo-list direction="vertical" data-automation-id="novo-time-picker-increments">
                <novo-list-item *ngFor="let increment of increments" (click)="setValue($event, increment)" [class.active]="increment==selected" [attr.data-automation-id]="increment">
                    <item-content>{{increment}}</item-content>
                    <i *ngIf="increment==selected" class="bhi-check"></i>
                </novo-list-item>
            </novo-list>
        </div>
        <div class="analog" *ngIf="analog">
            <div class="analog--inner">
                <div class="analog--face">
                    <span class="analog--center"></span>
                    <span class="analog--hand--hours" [ngClass]="hoursClass">
                        <span class="analog--ball"></span>
                    </span>
                    <span class="analog--hand--minutes" [ngClass]="minutesClass">
                        <span class="analog--ball" [ngClass]="{between: inBetween}"></span>
                    </span>
                </div>
                <div class="analog--hours">
                    <span *ngFor="let hour of HOURS" class="analog--hour" [ngClass]="{active: activeHour == hour}" (click)="setHours($event, hour, true)" [attr.data-automation-id]="hour">{{hour}}</span>
                </div>
                <div class="analog--minutes">
                    <span *ngFor="let minute of MINUTES" class="analog--minute" [ngClass]="{active: activeMinute == minute}" (click)="setMinutes($event, minute, true)" [attr.data-automation-id]="minute">{{minute}}</span>
                </div>
            </div>
        </div>
    `,
                host: {
                    '[class.military]': 'military',
                }
            }] }
];
NovoTimePickerElement.propDecorators = {
    military: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    analog: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    inline: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    onSelect: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }]
};
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: elements/time-picker/TimePickerInput.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// Value accessor for the component (supports ngModel)
/** @type {?} */
const DATE_VALUE_ACCESSOR$2 = {
    provide: _angular_forms__WEBPACK_IMPORTED_MODULE_1__["NG_VALUE_ACCESSOR"],
    useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["forwardRef"])((/**
     * @return {?}
     */
    () => NovoTimePickerInputElement)),
    multi: true,
};
class NovoTimePickerInputElement {
    /**
     * @param {?} element
     * @param {?} labels
     * @param {?} dateFormatService
     * @param {?} _changeDetectorRef
     */
    constructor(element, labels, dateFormatService, _changeDetectorRef) {
        this.element = element;
        this.labels = labels;
        this.dateFormatService = dateFormatService;
        this._changeDetectorRef = _changeDetectorRef;
        this.formattedValue = '';
        /**
         * View -> model callback called when value changes
         */
        this._onChange = (/**
         * @return {?}
         */
        () => { });
        /**
         * View -> model callback called when autocomplete has been touched
         */
        this._onTouched = (/**
         * @return {?}
         */
        () => { });
        this.military = false;
        this.disabled = false;
        this.blurEvent = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.focusEvent = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.placeholder = this.military ? this.labels.timeFormatPlaceholder24Hour : this.labels.timeFormatPlaceholderAM;
        this.maskOptions = {
            mask: this.military ? [/\d/, /\d/, ':', /\d/, /\d/] : [/\d/, /\d/, ':', /\d/, /\d/, ' ', /[aApP上下]/, /[mM午]/],
            pipe: this.military ? text_mask_addons_dist_createAutoCorrectedDatePipe__WEBPACK_IMPORTED_MODULE_21___default()('HH:MM') : text_mask_addons_dist_createAutoCorrectedDatePipe__WEBPACK_IMPORTED_MODULE_21___default()('mm:MM'),
            keepCharPositions: false,
            guide: true,
        };
    }
    /**
     * BEGIN: Convenient Panel Methods.
     * @return {?}
     */
    openPanel() {
        if (!this.overlay.panelOpen) {
            this.overlay.openPanel();
            /** @type {?} */
            const hour = new Date().getHours();
            Promise.resolve(null).then((/**
             * @return {?}
             */
            () => this.scrollToIndex(hour * 4)));
        }
    }
    /**
     * @return {?}
     */
    closePanel() {
        this.overlay.closePanel();
    }
    /**
     * @return {?}
     */
    get panelOpen() {
        return this.overlay && this.overlay.panelOpen;
    }
    /**
     * END: Convenient Panel Methods.
     * @param {?} event
     * @return {?}
     */
    _handleKeydown(event) {
        if ((event.keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_19__["ESCAPE"] || event.keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_19__["ENTER"] || event.keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_19__["TAB"]) && this.panelOpen) {
            this.closePanel();
            event.stopPropagation();
            event.stopImmediatePropagation();
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    _handleInput(event) {
        if (document.activeElement === event.target) {
            // this._onChange((event.target as HTMLInputElement).value);
            /** @type {?} */
            const text = ((/** @type {?} */ (event.target))).value;
            if (this.military ? text.replace(/_/g, '').length === 5 : text.replace(/_/g, '').length === 8) {
                const [dateTimeValue, formatted] = this.dateFormatService.parseString(text, this.military, 'time');
                this.dispatchOnChange(dateTimeValue);
            }
            else {
                this.dispatchOnChange(null);
            }
            this.openPanel();
            /** @type {?} */
            const num = Number(text.split(':')[0]);
            this.scrollToIndex(num * 4);
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    _handleBlur(event) {
        this.blurEvent.emit(event);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    _handleFocus(event) {
        this.openPanel();
        this.focusEvent.emit(event);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        Promise.resolve(null).then((/**
         * @return {?}
         */
        () => this._setTriggerValue(value)));
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this._onChange = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this._onTouched = fn;
    }
    /**
     * @param {?} disabled
     * @return {?}
     */
    setDisabledState(disabled) {
        this.disabled = disabled;
    }
    /**
     * @param {?=} newValue
     * @param {?=} skip
     * @return {?}
     */
    dispatchOnChange(newValue, skip = false) {
        if (newValue !== this.value) {
            this._onChange(newValue);
            !skip && this.writeValue(newValue);
        }
    }
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    _setTriggerValue(value) {
        if (value instanceof Date && this.value instanceof Date) {
            value = new Date(value.setFullYear(this.value.getFullYear(), this.value.getMonth(), this.value.getDate()));
        }
        this.value = value;
        if (this.value) {
            this.formattedValue = this.formatDateValue(this.value);
        }
        this._changeDetectorRef.markForCheck();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    setValue(event) {
        if (event && event.date) {
            this.dispatchOnChange(event.date);
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    setValueAndClose(event) {
        this.setValue(event);
        this.closePanel();
    }
    /**
     * Clear any previous selected option and emit a selection change event for this option
     * @return {?}
     */
    clearValue() {
        this.formattedValue = '';
        this.dispatchOnChange(null);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    formatDateValue(value) {
        if (!value) {
            return '';
        }
        /** @type {?} */
        const format = this.labels.formatTimeWithFormat(value, {
            hour: 'numeric',
            minute: '2-digit',
            hour12: !this.military,
        });
        if (format.split(':')[0].length === 1) {
            return `0${format}`;
        }
        return format;
    }
    /**
     * @return {?}
     */
    get hasValue() {
        return !Helpers.isEmpty(this.value);
    }
    /**
     * @param {?} index
     * @return {?}
     */
    scrollToIndex(index) {
        /** @type {?} */
        const element = this.overlay.overlayRef.overlayElement;
        /** @type {?} */
        const list = element.querySelector('.increments');
        /** @type {?} */
        const items = list.querySelectorAll('novo-list-item');
        /** @type {?} */
        const item = items[index];
        if (item) {
            list.scrollTop = ((/** @type {?} */ (item))).offsetTop;
        }
    }
}
NovoTimePickerInputElement.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'novo-time-picker-input',
                providers: [DATE_VALUE_ACCESSOR$2],
                template: `
    <input
      type="text"
      [name]="name"
      [(ngModel)]="formattedValue"
      [textMask]="maskOptions"
      [placeholder]="placeholder"
      (focus)="_handleFocus($event)"
      (keydown)="_handleKeydown($event)"
      (input)="_handleInput($event)"
      (blur)="_handleBlur($event)"
      #input
      data-automation-id="time-input"
      [disabled]="disabled"
    />
    <i *ngIf="!hasValue" (click)="openPanel()" class="bhi-clock"></i> <i *ngIf="hasValue" (click)="clearValue()" class="bhi-times"></i>

    <novo-overlay-template [parent]="element" position="above-below">
      <novo-time-picker inline="true" (onSelect)="setValue($event)" [ngModel]="value" [military]="military"></novo-time-picker>
    </novo-overlay-template>
  `
            }] }
];
/** @nocollapse */
NovoTimePickerInputElement.ctorParameters = () => [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"] },
    { type: NovoLabelService },
    { type: DateFormatService },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectorRef"] }
];
NovoTimePickerInputElement.propDecorators = {
    name: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    placeholder: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    military: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    maskOptions: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    disabled: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostBinding"], args: ['class.disabled',] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    blurEvent: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    focusEvent: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    overlay: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"], args: [NovoOverlayTemplateComponent, { static: false },] }]
};
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: elements/time-picker/TimePicker.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NovoTimePickerModule {
}
NovoTimePickerModule.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                imports: [_angular_common__WEBPACK_IMPORTED_MODULE_6__["CommonModule"], _angular_forms__WEBPACK_IMPORTED_MODULE_1__["FormsModule"], angular2_text_mask__WEBPACK_IMPORTED_MODULE_20__["TextMaskModule"], NovoOverlayModule, NovoListModule],
                declarations: [NovoTimePickerElement, NovoTimePickerInputElement],
                exports: [NovoTimePickerElement, NovoTimePickerInputElement],
            },] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: elements/date-time-picker/DateTimePicker.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NovoDateTimePickerModule {
}
NovoDateTimePickerModule.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                imports: [_angular_common__WEBPACK_IMPORTED_MODULE_6__["CommonModule"], _angular_forms__WEBPACK_IMPORTED_MODULE_1__["FormsModule"], NovoDatePickerModule, NovoTimePickerModule, angular2_text_mask__WEBPACK_IMPORTED_MODULE_20__["TextMaskModule"], NovoOverlayModule],
                declarations: [NovoDateTimePickerElement, NovoDateTimePickerInputElement],
                exports: [NovoDateTimePickerElement, NovoDateTimePickerInputElement],
            },] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: elements/expansion/accordion.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Directive for a Material Design Accordion.
 */
class NovoAccordion extends _angular_cdk_accordion__WEBPACK_IMPORTED_MODULE_22__["CdkAccordion"] {
    constructor() {
        super(...arguments);
        this._hideToggle = false;
        /**
         * The display mode used for all expansion panels in the accordion. Currently two display
         * modes exist:
         *  default - a gutter-like spacing is placed around any expanded panel, placing the expanded
         *     panel at a different elevation from the reset of the accordion.
         *  flat - no spacing is placed around expanded panels, showing all panels at the same
         *     elevation.
         */
        this.displayMode = 'default';
    }
    /**
     * Whether the expansion indicator should be hidden.
     * @return {?}
     */
    get hideToggle() {
        return this._hideToggle;
    }
    /**
     * @param {?} show
     * @return {?}
     */
    set hideToggle(show) {
        this._hideToggle = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_12__["coerceBooleanProperty"])(show);
    }
}
NovoAccordion.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{
                selector: 'novo-accordion',
                exportAs: 'novoAccordion',
                host: {
                    class: 'novo-accordion',
                },
            },] }
];
NovoAccordion.propDecorators = {
    hideToggle: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    displayMode: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }]
};
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: elements/expansion/expansion-animations.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Time and timing curve for expansion panel animations.
 * @type {?}
 */
const EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';
/**
 * Animations used by the Material expansion panel.
 * @type {?}
 */
const novoExpansionAnimations = {
    /**
     * Animation that rotates the indicator arrow.
     */
    indicatorRotate: Object(_angular_animations__WEBPACK_IMPORTED_MODULE_9__["trigger"])('indicatorRotate', [
        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_9__["state"])('collapsed', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_9__["style"])({ transform: 'rotate(0deg)' })),
        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_9__["state"])('expanded', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_9__["style"])({ transform: 'rotate(180deg)' })),
        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_9__["transition"])('expanded <=> collapsed', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_9__["animate"])(EXPANSION_PANEL_ANIMATION_TIMING)),
    ]),
    /**
     * Animation that expands and collapses the panel header height.
     */
    expansionHeaderHeight: Object(_angular_animations__WEBPACK_IMPORTED_MODULE_9__["trigger"])('expansionHeight', [
        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_9__["state"])('collapsed', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_9__["style"])({
            height: '{{collapsedHeight}}',
        }), {
            params: { collapsedHeight: '48px' },
        }),
        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_9__["state"])('expanded', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_9__["style"])({
            height: '{{expandedHeight}}',
        }), {
            params: { expandedHeight: '56px' },
        }),
        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_9__["transition"])('expanded <=> collapsed', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_9__["group"])([Object(_angular_animations__WEBPACK_IMPORTED_MODULE_9__["query"])('@indicatorRotate', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_9__["animateChild"])(), { optional: true }), Object(_angular_animations__WEBPACK_IMPORTED_MODULE_9__["animate"])(EXPANSION_PANEL_ANIMATION_TIMING)])),
    ]),
    /**
     * Animation that expands and collapses the panel content.
     */
    bodyExpansion: Object(_angular_animations__WEBPACK_IMPORTED_MODULE_9__["trigger"])('bodyExpansion', [
        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_9__["state"])('collapsed', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_9__["style"])({ height: '0px', visibility: 'hidden' })),
        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_9__["state"])('expanded', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_9__["style"])({ height: '*', visibility: 'visible' })),
        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_9__["transition"])('expanded <=> collapsed', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_9__["animate"])(EXPANSION_PANEL_ANIMATION_TIMING)),
    ]),
};

/**
 * @fileoverview added by tsickle
 * Generated from: elements/expansion/expansion-panel-content.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Expansion panel content that will be rendered lazily
 * after the panel is opened for the first time.
 */
class NovoExpansionPanelContent {
    /**
     * @param {?} _template
     */
    constructor(_template) {
        this._template = _template;
    }
}
NovoExpansionPanelContent.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{
                selector: 'ng-template[matExpansionPanelContent]',
            },] }
];
/** @nocollapse */
NovoExpansionPanelContent.ctorParameters = () => [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["TemplateRef"] }
];
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: elements/expansion/expansion-panel.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Counter for generating unique element ids.
 * @type {?}
 */
let uniqueId = 0;
/**
 * `<novo-expansion-panel>`
 *
 * This component can be used as a single element to show expandable content, or as one of
 * multiple children of an element with the NovoAccordion directive attached.
 */
class NovoExpansionPanel extends _angular_cdk_accordion__WEBPACK_IMPORTED_MODULE_22__["CdkAccordionItem"] {
    /**
     * @param {?} accordion
     * @param {?} _changeDetectorRef
     * @param {?} _uniqueSelectionDispatcher
     * @param {?} _viewContainerRef
     */
    constructor(accordion, _changeDetectorRef, _uniqueSelectionDispatcher, _viewContainerRef) {
        super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);
        this._viewContainerRef = _viewContainerRef;
        this._hideToggle = false;
        this._padding = true;
        this.opened = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.closed = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.expandedChange = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        /**
         * Stream that emits for changes in `\@Input` properties.
         */
        this._inputChanges = new rxjs__WEBPACK_IMPORTED_MODULE_11__["Subject"]();
        /**
         * ID for the associated header element. Used for a11y labelling.
         */
        this._headerId = `novo-expansion-panel-header-${uniqueId++}`;
        this.accordion = accordion;
    }
    /**
     * Whether the toggle indicator should be hidden.
     * @return {?}
     */
    get hideToggle() {
        return this._hideToggle;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set hideToggle(value) {
        this._hideToggle = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_12__["coerceBooleanProperty"])(value);
    }
    /**
     * @return {?}
     */
    get padding() {
        return this._padding;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set padding(value) {
        this._padding = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_12__["coerceBooleanProperty"])(value);
    }
    /**
     * Whether the expansion indicator should be hidden.
     * @return {?}
     */
    _getHideToggle() {
        if (this.accordion) {
            return this.accordion.hideToggle;
        }
        return this.hideToggle;
    }
    /**
     * Determines whether the expansion panel should have spacing between it and its siblings.
     * @return {?}
     */
    _hasSpacing() {
        if (this.accordion) {
            return (this.expanded ? this.accordion.displayMode : this._getExpandedState()) === 'default';
        }
        return false;
    }
    /**
     * Gets the expanded state string.
     * @return {?}
     */
    _getExpandedState() {
        return this.expanded ? 'expanded' : 'collapsed';
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        if (this._lazyContent) {
            // Render the content as soon as the panel becomes open.
            this.opened
                .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_14__["startWith"])(null), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_14__["filter"])((/**
             * @return {?}
             */
            () => this.expanded && !this._portal)), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_14__["take"])(1))
                .subscribe((/**
             * @return {?}
             */
            () => {
                this._portal = new _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_8__["TemplatePortal"](this._lazyContent._template, this._viewContainerRef);
            }));
        }
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        this._inputChanges.next(changes);
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        super.ngOnDestroy();
        this._inputChanges.complete();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    _bodyAnimation(event) {
        /** @type {?} */
        const classList = event.element.classList;
        /** @type {?} */
        const cssClass = 'novo-expanded';
        const { phaseName, toState } = event;
        // Toggle the body's `overflow: hidden` class when closing starts or when expansion ends in
        // order to prevent the cases where switching too early would cause the animation to jump.
        // Note that we do it directly on the DOM element to avoid the slight delay that comes
        // with doing it via change detection.
        if (phaseName === 'done' && toState === 'expanded') {
            classList.add(cssClass);
        }
        else if (phaseName === 'start' && toState === 'collapsed') {
            classList.remove(cssClass);
        }
    }
}
NovoExpansionPanel.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'novo-expansion-panel',
                exportAs: 'novoExpansionPanel',
                template: "<ng-content select=\"novo-expansion-panel-header\"></ng-content>\n<div class=\"novo-expansion-panel-content\"\n     role=\"region\"\n     [@bodyExpansion]=\"_getExpandedState()\"\n     (@bodyExpansion.done)=\"_bodyAnimation($event)\"\n     (@bodyExpansion.start)=\"_bodyAnimation($event)\"\n     [attr.aria-labelledby]=\"_headerId\"\n     [id]=\"id\"\n     #body>\n  <div class=\"novo-expansion-panel-body\">\n    <ng-content></ng-content>\n    <ng-template [cdkPortalOutlet]=\"_portal\"></ng-template>\n  </div>\n  <ng-content select=\"novo-action-row\"></ng-content>\n</div>\n",
                encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewEncapsulation"].None,
                changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectionStrategy"].OnPush,
                animations: [novoExpansionAnimations.bodyExpansion],
                host: {
                    class: 'novo-expansion-panel',
                    '[class.novo-expanded]': 'expanded',
                    '[class.novo-expansion-panel-spacing]': '_hasSpacing()',
                    '[class.novo-expansion-panel-padding]': 'padding',
                },
                styles: ["@-webkit-keyframes rotate{0%{transform:rotateZ(0)}75%{transform:rotateZ(200deg)}100%{transform:rotateZ(180deg)}}@-webkit-keyframes half-rotate{0%{transform:rotateZ(45deg)}75%{transform:rotateZ(100deg)}100%{transform:rotateZ(90deg)}}@-webkit-keyframes rotateBack{0%{transform:rotateZ(90deg)}100%{transform:rotateZ(0)}}@-webkit-keyframes show{0%{opacity:0;transform:translateX(-100%)}75%{transform:translateX(0)}100%{opacity:1;transform:translateX(0)}}@keyframes rotate{0%{transform:rotateZ(0)}75%{transform:rotateZ(200deg)}100%{transform:rotateZ(180deg)}}@keyframes half-rotate{0%{transform:rotateZ(45deg)}75%{transform:rotateZ(100deg)}100%{transform:rotateZ(90deg)}}@keyframes rotateBack{0%{transform:rotateZ(90deg)}100%{transform:rotateZ(0)}}@keyframes show{0%{opacity:0;transform:translateX(-100%)}75%{transform:translateX(0)}100%{opacity:1;transform:translateX(0)}}.novo-expansion-panel{background:#fff;color:#3d464d;box-shadow:0 3px 1px -2px rgba(0,0,0,.2),0 2px 2px 0 rgba(0,0,0,.14),0 1px 5px 0 rgba(0,0,0,.12);box-sizing:content-box;display:block;margin:0 16px;transition:margin 225ms ease-in-out}.novo-action-row{border-top-color:#3d464d}.novo-expansion-panel:not(.novo-expanded) .novo-expansion-panel-header:not([aria-disabled=true]).cdk-keyboard-focused,.novo-expansion-panel:not(.novo-expanded) .novo-expansion-panel-header:not([aria-disabled=true]).cdk-program-focused,.novo-expansion-panel:not(.novo-expanded) .novo-expansion-panel-header:not([aria-disabled=true]):hover{background:rgba(0,0,0,.04)}.novo-expansion-panel-header-title{color:#3d464d}.novo-expansion-indicator::after,.novo-expansion-panel-header-description{color:#999}.novo-expansion-panel-header[aria-disabled=true]{color:#999;pointer-events:none}.novo-expansion-panel-header[aria-disabled=true] .novo-expansion-panel-header-description,.novo-expansion-panel-header[aria-disabled=true] .novo-expansion-panel-header-title{color:inherit}.novo-expansion-panel.novo-expanded[theme=company]{border-top:3px solid #39d}.novo-expansion-panel.novo-expanded[theme=candidate]{border-top:3px solid #4b7}.novo-expansion-panel.novo-expanded[theme=navigation]{border-top:3px solid #2f384f}.novo-expansion-panel.novo-expanded[theme=lead]{border-top:3px solid #a69}.novo-expansion-panel.novo-expanded[theme=contact]{border-top:3px solid #fa4}.novo-expansion-panel.novo-expanded[theme=opportunity]{border-top:3px solid #625}.novo-expansion-panel.novo-expanded[theme=job]{border-top:3px solid #b56}.novo-expansion-panel.novo-expanded[theme=earnCode],.novo-expansion-panel.novo-expanded[theme=jobCode]{border-top:3px solid #696d79}.novo-expansion-panel.novo-expanded[theme=sendout]{border-top:3px solid #747884}.novo-expansion-panel.novo-expanded[theme=placement]{border-top:3px solid #0b344f}.novo-expansion-panel.novo-expanded[theme=corporateuser],.novo-expansion-panel.novo-expanded[theme=credential],.novo-expansion-panel.novo-expanded[theme=distributionList],.novo-expansion-panel.novo-expanded[theme=task],.novo-expansion-panel.novo-expanded[theme=user]{border-top:3px solid #4f5361}.novo-expansion-panel.novo-expanded[theme=aqua]{border-top:3px solid #3bafda}.novo-expansion-panel.novo-expanded[theme=ocean]{border-top:3px solid #4a89dc}.novo-expansion-panel.novo-expanded[theme=mint]{border-top:3px solid #37bc9b}.novo-expansion-panel.novo-expanded[theme=grass]{border-top:3px solid #8cc152}.novo-expansion-panel.novo-expanded[theme=sunflower]{border-top:3px solid #f6b042}.novo-expansion-panel.novo-expanded[theme=bittersweet]{border-top:3px solid #eb6845}.novo-expansion-panel.novo-expanded[theme=grapefruit]{border-top:3px solid #da4453}.novo-expansion-panel.novo-expanded[theme=carnation]{border-top:3px solid #d770ad}.novo-expansion-panel.novo-expanded[theme=lavender]{border-top:3px solid #967adc}.novo-expansion-panel.novo-expanded[theme=positive]{border-top:3px solid #4a89dc}.novo-expansion-panel.novo-expanded[theme=success]{border-top:3px solid #8cc152}.novo-expansion-panel.novo-expanded[theme=negative]{border-top:3px solid #da4453}.novo-expansion-panel.novo-expanded[theme=warning]{border-top:3px solid #f6b042}.novo-expansion-panel.novo-expanded[theme=black]{border-top:3px solid #000}.novo-expansion-panel.novo-expanded[theme=dark]{border-top:3px solid #3d464d}.novo-expansion-panel.novo-expanded[theme=pulse]{border-top:3px solid #3bafda}.novo-expansion-panel.novo-expanded[theme=neutral]{border-top:3px solid #4f5361}.novo-expansion-panel.novo-expanded[theme=navy]{border-top:3px solid #0d2d42}.novo-expansion-panel.novo-expanded[theme=contract]{border-top:3px solid #454ea0}.novo-expansion-panel.novo-expanded[theme=mountain]{border-top:3px solid #9678b6}.novo-expansion-panel.novo-expanded[theme=billableCharge],.novo-expansion-panel.novo-expanded[theme=invoiceStatement],.novo-expansion-panel.novo-expanded[theme=payableCharge]{border-top:3px solid #696d79}.novo-expansion-panel.novo-expanded[theme=submission]{border-top:3px solid #a9adbb}.novo-expansion-panel.novo-expanded[theme=note]{border-top:3px solid #747884}.novo-expansion-panel.novo-expanded[theme=ash]{border-top:3px solid #a0a0a0}.novo-expansion-panel.novo-expanded[theme=slate]{border-top:3px solid #707070}.novo-expansion-panel.novo-expanded[theme=charcoal]{border-top:3px solid #282828}.novo-expansion-panel.novo-expanded[theme=background]{border-top:3px solid #f4f4f4}.novo-expansion-panel.novo-expanded[theme=background-dark]{border-top:3px solid #e2e2e2}.novo-expansion-panel.novo-expanded[theme=white]{border-top:3px solid #fff}.novo-expansion-panel.novo-expanded[theme=grey]{border-top:3px solid #999}.novo-expansion-panel.novo-expanded[theme=off-white]{border-top:3px solid #f4f4f4}.novo-expansion-panel.novo-expanded[theme=light]{border-top:3px solid #d9dadc}.novo-expansion-panel.novo-expanded[theme=empty]{border-top:3px solid #cccdcc}.novo-expansion-panel.novo-expanded[theme=sand]{border-top:3px solid #f4f4f4}.novo-expansion-panel.novo-expanded[theme=silver]{border-top:3px solid #e2e2e2}.novo-expansion-panel.novo-expanded[theme=stone]{border-top:3px solid #bebebe}.novo-expansion-panel.novo-expanded{margin:16px 4px}.novo-expansion-panel.novo-expanded:first-child{margin-top:0}.novo-expansion-panel.novo-expanded:last-child{margin-bottom:0}.novo-expansion-panel-content{overflow:hidden}.novo-expansion-panel-content.novo-expanded{overflow:visible}.novo-expansion-panel-padding .novo-expansion-panel-body{padding:0 24px 16px}.novo-accordion .novo-expansion-panel-spacing:first-child{margin-top:0}.novo-accordion .novo-expansion-panel-spacing:last-child{margin-bottom:0}.novo-action-row{border-top-style:solid;border-top-width:1px;display:flex;flex-direction:row;justify-content:flex-end;padding:16px 8px 16px 24px}.novo-action-row button.novo-button{margin-left:8px}[dir=rtl] .novo-action-row button.novo-button{margin-left:0;margin-right:8px}"]
            }] }
];
/** @nocollapse */
NovoExpansionPanel.ctorParameters = () => [
    { type: NovoAccordion, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Host"] }] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectorRef"] },
    { type: _angular_cdk_collections__WEBPACK_IMPORTED_MODULE_23__["UniqueSelectionDispatcher"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewContainerRef"] }
];
NovoExpansionPanel.propDecorators = {
    disabled: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    expanded: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    hideToggle: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    padding: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    opened: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    closed: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    expandedChange: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    _lazyContent: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ContentChild"], args: [NovoExpansionPanelContent, { static: false },] }]
};
if (false) {}
class NovoExpansionPanelActionRow {
}
NovoExpansionPanelActionRow.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{
                selector: 'novo-action-row',
                host: {
                    class: 'novo-action-row',
                },
            },] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: elements/expansion/expansion-panel-header.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * `<novo-expansion-panel-header>`
 *
 * This component corresponds to the header element of an `<novo-expansion-panel>`.
 */
class NovoExpansionPanelHeader {
    /**
     * @param {?} panel
     * @param {?} _element
     * @param {?} _changeDetectorRef
     */
    constructor(panel, _element, _changeDetectorRef) {
        this.panel = panel;
        this._element = _element;
        this._changeDetectorRef = _changeDetectorRef;
        this._parentChangeSubscription = rxjs__WEBPACK_IMPORTED_MODULE_11__["Subscription"].EMPTY;
        // Since the toggle state depends on an @Input on the panel, we
        // need to  subscribe and trigger change detection manually.
        this._parentChangeSubscription = Object(rxjs__WEBPACK_IMPORTED_MODULE_11__["merge"])(panel.opened, panel.closed, panel._inputChanges.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_14__["filter"])((/**
         * @param {?} changes
         * @return {?}
         */
        (changes) => !!(changes.hideToggle || changes.disabled))))).subscribe((/**
         * @return {?}
         */
        () => this._changeDetectorRef.markForCheck()));
        // _focusMonitor.monitor(_element.nativeElement);
    }
    /**
     * Toggles the expanded state of the panel.
     * @return {?}
     */
    _toggle() {
        this.panel.toggle();
    }
    /**
     * Gets whether the panel is expanded.
     * @return {?}
     */
    _isExpanded() {
        return this.panel.expanded;
    }
    /**
     * Gets the expanded state string of the panel.
     * @return {?}
     */
    _getExpandedState() {
        return this.panel._getExpandedState();
    }
    /**
     * Gets the panel id.
     * @return {?}
     */
    _getPanelId() {
        return this.panel.id;
    }
    /**
     * Gets whether the expand indicator should be shown.
     * @return {?}
     */
    _showToggle() {
        return !this.panel.hideToggle && !this.panel.disabled;
    }
    /**
     * Handle keydown event calling to toggle() if appropriate.
     * @param {?} event
     * @return {?}
     */
    _keydown(event) {
        switch (event.keyCode) {
            // Toggle for space and enter keys.
            case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_19__["SPACE"]:
            case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_19__["ENTER"]:
                event.preventDefault();
                this._toggle();
                break;
            default:
                return;
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this._parentChangeSubscription.unsubscribe();
        // this._focusMonitor.stopMonitoring(this._element.nativeElement);
    }
}
NovoExpansionPanelHeader.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'novo-expansion-panel-header',
                template: "<span class=\"novo-content\">\n  <ng-content select=\"novo-panel-title\"></ng-content>\n  <ng-content select=\"novo-panel-description\"></ng-content>\n  <ng-content></ng-content>\n</span>\n<span [@indicatorRotate]=\"_getExpandedState()\" *ngIf=\"_showToggle()\"\n      class=\"novo-expansion-indicator\"></span>\n",
                encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewEncapsulation"].None,
                changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectionStrategy"].OnPush,
                animations: [novoExpansionAnimations.indicatorRotate, novoExpansionAnimations.expansionHeaderHeight],
                host: {
                    class: 'novo-expansion-panel-header',
                    role: 'button',
                    '[attr.id]': 'panel._headerId',
                    '[attr.tabindex]': 'panel.disabled ? -1 : 0',
                    '[attr.aria-controls]': '_getPanelId()',
                    '[attr.aria-expanded]': '_isExpanded()',
                    '[attr.aria-disabled]': 'panel.disabled',
                    '[class.novo-expanded]': '_isExpanded()',
                    '(click)': '_toggle()',
                    '(keydown)': '_keydown($event)',
                    '[@expansionHeight]': `{
        value: _getExpandedState(),
        params: {
          collapsedHeight: collapsedHeight,
          expandedHeight: expandedHeight
        }
    }`,
                },
                styles: [".novo-expansion-panel-header{display:flex;flex-direction:row;align-items:center;padding:0 24px}.novo-expansion-panel-header:focus,.novo-expansion-panel-header:hover{outline:0}.novo-expansion-panel-header.novo-expanded:focus,.novo-expansion-panel-header.novo-expanded:hover{background:inherit}.novo-expansion-panel-header:not([aria-disabled=true]){cursor:pointer}.novo-content{display:flex;flex:1;flex-direction:row;overflow:hidden}.novo-expansion-panel-header-description,.novo-expansion-panel-header-title{display:flex;flex-grow:1;margin-right:16px;align-items:center}[dir=rtl] .novo-expansion-panel-header-description,[dir=rtl] .novo-expansion-panel-header-title{margin-right:0;margin-left:16px}.novo-expansion-panel-header-description{flex-grow:2}.novo-expansion-indicator::after{border-style:solid;border-width:0 2px 2px 0;content:\"\";display:inline-block;padding:3px;transform:rotate(45deg);vertical-align:middle}"]
            }] }
];
/** @nocollapse */
NovoExpansionPanelHeader.ctorParameters = () => [
    { type: NovoExpansionPanel, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Host"] }] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectorRef"] }
];
NovoExpansionPanelHeader.propDecorators = {
    expandedHeight: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    collapsedHeight: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }]
};
if (false) {}
/**
 * `<novo-panel-description>`
 *
 * This direction is to be used inside of the NovoExpansionPanelHeader component.
 */
class NovoExpansionPanelDescription {
}
NovoExpansionPanelDescription.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{
                selector: 'novo-panel-description',
                host: {
                    class: 'novo-expansion-panel-header-description',
                },
            },] }
];
/**
 * `<novo-panel-title>`
 *
 * This direction is to be used inside of the NovoExpansionPanelHeader component.
 */
class NovoExpansionPanelTitle {
}
NovoExpansionPanelTitle.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{
                selector: 'novo-panel-title',
                host: {
                    class: 'novo-expansion-panel-header-title',
                },
            },] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: elements/expansion/expansion.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NovoExpansionModule {
}
NovoExpansionModule.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                imports: [_angular_common__WEBPACK_IMPORTED_MODULE_6__["CommonModule"], _angular_cdk_accordion__WEBPACK_IMPORTED_MODULE_22__["CdkAccordionModule"], _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_8__["PortalModule"]],
                exports: [
                    NovoAccordion,
                    NovoExpansionPanel,
                    NovoExpansionPanelActionRow,
                    NovoExpansionPanelHeader,
                    NovoExpansionPanelTitle,
                    NovoExpansionPanelDescription,
                    NovoExpansionPanelContent,
                ],
                declarations: [
                    NovoAccordion,
                    NovoExpansionPanel,
                    NovoExpansionPanelActionRow,
                    NovoExpansionPanelHeader,
                    NovoExpansionPanelTitle,
                    NovoExpansionPanelDescription,
                    NovoExpansionPanelContent,
                ],
            },] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: elements/form/controls/BaseControl.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @record
 */
function NovoGroupedControlConfig() { }
if (false) {}
class ControlConfig {
    constructor() {
        this.isEmbedded = false;
        this.isInlineEmbedded = false;
    }
}
if (false) {}
class BaseControl extends ControlConfig {
    /**
     * @param {?=} type
     * @param {?=} config
     */
    constructor(type = 'BaseControl', config = {}) {
        super();
        this.__type = 'BaseControl';
        this.__type = type;
        this.__config = config;
        this.validators = config.validators || [];
        this.asyncValidators = config.asyncValidators || [];
        this.value = config.value;
        this.key = config.key || '';
        this.label = config.label || '';
        this.checkboxLabel = config.checkboxLabel;
        this.name = config.name || '';
        this.required = !!config.required;
        this.hidden = !!config.hidden;
        this.encrypted = !!config.encrypted;
        this.sortOrder = config.sortOrder === undefined ? 1 : config.sortOrder;
        this.controlType = config.controlType || '';
        this.type = config.type;
        this.subType = config.subType;
        this.metaType = config.metaType;
        this.placeholder = config.placeholder || '';
        this.config = config.config || null;
        this.dirty = !!(config.value !== undefined && config.value !== null);
        this.multiple = !!config.multiple;
        this.headerConfig = config.headerConfig || null;
        this.currencyFormat = config.currencyFormat || null;
        this.associatedEntity = config.associatedEntity || null;
        this.optionsType = config.optionsType || null;
        this.options = config.options || [];
        this.forceClear = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.readOnly = !!config.readOnly || !!config.disabled;
        this.disabled = !!config.disabled;
        this.layoutOptions = config.layoutOptions || {};
        this.military = !!config.military;
        this.dateFormat = config.dateFormat;
        this.textMaskEnabled = config.textMaskEnabled;
        this.maskOptions = config.maskOptions;
        this.allowInvalidDate = config.allowInvalidDate;
        this.startDate = config.startDate;
        this.endDate = config.endDate;
        this.restrictFieldInteractions = !!config.restrictFieldInteractions;
        if (!Helpers.isEmpty(config.warning)) {
            this.warning = config.warning;
        }
        if (this.required) {
            this.validators.push(_angular_forms__WEBPACK_IMPORTED_MODULE_1__["Validators"].required);
        }
        if (!Helpers.isBlank(config.maxlength)) {
            this.maxlength = config.maxlength;
            this.validators.push(_angular_forms__WEBPACK_IMPORTED_MODULE_1__["Validators"].maxLength(this.maxlength));
        }
        if (!Helpers.isBlank(config.minlength)) {
            this.minlength = config.minlength;
            this.validators.push(_angular_forms__WEBPACK_IMPORTED_MODULE_1__["Validators"].minLength(this.minlength));
        }
        this.closeOnSelect = !!config.closeOnSelect;
        this.interactions = config.interactions;
        this.dataSpecialization = config.dataSpecialization;
        this.dataType = config.dataType;
        this.appendToBody = !!config.appendToBody;
        if (this.appendToBody) {
            notify(`'appendToBody' has been deprecated. Please remove this attribute.`);
        }
        this.parentScrollSelector = config.parentScrollSelector;
        this.description = config.description;
        if (config.tooltip) {
            this.tooltip = config.tooltip;
            this.tooltipPosition = config.tooltipPosition;
            this.tooltipSize = config.tooltipSize;
            this.tooltipPreline = config.tooltipPreline;
            this.removeTooltipArrow = config.removeTooltipArrow;
            this.tooltipAutoPosition = config.tooltipAutoPosition;
        }
        this.template = config.template;
        this.customControlConfig = config.customControlConfig;
        this.tipWell = config.tipWell;
        this.width = config.width;
        this.startupFocus = !!config.startupFocus;
        if (config.fileBrowserImageUploadUrl) {
            this.fileBrowserImageUploadUrl = config.fileBrowserImageUploadUrl;
        }
        if (config.isEmpty) {
            this.isEmpty = config.isEmpty;
        }
        this.weekStart = config.weekStart || 0;
    }
}
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: elements/form/FormValidators.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const MAX_INTEGER = 2147483647;
/** @type {?} */
const MIN_YEAR = 1753;
class FormValidators {
    /**
     * @private
     * @param {?} subfield
     * @param {?} control
     * @return {?}
     */
    showStateRequiredFlag(subfield, control) {
        return (subfield === 'state' &&
            !Helpers.isEmpty(control.config.state) &&
            control.config.state.required &&
            Helpers.isBlank(control.value.state) &&
            control.config.state.updated &&
            !Helpers.isBlank(control.value.countryName) &&
            control.config.state.pickerConfig &&
            control.config.state.pickerConfig.defaultOptions &&
            control.config.state.pickerConfig.defaultOptions.length > 0);
    }
    // Makes sure the control value does not exceed the max integer value
    /**
     * @param {?} control
     * @return {?}
     */
    static maxInteger(control) {
        return control.value < MAX_INTEGER ? null : { integerTooLarge: true };
    }
    // Makes sure the control value is above the minimum year
    /**
     * @param {?} control
     * @return {?}
     */
    static minYear(control) {
        if (!control.value) {
            return null;
        }
        return control.value >= MIN_YEAR ? null : { minYear: true };
    }
    // Makes sure the control value does not exceed the max number value
    /**
     * @param {?} control
     * @return {?}
     */
    static maxDouble(control) {
        return control.value < Number.MAX_SAFE_INTEGER ? null : { doubleTooLarge: true };
    }
    // Make sure the control value is an email
    /**
     * @param {?} control
     * @return {?}
     */
    static isEmail(control) {
        /** @type {?} */
        const EMAIL_REGEXP = /^[a-z0-9!#$%&'*+\/=?^_`{|}~.-]+@[a-z0-9]([a-z0-9-]*[a-z0-9])?(\.[a-z0-9]([a-z0-9-]*[a-z0-9])?)*$/i;
        return !control.value || EMAIL_REGEXP.test(control.value) ? null : { invalidEmail: true };
    }
    // Makes sure the control value is a valid address
    /**
     * @param {?} control
     * @return {?}
     */
    static isValidAddress(control) {
        /** @type {?} */
        const fieldList = ['address1', 'address2', 'city', 'state', 'zip', 'countryID'];
        /** @type {?} */
        const invalidAddressFields = [];
        /** @type {?} */
        const maxlengthFields = [];
        /** @type {?} */
        let returnVal = null;
        /** @type {?} */
        let maxlengthError = false;
        /** @type {?} */
        const showCountryRequiredFlag = (/**
         * @param {?} subfield
         * @param {?} ctrl
         * @return {?}
         */
        (subfield, ctrl) => {
            return (subfield === 'countryID' &&
                !Helpers.isEmpty(ctrl.config.countryID) &&
                ctrl.config.countryID.required &&
                Helpers.isBlank(ctrl.value.countryName) &&
                ctrl.config.countryID.updated);
        });
        /** @type {?} */
        const showStateRequiredFlag = (/**
         * @param {?} subfield
         * @param {?} ctrl
         * @return {?}
         */
        (subfield, ctrl) => {
            return (subfield === 'state' &&
                !Helpers.isEmpty(ctrl.config.state) &&
                ctrl.config.state.required &&
                Helpers.isBlank(ctrl.value.state) &&
                ctrl.config.state.updated &&
                !Helpers.isBlank(ctrl.value.countryName) &&
                ctrl.config.state.pickerConfig &&
                ctrl.config.state.pickerConfig.defaultOptions &&
                ctrl.config.state.pickerConfig.defaultOptions.length > 0);
        });
        if (control.value && control.config) {
            /** @type {?} */
            let valid = true;
            /** @type {?} */
            let formValidity = true;
            fieldList.forEach((/**
             * @param {?} subfield
             * @return {?}
             */
            (subfield) => {
                if (!Helpers.isEmpty(control.config[subfield])) {
                    if ((['countryID', 'state'].indexOf(subfield) === -1 &&
                        control.config[subfield].required &&
                        !Helpers.isBlank(control.value[subfield]) &&
                        Helpers.isEmpty(control.value[subfield])) ||
                        showCountryRequiredFlag(subfield, control) ||
                        showStateRequiredFlag(subfield, control)) {
                        valid = false;
                        invalidAddressFields.push(control.config[subfield].label);
                    }
                    if (((subfield !== 'countryID' && control.config[subfield].required && Helpers.isEmpty(control.value[subfield])) ||
                        (subfield === 'countryID' &&
                            !Helpers.isEmpty(control.config.countryID) &&
                            control.config.countryID.required &&
                            Helpers.isEmpty(control.value.countryName))) &&
                        !(subfield === 'state' &&
                            !Helpers.isBlank(control.value.countryName) &&
                            control.config.state.pickerConfig &&
                            control.config.state.pickerConfig.defaultOptions &&
                            control.config.state.pickerConfig.defaultOptions.length === 0)) {
                        formValidity = false;
                    }
                    if (!Helpers.isEmpty(control.config[subfield].maxlength) &&
                        !Helpers.isEmpty(control.value[subfield]) &&
                        control.value[subfield].length > control.config[subfield].maxlength) {
                        maxlengthError = true;
                        maxlengthFields.push(subfield);
                        formValidity = false;
                    }
                }
            }));
            if (!valid || !formValidity || maxlengthError) {
                returnVal = {};
            }
            if (!valid) {
                returnVal.invalidAddress = true;
                returnVal.invalidAddressFields = invalidAddressFields;
            }
            if (!formValidity) {
                returnVal.invalidAddressForForm = true;
            }
            if (maxlengthError) {
                returnVal.maxlength = true;
                returnVal.maxlengthFields = maxlengthFields;
            }
            return returnVal;
        }
        return null;
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: elements/form/controls/address/AddressControl.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class AddressControl extends BaseControl {
    /**
     * @param {?} config
     */
    constructor(config) {
        super('AddressControl', config);
        this.controlType = 'address';
        this.validators.push(FormValidators.isValidAddress);
    }
}
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: elements/form/controls/check-list/CheckListControl.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class CheckListControl extends BaseControl {
    /**
     * @param {?} config
     */
    constructor(config) {
        super('CheckListControl', config);
        this.controlType = 'checklist';
        this.options = config.options || [];
    }
}
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: elements/form/controls/checkbox/CheckboxControl.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class CheckboxControl extends BaseControl {
    /**
     * @param {?} config
     */
    constructor(config) {
        super('CheckboxControl', config);
        this.controlType = 'checkbox';
    }
}
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: elements/form/controls/date/DateControl.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DateControl extends BaseControl {
    /**
     * @param {?} config
     */
    constructor(config) {
        super('DateControl', config);
        this.controlType = 'date';
    }
}
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: elements/form/controls/date-time/DateTimeControl.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DateTimeControl extends BaseControl {
    /**
     * @param {?} config
     */
    constructor(config) {
        super('DateTimeControl', config);
        this.controlType = 'date-time';
    }
}
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: elements/form/controls/editor/EditorControl.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class EditorControl extends BaseControl {
    /**
     * @param {?} config
     */
    constructor(config) {
        super('EditorControl', config);
        this.controlType = 'editor';
        this.minimal = false;
    }
}
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: elements/form/controls/ace-editor/AceEditorControl.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class AceEditorControl extends BaseControl {
    /**
     * @param {?} config
     */
    constructor(config) {
        super('AceEditorControl', config);
        this.controlType = 'ace-editor';
    }
}
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: elements/form/controls/file/FileControl.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FileControl extends BaseControl {
    /**
     * @param {?} config
     */
    constructor(config) {
        super('FileControl', config);
        this.controlType = 'file';
        // TODO - translate
        this.placeholder = config.placeholder;
        this.multiple = config.multiple;
    }
}
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: elements/form/controls/native-select/NativeSelectControl.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NativeSelectControl extends BaseControl {
    /**
     * @param {?} config
     */
    constructor(config) {
        super('NativeSelectControl', config);
        this.controlType = 'native-select';
        this.options = [];
        this.options = config.options || [];
    }
}
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: elements/form/controls/picker/PickerControl.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class PickerControl extends BaseControl {
    /**
     * @param {?} config
     */
    constructor(config) {
        super('PickerControl', config);
        this.controlType = 'picker';
        this.options = [];
        this.options = config.options || [];
    }
}
if (false) {}
class TablePickerControl extends PickerControl {
    /**
     * @param {?} config
     */
    constructor(config) {
        super(Object.assign(config, { parentScrollSelector: '.table-container' }));
        this.__type = 'TablePickerControl';
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: elements/form/controls/quick-note/QuickNoteControl.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class QuickNoteControl extends BaseControl {
    /**
     * @param {?} config
     */
    constructor(config) {
        super('QuickNoteControl', config);
        this.controlType = 'quick-note';
        this.options = [];
        this.options = config.options || [];
    }
}
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: elements/form/controls/radio/RadioControl.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class RadioControl extends BaseControl {
    /**
     * @param {?} config
     */
    constructor(config) {
        super('RadioControl', config);
        this.controlType = 'radio';
        this.options = [];
        this.options = config.options || [];
    }
}
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: elements/form/controls/read-only/ReadOnlyControl.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ReadOnlyControl extends BaseControl {
    /**
     * @param {?} config
     */
    constructor(config) {
        super('ReadOnlyControl', config);
        this.controlType = 'read-only';
        config.readOnly = true;
    }
}
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: elements/form/controls/select/SelectControl.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class SelectControl extends BaseControl {
    /**
     * @param {?} config
     */
    constructor(config) {
        super('SelectControl', config);
        this.controlType = 'select';
        this.options = [];
        this.options = config.options || [];
        this.placeholder = config.placeholder || '';
    }
}
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: elements/form/controls/text-area/TextAreaControl.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class TextAreaControl extends BaseControl {
    /**
     * @param {?} config
     */
    constructor(config) {
        super('TextAreaControl', config);
        this.controlType = 'text-area';
    }
}
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: elements/form/controls/textbox/TextBoxControl.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class TextBoxControl extends BaseControl {
    /**
     * @param {?} config
     */
    constructor(config) {
        super('TextBoxControl', config);
        this.controlType = 'textbox';
        this.type = this.getTextboxType(config.type) || '';
        this.subType = config.type || '';
        this.setValidators(this.subType);
    }
    /**
     * @param {?} type
     * @return {?}
     */
    setValidators(type) {
        switch (type) {
            case 'email':
                this.validators.push(FormValidators.isEmail);
                break;
            case 'number':
            case 'currency':
                this.validators.push(FormValidators.maxInteger);
                break;
            case 'float':
            case 'percentage':
                this.validators.push(FormValidators.maxDouble);
                break;
            case 'year':
                this.validators.push(FormValidators.minYear);
                break;
            default:
                break;
        }
    }
    /**
     * @param {?} type
     * @return {?}
     */
    getTextboxType(type) {
        switch (type) {
            case 'percentage':
            case 'currency':
            case 'float':
            case 'year':
                return 'number';
            default:
                return type;
        }
    }
}
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: elements/form/controls/tiles/TilesControl.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class TilesControl extends BaseControl {
    /**
     * @param {?} config
     */
    constructor(config) {
        super('TilesControl', config);
        this.controlType = 'tiles';
        this.options = [];
        this.options = config.options || [];
    }
}
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: elements/form/controls/time/TimeControl.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class TimeControl extends BaseControl {
    /**
     * @param {?} config
     */
    constructor(config) {
        super('TimeControl', config);
        this.controlType = 'time';
    }
}
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: elements/form/controls/grouped/GroupedControl.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class GroupedControl {
    /**
     * @param {?} config
     */
    constructor(config) {
        this.__type = 'GroupedControl';
        Object.keys(config).forEach((/**
         * @param {?} key
         * @return {?}
         */
        (key) => (this[key] = config[key])));
    }
}
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: elements/form/controls/index.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: elements/form/controls/ControlFactory.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ControlFactory {
    /**
     * @param {?} type
     * @param {?} config
     * @return {?}
     */
    static create(type, config) {
        switch (type) {
            case 'AddressControl':
                return new AddressControl(config);
            case 'CheckboxControl':
                return new CheckboxControl(config);
            case 'CheckListControl':
                return new CheckListControl(config);
            case 'CheckListControl':
                return new CheckListControl(config);
            case 'DateTimeControl':
                return new DateTimeControl(config);
            case 'EditorControl':
                return new EditorControl(config);
            case 'FileControl':
                return new FileControl(config);
            case 'NativeSelectControl':
                return new NativeSelectControl(config);
            case 'PickerControl':
                return new PickerControl(config);
            case 'TablePickerControl':
                return new TablePickerControl(config);
            case 'QuickNoteControl':
                return new QuickNoteControl(config);
            case 'RadioControl':
                return new RadioControl(config);
            case 'ReadOnlyControl':
                return new ReadOnlyControl(config);
            case 'TextAreaControl':
                return new TextAreaControl(config);
            case 'TextBoxControl':
                return new TextBoxControl(config);
            case 'SelectControl':
                return new SelectControl(config);
            case 'TilesControl':
                return new TilesControl(config);
            case 'TimeControl':
                return new TimeControl(config);
            default:
                console.warn('[ControlFactory] - unable to find control for type. Make sure to set "editorType" and "editorConfig" on your column', type);
                return null;
        }
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: elements/form/controls/custom/CustomControl.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class CustomControl extends BaseControl {
    /**
     * @param {?} config
     */
    constructor(config) {
        super(config.template, config);
        this.controlType = 'custom';
        this.controlType = config.template;
    }
}
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: elements/form/FormControls.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: elements/form/NovoFormControl.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NovoFormControl extends _angular_forms__WEBPACK_IMPORTED_MODULE_1__["FormControl"] {
    /**
     * @param {?} value
     * @param {?} control
     */
    constructor(value, control) {
        super(value, control.validators, control.asyncValidators);
        this.displayValueChanges = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.valueHistory = [];
        this.validators = control.validators;
        this.initialValue = value;
        this.valueHistory.push(value);
        this.key = control.key;
        this.label = control.label;
        this.readOnly = control.readOnly;
        this.hidden = control.hidden;
        this.encrypted = control.encrypted;
        this.config = control.config;
        this.type = control.type;
        this.subType = control.subType;
        this.required = control.required;
        this.hasRequiredValidator = this.required;
        this.tooltip = control.tooltip;
        this.tooltipPosition = control.tooltipPosition;
        this.tooltipSize = control.tooltipSize;
        this.tooltipPreline = control.tooltipPreline;
        this.removeTooltipArrow = control.removeTooltipArrow;
        this.tooltipAutoPosition = control.tooltipAutoPosition;
        this.label = control.label;
        this.name = control.name;
        this.required = control.required;
        this.sortOrder = control.sortOrder;
        this.controlType = control.controlType;
        this.placeholder = control.placeholder;
        this.minimal = control.minimal;
        this.multiple = control.multiple;
        this.headerConfig = control.headerConfig;
        this.optionsType = control.optionsType;
        this.readOnly = control.readOnly;
        this.layoutOptions = control.layoutOptions;
        this.military = control.military;
        this.dateFormat = control.dateFormat;
        this.currencyFormat = control.currencyFormat;
        this.startDate = control.startDate;
        this.endDate = control.endDate;
        this.weekStart = control.weekStart;
        this.textMaskEnabled = control.textMaskEnabled;
        this.textMaskEnabled = control.textMaskEnabled;
        this.maskOptions = control.maskOptions;
        this.allowInvalidDate = control.allowInvalidDate;
        this.maxlength = control.maxlength;
        this.minlength = control.minlength;
        this.closeOnSelect = control.closeOnSelect;
        this.interactions = control.interactions;
        this.checkboxLabel = control.checkboxLabel;
        this.restrictFieldInteractions = control.restrictFieldInteractions;
        this.appendToBody = control.appendToBody;
        if (this.appendToBody) {
            notify(`'appendToBody' has been deprecated. Please remove this attribute.`);
        }
        this.parentScrollSelector = control.parentScrollSelector;
        this.description = control.description;
        this.options = control.options;
        this.tipWell = control.tipWell;
        this.customControlConfig = control.customControlConfig;
        this.warning = control.warning;
        // Reactive Form, need to enable/disable, can't bind to [disabled]
        if (this.readOnly) {
            this.disable();
        }
        else {
            this.enable();
        }
    }
    /**
     * @param {?=} clearValue - flag to reset the control's value
     * @return {?}
     */
    hide(clearValue = true) {
        this.hidden = true;
        if (clearValue) {
            this.setValue(null);
        }
    }
    /**
     * @return {?}
     */
    show() {
        this.hidden = false;
    }
    /**
     * @param {?} isRequired
     * @return {?}
     */
    setRequired(isRequired) {
        this.required = isRequired;
        // Update validators to have the required
        if (this.required && !this.hasRequiredValidator) {
            /** @type {?} */
            const validators = [...this.validators];
            validators.push(_angular_forms__WEBPACK_IMPORTED_MODULE_1__["Validators"].required);
            // TODO: duplicated below
            this.setValidators(validators);
            this.updateValueAndValidity({ emitEvent: false });
            this.hasRequiredValidator = this.required;
        }
        else if (!this.required && this.hasRequiredValidator) {
            /** @type {?} */
            let validators = [...this.validators];
            validators = validators.filter((/**
             * @param {?} val
             * @return {?}
             */
            (val) => val !== _angular_forms__WEBPACK_IMPORTED_MODULE_1__["Validators"].required));
            // TODO: duplicated above
            this.setValidators(validators);
            this.updateValueAndValidity({ emitEvent: false });
            this.hasRequiredValidator = this.required;
        }
    }
    /**
     * @param {?} value
     * @param {?=} __1
     * @return {?}
     */
    setValue(value, { onlySelf, emitEvent, emitModelToViewChange, emitViewToModelChange, } = {}) {
        this.markAsDirty();
        this.markAsTouched();
        this.displayValueChanges.emit(value);
        super.setValue(value, { onlySelf, emitEvent, emitModelToViewChange, emitViewToModelChange });
        // History
        clearTimeout(this.historyTimeout);
        this.historyTimeout = setTimeout((/**
         * @return {?}
         */
        () => {
            this.valueHistory.push(value);
        }), 300);
    }
    /**
     * @param {?} isReadOnly
     * @return {?}
     */
    setReadOnly(isReadOnly) {
        this.readOnly = isReadOnly;
        if (this.readOnly) {
            this.disable();
        }
        else {
            this.enable();
        }
    }
    /**
     * Disables the control. This means the control will be exempt from validation checks and
     * excluded from the aggregate value of any parent. Its status is `DISABLED`.
     *
     * If the control has children, all children will be disabled to maintain the model.
     * @param {?=} opts
     * @return {?}
     */
    disable(opts = { emitEvent: false }) {
        if (typeof opts.emitEvent === 'undefined') {
            opts.emitEvent = false;
        }
        super.disable(opts);
    }
    /**
     * @param {?=} opts
     * @return {?}
     */
    enable(opts = { emitEvent: false }) {
        if (typeof opts.emitEvent === 'undefined') {
            opts.emitEvent = false;
        }
        super.enable(opts);
    }
    /**
     * @param {?} message
     * @return {?}
     */
    markAsInvalid(message) {
        this.markAsDirty();
        this.markAsTouched();
        this.setErrors(Object.assign({}, this.errors, { custom: message }));
    }
}
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: elements/form/NovoFormGroup.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NovoFormGroup extends _angular_forms__WEBPACK_IMPORTED_MODULE_1__["FormGroup"] {
    constructor() {
        super(...arguments);
        this.fieldInteractionEvents = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
    }
    /**
     * @return {?}
     */
    get value() {
        return this.getRawValue();
    }
    /**
     * @param {?} v
     * @return {?}
     */
    set value(v) {
        this._value = v;
    }
    /**
     * @return {?}
     */
    enableAllControls() {
        for (const key in this.controls) {
            if (((/** @type {?} */ (this.controls[key]))).readOnly) {
                ((/** @type {?} */ (this.controls[key]))).readOnly = false;
                this.controls[key].enable();
            }
        }
    }
    /**
     * @return {?}
     */
    disableAllControls() {
        for (const key in this.controls) {
            if (!((/** @type {?} */ (this.controls[key]))).readOnly) {
                ((/** @type {?} */ (this.controls[key]))).readOnly = true;
                this.controls[key].disable();
            }
        }
    }
}
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: services/options/OptionsService.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// App
class OptionsService {
    constructor() { }
    /**
     * @param {?} http
     * @param {?} field
     * @param {?} config
     * @return {?}
     */
    getOptionsConfig(http, field, config) {
        return {
            field: 'value',
            format: '$label',
            options: (/**
             * @param {?} query
             * @return {?}
             */
            (query) => {
                return new Promise((/**
                 * @param {?} resolve
                 * @param {?} reject
                 * @return {?}
                 */
                (resolve, reject) => {
                    if (query && query.length) {
                        http.get(`${field.optionsUrl}?filter=${query || ''}`).subscribe(resolve, reject);
                    }
                    else {
                        resolve([]);
                    }
                }));
            }),
        };
    }
}
OptionsService.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"] }
];
/** @nocollapse */
OptionsService.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * Generated from: utils/form-utils/FormUtils.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FormUtils {
    /**
     * @param {?} labels
     * @param {?} optionsService
     */
    constructor(labels, optionsService) {
        this.labels = labels;
        this.optionsService = optionsService;
        this.ASSOCIATED_ENTITY_LIST = [
            'Candidate',
            'ClientContact',
            'ClientCorporation',
            'CorporationDepartment',
            'Lead',
            'Opportunity',
            'JobOrder',
            'CorporateUser',
            'Person',
            'Placement',
        ];
        this.ENTITY_PICKER_LIST = [
            'Candidate',
            'CandidateText',
            'Client',
            'ClientText',
            'ClientContact',
            'ClientContactText',
            'ClientCorporation',
            'ClientCorporationText',
            'Lead',
            'LeadText',
            'Opportunity',
            'OpportunityText',
            'JobOrder',
            'JobOrderText',
            'CorporateUser',
            'CorporateUserText',
            'Person',
            'PersonText',
            'Placement',
        ];
    }
    /**
     * @param {?} controls
     * @return {?}
     */
    toFormGroup(controls) {
        /** @type {?} */
        const group = {};
        controls.forEach((/**
         * @param {?} control
         * @return {?}
         */
        (control) => {
            /** @type {?} */
            const value = Helpers.isBlank(control.value) ? '' : control.value;
            group[control.key] = new NovoFormControl(value, control);
        }));
        return new NovoFormGroup(group);
    }
    /**
     * @return {?}
     */
    emptyFormGroup() {
        return new NovoFormGroup({});
    }
    /**
     * @param {?} formGroup
     * @param {?} controls
     * @return {?}
     */
    addControls(formGroup, controls) {
        controls.forEach((/**
         * @param {?} control
         * @return {?}
         */
        (control) => {
            /** @type {?} */
            const value = Helpers.isBlank(control.value) ? '' : control.value;
            /** @type {?} */
            const formControl = new NovoFormControl(value, control);
            formGroup.addControl(control.key, formControl);
        }));
    }
    /**
     * @param {?} formGroup
     * @param {?} controls
     * @return {?}
     */
    removeControls(formGroup, controls) {
        controls.forEach((/**
         * @param {?} control
         * @return {?}
         */
        (control) => {
            formGroup.removeControl(control.key);
        }));
    }
    /**
     * @param {?} fieldsets
     * @return {?}
     */
    toFormGroupFromFieldset(fieldsets) {
        /** @type {?} */
        const controls = [];
        fieldsets.forEach((/**
         * @param {?} fieldset
         * @return {?}
         */
        (fieldset) => {
            controls.push(...fieldset.controls);
        }));
        return this.toFormGroup(controls);
    }
    /**
     * @param {?} field
     * @return {?}
     */
    hasAssociatedEntity(field) {
        return !!(field.associatedEntity && ~this.ASSOCIATED_ENTITY_LIST.indexOf(field.associatedEntity.entity));
    }
    /**
     * @param {?} field
     * @return {?}
     */
    determineInputType(field) {
        /** @type {?} */
        let type;
        /** @type {?} */
        const dataSpecializationTypeMap = {
            DATETIME: 'datetime',
            TIME: 'time',
            MONEY: 'currency',
            PERCENTAGE: 'percentage',
            HTML: 'editor',
            'HTML-MINIMAL': 'editor-minimal',
            YEAR: 'year',
            WORKFLOW_OPTIONS: 'select',
            SPECIALIZED_OPTIONS: 'select',
            WorkflowOptionsLookup: 'select',
            SpecializedOptionsLookup: 'select',
            SimplifiedOptionsLookup: 'select',
        };
        /** @type {?} */
        const dataTypeToTypeMap = {
            Timestamp: 'date',
            Date: 'date',
            Boolean: 'tiles',
        };
        /** @type {?} */
        const inputTypeToTypeMap = {
            CHECKBOX: 'radio',
            RADIO: 'radio',
            SELECT: 'select',
            TILES: 'tiles',
        };
        /** @type {?} */
        const inputTypeMultiToTypeMap = {
            CHECKBOX: 'checklist',
            RADIO: 'checklist',
            SELECT: 'chips',
        };
        /** @type {?} */
        const typeToTypeMap = {
            file: 'file',
            COMPOSITE: 'address',
        };
        /** @type {?} */
        const numberDataTypeToTypeMap = {
            Double: 'float',
            BigDecimal: 'float',
            Integer: 'number',
        };
        if (field.type === 'TO_MANY') {
            if (this.hasAssociatedEntity(field)) {
                if (field.multiValue === false) {
                    type = 'entitypicker';
                }
                else {
                    type = 'entitychips';
                }
            }
            else {
                if (field.multiValue === false) {
                    type = 'picker';
                }
                else {
                    type = 'chips';
                }
            }
        }
        else if (field.type === 'TO_ONE') {
            if ('SYSTEM' === field.dataSpecialization && ['WorkflowOptionsLookup', 'SpecializedOptionsLookup'].includes(field.dataType)) {
                type = dataSpecializationTypeMap[field.dataType];
            }
            else if (['WORKFLOW_OPTIONS', 'SPECIALIZED_OPTIONS'].includes(field.dataSpecialization)) {
                type = dataSpecializationTypeMap[field.dataSpecialization];
            }
            else if (['SimplifiedOptionsLookup', 'SpecializedOptionsLookup'].includes(field.dataType)) {
                if (field.options && Object.keys(inputTypeToTypeMap).indexOf(field.inputType) > -1 && !field.multiValue) {
                    type = inputTypeToTypeMap[field.inputType];
                }
                else if (field.options && Object.keys(inputTypeMultiToTypeMap).indexOf(field.inputType) > -1 && field.multiValue) {
                    type = inputTypeMultiToTypeMap[field.inputType];
                }
                else {
                    type = dataSpecializationTypeMap[field.dataType];
                }
            }
            else if (this.hasAssociatedEntity(field)) {
                type = 'entitypicker'; // TODO!
            }
            else {
                type = 'picker';
            }
        }
        else if (field.optionsUrl && field.inputType === 'SELECT') {
            if (field.optionsType && ~this.ENTITY_PICKER_LIST.indexOf(field.optionsType)) {
                type = 'entitypicker'; // TODO!
            }
            else {
                type = 'picker';
            }
        }
        else if (Object.keys(dataSpecializationTypeMap).indexOf(field.dataSpecialization) > -1) {
            type = dataSpecializationTypeMap[field.dataSpecialization];
        }
        else if (Object.keys(dataTypeToTypeMap).indexOf(field.dataType) > -1) {
            type = dataTypeToTypeMap[field.dataType];
        }
        else if (field.inputType === 'TEXTAREA') {
            type = 'textarea';
        }
        else if (field.options && Object.keys(inputTypeToTypeMap).indexOf(field.inputType) > -1 && !field.multiValue) {
            type = inputTypeToTypeMap[field.inputType];
        }
        else if (field.options && Object.keys(inputTypeMultiToTypeMap).indexOf(field.inputType) > -1 && field.multiValue) {
            type = inputTypeMultiToTypeMap[field.inputType];
        }
        else if (Object.keys(typeToTypeMap).indexOf(field.type) > -1) {
            type = typeToTypeMap[field.type];
        }
        else if (Object.keys(numberDataTypeToTypeMap).indexOf(field.dataType) > -1) {
            type = numberDataTypeToTypeMap[field.dataType];
        } /* else {
                throw new Error('FormUtils: This field type is unsupported.');
            }*/
        return type;
    }
    /**
     * @param {?} key
     * @return {?}
     */
    isFieldEncrypted(key) {
        return key.indexOf('customEncrypted') > -1;
    }
    /**
     * @param {?} field
     * @param {?} http
     * @param {?} config
     * @param {?=} overrides
     * @param {?=} forTable
     * @param {?=} fieldData
     * @return {?}
     */
    getControlForField(field, http, config, overrides, forTable = false, fieldData) {
        // TODO: if field.type overrides `determineInputType` we should use it in that method or use this method
        // TODO: (cont.) as the setter of the field argument
        /** @type {?} */
        let type = this.determineInputType(field) || field.type;
        /** @type {?} */
        let control;
        /** @type {?} */
        const controlConfig = {
            metaType: field.type,
            type,
            key: field.name,
            label: field.label,
            placeholder: field.hint || '',
            required: field.required || field.systemRequired,
            hidden: !field.required,
            encrypted: this.isFieldEncrypted(field.name ? field.name.toString() : ''),
            value: field.value || field.defaultValue,
            sortOrder: field.sortOrder,
            associatedEntity: field.associatedEntity,
            optionsType: field.optionsType,
            multiple: field.multiValue,
            readOnly: !!field.disabled || !!field.readOnly,
            disabled: field.disabled,
            maxlength: field.maxLength,
            interactions: field.interactions,
            dataSpecialization: field.dataSpecialization,
            dataType: field.dataType,
            description: field.description || '',
            tooltip: field.tooltip,
            tooltipPosition: field.tooltipPosition,
            customControl: field.customControl,
            template: field.template,
            customControlConfig: field.customControlConfig,
            restrictFieldInteractions: field.restrictFieldInteractions,
            validators: field.validators,
            warning: field.warning,
            config: field.config || {},
            closeOnSelect: field.closeOnSelect,
            layoutOptions: field.layoutOptions,
        };
        this.inferStartDate(controlConfig, field);
        // TODO: getControlOptions should always return the correct format
        /** @type {?} */
        const optionsConfig = this.getControlOptions(field, http, config, fieldData);
        if (Array.isArray(optionsConfig) && !(type === 'chips' || type === 'picker')) {
            controlConfig.options = optionsConfig;
        }
        else if (Array.isArray(optionsConfig) && (type === 'chips' || type === 'picker')) {
            controlConfig.config = {
                options: optionsConfig,
            };
        }
        else if (optionsConfig) {
            controlConfig.config = Object.assign({}, optionsConfig, (controlConfig && controlConfig.config));
        }
        if (type === 'year') {
            controlConfig.maxlength = 4;
        }
        // TODO: Overrides should be an iterable of all properties (potentially a private method)
        /** @type {?} */
        let overrideResultsTemplate;
        /** @type {?} */
        let overridePreviewTemplate;
        if (overrides && overrides[field.name]) {
            if (overrides[field.name].resultsTemplate) {
                overrideResultsTemplate = overrides[field.name].resultsTemplate;
                controlConfig.config.resultsTemplate = overrideResultsTemplate;
                delete overrides[field.name].resultsTemplate;
            }
            if (overrides[field.name].overridePreviewTemplate) {
                overrideResultsTemplate = overrides[field.name].overridePreviewTemplate;
                controlConfig.config.overridePreviewTemplate = overrideResultsTemplate;
                delete overrides[field.name].overridePreviewTemplate;
            }
            if (overrides[field.name].pickerCallback) {
                controlConfig.config.callback = overrides[field.name].pickerCallback;
            }
            if (overrides[field.name].type) {
                type = overrides[field.name].type;
            }
            if (overrides[field.name].columns) {
                controlConfig.config.columns = overrides[field.name].columns;
                controlConfig.closeOnSelect = true;
                delete controlConfig.label;
            }
            if (overrides[field.name].warning) {
                controlConfig.warning = overrides[field.name].warning;
            }
            Object.assign(controlConfig, overrides[field.name]);
        }
        switch (type) {
            case 'entitychips':
                // TODO: This doesn't belong in this codebase
                controlConfig.multiple = true;
                controlConfig.config.resultsTemplate = overrideResultsTemplate || EntityPickerResults;
                controlConfig.config.previewTemplate = overridePreviewTemplate || EntityPickerResult;
                // TODO: When appendToBody picker works better in table/form
                control = new PickerControl(controlConfig);
                break;
            case 'chips':
                controlConfig.multiple = true;
                // TODO: When appendToBody picker works better in table/form
                control = new PickerControl(controlConfig);
                break;
            case 'entitypicker':
                // TODO: This doesn't belong in this codebase
                controlConfig.config.resultsTemplate = overrideResultsTemplate || EntityPickerResults;
                // TODO: When appendToBody picker works better in table/form
                control = new PickerControl(controlConfig);
                break;
            case 'picker':
                // TODO: When appendToBody picker works better in table/form
                control = new PickerControl(controlConfig);
                break;
            case 'datetime':
                controlConfig.military = config ? !!config.military : false;
                controlConfig.weekStart = config && config.weekStart ? config.weekStart : 0;
                control = new DateTimeControl(controlConfig);
                break;
            case 'date':
                controlConfig.dateFormat = field.dateFormat;
                controlConfig.textMaskEnabled = field.textMaskEnabled;
                controlConfig.allowInvalidDate = field.allowInvalidDate;
                controlConfig.military = config ? !!config.military : false;
                controlConfig.weekStart = config && config.weekStart ? config.weekStart : 0;
                control = new DateControl(controlConfig);
                break;
            case 'time':
                controlConfig.military = config ? !!config.military : false;
                control = new TimeControl(controlConfig);
                break;
            case 'currency':
            case 'money':
            case 'email':
            case 'percentage':
            case 'float':
            case 'number':
            case 'year':
                // TODO: Only types from `determineInputType` should be used in this class
                if (type === 'money') {
                    type = 'currency';
                }
                controlConfig.type = type;
                control = new TextBoxControl(controlConfig);
                break;
            case 'text':
                control = new TextBoxControl(controlConfig);
                break;
            case 'textarea':
                control = new TextAreaControl(controlConfig);
                break;
            case 'editor':
                control = new EditorControl(controlConfig);
                break;
            case 'editor-minimal':
                control = new EditorControl(controlConfig);
                control.minimal = true;
                break;
            case 'tiles':
                control = new TilesControl(controlConfig);
                break;
            case 'checkbox':
                controlConfig.checkboxLabel = field.checkboxLabel;
                control = new CheckboxControl(controlConfig);
                break;
            case 'checklist':
                control = new CheckListControl(controlConfig);
                break;
            case 'radio':
                control = new RadioControl(controlConfig);
                break;
            case 'select':
                control = new SelectControl(controlConfig);
                break;
            case 'address':
                controlConfig.required = field.required || false;
                if (Helpers.isBlank(controlConfig.config)) {
                    controlConfig.config = {};
                }
                controlConfig.config.required = field.required;
                controlConfig.config.readOnly = controlConfig.readOnly;
                if (field.fields && field.fields.length) {
                    for (const subfield of field.fields) {
                        controlConfig.config[subfield.name] = {
                            required: !!subfield.required,
                            hidden: !!subfield.readOnly,
                        };
                        if (!Helpers.isEmpty(subfield.label)) {
                            controlConfig.config[subfield.name].label = subfield.label;
                        }
                        if (!Helpers.isEmpty(subfield.maxLength)) {
                            controlConfig.config[subfield.name].maxlength = subfield.maxLength;
                        }
                        controlConfig.required = controlConfig.required || subfield.required;
                        if (subfield.defaultValue) {
                            if (Helpers.isBlank(controlConfig.value)) {
                                controlConfig.value = {};
                            }
                            controlConfig.value[subfield.name] = subfield.defaultValue;
                        }
                        else if (subfield.name === 'countryID') {
                            if (Helpers.isBlank(controlConfig.value)) {
                                controlConfig.value = {};
                            }
                            controlConfig.value[subfield.name] = 1;
                        }
                        if (subfield.name === 'state' || subfield.name === 'countryID') {
                            if (subfield.name === 'countryID') {
                                subfield.optionsType = 'Country';
                            }
                            if (!subfield.optionsUrl) {
                                subfield.optionsUrl = `options/${subfield.optionsType}`;
                            }
                            controlConfig.config[subfield.name].pickerConfig = this.getControlOptions(subfield, http, config, fieldData);
                        }
                    }
                }
                controlConfig.isEmpty = this.isAddressEmpty;
                control = new AddressControl(controlConfig);
                break;
            case 'file':
                control = new FileControl(controlConfig);
                break;
            case 'custom':
                control = new CustomControl(controlConfig);
                break;
            default:
                control = new TextBoxControl(controlConfig);
                break;
        }
        return control;
    }
    /**
     * @private
     * @param {?} field
     * @return {?}
     */
    shouldCreateControl(field) {
        if (field.systemRequired) {
            field.readOnly = false;
        }
        return (field.name !== 'id' &&
            (!['SYSTEM', 'SECTION_HEADER'].includes(field.dataSpecialization) ||
                ['address', 'billingAddress', 'secondaryAddress'].includes(field.name)) &&
            !field.readOnly);
    }
    /**
     * @param {?} meta
     * @param {?} currencyFormat
     * @param {?} http
     * @param {?} config
     * @param {?=} overrides
     * @param {?=} forTable
     * @return {?}
     */
    toControls(meta, currencyFormat, http, config, overrides, forTable = false) {
        /** @type {?} */
        const controls = [];
        if (meta && meta.fields) {
            /** @type {?} */
            const fields = meta.fields;
            fields.forEach((/**
             * @param {?} field
             * @return {?}
             */
            (field) => {
                if (this.shouldCreateControl(field)) {
                    /** @type {?} */
                    const control = this.getControlForField(field, http, config, overrides, forTable);
                    // Set currency format
                    if (control.subType === 'currency') {
                        control.currencyFormat = currencyFormat;
                    }
                    // Add to controls
                    controls.push(control);
                }
            }));
        }
        return controls;
    }
    /**
     * @param {?} meta
     * @param {?} currencyFormat
     * @param {?} http
     * @param {?} config
     * @param {?=} overrides
     * @return {?}
     */
    toTableControls(meta, currencyFormat, http, config, overrides) {
        /** @type {?} */
        const controls = this.toControls(meta, currencyFormat, http, config, overrides, true);
        /** @type {?} */
        const ret = {};
        controls.forEach((/**
         * @param {?} control
         * @return {?}
         */
        (control) => {
            ret[control.key] = {
                editorType: control.__type,
                editorConfig: control.__config,
            };
        }));
        return ret;
    }
    /**
     * @param {?} meta
     * @param {?} currencyFormat
     * @param {?} http
     * @param {?} config
     * @param {?=} overrides
     * @param {?=} data
     * @return {?}
     */
    toFieldSets(meta, currencyFormat, http, config, overrides, data) {
        /** @type {?} */
        const fieldsets = [];
        /** @type {?} */
        let formFields = [];
        if (meta && meta.fields) {
            formFields = this.getFormFields(meta);
            formFields.forEach((/**
             * @param {?} field
             * @return {?}
             */
            (field) => {
                if (this.isHeader(field)) {
                    if (field.enabled) {
                        this.insertHeaderToFieldsets(fieldsets, field);
                    }
                }
                else if (this.isEmbeddedField(field)) {
                    this.insertHeaderToFieldsets(fieldsets, field);
                    /** @type {?} */
                    const embeddedFields = this.getEmbeddedFields(field);
                    embeddedFields.forEach((/**
                     * @param {?} embeddedField
                     * @return {?}
                     */
                    (embeddedField) => {
                        if (this.shouldCreateControl(embeddedField)) {
                            /** @type {?} */
                            let control = this.createControl(embeddedField, data, http, config, overrides, currencyFormat);
                            control = this.markControlAsEmbedded(control, field.dataSpecialization ? field.dataSpecialization.toLowerCase() : null);
                            fieldsets[fieldsets.length - 1].controls.push(control);
                        }
                        else if (this.isHeader(embeddedField)) {
                            this.insertHeaderToFieldsets(fieldsets, embeddedField);
                        }
                    }));
                }
                else if (this.shouldCreateControl(field)) {
                    /** @type {?} */
                    let control = this.createControl(field, data, http, config, overrides, currencyFormat);
                    if (field.inlineEmbeddedAssociatedEntityField) {
                        control = this.markControlAsEmbedded(control, 'inline_embedded');
                    }
                    if (fieldsets.length === 0) {
                        fieldsets.push({ controls: [] });
                    }
                    fieldsets[fieldsets.length - 1].controls.push(control);
                }
            }));
        }
        if (fieldsets.length > 0) {
            return fieldsets;
        }
        else {
            return [
                {
                    controls: this.toControls(meta, currencyFormat, http, config),
                },
            ];
        }
    }
    /**
     * @private
     * @param {?} field
     * @return {?}
     */
    isEmbeddedField(field) {
        return field.dataSpecialization && ['embedded'].includes(field.dataSpecialization.toLowerCase()) && !field.readOnly;
    }
    /**
     * @private
     * @param {?} field
     * @param {?} data
     * @param {?} http
     * @param {?} config
     * @param {?} overrides
     * @param {?} currencyFormat
     * @return {?}
     */
    createControl(field, data, http, config, overrides, currencyFormat) {
        /** @type {?} */
        const fieldData = this.isEmbeddedFieldData(field, data) ? this.getEmbeddedFieldData(field, data) : this.getFieldData(field, data);
        /** @type {?} */
        const control = this.getControlForField(field, http, config, overrides, undefined, fieldData);
        // Set currency format
        if (control.subType === 'currency') {
            control.currencyFormat = currencyFormat;
        }
        return control;
    }
    /**
     * @private
     * @param {?} field
     * @param {?} data
     * @return {?}
     */
    isEmbeddedFieldData(field, data) {
        return data && field.name.includes('.');
    }
    /**
     * @private
     * @param {?} field
     * @param {?} data
     * @return {?}
     */
    getFieldData(field, data) {
        return (data && data[field.name]) || null;
    }
    /**
     * @private
     * @param {?} field
     * @param {?} data
     * @return {?}
     */
    getEmbeddedFieldData(field, data) {
        const [parentFieldName, fieldName] = field.name.split('.');
        return (data && data[parentFieldName] && data[parentFieldName][fieldName]) || null;
    }
    /**
     * @private
     * @param {?} meta
     * @return {?}
     */
    getFormFields(meta) {
        /** @type {?} */
        const sectionHeaders = meta.sectionHeaders
            ? meta.sectionHeaders.map((/**
             * @param {?} element
             * @return {?}
             */
            (element) => {
                element.isSectionHeader = true;
                return element;
            }))
            : [];
        /** @type {?} */
        let fields = meta.fields.map((/**
         * @param {?} field
         * @return {?}
         */
        (field) => {
            if (!field.hasOwnProperty('sortOrder')) {
                field.sortOrder = Number.MAX_SAFE_INTEGER - 1;
            }
            return field;
        }));
        // build list of fields that should be displayed inline but belong to associated entities
        /** @type {?} */
        const inlineEmbeddedAssociatedEntityFields = this.getInlineEmbeddedFields(fields);
        // remove the inline embedded fields because the associated entity fields were extracted above
        // and will be added to the regular list of fields. This prevents the fields from being added multiple times.
        fields = fields.filter((/**
         * @param {?} f
         * @return {?}
         */
        (f) => !f.dataSpecialization || f.dataSpecialization.toLowerCase() !== 'inline_embedded'));
        // sort fields
        return [...sectionHeaders, ...fields, ...inlineEmbeddedAssociatedEntityFields].sort(Helpers.sortByField(['sortOrder', 'name']));
    }
    /**
     * @private
     * @param {?} fields
     * @return {?}
     */
    getInlineEmbeddedFields(fields) {
        /** @type {?} */
        let inlineEmbeddedAssociatedEntityFields = [];
        fields
            .filter((/**
         * @param {?} f
         * @return {?}
         */
        (f) => f.dataSpecialization && f.dataSpecialization.toLowerCase() === 'inline_embedded'))
            .forEach((/**
         * @param {?} f
         * @return {?}
         */
        (f) => {
            inlineEmbeddedAssociatedEntityFields = [...inlineEmbeddedAssociatedEntityFields, ...this.getAssociatedFieldsForInlineEmbedded(f)];
        }));
        return inlineEmbeddedAssociatedEntityFields;
    }
    /**
     * @private
     * @param {?} field
     * @return {?}
     */
    getAssociatedFieldsForInlineEmbedded(field) {
        /** @type {?} */
        let associatedEntityFields = [];
        associatedEntityFields = this.getEmbeddedFields(field).map((/**
         * @param {?} aef
         * @return {?}
         */
        (aef) => {
            aef.inlineEmbeddedAssociatedEntityField = true;
            return aef;
        }));
        return associatedEntityFields;
    }
    /**
     * @private
     * @param {?} subHeader
     * @return {?}
     */
    getEmbeddedFields(subHeader) {
        return subHeader.associatedEntity.fields
            .filter((/**
         * @param {?} field
         * @return {?}
         */
        (field) => field.name !== 'id'))
            .map((/**
         * @param {?} field
         * @return {?}
         */
        (field) => {
            if (!field.name.startsWith(`${subHeader.name}.`)) {
                field.name = `${subHeader.name}.${field.name}`;
            }
            return field;
        }))
            .sort(Helpers.sortByField(['sortOrder', 'name']));
    }
    /**
     * @private
     * @param {?} field
     * @return {?}
     */
    isHeader(field) {
        return (!Helpers.isBlank(field) &&
            ((field.hasOwnProperty('isSectionHeader') && field.isSectionHeader) ||
                (field.dataSpecialization && field.dataSpecialization.toLowerCase() === 'section_header')));
    }
    /**
     * @private
     * @param {?} fieldsets
     * @param {?} field
     * @return {?}
     */
    insertHeaderToFieldsets(fieldsets, field) {
        /** @type {?} */
        const constantProperties = {
            controls: [],
            isEmbedded: field.dataSpecialization && field.dataSpecialization.toLowerCase() === 'embedded',
            isInlineEmbedded: field.dataSpecialization && field.dataSpecialization.toLowerCase() === 'inline_embedded',
            key: field.name,
        };
        if (field.name && field.name.startsWith('customObject') && field.associatedEntity && field.associatedEntity.label) {
            fieldsets.push(Object.assign({ title: field.associatedEntity.label || field.label, icon: field.icon || 'bhi-card-expand' }, constantProperties));
        }
        else {
            fieldsets.push(Object.assign({ title: field.label, icon: field.icon || 'bhi-section' }, constantProperties));
        }
    }
    /**
     * @private
     * @param {?} control
     * @param {?=} dataSpecialization
     * @return {?}
     */
    markControlAsEmbedded(control, dataSpecialization) {
        if (Helpers.isBlank(control['config'])) {
            control['config'] = {};
        }
        control['config']['embedded'] = true;
        control.isEmbedded = dataSpecialization === 'embedded';
        control.isInlineEmbedded = dataSpecialization === 'inline_embedded';
        return control;
    }
    /**
     * @param {?} field
     * @param {?} http
     * @param {?} config
     * @param {?=} fieldData
     * @return {?}
     */
    getControlOptions(field, http, config, fieldData) {
        // TODO: The token property of config is the only property used; just pass in `token: string`
        if (field.dataType === 'Boolean' && !field.options) {
            // TODO: dataType should only be determined by `determineInputType` which doesn't ever return 'Boolean' it
            // TODO: (cont.) returns `tiles`
            return [{ value: false, label: this.labels.no }, { value: true, label: this.labels.yes }];
        }
        else if (field.workflowOptions && fieldData) {
            return this.getWorkflowOptions(field.workflowOptions, fieldData);
        }
        else if (field.dataSpecialization === 'SPECIALIZED_OPTIONS' ||
            (field.options && ['SpecializedOptionsLookup', 'SimplifiedOptionsLookup'].includes(field.dataType))) {
            return field.options.filter((/**
             * @param {?} o
             * @return {?}
             */
            (o) => !o.readOnly));
        }
        else if (field.optionsUrl) {
            return this.optionsService.getOptionsConfig(http, field, config);
        }
        else if (Array.isArray(field.options) && field.type === 'chips') {
            /** @type {?} */
            const options = field.options;
            return {
                field: 'value',
                format: '$label',
                options,
            };
        }
        else if (field.options) {
            return field.options;
        }
        return null;
    }
    /**
     * @private
     * @param {?} workflowOptions
     * @param {?} fieldData
     * @return {?}
     */
    getWorkflowOptions(workflowOptions, fieldData) {
        /** @type {?} */
        let currentValue;
        if (fieldData.id) {
            currentValue = { value: fieldData.id, label: fieldData.label ? fieldData.label : fieldData.id };
        }
        /** @type {?} */
        const currentWorkflowOption = fieldData.id ? fieldData.id : 'initial';
        /** @type {?} */
        const updateWorkflowOptions = workflowOptions[currentWorkflowOption] || [];
        if (currentValue && !updateWorkflowOptions.find((/**
         * @param {?} option
         * @return {?}
         */
        (option) => option.value === currentValue.value))) {
            updateWorkflowOptions.unshift(currentValue);
        }
        return updateWorkflowOptions;
    }
    /**
     * @param {?} controls
     * @param {?} values
     * @param {?=} keepClean
     * @param {?=} keyOverride
     * @return {?}
     */
    setInitialValues(controls, values, keepClean, keyOverride) {
        for (let i = 0; i < controls.length; i++) {
            /** @type {?} */
            const control = controls[i];
            /** @type {?} */
            const key = keyOverride ? control.key.replace(keyOverride, '') : control.key;
            /** @type {?} */
            let value = values[key];
            if (Helpers.isBlank(value)) {
                continue;
            }
            if (Array.isArray(value) && value.length === 0) {
                continue;
            }
            if (Array.isArray(value) && value.length > 0) {
                value = value.filter((/**
                 * @param {?} val
                 * @return {?}
                 */
                (val) => !(Object.keys(val).length === 0 && val.constructor === Object)));
                if (value.length === 0) {
                    continue;
                }
            }
            if (value.data && value.data.length === 0) {
                continue;
            }
            if (Object.keys(value).length === 0 && value.constructor === Object) {
                continue;
            }
            if (control.dataType === 'Date' && typeof value === 'string' && control.optionsType !== 'skipConversion') {
                value = Object(date_fns__WEBPACK_IMPORTED_MODULE_10__["startOfDay"])(value);
            }
            control.value = value;
            // TODO: keepClean is not required, but is always used. It should default (to true?)
            control.dirty = !keepClean;
        }
    }
    /**
     * @param {?} fieldsets
     * @param {?} values
     * @param {?=} keepClean
     * @return {?}
     */
    setInitialValuesFieldsets(fieldsets, values, keepClean) {
        fieldsets.forEach((/**
         * @param {?} fieldset
         * @return {?}
         */
        (fieldset) => {
            this.setInitialValues(fieldset.controls, values, keepClean);
        }));
    }
    /**
     * @param {?} controls
     * @return {?}
     */
    forceShowAllControls(controls) {
        controls.forEach((/**
         * @param {?} control
         * @return {?}
         */
        (control) => {
            control.hidden = false;
        }));
    }
    /**
     * @param {?} fieldsets
     * @return {?}
     */
    forceShowAllControlsInFieldsets(fieldsets) {
        fieldsets.forEach((/**
         * @param {?} fieldset
         * @return {?}
         */
        (fieldset) => {
            fieldset.controls.forEach((/**
             * @param {?} control
             * @return {?}
             */
            (control) => {
                control.hidden = false;
            }));
        }));
    }
    /**
     * @param {?} form
     * @return {?}
     */
    forceValidation(form) {
        Object.keys(form.controls).forEach((/**
         * @param {?} key
         * @return {?}
         */
        (key) => {
            /** @type {?} */
            const control = form.controls[key];
            if (control.required && Helpers.isBlank(form.value[control.key])) {
                control.markAsDirty();
                control.markAsTouched();
            }
        }));
    }
    /**
     * @param {?} control
     * @return {?}
     */
    isAddressEmpty(control) {
        /** @type {?} */
        const fieldList = ['address1', 'address2', 'city', 'state', 'zip', 'countryID'];
        /** @type {?} */
        let valid = true;
        if (control.value && control.config) {
            fieldList.forEach((/**
             * @param {?} subfield
             * @return {?}
             */
            (subfield) => {
                if (((subfield !== 'countryID' &&
                    !Helpers.isEmpty(control.config[subfield]) &&
                    control.config[subfield].required &&
                    (Helpers.isBlank(control.value[subfield]) || Helpers.isEmpty(control.value[subfield]))) ||
                    (subfield === 'countryID' &&
                        !Helpers.isEmpty(control.config.countryID) &&
                        control.config.countryID.required &&
                        Helpers.isEmpty(control.value.countryName))) &&
                    !(subfield === 'state' &&
                        !Helpers.isBlank(control.value.countryName) &&
                        control.config.state.pickerConfig &&
                        control.config.state.pickerConfig.defaultOptions &&
                        control.config.state.pickerConfig.defaultOptions.length === 0)) {
                    valid = false;
                }
            }));
        }
        return valid;
    }
    /**
     * @private
     * @param {?} dateRange
     * @return {?}
     */
    getStartDateFromRange(dateRange) {
        if (dateRange.minDate) {
            return Object(date_fns__WEBPACK_IMPORTED_MODULE_10__["parse"])(dateRange.minDate);
        }
        else if (dateRange.minOffset) {
            return Object(date_fns__WEBPACK_IMPORTED_MODULE_10__["addDays"])(Object(date_fns__WEBPACK_IMPORTED_MODULE_10__["startOfToday"])(), dateRange.minOffset);
        }
    }
    /**
     * Get the min start date of a Date base on field data.
     * @private
     * @param {?} field
     * @return {?}
     */
    getStartDate(field) {
        if (field.allowedDateRange) {
            return this.getStartDateFromRange(field.allowedDateRange);
        }
        // there is no restriction on the start date
        return null;
    }
    /**
     * @private
     * @param {?} controlConfig
     * @param {?} field
     * @return {?}
     */
    inferStartDate(controlConfig, field) {
        if (field.dataType === 'Date') {
            /** @type {?} */
            const startDate = this.getStartDate(field);
            if (startDate) {
                controlConfig.startDate = startDate;
            }
            return startDate;
        }
    }
    /**
     * @param {?} data
     * @return {?}
     */
    inflateEmbeddedProperties(data) {
        if (data) {
            Object.keys(data)
                .filter((/**
             * @param {?} fieldName
             * @return {?}
             */
            (fieldName) => fieldName.includes('.')))
                .forEach((/**
             * @param {?} field
             * @return {?}
             */
            (field) => {
                const [parentFieldName, fieldName] = field.split('.');
                if (!data[parentFieldName]) {
                    data[parentFieldName] = {};
                }
                data[parentFieldName][fieldName] = data[field];
                delete data[field];
            }));
        }
        return data;
    }
}
FormUtils.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"] }
];
/** @nocollapse */
FormUtils.ctorParameters = () => [
    { type: NovoLabelService },
    { type: OptionsService }
];
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: utils/deferred/Deferred.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * A Promise that uses the deferred anti-pattern
 * @return {?}
 */
function Deferred() {
    /** @type {?} */
    const temp = {};
    /** @type {?} */
    const promise = new Promise((/**
     * @param {?} resolve
     * @param {?} reject
     * @return {?}
     */
    (resolve, reject) => {
        temp.resolve = resolve;
        temp.reject = reject;
    }));
    promise.resolve = temp.resolve;
    promise.reject = temp.reject;
    return promise;
}

/**
 * @fileoverview added by tsickle
 * Generated from: elements/modal/Modal.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Params that can be passed to the Modal
 * @record
 */
function ModalParams() { }
class NovoModalParams {
}
/**
 * Reference to an opened dialog.
 */
class NovoModalRef {
    constructor() {
        this.component = null;
        this.contentRef = null;
        this.containerRef = null;
        this.isClosed = false;
        this._onClosed = Deferred();
    }
    // Gets a promise that is resolved when the dialog is closed.
    /**
     * @return {?}
     */
    get onClosed() {
        return this._onClosed;
    }
    /**
     * @return {?}
     */
    open() {
        document.body.classList.add('modal-open');
    }
    /**
     * @param {?=} result
     * @return {?}
     */
    close(result) {
        document.body.classList.remove('modal-open');
        if (this.contentRef) {
            this.contentRef.destroy();
        }
        if (this.containerRef) {
            this.containerRef.destroy();
        }
        this._onClosed.resolve(result);
    }
}
NovoModalRef.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"] }
];
if (false) {}
class NovoModalContainerElement {
    /**
     * @param {?} modalRef
     * @param {?} componentUtils
     */
    constructor(modalRef, componentUtils) {
        this.modalRef = modalRef;
        this.componentUtils = componentUtils;
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        setTimeout((/**
         * @return {?}
         */
        () => {
            this.modalRef.contentRef = this.componentUtils.append(this.modalRef.component, this.container);
        }));
    }
}
NovoModalContainerElement.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'novo-modal-container',
                template: '<span #container></span>'
            }] }
];
/** @nocollapse */
NovoModalContainerElement.ctorParameters = () => [
    { type: NovoModalRef },
    { type: ComponentUtils }
];
NovoModalContainerElement.propDecorators = {
    container: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"], args: ['container', { read: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewContainerRef"], static: false },] }]
};
if (false) {}
class NovoModalElement {
    /**
     * @param {?} modalRef
     */
    constructor(modalRef) {
        this.modalRef = modalRef;
    }
    /**
     * @return {?}
     */
    close() {
        this.modalRef.close();
    }
}
NovoModalElement.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'novo-modal',
                template: `
    <ng-content select="header"></ng-content>
    <ng-content select="section"></ng-content>
    <footer><ng-content select="button"></ng-content></footer>
  `
            }] }
];
/** @nocollapse */
NovoModalElement.ctorParameters = () => [
    { type: NovoModalRef }
];
if (false) {}
class NovoModalNotificationElement {
    /**
     * @param {?} modalRef
     */
    constructor(modalRef) {
        this.modalRef = modalRef;
        this.cancel = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.modalRef = modalRef;
    }
    /**
     * @return {?}
     */
    close() {
        this.cancel.emit();
        this.modalRef.close();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        switch (this.type) {
            case 'success':
                this.iconType = 'bhi-check';
                break;
            case 'warning':
                this.iconType = 'bhi-caution-o';
                break;
            case 'error':
                this.iconType = 'bhi-caution-o';
                break;
            case 'custom':
                this.iconType = `bhi-${this.icon}`;
                break;
            default:
                break;
        }
    }
}
NovoModalNotificationElement.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'novo-notification',
                template: `
    <button class="modal-close" theme="icon" icon="times" (click)="close()"></button>
    <header><ng-content select="label"></ng-content></header>
    <section class="notification-body">
      <i class="indicator" [ngClass]="iconType" *ngIf="iconType"></i>
      <ng-content select="h1"></ng-content>
      <ng-content select="h2"></ng-content>
      <ng-content select="p"></ng-content>
    </section>
    <footer><ng-content select="button"></ng-content></footer>
  `
            }] }
];
/** @nocollapse */
NovoModalNotificationElement.ctorParameters = () => [
    { type: NovoModalRef }
];
NovoModalNotificationElement.propDecorators = {
    type: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    icon: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    cancel: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }]
};
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: elements/modal/ModalService.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NovoModalService {
    /**
     * @param {?} componentUtils
     */
    constructor(componentUtils) {
        this.componentUtils = componentUtils;
    }
    /**
     * @param {?} view
     * @return {?}
     */
    set parentViewContainer(view) {
        this._parentViewContainer = view;
    }
    /**
     * @template T
     * @param {?} component
     * @param {?=} scope
     * @return {?}
     */
    open(component, scope = {}) {
        if (!this._parentViewContainer) {
            throw new Error('No parent view container specified for the ModalService. Set it inside your main application. \nthis.modalService.parentViewContainer = view (ViewContainerRef)');
        }
        /** @type {?} */
        const modal = new NovoModalRef();
        modal.component = component;
        modal.open();
        /** @type {?} */
        const providers = [{ provide: NovoModalRef, useValue: modal }, { provide: NovoModalParams, useValue: scope }];
        modal.containerRef = this.componentUtils.append(NovoModalContainerElement, this._parentViewContainer, providers);
        return modal;
    }
}
NovoModalService.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"] }
];
/** @nocollapse */
NovoModalService.ctorParameters = () => [
    { type: ComponentUtils }
];
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: elements/toast/Toast.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NovoToastElement {
    /**
     * @param {?} sanitizer
     */
    constructor(sanitizer) {
        this.sanitizer = sanitizer;
        this.theme = 'danger';
        this.icon = 'caution';
        this.hasDialogue = false;
        this.isCloseable = false;
        this.closed = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.show = false;
        this.animate = false;
        this.parent = null;
        this.launched = false;
    }
    /**
     * @param {?} m
     * @return {?}
     */
    set message(m) {
        this._message = this.sanitizer.bypassSecurityTrustHtml(m);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (!this.launched) {
            // clear position and time
            this.position = null;
            this.time = null;
            // set icon and styling
            this.iconClass = `bhi-${this.icon}`;
            this.alertTheme = `${this.theme} toast-container embedded`;
            if (this.hasDialogue) {
                this.alertTheme += ' dialogue';
            }
        }
    }
    /**
     * @param {?=} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        // set icon and styling
        this.iconClass = `bhi-${this.icon}`;
        this.alertTheme = `${this.theme} toast-container embedded`;
        if (this.hasDialogue) {
            this.alertTheme += ' dialogue';
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    clickHandler(event) {
        if (!this.isCloseable) {
            if (event) {
                event.stopPropagation();
                event.preventDefault();
            }
            if (this.parent) {
                this.parent.hide(this);
            }
            else {
                this.closed.emit({ closed: true });
            }
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    close(event) {
        if (event) {
            event.stopPropagation();
            event.preventDefault();
        }
        if (this.parent) {
            this.parent.hide(this);
        }
        else {
            this.closed.emit({ closed: true });
        }
    }
}
NovoToastElement.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'novo-toast',
                host: {
                    '[class]': 'alertTheme',
                    '[class.show]': 'show',
                    '[class.animate]': 'animate',
                    '[class.embedded]': 'embedded',
                    '(click)': '!isCloseable && clickHandler($event)',
                },
                template: `
        <div class="toast-icon">
            <i [ngClass]="iconClass"></i>
        </div>
        <div class="toast-content">
            <h5 *ngIf="title">{{title}}</h5>
            <p *ngIf="_message" [class.message-only]="!title" [innerHtml]="_message"></p>
            <div *ngIf="link" class="link-generated">
                <input type="text" [value]="link" onfocus="this.select();"/>
            </div>
            <div class="dialogue">
                <ng-content></ng-content>
            </div>
        </div>
        <div class="close-icon" *ngIf="isCloseable" (click)="close($event)">
            <i class="bhi-times"></i>
        </div>
    `
            }] }
];
/** @nocollapse */
NovoToastElement.ctorParameters = () => [
    { type: _angular_platform_browser__WEBPACK_IMPORTED_MODULE_15__["DomSanitizer"] }
];
NovoToastElement.propDecorators = {
    theme: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    icon: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    title: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    hasDialogue: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    link: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    isCloseable: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    message: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    closed: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }]
};
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: elements/toast/ToastService.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @record
 */
function ToastOptions() { }
if (false) {}
class NovoToastService {
    /**
     * @param {?} componentUtils
     */
    constructor(componentUtils) {
        this.componentUtils = componentUtils;
        this.references = [];
        this.icons = { default: 'bell', success: 'check', info: 'info', warning: 'warning', danger: 'remove' };
        this.defaults = { hideDelay: 3500, position: 'growlTopRight', theme: 'default' };
    }
    /**
     * @param {?} view
     * @return {?}
     */
    set parentViewContainer(view) {
        this._parentViewContainer = view;
    }
    /**
     * @param {?} options
     * @param {?=} toastElement
     * @return {?}
     */
    alert(options, toastElement = NovoToastElement) {
        return new Promise((/**
         * @param {?} resolve
         * @return {?}
         */
        (resolve) => {
            if (!this._parentViewContainer) {
                console.error('No parent view container specified for the ToastService. Set it inside your main application. \nthis.toastService.parentViewContainer = view (ViewContainerRef)');
                return;
            }
            /** @type {?} */
            const toast = this.componentUtils.append(toastElement, this._parentViewContainer);
            this.references.push(toast);
            this.handleAlert(toast.instance, options);
            resolve(toast);
        }));
    }
    /**
     * @param {?} toast
     * @return {?}
     */
    isVisible(toast) {
        return toast.show;
    }
    /**
     * @param {?} toast
     * @return {?}
     */
    hide(toast) {
        toast.animate = false;
        setTimeout((/**
         * @return {?}
         */
        () => {
            toast.show = false;
            /** @type {?} */
            const REF = this.references.filter((/**
             * @param {?} x
             * @return {?}
             */
            (x) => x.instance === toast))[0];
            if (REF) {
                this.references.splice(this.references.indexOf(REF), 1);
                REF.destroy();
            }
        }), 300);
    }
    /**
     * @param {?} toast
     * @param {?} options
     * @return {?}
     */
    handleAlert(toast, options) {
        this.setToastOnSession(toast, options);
        setTimeout((/**
         * @return {?}
         */
        () => {
            this.show(toast);
        }), 20);
        if (!toast.isCloseable) {
            this.toastTimer(toast);
        }
    }
    /**
     * @param {?} toast
     * @param {?} opts
     * @return {?}
     */
    setToastOnSession(toast, opts) {
        /** @type {?} */
        const OPTIONS = typeof opts === 'object' ? opts : {};
        toast.parent = this;
        toast.title = OPTIONS.title || '';
        toast.message = OPTIONS.message || '';
        toast.hideDelay = OPTIONS.hideDelay || this.defaults.hideDelay;
        toast.link = OPTIONS.link || '';
        toast.isCloseable = OPTIONS.isCloseable || false;
        /** @type {?} */
        const CUSTOM_CLASS = OPTIONS.customClass || '';
        /** @type {?} */
        const ALERT_STYLE = OPTIONS.theme || this.defaults.theme;
        /** @type {?} */
        const ALERT_POSITION = OPTIONS.position || this.defaults.position;
        /** @type {?} */
        const ALERT_ICON = OPTIONS.icon || this.icons.default;
        toast.iconClass = `bhi-${ALERT_ICON}`;
        toast.launched = true;
        toast.alertTheme = `${ALERT_STYLE} ${ALERT_POSITION} ${CUSTOM_CLASS} toast-container launched`;
    }
    /**
     * @param {?} toast
     * @return {?}
     */
    show(toast) {
        toast.show = true;
        setTimeout(addClass, 25);
        /**
         * Adds animate class to be called after a timeout
         *
         * @return {?}
         */
        function addClass() {
            toast.animate = true;
        }
    }
    /**
     * @param {?} toast
     * @return {?}
     */
    toastTimer(toast) {
        if (toast.hideDelay < 0) {
            return;
        }
        setTimeout((/**
         * @return {?}
         */
        () => {
            this.hide(toast);
        }), toast.hideDelay);
    }
}
NovoToastService.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"] }
];
/** @nocollapse */
NovoToastService.ctorParameters = () => [
    { type: ComponentUtils }
];
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: elements/form/FieldInteractionModals.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ControlConfirmModal {
    /**
     * @param {?} modalRef
     * @param {?} params
     * @param {?} labels
     */
    constructor(modalRef, params, labels) {
        this.modalRef = modalRef;
        this.params = params;
        this.labels = labels;
    }
    /**
     * @param {?} result
     * @return {?}
     */
    close(result) {
        this.modalRef.close(result);
    }
}
ControlConfirmModal.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'control-confirm-modal',
                template: `
        <novo-notification type="warning" [attr.data-automation-id]="'field-interaction-modal-' + params['key']">
            <h1>{{ labels.confirmChangesModalMessage }}</h1>
            <h2 *ngIf="!params['message']"><label>{{ params['label'] }}:</label> {{ params['oldValue'] }} <i class="bhi-arrow-right"></i> {{ params['newValue'] }}</h2>
            <h2 *ngIf="params['message']">{{ params['message'] }}</h2>
            <button theme="standard" (click)="close(false)" [attr.data-automation-id]="'field-interaction-modal-cancel' + params['key']">{{ labels.cancel }}</button>
            <button theme="primary" icon="check" (click)="close(true)" autofocus [attr.data-automation-id]="'field-interaction-modal-save-' + params['key']">{{ labels.save }}</button>
        </novo-notification>
    `
            }] }
];
/** @nocollapse */
ControlConfirmModal.ctorParameters = () => [
    { type: NovoModalRef },
    { type: NovoModalParams },
    { type: NovoLabelService }
];
if (false) {}
class ControlPromptModal {
    /**
     * @param {?} modalRef
     * @param {?} params
     * @param {?} labels
     */
    constructor(modalRef, params, labels) {
        this.modalRef = modalRef;
        this.params = params;
        this.labels = labels;
    }
    /**
     * @param {?} result
     * @return {?}
     */
    close(result) {
        this.modalRef.close(result);
    }
}
ControlPromptModal.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'control-prompt-modal',
                template: `
        <novo-notification type="warning" [attr.data-automation-id]="'field-interaction-modal-' + params['key']">
            <h1>{{ labels.promptModalMessage }}</h1>
            <p *ngFor="let change of params['changes']">{{ change }}</p>
            <button theme="standard" (click)="close(false)" [attr.data-automation-id]="'field-interaction-modal-cancel' + params['key']">{{ labels.cancel }}</button>
            <button theme="primary" icon="check" (click)="close(true)" autofocus [attr.data-automation-id]="'field-interaction-modal-yes-' + params['key']">{{ labels.yes }}</button>
        </novo-notification>
    `
            }] }
];
/** @nocollapse */
ControlPromptModal.ctorParameters = () => [
    { type: NovoModalRef },
    { type: NovoModalParams },
    { type: NovoLabelService }
];
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: elements/form/FieldInteractionApi.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class CustomHttpImpl {
    /**
     * @param {?} http
     */
    constructor(http) {
        this.http = http;
        this.mapFn = (/**
         * @param {?} x
         * @return {?}
         */
        (x) => x);
    }
    /**
     * @param {?} url
     * @param {?=} options
     * @return {?}
     */
    get(url, options) {
        this.url = url;
        this.options = options;
        return this;
    }
    /**
     * @param {?} mapFn
     * @return {?}
     */
    map(mapFn) {
        this.mapFn = mapFn;
        return this;
    }
    /**
     * @param {?} resolve
     * @param {?=} reject
     * @return {?}
     */
    subscribe(resolve, reject) {
        return this.http
            .get(this.url, this.options)
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_14__["map"])(this.mapFn))
            .subscribe(resolve, reject);
    }
}
if (false) {}
class FieldInteractionApi {
    /**
     * @param {?} toaster
     * @param {?} modalService
     * @param {?} formUtils
     * @param {?} http
     * @param {?} labels
     */
    constructor(toaster, modalService, formUtils, http, labels) {
        this.toaster = toaster;
        this.modalService = modalService;
        this.formUtils = formUtils;
        this.http = http;
        this.labels = labels;
        this.getOptionsConfig = (/**
         * @param {?} args
         * @param {?=} mapper
         * @param {?=} filteredOptionsCreator
         * @param {?=} pickerConfigFormat
         * @return {?}
         */
        (args, mapper, filteredOptionsCreator, pickerConfigFormat) => {
            if (filteredOptionsCreator || 'optionsUrl' in args || 'optionsUrlBuilder' in args || 'optionsPromise' in args) {
                /** @type {?} */
                const format = ('format' in args && args.format) || pickerConfigFormat;
                return Object.assign({ options: this.createOptionsFunction(args, mapper, filteredOptionsCreator) }, ('emptyPickerMessage' in args && { emptyPickerMessage: args.emptyPickerMessage }), (format && { format }));
            }
            else if ('options' in args && Array.isArray(args.options)) {
                return {
                    options: [...args.options],
                };
            }
            else {
                return undefined;
            }
        });
        this.createOptionsFunction = (/**
         * @param {?} config
         * @param {?=} mapper
         * @param {?=} filteredOptionsCreator
         * @return {?}
         */
        (config, mapper, filteredOptionsCreator) => (/**
         * @param {?} query
         * @param {?=} page
         * @return {?}
         */
        (query, page) => {
            if ('optionsPromise' in config && config.optionsPromise) {
                return config.optionsPromise(query, new CustomHttpImpl(this.http), page);
            }
            else if (('optionsUrlBuilder' in config && config.optionsUrlBuilder) || ('optionsUrl' in config && config.optionsUrl)) {
                return new Promise((/**
                 * @param {?} resolve
                 * @param {?} reject
                 * @return {?}
                 */
                (resolve, reject) => {
                    /** @type {?} */
                    const url = 'optionsUrlBuilder' in config ? config.optionsUrlBuilder(query) : `${config.optionsUrl}?filter=${query || ''}`;
                    this.http
                        .get(url)
                        .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_14__["map"])((/**
                     * @param {?} results
                     * @return {?}
                     */
                    (results) => {
                        if (mapper) {
                            return results.map(mapper);
                        }
                        return results;
                    })))
                        .subscribe(resolve, reject);
                }));
            }
            else if (filteredOptionsCreator) {
                if ('where' in config) {
                    return filteredOptionsCreator(config.where)(query, page);
                }
                else {
                    return filteredOptionsCreator()(query, page);
                }
            }
        }));
    }
    /**
     * @return {?}
     */
    get associations() {
        return this.form.hasOwnProperty('associations') ? this.form.associations : {};
    }
    /**
     * @return {?}
     */
    get currentEntity() {
        return this.form.hasOwnProperty('currentEntity') ? this.form.currentEntity : undefined;
    }
    /**
     * @return {?}
     */
    get currentEntityId() {
        return this.form.hasOwnProperty('currentEntityId') ? this.form.currentEntityId : undefined;
    }
    /**
     * @return {?}
     */
    get isEdit() {
        return this.form.hasOwnProperty('edit') ? this.form.edit : false;
    }
    /**
     * @return {?}
     */
    get isAdd() {
        return this.form.hasOwnProperty('edit') ? !this.form.edit : false;
    }
    /**
     * @param {?} globals
     * @return {?}
     */
    set globals(globals) {
        this._globals = globals;
    }
    /**
     * @return {?}
     */
    get globals() {
        return this._globals;
    }
    /**
     * @param {?} key
     * @return {?}
     */
    set currentKey(key) {
        this._currentKey = key;
    }
    /**
     * @return {?}
     */
    get currentKey() {
        return this._currentKey;
    }
    /**
     * @return {?}
     */
    isActiveControlValid() {
        return !!this.getValue(this.currentKey);
    }
    /**
     * @return {?}
     */
    getActiveControl() {
        return this.getControl(this.currentKey);
    }
    /**
     * @return {?}
     */
    getActiveKey() {
        return this.currentKey;
    }
    /**
     * @return {?}
     */
    getActiveValue() {
        return this.getValue(this.currentKey);
    }
    /**
     * @return {?}
     */
    getActiveInitialValue() {
        return this.getInitialValue(this.currentKey);
    }
    /**
     * @param {?} key
     * @return {?}
     */
    getFieldSet(key) {
        if (!key) {
            console.error('[FieldInteractionAPI] - invalid or missing "key"'); // tslint:disable-line
            return null;
        }
        /** @type {?} */
        const fieldSet = this.form.fieldsets.find((/**
         * @param {?} fs
         * @return {?}
         */
        (fs) => fs.key && fs.key.toLowerCase() === key.toLowerCase()));
        if (!fieldSet) {
            console.error('[FieldInteractionAPI] - could not find a fieldset in the form by the key --', key); // tslint:disable-line
            return null;
        }
        return (/** @type {?} */ (fieldSet));
    }
    /**
     * @param {?} key
     * @return {?}
     */
    getControl(key) {
        if (!key) {
            console.error('[FieldInteractionAPI] - invalid or missing "key"'); // tslint:disable-line
            return null;
        }
        /** @type {?} */
        const control = (/** @type {?} */ (this.form.controls[key]));
        if (!control) {
            console.error('[FieldInteractionAPI] - could not find a control in the form by the key --', key); // tslint:disable-line
            return null;
        }
        return control;
    }
    /**
     * @param {?} key
     * @return {?}
     */
    getValue(key) {
        /** @type {?} */
        const control = this.getControl(key);
        if (control) {
            return control.value;
        }
        return null;
    }
    /**
     * @param {?} key
     * @return {?}
     */
    getRawValue(key) {
        /** @type {?} */
        const control = this.getControl(key);
        if (control) {
            return control.rawValue;
        }
        return null;
    }
    /**
     * @param {?} key
     * @return {?}
     */
    getInitialValue(key) {
        /** @type {?} */
        const control = this.getControl(key);
        if (control) {
            return control.initialValue;
        }
        return null;
    }
    /**
     * @param {?} key
     * @param {?} value
     * @param {?=} options
     * @return {?}
     */
    setValue(key, value, options) {
        /** @type {?} */
        const control = this.getControl(key);
        if (control && !control.restrictFieldInteractions) {
            control.setValue(value, options);
            this.triggerEvent({ controlKey: key, prop: 'value', value });
        }
    }
    /**
     * @param {?} key
     * @param {?} value
     * @param {?=} options
     * @return {?}
     */
    patchValue(key, value, options) {
        /** @type {?} */
        const control = this.getControl(key);
        if (control && !control.restrictFieldInteractions) {
            control.setValue(value, options);
            this.triggerEvent({ controlKey: key, prop: 'value', value });
        }
    }
    /**
     * @param {?} key
     * @param {?} isReadOnly
     * @return {?}
     */
    setReadOnly(key, isReadOnly) {
        /** @type {?} */
        const control = this.getControl(key);
        if (control && !control.restrictFieldInteractions) {
            control.setReadOnly(isReadOnly);
            this.triggerEvent({ controlKey: key, prop: 'readOnly', value: isReadOnly });
        }
    }
    /**
     * @param {?} key
     * @param {?} required
     * @return {?}
     */
    setRequired(key, required) {
        /** @type {?} */
        const control = this.getControl(key);
        if (control && !control.restrictFieldInteractions) {
            control.setRequired(required);
            this.triggerEvent({ controlKey: key, prop: 'required', value: required });
        }
    }
    /**
     * @param {?} key
     * @param {?=} clearValue
     * @return {?}
     */
    hide(key, clearValue = true) {
        /** @type {?} */
        const control = this.getControl(key);
        if (control && !control.restrictFieldInteractions) {
            control.hide(clearValue);
            this.disable(key, { emitEvent: false });
            this.triggerEvent({ controlKey: key, prop: 'hidden', value: true });
        }
        return control;
    }
    /**
     * @param {?} key
     * @return {?}
     */
    show(key) {
        /** @type {?} */
        const control = this.getControl(key);
        if (control && !control.restrictFieldInteractions) {
            control.show();
            this.enable(key, { emitEvent: false });
            this.triggerEvent({ controlKey: key, prop: 'hidden', value: false });
        }
    }
    /**
     * @param {?} key
     * @return {?}
     */
    hideFieldSetHeader(key) {
        /** @type {?} */
        const fieldSet = this.getFieldSet(key);
        if (fieldSet) {
            fieldSet.hidden = true;
        }
    }
    /**
     * @param {?} key
     * @return {?}
     */
    showFieldSetHeader(key) {
        /** @type {?} */
        const fieldSet = this.getFieldSet(key);
        if (fieldSet) {
            fieldSet.hidden = false;
        }
    }
    /**
     * @param {?} key
     * @param {?=} options
     * @return {?}
     */
    disable(key, options) {
        /** @type {?} */
        const control = this.getControl(key);
        if (control && !control.restrictFieldInteractions) {
            control.disable(options);
            this.triggerEvent({ controlKey: key, prop: 'readOnly', value: true });
        }
    }
    /**
     * @param {?} key
     * @param {?=} options
     * @return {?}
     */
    enable(key, options) {
        /** @type {?} */
        const control = this.getControl(key);
        if (control && !control.restrictFieldInteractions) {
            control.enable(options);
            this.triggerEvent({ controlKey: key, prop: 'readOnly', value: false });
        }
    }
    /**
     * @param {?} key
     * @param {?=} validationMessage
     * @return {?}
     */
    markAsInvalid(key, validationMessage) {
        /** @type {?} */
        const control = this.getControl(key);
        if (control) {
            if (control && !control.restrictFieldInteractions) {
                control.markAsInvalid(validationMessage);
            }
        }
    }
    /**
     * @param {?} key
     * @param {?=} options
     * @return {?}
     */
    markAsDirty(key, options) {
        /** @type {?} */
        const control = this.getControl(key);
        if (control && !control.restrictFieldInteractions) {
            control.markAsDirty(options);
        }
    }
    /**
     * @param {?} key
     * @param {?=} options
     * @return {?}
     */
    markAsPending(key, options) {
        /** @type {?} */
        const control = this.getControl(key);
        if (control && !control.restrictFieldInteractions) {
            control.markAsPending(options);
        }
    }
    /**
     * @param {?} key
     * @param {?=} options
     * @return {?}
     */
    markAsPristine(key, options) {
        /** @type {?} */
        const control = this.getControl(key);
        if (control && !control.restrictFieldInteractions) {
            control.markAsPristine(options);
        }
    }
    /**
     * @param {?} key
     * @param {?=} options
     * @return {?}
     */
    markAsTouched(key, options) {
        /** @type {?} */
        const control = this.getControl(key);
        if (control && !control.restrictFieldInteractions) {
            control.markAsTouched(options);
        }
    }
    /**
     * @param {?} key
     * @param {?=} options
     * @return {?}
     */
    markAsUntouched(key, options) {
        /** @type {?} */
        const control = this.getControl(key);
        if (control && !control.restrictFieldInteractions) {
            control.markAsUntouched(options);
        }
    }
    /**
     * @param {?} key
     * @param {?=} options
     * @return {?}
     */
    updateValueAndValidity(key, options) {
        /** @type {?} */
        const control = this.getControl(key);
        if (control && !control.restrictFieldInteractions) {
            control.updateValueAndValidity(options);
        }
    }
    /**
     * @param {?} toastConfig
     * @return {?}
     */
    displayToast(toastConfig) {
        if (this.toaster) {
            this.toaster.alert(toastConfig);
        }
    }
    /**
     * @param {?} key
     * @param {?} tip
     * @param {?=} icon
     * @param {?=} allowDismiss
     * @param {?=} sanitize
     * @return {?}
     */
    displayTip(key, tip, icon, allowDismiss, sanitize) {
        /** @type {?} */
        const control = this.getControl(key);
        if (control && !control.restrictFieldInteractions) {
            control.tipWell = {
                tip,
                icon,
                button: allowDismiss,
                sanitize: sanitize !== false,
            };
            this.triggerEvent({ controlKey: key, prop: 'tipWell', value: tip });
        }
    }
    /**
     * @param {?} key
     * @param {?} tooltip
     * @return {?}
     */
    setTooltip(key, tooltip) {
        /** @type {?} */
        const control = this.getControl(key);
        if (control && !control.restrictFieldInteractions) {
            control.tooltip = tooltip;
            if (tooltip.length >= 40 && tooltip.length <= 400) {
                control.tooltipSize = 'large';
                control.tooltipPreline = true;
            }
            else if (tooltip.length > 400) {
                control.tooltipSize = 'extra-large';
            }
            this.triggerEvent({ controlKey: key, prop: 'tooltip', value: tooltip });
        }
    }
    /**
     * @param {?} key
     * @param {?=} message
     * @return {?}
     */
    confirmChanges(key, message) {
        /** @type {?} */
        const history = this.getProperty(key, 'valueHistory');
        /** @type {?} */
        const oldValue = history[history.length - 2];
        /** @type {?} */
        const newValue = this.getValue(key);
        /** @type {?} */
        const label = this.getProperty(key, 'label');
        ((/** @type {?} */ (document.activeElement))).blur();
        return this.modalService.open(ControlConfirmModal, { oldValue, newValue, label, message, key }).onClosed.then((/**
         * @param {?} result
         * @return {?}
         */
        (result) => {
            if (!result) {
                this.setValue(key, oldValue, { emitEvent: false });
            }
        }));
    }
    /**
     * @param {?} key
     * @param {?} changes
     * @return {?}
     */
    promptUser(key, changes) {
        /** @type {?} */
        const showYes = true;
        ((/** @type {?} */ (document.activeElement))).blur();
        return this.modalService.open(ControlPromptModal, { changes, key }).onClosed;
    }
    /**
     * @param {?} key
     * @param {?} prop
     * @param {?} value
     * @return {?}
     */
    setProperty(key, prop, value) {
        /** @type {?} */
        const control = this.getControl(key);
        if (control && !control.restrictFieldInteractions) {
            control[prop] = value;
            this.triggerEvent({ controlKey: key, prop, value });
        }
    }
    /**
     * @param {?} key
     * @param {?} prop
     * @return {?}
     */
    getProperty(key, prop) {
        /** @type {?} */
        const control = this.getControl(key);
        if (control && !control.restrictFieldInteractions) {
            return control[prop];
        }
        return null;
    }
    /**
     * @param {?} key
     * @return {?}
     */
    isValueEmpty(key) {
        /** @type {?} */
        const value = this.getValue(key);
        return Helpers.isEmpty(value);
    }
    /**
     * @param {?} key
     * @return {?}
     */
    isValueBlank(key) {
        /** @type {?} */
        const value = this.getValue(key);
        return Helpers.isBlank(value);
    }
    /**
     * @param {?} key
     * @return {?}
     */
    hasField(key) {
        return !!this.form.controls[key];
    }
    /**
     * @param {?} key
     * @param {?} newOption
     * @return {?}
     */
    addStaticOption(key, newOption) {
        /** @type {?} */
        const control = this.getControl(key);
        /** @type {?} */
        let optionToAdd = newOption;
        /** @type {?} */
        let isUnique = true;
        if (control && !control.restrictFieldInteractions) {
            /** @type {?} */
            let currentOptions = this.getProperty(key, 'options');
            if (!currentOptions || !currentOptions.length) {
                /** @type {?} */
                const config = this.getProperty(key, 'config');
                if (config) {
                    currentOptions = config.options;
                    if (currentOptions && Array.isArray(currentOptions)) {
                        if (currentOptions[0].value && !optionToAdd.value) {
                            optionToAdd = { value: newOption, label: newOption };
                        }
                        config.options = [...currentOptions, optionToAdd];
                        this.setProperty(key, 'config', config);
                    }
                }
            }
            else {
                if (currentOptions[0].value && !optionToAdd.value) {
                    optionToAdd = { value: newOption, label: newOption };
                }
                // Ensure duplicate values are not added
                currentOptions.forEach((/**
                 * @param {?} option
                 * @return {?}
                 */
                (option) => {
                    if ((option.value && option.value === optionToAdd.value) || option === optionToAdd) {
                        isUnique = false;
                    }
                }));
                if (isUnique) {
                    this.setProperty(key, 'options', [...currentOptions, optionToAdd]);
                }
            }
            if (isUnique) {
                this.triggerEvent({ controlKey: key, prop: 'options', value: [...currentOptions, optionToAdd] });
            }
        }
    }
    /**
     * @param {?} key
     * @param {?} optionToRemove
     * @return {?}
     */
    removeStaticOption(key, optionToRemove) {
        /** @type {?} */
        const control = this.getControl(key);
        if (control && !control.restrictFieldInteractions) {
            /** @type {?} */
            let currentOptions = this.getProperty(key, 'options');
            if (!currentOptions || !currentOptions.length) {
                /** @type {?} */
                const config = this.getProperty(key, 'config');
                if (config) {
                    currentOptions = config.options;
                    if (currentOptions && Array.isArray(currentOptions)) {
                        /** @type {?} */
                        let index = -1;
                        currentOptions.forEach((/**
                         * @param {?} opt
                         * @param {?} i
                         * @return {?}
                         */
                        (opt, i) => {
                            if (opt.value || opt.label) {
                                if (opt.value === optionToRemove || opt.label === optionToRemove) {
                                    index = i;
                                }
                            }
                            else {
                                if (opt === optionToRemove) {
                                    index = i;
                                }
                            }
                        }));
                        if (index !== -1) {
                            currentOptions.splice(index, 1);
                        }
                        config.options = [...currentOptions];
                        this.setProperty(key, 'config', config);
                    }
                }
            }
            else {
                /** @type {?} */
                let index = -1;
                currentOptions.forEach((/**
                 * @param {?} opt
                 * @param {?} i
                 * @return {?}
                 */
                (opt, i) => {
                    if (opt.value || opt.label) {
                        if (opt.value === optionToRemove || opt.label === optionToRemove) {
                            index = i;
                        }
                    }
                    else {
                        if (opt === optionToRemove) {
                            index = i;
                        }
                    }
                }));
                if (index !== -1) {
                    currentOptions.splice(index, 1);
                }
                this.setProperty(key, 'options', [...currentOptions]);
            }
            this.triggerEvent({ controlKey: key, prop: 'options', value: control.options });
        }
    }
    /**
     * @param {?} key
     * @param {?} config
     * @param {?=} mapper
     * @return {?}
     */
    modifyPickerConfig(key, config, mapper) {
        // call another method to avoid a breaking change but still enable stricter types
        this.mutatePickerConfig(key, (/** @type {?} */ (config)), mapper);
    }
    /**
     * @param {?} key
     * @param {?} args
     * @param {?=} mapper
     * @return {?}
     */
    mutatePickerConfig(key, args, mapper) {
        /** @type {?} */
        const control = this.getControl(key);
        if (control && !control.restrictFieldInteractions) {
            const { minSearchLength, enableInfiniteScroll, filteredOptionsCreator, format, getLabels, emptyPickerMessage } = control.config;
            /** @type {?} */
            const optionsConfig = this.getOptionsConfig(args, mapper, filteredOptionsCreator, format);
            /** @type {?} */
            const newConfig = Object.assign({}, (emptyPickerMessage && { emptyPickerMessage }), (Number.isInteger(minSearchLength) && { minSearchLength }), (enableInfiniteScroll && { enableInfiniteScroll }), (filteredOptionsCreator && { filteredOptionsCreator }), (getLabels && { getLabels }), (optionsConfig && optionsConfig), { resultsTemplate: control.config.resultsTemplate || ('resultsTemplateType' in args && this.getAppropriateResultsTemplate(args.resultsTemplateType)) });
            this.setProperty(key, 'config', newConfig);
            this.triggerEvent({ controlKey: key, prop: 'pickerConfig', value: args });
        }
    }
    /**
     * @param {?} key
     * @param {?} properties
     * @return {?}
     */
    addPropertiesToPickerConfig(key, properties) {
        /** @type {?} */
        const control = this.getControl(key);
        if (!control || control.restrictFieldInteractions) {
            return;
        }
        /** @type {?} */
        const config = Object.assign({}, control.config, properties);
        this.setProperty(key, 'config', config);
        this.triggerEvent({ controlKey: key, prop: 'pickerConfig', value: properties });
    }
    /**
     * @private
     * @param {?} resultsTemplateType
     * @return {?}
     */
    getAppropriateResultsTemplate(resultsTemplateType) {
        switch (resultsTemplateType) {
            case 'entity-picker':
                return EntityPickerResults;
            default:
                return undefined;
        }
    }
    /**
     * @param {?} key
     * @param {?} loading
     * @return {?}
     */
    setLoading(key, loading) {
        /** @type {?} */
        const control = this.getControl(key);
        if (control && !control.restrictFieldInteractions) {
            if (loading) {
                this.form.controls[key].fieldInteractionloading = true;
                control.setErrors({ loading: true });
                // History
                clearTimeout(this.asyncBlockTimeout);
                this.asyncBlockTimeout = setTimeout((/**
                 * @return {?}
                 */
                () => {
                    this.setLoading(key, false);
                    this.displayTip(key, this.labels.asyncFailure, 'info', false);
                    this.setProperty(key, '_displayedAsyncFailure', true);
                }), 10000);
            }
            else {
                this.form.controls[key].fieldInteractionloading = false;
                clearTimeout(this.asyncBlockTimeout);
                control.setErrors({ loading: null });
                control.updateValueAndValidity({ emitEvent: false });
                if (this.getProperty(key, '_displayedAsyncFailure')) {
                    this.setProperty(key, 'tipWell', null);
                }
            }
            this.triggerEvent({ controlKey: key, prop: 'loading', value: loading });
        }
    }
    /**
     * @param {?} key
     * @param {?} metaForNewField
     * @param {?=} position
     * @param {?=} initialValue
     * @return {?}
     */
    addControl(key, metaForNewField, position = FieldInteractionApi.FIELD_POSITIONS.ABOVE_FIELD, initialValue) {
        if (!metaForNewField.key && !metaForNewField.name) {
            console.error('[FieldInteractionAPI] - missing "key" in meta for new field'); // tslint:disable-line
            return null;
        }
        if (!metaForNewField.key) {
            // If key is not explicitly declared, use name as key
            metaForNewField.key = metaForNewField.name;
        }
        if (this.form.controls[metaForNewField.key]) {
            // Field is already on the form
            return null;
        }
        /** @type {?} */
        const control = this.form.controls[key];
        /** @type {?} */
        let fieldsetIndex;
        /** @type {?} */
        let controlIndex;
        if (control) {
            fieldsetIndex = -1;
            controlIndex = -1;
            this.form.fieldsets.forEach((/**
             * @param {?} fieldset
             * @param {?} fi
             * @return {?}
             */
            (fieldset, fi) => {
                fieldset.controls.forEach((/**
                 * @param {?} fieldsetControl
                 * @param {?} ci
                 * @return {?}
                 */
                (fieldsetControl, ci) => {
                    if (fieldsetControl.key === key) {
                        fieldsetIndex = fi;
                        controlIndex = ci;
                    }
                }));
            }));
            // Change the position of the newly added field
            switch (position) {
                case FieldInteractionApi.FIELD_POSITIONS.ABOVE_FIELD:
                    // Adding field above active field
                    // index can stay the same
                    break;
                case FieldInteractionApi.FIELD_POSITIONS.BELOW_FIELD:
                    // Adding field below active field
                    controlIndex += 1;
                    break;
                case FieldInteractionApi.FIELD_POSITIONS.TOP_OF_FORM:
                    // Adding field to the top of the form
                    controlIndex = 0;
                    fieldsetIndex = 0;
                    break;
                case FieldInteractionApi.FIELD_POSITIONS.BOTTOM_OF_FORM:
                    // Adding field to the bottom of the form
                    fieldsetIndex = this.form.fieldsets.length - 1;
                    controlIndex = this.form.fieldsets[fieldsetIndex].controls.length;
                    break;
                default:
                    break;
            }
            if (fieldsetIndex !== -1 && controlIndex !== -1) {
                /** @type {?} */
                const novoControl = this.formUtils.getControlForField(metaForNewField, this.http, {});
                novoControl.hidden = false;
                /** @type {?} */
                const formControl = new NovoFormControl(initialValue, novoControl);
                this.form.addControl(novoControl.key, formControl);
                this.form.fieldsets[fieldsetIndex].controls.splice(controlIndex, 0, novoControl);
                this.triggerEvent({ controlKey: key, prop: 'addControl', value: formControl });
            }
        }
    }
    /**
     * @param {?} key
     * @return {?}
     */
    removeControl(key) {
        if (!this.form.controls[key]) {
            // Field is not on the form
            return null;
        }
        /** @type {?} */
        const control = this.getControl(key);
        if (control && !control.restrictFieldInteractions) {
            /** @type {?} */
            let fieldsetIndex = -1;
            /** @type {?} */
            let controlIndex = -1;
            this.form.fieldsets.forEach((/**
             * @param {?} fieldset
             * @param {?} fi
             * @return {?}
             */
            (fieldset, fi) => {
                fieldset.controls.forEach((/**
                 * @param {?} fieldsetControl
                 * @param {?} ci
                 * @return {?}
                 */
                (fieldsetControl, ci) => {
                    if (fieldsetControl.key === key) {
                        fieldsetIndex = fi;
                        controlIndex = ci;
                    }
                }));
            }));
            if (fieldsetIndex !== -1 && controlIndex !== -1) {
                this.form.removeControl(key);
                this.form.fieldsets[fieldsetIndex].controls.splice(controlIndex, 1);
                this.triggerEvent({ controlKey: key, prop: 'removeControl', value: key });
            }
        }
    }
    /**
     * @param {?} func
     * @param {?=} wait
     * @return {?}
     */
    debounce(func, wait = 50) {
        /** @type {?} */
        let h;
        clearTimeout(h);
        h = setTimeout((/**
         * @return {?}
         */
        () => func()), wait);
    }
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    triggerEvent(event) {
        if (this.form && this.form.fieldInteractionEvents) {
            this.form.fieldInteractionEvents.emit(event);
        }
    }
}
FieldInteractionApi.FIELD_POSITIONS = {
    ABOVE_FIELD: 'ABOVE_FIELD',
    BELOW_FIELD: 'BELOW_FIELD',
    TOP_OF_FORM: 'TOP_OF_FORM',
    BOTTOM_OF_FORM: 'BOTTOM_OF_FORM',
};
FieldInteractionApi.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"] }
];
/** @nocollapse */
FieldInteractionApi.ctorParameters = () => [
    { type: NovoToastService },
    { type: NovoModalService },
    { type: FormUtils },
    { type: _angular_common_http__WEBPACK_IMPORTED_MODULE_24__["HttpClient"] },
    { type: NovoLabelService }
];
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: services/template/NovoTemplateService.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NovoTemplateService {
    constructor() {
        this.templates = {
            default: {},
            custom: {},
        };
    }
    /**
     * @return {?}
     */
    getAll() {
        /** @type {?} */
        const templates = {};
        /** @type {?} */
        const customTemplateTypes = Object.keys(this.templates.custom);
        /** @type {?} */
        const defaultTemplateTypes = Object.keys(this.templates.default);
        defaultTemplateTypes.forEach((/**
         * @param {?} type
         * @return {?}
         */
        (type) => {
            templates[type] = this.templates.default[type];
        }));
        customTemplateTypes.forEach((/**
         * @param {?} type
         * @return {?}
         */
        (type) => {
            templates[type] = this.templates.custom[type];
        }));
        return templates;
    }
    /**
     * @param {?} key
     * @param {?} template
     * @return {?}
     */
    addDefault(key, template) {
        this.templates.default[key] = template;
    }
    /**
     * @param {?} key
     * @param {?} template
     * @return {?}
     */
    addCustom(key, template) {
        this.templates.custom[key] = template;
    }
}
NovoTemplateService.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"] }
];
/** @nocollapse */
NovoTemplateService.ctorParameters = () => [];
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: elements/form/Control.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @record
 */
function IMaskOptions() { }
if (false) {}
class NovoAutoSize {
    /**
     * @param {?} element
     */
    constructor(element) {
        this.element = element;
    }
    /**
     * @param {?} textArea
     * @return {?}
     */
    onInput(textArea) {
        this.adjust();
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        setTimeout((/**
         * @return {?}
         */
        () => {
            this.adjust();
        }));
    }
    /**
     * @return {?}
     */
    adjust() {
        /** @type {?} */
        const nativeElement = this.element.nativeElement;
        nativeElement.style.height = nativeElement.style.minHeight;
        nativeElement.style.height = `${nativeElement.scrollHeight}px`;
    }
}
NovoAutoSize.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{
                selector: 'textarea[autosize]',
            },] }
];
/** @nocollapse */
NovoAutoSize.ctorParameters = () => [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"] }
];
NovoAutoSize.propDecorators = {
    onInput: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostListener"], args: ['input', ['$event.target'],] }]
};
if (false) {}
// undo all template context references!
class NovoControlElement extends OutsideClick {
    /**
     * @param {?} element
     * @param {?} labels
     * @param {?} dateFormatService
     * @param {?} fieldInteractionApi
     * @param {?} templateService
     * @param {?} changeDetectorRef
     * @param {?=} locale
     */
    constructor(element, labels, dateFormatService, fieldInteractionApi, templateService, changeDetectorRef, locale = 'en-US') {
        super(element);
        this.labels = labels;
        this.dateFormatService = dateFormatService;
        this.fieldInteractionApi = fieldInteractionApi;
        this.templateService = templateService;
        this.changeDetectorRef = changeDetectorRef;
        this.locale = locale;
        this.condensed = false;
        this.autoFocus = false;
        this.change = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.edit = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.save = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.delete = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.upload = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.formattedValue = '';
        this.maxLengthMet = false;
        this.itemCount = 0;
        this._blurEmitter = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this._focusEmitter = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this._focused = false;
        this._enteredText = '';
        this._showCount = false;
        this.maxLengthMetErrorfields = [];
        this.templates = {};
        this.loading = false;
    }
    /**
     * @return {?}
     */
    get onBlur() {
        return this._blurEmitter.asObservable();
    }
    /**
     * @return {?}
     */
    get onFocus() {
        return this._focusEmitter.asObservable();
    }
    /**
     * @return {?}
     */
    get maxlengthMetField() {
        if (this.maxLengthMetErrorfields && this.maxLengthMetErrorfields.length) {
            return this.maxLengthMetErrorfields.find((/**
             * @param {?} field
             * @return {?}
             */
            (field) => field === this.focusedField)) || '';
        }
        else {
            return '';
        }
    }
    /**
     * @return {?}
     */
    get maxlengthErrorField() {
        if (this.errors && this.errors.maxlengthFields && this.errors.maxlengthFields.length) {
            return this.errors.maxlengthFields.find((/**
             * @param {?} field
             * @return {?}
             */
            (field) => field === this.focusedField)) || '';
        }
        else {
            return '';
        }
    }
    /**
     * @return {?}
     */
    get showFieldMessage() {
        return !this.errors && !this.maxLengthMet && Helpers.isBlank(this.control.description);
    }
    /**
     * @return {?}
     */
    get showMaxLengthMetMessage() {
        return ((this.isDirty && this.maxLengthMet && this.focused && (!this.errors || (this.errors && !this.errors.maxlength))) ||
            (this.isDirty &&
                this.maxlengthMetField &&
                this.focused &&
                (!this.errors || (this.errors && !this.errors.maxlengthFields.includes(this.maxlengthMetField)))));
    }
    /**
     * @return {?}
     */
    get showErrorState() {
        return ((this.isDirty && this.errors) ||
            (this.focused && this.errors && this.errors.maxlength && this.errors.maxlengthFields) ||
            (this.focused && this.errors && this.errors.maxlength && this.errors.maxlengthFields && this.maxlengthErrorField));
    }
    /**
     * @return {?}
     */
    get showCount() {
        /** @type {?} */
        const MAX_LENGTH_CONTROL_TYPES = ['textbox', 'picker', 'text-area'];
        /** @type {?} */
        const charCount = this.focused &&
            !!this.form.controls[this.control.key].maxlength &&
            MAX_LENGTH_CONTROL_TYPES.includes(this.form.controls[this.control.key].controlType);
        return this._showCount || charCount;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set showCount(value) {
        this._showCount = value;
    }
    /**
     * @return {?}
     */
    get showMessages() {
        return (this.showCount ||
            !Helpers.isEmpty(this.form.controls[this.control.key].warning) ||
            !Helpers.isEmpty(this.form.controls[this.control.key].description));
    }
    /**
     * @return {?}
     */
    get decimalSeparator() {
        return new Intl.NumberFormat(this.locale).format(1.2)[1];
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        /** @type {?} */
        const DO_NOT_FOCUS_ME = ['picker', 'time', 'date', 'date-time'];
        if (this.autoFocus && !DO_NOT_FOCUS_ME.includes(this.control.controlType)) {
            setTimeout((/**
             * @return {?}
             */
            () => {
                /** @type {?} */
                const input = this.element.nativeElement.querySelector('input');
                if (input) {
                    input.focus();
                }
            }));
        }
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        // Subscribe to control interactions
        if (this.control.interactions && !this.form.controls[this.control.key].restrictFieldInteractions) {
            for (const interaction of this.control.interactions) {
                switch (interaction.event) {
                    case 'blur':
                        this.valueChangeSubscription = this.onBlur.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_14__["debounceTime"])(300)).subscribe((/**
                         * @return {?}
                         */
                        () => {
                            if (!this.form.controls[this.control.key].restrictFieldInteractions) {
                                this.executeInteraction(interaction);
                            }
                        }));
                        break;
                    case 'focus':
                        this.valueChangeSubscription = this.onFocus.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_14__["debounceTime"])(300)).subscribe((/**
                         * @return {?}
                         */
                        () => {
                            if (!this.form.controls[this.control.key].restrictFieldInteractions) {
                                this.executeInteraction(interaction);
                            }
                        }));
                        break;
                    case 'change':
                        this.valueChangeSubscription = this.form.controls[this.control.key].valueChanges.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_14__["debounceTime"])(300)).subscribe((/**
                         * @return {?}
                         */
                        () => {
                            if (!this.form.controls[this.control.key].restrictFieldInteractions) {
                                this.executeInteraction(interaction);
                            }
                        }));
                        break;
                    case 'init':
                        interaction.invokeOnInit = true;
                        break;
                    default:
                        break;
                }
                if (interaction.invokeOnInit) {
                    if (!this.form.controls[this.control.key].restrictFieldInteractions) {
                        this.executeInteraction(interaction);
                    }
                }
            }
        }
        setTimeout((/**
         * @return {?}
         */
        () => {
            this.templates = this.templateService.getAll();
            this.loading = false;
            this.changeDetectorRef.markForCheck();
        }));
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.loading = true;
        // Make sure to initially format the time controls
        if (this.control && this.form.controls[this.control.key].value) {
            if (this.form.controls[this.control.key].controlType === 'textbox' ||
                this.form.controls[this.control.key].controlType === 'text-area') {
                this.itemCount = this.form.controls[this.control.key].value.length;
            }
        }
        if (this.control) {
            // Listen to clear events
            this.forceClearSubscription = this.control.forceClear.subscribe((/**
             * @return {?}
             */
            () => {
                this.clearValue();
            }));
            // For Asynchronous validations
            this.statusChangeSubscription = this.form.controls[this.control.key].statusChanges.subscribe((/**
             * @param {?} validity
             * @return {?}
             */
            (validity) => {
                this.form.controls[this.control.key] = this.templateContext.$implicit;
                if (validity !== 'PENDING' && this.form.updateValueAndValidity) {
                    this.form.updateValueAndValidity();
                }
            }));
        }
        this.templateContext = {
            $implicit: this.form.controls[this.control.key],
            methods: {
                restrictKeys: this.restrictKeys.bind(this),
                emitChange: this.emitChange.bind(this),
                handleFocus: this.handleFocus.bind(this),
                handlePercentChange: this.handlePercentChange.bind(this),
                handleBlur: this.handleBlur.bind(this),
                handleTextAreaInput: this.handleTextAreaInput.bind(this),
                handleEdit: this.handleEdit.bind(this),
                handleSave: this.handleSave.bind(this),
                handleDelete: this.handleDelete.bind(this),
                handleUpload: this.handleUpload.bind(this),
                modelChange: this.modelChange.bind(this),
                modelChangeWithRaw: this.modelChangeWithRaw.bind(this),
                handleAddressChange: this.handleAddressChange.bind(this),
                handleTyping: this.handleTyping.bind(this),
                updateValidity: this.updateValidity.bind(this),
                toggleActive: this.toggleActive.bind(this),
                validateIntegerInput: this.validateIntegerInput.bind(this),
                validateNumberOnBlur: this.validateNumberOnBlur.bind(this),
            },
            form: this.form,
        };
        this.templateContext.$implicit.tooltipPosition = this.tooltipPosition;
        this.templateContext.$implicit.tooltip = this.tooltip;
        this.templateContext.$implicit.tooltipSize = this.tooltipSize;
        this.templateContext.$implicit.tooltipPreline = this.tooltipPreline;
        this.templateContext.$implicit.removeTooltipArrow = this.removeTooltipArrow;
        this.templateContext.$implicit.startupFocus = this.form.controls[this.control.key].startupFocus;
        this.templateContext.$implicit.fileBrowserImageUploadUrl = this.form.controls[this.control.key].fileBrowserImageUploadUrl;
        this.templateContext.$implicit.minimal = this.form.controls[this.control.key].minimal;
        this.templateContext.$implicit.currencyFormat = this.form.controls[this.control.key].currencyFormat;
        this.templateContext.$implicit.percentValue = this.form.controls[this.control.key].percentValue;
        this.templateContext.$implicit.config = this.form.controls[this.control.key].config;
        if (this.form.controls[this.control.key] && this.form.controls[this.control.key].subType === 'percentage') {
            if (!Helpers.isEmpty(this.form.controls[this.control.key].value)) {
                this.templateContext.$implicit.percentValue = Number((this.form.controls[this.control.key].value * 100).toFixed(6).replace(/\.?0*$/, ''));
            }
            this.percentChangeSubscription = this.form.controls[this.control.key].displayValueChanges.subscribe((/**
             * @param {?} value
             * @return {?}
             */
            (value) => {
                if (!Helpers.isEmpty(value)) {
                    this.templateContext.$implicit.percentValue = Number((value * 100).toFixed(6).replace(/\.?0*$/, ''));
                }
            }));
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        // Unsubscribe from control interactions
        if (this.valueChangeSubscription) {
            this.valueChangeSubscription.unsubscribe();
        }
        // if (this.dateChangeSubscription) {
        //     this.dateChangeSubscription.unsubscribe();
        // }
        if (this.forceClearSubscription) {
            // Un-listen for clear events
            this.forceClearSubscription.unsubscribe();
        }
        if (this.percentChangeSubscription) {
            // Un-listen for clear events
            this.percentChangeSubscription.unsubscribe();
        }
        if (this.dateChangeSubscription) {
            this.dateChangeSubscription.unsubscribe();
        }
        if (this.statusChangeSubscription) {
            this.statusChangeSubscription.unsubscribe();
        }
        super.ngOnDestroy();
    }
    /**
     * @return {?}
     */
    get errors() {
        return this.form.controls[this.control.key].errors;
    }
    /**
     * @return {?}
     */
    get isValid() {
        return this.form.controls[this.control.key].valid;
    }
    /**
     * @return {?}
     */
    get isDirty() {
        return this.form.controls[this.control.key].dirty || this.control.dirty;
    }
    /**
     * @return {?}
     */
    get hasValue() {
        return !Helpers.isEmpty(this.form.value[this.control.key]);
    }
    /**
     * @return {?}
     */
    get focused() {
        return this._focused;
    }
    /**
     * @return {?}
     */
    get tooltip() {
        return this.form.controls[this.control.key].tooltip;
    }
    /**
     * @return {?}
     */
    get tooltipPosition() {
        if (Helpers.isBlank(this.form.controls[this.control.key].tooltipPosition)) {
            return 'right';
        }
        return this.form.controls[this.control.key].tooltipPosition;
    }
    /**
     * @return {?}
     */
    get tooltipSize() {
        if (Helpers.isBlank(this.form.controls[this.control.key].tooltipSize)) {
            return '';
        }
        return this.form.controls[this.control.key].tooltipSize;
    }
    /**
     * @return {?}
     */
    get tooltipPreline() {
        if (Helpers.isBlank(this.form.controls[this.control.key].tooltipPreline)) {
            return false;
        }
        return this.form.controls[this.control.key].tooltipPreline;
    }
    /**
     * @return {?}
     */
    get removeTooltipArrow() {
        if (Helpers.isBlank(this.form.controls[this.control.key].removeTooltipArrow)) {
            return false;
        }
        return this.form.controls[this.control.key].removeTooltipArrow;
    }
    /**
     * @return {?}
     */
    get alwaysActive() {
        // Controls that have the label active if there is any user entered text in the field
        if (this.form.controls[this.control.key].controlType === 'picker' && this._enteredText.length) {
            return true;
        }
        // Controls that always have the label active
        return ([
            'tiles',
            'checklist',
            'checkbox',
            'date',
            'time',
            'date-time',
            'address',
            'file',
            'editor',
            'ace-editor',
            'radio',
            'text-area',
            'quick-note',
        ].indexOf(this.form.controls[this.control.key].controlType) !== -1);
    }
    /**
     * @return {?}
     */
    get requiresExtraSpacing() {
        // Chips
        if (this.form.controls[this.control.key].controlType === 'picker' && this.form.controls[this.control.key].multiple && this.hasValue) {
            return true;
        }
        return false;
    }
    /**
     * @param {?} interaction
     * @return {?}
     */
    executeInteraction(interaction) {
        if (interaction.script && Helpers.isFunction(interaction.script)) {
            setTimeout((/**
             * @return {?}
             */
            () => {
                this.fieldInteractionApi.form = this.form;
                this.fieldInteractionApi.currentKey = this.control.key;
                try {
                    interaction.script(this.fieldInteractionApi, this.control.key);
                }
                catch (err) {
                    console.info('Field Interaction Error!', this.control.key); // tslint:disable-line
                    console.error(err); // tslint:disable-line
                }
            }));
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    handleTyping(event) {
        this._focused = event && event.length;
        this._enteredText = event;
    }
    /**
     * @param {?} event
     * @param {?=} field
     * @return {?}
     */
    handleFocus(event, field) {
        this._focused = true;
        this.focusedField = field;
        if (!Helpers.isBlank(this.characterCountField) && this.characterCountField === field) {
            this.showCount = true;
        }
        else if (this.form.controls[this.control.key].controlType === 'address' &&
            field &&
            !Helpers.isEmpty(this.form.value[this.control.key]) &&
            !Helpers.isBlank(this.form.value[this.control.key][field])) {
            this.handleAddressChange({ value: this.form.value[this.control.key][field], field });
        }
        this._focusEmitter.emit(event);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    handleBlur(event) {
        this._focused = false;
        this.focusedField = '';
        this.showCount = false;
        this._blurEmitter.emit(event);
    }
    /**
     * @return {?}
     */
    clearValue() {
        this.form.controls[this.control.key].setValue(null);
        this.formattedValue = null;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    handleTextAreaInput(event) {
        this.emitChange(event);
        this.restrictKeys(event);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    checkMaxLength(event) {
        if (this.control && this.form.controls[this.control.key].maxlength) {
            this.itemCount = event.target.value.length;
            this.maxLengthMet = event.target.value.length >= this.form.controls[this.control.key].maxlength;
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    modelChangeWithRaw(event) {
        if (Helpers.isEmpty(event.value)) {
            this._focused = false;
            this._enteredText = '';
        }
        if (this.form.controls[this.control.key].controlType === 'picker' && this.form.controls[this.control.key].maxlength) {
            this.itemCount = event.value ? event.value.length : 0;
            this.maxLengthMet = this.itemCount >= this.form.controls[this.control.key].maxlength ? true : false;
        }
        this.form.controls[this.control.key].rawValue = event.rawValue;
        this.change.emit(event.value);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    modelChange(value) {
        if (Helpers.isEmpty(value)) {
            this._focused = false;
            this._enteredText = '';
        }
        this.change.emit(value);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    validateNumberOnBlur(event) {
        this._focused = false;
        this.focusedField = '';
        this.showCount = false;
        if (this.form.controls[this.control.key].subType === 'number') {
            this.validateIntegerInput();
        }
        this._blurEmitter.emit(event);
    }
    /**
     * @return {?}
     */
    validateIntegerInput() {
        /** @type {?} */
        const NUMBERS_ONLY = /^[\d\-]\d*$/;
        if (this.form.controls[this.control.key].value && !NUMBERS_ONLY.test(this.form.controls[this.control.key].value)) {
            this.form.controls[this.control.key].markAsInvalid(`${this.labels.invalidIntegerInput} ${this.form.controls[this.control.key].label.toUpperCase()}`);
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    restrictKeys(event) {
        /** @type {?} */
        const NUMBERS_ONLY = /[0-9\-]/;
        /** @type {?} */
        const NUMBERS_WITH_DECIMAL_DOT = /[0-9\.\-]/;
        /** @type {?} */
        const NUMBERS_WITH_DECIMAL_DOT_AND_COMMA = /[0-9\.\,\-]/;
        /** @type {?} */
        const UTILITY_KEYS = ['Backspace', 'Delete', 'ArrowLeft', 'ArrowRight', 'Tab'];
        /** @type {?} */
        const key = event.key;
        // Numbers or numbers and decimal characters only
        if (this.form.controls[this.control.key].subType === 'number' && !(NUMBERS_ONLY.test(key) || UTILITY_KEYS.includes(key))) {
            event.preventDefault();
        }
        else if (['currency', 'float', 'percentage'].includes(this.form.controls[this.control.key].subType) &&
            !((this.decimalSeparator === '.' && NUMBERS_WITH_DECIMAL_DOT.test(key)) ||
                (this.decimalSeparator === ',' && NUMBERS_WITH_DECIMAL_DOT_AND_COMMA.test(key)) ||
                UTILITY_KEYS.includes(key))) {
            event.preventDefault();
        }
        // Max Length
        if (this.form.controls[this.control.key].maxlength && event.target.value.length >= this.form.controls[this.control.key].maxlength) {
            event.preventDefault();
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    handlePercentChange(event) {
        /** @type {?} */
        const value = event.target['value'];
        /** @type {?} */
        const percent = Helpers.isEmpty(value) ? null : Number((value / 100).toFixed(6).replace(/\.?0*$/, ''));
        if (!Helpers.isEmpty(percent)) {
            this.change.emit(percent);
            this.form.controls[this.control.key].setValue(percent);
        }
        else {
            this.change.emit(null);
            this.form.controls[this.control.key].setValue(null);
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    handleTabForPickers(event) {
        if (this.active && event && event.keyCode) {
            if (event.keyCode === KeyCodes.ESC || event.keyCode === KeyCodes.TAB) {
                this.toggleActive(event, false);
            }
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    emitChange(value) {
        this.change.emit(value);
        this.checkMaxLength(value);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    handleEdit(value) {
        this.edit.emit(value);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    handleSave(value) {
        this.save.emit(value);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    handleDelete(value) {
        this.delete.emit(value);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    handleUpload(value) {
        this.upload.emit(value);
    }
    /**
     * @param {?} data
     * @return {?}
     */
    handleAddressChange(data) {
        if (data &&
            !Helpers.isBlank(data.value) &&
            data.field &&
            this.control.config[data.field] &&
            !Helpers.isEmpty(this.control.config[data.field].maxlength)) {
            this.itemCount = data.value.length;
            this.characterCountField = data.field;
            this.maxLength = this.control.config[data.field].maxlength;
            this.showCount = true;
            if (this.maxLength === this.itemCount) {
                this.maxLengthMetErrorfields.push(data.field);
            }
            else {
                this.maxLengthMetErrorfields = this.maxLengthMetErrorfields.filter((/**
                 * @param {?} field
                 * @return {?}
                 */
                (field) => field !== data.field));
            }
        }
    }
    /**
     * @param {?} shouldEventBeEmitted
     * @return {?}
     */
    updateValidity(shouldEventBeEmitted) {
        /** @type {?} */
        const emitEvent = shouldEventBeEmitted ? true : false;
        this.form.controls[this.control.key].updateValueAndValidity({ emitEvent });
    }
}
NovoControlElement.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'novo-control',
                template: `
        <div class="novo-control-container" [hidden]="form.controls[control.key].hidden || form.controls[control.key].type === 'hidden' || form.controls[control.key].controlType === 'hidden'">
            <!--Encrypted Field-->
            <span [tooltip]="labels.encryptedFieldTooltip" [tooltipPosition]="'right'"><i [hidden]="!form.controls[control.key].encrypted"
            class="bhi-lock"></i></span>
            <!--Label (for horizontal)-->
            <label [attr.for]="control.key" *ngIf="form.layout !== 'vertical' && form.controls[control.key].label && !condensed" [ngClass]="{'encrypted': form.controls[control.key].encrypted }">
                {{ form.controls[control.key].label }}
            </label>
            <div class="novo-control-outer-container">
                <!--Label (for vertical)-->
                <label
                    *ngIf="form.layout === 'vertical' && form.controls[control.key].label && !condensed"
                    class="novo-control-label"
                    [attr.for]="control.key"
                    [class.novo-control-empty]="!hasValue"
                    [class.novo-control-focused]="focused"
                    [class.novo-control-filled]="hasValue"
                    [class.novo-control-always-active]="alwaysActive || form.controls[control.key].placeholder"
                    [class.novo-control-extra-spacing]="requiresExtraSpacing">
                    {{ form.controls[control.key].label }}
                </label>
                <div class="novo-control-inner-container" [class.required]="form.controls[control.key].required && !form.controls[control.key].readOnly">
                    <div class="novo-control-inner-input-container" [class.novo-control-filled]="hasValue" [class.novo-control-empty]="!hasValue">
                      <!--Required Indicator-->
                        <i [hidden]="!form.controls[control.key].required || form.controls[control.key].readOnly"
                            class="required-indicator {{ form.controls[control.key].controlType }}"
                            [ngClass]="{'bhi-circle': !isValid, 'bhi-check': isValid}" *ngIf="!condensed || form.controls[control.key].required">
                        </i>
                        <!--Form Controls-->
                        <div class="novo-control-input {{ form.controls[control.key].controlType }}" [attr.data-automation-id]="control.key" [class.control-disabled]="form.controls[control.key].disabled">
                            <!--TODO prefix/suffix on the control-->
                            <ng-container *ngIf="templates">
                              <ng-container *ngTemplateOutlet="templates[form.controls[control.key].controlType]; context: templateContext"></ng-container>
                            </ng-container>
                            <ng-container *ngIf="!templates || loading">
                                <div class="novo-control-input-container novo-control-input-with-label">
                                  <input type="text"/>
                                </div>
                            </ng-container>
                        </div>
                    </div>
                    <!--Error Message-->
                    <div class="field-message {{ form.controls[control.key].controlType }}" *ngIf="!condensed" [class.has-tip]="form.controls[control.key].tipWell" [ngClass]="showErrorState || showMaxLengthMetMessage ? 'error-shown' : 'error-hidden'">
                        <div class="messages" [ngClass]="showMessages ? 'count-shown messages-shown' : 'count-hidden messages-hidden'">
                            <span class="error-text" *ngIf="showFieldMessage"></span>
                            <span class="error-text" *ngIf="isDirty && errors?.required && form.controls[control.key].controlType !== 'address'">{{ form.controls[control.key].label | uppercase }} {{ labels.isRequired }}</span>
                            <span class="error-text" *ngIf="isDirty && errors?.minlength">{{ form.controls[control.key].label | uppercase }} {{ labels.minLength }} {{ form.controls[control.key].minlength }}</span>
                            <span class="error-text" *ngIf="isDirty && maxLengthMet && focused && !errors?.maxlength && form.controls[control.key].controlType !== 'picker'">{{ labels.maxlengthMet(form.controls[control.key].maxlength) }}</span>
                            <span class="error-text" *ngIf="errors?.maxlength && focused && !errors?.maxlengthFields">{{ labels.invalidMaxlength(form.controls[control.key].maxlength) }}</span>
                            <span class="error-text" *ngIf="maxLengthMet && form.controls[control.key].controlType === 'picker'">{{ labels.maxRecordsReached }}</span>
                            <span class="error-text" *ngIf="isDirty && errors?.invalidEmail">{{ form.controls[control.key].label | uppercase }} {{ labels.invalidEmail }}</span>
                            <span class="error-text" *ngIf="isDirty && (errors?.integerTooLarge || errors?.doubleTooLarge)">{{ form.controls[control.key].label | uppercase }} {{ labels.isTooLarge }}</span>
                            <span *ngIf="isDirty && errors?.minYear">{{ form.controls[control.key].label | uppercase }} {{ labels.notValidYear }}</span>
                            <span class="error-text" *ngIf="isDirty && (errors?.custom)">{{ errors.custom }}</span>
                            <span class="error-text" *ngIf="errors?.maxlength && errors?.maxlengthFields && maxlengthErrorField && focused">
                                {{ labels.invalidMaxlengthWithField(control.config[maxlengthErrorField]?.label, control.config[maxlengthErrorField]?.maxlength) }}
                            </span>
                            <span class="error-text" *ngIf="isDirty && maxlengthMetField && focused && !errors?.maxlengthFields?.includes(maxlengthMetField)">
                              {{ labels.maxlengthMetWithField(control.config[maxlengthMetField]?.label, control.config[maxlengthMetField]?.maxlength) }}
                            </span>
                            <span *ngIf="isDirty && errors?.invalidAddress">
                                <span class="error-text" *ngFor="let invalidAddressField of errors?.invalidAddressFields">{{ invalidAddressField | uppercase }} {{ labels.isRequired }} </span>
                            </span>
                            <!--Field Hint-->
                            <span class="description" *ngIf="form.controls[control.key].description">
                                {{ form.controls[control.key].description }}
                            </span>
                            <span class="warning-text" *ngIf="form.controls[control.key].warning">{{ form.controls[control.key].warning }}</span>

                        </div>
                        <span class="character-count" [class.error]="((errors?.maxlength && !errors?.maxlengthFields) || (errors?.maxlength && errors?.maxlengthFields && errors.maxlengthFields.includes(focusedField)))" *ngIf="showCount && form.controls[control.key].controlType !== 'picker'">{{ itemCount }}/{{ maxLength || form.controls[control.key].maxlength }}</span>
                        <span class="record-count" [class.zero-count]="itemCount === 0" [class.row-picker]="form.controls[this.control.key].config.columns" *ngIf="showCount && form.controls[control.key].controlType === 'picker'">{{ itemCount }}/{{ maxLength || form.controls[control.key].maxlength }}</span>
                    </div>
                    <!--Tip Wel-->
                    <novo-tip-well *ngIf="form.controls[control.key].tipWell" [name]="control.key" [tip]="form.controls[control.key]?.tipWell?.tip" [icon]="form.controls[control.key]?.tipWell?.icon" [button]="form.controls[control.key]?.tipWell?.button" [sanitize]="form.controls[control.key]?.tipWell?.sanitize"></novo-tip-well>
                </div>
                <i *ngIf="form.controls[control.key].fieldInteractionloading" class="loading">
                    <svg version="1.1"
                     xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:a="http://ns.adobe.com/AdobeSVGViewerExtensions/3.0/"
                     x="0px" y="0px" width="18.2px" height="18.5px" viewBox="0 0 18.2 18.5" style="enable-background:new 0 0 18.2 18.5;"
                     xml:space="preserve">
                    <style type="text/css">
                        .spinner { fill:#FFFFFF; }
                    </style>
                        <path class="spinner" d="M9.2,18.5C4.1,18.5,0,14.4,0,9.2S4.1,0,9.2,0c0.9,0,1.9,0.1,2.7,0.4c0.8,0.2,1.2,1.1,1,1.9
                            c-0.2,0.8-1.1,1.2-1.9,1C10.5,3.1,9.9,3,9.2,3C5.8,3,3,5.8,3,9.2s2.8,6.2,6.2,6.2c2.8,0,5.3-1.9,6-4.7c0.2-0.8,1-1.3,1.8-1.1
                            c0.8,0.2,1.3,1,1.1,1.8C17.1,15.7,13.4,18.5,9.2,18.5z"/>
                    </svg>
                </i>
            </div>
        </div>
    `,
                host: {
                    '[class]': 'form.controls[control.key].controlType',
                    '[attr.data-control-type]': 'form.controls[control.key].controlType',
                    '[class.disabled]': 'form.controls[control.key].readOnly',
                    '[class.hidden]': 'form.controls[control.key].hidden',
                    '[attr.data-control-key]': 'control.key',
                    '[class.inline-embedded]': 'control.isInlineEmbedded',
                    '[class.embedded]': 'control.isEmbedded',
                }
            }] }
];
/** @nocollapse */
NovoControlElement.ctorParameters = () => [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"] },
    { type: NovoLabelService },
    { type: DateFormatService },
    { type: FieldInteractionApi },
    { type: NovoTemplateService },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectorRef"] },
    { type: String, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["LOCALE_ID"],] }] }
];
NovoControlElement.propDecorators = {
    control: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    form: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    condensed: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    autoFocus: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    change: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    edit: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    save: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    delete: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    upload: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    onBlur: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"], args: ['blur',] }],
    onFocus: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"], args: ['focus',] }]
};
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: elements/form/ControlGroup.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @record
 */
function NovoControlGroupAddConfig() { }
if (false) {}
/**
 * @record
 */
function NovoControlGroupRowConfig() { }
if (false) {}
class NovoControlGroup {
    /**
     * @param {?} formUtils
     * @param {?} fb
     * @param {?} ref
     * @param {?} labels
     */
    constructor(formUtils, fb, ref, labels) {
        this.formUtils = formUtils;
        this.fb = fb;
        this.ref = ref;
        this.labels = labels;
        this._vertical = false;
        this._remove = false;
        this._edit = false;
        this._collapsible = false;
        this.onRemove = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.onEdit = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.onAdd = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.change = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.controlLabels = [];
        this.toggled = false;
        this.disabledArray = [];
        this.currentIndex = 0;
    }
    // Sets the display of the group to either be row (default) or vertical via flex-box
    /**
     * @param {?} v
     * @return {?}
     */
    set vertical(v) {
        this._vertical = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_12__["coerceBooleanProperty"])(v);
    }
    /**
     * @return {?}
     */
    get vertical() {
        return this._vertical;
    }
    // Hide/shows the remove button for removing a control
    /**
     * @param {?} v
     * @return {?}
     */
    set remove(v) {
        this._remove = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_12__["coerceBooleanProperty"])(v);
    }
    /**
     * @return {?}
     */
    get remove() {
        return this._remove;
    }
    // Hide/shows the edit button for editing a control
    /**
     * @param {?} v
     * @return {?}
     */
    set edit(v) {
        this._edit = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_12__["coerceBooleanProperty"])(v);
    }
    /**
     * @return {?}
     */
    get edit() {
        return this._edit;
    }
    // Allows the control to collapse or not
    /**
     * @param {?} v
     * @return {?}
     */
    set collapsible(v) {
        this._collapsible = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_12__["coerceBooleanProperty"])(v);
    }
    /**
     * @return {?}
     */
    get collapsible() {
        return this._collapsible;
    }
    // Icon of the control group (can have bhi prefix or not)
    /**
     * @param {?} v
     * @return {?}
     */
    set icon(v) {
        this._icon = v && v.indexOf('bhi') !== -1 ? v : `bhi-${v}`;
    }
    /**
     * @return {?}
     */
    get icon() {
        return this._icon;
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        if (!this.key) {
            throw new Error('novo-control-group must have the [key] attribute provided!');
        }
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        /** @type {?} */
        const initialValueChange = changes['initialValue'];
        // If initial value changes, clear the controls
        if (initialValueChange && initialValueChange.currentValue !== initialValueChange.previousValue && !initialValueChange.firstChange) {
            this.clearControls();
        }
        // Check for array, add a control for each value
        if (this.initialValue && Array.isArray(this.initialValue)) {
            if (this.initialValue.length !== 0) {
                this.currentIndex = 0;
                this.initialValue.forEach((/**
                 * @param {?} value
                 * @return {?}
                 */
                (value) => this.addNewControl(value)));
            }
        }
        else if (this.initialValue) {
            // If value is an object, just add one control
            this.addNewControl(this.initialValue);
        }
        // If we are horizontal, grab the labels to help with layout
        if (!this.vertical) {
            this.controlLabels = (this.controls || []).map((/**
             * @param {?} control
             * @return {?}
             */
            (control) => {
                return {
                    value: control.label,
                    width: control.width,
                    required: control.required,
                    key: control.key,
                };
            }));
            this.ref.markForCheck();
        }
    }
    /**
     * @param {?} change
     * @return {?}
     */
    onChange(change) {
        this.change.emit(this);
    }
    /**
     * @return {?}
     */
    resetAddRemove() {
        this.disabledArray.forEach((/**
         * @param {?} item
         * @param {?} idx
         * @return {?}
         */
        (item, idx) => {
            item.edit = this.checkCanEdit(idx);
            item.remove = this.checkCanRemove(idx);
        }));
        this.ref.markForCheck();
    }
    /**
     * @param {?=} value
     * @return {?}
     */
    addNewControl(value) {
        /** @type {?} */
        const control = (/** @type {?} */ (this.form.controls[this.key]));
        /** @type {?} */
        const newCtrl = this.buildControl(value);
        if (control) {
            control.push(newCtrl);
        }
        else {
            this.form.addControl(this.key, this.fb.array([newCtrl]));
        }
        this.disabledArray.push({
            edit: true,
            remove: true,
        });
        this.resetAddRemove();
        if (!value) {
            this.onAdd.emit();
        }
        this.currentIndex++;
        this.ref.markForCheck();
    }
    /**
     * @param {?=} value
     * @return {?}
     */
    buildControl(value) {
        /** @type {?} */
        const newControls = this.getNewControls(this.controls);
        if (value) {
            this.formUtils.setInitialValues(newControls, value);
        }
        /** @type {?} */
        const ctrl = this.formUtils.toFormGroup(newControls);
        return ctrl;
    }
    /**
     * @param {?} index
     * @param {?=} emitEvent
     * @return {?}
     */
    removeControl(index, emitEvent = true) {
        /** @type {?} */
        const control = (/** @type {?} */ (this.form.controls[this.key]));
        if (emitEvent) {
            this.onRemove.emit({ value: control.at(index).value, index });
        }
        control.removeAt(index);
        this.disabledArray = this.disabledArray.filter((/**
         * @param {?} value
         * @param {?} idx
         * @return {?}
         */
        (value, idx) => idx !== index));
        this.resetAddRemove();
        this.currentIndex--;
        this.ref.markForCheck();
    }
    /**
     * @param {?} index
     * @return {?}
     */
    editControl(index) {
        /** @type {?} */
        const control = (/** @type {?} */ (this.form.controls[this.key]));
        this.onEdit.emit({ value: control.at(index).value, index });
    }
    /**
     * @param {?} event
     * @return {?}
     */
    toggle(event) {
        Helpers.swallowEvent(event);
        if (this.collapsible) {
            this.toggled = !this.toggled;
            this.ref.markForCheck();
        }
    }
    /**
     * @private
     * @return {?}
     */
    clearControls() {
        /** @type {?} */
        const control = (/** @type {?} */ (this.form.controls[this.key]));
        if (control) {
            for (let i = control.controls.length; i >= 0; i--) {
                this.removeControl(i, false);
            }
            this.currentIndex = 0;
        }
    }
    /**
     * @private
     * @param {?} index
     * @return {?}
     */
    checkCanEdit(index) {
        if (this.canEdit) {
            /** @type {?} */
            const control = (/** @type {?} */ (this.form.controls[this.key]));
            return this.canEdit(control.at(index).value, index);
        }
        return true;
    }
    /**
     * @private
     * @param {?} index
     * @return {?}
     */
    checkCanRemove(index) {
        if (this.canRemove) {
            /** @type {?} */
            const control = (/** @type {?} */ (this.form.controls[this.key]));
            if (control.at(index)) {
                return this.canRemove(control.at(index).value, index);
            }
            return true;
        }
        return true;
    }
    /**
     * @private
     * @param {?} controls
     * @return {?}
     */
    getNewControls(controls) {
        /** @type {?} */
        const ret = [];
        (this.controls || []).forEach((/**
         * @param {?} control
         * @return {?}
         */
        (control) => {
            ret.push(new BaseControl(control.__type, control));
        }));
        return ret;
    }
}
NovoControlGroup.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'novo-control-group',
                template: "<h6 class=\"novo-section-header\" *ngIf=\"label\">\n  <span (click)=\"toggle($event)\" [class.clickable]=\"collapsible\">\n    <i *ngIf=\"icon && !collapsible\" [ngClass]=\"icon\" [attr.data-automation-id]=\"'novo-control-group-icon-' + key\"></i>\n    <i *ngIf=\"collapsible\" class=\"bhi-next\" [class.toggled]=\"toggled\" [attr.data-automation-id]=\"'novo-control-group-collapse-' + key\"></i>\n    <span [attr.data-automation-id]=\"'novo-control-group-label-' + key\">{{ label }}</span>\n  </span>\n  <label class=\"novo-control-group-description\" *ngIf=\"description\" [attr.data-automation-id]=\"'novo-control-group-description-' + key\">{{ description }}</label>\n</h6>\n<div class=\"novo-control-group-controls\" [class.vertical]=\"vertical\" [class.horizontal]=\"!vertical\" [class.hidden]=\"collapsible && !toggled\">\n  <ng-template #defaultTemplate let-index=\"index\" let-form=\"form\" let-key=\"key\">\n    <div class=\"novo-control-group-control\">\n      <div *ngFor=\"let c of controls\" class=\"novo-control-container {{c.key}}\" [class.is-label]=\"c.controlType === 'read-only'\" [style.max-width.px]=\"c.width\">\n        <novo-control (change)=\"onChange($event)\" [form]=\"(form?.controls)[key]['controls'][index]\" [control]=\"c\" [condensed]=\"!vertical || c.controlType === 'read-only'\"></novo-control>\n      </div>\n      <div class=\"novo-control-container last\" *ngIf=\"edit && !vertical\">\n        <button [disabled]=\"!disabledArray[index].edit\" type=\"button\" *ngIf=\"edit && !vertical\" theme=\"icon\" icon=\"edit\" (click)=\"editControl(index)\" [attr.data-automation-id]=\"'novo-control-group-edit-' + key\" index=\"-1\"></button>\n      </div>\n      <div class=\"novo-control-container last\" *ngIf=\"remove && !vertical\">\n        <button [disabled]=\"!disabledArray[index].remove\" type=\"button\" *ngIf=\"remove && !vertical\" theme=\"icon\" icon=\"delete-o\" (click)=\"removeControl(index)\" [attr.data-automation-id]=\"'novo-control-group-delete-' + key\" index=\"-1\"></button>\n      </div>\n    </div>\n    <button [disabled]=\"!disabledArray[index].edit\" type=\"button\" *ngIf=\"edit && vertical\" theme=\"icon\" icon=\"edit\" (click)=\"editControl(index)\" [attr.data-automation-id]=\"'novo-control-group-edit-' + key\" index=\"-1\"></button>\n    <button [disabled]=\"!disabledArray[index].remove\" type=\"button\" *ngIf=\"remove && vertical\" theme=\"icon\" icon=\"delete-o\" (click)=\"removeControl(index)\" [attr.data-automation-id]=\"'novo-control-group-delete-' + key\" index=\"-1\"></button>\n  </ng-template>\n  <ng-template #defaultColumnLabelTemplate let-form=\"form\" let-key=\"key\">\n      <div class=\"novo-control-group-control-label {{ label.key }}\" *ngFor=\"let label of controlLabels\" [style.max-width.px]=\"label.width\" [class.column-required]=\"label.required\">\n        <span [attr.data-automation-id]=\"'novo-control-group-label-' + label.value\">{{ label.value }}</span>\n      </div>\n      <div class=\"novo-control-group-control-label last\" *ngIf=\"edit\" [attr.data-automation-id]=\"'novo-control-group-edit-' + key\"></div>\n      <div class=\"novo-control-group-control-label last\" *ngIf=\"remove\" [attr.data-automation-id]=\"'novo-control-group-delete-' + key\"></div>\n  </ng-template>\n  <ng-container *ngIf=\"!vertical && (form?.controls)[key] && (form?.controls)[key]['controls'].length !== 0\">\n    <div class=\"novo-control-group-labels\" *ngIf=\"!vertical && (form?.controls)[key] && (form?.controls)[key]['controls'].length !== 0\">\n      <ng-template [ngTemplateOutlet]=\"columnLabelTemplate || defaultColumnLabelTemplate\" [ngTemplateOutletContext]=\"{ form: form, key: key, controlLabels: controlLabels }\">\n      </ng-template>\n    </div>\n  </ng-container>\n  <ng-container *ngIf=\"(form?.controls)[key]\">\n    <div class=\"novo-control-group-row\" *ngFor=\"let control of (form?.controls)[key]['controls']; let index = index\">\n      <ng-template [ngTemplateOutlet]=\"rowTemplate || defaultTemplate\" [ngTemplateOutletContext]=\"{ form: form, index: index, key: key, controls: controls }\">\n      </ng-template>\n    </div>\n  </ng-container>\n  <div class=\"novo-control-group-empty\" *ngIf=\"(form?.controls)[key] && (form?.controls)[key]['controls'].length === 0\" [attr.data-automation-id]=\"'novo-control-group-empty-' + key\">\n    {{ emptyMessage }}\n  </div>\n  <p *ngIf=\"add\">\n    <button type=\"button\" theme=\"dialogue\" icon=\"add-thin\" (click)=\"addNewControl()\" [attr.data-automation-id]=\"'novo-control-group-bottom-add-' + key\" index=\"-1\">\n      {{ add?.label }}\n    </button>\n  </p>\n</div>\n",
                changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectionStrategy"].OnPush
            }] }
];
/** @nocollapse */
NovoControlGroup.ctorParameters = () => [
    { type: FormUtils },
    { type: _angular_forms__WEBPACK_IMPORTED_MODULE_1__["FormBuilder"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectorRef"] },
    { type: NovoLabelService }
];
NovoControlGroup.propDecorators = {
    vertical: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    add: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    remove: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    edit: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    collapsible: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    form: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    controls: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    key: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    label: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    description: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    emptyMessage: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    icon: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    initialValue: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    canEdit: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    canRemove: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    rowTemplate: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    columnLabelTemplate: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    onRemove: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    onEdit: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    onAdd: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    change: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }]
};
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: elements/form/ControlTemplates.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NovoControlTemplates {
    /**
     * @param {?} templates
     */
    constructor(templates) {
        this.templates = templates;
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        if (this.defaultTemplates && this.defaultTemplates.length) {
            this.defaultTemplates.forEach((/**
             * @param {?} template
             * @return {?}
             */
            (template) => {
                this.templates.addDefault(template.name, template.template);
            }));
        }
    }
}
NovoControlTemplates.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'novo-control-templates',
                template: `
        <!---Readonly--->
        <ng-template novoTemplate="read-only" let-form="form" let-control>
          <div>{{ form.value[control.key] }}</div>
        </ng-template>
        <!--Textbox--->
        <ng-template novoTemplate="textbox" let-control let-form="form" let-errors="errors" let-methods="methods">
          <div [formGroup]="form" class="novo-control-input-container novo-control-input-with-label" [tooltip]="control?.tooltip" [tooltipPosition]="control?.tooltipPosition"  [tooltipSize]="control?.tooltipSize" [tooltipPreline]="control?.tooltipPreline" [removeTooltipArrow]="control?.removeTooltipArrow" [tooltipAutoPosition]="control?.tooltipAutoPosition">
            <input *ngIf="control?.type !== 'number' && control?.textMaskEnabled" [textMask]="control.maskOptions" [formControlName]="control.key" [id]="control.key" [type]="control?.type" [placeholder]="control?.placeholder" (input)="methods.emitChange($event)" (focus)="methods.handleFocus($event)" (blur)="methods.handleBlur($event)" autocomplete>
            <input *ngIf="control?.type !== 'number' && !control?.textMaskEnabled" [class.maxlength-error]="errors?.maxlength" [formControlName]="control.key" [id]="control.key" [type]="control?.type" [placeholder]="control?.placeholder" (input)="methods.emitChange($event)" [maxlength]="control?.maxlength" (focus)="methods.handleFocus($event)" (blur)="methods.handleBlur($event)" autocomplete>
            <input *ngIf="control?.type === 'number' && control?.subType !== 'percentage'" [class.maxlength-error]="errors?.maxlength" [formControlName]="control.key" [id]="control.key" [type]="control?.type" [placeholder]="control?.placeholder" (keydown)="methods.restrictKeys($event)" (input)="methods.emitChange($event)" [maxlength]="control?.maxlength" (focus)="methods.handleFocus($event)" (blur)="methods.handleBlur($event)" step="any" (mousewheel)="numberInput.blur()" #numberInput>
            <input *ngIf="control?.type === 'number' && control?.subType === 'percentage'" [type]="control?.type" [placeholder]="control?.placeholder" (keydown)="methods.restrictKeys($event)" [value]="control?.percentValue" (input)="methods.handlePercentChange($event)" (focus)="methods.handleFocus($event)" (blur)="methods.handleBlur($event)" step="any" (mousewheel)="percentInput.blur()" #percentInput>
            <label class="input-label" *ngIf="control?.subType === 'currency'">{{ control.currencyFormat }}</label>
            <label class="input-label" *ngIf="control?.subType === 'percentage'">%</label>
          </div>
        </ng-template>

        <!--Textarea--->
        <ng-template novoTemplate="text-area" let-control let-form="form" let-errors="errors" let-methods="methods">
          <div class="textarea-container" [formGroup]="form" [tooltip]="control?.tooltip" [tooltipPosition]="control?.tooltipPosition"  [tooltipSize]="control?.tooltipSize" [tooltipPreline]="control?.tooltipPreline" [removeTooltipArrow]="control?.removeTooltipArrow" [tooltipAutoPosition]="control?.tooltipAutoPosition">
            <textarea [class.maxlength-error]="errors?.maxlength" [name]="control.key" [attr.id]="control.key" [placeholder]="control.placeholder" [formControlName]="control.key" autosize (input)="methods.handleTextAreaInput($event)" (focus)="methods.handleFocus($event)" (blur)="methods.handleBlur($event)" [maxlength]="control?.maxlength"></textarea>
          </div>
        </ng-template>

        <!--Editor-->
        <ng-template novoTemplate="editor" let-control let-form="form" let-errors="errors" let-methods="methods">
          <div [formGroup]="form">
            <novo-editor [name]="control.key" [formControlName]="control.key" [startupFocus]="control.startupFocus" [minimal]="control.minimal" [fileBrowserImageUploadUrl]="control.fileBrowserImageUploadUrl" (focus)="methods.handleFocus($event)" (blur)="methods.handleBlur($event)" [config]="control.config"></novo-editor>
          </div>
        </ng-template>

        <!--AceEditor-->
        <ng-template novoTemplate="ace-editor" let-control let-form="form" let-errors="errors" let-methods="methods">
          <div [formGroup]="form">
            <novo-ace-editor [name]="control.key" [formControlName]="control.key" (focus)="methods.handleFocus($event)" (blur)="methods.handleBlur($event)"></novo-ace-editor>
          </div>
        </ng-template>

        <!--HTML5 Select-->
        <ng-template novoTemplate="native-select" let-control let-form="form" let-errors="errors" let-methods="methods">
          <div [formGroup]="form">
            <select [id]="control.key" [formControlName]="control.key" [tooltip]="control.tooltip" [tooltipPosition]="control.tooltipPosition"  [tooltipSize]="control?.tooltipSize" [tooltipPreline]="control?.tooltipPreline" [removeTooltipArrow]="control?.removeTooltipArrow" [tooltipAutoPosition]="control?.tooltipAutoPosition">
                <option *ngIf="control.placeholder" value="" disabled selected hidden>{{ control.placeholder }}</option>
                <option *ngFor="let opt of control.options" [value]="opt.key">{{opt.value}}</option>
            </select>
          </div>
        </ng-template>

        <!--File-->
        <ng-template novoTemplate="file" let-control let-form="form" let-errors="errors" let-methods="methods">
          <div [formGroup]="form">
            <novo-file-input [formControlName]="control.key" [id]="control.key" [name]="control.key" [placeholder]="control.placeholder" [value]="control.value" [multiple]="control.multiple" [layoutOptions]="control.layoutOptions" [tooltip]="control.tooltip" [tooltipPosition]="control.tooltipPosition"  [tooltipSize]="control?.tooltipSize" [tooltipPreline]="control?.tooltipPreline" [removeTooltipArrow]="control?.removeTooltipArrow" [tooltipAutoPosition]="control?.tooltipAutoPosition" (edit)="methods.handleEdit($event)" (save)="methods.handleSave($event)" (delete)="methods.handleDelete($event)" (upload)="methods.handleUpload($event)"></novo-file-input>
          </div>
        </ng-template>

        <!--Tiles-->
        <ng-template novoTemplate="tiles" let-control let-form="form" let-errors="errors" let-methods="methods">
          <div [formGroup]="form">
            <novo-tiles [options]="control.options" [formControlName]="control.key" (onChange)="methods.modelChange($event)" [tooltip]="control.tooltip" [tooltipPosition]="control.tooltipPosition"  [tooltipSize]="control?.tooltipSize" [tooltipPreline]="control?.tooltipPreline" [removeTooltipArrow]="control?.removeTooltipArrow" [tooltipAutoPosition]="control?.tooltipAutoPosition" [controlDisabled]="control.disabled"></novo-tiles>
          </div>
        </ng-template>

        <!--Picker-->
        <ng-template novoTemplate="picker" let-control let-form="form" let-errors="errors" let-methods="methods">
          <div [formGroup]="form" class="novo-control-input-container">
            <novo-picker [config]="control.config" [formControlName]="control.key" [placeholder]="control.placeholder" [parentScrollSelector]="control.parentScrollSelector" *ngIf="!control.multiple" (select)="methods.modelChange($event);" (changed)="methods.modelChangeWithRaw($event)" (typing)="methods.handleTyping($event)" (focus)="methods.handleFocus($event)" (blur)="methods.handleBlur($event)" [tooltip]="control.tooltip" [tooltipPosition]="control.tooltipPosition" [tooltipSize]="control?.tooltipSize" [tooltipPreline]="control?.tooltipPreline" [removeTooltipArrow]="control?.removeTooltipArrow" [tooltipAutoPosition]="control?.tooltipAutoPosition"></novo-picker>
            <novo-chips [source]="control.config" [type]="control.config.type" [formControlName]="control.key" [placeholder]="control.placeholder" [maxlength]="control?.maxlength" *ngIf="control.multiple && !control.config.columns" [closeOnSelect]="control.closeOnSelect" (changed)="methods.modelChangeWithRaw($event)" (typing)="methods.handleTyping($event)" (focus)="methods.handleFocus($event)" (blur)="methods.handleBlur($event)" [tooltip]="control.tooltip" [tooltipPosition]="control.tooltipPosition" [tooltipSize]="control?.tooltipSize" [tooltipPreline]="control?.tooltipPreline" [removeTooltipArrow]="control?.removeTooltipArrow" [tooltipAutoPosition]="control?.tooltipAutoPosition"></novo-chips>
            <novo-row-chips [source]="control.config" [type]="control.config.type" [formControlName]="control.key" [placeholder]="control.placeholder" *ngIf="control.multiple && control.config.columns" [closeOnSelect]="control.closeOnSelect" (changed)="methods.modelChangeWithRaw($event)" (typing)="methods.handleTyping($event)" (focus)="methods.handleFocus($event)" (blur)="methods.handleBlur($event)" [tooltip]="control.tooltip" [tooltipPosition]="control.tooltipPosition" [tooltipSize]="control?.tooltipSize" [tooltipPreline]="control?.tooltipPreline" [removeTooltipArrow]="control?.removeTooltipArrow" [tooltipAutoPosition]="control?.tooltipAutoPosition"></novo-row-chips>
          </div>
        </ng-template>

        <!--Novo Select-->
        <ng-template novoTemplate="select" let-control let-form="form" let-errors="errors" let-methods="methods">
          <div [formGroup]="form">
            <novo-select [options]="control.options" [headerConfig]="control.headerConfig" [placeholder]="control.placeholder" [formControlName]="control.key" [tooltip]="control.tooltip" [tooltipPosition]="control.tooltipPosition" [tooltipSize]="control?.tooltipSize" [tooltipPreline]="control?.tooltipPreline" [removeTooltipArrow]="control?.removeTooltipArrow" [tooltipAutoPosition]="control?.tooltipAutoPosition" (onSelect)="methods.modelChange($event)"></novo-select>
          </div>
        </ng-template>

        <!--Radio-->
        <ng-template novoTemplate="radio" let-control let-form="form" let-errors="errors" let-methods="methods">
          <div [formGroup]="form" class="novo-control-input-container">
            <novo-radio [name]="control.key" [formControlName]="control.key" *ngFor="let option of control.options" [value]="option.value" [label]="option.label" [checked]="option.value === form.value[control.key] || (form.value[control.key] && option.value === form.value[control.key].id)" [tooltip]="control.tooltip" [tooltipPosition]="control.tooltipPosition" [tooltipSize]="control?.tooltipSize" [tooltipPreline]="control?.tooltipPreline" [removeTooltipArrow]="control?.removeTooltipArrow" [tooltipAutoPosition]="control?.tooltipAutoPosition" [button]="!!option.icon" [icon]="option.icon" [attr.data-automation-id]="control.key + '-' + (option?.label || option?.value)"></novo-radio>
          </div>
        </ng-template>

        <!--Time-->
        <ng-template novoTemplate="time" let-control let-form="form" let-errors="errors" let-methods="methods">
          <div [formGroup]="form" class="novo-control-input-container" [tooltip]="control?.tooltip" [tooltipPosition]="control?.tooltipPosition" [tooltipSize]="control?.tooltipSize" [tooltipPreline]="control?.tooltipPreline" [removeTooltipArrow]="control?.removeTooltipArrow" [tooltipAutoPosition]="control?.tooltipAutoPosition">
            <novo-time-picker-input [attr.id]="control.key" [name]="control.key" [formControlName]="control.key" [placeholder]="control.placeholder" [military]="control.military"></novo-time-picker-input>
          </div>
        </ng-template>

        <!--Date-->
        <ng-template novoTemplate="date" let-control let-form="form" let-errors="errors" let-methods="methods">
          <div [formGroup]="form" class="novo-control-input-container" [tooltip]="control.tooltip" [tooltipPosition]="control.tooltipPosition" [tooltipSize]="control?.tooltipSize" [tooltipPreline]="control?.tooltipPreline" [removeTooltipArrow]="control?.removeTooltipArrow" [tooltipAutoPosition]="control?.tooltipAutoPosition">
            <novo-date-picker-input [attr.id]="control.key" [name]="control.key" [formControlName]="control.key" [start]="control.startDate" [end]="control.endDate" [format]="control.dateFormat" [allowInvalidDate]="control.allowInvalidDate" [textMaskEnabled]="control.textMaskEnabled" [placeholder]="control.placeholder" [weekStart]="control.weekStart" (focusEvent)="methods.handleFocus($event)" (blurEvent)="methods.handleBlur($event)"></novo-date-picker-input>
          </div>
        </ng-template>


        <!--Date and Time-->
        <ng-template novoTemplate="date-time" let-control let-form="form" let-errors="errors" let-methods="methods">
          <div [formGroup]="form" class="novo-control-input-container" [tooltip]="control.tooltip" [tooltipPosition]="control.tooltipPosition" [tooltipSize]="control?.tooltipSize" [tooltipPreline]="control?.tooltipPreline" [removeTooltipArrow]="control?.removeTooltipArrow" [tooltipAutoPosition]="control?.tooltipAutoPosition">
            <novo-date-time-picker-input [attr.id]="control.key" [name]="control.key" [formControlName]="control.key" [start]="control.startDate" [end]="control.endDate" [placeholder]="control.placeholder" [military]="control.military" [weekStart]="control.weekStart" (focusEvent)="methods.handleFocus($event)" (blurEvent)="methods.handleBlur($event)"></novo-date-time-picker-input>
          </div>
        </ng-template>

        <!--Address-->
        <ng-template novoTemplate="address" let-control let-form="form" let-errors="errors" let-methods="methods">
          <div [formGroup]="form">
            <novo-address [formControlName]="control.key" [config]="control?.config" [readOnly]="control?.readOnly" (change)="methods.handleAddressChange($event)" (focus)="methods.handleFocus($event.event, $event.field)" (blur)="methods.handleBlur($event.event, $event.field)"  (validityChange)="methods.updateValidity()"></novo-address>
          </div>
        </ng-template>

        <!--Checkbox-->
        <ng-template novoTemplate="checkbox" let-control let-form="form" let-errors="errors" let-methods="methods">
          <div [formGroup]="form">
            <novo-checkbox [formControlName]="control?.key" [name]="control?.key" [label]="control?.checkboxLabel" [tooltip]="control?.tooltip" [tooltipPosition]="control?.tooltipPosition" [tooltipSize]="control?.tooltipSize" [tooltipPreline]="control?.tooltipPreline" [removeTooltipArrow]="control?.removeTooltipArrow" [tooltipAutoPosition]="control?.tooltipAutoPosition" [layoutOptions]="control?.layoutOptions"></novo-checkbox>
          </div>
        </ng-template>

        <!--Checklist-->
        <ng-template novoTemplate="checklist" let-control let-form="form" let-errors="errors" let-methods="methods">
          <div [formGroup]="form">
            <novo-check-list [formControlName]="control.key" [name]="control.key" [options]="control?.options" [tooltip]="control?.tooltip" [tooltipPosition]="control?.tooltipPosition" [tooltipSize]="control?.tooltipSize" [tooltipPreline]="control?.tooltipPreline" [removeTooltipArrow]="control?.removeTooltipArrow" [tooltipAutoPosition]="control?.tooltipAutoPosition" (onSelect)="methods.modelChange($event)"></novo-check-list>
          </div>
        </ng-template>

        <!--QuickNote-->
        <ng-template novoTemplate="quick-note" let-control let-form="form" let-errors="errors" let-methods="methods">
          <div [formGroup]="form">
            <novo-quick-note [formControlName]="control.key" [startupFocus]="control?.startupFocus" [placeholder]="control?.placeholder" [config]="control?.config" (change)="methods.modelChange($event)" [tooltip]="control?.tooltip" [tooltipPosition]="control?.tooltipPosition" [tooltipSize]="control?.tooltipSize" [removeTooltipArrow]="control?.removeTooltipArrow" [tooltipAutoPosition]="control?.tooltipAutoPosition" [tooltipPreline]="control?.tooltipPreline"></novo-quick-note>
          </div>
        </ng-template>
    `
            }] }
];
/** @nocollapse */
NovoControlTemplates.ctorParameters = () => [
    { type: NovoTemplateService }
];
NovoControlTemplates.propDecorators = {
    defaultTemplates: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChildren"], args: [NovoTemplate,] }]
};
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: elements/form/DynamicForm.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NovoFieldsetHeaderElement {
}
NovoFieldsetHeaderElement.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'novo-fieldset-header',
                template: `
        <h6><i [class]="icon || 'bhi-section'"></i>{{title}}</h6>
    `
            }] }
];
NovoFieldsetHeaderElement.propDecorators = {
    title: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    icon: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }]
};
if (false) {}
class NovoFieldsetElement {
    constructor() {
        this.controls = [];
        this.isEmbedded = false;
        this.isInlineEmbedded = false;
        this.hidden = false;
    }
}
NovoFieldsetElement.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'novo-fieldset',
                template: `
        <div class="novo-fieldset-container">
            <novo-fieldset-header [icon]="icon" [title]="title" *ngIf="title" [class.embedded]="isEmbedded" [class.inline-embedded]="isInlineEmbedded" [class.hidden]="hidden"></novo-fieldset-header>
            <ng-container *ngFor="let control of controls;let controlIndex = index;">
                <div class="novo-form-row" [class.disabled]="control.disabled" *ngIf="control.__type !== 'GroupedControl'">
                    <novo-control [autoFocus]="autoFocus && index === 0 && controlIndex === 0" [control]="control" [form]="form"></novo-control>
                </div>
                <div *ngIf="control.__type === 'GroupedControl'">TODO - GroupedControl</div>
            </ng-container>
        </div>
    `
            }] }
];
NovoFieldsetElement.propDecorators = {
    controls: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    form: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    title: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    icon: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    index: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    autoFocus: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    isEmbedded: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    isInlineEmbedded: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    hidden: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }]
};
if (false) {}
class NovoDynamicFormElement {
    /**
     * @param {?} element
     * @param {?} templates
     */
    constructor(element, templates) {
        this.element = element;
        this.templates = templates;
        this.controls = [];
        this.fieldsets = [];
        this.hideNonRequiredFields = true;
        this.autoFocusFirstField = false;
        this.allFieldsRequired = false;
        this.allFieldsNotRequired = false;
        this.showingAllFields = false;
        this.showingRequiredFields = true;
        this.numControls = 0;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.ngOnChanges();
    }
    /**
     * @param {?=} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        this.form.layout = this.layout;
        if (!(this.fieldsets && this.fieldsets.length) && this.controls && this.controls.length) {
            this.fieldsets = [
                {
                    controls: this.controls,
                },
            ];
            this.numControls = this.controls.length;
        }
        else if (this.fieldsets) {
            this.fieldsets.forEach((/**
             * @param {?} fieldset
             * @return {?}
             */
            (fieldset) => {
                this.numControls = this.numControls + fieldset.controls.length;
            }));
        }
        /** @type {?} */
        const requiredFields = [];
        /** @type {?} */
        const nonRequiredFields = [];
        this.fieldsets.forEach((/**
         * @param {?} fieldset
         * @return {?}
         */
        (fieldset) => {
            fieldset.controls.forEach((/**
             * @param {?} control
             * @return {?}
             */
            (control) => {
                if (control.required) {
                    requiredFields.push(control);
                }
                else {
                    nonRequiredFields.push(control);
                }
            }));
        }));
        this.allFieldsRequired = requiredFields.length === this.numControls;
        this.allFieldsNotRequired = nonRequiredFields.length === this.numControls;
        if (this.allFieldsNotRequired && this.hideNonRequiredFields) {
            this.fieldsets.forEach((/**
             * @param {?} fieldset
             * @return {?}
             */
            (fieldset) => {
                fieldset.controls.forEach((/**
                 * @param {?} control
                 * @return {?}
                 */
                (control) => {
                    this.form.controls[control.key].hidden = false;
                }));
            }));
        }
        this.form.fieldsets = [...this.fieldsets];
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        if (this.customTemplates && this.customTemplates.length) {
            this.customTemplates.forEach((/**
             * @param {?} template
             * @return {?}
             */
            (template) => {
                this.templates.addCustom(template.name, template.template);
            }));
        }
    }
    /**
     * @return {?}
     */
    showAllFields() {
        this.form.fieldsets.forEach((/**
         * @param {?} fieldset
         * @return {?}
         */
        (fieldset) => {
            fieldset.controls.forEach((/**
             * @param {?} control
             * @return {?}
             */
            (control) => {
                /** @type {?} */
                const ctl = this.form.controls[control.key];
                if (!this.fieldsAlreadyHidden.includes(control.key)) {
                    ctl.hidden = false;
                }
            }));
        }));
        this.showingAllFields = true;
        this.showingRequiredFields = false;
    }
    /**
     * @param {?} hideRequiredWithValue
     * @return {?}
     */
    showOnlyRequired(hideRequiredWithValue) {
        this.fieldsAlreadyHidden = [];
        this.form.fieldsets.forEach((/**
         * @param {?} fieldset
         * @return {?}
         */
        (fieldset) => {
            fieldset.controls.forEach((/**
             * @param {?} control
             * @return {?}
             */
            (control) => {
                /** @type {?} */
                const ctl = this.form.controls[control.key];
                if (ctl.hidden) {
                    this.fieldsAlreadyHidden.push(control.key);
                }
                // Hide any non-required fields
                if (!control.required) {
                    ctl.hidden = true;
                }
                // Hide required fields that have been successfully filled out
                if (hideRequiredWithValue &&
                    !Helpers.isBlank(this.form.value[control.key]) &&
                    (!control.isEmpty || (control.isEmpty && control.isEmpty(ctl)))) {
                    ctl.hidden = true;
                }
                // Don't hide fields with errors
                if (ctl.errors) {
                    ctl.hidden = false;
                }
            }));
        }));
        this.showingAllFields = false;
        this.showingRequiredFields = true;
        this.forceValidation();
    }
    /**
     * @return {?}
     */
    get values() {
        return this.form ? this.form.value : null;
    }
    /**
     * @return {?}
     */
    get isValid() {
        return this.form ? this.form.valid : false;
    }
    /**
     * @return {?}
     */
    updatedValues() {
        /** @type {?} */
        let ret = null;
        this.form.fieldsets.forEach((/**
         * @param {?} fieldset
         * @return {?}
         */
        (fieldset) => {
            fieldset.controls.forEach((/**
             * @param {?} control
             * @return {?}
             */
            (control) => {
                if (this.form.controls[control.key].dirty || control.dirty) {
                    if (!ret) {
                        ret = {};
                    }
                    ret[control.key] = this.form.value[control.key];
                }
            }));
        }));
        return ret;
    }
    /**
     * @return {?}
     */
    forceValidation() {
        Object.keys(this.form.controls).forEach((/**
         * @param {?} key
         * @return {?}
         */
        (key) => {
            /** @type {?} */
            const control = this.form.controls[key];
            if (control.required && Helpers.isBlank(this.form.value[control.key])) {
                control.markAsDirty();
                control.markAsTouched();
            }
        }));
    }
}
NovoDynamicFormElement.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'novo-dynamic-form',
                template: `
        <novo-control-templates></novo-control-templates>
        <div class="novo-form-container">
            <header>
                <ng-content select="form-title"></ng-content>
                <ng-content select="form-subtitle"></ng-content>
            </header>
            <form class="novo-form" [formGroup]="form">
                <ng-container *ngFor="let fieldset of form.fieldsets;let i = index">
                    <novo-fieldset *ngIf="fieldset.controls.length" [index]="i" [autoFocus]="autoFocusFirstField" [icon]="fieldset.icon" [controls]="fieldset.controls" [title]="fieldset.title" [form]="form" [isEmbedded]="fieldset.isEmbedded" [isInlineEmbedded]="fieldset.isInlineEmbedded" [hidden]="fieldset.hidden"></novo-fieldset>
                </ng-container>
            </form>
        </div>
    `,
                providers: [NovoTemplateService]
            }] }
];
/** @nocollapse */
NovoDynamicFormElement.ctorParameters = () => [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"] },
    { type: NovoTemplateService }
];
NovoDynamicFormElement.propDecorators = {
    controls: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    fieldsets: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    form: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    layout: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    hideNonRequiredFields: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    autoFocusFirstField: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    customTemplates: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ContentChildren"], args: [NovoTemplate,] }]
};
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: elements/form/Form.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NovoFormElement {
    /**
     * @param {?} templates
     */
    constructor(templates) {
        this.templates = templates;
        this.hideHeader = false;
        this.showingAllFields = false;
        this.showingRequiredFields = true;
    }
    /**
     * @return {?}
     */
    get value() {
        return this.form.getRawValue();
    }
    /**
     * @return {?}
     */
    get isValid() {
        return this.form.valid;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.form.layout = this.layout;
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        if (this.customTemplates && this.customTemplates.length) {
            this.customTemplates.forEach((/**
             * @param {?} template
             * @return {?}
             */
            (template) => {
                this.templates.addCustom(template.name, template.template);
            }));
        }
    }
    /**
     * @return {?}
     */
    showAllFields() {
        Object.keys(this.form.controls).forEach((/**
         * @param {?} key
         * @return {?}
         */
        (key) => {
            this.form.controls[key].hidden = false;
        }));
        this.showingAllFields = true;
        this.showingRequiredFields = false;
    }
    /**
     * @param {?} hideRequiredWithValue
     * @return {?}
     */
    showOnlyRequired(hideRequiredWithValue) {
        Object.keys(this.form.controls).forEach((/**
         * @param {?} key
         * @return {?}
         */
        (key) => {
            // Hide any non-required fields
            if (!this.form.controls[key].required) {
                this.form.controls[key].hidden = true;
            }
            // Hide required fields that have been successfully filled out
            if (hideRequiredWithValue && !Helpers.isBlank(this.form.value[key])) {
                this.form.controls[key].hidden = true;
            }
            // Don't hide fields with errors
            if (this.form.controls[key].errors) {
                this.form.controls[key].hidden = false;
            }
        }));
        this.showingAllFields = false;
        this.showingRequiredFields = true;
        this.forceValidation();
    }
    /**
     * @return {?}
     */
    forceValidation() {
        Object.keys(this.form.controls).forEach((/**
         * @param {?} key
         * @return {?}
         */
        (key) => {
            /** @type {?} */
            const control = this.form.controls[key];
            if (control.required && Helpers.isBlank(this.form.value[control.key])) {
                control.markAsDirty();
                control.markAsTouched();
            }
        }));
    }
}
NovoFormElement.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'novo-form',
                template: `
        <novo-control-templates></novo-control-templates>
        <div class="novo-form-container">
            <header *ngIf="!hideHeader">
                <ng-content select="form-title"></ng-content>
                <ng-content select="form-subtitle"></ng-content>
            </header>
            <form class="novo-form" [formGroup]="form">
                <ng-content></ng-content>
            </form>
        </div>
    `,
                providers: [NovoTemplateService]
            }] }
];
/** @nocollapse */
NovoFormElement.ctorParameters = () => [
    { type: NovoTemplateService }
];
NovoFormElement.propDecorators = {
    form: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    layout: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    hideHeader: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    customTemplates: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ContentChildren"], args: [NovoTemplate,] }]
};
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: elements/radio/Radio.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// Value accessor for the component (supports ngModel)
/** @type {?} */
const RADIO_VALUE_ACCESSOR = {
    provide: _angular_forms__WEBPACK_IMPORTED_MODULE_1__["NG_VALUE_ACCESSOR"],
    useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["forwardRef"])((/**
     * @return {?}
     */
    () => NovoRadioElement)),
    multi: true,
};
class NovoRadioGroup {
}
NovoRadioGroup.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'novo-radio-group',
                template: '<ng-content></ng-content>'
            }] }
];
class NovoRadioElement {
    /**
     * @param {?} ref
     */
    constructor(ref) {
        this.ref = ref;
        this.button = false;
        this.theme = 'secondary';
        this.disabled = false;
        this.change = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.onModelChange = (/**
         * @return {?}
         */
        () => { });
        this.onModelTouched = (/**
         * @return {?}
         */
        () => { });
    }
    /**
     * @param {?} event
     * @return {?}
     */
    select(event) {
        Helpers.swallowEvent(event);
        // Only change the checked state if this is a new radio, they are not toggle buttons
        if (!this.checked) {
            this.checked = !this.checked;
            this.change.emit(this.value);
            this.onModelChange(this.value);
            this.ref.markForCheck();
        }
    }
    /**
     * @param {?} model
     * @return {?}
     */
    writeValue(model) {
        this.model = model;
        this.ref.markForCheck();
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.onModelChange = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.onModelTouched = fn;
    }
    /**
     * @param {?} disabled
     * @return {?}
     */
    setDisabledState(disabled) {
        this.disabled = disabled;
    }
}
NovoRadioElement.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'novo-radio',
                providers: [RADIO_VALUE_ACCESSOR],
                template: `
        <input [name]="name" type="radio" [checked]="checked" [attr.id]="name" (change)="select($event)" [disabled]="disabled">
        <label [attr.for]="name" (click)="select($event)" [class.disabled]="disabled">
            <button *ngIf="button" [ngClass]="{'unchecked': !checked, 'checked': checked, 'has-icon': !!icon}" [theme]="theme" [icon]="icon">{{ label }}</button>
            <div *ngIf="!button">
                <i [ngClass]="{'bhi-radio-empty': !checked, 'bhi-radio-filled': checked}"></i>
                {{ label }}
                <ng-content></ng-content>
            </div>
        </label>
    `,
                host: {
                    '[class.vertical]': 'vertical',
                }
            }] }
];
/** @nocollapse */
NovoRadioElement.ctorParameters = () => [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectorRef"] }
];
NovoRadioElement.propDecorators = {
    name: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    value: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    checked: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    vertical: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    label: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    button: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    theme: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    icon: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    disabled: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    change: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }]
};
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: elements/radio/Radio.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NovoRadioModule {
}
NovoRadioModule.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                imports: [_angular_common__WEBPACK_IMPORTED_MODULE_6__["CommonModule"], NovoButtonModule],
                declarations: [NovoRadioElement, NovoRadioGroup],
                exports: [NovoRadioElement, NovoRadioGroup],
            },] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: elements/quick-note/extras/quick-note-results/QuickNoteResults.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class QuickNoteResults extends PickerResults {
    /**
     * @param {?} element
     * @param {?} labels
     * @param {?} ref
     */
    constructor(element, labels, ref) {
        super(element, labels, ref);
        this.labels = labels;
        // Mode that the quick note is in for tagging
        this.taggingMode = '';
    }
    /**
     * @return {?}
     */
    get term() {
        return this._term;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set term(value) {
        this._term = value.searchTerm;
        this.taggingMode = value.taggingMode;
        this.hasError = false;
        this.isLoading = true;
        this.search(value, this.taggingMode).subscribe((/**
         * @param {?} results
         * @return {?}
         */
        (results) => {
            this.matches = this.isStatic ? this.filterData(results) : results;
            this.isLoading = false;
        }), (/**
         * @return {?}
         */
        () => {
            this.hasError = true;
            this.isLoading = false;
        }));
    }
    /**
     * @param {?} term
     * @param {?} taggingMode
     * @return {?}
     */
    search(term, taggingMode) {
        /** @type {?} */
        const searchCall = this.config.options[taggingMode];
        return Object(rxjs__WEBPACK_IMPORTED_MODULE_11__["from"])(new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        (resolve, reject) => {
            // Check if there is match data
            if (searchCall) {
                // Resolve the data
                if (Array.isArray(searchCall)) {
                    this.isStatic = true;
                    // Arrays are returned immediately
                    resolve(this.structureArray(searchCall));
                }
                else if ((searchCall.hasOwnProperty('reject') && searchCall.hasOwnProperty('resolve')) ||
                    Object.getPrototypeOf(searchCall).hasOwnProperty('then')) {
                    this.isStatic = false;
                    // Promises (ES6 or Deferred) are resolved whenever they resolve
                    searchCall.then(this.structureArray.bind(this)).then(resolve, reject);
                }
                else if (typeof searchCall === 'function') {
                    this.isStatic = false;
                    // Promises (ES6 or Deferred) are resolved whenever they resolve
                    searchCall(term)
                        .then(this.structureArray.bind(this))
                        .then(resolve, reject);
                }
                else {
                    // All other kinds of data are rejected
                    reject('The data provided is not an array or a promise');
                    throw new Error('The data provided is not an array or a promise');
                }
            }
            else {
                // No data gets rejected
                reject('error');
            }
        })));
    }
    /**
     * \@name structureArray
     * \@description This function structures an array of nodes into an array of objects with a
     * 'name' field by default.
     * @param {?} collection - the data once getData resolves it
     *
     * @return {?}
     */
    structureArray(collection) {
        if (collection && (typeof collection[0] === 'string' || typeof collection[0] === 'number')) {
            return collection.map((/**
             * @param {?} item
             * @return {?}
             */
            (item) => {
                return {
                    value: item,
                    label: item,
                };
            }));
        }
        return collection.map((/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            /** @type {?} */
            const value = this.config.field ? data[this.config.field[this.taggingMode]] : data.value || data;
            /** @type {?} */
            const label = this.config.format ? Helpers.interpolate(this.config.format[this.taggingMode], data) : data.label || String(value);
            return { value, label, data };
        }));
    }
    /**
     * \@name selectMatch
     * \@description
     * @param {?} event
     *
     * @return {?}
     */
    selectMatch(event) {
        if (event) {
            event.stopPropagation();
            event.preventDefault();
        }
        /** @type {?} */
        const selected = this.activeMatch;
        if (selected) {
            this.parent.onSelected(this.taggingMode, selected);
            this.parent.hideResults();
        }
        return false;
    }
}
QuickNoteResults.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'quick-note-results',
                host: {
                    class: 'active',
                },
                template: `
        <novo-loading theme="line" *ngIf="isLoading && !matches.length"></novo-loading>
        <novo-list *ngIf="matches.length > 0">
            <novo-list-item
                *ngFor="let match of matches"
                (click)="selectMatch($event)"
                [class.active]="match===activeMatch"
                (mouseenter)="selectActive(match)">
                <item-content>
                    <p [innerHtml]="highlight(match.label, term)"></p>
                </item-content>
            </novo-list-item>
        </novo-list>
        <p class="picker-error" *ngIf="hasError">{{ labels.quickNoteError }}</p>
        <p class="picker-null" *ngIf="!isLoading && !matches.length && !hasError">{{ labels.quickNoteEmpty }}</p>
    `
            }] }
];
/** @nocollapse */
QuickNoteResults.ctorParameters = () => [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"] },
    { type: NovoLabelService },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectorRef"] }
];
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: elements/quick-note/QuickNote.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// Value accessor for the component (supports ngModel)
/** @type {?} */
const QUICK_NOTE_VALUE_ACCESSOR = {
    provide: _angular_forms__WEBPACK_IMPORTED_MODULE_1__["NG_VALUE_ACCESSOR"],
    useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["forwardRef"])((/**
     * @return {?}
     */
    () => QuickNoteElement)),
    multi: true,
};
class QuickNoteElement extends OutsideClick {
    /**
     * @param {?} zone
     * @param {?} element
     * @param {?} componentUtils
     */
    constructor(zone, element, componentUtils) {
        super(element);
        this.zone = zone;
        this.componentUtils = componentUtils;
        this.startupFocus = false;
        // Emitter for selects
        this.focus = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.blur = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.change = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.placeholderVisible = false;
        this._placeholderElement = null;
        // in pixels - configured by stylesheet
        this.onModelChange = (/**
         * @return {?}
         */
        () => { });
        this.onModelTouched = (/**
         * @return {?}
         */
        () => { });
        // Bind to the active change event from the OutsideClick
        this.onActiveChange.subscribe((/**
         * @param {?} active
         * @return {?}
         */
        (active) => {
            if (!active) {
                setTimeout((/**
                 * @return {?}
                 */
                () => {
                    this.hideResults();
                }));
            }
        }));
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        // Make sure we have a proper config
        if (!this.config) {
            throw new Error('No config set for QuickNote!');
        }
        // Make sure that we have triggers
        if (!this.config.triggers) {
            throw new Error('QuickNote config must supply triggers!');
        }
        // Make sure that we have options
        if (!this.config.options) {
            throw new Error('QuickNote config must supply options!');
        }
        // Allow for callers to use a custom results template class in the config
        this.resultsComponent = this.config.resultsTemplate || QuickNoteResults;
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        // Tear down the CKEditor instance
        if (this.ckeInstance) {
            this.ckeInstance.focusManager.blur(true); // Remove focus from editor
            setTimeout((/**
             * @return {?}
             */
            () => {
                this.ckeInstance.removeAllListeners();
                CKEDITOR.instances[this.ckeInstance.name].destroy();
                this.ckeInstance.destroy();
                this.ckeInstance = null;
            }));
        }
    }
    /**
     * Connect to key/mouse events from CKEditor after the editor has been initialized
     * @return {?}
     */
    ngAfterViewInit() {
        if (!CKEDITOR) {
            console.error('Make sure to include CKEditor sources in your dependencies!');
            return;
        }
        // Replace the textarea with an instance of CKEditor
        this.ckeInstance = CKEDITOR.replace(this.host.nativeElement, this.getCKEditorConfig());
        // Set initial value of the note in the editor
        this.writeValue(this.model);
        // Connect to the key event in CKEditor for showing results dropdown
        this.ckeInstance.on('key', (/**
         * @param {?} event
         * @return {?}
         */
        (event) => {
            if (!this.onKey(event.data.domEvent.$)) {
                event.cancel();
            }
        }));
        // Connect to the change event in CKEditor for debouncing user modifications
        this.ckeInstance.on('change', (/**
         * @return {?}
         */
        () => {
            // Debounce update
            if (this.debounceTimeout) {
                clearTimeout(this.debounceTimeout);
            }
            this.debounceTimeout = setTimeout((/**
             * @return {?}
             */
            () => {
                // Run within the context of this angular element since we don't need to cancel event
                this.zone.run((/**
                 * @return {?}
                 */
                () => {
                    this.onValueChange();
                }));
                this.debounceTimeout = null;
            }), 250);
        }));
        // Propagate blur events from CKEditor to the Element's listeners
        this.ckeInstance.on('blur', (/**
         * @param {?} event
         * @return {?}
         */
        (event) => {
            this.showPlaceholder();
            this.blur.emit(event);
        }));
        // Propagate blur events from CKEditor to the Element's listeners
        this.ckeInstance.on('focus', (/**
         * @param {?} event
         * @return {?}
         */
        (event) => {
            this.hidePlaceholder();
            this.focus.emit(event);
        }));
        // Show placeholder if the note is empty, after the editor is instantiated
        this.ckeInstance.on('instanceReady', (/**
         * @param {?} event
         * @return {?}
         */
        (event) => {
            this.showPlaceholder();
            // Set editor to readOnly
            if (this.config.readOnly) {
                this.ckeInstance.setReadOnly(this.config.readOnly);
            }
        }));
    }
    // Set touched on blur
    /**
     * @param {?=} event
     * @return {?}
     */
    onTouched(event) {
        this.onModelTouched();
    }
    /**
     * Handles setting the model and the view from the outside caller or the user's typing
     *
     * @param {?} model A model that has a note (html content) and references (array of objects)
     * @return {?}
     */
    writeValue(model) {
        // Set value of the model
        if (model && (model.references || model.note)) {
            this.model = {
                note: model.note || '',
                references: model.references || {},
            };
        }
        else {
            this.model = {
                note: model,
                references: {},
            };
        }
        // Set the note html value in the editor
        if (this.ckeInstance) {
            this.ckeInstance.setData(this.model.note);
        }
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.onModelChange = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.onModelTouched = fn;
    }
    /**
     * If a renderer is not provided, the QuickNote will default to using this one, an anchor tag with no href
     * @private
     * @param {?} symbol
     * @param {?} item
     * @return {?}
     */
    static defaultRenderer(symbol, item) {
        return `<a>${symbol}${item.label}</a>`;
    }
    /**
     * Returns the renderer for a given tagging mode if it exists in the config, otherwise the default.
     * @private
     * @param {?} taggingMode
     * @return {?}
     */
    getRenderer(taggingMode) {
        return this.config.renderer ? this.config.renderer[taggingMode] : QuickNoteElement.defaultRenderer;
    }
    /**
     * Called every time a keystroke is made in the editor. Listens for particular keys (e.g. UP arrow, ESC, etc.)
     * to handle certain behaviors of the picker.
     *
     * Runs within the context of the CKEditor, so actions that affect the view have to be run back inside of the
     * Angular zone of this class.
     *
     * @private
     * @param {?} event The key press event
     * @return {?} true to allow the event to occur, false to cancel the event
     */
    onKey(event) {
        if (event.key) {
            if (this.quickNoteResults) {
                // Hide results on escape key
                if (event.keyCode === KeyCodes.ESC) {
                    this.zone.run((/**
                     * @return {?}
                     */
                    () => {
                        this.hideResults();
                    }));
                    return false;
                }
                // Navigation inside the results
                if (event.keyCode === KeyCodes.UP) {
                    this.zone.run((/**
                     * @return {?}
                     */
                    () => {
                        this.quickNoteResults.instance.prevActiveMatch();
                    }));
                    return false;
                }
                if (event.keyCode === KeyCodes.DOWN) {
                    this.zone.run((/**
                     * @return {?}
                     */
                    () => {
                        this.quickNoteResults.instance.nextActiveMatch();
                    }));
                    return false;
                }
                if (event.keyCode === KeyCodes.ENTER) {
                    this.zone.run((/**
                     * @return {?}
                     */
                    () => {
                        this.quickNoteResults.instance.selectActiveMatch();
                    }));
                    return false;
                }
            }
            else {
                // Loop through all triggers and turn on tagging mode if the user just pressed a trigger character
                /** @type {?} */
                const triggers = this.config.triggers || {};
                Object.keys(triggers).forEach((/**
                 * @param {?} key
                 * @return {?}
                 */
                (key) => {
                    /** @type {?} */
                    const trigger = triggers[key] || {};
                    if (event.key === trigger) {
                        this.isTagging = true;
                        this.taggingMode = key;
                    }
                }));
            }
        }
        return true;
    }
    /**
     * Debounced method that is run in the proper Angular context when the user has modified the CKEditor.
     * After the value has been updated in CKEditor, this will propagate that change to the model and listeners.
     * @private
     * @return {?}
     */
    onValueChange() {
        // Get the html text in CKEditor
        /** @type {?} */
        let value = this.ckeInstance.getData();
        // Remove empty 'ZERO WIDTH SPACE' characters that can get added erroneously by the editor
        /** @type {?} */
        const regex = new RegExp(String.fromCharCode(8203), 'g');
        value = value.replace(regex, '');
        // Make sure that any references in the model are still valid
        this.validateReferences();
        // Possibly show results if the user has entered a search term
        this.showResults();
        // Propagate change to ngModel for form validation, and send null if the note is empty
        /** @type {?} */
        let newModel = null;
        if (value) {
            newModel = {
                note: value,
                references: this.model.references,
            };
        }
        // Inform listeners to the ngModel change event that something has changed
        this.onModelChange(newModel);
        // Inform listeners of the `@Output() change` event that the model has been updated
        this.change.emit(newModel);
        // Inform listeners to the ngModel touched event that something has changed
        this.onTouched();
    }
    /**
     * Creates an instance of the results (called popup) and adds all the bindings to that instance.
     * @private
     * @return {?}
     */
    showResults() {
        if (this.isTagging) {
            /** @type {?} */
            const searchTerm = this.getSearchTerm();
            if (searchTerm.length) {
                // Update Matches
                if (this.quickNoteResults) {
                    // Update existing list
                    this.quickNoteResults.instance.term = {
                        searchTerm,
                        taggingMode: this.taggingMode,
                    };
                }
                else {
                    // Create the results DOM element
                    this.quickNoteResults = this.componentUtils.append(this.resultsComponent, this.results);
                    this.quickNoteResults.instance.parent = this;
                    this.quickNoteResults.instance.config = this.config;
                    this.quickNoteResults.instance.term = {
                        searchTerm,
                        taggingMode: this.taggingMode,
                    };
                    this.positionResultsDropdown();
                }
            }
            else if (this.quickNoteResults) {
                this.quickNoteResults.destroy();
                this.quickNoteResults = null;
            }
            // Tell the OutsideClick base class to start listening for an outside clicks
            this.toggleActive(null, true);
        }
    }
    /**
     * Deletes the picker results from the DOM.
     * @private
     * @return {?}
     */
    hideResults() {
        this.isTagging = false;
        if (this.quickNoteResults) {
            this.quickNoteResults.destroy();
            this.quickNoteResults = null;
        }
    }
    /**
     * Handles the selection from the QuickNoteResults Component. Called by the QuickNoteResults component on it's
     * parent (this element).
     *
     * @private
     * @param {?} taggingMode - type of tags we are looking for
     * @param {?} selected - selected object from the picker that has a label and value
     * @return {?}
     */
    onSelected(taggingMode, selected) {
        // Turn off tagging
        this.isTagging = false;
        // Replace searchTerm with link
        /** @type {?} */
        const symbol = this.config.triggers[taggingMode];
        /** @type {?} */
        const renderer = this.getRenderer(taggingMode);
        /** @type {?} */
        const renderedText = renderer(symbol, selected);
        this.replaceWordAtCursor(renderedText);
        // Add the new reference, if it doesn't already exist
        this.model.references = this.model.references || {};
        this.model.references[taggingMode] = this.model.references[taggingMode] || [];
        /** @type {?} */
        const matchingItems = this.model.references[taggingMode].filter((/**
         * @param {?} item
         * @return {?}
         */
        (item) => JSON.stringify(item) === JSON.stringify(selected)));
        if (matchingItems.length === 0) {
            this.model.references[taggingMode].push(selected);
        }
        // Update the quick note with the changes due to the user's selection of an item in the dropdown
        this.onValueChange();
    }
    /**
     * Convenience method that gets the current word that the cursor is on, minus the tag.
     * Also, trims any whitespace before/after the term to aid in searching.
     * @private
     * @return {?}
     */
    getSearchTerm() {
        /** @type {?} */
        let word = this.getWordAtCursor().trim();
        if (this.isTagging) {
            /** @type {?} */
            const symbol = this.config.triggers[this.taggingMode];
            if (!word.includes(symbol)) {
                this.hideResults();
                return '';
            }
            word = word.slice(word.indexOf(symbol) + symbol.length);
        }
        return word;
    }
    /**
     * Gets the current word that the cursor is on CKEditor. Current word starts at the beginning of the line or a
     * tag character if we are in tagging mode. Current word ends at the end of the line or an empty space.
     *
     * @private
     * @return {?} plain text string (removes all html formatting)
     */
    getWordAtCursor() {
        /** @type {?} */
        const range = this.ckeInstance.getSelection().getRanges()[0];
        /** @type {?} */
        const start = range.startContainer;
        if (start.type === CKEDITOR.NODE_TEXT && range.startOffset) {
            /** @type {?} */
            const text = start.getText();
            /** @type {?} */
            const symbol = this.config.triggers[this.taggingMode];
            /** @type {?} */
            let wordStart = text.lastIndexOf(symbol, range.startOffset - 1);
            if (wordStart > 0) {
                /** @type {?} */
                const beforeSymbol = text.charAt(wordStart - 1);
                // We don't want to trigger the lookup call unless the symbol was preceded by whitespace
                if (beforeSymbol !== '\u200B' && /\S/.test(beforeSymbol)) {
                    return '';
                }
            }
            else if (start.hasPrevious() && /\S$/.test(start.getPrevious().getText())) {
                // When wordStart is <= 0, we need to check the previous node's text to see if it ended with whitespace or not
                return '';
            }
            /** @type {?} */
            let wordEnd = text.indexOf(' ', range.startOffset + 1);
            if (wordStart === -1) {
                wordStart = 0;
            }
            if (wordEnd === -1) {
                wordEnd = text.length;
            }
            return text.substring(wordStart, wordEnd);
        }
        // Selection starts at the 0 index of the text node or there's no previous text node in contents
        return '';
    }
    /**
     * Replaces the word that the user is on with the given html.
     *
     * CKEditor gives us access to the current line of html in the editor, so we replace the content of
     * the line, replacing only the current word.
     * @private
     * @param {?} newWord
     * @return {?}
     */
    replaceWordAtCursor(newWord) {
        /** @type {?} */
        const originalWord = this.getWordAtCursor().trim();
        /** @type {?} */
        const range = this.ckeInstance.getSelection().getRanges()[0];
        /** @type {?} */
        const start = range.startContainer;
        /** @type {?} */
        const parentNode = start.getParent();
        if (start.type === CKEDITOR.NODE_TEXT && parentNode) {
            /** @type {?} */
            const line = parentNode.getHtml();
            /** @type {?} */
            const index = line.lastIndexOf(originalWord);
            if (index >= 0) {
                // Add a space after the replaced word so that multiple references can be added back to back
                /** @type {?} */
                const newLine = line.substring(0, index) + newWord + ' ' + line.substring(index + originalWord.length);
                parentNode.setHtml(newLine);
                // Place selection at the end of the line
                range.moveToPosition(parentNode, CKEDITOR.POSITION_BEFORE_END);
                this.ckeInstance.getSelection().selectRanges([range]);
            }
        }
    }
    /**
     * Returns current references, minus any from the model that have been removed from the editor.
     * @private
     * @return {?}
     */
    validateReferences() {
        /** @type {?} */
        let html = this.ckeInstance.document.getBody().getHtml();
        // CKEditor stopped supporting the config.forceSimpleAmpersand setting, so we have to convert '&amp;' to '&'
        // when we pull html from the editor - see: https://dev.ckeditor.com/ticket/13723
        /** @type {?} */
        const ampRegex = new RegExp('&amp;', 'g');
        html = html.replace(ampRegex, '&');
        Object.keys(this.model.references).forEach((/**
         * @param {?} taggingMode
         * @return {?}
         */
        (taggingMode) => {
            /** @type {?} */
            const array = this.model.references[taggingMode] || [];
            /** @type {?} */
            const symbol = this.config.triggers[taggingMode];
            /** @type {?} */
            const renderer = this.getRenderer(taggingMode);
            this.model.references[taggingMode] = array.filter((/**
             * @param {?} item
             * @return {?}
             */
            (item) => {
                /** @type {?} */
                const renderedText = renderer(symbol, item);
                return html.includes(renderedText);
            }));
            // If no references, then delete the key
            if (this.model.references[taggingMode].length === 0) {
                delete this.model.references[taggingMode];
            }
        }));
    }
    /**
     * Configures the CKEditor for QuickNote functionality.
     *
     * Sets the height of the CKEditor dynamically to the height of the wrapper upon initialization.
     * Removes the toolbar on the bottom and configures a slimmed down version of the toolbar.
     * Removes plugins and turns off setting to allow browser based spell checking.
     * @private
     * @return {?}
     */
    getCKEditorConfig() {
        // Use the height of the wrapper element to set the initial height of the editor, then
        // set it to 100% to allow the editor to resize using the grippy.
        /** @type {?} */
        const editorHeight = this.wrapper.nativeElement.clientHeight - QuickNoteElement.TOOLBAR_HEIGHT;
        this.wrapper.nativeElement.style.setProperty('height', '100%');
        return {
            enterMode: CKEDITOR.ENTER_BR,
            shiftEnterMode: CKEDITOR.ENTER_P,
            disableNativeSpellChecker: false,
            height: editorHeight,
            startupFocus: this.startupFocus,
            removePlugins: 'liststyle,tabletools,contextmenu',
            // allows browser based spell checking
            toolbar: [
                {
                    name: 'basicstyles',
                    items: [
                        'Styles',
                        'FontSize',
                        'Bold',
                        'Italic',
                        'Underline',
                        'TextColor',
                        '-',
                        'NumberedList',
                        'BulletedList',
                        'Outdent',
                        'Indent',
                        'Link',
                    ],
                },
            ],
        };
    }
    /**
     * Returns the current screen position of the cursor in CKEditor, accounting for any scrolling in the editor.
     * @private
     * @return {?}
     */
    getCursorPosition() {
        /** @type {?} */
        const range = this.ckeInstance.getSelection().getRanges()[0];
        /** @type {?} */
        const parentElement = range.startContainer.$.parentElement;
        /** @type {?} */
        const editorElement = this.ckeInstance.editable().$;
        // Since the editor is a text node in the DOM that does not know about it's position, a temporary element has to
        // be inserted in order to locate the cursor position.
        /** @type {?} */
        const cursorElement = document.createElement('img');
        cursorElement.setAttribute('src', 'null');
        cursorElement.setAttribute('width', '0');
        cursorElement.setAttribute('height', '0');
        parentElement.appendChild(cursorElement);
        /** @type {?} */
        const cursorPosition = {
            top: cursorElement.offsetTop - editorElement.scrollTop,
            left: cursorElement.offsetLeft - editorElement.scrollLeft,
        };
        cursorElement.remove();
        return cursorPosition;
    }
    /**
     * Positions the results dropdown based on the location of the cursor in the text field
     * @private
     * @return {?}
     */
    positionResultsDropdown() {
        /** @type {?} */
        const MIN_MARGIN_TOP = QuickNoteElement.TOOLBAR_HEIGHT * 2;
        /** @type {?} */
        const MAX_MARGIN_TOP = this.getContentHeight() + QuickNoteElement.TOOLBAR_HEIGHT;
        /** @type {?} */
        const cursorPosition = this.getCursorPosition();
        /** @type {?} */
        let marginTop = cursorPosition.top + QuickNoteElement.TOOLBAR_HEIGHT;
        // Check that the margin is within the visible bounds
        marginTop = Math.max(marginTop, MIN_MARGIN_TOP);
        marginTop = Math.min(marginTop, MAX_MARGIN_TOP);
        // Set the margin-top of the dropdown
        this.quickNoteResults.instance.element.nativeElement.style.setProperty('margin-top', marginTop + 'px');
    }
    /**
     * Returns the height in pixels of the content area - the text that the user has entered.
     * @private
     * @return {?}
     */
    getContentHeight() {
        /** @type {?} */
        let contentHeight = 0;
        if (this.ckeInstance.ui &&
            this.ckeInstance.ui.contentsElement &&
            this.ckeInstance.ui.contentsElement.$ &&
            this.ckeInstance.ui.contentsElement.$.style) {
            /** @type {?} */
            const cssText = this.ckeInstance.ui.contentsElement.$.style.cssText;
            if (cssText.indexOf('height: ') !== -1) {
                /** @type {?} */
                let height = cssText.split('height: ')[1];
                height = height.split('px')[0];
                contentHeight = parseInt(height, 10);
            }
        }
        return contentHeight;
    }
    /**
     * Show the placeholder text if the editor is empty
     * @private
     * @return {?}
     */
    showPlaceholder() {
        if (!this.ckeInstance.getData() && !this.startupFocus) {
            this.ckeInstance
                .editable()
                .getParent()
                .$.appendChild(this.placeholderElement);
            this.placeholderVisible = true;
        }
    }
    /**
     * Hide the placeholder text by removing the placeholder element from the DOM
     * @private
     * @return {?}
     */
    hidePlaceholder() {
        if (this.placeholderVisible) {
            this.ckeInstance
                .editable()
                .getParent()
                .$.removeChild(this.placeholderElement);
            this.placeholderVisible = false;
        }
    }
    /**
     * Get or create the single placeholder object that is constructed only when needed.
     * @private
     * @return {?}
     */
    get placeholderElement() {
        if (!this._placeholderElement) {
            this._placeholderElement = document.createElement('div');
            this._placeholderElement.className = 'placeholder';
            this._placeholderElement.style.cssText =
                'margin: 20px; color: #AAAAAA; font-family: sans-serif; font-size: 13px; line-height: 20px; position: absolute; top: 0';
            this._placeholderElement.textContent = this.placeholder;
        }
        return this._placeholderElement;
    }
}
QuickNoteElement.TOOLBAR_HEIGHT = 40; // in pixels - configured by stylesheet
QuickNoteElement.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'novo-quick-note',
                providers: [QUICK_NOTE_VALUE_ACCESSOR],
                template: `
    <div class="quick-note-wrapper" #wrapper><textarea #host></textarea> <span #results></span></div>
  `
            }] }
];
/** @nocollapse */
QuickNoteElement.ctorParameters = () => [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgZone"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"] },
    { type: ComponentUtils }
];
QuickNoteElement.propDecorators = {
    wrapper: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"], args: ['wrapper', { static: true },] }],
    host: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"], args: ['host', { static: true },] }],
    results: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"], args: ['results', { read: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewContainerRef"], static: true },] }],
    config: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    startupFocus: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    placeholder: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    focus: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    blur: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    change: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }]
};
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: elements/quick-note/QuickNote.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NovoQuickNoteModule {
}
NovoQuickNoteModule.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                imports: [_angular_common__WEBPACK_IMPORTED_MODULE_6__["CommonModule"], _angular_forms__WEBPACK_IMPORTED_MODULE_1__["FormsModule"], NovoLoadingModule, NovoListModule],
                declarations: [QuickNoteElement, QuickNoteResults],
                exports: [QuickNoteElement, QuickNoteResults],
                entryComponents: [QuickNoteResults],
            },] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: elements/header/Header.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NovoHeaderSpacer {
}
NovoHeaderSpacer.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'header-spacer',
                template: `
    <ng-content></ng-content>
  `
            }] }
];
class NovoUtilsComponent {
}
NovoUtilsComponent.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'utils',
                template: `
    <ng-content></ng-content>
  `
            }] }
];
class NovoUtilActionComponent {
}
NovoUtilActionComponent.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'util-action, novo-action',
                template: `
    <button theme="icon" [icon]="icon" [attr.inverse]="inverse" [disabled]="disabled">
      <ng-content></ng-content>
    </button>
  `
            }] }
];
NovoUtilActionComponent.propDecorators = {
    icon: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    inverse: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    disabled: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }]
};
if (false) {}
class NovoHeaderComponent {
    constructor() {
        this.headerClass = 'novo-header';
        this.condensed = false;
        this.inverse = 'inverse';
    }
    /**
     * @param {?} theme
     * @return {?}
     */
    set theme(theme) {
        this._theme = theme;
        this.inverse = theme === 'white' || theme === 'off-white' || theme === 'light' ? undefined : 'inverse';
    }
    /**
     * @return {?}
     */
    get theme() {
        return this._theme;
    }
    /**
     * @param {?} icon
     * @return {?}
     */
    set icon(icon) {
        this._icon = `bhi-${icon}`;
    }
    /**
     * @return {?}
     */
    get icon() {
        return this._icon;
    }
}
NovoHeaderComponent.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'header[theme]',
                template: `
    <section>
      <div class="header-title">
        <ng-container *ngIf="title">
          <i *ngIf="icon" class="header-icon" [ngClass]="icon"></i>
          <div class="header-titles">
            <h1>{{ title }}</h1>
            <small *ngIf="subTitle">{{ subTitle }}</small>
          </div>
        </ng-container>
        <ng-container *ngIf="!title">
          <ng-content select="novo-icon, [novo-icon]"></ng-content>
          <div class="header-titles">
            <ng-content select="h1, h2, h3, h4, h5, h6, small, [novo-title], [novo-subtitle]"></ng-content>
          </div>
        </ng-container>
      </div>
      <ng-content select="section"></ng-content>
      <span flex></span>
      <ng-content select="utils"></ng-content>
      <ng-content select="novo-action"></ng-content>
    </section>
    <ng-content></ng-content>
  `
            }] }
];
NovoHeaderComponent.propDecorators = {
    headerClass: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostBinding"], args: ['class',] }],
    condensed: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostBinding"], args: ['class.condensed',] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    title: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    subTitle: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    theme: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostBinding"], args: ['attr.theme',] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    icon: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }]
};
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: elements/header/Header.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NovoHeaderModule {
}
NovoHeaderModule.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                imports: [_angular_common__WEBPACK_IMPORTED_MODULE_6__["CommonModule"], NovoButtonModule],
                declarations: [NovoHeaderComponent, NovoUtilActionComponent, NovoUtilsComponent, NovoHeaderSpacer],
                exports: [NovoHeaderComponent, NovoUtilActionComponent, NovoUtilsComponent, NovoHeaderSpacer],
            },] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: elements/tip-well/TipWell.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NovoTipWellElement {
    /**
     * @param {?} labels
     * @param {?} sanitizer
     */
    constructor(labels, sanitizer) {
        this.labels = labels;
        this.sanitizer = sanitizer;
        this.button = true;
        this.sanitize = true;
        this.confirmed = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.isActive = true;
        this.isActive = true;
        // Check if localStorage is enabled
        this.isLocalStorageEnabled = ((/**
         * @return {?}
         */
        () => {
            /** @type {?} */
            let isEnabled = false;
            if (typeof localStorage === 'object') {
                try {
                    localStorage.setItem('lsTest', '1');
                    localStorage.removeItem('lsTest');
                    isEnabled = true;
                }
                catch (e) {
                    console.warn('This web browser does not support storing settings locally. In Safari, the most common cause of this is using "Private Browsing Mode". Some settings may not save or some features may not work properly for you.');
                }
            }
            return isEnabled;
        }))();
    }
    // Trusts the HTML in order to show CSS styles
    /**
     * @return {?}
     */
    get tipWithStyles() {
        if (!this._tipWithStyles || this._lastTipStyled !== this.tip) {
            this._tipWithStyles = this.sanitizer.bypassSecurityTrustHtml(this.tip);
            this._lastTipStyled = this.tip;
        }
        return this._tipWithStyles;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.tip = this.tip || '';
        this.buttonText = this.buttonText || this.labels.okGotIt;
        this.button = typeof this.button === 'string' ? this.button === 'true' : this.button;
        this.icon = this.icon || null;
        // Set a (semi) unique name for the tip-well
        this.name = this.name || Math.round(Math.random() * 100);
        this.localStorageKey = `novo-tw_${this.name}`;
        // Check localStorage for state
        if (this.isLocalStorageEnabled) {
            /** @type {?} */
            const storedValue = JSON.parse(localStorage.getItem(this.localStorageKey));
            this.isActive = storedValue !== false;
        }
    }
    /**
     * @return {?}
     */
    hideTip() {
        if (this.isLocalStorageEnabled) {
            localStorage.setItem(this.localStorageKey, JSON.stringify(false));
        }
        this.isActive = false;
        this.confirmed.emit();
    }
}
NovoTipWellElement.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'novo-tip-well',
                template: `
    <div *ngIf="isActive">
      <div>
        <i class="bhi-{{ icon }}" *ngIf="icon" [attr.data-automation-id]="'novo-tip-well-icon-' + name"></i>
        <p *ngIf="sanitize" [attr.data-automation-id]="'novo-tip-well-tip-' + name">{{ tip }}</p>
        <p *ngIf="!sanitize" [attr.data-automation-id]="'novo-tip-well-tip-' + name" [innerHTML]="tipWithStyles"></p>
      </div>
      <button theme="dialogue" (click)="hideTip()" *ngIf="button" [attr.data-automation-id]="'novo-tip-well-button-' + name">
        {{ buttonText }}
      </button>
    </div>
  `,
                host: {
                    '[class.active]': 'isActive',
                }
            }] }
];
/** @nocollapse */
NovoTipWellElement.ctorParameters = () => [
    { type: NovoLabelService },
    { type: _angular_platform_browser__WEBPACK_IMPORTED_MODULE_15__["DomSanitizer"] }
];
NovoTipWellElement.propDecorators = {
    name: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    tip: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    buttonText: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    button: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    icon: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    sanitize: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    confirmed: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }]
};
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: elements/tip-well/TipWell.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NovoTipWellModule {
}
NovoTipWellModule.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                imports: [_angular_common__WEBPACK_IMPORTED_MODULE_6__["CommonModule"], NovoButtonModule],
                declarations: [NovoTipWellElement],
                exports: [NovoTipWellElement],
            },] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: elements/modal/Modal.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NovoModalModule {
}
NovoModalModule.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                imports: [_angular_common__WEBPACK_IMPORTED_MODULE_6__["CommonModule"], NovoButtonModule],
                declarations: [NovoModalContainerElement, NovoModalElement, NovoModalNotificationElement],
                exports: [NovoModalElement, NovoModalNotificationElement],
                entryComponents: [NovoModalContainerElement],
            },] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: elements/form/Form.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NovoFormModule {
}
NovoFormModule.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                imports: [
                    _angular_common__WEBPACK_IMPORTED_MODULE_6__["CommonModule"],
                    _angular_forms__WEBPACK_IMPORTED_MODULE_1__["ReactiveFormsModule"],
                    NovoRadioModule,
                    NovoTilesModule,
                    NovoSelectModule,
                    NovoPickerModule,
                    NovoChipsModule,
                    NovoDatePickerModule,
                    NovoTimePickerModule,
                    NovoNovoCKEditorModule,
                    NovoFormExtrasModule,
                    NovoQuickNoteModule,
                    NovoDateTimePickerModule,
                    NovoHeaderModule,
                    NovoTooltipModule,
                    NovoDragulaModule,
                    angular2_text_mask__WEBPACK_IMPORTED_MODULE_20__["TextMaskModule"],
                    NovoTipWellModule,
                    NovoModalModule,
                    NovoButtonModule,
                    NovoAceEditorModule,
                    NovoCommonModule,
                ],
                declarations: [
                    NovoAutoSize,
                    NovoControlElement,
                    NovoDynamicFormElement,
                    NovoFormElement,
                    NovoFieldsetElement,
                    NovoFieldsetHeaderElement,
                    ControlConfirmModal,
                    ControlPromptModal,
                    NovoControlGroup,
                    NovoControlTemplates,
                ],
                exports: [
                    NovoAutoSize,
                    NovoDynamicFormElement,
                    NovoControlElement,
                    NovoFormElement,
                    NovoFieldsetHeaderElement,
                    NovoControlGroup,
                    NovoControlTemplates,
                ],
                entryComponents: [ControlConfirmModal, ControlPromptModal],
                providers: [NovoTemplateService],
            },] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: elements/icon/Icon.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NovoIconComponent {
    /**
     * @param {?} element
     * @param {?} cdr
     */
    constructor(element, cdr) {
        this.element = element;
        this.cdr = cdr;
        this.size = 'medium';
        this.role = 'img';
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set alt(value) {
        this.ariaLabel = value;
    }
    /**
     * @return {?}
     */
    get alt() {
        return this.ariaLabel;
    }
    /**
     * @param {?} iconName
     * @return {?}
     */
    set name(iconName) {
        this.iconName = `bhi-${iconName}`;
    }
    /**
     * @return {?}
     */
    get name() {
        return this.iconName;
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        if (this.element.nativeElement.textContent.trim()) {
            Promise.resolve().then((/**
             * @return {?}
             */
            () => {
                this.name = this.element.nativeElement.textContent.trim();
                this.cdr.markForCheck();
            }));
        }
    }
}
NovoIconComponent.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'novo-icon',
                changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectionStrategy"].OnPush,
                template: `
        <i [class]="iconName"><span><ng-content></ng-content></span></i>
    `
            }] }
];
/** @nocollapse */
NovoIconComponent.ctorParameters = () => [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectorRef"] }
];
NovoIconComponent.propDecorators = {
    raised: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostBinding"], args: ['attr.raised',] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    size: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostBinding"], args: ['attr.size',] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    theme: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostBinding"], args: ['attr.theme',] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    color: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostBinding"], args: ['attr.color',] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    role: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostBinding"], args: ['attr.role',] }],
    ariaLabel: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostBinding"], args: ['attr.aria-label',] }],
    alt: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    name: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }]
};
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: elements/icon/Icon.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NovoIconModule {
}
NovoIconModule.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                exports: [NovoIconComponent],
                declarations: [NovoIconComponent],
            },] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: elements/multi-picker/MultiPicker.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// Value accessor for the component (supports ngModel)
/** @type {?} */
const CHIPS_VALUE_ACCESSOR$2 = {
    provide: _angular_forms__WEBPACK_IMPORTED_MODULE_1__["NG_VALUE_ACCESSOR"],
    useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["forwardRef"])((/**
     * @return {?}
     */
    () => NovoMultiPickerElement)),
    multi: true,
};
/**
 * @record
 */
function Item() { }
if (false) {}
class NovoMultiPickerElement {
    /**
     * @param {?} element
     * @param {?} labels
     */
    constructor(element, labels) {
        this.element = element;
        this.labels = labels;
        this.placeholder = '';
        this.changed = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.focus = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.blur = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.items = [];
        this._items = new rxjs__WEBPACK_IMPORTED_MODULE_11__["ReplaySubject"](1);
        this.selected = null;
        this.config = {};
        // private data model
        this._value = {};
        this.notShown = {};
        this.onModelChange = (/**
         * @return {?}
         */
        () => { });
        this.onModelTouched = (/**
         * @return {?}
         */
        () => { });
        this.chipsCount = 4;
    }
    /**
     * @return {?}
     */
    get value() {
        return this._value;
    }
    /**
     * @param {?} selectedItems
     * @return {?}
     */
    set value(selectedItems) {
        if (selectedItems) {
            this.types.forEach((/**
             * @param {?} x
             * @return {?}
             */
            (x) => (this._value[x.value] = selectedItems[x.value])));
        }
        else {
            this._value = {};
            this.types.forEach((/**
             * @param {?} x
             * @return {?}
             */
            (x) => (this._value[x.value] = [])));
        }
        this.changed.emit(selectedItems);
        this.onModelChange(selectedItems);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.selectAllOption = this.source.selectAllOption || false;
        this.chipsCount = this.source.chipsCount || 4;
        this.strictRelationship = this.source.strictRelationship || false;
        this.setupOptions();
    }
    /**
     * @return {?}
     */
    clearValue() {
        this.types.forEach((/**
         * @param {?} type
         * @return {?}
         */
        (type) => this.modifyAllOfType(type.value, 'unselect')));
        this.items = [];
        this._items.next(this.items);
        this.setInitialValue(null);
        this.onModelChange(this.value);
    }
    /**
     * @param {?} event
     * @param {?} item
     * @return {?}
     */
    removeFromDisplay(event, item) {
        this.remove(true, item);
        this.modifyAffectedParentsOrChildren(false, item);
    }
    /**
     * @return {?}
     */
    setupOptions() {
        this.options = this.source.options || [];
        this._options = [];
        if (this.options) {
            this.options.forEach((/**
             * @param {?} option
             * @return {?}
             */
            (option) => {
                /** @type {?} */
                const formattedOption = this.setupOptionsByType(option);
                this._options.push(formattedOption);
            }));
        }
        this.source.options = this._options;
    }
    /**
     * @param {?} section
     * @return {?}
     */
    setupOptionsByType(section) {
        /** @type {?} */
        const formattedSection = {
            type: section.type,
            label: section.label || section.type,
        };
        formattedSection.data = section.data.map((/**
         * @param {?} item
         * @return {?}
         */
        (item) => {
            return this.formatOption(section, item);
        }));
        if (this.selectAllOption) {
            /** @type {?} */
            const selectAll = this.createSelectAllOption(section);
            formattedSection.data.splice(0, 0, selectAll);
        }
        formattedSection.originalData = formattedSection.data.slice();
        return formattedSection;
    }
    /**
     * @param {?} section
     * @param {?} item
     * @return {?}
     */
    formatOption(section, item) {
        /** @type {?} */
        const obj = {
            value: section.field ? item[section.field] : item.value || item,
            label: section.format ? Helpers.interpolate(section.format, item) : item.label || String(item.value || item),
            type: section.type,
            checked: undefined,
            isParentOf: section.isParentOf,
            isChildOf: section.isChildOf,
        };
        if (obj.isChildOf) {
            obj[section.isChildOf] = item[section.isChildOf];
        }
        return obj;
    }
    /**
     * @param {?} section
     * @return {?}
     */
    createSelectAllOption(section) {
        /** @type {?} */
        const selectAll = {
            value: 'ALL',
            label: `All ${section.type}`,
            type: section.type,
            checked: this.model && this.model.length && this.model.indexOf('ALL') !== -1,
            isParentOf: section.isParentOf,
            isChildOf: section.isChildOf,
        };
        if (section.isChildOf) {
            /** @type {?} */
            const allParents = section.data.reduce((/**
             * @param {?} accum
             * @param {?} next
             * @return {?}
             */
            (accum, next) => {
                return accum.concat(next[section.isChildOf]);
            }), []);
            selectAll[section.isChildOf] = allParents;
        }
        return selectAll;
    }
    /**
     * @return {?}
     */
    deselectAll() {
        this.selected = null;
    }
    /**
     * @param {?} event
     * @param {?} item
     * @return {?}
     */
    select(event, item) {
        this.blur.emit(event);
        this.deselectAll();
        this.selected = item;
    }
    /**
     * @param {?} e
     * @return {?}
     */
    onFocus(e) {
        this.element.nativeElement.classList.add('selected');
        this.focus.emit(e);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    clickOption(event) {
        if (event && !(event instanceof Event)) {
            if (event.checked === false) {
                this.remove(null, event);
            }
            else {
                this.add(event);
            }
            this.modifyAffectedParentsOrChildren(event.checked, event);
            // Set focus on the picker
            /** @type {?} */
            const input = this.element.nativeElement.querySelector('novo-picker > input');
            if (input) {
                input.focus();
            }
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    add(event) {
        if (event.value === 'ALL') {
            this.modifyAllOfType(event.type, 'select');
        }
        else {
            this.updateDisplayItems(event, 'add');
            this.value[event.type].push(event.value);
            this.updateAllItemState(event.type);
            this.triggerValueUpdate();
        }
        this.updateParentOrChildren(event, 'select');
        this.select(null, event);
    }
    /**
     * @param {?} type
     * @return {?}
     */
    updateAllItemState(type) {
        /** @type {?} */
        const allOfType = this.getAllOfType(type);
        /** @type {?} */
        const allOfTypeSelected = this.allItemsSelected(allOfType, type);
        if (allOfTypeSelected) {
            this.selectAll(allOfType, type);
        }
        return { allOfType, allOfTypeSelected };
    }
    /**
     * @param {?} allOfType
     * @param {?} status
     * @return {?}
     */
    setIndeterminateState(allOfType, status) {
        if (!this.selectAllOption) {
            return;
        }
        /** @type {?} */
        const allItem = allOfType[0];
        allItem.indeterminate = status;
    }
    /**
     * @param {?} item
     * @param {?} action
     * @return {?}
     */
    updateDisplayItems(item, action) {
        /** @type {?} */
        const adding = action === 'add';
        if (adding) {
            this.items.push(item);
        }
        else {
            if (this.items.indexOf(item) > -1) {
                this.items.splice(this.items.indexOf(item), 1);
            }
        }
        this.updateDisplayText(this.items);
        this._items.next(this.items);
    }
    /**
     * @param {?} items
     * @return {?}
     */
    updateDisplayText(items) {
        this.notShown = [];
        /** @type {?} */
        const notShown = items.slice(this.chipsCount);
        if (notShown.length > 0) {
            this.types.forEach((/**
             * @param {?} type
             * @return {?}
             */
            (type) => {
                /** @type {?} */
                let count;
                /** @type {?} */
                const selectedOfType = notShown.filter((/**
                 * @param {?} x
                 * @return {?}
                 */
                (x) => x.type === type.value));
                if (selectedOfType.length === 1 && selectedOfType[0].value === 'ALL') {
                    count = this.getAllOfType(type.value).length - 1;
                }
                else {
                    count = selectedOfType.length;
                }
                /** @type {?} */
                const displayType = count === 1 ? type.singular : type.plural || type.value;
                if (count > 0) {
                    this.notShown.push({ type: displayType, count });
                }
            }));
        }
    }
    /**
     * @param {?} event
     * @param {?} item
     * @return {?}
     */
    remove(event, item) {
        /** @type {?} */
        let triggeredByEvent;
        if (event) {
            triggeredByEvent = true;
        }
        /** @type {?} */
        const itemToRemove = item;
        if (itemToRemove.value === 'ALL') {
            triggeredByEvent = false;
            this.modifyAllOfType(itemToRemove.type, 'unselect');
        }
        else if (this.allOfTypeSelected(itemToRemove.type)) {
            this.handleRemoveItemIfAllSelected(itemToRemove);
        }
        this.removeItem(item, triggeredByEvent);
    }
    /**
     * @param {?} item
     * @param {?=} triggeredByEvent
     * @return {?}
     */
    removeItem(item, triggeredByEvent) {
        item.checked = false;
        this.deselectAll();
        this.removeValue(item);
        if (item.value !== 'ALL') {
            this.updateParentOrChildren(item, 'unselect');
        }
        if (triggeredByEvent) {
            this.modifyAffectedParentsOrChildren(false, item);
        }
    }
    /**
     * @param {?} item
     * @return {?}
     */
    removeValue(item) {
        /** @type {?} */
        const updatedValues = this.value[item.type].filter((/**
         * @param {?} x
         * @return {?}
         */
        (x) => x !== item.value));
        this.value[item.type] = updatedValues;
        this.triggerValueUpdate();
        this.updateDisplayItems(item, 'remove');
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onKeyDown(event) {
        if (event.keyCode === KeyCodes.BACKSPACE) {
            if (event.target && event.target.value.length === 0 && this.items.length) {
                if (event) {
                    event.stopPropagation();
                    event.preventDefault();
                }
                if (this.selected) {
                    this.remove(null, this.selected);
                }
                else {
                    this.select(event, this.items[this.items.length - 1]);
                }
            }
        }
    }
    /**
     * @param {?} type
     * @return {?}
     */
    allOfTypeSelected(type) {
        return this.items.filter((/**
         * @param {?} x
         * @return {?}
         */
        (x) => x.type === type && x.value === 'ALL')).length > 0;
    }
    /**
     * @param {?} type
     * @param {?} action
     * @return {?}
     */
    modifyAllOfType(type, action) {
        /** @type {?} */
        const selecting = action === 'select';
        /** @type {?} */
        const allOfType = this.getAllOfType(type);
        allOfType.forEach((/**
         * @param {?} item
         * @return {?}
         */
        (item) => {
            item.checked = selecting;
            item.indeterminate = false;
        }));
        if (selecting) {
            this.selectAll(allOfType, type);
        }
        else {
            this.items = [...this.items.filter((/**
                 * @param {?} x
                 * @return {?}
                 */
                (x) => x.type !== type))];
            this._items.next(this.items);
            this.value[type] = [];
        }
        if (this.selectAllOption) {
            this.updateAllParentsOrChildren(allOfType[0], action);
        }
        this.triggerValueUpdate();
    }
    /**
     * @return {?}
     */
    triggerValueUpdate() {
        /** @type {?} */
        const updatedObject = {};
        this.types.forEach((/**
         * @param {?} x
         * @return {?}
         */
        (x) => (updatedObject[x.value] = this.value[x.value])));
        this.value = updatedObject;
    }
    /**
     * @param {?} allOfType
     * @param {?} type
     * @return {?}
     */
    selectAll(allOfType, type) {
        if (!this.selectAllOption) {
            return;
        }
        allOfType[0].checked = true;
        /** @type {?} */
        const values = allOfType.map((/**
         * @param {?} i
         * @return {?}
         */
        (i) => {
            return i.value;
        }));
        // remove 'ALL' value
        values.splice(0, 1);
        this.value[type] = values;
        /** @type {?} */
        const updatedItems = this.items.filter((/**
         * @param {?} x
         * @return {?}
         */
        (x) => x.type !== type));
        this.items = updatedItems;
        this.updateDisplayItems(allOfType[0], 'add');
    }
    /**
     * @param {?} item
     * @return {?}
     */
    handleRemoveItemIfAllSelected(item) {
        if (!this.selectAllOption) {
            return;
        }
        /** @type {?} */
        const type = item.type;
        /** @type {?} */
        const allOfType = this.getAllOfType(type);
        /** @type {?} */
        const allItem = allOfType[0];
        this.removeItem(allItem);
        allItem.indeterminate = true;
        /** @type {?} */
        const selectedItems = allOfType.filter((/**
         * @param {?} i
         * @return {?}
         */
        (i) => i.checked === true));
        this.items = [...this.items, ...selectedItems];
        /** @type {?} */
        const values = selectedItems.map((/**
         * @param {?} i
         * @return {?}
         */
        (i) => {
            return i.value;
        }));
        this.value[type] = [...values];
    }
    /**
     * @param {?} event
     * @return {?}
     */
    handleOutsideClick(event) {
        // If the elements doesn't contain the target element, it is an outside click
        if (!this.element.nativeElement.contains(event.target)) {
            this.blur.emit(event);
            this.deselectAll();
        }
    }
    /**
     * @param {?} type
     * @return {?}
     */
    getAllOfType(type) {
        return this._options.filter((/**
         * @param {?} x
         * @return {?}
         */
        (x) => x.type === type))[0].originalData;
    }
    /**
     * @param {?} item
     * @param {?} action
     * @return {?}
     */
    updateParentOrChildren(item, action) {
        if (this.strictRelationship && item.isParentOf) {
            this.updateChildrenValue(item, action);
        }
        else if (item.isChildOf && this.selectAllOption) {
            this.updateParentValue(item, action);
        }
    }
    /**
     * @param {?} selecting
     * @param {?} itemChanged
     * @return {?}
     */
    modifyAffectedParentsOrChildren(selecting, itemChanged) {
        if (!itemChanged.isChildOf && !itemChanged.isParentOf) {
            return;
        }
        /** @type {?} */
        const parent = this.types.filter((/**
         * @param {?} x
         * @return {?}
         */
        (x) => !!x.isParentOf))[0];
        /** @type {?} */
        const parentType = parent.value;
        /** @type {?} */
        const allParentType = this.getAllOfType(parentType);
        /** @type {?} */
        const childType = allParentType[0].isParentOf;
        /** @type {?} */
        const allChildren = this.getAllOfType(childType);
        /** @type {?} */
        const allCheckedChildren = allChildren.filter((/**
         * @param {?} x
         * @return {?}
         */
        (x) => !!x.checked));
        allParentType.forEach((/**
         * @param {?} obj
         * @return {?}
         */
        (obj) => {
            if (obj.value === 'ALL') {
                return;
            }
            /** @type {?} */
            const selectedChildrenOfParent = allCheckedChildren.filter((/**
             * @param {?} x
             * @return {?}
             */
            (x) => {
                return x[parentType].filter((/**
                 * @param {?} y
                 * @return {?}
                 */
                (y) => y === obj.value)).length > 0;
            }));
            if (selecting) {
                if (obj.checked) {
                    return;
                }
                obj.indeterminate = selectedChildrenOfParent.length > 0;
            }
            else {
                /** @type {?} */
                const allChildrenOfParent = allChildren.filter((/**
                 * @param {?} x
                 * @return {?}
                 */
                (x) => {
                    return x.value !== 'ALL' && x[parentType].filter((/**
                     * @param {?} y
                     * @return {?}
                     */
                    (y) => y === obj.value)).length > 0;
                }));
                if (selectedChildrenOfParent.length > 0) {
                    if (obj.checked) {
                        if (this.strictRelationship && allChildrenOfParent.length !== selectedChildrenOfParent.length) {
                            obj.indeterminate = true;
                            obj.checked = false;
                            this.removeValue(obj);
                            this.addIndividualChildren(selectedChildrenOfParent);
                        }
                    }
                    else {
                        obj.indeterminate = true;
                    }
                    if (this.strictRelationship && itemChanged.type !== parentType) {
                        if (obj.checked) {
                            obj.checked = false;
                            this.removeValue(obj);
                            this.addIndividualChildren(selectedChildrenOfParent);
                        }
                    }
                }
                else {
                    obj.indeterminate = false;
                    if (allChildrenOfParent.length === 0) {
                        // if it has no children and is checked, it should stay checked
                        return;
                    }
                    else if (this.strictRelationship && itemChanged.type !== parentType) {
                        this.remove(null, obj);
                    }
                }
            }
        }));
        if (this.selectAllOption) {
            this.updateIndeterminateStates(allParentType, allChildren, allCheckedChildren);
        }
    }
    /**
     * @param {?} allItem
     * @param {?} action
     * @return {?}
     */
    updateAllParentsOrChildren(allItem, action) {
        if (allItem.isParentOf) {
            this.updateAllChildrenValue(allItem, action);
        }
        else if (allItem.isChildOf) {
            this.updateAllParentValue(allItem, action);
        }
    }
    /**
     * @param {?} item
     * @param {?} action
     * @return {?}
     */
    updateAllChildrenValue(item, action) {
        /** @type {?} */
        const selecting = action === 'select';
        /** @type {?} */
        const childType = item.isParentOf;
        /** @type {?} */
        const potentialChildren = this.getAllOfType(childType);
        if (this.selectAllOption && this.allOfTypeSelected(childType) && !selecting) {
            this.remove(null, potentialChildren[0]);
            return;
        }
        potentialChildren.forEach((/**
         * @param {?} x
         * @return {?}
         */
        (x) => {
            if (x.value === 'ALL' && !x.checked) {
                if (selecting) {
                    x.checked = true;
                }
                x.indeterminate = selecting;
            }
            else {
                if (x.checked && !selecting) {
                    this.remove(null, x);
                }
                x.checked = selecting;
            }
        }));
    }
    /**
     * @param {?} item
     * @param {?} action
     * @return {?}
     */
    updateAllParentValue(item, action) {
        /** @type {?} */
        const selecting = action === 'select';
        /** @type {?} */
        const parentType = item.isChildOf;
        /** @type {?} */
        const potentialParents = this.getAllOfType(parentType);
        potentialParents.forEach((/**
         * @param {?} x
         * @return {?}
         */
        (x) => {
            if (!x.checked) {
                x.indeterminate = selecting;
            }
        }));
    }
    /**
     * @param {?} allParentType
     * @param {?} allChildren
     * @param {?} allCheckedChildren
     * @return {?}
     */
    updateIndeterminateStates(allParentType, allChildren, allCheckedChildren) {
        /** @type {?} */
        const allCheckedOrIndeterminateParents = allParentType.filter((/**
         * @param {?} x
         * @return {?}
         */
        (x) => (!!x.checked || !!x.indeterminate) && x.value !== 'ALL'));
        /** @type {?} */
        const isParentIndeterminate = !!allParentType[0].checked ? false : allCheckedOrIndeterminateParents.length > 0;
        /** @type {?} */
        const isChildIndeterminate = !!allChildren[0].checked ? false : allCheckedChildren.length > 0;
        this.setIndeterminateState(allParentType, isParentIndeterminate);
        this.setIndeterminateState(allChildren, isChildIndeterminate);
    }
    /**
     * @param {?} parent
     * @param {?} action
     * @return {?}
     */
    updateChildrenValue(parent, action) {
        /** @type {?} */
        const selecting = action === 'select';
        /** @type {?} */
        const childType = parent.isParentOf;
        /** @type {?} */
        const potentialChildren = this.getAllOfType(childType);
        potentialChildren.forEach((/**
         * @param {?} x
         * @return {?}
         */
        (x) => {
            if (x.value === 'ALL') {
                return;
            }
            if (x[parent.type].filter((/**
             * @param {?} y
             * @return {?}
             */
            (y) => y === parent.value)).length > 0) {
                if (x.checked && !selecting) {
                    x.checked = false;
                    if (this.allOfTypeSelected(childType)) {
                        this.handleRemoveItemIfAllSelected(x);
                    }
                    else {
                        this.removeValue(x);
                    }
                }
                x.checked = selecting;
            }
        }));
    }
    /**
     * @param {?} child
     * @param {?} action
     * @return {?}
     */
    updateParentValue(child, action) {
        /** @type {?} */
        const allParentType = this.getAllOfType(child.isChildOf);
        if (allParentType[0].checked && action !== 'select') {
            this.handleRemoveItemIfAllSelected(allParentType[0]);
        }
    }
    /**
     * @param {?} children
     * @return {?}
     */
    addIndividualChildren(children) {
        /** @type {?} */
        let parentAlreadySelected = false;
        children.forEach((/**
         * @param {?} x
         * @return {?}
         */
        (x) => {
            if (x.isChildOf) {
                // only add children if their parents are not already selected
                x[x.isChildOf].forEach((/**
                 * @param {?} parent
                 * @return {?}
                 */
                (parent) => {
                    if (this.value[x.isChildOf].filter((/**
                     * @param {?} p
                     * @return {?}
                     */
                    (p) => p === parent)).length > 0) {
                        parentAlreadySelected = true;
                    }
                }));
            }
            if (this.value[x.type].filter((/**
             * @param {?} item
             * @return {?}
             */
            (item) => item === x.value)).length === 0 && !parentAlreadySelected) {
                this.add(x);
            }
        }));
    }
    /**
     * @param {?} model
     * @return {?}
     */
    setInitialValue(model) {
        this.items = [];
        this.value = model || {};
        if (!this.types) {
            return;
        }
        this.types.forEach((/**
         * @param {?} typeObj
         * @return {?}
         */
        (typeObj) => {
            /** @type {?} */
            const type = typeObj.value;
            if (this.value[type]) {
                /** @type {?} */
                let indeterminateIsSet = false;
                /** @type {?} */
                const options = this.updateAllItemState(type);
                /** @type {?} */
                const optionsByType = options.allOfType;
                /** @type {?} */
                const allSelected = options.allOfTypeSelected;
                this.value[type].forEach((/**
                 * @param {?} item
                 * @return {?}
                 */
                (item) => {
                    if (!allSelected && !indeterminateIsSet) {
                        indeterminateIsSet = true;
                        this.setIndeterminateState(optionsByType, true);
                    }
                    /** @type {?} */
                    const value = optionsByType.filter((/**
                     * @param {?} x
                     * @return {?}
                     */
                    (x) => x.value === item))[0];
                    value.checked = true;
                    if (!allSelected) {
                        this.updateDisplayItems(value, 'add');
                    }
                    if (this.strictRelationship && value.isParentOf) {
                        this.updateChildrenValue(value, 'select');
                    }
                }));
                if (typeObj.isChildOf) {
                    this.modifyAffectedParentsOrChildren(true, { value: type, isChildOf: true });
                }
            }
            else {
                this.value[type] = [];
            }
        }));
    }
    /**
     * @param {?} optionsByType
     * @param {?} type
     * @return {?}
     */
    allItemsSelected(optionsByType, type) {
        return this.value[type].length === optionsByType.length - 1;
    }
    // Set touched on blur
    /**
     * @param {?} e
     * @return {?}
     */
    onTouched(e) {
        this.element.nativeElement.classList.remove('selected');
        this.onModelTouched();
        this.blur.emit(e);
    }
    /**
     * @param {?} model
     * @return {?}
     */
    writeValue(model) {
        this.model = model;
        this.setInitialValue(model);
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.onModelChange = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.onModelTouched = fn;
    }
}
NovoMultiPickerElement.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'multi-picker',
                providers: [CHIPS_VALUE_ACCESSOR$2],
                template: `
    <chip
      *ngFor="let item of (_items | async | slice: 0:chipsCount)"
      [type]="item.type"
      [class.selected]="item == selected"
      (remove)="removeFromDisplay($event, item)"
      (select)="select($event, item)"
    >
      {{ item.label }}
    </chip>
    <div *ngIf="items.length > chipsCount">
      <ul class="summary">
        <li *ngFor="let type of notShown">+ {{ type.count }} {{ labels.more }} {{ type.type }}</li>
      </ul>
    </div>
    <div class="chip-input-container">
      <novo-picker
        clearValueOnSelect="true"
        [config]="source"
        [placeholder]="placeholder"
        (select)="clickOption($event)"
        (keydown)="onKeyDown($event)"
        (focus)="onFocus($event)"
        (blur)="onTouched($event)"
        [overrideElement]="element"
      >
      </novo-picker>
    </div>
    <i class="bhi-search" [class.has-value]="items.length"></i>
    <label class="clear-all" *ngIf="items.length" (click)="clearValue()">{{ labels.clearAll }} <i class="bhi-times"></i></label>
  `,
                host: {
                    '[class.with-value]': 'items.length > 0',
                }
            }] }
];
/** @nocollapse */
NovoMultiPickerElement.ctorParameters = () => [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"] },
    { type: NovoLabelService }
];
NovoMultiPickerElement.propDecorators = {
    source: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    placeholder: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    types: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    changed: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    focus: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    blur: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    value: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }]
};
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: elements/multi-picker/MultiPicker.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NovoMultiPickerModule {
}
NovoMultiPickerModule.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                imports: [_angular_common__WEBPACK_IMPORTED_MODULE_6__["CommonModule"], _angular_forms__WEBPACK_IMPORTED_MODULE_1__["FormsModule"], NovoPickerModule, NovoChipsModule],
                declarations: [NovoMultiPickerElement],
                exports: [NovoMultiPickerElement],
            },] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: services/global/global.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @record
 */
function Global() { }
/**
 * @abstract
 */
class GlobalRef {
}
if (false) {}
class BrowserGlobalRef extends GlobalRef {
    /**
     * @return {?}
     */
    get nativeGlobal() {
        return (/** @type {?} */ (window));
    }
}
class NodeGlobalRef extends GlobalRef {
    /**
     * @return {?}
     */
    get nativeGlobal() {
        throw new Error('global doesn\'t compile for some reason');
        // return global as Global;
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: services/storage/storage.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class LocalStorageService {
    /**
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    setItem(key, value) {
        localStorage.setItem(key, value);
    }
    /**
     * @param {?} key
     * @return {?}
     */
    getItem(key) {
        return localStorage.getItem(key);
    }
    /**
     * @param {?} key
     * @return {?}
     */
    removeItem(key) {
        localStorage.removeItem(key);
    }
}
LocalStorageService.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: elements/places/places.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class GooglePlacesService {
    /**
     * @param {?} _http
     * @param {?} platformId
     * @param {?} _global
     * @param {?} _localStorageService
     */
    constructor(_http, platformId, _global, _localStorageService) {
        this._http = _http;
        this.platformId = platformId;
        this._global = _global;
        this._localStorageService = _localStorageService;
    }
    /**
     * @param {?} url
     * @param {?} query
     * @return {?}
     */
    getPredictions(url, query) {
        return new Promise((/**
         * @param {?} resolve
         * @return {?}
         */
        (resolve) => {
            this._http.get(url + '?query=' + query).subscribe((/**
             * @param {?} data
             * @return {?}
             */
            (data) => {
                if (data) {
                    resolve(data);
                }
                else {
                    resolve(false);
                }
            }));
        }));
    }
    /**
     * @param {?} url
     * @param {?} lat
     * @param {?} lng
     * @return {?}
     */
    getLatLngDetail(url, lat, lng) {
        return new Promise((/**
         * @param {?} resolve
         * @return {?}
         */
        (resolve) => {
            this._http.get(url + '?lat=' + lat + '&lng=' + lng).subscribe((/**
             * @param {?} data
             * @return {?}
             */
            (data) => {
                if (data) {
                    resolve(data);
                }
                else {
                    resolve(false);
                }
            }));
        }));
    }
    /**
     * @param {?} url
     * @param {?} placeId
     * @return {?}
     */
    getPlaceDetails(url, placeId) {
        return new Promise((/**
         * @param {?} resolve
         * @return {?}
         */
        (resolve) => {
            this._http.get(url + '?query=' + placeId).subscribe((/**
             * @param {?} data
             * @return {?}
             */
            (data) => {
                if (data) {
                    resolve(data);
                }
                else {
                    resolve(false);
                }
            }));
        }));
    }
    /**
     * @return {?}
     */
    getGeoCurrentLocation() {
        return new Promise((/**
         * @param {?} resolve
         * @return {?}
         */
        (resolve) => {
            if (Object(_angular_common__WEBPACK_IMPORTED_MODULE_6__["isPlatformBrowser"])(this.platformId)) {
                /** @type {?} */
                const _window = this._global.nativeGlobal;
                if (_window.navigator.geolocation) {
                    _window.navigator.geolocation.getCurrentPosition((/**
                     * @param {?} pos
                     * @return {?}
                     */
                    (pos) => {
                        /** @type {?} */
                        const latlng = { lat: parseFloat(pos.coords.latitude + ''), lng: parseFloat(pos.coords.longitude + '') };
                        resolve(latlng);
                    }));
                }
                else {
                    resolve(false);
                }
            }
            else {
                resolve(false);
            }
        }));
    }
    /**
     * @param {?} latlng
     * @return {?}
     */
    getGeoLatLngDetail(latlng) {
        return new Promise((/**
         * @param {?} resolve
         * @return {?}
         */
        (resolve) => {
            if (Object(_angular_common__WEBPACK_IMPORTED_MODULE_6__["isPlatformBrowser"])(this.platformId)) {
                /** @type {?} */
                const _window = this._global.nativeGlobal;
                /** @type {?} */
                const geocoder = new _window.google.maps.Geocoder();
                geocoder.geocode({ location: latlng }, (/**
                 * @param {?} results
                 * @param {?} status
                 * @return {?}
                 */
                (results, status) => {
                    if (status === 'OK') {
                        this.getGeoPlaceDetail(results[0].place_id).then((/**
                         * @param {?} result
                         * @return {?}
                         */
                        (result) => {
                            if (result) {
                                resolve(result);
                            }
                            else {
                                resolve(false);
                            }
                        }));
                    }
                    else {
                        resolve(false);
                    }
                }));
            }
            else {
                resolve(false);
            }
        }));
    }
    /**
     * @param {?} params
     * @return {?}
     */
    getGeoPrediction(params) {
        return new Promise((/**
         * @param {?} resolve
         * @return {?}
         */
        (resolve) => {
            if (Object(_angular_common__WEBPACK_IMPORTED_MODULE_6__["isPlatformBrowser"])(this.platformId)) {
                /** @type {?} */
                const _window = this._global.nativeGlobal;
                /** @type {?} */
                const placesService = new _window.google.maps.places.AutocompleteService();
                /** @type {?} */
                let queryInput = {};
                /** @type {?} */
                const promiseArr = [];
                if (params.countryRestriction.length) {
                    queryInput = {
                        input: params.query,
                        componentRestrictions: { country: params.countryRestriction },
                    };
                }
                else {
                    queryInput = {
                        input: params.query,
                    };
                }
                if (params.geoLocation) {
                    queryInput.location = new _window.google.maps.LatLng(parseFloat(params.geoLocation[0]), parseFloat(params.geoLocation[1]));
                    queryInput.radius = params.radius;
                }
                if (params.geoTypes.length) {
                    for (let i = 0; i < params.geoTypes.length; i++) {
                        /** @type {?} */
                        const _tempQuery = queryInput;
                        _tempQuery['types'] = new Array(params.geoTypes[i]);
                        promiseArr.push(this.geoPredictionCall(placesService, _tempQuery));
                    }
                }
                else {
                    promiseArr.push(this.geoPredictionCall(placesService, queryInput));
                }
                Promise.all(promiseArr).then((/**
                 * @param {?} values
                 * @return {?}
                 */
                (values) => {
                    /** @type {?} */
                    const val = values;
                    if (val.length > 1) {
                        /** @type {?} */
                        let _tempArr = [];
                        for (let j = 0; j < val.length; j++) {
                            if (val[j] && val[j].length) {
                                _tempArr = _tempArr.concat(val[j]);
                            }
                        }
                        _tempArr = this.getUniqueResults(_tempArr);
                        resolve(_tempArr);
                    }
                    else {
                        resolve(values[0]);
                    }
                }));
            }
            else {
                resolve(false);
            }
        }));
    }
    /**
     * @param {?} placeId
     * @return {?}
     */
    getGeoPlaceDetail(placeId) {
        return new Promise((/**
         * @param {?} resolve
         * @return {?}
         */
        (resolve) => {
            if (Object(_angular_common__WEBPACK_IMPORTED_MODULE_6__["isPlatformBrowser"])(this.platformId)) {
                /** @type {?} */
                const _window = this._global.nativeGlobal;
                /** @type {?} */
                const placesService = new _window.google.maps.places.PlacesService(document.createElement('div'));
                placesService.getDetails({ placeId }, (/**
                 * @param {?} result
                 * @param {?} status
                 * @return {?}
                 */
                (result, status) => {
                    if (result === null || result.length === 0) {
                        this.getGeoPaceDetailByReferance(result.referance).then((/**
                         * @param {?} referanceData
                         * @return {?}
                         */
                        (referanceData) => {
                            if (!referanceData) {
                                resolve(false);
                            }
                            else {
                                resolve(referanceData);
                            }
                        }));
                    }
                    else {
                        resolve(result);
                    }
                }));
            }
            else {
                resolve(false);
            }
        }));
    }
    /**
     * @param {?} referance
     * @return {?}
     */
    getGeoPaceDetailByReferance(referance) {
        return new Promise((/**
         * @param {?} resolve
         * @return {?}
         */
        (resolve) => {
            if (Object(_angular_common__WEBPACK_IMPORTED_MODULE_6__["isPlatformBrowser"])(this.platformId)) {
                /** @type {?} */
                const _window = this._global.nativeGlobal;
                /** @type {?} */
                const placesService = new _window.google.maps.places.PlacesService();
                placesService.getDetails({ reference: referance }, (/**
                 * @param {?} result
                 * @param {?} status
                 * @return {?}
                 */
                (result, status) => {
                    if (status === _window.google.maps.places.PlacesServiceStatus.OK) {
                        resolve(result);
                    }
                    else {
                        resolve(false);
                    }
                }));
            }
            else {
                resolve(false);
            }
        }));
    }
    /**
     * @param {?} localStorageName
     * @param {?} result
     * @param {?} itemSavedLength
     * @return {?}
     */
    addRecentList(localStorageName, result, itemSavedLength) {
        this.getRecentList(localStorageName).then((/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            if (data) {
                for (let i = 0; i < data.length; i++) {
                    if (data[i].description === result.description) {
                        data.splice(i, 1);
                        break;
                    }
                }
                data.unshift(result);
                if (data.length > itemSavedLength) {
                    data.pop();
                }
                this._localStorageService.setItem(localStorageName, JSON.stringify(data));
            }
        }));
    }
    /**
     * @param {?} localStorageName
     * @return {?}
     */
    getRecentList(localStorageName) {
        return new Promise((/**
         * @param {?} resolve
         * @return {?}
         */
        (resolve) => {
            /** @type {?} */
            let value = this._localStorageService.getItem(localStorageName);
            if (value) {
                value = JSON.parse(value);
            }
            else {
                value = [];
            }
            resolve(value);
        }));
    }
    /**
     * @private
     * @param {?} arr
     * @return {?}
     */
    getUniqueResults(arr) {
        return Array.from(arr.reduce((/**
         * @param {?} m
         * @param {?} t
         * @return {?}
         */
        (m, t) => m.set(t.place_id, t)), new Map()).values());
    }
    /**
     * @private
     * @param {?} placesService
     * @param {?} queryInput
     * @return {?}
     */
    geoPredictionCall(placesService, queryInput) {
        /** @type {?} */
        const _window = this._global.nativeGlobal;
        return new Promise((/**
         * @param {?} resolve
         * @return {?}
         */
        (resolve) => {
            placesService.getPlacePredictions(queryInput, (/**
             * @param {?} result
             * @param {?} status
             * @return {?}
             */
            (result, status) => {
                if (status === _window.google.maps.places.PlacesServiceStatus.OK) {
                    resolve(result);
                }
                else {
                    resolve(false);
                }
            }));
        }));
    }
}
GooglePlacesService.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"] }
];
/** @nocollapse */
GooglePlacesService.ctorParameters = () => [
    { type: _angular_common_http__WEBPACK_IMPORTED_MODULE_24__["HttpClient"] },
    { type: Object, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["PLATFORM_ID"],] }] },
    { type: GlobalRef },
    { type: LocalStorageService }
];
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: elements/places/places.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @record
 */
function Settings() { }
if (false) {}
class PlacesListComponent {
    /**
     * @param {?} platformId
     * @param {?} _elmRef
     * @param {?} _global
     * @param {?} _googlePlacesService
     */
    constructor(platformId, _elmRef, _global, _googlePlacesService) {
        this.platformId = platformId;
        this._elmRef = _elmRef;
        this._global = _global;
        this._googlePlacesService = _googlePlacesService;
        this.term = '';
        this.termChange = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.select = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.locationInput = '';
        this.gettingCurrentLocationFlag = false;
        this.dropdownOpen = false;
        this.recentDropdownOpen = false;
        this.queryItems = [];
        this.isSettingsError = false;
        this.settingsErrorMsg = '';
        this.settings = {};
        this.moduleinit = false;
        this.selectedDataIndex = -1;
        this.recentSearchData = [];
        this.userSelectedOption = '';
        this.defaultSettings = {
            geoPredictionServerUrl: '',
            geoLatLangServiceUrl: '',
            geoLocDetailServerUrl: '',
            geoCountryRestriction: [],
            geoTypes: [],
            geoLocation: [],
            geoRadius: 0,
            serverResponseListHierarchy: [],
            serverResponseatLangHierarchy: [],
            serverResponseDetailHierarchy: [],
            resOnSearchButtonClickOnly: false,
            useGoogleGeoApi: true,
            inputPlaceholderText: 'Enter Area Name',
            inputString: '',
            showSearchButton: true,
            showRecentSearch: true,
            showCurrentLocation: true,
            recentStorageName: 'recentSearches',
            noOfRecentSearchSave: 5,
            currentLocIconUrl: '',
            searchIconUrl: '',
            locationIconUrl: '',
        };
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (!this.moduleinit) {
            this.moduleInit();
        }
    }
    /**
     * @return {?}
     */
    ngOnChanges() {
        this.moduleinit = true;
        this.moduleInit();
        this.searchinputCallback(null);
    }
    // function called when click event happens in input box. (Binded with view)
    /**
     * @param {?} event
     * @return {?}
     */
    searchinputClickCallback(event) {
        event.target.select();
        this.searchinputCallback(event);
    }
    // function called when there is a change in input. (Binded with view)
    /**
     * @param {?} event
     * @return {?}
     */
    searchinputCallback(event) {
        /** @type {?} */
        const inputVal = this.locationInput;
        if (inputVal) {
            this.getListQuery(inputVal);
        }
        else {
            this.queryItems = [];
            if (this.userSelectedOption) {
                this.userQuerySubmit('false');
            }
            this.userSelectedOption = '';
            if (this.settings.showRecentSearch) {
                this.showRecentSearch();
            }
            else {
                this.dropdownOpen = false;
            }
        }
    }
    // function to execute when user hover over autocomplete list.(binded with view)
    /**
     * @param {?} index
     * @return {?}
     */
    activeListNode(index) {
        for (let i = 0; i < this.queryItems.length; i++) {
            if (index === i) {
                this.queryItems[i].active = true;
                this.selectedDataIndex = index;
            }
            else {
                this.queryItems[i].active = false;
            }
        }
    }
    // function to execute when user select the autocomplete list.(binded with view)
    /**
     * @param {?} event
     * @param {?} index
     * @return {?}
     */
    selectedListNode(event, index) {
        this.dropdownOpen = false;
        if (this.recentDropdownOpen) {
            this.setRecentLocation(this.queryItems[index]);
        }
        else {
            this.getPlaceLocationInfo(this.queryItems[index]);
        }
    }
    // function to close the autocomplete list when clicked outside. (binded with view)
    /**
     * @param {?} event
     * @return {?}
     */
    closeAutocomplete(event) {
        if (!this._elmRef.nativeElement.contains(event.target)) {
            this.selectedDataIndex = -1;
            this.dropdownOpen = false;
        }
    }
    // function to manually trigger the callback to parent component when clicked search button.
    /**
     * @param {?=} selectedOption
     * @return {?}
     */
    userQuerySubmit(selectedOption) {
        /** @type {?} */
        const _userOption = selectedOption === 'false' ? '' : this.userSelectedOption;
        if (_userOption) {
            this.select.emit(this.userSelectedOption);
        }
        else {
            // this.select.emit(false);
        }
    }
    // function to get user current location from the device.
    /**
     * @return {?}
     */
    currentLocationSelected() {
        if (Object(_angular_common__WEBPACK_IMPORTED_MODULE_6__["isPlatformBrowser"])(this.platformId)) {
            this.gettingCurrentLocationFlag = true;
            this.dropdownOpen = false;
            this._googlePlacesService.getGeoCurrentLocation().then((/**
             * @param {?} result
             * @return {?}
             */
            (result) => {
                if (!result) {
                    this.gettingCurrentLocationFlag = false;
                }
                else {
                    this.getCurrentLocationInfo(result);
                }
            }));
        }
    }
    // module initialization happens. function called by ngOninit and ngOnChange
    /**
     * @private
     * @return {?}
     */
    moduleInit() {
        this.settings = this.setUserSettings();
        // condition to check if Radius is set without location detail.
        if (this.settings.geoRadius) {
            if (this.settings.geoLocation.length !== 2) {
                this.isSettingsError = true;
                this.settingsErrorMsg =
                    this.settingsErrorMsg + 'Radius should be used with GeoLocation. Please use "geoLocation" key to set lat and lng. ';
            }
        }
        // condition to check if lat and lng is set and radious is not set then it will set to 20,000KM by default
        if (this.settings.geoLocation.length === 2 && !this.settings.geoRadius) {
            this.settings.geoRadius = 20000000;
        }
        if (this.settings.showRecentSearch) {
            this.getRecentLocations();
        }
        if (!this.settings.useGoogleGeoApi) {
            if (!this.settings.geoPredictionServerUrl) {
                this.isSettingsError = true;
                this.settingsErrorMsg =
                    this.settingsErrorMsg + 'Prediction custom server url is not defined. Please use "geoPredictionServerUrl" key to set. ';
            }
            if (!this.settings.geoLatLangServiceUrl) {
                this.isSettingsError = true;
                this.settingsErrorMsg =
                    this.settingsErrorMsg + 'Latitude and longitude custom server url is not defined. Please use "geoLatLangServiceUrl" key to set. ';
            }
            if (!this.settings.geoLocDetailServerUrl) {
                this.isSettingsError = true;
                this.settingsErrorMsg =
                    this.settingsErrorMsg + 'Location detail custom server url is not defined. Please use "geoLocDetailServerUrl" key to set. ';
            }
        }
        this.locationInput = this.term;
    }
    // function to process the search query when pressed enter.
    /**
     * @private
     * @return {?}
     */
    processSearchQuery() {
        if (this.queryItems.length) {
            if (this.selectedDataIndex > -1) {
                this.selectedListNode(null, this.selectedDataIndex);
            }
            else {
                this.selectedListNode(null, 0);
            }
        }
    }
    // function to set user settings if it is available.
    /**
     * @private
     * @return {?}
     */
    setUserSettings() {
        /** @type {?} */
        const _tempObj = {};
        if (this.userSettings && typeof this.userSettings === 'object') {
            /** @type {?} */
            const keys = Object.keys(this.defaultSettings);
            for (const value of keys) {
                _tempObj[value] = this.userSettings[value] !== undefined ? this.userSettings[value] : this.defaultSettings[value];
            }
            return _tempObj;
        }
        else {
            return this.defaultSettings;
        }
    }
    // function to get the autocomplete list based on user input.
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    getListQuery(value) {
        this.recentDropdownOpen = false;
        if (this.settings.useGoogleGeoApi) {
            /** @type {?} */
            const _tempParams = {
                query: value,
                countryRestriction: this.settings.geoCountryRestriction,
                geoTypes: this.settings.geoTypes,
            };
            if (this.settings.geoLocation.length === 2) {
                _tempParams.geoLocation = this.settings.geoLocation;
                _tempParams.radius = this.settings.geoRadius;
            }
            this._googlePlacesService.getGeoPrediction(_tempParams).then((/**
             * @param {?} result
             * @return {?}
             */
            (result) => {
                this.updateListItem(result);
            }));
        }
        else {
            this._googlePlacesService.getPredictions(this.settings.geoPredictionServerUrl, value).then((/**
             * @param {?} result
             * @return {?}
             */
            (result) => {
                result = this.extractServerList(this.settings.serverResponseListHierarchy, result);
                this.updateListItem(result);
            }));
        }
    }
    // function to extratc custom data which is send by the server.
    /**
     * @private
     * @param {?} arrayList
     * @param {?} data
     * @return {?}
     */
    extractServerList(arrayList, data) {
        if (arrayList.length) {
            /** @type {?} */
            let _tempData = data;
            for (const key of arrayList) {
                _tempData = _tempData[key];
            }
            return _tempData;
        }
        else {
            return data;
        }
    }
    // function to update the predicted list.
    /**
     * @private
     * @param {?} listData
     * @return {?}
     */
    updateListItem(listData) {
        this.queryItems = listData ? listData : [];
        this.dropdownOpen = true;
    }
    // function to show the recent search result.
    /**
     * @private
     * @return {?}
     */
    showRecentSearch() {
        this.recentDropdownOpen = true;
        this.dropdownOpen = true;
        this._googlePlacesService.getRecentList(this.settings.recentStorageName).then((/**
         * @param {?} result
         * @return {?}
         */
        (result) => {
            if (result) {
                this.queryItems = result;
            }
            else {
                this.queryItems = [];
            }
        }));
    }
    // //function to navigate through list when up and down keyboard key is pressed;
    // private navigateInList(keyCode: number): any {
    //     let arrayIndex: number = 0;
    //     //arrow down
    //     if (keyCode === 40) {
    //         if (this.selectedDataIndex >= 0) {
    //             arrayIndex = ((this.selectedDataIndex + 1) <= (this.queryItems.length - 1)) ? (this.selectedDataIndex + 1) : 0;
    //         }
    //         this.activeListNode(arrayIndex);
    //     } else if (keyCode === 38) {//arrow up
    //         if (this.selectedDataIndex >= 0) {
    //             arrayIndex = ((this.selectedDataIndex - 1) >= 0) ? (this.selectedDataIndex - 1) : (this.queryItems.length - 1);
    //         } else {
    //             arrayIndex = this.queryItems.length - 1;
    //         }
    //         this.activeListNode(arrayIndex);
    //     } else {
    //         this.processSearchQuery();
    //     }
    // }
    // function to execute to get location detail based on latitude and longitude.
    /**
     * @private
     * @param {?} latlng
     * @return {?}
     */
    getCurrentLocationInfo(latlng) {
        if (this.settings.useGoogleGeoApi) {
            this._googlePlacesService.getGeoLatLngDetail(latlng).then((/**
             * @param {?} result
             * @return {?}
             */
            (result) => {
                if (result) {
                    this.setRecentLocation(result);
                }
                this.gettingCurrentLocationFlag = false;
            }));
        }
        else {
            this._googlePlacesService.getLatLngDetail(this.settings.geoLatLangServiceUrl, latlng.lat, latlng.lng).then((/**
             * @param {?} result
             * @return {?}
             */
            (result) => {
                if (result) {
                    result = this.extractServerList(this.settings.serverResponseatLangHierarchy, result);
                    this.setRecentLocation(result);
                }
                this.gettingCurrentLocationFlag = false;
            }));
        }
    }
    // function to retrive the location info based on goovle place id.
    /**
     * @private
     * @param {?} selectedData
     * @return {?}
     */
    getPlaceLocationInfo(selectedData) {
        if (this.settings.useGoogleGeoApi) {
            this._googlePlacesService.getGeoPlaceDetail(selectedData.place_id).then((/**
             * @param {?} data
             * @return {?}
             */
            (data) => {
                if (data) {
                    this.setRecentLocation(data);
                }
            }));
        }
        else {
            this._googlePlacesService.getPlaceDetails(this.settings.geoLocDetailServerUrl, selectedData.place_id).then((/**
             * @param {?} result
             * @return {?}
             */
            (result) => {
                if (result) {
                    result = this.extractServerList(this.settings.serverResponseDetailHierarchy, result);
                    this.setRecentLocation(result);
                }
            }));
        }
    }
    // function to store the selected user search in the localstorage.
    /**
     * @private
     * @param {?} data
     * @return {?}
     */
    setRecentLocation(data) {
        data = JSON.parse(JSON.stringify(data));
        data.description = data.description ? data.description : data.formatted_address;
        data.active = false;
        this.selectedDataIndex = -1;
        this.locationInput = data.description;
        if (this.settings.showRecentSearch) {
            this._googlePlacesService.addRecentList(this.settings.recentStorageName, data, this.settings.noOfRecentSearchSave);
            this.getRecentLocations();
        }
        this.userSelectedOption = data;
        // below code will execute only when user press enter or select any option selection and it emit a callback to the parent component.
        if (!this.settings.resOnSearchButtonClickOnly) {
            this.select.emit(data);
            this.termChange.emit(data);
        }
    }
    // function to retrive the stored recent user search from the localstorage.
    /**
     * @private
     * @return {?}
     */
    getRecentLocations() {
        this._googlePlacesService.getRecentList(this.settings.recentStorageName).then((/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            this.recentSearchData = data && data.length ? data : [];
        }));
    }
}
PlacesListComponent.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'google-places-list',
                template: `
        <novo-list direction="vertical">
            <novo-list-item *ngFor="let data of queryItems;let $index = index" (click)="selectedListNode($event, $index)">
                <item-header>
                    <item-avatar icon="location"></item-avatar>
                    <item-title>{{data.structured_formatting?.main_text ? data.structured_formatting.main_text : data.description}}</item-title>
                </item-header>
                <item-content>{{data.structured_formatting?.secondary_text}}</item-content>
            </novo-list-item>
        </novo-list>
    `
            }] }
];
/** @nocollapse */
PlacesListComponent.ctorParameters = () => [
    { type: Object, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["PLATFORM_ID"],] }] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"] },
    { type: GlobalRef },
    { type: GooglePlacesService }
];
PlacesListComponent.propDecorators = {
    userSettings: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    term: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    termChange: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    select: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }]
};
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: elements/places/places.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class GooglePlacesModule {
}
GooglePlacesModule.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                declarations: [PlacesListComponent],
                imports: [_angular_common__WEBPACK_IMPORTED_MODULE_6__["CommonModule"], _angular_common_http__WEBPACK_IMPORTED_MODULE_24__["HttpClientModule"], _angular_forms__WEBPACK_IMPORTED_MODULE_1__["FormsModule"], NovoListModule],
                exports: [PlacesListComponent],
                providers: [GooglePlacesService],
            },] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: elements/popover/PopOverContent.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class PopOverContent {
    /**
     * @param {?} element
     * @param {?} cdr
     */
    constructor(element, cdr) {
        this.element = element;
        this.cdr = cdr;
        this.placement = 'top';
        this.animation = true;
        this.onCloseFromOutside = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.top = -10000;
        this.left = -10000;
        this.displayType = 'none';
        this.isHidden = false;
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.show();
        this.cdr.detectChanges();
    }
    /**
     * @return {?}
     */
    toggle() {
        if (this.isHidden) {
            this.show();
        }
        else {
            this.hide();
        }
    }
    /**
     * @return {?}
     */
    show() {
        if (!this.popover || !this.popover.getElement()) {
            return;
        }
        /** @type {?} */
        const p = this.positionElements(this.popover.getElement(), this.popoverDiv.nativeElement, this.placement);
        this.displayType = 'block';
        this.top = p.top;
        this.left = p.left;
        this.isHidden = false;
    }
    /**
     * @return {?}
     */
    hide() {
        this.top = -10000;
        this.left = -10000;
        this.isHidden = true;
        this.popover.hide();
    }
    /**
     * @return {?}
     */
    hideFromPopover() {
        this.top = -10000;
        this.left = -10000;
    }
    /**
     * @protected
     * @param {?} hostEl
     * @param {?} targetEl
     * @param {?} positionStr
     * @param {?=} appendToBody
     * @return {?}
     */
    positionElements(hostEl, targetEl, positionStr, appendToBody = false) {
        /** @type {?} */
        const positionStrParts = positionStr.split('-');
        /** @type {?} */
        const mainSide = (this.effectivePlacement = this.getEffectivePlacement(positionStrParts[0] || 'right', hostEl, targetEl));
        /** @type {?} */
        const orientation = (this.effectiveAlignment = positionStrParts[1] || 'center');
        /** @type {?} */
        const hostElPos = appendToBody ? this.offset(hostEl) : this.position(hostEl);
        /** @type {?} */
        const targetElWidth = targetEl.offsetWidth;
        /** @type {?} */
        const targetElHeight = targetEl.offsetHeight;
        /** @type {?} */
        const shiftWidth = {
            /**
             * @return {?}
             */
            center() {
                return hostElPos.left + (hostElPos.width - targetElWidth) / 2;
            },
            /**
             * @return {?}
             */
            right() {
                return hostElPos.left;
            },
            /**
             * @return {?}
             */
            left() {
                return hostElPos.left + (hostElPos.width - targetElWidth);
            },
        };
        /** @type {?} */
        const shiftHeight = {
            /**
             * @return {?}
             */
            center() {
                return hostElPos.top + (hostElPos.height - targetElHeight) / 2;
            },
            /**
             * @return {?}
             */
            bottom() {
                return hostElPos.top;
            },
            /**
             * @return {?}
             */
            top() {
                return hostElPos.top + (hostElPos.height - targetElHeight);
            },
        };
        /** @type {?} */
        let targetElPos;
        switch (mainSide) {
            case 'right':
                targetElPos = {
                    top: shiftHeight[orientation](),
                    left: hostElPos.left + hostElPos.width,
                };
                break;
            case 'left':
                targetElPos = {
                    top: shiftHeight[orientation](),
                    left: hostElPos.left - targetElWidth,
                };
                break;
            case 'bottom':
                targetElPos = {
                    top: hostElPos.top + hostElPos.height,
                    left: shiftWidth[orientation](),
                };
                break;
            default:
                targetElPos = {
                    top: hostElPos.top - targetElHeight,
                    left: shiftWidth[orientation](),
                };
                break;
        }
        return targetElPos;
    }
    /**
     * @protected
     * @param {?} nativeEl
     * @return {?}
     */
    position(nativeEl) {
        /** @type {?} */
        let offsetParentBCR = { top: 0, left: 0 };
        /** @type {?} */
        const elBCR = this.offset(nativeEl);
        /** @type {?} */
        const offsetParentEl = this.parentOffsetEl(nativeEl);
        if (offsetParentEl !== window.document) {
            offsetParentBCR = this.offset(offsetParentEl);
            offsetParentBCR.top += offsetParentEl.clientTop - offsetParentEl.scrollTop;
            offsetParentBCR.left += offsetParentEl.clientLeft - offsetParentEl.scrollLeft;
        }
        /** @type {?} */
        const boundingClientRect = nativeEl.getBoundingClientRect();
        return {
            width: boundingClientRect.width || nativeEl.offsetWidth,
            height: boundingClientRect.height || nativeEl.offsetHeight,
            top: elBCR.top - offsetParentBCR.top,
            left: elBCR.left - offsetParentBCR.left,
        };
    }
    /**
     * @protected
     * @param {?} nativeEl
     * @return {?}
     */
    offset(nativeEl) {
        /** @type {?} */
        const boundingClientRect = nativeEl.getBoundingClientRect();
        return {
            width: boundingClientRect.width || nativeEl.offsetWidth,
            height: boundingClientRect.height || nativeEl.offsetHeight,
            top: boundingClientRect.top + (window.pageYOffset || window.document.documentElement.scrollTop),
            left: boundingClientRect.left + (window.pageXOffset || window.document.documentElement.scrollLeft),
        };
    }
    /**
     * @protected
     * @param {?} nativeEl
     * @param {?} cssProp
     * @return {?}
     */
    getStyle(nativeEl, cssProp) {
        if (((/** @type {?} */ (nativeEl))).currentStyle) {
            return ((/** @type {?} */ (nativeEl))).currentStyle[cssProp];
        }
        if (window.getComputedStyle) {
            return ((/** @type {?} */ (window.getComputedStyle)))(nativeEl)[cssProp];
        }
        return ((/** @type {?} */ (nativeEl.style)))[cssProp];
    }
    /**
     * @protected
     * @param {?} nativeEl
     * @return {?}
     */
    isStaticPositioned(nativeEl) {
        return (this.getStyle(nativeEl, 'position') || 'static') === 'static';
    }
    /**
     * @protected
     * @param {?} nativeEl
     * @return {?}
     */
    parentOffsetEl(nativeEl) {
        /** @type {?} */
        let offsetParent = nativeEl.offsetParent || window.document;
        while (offsetParent && offsetParent !== window.document && this.isStaticPositioned(offsetParent)) {
            offsetParent = offsetParent.offsetParent;
        }
        return offsetParent || window.document;
    }
    /**
     * @protected
     * @param {?} desiredPlacement
     * @param {?} hostElement
     * @param {?} targetElement
     * @return {?}
     */
    getEffectivePlacement(desiredPlacement, hostElement, targetElement) {
        /** @type {?} */
        const hostElBoundingRect = hostElement.getBoundingClientRect();
        if (desiredPlacement === 'top' && hostElBoundingRect.top - targetElement.offsetHeight < 0) {
            return 'bottom';
        }
        if (desiredPlacement === 'bottom' && hostElBoundingRect.bottom + targetElement.offsetHeight > window.innerHeight) {
            return 'top';
        }
        if (desiredPlacement === 'left' && hostElBoundingRect.left - targetElement.offsetWidth < 0) {
            return 'right';
        }
        if (desiredPlacement === 'right' && hostElBoundingRect.right + targetElement.offsetWidth > window.innerWidth) {
            return 'left';
        }
        return desiredPlacement;
    }
}
PopOverContent.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'popover-content',
                template: `
        <div #popoverDiv
            class="popover {{ effectivePlacement }}"
            [style.top]="top + 'px'"
            [style.left]="left + 'px'"
            [class.fade]="animation"
            style="display: block"
            role="popover">
            <div class="arrow {{effectiveAlignment}}"></div>
            <h4 class="popover-title" [hidden]="!title">{{ title }}</h4>
            <div class="popover-content">
                <ng-content></ng-content>
                <div class="popover-content-text">{{ content }}</div>
            </div>
        </div>
    `
            }] }
];
/** @nocollapse */
PopOverContent.ctorParameters = () => [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectorRef"] }
];
PopOverContent.propDecorators = {
    content: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    placement: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    title: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    animation: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    popoverDiv: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"], args: ['popoverDiv', { static: false },] }]
};
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: elements/popover/PopOver.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class PopOverDirective {
    /**
     * @param {?} viewContainerRef
     * @param {?} resolver
     */
    constructor(viewContainerRef, resolver) {
        this.viewContainerRef = viewContainerRef;
        this.resolver = resolver;
        this.PopoverComponent = PopOverContent;
        this.popoverOnHover = false;
        this.popoverDismissTimeout = 0;
        this.onShown = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.onHidden = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
    }
    // ---------------------------------------------------
    // Event listeners
    // ---------------------------------------------------
    /**
     * @return {?}
     */
    showOrHideOnClick() {
        if (this.popoverOnHover || this.popoverDisabled) {
            return;
        }
        this.toggle();
    }
    /**
     * @return {?}
     */
    showOnHover() {
        if (!this.popoverOnHover || this.popoverDisabled) {
            return;
        }
        this.show();
    }
    /**
     * @return {?}
     */
    hideOnHover() {
        if (!this.popoverOnHover || this.popoverDisabled) {
            return;
        }
        this.hide();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes['popoverDisabled']) {
            if (changes['popoverDisabled'].currentValue) {
                this.hide();
            }
        }
        if (changes['popoverAlways']) {
            if (changes['popoverAlways'].currentValue) {
                this.show();
            }
        }
    }
    /**
     * @return {?}
     */
    toggle() {
        if (!this.visible) {
            this.show();
        }
        else {
            this.hide();
        }
    }
    /**
     * @return {?}
     */
    show() {
        if (this.visible) {
            return;
        }
        this.visible = true;
        if (typeof this.content === 'string') {
            /** @type {?} */
            const factory = this.resolver.resolveComponentFactory(this.PopoverComponent);
            if (!this.visible) {
                return;
            }
            this.popover = this.viewContainerRef.createComponent(factory);
            /** @type {?} */
            const popover = (/** @type {?} */ (this.popover.instance));
            popover.popover = this;
            popover.content = (/** @type {?} */ (this.content));
            if (this.popoverPlacement !== undefined) {
                popover.placement = this.popoverPlacement;
            }
            if (this.popoverAnimation !== undefined) {
                popover.animation = this.popoverAnimation;
            }
            if (this.popoverTitle !== undefined) {
                popover.title = this.popoverTitle;
            }
            popover.onCloseFromOutside.subscribe((/**
             * @return {?}
             */
            () => this.hide()));
            if (this.popoverDismissTimeout > 0) {
                setTimeout((/**
                 * @return {?}
                 */
                () => this.hide()), this.popoverDismissTimeout);
            }
        }
        else {
            /** @type {?} */
            const popover = (/** @type {?} */ (this.content));
            popover.popover = this;
            if (this.popoverPlacement !== undefined) {
                popover.placement = this.popoverPlacement;
            }
            if (this.popoverAnimation !== undefined) {
                popover.animation = this.popoverAnimation;
            }
            if (this.popoverTitle !== undefined) {
                popover.title = this.popoverTitle;
            }
            popover.onCloseFromOutside.subscribe((/**
             * @return {?}
             */
            () => this.hide()));
            if (this.popoverDismissTimeout > 0) {
                setTimeout((/**
                 * @return {?}
                 */
                () => this.hide()), this.popoverDismissTimeout);
            }
            popover.show();
        }
        this.onShown.emit(this);
    }
    /**
     * @return {?}
     */
    hide() {
        if (!this.visible) {
            return;
        }
        this.visible = false;
        if (this.popover) {
            this.popover.destroy();
        }
        if (this.content instanceof PopOverContent) {
            ((/** @type {?} */ (this.content))).hideFromPopover();
        }
        this.onHidden.emit(this);
    }
    /**
     * @return {?}
     */
    getElement() {
        return this.viewContainerRef.element.nativeElement;
    }
}
PopOverDirective.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{
                selector: '[popover]',
            },] }
];
/** @nocollapse */
PopOverDirective.ctorParameters = () => [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewContainerRef"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ComponentFactoryResolver"] }
];
PopOverDirective.propDecorators = {
    content: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"], args: ['popover',] }],
    popoverDisabled: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    popoverAlways: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    popoverAnimation: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    popoverPlacement: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    popoverTitle: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    popoverOnHover: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    popoverDismissTimeout: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    onShown: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    onHidden: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    showOrHideOnClick: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostListener"], args: ['click',] }],
    showOnHover: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostListener"], args: ['focusin',] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostListener"], args: ['mouseenter',] }],
    hideOnHover: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostListener"], args: ['focusout',] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostListener"], args: ['mouseleave',] }]
};
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: elements/popover/PopOver.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NovoPopOverModule {
}
NovoPopOverModule.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                declarations: [PopOverContent, PopOverDirective],
                exports: [PopOverContent, PopOverDirective],
                entryComponents: [PopOverContent],
            },] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: elements/simple-table/activity-table-renderers.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ActivityTableRenderers {
    /**
     * @template T
     * @param {?} prop
     * @return {?}
     */
    static propertyRenderer(prop) {
        /** @type {?} */
        const ret = (/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            // TODO - allow for dots and sub props
            return data[prop];
        });
        return ret;
    }
    /**
     * @template T
     * @param {?} prop
     * @return {?}
     */
    static dateRenderer(prop) {
        /** @type {?} */
        const ret = (/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            return data[prop] ? new Date(data[prop]).toLocaleDateString() : '';
        });
        return ret;
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: elements/simple-table/state.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NovoActivityTableState {
    constructor() {
        this.id = Math.random();
        this.sort = undefined;
        this.filter = undefined;
        this.page = 0;
        this.pageSize = undefined;
        this.globalSearch = undefined;
        this.selectedRows = new Map();
        this.updates = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.onReset = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
    }
    /**
     * @return {?}
     */
    get userFiltered() {
        return !!(this.filter || this.sort || this.globalSearch || this.outsideFilter);
    }
    /**
     * @param {?=} fireUpdate
     * @param {?=} persistUserFilters
     * @return {?}
     */
    reset(fireUpdate = true, persistUserFilters) {
        if (!persistUserFilters) {
            this.sort = undefined;
            this.globalSearch = undefined;
            this.filter = undefined;
        }
        this.page = 0;
        this.selectedRows.clear();
        this.onReset.emit(true);
        if (fireUpdate) {
            this.updates.emit({
                sort: this.sort,
                filter: this.filter,
                globalSearch: this.globalSearch,
            });
        }
    }
}
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: elements/simple-table/sort.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NovoSortFilter {
    /**
     * @param {?} state
     */
    constructor(state) {
        this.state = state;
    }
    /**
     * @param {?} id
     * @param {?} value
     * @param {?} transform
     * @return {?}
     */
    filter(id, value, transform) {
        /** @type {?} */
        let filter;
        if (!Helpers.isBlank(value)) {
            filter = { id, value, transform };
        }
        else {
            filter = undefined;
        }
        this.state.filter = filter;
        this.state.reset(false, true);
        this.state.updates.next({ filter, sort: this.state.sort });
    }
    /**
     * @param {?} id
     * @param {?} value
     * @param {?} transform
     * @return {?}
     */
    sort(id, value, transform) {
        /** @type {?} */
        const sort = { id, value, transform };
        this.state.sort = sort;
        this.state.reset(false, true);
        this.state.updates.next({ sort, filter: this.state.filter });
    }
}
NovoSortFilter.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{
                selector: '[novoSortFilter]',
            },] }
];
/** @nocollapse */
NovoSortFilter.ctorParameters = () => [
    { type: NovoActivityTableState }
];
if (false) {}
class NovoSelection {
    /**
     * @param {?} state
     */
    constructor(state) {
        this.state = state;
        this.novoSelectAllToggle = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.allRows = new Map();
    }
    /**
     * @param {?} id
     * @param {?} row
     * @return {?}
     */
    register(id, row) {
        this.allRows.set(id, row);
    }
    /**
     * @param {?} id
     * @return {?}
     */
    deregister(id) {
        this.allRows.delete(id);
        this.state.selectedRows.delete(id);
        clearTimeout(this.throttleTimeout);
        this.throttleTimeout = setTimeout((/**
         * @return {?}
         */
        () => {
            if (this.state.selectedRows.size === 0) {
                this.novoSelectAllToggle.emit(false);
            }
        }));
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.allRows.clear();
        this.state.selectedRows.clear();
    }
    /**
     * @param {?} id
     * @param {?} selected
     * @param {?} row
     * @return {?}
     */
    toggle(id, selected, row) {
        if (selected) {
            this.state.selectedRows.set(id, row);
        }
        else {
            this.state.selectedRows.delete(id);
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    selectAll(value) {
        if (value) {
            this.state.selectedRows = new Map(this.allRows);
        }
        else {
            this.state.selectedRows.clear();
        }
        this.novoSelectAllToggle.emit(value);
    }
}
NovoSelection.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{
                selector: '[novoSelection]',
            },] }
];
/** @nocollapse */
NovoSelection.ctorParameters = () => [
    { type: NovoActivityTableState }
];
NovoSelection.propDecorators = {
    novoSelectAllToggle: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }]
};
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: elements/simple-table/cell.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Workaround for https://github.com/angular/angular/issues/17849
 * @type {?}
 */
const _NovoCellDef = _angular_cdk_table__WEBPACK_IMPORTED_MODULE_16__["CdkCellDef"];
/** @type {?} */
const _NovoHeaderCellDef = _angular_cdk_table__WEBPACK_IMPORTED_MODULE_16__["CdkHeaderCellDef"];
/** @type {?} */
const _NovoColumnDef = _angular_cdk_table__WEBPACK_IMPORTED_MODULE_16__["CdkColumnDef"];
/** @type {?} */
const _NovoHeaderCell = _angular_cdk_table__WEBPACK_IMPORTED_MODULE_16__["CdkHeaderCell"];
/** @type {?} */
const _NovoCell = _angular_cdk_table__WEBPACK_IMPORTED_MODULE_16__["CdkCell"];
class NovoSimpleCellDef extends _NovoCellDef {
}
NovoSimpleCellDef.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{
                selector: '[novoSimpleCellDef]',
                providers: [{ provide: _angular_cdk_table__WEBPACK_IMPORTED_MODULE_16__["CdkCellDef"], useExisting: NovoSimpleCellDef }],
            },] }
];
class NovoSimpleHeaderCellDef extends _NovoHeaderCellDef {
}
NovoSimpleHeaderCellDef.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{
                selector: '[novoSimpleHeaderCellDef]',
                providers: [{ provide: _angular_cdk_table__WEBPACK_IMPORTED_MODULE_16__["CdkHeaderCellDef"], useExisting: NovoSimpleHeaderCellDef }],
            },] }
];
class NovoSimpleColumnDef extends _NovoColumnDef {
}
NovoSimpleColumnDef.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{
                selector: '[novoSimpleColumnDef]',
                providers: [{ provide: _angular_cdk_table__WEBPACK_IMPORTED_MODULE_16__["CdkColumnDef"], useExisting: NovoSimpleColumnDef }],
            },] }
];
NovoSimpleColumnDef.propDecorators = {
    name: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"], args: ['novoSimpleColumnDef',] }]
};
if (false) {}
/**
 * @template T
 */
class NovoSimpleHeaderCell extends _NovoHeaderCell {
    /**
     * @param {?} columnDef
     * @param {?} elementRef
     * @param {?} renderer
     */
    constructor(columnDef, elementRef, renderer) {
        super(columnDef, elementRef);
        this.elementRef = elementRef;
        this.renderer = renderer;
        this.role = 'columnheader';
        renderer.setAttribute(elementRef.nativeElement, 'data-automation-id', `novo-column-header-${columnDef.cssClassFriendlyName}`);
        renderer.addClass(elementRef.nativeElement, `novo-column-${columnDef.cssClassFriendlyName}`);
        renderer.addClass(elementRef.nativeElement, 'novo-simple-header-cell');
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.column.width) {
            this.renderer.setStyle(this.elementRef.nativeElement, 'min-width', `${this.column.width}px`);
            this.renderer.setStyle(this.elementRef.nativeElement, 'max-width', `${this.column.width}px`);
            this.renderer.setStyle(this.elementRef.nativeElement, 'width', `${this.column.width}px`);
        }
    }
}
NovoSimpleHeaderCell.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{
                selector: 'novo-simple-header-cell',
            },] }
];
/** @nocollapse */
NovoSimpleHeaderCell.ctorParameters = () => [
    { type: _angular_cdk_table__WEBPACK_IMPORTED_MODULE_16__["CdkColumnDef"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Renderer2"] }
];
NovoSimpleHeaderCell.propDecorators = {
    role: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostBinding"], args: ['attr.role',] }],
    column: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }]
};
if (false) {}
class NovoSimpleEmptyHeaderCell extends _NovoHeaderCell {
    /**
     * @param {?} columnDef
     * @param {?} elementRef
     * @param {?} renderer
     */
    constructor(columnDef, elementRef, renderer) {
        super(columnDef, elementRef);
        this.role = 'columnheader';
        renderer.setAttribute(elementRef.nativeElement, 'data-automation-id', `novo-column-header-${columnDef.cssClassFriendlyName}`);
        renderer.addClass(elementRef.nativeElement, `novo-column-${columnDef.cssClassFriendlyName}`);
        renderer.addClass(elementRef.nativeElement, 'novo-simple-empty-header-cell');
    }
}
NovoSimpleEmptyHeaderCell.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{
                selector: 'novo-simple-empty-header-cell',
            },] }
];
/** @nocollapse */
NovoSimpleEmptyHeaderCell.ctorParameters = () => [
    { type: _angular_cdk_table__WEBPACK_IMPORTED_MODULE_16__["CdkColumnDef"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Renderer2"] }
];
NovoSimpleEmptyHeaderCell.propDecorators = {
    role: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostBinding"], args: ['attr.role',] }]
};
if (false) {}
class NovoSimpleCheckboxHeaderCell extends _NovoHeaderCell {
    /**
     * @param {?} columnDef
     * @param {?} elementRef
     * @param {?} renderer
     * @param {?} ref
     * @param {?} _selection
     */
    constructor(columnDef, elementRef, renderer, ref, _selection) {
        super(columnDef, elementRef);
        this._selection = _selection;
        this.role = 'columnheader';
        this.selectAll = false;
        renderer.setAttribute(elementRef.nativeElement, 'data-automation-id', `novo-checkbox-column-header-${columnDef.cssClassFriendlyName}`);
        renderer.addClass(elementRef.nativeElement, `novo-checkbox-column-${columnDef.cssClassFriendlyName}`);
        renderer.addClass(elementRef.nativeElement, 'novo-simple-checkbox-header-cell');
        this.selectAllSubscription = _selection.novoSelectAllToggle.subscribe((/**
         * @param {?} value
         * @return {?}
         */
        (value) => {
            this.selectAll = value;
            ref.markForCheck();
        }));
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.selectAllSubscription.unsubscribe();
    }
    /**
     * @param {?} value
     * @return {?}
     */
    toggle(value) {
        this._selection.selectAll(value);
    }
}
NovoSimpleCheckboxHeaderCell.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'novo-simple-checkbox-header-cell',
                template: `<novo-checkbox [(ngModel)]="selectAll" (ngModelChange)="toggle($event)"></novo-checkbox>`
            }] }
];
/** @nocollapse */
NovoSimpleCheckboxHeaderCell.ctorParameters = () => [
    { type: _angular_cdk_table__WEBPACK_IMPORTED_MODULE_16__["CdkColumnDef"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Renderer2"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectorRef"] },
    { type: NovoSelection, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"] }] }
];
NovoSimpleCheckboxHeaderCell.propDecorators = {
    role: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostBinding"], args: ['attr.role',] }]
};
if (false) {}
/**
 * @template T
 */
class NovoSimpleCell extends _NovoCell {
    /**
     * @param {?} columnDef
     * @param {?} elementRef
     * @param {?} renderer
     */
    constructor(columnDef, elementRef, renderer) {
        super(columnDef, elementRef);
        this.elementRef = elementRef;
        this.renderer = renderer;
        this.role = 'gridcell';
        renderer.setAttribute(elementRef.nativeElement, 'data-automation-id', `novo-column-${columnDef.cssClassFriendlyName}`);
        renderer.addClass(elementRef.nativeElement, `novo-column-${columnDef.cssClassFriendlyName}`);
        renderer.addClass(elementRef.nativeElement, 'novo-simple-cell');
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.column.customClass) {
            this.renderer.addClass(this.elementRef.nativeElement, this.column.customClass(this.row));
        }
        if (this.column.width) {
            this.renderer.setStyle(this.elementRef.nativeElement, 'min-width', `${this.column.width}px`);
            this.renderer.setStyle(this.elementRef.nativeElement, 'max-width', `${this.column.width}px`);
            this.renderer.setStyle(this.elementRef.nativeElement, 'width', `${this.column.width}px`);
            // TODO - this inhibits resizing the page after the initial load -- but do we care?!?!
            // this.renderer.setStyle(this.spanElement.nativeElement, 'min-width', `${this.column.width - 20}px`);
            // this.renderer.setStyle(this.spanElement.nativeElement, 'max-width', `${this.column.width - 20}px`);
            // this.renderer.setStyle(this.spanElement.nativeElement, 'width', `${this.column.width - 20}px`);
        }
        // else {
        //     // TODO - this inhibits resizing the page after the initial load -- but do we care?!?!
        //     this.renderer.setStyle(this.spanElement.nativeElement, 'min-width', `${this.elementRef.nativeElement.offsetWidth - 20}px`);
        //     this.renderer.setStyle(this.spanElement.nativeElement, 'max-width', `${this.elementRef.nativeElement.offsetWidth - 20}px`);
        //     this.renderer.setStyle(this.spanElement.nativeElement, 'width', `${this.elementRef.nativeElement.offsetWidth - 20}px`);
        // }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onClick(event) {
        Helpers.swallowEvent(event);
        if (this.column.onClick) {
            this.column.onClick(this.row);
        }
        return;
    }
}
NovoSimpleCell.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'novo-simple-cell',
                template: `
    <span [class.clickable]="!!column.onClick" (click)="onClick($event)" #span>{{ column.renderer(row) }}</span>
  `,
                changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectionStrategy"].OnPush
            }] }
];
/** @nocollapse */
NovoSimpleCell.ctorParameters = () => [
    { type: _angular_cdk_table__WEBPACK_IMPORTED_MODULE_16__["CdkColumnDef"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Renderer2"] }
];
NovoSimpleCell.propDecorators = {
    role: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostBinding"], args: ['attr.role',] }],
    row: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    column: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }]
};
if (false) {}
class NovoSimpleCheckboxCell extends _NovoCell {
    /**
     * @param {?} columnDef
     * @param {?} elementRef
     * @param {?} renderer
     * @param {?} _selection
     */
    constructor(columnDef, elementRef, renderer, _selection) {
        super(columnDef, elementRef);
        this.columnDef = columnDef;
        this._selection = _selection;
        this.role = 'gridcell';
        this.selected = false;
        renderer.setAttribute(elementRef.nativeElement, 'data-automation-id', `novo-checkbox-column-${columnDef.cssClassFriendlyName}`);
        renderer.addClass(elementRef.nativeElement, `novo-checkbox-column-${columnDef.cssClassFriendlyName}`);
        renderer.addClass(elementRef.nativeElement, 'novo-simple-checkbox-cell');
        this.selectAllSubscription = _selection.novoSelectAllToggle.subscribe((/**
         * @param {?} value
         * @return {?}
         */
        (value) => {
            this.selected = value;
        }));
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this._selection.register(this.row.id || this.index, this.row);
        this.selected = this._selection.state.selectedRows.has(this.row.id || this.index);
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this._selection.deregister(this.row.id || this.index);
        this.selectAllSubscription.unsubscribe();
    }
    /**
     * @param {?} value
     * @return {?}
     */
    toggle(value) {
        this._selection.toggle(this.row.id || this.index, value, this.row);
    }
}
NovoSimpleCheckboxCell.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'novo-simple-checkbox-cell',
                template: `
    <novo-checkbox [ngModel]="selected" (ngModelChange)="toggle($event)"></novo-checkbox>
  `
            }] }
];
/** @nocollapse */
NovoSimpleCheckboxCell.ctorParameters = () => [
    { type: _angular_cdk_table__WEBPACK_IMPORTED_MODULE_16__["CdkColumnDef"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Renderer2"] },
    { type: NovoSelection, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"] }] }
];
NovoSimpleCheckboxCell.propDecorators = {
    role: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostBinding"], args: ['attr.role',] }],
    row: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    index: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }]
};
if (false) {}
/**
 * @template T
 */
class NovoSimpleActionCell extends _NovoCell {
    /**
     * @param {?} columnDef
     * @param {?} elementRef
     * @param {?} renderer
     * @param {?} labels
     */
    constructor(columnDef, elementRef, renderer, labels) {
        super(columnDef, elementRef);
        this.elementRef = elementRef;
        this.renderer = renderer;
        this.labels = labels;
        this.role = 'gridcell';
        renderer.setAttribute(elementRef.nativeElement, 'data-automation-id', `novo-action-column-${columnDef.cssClassFriendlyName}`);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.column.options) {
            this.renderer.addClass(this.elementRef.nativeElement, 'novo-simple-dropdown-cell');
        }
        else {
            this.renderer.addClass(this.elementRef.nativeElement, 'novo-simple-button-cell');
        }
    }
    /**
     * @param {?} check
     * @param {?} row
     * @return {?}
     */
    isDisabled(check, row) {
        if (check.disabled === true) {
            return true;
        }
        if (check.disabledCheck) {
            return check.disabledCheck(row);
        }
        return false;
    }
}
NovoSimpleActionCell.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'novo-simple-action-cell',
                template: `
    <ng-container *ngIf="!column.options">
      <button theme="icon" [icon]="column.icon" (click)="column.onClick(row)" [disabled]="isDisabled(column, row)"></button>
    </ng-container>
    <ng-container *ngIf="column.options">
      <novo-dropdown parentScrollSelector=".novo-simple-table" containerClass="novo-table-dropdown-cell">
        <button type="button" theme="dialogue" icon="collapse" inverse>{{ column.label || labels.actions }}</button>
        <list>
          <item *ngFor="let option of column.options" (action)="option.onClick(row)" [disabled]="isDisabled(option, row)">
            <span [attr.data-automation-id]="option.label">{{ option.label }}</span>
          </item>
        </list>
      </novo-dropdown>
    </ng-container>
  `,
                changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectionStrategy"].OnPush
            }] }
];
/** @nocollapse */
NovoSimpleActionCell.ctorParameters = () => [
    { type: _angular_cdk_table__WEBPACK_IMPORTED_MODULE_16__["CdkColumnDef"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Renderer2"] },
    { type: NovoLabelService }
];
NovoSimpleActionCell.propDecorators = {
    role: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostBinding"], args: ['attr.role',] }],
    row: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    column: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }]
};
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: elements/simple-table/cell-header.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NovoSimpleFilterFocus {
    /**
     * @param {?} element
     */
    constructor(element) {
        this.element = element;
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.element.nativeElement.focus();
    }
}
NovoSimpleFilterFocus.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{
                selector: '[novoSimpleFilterFocus]',
            },] }
];
/** @nocollapse */
NovoSimpleFilterFocus.ctorParameters = () => [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"] }
];
if (false) {}
class NovoSimpleCellHeader {
    /**
     * @param {?} changeDetectorRef
     * @param {?} labels
     * @param {?} state
     * @param {?} _sort
     * @param {?} _cdkColumnDef
     */
    constructor(changeDetectorRef, labels, state, _sort, _cdkColumnDef) {
        this.changeDetectorRef = changeDetectorRef;
        this.labels = labels;
        this.state = state;
        this._sort = _sort;
        this._cdkColumnDef = _cdkColumnDef;
        this.icon = 'sortable';
        this.filterActive = false;
        this.sortActive = false;
        this.showCustomRange = false;
        this._rerenderSubscription = state.updates.subscribe((/**
         * @param {?} change
         * @return {?}
         */
        (change) => {
            if (change.sort && change.sort.id === this.id) {
                this.icon = `sort-${change.sort.value}`;
                this.sortActive = true;
            }
            else {
                this.icon = 'sortable';
                this.sortActive = false;
            }
            if (change.filter && change.filter.id === this.id) {
                this.filterActive = true;
                this.filter = change.filter.value;
            }
            else {
                this.filterActive = false;
                this.filter = undefined;
            }
            changeDetectorRef.markForCheck();
        }));
    }
    /**
     * @return {?}
     */
    get config() {
        return this._config;
    }
    /**
     * @param {?} v
     * @return {?}
     */
    set config(v) {
        if (!v) {
            this._config = {
                sortable: false,
                filterable: false,
                filterConfig: {
                    type: 'text',
                },
            };
        }
        else {
            this._config = {
                sortable: Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_12__["coerceBooleanProperty"])(v.sortable),
                filterable: Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_12__["coerceBooleanProperty"])(v.filterable),
                transforms: v.transforms || {},
                filterConfig: v.filterConfig || {
                    type: 'text',
                },
            };
            if (this._config.filterConfig.type === 'date' && !this._config.filterConfig.options) {
                this._config.filterConfig.options = this.getDefaultDateFilterOptions();
            }
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this._cdkColumnDef) {
            this.id = this._cdkColumnDef.name;
        }
        if (this.defaultSort && this.id === this.defaultSort.id) {
            this.icon = `sort-${this.defaultSort.value}`;
            this.sortActive = true;
            this.changeDetectorRef.markForCheck();
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this._rerenderSubscription.unsubscribe();
    }
    /**
     * @return {?}
     */
    sort() {
        if (this.changeTimeout) {
            clearTimeout(this.changeTimeout);
        }
        this.changeTimeout = setTimeout((/**
         * @return {?}
         */
        () => {
            this.direction = this.getNextSortDirection(this.direction);
            this._sort.sort(this.id, this.direction, this._config.transforms.sort);
            this.changeDetectorRef.markForCheck();
        }), 300);
    }
    /**
     * @param {?} event
     * @param {?} value
     * @return {?}
     */
    toggleCustomRange(event, value) {
        Helpers.swallowEvent(event);
        this.showCustomRange = value;
        this.changeDetectorRef.markForCheck();
        this.dropdown.openPanel(); // Ensures that the panel correctly updates to the dynamic size of the dropdown
    }
    /**
     * @param {?=} filter
     * @return {?}
     */
    filterData(filter) {
        /** @type {?} */
        let actualFilter = filter;
        if (this.config.filterConfig.type === 'date' && filter) {
            this.activeDateFilter = filter.label || this.labels.customDateRange;
            if (filter.startDate && filter.endDate) {
                actualFilter = {
                    min: Object(date_fns__WEBPACK_IMPORTED_MODULE_10__["startOfDay"])(filter.startDate.date),
                    max: Object(date_fns__WEBPACK_IMPORTED_MODULE_10__["startOfDay"])(Object(date_fns__WEBPACK_IMPORTED_MODULE_10__["addDays"])(Object(date_fns__WEBPACK_IMPORTED_MODULE_10__["startOfDay"])(filter.endDate.date), 1)),
                };
            }
            else {
                actualFilter = {
                    min: filter.min ? Object(date_fns__WEBPACK_IMPORTED_MODULE_10__["addDays"])(Object(date_fns__WEBPACK_IMPORTED_MODULE_10__["startOfToday"])(), filter.min) : Object(date_fns__WEBPACK_IMPORTED_MODULE_10__["startOfToday"])(),
                    max: filter.max ? Object(date_fns__WEBPACK_IMPORTED_MODULE_10__["addDays"])(Object(date_fns__WEBPACK_IMPORTED_MODULE_10__["startOfTomorrow"])(), filter.max) : Object(date_fns__WEBPACK_IMPORTED_MODULE_10__["startOfTomorrow"])(),
                };
            }
        }
        if (actualFilter && actualFilter.hasOwnProperty('value')) {
            actualFilter = filter.value;
        }
        if (this.changeTimeout) {
            clearTimeout(this.changeTimeout);
        }
        this.changeTimeout = setTimeout((/**
         * @return {?}
         */
        () => {
            if (actualFilter === '') {
                actualFilter = undefined;
            }
            this._sort.filter(this.id, actualFilter, this.config.transforms.filter);
            this.changeDetectorRef.markForCheck();
        }), 300);
    }
    /**
     * @return {?}
     */
    clearFilter() {
        this.filter = undefined;
        this.activeDateFilter = undefined;
        this.filterData();
    }
    /**
     * @private
     * @param {?} direction
     * @return {?}
     */
    getNextSortDirection(direction) {
        if (!direction) {
            return 'asc';
        }
        if (direction === 'asc') {
            return 'desc';
        }
        return 'asc';
    }
    /**
     * @private
     * @return {?}
     */
    getDefaultDateFilterOptions() {
        /** @type {?} */
        const opts = [
            { label: this.labels.past1Day, min: -1, max: 0 },
            { label: this.labels.past7Days, min: -7, max: 0 },
            { label: this.labels.past30Days, min: -30, max: 0 },
            { label: this.labels.past90Days, min: -90, max: 0 },
            { label: this.labels.past1Year, min: -366, max: 0 },
            { label: this.labels.next1Day, min: 0, max: 1 },
            { label: this.labels.next7Days, min: 0, max: 7 },
            { label: this.labels.next30Days, min: 0, max: 30 },
            { label: this.labels.next90Days, min: 0, max: 90 },
            { label: this.labels.next1Year, min: 0, max: 366 },
        ];
        return opts;
    }
}
NovoSimpleCellHeader.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: '[novo-simple-cell-config]',
                template: `
    <label (click)="sort()" data-automation-id="novo-activity-table-label" [class.sort-disabled]="!config.sortable">
      <ng-content></ng-content>
    </label>
    <div>
      <button
        *ngIf="config.sortable"
        theme="icon"
        [icon]="icon"
        (click)="sort()"
        [class.active]="sortActive"
        data-automation-id="novo-activity-table-sort"
      ></button>
      <novo-dropdown
        *ngIf="config.filterable"
        side="right"
        parentScrollSelector=".novo-simple-table"
        containerClass="simple-table-dropdown"
        data-automation-id="novo-activity-table-filter"
      >
        <button type="button" theme="icon" icon="filter" [class.active]="filterActive"></button>
        <div class="header">
          <span>{{ labels.filters }}</span>
          <button
            theme="dialogue"
            color="negative"
            icon="times"
            (click)="clearFilter()"
            *ngIf="filter"
            data-automation-id="novo-activity-table-filter-clear"
          >
            {{ labels.clear }}
          </button>
        </div>
        <ng-container [ngSwitch]="config.filterConfig.type">
          <list *ngSwitchCase="'date'">
            <ng-container *ngIf="!showCustomRange">
              <item
                [class.active]="activeDateFilter === option.label"
                *ngFor="let option of config.filterConfig.options"
                (click)="filterData(option)"
                [attr.data-automation-id]="'novo-activity-table-filter-' + option.label"
              >
                {{ option.label }} <i class="bhi-check" *ngIf="activeDateFilter === option.label"></i>
              </item>
            </ng-container>
            <item
              [class.active]="labels.customDateRange === activeDateFilter"
              (click)="toggleCustomRange($event, true)"
              *ngIf="config.filterConfig.allowCustomRange && !showCustomRange"
              [keepOpen]="true"
            >
              {{ labels.customDateRange }} <i class="bhi-check" *ngIf="labels.customDateRange === activeDateFilter"></i>
            </item>
            <div class="calendar-container" *ngIf="showCustomRange">
              <div (click)="toggleCustomRange($event, false)"><i class="bhi-previous"></i>{{ labels.backToPresetFilters }}</div>
              <novo-date-picker (onSelect)="filterData($event)" [(ngModel)]="filter" range="true"></novo-date-picker>
            </div>
          </list>
          <list *ngSwitchCase="'select'">
            <item
              [class.active]="filter === option"
              *ngFor="let option of config.filterConfig.options"
              (click)="filterData(option)"
              [attr.data-automation-id]="'novo-activity-table-filter-' + (option?.label || option)"
            >
              <span>{{ option?.label || option }}</span>
              <i class="bhi-check" *ngIf="option.hasOwnProperty('value') ? filter === option.value : filter === option"></i>
            </item>
          </list>
          <list *ngSwitchDefault>
            <item class="filter-search" keepOpen="true">
              <input
                type="text"
                [(ngModel)]="filter"
                (ngModelChange)="filterData($event)"
                novoSimpleFilterFocus
                data-automation-id="novo-activity-table-filter-input"
              />
            </item>
          </list>
        </ng-container>
      </novo-dropdown>
    </div>
  `,
                encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewEncapsulation"].None,
                changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectionStrategy"].OnPush
            }] }
];
/** @nocollapse */
NovoSimpleCellHeader.ctorParameters = () => [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectorRef"] },
    { type: NovoLabelService },
    { type: NovoActivityTableState },
    { type: NovoSortFilter, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"] }] },
    { type: _angular_cdk_table__WEBPACK_IMPORTED_MODULE_16__["CdkColumnDef"], decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"] }] }
];
NovoSimpleCellHeader.propDecorators = {
    dropdown: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"], args: [NovoDropdownElement, { static: false },] }],
    defaultSort: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    config: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"], args: ['novo-simple-cell-config',] }]
};
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: elements/simple-table/pagination.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const DEFAULT_PAGE_SIZE = 50;
class NovoSimpleTablePagination {
    /**
     * @param {?} changeDetectorRef
     * @param {?} labels
     * @param {?} state
     */
    constructor(changeDetectorRef, labels, state) {
        this.changeDetectorRef = changeDetectorRef;
        this.labels = labels;
        this.state = state;
        this._page = 0;
        this._length = 0;
        this._pageSizeOptions = [];
        this.pageChange = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        if (state && state.onReset) {
            this.resetSubscription = this.state.onReset.subscribe((/**
             * @param {?} clear
             * @return {?}
             */
            (clear) => {
                if (clear) {
                    this.page = 0;
                    this.changeDetectorRef.markForCheck();
                }
            }));
        }
    }
    /**
     * @return {?}
     */
    get page() {
        return this._page;
    }
    /**
     * @param {?} page
     * @return {?}
     */
    set page(page) {
        this._page = page;
        this.changeDetectorRef.markForCheck();
        this.longRangeLabel = this.labels.getRangeText(this.page, this.pageSize, this.length, false);
        this.shortRangeLabel = this.labels.getRangeText(this.page, this.pageSize, this.length, true);
        this.state.page = this._page;
    }
    /**
     * @return {?}
     */
    get length() {
        return this._length;
    }
    /**
     * @param {?} length
     * @return {?}
     */
    set length(length) {
        this._length = length;
        this.changeDetectorRef.markForCheck();
        this.longRangeLabel = this.labels.getRangeText(this.page, this.pageSize, this.length, false);
        this.shortRangeLabel = this.labels.getRangeText(this.page, this.pageSize, this.length, true);
    }
    /**
     * @return {?}
     */
    get pageSize() {
        return this._pageSize;
    }
    /**
     * @param {?} pageSize
     * @return {?}
     */
    set pageSize(pageSize) {
        this._pageSize = pageSize;
        this.updateDisplayedPageSizeOptions();
        this.state.pageSize = this._pageSize;
    }
    /**
     * @return {?}
     */
    get pageSizeOptions() {
        return this._pageSizeOptions;
    }
    /**
     * @param {?} pageSizeOptions
     * @return {?}
     */
    set pageSizeOptions(pageSizeOptions) {
        this._pageSizeOptions = pageSizeOptions;
        this.updateDisplayedPageSizeOptions();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this._initialized = true;
        this.updateDisplayedPageSizeOptions();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.resetSubscription.unsubscribe();
    }
    /**
     * @return {?}
     */
    nextPage() {
        if (!this.hasNextPage()) {
            return;
        }
        this.page++;
        this.emitPageEvent();
    }
    /**
     * @return {?}
     */
    previousPage() {
        if (!this.hasPreviousPage()) {
            return;
        }
        this.page--;
        this.emitPageEvent();
    }
    /**
     * @return {?}
     */
    hasPreviousPage() {
        return this.page >= 1 && this.pageSize !== 0;
    }
    /**
     * @return {?}
     */
    hasNextPage() {
        /** @type {?} */
        const numberOfPages = Math.ceil(this.length / this.pageSize) - 1;
        return this.page < numberOfPages && this.pageSize !== 0;
    }
    /**
     * @param {?} pageSize
     * @return {?}
     */
    changePageSize(pageSize) {
        this.page = 0;
        this.pageSize = pageSize;
        this.emitPageEvent();
    }
    /**
     * @private
     * @return {?}
     */
    updateDisplayedPageSizeOptions() {
        if (!this._initialized) {
            return;
        }
        if (!this.pageSize) {
            this._pageSize = this.pageSizeOptions.length !== 0 ? this.pageSizeOptions[0] : DEFAULT_PAGE_SIZE;
        }
        this.displayedPageSizeOptions = this.pageSizeOptions.slice();
        if (this.displayedPageSizeOptions.indexOf(this.pageSize) === -1) {
            this.displayedPageSizeOptions.push(this.pageSize);
        }
        this.displayedPageSizeOptions.sort((/**
         * @param {?} a
         * @param {?} b
         * @return {?}
         */
        (a, b) => a - b));
        this.changeDetectorRef.markForCheck();
        this.longRangeLabel = this.labels.getRangeText(this.page, this.pageSize, this.length, false);
        this.shortRangeLabel = this.labels.getRangeText(this.page, this.pageSize, this.length, true);
    }
    /**
     * @private
     * @return {?}
     */
    emitPageEvent() {
        /** @type {?} */
        const event = {
            page: this.page,
            pageSize: this.pageSize,
            length: this.length,
        };
        this.pageChange.next(event);
        this.state.page = this.page;
        this.state.pageSize = this.pageSize;
        this.longRangeLabel = this.labels.getRangeText(this.page, this.pageSize, this.length, false);
        this.shortRangeLabel = this.labels.getRangeText(this.page, this.pageSize, this.length, true);
        this.state.updates.next(event);
    }
}
NovoSimpleTablePagination.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'novo-simple-table-pagination',
                template: `
        <div class="novo-simple-table-pagination-size">
            <novo-tiles *ngIf="displayedPageSizeOptions.length > 1"
                        [(ngModel)]="pageSize"
                        [options]="displayedPageSizeOptions"
                        (onChange)="changePageSize($event)"
                        data-automation-id="novo-simple-table-pagination-tiles">
            </novo-tiles>
            <div *ngIf="displayedPageSizeOptions.length <= 1">{{ pageSize }}</div>
        </div>

        <div class="novo-simple-table-range-label-long"data-automation-id="novo-simple-table-pagination-range-label-long">
            {{ longRangeLabel }}
        </div>
        <div class="novo-simple-table-range-label-short"data-automation-id="novo-simple-table-pagination-range-label-short">
            {{ shortRangeLabel }}
        </div>

        <button theme="dialogue" type="button"
                class="novo-simple-table-pagination-navigation-previous"
                (click)="previousPage()"
                icon="previous"
                side="left"
                [disabled]="!hasPreviousPage()"
                data-automation-id="novo-simple-table-pagination-previous">
            <span>{{ labels.previous }}</span>
        </button>
        <button theme="dialogue" type="button"
                class="novo-simple-table-pagination-navigation-next"
                (click)="nextPage()"
                icon="next"
                side="right"
                [disabled]="!hasNextPage()"
                data-automation-id="novo-simple-table-pagination-next">
            <span>{{ labels.next }}</span>
        </button>
    `,
                changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectionStrategy"].OnPush
            }] }
];
/** @nocollapse */
NovoSimpleTablePagination.ctorParameters = () => [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectorRef"] },
    { type: NovoLabelService },
    { type: NovoActivityTableState }
];
NovoSimpleTablePagination.propDecorators = {
    page: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    length: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    pageSize: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    pageSizeOptions: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    pageChange: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }]
};
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: elements/simple-table/row.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Workaround for https://github.com/angular/angular/issues/17849
 * @type {?}
 */
const _NovoHeaderRowDef = _angular_cdk_table__WEBPACK_IMPORTED_MODULE_16__["CdkHeaderRowDef"];
/** @type {?} */
const _NovoCdkRowDef = _angular_cdk_table__WEBPACK_IMPORTED_MODULE_16__["CdkRowDef"];
/** @type {?} */
const _NovoHeaderRow = _angular_cdk_table__WEBPACK_IMPORTED_MODULE_16__["CdkHeaderRow"];
/** @type {?} */
const _NovoRow = _angular_cdk_table__WEBPACK_IMPORTED_MODULE_16__["CdkRow"];
class NovoSimpleHeaderRowDef extends _NovoHeaderRowDef {
}
NovoSimpleHeaderRowDef.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{
                selector: '[novoSimpleHeaderRowDef]',
                providers: [{ provide: _angular_cdk_table__WEBPACK_IMPORTED_MODULE_16__["CdkHeaderRowDef"], useExisting: NovoSimpleHeaderRowDef }],
            },] }
];
NovoSimpleHeaderRowDef.propDecorators = {
    columns: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"], args: ['novoSimpleHeaderRowDef',] }]
};
if (false) {}
/**
 * @template T
 */
class NovoSimpleRowDef extends _NovoCdkRowDef {
}
NovoSimpleRowDef.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{
                selector: '[novoSimpleRowDef]',
                providers: [{ provide: _angular_cdk_table__WEBPACK_IMPORTED_MODULE_16__["CdkRowDef"], useExisting: NovoSimpleRowDef }],
            },] }
];
NovoSimpleRowDef.propDecorators = {
    columns: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"], args: ['novoSimpleRowDefColumns',] }]
};
if (false) {}
class NovoSimpleHeaderRow extends _NovoHeaderRow {
    constructor() {
        super(...arguments);
        this.rowClass = 'novo-simple-header-row';
        this.role = 'row';
    }
}
NovoSimpleHeaderRow.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'novo-simple-header-row',
                template: _angular_cdk_table__WEBPACK_IMPORTED_MODULE_16__["CDK_ROW_TEMPLATE"],
                changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectionStrategy"].OnPush
            }] }
];
NovoSimpleHeaderRow.propDecorators = {
    rowClass: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostBinding"], args: ['class',] }],
    role: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostBinding"], args: ['attr.role',] }]
};
if (false) {}
class NovoSimpleRow extends _NovoRow {
    constructor() {
        super(...arguments);
        this.rowClass = 'novo-simple-row';
        this.role = 'row';
    }
}
NovoSimpleRow.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'novo-simple-row',
                template: _angular_cdk_table__WEBPACK_IMPORTED_MODULE_16__["CDK_ROW_TEMPLATE"],
                changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectionStrategy"].OnPush
            }] }
];
NovoSimpleRow.propDecorators = {
    rowClass: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostBinding"], args: ['class',] }],
    role: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostBinding"], args: ['attr.role',] }]
};
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: elements/simple-table/table-source.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @record
 * @template T
 */
function ActivityTableService() { }
if (false) {}
/**
 * @abstract
 * @template T
 */
class RemoteActivityTableService {
}
if (false) {}
/**
 * @template T
 */
class StaticActivityTableService {
    /**
     * @param {?=} data
     */
    constructor(data = []) {
        this.data = data;
    }
    /**
     * @param {?} sort
     * @param {?} filter
     * @param {?=} page
     * @param {?=} pageSize
     * @param {?=} globalSearch
     * @param {?=} outsideFilter
     * @return {?}
     */
    getTableResults(sort, filter, page = 0, pageSize, globalSearch, outsideFilter) {
        /** @type {?} */
        let ret = Helpers.deepClone(this.data);
        if (ret.length !== 0) {
            if (globalSearch) {
                ret = ret.filter((/**
                 * @param {?} item
                 * @return {?}
                 */
                (item) => Object.keys(item).some((/**
                 * @param {?} key
                 * @return {?}
                 */
                (key) => `${item[key]}`.toLowerCase().includes(globalSearch.toLowerCase())))));
            }
            if (filter) {
                /** @type {?} */
                const value = Helpers.isString(filter.value) ? filter.value.replace(/[.*+?^${}()|[\]\\]/g, '\\$&') : filter.value;
                ret = ret.filter(Helpers.filterByField(filter.id, value));
            }
            if (sort) {
                ret = ret.sort(Helpers.sortByField(sort.id, sort.value === 'desc'));
            }
            if (!Helpers.isBlank(page) && !Helpers.isBlank(pageSize)) {
                ret = ret.slice(page * pageSize, (page + 1) * pageSize);
            }
        }
        return Object(rxjs__WEBPACK_IMPORTED_MODULE_11__["of"])({ results: ret, total: this.data.length });
    }
}
if (false) {}
/**
 * @template T
 */
class ActivityTableDataSource extends _angular_cdk_table__WEBPACK_IMPORTED_MODULE_16__["DataSource"] {
    /**
     * @param {?} tableService
     * @param {?} state
     * @param {?} ref
     */
    constructor(tableService, state, ref) {
        super();
        this.tableService = tableService;
        this.state = state;
        this.ref = ref;
        this.total = 0;
        this.current = 0;
        this.loading = false;
        this.pristine = true;
    }
    /**
     * @return {?}
     */
    get totallyEmpty() {
        return this.total === 0;
    }
    /**
     * @return {?}
     */
    get currentlyEmpty() {
        return this.current === 0;
    }
    /**
     * @return {?}
     */
    connect() {
        /** @type {?} */
        const displayDataChanges = [this.state.updates];
        return Object(rxjs__WEBPACK_IMPORTED_MODULE_11__["merge"])(...displayDataChanges).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_14__["startWith"])(null), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_14__["switchMap"])((/**
         * @return {?}
         */
        () => {
            this.pristine = false;
            this.loading = true;
            return this.tableService.getTableResults(this.state.sort, this.state.filter, this.state.page, this.state.pageSize, this.state.globalSearch, this.state.outsideFilter);
        })), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_14__["map"])((/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            this.loading = false;
            this.total = data.total;
            this.current = data.results.length;
            setTimeout((/**
             * @return {?}
             */
            () => {
                this.ref.markForCheck();
            }));
            return data.results;
        })), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_14__["catchError"])((/**
         * @param {?} error
         * @return {?}
         */
        (error) => {
            console.error(error); // tslint: disable-line
            this.loading = false;
            return Object(rxjs__WEBPACK_IMPORTED_MODULE_11__["of"])(null);
        })));
    }
    /**
     * @return {?}
     */
    disconnect() { }
}
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: elements/simple-table/table.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Workaround for https://github.com/angular/angular/issues/17849
 * @type {?}
 */
const _NovoTable = _angular_cdk_table__WEBPACK_IMPORTED_MODULE_16__["CdkTable"];
/**
 * @template T
 */
class NovoTable extends _NovoTable {
}
NovoTable.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'novo-simple-table',
                template: _angular_cdk_table__WEBPACK_IMPORTED_MODULE_16__["CDK_TABLE_TEMPLATE"],
                encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewEncapsulation"].None,
                changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectionStrategy"].OnPush
            }] }
];
class NovoActivityTableActions {
}
NovoActivityTableActions.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{
                selector: 'novo-activity-table-actions',
            },] }
];
class NovoActivityTableCustomHeader {
}
NovoActivityTableCustomHeader.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{
                selector: 'novo-activity-table-custom-header',
            },] }
];
class NovoActivityTableCustomFilter {
}
NovoActivityTableCustomFilter.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{
                selector: 'novo-activity-table-custom-filter',
            },] }
];
class NovoActivityTableEmptyMessage {
}
NovoActivityTableEmptyMessage.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{
                selector: 'novo-activity-table-empty-message',
            },] }
];
class NovoActivityTableNoResultsMessage {
}
NovoActivityTableNoResultsMessage.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{
                selector: 'novo-activity-table-no-results-message',
            },] }
];
/**
 * @template T
 */
class NovoActivityTable {
    /**
     * @param {?} labels
     * @param {?} ref
     * @param {?} state
     */
    constructor(labels, ref, state) {
        this.labels = labels;
        this.ref = ref;
        this.state = state;
        this.globalSearchHiddenClassToggle = false;
        this.loading = true;
        notify('[Deprecated]: The simple table is deprecated. Please migrate to novo-data-tables!');
    }
    /**
     * @param {?} v
     * @return {?}
     */
    set customFilter(v) {
        this._customFilter = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_12__["coerceBooleanProperty"])(v);
    }
    /**
     * @return {?}
     */
    get customFilter() {
        return this._customFilter;
    }
    /**
     * @param {?} v
     * @return {?}
     */
    set forceShowHeader(v) {
        this._forceShowHeader = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_12__["coerceBooleanProperty"])(v);
    }
    /**
     * @return {?}
     */
    get forceShowHeader() {
        return this._forceShowHeader;
    }
    /**
     * @param {?} v
     * @return {?}
     */
    set hideGlobalSearch(v) {
        this._hideGlobalSearch = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_12__["coerceBooleanProperty"])(v);
        this.globalSearchHiddenClassToggle = this._hideGlobalSearch;
    }
    /**
     * @return {?}
     */
    get hideGlobalSearch() {
        return this._hideGlobalSearch;
    }
    /**
     * @param {?} v
     * @return {?}
     */
    set debug(v) {
        this._debug = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_12__["coerceBooleanProperty"])(v);
    }
    /**
     * @return {?}
     */
    get debug() {
        return this._debug;
    }
    /**
     * @return {?}
     */
    get empty() {
        return this.dataSource && this.dataSource.totallyEmpty;
    }
    /**
     * @return {?}
     */
    get loadingClass() {
        return this.loading || (this.dataSource && this.dataSource.loading);
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        this.loading = changes['activityService'] && !changes['activityService'].currentValue;
        this.ref.detectChanges();
        if (changes['activityService'] && changes['activityService'].currentValue) {
            this.loading = false;
            this.dataSource = new ActivityTableDataSource(this.activityService, this.state, this.ref);
            this.ref.detectChanges();
        }
        if (changes['outsideFilter'] && changes['outsideFilter'].currentValue) {
            if (!this.outsideFilterSubscription) {
                this.outsideFilterSubscription = this.outsideFilter.subscribe((/**
                 * @param {?} filter
                 * @return {?}
                 */
                (filter) => {
                    this.state.outsideFilter = filter;
                    this.state.updates.next({ globalSearch: this.state.globalSearch, filter: this.state.filter, sort: this.state.sort });
                    this.ref.markForCheck();
                }));
            }
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.outsideFilterSubscription) {
            this.outsideFilterSubscription.unsubscribe();
        }
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        if (this.paginationOptions && !this.paginationOptions.page) {
            this.paginationOptions.page = 0;
        }
        if (this.paginationOptions && !this.paginationOptions.pageSize) {
            this.paginationOptions.pageSize = 50;
        }
        if (this.paginationOptions && !this.paginationOptions.pageSizeOptions) {
            this.paginationOptions.pageSizeOptions = [10, 25, 50, 100];
        }
        this.state.page = this.paginationOptions ? this.paginationOptions.page : undefined;
        this.state.pageSize = this.paginationOptions ? this.paginationOptions.pageSize : undefined;
        this.ref.markForCheck();
    }
    /**
     * @param {?} term
     * @return {?}
     */
    onSearchChange(term) {
        this.state.globalSearch = term;
        this.state.reset(false, true);
        this.state.updates.next({ globalSearch: term, filter: this.state.filter, sort: this.state.sort });
    }
}
NovoActivityTable.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'novo-activity-table',
                template: `
        <div *ngIf="debug">
            <p>Total: {{ dataSource?.total }}</p>
            <p>Current: {{ dataSource?.current }}</p>
            <p>Totally Empty: {{ dataSource?.totallyEmpty }}</p>
            <p>Currently Empty: {{ dataSource?.currentlyEmpty }}</p>
            <p>Loading (DataSource): {{ dataSource?.loading }}</p>
            <p>User Filtered: {{ state.userFiltered }}</p>
            <p>Loading (Table): {{ loading }}</p>
        </div>
        <header *ngIf="(!(dataSource?.totallyEmpty && !state.userFiltered) && !loading) || forceShowHeader">
            <ng-content select="[novo-activity-table-custom-header]"></ng-content>
            <novo-search
                alwaysOpen="true"
                (searchChanged)="onSearchChange($event)"
                [(ngModel)]="state.globalSearch"
                *ngIf="!hideGlobalSearch"
                [placeholder]="searchOptions?.placeholder"
                [hint]="searchOptions?.tooltip">
            </novo-search>
            <novo-simple-table-pagination
                *ngIf="paginationOptions"
                [length]="dataSource?.total"
                [page]="paginationOptions.page"
                [pageSize]="paginationOptions.pageSize"
                [pageSizeOptions]="paginationOptions.pageSizeOptions">
            </novo-simple-table-pagination>
            <div class="novo-activity-table-actions">
                <ng-content select="[novo-activity-table-actions]"></ng-content>
            </div>
        </header>
        <div class="novo-activity-table-loading-mask" *ngIf="dataSource?.loading || loading" data-automation-id="novo-activity-table-loading">
            <novo-loading></novo-loading>
        </div>
        <div class="novo-activity-table-filter-container">
            <div class="novo-activity-table-custom-filter" *ngIf="customFilter">
                <ng-content select="[novo-activity-table-custom-filter]"></ng-content>
            </div>
            <div class="novo-activity-table-container">
                <novo-simple-table *ngIf="(columns?.length > 0)" [dataSource]="dataSource" novoSortFilter novoSelection [class.empty]="dataSource?.currentlyEmpty && state.userFiltered" [hidden]="dataSource?.totallyEmpty && !state.userFiltered">
                    <ng-content></ng-content>
                    <ng-container novoSimpleColumnDef="selection">
                        <novo-simple-checkbox-header-cell *novoSimpleHeaderCellDef></novo-simple-checkbox-header-cell>
                        <novo-simple-checkbox-cell *novoSimpleCellDef="let row; let i = index" [row]="row" [index]="i"></novo-simple-checkbox-cell>
                    </ng-container>
                    <ng-container *ngFor="let column of actionColumns" [novoSimpleColumnDef]="column.id">
                        <novo-simple-empty-header-cell [class.button-header-cell]="!column.options" [class.dropdown-header-cell]="column.options" *novoSimpleHeaderCellDef></novo-simple-empty-header-cell>
                        <novo-simple-action-cell *novoSimpleCellDef="let row; let i = index" [row]="row" [column]="column"></novo-simple-action-cell>
                    </ng-container>
                    <ng-container *ngFor="let column of columns" [novoSimpleColumnDef]="column.id">
                        <novo-simple-header-cell *novoSimpleHeaderCellDef [column]="column" [novo-simple-cell-config]="column.config" [defaultSort]="defaultSort">{{ column.label }}</novo-simple-header-cell>
                        <novo-simple-cell *novoSimpleCellDef="let row" [column]="column" [row]="row"></novo-simple-cell>
                    </ng-container>
                    <novo-simple-header-row *novoSimpleHeaderRowDef="displayedColumns"></novo-simple-header-row>
                    <novo-simple-row *novoSimpleRowDef="let row; columns: displayedColumns;"></novo-simple-row>
                </novo-simple-table>
                <div class="novo-activity-table-no-results-container" *ngIf="dataSource?.currentlyEmpty && state.userFiltered && !dataSource?.loading && !loading && !dataSource.pristine">
                    <div #filtered><ng-content select="[novo-activity-table-no-results-message]"></ng-content></div>
                    <div class="novo-activity-table-empty-message" *ngIf="filtered.childNodes.length == 0">
                        <h4><i class="bhi-search-question"></i> {{ labels.noMatchingRecordsMessage }}</h4>
                    </div>
                </div>
                <div class="novo-activity-table-empty-container" *ngIf="dataSource?.totallyEmpty && !dataSource?.loading && !loading && !state.userFiltered && !dataSource.pristine">
                    <div #empty><ng-content select="[novo-activity-table-empty-message]"></ng-content></div>
                    <div class="novo-activity-table-empty-message" *ngIf="empty.childNodes.length == 0">
                        <h4><i class="bhi-search-question"></i> {{ labels.emptyTableMessage }}</h4>
                    </div>
                </div>
            </div>
        </div>
    `,
                changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectionStrategy"].OnPush,
                providers: [NovoActivityTableState]
            }] }
];
/** @nocollapse */
NovoActivityTable.ctorParameters = () => [
    { type: NovoLabelService },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectorRef"] },
    { type: NovoActivityTableState }
];
NovoActivityTable.propDecorators = {
    globalSearchHiddenClassToggle: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostBinding"], args: ['class.global-search-hidden',] }],
    activityService: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    columns: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    displayedColumns: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    actionColumns: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    paginationOptions: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    searchOptions: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    defaultSort: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    outsideFilter: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    customFilter: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    forceShowHeader: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    hideGlobalSearch: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    debug: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    empty: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostBinding"], args: ['class.empty',] }],
    loadingClass: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostBinding"], args: ['class.loading',] }]
};
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: elements/simple-table/simple-table.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NovoSimpleTableModule {
}
NovoSimpleTableModule.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                imports: [
                    NovoDatePickerModule,
                    _angular_cdk_table__WEBPACK_IMPORTED_MODULE_16__["CdkTableModule"],
                    _angular_common__WEBPACK_IMPORTED_MODULE_6__["CommonModule"],
                    _angular_forms__WEBPACK_IMPORTED_MODULE_1__["FormsModule"],
                    NovoButtonModule,
                    NovoDropdownModule,
                    NovoFormExtrasModule,
                    NovoLoadingModule,
                    NovoTilesModule,
                    NovoSearchBoxModule,
                ],
                exports: [
                    NovoTable,
                    NovoSimpleCellDef,
                    NovoSimpleHeaderCellDef,
                    NovoSimpleColumnDef,
                    NovoActivityTableEmptyMessage,
                    NovoActivityTableNoResultsMessage,
                    NovoSimpleHeaderRowDef,
                    NovoSimpleRowDef,
                    NovoSimpleCellHeader,
                    NovoSortFilter,
                    NovoSimpleActionCell,
                    NovoSimpleEmptyHeaderCell,
                    NovoSimpleHeaderCell,
                    NovoSimpleCell,
                    NovoSimpleHeaderRow,
                    NovoSimpleRow,
                    NovoSimpleFilterFocus,
                    NovoSimpleTablePagination,
                    NovoActivityTableCustomHeader,
                    NovoSimpleCheckboxCell,
                    NovoSimpleCheckboxHeaderCell,
                    NovoSelection,
                    NovoActivityTable,
                    NovoActivityTableActions,
                    NovoActivityTableCustomFilter,
                ],
                declarations: [
                    NovoTable,
                    NovoSimpleCellDef,
                    NovoSimpleHeaderCellDef,
                    NovoSimpleColumnDef,
                    NovoActivityTableEmptyMessage,
                    NovoActivityTableNoResultsMessage,
                    NovoSimpleHeaderRowDef,
                    NovoSimpleRowDef,
                    NovoSimpleCellHeader,
                    NovoSortFilter,
                    NovoSimpleActionCell,
                    NovoSimpleEmptyHeaderCell,
                    NovoSimpleHeaderCell,
                    NovoSimpleCell,
                    NovoSimpleHeaderRow,
                    NovoSimpleRow,
                    NovoSimpleFilterFocus,
                    NovoSimpleTablePagination,
                    NovoActivityTableCustomHeader,
                    NovoSimpleCheckboxCell,
                    NovoSimpleCheckboxHeaderCell,
                    NovoSelection,
                    NovoActivityTable,
                    NovoActivityTableActions,
                    NovoActivityTableCustomFilter,
                ],
                providers: [NovoActivityTableState],
            },] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: elements/slider/Slider.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NovoSliderElement {
    /**
     * @param {?} element
     * @param {?} labels
     */
    constructor(element, labels) {
        this.element = element;
        this.labels = labels;
        this.currentSlide = 0;
        this.start = true;
        this.end = true;
        this.currSlides = ['active'];
        this.handleKeyDownFunc = this.handleKeyDown.bind(this);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        for (let i = 0; i < this.slides; i++) {
            this.currSlides[i] = i > 0 ? 'inactive' : 'active';
        }
        // Catch Tab Events
        this.element.nativeElement.addEventListener('keydown', this.handleKeyDownFunc);
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.element.nativeElement.removeEventListener('keydown', this.handleKeyDownFunc);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    handleKeyDown(event) {
        if (event.keyCode === 9) {
            event.stopImmediatePropagation();
            event.preventDefault();
        }
    }
    /**
     * @param {?} direction
     * @return {?}
     */
    changeSlide(direction) {
        if (direction === 'next') {
            if (this.currentSlide === this.slides - 1) {
                return;
            }
            this.currentSlide++;
        }
        else {
            if (this.currentSlide === 0) {
                return;
            }
            this.currentSlide--;
        }
        for (let i = 0; i < this.slides; i++) {
            this.currSlides[i] = 'inactive';
        }
        this.currSlides[this.currentSlide] = 'active';
        this.start = this.currentSlide === 0;
        this.end = this.currentSlide === this.slides - 1;
        this.currentClass = `slide-${this.currentSlide}`;
    }
}
NovoSliderElement.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'novo-slider',
                template: `
        <section class="slides">
            <ng-content select="div[slide]"></ng-content>
        </section>
        <div class="controls">
            <button *ngIf="!start" theme="icon" icon="previous" (click)="changeSlide('back')"></button>
            <div class="indicators">
                <div class="indicator-circle" *ngFor="let indicator of currSlides; let i = index" [ngClass]="indicator"></div>
            </div>
            <button *ngIf="!end" theme="primary" icon="next" (click)="changeSlide('next')">{{ labels.next }}</button>
            <ng-content select="button" *ngIf="end"></ng-content>
        </div>
    `,
                host: {
                    '[class]': 'currentClass',
                }
            }] }
];
/** @nocollapse */
NovoSliderElement.ctorParameters = () => [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"] },
    { type: NovoLabelService }
];
NovoSliderElement.propDecorators = {
    slides: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }]
};
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: elements/slider/Slider.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NovoSliderModule {
}
NovoSliderModule.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                imports: [_angular_common__WEBPACK_IMPORTED_MODULE_6__["CommonModule"], NovoButtonModule],
                declarations: [NovoSliderElement],
                exports: [NovoSliderElement],
            },] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: elements/stepper/step-label.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NovoStepLabel extends _angular_cdk_stepper__WEBPACK_IMPORTED_MODULE_25__["CdkStepLabel"] {
    /**
     * @param {?} template
     */
    constructor(template) {
        super(template);
    }
}
NovoStepLabel.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{
                selector: '[novoStepLabel]',
            },] }
];
/** @nocollapse */
NovoStepLabel.ctorParameters = () => [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["TemplateRef"] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: elements/stepper/step-header.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NovoStepHeader extends _angular_cdk_stepper__WEBPACK_IMPORTED_MODULE_25__["CdkStepHeader"] {
    /**
     * @param {?} _focusMonitor
     * @param {?} _element
     */
    constructor(_focusMonitor, _element) {
        super(_element);
        this._focusMonitor = _focusMonitor;
        this._element = _element;
        _focusMonitor.monitor(_element.nativeElement, true);
    }
    /**
     * Index of the given step.
     * @return {?}
     */
    get index() {
        return this._index;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set index(value) {
        this._index = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_12__["coerceNumberProperty"])(value);
    }
    /**
     * Whether the given step is selected.
     * @return {?}
     */
    get selected() {
        return this._selected;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set selected(value) {
        this._selected = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_12__["coerceBooleanProperty"])(value);
    }
    /**
     * Whether the given step label is active.
     * @return {?}
     */
    get active() {
        return this._active;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set active(value) {
        this._active = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_12__["coerceBooleanProperty"])(value);
    }
    /**
     * Whether the given step label is active.
     * @return {?}
     */
    get touched() {
        return this.selected || this.state === 'edit' || this.state === 'done';
    }
    /**
     * Whether the given step is optional.
     * @return {?}
     */
    get optional() {
        return this._optional;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set optional(value) {
        this._optional = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_12__["coerceBooleanProperty"])(value);
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this._focusMonitor.stopMonitoring(this._element.nativeElement);
    }
    /**
     * Returns string label of given step if it is a text label.
     * @return {?}
     */
    _stringLabel() {
        return this.label instanceof NovoStepLabel ? null : this.label;
    }
    /**
     * Returns NovoStepLabel if the label of given step is a template label.
     * @return {?}
     */
    _templateLabel() {
        return this.label instanceof NovoStepLabel ? this.label : null;
    }
    /**
     * Returns the host HTML element.
     * @return {?}
     */
    _getHostElement() {
        return this._element.nativeElement;
    }
}
NovoStepHeader.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'novo-step-header',
                template: "<div [class.novo-step-icon]=\"touched\"\n     [class.novo-step-icon-not-touched]=\"!touched\">\n  <ng-container *ngIf=\"icon\">\n    <novo-icon size=\"small\" raised=\"true\" [theme]=\"theme\">{{icon}}</novo-icon>\n  </ng-container>\n  <ng-container *ngIf=\"!icon\">\n    <span class=\"novo-step-number\">{{index + 1}}</span>\n  </ng-container>\n</div>\n<div class=\"novo-step-label\"\n     [class.novo-step-label-active]=\"active\"\n     [class.novo-step-label-selected]=\"selected\">\n  <!-- If there is a label template, use it. -->\n  <ng-container *ngIf=\"_templateLabel()\" [ngTemplateOutlet]=\"_templateLabel()!.template\">\n  </ng-container>\n  <!-- It there is no label template, fall back to the text label. -->\n  <div class=\"novo-step-text-label\" *ngIf=\"_stringLabel()\">{{label}}</div>\n</div>\n<novo-step-status [state]=\"state\"></novo-step-status>\n",
                host: {
                    class: 'novo-step-header',
                    role: 'tab',
                },
                preserveWhitespaces: false,
                changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectionStrategy"].OnPush,
                styles: ["@-webkit-keyframes rotate{0%{transform:rotateZ(0)}75%{transform:rotateZ(200deg)}100%{transform:rotateZ(180deg)}}@keyframes rotate{0%{transform:rotateZ(0)}75%{transform:rotateZ(200deg)}100%{transform:rotateZ(180deg)}}@-webkit-keyframes half-rotate{0%{transform:rotateZ(45deg)}75%{transform:rotateZ(100deg)}100%{transform:rotateZ(90deg)}}@keyframes half-rotate{0%{transform:rotateZ(45deg)}75%{transform:rotateZ(100deg)}100%{transform:rotateZ(90deg)}}@-webkit-keyframes rotateBack{0%{transform:rotateZ(90deg)}100%{transform:rotateZ(0)}}@keyframes rotateBack{0%{transform:rotateZ(90deg)}100%{transform:rotateZ(0)}}@-webkit-keyframes show{0%{opacity:0;transform:translateX(-100%)}75%{transform:translateX(0)}100%{opacity:1;transform:translateX(0)}}@keyframes show{0%{opacity:0;transform:translateX(-100%)}75%{transform:translateX(0)}100%{opacity:1;transform:translateX(0)}}.novo-step-header{overflow:visible;outline:0;cursor:pointer;position:relative}.novo-step-optional{font-size:12px}.novo-step-icon,.novo-step-icon-not-touched{border-radius:50%;height:24px;width:24px;align-items:center;justify-content:center;display:flex}.novo-step-icon .novo-step-number,.novo-step-icon-not-touched .novo-step-number{font-size:1em;min-width:1.6em;height:1.6em;box-shadow:2px 2px 0 rgba(0,0,0,.2);display:flex;align-items:center;justify-content:center;border-radius:4px}.novo-step-icon .novo-step-number{background:#4a89dc;color:#fff}.novo-step-icon-not-touched .novo-step-number{background:#a9adbb;color:#fff}.novo-step-label{display:inline-block;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;min-width:50px;vertical-align:middle;text-align:center;padding:4px 0}.novo-step-text-label{text-align:center;text-overflow:ellipsis;overflow:hidden}"]
            }] }
];
/** @nocollapse */
NovoStepHeader.ctorParameters = () => [
    { type: _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_17__["FocusMonitor"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"] }
];
NovoStepHeader.propDecorators = {
    theme: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    color: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    icon: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    state: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    label: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    iconOverrides: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    index: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    selected: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    active: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    optional: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }]
};
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: elements/stepper/stepper.animations.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Animations used by the Novo steppers.
 * @type {?}
 */
const novoStepperAnimations = {
    /**
     * Animation that transitions the step along the X axis in a horizontal stepper.
     */
    horizontalStepTransition: Object(_angular_animations__WEBPACK_IMPORTED_MODULE_9__["trigger"])('stepTransition', [
        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_9__["state"])('previous', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_9__["style"])({ transform: 'translate3d(-100%, 0, 0)', visibility: 'hidden' })),
        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_9__["state"])('current', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_9__["style"])({ transform: 'none', visibility: 'visible' })),
        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_9__["state"])('next', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_9__["style"])({ transform: 'translate3d(100%, 0, 0)', visibility: 'hidden' })),
        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_9__["transition"])('* => *', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_9__["animate"])('500ms cubic-bezier(0.35, 0, 0.25, 1)')),
    ]),
    /**
     * Animation that transitions the step along the Y axis in a vertical stepper.
     */
    verticalStepTransition: Object(_angular_animations__WEBPACK_IMPORTED_MODULE_9__["trigger"])('stepTransition', [
        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_9__["state"])('previous', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_9__["style"])({ height: '0px', visibility: 'hidden' })),
        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_9__["state"])('next', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_9__["style"])({ height: '0px', visibility: 'hidden' })),
        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_9__["state"])('current', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_9__["style"])({ height: '*', visibility: 'visible' })),
        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_9__["transition"])('* <=> current', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_9__["animate"])('225ms cubic-bezier(0.4, 0.0, 0.2, 1)')),
    ]),
};

/**
 * @fileoverview added by tsickle
 * Generated from: elements/stepper/stepper.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const _NovoStep = _angular_cdk_stepper__WEBPACK_IMPORTED_MODULE_25__["CdkStep"];
/** @type {?} */
const _NovoStepper = _angular_cdk_stepper__WEBPACK_IMPORTED_MODULE_25__["CdkStepper"];
class NovoStep extends _angular_cdk_stepper__WEBPACK_IMPORTED_MODULE_25__["CdkStep"] {
    /**
     * @param {?} stepper
     */
    constructor(stepper) {
        super(stepper);
    }
}
NovoStep.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'novo-step',
                template: "<ng-template><ng-content></ng-content></ng-template>\n",
                preserveWhitespaces: false,
                changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectionStrategy"].OnPush
            }] }
];
/** @nocollapse */
NovoStep.ctorParameters = () => [
    { type: _angular_cdk_stepper__WEBPACK_IMPORTED_MODULE_25__["CdkStepper"], decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["forwardRef"])((/**
                     * @return {?}
                     */
                    () => NovoStepper)),] }] }
];
NovoStep.propDecorators = {
    stepLabel: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ContentChild"], args: [NovoStepLabel, { static: false },] }],
    theme: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    color: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    icon: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }]
};
if (false) {}
class NovoStepper extends _angular_cdk_stepper__WEBPACK_IMPORTED_MODULE_25__["CdkStepper"] {
    constructor() {
        super(...arguments);
        /**
         * Consumer-specified template-refs to be used to override the header icons.
         */
        this._iconOverrides = {};
    }
    /**
     * @return {?}
     */
    get completed() {
        try {
            /** @type {?} */
            const steps = this._steps.toArray();
            /** @type {?} */
            const length = steps.length - 1;
            return steps[length].completed && length === this.selectedIndex;
        }
        catch (err) {
            return false;
        }
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        // Mark the component for change detection whenever the content children query changes
        this._steps.changes.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_14__["takeUntil"])(this._destroyed)).subscribe((/**
         * @return {?}
         */
        () => this._stateChanged()));
    }
    /**
     * @return {?}
     */
    complete() {
        try {
            /** @type {?} */
            const steps = this._steps.toArray();
            steps[this.selectedIndex].completed = true;
            this.next();
            this._stateChanged();
        }
        catch (err) {
            // do nothing
        }
    }
    /**
     * @param {?} index
     * @return {?}
     */
    getIndicatorType(index) {
        /** @type {?} */
        const steps = this._steps.toArray();
        if (index === this.selectedIndex) {
            if (steps[index] && index === steps.length - 1 && steps[index].completed) {
                return 'done';
            }
            return 'edit';
        }
        if (index < this.selectedIndex) {
            return 'done';
        }
        return 'none';
    }
}
NovoStepper.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{
                selector: '[novoStepper]',
            },] }
];
NovoStepper.propDecorators = {
    _stepHeader: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChildren"], args: [NovoStepHeader,] }],
    _steps: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ContentChildren"], args: [NovoStep,] }],
    _icons: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ContentChildren"], args: [NovoIconComponent,] }]
};
if (false) {}
class NovoHorizontalStepper extends NovoStepper {
}
NovoHorizontalStepper.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'novo-horizontal-stepper',
                template: "<div class=\"novo-horizontal-stepper-header-container\">\n    <div class=\"novo-stepper-horizontal-line complete\"></div>\n  <ng-container *ngFor=\"let step of _steps; let i = index; let isLast = last\">\n    <novo-step-header  class=\"novo-horizontal-stepper-header\"\n                     (click)=\"step.select()\"\n                     (keydown)=\"_onKeydown($event)\"\n                     [tabIndex]=\"_getFocusIndex() === i ? 0 : -1\"\n                     [id]=\"_getStepLabelId(i)\"\n                     [attr.aria-controls]=\"_getStepContentId(i)\"\n                     [attr.aria-selected]=\"selectedIndex == i\"\n                     [index]=\"i\"\n                     [theme]=\"step.theme\"\n                     [color]=\"step.color\"\n                     [icon]=\"step.icon\"\n                     [state]=\"getIndicatorType(i)\"\n                     [label]=\"step.stepLabel || step.label\"\n                     [selected]=\"selectedIndex === i\"\n                     [active]=\"step.completed || selectedIndex === i || !linear\"\n                     [optional]=\"step.optional\"\n                     [iconOverrides]=\"_iconOverrides\">\n    </novo-step-header>\n  </ng-container>\n  <div class=\"novo-stepper-horizontal-line\" [class.complete]=\"completed\"></div>\n</div>\n\n<div class=\"novo-horizontal-content-container\">\n  <div *ngFor=\"let step of _steps; let i = index\"\n       class=\"novo-horizontal-stepper-content\" role=\"tabpanel\"\n       [@stepTransition]=\"_getAnimationDirection(i)\"\n       [id]=\"_getStepContentId(i)\"\n       [attr.aria-labelledby]=\"_getStepLabelId(i)\"\n       [attr.aria-expanded]=\"selectedIndex === i\">\n    <ng-container [ngTemplateOutlet]=\"step.content\"></ng-container>\n  </div>\n</div>\n",
                host: {
                    class: 'novo-stepper-horizontal',
                    'aria-orientation': 'horizontal',
                    role: 'tablist',
                },
                animations: [novoStepperAnimations.horizontalStepTransition],
                providers: [{ provide: NovoStepper, useExisting: NovoHorizontalStepper }],
                // encapsulation: ViewEncapsulation.None,
                preserveWhitespaces: false,
                changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectionStrategy"].OnPush,
                styles: ["@-webkit-keyframes rotate{0%{transform:rotateZ(0)}75%{transform:rotateZ(200deg)}100%{transform:rotateZ(180deg)}}@keyframes rotate{0%{transform:rotateZ(0)}75%{transform:rotateZ(200deg)}100%{transform:rotateZ(180deg)}}@-webkit-keyframes half-rotate{0%{transform:rotateZ(45deg)}75%{transform:rotateZ(100deg)}100%{transform:rotateZ(90deg)}}@keyframes half-rotate{0%{transform:rotateZ(45deg)}75%{transform:rotateZ(100deg)}100%{transform:rotateZ(90deg)}}@-webkit-keyframes rotateBack{0%{transform:rotateZ(90deg)}100%{transform:rotateZ(0)}}@keyframes rotateBack{0%{transform:rotateZ(90deg)}100%{transform:rotateZ(0)}}@-webkit-keyframes show{0%{opacity:0;transform:translateX(-100%)}75%{transform:translateX(0)}100%{opacity:1;transform:translateX(0)}}@keyframes show{0%{opacity:0;transform:translateX(-100%)}75%{transform:translateX(0)}100%{opacity:1;transform:translateX(0)}}.novo-stepper-horizontal,.novo-stepper-vertical{display:block}.novo-horizontal-stepper-header-container{white-space:nowrap;display:flex;align-items:center;justify-content:center;margin-bottom:1em;background:#f4f4f4}.novo-stepper-horizontal-line{border-bottom:1px solid #d9dadc;flex:auto;min-width:0;height:80px}.novo-stepper-horizontal-line.complete{border-bottom:1px solid #4a89dc}.novo-horizontal-stepper-header{display:flex;height:80px;flex-flow:column;overflow:visible;align-items:center;justify-content:center;padding:0 24px}.novo-horizontal-stepper-header .novo-step-status{display:flex;width:100%;justify-content:center;align-items:center;position:absolute;height:1px;bottom:0}.novo-horizontal-stepper-header .novo-step-status .novo-stepper-status-line{width:100%;position:absolute}.novo-horizontal-stepper-header .novo-step-status .novo-stepper-status-line:before{content:\"\";display:block;width:calc(50% - 8px);margin-right:8px;border-bottom:1px solid #d9dadc}.novo-horizontal-stepper-header .novo-step-status .novo-stepper-status-line:after{content:\"\";display:block;width:calc(50% - 8px);margin-left:calc(50% + 8px);margin-top:-1px;border-top:1px solid #d9dadc}.novo-horizontal-stepper-header .novo-step-status .novo-stepper-status-line.done:before,.novo-horizontal-stepper-header .novo-step-status .novo-stepper-status-line.edit:before{border-bottom:1px solid #4a89dc}.novo-horizontal-stepper-header .novo-step-status .novo-stepper-status-line.done:after{border-top:1px solid #4a89dc}.novo-horizontal-stepper-header .novo-step-status .novo-stepper-status-icon{position:relative}.novo-horizontal-stepper-header .novo-step-status .novo-stepper-status-icon:before{content:\"\";display:block;background:#fff;border-radius:50%;position:absolute;z-index:0;top:1px;left:1px;bottom:1px;right:1px}.novo-horizontal-stepper-header .novo-step-status .novo-stepper-status-icon>*{position:relative;z-index:1}.novo-vertical-stepper-header{display:flex;align-items:center;padding:24px;max-height:24px}.novo-vertical-stepper-header .novo-step-icon,.novo-vertical-stepper-header .novo-step-icon-not-touched{margin-right:12px}[dir=rtl] .novo-vertical-stepper-header .novo-step-icon,[dir=rtl] .novo-vertical-stepper-header .novo-step-icon-not-touched{margin-right:0;margin-left:12px}.novo-horizontal-stepper-content{overflow:hidden}.novo-horizontal-stepper-content[aria-expanded=false]{height:0}.novo-horizontal-content-container{overflow:hidden;padding:0 24px 24px}.novo-vertical-content-container{margin-left:36px;border:0;position:relative}[dir=rtl] .novo-vertical-content-container{margin-left:0;margin-right:36px}.novo-stepper-vertical-line:before{content:\"\";position:absolute;top:-16px;bottom:-16px;left:0;z-index:-1;border-left:1px solid #d9dadc}[dir=rtl] .novo-stepper-vertical-line:before{left:auto;right:0}.novo-stepper-vertical-line.done:after,.novo-stepper-vertical-line.done:before,.novo-stepper-vertical-line.edit:before{border-left-color:1px solid #4a89dc}.novo-stepper-vertical novo-step-status{position:absolute;left:35px;top:25px;transform:scale(.8)}.novo-vertical-stepper-content{overflow:hidden}.novo-vertical-content{padding:0 24px 24px}.novo-step:last-child .novo-vertical-content-container{border:none}"]
            }] }
];
NovoHorizontalStepper.propDecorators = {
    selectedIndex: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }]
};
if (false) {}
class NovoVerticalStepper extends NovoStepper {
    /**
     * @param {?} dir
     * @param {?} changeDetectorRef
     */
    constructor(dir, changeDetectorRef) {
        super(dir, changeDetectorRef);
        this._orientation = 'vertical';
    }
}
NovoVerticalStepper.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'novo-vertical-stepper',
                template: "<div class=\"novo-step\" *ngFor=\"let step of _steps; let i = index; let isLast = last\">\n    <novo-step-header  class=\"novo-vertical-stepper-header\"\n                     (click)=\"step.select()\"\n                     (keydown)=\"_onKeydown($event)\"\n                     [tabIndex]=\"_getFocusIndex() == i ? 0 : -1\"\n                     [id]=\"_getStepLabelId(i)\"\n                     [attr.aria-controls]=\"_getStepContentId(i)\"\n                     [attr.aria-selected]=\"selectedIndex === i\"\n                     [index]=\"i\"\n                     [theme]=\"step.theme\"\n                     [color]=\"step.color\"\n                     [icon]=\"step.icon\"\n                     [state]=\"getIndicatorType(i)\"\n                     [label]=\"step.stepLabel || step.label\"\n                     [selected]=\"selectedIndex === i\"\n                     [active]=\"step.completed || selectedIndex === i || !linear\"\n                     [optional]=\"step.optional\"\n                     [iconOverrides]=\"_iconOverrides\">\n    </novo-step-header>\n\n    <div class=\"novo-vertical-content-container\" [class.novo-stepper-vertical-line]=\"!isLast\" [ngClass]=\"getIndicatorType(i)\">\n      <div class=\"novo-vertical-stepper-content\" role=\"tabpanel\"\n           [@stepTransition]=\"_getAnimationDirection(i)\"\n           [id]=\"_getStepContentId(i)\"\n           [attr.aria-labelledby]=\"_getStepLabelId(i)\"\n           [attr.aria-expanded]=\"selectedIndex === i\">\n        <div class=\"novo-vertical-content\">\n          <ng-container [ngTemplateOutlet]=\"step.content\"></ng-container>\n        </div>\n      </div>\n    </div>\n  </div>\n",
                host: {
                    class: 'novo-stepper-vertical',
                    'aria-orientation': 'vertical',
                    role: 'tablist',
                },
                animations: [novoStepperAnimations.verticalStepTransition],
                providers: [{ provide: NovoStepper, useExisting: NovoVerticalStepper }],
                preserveWhitespaces: false,
                changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectionStrategy"].OnPush,
                styles: ["@-webkit-keyframes rotate{0%{transform:rotateZ(0)}75%{transform:rotateZ(200deg)}100%{transform:rotateZ(180deg)}}@keyframes rotate{0%{transform:rotateZ(0)}75%{transform:rotateZ(200deg)}100%{transform:rotateZ(180deg)}}@-webkit-keyframes half-rotate{0%{transform:rotateZ(45deg)}75%{transform:rotateZ(100deg)}100%{transform:rotateZ(90deg)}}@keyframes half-rotate{0%{transform:rotateZ(45deg)}75%{transform:rotateZ(100deg)}100%{transform:rotateZ(90deg)}}@-webkit-keyframes rotateBack{0%{transform:rotateZ(90deg)}100%{transform:rotateZ(0)}}@keyframes rotateBack{0%{transform:rotateZ(90deg)}100%{transform:rotateZ(0)}}@-webkit-keyframes show{0%{opacity:0;transform:translateX(-100%)}75%{transform:translateX(0)}100%{opacity:1;transform:translateX(0)}}@keyframes show{0%{opacity:0;transform:translateX(-100%)}75%{transform:translateX(0)}100%{opacity:1;transform:translateX(0)}}.novo-stepper-horizontal,.novo-stepper-vertical{display:block}.novo-horizontal-stepper-header-container{white-space:nowrap;display:flex;align-items:center;justify-content:center;margin-bottom:1em;background:#f4f4f4}.novo-stepper-horizontal-line{border-bottom:1px solid #d9dadc;flex:auto;min-width:0;height:80px}.novo-stepper-horizontal-line.complete{border-bottom:1px solid #4a89dc}.novo-horizontal-stepper-header{display:flex;height:80px;flex-flow:column;overflow:visible;align-items:center;justify-content:center;padding:0 24px}.novo-horizontal-stepper-header .novo-step-status{display:flex;width:100%;justify-content:center;align-items:center;position:absolute;height:1px;bottom:0}.novo-horizontal-stepper-header .novo-step-status .novo-stepper-status-line{width:100%;position:absolute}.novo-horizontal-stepper-header .novo-step-status .novo-stepper-status-line:before{content:\"\";display:block;width:calc(50% - 8px);margin-right:8px;border-bottom:1px solid #d9dadc}.novo-horizontal-stepper-header .novo-step-status .novo-stepper-status-line:after{content:\"\";display:block;width:calc(50% - 8px);margin-left:calc(50% + 8px);margin-top:-1px;border-top:1px solid #d9dadc}.novo-horizontal-stepper-header .novo-step-status .novo-stepper-status-line.done:before,.novo-horizontal-stepper-header .novo-step-status .novo-stepper-status-line.edit:before{border-bottom:1px solid #4a89dc}.novo-horizontal-stepper-header .novo-step-status .novo-stepper-status-line.done:after{border-top:1px solid #4a89dc}.novo-horizontal-stepper-header .novo-step-status .novo-stepper-status-icon{position:relative}.novo-horizontal-stepper-header .novo-step-status .novo-stepper-status-icon:before{content:\"\";display:block;background:#fff;border-radius:50%;position:absolute;z-index:0;top:1px;left:1px;bottom:1px;right:1px}.novo-horizontal-stepper-header .novo-step-status .novo-stepper-status-icon>*{position:relative;z-index:1}.novo-vertical-stepper-header{display:flex;align-items:center;padding:24px;max-height:24px}.novo-vertical-stepper-header .novo-step-icon,.novo-vertical-stepper-header .novo-step-icon-not-touched{margin-right:12px}[dir=rtl] .novo-vertical-stepper-header .novo-step-icon,[dir=rtl] .novo-vertical-stepper-header .novo-step-icon-not-touched{margin-right:0;margin-left:12px}.novo-horizontal-stepper-content{overflow:hidden}.novo-horizontal-stepper-content[aria-expanded=false]{height:0}.novo-horizontal-content-container{overflow:hidden;padding:0 24px 24px}.novo-vertical-content-container{margin-left:36px;border:0;position:relative}[dir=rtl] .novo-vertical-content-container{margin-left:0;margin-right:36px}.novo-stepper-vertical-line:before{content:\"\";position:absolute;top:-16px;bottom:-16px;left:0;z-index:-1;border-left:1px solid #d9dadc}[dir=rtl] .novo-stepper-vertical-line:before{left:auto;right:0}.novo-stepper-vertical-line.done:after,.novo-stepper-vertical-line.done:before,.novo-stepper-vertical-line.edit:before{border-left-color:1px solid #4a89dc}.novo-stepper-vertical novo-step-status{position:absolute;left:35px;top:25px;transform:scale(.8)}.novo-vertical-stepper-content{overflow:hidden}.novo-vertical-content{padding:0 24px 24px}.novo-step:last-child .novo-vertical-content-container{border:none}"]
            }] }
];
/** @nocollapse */
NovoVerticalStepper.ctorParameters = () => [
    { type: _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_26__["Directionality"], decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"] }] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectorRef"] }
];
NovoVerticalStepper.propDecorators = {
    selectedIndex: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }]
};
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: elements/stepper/step-status.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NovoStepStatus {
    /**
     * @param {?} stepper
     * @param {?} step
     */
    constructor(stepper, step) { }
}
NovoStepStatus.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'novo-step-status',
                template: "<div class=\"novo-stepper-status-line\" [ngClass]=\"state\"></div>\n<div [ngSwitch]=\"state\" class=\"novo-stepper-status-icon\">\n  <novo-icon size=\"small\" color=\"positive\" *ngSwitchCase=\"'edit'\">check-circle</novo-icon>\n  <novo-icon size=\"small\" color=\"positive\" *ngSwitchCase=\"'done'\">check-circle-filled</novo-icon>\n  <novo-icon size=\"small\" color=\"positive\" *ngSwitchDefault>circle-o</novo-icon>\n</div>\n",
                // encapsulation: ViewEncapsulation.None,
                preserveWhitespaces: false,
                changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectionStrategy"].OnPush,
                host: {
                    class: 'novo-step-status',
                }
            }] }
];
/** @nocollapse */
NovoStepStatus.ctorParameters = () => [
    { type: NovoStepper, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["forwardRef"])((/**
                     * @return {?}
                     */
                    () => NovoStepper)),] }] },
    { type: NovoStepHeader, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["forwardRef"])((/**
                     * @return {?}
                     */
                    () => NovoStepHeader)),] }] }
];
NovoStepStatus.propDecorators = {
    state: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }]
};
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: elements/stepper/stepper.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NovoStepperModule {
}
NovoStepperModule.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                imports: [_angular_common__WEBPACK_IMPORTED_MODULE_6__["CommonModule"], _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_8__["PortalModule"], NovoButtonModule, _angular_cdk_stepper__WEBPACK_IMPORTED_MODULE_25__["CdkStepperModule"], NovoIconModule, _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_17__["A11yModule"]],
                exports: [NovoHorizontalStepper, NovoVerticalStepper, NovoStep, NovoStepLabel, NovoStepper, NovoStepHeader, NovoStepStatus],
                declarations: [NovoHorizontalStepper, NovoVerticalStepper, NovoStep, NovoStepLabel, NovoStepper, NovoStepHeader, NovoStepStatus],
            },] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: elements/tabbed-group-picker/TabbedGroupPicker.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NovoTabbedGroupPickerElement {
    /**
     * @param {?} labelService
     * @param {?} ref
     */
    constructor(labelService, ref) {
        this.labelService = labelService;
        this.ref = ref;
        this.selectionChange = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.displayTabIndex = 0;
        this.filterText = new rxjs__WEBPACK_IMPORTED_MODULE_11__["BehaviorSubject"]('');
        this.loading = true;
        this.showClearAll = false;
        // Initial height based on 13 px font rendered in chrome. Actual height retrieved onDropdownToggled.
        this.scrollViewportHeight = 351;
        this.virtualScrollItemSize = 39;
        this.getSelectedState = (/**
         * @param {?} childArray
         * @return {?}
         */
        (childArray) => {
            /** @type {?} */
            const numberOfSelectedItems = childArray.filter((/**
             * @param {?} __0
             * @return {?}
             */
            ({ selected }) => selected)).length;
            if (!numberOfSelectedItems) {
                return undefined;
            }
            return numberOfSelectedItems === childArray.length ? 'selected' : 'indeterminate';
        });
        this.filter = (/**
         * @param {?} searchTerm
         * @return {?}
         */
        (searchTerm) => {
            this.displayTabs.forEach((/**
             * @param {?} displayTab
             * @param {?} i
             * @return {?}
             */
            (displayTab, i) => (displayTab.data = this.tabs[i].data.filter((/**
             * @param {?} item
             * @return {?}
             */
            (item) => item[displayTab.labelField].toLowerCase().includes(searchTerm.toLowerCase()))))));
            this.ref.markForCheck();
        });
    }
    /**
     * @return {?}
     */
    get displayTab() {
        return this.displayTabs[this.displayTabIndex];
    }
    /**
     * @param {?} tab
     * @return {?}
     */
    set displayTab(tab) {
        this.displayTabIndex = this.tabs.map((/**
         * @param {?} __0
         * @return {?}
         */
        ({ typeName }) => typeName)).indexOf(tab.typeName);
    }
    /**
     * @return {?}
     */
    get minBufferPx() {
        return this.scrollViewportHeight; // render at least 2x the number of items visible (viewport + min buffer)
    }
    /**
     * @return {?}
     */
    get maxBufferPx() {
        return 2 * this.scrollViewportHeight; // render at most 3x the number of items visible (viewport + max buffer)
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.setupDisplayData();
        this.createChildrenReferences();
        this.initializeDescendantSelection();
        this.updateParentsAndQuickSelect();
        this.updateClearAll();
        this.loading = false;
        this.filterTextSubscription = this.filterText.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_14__["debounceTime"])(300)).subscribe({
            next: this.filter,
        });
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.filterTextSubscription) {
            this.filterTextSubscription.unsubscribe();
        }
    }
    /**
     * @param {?} tab
     * @return {?}
     */
    changeTab(tab) {
        this.displayTab = tab;
        if (this.scrollableInstance) {
            this.scrollableInstance.scrollTo({ behavior: 'auto', top: 0 });
        }
    }
    /**
     * @param {?} element
     * @return {?}
     */
    getPixelHeight(element) {
        return Number(getComputedStyle(element, '').height.match(/(\d+(\.\d+)?)px$/)[1]);
    }
    /**
     * @return {?}
     */
    setupDisplayData() {
        // shallow copy here so that reassigning displayTabs[i].data doesn't mutate tabs[i].data
        // but both data values point to the same items
        this.displayTabs = this.tabs.map((/**
         * @param {?} tab
         * @return {?}
         */
        (tab) => (Object.assign({}, tab))));
        this.displayTab = this.tabs[0];
    }
    // Replace each parent's child object with a reference to the child to avoid
    // a child lookup for selected status; linking references allows M x N
    // time complexity instead of M x N^2
    /**
     * @return {?}
     */
    createChildrenReferences() {
        this.tabs.forEach((/**
         * @param {?} tab
         * @return {?}
         */
        (tab) => {
            // would rather filter but TypeScript still wants a type narrowing here
            if ('childTypeName' in tab) {
                /** @type {?} */
                const childTab = this.tabs.find((/**
                 * @param {?} __0
                 * @return {?}
                 */
                ({ typeName }) => typeName === tab.childTypeName));
                /** @type {?} */
                const compareFunction = this.makeCompareFunction(childTab.valueField);
                /** @type {?} */
                const warnFunction = this.makeWarningFunction(tab.typeName, childTab.typeName, childTab.valueField);
                /** @type {?} */
                const sortedChildren = childTab.data.slice().sort(compareFunction);
                tab.data
                    .filter((/**
                 * @param {?} __0
                 * @return {?}
                 */
                ({ children }) => children && children.length))
                    .forEach((/**
                 * @param {?} parent
                 * @return {?}
                 */
                (parent) => this.replaceChildrenWithReferences((/** @type {?} */ (parent)), sortedChildren, compareFunction, warnFunction)));
            }
        }));
        if (this.quickSelectConfig) {
            this.quickSelectConfig.items
                .filter((/**
             * @param {?} parent
             * @return {?}
             */
            (parent) => 'all' in parent))
                .forEach((/**
             * @param {?} parent
             * @return {?}
             */
            (parent) => {
                parent.children = this.tabs.find((/**
                 * @param {?} __0
                 * @return {?}
                 */
                ({ typeName }) => parent.childTypeName === typeName)).data;
            }));
            this.quickSelectConfig.items
                .filter((/**
             * @param {?} parent
             * @return {?}
             */
            (parent) => !('all' in parent)))
                .forEach((/**
             * @param {?} parent
             * @return {?}
             */
            (parent) => {
                /** @type {?} */
                const childTab = this.tabs.find((/**
                 * @param {?} __0
                 * @return {?}
                 */
                ({ typeName }) => typeName === parent.childTypeName));
                /** @type {?} */
                const compareFunction = this.makeCompareFunction(childTab.valueField);
                /** @type {?} */
                const warnFunction = this.makeWarningFunction(parent.label, childTab.typeName, childTab.valueField);
                /** @type {?} */
                const sortedChildren = childTab.data.slice().sort(compareFunction);
                this.replaceChildrenWithReferences((/** @type {?} */ (parent)), sortedChildren, compareFunction, warnFunction);
            }));
        }
    }
    /**
     * @template T
     * @param {?} key
     * @return {?}
     */
    makeCompareFunction(key) {
        return (/**
         * @param {?} a
         * @param {?} b
         * @return {?}
         */
        (a, b) => {
            /** @type {?} */
            const aValue = (a && a[key]) || a;
            /** @type {?} */
            const bValue = (b && b[key]) || b;
            if (aValue < bValue) {
                return -1;
            }
            else if (aValue > bValue) {
                return 1;
            }
            else if (aValue === bValue) {
                return 0;
            }
            else {
                return undefined;
            }
        });
    }
    /**
     * @param {?} parent
     * @param {?} sortedData
     * @param {?} compareFunction
     * @param {?} warnFunction
     * @return {?}
     */
    replaceChildrenWithReferences(parent, sortedData, compareFunction, warnFunction) {
        parent.children = parent.children
            .map((/**
         * @param {?} child
         * @return {?}
         */
        (child) => binarySearch(child, sortedData, compareFunction) || warnFunction(child)))
            .filter(Boolean); // since map can return undefined, remove undefined elements
    }
    /**
     * @param {?} parentLabel
     * @param {?} childLabel
     * @param {?} childValueField
     * @return {?}
     */
    makeWarningFunction(parentLabel, childLabel, childValueField) {
        return (/**
         * @param {?} child
         * @return {?}
         */
        (child) => {
            /** @type {?} */
            const childValue = child[childValueField] || child;
            console.warn(`No ${childLabel} found with value ${childValue} for parent ${parentLabel}`);
        });
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onDropdownToggle(event) {
        if (event) {
            this.scrollViewportHeight = this.getPixelHeight(this.scrollableInstance.getElementRef().nativeElement);
            this.virtualScrollItemSize = this.getPixelHeight(this.scrollableInstance.getElementRef().nativeElement.querySelector('novo-list-item'));
        }
    }
    /**
     * @param {?} item
     * @return {?}
     */
    onItemToggled(item) {
        if (Array.isArray(item.children)) {
            this.updateDescendants(item.selected, item.children);
        }
        this.updateParentsAndQuickSelect();
        this.updateClearAll(item.selected);
        this.emitSelectedValues();
        this.ref.markForCheck();
    }
    /**
     * @return {?}
     */
    initializeDescendantSelection() {
        this.tabs.forEach((/**
         * @param {?} tab
         * @return {?}
         */
        (tab) => {
            if ('childTypeName' in tab && tab.data && tab.data.length) {
                tab.data.forEach((/**
                 * @param {?} parent
                 * @return {?}
                 */
                (parent) => {
                    if (parent.selected && parent.children && parent.children.length) {
                        parent.children.forEach((/**
                         * @param {?} child
                         * @return {?}
                         */
                        (child) => {
                            child.selected = true;
                        }));
                    }
                }));
            }
        }));
    }
    /**
     * @param {?} parentIsSelected
     * @param {?} children
     * @return {?}
     */
    updateDescendants(parentIsSelected, children) {
        children.forEach((/**
         * @param {?} item
         * @return {?}
         */
        (item) => {
            parentIsSelected ? (item.selected = true) : delete item.selected;
            if (Array.isArray(item.children)) {
                this.updateDescendants(item.selected, item.children);
            }
        }));
    }
    /**
     * @param {?=} itemWasJustSelected
     * @return {?}
     */
    updateClearAll(itemWasJustSelected) {
        this.showClearAll = itemWasJustSelected
            ? true
            : this.tabs.some((/**
             * @param {?} tab
             * @return {?}
             */
            (tab) => {
                if (((/** @type {?} */ (tab))).childTypeName) {
                    return tab.data.some((/**
                     * @param {?} __0
                     * @return {?}
                     */
                    ({ selected, indeterminate }) => selected || indeterminate));
                }
                else {
                    return tab.data.some((/**
                     * @param {?} __0
                     * @return {?}
                     */
                    ({ selected }) => selected));
                }
            }));
    }
    /**
     * @return {?}
     */
    updateParentsAndQuickSelect() {
        // mutate here to avoid dereferencing the objects in displayTabs
        this.tabs
            .filter((/**
         * @param {?} tab
         * @return {?}
         */
        (tab) => 'childTypeName' in tab && !!tab.childTypeName))
            .forEach((/**
         * @param {?} tab
         * @return {?}
         */
        (tab) => {
            /** @type {?} */
            const parents = tab.data.filter((/**
             * @param {?} __0
             * @return {?}
             */
            ({ children }) => children && children.length));
            parents.forEach((/**
             * @param {?} parent
             * @return {?}
             */
            (parent) => {
                ['indeterminate', 'selected'].forEach((/**
                 * @param {?} selectedStateOption
                 * @return {?}
                 */
                (selectedStateOption) => delete parent[selectedStateOption]));
                /** @type {?} */
                const selectedState = this.getSelectedState(parent.children);
                if (selectedState) {
                    parent[selectedState] = true;
                }
            }));
        }));
        if (this.quickSelectConfig) {
            this.quickSelectConfig.items.forEach((/**
             * @param {?} quickSelect
             * @return {?}
             */
            (quickSelect) => {
                delete quickSelect.selected;
                /** @type {?} */
                const selectedState = this.getSelectedState((/** @type {?} */ (quickSelect.children)));
                if (selectedState) {
                    quickSelect[selectedState] = true;
                }
            }));
        }
    }
    /**
     * @return {?}
     */
    emitSelectedValues() {
        /** @type {?} */
        const selectedValues = this.tabs.map((/**
         * @param {?} tab
         * @return {?}
         */
        (tab) => (Object.assign({}, tab, { data: tab.data.filter((/**
             * @param {?} __0
             * @return {?}
             */
            ({ selected }) => selected)) }))));
        this.selectionChange.emit(selectedValues);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    deselectEverything(event) {
        Helpers.swallowEvent(event);
        this.showClearAll = false;
        if (this.quickSelectConfig) {
            this.quickSelectConfig.items.forEach((/**
             * @param {?} quickSelect
             * @return {?}
             */
            (quickSelect) => {
                delete quickSelect.selected;
            }));
        }
        this.tabs.forEach((/**
         * @param {?} tab
         * @return {?}
         */
        (tab) => {
            if (((/** @type {?} */ (tab))).childTypeName) {
                tab.data.forEach((/**
                 * @param {?} item
                 * @return {?}
                 */
                (item) => {
                    delete item.selected;
                    delete item.indeterminate;
                    item.children.forEach((/**
                     * @param {?} child
                     * @return {?}
                     */
                    (child) => delete child.selected));
                }));
            }
            else {
                ((/** @type {?} */ (tab))).data.forEach((/**
                 * @param {?} item
                 * @return {?}
                 */
                (item) => delete item.selected));
            }
        }));
        this.emitSelectedValues();
        this.ref.markForCheck();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onClearFilter(event) {
        Helpers.swallowEvent(event);
        this.filterText.next('');
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onFilter(event) {
        this.filterText.next(event.target.value);
    }
}
NovoTabbedGroupPickerElement.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'novo-tabbed-group-picker',
                template: "<novo-dropdown (toggled)=\"onDropdownToggle($event)\">\n  <button\n    class=\"tabbed-group-picker-button\"\n    [theme]=\"buttonConfig.theme\"\n    [side]=\"buttonConfig.side\"\n    [icon]=\"buttonConfig.icon\"\n    [loading]=\"loading\"\n  >\n    <div class=\"tabbed-group-picker-button-label\">{{ buttonConfig.label }}</div>\n  </button>\n  <div class=\"tabbed-group-picker-search\" data-automation-id=\"tabbed-group-picker-search\">\n    <input type=\"text\" [placeholder]=\"labelService.search\" [value]=\"filterText | async\" (input)=\"onFilter($event)\" />\n    <i class=\"bhi-search\" *ngIf=\"!(filterText | async)\"></i>\n    <i class=\"bhi-times\" *ngIf=\"(filterText | async)\" (click)=\"onClearFilter($event)\"></i>\n  </div>\n  <div class=\"tabbed-group-picker-column-container\">\n    <div class=\"tabbed-group-picker-column left\">\n      <novo-nav theme=\"white\" direction=\"vertical\">\n        <novo-tab *ngFor=\"let tab of displayTabs\" [attr.data-automation-id]=\"tab.typeName\" (activeChange)=\"changeTab(tab)\">\n          <span>{{ tab.typeLabel }} ({{ tab.data.length }})</span><i class=\"bhi-next\"></i>\n        </novo-tab>\n      </novo-nav>\n      <button *ngIf=\"showClearAll\" class=\"clear-all-button\" theme=\"dialogue\" icon=\"times\" side=\"right\" color=\"grapefruit\" (click)=\"deselectEverything($event)\">{{ labelService.clear }}</button>\n    </div>\n    <div class=\"tabbed-group-picker-column right\">\n      <div class=\"quick-select\" *ngIf=\"quickSelectConfig && !(filterText | async)\">\n        <div class=\"quick-select-label\">{{ quickSelectConfig.label }}</div>\n        <novo-list class=\"quick-select-list\" direction=\"vertical\">\n          <novo-list-item\n            class=\"quick-select-item\"\n            *ngFor=\"let quickSelect of quickSelectConfig.items\"\n            [attr.data-automation-id]=\"quickSelect.label\"\n            (click)=\"quickSelect.selected = !quickSelect.selected; onItemToggled(quickSelect)\"\n          >\n            <item-content>\n              <novo-checkbox\n                [label]=\"quickSelect.label\"\n                [name]=\"'selected'\"\n                [(ngModel)]=\"quickSelect.selected\"\n                (ngModelChange)=\"onItemToggled(quickSelect)\"\n              ></novo-checkbox>\n            </item-content>\n          </novo-list-item>\n        </novo-list>\n      </div>\n      <novo-list *ngIf=\"displayTab.data.length\" direction=\"vertical\">\n        <cdk-virtual-scroll-viewport\n          [itemSize]=\"virtualScrollItemSize\"\n          [maxBufferPx]=\"maxBufferPx\"\n          [minBufferPx]=\"minBufferPx\"\n          #tabbedGroupPickerVirtualScrollViewport\n        >\n          <novo-list-item\n            *cdkVirtualFor=\"let item of displayTab.data\"\n            [attr.data-automation-id]=\"item[displayTab.labelField]\"\n            (click)=\"item.selected = !item.selected; onItemToggled(item)\"\n          >\n            <item-content>\n              <novo-checkbox\n                [label]=\"item[displayTab.labelField]\"\n                [name]=\"'selected'\"\n                [indeterminate]=\"item.indeterminate\"\n                [(ngModel)]=\"item.selected\"\n                (ngModelChange)=\"onItemToggled(item)\"\n              >\n              </novo-checkbox>\n            </item-content>\n          </novo-list-item>\n        </cdk-virtual-scroll-viewport>\n      </novo-list>\n      <div class=\"tabbed-group-picker-empty-item\" *ngIf=\"!displayTab.data.length && (filterText | async)\">\n        <i class=\"{{ displayTab.icon || 'bhi-search' }}\"></i>\n        <div class=\"empty-item-main-message\">{{ labelService.tabbedGroupPickerEmpty }}</div>\n        <div class=\"empty-item-sub-message\">{{ labelService.tabbedGroupClearSuggestion(displayTab.typeLabel) }}</div>\n      </div>\n    </div>\n  </div>\n</novo-dropdown>\n",
                changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectionStrategy"].OnPush
            }] }
];
/** @nocollapse */
NovoTabbedGroupPickerElement.ctorParameters = () => [
    { type: NovoLabelService },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectorRef"] }
];
NovoTabbedGroupPickerElement.propDecorators = {
    scrollableInstance: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"], args: ['tabbedGroupPickerVirtualScrollViewport', { static: false },] }],
    buttonConfig: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    tabs: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    quickSelectConfig: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    selectionChange: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }]
};
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: elements/tabbed-group-picker/TabbedGroupPicker.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NovoTabbedGroupPickerModule {
}
NovoTabbedGroupPickerModule.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                imports: [
                    _angular_common__WEBPACK_IMPORTED_MODULE_6__["CommonModule"],
                    _angular_forms__WEBPACK_IMPORTED_MODULE_1__["FormsModule"],
                    _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_13__["ScrollingModule"],
                    NovoTabModule,
                    NovoListModule,
                    NovoFormExtrasModule,
                    NovoButtonModule,
                    NovoDropdownModule,
                ],
                providers: [NovoLabelService],
                declarations: [NovoTabbedGroupPickerElement],
                exports: [NovoTabbedGroupPickerElement],
            },] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: elements/table/extras/base-renderer/BaseRenderer.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class BaseRenderer {
    constructor() {
        this.data = {};
        this.value = '';
        this.meta = {};
    }
}
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: elements/table/extras/date-cell/DateCell.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DateCell extends BaseRenderer {
    /**
     * @param {?} labels
     */
    constructor(labels) {
        super();
        this.labels = labels;
    }
    /**
     * @return {?}
     */
    getFormattedDate() {
        return this.labels.formatDate(this.value);
    }
}
DateCell.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'date-cell',
                template: `
        <div class="date-cell">
            <label>{{ getFormattedDate() }}</label>
        </div>
    `
            }] }
];
/** @nocollapse */
DateCell.ctorParameters = () => [
    { type: NovoLabelService }
];
DateCell.propDecorators = {
    value: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }]
};
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: elements/table/extras/dropdown-cell/DropdownCell.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @record
 */
function INovoDropdownCellConfig() { }
if (false) {}
class NovoDropdownCell extends BaseRenderer {
    /**
     * @return {?}
     */
    ngOnInit() {
        // Check for and fix bad config
        if (!this.meta.dropdownCellConfig) {
            throw new Error('Missing "dropdownCellConfig" on the column setup');
        }
    }
    /**
     * @param {?} config
     * @param {?} option
     * @param {?} value
     * @return {?}
     */
    onClick(config, option, value) {
        /** @type {?} */
        const callback = option.callback || config.callback;
        callback(this.data, value || option);
    }
}
NovoDropdownCell.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'novo-dropdown-cell',
                template: `
    <novo-dropdown parentScrollSelector=".table-container" containerClass="novo-table-dropdown-cell">
      <button type="button" theme="secondary" icon="collapse" inverse>
        <span data-automation-id="novo-dropdown-cell-value">{{ value }}</span>
      </button>
      <list>
        <ng-container *ngFor="let config of meta.dropdownCellConfig; let i = index">
          <dropdown-item-header *ngIf="config.category">{{ config.category }}</dropdown-item-header>
          <item *ngFor="let option of config.options" (action)="onClick(config, option, option.value)"
                [class.active]="(option || option.value) === value">
            <span [attr.data-automation-id]="option.label || option">{{ option.label || option }}</span>
            <i *ngIf="(option || option.value) === value" class="bhi-check"></i>
          </item>
          <hr *ngIf="i < meta.dropdownCellConfig.length - 1"/>
        </ng-container>
      </list>
    </novo-dropdown>
  `
            }] }
];
NovoDropdownCell.propDecorators = {
    meta: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    value: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }]
};
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: elements/table/extras/keep-filter-focus/KeepFilterFocus.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NovoTableKeepFilterFocus {
    /**
     * @param {?} element
     */
    constructor(element) {
        this.element = element;
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.element.nativeElement.focus();
    }
}
NovoTableKeepFilterFocus.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{
                selector: '[keepFilterFocused]',
            },] }
];
/** @nocollapse */
NovoTableKeepFilterFocus.ctorParameters = () => [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"] }
];
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: elements/table/extras/pagination/Pagination.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @record
 */
function Page() { }
if (false) {}
class Pagination {
    /**
     * @param {?} labels
     */
    constructor(labels) {
        this.labels = labels;
        this.itemsPerPage = 10;
        this.pageChange = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.itemsPerPageChange = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.onPageChange = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.maxPagesDisplayed = 5;
    }
    /**
     * @return {?}
     */
    get disablePageSelection() {
        return this.pageSelectDisabled;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set disablePageSelection(val) {
        this.pageSelectDisabled = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_12__["coerceBooleanProperty"])(val);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.label = this.label || this.labels.itemsPerPage;
        this.rowOptions = this.rowOptions || this.getDefaultRowOptions();
    }
    /**
     * @param {?=} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        this.page = this.page || 1;
        this.totalPages = this.calculateTotalPages();
        this.pages = this.getPages(this.page, this.totalPages);
    }
    /**
     * @return {?}
     */
    getDefaultRowOptions() {
        return [{ value: 10, label: '10' }, { value: 25, label: '25' }, { value: 50, label: '50' }, { value: 100, label: '100' }];
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onPageSizeChanged(event) {
        this.page = 1;
        this.itemsPerPage = event.selected;
        this.totalPages = this.calculateTotalPages();
        this.pages = this.getPages(this.page, this.totalPages);
        this.pageChange.emit(this.page);
        this.itemsPerPageChange.emit(this.itemsPerPage);
        this.onPageChange.emit({
            page: this.page,
            itemsPerPage: this.itemsPerPage,
        });
    }
    /**
     * @param {?} page
     * @param {?=} event
     * @return {?}
     */
    selectPage(page, event) {
        if (event) {
            event.preventDefault();
        }
        this.page = page;
        this.pages = this.getPages(this.page, this.totalPages);
        this.pageChange.emit(this.page);
        this.onPageChange.emit({
            page: this.page,
            itemsPerPage: this.itemsPerPage,
        });
    }
    /**
     * @return {?}
     */
    noPrevious() {
        return this.page === 1;
    }
    /**
     * @return {?}
     */
    noNext() {
        return this.page === this.totalPages;
    }
    // Create page object used in template
    /**
     * @param {?} num
     * @param {?} text
     * @param {?} isActive
     * @return {?}
     */
    makePage(num, text, isActive) {
        return (/** @type {?} */ ({ num, text, active: isActive, }));
    }
    /**
     * @param {?} currentPage
     * @param {?} totalPages
     * @return {?}
     */
    getPages(currentPage, totalPages) {
        /** @type {?} */
        const pages = [];
        // Default page limits
        /** @type {?} */
        let startPage = 1;
        /** @type {?} */
        let endPage = totalPages;
        /** @type {?} */
        const isMaxSized = this.maxPagesDisplayed < totalPages;
        // recompute if maxPagesDisplayed
        if (isMaxSized) {
            // Current page is displayed in the middle of the visible ones
            startPage = Math.max(currentPage - Math.floor(this.maxPagesDisplayed / 2), 1);
            endPage = startPage + this.maxPagesDisplayed - 1;
            // Adjust if limit is exceeded
            if (endPage > totalPages) {
                endPage = totalPages;
                startPage = endPage - this.maxPagesDisplayed + 1;
            }
        }
        // Add page number links
        for (let num = startPage; num <= endPage; num++) {
            /** @type {?} */
            const page = this.makePage(num, num.toString(), num === currentPage);
            pages.push(page);
        }
        return pages;
    }
    /**
     * @return {?}
     */
    calculateTotalPages() {
        /** @type {?} */
        const totalPages = this.itemsPerPage < 1 ? 1 : Math.ceil(this.totalItems / this.itemsPerPage);
        return Math.max(totalPages || 0, 1);
    }
}
Pagination.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'novo-pagination',
                template: `
        <h5 class="rows">{{label}}</h5>
        <novo-select [options]="rowOptions" [placeholder]="labels.select" [(ngModel)]="itemsPerPage" (onSelect)="onPageSizeChanged($event)" data-automation-id="pager-select"></novo-select>
        <span class="spacer"></span>
        <ul class="pager" data-automation-id="pager">
            <li class="page" (click)="selectPage(page-1)" [ngClass]="{'disabled': noPrevious()}"><i class="bhi-previous" data-automation-id="pager-previous"></i></li>
            <li class="page" [ngClass]="{active: p.active}" [class.disabled]="disablePageSelection" *ngFor="let p of pages" (click)="selectPage(p.num, $event)">{{p.text}}</li>
            <li class="page" (click)="selectPage(page+1)" [ngClass]="{'disabled': noNext()}"><i class="bhi-next" data-automation-id="pager-next"></i></li>
        </ul>
  `
            }] }
];
/** @nocollapse */
Pagination.ctorParameters = () => [
    { type: NovoLabelService }
];
Pagination.propDecorators = {
    page: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    totalItems: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    itemsPerPage: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    rowOptions: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    label: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    disablePageSelection: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    pageChange: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    itemsPerPageChange: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    onPageChange: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }]
};
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: elements/table/extras/percentage-cell/PercentageCell.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class PercentageCell extends BaseRenderer {
}
PercentageCell.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'percentage-cell',
                template: `
        <div class="percentage" *ngIf="value || value === 0">{{ value | percent:'1.0-2' }}</div>
    `
            }] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: elements/table/extras/row-details/RowDetails.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class RowDetails {
    /**
     * @param {?} element
     * @param {?} componentUtils
     */
    constructor(element, componentUtils) {
        this.element = element;
        this.componentUtils = componentUtils;
        this.value = '';
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.renderer) {
            if (this.renderer.prototype instanceof BaseRenderer) {
                /** @type {?} */
                const componentRef = this.componentUtils.append(this.renderer, this.container);
                componentRef.instance['data'] = this.data;
            }
            else {
                this.value = this.renderer(this.data);
            }
        }
        else {
            // this.value = this.row[this.column.name];
        }
    }
}
RowDetails.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'novo-row-details',
                template: `
    <span #container></span> <span>{{ value }}</span>
  `
            }] }
];
/** @nocollapse */
RowDetails.ctorParameters = () => [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"] },
    { type: ComponentUtils }
];
RowDetails.propDecorators = {
    container: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"], args: ['container', { read: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewContainerRef"], static: true },] }],
    data: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    renderer: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }]
};
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: elements/table/extras/table-actions/TableActions.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NovoTableActionsElement {
}
NovoTableActionsElement.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'novo-table-actions',
                template: '<ng-content></ng-content>'
            }] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: elements/table/extras/table-cell/TableCell.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class TableCell {
    /**
     * @param {?} element
     * @param {?} componentUtils
     */
    constructor(element, componentUtils) {
        this.element = element;
        this.componentUtils = componentUtils;
        this.value = '';
        this.element = element;
        this.componentUtils = componentUtils;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.column._type = this.column.type || 'text';
        if (this.column.renderer) {
            if (this.column.renderer.prototype instanceof BaseRenderer) {
                this.column._type = 'custom';
                /** @type {?} */
                const componentRef = (/** @type {?} */ (this.componentUtils.append(this.column.renderer, this.container)));
                componentRef.instance.meta = this.column;
                componentRef.instance.data = this.row;
                componentRef.instance.value = this.form && this.hasEditor ? this.form.value[this.column.name] : this.row[this.column.name];
                // TODO - save ref to this and update in the valueChanges below!!
            }
            else {
                // TODO - wtf to do here?
                this.value = this.column.renderer(this.row);
            }
        }
        else {
            this.value = this.form && this.hasEditor ? this.form.value[this.column.name] : this.row[this.column.name];
        }
        if (this.form && this.hasEditor) {
            this.valueChangeSubscription = this.form.valueChanges
                .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_14__["debounceTime"])(300), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_14__["distinctUntilChanged"])())
                .subscribe((/**
             * @param {?} value
             * @return {?}
             */
            (value) => {
                this.value = value[this.column.name];
            }));
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.valueChangeSubscription) {
            this.valueChangeSubscription.unsubscribe();
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onClick(event) {
        if (event) {
            event.preventDefault();
            event.stopPropagation();
        }
        if (this.column.onClick) {
            this.column.onClick(this.row);
        }
    }
}
TableCell.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'novo-table-cell',
                template: `
    <div [ngSwitch]="column._type">
      <span #container></span>
      <date-cell *ngSwitchCase="'date'" [value]="value"></date-cell>
      <a *ngSwitchCase="'link'" (click)="onClick($event)">{{ value }}</a> <span *ngSwitchDefault>{{ value }}</span>
    </div>
  `
            }] }
];
/** @nocollapse */
TableCell.ctorParameters = () => [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"] },
    { type: ComponentUtils }
];
TableCell.propDecorators = {
    container: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"], args: ['container', { read: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewContainerRef"], static: true },] }],
    column: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    row: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    form: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    hasEditor: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }]
};
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: elements/table/extras/table-filter/TableFilter.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class TableFilter {
    /**
     * @param {?} element
     * @param {?} renderer
     */
    constructor(element, renderer) {
        this.element = element;
        this.renderer = renderer;
        this.onFilterChange = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.element = element;
        this.renderer = renderer;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.ngOnChanges();
    }
    /**
     * @param {?=} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        /** @type {?} */
        let label = '';
        if (this.config.freetextFilter) {
            label = this.config.freetextFilter;
        }
        else if (this.config.filter) {
            label = this.config.filter;
        }
        this.renderer.setProperty(this.element, 'value', label);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onChangeFilter(event) {
        clearTimeout(this.filterThrottle);
        if (KeyCodes.ENTER === event.keyCode) {
            this.config.filter = ((/** @type {?} */ (event.target))).value;
            this.onFilterChange.emit({ filtering: this.config });
        }
        else {
            this.filterThrottle = setTimeout((/**
             * @return {?}
             */
            () => {
                this.config.filter = ((/** @type {?} */ (event.target))).value;
                this.onFilterChange.emit({ filtering: this.config });
            }), 300);
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onClick(event) {
        Helpers.swallowEvent(event);
    }
}
TableFilter.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{
                selector: '[novoTableFilter]',
            },] }
];
/** @nocollapse */
TableFilter.ctorParameters = () => [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Renderer2"] }
];
TableFilter.propDecorators = {
    config: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"], args: ['novoTableFilter',] }],
    onFilterChange: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    onChangeFilter: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostListener"], args: ['keydown', ['$event'],] }],
    onClick: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostListener"], args: ['click', ['$event'],] }]
};
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: elements/table/extras/table-footer/TableFooter.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NovoTableFooterElement {
}
NovoTableFooterElement.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'novo-table-footer',
                template: '<ng-content></ng-content>'
            }] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: elements/table/extras/table-header/TableHeader.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NovoTableHeaderElement {
}
NovoTableHeaderElement.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'novo-table-header',
                template: '<ng-content></ng-content>'
            }] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: elements/table/extras/th-orderable/ThOrderable.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ThOrderable {
    /**
     * @param {?} element
     */
    constructor(element) {
        this.element = element;
        this.onOrderChange = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.element = element;
    }
    /**
     * @return {?}
     */
    get index() {
        /** @type {?} */
        let index = null;
        if (this.element.nativeElement && this.element.nativeElement.parentNode) {
            /** @type {?} */
            const children = Array.prototype.slice.call(this.element.nativeElement.parentNode.children);
            index = children.indexOf(this.element.nativeElement);
        }
        return index;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.column.ordering) {
            this.element.nativeElement.setAttribute('draggable', true);
            this.table = this.findTable(this.element.nativeElement);
        }
    }
    /**
     * @param {?=} event
     * @return {?}
     */
    onDragStart(event) {
        if (this.column.ordering) {
            this.element.nativeElement.classList.add('dragging');
            event.dataTransfer.effectAllowed = 'move';
            event.dataTransfer.setData('text/plain', JSON.stringify(this.column));
            this.clone = this.table.cloneNode(true);
            this.clone.style.position = 'absolute';
            this.clone.style.left = '100%';
            this.clone.style.width = '150px';
            this.deleteColumns(this.clone);
            document.body.appendChild(this.clone);
            event.dataTransfer.setDragImage(this.clone, 75, 30);
        }
    }
    /**
     * @param {?} table
     * @return {?}
     */
    deleteColumns(table) {
        // TODO: `table` should be immutable and this method should return the modified data to its caller
        if (table.rows.length > 0) {
            /** @type {?} */
            const allRows = table.rows;
            for (let i = 0; i < allRows.length; i++) {
                if (i > 10) {
                    table.deleteRow(-1);
                }
                else {
                    /** @type {?} */
                    const cellLength = allRows[i].cells.length;
                    for (let c = 0; c < cellLength; c++) {
                        if (c < this.index) {
                            allRows[i].deleteCell(0);
                        }
                        else if (c > this.index) {
                            allRows[i].deleteCell(-1);
                        }
                    }
                }
            }
        }
    }
    /**
     * @param {?} start
     * @return {?}
     */
    findTable(start) {
        /** @type {?} */
        let htmlElementNode = start;
        while (htmlElementNode) {
            htmlElementNode = htmlElementNode.parentNode;
            if (htmlElementNode && htmlElementNode.tagName.toLowerCase() === 'table') {
                return htmlElementNode;
            }
        }
        return undefined;
    }
    /**
     * @param {?=} event
     * @return {?}
     */
    onDrag(event) {
        Helpers.swallowEvent(event);
        return false;
    }
    /**
     * @param {?=} event
     * @return {?}
     */
    onDragEnd(event) {
        Helpers.swallowEvent(event);
        this.element.nativeElement.classList.remove('over');
        this.element.nativeElement.classList.remove('dragging');
        document.body.removeChild(this.clone);
        return false;
    }
    /**
     * @param {?=} event
     * @return {?}
     */
    onDrop(event) {
        Helpers.swallowEvent(event);
        this.element.nativeElement.classList.remove('over');
        /** @type {?} */
        const data = JSON.parse(event.dataTransfer.getData('text/plain'));
        this.onOrderChange.emit({
            first: data,
            second: this.column,
        });
        return false;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onDragOver(event) {
        Helpers.swallowEvent(event);
        event.dataTransfer.dropEffect = 'move';
        return false;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onDragEnter(event) {
        this.element.nativeElement.classList.add('over');
        this.target = event.target;
    }
    /**
     * @param {?=} event
     * @return {?}
     */
    onDragLeave(event) {
        this.element.nativeElement.classList.remove('over');
    }
}
ThOrderable.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{
                selector: '[novoThOrderable]',
                host: {
                    '(dragstart)': 'onDragStart($event)',
                    '(dragover)': 'onDragOver($event)',
                    '(dragenter)': 'onDragEnter($event)',
                    '(dragleave)': 'onDragLeave($event)',
                    '(dragend)': 'onDragEnd($event)',
                    '(drop)': 'onDrop($event)',
                },
            },] }
];
/** @nocollapse */
ThOrderable.ctorParameters = () => [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"] }
];
ThOrderable.propDecorators = {
    column: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"], args: ['novoThOrderable',] }],
    onOrderChange: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }]
};
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: elements/table/extras/th-sortable/ThSortable.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ThSortable {
    constructor() {
        this.onSortChange = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onToggleSort(event) {
        if (event) {
            event.preventDefault();
        }
        if (this.config && this.column && this.config.sorting !== false && this.column.sorting !== false) {
            switch (this.column.sort) {
                case 'asc':
                    this.column.sort = 'desc';
                    break;
                default:
                    this.column.sort = 'asc';
                    break;
            }
            this.onSortChange.emit(this.column);
        }
    }
}
ThSortable.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{
                selector: '[novoThSortable]',
                host: {
                    '(click)': 'onToggleSort($event)',
                },
            },] }
];
ThSortable.propDecorators = {
    config: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"], args: ['novoThSortable',] }],
    column: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    onSortChange: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }]
};
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: elements/table/extras/TableExtras.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NovoTableExtrasModule {
}
NovoTableExtrasModule.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                imports: [_angular_common__WEBPACK_IMPORTED_MODULE_6__["CommonModule"], _angular_forms__WEBPACK_IMPORTED_MODULE_1__["FormsModule"], NovoSelectModule, NovoDropdownModule, NovoButtonModule],
                declarations: [
                    NovoTableHeaderElement,
                    NovoTableFooterElement,
                    NovoTableActionsElement,
                    NovoTableKeepFilterFocus,
                    Pagination,
                    RowDetails,
                    TableCell,
                    TableFilter,
                    ThOrderable,
                    ThSortable,
                    DateCell,
                    PercentageCell,
                    NovoDropdownCell,
                ],
                exports: [
                    NovoTableHeaderElement,
                    NovoTableFooterElement,
                    NovoTableActionsElement,
                    NovoTableKeepFilterFocus,
                    Pagination,
                    RowDetails,
                    TableCell,
                    TableFilter,
                    ThOrderable,
                    ThSortable,
                    DateCell,
                    PercentageCell,
                    NovoDropdownCell,
                ],
                entryComponents: [DateCell, PercentageCell, NovoDropdownCell],
            },] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: services/data-provider/CollectionEvent.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class CollectionEvent {
    /**
     * @param {?=} type
     * @param {?=} data
     */
    constructor(type = 'Collection.REFRESH', data = []) {
        this.type = '';
        this.data = [];
        this.type = type;
        this.data = data;
    }
}
CollectionEvent.REFRESH = 'Collection.REFRESH';
CollectionEvent.ADD = 'Collection.ADD';
CollectionEvent.REMOVE = 'Collection.REMOVE';
CollectionEvent.REMOVE_ALL = 'Collection.REMOVE_ALL';
CollectionEvent.REPLACE = 'Collection.REPLACE';
CollectionEvent.INVALIDATE_ALL = 'Collection.INVALIDATE_ALL';
CollectionEvent.SORT = 'Collection.SORT';
CollectionEvent.FILTER = 'Collection.FILTER';
CollectionEvent.CHANGE = 'Collection.CHANGE';
CollectionEvent.CURRENTPAGE_CHANGE = 'Collection.CURRENTPAGE_CHANGE';
CollectionEvent.PAGESIZE_CHANGE = 'Collection.PAGESIZE_CHANGE';
CollectionEvent.NUMBEROFPAGES_CHANGE = 'Collection.NUMBEROFPAGES_CHANGE';
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: services/data-provider/ArrayCollection.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Base Class for all Collection based data providers
 *
 * \@example
 *  var dp:DataProvider = new DataProvider();
 *  dp.addItem({label:"Item 1"});
 *  dp.addItem({label:"Item 2"});
 *  dp.addItem({label:"Item 3"});
 *  dp.addItem({label:"Item 4"});
 *  var myList:List = new List();
 *  myList.dataProvider = dp;
 * @template T
 */
class ArrayCollection {
    /**
     * @param {?=} source
     */
    constructor(source = []) {
        this.dataChange = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.source = [];
        this.editData = [];
        this.isEditing = false;
        this.filterData = [];
        this._filter = {};
        this._sort = [];
        this.source = source;
        this.editData = this.copy(this.source);
        this.filterData = this.source.slice();
    }
    /**
     * @return {?}
     */
    get length() {
        return this.filterData.length;
    }
    /**
     * @return {?}
     */
    get total() {
        return this.filterData.length;
    }
    /**
     * @return {?}
     */
    get list() {
        return this.filterData;
    }
    /**
     * @return {?}
     */
    isEmpty() {
        return this.length <= 0 && !this.isLoading() && !this.hasErrors();
    }
    /**
     * @return {?}
     */
    hasErrors() {
        return false;
    }
    /**
     * @return {?}
     */
    isLoading() {
        return false;
    }
    /**
     * @return {?}
     */
    isFiltered() {
        return Object.keys(this._filter).length > 0;
    }
    /**
     * Method to switch the isEditingflag for the data source
     * @return {?}
     */
    edit() {
        this.isEditing = true;
        this.editData = this.copy(this.source);
    }
    /**
     * Method to leave edit mode and reset source
     * @return {?}
     */
    undo() {
        this.isEditing = false;
        this.source = this.copy(this.editData);
        this.refresh();
    }
    /**
     * Method to leave edit mode and save editData
     * @return {?}
     */
    commit() {
        this.isEditing = false;
        this.source = this.filterData.slice();
        this.refresh();
    }
    /**
     * Appends an item to the end of the data provider.
     *
     *
     * \@memberOf ArrayCollection
     * @param {?} item
     * @return {?}
     */
    addItem(item) {
        this.isEditing ? this.editData.push(item) : this.source.push(item);
        this.onDataChange(new CollectionEvent(CollectionEvent.ADD, [item]));
        this.refresh();
    }
    /**
     * Adds a new item to the data provider at the specified index.
     *
     *
     * \@memberOf ArrayCollection
     * @param {?} item
     * @param {?} index
     * @return {?}
     */
    addItemAt(item, index) {
        this.isEditing ? this.editData.splice(index, 0, item) : this.source.splice(index, 0, item);
        this.onDataChange(new CollectionEvent(CollectionEvent.ADD, [item]));
        this.refresh();
    }
    /**
     *  Appends multiple items to the end of the DataProvider and dispatches a CollectionEvent.ADD event.
     *
     * \@memberOf ArrayCollection
     * @param {?} items
     * @return {?}
     */
    addItems(items) {
        this.isEditing ? this.editData.push(...items) : this.source.push(...items);
        this.onDataChange(new CollectionEvent(CollectionEvent.ADD, items));
        this.refresh();
    }
    /**
     * Adds several items to the data provider at the specified index and dispatches a CollectionEvent.ADD event.
     *
     * \@memberOf ArrayCollection
     * @param {?} items
     * @param {?} index
     * @return {?}
     */
    addItemsAt(items, index) {
        this.isEditing ? this.editData.splice(index, 0, ...items) : this.source.splice(index, 0, ...items);
    }
    /**
     * Creates a copy of the current ArrayCollection any.
     *
     * \@memberOf ArrayCollection
     * @return {?}
     */
    clone() {
        return new ArrayCollection(this.isEditing ? this.copy(this.editData) : this.copy(this.source));
    }
    /**
     * Creates a copy of the current ArrayCollection any.
     *
     * \@memberOf ArrayCollection
     * @param {?} array
     * @return {?}
     */
    copy(array) {
        return Helpers.deepClone(array);
    }
    /**
     * Concatenates the specified items to the end of the current data provider.
     *
     * \@memberOf ArrayCollection
     * @param {?} items
     * @return {?}
     */
    concat(items) {
        this.addItems(items);
    }
    /**
     * Returns the item at the specified index.
     *
     * \@memberOf ArrayCollection
     * @param {?} index
     * @return {?}
     */
    getItemAt(index) {
        return this.isEditing ? this.editData[index] : this.source[index];
    }
    /**
     *  Returns the index of the specified item.
     *
     * \@memberOf ArrayCollection
     * @param {?} item
     * @return {?}
     */
    getItemIndex(item) {
        return this.isEditing ? this.editData.indexOf(item) : this.source.indexOf(item);
    }
    /**
     * Invalidates all the data items that the DataProvider contains and dispatches a CollectionEvent.INVALIDATE_ALL event.
     *
     * \@memberOf ArrayCollection
     * @return {?}
     */
    invalidate() {
        this.onDataChange(new CollectionEvent(CollectionEvent.INVALIDATE_ALL));
    }
    /**
       * Invalidates the specified item.
       *
       * @memberOf ArrayCollection
       */
    // invalidateItem(item:any):void {}
    /**
       * Invalidates the item at the specified index.
       *
       * @memberOf ArrayCollection
       */
    // invalidateItemAt(index:number):void {}
    /**
     * Appends the specified data into the data that the data provider contains and removes any duplicate items.
     *
     * \@memberOf ArrayCollection
     * @param {?} newData
     * @return {?}
     */
    merge(newData) {
        for (const obj of newData) {
            /** @type {?} */
            const existing = ~this.getItemIndex(obj);
            if (existing) {
                this.replaceItem(obj, existing);
            }
            else {
                this.addItem(obj);
            }
        }
    }
    /**
     * Removes all items from the data provider and dispatches a CollectionEvent.REMOVE_ALL event.
     *
     * \@memberOf ArrayCollection
     * @return {?}
     */
    removeAll() {
        this.source = [];
        this.editData = [];
        this.filterData = [];
        this.onDataChange(new CollectionEvent(CollectionEvent.REMOVE_ALL, []));
        this.refresh();
    }
    /**
     * Removes the specified item from the data provider and dispatches a CollectionEvent.REMOVE event.
     *
     * \@memberOf ArrayCollection
     * @param {?} item
     * @return {?}
     */
    removeItem(item) {
        /** @type {?} */
        const index = this.getItemIndex(item);
        return this.removeItemAt(index);
    }
    /**
     * Removes the item at the specified index and dispatches a CollectionEvent.REMOVE event.
     *
     * \@memberOf ArrayCollection
     * @param {?} index
     * @return {?}
     */
    removeItemAt(index) {
        /** @type {?} */
        const success = !!this.source.splice(index, 1);
        this.refresh();
        return success;
    }
    /**
     * Replaces an existing item with a new item and dispatches a CollectionEvent.REPLACE event.
     *
     * \@memberOf ArrayCollection
     * @param {?} newItem
     * @param {?} oldItem
     * @return {?}
     */
    replaceItem(newItem, oldItem) {
        /** @type {?} */
        const index = this.getItemIndex(oldItem);
        if (index >= 0) {
            this.replaceItemAt(newItem, index);
        }
    }
    /**
     * Replaces the item at the specified index and dispatches a CollectionEvent.REPLACE event.
     *
     * \@memberOf ArrayCollection
     * @param {?} newItem
     * @param {?} index
     * @return {?}
     */
    replaceItemAt(newItem, index) {
        this.filterData.splice(index, 1, newItem);
    }
    /**
     * Sorts the items that the data provider contains and dispatches a CollectionEvent.SORT event.
     *
     * \@memberOf ArrayCollection
     * @return {?}
     */
    get sort() {
        return this._sort;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set sort(value) {
        this._sort = value;
        this.refresh();
    }
    /**
     * Sorts the items that the data provider contains by the specified field and dispatches a CollectionEvent.SORT event.
     *
     * \@memberOf ArrayCollection
     * @param {?} fieldName
     * @param {?=} reverse
     * @return {?}
     */
    sortOn(fieldName, reverse = false) {
        this.filterData = this.filterData.sort(Helpers.sortByField(fieldName, reverse));
        this.onDataChange(new CollectionEvent(CollectionEvent.SORT));
        return this.filterData;
    }
    /**
     * @return {?}
     */
    get filter() {
        return this._filter;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set filter(value) {
        this._filter = value;
        this.refresh();
    }
    /**
     * @param {?} fieldName
     * @param {?=} value
     * @return {?}
     */
    filterOn(fieldName, value = null) {
        this.filterData = this.filterData.filter(Helpers.filterByField(fieldName, value));
        return this.filterData;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onDataChange(event) {
        this.dataChange.emit(event);
    }
    /**
     * @return {?}
     */
    refresh() {
        this.filterData = this.isEditing ? this.editData.slice() : this.source.slice();
        for (const item of this._sort.reverse()) {
            this.sortOn(item.field, item.reverse);
        }
        for (const key in this._filter) {
            if (key) {
                this.filterOn(key, this._filter[key]);
            }
        }
        this.onDataChange(new CollectionEvent(CollectionEvent.CHANGE, this.filterData));
    }
    /**
     * Creates an Array any representation of the data that the data provider contains.
     *
     * \@memberOf ArrayCollection
     * @return {?}
     */
    toArray() {
        return this.isEditing ? this.editData : this.source;
    }
    /**
     * @return {?}
     */
    toJSON() {
        return this.isEditing ? this.editData : this.source;
    }
}
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: services/data-provider/PagedArrayCollection.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @template T
 */
class PagedArrayCollection extends ArrayCollection {
    /**
     * @param {?=} source
     */
    constructor(source = []) {
        super(source);
        this._page = 1;
        this._numberOfPages = 1;
        this._pageSize = 10;
    }
    /**
     * @return {?}
     */
    get numberOfPages() {
        /** @type {?} */
        let result = this.source.length / this.pageSize;
        result = Math.ceil(result);
        return result;
    }
    /**
     * @return {?}
     */
    get page() {
        return this._page;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set page(value) {
        this._page = value;
        this.refresh();
    }
    /**
     * @return {?}
     */
    get pageSize() {
        return this._pageSize;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set pageSize(value) {
        this._pageSize = value;
        this.refresh();
    }
    /**
     * @return {?}
     */
    next() {
        if (this.page === this.numberOfPages) {
            return this.page;
        }
        this.page++;
        return this.page;
    }
    /**
     * @return {?}
     */
    prev() {
        if (this._page === 1) {
            return this.page;
        }
        this.page--;
        return this.page;
    }
    /**
     * @return {?}
     */
    first() {
        if (this.page === 1) {
            return this.page;
        }
        this.page = 1;
        return this.page;
    }
    /**
     * @return {?}
     */
    last() {
        if (this.page === this.numberOfPages) {
            return this.page;
        }
        this.page = this.numberOfPages;
        return this.page;
    }
    /**
     * @return {?}
     */
    refresh() {
        this.filterData = this.isEditing ? this.editData.slice() : this.source.slice();
        for (const item of this._sort.reverse()) {
            this.sortOn(item.field, item.reverse);
        }
        for (const key in this._filter) {
            if (key) {
                this.filterOn(key, this._filter[key]);
            }
        }
        if (this.page >= 0) {
            /** @type {?} */
            const start = (this.page - 1) * this.pageSize;
            /** @type {?} */
            const end = start + this.pageSize;
            /** @type {?} */
            const result = this.filterData.slice(start, end);
            this.onDataChange(new CollectionEvent(CollectionEvent.CHANGE, result));
        }
        else {
            this.onDataChange(new CollectionEvent(CollectionEvent.CHANGE, this.filterData));
        }
    }
}
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: elements/table/Table.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @record
 */
function NovoTableConfig() { }
if (false) {}
/** @enum {number} */
const NovoTableMode = {
    VIEW: 1,
    EDIT: 2,
};
NovoTableMode[NovoTableMode.VIEW] = 'VIEW';
NovoTableMode[NovoTableMode.EDIT] = 'EDIT';
class NovoTableElement {
    /**
     * @param {?} labels
     * @param {?} formUtils
     * @param {?} builder
     */
    constructor(labels, formUtils, builder) {
        this.labels = labels;
        this.formUtils = formUtils;
        this.builder = builder;
        this.config = {};
        this.skipSortAndFilterClear = false;
        this.mode = NovoTableMode.VIEW;
        this.editable = false;
        this.rowIdentifier = 'id';
        this.name = 'table';
        this.onRowClick = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.onRowSelect = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.onTableChange = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this._rows = [];
        this.selected = [];
        this.activeId = 0;
        this.master = false;
        this.expandAll = false;
        this.indeterminate = false;
        this.lastPage = 0;
        this.selectedPageCount = 0;
        this.showSelectAllMessage = false;
        this.pagedData = [];
        // Map to keep track of what dropdowns are toggled
        // Used to properly *ngIf the <list> so that the keepFilterFocused Directive
        // will properly fire the ngAfterViewInit event
        this.toggledDropdownMap = {};
        this.NovoTableMode = NovoTableMode;
        this.tableForm = new _angular_forms__WEBPACK_IMPORTED_MODULE_1__["FormGroup"]({});
        this.footers = [];
        this.grossFlagToAvoidTheTableFromBeingUglyWhenHidingTheToast = false;
        this.loading = false;
        notify('[Deprecated]: The table is deprecated. Please migrate to novo-data-tables!');
    }
    /**
     * @param {?} rows
     * @return {?}
     */
    set rows(rows) {
        this.dataProvider = rows;
        if (rows && rows.length > 0) {
            this.setupColumnDefaults();
        }
        // this is a temporary/hacky fix until async dataloading is handled within the table
        if (!this.skipSortAndFilterClear) {
            this.clearAllSortAndFilters();
        }
    }
    /**
     * @return {?}
     */
    get rows() {
        return this._rows;
    }
    /**
     * @param {?} dp
     * @return {?}
     */
    set dataProvider(dp) {
        this._dataProvider = Array.isArray(dp) ? new PagedArrayCollection(dp) : dp;
        this._dataProvider.dataChange.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_14__["debounceTime"])(100)).subscribe((/**
         * @param {?} event
         * @return {?}
         */
        (event) => {
            switch (event.type) {
                case CollectionEvent.CHANGE:
                    this._rows = event.data;
                    // Setup form
                    this.tableForm = this.builder.group({
                        rows: this.builder.array([]),
                    });
                    // Remove all selection on sort change if selection is on
                    if (this.config.rowSelectionStyle === 'checkbox') {
                        this.pagedData = event.data;
                        this.pageSelected = this.pagedData.filter((/**
                         * @param {?} r
                         * @return {?}
                         */
                        (r) => r._selected));
                        this.rowSelectHandler();
                    }
                    // Find that columns we might need to sum up via the footer
                    /** @type {?} */
                    let columnsToSum = [];
                    /** @type {?} */
                    const columnSums = {};
                    if (this.config.footers) {
                        this.config.footers.forEach((/**
                         * @param {?} config
                         * @return {?}
                         */
                        (config) => {
                            columnsToSum.push(...config.columns);
                        }));
                        // Only have unique columns, filter out duplicates
                        columnsToSum = columnsToSum.filter((/**
                         * @param {?} item
                         * @param {?} index
                         * @param {?} array
                         * @return {?}
                         */
                        (item, index, array) => array.indexOf(item) === index));
                    }
                    // Make a form for each row
                    /** @type {?} */
                    const tableFormRows = (/** @type {?} */ (this.tableForm.controls['rows']));
                    this._rows.forEach((/**
                     * @param {?} row
                     * @param {?} index
                     * @return {?}
                     */
                    (row, index) => {
                        /** @type {?} */
                        const rowControls = [];
                        row.controls = {};
                        row._editing = {};
                        row._expanded = this.config.expandAll;
                        row.rowId = this._rows.length;
                        this.columns.forEach((/**
                         * @param {?} column
                         * @return {?}
                         */
                        (column) => {
                            // Use the control passed or use a ReadOnlyControl so that the form has the values
                            /** @type {?} */
                            const control = column.editorConfig
                                ? ControlFactory.create(column.editorType, column.editorConfig)
                                : new ReadOnlyControl({ key: column.name });
                            row.controls[column.name] = control;
                            rowControls.push(control);
                        }));
                        this.formUtils.setInitialValues(rowControls, row, false);
                        tableFormRows.push(this.formUtils.toFormGroup(rowControls));
                        // Setup the total footer if configured
                        // Array of keys to total
                        if (columnsToSum.length !== 0) {
                            columnsToSum.forEach((/**
                             * @param {?} column
                             * @return {?}
                             */
                            (column) => {
                                if (Helpers.isBlank(columnSums[column])) {
                                    columnSums[column] = 0;
                                }
                                columnSums[column] += row[column];
                            }));
                        }
                    }));
                    if (this.mode === NovoTableMode.EDIT) {
                        this.setTableEdit();
                    }
                    // Setup the footers (if any)
                    if (this.config.footers) {
                        this.footers = [];
                        this.config.footers.forEach((/**
                         * @param {?} footerConfig
                         * @param {?} footerConfigIndex
                         * @return {?}
                         */
                        (footerConfig, footerConfigIndex) => {
                            /** @type {?} */
                            const footer = {};
                            footer[footerConfig.labelColumn] = footerConfig.label;
                            footerConfig.columns.forEach((/**
                             * @param {?} column
                             * @return {?}
                             */
                            (column) => {
                                if (footerConfig.method === 'AVG' && this._rows.length !== 0) {
                                    footer[column] = columnSums[column] / this._rows.length;
                                }
                                else {
                                    footer[column] = columnSums[column];
                                }
                            }));
                            this.footers.push(footer);
                        }));
                    }
                    break;
                default:
                    break;
            }
        }));
        if (this.config.paging) {
            this._dataProvider.page = this.config.paging.current;
            this._dataProvider.pageSize = this.config.paging.itemsPerPage;
        }
        else {
            // Paging turned off, return basically all of the data
            this._dataProvider.page = 1;
            this._dataProvider.pageSize = 500;
        }
        if (dp && dp.length > 0) {
            this.setupColumnDefaults();
        }
        this._dataProvider.refresh();
    }
    /**
     * @return {?}
     */
    get dataProvider() {
        return this._dataProvider;
    }
    /**
     * @return {?}
     */
    get editing() {
        return this.mode === NovoTableMode.EDIT;
    }
    /**
     * @return {?}
     */
    get formValue() {
        return this.tableForm.value;
    }
    /**
     * @param {?} event
     * @param {?} column
     * @return {?}
     */
    onDropdownToggled(event, column) {
        this.toggledDropdownMap[column] = event;
    }
    /**
     * @return {?}
     */
    focusInput() {
        if (this.filterInputs && this.filterInputs.length) {
            this.filterInputs.forEach((/**
             * @param {?} filterInput
             * @return {?}
             */
            (filterInput) => {
                if (filterInput.nativeElement) {
                    setTimeout((/**
                     * @return {?}
                     */
                    () => filterInput.nativeElement.focus()), 0);
                }
            }));
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onPageChange(event) {
        // this.dataProvider.page = event.page;
        // this.dataProvider.pageSize = event.itemsPerPage;
    }
    /**
     * @param {?} option
     * @return {?}
     */
    getOptionDataAutomationId(option) {
        if (!Helpers.isBlank(option.value)) {
            return option.value;
        }
        return option;
    }
    /**
     * @return {?}
     */
    setupColumnDefaults() {
        // Check columns for cell option types
        this.columns.forEach((/**
         * @param {?} column
         * @return {?}
         */
        (column) => {
            if (column && column.type) {
                switch (column.type) {
                    case 'date':
                        // Set options based on dates if there are none
                        column.options = column.options || this.getDefaultOptions(column);
                        break;
                    default:
                        break;
                }
            }
        }));
    }
    /**
     * @return {?}
     */
    ngDoCheck() {
        if (this.config.paging && this.config.paging.current !== this.lastPage) {
            this.rowSelectHandler();
            this.showSelectAllMessage = false;
        }
        this.lastPage = this.config.paging ? this.config.paging.current : 1;
    }
    /**
     * @return {?}
     */
    getPageStart() {
        return this.config.paging ? (this.dataProvider.page - 1) * this.dataProvider.pageSize : 0;
    }
    /**
     * @return {?}
     */
    getPageEnd() {
        return this.config.paging && this.dataProvider.pageSize > -1 ? this.getPageStart() + this.dataProvider.pageSize : this.rows.length;
    }
    /**
     * @param {?} i
     * @return {?}
     */
    getRowControlForm(i) {
        /** @type {?} */
        const tableFormRows = (/** @type {?} */ (this.tableForm.controls['rows']));
        return tableFormRows.controls[i];
    }
    /**
     * @param {?} column
     * @param {?} filter
     * @return {?}
     */
    onFilterClick(column, filter) {
        if (filter.range && !column.calendarShow) {
            column.calenderShow = true;
            return;
        }
        if (Array.isArray(column.filter) && column.multiple) {
            if (~column.filter.indexOf(filter)) {
                // Remove filter
                column.filter.splice(column.filter.indexOf(filter), 1);
                if (filter.range) {
                    column.calenderShow = false;
                }
                if (column.filter.length === 0) {
                    column.filter = null;
                }
            }
            else {
                // Add filter
                column.filter.push(filter);
            }
        }
        else if (column.multiple) {
            column.filter = new Array();
            column.filter.push(Helpers.isBlank(filter.value) ? filter : filter.value);
        }
        else {
            column.filter = Helpers.isBlank(filter.value) ? filter : filter.value;
        }
        this.onFilterChange();
    }
    /**
     * @param {?} column
     * @return {?}
     */
    onFilterClear(column) {
        setTimeout((/**
         * @return {?}
         */
        () => {
            column.filter = null;
            column.freetextFilter = null;
            this.onFilterChange();
            if (column.originalOptions) {
                column.options = column.originalOptions;
            }
        }));
    }
    /**
     * @return {?}
     */
    clearAllSortAndFilters() {
        if (this.config.filtering) {
            this.columns.forEach((/**
             * @param {?} column
             * @return {?}
             */
            (column) => {
                column.filter = null;
                column.sort = null;
            }));
        }
    }
    /**
     * \@description This method updates the row data to reflect the active filters.
     * @param {?=} event
     * @return {?}
     */
    onFilterChange(event) {
        if (this.config.filtering) {
            // Array of filters
            /** @type {?} */
            const filters = this.columns.filter((/**
             * @param {?} col
             * @return {?}
             */
            (col) => !Helpers.isEmpty(col.filter)));
            if (filters.length) {
                /** @type {?} */
                let query = {};
                for (const column of filters) {
                    if (Helpers.isFunction(column.match)) {
                        query[column.name] = (/**
                         * @param {?} value
                         * @param {?} record
                         * @return {?}
                         */
                        (value, record) => {
                            return column.match(record, column.filter);
                        });
                    }
                    else if (column.preFilter && Helpers.isFunction(column.preFilter)) {
                        query = Object.assign({}, query, column.preFilter(this.escapeCharacters(column.filter)));
                    }
                    else if (Array.isArray(column.filter)) {
                        // The filters are an array (multi-select), check value
                        /** @type {?} */
                        let options = column.filter;
                        // We have an array of {value: '', labels: ''}
                        if (options[0].value || options[0].label) {
                            options = column.filter.map((/**
                             * @param {?} opt
                             * @return {?}
                             */
                            (opt) => opt.value));
                        }
                        query[column.name] = { any: options };
                    }
                    else if (column.type && column.type === 'date') {
                        if (column.filter.startDate && column.filter.endDate) {
                            query[column.name] = {
                                min: Object(date_fns__WEBPACK_IMPORTED_MODULE_10__["startOfDay"])(column.filter.startDate),
                                max: Object(date_fns__WEBPACK_IMPORTED_MODULE_10__["startOfDay"])(Object(date_fns__WEBPACK_IMPORTED_MODULE_10__["addDays"])(Object(date_fns__WEBPACK_IMPORTED_MODULE_10__["startOfDay"])(column.filter.endDate), 1)),
                            };
                        }
                        else {
                            query[column.name] = {
                                min: column.filter.min ? Object(date_fns__WEBPACK_IMPORTED_MODULE_10__["addDays"])(Object(date_fns__WEBPACK_IMPORTED_MODULE_10__["startOfToday"])(), column.filter.min) : Object(date_fns__WEBPACK_IMPORTED_MODULE_10__["startOfToday"])(),
                                max: column.filter.max ? Object(date_fns__WEBPACK_IMPORTED_MODULE_10__["addDays"])(Object(date_fns__WEBPACK_IMPORTED_MODULE_10__["startOfTomorrow"])(), column.filter.max) : Object(date_fns__WEBPACK_IMPORTED_MODULE_10__["startOfTomorrow"])(),
                            };
                        }
                    }
                    else {
                        query[column.name] = column.filter;
                    }
                }
                if (Helpers.isFunction(this.config.filtering)) {
                    this.config.filtering(query);
                }
                else {
                    this._dataProvider.filter = query;
                }
            }
            else {
                this._dataProvider.filter = {};
            }
            // Trickle down to keep sort
            // this.onSortChange(this.currentSortColumn);
            this.fireTableChangeEvent();
            // If paging, reset page
            if (this.config.paging) {
                this.config.paging.current = 1;
            }
            // Remove all selection on sort change if selection is on
            if (this.config.rowSelectionStyle === 'checkbox') {
                this.selectAll(false);
            }
        }
    }
    /**
     * @param {?} filter
     * @return {?}
     */
    escapeCharacters(filter) {
        if (typeof filter === 'string') {
            return filter.replace(/'/g, '\'\'');
        }
        return filter;
    }
    /**
     * @param {?} column
     * @param {?} filter
     * @return {?}
     */
    isFilterActive(column, filter) {
        // TODO: This needs to be refactored
        /** @type {?} */
        let isActive = false;
        if (column && !Helpers.isBlank(column.filter) && !Helpers.isBlank(filter)) {
            if (Array.isArray(column.filter)) {
                if (typeof filter !== 'string') {
                    isActive = column.filter.some((/**
                     * @param {?} item
                     * @return {?}
                     */
                    (item) => {
                        return item.label === filter.label;
                    }));
                }
                else {
                    isActive = column.filter.includes(filter);
                }
            }
            else {
                if (typeof column.filter === typeof filter) {
                    isActive = column.filter === filter;
                }
                else {
                    isActive = column.filter === filter.value;
                }
            }
        }
        return isActive;
    }
    /**
     * @param {?} column
     * @return {?}
     */
    onSortChange(column) {
        this.currentSortColumn = column;
        /** @type {?} */
        const sortedColumns = this.columns.filter((/**
         * @param {?} thisColumn
         * @return {?}
         */
        (thisColumn) => {
            return thisColumn.sort && thisColumn !== this.currentSortColumn;
        }));
        for (const sortedColumn of sortedColumns) {
            sortedColumn.sort = null;
        }
        if (column) {
            if (Helpers.isFunction(this.config.sorting)) {
                this.config.sorting();
            }
            else if (Helpers.isFunction(column.preSort)) {
                this._dataProvider.sort = [].concat(column.preSort(column));
            }
            else {
                this._dataProvider.sort = [{ field: column.compare || column.name, reverse: column.sort === 'desc' }];
            }
        }
        // Fire table change event
        // this.fireTableChangeEvent();
        // If paging, reset page
        if (this.config.paging) {
            this.config.paging.current = 1;
        }
        // Remove all selection on sort change if selection is on
        if (this.config.rowSelectionStyle === 'checkbox') {
            this.selectAll(false);
        }
    }
    /**
     * @return {?}
     */
    fireTableChangeEvent() {
        // Construct a table change object
        /** @type {?} */
        const onTableChange = {};
        /** @type {?} */
        const filters = this.columns.filter((/**
         * @param {?} col
         * @return {?}
         */
        (col) => col.filter && col.filter.length));
        onTableChange.filter = filters.length ? filters : false;
        onTableChange.sort = this.currentSortColumn ? this.currentSortColumn : false;
        onTableChange.rows = this.rows;
        // Emit event
        this.onTableChange.emit(onTableChange);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    findColumnIndex(value) {
        for (let i = 0; i < this.columns.length; i += 1) {
            if (this.columns[i].name === value) {
                return i;
            }
        }
        return null;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onOrderChange(event) {
        /** @type {?} */
        const oldIndex = this.findColumnIndex(event.first.name);
        /** @type {?} */
        const newIndex = this.findColumnIndex(event.second.name);
        this.columns.splice(newIndex, 0, this.columns.splice(oldIndex, 1)[0]);
        this.onSortChange(this.currentSortColumn);
    }
    /**
     * @param {?} expanded
     * @return {?}
     */
    expandAllOnPage(expanded) {
        this.config.expandAll = !expanded;
        for (const row of this.dataProvider.list) {
            row._expanded = this.config.expandAll;
        }
    }
    /**
     * @param {?=} data
     * @return {?}
     */
    selectPage(data) {
        if (!this.master) {
            this.selectAll(false);
            // Only show the select all message when there is only one new page selected at a time
            this.selectedPageCount = this.selectedPageCount > 0 ? this.selectedPageCount - 1 : 0;
            this.showSelectAllMessage = false;
        }
        else {
            this.indeterminate = false;
            // this.pagedData = this.rows.slice(this.getPageStart(), this.getPageEnd());
            for (const row of this.pagedData) {
                row._selected = this.master;
            }
            this.selected = this.dataProvider.list.filter((/**
             * @param {?} r
             * @return {?}
             */
            (r) => r._selected));
            this.pageSelected = this.pagedData.filter((/**
             * @param {?} r
             * @return {?}
             */
            (r) => r._selected));
            this.emitSelected(this.selected);
            // Only show the select all message when there is only one new page selected at a time
            this.selectedPageCount++;
            this.showSelectAllMessage = this.selectedPageCount === 1 && this.selected.length !== this.dataProvider.total;
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    selectAll(value) {
        this.master = value;
        this.indeterminate = false;
        for (const row of this.dataProvider.list) {
            row._selected = value;
        }
        this.selected = value ? this.dataProvider.list : [];
        this.showSelectAllMessage = false;
        this.selectedPageCount = this.selectedPageCount > 0 ? this.selectedPageCount - 1 : 0;
        this.rowSelectHandler();
    }
    /**
     * @param {?=} data
     * @return {?}
     */
    rowSelectHandler(data) {
        // this.pagedData = this.rows.slice(this.getPageStart(), this.getPageEnd());
        this.pageSelected = this.pagedData.filter((/**
         * @param {?} r
         * @return {?}
         */
        (r) => r._selected));
        this.selected = this.dataProvider.list.filter((/**
         * @param {?} r
         * @return {?}
         */
        (r) => r._selected));
        if (this.pageSelected.length === 0) {
            this.master = false;
            this.indeterminate = false;
        }
        else if (this.pageSelected.length === this.pagedData.length) {
            this.master = true;
            this.indeterminate = false;
        }
        else {
            this.master = false;
            this.indeterminate = true;
            // Breaking the selected page count
            this.showSelectAllMessage = false;
            this.selectedPageCount = this.selectedPageCount > 0 ? this.selectedPageCount - 1 : 0;
        }
        this.emitSelected(this.selected);
    }
    /**
     * @param {?} selected
     * @return {?}
     */
    emitSelected(selected) {
        this.onRowSelect.emit({ length: selected.length, selected });
    }
    /**
     * @param {?} row
     * @return {?}
     */
    rowClickHandler(row) {
        if (this.config.rowSelect) {
            this.activeId = row.id || 0;
            this.onRowClick.emit(row);
        }
    }
    /**
     * @param {?} column
     * @return {?}
     */
    getDefaultOptions(column) {
        // TODO - needs to come from label service - https://github.com/bullhorn/novo-elements/issues/116
        /** @type {?} */
        const opts = [
            { label: this.labels.past1Day, min: -1, max: 0 },
            { label: this.labels.past7Days, min: -7, max: 0 },
            { label: this.labels.past30Days, min: -30, max: 0 },
            { label: this.labels.past90Days, min: -90, max: 0 },
            { label: this.labels.past1Year, min: -366, max: 0 },
            { label: this.labels.next1Day, min: 0, max: 1 },
            { label: this.labels.next7Days, min: 0, max: 7 },
            { label: this.labels.next30Days, min: 0, max: 30 },
            { label: this.labels.next90Days, min: 0, max: 90 },
            { label: this.labels.next1Year, min: 0, max: 366 },
        ];
        if (column && column.range) {
            opts.push({
                label: this.labels.customDateRange,
                range: true,
            });
        }
        return opts;
    }
    /**
     * @param {?} column
     * @param {?} event
     * @return {?}
     */
    onCalenderSelect(column, event) {
        setTimeout((/**
         * @return {?}
         */
        () => {
            if (event.startDate && event.endDate) {
                this.onFilterChange();
            }
        }), 10);
    }
    /**
     * @param {?} config
     * @return {?}
     */
    onFilterKeywords(config) {
        if (config && config.filtering && config.filtering.freetextFilter) {
            /** @type {?} */
            const filterKeywords = config.filtering.freetextFilter.toLowerCase();
            if (!config.filtering.originalOptions) {
                config.filtering.originalOptions = config.filtering.options;
            }
            /** @type {?} */
            const newOptions = config.filtering.originalOptions.filter((/**
             * @param {?} option
             * @return {?}
             */
            (option) => {
                /** @type {?} */
                let value = option && option.label ? option.label : option;
                value = value.toLowerCase() ? value.toLowerCase() : value;
                if (value === filterKeywords) {
                    return true;
                }
                else if (~value.indexOf(filterKeywords) || ~value.indexOf(filterKeywords)) {
                    return true;
                }
                return false;
            }));
            config.filtering.options = newOptions;
            config.filtering.filter = config.filtering.freetextFilter;
        }
        else {
            config.filtering.options = config.filtering.originalOptions;
        }
        this.onFilterChange();
    }
    /**
     * \@description Sets the Table into EDIT mode, based on the row/column passed you can enter in a few states
     * (1) setTableEdit() - don't pass any to put the FULL table into edit mode
     * (2) setTableEdit(1) - pass only row to put that FULL row of the table into edit mode
     * (3) setTableEdit(1, 1) - pass row and column to put that column of the row of the table into edit mode
     * \@memberOf NovoTableElement
     * @param {?=} rowNumber
     * @param {?=} columnNumber
     * @return {?}
     */
    setTableEdit(rowNumber, columnNumber) {
        this.mode = NovoTableMode.EDIT;
        this._dataProvider.edit();
        this._rows.forEach((/**
         * @param {?} row
         * @param {?} rowIndex
         * @return {?}
         */
        (row, rowIndex) => {
            row._editing = row._editing || {};
            this.columns.forEach((/**
             * @param {?} column
             * @param {?} columnIndex
             * @return {?}
             */
            (column, columnIndex) => {
                if (column.viewOnly) {
                    row._editing[column.name] = false;
                }
                else if (Helpers.isEmpty(rowNumber) && Helpers.isEmpty(columnNumber)) {
                    row._editing[column.name] = true;
                }
                else if (!Helpers.isEmpty(rowNumber) && rowIndex === Number(rowNumber) && Helpers.isEmpty(columnNumber)) {
                    row._editing[column.name] = true;
                }
                else if (!Helpers.isEmpty(rowNumber) &&
                    !Helpers.isEmpty(columnNumber) &&
                    rowIndex === Number(rowNumber) &&
                    columnIndex === Number(columnNumber)) {
                    row._editing[column.name] = true;
                }
                else {
                    row._editing[column.name] = false;
                }
            }));
        }));
    }
    /**
     * \@description Leaves edit mode for the Table and puts everything back to VIEW only
     * \@memberOf NovoTableElement
     * @private
     * @param {?} cancel - whether or not to save data or undo
     * @return {?}
     */
    leaveEditMode(cancel) {
        this.mode = NovoTableMode.VIEW;
        this._rows.forEach((/**
         * @param {?} row
         * @return {?}
         */
        (row) => {
            row._editing = row._editing || {};
            this.columns.forEach((/**
             * @param {?} column
             * @return {?}
             */
            (column) => {
                row._editing[column.name] = false;
            }));
        }));
        if (cancel) {
            this._dataProvider.undo();
        }
        else {
            this._dataProvider.commit();
        }
        this.hideToastMessage();
    }
    /**
     * \@description Adds a new row into the table to be edited, can be called from a local reference of the table in your template
     * \@memberOf NovoTableElement
     * @param {?=} defaultValue
     * @return {?}
     */
    addEditableRow(defaultValue = {}) {
        /** @type {?} */
        const tableFormRows = (/** @type {?} */ (this.tableForm.controls['rows']));
        /** @type {?} */
        const row = {};
        /** @type {?} */
        const rowControls = [];
        row.controls = {};
        row._editing = {};
        row.rowId = this._rows.length + 1;
        this.columns.forEach((/**
         * @param {?} column
         * @return {?}
         */
        (column) => {
            // Use the control passed or use a ReadOnlyControl so that the form has the values
            /** @type {?} */
            const control = column.editorConfig
                ? ControlFactory.create(column.editorType, column.editorConfig)
                : new ReadOnlyControl({ key: column.name });
            control.value = null; // remove copied column value
            row.controls[column.name] = control;
            row._editing[column.name] = !column.viewOnly;
            rowControls.push(control);
        }));
        this.formUtils.setInitialValues(rowControls, defaultValue, false);
        tableFormRows.push(this.formUtils.toFormGroup(rowControls));
        this._rows.push(row);
    }
    /**
     * \@description Validates the Form inside of the Table, if there are errors it will display/return the errors for each row.
     * If there are no errors, then it will return ONLY the changed data for each row, the data returned will be in the form:
     * { id: ID_OF_RECORD, key: value } -- data that was updated
     * { id: undefined, key: value } -- data that was added
     * \@memberOf NovoTableElement
     * @return {?}
     */
    validateAndGetUpdatedData() {
        if (this.tableForm && this.tableForm.controls && this.tableForm.controls['rows']) {
            /** @type {?} */
            const changedRows = [];
            /** @type {?} */
            const errors = [];
            // Go over the FormArray's controls
            ((/** @type {?} */ (this.tableForm.controls['rows']))).controls.forEach((/**
             * @param {?} formGroup
             * @param {?} index
             * @return {?}
             */
            (formGroup, index) => {
                /** @type {?} */
                let changedRow = null;
                /** @type {?} */
                let error = null;
                // Go over the form group controls
                Object.keys(formGroup.controls).forEach((/**
                 * @param {?} key
                 * @return {?}
                 */
                (key) => {
                    /** @type {?} */
                    const control = formGroup.controls[key];
                    // Handle value changing
                    if (control && control.dirty && !control.errors) {
                        if (!changedRow) {
                            // Append the ID, so we have some key to save against
                            changedRow = {};
                            if (this._rows[index].id) {
                                changedRow.id = this._rows[index].id;
                            }
                        }
                        // If dirty, grab value off the form
                        changedRow[key] = this.tableForm.value['rows'][index][key];
                        // Set value back to row (should be already done via the server call, but do it anyway)
                        this._rows[index][key] = changedRow[key];
                    }
                    else if (control && control.errors) {
                        // Handle errors
                        if (!error) {
                            error = {};
                        }
                        error[key] = control.errors;
                        control.markAsDirty();
                        control.markAsTouched();
                    }
                }));
                if (changedRow) {
                    changedRows.push(changedRow);
                }
                if (error) {
                    errors.push({ errors: error, row: this._rows[index], index });
                }
            }));
            /** @type {?} */
            const ret = {};
            // Return errors if any, otherwise return the changed rows
            if (errors.length === 0) {
                return { changed: changedRows };
            }
            return { errors };
        }
    }
    /**
     * \@description Refresh the data provider and leave edit mode
     * \@memberOf NovoTableElement
     * @return {?}
     */
    cancelEditing() {
        this.leaveEditMode(true);
    }
    /**
     * \@description Refresh the data provider and leave edit mode
     * \@memberOf NovoTableElement
     * @return {?}
     */
    saveChanges() {
        this.leaveEditMode(false);
    }
    /**
     * \@description Displays a toast message inside of the table
     * \@memberOf NovoTableElement
     * @param {?} toast
     * @param {?=} hideDelay
     * @return {?}
     */
    displayToastMessage(toast, hideDelay) {
        this.loading = false;
        this.toast = toast;
        if (hideDelay) {
            setTimeout((/**
             * @return {?}
             */
            () => this.hideToastMessage()), hideDelay);
        }
    }
    /**
     * \@description Force hide the toast message
     * \@memberOf NovoTableElement
     * @return {?}
     */
    hideToastMessage() {
        this.toast = null;
        // Hack to make the table display properly after hiding the toast
        this.grossFlagToAvoidTheTableFromBeingUglyWhenHidingTheToast = true;
        setTimeout((/**
         * @return {?}
         */
        () => {
            this.grossFlagToAvoidTheTableFromBeingUglyWhenHidingTheToast = false;
        }));
    }
    /**
     * \@description display the loading overlay on the table
     * \@memberOf NovoTableElement
     * @param {?} show
     * @return {?}
     */
    toggleLoading(show) {
        this.loading = show;
    }
    /**
     * \@description hide a column in edit or view mode
     * \@memberOf NovoTableElement
     * @param {?} column
     * @return {?}
     */
    isColumnHidden(column) {
        return this.editing ? !!column.hideColumnOnEdit : !!column.hideColumnOnView;
    }
}
NovoTableElement.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'novo-table',
                host: {
                    '[attr.theme]': 'theme',
                    '[class.editing]': 'mode === NovoTableMode.EDIT',
                    '[class.novo-table-loading]': 'loading',
                },
                // directives: [],
                template: `
        <header *ngIf="columns.length">
            <ng-content select="novo-table-header"></ng-content>
            <div class="header-actions">
                <novo-pagination *ngIf="config.paging && !(dataProvider.isEmpty() && !dataProvider.isFiltered())"
                                 [rowOptions]="config.paging.rowOptions"
                                 [disablePageSelection]="config.paging.disablePageSelection"
                                 [(page)]="dataProvider.page"
                                 [(itemsPerPage)]="dataProvider.pageSize"
                                 [totalItems]="dataProvider.total"
                                 (onPageChange)="onPageChange($event)">
                </novo-pagination>
                <ng-content select="novo-table-actions"></ng-content>
            </div>
        </header>
        <div class="novo-table-loading-overlay" *ngIf="loading || dataProvider.isLoading()">
            <novo-loading></novo-loading>
        </div>
        <novo-toast *ngIf="toast" [theme]="toast?.theme" [icon]="toast?.icon" [message]="toast?.message"></novo-toast>
        <div class="table-container" *ngIf="!grossFlagToAvoidTheTableFromBeingUglyWhenHidingTheToast">
            <novo-form hideHeader="true" [form]="tableForm">
                <table class="table table-striped dataTable" [class.table-details]="config.hasDetails" role="grid">
                <!-- skipSortAndFilterClear is a hack right now, will be removed once Canvas is refactored -->
                <thead *ngIf="columns.length && (!dataProvider.isEmpty() || dataProvider.isFiltered() || skipSortAndFilterClear || editing)">
                    <tr role="row">
                        <!-- DETAILS -->
                        <th class="row-actions" *ngIf="config.hasDetails">
                            <button theme="icon" icon="next" (click)="expandAllOnPage(config.expandAll)" *ngIf="!config.expandAll" data-automation-id="expand-all"></button>
                            <button theme="icon" icon="sort-desc" (click)="expandAllOnPage(config.expandAll)" *ngIf="config.expandAll" data-automation-id="collapse-all"></button>
                        </th>
                        <!-- CHECKBOX -->
                        <th class="row-actions checkbox mass-action" *ngIf="config.rowSelectionStyle === 'checkbox'">
                            <novo-checkbox [(ngModel)]="master" [indeterminate]="pageSelected.length > 0 && pageSelected.length < pagedData.length" (ngModelChange)="selectPage($event)" data-automation-id="select-all-checkbox" [tooltip]="master ? labels.deselectAll : labels.selectAllOnPage" tooltipPosition="right"></novo-checkbox>
                        </th>
                        <!-- TABLE HEADERS -->
                        <th *ngFor="let column of columns" [ngClass]="{ 'mass-action': config?.rowSelectionStyle === 'checkbox', 'actions': column?.actions?.items?.length > 0, 'preview': column?.name === 'preview' }" [novoThOrderable]="column" (onOrderChange)="onOrderChange($event)" [hidden]="isColumnHidden(column)">
                            <div class="th-group" [attr.data-automation-id]="column.id || column.name" *ngIf="!column.hideHeader">
                                <!-- LABEL & SORT ARROWS -->
                                <div class="th-title" [ngClass]="(config.sorting !== false && column.sorting !== false) ? 'sortable' : ''" [novoThSortable]="config" [column]="column" (onSortChange)="onSortChange($event)">
                                    <label>{{ column.title || column.label }}</label>
                                    <div class="table-sort-icons" tooltipPosition="bottom" [tooltip]="labels.sort" [ngClass]="column.sort || ''" *ngIf="config.sorting !== false && column.sorting !== false">
                                        <i class="bhi-arrow-up"></i>
                                        <i class="bhi-arrow-down"></i>
                                    </div>
                                </div>
                                <!-- FILTER DROP-DOWN -->
                                <novo-dropdown side="right" *ngIf="config.filtering !== false && column.filtering !== false" class="column-filters" (toggled)="onDropdownToggled($event, column.name)" parentScrollSelector=".table-container" containerClass="table-dropdown">
                                    <button type="button" theme="icon" icon="filter" tooltipPosition="bottom" [tooltip]="labels.filters" [class.filtered]="column.filter || column.filter===false" (click)="focusInput()"></button>
                                    <!-- FILTER OPTIONS LIST -->
                                    <list *ngIf="(column?.options?.length || column?.originalOptions?.length) && column?.type !== 'date' && toggledDropdownMap[column.name]">
                                        <item class="filter-search">
                                            <div class="header">
                                                <span>{{ labels.filters }}</span>
                                                <button theme="dialogue" color="negative" icon="times" (click)="onFilterClear(column)" *ngIf="column.filter || column.filter===false">{{ labels.clear }}</button>
                                            </div>
                                            <input type="text" *ngIf="!!column.allowCustomTextOption" [attr.id]="column.name + '-input'" [novoTableFilter]="column" (onFilterChange)="onFilterKeywords($event)" [(ngModel)]="column.freetextFilter" keepFilterFocused #filterInput/>
                                        </item>
                                        <item [ngClass]="{ active: isFilterActive(column, option) }" *ngFor="let option of column.options" (click)="onFilterClick(column, option)" [attr.data-automation-id]="getOptionDataAutomationId(option)">
                                            <span>{{ option?.label || option }}</span> <i class="bhi-check" *ngIf="isFilterActive(column, option)"></i>
                                        </item>
                                    </list>
                                    <!-- FILTER SEARCH INPUT -->
                                    <list *ngIf="!(column?.options?.length || column?.originalOptions?.length) && toggledDropdownMap[column.name]">
                                        <item class="filter-search">
                                            <div class="header">
                                                <span>{{ labels.filters }}</span>
                                                <button theme="dialogue" color="negative" icon="times" (click)="onFilterClear(column)" *ngIf="column.filter">{{ labels.clear }}</button>
                                            </div>
                                            <input type="text" [attr.id]="column.name + '-input'" [novoTableFilter]="column" (onFilterChange)="onFilterChange($event)" [(ngModel)]="column.filter" keepFilterFocused #filterInput/>
                                        </item>
                                    </list>
                                    <!-- FILTER DATE OPTIONS -->
                                    <list *ngIf="column?.options?.length && column?.type === 'date' && toggledDropdownMap[column.name]">
                                        <item class="filter-search" *ngIf="!column.calenderShow">
                                            <div class="header">
                                                <span>{{ labels.filters }}</span>
                                                <button theme="dialogue" color="negative" icon="times" (click)="onFilterClear(column)" *ngIf="column.filter">{{ labels.clear }}</button>
                                            </div>
                                        </item>
                                        <item [ngClass]="{ active: isFilterActive(column, option) }" *ngFor="let option of column.options" (click)="onFilterClick(column, option)" [keepOpen]="option.range" [hidden]="column.calenderShow" [attr.data-automation-id]="(option?.label || option)">
                                            {{ option?.label || option }} <i class="bhi-check" *ngIf="isFilterActive(column, option)"></i>
                                        </item>
                                        <div class="calendar-container" [hidden]="!column.calenderShow">
                                            <div (click)="column.calenderShow=false"><i class="bhi-previous"></i>{{ labels.backToPresetFilters }}</div>
                                            <novo-date-picker #rangePicker (onSelect)="onCalenderSelect(column, $event)" [(ngModel)]="column.filter" range="true"></novo-date-picker>
                                        </div>
                                    </list>
                                </novo-dropdown>
                            </div>
                        </th>
                    </tr>
                </thead>
                <!-- TABLE DATA -->
                <tbody *ngIf="!dataProvider.isEmpty() || editing">
                    <tr class="table-selection-row" *ngIf="config.rowSelectionStyle === 'checkbox' && showSelectAllMessage && config.selectAllEnabled" data-automation-id="table-selection-row">
                        <td colspan="100%">
                            {{labels.selectedRecords(selected.length)}} <a (click)="selectAll(true)" data-automation-id="all-matching-records">{{labels.totalRecords(dataProvider.total)}}</a>
                        </td>
                    </tr>
                    <ng-template ngFor let-row="$implicit" let-i="index" [ngForOf]="rows">
                        <tr class="table-row" [ngClass]="row.customClass || ''" [id]="name + '-' + row[rowIdentifier]" [attr.data-automation-id]="row.id" (click)="rowClickHandler(row)" [class.active]="row.id === activeId">
                            <td class="row-actions" *ngIf="config.hasDetails">
                                <button theme="icon" icon="next" (click)="row._expanded=!row._expanded" *ngIf="!row._expanded"></button>
                                <button theme="icon" icon="sort-desc" (click)="row._expanded=!row._expanded" *ngIf="row._expanded"></button>
                            </td>
                            <td class="row-actions checkbox" *ngIf="config.rowSelectionStyle === 'checkbox'">
                                <novo-checkbox [(ngModel)]="row._selected" (ngModelChange)="rowSelectHandler(row)" data-automation-id="select-row-checkbox"></novo-checkbox>
                            </td>
                            <td *ngFor="let column of columns" [attr.data-automation-id]="column.id || column.name" [class.novo-form-row]="editable" [hidden]="isColumnHidden(column)">
                                <novo-table-cell *ngIf="row._editing && !row._editing[column.name]" [hasEditor]="editable" [column]="column" [row]="row" [form]="getRowControlForm(i)"></novo-table-cell>
                                <novo-control *ngIf="row._editing && row._editing[column.name]" condensed="true" [form]="getRowControlForm(i)" [control]="row.controls[column.name]"></novo-control>
                            </td>
                        </tr>
                        <tr class="details-row" *ngIf="config.hasDetails" [hidden]="!row._expanded" [attr.data-automation-id]="'details-row-'+row.id">
                            <td class="row-actions"></td>
                            <td [attr.colspan]="config.rowSelectionStyle === 'checkbox' ? (columns.length + 1) : columns.length">
                                <novo-row-details [data]="row" [renderer]="config.detailsRenderer"></novo-row-details>
                            </td>
                        </tr>
                    </ng-template>
                </tbody>
                <!-- NO TABLE DATA PLACEHOLDER -->
                <tbody class="table-message" *ngIf="dataProvider.isEmpty() && !dataProvider.isFiltered() && !editing" data-automation-id="empty-table">
                    <tr>
                        <td colspan="100%">
                            <div #emptymessage><ng-content select="[table-empty-message]"></ng-content></div>
                            <div class="table-empty-message" *ngIf="emptymessage.childNodes.length == 0">
                                <h4><i class="bhi-search-question"></i> {{ labels.emptyTableMessage }}</h4>
                            </div>
                        </td>
                    </tr>
                </tbody>
                <!-- NO MATCHING RECORDS -->
                <tbody class="table-message" *ngIf="dataProvider.isEmpty() && dataProvider.isFiltered()" data-automation-id="empty-table">
                    <tr>
                        <td colspan="100%">
                            <div #nomatchmessage><ng-content select="[table-no-matching-records-message]"></ng-content></div>
                            <div class="no-matching-records" *ngIf="nomatchmessage.childNodes.length == 0">
                                <h4><i class="bhi-search-question"></i> {{ labels.noMatchingRecordsMessage }}</h4>
                            </div>
                        </td>
                    </tr>
                </tbody>
                <!-- TABLE DATA ERROR PLACEHOLDER -->
                <tbody class="table-message" *ngIf="dataProvider.hasErrors()" data-automation-id="table-errors">
                    <tr>
                        <td colspan="100%">
                            <div #errormessage><ng-content select="[table-error-message]"></ng-content></div>
                            <div class="table-error-message" *ngIf="errormessage.childNodes.length == 0">
                                <h4><i class="bhi-caution"></i> {{ labels.erroredTableMessage }}</h4>
                            </div>
                        </td>
                    </tr>
                </tbody>
                <tfoot *ngIf="!config.footers" [ngClass]="dataProvider.length % 2 == 0 ? 'odd' : 'even'">
                    <tr>
                        <td colspan="100%">
                            <ng-content select="novo-table-footer"></ng-content>
                        </td>
                    </tr>
                </tfoot>
                <tfoot *ngFor="let footer of footers;let i = index;" class="novo-table-total-footer">
                    <tr>
                        <td *ngFor="let column of columns" [attr.data-automation-id]="(column.id || column.name) + '-total-' + i">{{ footer[column.name] }}</td>
                    </tr>
                </tfoot>
            </table>
        </novo-form>
    </div>
    `
            }] }
];
/** @nocollapse */
NovoTableElement.ctorParameters = () => [
    { type: NovoLabelService },
    { type: FormUtils },
    { type: _angular_forms__WEBPACK_IMPORTED_MODULE_1__["FormBuilder"] }
];
NovoTableElement.propDecorators = {
    filterInputs: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChildren"], args: ['filterInput', { read: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"] },] }],
    config: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    columns: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    theme: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    skipSortAndFilterClear: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    mode: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    editable: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    rowIdentifier: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    name: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    onRowClick: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    onRowSelect: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    onTableChange: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    rows: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    dataProvider: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }]
};
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: elements/toast/Toast.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NovoToastModule {
}
NovoToastModule.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                imports: [_angular_common__WEBPACK_IMPORTED_MODULE_6__["CommonModule"]],
                declarations: [NovoToastElement],
                exports: [NovoToastElement],
                entryComponents: [NovoToastElement],
            },] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: elements/table/Table.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NovoTableModule {
}
NovoTableModule.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                imports: [
                    _angular_common__WEBPACK_IMPORTED_MODULE_6__["CommonModule"],
                    _angular_forms__WEBPACK_IMPORTED_MODULE_1__["FormsModule"],
                    NovoFormModule,
                    NovoTableExtrasModule,
                    NovoToastModule,
                    NovoButtonModule,
                    NovoTooltipModule,
                    NovoDropdownModule,
                    NovoLoadingModule,
                    NovoDatePickerModule,
                    NovoFormExtrasModule,
                    angular2_text_mask__WEBPACK_IMPORTED_MODULE_20__["TextMaskModule"],
                ],
                declarations: [NovoTableElement],
                exports: [NovoTableElement],
            },] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: services/security/Security.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class Security {
    constructor() {
        this.credentials = [];
        this.change = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
    }
    /**
     * @param {?} data
     * @return {?}
     */
    grant(data) {
        /** @type {?} */
        const parsed = [];
        if (data instanceof Array) {
            for (const permission of data) {
                parsed.push(permission.replace(/\s/gi, ''));
            }
        }
        else if (typeof data === 'object') {
            for (const key in data) {
                if (data[key] instanceof Array) {
                    for (const permission of data[key]) {
                        parsed.push(`${key}.${permission}`);
                    }
                }
            }
        }
        this.credentials = [].concat(this.credentials, parsed);
        this.change.emit(this.credentials);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    has(value) {
        return this.credentials.indexOf(value) > -1;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    revoke(value) {
        /** @type {?} */
        const i = this.credentials.indexOf(value);
        this.credentials.splice(i, 1);
        this.change.emit(this.credentials);
    }
    /**
     * @return {?}
     */
    clear() {
        this.credentials = [];
        this.change.emit(this.credentials);
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    subscribe(fn) {
        this.change.subscribe(fn);
    }
    /**
     * @param {?} routes
     * @param {?} options
     * @return {?}
     */
    checkRoutes(routes, options) {
        /** @type {?} */
        const filtered = [];
        for (const route of routes) {
            if (route.entities && ~route.entities.indexOf(options.entityType)) {
                if (route.permissions instanceof Function) {
                    if (route.permissions(options, this)) {
                        filtered.push(route);
                    }
                }
                else if (route.permissions && route.permissions.length) {
                    if (route.permissions.every((/**
                     * @param {?} perm
                     * @return {?}
                     */
                    (perm) => this.has(perm)))) {
                        filtered.push(route);
                    }
                }
                else {
                    filtered.push(route);
                }
            }
        }
        return filtered;
    }
}
Security.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"] }
];
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: elements/unless/Unless.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class Unless {
    /**
     * @param {?} templateRef
     * @param {?} viewContainer
     * @param {?} security
     */
    constructor(templateRef, viewContainer, security) {
        this.templateRef = templateRef;
        this.viewContainer = viewContainer;
        this.security = security;
        this.permissions = '';
        this.isDisplayed = false;
        this.security.subscribe(this.check.bind(this));
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set bhUnless(value) {
        this.permissions = value || '';
        this.check();
    }
    /**
     * @return {?}
     */
    check() {
        /** @type {?} */
        let display = false;
        if (~this.permissions.indexOf('||')) {
            /** @type {?} */
            const ps = this.permissions.split('||');
            for (const p of ps) {
                if (this.security.has(p.trim())) {
                    display = true;
                }
            }
        }
        else {
            display = this.permissions.split('&&').every((/**
             * @param {?} p
             * @return {?}
             */
            (p) => this.security.has(p.trim())));
        }
        if (display) {
            if (!this.isDisplayed) {
                this.isDisplayed = true;
                this.viewContainer.createEmbeddedView(this.templateRef);
            }
        }
        else {
            this.isDisplayed = false;
            this.viewContainer.clear();
        }
    }
}
Unless.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{
                selector: '[bhUnless]',
            },] }
];
/** @nocollapse */
Unless.ctorParameters = () => [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["TemplateRef"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewContainerRef"] },
    { type: Security }
];
Unless.propDecorators = {
    bhUnless: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }]
};
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: elements/unless/Unless.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class UnlessModule {
}
UnlessModule.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                imports: [_angular_common__WEBPACK_IMPORTED_MODULE_6__["CommonModule"]],
                declarations: [Unless],
                exports: [Unless],
            },] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: elements/value/EntityList.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class EntityList {
    constructor() {
        this.baseEntity = '';
        this.ENTITY_SHORT_NAMES = {
            Lead: 'lead',
            ClientContact: 'contact',
            ClientContact1: 'contact',
            ClientContact2: 'contact',
            ClientContact3: 'contact',
            ClientContact4: 'contact',
            ClientContact5: 'contact',
            ClientCorporation: 'company',
            ClientCorporation1: 'company',
            ClientCorporation2: 'company',
            ClientCorporation3: 'company',
            ClientCorporation4: 'company',
            ClientCorporation5: 'company',
            Opportunity: 'opportunity',
            Task: 'task',
            Note: 'note',
            CorporateUser: 'user',
            Candidate: 'candidate',
            JobOrder: 'job',
            JobOrder1: 'job',
            JobOrder2: 'job',
            JobOrder3: 'job',
            JobOrder4: 'job',
            JobOrder5: 'job',
            Placement: 'placement',
            JobSubmission: 'submission',
            CandidateReference: 'references',
            DistributionList: 'distributionList',
            Appointment: 'appointment',
        };
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        // use a local copy of the meta to set the type to TO_ONE for proper display
        // without changing the input object
        this.metaDisplay = Helpers.deepClone(this.meta);
        this.metaDisplay.type = 'TO_ONE';
        this.baseEntity = this.meta.associatedEntity.entity;
        for (const entity of this.data.data) {
            entity.isLinkable = this.isLinkable(entity);
            entity.class = this.getClass(entity);
        }
    }
    /**
     * @param {?} entity
     * @return {?}
     */
    getClass(entity) {
        return this.ENTITY_SHORT_NAMES[entity.personSubtype];
    }
    /**
     * @param {?} entity
     * @return {?}
     */
    openLink(entity) {
        entity.openLink(entity);
    }
    /**
     * @param {?} entity
     * @return {?}
     */
    isLinkable(entity) {
        return entity.openLink;
    }
}
EntityList.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'novo-entity-list',
                changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectionStrategy"].OnPush,
                template: `
        <div *ngFor="let entity of data.data" class="entity">
            <a *ngIf="entity.isLinkable" (click)="openLink(entity)">
                <i class="bhi-circle {{ entity.class }}"></i>{{ entity | render : metaDisplay }}
            </a>
            <span *ngIf="!entity.isLinkable && entity.personSubtype">
                <i class="bhi-circle {{ entity.class }}"></i>{{ entity | render : metaDisplay }}
            </span>
            <span *ngIf="!entity.isLinkable && !entity.personSubtype">
                {{ entity | render : metaDisplay }}
            </span>
        </div>
    `
            }] }
];
/** @nocollapse */
EntityList.ctorParameters = () => [];
EntityList.propDecorators = {
    data: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    meta: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }]
};
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: elements/value/Render.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@classdesc
 * Renders data appropriately based on the data type found in Meta
 * All data types defined by bullhorn should be supported:
 *
 * - **String**: trims value and returns
 * - **Integer**: return value
 * - **Double**: return value fixed to 2 decimals
 * - **BigDecimal**: return value fixed to 2 decimals
 * - **Address**: only city and/or state returned
 * - **Address1**: only city and/or state returned
 * - **AddressWithoutCountry**: only city and/or state returned
 * - **Currency**: put a $ in front
 * - **Percentage**: divide by 100 fix to 2 decimals place and return
 * - **Options**: returns the appropriate 'label' for the 'value' from 'options'
 * - **Array**: returns list comma separated
 * - **DateTime**: formats the date
 * - **TimeStamp**: formats the date
 * - **ToOne**: return the entity specific name (ie. name, firstName lastName, title, ...)
 * - **ToMany**: return an array of the entity specific names (ie. name, firstName lastName, title, ...)
 *
 * \@example
 * ```
 * {{ expression | render:field }}
 * ```
 */
class RenderPipe {
    /**
     * @param {?} changeDetector
     * @param {?} sanitizationService
     * @param {?} labels
     */
    constructor(changeDetector, sanitizationService, labels) {
        this.changeDetector = changeDetector;
        this.sanitizationService = sanitizationService;
        this.labels = labels;
    }
    /**
     * @param {?} objectOne
     * @param {?} objectTwo
     * @return {?}
     */
    equals(objectOne, objectTwo) {
        if (objectOne === objectTwo) {
            return true;
        }
        if (objectOne === null || objectTwo === null) {
            return false;
        }
        if (objectOne !== objectOne && objectTwo !== objectTwo) {
            return true;
        }
        /** @type {?} */
        const t1 = typeof objectOne;
        /** @type {?} */
        const t2 = typeof objectTwo;
        /** @type {?} */
        let length;
        /** @type {?} */
        let key;
        /** @type {?} */
        let keySet;
        if (t1 === t2 && t1 === 'object') {
            if (Array.isArray(objectOne)) {
                if (!Array.isArray(objectTwo)) {
                    return false;
                }
                length = objectOne.length;
                if (length === objectTwo.length) {
                    for (key = 0; key < length; key++) {
                        if (!this.equals(objectOne[key], objectTwo[key])) {
                            return false;
                        }
                    }
                    return true;
                }
            }
            else {
                if (Array.isArray(objectTwo)) {
                    return false;
                }
                keySet = Object.create(null);
                for (key in objectOne) {
                    if (objectOne[key]) {
                        if (!this.equals(objectOne[key], objectTwo[key])) {
                            return false;
                        }
                        keySet[key] = true;
                    }
                }
                for (key in objectTwo) {
                    if (!(key in keySet) && typeof objectTwo[key] !== 'undefined') {
                        return false;
                    }
                }
                return true;
            }
        }
        return false;
    }
    /**
     * @param {?} item
     * @param {?} entity
     * @return {?}
     */
    getEntityLabel(item, entity) {
        switch (entity) {
            case 'CorporateUser':
            case 'ClientContact':
            case 'ClientContact1':
            case 'ClientContact2':
            case 'ClientContact3':
            case 'ClientContact4':
            case 'ClientContact5':
            case 'Lead':
            case 'Candidate':
            case 'Person':
                return `${item.firstName || ''} ${item.lastName || ''}`.trim();
            case 'ClientCorporation':
            case 'ClientCorporation1':
            case 'ClientCorporation2':
            case 'ClientCorporation3':
            case 'ClientCorporation4':
            case 'ClientCorporation5':
                return `${item.name || ''}`.trim();
            case 'JobOrder':
            case 'JobOrder1':
            case 'JobOrder2':
            case 'JobOrder3':
            case 'JobOrder4':
            case 'JobOrder5':
            case 'Opportunity':
                return `${item.title || ''}`.trim();
            case 'Placement':
                /** @type {?} */
                let label = '';
                if (item.candidate) {
                    label = `${item.candidate.firstName} ${item.candidate.lastName}`.trim();
                }
                if (item.jobOrder) {
                    label = `${label} - ${item.jobOrder.title}`.trim();
                }
                return label;
            default:
                return '';
        }
    }
    /**
     * Define the fields to set or retrieve for the given entity. Getter and Setter methods will automagically
     * be set up on the entity once the fields are defined.
     * @param {?} value
     * @param {?} args - fields can either be sent as a list of arguments or as an Array
     * @return {?} text
     */
    render(value, args) {
        /** @type {?} */
        let type = null;
        /** @type {?} */
        let text = value;
        // Handle when we don't have meta, but passing an entity
        if (value && value._subtype && !args) {
            return this.getEntityLabel(value, value._subtype);
        }
        // Stop logic for nulls
        if (value === undefined || value === null || !args) {
            return text;
        }
        if (args.formatter && typeof args.formatter === 'function') {
            return args.formatter(value, args);
        }
        // TODO move this to a service
        // Determine TYPE because its not just 1 value that determines this.
        if (args.type === 'TO_MANY') {
            type = 'ToMany';
        }
        else if (args.type === 'TO_ONE') {
            type = args.associatedEntity.entity;
        }
        else if (args.dataSpecialization === 'DATETIME') {
            type = 'DateTime';
        }
        else if (args.dataSpecialization === 'YEAR') {
            type = 'Year';
        }
        else if (args.dataSpecialization === 'DATE' && args.dataType === 'Date') {
            type = 'Date';
        }
        else if (args.dataType === 'Timestamp') {
            type = 'Timestamp';
        }
        else if (['mobile', 'phone', 'phone1', 'phone2', 'phone3', 'workPhone'].indexOf(args.name) > -1) {
            type = 'Phone';
        }
        else if (args.name && args.name.substring(0, 5) === 'email') {
            type = 'Email';
        }
        else if ((args.name && args.name === 'address.countryID') || args.optionsType === 'Country') {
            type = 'Country';
        }
        else if (args.optionsType === 'SkillText') {
            type = 'SkillText';
        }
        else if (args.options || args.inputType === 'SELECT' || args.inputType === 'CHECKBOX') {
            type = 'Options';
        }
        else if (['MONEY', 'PERCENTAGE', 'HTML', 'SSN'].indexOf(args.dataSpecialization) > -1) {
            type = this.capitalize(args.dataSpecialization.toLowerCase());
        }
        else {
            type = args.dataType || 'default';
        }
        // Transform data here
        try {
            switch (type) {
                case 'Address':
                case 'Address1':
                case 'AddressWithoutCountry':
                case 'SecondaryAddress':
                case 'BillingAddress':
                    /** @type {?} */
                    const country = findByCountryId(Number(value.countryName));
                    text = '';
                    if (value.address1 || value.address2) {
                        text += `${value.address1 || ''} ${value.address2 || ''}<br />\n`;
                    }
                    text += `${value.city || ''} ${value.state || ''} ${value.zip || ''}${value.city || value.state || value.zip ? '<br />\n' : ''}`;
                    text += `${country ? country.name : value.countryName || ''}${country || value.countryName ? '<br />\n' : ''}`;
                    text = this.sanitizationService.bypassSecurityTrustHtml(text.trim());
                    break;
                case 'DateTime':
                case 'Timestamp':
                    text = this.labels.formatDateShort(value);
                    break;
                case 'Date':
                    text = this.labels.formatDate(new Date(value));
                    break;
                case 'Year':
                    text = new Date(value).getFullYear();
                    break;
                case 'Phone':
                case 'Email':
                    text = value;
                    break;
                case 'Money':
                    text = this.labels.formatCurrency(value);
                    break;
                case 'Percentage':
                    text = this.labels.formatNumber(parseFloat(value).toString(), { style: 'percent', minimumFractionDigits: 2 });
                    break;
                case 'Double':
                case 'BigDecimal':
                    text = this.labels.formatNumber(value, { minimumFractionDigits: this.getNumberDecimalPlaces(value) });
                    break;
                case 'Integer':
                    text = value;
                    break;
                case 'BusinessSector':
                case 'Category':
                case 'Certification':
                case 'ClientCorporation':
                case 'CorporationDepartment':
                case 'DistributionList':
                case 'Skill':
                case 'Tearsheet':
                case 'Specialty':
                    text = value.label || value.name || '';
                    break;
                case 'SkillText':
                    text = Array.isArray(value) ? value.join(', ') : value;
                    break;
                case 'Lead':
                case 'Candidate':
                case 'ClientContact':
                case 'CorporateUser':
                case 'Person':
                    text = value.label || `${value.firstName || ''} ${value.lastName || ''}`;
                    break;
                case 'Opportunity':
                case 'JobOrder':
                    text = value.label || value.title || '';
                    break;
                case 'Placement':
                    if (value.candidate) {
                        text = `${value.candidate.firstName || ''} ${value.candidate.lastName || ''}`;
                    }
                    if (value.jobOrder) {
                        text = value.candidate ? `${text} - ${value.jobOrder.title || ''}` : `${value.jobOrder.title || ''}`;
                    }
                    break;
                case 'JobSubmission':
                    text =
                        value.label ||
                            `${value.jobOrder ? `${value.jobOrder.title} - ` : ''} ${value.candidate ? value.candidate.firstName : ''} ${value.candidate ? value.candidate.lastName : ''}`;
                    break;
                case 'WorkersCompensationRate':
                    text = `${value.compensation ? `${value.compensation.code} - ` : ''} ${value.compensation ? value.compensation.name : ''}`;
                    break;
                case 'Options':
                    text = this.options(value, args.options, args);
                    break;
                case 'ToMany':
                    if (['Candidate', 'CorporateUser', 'Person'].indexOf(args.associatedEntity.entity) > -1) {
                        text = this.concat(value.data, 'firstName', 'lastName');
                        if (value.data.length < value.total) {
                            text = text + ', ' + this.labels.getToManyPlusMore({ quantity: value.total - value.data.length });
                        }
                    }
                    else if (['Category', 'BusinessSector', 'Skill', 'Specialty', 'ClientCorporation', 'CorporationDepartment'].indexOf(args.associatedEntity.entity) > -1) {
                        text = this.concat(value.data, 'name');
                        if (value.data.length < value.total) {
                            text = text + ', ' + this.labels.getToManyPlusMore({ quantity: value.total - value.data.length });
                        }
                    }
                    else if (args.associatedEntity.entity === 'MailListPushHistoryDetail') {
                        text = this.concat(value.data, 'externalListName');
                    }
                    else {
                        text = `${value.total || ''}`;
                    }
                    break;
                case 'Country':
                    /** @type {?} */
                    const countryObj = findByCountryId(Number(value));
                    text = countryObj ? countryObj.name : value;
                    break;
                case 'Html':
                    if (Array.isArray(value)) {
                        value = value.join(' ');
                    }
                    if (typeof text === 'string') {
                        text = this.sanitizationService.bypassSecurityTrustHtml(value.replace(/\<a/gi, '<a target="_blank"'));
                    }
                    break;
                case 'CandidateComment':
                    text = value.comments ? `${this.labels.formatDateShort(value.dateLastModified)} (${value.name}) - ${value.comments}` : '';
                    break;
                default:
                    text = value.trim ? value.trim() : value;
                    break;
            }
            return text;
        }
        catch (e) {
            console.error(`WARNING: There was a problem rendering the value of the field: ${args.label}. Please check the configuration`);
            console.error(e);
            return text;
        }
    }
    /**
     * @param {?} value
     * @param {?} args
     * @return {?}
     */
    updateValue(value, args) {
        this.value = this.render(value, args);
        this.changeDetector.markForCheck();
    }
    /**
     * @param {?=} value
     * @param {?=} args
     * @return {?}
     */
    transform(value, args) {
        if (value === undefined || value === null) {
            return '';
        }
        if (this.equals(value, this.lastValue) && this.equals(args, this.lastArgs)) {
            return this.value;
        }
        this.lastValue = value;
        this.lastArgs = args;
        this.updateValue(this.lastValue, this.lastArgs);
        return this.value;
    }
    /**
     * Simple function concat a list of fields from a list of objects
     * @param {?} list - the list of values to use
     * @param {...?} fields - list of fields to extract
     * @return {?}
     */
    concat(list, ...fields) {
        /** @type {?} */
        const data = [];
        for (const item of list) {
            /** @type {?} */
            const label = [];
            for (const field of fields) {
                label.push(`${item[field]}`);
            }
            data.push(label.join(' '));
        }
        return data.join(', ');
    }
    /**
     * Simple function to look up the **label** to display from options
     * @param {?} value - the value to find
     * @param {?} list - list of options (label/value pairs)
     * @param {?} args
     * @return {?}
     */
    options(value, list, args) {
        if (!Array.isArray(value)) {
            value = [value];
        }
        try {
            return value.map((/**
             * @param {?} item
             * @return {?}
             */
            (item) => {
                for (const option of list) {
                    if (option.value === item) {
                        return option.label;
                    }
                }
                return item;
            }));
        }
        catch (e) {
            if (!args.optionsType) {
                throw Error(e);
            }
            return value;
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    getNumberDecimalPlaces(value) {
        /** @type {?} */
        let decimalPlaces;
        if (value) {
            /** @type {?} */
            const numberString = parseFloat(value).toString();
            /** @type {?} */
            const decimalPlace = (numberString || '').split('.')[1] || '';
            decimalPlaces = decimalPlace.length;
        }
        return decimalPlaces || 1;
    }
    /**
     * Capitalizes the first letter
     * @param {?} value
     * @return {?}
     */
    capitalize(value) {
        return value.charAt(0).toUpperCase() + value.slice(1);
    }
}
RenderPipe.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Pipe"], args: [{
                name: 'render',
                pure: false,
            },] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"] }
];
/** @nocollapse */
RenderPipe.ctorParameters = () => [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectorRef"] },
    { type: _angular_platform_browser__WEBPACK_IMPORTED_MODULE_15__["DomSanitizer"] },
    { type: NovoLabelService }
];
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: elements/value/Value.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {number} */
const NOVO_VALUE_TYPE = {
    DEFAULT: 0,
    ENTITY_LIST: 1,
    LINK: 2,
    INTERNAL_LINK: 3,
};
NOVO_VALUE_TYPE[NOVO_VALUE_TYPE.DEFAULT] = 'DEFAULT';
NOVO_VALUE_TYPE[NOVO_VALUE_TYPE.ENTITY_LIST] = 'ENTITY_LIST';
NOVO_VALUE_TYPE[NOVO_VALUE_TYPE.LINK] = 'LINK';
NOVO_VALUE_TYPE[NOVO_VALUE_TYPE.INTERNAL_LINK] = 'INTERNAL_LINK';
/** @enum {number} */
const NOVO_VALUE_THEME = {
    DEFAULT: 0,
    MOBILE: 1,
};
NOVO_VALUE_THEME[NOVO_VALUE_THEME.DEFAULT] = 'DEFAULT';
NOVO_VALUE_THEME[NOVO_VALUE_THEME.MOBILE] = 'MOBILE';
class NovoValueElement {
    constructor() {
        // TODO use interface
        this.meta = { type: 'SCALAR', label: '' }; // TODO use interface
        // TODO use interface
        this.theme = NOVO_VALUE_THEME.DEFAULT;
        this.NOVO_VALUE_TYPE = NOVO_VALUE_TYPE;
        this.NOVO_VALUE_THEME = NOVO_VALUE_THEME;
        this.customClass = '';
    }
    /**
     * @param {?} lbl
     * @return {?}
     */
    set label(lbl) {
        this.meta.label = lbl;
    }
    /**
     * @return {?}
     */
    get label() {
        return this.meta.label;
    }
    /**
     * @param {?} typ
     * @return {?}
     */
    set type(typ) {
        this.meta.type = typ;
    }
    /**
     * @return {?}
     */
    get type() {
        return this.meta.type;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (Helpers.isEmpty(this.meta)) {
            this.meta = {
                label: '',
            };
        }
    }
    /**
     * @return {?}
     */
    get isMobile() {
        return this.theme === NOVO_VALUE_THEME.MOBILE;
    }
    /**
     * @param {?} icon
     * @return {?}
     */
    iconClass(icon) {
        /** @type {?} */
        let iconClass = '';
        if (icon && icon.iconCls) {
            iconClass = `bhi-${icon.iconCls} actions`;
            if (icon.onIconClick) {
                iconClass = `${iconClass} clickable`;
            }
            return iconClass;
        }
        return iconClass;
    }
    /**
     * @return {?}
     */
    get isDefault() {
        return true;
    }
    /**
     * @return {?}
     */
    get showLabel() {
        return (this._type === NOVO_VALUE_TYPE.INTERNAL_LINK || this._type === NOVO_VALUE_TYPE.LINK || this._type === NOVO_VALUE_TYPE.ENTITY_LIST);
    }
    /**
     * @return {?}
     */
    get showIcon() {
        return this.meta && this.meta.icons && this.meta.icons.length && !Helpers.isEmpty(this.data);
    }
    /**
     * @param {?} icon
     * @return {?}
     */
    onValueClick(icon) {
        if (icon.onIconClick && typeof icon.onIconClick === 'function') {
            icon.onIconClick(this.data, this.meta);
        }
    }
    /**
     * @return {?}
     */
    openLink() {
        if (this.meta && this.meta.openLink && typeof this.meta.openLink === 'function') {
            this.meta.openLink(this.data, this.meta);
        }
    }
    /**
     * @param {?=} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (this.meta && this.isLinkField(this.meta, this.data)) {
            this._type = NOVO_VALUE_TYPE.LINK;
            // Make sure the value has a protocol, otherwise the URL will be relative
            /** @type {?} */
            const hasProtocol = new RegExp('^(http|https)://', 'i');
            if (!hasProtocol.test(this.data)) {
                this.url = `http://${this.data}`;
            }
            else {
                this.url = this.data;
            }
        }
        else if (this.isEntityList(this.meta.type)) {
            this._type = NOVO_VALUE_TYPE.ENTITY_LIST;
        }
        else if (this.isHTMLField(this.meta)) {
            this.customClass = this.meta.customClass ? this.meta.customClass : '';
            if (this.meta.stripHTML && this.data && this.data.replace) {
                this.data = this.data.replace(/<(?!style|\/style).+?>/gi, '').trim();
            }
        }
        else if (this.meta && this.meta.associatedEntity) {
            switch (this.meta.associatedEntity.entity) {
                case 'ClientCorporation':
                case 'ClientContact':
                case 'Candidate':
                case 'Opportunity':
                case 'JobOrder':
                case 'Placement':
                case 'Lead':
                    this._type = NOVO_VALUE_TYPE.INTERNAL_LINK;
                    break;
                default:
                    break;
            }
        }
    }
    /**
     * @param {?} field
     * @param {?} data
     * @return {?}
     */
    isLinkField(field, data) {
        /** @type {?} */
        const linkFields = ['companyURL', 'clientCorporationCompanyURL'];
        /** @type {?} */
        const regex = new RegExp('^(https?://(?:www.|(?!www))[^s.]+.[^s]{2,}|www.[^s]+.[^s]{2,})$', 'gi');
        /** @type {?} */
        const isURL = Helpers.isString(data) && regex.exec(data.trim());
        return linkFields.indexOf(field.name) > -1 || !!isURL || field.type === NOVO_VALUE_TYPE.LINK;
    }
    /**
     * @param {?} type
     * @return {?}
     */
    isEntityList(type) {
        return type === 'TO_MANY';
    }
    /**
     * @param {?} meta
     * @return {?}
     */
    isHTMLField(meta) {
        return meta.dataSpecialization === 'HTML' || meta.inputType === 'TEXTAREA';
    }
}
NovoValueElement.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'novo-value',
                template: `
      <ng-container [ngSwitch]="_type">
          <div class="value-outer" *ngIf="showLabel">
              <label>{{ meta.label }}</label>
              <span class="value">
                <i *ngIf="meta.showEntityIcon" class="bhi-circle {{meta.entityIconClass}}"></i>
                <a *ngSwitchCase="NOVO_VALUE_TYPE.INTERNAL_LINK" (click)="openLink()" [innerHTML]="data | render : meta"></a>
                <a *ngSwitchCase="NOVO_VALUE_TYPE.LINK" class="value" [href]="url" target="_blank" [innerHTML]="data | render : meta"></a>
              </span>
              <novo-entity-list *ngSwitchCase="NOVO_VALUE_TYPE.ENTITY_LIST" [data]='data' [meta]="meta"></novo-entity-list>
          </div>
          <div *ngSwitchDefault class="value-outer" [ngClass]="customClass">
              <label>{{ meta.label }}</label>
              <div *ngIf="isDefault" class="value" [innerHTML]="data | render : meta"></div>
          </div>
          <div class="actions" *ngIf="showIcon">
              <i *ngFor="let icon of meta.icons" [class]="iconClass(icon)" (click)="onValueClick(icon)"></i>
          </div>
      </ng-container>
    `
            }] }
];
NovoValueElement.propDecorators = {
    data: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    meta: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    theme: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    label: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    type: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    isMobile: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostBinding"], args: ['class.mobile',] }]
};
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: elements/value/Value.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NovoValueModule {
}
NovoValueModule.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                imports: [_angular_common__WEBPACK_IMPORTED_MODULE_6__["CommonModule"]],
                declarations: [NovoValueElement, RenderPipe, EntityList],
                exports: [NovoValueElement, RenderPipe, EntityList],
            },] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: novo-elements.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NovoElementsModule {
}
NovoElementsModule.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                imports: [_angular_forms__WEBPACK_IMPORTED_MODULE_1__["ReactiveFormsModule"]],
                exports: [
                    NovoPipesModule,
                    NovoButtonModule,
                    NovoLoadingModule,
                    NovoCardModule,
                    NovoCalendarModule,
                    NovoToastModule,
                    NovoTooltipModule,
                    NovoHeaderModule,
                    NovoTabModule,
                    NovoTilesModule,
                    NovoModalModule,
                    NovoQuickNoteModule,
                    NovoRadioModule,
                    NovoDropdownModule,
                    NovoSelectModule,
                    NovoListModule,
                    NovoSwitchModule,
                    NovoDragulaModule,
                    NovoSliderModule,
                    NovoPickerModule,
                    NovoChipsModule,
                    NovoDatePickerModule,
                    NovoTimePickerModule,
                    NovoDateTimePickerModule,
                    NovoNovoCKEditorModule,
                    NovoTipWellModule,
                    NovoSimpleTableModule,
                    NovoTableModule,
                    NovoTableExtrasModule,
                    NovoFormModule,
                    NovoFormExtrasModule,
                    NovoCategoryDropdownModule,
                    NovoMultiPickerModule,
                    NovoPopOverModule,
                    NovoDataTableModule,
                    NovoSearchBoxModule,
                    NovoOverlayModule,
                    GooglePlacesModule,
                    NovoValueModule,
                    NovoAceEditorModule,
                    NovoIconModule,
                    NovoExpansionModule,
                    UnlessModule,
                    NovoCommonModule,
                    NovoStepperModule,
                    _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_13__["ScrollingModule"],
                    NovoTabbedGroupPickerModule,
                ],
                providers: [
                    { provide: ComponentUtils, useClass: ComponentUtils },
                    { provide: DateFormatService, useClass: DateFormatService },
                    { provide: NovoLabelService, useClass: NovoLabelService },
                    { provide: NovoDragulaService, useClass: NovoDragulaService },
                    { provide: GooglePlacesService, useClass: GooglePlacesService },
                    { provide: GlobalRef, useClass: BrowserGlobalRef },
                    { provide: LocalStorageService, useClass: LocalStorageService },
                    { provide: OptionsService, useClass: OptionsService },
                    { provide: FormUtils, useClass: FormUtils },
                ],
            },] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: novo-elements.providers.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const NOVO_ELEMENTS_PROVIDERS = [
    { provide: NovoDragulaService, useClass: NovoDragulaService },
    { provide: NovoModalRef, useClass: NovoModalRef },
    { provide: NovoModalService, useClass: NovoModalService },
    { provide: GooglePlacesService, useClass: GooglePlacesService },
    { provide: NovoToastService, useClass: NovoToastService },
    { provide: ComponentUtils, useClass: ComponentUtils },
    { provide: GlobalRef, useClass: BrowserGlobalRef },
    { provide: LocalStorageService, useClass: LocalStorageService },
    { provide: OptionsService, useClass: OptionsService },
    FieldInteractionApi,
    DateFormatService,
    Security,
    NovoTemplateService,
];
class NovoElementProviders {
    /**
     * @return {?}
     */
    static forRoot() {
        return {
            ngModule: NovoElementProviders,
            providers: [...NOVO_ELEMENTS_PROVIDERS],
        };
    }
    /**
     * @return {?}
     */
    static forChild() {
        return {
            ngModule: NovoElementProviders,
        };
    }
}
NovoElementProviders.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                imports: [],
            },] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: utils/app-bridge/AppBridge.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {number} */
const AppBridgeHandler = {
    HTTP: 0,
    OPEN: 1,
    OPEN_LIST: 2,
    CLOSE: 3,
    REFRESH: 4,
    PIN: 5,
    REGISTER: 6,
    UPDATE: 7,
    REQUEST_DATA: 8,
    CALLBACK: 9,
};
AppBridgeHandler[AppBridgeHandler.HTTP] = 'HTTP';
AppBridgeHandler[AppBridgeHandler.OPEN] = 'OPEN';
AppBridgeHandler[AppBridgeHandler.OPEN_LIST] = 'OPEN_LIST';
AppBridgeHandler[AppBridgeHandler.CLOSE] = 'CLOSE';
AppBridgeHandler[AppBridgeHandler.REFRESH] = 'REFRESH';
AppBridgeHandler[AppBridgeHandler.PIN] = 'PIN';
AppBridgeHandler[AppBridgeHandler.REGISTER] = 'REGISTER';
AppBridgeHandler[AppBridgeHandler.UPDATE] = 'UPDATE';
AppBridgeHandler[AppBridgeHandler.REQUEST_DATA] = 'REQUEST_DATA';
AppBridgeHandler[AppBridgeHandler.CALLBACK] = 'CALLBACK';
/**
 * @record
 */
function IAppBridgeOpenEvent() { }
if (false) {}
/**
 * @record
 */
function IAppBridgeOpenListEvent() { }
if (false) {}
/**
 * @record
 */
function IAppBridgeRequestDataEvent() { }
if (false) {}
/** @type {?} */
const HTTP_VERBS = {
    GET: 'get',
    POST: 'post',
    PUT: 'put',
    DELETE: 'delete',
};
/** @type {?} */
const MESSAGE_TYPES = {
    REGISTER: 'register',
    OPEN: 'open',
    OPEN_LIST: 'openList',
    CLOSE: 'close',
    REFRESH: 'refresh',
    PIN: 'pin',
    UPDATE: 'update',
    HTTP_GET: 'httpGET',
    HTTP_POST: 'httpPOST',
    HTTP_PUT: 'httpPUT',
    HTTP_DELETE: 'httpDELETE',
    CUSTOM_EVENT: 'customEvent',
    REQUEST_DATA: 'requestData',
    CALLBACK: 'callback',
};
class AppBridgeService {
    /**
     * @param {?} name
     * @return {?}
     */
    create(name) {
        return new AppBridge(name);
    }
}
class DevAppBridgeService {
    /**
     * @param {?} http
     */
    constructor(http) {
        this.http = http;
    }
    /**
     * @param {?} name
     * @return {?}
     */
    create(name) {
        return new DevAppBridge(name, this.http);
    }
}
if (false) {}
class AppBridge {
    // Type?
    /**
     * @param {?=} traceName
     */
    constructor(traceName = 'AppBridge') {
        this.id = `${Date.now()}`;
        this._registeredFrames = [];
        this._handlers = {};
        this._tracing = false;
        this._eventListeners = {};
        this.traceName = traceName;
        if (postRobot) {
            postRobot.CONFIG.LOG_LEVEL = 'error';
            try {
                this._setupHandlers();
            }
            catch (error) {
                // No op
            }
        }
    }
    /**
     * @param {?} tracing
     * @return {?}
     */
    set tracing(tracing) {
        this._tracing = tracing;
    }
    /**
     * @param {?} type
     * @param {?} handler
     * @return {?}
     */
    handle(type, handler) {
        this._handlers[type] = handler;
    }
    /**
     * @private
     * @param {?} eventType
     * @param {?} event
     * @return {?}
     */
    _trace(eventType, event) {
        if (this._tracing) {
            console.log(`[${this.traceName || this.id}] "${eventType}"`, event); // tslint:disable-line
        }
    }
    /**
     * @protected
     * @return {?}
     */
    _setupHandlers() {
        // Register
        postRobot.on(MESSAGE_TYPES.REGISTER, (/**
         * @param {?} event
         * @return {?}
         */
        (event) => {
            this._trace(MESSAGE_TYPES.REGISTER, event);
            this._registeredFrames.push(event);
            return this.register(event.data).then((/**
             * @param {?} windowName
             * @return {?}
             */
            (windowName) => {
                return { windowName };
            }));
        }));
        // Update
        postRobot.on(MESSAGE_TYPES.UPDATE, (/**
         * @param {?} event
         * @return {?}
         */
        (event) => {
            this._trace(MESSAGE_TYPES.UPDATE, event);
            return this.update(event.data).then((/**
             * @param {?} success
             * @return {?}
             */
            (success) => {
                return { success };
            }));
        }));
        // Open
        postRobot.on(MESSAGE_TYPES.OPEN, (/**
         * @param {?} event
         * @return {?}
         */
        (event) => {
            this._trace(MESSAGE_TYPES.OPEN, event);
            return this.open(event.data).then((/**
             * @param {?} success
             * @return {?}
             */
            (success) => {
                return { success };
            }));
        }));
        postRobot.on(MESSAGE_TYPES.OPEN_LIST, (/**
         * @param {?} event
         * @return {?}
         */
        (event) => {
            this._trace(MESSAGE_TYPES.OPEN_LIST, event);
            return this.openList(event.data).then((/**
             * @param {?} success
             * @return {?}
             */
            (success) => {
                return { success };
            }));
        }));
        // Close
        postRobot.on(MESSAGE_TYPES.CLOSE, (/**
         * @param {?} event
         * @return {?}
         */
        (event) => {
            this._trace(MESSAGE_TYPES.CLOSE, event);
            /** @type {?} */
            const index = this._registeredFrames.findIndex((/**
             * @param {?} frame
             * @return {?}
             */
            (frame) => frame.data.id === event.data.id));
            if (index !== -1) {
                this._registeredFrames.splice(index, 1);
            }
            return this.close(event.data).then((/**
             * @param {?} success
             * @return {?}
             */
            (success) => {
                return { success };
            }));
        }));
        // Refresh
        postRobot.on(MESSAGE_TYPES.REFRESH, (/**
         * @param {?} event
         * @return {?}
         */
        (event) => {
            this._trace(MESSAGE_TYPES.REFRESH, event);
            return this.refresh(event.data).then((/**
             * @param {?} success
             * @return {?}
             */
            (success) => {
                return { success };
            }));
        }));
        // PIN
        postRobot.on(MESSAGE_TYPES.PIN, (/**
         * @param {?} event
         * @return {?}
         */
        (event) => {
            this._trace(MESSAGE_TYPES.PIN, event);
            return this.pin(event.data).then((/**
             * @param {?} success
             * @return {?}
             */
            (success) => {
                return { success };
            }));
        }));
        // REQUEST_DATA
        postRobot.on(MESSAGE_TYPES.REQUEST_DATA, (/**
         * @param {?} event
         * @return {?}
         */
        (event) => {
            this._trace(MESSAGE_TYPES.REQUEST_DATA, event);
            return this.requestData(event.data).then((/**
             * @param {?} result
             * @return {?}
             */
            (result) => {
                return { data: result.data, error: result.error };
            }));
        }));
        // CALLBACKS
        postRobot.on(MESSAGE_TYPES.CALLBACK, (/**
         * @param {?} event
         * @return {?}
         */
        (event) => {
            this._trace(MESSAGE_TYPES.CALLBACK, event);
            return this.callback(event.data).then((/**
             * @param {?} success
             * @return {?}
             */
            (success) => {
                return { success };
            }));
        }));
        // HTTP-GET
        postRobot.on(MESSAGE_TYPES.HTTP_GET, (/**
         * @param {?} event
         * @return {?}
         */
        (event) => {
            this._trace(MESSAGE_TYPES.HTTP_GET, event);
            return this.httpGET(event.data.relativeURL).then((/**
             * @param {?} result
             * @return {?}
             */
            (result) => {
                return { data: result.data, error: result.error };
            }));
        }));
        // HTTP-POST
        postRobot.on(MESSAGE_TYPES.HTTP_POST, (/**
         * @param {?} event
         * @return {?}
         */
        (event) => {
            this._trace(MESSAGE_TYPES.HTTP_POST, event);
            return this.httpPOST(event.data.relativeURL, event.data.data).then((/**
             * @param {?} result
             * @return {?}
             */
            (result) => {
                return { data: result.data, error: result.error };
            }));
        }));
        // HTTP-PUT
        postRobot.on(MESSAGE_TYPES.HTTP_PUT, (/**
         * @param {?} event
         * @return {?}
         */
        (event) => {
            this._trace(MESSAGE_TYPES.HTTP_PUT, event);
            return this.httpPUT(event.data.relativeURL, event.data.data).then((/**
             * @param {?} result
             * @return {?}
             */
            (result) => {
                return { data: result.data, error: result.error };
            }));
        }));
        // HTTP-DELETE
        postRobot.on(MESSAGE_TYPES.HTTP_DELETE, (/**
         * @param {?} event
         * @return {?}
         */
        (event) => {
            this._trace(MESSAGE_TYPES.HTTP_DELETE, event);
            return this.httpDELETE(event.data.relativeURL).then((/**
             * @param {?} result
             * @return {?}
             */
            (result) => {
                return { data: result.data, error: result.error };
            }));
        }));
        // Custom Events
        postRobot.on(MESSAGE_TYPES.CUSTOM_EVENT, (/**
         * @param {?} event
         * @return {?}
         */
        (event) => {
            this._trace(MESSAGE_TYPES.CUSTOM_EVENT, event);
            if (this._eventListeners[event.data.event]) {
                this._eventListeners[event.data.event].forEach((/**
                 * @param {?} listener
                 * @return {?}
                 */
                (listener) => {
                    listener(event.data.data);
                }));
            }
            if (this._registeredFrames.length > 0) {
                this._registeredFrames.forEach((/**
                 * @param {?} frame
                 * @return {?}
                 */
                (frame) => {
                    postRobot.send(frame.source, MESSAGE_TYPES.CUSTOM_EVENT, event.data);
                }));
            }
        }));
    }
    /**
     * Fires or responds to an open event
     * @param {?} packet any - packet of data to send with the open event
     * @return {?}
     */
    open(packet) {
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        (resolve, reject) => {
            if (this._handlers[AppBridgeHandler.OPEN]) {
                this._handlers[AppBridgeHandler.OPEN](packet, (/**
                 * @param {?} success
                 * @return {?}
                 */
                (success) => {
                    if (success) {
                        resolve(true);
                    }
                    else {
                        reject(false);
                    }
                }));
            }
            else {
                Object.assign(packet, { id: this.id, windowName: this.windowName });
                postRobot
                    .sendToParent(MESSAGE_TYPES.OPEN, packet)
                    .then((/**
                 * @param {?} event
                 * @return {?}
                 */
                (event) => {
                    this._trace(`${MESSAGE_TYPES.OPEN} (callback)`, event);
                    if (event.data) {
                        resolve(true);
                    }
                    else {
                        reject(false);
                    }
                }))
                    .catch((/**
                 * @param {?} err
                 * @return {?}
                 */
                (err) => {
                    reject(false);
                }));
            }
        }));
    }
    /**
     * Fires or responds to an openList event
     * @param {?} packet any - packet of data to send with the open event
     * @return {?}
     */
    openList(packet) {
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        (resolve, reject) => {
            if (this._handlers[AppBridgeHandler.OPEN_LIST]) {
                this._handlers[AppBridgeHandler.OPEN_LIST](packet, (/**
                 * @param {?} success
                 * @return {?}
                 */
                (success) => {
                    if (success) {
                        resolve(true);
                    }
                    else {
                        reject(false);
                    }
                }));
            }
            else {
                /** @type {?} */
                const openListPacket = {};
                Object.assign(openListPacket, { type: 'List', entityType: packet.type, keywords: packet.keywords, criteria: packet.criteria });
                postRobot
                    .sendToParent(MESSAGE_TYPES.OPEN_LIST, packet)
                    .then((/**
                 * @param {?} event
                 * @return {?}
                 */
                (event) => {
                    this._trace(`${MESSAGE_TYPES.OPEN_LIST} (callback)`, event);
                    if (event.data) {
                        resolve(true);
                    }
                    else {
                        reject(false);
                    }
                }))
                    .catch((/**
                 * @param {?} err
                 * @return {?}
                 */
                (err) => {
                    reject(false);
                }));
            }
        }));
    }
    /**
     * Fires or responds to an close event
     * @param {?} packet any - packet of data to send with the close event
     * @return {?}
     */
    update(packet) {
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        (resolve, reject) => {
            if (this._handlers[AppBridgeHandler.UPDATE]) {
                this._handlers[AppBridgeHandler.UPDATE](packet, (/**
                 * @param {?} success
                 * @return {?}
                 */
                (success) => {
                    if (success) {
                        resolve(true);
                    }
                    else {
                        reject(false);
                    }
                }));
            }
            else {
                Object.assign(packet, { id: this.id, windowName: this.windowName });
                postRobot
                    .sendToParent(MESSAGE_TYPES.UPDATE, packet)
                    .then((/**
                 * @param {?} event
                 * @return {?}
                 */
                (event) => {
                    this._trace(`${MESSAGE_TYPES.UPDATE} (callback)`, event);
                    if (event.data) {
                        resolve(true);
                    }
                    else {
                        reject(false);
                    }
                }))
                    .catch((/**
                 * @param {?} err
                 * @return {?}
                 */
                (err) => {
                    reject(false);
                }));
            }
        }));
    }
    /**
     * Fires or responds to an close event
     * @param {?=} packet
     * @return {?}
     */
    close(packet) {
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        (resolve, reject) => {
            if (this._handlers[AppBridgeHandler.CLOSE]) {
                this._handlers[AppBridgeHandler.CLOSE](packet, (/**
                 * @param {?} success
                 * @return {?}
                 */
                (success) => {
                    if (success) {
                        resolve(true);
                    }
                    else {
                        reject(false);
                    }
                }));
            }
            else {
                if (packet) {
                    console.info('[AppBridge] - close(packet) is deprecated! Please just use close()!'); // tslint:disable-line
                }
                /** @type {?} */
                const realPacket = { id: this.id, windowName: this.windowName };
                postRobot
                    .sendToParent(MESSAGE_TYPES.CLOSE, realPacket)
                    .then((/**
                 * @param {?} event
                 * @return {?}
                 */
                (event) => {
                    this._trace(`${MESSAGE_TYPES.CLOSE} (callback)`, event);
                    if (event.data) {
                        resolve(true);
                    }
                    else {
                        reject(false);
                    }
                }))
                    .catch((/**
                 * @param {?} err
                 * @return {?}
                 */
                (err) => {
                    reject(false);
                }));
            }
        }));
    }
    /**
     * Fires or responds to an close event
     * @param {?=} packet
     * @return {?}
     */
    refresh(packet) {
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        (resolve, reject) => {
            if (this._handlers[AppBridgeHandler.REFRESH]) {
                this._handlers[AppBridgeHandler.REFRESH](packet, (/**
                 * @param {?} success
                 * @return {?}
                 */
                (success) => {
                    if (success) {
                        resolve(true);
                    }
                    else {
                        reject(false);
                    }
                }));
            }
            else {
                if (packet) {
                    console.info('[AppBridge] - refresh(packet) is deprecated! Please just use refresh()!'); // tslint:disable-line
                }
                /** @type {?} */
                const realPacket = { id: this.id, windowName: this.windowName };
                postRobot
                    .sendToParent(MESSAGE_TYPES.REFRESH, realPacket)
                    .then((/**
                 * @param {?} event
                 * @return {?}
                 */
                (event) => {
                    this._trace(`${MESSAGE_TYPES.REFRESH} (callback)`, event);
                    if (event.data) {
                        resolve(true);
                    }
                    else {
                        reject(false);
                    }
                }))
                    .catch((/**
                 * @param {?} err
                 * @return {?}
                 */
                (err) => {
                    reject(false);
                }));
            }
        }));
    }
    /**
     * Fires or responds to a pin event
     * @param {?=} packet
     * @return {?}
     */
    pin(packet) {
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        (resolve, reject) => {
            if (this._handlers[AppBridgeHandler.PIN]) {
                this._handlers[AppBridgeHandler.PIN](packet, (/**
                 * @param {?} success
                 * @return {?}
                 */
                (success) => {
                    if (success) {
                        resolve(true);
                    }
                    else {
                        reject(false);
                    }
                }));
            }
            else {
                if (packet) {
                    console.info('[AppBridge] - pin(packet) is deprecated! Please just use pin()!'); // tslint:disable-line
                }
                /** @type {?} */
                const realPacket = { id: this.id, windowName: this.windowName };
                postRobot
                    .sendToParent(MESSAGE_TYPES.PIN, realPacket)
                    .then((/**
                 * @param {?} event
                 * @return {?}
                 */
                (event) => {
                    this._trace(`${MESSAGE_TYPES.PIN} (callback)`, event);
                    if (event.data) {
                        resolve(true);
                    }
                    else {
                        reject(false);
                    }
                }))
                    .catch((/**
                 * @param {?} err
                 * @return {?}
                 */
                (err) => {
                    reject(false);
                }));
            }
        }));
    }
    /**
     * Fires or responds to a requestData event
     * @param {?} packet any - packet of data to send with the requestData event
     * @return {?}
     */
    requestData(packet) {
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        (resolve, reject) => {
            if (this._handlers[AppBridgeHandler.REQUEST_DATA]) {
                this._handlers[AppBridgeHandler.REQUEST_DATA](packet, (/**
                 * @param {?} data
                 * @return {?}
                 */
                (data) => {
                    if (data) {
                        resolve({ data });
                    }
                    else {
                        reject(false);
                    }
                }));
            }
            else {
                Object.assign(packet, { id: this.id, windowName: this.windowName });
                postRobot
                    .sendToParent(MESSAGE_TYPES.REQUEST_DATA, packet)
                    .then((/**
                 * @param {?} event
                 * @return {?}
                 */
                (event) => {
                    this._trace(`${MESSAGE_TYPES.REQUEST_DATA} (callback)`, event);
                    if (event.data) {
                        resolve({ data: event.data.data });
                    }
                    else {
                        reject(false);
                    }
                }))
                    .catch((/**
                 * @param {?} err
                 * @return {?}
                 */
                (err) => {
                    reject(false);
                }));
            }
        }));
    }
    /**
     * Fires a generic callback command
     * @param {?} packet string - key: string, generic: boolean
     * @return {?}
     */
    callback(packet) {
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        (resolve, reject) => {
            if (this._handlers[AppBridgeHandler.CALLBACK]) {
                this._handlers[AppBridgeHandler.CALLBACK](packet, (/**
                 * @param {?} success
                 * @return {?}
                 */
                (success) => {
                    if (success) {
                        resolve(true);
                    }
                    else {
                        reject(false);
                    }
                }));
            }
            else {
                Object.assign(packet, { id: this.id, windowName: this.windowName });
                postRobot
                    .sendToParent(MESSAGE_TYPES.CALLBACK, packet)
                    .then((/**
                 * @param {?} event
                 * @return {?}
                 */
                (event) => {
                    this._trace(`${MESSAGE_TYPES.CALLBACK} (callback)`, event);
                    if (event.data) {
                        resolve(true);
                    }
                    else {
                        reject(false);
                    }
                }))
                    .catch((/**
                 * @param {?} err
                 * @return {?}
                 */
                (err) => {
                    reject(false);
                }));
            }
        }));
    }
    /**
     * Fires or responds to an register event
     * @param {?=} packet any - packet of data to send with the event
     * @return {?}
     */
    register(packet = {}) {
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        (resolve, reject) => {
            if (this._handlers[AppBridgeHandler.REGISTER]) {
                this._handlers[AppBridgeHandler.REGISTER](packet, (/**
                 * @param {?} windowName
                 * @return {?}
                 */
                (windowName) => {
                    if (windowName) {
                        resolve(windowName);
                    }
                    else {
                        resolve(null);
                    }
                }));
            }
            else {
                Object.assign(packet, { id: this.id });
                postRobot
                    .sendToParent(MESSAGE_TYPES.REGISTER, packet)
                    .then((/**
                 * @param {?} event
                 * @return {?}
                 */
                (event) => {
                    this._trace(`${MESSAGE_TYPES.REGISTER} (callback)`, event);
                    if (event.data) {
                        this.windowName = event.data.windowName;
                        resolve(event.data.windowName);
                    }
                    else {
                        resolve(null);
                    }
                }))
                    .catch((/**
                 * @param {?} err
                 * @return {?}
                 */
                (err) => {
                    this._trace(`${MESSAGE_TYPES.REGISTER} - FAILED - (no parent)`, err);
                    reject(err);
                }));
            }
        }));
    }
    /**
     * Fires or responds to an HTTP_GET event
     * @param {?} relativeURL
     * @return {?}
     */
    httpGET(relativeURL) {
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        (resolve, reject) => {
            if (this._handlers[AppBridgeHandler.HTTP]) {
                this._handlers[AppBridgeHandler.HTTP]({ verb: HTTP_VERBS.GET, relativeURL }, (/**
                 * @param {?} data
                 * @param {?} error
                 * @return {?}
                 */
                (data, error) => {
                    resolve({ data, error });
                }));
            }
            else {
                postRobot
                    .sendToParent(MESSAGE_TYPES.HTTP_GET, { relativeURL })
                    .then((/**
                 * @param {?} event
                 * @return {?}
                 */
                (event) => {
                    resolve({ data: event.data.data, error: event.data.error });
                }))
                    .catch((/**
                 * @param {?} err
                 * @return {?}
                 */
                (err) => {
                    reject(null);
                }));
            }
        }));
    }
    /**
     * Fires or responds to an HTTP_POST event
     * @param {?} relativeURL
     * @param {?} postData
     * @return {?}
     */
    httpPOST(relativeURL, postData) {
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        (resolve, reject) => {
            if (this._handlers[AppBridgeHandler.HTTP]) {
                this._handlers[AppBridgeHandler.HTTP]({ verb: HTTP_VERBS.POST, relativeURL, data: postData }, (/**
                 * @param {?} data
                 * @param {?} error
                 * @return {?}
                 */
                (data, error) => {
                    resolve({ data, error });
                }));
            }
            else {
                postRobot
                    .sendToParent(MESSAGE_TYPES.HTTP_POST, { relativeURL, data: postData })
                    .then((/**
                 * @param {?} event
                 * @return {?}
                 */
                (event) => {
                    resolve({ data: event.data.data, error: event.data.error });
                }))
                    .catch((/**
                 * @param {?} err
                 * @return {?}
                 */
                (err) => {
                    reject(null);
                }));
            }
        }));
    }
    /**
     * Fires or responds to an HTTP_PUT event
     * @param {?} relativeURL
     * @param {?} putData
     * @return {?}
     */
    httpPUT(relativeURL, putData) {
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        (resolve, reject) => {
            if (this._handlers[AppBridgeHandler.HTTP]) {
                this._handlers[AppBridgeHandler.HTTP]({ verb: HTTP_VERBS.PUT, relativeURL, data: putData }, (/**
                 * @param {?} data
                 * @param {?} error
                 * @return {?}
                 */
                (data, error) => {
                    resolve({ data, error });
                }));
            }
            else {
                postRobot
                    .sendToParent(MESSAGE_TYPES.HTTP_PUT, { relativeURL, data: putData })
                    .then((/**
                 * @param {?} event
                 * @return {?}
                 */
                (event) => {
                    resolve({ data: event.data.data, error: event.data.error });
                }))
                    .catch((/**
                 * @param {?} err
                 * @return {?}
                 */
                (err) => {
                    reject(null);
                }));
            }
        }));
    }
    /**
     * Fires or responds to an HTTP_DELETE event
     * @param {?} relativeURL
     * @return {?}
     */
    httpDELETE(relativeURL) {
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        (resolve, reject) => {
            if (this._handlers[AppBridgeHandler.HTTP]) {
                this._handlers[AppBridgeHandler.HTTP]({ verb: HTTP_VERBS.DELETE, relativeURL }, (/**
                 * @param {?} data
                 * @param {?} error
                 * @return {?}
                 */
                (data, error) => {
                    resolve({ data, error });
                }));
            }
            else {
                postRobot
                    .sendToParent(MESSAGE_TYPES.HTTP_DELETE, { relativeURL })
                    .then((/**
                 * @param {?} event
                 * @return {?}
                 */
                (event) => {
                    resolve({ data: event.data.data, error: event.data.error });
                }))
                    .catch((/**
                 * @param {?} err
                 * @return {?}
                 */
                (err) => {
                    reject(null);
                }));
            }
        }));
    }
    /**
     * Fires a custom event to anywhere in the application
     * @param {?} event string - event name to fire
     * @param {?} data any - data to be sent along with the event
     * @return {?}
     */
    fireEvent(event, data) {
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        (resolve, reject) => {
            postRobot
                .sendToParent(MESSAGE_TYPES.CUSTOM_EVENT, { event, data })
                .then((/**
             * @param {?} e
             * @return {?}
             */
            (e) => {
                resolve(e);
            }))
                .catch((/**
             * @param {?} err
             * @return {?}
             */
            (err) => {
                reject(null);
            }));
        }));
    }
    /**
     * Fires a custom event to all registered frames
     * @param {?} event string - event name to fire
     * @param {?} data any - data to be sent along with the event
     * @return {?}
     */
    fireEventToChildren(event, data) {
        if (this._registeredFrames.length > 0) {
            this._registeredFrames.forEach((/**
             * @param {?} frame
             * @return {?}
             */
            (frame) => {
                postRobot.send(frame.source, MESSAGE_TYPES.CUSTOM_EVENT, {
                    eventType: event,
                    data,
                });
            }));
        }
    }
    /**
     * Adds an event listener to a custom event
     * @param {?} event string - event name to listen to
     * @param {?} callback function - callback to be fired when an event is caught
     * @return {?}
     */
    addEventListener(event, callback) {
        if (!this._eventListeners[event]) {
            this._eventListeners[event] = [];
        }
        this._eventListeners[event].push(callback);
    }
}
if (false) {}
class DevAppBridge extends AppBridge {
    /**
     * @param {?=} traceName
     * @param {?=} http
     */
    constructor(traceName = 'DevAppBridge', http) {
        super(traceName);
        this.http = http;
        /** @type {?} */
        const cookie = this.getCookie('UlEncodedIdentity');
        if (cookie && cookie.length) {
            /** @type {?} */
            const identity = JSON.parse(decodeURIComponent(cookie));
            /** @type {?} */
            const endpoints = identity.sessions.reduce((/**
             * @param {?} obj
             * @param {?} session
             * @return {?}
             */
            (obj, session) => {
                obj[session.name] = session.value.endpoint;
                return obj;
            }), {});
            this.baseURL = endpoints.rest;
        }
    }
    /**
     * @protected
     * @return {?}
     */
    _setupHandlers() { }
    /**
     * Fires or responds to an HTTP_GET event
     * @param {?} relativeURL
     * @return {?}
     */
    httpGET(relativeURL) {
        return this.http.get(`${this.baseURL}/${relativeURL}`, { withCredentials: true }).toPromise();
    }
    /**
     * Fires or responds to an HTTP_POST event
     * @param {?} relativeURL
     * @param {?} postData
     * @return {?}
     */
    httpPOST(relativeURL, postData) {
        return this.http.post(`${this.baseURL}/${relativeURL}`, postData, { withCredentials: true }).toPromise();
    }
    /**
     * Fires or responds to an HTTP_PUT event
     * @param {?} relativeURL
     * @param {?} putData
     * @return {?}
     */
    httpPUT(relativeURL, putData) {
        return this.http.put(`${this.baseURL}/${relativeURL}`, putData, { withCredentials: true }).toPromise();
    }
    /**
     * Fires or responds to an HTTP_DELETE event
     * @param {?} relativeURL
     * @return {?}
     */
    httpDELETE(relativeURL) {
        return this.http.delete(`${this.baseURL}/${relativeURL}`, { withCredentials: true }).toPromise();
    }
    /**
     * @private
     * @param {?} cname
     * @return {?}
     */
    getCookie(cname) {
        if (document) {
            /** @type {?} */
            const name = `${cname}=`;
            /** @type {?} */
            const ca = document.cookie.split(';');
            for (let i = 0; i < ca.length; i++) {
                /** @type {?} */
                let c = ca[i];
                while (c.charAt(0) === ' ') {
                    c = c.substring(1);
                }
                if (c.indexOf(name) === 0) {
                    return c.substring(name.length, c.length);
                }
            }
        }
        return false;
    }
}
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: index.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: novo-elements.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */


//# sourceMappingURL=novo-elements.js.map


/***/ }),

/***/ "./dist/novo-examples/fesm2015/novo-examples.js":
/*!******************************************************!*\
  !*** ./dist/novo-examples/fesm2015/novo-examples.js ***!
  \******************************************************/
/*! exports provided: AccordionExample, AceEditorPage, ActionsCellExample, ActivitySectionExample, AddressControlExample, AddressValueExample, AnalyticsColorsExample, AssociatedValueExample, AsyncChipsExample, AsyncPickerExample, BasicAceExample, BasicCardExample, BasicChipsExample, BasicDropDownExample, BasicEditorExample, BasicExpansionExample, BasicHeaderExample, BasicIconsExample, BasicListExample, BasicMultiPickerExample, BasicPickerExample, BasicQuickNoteExample, BasicRadioExample, BasicSelectExample, BasicSlideExample, BasicTipWellExample, BasicValueExample, BigCalendarExample, ButtonDialogueExample, ButtonDynamicExample, ButtonFabExample, ButtonIconExample, ButtonInverseExample, ButtonLoadingExample, ButtonOverviewExample, ButtonPrimaryExample, ButtonRadioExample, ButtonSecondaryExample, ButtonStandardExample, ButtonlessTipWellExample, ButtonsPage, CalendarExample, CalendarInputControlsExample, CalendarPage, CardConfigExample, CardsPage, CategoryValueExample, CheckBoxControlsExample, ChipsPage, ChomskyPage, CloseOnSelectChipsExample, ColorsPage, ComponentsPage, CompositionPage, CondensedHeaderExample, ConfigureColumnsModal, CorporateUserValueExample, CustomDemoControlExample, CustomDropDownExample, CustomModalExample, CustomPickerResults, CustomPickerResultsExample, CustomQuickNoteExample, CustomQuickNoteResults, CustomQuickNoteResultsExample, CustomTemplateExample, DataTablePage, DataTableRemoteExample, DataTableRowsExample, DataTableServiceExample, DatePickerExample, DatePickerPage, DateRangeExample, DateTimeExample, DateTimeInputExample, DateTimeValueExample, DateTranslationsExample, DefaultOptionsPickerExample, DesignPage, DetailsTableExample, DisabledFormExample, DropdownPage, DynamicFormExample, DynamicFormFieldSetsExample, EXAMPLE_COMPONENTS, EXAMPLE_LIST, EditableTableExample, EditorPage, EnableDisableAllFieldsInFormExample, EntityColorsExample, EntityListValueExample, EntityPickerExample, ErrorModalExample, ExampleData, ExpansionPage, ExternalLinkValueExample, ExtraDetails, FiAddingRemovingExample, FiAsyncExample, FiCalculationExample, FiConfirmExample, FiEnableDisableExample, FiGlobalsExample, FiHideShowExample, FiMessagingExample, FiModifyAddedPickerExample, FiModifyOptionsExample, FiRequiredExample, FiTooltipExample, FiValidationExample, FieldInteractionsPage, FileInputControlsExample, FormControlsPage, FormGroupsPage, FormPage, FormattedChipsExample, FormattedPickerExample, FormatterValueExample, GroupedMultiPickerExample, GroupedPickerExample, HeaderPage, HeaderSearchbarExample, HeaderSubtitleExample, HomePage, HorizontalExample, HorizontalOptionsExample, HtmlTipWellExample, IconPage, IconRadioExample, IconTipWellExample, IconValueExample, IconographyPage, LargeDropDownExample, LayoutsPage, LazyExpansionExample, ListPage, LoadingCircleExample, LoadingLineExample, LoadingPage, LongSelectExample, MinimalEditorExample, ModalAddFormDemo, ModalAddFormExample, ModalCustomDemo, ModalEditFormDemo, ModalEditFormExample, ModalErrorDemo, ModalPage, ModalSuccessDemo, ModalWarningDemo, MultiDropDownExample, MultiOptionValueExample, MultiPickerPage, NestedMultiPickerExample, NovoExamplesModule, NovoExamplesRoutesModule, NumberTranslationsExample, OverrideTemplateExample, PAGE_LIST, PatternsPage, PickerControlsExample, PickerPage, PipesPage, PluralTranslationsExample, PluralizeExample, PopOverAutoPlacementExample, PopOverBehaviorsExample, PopOverDynamicExample, PopOverHorizontalExample, PopOverPage, PopOverPlacementExample, PopOverVerticalExample, PositionDropDownExample, PrimaryColorsExample, QuickNotePage, RadioButtonsPage, RaisedIconsExample, RangeExample, RecordHeaderExample, RowChipsExample, ScrollableDropDownExample, SearchPage, SearchUsageExample, SecurityExample, SecurityPage, SelectAllTableExample, SelectPage, SimpleTranslationsExample, SlidesPage, StepperHorizontalExample, StepperPage, StepperVerticalExample, SuccessModalExample, SwitchPage, SwitchUsageExample, TabbedGroupPickerBasicExample, TabbedGroupPickerBigGroupsExample, TabbedGroupPickerGroupsExample, TabbedGroupPickerPage, TabbedGroupPickerQuickSelectExample, TableExample, TablePage, TabsBasicExample, TabsColorExample, TabsCondensedExample, TabsPage, TabsRouterExample, TabsVerticalExample, TemplatesPage, TextBasedControlsExample, ThemedIconsExample, ThemedListExample, TilesPage, TilesUsageExample, TimeExample, TimePickerExample, TipWellPage, ToastServiceExample, ToastUsageExample, ToasterPage, TooltipAlignExample, TooltipOptionsExample, TooltipPage, TooltipPlacementExample, TooltipSizesExample, TooltipToggleExample, TooltipTypesExample, TotalFooterTableExample, TranslationsVariablesExample, TypographyPage, UpdatingFormExample, ValuePage, VerticalDynamicFormExample, VerticalExample, VerticalOptionsExample, VerticalRadioExample, WarningModalExample, WeekStartExample, ɵa, ɵb, ɵc, ɵd, ɵe */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AccordionExample", function() { return AccordionExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AceEditorPage", function() { return AceEditorPage; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ActionsCellExample", function() { return ActionsCellExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ActivitySectionExample", function() { return ActivitySectionExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AddressControlExample", function() { return AddressControlExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AddressValueExample", function() { return AddressValueExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AnalyticsColorsExample", function() { return AnalyticsColorsExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AssociatedValueExample", function() { return AssociatedValueExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AsyncChipsExample", function() { return AsyncChipsExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AsyncPickerExample", function() { return AsyncPickerExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BasicAceExample", function() { return BasicAceExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BasicCardExample", function() { return BasicCardExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BasicChipsExample", function() { return BasicChipsExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BasicDropDownExample", function() { return BasicDropDownExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BasicEditorExample", function() { return BasicEditorExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BasicExpansionExample", function() { return BasicExpansionExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BasicHeaderExample", function() { return BasicHeaderExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BasicIconsExample", function() { return BasicIconsExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BasicListExample", function() { return BasicListExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BasicMultiPickerExample", function() { return BasicMultiPickerExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BasicPickerExample", function() { return BasicPickerExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BasicQuickNoteExample", function() { return BasicQuickNoteExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BasicRadioExample", function() { return BasicRadioExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BasicSelectExample", function() { return BasicSelectExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BasicSlideExample", function() { return BasicSlideExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BasicTipWellExample", function() { return BasicTipWellExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BasicValueExample", function() { return BasicValueExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BigCalendarExample", function() { return BigCalendarExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ButtonDialogueExample", function() { return ButtonDialogueExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ButtonDynamicExample", function() { return ButtonDynamicExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ButtonFabExample", function() { return ButtonFabExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ButtonIconExample", function() { return ButtonIconExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ButtonInverseExample", function() { return ButtonInverseExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ButtonLoadingExample", function() { return ButtonLoadingExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ButtonOverviewExample", function() { return ButtonOverviewExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ButtonPrimaryExample", function() { return ButtonPrimaryExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ButtonRadioExample", function() { return ButtonRadioExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ButtonSecondaryExample", function() { return ButtonSecondaryExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ButtonStandardExample", function() { return ButtonStandardExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ButtonlessTipWellExample", function() { return ButtonlessTipWellExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ButtonsPage", function() { return ButtonsPage; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CalendarExample", function() { return CalendarExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CalendarInputControlsExample", function() { return CalendarInputControlsExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CalendarPage", function() { return CalendarPage; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CardConfigExample", function() { return CardConfigExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CardsPage", function() { return CardsPage; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CategoryValueExample", function() { return CategoryValueExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CheckBoxControlsExample", function() { return CheckBoxControlsExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ChipsPage", function() { return ChipsPage; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ChomskyPage", function() { return ChomskyPage; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CloseOnSelectChipsExample", function() { return CloseOnSelectChipsExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ColorsPage", function() { return ColorsPage; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ComponentsPage", function() { return ComponentsPage; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CompositionPage", function() { return CompositionPage; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CondensedHeaderExample", function() { return CondensedHeaderExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ConfigureColumnsModal", function() { return ConfigureColumnsModal; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CorporateUserValueExample", function() { return CorporateUserValueExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CustomDemoControlExample", function() { return CustomDemoControlExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CustomDropDownExample", function() { return CustomDropDownExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CustomModalExample", function() { return CustomModalExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CustomPickerResults", function() { return CustomPickerResults; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CustomPickerResultsExample", function() { return CustomPickerResultsExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CustomQuickNoteExample", function() { return CustomQuickNoteExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CustomQuickNoteResults", function() { return CustomQuickNoteResults; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CustomQuickNoteResultsExample", function() { return CustomQuickNoteResultsExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CustomTemplateExample", function() { return CustomTemplateExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DataTablePage", function() { return DataTablePage; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DataTableRemoteExample", function() { return DataTableRemoteExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DataTableRowsExample", function() { return DataTableRowsExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DataTableServiceExample", function() { return DataTableServiceExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DatePickerExample", function() { return DatePickerExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DatePickerPage", function() { return DatePickerPage; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DateRangeExample", function() { return DateRangeExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DateTimeExample", function() { return DateTimeExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DateTimeInputExample", function() { return DateTimeInputExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DateTimeValueExample", function() { return DateTimeValueExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DateTranslationsExample", function() { return DateTranslationsExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DefaultOptionsPickerExample", function() { return DefaultOptionsPickerExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DesignPage", function() { return DesignPage; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DetailsTableExample", function() { return DetailsTableExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DisabledFormExample", function() { return DisabledFormExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DropdownPage", function() { return DropdownPage; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DynamicFormExample", function() { return DynamicFormExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DynamicFormFieldSetsExample", function() { return DynamicFormFieldSetsExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EXAMPLE_COMPONENTS", function() { return EXAMPLE_COMPONENTS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EXAMPLE_LIST", function() { return EXAMPLE_LIST; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EditableTableExample", function() { return EditableTableExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EditorPage", function() { return EditorPage; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EnableDisableAllFieldsInFormExample", function() { return EnableDisableAllFieldsInFormExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EntityColorsExample", function() { return EntityColorsExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EntityListValueExample", function() { return EntityListValueExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EntityPickerExample", function() { return EntityPickerExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ErrorModalExample", function() { return ErrorModalExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ExampleData", function() { return ExampleData; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ExpansionPage", function() { return ExpansionPage; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ExternalLinkValueExample", function() { return ExternalLinkValueExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ExtraDetails", function() { return ExtraDetails; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FiAddingRemovingExample", function() { return FiAddingRemovingExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FiAsyncExample", function() { return FiAsyncExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FiCalculationExample", function() { return FiCalculationExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FiConfirmExample", function() { return FiConfirmExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FiEnableDisableExample", function() { return FiEnableDisableExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FiGlobalsExample", function() { return FiGlobalsExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FiHideShowExample", function() { return FiHideShowExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FiMessagingExample", function() { return FiMessagingExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FiModifyAddedPickerExample", function() { return FiModifyAddedPickerExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FiModifyOptionsExample", function() { return FiModifyOptionsExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FiRequiredExample", function() { return FiRequiredExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FiTooltipExample", function() { return FiTooltipExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FiValidationExample", function() { return FiValidationExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FieldInteractionsPage", function() { return FieldInteractionsPage; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FileInputControlsExample", function() { return FileInputControlsExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FormControlsPage", function() { return FormControlsPage; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FormGroupsPage", function() { return FormGroupsPage; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FormPage", function() { return FormPage; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FormattedChipsExample", function() { return FormattedChipsExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FormattedPickerExample", function() { return FormattedPickerExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FormatterValueExample", function() { return FormatterValueExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GroupedMultiPickerExample", function() { return GroupedMultiPickerExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GroupedPickerExample", function() { return GroupedPickerExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HeaderPage", function() { return HeaderPage; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HeaderSearchbarExample", function() { return HeaderSearchbarExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HeaderSubtitleExample", function() { return HeaderSubtitleExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HomePage", function() { return HomePage; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HorizontalExample", function() { return HorizontalExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HorizontalOptionsExample", function() { return HorizontalOptionsExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HtmlTipWellExample", function() { return HtmlTipWellExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "IconPage", function() { return IconPage; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "IconRadioExample", function() { return IconRadioExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "IconTipWellExample", function() { return IconTipWellExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "IconValueExample", function() { return IconValueExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "IconographyPage", function() { return IconographyPage; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LargeDropDownExample", function() { return LargeDropDownExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LayoutsPage", function() { return LayoutsPage; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LazyExpansionExample", function() { return LazyExpansionExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ListPage", function() { return ListPage; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LoadingCircleExample", function() { return LoadingCircleExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LoadingLineExample", function() { return LoadingLineExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LoadingPage", function() { return LoadingPage; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LongSelectExample", function() { return LongSelectExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MinimalEditorExample", function() { return MinimalEditorExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ModalAddFormDemo", function() { return ModalAddFormDemo; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ModalAddFormExample", function() { return ModalAddFormExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ModalCustomDemo", function() { return ModalCustomDemo; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ModalEditFormDemo", function() { return ModalEditFormDemo; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ModalEditFormExample", function() { return ModalEditFormExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ModalErrorDemo", function() { return ModalErrorDemo; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ModalPage", function() { return ModalPage; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ModalSuccessDemo", function() { return ModalSuccessDemo; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ModalWarningDemo", function() { return ModalWarningDemo; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MultiDropDownExample", function() { return MultiDropDownExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MultiOptionValueExample", function() { return MultiOptionValueExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MultiPickerPage", function() { return MultiPickerPage; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NestedMultiPickerExample", function() { return NestedMultiPickerExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoExamplesModule", function() { return NovoExamplesModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NovoExamplesRoutesModule", function() { return NovoExamplesRoutesModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NumberTranslationsExample", function() { return NumberTranslationsExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OverrideTemplateExample", function() { return OverrideTemplateExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PAGE_LIST", function() { return PAGE_LIST; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PatternsPage", function() { return PatternsPage; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PickerControlsExample", function() { return PickerControlsExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PickerPage", function() { return PickerPage; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PipesPage", function() { return PipesPage; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PluralTranslationsExample", function() { return PluralTranslationsExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PluralizeExample", function() { return PluralizeExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PopOverAutoPlacementExample", function() { return PopOverAutoPlacementExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PopOverBehaviorsExample", function() { return PopOverBehaviorsExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PopOverDynamicExample", function() { return PopOverDynamicExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PopOverHorizontalExample", function() { return PopOverHorizontalExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PopOverPage", function() { return PopOverPage; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PopOverPlacementExample", function() { return PopOverPlacementExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PopOverVerticalExample", function() { return PopOverVerticalExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PositionDropDownExample", function() { return PositionDropDownExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PrimaryColorsExample", function() { return PrimaryColorsExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "QuickNotePage", function() { return QuickNotePage; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RadioButtonsPage", function() { return RadioButtonsPage; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RaisedIconsExample", function() { return RaisedIconsExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RangeExample", function() { return RangeExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RecordHeaderExample", function() { return RecordHeaderExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RowChipsExample", function() { return RowChipsExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ScrollableDropDownExample", function() { return ScrollableDropDownExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SearchPage", function() { return SearchPage; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SearchUsageExample", function() { return SearchUsageExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SecurityExample", function() { return SecurityExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SecurityPage", function() { return SecurityPage; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SelectAllTableExample", function() { return SelectAllTableExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SelectPage", function() { return SelectPage; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SimpleTranslationsExample", function() { return SimpleTranslationsExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SlidesPage", function() { return SlidesPage; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "StepperHorizontalExample", function() { return StepperHorizontalExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "StepperPage", function() { return StepperPage; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "StepperVerticalExample", function() { return StepperVerticalExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SuccessModalExample", function() { return SuccessModalExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SwitchPage", function() { return SwitchPage; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SwitchUsageExample", function() { return SwitchUsageExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TabbedGroupPickerBasicExample", function() { return TabbedGroupPickerBasicExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TabbedGroupPickerBigGroupsExample", function() { return TabbedGroupPickerBigGroupsExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TabbedGroupPickerGroupsExample", function() { return TabbedGroupPickerGroupsExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TabbedGroupPickerPage", function() { return TabbedGroupPickerPage; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TabbedGroupPickerQuickSelectExample", function() { return TabbedGroupPickerQuickSelectExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TableExample", function() { return TableExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TablePage", function() { return TablePage; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TabsBasicExample", function() { return TabsBasicExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TabsColorExample", function() { return TabsColorExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TabsCondensedExample", function() { return TabsCondensedExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TabsPage", function() { return TabsPage; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TabsRouterExample", function() { return TabsRouterExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TabsVerticalExample", function() { return TabsVerticalExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TemplatesPage", function() { return TemplatesPage; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TextBasedControlsExample", function() { return TextBasedControlsExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ThemedIconsExample", function() { return ThemedIconsExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ThemedListExample", function() { return ThemedListExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TilesPage", function() { return TilesPage; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TilesUsageExample", function() { return TilesUsageExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TimeExample", function() { return TimeExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TimePickerExample", function() { return TimePickerExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TipWellPage", function() { return TipWellPage; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ToastServiceExample", function() { return ToastServiceExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ToastUsageExample", function() { return ToastUsageExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ToasterPage", function() { return ToasterPage; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TooltipAlignExample", function() { return TooltipAlignExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TooltipOptionsExample", function() { return TooltipOptionsExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TooltipPage", function() { return TooltipPage; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TooltipPlacementExample", function() { return TooltipPlacementExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TooltipSizesExample", function() { return TooltipSizesExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TooltipToggleExample", function() { return TooltipToggleExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TooltipTypesExample", function() { return TooltipTypesExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TotalFooterTableExample", function() { return TotalFooterTableExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TranslationsVariablesExample", function() { return TranslationsVariablesExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TypographyPage", function() { return TypographyPage; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UpdatingFormExample", function() { return UpdatingFormExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ValuePage", function() { return ValuePage; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VerticalDynamicFormExample", function() { return VerticalDynamicFormExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VerticalExample", function() { return VerticalExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VerticalOptionsExample", function() { return VerticalOptionsExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VerticalRadioExample", function() { return VerticalRadioExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WarningModalExample", function() { return WarningModalExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WeekStartExample", function() { return WeekStartExample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵa", function() { return NovoExamplesSharedModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵb", function() { return CodeSnippetComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵc", function() { return HighlightJS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵd", function() { return CodeExampleComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵe", function() { return StackblitzButtonModule; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm2015/forms.js");
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm2015/common.js");
/* harmony import */ var novo_elements__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! novo-elements */ "./dist/novo-elements/fesm2015/novo-elements.js");
/* harmony import */ var chomsky__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! chomsky */ "./dist/chomsky/fesm2015/chomsky.js");
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! rxjs/operators */ "./node_modules/rxjs/_esm2015/operators/index.js");
/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! date-fns */ "./node_modules/date-fns/index.js");
/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(date_fns__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/_esm2015/index.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm2015/router.js");
/* harmony import */ var _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @angular/cdk/portal */ "./node_modules/@angular/cdk/esm2015/portal.js");
/* harmony import */ var _angular_platform_browser__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @angular/platform-browser */ "./node_modules/@angular/platform-browser/fesm2015/platform-browser.js");
/* harmony import */ var _angular_common_http__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @angular/common/http */ "./node_modules/@angular/common/fesm2015/http.js");













/**
 * @fileoverview added by tsickle
 * Generated from: components/ace-editor/basic-ace/basic-ace-example.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@title Basic Ace Editor Example
 */
class BasicAceExample {
}
BasicAceExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'basic-ace-example',
                template: "<novo-ace-editor></novo-ace-editor>\n",
                styles: [""]
            }] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: components/buttons/button-dialogue/button-dialogue-example.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@title Dialogue buttons
 */
class ButtonDialogueExample {
}
ButtonDialogueExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'button-dialogue-example',
                template: "<button theme=\"dialogue\" icon=\"addcard\">Add Card</button>\n<div class=\"inverse-color\">\n    <button theme=\"dialogue\" icon=\"list-o\" side=\"left\" color=\"white\" inverse>Add/Remove</button>\n</div>\n<button theme=\"dialogue\" icon=\"check\" color=\"success\">Dialogue</button>\n<button theme=\"dialogue\" disabled>Dialogue</button>\n",
                styles: [""]
            }] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: components/buttons/button-dynamic/button-dynamic-example.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@title Dynamic buttons
 */
class ButtonDynamicExample {
    constructor() {
        this.theme = 'primary';
        this.isChecked = false;
        this.negativeColor = 'negative';
        this.color = 'blue';
    }
    /**
     * @return {?}
     */
    changeTheme() {
        /** @type {?} */
        const i = Math.floor(Math.random() * 4);
        this.theme = ['primary', 'secondary', 'dialogue', 'standard', 'icon'][i];
    }
}
ButtonDynamicExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'button-dynamic-example',
                template: "<button [theme]=\"theme\" [icon]=\"isChecked ? 'check' : 'times'\" (click)=\"changeTheme()\">Change Theme</button>\n<novo-checkbox label=\"Checked?\" [(ngModel)]=\"isChecked\"></novo-checkbox>\n<button [theme]=\"theme\" [icon]=\"isChecked ? 'check' : 'times'\" (click)=\"changeTheme()\" [disabled]=\"isChecked\">Change Theme</button>\n",
                styles: [""]
            }] }
];
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: components/buttons/button-fab/button-fab-example.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@title Basic buttons
 */
class ButtonFabExample {
}
ButtonFabExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'button-fab-example',
                template: "<button theme=\"fab\" color=\"success\" icon=\"check\"></button>\n<button theme=\"fab\" color=\"warning\" icon=\"caution-o\"></button>\n<button theme=\"fab\" color=\"pulse\" icon=\"next\"></button>\n<button theme=\"fab\" color=\"grapefruit\" icon=\"print\" inverse></button>\n<button theme=\"fab\" icon=\"neutral\" inverse disabled></button>\n",
                styles: [""]
            }] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: components/buttons/button-icon/button-icon-example.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@title Icon buttons
 */
class ButtonIconExample {
}
ButtonIconExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'button-icon-example',
                template: "<button theme=\"icon\" icon=\"print\"></button>\n<button theme=\"icon\" icon=\"print\"></button>\n",
                styles: [""]
            }] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: components/buttons/button-inverse/button-inverse-example.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@title Invers buttons
 */
class ButtonInverseExample {
}
ButtonInverseExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'button-inverse-example',
                template: "<div class=\"background candidate\">\n  <button theme=\"secondary\" icon=\"collapse\" inverse>Actions</button>\n  <button theme=\"secondary\" icon=\"convert\" inverse>Convert</button>\n  <button theme=\"secondary\" icon=\"convert\" inverse disabled>Convert</button>\n</div>\n",
                styles: [""]
            }] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: components/buttons/button-loading/button-loading-example.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@title Loading buttons
 */
class ButtonLoadingExample {
    constructor() {
        this.loading = false;
        this.loadingButtonText = 'Delete';
    }
    /**
     * @return {?}
     */
    fakeRequest() {
        this.loading = true;
        this.loadingButtonText = this.loading ? 'Removing... ' : 'Delete';
        setTimeout((/**
         * @return {?}
         */
        () => {
            this.loading = false;
            this.loadingButtonText = this.loading ? 'Removing... ' : 'Delete';
        }), 5000);
    }
}
ButtonLoadingExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'button-loading-example',
                template: "<button theme=\"primary\" icon=\"times\" [loading]=\"loading\" (click)=\"fakeRequest()\">{{loadingButtonText}}</button>\n",
                styles: [""]
            }] }
];
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: components/buttons/button-overview/button-overview-example.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@title Basic buttons
 */
class ButtonOverviewExample {
}
ButtonOverviewExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'button-overview-example',
                template: "<button theme=\"primary\" icon=\"next\">Primary</button>\n<button theme=\"secondary\">Secondary</button>\n<button theme=\"standard\" color=\"success\" icon=\"check\">Standard</button>\n<button theme=\"dialogue\" color=\"pulse\" icon=\"send\">Dialogue</button>\n<button theme=\"icon\" color=\"warning\" icon=\"caution-o\"></button>\n\n",
                styles: [""]
            }] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: components/buttons/button-primary/button-primary-example.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@title Primary buttons
 */
class ButtonPrimaryExample {
    constructor() {
        this.negativeColor = 'negative';
    }
}
ButtonPrimaryExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'button-primary-example',
                template: "<button theme=\"primary\" icon=\"next\">Next</button>\n<button theme=\"primary\" [color]=\"negativeColor\" icon=\"times\">Cancel</button>\n<button theme=\"primary\" color=\"success\" icon=\"check\">Save</button>\n<button theme=\"primary\" color=\"warning\" icon=\"caution-o\">Caution</button>\n<button theme=\"primary\" color=\"pulse\" icon=\"send\" disabled>Submit</button>\n",
                styles: [""]
            }] }
];
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: components/buttons/button-secondary/button-secondary-example.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@title Basic buttons
 */
class ButtonSecondaryExample {
}
ButtonSecondaryExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'button-secondary-example',
                template: "<button theme=\"secondary\">Secondary</button>\n<button theme=\"secondary\" disabled>Secondary</button>\n",
                styles: [""]
            }] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: components/buttons/button-standard/button-standard-example.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@title Basic buttons
 */
class ButtonStandardExample {
}
ButtonStandardExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'button-standard-example',
                template: "<button theme=\"standard\">Standard</button>\n<button theme=\"standard\" color=\"light\">Standard</button>\n<button theme=\"standard\" color=\"light\" disabled>Standard</button>\n",
                styles: [""]
            }] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: components/calendar/big-calendar/big-calendar-example.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const colors = {
    red: {
        primary: '#ad2121',
        secondary: '#FAE3E3',
    },
    blue: {
        primary: '#1e90ff',
        secondary: '#D1E8FF',
    },
    yellow: {
        primary: '#e3bc08',
        secondary: '#FDF1BA',
    },
    green: {
        primary: '#8CC152',
        secondary: '#37BC9B',
    },
};
/**
 * \@title Big Calendar Example
 */
class BigCalendarExample {
    constructor() {
        this.views = [
            {
                label: 'Month',
                value: 'month',
            },
            {
                label: 'Week',
                value: 'week',
            },
            {
                label: 'Day',
                value: 'day',
            },
        ];
        this.view = 'month';
        this.viewDate = new Date();
        this.events = [
            {
                title: 'Interview',
                description: 'with @bvkimball',
                color: colors.green,
                start: new Date(),
                response: novo_elements__WEBPACK_IMPORTED_MODULE_3__["CalendarEventResponse"].Rejected,
                type: 'Interview',
            },
            {
                title: 'Client Visit',
                description: 'with @asibilia',
                color: colors.red,
                start: new Date(Date.now() + 60000 * 30),
                response: novo_elements__WEBPACK_IMPORTED_MODULE_3__["CalendarEventResponse"].Accepted,
                type: 'Visit',
            },
            {
                title: 'Interview',
                description: 'with @johndoe',
                color: colors.green,
                start: new Date(Date.now() + 60000 * 90),
                response: novo_elements__WEBPACK_IMPORTED_MODULE_3__["CalendarEventResponse"].Accepted,
                type: 'Interview',
            },
            {
                title: 'Phone Interview',
                description: 'with @johnsully83',
                color: colors.green,
                start: new Date(Date.now() + 60000 * 90),
                end: new Date(Date.now() + 60000 * 180),
                response: novo_elements__WEBPACK_IMPORTED_MODULE_3__["CalendarEventResponse"].Accepted,
                type: 'Interview',
            },
            {
                title: 'Interview',
                description: 'with @johnsully83',
                color: colors.green,
                start: new Date(Date.now() + 60000 * 90),
                end: new Date(Date.now() + 60000 * 150),
                response: novo_elements__WEBPACK_IMPORTED_MODULE_3__["CalendarEventResponse"].Accepted,
                type: 'Interview',
            },
            {
                title: 'Final Interview',
                description: 'with @johnsully83',
                color: colors.green,
                start: new Date(Date.now() + 60000 * 90),
                end: new Date(Date.now() + 60000 * 120),
                response: novo_elements__WEBPACK_IMPORTED_MODULE_3__["CalendarEventResponse"].Accepted,
                type: 'Interview',
            },
            {
                title: 'Phone Interview',
                description: 'with @johnsully83',
                color: colors.green,
                start: new Date(Date.now() + 60000 * 90),
                end: new Date(Date.now() + 60000 * 180),
                response: novo_elements__WEBPACK_IMPORTED_MODULE_3__["CalendarEventResponse"].Accepted,
                type: 'Interview',
            },
            {
                title: 'Interview',
                description: 'with @johnsully83',
                color: colors.green,
                start: new Date(Date.now() + 60000 * 90),
                end: new Date(Date.now() + 60000 * 150),
                response: novo_elements__WEBPACK_IMPORTED_MODULE_3__["CalendarEventResponse"].Accepted,
                type: 'Interview',
            },
            {
                title: 'Final Interview',
                description: 'with @johnsully83',
                color: colors.green,
                start: new Date(Date.now() + 60000 * 90),
                end: new Date(Date.now() + 60000 * 120),
                response: novo_elements__WEBPACK_IMPORTED_MODULE_3__["CalendarEventResponse"].Accepted,
                type: 'Interview',
            },
            {
                title: 'Phone Interview',
                description: 'with @johnsully83',
                color: colors.green,
                start: new Date(Date.now() + 60000 * 90),
                end: new Date(Date.now() + 60000 * 180),
                response: novo_elements__WEBPACK_IMPORTED_MODULE_3__["CalendarEventResponse"].Accepted,
                type: 'Interview',
            },
            {
                title: 'Interview',
                description: 'with @johnsully83',
                color: colors.green,
                start: new Date(Date.now() + 60000 * 90),
                end: new Date(Date.now() + 60000 * 150),
                response: novo_elements__WEBPACK_IMPORTED_MODULE_3__["CalendarEventResponse"].Accepted,
                type: 'Interview',
            },
            {
                title: 'Final Interview',
                description: 'with @johnsully83',
                color: colors.green,
                start: new Date(Date.now() + 60000 * 90),
                end: new Date(Date.now() + 60000 * 120),
                response: novo_elements__WEBPACK_IMPORTED_MODULE_3__["CalendarEventResponse"].Accepted,
                type: 'Interview',
            },
            {
                title: 'Phone Interview',
                description: 'with @johnsully83',
                color: colors.green,
                start: new Date(Date.now() + 60000 * 75),
                end: new Date(Date.now() + 60000 * 120),
                response: novo_elements__WEBPACK_IMPORTED_MODULE_3__["CalendarEventResponse"].Accepted,
                type: 'Interview',
            },
            {
                title: 'Phone Interview',
                description: 'with @johnsully83',
                color: colors.green,
                start: new Date(Date.now() + 60000 * 75),
                end: new Date(Date.now() + 60000 * 150),
                response: novo_elements__WEBPACK_IMPORTED_MODULE_3__["CalendarEventResponse"].Accepted,
                type: 'Interview',
            },
            {
                title: 'Interview',
                description: 'with @johnsully83',
                color: colors.green,
                start: new Date(Date.now() + 60000 * 270),
                end: new Date(Date.now() + 60000 * 300),
                response: novo_elements__WEBPACK_IMPORTED_MODULE_3__["CalendarEventResponse"].Accepted,
                type: 'Interview',
            },
            {
                title: 'Final Interview',
                description: 'with @johnsully83',
                color: colors.green,
                start: new Date(Date.now() + 60000 * 270),
                end: new Date(Date.now() + 60000 * 360),
                response: novo_elements__WEBPACK_IMPORTED_MODULE_3__["CalendarEventResponse"].Accepted,
                type: 'Interview',
            },
            {
                title: 'Final Interview',
                description: 'with @johnsully83',
                color: colors.green,
                start: new Date(Date.now() + 60000 * 270),
                end: new Date(Date.now() + 60000 * 2880000),
                response: novo_elements__WEBPACK_IMPORTED_MODULE_3__["CalendarEventResponse"].Accepted,
                type: 'Interview',
            },
        ];
    }
    /**
     * @param {?} date
     * @param {?} color
     * @param {?} type
     * @return {?}
     */
    getNewEvent(date, color, type) {
        /** @type {?} */
        const evt = {
            title: 'Meeting',
            description: 'with @jgodi',
            color,
            start: date,
            response: type,
            type: 'Meeting',
        };
        return evt;
    }
    /**
     * @param {?} date
     * @return {?}
     */
    dayClicked(date) {
        /** @type {?} */
        const evt = this.getNewEvent(date, colors.blue, novo_elements__WEBPACK_IMPORTED_MODULE_3__["CalendarEventResponse"].Maybe);
        this.events.push(evt);
        this.events = [...this.events];
    }
    /**
     * @param {?} event
     * @return {?}
     */
    addShift(event) {
        /** @type {?} */
        const evt = this.getNewEvent(event.day.date, colors.blue, novo_elements__WEBPACK_IMPORTED_MODULE_3__["CalendarEventResponse"].Maybe);
        this.events.push(evt);
        this.events = [...this.events];
    }
    /**
     * @param {?} event
     * @return {?}
     */
    removeShift(event) {
        this.events.splice(event.day.events.indexOf(event.event), 1);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    toggleAvailable(event) {
        /** @type {?} */
        let evt;
        if (!event.day.events.length) {
            evt = this.getNewEvent(event.day.date, colors.green, novo_elements__WEBPACK_IMPORTED_MODULE_3__["CalendarEventResponse"].Accepted);
            this.events.push(evt);
            this.events = [...this.events];
        }
        else {
            evt = event.day.events[0];
            switch (evt.response) {
                case novo_elements__WEBPACK_IMPORTED_MODULE_3__["CalendarEventResponse"].Accepted:
                    evt.response = novo_elements__WEBPACK_IMPORTED_MODULE_3__["CalendarEventResponse"].Rejected;
                    break;
                case novo_elements__WEBPACK_IMPORTED_MODULE_3__["CalendarEventResponse"].Rejected:
                    event.day.events = [];
                    break;
                default:
                    break;
            }
        }
    }
}
BigCalendarExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'big-calendar-example',
                template: "<div>\n    <novo-calendar-date-change [view]=\"view\" [(viewDate)]=\"viewDate\">\n    </novo-calendar-date-change>\n\n    <novo-tiles [options]=\"views\" [(ngModel)]=\"view\"></novo-tiles>\n</div>\n<div [ngSwitch]=\"view\" class=\"cal-demo-content\">\n    <novo-calendar-month *ngSwitchCase=\"'month'\" [(viewDate)]=\"viewDate\" [events]=\"events\" (dayClicked)=\"dayClicked($event.day.date)\">\n    </novo-calendar-month>\n\n    <novo-calendar-week *ngSwitchCase=\"'week'\" [(viewDate)]=\"viewDate\" [events]=\"events\" (dayClicked)=\"dayClicked($event.date)\" [dayStartHour]=\"0\" [dayEndHour]=\"23\">\n    </novo-calendar-week>\n\n    <novo-calendar-day *ngSwitchCase=\"'day'\" [(viewDate)]=\"viewDate\" [events]=\"events\" [dayStartHour]=\"0\" [dayEndHour]=\"23\">\n    </novo-calendar-day>\n</div>\n",
                styles: [""]
            }] }
];
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: components/calendar/calendar/calendar-example.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@title Calendar Example
 */
class CalendarExample {
}
CalendarExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'calendar-example',
                template: "<div class=\"calendar-demo-side-by-side\">\n    <p>\n        <label>Value One</label> {{(dateOne | date) || 'N/A'}}\n\n        <label>Value Two</label> {{(dateTwo | date) || 'N/A'}}\n    </p>\n    <novo-date-picker [(ngModel)]=\"dateOne\" minYear=\"2000\" maxYear=\"2020\"></novo-date-picker>\n    <novo-date-picker [(ngModel)]=\"dateTwo\"></novo-date-picker>\n</div>\n",
                styles: [""]
            }] }
];
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: components/calendar/range/range-example.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@title Range Example
 */
class RangeExample {
    constructor() {
        this.value = { startDate: null, endDate: null };
    }
}
RangeExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'range-example',
                template: "<div class=\"calendar-demo-side-by-side\">\n    <p>\n        <label>Start date</label> {{(value?.startDate | date) || 'N/A'}}\n\n        <label>End date</label> {{(value?.endDate | date) || 'N/A'}}\n    </p>\n    <novo-date-picker [(ngModel)]=\"value\" range=\"true\"></novo-date-picker>\n</div>\n",
                styles: [""]
            }] }
];
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: components/calendar/time/time-example.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@title Time Example
 */
class TimeExample {
}
TimeExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'time-example',
                template: "<div class=\"calendar-demo-side-by-side\">\n    <p>\n        <label>Value</label> {{(time | date:'mediumTime') || 'N/A'}}\n    </p>\n    <novo-time-picker [(ngModel)]=\"time\"></novo-time-picker>\n    <novo-time-picker [(ngModel)]=\"time\" military=\"true\"></novo-time-picker>\n</div>\n",
                styles: [""]
            }] }
];
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: components/data-table/extras/mock-data.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @record
 */
function MockData() { }
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: components/data-table/extras/configure-columns-modal-example.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@title Configure Columns Modal Example
 */
class ConfigureColumnsModal {
    /**
     * @param {?} modalRef
     * @param {?} params
     */
    constructor(modalRef, params) {
        this.modalRef = modalRef;
        this.params = params;
        this.columns = params['columns'];
    }
    /**
     * @return {?}
     */
    close() {
        this.modalRef.close();
    }
    /**
     * @return {?}
     */
    save() {
        this.modalRef.close(this.columns);
    }
}
ConfigureColumnsModal.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'configure-columns-modal-example',
                template: `
    <novo-modal>
      <header title="Configure Columns"
              theme="contact">
        <utils>
          <util-action icon="times"
                      (click)="close()"></util-action>
        </utils>
      </header>
      <section>
        <novo-list direction="vertical">
          <novo-list-item *ngFor="let column of columns">
            <item-header>
                  <item-title>{{ column.id }}</item-title>
                  <item-header-end>
                    <novo-checkbox [(ngModel)]="column.enabled"></novo-checkbox>
                  </item-header-end>
              </item-header>
          </novo-list-item>
        </novo-list>
      </section>
      <button theme="standard"
              (click)="close()">Cancel</button>
      <button theme="primary"
              color="success"
              icon="check"
              (click)="save()">Save</button>
    </novo-modal>
  `
            }] }
];
/** @nocollapse */
ConfigureColumnsModal.ctorParameters = () => [
    { type: novo_elements__WEBPACK_IMPORTED_MODULE_3__["NovoModalRef"] },
    { type: novo_elements__WEBPACK_IMPORTED_MODULE_3__["NovoModalParams"] }
];
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: components/data-table/extras/index.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: components/data-table/data-table-remote/data-table-remote-example.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@title Remote Data Table Example
 */
class DataTableRemoteExample {
    /**
     * @param {?} ref
     * @param {?} modalService
     */
    constructor(ref, modalService) {
        this.ref = ref;
        this.modalService = modalService;
        // Table configuration
        this.dataSetOptions = [{ label: 'Dataset #1', value: 1 }, { label: 'Dataset #2', value: 2 }, { label: 'Dataset #3', value: 3 }];
        this.loadedDataSet = 1;
        this.paginationTypeOptions = [{ label: 'Standard', value: 'standard' }, { label: 'Basic', value: 'basic' }];
        this.loadedPaginationType = 'standard';
        this.globalSearchOptions = [{ label: 'Show', value: true }, { label: 'Hide', value: false }];
        this.loadedGlobalSearch = false;
        // Shared configuration
        this.sharedColumns = [
            {
                id: 'preview',
                type: 'action',
                enabled: true,
                handlers: {
                    click: this.log.bind(this),
                },
                action: {
                    icon: 'preview',
                },
            },
            {
                id: 'actions',
                type: 'action',
                label: 'Actions',
                enabled: true,
                action: {
                    options: [
                        { label: 'Action 1', handlers: { click: this.log.bind(this) } },
                        { label: 'Action 2', handlers: { click: this.log.bind(this) }, disabled: true },
                        { label: 'Action 3', handlers: { click: this.log.bind(this) }, disabledFunc: this.checkDisabled.bind(this) },
                    ],
                },
            },
            {
                id: 'id',
                label: 'ID',
                enabled: true,
                type: 'text',
                filterable: {
                    type: 'number',
                },
                sortable: true,
            },
            {
                id: 'telephone',
                label: 'Phone',
                type: 'link:tel',
                attributes: {
                    target: '_blank',
                },
            },
            {
                id: 'email',
                label: 'Email',
                type: 'link:mailto',
                attributes: {
                    target: '_blank',
                },
            },
            {
                id: 'address',
                label: 'Address',
                type: 'text',
                format: ['$city, $state', '$city', '$state'],
            },
            {
                id: 'embeddedObj',
                label: 'Embedded (hard)',
                enabled: true,
                format: ['$another.id', '$firstName $lastName'],
                type: 'link',
                handlers: {
                    click: this.log.bind(this),
                },
                filterable: true,
            },
            {
                id: 'simpleEmbeddedObj',
                label: 'Embedded (simple)',
                enabled: true,
                format: '$id',
                type: 'text',
                filterable: true,
                sortable: true,
            },
            {
                id: 'date',
                label: 'Date',
                enabled: true,
                type: 'date',
                filterable: {
                    type: 'date',
                    allowCustomRange: true,
                },
                sortable: true,
            },
            {
                id: 'dateTime',
                label: 'DateTime',
                enabled: false,
                type: 'datetime',
            },
            {
                id: 'time',
                label: 'Time',
                enabled: false,
                type: 'time',
            },
            {
                id: 'money',
                label: 'Money',
                enabled: false,
                type: 'currency',
                filterable: true,
                sortable: true,
            },
            {
                id: 'percent',
                label: 'Percent',
                enabled: true,
                type: 'percent',
                filterable: true,
                sortable: true,
            },
            {
                id: 'name',
                label: 'Name',
                labelIcon: 'bull',
                enabled: true,
                type: 'text',
                template: 'custom',
            },
            {
                id: 'status',
                label: 'Status',
                enabled: true,
                type: 'text',
                filterable: true,
                sortable: true,
            },
            {
                id: 'priority',
                label: 'Priority',
                enabled: true,
                type: 'text',
                filterable: {
                    type: 'multi-select',
                    options: this.getPriorityOptions(),
                },
                sortable: true,
            },
            {
                id: 'enabled',
                label: 'Enabled',
                enabled: true,
                type: 'text',
                sortable: true,
                filterable: {
                    type: 'select',
                    options: [{ value: true, label: 'True' }, { value: false, label: 'False' }],
                },
            },
            {
                id: 'edit',
                type: 'action',
                enabled: true,
                disabled: true,
                handlers: {
                    click: this.log.bind(this),
                },
                action: {
                    icon: 'edit',
                },
            },
        ];
        this.sharedDisplayColumns = [
            'selection',
            'expand',
            'preview',
            'actions',
            'id',
            'date',
            'name',
            'telephone',
            'email',
            'simpleEmbeddedObj',
            'status',
            'priority',
            'percent',
            'embeddedObj',
            'edit',
        ];
        this.sharedPaginationOptions = {
            theme: 'standard',
            pageSize: 10,
            pageSizeOptions: [10, 50, 100, 250, 500],
        };
        this.widePaginationOptions = {
            theme: 'basic-wide',
            pageSize: 10,
            pageSizeOptions: [10, 50, 100, 250, 500],
        };
        this.sharedSearchOptions = {
            placeholder: 'Search for things...',
            tooltip: 'HELLO',
        };
        this.sharedDefaultSort = {
            id: 'id',
            value: 'asc',
        };
        this.globalSearchEnabled = false;
        this.refreshSubject = new rxjs__WEBPACK_IMPORTED_MODULE_7__["Subject"]();
        this.staticDataSet1 = [];
        for (let i = 0; i < 1000; i++) {
            /** @type {?} */
            const day = i < 500 ? Object(date_fns__WEBPACK_IMPORTED_MODULE_6__["subDays"])(new Date(), i) : Object(date_fns__WEBPACK_IMPORTED_MODULE_6__["addDays"])(new Date(), i - 500);
            this.staticDataSet1.push({
                id: i,
                embeddedObj: { id: i, test: `HMM ${i}`, another: { id: 777 } },
                simpleEmbeddedObj: { id: i },
                name: `(1) Name ${i}`,
                status: `(1) Status ${i}`,
                priority: this.getPriority(),
                enabled: i % 2 === 0,
                date: day,
                dateTime: day,
                time: day,
                money: i + 10,
                percent: i / 100,
                telephone: '555-555-5555',
                email: 'test@google.com',
                address: { city: 'City', state: null },
            });
        }
        this.remoteService = new RemoteMockDataService([...this.staticDataSet1.slice(0, 10)]);
    }
    /**
     * @return {?}
     */
    getPriority() {
        /** @type {?} */
        const x = Math.round(Math.random() * 50);
        return 'test ' + x.toString();
    }
    /**
     * @return {?}
     */
    getPriorityOptions() {
        /** @type {?} */
        const options = new Array();
        /** @type {?} */
        let i;
        for (i = 0; i < 49; i++) {
            options.push('test ' + i.toString());
        }
        return options;
    }
    /**
     * @param {?} type
     * @return {?}
     */
    switchPaginationType(type) {
        this.sharedPaginationOptions = Object.assign({}, this.sharedPaginationOptions, { theme: type });
        this.ref.detectChanges();
    }
    /**
     * @param {?} toggle
     * @return {?}
     */
    toggleGlobalSearch(toggle) {
        this.globalSearchEnabled = toggle;
        this.ref.detectChanges();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    log(event) {
        console.log('[DataTable] Event Triggered!', event); // tslint:disable-line
    }
    /**
     * @param {?} row
     * @return {?}
     */
    checkDisabled(row) {
        return true;
    }
    /**
     * @return {?}
     */
    configureColumns() {
        this.modalService
            .open(ConfigureColumnsModal, { columns: this.sharedColumns })
            .onClosed.then((/**
         * @param {?} columns
         * @return {?}
         */
        (columns) => {
            if (columns) {
                /** @type {?} */
                const enabledColumns = columns.filter((/**
                 * @param {?} column
                 * @return {?}
                 */
                (column) => column.enabled));
                this.sharedDisplayColumns = ['selection', 'expand', ...enabledColumns.map((/**
                     * @param {?} column
                     * @return {?}
                     */
                    (column) => column.id))];
                this.ref.markForCheck();
            }
        }));
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onPreferencesChanged(event) {
        console.log('Preferences changed (persist manually):', event); // tslint:disable-line
    }
    /**
     * @return {?}
     */
    refresh() {
        this.refreshSubject.next();
    }
}
DataTableRemoteExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'data-table-remote-example',
                template: "<novo-data-table [dataTableService]=\"remoteService\"\n                 [columns]=\"sharedColumns\"\n                 [allowMultipleFilters]=\"true\"\n                 [hideGlobalSearch]=\"!globalSearchEnabled\"\n                 [displayedColumns]=\"sharedDisplayColumns\"\n                 [paginationOptions]=\"widePaginationOptions\"\n                 [fixedHeader]=\"true\">\n  <!-- Custom Cell -- passed with template property on Column -->\n  <ng-template novoTemplate=\"custom\"\n               let-row\n               let-col=\"col\">\n    <b>CUSTOM</b> {{ row.name }}\n    <b>CUSTOM</b>\n  </ng-template>\n</novo-data-table>\n",
                changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectionStrategy"].OnPush,
                styles: [""]
            }] }
];
/** @nocollapse */
DataTableRemoteExample.ctorParameters = () => [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectorRef"] },
    { type: novo_elements__WEBPACK_IMPORTED_MODULE_3__["NovoModalService"] }
];
if (false) {}
class RemoteMockDataService extends novo_elements__WEBPACK_IMPORTED_MODULE_3__["RemoteDataTableService"] {
    /**
     * @param {?} data
     */
    constructor(data) {
        super();
        this.data = data;
    }
    /**
     * @param {?} sort
     * @param {?} filter
     * @param {?} page
     * @param {?} pageSize
     * @param {?=} globalSearch
     * @return {?}
     */
    getTableResults(sort, filter, page, pageSize, globalSearch) {
        /** @type {?} */
        const whereQuery = this.buildWhereClause(filter);
        /** @type {?} */
        const sortQuery = this.buildSortColumn(sort);
        /** @type {?} */
        const pageQuery = this.buildStart(page, pageSize);
        this.url = `http://mock-api.com?where=${whereQuery}&sort=${sortQuery}&pageSize=${pageSize}&page=${pageQuery}`;
        return Object(rxjs__WEBPACK_IMPORTED_MODULE_7__["of"])({ results: this.data, total: this.data.length }).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_5__["delay"])(5000));
    }
    /**
     * @private
     * @param {?} filter
     * @return {?}
     */
    buildWhereClause(filter) {
        /** @type {?} */
        const query = {};
        if (filter) {
            /** @type {?} */
            const filters = novo_elements__WEBPACK_IMPORTED_MODULE_3__["Helpers"].convertToArray(filter);
            filters.forEach((/**
             * @param {?} aFilter
             * @return {?}
             */
            (aFilter) => {
                query[aFilter.id] = aFilter.transform ? aFilter.transform(aFilter.value) : aFilter.value;
            }));
        }
        return this.toQuerySyntax(query);
    }
    /**
     * @private
     * @param {?} sort
     * @return {?}
     */
    buildSortColumn(sort) {
        if (sort) {
            /** @type {?} */
            let value = sort.id;
            if (sort.transform) {
                value = sort.transform(value);
            }
            return sort.value === 'asc' ? value : `-${value}`;
        }
        return '';
    }
    /**
     * @private
     * @param {?} page
     * @param {?} pageSize
     * @return {?}
     */
    buildStart(page, pageSize) {
        return (page || 0) * pageSize;
    }
    /**
     * @private
     * @param {?} data
     * @return {?}
     */
    toQuerySyntax(data) {
        /** @type {?} */
        const queries = [];
        for (const key in data) {
            /** @type {?} */
            const value = data[key];
            if (key === 'or') {
                queries.push(`(${this.toQuerySyntax(value).replace(/ AND /g, ' OR ')})`);
            }
            else {
                queries.push(this.parseQueryValue(key, value));
            }
        }
        return queries.join(' AND ');
    }
    /**
     * @private
     * @param {?} key
     * @param {?} value
     * @param {?=} isNot
     * @return {?}
     */
    parseQueryValue(key, value, isNot = false) {
        /** @type {?} */
        const clauses = [];
        /** @type {?} */
        const IN = isNot ? ' NOT IN ' : ' IN ';
        /** @type {?} */
        const EQ = isNot ? '<>' : '=';
        /** @type {?} */
        const GT = isNot ? '<' : '>=';
        /** @type {?} */
        const LT = isNot ? '>=' : '<';
        if (Array.isArray(value)) {
            clauses.push(`${key}${IN}(${this.writeQueryValues(value)})`);
        }
        else if (value instanceof Object) {
            if (typeof value.isNull === 'boolean') {
                /** @type {?} */
                const query = value.isNull ? 'IS NULL' : 'IS NOT NULL';
                clauses.push(`${key} ${query}`);
            }
            if (value.min !== null && value.min !== undefined) {
                clauses.push(`${key}${GT}${this.writeQueryValue(value.min)}`);
            }
            if (value.max !== null && value.max !== undefined) {
                clauses.push(`${key}${LT}${this.writeQueryValue(value.max)}`);
            }
            if (value.any && Array.isArray(value.any)) {
                clauses.push(`${key}${IN}(${this.writeQueryValues(value.any)})`);
            }
            if (value.all && Array.isArray(value.all)) {
                clauses.push(`${key}${IN}(${this.writeQueryValues(value.all)})`);
            }
            if (value.not !== null && value.not !== undefined) {
                clauses.push(this.parseQueryValue(key, value.not, true));
            }
            if (value.like !== null && value.like !== undefined) {
                clauses.push(`${key} like '%${value.like}%'`);
            }
            if (value.lookup !== null && value.lookup !== undefined) {
                /** @type {?} */
                const obj = {};
                obj[key] = value.lookup;
                clauses.push(this.toQuerySyntax(obj));
            }
            if (value.with !== null && value.with !== undefined) {
                clauses.push(`${key} IS NOT EMPTY`);
            }
            if (value.without !== null && value.without !== undefined) {
                clauses.push(`${key} IS EMPTY`);
            }
            if (value.or !== null && value.or !== undefined) {
                /** @type {?} */
                const obj = {};
                obj[key] = value.or;
                clauses.push(this.toQuerySyntax(obj).replace('AND', 'OR'));
            }
            for (const subkey in value) {
                if (['min', 'max', 'any', 'all', 'not', 'or', 'like', 'lookup', 'with', 'without', 'isNull'].indexOf(subkey) < 0) {
                    /** @type {?} */
                    const subvalue = value[subkey];
                    clauses.push(this.parseQueryValue(`${key}.${subkey}`, subvalue));
                }
            }
        }
        else {
            clauses.push(`${key}${EQ}${this.writeQueryValue(value)}`);
        }
        return clauses.join(' AND ');
    }
    /**
     * @private
     * @param {?} values
     * @return {?}
     */
    writeQueryValues(values) {
        if (typeof values[0] === 'number' || typeof values[0] === 'boolean') {
            return `${values.join(',')}`;
        }
        else {
            return `'${values.join(`','`)}'`;
        }
    }
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    writeQueryValue(value) {
        if (value instanceof Date) {
            return value.getTime();
        }
        else if (typeof value === 'number' || typeof value === 'boolean') {
            return `${value}`;
        }
        else {
            return `'${value.replace(/\*/g, '')}'`;
        }
    }
}
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: components/data-table/data-table-rows/data-table-rows-example.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@title Rows Data Table Example
 */
class DataTableRowsExample {
    /**
     * @param {?} ref
     * @param {?} modalService
     */
    constructor(ref, modalService) {
        this.ref = ref;
        this.modalService = modalService;
        // Table configuration
        this.dataSetOptions = [{ label: 'Dataset #1', value: 1 }, { label: 'Dataset #2', value: 2 }, { label: 'Dataset #3', value: 3 }];
        this.loadedDataSet = 1;
        this.paginationTypeOptions = [{ label: 'Standard', value: 'standard' }, { label: 'Basic', value: 'basic' }];
        this.loadedPaginationType = 'standard';
        this.globalSearchOptions = [{ label: 'Show', value: true }, { label: 'Hide', value: false }];
        this.loadedGlobalSearch = false;
        this.customStatusColumnValue = '';
        this.customStatusColumnOptions = [
            {
                label: 'Has A 5 in status',
                value: '5',
            },
            {
                label: 'All',
                value: '',
            },
        ];
        // Shared configuration
        this.sharedColumns = [
            {
                id: 'preview',
                type: 'action',
                enabled: true,
                handlers: {
                    click: this.preview.bind(this),
                },
                action: {
                    icon: 'preview',
                },
            },
            {
                id: 'actions',
                type: 'action',
                label: 'Actions',
                enabled: true,
                action: {
                    options: [
                        { label: 'Action 1', handlers: { click: this.log.bind(this) } },
                        { label: 'Action 2', handlers: { click: this.log.bind(this) }, disabled: true },
                        { label: 'Action 3', handlers: { click: this.log.bind(this) }, disabledFunc: this.checkDisabled.bind(this) },
                    ],
                },
            },
            {
                id: 'id',
                label: 'ID',
                enabled: true,
                type: 'text',
                filterable: {
                    type: 'number',
                },
                sortable: true,
            },
            {
                id: 'telephone',
                label: 'Phone',
                type: 'link:tel',
                resizable: true,
                attributes: {
                    target: '_blank',
                },
            },
            {
                id: 'email',
                label: 'Email',
                type: 'link:mailto',
                attributes: {
                    target: '_blank',
                },
            },
            {
                id: 'address',
                label: 'Address',
                type: 'text',
                format: ['$city, $state', '$city', '$state'],
            },
            {
                id: 'embeddedObj',
                label: 'Embedded (hard)',
                enabled: true,
                format: ['$another.id', '$firstName $lastName'],
                type: 'link',
                handlers: {
                    click: this.log.bind(this),
                },
                filterable: true,
            },
            {
                id: 'simpleEmbeddedObj',
                label: 'Embedded (simple)',
                enabled: true,
                format: '$id',
                type: 'text',
                filterable: true,
                sortable: true,
            },
            {
                id: 'date',
                label: 'Date',
                enabled: true,
                type: 'date',
                filterable: {
                    type: 'date',
                    allowCustomRange: true,
                },
                sortable: true,
                format: '$year-$month-$day $hour:$minute',
            },
            {
                id: 'dateTime',
                label: 'DateTime',
                enabled: false,
                type: 'datetime',
            },
            {
                id: 'time',
                label: 'Time',
                enabled: false,
                type: 'time',
            },
            {
                id: 'money',
                label: 'Money',
                enabled: false,
                type: 'currency',
                filterable: true,
                sortable: true,
            },
            {
                id: 'percent',
                label: 'Percent',
                enabled: true,
                type: 'percent',
                filterable: true,
                sortable: true,
            },
            {
                id: 'bigdecimal',
                label: 'BigDecimal',
                enabled: true,
                type: 'bigdecimal',
                filterable: true,
                sortable: true,
            },
            {
                id: 'name',
                label: 'Name',
                labelIcon: 'bull',
                enabled: true,
                type: 'text',
                template: 'custom',
            },
            {
                id: 'status',
                label: 'Status',
                enabled: true,
                type: 'text',
                filterable: { type: 'custom' },
                sortable: true,
            },
            {
                id: 'priority',
                label: 'Priority',
                enabled: true,
                type: 'text',
                filterable: {
                    type: 'multi-select',
                    options: this.getPriorityOptions(),
                },
                sortable: true,
            },
            {
                id: 'enabled',
                label: 'Enabled',
                enabled: true,
                type: 'text',
                sortable: true,
                filterable: {
                    type: 'select',
                    options: [{ value: true, label: 'True' }, { value: false, label: 'False' }],
                },
            },
            {
                id: 'edit',
                type: 'action',
                enabled: true,
                disabled: true,
                handlers: {
                    click: this.log.bind(this),
                },
                action: {
                    icon: 'edit',
                },
            },
        ];
        this.sharedDisplayColumns = [
            'selection',
            'expand',
            'preview',
            'actions',
            'id',
            'date',
            'name',
            'telephone',
            'email',
            'simpleEmbeddedObj',
            'status',
            'priority',
            'percent',
            'bigdecimal',
            'embeddedObj',
            'edit',
        ];
        this.sharedPaginationOptions = {
            theme: 'standard',
            pageSize: 10,
            pageSizeOptions: [10, 50, 100, 250, 500],
        };
        this.widePaginationOptions = {
            theme: 'basic-wide',
            pageSize: 10,
            pageSizeOptions: [10, 50, 100, 250, 500],
        };
        this.sharedSearchOptions = {
            placeholder: 'Search for things...',
            tooltip: 'HELLO',
        };
        this.sharedDefaultSort = {
            id: 'id',
            value: 'asc',
        };
        this.globalSearchEnabled = false;
        this.refreshSubject = new rxjs__WEBPACK_IMPORTED_MODULE_7__["Subject"]();
        this.staticDataSet1 = [];
        this.staticDataSet2 = [];
        this.staticDataSet3 = [];
        this.selectedRecordId = '';
        for (let i = 0; i < 1000; i++) {
            /** @type {?} */
            const day = i < 500 ? Object(date_fns__WEBPACK_IMPORTED_MODULE_6__["subDays"])(new Date(), i) : Object(date_fns__WEBPACK_IMPORTED_MODULE_6__["addDays"])(new Date(), i - 500);
            this.staticDataSet1.push({
                id: i,
                embeddedObj: { id: i, test: `HMM ${i}`, another: { id: 777 } },
                simpleEmbeddedObj: { id: i },
                name: `(1) Name ${i}`,
                status: `(1) Status ${i}`,
                priority: this.getPriority(),
                enabled: i % 2 === 0,
                date: day,
                dateTime: day,
                time: day,
                money: i + 10,
                percent: i / 100,
                telephone: '555-555-5555',
                email: 'test@google.com',
                address: { city: 'City', state: null },
                bigdecimal: 3.25 * (i + 1) * (i % 5 === 1 ? -1 : 1),
            });
            this.staticDataSet2.push({
                id: i + 1001,
                embeddedObj: { id: i, test: `HMM ${i}`, another: { id: 777 } },
                simpleEmbeddedObj: { id: i },
                name: `(2) Name ${i}`,
                status: `(2) Status ${i}`,
                priority: this.getPriority(),
                enabled: i % 2 === 0,
                date: day,
                dateTime: day,
                time: day,
                money: i + 10,
                percent: i / 100,
                telephone: '555-555-5555',
                email: 'test@google.com',
                address: { city: 'City', state: 'State' },
                bigdecimal: -75,
            });
        }
        this.basicRows = [...this.staticDataSet1];
    }
    /**
     * @return {?}
     */
    getPriority() {
        /** @type {?} */
        const x = Math.round(Math.random() * 50);
        return 'test ' + x.toString();
    }
    /**
     * @return {?}
     */
    getPriorityOptions() {
        /** @type {?} */
        const options = new Array();
        /** @type {?} */
        let i;
        for (i = 0; i < 49; i++) {
            options.push('test ' + i.toString());
        }
        return options;
    }
    /**
     * @param {?} type
     * @return {?}
     */
    switchPaginationType(type) {
        this.sharedPaginationOptions = Object.assign({}, this.sharedPaginationOptions, { theme: type });
        this.ref.detectChanges();
    }
    /**
     * @param {?} setIndex
     * @return {?}
     */
    loadDataset(setIndex) {
        switch (setIndex) {
            case 1:
                this.basicRows = [...this.staticDataSet1];
                break;
            case 2:
                this.basicRows = [...this.staticDataSet2];
                break;
            case 3:
                this.basicRows = [...this.staticDataSet3];
                break;
            default:
                break;
        }
    }
    /**
     * @param {?} toggle
     * @return {?}
     */
    toggleGlobalSearch(toggle) {
        this.globalSearchEnabled = toggle;
        this.ref.detectChanges();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    log(event) {
        console.log('[DataTable] Event Triggered!', event); // tslint:disable-line
    }
    /**
     * @param {?} event
     * @return {?}
     */
    preview(event) {
        this.selectedRecordId = event.row.id.toString();
        this.log(event);
    }
    /**
     * @return {?}
     */
    checkDisabled() {
        return true;
    }
    /**
     * @return {?}
     */
    configureColumns() {
        this.modalService
            .open(ConfigureColumnsModal, { columns: this.sharedColumns })
            .onClosed.then((/**
         * @param {?} columns
         * @return {?}
         */
        (columns) => {
            if (columns) {
                /** @type {?} */
                const enabledColumns = columns.filter((/**
                 * @param {?} column
                 * @return {?}
                 */
                (column) => column.enabled));
                this.sharedDisplayColumns = ['selection', 'expand', ...enabledColumns.map((/**
                     * @param {?} column
                     * @return {?}
                     */
                    (column) => column.id))];
                this.ref.markForCheck();
            }
        }));
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onPreferencesChanged(event) {
        console.log('Preferences changed (persist manually):', event); // tslint:disable-line
    }
    /**
     * @param {?} event
     * @return {?}
     */
    resized(event) {
        console.log('Column Width changed (persist manually): ', event); // tslint:disable-line
    }
    /**
     * @return {?}
     */
    refresh() {
        this.refreshSubject.next();
    }
    /**
     * @param {?} expand
     * @return {?}
     */
    toggleRowDetails(expand) {
        this.table.expandRows(expand);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    filterList(value) {
        this.table.state.filter = { id: 'status', type: 'text', value };
        this.table.state.updates.next({
            globalSearch: this.table.state.globalSearch,
            filter: this.table.state.filter,
            sort: this.table.state.sort,
        });
        this.ref.markForCheck();
    }
}
DataTableRowsExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'data-table-rows-example',
                template: "<h6>Change Dataset</h6>\n    <novo-tiles [options]=\"dataSetOptions\" (onChange)=\"loadDataset($event)\" [(ngModel)]=\"loadedDataSet\"></novo-tiles>\n    <h6>Change Pagination Style</h6>\n    <novo-tiles [options]=\"paginationTypeOptions\" (onChange)=\"switchPaginationType($event)\" [(ngModel)]=\"loadedPaginationType\"></novo-tiles>\n    <h6>Toggle Global Search</h6>\n    <novo-tiles [options]=\"globalSearchOptions\" (onChange)=\"toggleGlobalSearch($event)\" [(ngModel)]=\"loadedGlobalSearch\"></novo-tiles>\n    <h6>Configure Columns</h6>\n    <button theme=\"primary\" (click)=\"configureColumns()\">Configure Columns</button>\n    <h6>Configure Columns</h6>\n    <button theme=\"primary\" (click)=\"toggleRowDetails(true)\">Show Row Details (first table)</button>\n    <button theme=\"primary\" (click)=\"toggleRowDetails(false)\">Hide Row Details (first table)</button>\n\n<div class=\"fixedWindowSize\">\n<novo-data-table [rows]=\"basicRows\"\n                 [columns]=\"sharedColumns\"\n                 [allowMultipleFilters]=\"true\"\n                 [hideGlobalSearch]=\"!globalSearchEnabled\"\n                 [displayedColumns]=\"sharedDisplayColumns\"\n                 [paginationOptions]=\"sharedPaginationOptions\"\n                 name=\"demo-basic-rows\"\n                 [refreshSubject]=\"refreshSubject\"\n                 (preferencesChanged)=\"onPreferencesChanged($event)\"\n                 (resized)=\"resized($event)\"\n                 [activeRowIdentifier]=\"selectedRecordId\"\n                 [fixedHeader]=\"true\"\n                 #basic>\n  <!-- Custom Actions -->\n  <ng-template novoTemplate=\"customActions\">\n    <span>Total: {{ basic.dataSource.currentTotal }}</span>\n    <novo-data-table-clear-button *ngIf=\"basic.state.userFiltered\"></novo-data-table-clear-button>\n    <button theme=\"secondary\"\n            (click)=\"refresh()\">Refresh</button>\n    <novo-dropdown side=\"right\">\n      <button theme=\"primary\"\n              icon=\"collapse\"\n              inverse>\n        <span *ngIf=\"basic.state.selected.length === 0\">Actions</span>\n        <span *ngIf=\"basic.state.selected.length !== 0\">{{ basic.state.selected.length }}!</span>\n      </button>\n      <list>\n        <item>Action 1</item>\n        <item>Action 2</item>\n        <item [disabled]=\"basic.state.selected.length === 0\">Action 3</item>\n      </list>\n    </novo-dropdown>\n  </ng-template>\n  <!-- Custom Empty Message -->\n  <ng-template novoTemplate=\"emptyMessage\">Yo! No Records!</ng-template>\n  <!-- Custom No Results Message -->\n  <ng-template novoTemplate=\"noResultsMessage\">Yo! That search is really complex, no data matches that!</ng-template>\n  <!-- Custom Cell for ID Column -->\n  <ng-template novoTemplate=\"id\"\n               let-row\n               let-col=\"col\">\n    <i class=\"bhi-bull\"></i> {{ row.id }}\n  </ng-template>\n  <!-- Custom Cell -- passed with template property on Column -->\n  <ng-template novoTemplate=\"custom\"\n               let-row\n               let-col=\"col\">\n    <b>CUSTOM</b> {{ row.name }}\n    <b>CUSTOM</b>\n  </ng-template>\n  <!-- Row Details Template -->\n  <ng-template novoTemplate=\"expandedRow\"\n               let-row>\n    Why look at that, you clicked the details!\n  </ng-template>\n  <!-- Custom Status Filter -->\n  <ng-template novoTemplate=\"column-filter-status\">\n    <novo-tiles [options]=\"customStatusColumnOptions\" (onChange)=\"filterList($event)\" [(ngModel)]=\"customStatusColumnValue\"></novo-tiles>\n  </ng-template>\n</novo-data-table>\n</div>\n",
                changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectionStrategy"].OnPush,
                styles: [".fixedWindowSize{height:600px}novo-data-table{height:100%}"]
            }] }
];
/** @nocollapse */
DataTableRowsExample.ctorParameters = () => [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectorRef"] },
    { type: novo_elements__WEBPACK_IMPORTED_MODULE_3__["NovoModalService"] }
];
DataTableRowsExample.propDecorators = {
    table: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"], args: ['basic', { static: false },] }]
};
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: components/data-table/data-table-service/data-table-service-example.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@title Data Table Service Example
 */
class DataTableServiceExample {
    /**
     * @param {?} ref
     * @param {?} modalService
     */
    constructor(ref, modalService) {
        this.ref = ref;
        this.modalService = modalService;
        // Table configuration
        this.dataSetOptions = [{ label: 'Dataset #1', value: 1 }, { label: 'Dataset #2', value: 2 }, { label: 'Dataset #3', value: 3 }];
        this.loadedDataSet = 1;
        this.paginationTypeOptions = [{ label: 'Standard', value: 'standard' }, { label: 'Basic', value: 'basic' }];
        this.loadedPaginationType = 'standard';
        this.globalSearchOptions = [{ label: 'Show', value: true }, { label: 'Hide', value: false }];
        this.loadedGlobalSearch = false;
        // Shared configuration
        this.sharedColumns = [
            {
                id: 'preview',
                type: 'action',
                enabled: true,
                handlers: {
                    click: this.log.bind(this),
                },
                action: {
                    icon: 'preview',
                },
            },
            {
                id: 'actions',
                type: 'action',
                label: 'Actions',
                enabled: true,
                action: {
                    options: [
                        { label: 'Action 1', handlers: { click: this.log.bind(this) } },
                        { label: 'Action 2', handlers: { click: this.log.bind(this) }, disabled: true },
                        { label: 'Action 3', handlers: { click: this.log.bind(this) }, disabledFunc: this.checkDisabled.bind(this) },
                    ],
                },
            },
            {
                id: 'id',
                label: 'ID',
                enabled: true,
                type: 'text',
                filterable: {
                    type: 'number',
                },
                sortable: true,
            },
            {
                id: 'telephone',
                label: 'Phone',
                type: 'link:tel',
                attributes: {
                    target: '_blank',
                },
            },
            {
                id: 'email',
                label: 'Email',
                type: 'link:mailto',
                attributes: {
                    target: '_blank',
                },
            },
            {
                id: 'address',
                label: 'Address',
                type: 'text',
                format: ['$city, $state', '$city', '$state'],
            },
            {
                id: 'embeddedObj',
                label: 'Embedded (hard)',
                enabled: true,
                format: ['$another.id', '$firstName $lastName'],
                type: 'link',
                handlers: {
                    click: this.log.bind(this),
                },
                filterable: true,
            },
            {
                id: 'simpleEmbeddedObj',
                label: 'Embedded (simple)',
                enabled: true,
                format: '$id',
                type: 'text',
                filterable: true,
                sortable: true,
            },
            {
                id: 'date',
                label: 'Date',
                enabled: true,
                type: 'date',
                filterable: {
                    type: 'date',
                    allowCustomRange: true,
                },
                sortable: true,
            },
            {
                id: 'dateTime',
                label: 'DateTime',
                enabled: false,
                type: 'datetime',
            },
            {
                id: 'time',
                label: 'Time',
                enabled: false,
                type: 'time',
            },
            {
                id: 'money',
                label: 'Money',
                enabled: false,
                type: 'currency',
                filterable: true,
                sortable: true,
            },
            {
                id: 'percent',
                label: 'Percent',
                enabled: true,
                type: 'percent',
                filterable: true,
                sortable: true,
            },
            {
                id: 'name',
                label: 'Name',
                labelIcon: 'bull',
                enabled: true,
                type: 'text',
                template: 'custom',
            },
            {
                id: 'status',
                label: 'Status',
                enabled: true,
                type: 'text',
                filterable: true,
                sortable: true,
            },
            {
                id: 'priority',
                label: 'Priority',
                enabled: true,
                type: 'text',
                filterable: {
                    type: 'multi-select',
                    options: this.getPriorityOptions(),
                },
                sortable: true,
            },
            {
                id: 'enabled',
                label: 'Enabled',
                enabled: true,
                type: 'text',
                sortable: true,
                filterable: {
                    type: 'select',
                    options: [{ value: true, label: 'True' }, { value: false, label: 'False' }],
                },
            },
            {
                id: 'edit',
                type: 'action',
                enabled: true,
                disabled: true,
                handlers: {
                    click: this.log.bind(this),
                },
                action: {
                    icon: 'edit',
                },
            },
        ];
        this.sharedDisplayColumns = [
            'selection',
            'expand',
            'preview',
            'actions',
            'id',
            'date',
            'name',
            'telephone',
            'email',
            'simpleEmbeddedObj',
            'status',
            'priority',
            'percent',
            'embeddedObj',
            'edit',
        ];
        this.sharedPaginationOptions = {
            theme: 'standard',
            pageSize: 10,
            pageSizeOptions: [10, 50, 100, 250, 500],
        };
        this.widePaginationOptions = {
            theme: 'basic-wide',
            pageSize: 10,
            pageSizeOptions: [10, 50, 100, 250, 500],
        };
        this.sharedSearchOptions = {
            placeholder: 'Search for things...',
            tooltip: 'HELLO',
        };
        this.sharedDefaultSort = {
            id: 'id',
            value: 'asc',
        };
        this.globalSearchEnabled = false;
        this.refreshSubject = new rxjs__WEBPACK_IMPORTED_MODULE_7__["Subject"]();
        this.staticDataSet1 = [];
        this.staticDataSet2 = [];
        this.staticDataSet3 = [];
        for (let i = 0; i < 1000; i++) {
            /** @type {?} */
            const day = i < 500 ? Object(date_fns__WEBPACK_IMPORTED_MODULE_6__["subDays"])(new Date(), i) : Object(date_fns__WEBPACK_IMPORTED_MODULE_6__["addDays"])(new Date(), i - 500);
            this.staticDataSet1.push({
                id: i,
                embeddedObj: { id: i, test: `HMM ${i}`, another: { id: 777 } },
                simpleEmbeddedObj: { id: i },
                name: `(1) Name ${i}`,
                status: `(1) Status ${i}`,
                priority: this.getPriority(),
                enabled: i % 2 === 0,
                date: day,
                dateTime: day,
                time: day,
                money: i + 10,
                percent: i / 100,
                telephone: '555-555-5555',
                email: 'test@google.com',
                address: { city: 'City', state: null },
            });
            this.staticDataSet2.push({
                id: i + 1001,
                embeddedObj: { id: i, test: `HMM ${i}`, another: { id: 777 } },
                simpleEmbeddedObj: { id: i },
                name: `(2) Name ${i}`,
                status: `(2) Status ${i}`,
                priority: this.getPriority(),
                enabled: i % 2 === 0,
                date: day,
                dateTime: day,
                time: day,
                money: i + 10,
                percent: i / 100,
                telephone: '555-555-5555',
                email: 'test@google.com',
                address: { city: 'City', state: 'State' },
            });
        }
        this.basicService = new novo_elements__WEBPACK_IMPORTED_MODULE_3__["StaticDataTableService"]([...this.staticDataSet1]);
    }
    /**
     * @return {?}
     */
    getPriority() {
        /** @type {?} */
        const x = Math.round(Math.random() * 50);
        return 'test ' + x.toString();
    }
    /**
     * @return {?}
     */
    getPriorityOptions() {
        /** @type {?} */
        const options = new Array();
        /** @type {?} */
        let i;
        for (i = 0; i < 49; i++) {
            options.push('test ' + i.toString());
        }
        return options;
    }
    /**
     * @param {?} type
     * @return {?}
     */
    switchPaginationType(type) {
        this.sharedPaginationOptions = Object.assign({}, this.sharedPaginationOptions, { theme: type });
        this.ref.detectChanges();
    }
    /**
     * @param {?} setIndex
     * @return {?}
     */
    loadDataset(setIndex) {
        switch (setIndex) {
            case 1:
                this.basicService = new novo_elements__WEBPACK_IMPORTED_MODULE_3__["StaticDataTableService"]([...this.staticDataSet1]);
                break;
            case 2:
                this.basicService = new novo_elements__WEBPACK_IMPORTED_MODULE_3__["StaticDataTableService"]([...this.staticDataSet2]);
                break;
            case 3:
                this.basicService = new novo_elements__WEBPACK_IMPORTED_MODULE_3__["StaticDataTableService"]([...this.staticDataSet3]);
                break;
            default:
                break;
        }
    }
    /**
     * @param {?} toggle
     * @return {?}
     */
    toggleGlobalSearch(toggle) {
        this.globalSearchEnabled = toggle;
        this.ref.detectChanges();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    log(event) {
        console.log('[DataTable] Event Triggered!', event); // tslint:disable-line
    }
    /**
     * @return {?}
     */
    checkDisabled() {
        return true;
    }
    /**
     * @return {?}
     */
    configureColumns() {
        this.modalService
            .open(ConfigureColumnsModal, { columns: this.sharedColumns })
            .onClosed.then((/**
         * @param {?} columns
         * @return {?}
         */
        (columns) => {
            if (columns) {
                /** @type {?} */
                const enabledColumns = columns.filter((/**
                 * @param {?} column
                 * @return {?}
                 */
                (column) => column.enabled));
                this.sharedDisplayColumns = ['selection', 'expand', ...enabledColumns.map((/**
                     * @param {?} column
                     * @return {?}
                     */
                    (column) => column.id))];
                this.ref.markForCheck();
            }
        }));
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onPreferencesChanged(event) {
        console.log('Preferences changed (persist manually):', event); // tslint:disable-line
    }
    /**
     * @return {?}
     */
    refresh() {
        this.refreshSubject.next();
    }
}
DataTableServiceExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'data-table-service-example',
                template: "<novo-data-table [dataTableService]=\"basicService\"\n                 [columns]=\"sharedColumns\"\n                 [allowMultipleFilters]=\"true\"\n                 [hideGlobalSearch]=\"!globalSearchEnabled\"\n                 [displayedColumns]=\"sharedDisplayColumns\"\n                 [paginationOptions]=\"sharedPaginationOptions\">\n  <!-- Custom Cell -- passed with template property on Column -->\n  <ng-template novoTemplate=\"custom\"\n               let-row\n               let-col=\"col\">\n    <b>CUSTOM</b> {{ row.name }}\n    <b>CUSTOM</b>\n  </ng-template>\n</novo-data-table>\n",
                changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectionStrategy"].OnPush,
                styles: [""]
            }] }
];
/** @nocollapse */
DataTableServiceExample.ctorParameters = () => [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectorRef"] },
    { type: novo_elements__WEBPACK_IMPORTED_MODULE_3__["NovoModalService"] }
];
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: components/dropdown/basic-drop-down/basic-drop-down-example.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@title Basic Drop Down
 */
class BasicDropDownExample {
    /**
     * @param {?=} event
     * @return {?}
     */
    clickMe(event) {
        window.alert(event);
    }
}
BasicDropDownExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'basic-drop-down-example',
                template: "<novo-dropdown>\n  <button type=\"button\"\n          theme=\"secondary\"\n          icon=\"collapse\"\n          inverse>Actions</button>\n  <list>\n    <dropdown-item-header>Section 1</dropdown-item-header>\n    <item (action)=\"clickMe('Hello!')\">Test</item>\n    <item (action)=\"clickMe('Another!')\">Josh</item>\n    <item tooltip=\"Test tooltip :)\"\n          tooltipPosition=\"right\"\n          [disabled]=\"true\"\n          (action)=\"clickMe()\">Menu Item With Lots of Text in it to Show Dynamic Width</item>\n    <dropdown-item-header>Section 2</dropdown-item-header>\n    <item (action)=\"clickMe('Hello!')\">Germany</item>\n    <item (action)=\"clickMe('Another!')\">Algebra</item>\n    <item tooltip=\"Test tooltip :)\"\n          tooltipPosition=\"right\"\n          [disabled]=\"true\"\n          (action)=\"clickMe()\">Blah</item>\n  </list>\n</novo-dropdown>\n<novo-dropdown side=\"right\">\n  <button type=\"button\"\n          theme=\"icon\"\n          icon=\"menu\"\n          inverse></button>\n  <list>\n    <item>Action 1</item>\n    <item tooltip=\"Test tooltip :)\"\n          tooltipPosition=\"left\">Action 2</item>\n    <item>Action 3</item>\n    <item>Action 4</item>\n    <item>Action 5</item>\n    <item>Action 6</item>\n    <item>Action 7</item>\n    <item>Action 8</item>\n    <item>Action 9</item>\n    <item>Action 10</item>\n    <item>Menu Item With Lots of Text in it to Show Dynamic Width</item>\n  </list>\n</novo-dropdown>\n",
                styles: [""]
            }] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: components/dropdown/custom-drop-down/custom-drop-down-example.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@title Custom Drop Down
 */
class CustomDropDownExample {
    /**
     * @param {?=} event
     * @return {?}
     */
    clickMe(event) {
        window.alert(event);
    }
}
CustomDropDownExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'custom-drop-down-example',
                template: "<novo-dropdown containerClass=\"custom-class\"\n               scrollStrategy=\"close\">\n  <button type=\"button\"\n          theme=\"secondary\"\n          icon=\"collapse\"\n          inverse>I Have A Custom Class!</button>\n  <list>\n    <item (action)=\"clickMe('Hello!')\">Action 1</item>\n    <item (action)=\"clickMe('Another!')\">Action 2</item>\n  </list>\n</novo-dropdown>\n",
                styles: [""]
            }] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: components/dropdown/large-drop-down/large-drop-down-example.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@title Large Drop Down
 */
class LargeDropDownExample {
    constructor() {
        this.MOCK_WORDS = [
            'lorem',
            'ipsum',
            'dolor',
            'sit',
            'amet',
            'consectetur',
            'adipiscing',
            'elit',
            'curabitur',
            'vel',
            'hendrerit',
            'libero',
            'eleifend',
            'blandit',
            'nunc',
            'ornare',
            'odio',
            'ut',
            'orci',
            'gravida',
            'imperdiet',
            'nullam',
            'purus',
            'lacinia',
            'a',
            'pretium',
            'quis',
            'congue',
            'praesent',
            'sagittis',
            'laoreet',
            'auctor',
            'mauris',
            'non',
            'velit',
            'eros',
            'dictum',
            'proin',
            'accumsan',
            'sapien',
            'nec',
            'massa',
            'volutpat',
            'venenatis',
            'sed',
            'eu',
            'molestie',
            'lacus',
            'quisque',
            'porttitor',
            'ligula',
            'dui',
            'mollis',
            'tempus',
            'at',
            'magna',
            'vestibulum',
            'turpis',
            'ac',
            'diam',
            'tincidunt',
            'id',
            'condimentum',
            'enim',
            'sodales',
            'in',
            'hac',
            'habitasse',
            'platea',
            'dictumst',
            'aenean',
            'neque',
            'fusce',
            'augue',
            'leo',
            'eget',
            'semper',
            'mattis',
            'tortor',
            'scelerisque',
            'nulla',
            'interdum',
            'tellus',
            'malesuada',
            'rhoncus',
            'porta',
            'sem',
            'aliquet',
            'et',
            'nam',
            'suspendisse',
            'potenti',
            'vivamus',
            'luctus',
            'fringilla',
            'erat',
            'donec',
            'justo',
            'vehicula',
            'ultricies',
            'varius',
            'ante',
            'primis',
            'faucibus',
            'ultrices',
            'posuere',
            'cubilia',
            'curae',
            'etiam',
            'cursus',
            'aliquam',
            'quam',
            'dapibus',
            'nisl',
            'feugiat',
            'egestas',
            'class',
            'aptent',
            'taciti',
            'sociosqu',
            'ad',
            'litora',
            'torquent',
            'per',
            'conubia',
            'nostra',
            'inceptos',
            'himenaeos',
            'phasellus',
            'nibh',
            'pulvinar',
            'vitae',
            'urna',
            'iaculis',
            'lobortis',
            'nisi',
            'viverra',
            'arcu',
            'morbi',
            'pellentesque',
            'metus',
            'commodo',
            'ut',
            'facilisis',
            'felis',
            'tristique',
            'ullamcorper',
            'placerat',
            'aenean',
            'convallis',
            'sollicitudin',
            'integer',
            'rutrum',
            'duis',
            'est',
            'etiam',
            'bibendum',
            'donec',
            'pharetra',
            'vulputate',
            'maecenas',
            'mi',
            'fermentum',
            'consequat',
            'suscipit',
            'aliquam',
            'habitant',
            'senectus',
            'netus',
            'fames',
            'quisque',
            'euismod',
            'curabitur',
            'lectus',
            'elementum',
            'tempor',
            'risus',
            'cras',
        ];
    }
    /**
     * @param {?} data
     * @return {?}
     */
    clickMe(data) {
        console.log('CLICKED!', data); // tslint:disable-line
    }
}
LargeDropDownExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'large-drop-down-example',
                template: "<novo-dropdown height=\"250\">\n    <button type=\"button\"\n            theme=\"secondary\"\n            icon=\"collapse\"\n            inverse>Lots of Data Points!</button>\n    <list>\n      <item *ngFor=\"let name of MOCK_WORDS\"\n            (action)=\"clickMe(name)\">{{ name }}</item>\n    </list>\n  </novo-dropdown>\n",
                styles: [""]
            }] }
];
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: components/dropdown/multi-drop-down/multi-drop-down-example.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@title Multi Drop Down
 */
class MultiDropDownExample {
    /**
     * @param {?} data
     * @return {?}
     */
    clickMe(data) {
        console.log('CLICKED!', data); // tslint:disable-line
    }
}
MultiDropDownExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'multi-drop-down-example',
                template: "<novo-dropdown>\n    <button type=\"button\"\n            theme=\"secondary\"\n            icon=\"collapse\"\n            inverse>Keep Open</button>\n    <list>\n      <item (action)=\"clickMe('Hello!')\"\n            keepOpen=\"true\">Action 1</item>\n      <item (action)=\"clickMe('Another!')\"\n            keepOpen=\"true\">Action 2</item>\n    </list>\n  </novo-dropdown>\n",
                styles: [""]
            }] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: components/dropdown/position-drop-down/position-drop-down-example.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@title Drop Down Positions
 */
class PositionDropDownExample {
    constructor() {
        this.POSITION_OPTIONS = [
            {
                name: 'default (left)',
                description: 'Prefer bottom-left, with fallback positions (in order): top-left, bottom-right, top-right, center-left, center-right',
            },
            {
                name: 'right',
                description: 'Prefer bottom-right, with fallback positions (in order): top-right, bottom-left, top-left, center-left, center-right',
            },
            {
                name: 'above-below',
                description: 'Prefer bottom-left, with fallback positions (in order): top-left, bottom-right, top-right (no center)',
            },
            {
                name: 'right-above-below',
                description: 'Prefer bottom-left, with fallback positions (in order): top-left, bottom-right, top-right (no center)',
            },
            { name: 'center', description: 'Prefer center-left, with fallback positions above and below, but always covering the dropdown' },
            { name: 'bottom', description: 'Prefer bottom-left, with fallback position of bottom-right' },
            { name: 'bottom-left', description: 'Always popup to the bottom-left' },
            { name: 'bottom-right', description: 'Always popup to the bottom-right' },
            { name: 'top-left', description: 'Always popup to the top-left' },
            { name: 'top-right', description: 'Always popup to the top-right' },
        ];
    }
    /**
     * @param {?} data
     * @return {?}
     */
    clickMe(data) {
        console.log('CLICKED!', data); // tslint:disable-line
    }
}
PositionDropDownExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'position-drop-down-example',
                template: "<novo-dropdown side=\"default\">\n    <button type=\"button\"\n            theme=\"secondary\"\n            icon=\"collapse\"\n            inverse>Default</button>\n    <list>\n      <item>Five</item>\n      <item>Items</item>\n      <item>For</item>\n      <item>Position</item>\n      <item>Test</item>\n    </list>\n  </novo-dropdown>\n  <novo-dropdown side=\"right\">\n    <button type=\"button\"\n            theme=\"secondary\"\n            icon=\"collapse\"\n            inverse>Right</button>\n    <list>\n      <item>Five</item>\n      <item>Items</item>\n      <item>For</item>\n      <item>Position</item>\n      <item>Test</item>\n    </list>\n  </novo-dropdown>\n  <novo-dropdown side=\"above-below\">\n    <button type=\"button\"\n            theme=\"secondary\"\n            icon=\"collapse\"\n            inverse>Above-below</button>\n    <list>\n      <item>Five</item>\n      <item>Items</item>\n      <item>For</item>\n      <item>Position</item>\n      <item>Test</item>\n    </list>\n  </novo-dropdown>\n  <novo-dropdown side=\"right-above-below\">\n    <button type=\"button\"\n            theme=\"secondary\"\n            icon=\"collapse\"\n            inverse>Right-Above-Below</button>\n    <list>\n      <item>Five</item>\n      <item>Items</item>\n      <item>For</item>\n      <item>Position</item>\n      <item>Test</item>\n    </list>\n  </novo-dropdown>\n  <novo-dropdown side=\"center\">\n    <button type=\"button\"\n            theme=\"secondary\"\n            icon=\"collapse\"\n            inverse>Center</button>\n    <list>\n      <item>Five</item>\n      <item>Items</item>\n      <item>For</item>\n      <item>Position</item>\n      <item>Test</item>\n    </list>\n  </novo-dropdown>\n  <novo-dropdown side=\"bottom\">\n    <button type=\"button\"\n            theme=\"secondary\"\n            icon=\"collapse\"\n            inverse>Bottom</button>\n    <list>\n      <item>Five</item>\n      <item>Items</item>\n      <item>For</item>\n      <item>Position</item>\n      <item>Test</item>\n    </list>\n  </novo-dropdown>\n  <novo-dropdown side=\"bottom-left\">\n    <button type=\"button\"\n            theme=\"secondary\"\n            icon=\"collapse\"\n            inverse>Bottom-Left</button>\n    <list>\n      <item>Five</item>\n      <item>Items</item>\n      <item>For</item>\n      <item>Position</item>\n      <item>Test</item>\n    </list>\n  </novo-dropdown>\n  <novo-dropdown side=\"bottom-right\">\n    <button type=\"button\"\n            theme=\"secondary\"\n            icon=\"collapse\"\n            inverse>Bottom-Right</button>\n    <list>\n      <item>Five</item>\n      <item>Items</item>\n      <item>For</item>\n      <item>Position</item>\n      <item>Test</item>\n    </list>\n  </novo-dropdown>\n  <novo-dropdown side=\"top-left\">\n    <button type=\"button\"\n            theme=\"secondary\"\n            icon=\"collapse\"\n            inverse>Top-Left</button>\n    <list>\n      <item>Five</item>\n      <item>Items</item>\n      <item>For</item>\n      <item>Position</item>\n      <item>Test</item>\n    </list>\n  </novo-dropdown>\n  <novo-dropdown side=\"top-right\">\n    <button type=\"button\"\n            theme=\"secondary\"\n            icon=\"collapse\"\n            inverse>Top-Right</button>\n    <list>\n      <item>Five</item>\n      <item>Items</item>\n      <item>For</item>\n      <item>Position</item>\n      <item>Test</item>\n    </list>\n  </novo-dropdown>\n",
                styles: [":host{background:#4a89dc;padding:.5rem;display:flex;justify-content:space-between;align-items:center;flex-wrap:wrap}:host novo-dropdown{margin:.5rem}"]
            }] }
];
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: components/dropdown/scrollable-drop-down/scrollable-drop-down-example.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@title Scrollable Drop Down
 */
class ScrollableDropDownExample {
    /**
     * @param {?=} event
     * @return {?}
     */
    clickMe(event) {
        window.alert(event);
    }
}
ScrollableDropDownExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'scrollable-drop-down-example',
                template: "<div class=\"scrollable-container\" cdkScrollable>\n    <div class=\"scrollable-content\">\n      <novo-dropdown>\n        <button type=\"button\"\n                theme=\"secondary\"\n                icon=\"collapse\"\n                inverse>Inside a Scrollable Container</button>\n        <list>\n          <item (action)=\"clickMe('This')\"\n                keepOpen=\"true\">This</item>\n          <item (action)=\"clickMe('Scrolls!')\"\n                keepOpen=\"true\">Scrolls!</item>\n        </list>\n      </novo-dropdown>\n    </div>\n  </div>\n",
                styles: [":host{background:#4a89dc;display:block;justify-content:space-between;align-items:center;padding:.5rem}:host .scrollable-container{max-height:10rem;overflow:scroll}:host .scrollable-container .scrollable-content{height:30em}:host novo-dropdown{margin:5rem}"]
            }] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: components/icon/basic-icons/basic-icons-example.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@title Basic Icons
 */
class BasicIconsExample {
}
BasicIconsExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'basic-icons-example',
                template: "\n<novo-icon>candidate</novo-icon>\n<novo-icon>job</novo-icon>\n<novo-icon>company</novo-icon>\n<novo-icon>lead</novo-icon>\n<novo-icon>opportunity</novo-icon>\n<br>\n<i class=\"bhi-candidate\"></i>\n<i class=\"bhi-person\"></i>\n<i class=\"bhi-job\"></i>\n<i class=\"bhi-company\"></i>\n<i class=\"bhi-lead\"></i>\n<i class=\"bhi-opportunity\"></i>\n",
                styles: [""]
            }] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: components/icon/raised-icons/raised-icons-example.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@title Raised Icons
 */
class RaisedIconsExample {
}
RaisedIconsExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'raised-icons-example',
                template: "<novo-icon theme=\"candidate\" raised=\"true\">candidate</novo-icon>\n<novo-icon theme=\"job\" raised=\"true\">job</novo-icon>\n<novo-icon theme=\"company\" raised=\"true\">company</novo-icon>\n<novo-icon theme=\"submission\" raised=\"true\">star-o</novo-icon>\n<novo-icon theme=\"placement\" raised=\"true\">star</novo-icon>\n",
                styles: [""]
            }] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: components/icon/themed-icons/themed-icons-example.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@title Themed Icons
 */
class ThemedIconsExample {
}
ThemedIconsExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'themed-icons-example',
                template: "\n<novo-icon color=\"candidate\">candidate</novo-icon>\n<novo-icon color=\"job\">job</novo-icon>\n<novo-icon color=\"company\">company</novo-icon>\n<novo-icon color=\"submission\">star-o</novo-icon>\n<novo-icon color=\"placement\">star</novo-icon>\n<br>\n<novo-icon theme=\"candidate\">candidate</novo-icon>\n<novo-icon theme=\"job\">job</novo-icon>\n<novo-icon theme=\"company\">company</novo-icon>\n<novo-icon theme=\"submission\">star-o</novo-icon>\n<novo-icon theme=\"placement\">star</novo-icon>\n",
                styles: [""]
            }] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: components/loading/loading-circle/loading-circle-example.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@title Circular Loading Symbol
 */
class LoadingCircleExample {
}
LoadingCircleExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'loading-circle-example',
                template: "<section class=\"flex\">\n    <div class=\"white background\">\n        <novo-spinner theme=\"multicolor\"></novo-spinner>\n    </div>\n    <div class=\"light background\">\n        <novo-spinner></novo-spinner>\n    </div>\n    <div class=\"ocean background\">\n        <novo-spinner inverse></novo-spinner>\n    </div>\n    <div class=\"navy background\">\n        <novo-spinner theme=\"bittersweet\"></novo-spinner>\n    </div>\n</section>\n",
                styles: [".flex{display:flex;flex-flow:row nowrap}"]
            }] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: components/loading/loading-line/loading-line-example.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@title Linear Loading Symbol
 */
class LoadingLineExample {
}
LoadingLineExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'loading-line-example',
                template: "<header>\n    <novo-loading></novo-loading>\n</header>\n<header class=\"color-container\">\n    <novo-loading inverse></novo-loading>\n</header>\n",
                styles: [""]
            }] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: components/quick-note/basic-quick-note/basic-quick-note-example.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@title Basic Quick Note Example
 */
class BasicQuickNoteExample {
    constructor() {
        this.placeholder = 'Enter your note text here. Reference people and distribution lists using @ (eg. @John Smith). Reference other records using # (e.g. #Project Manager)';
        this.basic = {
            triggers: {
                tags: '@',
                references: '#',
                boos: '^',
            },
            options: {
                tags: ['First', 'Second', 'Space Between'],
                references: ['Third', 'Fourth'],
                boos: ['Test'],
            },
            renderer: {
                tags: (/**
                 * @param {?} symbol
                 * @param {?} item
                 * @return {?}
                 */
                (symbol, item) => {
                    return `<a href="https://www.google.com/search?q=bullhorn&oq=bullhorn">${symbol}${item.label}</a>`;
                }),
                references: (/**
                 * @param {?} symbol
                 * @param {?} item
                 * @return {?}
                 */
                (symbol, item) => {
                    return `<a href="https://www.google.com/search?q=bullhorn&oq=bullhorn">${symbol}${item.label}</a>`;
                }),
                boos: (/**
                 * @param {?} symbol
                 * @param {?} item
                 * @return {?}
                 */
                (symbol, item) => {
                    return `<strong>${symbol}${item.label}</strong>`;
                }),
            },
        };
    }
}
BasicQuickNoteExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'basic-quick-note-example',
                template: "<novo-quick-note [(ngModel)]=\"note\" [placeholder]=\"placeholder\" [config]=\"basic\"></novo-quick-note>\n<div class=\"data\">\n    <p>Note: {{note | json}}</p>\n</div>\n",
                styles: [""]
            }] }
];
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: components/quick-note/custom-quick-note-results/custom-quick-note-results-example.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const DATA = {
    tags: [{ id: 1, name: 'OH YA!', test: 'TWO' }, { id: 2, name: 'TAGGING!', test: 'ONE' }],
    references: [{ id: 1, title: 'Awesome Reference' }, { id: 2, title: 'Angular2' }],
};
class CustomQuickNoteResults extends novo_elements__WEBPACK_IMPORTED_MODULE_3__["QuickNoteResults"] {
}
CustomQuickNoteResults.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'custom-quick-note-results',
                host: {
                    class: 'active quick-note-results',
                },
                template: `
        <novo-loading theme="line" *ngIf="isLoading && !matches.length"></novo-loading>
        <novo-list *ngIf="matches.length > 0">
            <novo-list-item
                *ngFor="let match of matches"
                (click)="selectMatch($event)"
                [class.active]="match===activeMatch"
                (mouseenter)="selectActive(match)">
                <item-content>
                    **CUSTOM** <b [innerHtml]="highlight(match.label, term)"></b>
                </item-content>
            </novo-list-item>
        </novo-list>
        <p class="picker-error" *ngIf="hasError">Oops! An error occured.</p>
        <p class="picker-null" *ngIf="!isLoading && !matches.length && !hasError">No results to display...</p>
    `
            }] }
];
/**
 * \@title Custom Quick Note Results Example
 */
class CustomQuickNoteResultsExample {
    constructor() {
        this.placeholder = 'Enter your note text here. Reference people and distribution lists using @ (eg. @John Smith). Reference other records using # (e.g. #Project Manager)';
        this.customResults = {
            resultsTemplate: CustomQuickNoteResults,
            triggers: {
                names: '@',
                tags: '#',
            },
            options: {
                names: (/**
                 * @return {?}
                 */
                () => {
                    return new Promise((/**
                     * @param {?} resolve
                     * @return {?}
                     */
                    (resolve) => {
                        setTimeout((/**
                         * @return {?}
                         */
                        () => {
                            resolve(DATA.tags);
                        }), 300);
                    }));
                }),
                tags: (/**
                 * @return {?}
                 */
                () => {
                    return new Promise((/**
                     * @param {?} resolve
                     * @return {?}
                     */
                    (resolve) => {
                        setTimeout((/**
                         * @return {?}
                         */
                        () => {
                            resolve(DATA.references);
                        }), 300);
                    }));
                }),
            },
            format: {
                names: '$name',
                tags: '$title',
            },
            renderer: {
                names: (/**
                 * @param {?} symbol
                 * @param {?} item
                 * @return {?}
                 */
                (symbol, item) => {
                    return `<a href="http://www.bullhorn.com" class="names">${symbol}${item.label}</a>`;
                }),
                tags: (/**
                 * @param {?} symbol
                 * @param {?} item
                 * @return {?}
                 */
                (symbol, item) => {
                    return `<a href="http://www.bullhorn.com" class="tags">${symbol}${item.label}</a>`;
                }),
            },
        };
    }
}
CustomQuickNoteResultsExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'custom-quick-note-results-example',
                template: "<novo-quick-note [(ngModel)]=\"note\" [placeholder]=\"placeholder\" [config]=\"customResults\"></novo-quick-note>\n<div class=\"data\">\n    <p>Note: {{note | json}}</p>\n</div>\n",
                styles: [""]
            }] }
];
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: components/quick-note/custom-quick-note/custom-quick-note-example.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const DATA$1 = {
    tags: [{ id: 1, name: 'OH YA!', test: 'TWO' }, { id: 2, name: 'TAGGING!', test: 'ONE' }],
    references: [{ id: 1, title: 'Awesome Reference' }, { id: 2, title: 'Angular2' }],
};
/**
 * \@title Custom Quick Note Example
 */
class CustomQuickNoteExample {
    constructor() {
        this.placeholder = 'Enter your note text here. Reference people and distribution lists using @ (eg. @John Smith). Reference other records using # (e.g. #Project Manager)';
        this.custom = {
            triggers: {
                whos: '@',
                whats: '#',
            },
            options: {
                whos: (/**
                 * @return {?}
                 */
                () => {
                    return new Promise((/**
                     * @param {?} resolve
                     * @return {?}
                     */
                    (resolve) => {
                        setTimeout((/**
                         * @return {?}
                         */
                        () => {
                            resolve(DATA$1.tags);
                        }), 300);
                    }));
                }),
                whats: (/**
                 * @return {?}
                 */
                () => {
                    return new Promise((/**
                     * @param {?} resolve
                     * @return {?}
                     */
                    (resolve) => {
                        setTimeout((/**
                         * @return {?}
                         */
                        () => {
                            resolve(DATA$1.references);
                        }), 300);
                    }));
                }),
            },
            format: {
                whos: '$name $test',
                whats: '$title',
            },
            renderer: {
                whos: (/**
                 * @param {?} symbol
                 * @param {?} item
                 * @return {?}
                 */
                (symbol, item) => {
                    return `<a href="http://www.bullhorn.com" class="WHOS">${symbol}${item.label}</a>`;
                }),
                whats: (/**
                 * @param {?} symbol
                 * @param {?} item
                 * @return {?}
                 */
                (symbol, item) => {
                    return `<a href="http://www.bullhorn.com" class="tag">${symbol}${item.label}</a>`;
                }),
            },
        };
    }
}
CustomQuickNoteExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'custom-quick-note-example',
                template: "<novo-quick-note [(ngModel)]=\"note\" [placeholder]=\"placeholder\" [config]=\"custom\"></novo-quick-note>\n<div class=\"data\">\n    <p>Note: {{note | json}}</p>\n</div>\n",
                styles: [""]
            }] }
];
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: components/search/search-usage/search-usage-example.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@title Search Box Usage
 */
class SearchUsageExample {
    constructor() {
        this.test = 'TEST';
        this.geo = '';
        this.entity = '';
        this.searchResults = new rxjs__WEBPACK_IMPORTED_MODULE_7__["Subject"]();
        this.searchData = [
            {
                data: {
                    title: 'Central Bank',
                    name: 'Central Bank',
                    email: 'new-bank-inquiries@centralbank.com',
                    phone: '(651) 555-1234',
                    address: { city: 'Washington', state: 'DC' },
                    searchEntity: 'ClientCorporation',
                    type: 'company',
                },
            },
            {
                data: {
                    title: 'Federal Bank',
                    name: 'Federal Bank',
                    email: 'info@federalbank.com',
                    phone: '(545) 555-1212',
                    address: { city: 'Arlington', state: 'VA' },
                    searchEntity: 'ClientCorporation',
                    type: 'company',
                },
            },
            {
                data: {
                    title: 'Aaron Burr',
                    firstName: 'Aaron',
                    lastName: 'Burr',
                    name: 'Aaron Burr',
                    companyName: 'Central Bank',
                    email: 'aburr@centralbank.com',
                    phone: '(333) 555-3434',
                    address: { city: 'Washington', state: 'DC' },
                    status: 'Hold',
                    searchEntity: 'ClientContact',
                    type: 'person',
                },
            },
            {
                data: {
                    title: 'Alexander Hamilton',
                    firstName: 'Alexander',
                    lastName: 'Hamilton',
                    name: 'Alexander Hamilton',
                    companyName: 'Federal Bank',
                    email: 'ahamilton@federalbank.com',
                    phone: '(333) 555-2222',
                    address: { city: 'Arlington', state: 'VA' },
                    status: 'Active',
                    searchEntity: 'ClientContact',
                    type: 'person',
                },
            },
            {
                data: {
                    title: 'Ben Franklin',
                    firstName: 'Ben',
                    lastName: 'Franklin',
                    name: 'Ben Franklin',
                    email: 'bfranklin@gmail.com',
                    phone: '(654) 525-2222',
                    address: { city: 'Boston', state: 'MA' },
                    status: 'Interviewing',
                    searchEntity: 'Candidate',
                    type: 'candidate',
                },
            },
            {
                data: {
                    title: 'Thomas Jefferson',
                    firstName: 'Thomas',
                    lastName: 'Jefferson',
                    name: 'Thomas Jefferson',
                    email: 'tjefferson@usa.com',
                    phone: '(123) 542-1234',
                    address: { city: 'Arlington', state: 'VA' },
                    status: 'New Lead',
                    searchEntity: 'Candidate',
                    type: 'candidate',
                },
            },
        ];
    }
    /**
     * @param {?} term
     * @return {?}
     */
    search(term) {
        this.searchResults.next(this.searchData.map((/**
         * @param {?} x
         * @return {?}
         */
        (x) => x.data)));
    }
    /**
     * @param {?} item
     * @return {?}
     */
    onSelectMatch(item) {
        this.test = item.name;
    }
    /**
     * @param {?} item
     * @return {?}
     */
    onSelectEntity(item) {
        this.entity = item.data.name;
    }
}
SearchUsageExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'search-usage-example',
                template: "\n<novo-search></novo-search>\n\n<br/>\n\n<novo-search alwaysOpen=\"true\"></novo-search>\n\n<br/>\n\n<novo-search [ngModel]=\"test\" (ngModelChange)=\"search($event)\">\n    <novo-list direction=\"vertical\">\n        <novo-list-item *ngFor=\"let item of searchResults | async\" (click)=\"onSelectMatch(item)\">\n            <item-header>\n                <item-avatar [icon]=\"item.type\"></item-avatar>\n                <item-title>{{item.name}}</item-title>\n            </item-header>\n        </novo-list-item>\n    </novo-list>\n</novo-search>\n\n<br/>\n\n<novo-search icon=\"location\" theme=\"grapefruit\" alwaysOpen=\"true\" [(ngModel)]=\"geo\" displayField=\"formatted_address\" [closeOnSelect]=\"false\" hint=\"Search Google to find your address.\">\n    <google-places-list [(term)]=\"geo\"></google-places-list>\n</novo-search>\n<div>Value is: {{geo}}</div>\n<br/>\n\n<novo-search icon=\"candidate\" theme=\"candidate\" alwaysOpen=\"true\" [(ngModel)]=\"entity\">\n    <entity-picker-results [matches]=\"searchData\" (select)=\"onSelectEntity($event)\"></entity-picker-results>\n</novo-search>\n",
                styles: [""]
            }] }
];
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: components/slides/basic-slide/basic-slide-example.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@title Basic Slide Example
 */
class BasicSlideExample {
}
BasicSlideExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'basic-slide-example',
                template: "<novo-slider [slides]=\"2\">\n    <div slide=\"1\">\n        SLIDE #1\n    </div>\n    <div slide=\"2\">\n        SLIDE #2\n    </div>\n</novo-slider>\n",
                styles: [""]
            }] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: components/switch/switch-usage/switch-usage-example.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@title Switch Usage Example
 */
class SwitchUsageExample {
    constructor() {
        this.toggleCount = 0;
        this.checked = true;
    }
    /**
     * @return {?}
     */
    increment() {
        this.toggleCount++;
    }
}
SwitchUsageExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'switch-usage-example',
                template: "<label>\n  Count\n  <span>{{toggleCount}}</span>\n</label>\n<label>\n  Toggled\n  <span>{{checked}}</span>\n</label>\n<novo-switch [(ngModel)]=\"checked\" (onChange)=\"increment()\"></novo-switch>\n<novo-switch theme=\"grapefruit\"></novo-switch>\n<novo-switch disabled></novo-switch>\n",
                styles: [""]
            }] }
];
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: components/tabbed-group-picker/tabbed-group-picker-basic/tabbed-group-picker-basic-example.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@title Tabbed Group Picker - Basic Example
 */
class TabbedGroupPickerBasicExample {
    constructor() {
        this.getAnimals = (/**
         * @return {?}
         */
        () => ['Dog', 'Cat', 'Mouse', 'Horse', 'Cow', 'Chicken', 'Pig', 'Sheep', 'Goat', 'Goose'].map((/**
         * @param {?} name
         * @param {?} index
         * @return {?}
         */
        (name, index) => ({
            name,
            animalId: index + 1,
        }))));
        this.getPlaces = (/**
         * @return {?}
         */
        () => [
            ['Roma', 'Rome'],
            ['Firenze', 'Florence'],
            ['Munchen', 'Munich'],
            ['Paris', 'Paris'],
            ['Sevilla', 'Seville'],
            ['Athinai', 'Athens'],
        ].map((/**
         * @param {?} __0
         * @return {?}
         */
        ([localName, englishName]) => ({ localName, englishName }))));
        this.getColors = (/**
         * @return {?}
         */
        () => [['255,0,0', 'Red'], ['0,255,0', 'Green'], ['0,0,255', 'Blue'], ['0,0,0', 'Black'], ['255,255,255', 'White']].map((/**
         * @param {?} __0
         * @return {?}
         */
        ([rgb, colorName]) => ({ rgb, colorName }))));
        this.animalTab = {
            typeName: 'animals',
            typeLabel: 'Animals',
            valueField: 'animalId',
            labelField: 'name',
            data: this.getAnimals(),
        };
        this.example_tab = [
            this.animalTab,
            {
                typeName: 'places',
                typeLabel: 'Places',
                valueField: 'localName',
                labelField: 'englishName',
                data: this.getPlaces(),
            },
            {
                typeName: 'colors',
                typeLabel: 'Colors',
                valueField: 'rgb',
                labelField: 'colorName',
                data: this.getColors(),
            },
        ];
        this.buttonLabel = 'Nothing Selected';
        this.example_buttonConfig = {
            theme: 'select',
            side: 'right',
            icon: 'collapse',
            label: this.buttonLabel,
            selector: 'buttonConfig',
        };
        this.selectedAnimals = [];
        this.selectedPlaces = [];
        this.selectedColors = [];
    }
    /**
     * @param {?} selectedData
     * @return {?}
     */
    onSelectionChange(selectedData) {
        this.selectedAnimals = ((/** @type {?} */ (selectedData.find((/**
         * @param {?} __0
         * @return {?}
         */
        ({ typeName }) => typeName === 'animals'))))).data.map((/**
         * @param {?} __0
         * @return {?}
         */
        ({ animalId }) => animalId));
        this.selectedPlaces = ((/** @type {?} */ (selectedData.find((/**
         * @param {?} __0
         * @return {?}
         */
        ({ typeName }) => typeName === 'places'))))).data.map((/**
         * @param {?} __0
         * @return {?}
         */
        ({ localName }) => localName));
        this.selectedColors = ((/** @type {?} */ (selectedData.find((/**
         * @param {?} __0
         * @return {?}
         */
        ({ typeName }) => typeName === 'colors'))))).data.map((/**
         * @param {?} __0
         * @return {?}
         */
        ({ rgb }) => rgb));
        this.example_buttonConfig.label = this.buildButtonLabel();
    }
    /**
     * @return {?}
     */
    buildButtonLabel() {
        /** @type {?} */
        const labelParts = [];
        this.selectedAnimals.length ? labelParts.push(`Animals (${this.selectedAnimals.length})`) : '';
        this.selectedPlaces.length ? labelParts.push(`Places (${this.selectedPlaces.length})`) : '';
        this.selectedColors.length ? labelParts.push(`Colors (${this.selectedColors.length})`) : '';
        return labelParts.join(', ') || 'Nothing Selected';
    }
}
TabbedGroupPickerBasicExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'tabbed-group-picker-basic-example',
                template: "<div class=\"tabbed-group-picker-example\">\n  <novo-tabbed-group-picker\n    [tabs]=\"example_tab\"\n    title=\"basic-example\"\n    [buttonConfig]=\"example_buttonConfig\"\n    (selectionChange)=\"onSelectionChange($event)\"\n  ></novo-tabbed-group-picker>\n  <div class=\"selected-data-wrapper\">\n    <h6>Selected Animal IDs:</h6>\n    <div>{{ selectedAnimals.join(', ') }}</div>\n    <h6>Selected Local Place Names:</h6>\n    <div>{{ selectedPlaces.join(', ') }}</div>\n    <h6>Selected Colors:</h6>\n    <div>{{ selectedColors.join(' | ') }}</div>\n  </div>\n</div>\n",
                styles: [".tabbed-group-picker-example{display:flex;justify-content:space-between}.tabbed-group-picker-example novo-tabbed-group-picker{max-width:40%}.tabbed-group-picker-example .selected-data-wrapper{width:40%}"]
            }] }
];
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: components/tabbed-group-picker/tabbed-group-picker-big-groups-example/tabbed-group-picker-big-groups-example.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@title Tabbed Group Picker - Big Groups Example
 */
class TabbedGroupPickerBigGroupsExample {
    constructor() {
        this.example_tab = [
            {
                typeName: 'integers',
                typeLabel: 'Integers',
                valueField: 'value',
                labelField: 'label',
                data: Array(2000)
                    .fill(0)
                    .map((/**
                 * @param {?} value
                 * @param {?} index
                 * @return {?}
                 */
                (value, index) => index + 1))
                    .map((/**
                 * @param {?} value
                 * @return {?}
                 */
                (value) => ({ value, label: String(value) }))),
            },
            {
                typeName: 'divisibles',
                typeLabel: 'Divisible By',
                valueField: 'v',
                labelField: 'l',
                childTypeName: 'integers',
                data: Array(100)
                    .fill(0)
                    .map((/**
                 * @param {?} v
                 * @param {?} i
                 * @return {?}
                 */
                (v, i) => i + 1))
                    .map((/**
                 * @param {?} v
                 * @return {?}
                 */
                (v) => ({
                    v,
                    l: `Divisible By ${v}`,
                    children: Array(2000)
                        .fill(0)
                        .map((/**
                     * @param {?} value
                     * @param {?} index
                     * @return {?}
                     */
                    (value, index) => index + 1))
                        .filter((/**
                     * @param {?} number
                     * @return {?}
                     */
                    (number) => number % v === 0))
                        .map((/**
                     * @param {?} child
                     * @return {?}
                     */
                    (child) => ({ value: child, label: String(child) }))),
                }))),
            },
            {
                typeName: 'prime factorization',
                typeLabel: 'Prime Factors',
                valueField: 'v',
                labelField: 'l',
                childTypeName: 'integers',
                data: Array(100)
                    .fill(0)
                    .map((/**
                 * @param {?} v
                 * @param {?} i
                 * @return {?}
                 */
                (v, i) => i + 1990))
                    .map((/**
                 * @param {?} parent
                 * @return {?}
                 */
                (parent) => ({
                    v: parent,
                    l: `Prime Factors of ${parent}`,
                    children: Array(2000)
                        .fill(0)
                        .map((/**
                     * @param {?} value
                     * @param {?} index
                     * @return {?}
                     */
                    (value, index) => index + 1))
                        .filter((/**
                     * @param {?} child
                     * @return {?}
                     */
                    (child) => parent % child === 0 && this.isPrime(child)))
                        .map((/**
                     * @param {?} child
                     * @return {?}
                     */
                    (child) => ({ value: child, label: String(child) }))),
                }))),
            },
        ];
        this.buttonLabel = 'Nothing Selected';
        this.example_buttonConfig = {
            theme: 'select',
            side: 'right',
            icon: 'collapse',
            label: this.buttonLabel,
            selector: 'buttonConfig',
        };
        this.selectedPrimeFactorizations = [];
        this.selectedDivisibles = [];
        this.selectedIntegers = [];
    }
    /**
     * @param {?} number
     * @return {?}
     */
    isPrime(number) {
        /** @type {?} */
        const squareRoot = Math.ceil(Math.sqrt(number));
        return !Array(squareRoot)
            .fill(0)
            .map((/**
         * @param {?} value
         * @param {?} index
         * @return {?}
         */
        (value, index) => index + 2))
            .some((/**
         * @param {?} divisor
         * @return {?}
         */
        (divisor) => number % divisor === 0));
    }
    /**
     * @param {?} selectedData
     * @return {?}
     */
    onSelectionChange(selectedData) {
        this.selectedIntegers = ((/** @type {?} */ (selectedData.find((/**
         * @param {?} __0
         * @return {?}
         */
        ({ typeName }) => typeName === 'integers'))))).data.map((/**
         * @param {?} __0
         * @return {?}
         */
        ({ value }) => value));
        this.selectedDivisibles = ((/** @type {?} */ (selectedData.find((/**
         * @param {?} __0
         * @return {?}
         */
        ({ typeName }) => typeName === 'divisibles'))))).data.map((/**
         * @param {?} __0
         * @return {?}
         */
        ({ v }) => v));
        this.selectedPrimeFactorizations = ((/** @type {?} */ (selectedData.find((/**
         * @param {?} __0
         * @return {?}
         */
        ({ typeName }) => typeName === 'prime factorization'))))).data.map((/**
         * @param {?} __0
         * @return {?}
         */
        ({ v }) => v));
        this.example_buttonConfig.label = this.buildButtonLabel();
    }
    /**
     * @return {?}
     */
    buildButtonLabel() {
        return this.selectedIntegers.length ? `Integers (${this.selectedIntegers.length})` : 'Nothing Selected';
    }
}
TabbedGroupPickerBigGroupsExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'tabbed-group-picker-big-groups-example',
                template: "<div class=\"tabbed-group-picker-example\">\n  <novo-tabbed-group-picker\n    [tabs]=\"example_tab\"\n    title=\"big-groups-example\"\n    [buttonConfig]=\"example_buttonConfig\"\n    (selectionChange)=\"onSelectionChange($event)\"\n  ></novo-tabbed-group-picker>\n  <div class=\"selected-data-wrapper\">\n    <h6>Selected Integers:</h6>\n    <div>{{ selectedIntegers.join(', ') }}</div>\n    <h6>Selected Divisibles:</h6>\n    <div>{{ selectedDivisibles.join(', ') }}</div>\n    <h6>Selected Prime Factorizations:</h6>\n    <div>{{ selectedPrimeFactorizations.join(', ') }}</div>\n  </div>\n</div>\n",
                styles: [".tabbed-group-picker-example{display:flex;justify-content:space-between}.tabbed-group-picker-example novo-tabbed-group-picker{max-width:40%}.tabbed-group-picker-example .selected-data-wrapper{width:40%}"]
            }] }
];
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: components/tabbed-group-picker/tabbed-group-picker-groups-example/tabbed-group-picker-groups-example.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@title Tabbed Group Picker - Groups Example
 */
class TabbedGroupPickerGroupsExample {
    constructor() {
        this.getAnimals = (/**
         * @return {?}
         */
        () => ['Dog', 'Cat', 'Mouse', 'Horse', 'Cow', 'Chicken', 'Pig', 'Sheep', 'Goat', 'Goose'].map((/**
         * @param {?} name
         * @param {?} index
         * @return {?}
         */
        (name, index) => ({
            name,
            animalId: index + 1,
        }))));
        this.getAnimalCategories = (/**
         * @return {?}
         */
        () => {
            /** @type {?} */
            const animals = this.getAnimals();
            /** @type {?} */
            const birds = ['Chicken', 'Goose'].map((/**
             * @param {?} name
             * @return {?}
             */
            (name) => animals.find((/**
             * @param {?} animal
             * @return {?}
             */
            (animal) => animal.name === name))));
            /** @type {?} */
            const livestock = ['Cow', 'Pig', 'Sheep', 'Goat'].map((/**
             * @param {?} name
             * @return {?}
             */
            (name) => animals.find((/**
             * @param {?} animal
             * @return {?}
             */
            (animal) => animal.name === name))));
            return [
                {
                    name: 'Birds',
                    groupId: 1,
                    children: birds,
                },
                {
                    name: 'Livestock',
                    groupId: 2,
                    children: livestock,
                },
            ];
        });
        this.example_tab = [
            {
                typeName: 'animals',
                typeLabel: 'Animals',
                valueField: 'animalId',
                labelField: 'name',
                data: this.getAnimals(),
            },
            {
                typeName: 'animalCategories',
                typeLabel: 'Animal Categories',
                valueField: 'groupId',
                labelField: 'name',
                childTypeName: 'animals',
                data: this.getAnimalCategories(),
            },
        ];
        this.example_quickSelectConfig = {
            label: 'Quick Select',
            items: [
                {
                    childTypeName: 'animals',
                    children: [2],
                    label: 'Pure Evil',
                },
                {
                    childTypeName: 'animals',
                    children: [1, 6, 9],
                    label: 'My Pets',
                },
                {
                    childTypeName: 'animals',
                    all: true,
                    label: 'All Animals',
                },
            ],
        };
        this.buttonLabel = 'Nothing Selected';
        this.example_buttonConfig = {
            theme: 'select',
            side: 'right',
            icon: 'collapse',
            label: this.buttonLabel,
            selector: 'buttonConfig',
        };
        this.selectedAnimals = [];
        this.selectedAnimalCategories = [];
    }
    /**
     * @param {?} selectedData
     * @return {?}
     */
    onSelectionChange(selectedData) {
        this.selectedAnimals = ((/** @type {?} */ (selectedData.find((/**
         * @param {?} __0
         * @return {?}
         */
        ({ typeName }) => typeName === 'animals'))))).data.map((/**
         * @param {?} __0
         * @return {?}
         */
        ({ animalId }) => animalId));
        this.selectedAnimalCategories = ((/** @type {?} */ (selectedData.find((/**
         * @param {?} __0
         * @return {?}
         */
        ({ typeName }) => typeName === 'animalCategories'))))).data.map((/**
         * @param {?} __0
         * @return {?}
         */
        ({ groupId }) => groupId));
        this.example_buttonConfig.label = this.buildButtonLabel();
    }
    /**
     * @return {?}
     */
    buildButtonLabel() {
        return this.selectedAnimals.length ? `Animals (${this.selectedAnimals.length})` : 'Nothing Selected';
    }
}
TabbedGroupPickerGroupsExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'tabbed-group-picker-groups-example',
                template: "<div class=\"tabbed-group-picker-example\">\n  <novo-tabbed-group-picker\n    [tabs]=\"example_tab\"\n    title=\"groups-example\"\n    [quickSelectConfig]=\"example_quickSelectConfig\"\n    [buttonConfig]=\"example_buttonConfig\"\n    (selectionChange)=\"onSelectionChange($event)\"\n  ></novo-tabbed-group-picker>\n  <div class=\"selected-data-wrapper\">\n    <h6>Selected Animal IDs:</h6>\n    <div>{{ selectedAnimals.join(', ') }}</div>\n    <h6>Selected Animal Category IDs:</h6>\n    <div>{{ selectedAnimalCategories.join(', ') }}</div>\n  </div>\n</div>\n",
                styles: [".tabbed-group-picker-example{display:flex;justify-content:space-between}.tabbed-group-picker-example novo-tabbed-group-picker{max-width:40%}.tabbed-group-picker-example .selected-data-wrapper{width:40%}"]
            }] }
];
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: components/tabbed-group-picker/tabbed-group-picker-quick-select-example/tabbed-group-picker-quick-select-example.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@title Tabbed Group Picker - Quick Select Example
 */
class TabbedGroupPickerQuickSelectExample {
    constructor() {
        this.getAnimals = (/**
         * @return {?}
         */
        () => ['Dog', 'Cat', 'Mouse', 'Horse', 'Cow', 'Chicken', 'Pig', 'Sheep', 'Goat', 'Goose'].map((/**
         * @param {?} name
         * @param {?} index
         * @return {?}
         */
        (name, index) => ({
            name,
            animalId: index + 1,
        }))));
        this.example_tab = [
            {
                typeName: 'animals',
                typeLabel: 'Animals',
                valueField: 'animalId',
                labelField: 'name',
                data: this.getAnimals(),
            },
        ];
        this.example_quickSelectConfig = {
            label: 'Quick Select',
            items: [
                {
                    childTypeName: 'animals',
                    children: [2],
                    label: 'Pure Evil',
                },
                {
                    childTypeName: 'animals',
                    children: [1, 6, 9],
                    label: 'My Pets',
                },
                {
                    childTypeName: 'animals',
                    all: true,
                    label: 'All Animals',
                },
            ],
        };
        this.buttonLabel = 'Nothing Selected';
        this.example_buttonConfig = {
            theme: 'select',
            side: 'right',
            icon: 'collapse',
            label: this.buttonLabel,
            selector: 'buttonConfig',
        };
        this.selectedAnimals = [];
    }
    /**
     * @param {?} selectedData
     * @return {?}
     */
    onSelectionChange(selectedData) {
        this.selectedAnimals = ((/** @type {?} */ (selectedData.find((/**
         * @param {?} __0
         * @return {?}
         */
        ({ typeName }) => typeName === 'animals'))))).data.map((/**
         * @param {?} __0
         * @return {?}
         */
        ({ animalId }) => animalId));
        this.example_buttonConfig.label = this.buildButtonLabel();
    }
    /**
     * @return {?}
     */
    buildButtonLabel() {
        return this.selectedAnimals.length ? `Animals (${this.selectedAnimals.length})` : 'Nothing Selected';
    }
}
TabbedGroupPickerQuickSelectExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'tabbed-group-picker-quick-select-example',
                template: "<div class=\"tabbed-group-picker-example\">\n  <novo-tabbed-group-picker\n    [tabs]=\"example_tab\"\n    title=\"quick-select-example\"\n    [quickSelectConfig]=\"example_quickSelectConfig\"\n    [buttonConfig]=\"example_buttonConfig\"\n    (selectionChange)=\"onSelectionChange($event)\"\n  ></novo-tabbed-group-picker>\n  <div class=\"selected-data-wrapper\">\n    <h6>Selected Animal IDs:</h6>\n    <div>{{ selectedAnimals.join(', ') }}</div>\n  </div>\n</div>\n",
                styles: [".tabbed-group-picker-example{display:flex;justify-content:space-between}.tabbed-group-picker-example novo-tabbed-group-picker{max-width:40%}.tabbed-group-picker-example .selected-data-wrapper{width:40%}"]
            }] }
];
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: components/table/custom-cells/actions-cell-example.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@title Actions Cell Example
 */
class ActionsCellExample extends novo_elements__WEBPACK_IMPORTED_MODULE_3__["BaseRenderer"] {
    constructor() {
        super();
    }
    /**
     * @param {?} data
     * @param {?} meta
     * @return {?}
     */
    getActionContext(data, meta) {
        return { item: data, meta };
    }
}
ActionsCellExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'actions-cell-example',
                template: `
    <novo-dropdown parentScrollSelector=".table-container">
      <button type="button" theme="dialogue" icon="collapse">Actions!</button>
      <list>
        <item>Item 1</item>
        <item>Item 2</item>
        <item>Item 3</item>
        <item>Item 4</item>
        <item>Item 5</item>
        <item>Item 6</item>
        <item>Item 7</item>
        <item>Item 8</item>
        <item>Item 9</item>
      </list>
    </novo-dropdown>
  `
            }] }
];
/** @nocollapse */
ActionsCellExample.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * Generated from: components/table/table-extras.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const HEADER_COLORS = ['aqua', 'ocean', 'mint', 'grass', 'sunflower', 'company', 'lead', 'positive', 'black'];
const ɵ0 = /**
 * @param {?} object
 * @return {?}
 */
(object) => {
    return object.ext.obj;
}, ɵ1 = /**
 * @param {?} sort
 * @param {?} previous
 * @param {?} current
 * @return {?}
 */
(sort, previous, current) => {
    /** @type {?} */
    const first = previous.obj;
    /** @type {?} */
    const second = current.obj;
    if (first > second) {
        return sort === 'desc' ? -1 : 1;
    }
    if (first < second) {
        return sort === 'asc' ? -1 : 1;
    }
    return 0;
}, ɵ2 = /**
 * @param {?} object
 * @return {?}
 */
(object) => {
    return `$ ${Number(object.salary).toFixed(2)}`;
}, ɵ3 = /**
 * @param {?} data
 * @param {?} status
 * @return {?}
 */
(data, status) => window.alert(`Update Status ${status}!`), ɵ4 = /**
 * @param {?} data
 * @param {?} status
 * @return {?}
 */
(data, status) => window.alert(`Move ${status}!`), ɵ5 = /**
 * @param {?} data
 * @param {?} status
 * @return {?}
 */
(data, status) => window.alert(`Move ${status}!`);
/** @type {?} */
const TableColumns = [
    { title: 'Actions', renderer: ActionsCellExample, sorting: false, filtering: false },
    { title: 'Name', name: 'name', ordering: true, type: 'link', filtering: true },
    { title: 'Position', name: 'position', ordering: true, filtering: true },
    {
        title: 'Extn.',
        name: 'ext',
        ordering: true,
        renderer: (ɵ0),
        compare: (ɵ1),
    },
    {
        title: 'Start date',
        type: 'date',
        name: 'startDate',
        renderer: novo_elements__WEBPACK_IMPORTED_MODULE_3__["DateCell"],
        ordering: true,
        filtering: true,
        range: true,
    },
    {
        title: '%',
        name: 'percent',
        ordering: true,
        renderer: novo_elements__WEBPACK_IMPORTED_MODULE_3__["PercentageCell"],
    },
    {
        title: 'Salary',
        name: 'salary',
        ordering: true,
        renderer: (ɵ2),
        rightAlignCellContent: true,
    },
    {
        title: 'Status',
        name: 'status',
        renderer: novo_elements__WEBPACK_IMPORTED_MODULE_3__["NovoDropdownCell"],
        dropdownCellConfig: [
            {
                category: 'Update Status',
                callback: (ɵ3),
                options: [{ label: 'New Lead', value: 'New Lead' }, { label: 'Active', value: 'Active' }, { label: 'Archived', value: 'Archived' }],
            },
            {
                category: 'Move',
                callback: (ɵ4),
                options: ['Kitten', 'Kitty'],
            },
            {
                callback: (ɵ5),
                options: ['Meow', 'Kitty'],
            },
        ],
    },
];
/** @type {?} */
const TableData = [
    {
        name: 'Victoria Cantrell',
        position: 'Integer Corporation',
        office: 'Croatia',
        ext: { obj: '8262' },
        startDate: new Date('2017/08/19'),
        salary: 208178,
        percent: 0.5,
        status: 'New Lead',
        description: 'When there was despair in the dust bowl and depression across the land, she saw a nation conquer fear itself with a New Deal, new jobs and a new sense of common purpose. Yes we can.',
        categories: ['Temporary', 'Developer'],
    },
    {
        name: 'Pearl Crosby',
        position: 'In PC',
        office: 'Cambodia',
        ext: { obj: '8262' },
        startDate: new Date('2017/10/08'),
        salary: 114367,
        percent: 0.5,
        status: 'New Lead',
        description: 'When there was despair in the dust bowl and depression across the land, she saw a nation conquer fear itself with a New Deal, new jobs and a new sense of common purpose. Yes we can.',
        categories: ['Temporary', 'Developer'],
    },
    {
        name: 'Colette Foley',
        position: 'Lorem Inc.',
        office: 'Korea, North',
        ext: { obj: '8262' },
        startDate: new Date('2017/07/19'),
        salary: 721473,
        status: 'New Lead',
        percent: 1,
        description: 'To my campaign manager David Plouffe, my chief strategist David Axelrod, and the best campaign team ever assembled in the history of politics – you made this happen, and I am forever grateful for what you’ve sacrificed to get it done.',
        categories: ['Temporary', 'Developer'],
    },
    {
        name: 'Anastasia Shaffer',
        position: 'Dolor Nulla Semper LLC',
        office: 'Suriname',
        ext: { obj: '8262' },
        startDate: new Date('2017/04/20'),
        salary: 264620,
        percent: 1,
        status: 'New Lead',
        description: 'And to all those watching tonight from beyond our shores, from parliaments and palaces to those who are huddled around radios in the forgotten corners of our world – our stories are singular, but our destiny is shared, and a new dawn of American leadership is at hand. To those who would tear this world down – we will defeat you. To those who seek peace and security – we support you. And to all those who have wondered if America’s beacon still burns as bright – tonight we proved once more that the true strength of our nation comes not from our the might of our arms or the scale of our wealth, but from the enduring power of our ideals: democracy, liberty, opportunity, and unyielding hope.',
        categories: ['Temporary', 'Developer'],
    },
    {
        name: 'Gabriel Castro',
        position: 'Sed Limited',
        office: 'Bahrain',
        ext: { obj: '8262' },
        startDate: new Date('2017/03/04'),
        salary: 651350,
        status: 'New Lead',
        percent: 0.25,
        description: 'I want to thank my partner in this journey, a man who campaigned from his heart and spoke for the men and women he grew up with on the streets of Scranton and rode with on that train home to Delaware, the Vice President-elect of the United States, Joe Biden.',
        categories: ['Temporary', 'Developer'],
    },
    {
        name: 'Cherokee Ware',
        position: 'Tincidunt LLC',
        office: 'United Kingdom (Great Britain)',
        ext: { obj: '8262' },
        startDate: new Date('2017/06/17'),
        salary: 666259,
        status: 'New Lead',
        percent: 0.25,
        description: 'It’s been a long time coming, but tonight, because of what we did on this day, in this election, at this defining time, change has come to America.',
        categories: ['Temporary', 'Developer'],
    },
    {
        name: 'Barry Moss',
        position: 'Sociis Industries',
        office: 'Western Sahara',
        ext: { obj: '8262' },
        startDate: new Date('2017/08/13'),
        salary: 541631,
        status: 'New Lead',
        percent: 0.25,
        description: 'To my campaign manager David Plouffe, my chief strategist David Axelrod, and the best campaign team ever assembled in the history of politics – you made this happen, and I am forever grateful for what you’ve sacrificed to get it done.',
        categories: ['Temporary', 'Developer'],
    },
    {
        name: 'Maryam Tucker',
        position: 'Elit Pede Malesuada Inc.',
        office: 'Brazil',
        ext: { obj: '8262' },
        startDate: new Date('2017/10/02'),
        salary: 182294,
        status: 'New Lead',
        percent: 0.25,
        description: 'To my campaign manager David Plouffe, my chief strategist David Axelrod, and the best campaign team ever assembled in the history of politics – you made this happen, and I am forever grateful for what you’ve sacrificed to get it done.',
        categories: ['Temporary', 'Developer'],
    },
    {
        name: 'Constance Clayton',
        position: 'Auctor Velit Aliquam LLP',
        office: 'United Arab Emirates',
        ext: { obj: '8262' },
        startDate: new Date('2017/08/01'),
        salary: 218597,
        percent: 0.33,
        status: 'New Lead',
        description: 'To my campaign manager David Plouffe, my chief strategist David Axelrod, and the best campaign team ever assembled in the history of politics – you made this happen, and I am forever grateful for what you’ve sacrificed to get it done.',
        categories: ['Temporary', 'Developer'],
    },
    {
        name: 'Rogan Tucker',
        position: 'Arcu Vestibulum Ante Associates',
        office: 'Jersey',
        ext: { obj: '8262' },
        startDate: new Date('2017/01/04'),
        salary: 861632,
        status: 'New Lead',
        percent: 0.25,
        description: 'To my campaign manager David Plouffe, my chief strategist David Axelrod, and the best campaign team ever assembled in the history of politics – you made this happen, and I am forever grateful for what you’ve sacrificed to get it done.',
        categories: ['Temporary', 'Developer'],
    },
    {
        name: 'Emery Mcdowell',
        position: 'Gravida Company',
        office: 'New Zealand',
        ext: { obj: '8262' },
        startDate: new Date('2017/06/02'),
        salary: 413568,
        status: 'New Lead',
        percent: 0.25,
        description: 'To my campaign manager David Plouffe, my chief strategist David Axelrod, and the best campaign team ever assembled in the history of politics – you made this happen, and I am forever grateful for what you’ve sacrificed to get it done.',
        categories: ['Temporary', 'Developer'],
    },
    {
        name: 'Yael Greer',
        position: 'Orci Limited',
        office: 'Madagascar',
        ext: { obj: '8262' },
        startDate: new Date('2017/12/04'),
        salary: 121831,
        status: 'New Lead',
        percent: 0.25,
        description: 'To my campaign manager David Plouffe, my chief strategist David Axelrod, and the best campaign team ever assembled in the history of politics – you made this happen, and I am forever grateful for what you’ve sacrificed to get it done.',
        categories: ['Temporary', 'Developer'],
    },
    {
        name: 'Jared Burgess',
        position: 'Auctor Incorporated',
        office: 'Burundi',
        ext: { obj: '8262' },
        startDate: new Date('2017/01/12'),
        salary: 62243,
        status: 'New Lead',
        percent: 0.25,
        description: 'To my campaign manager David Plouffe, my chief strategist David Axelrod, and the best campaign team ever assembled in the history of politics – you made this happen, and I am forever grateful for what you’ve sacrificed to get it done.',
        categories: ['Temporary', 'Developer'],
    },
    {
        name: 'Sharon Campbell',
        position: 'Elit Curabitur Sed Consulting',
        office: 'Comoros',
        ext: { obj: '8262' },
        startDate: new Date('2017/09/14'),
        salary: 200854,
        status: 'New Lead',
        percent: 0.25,
        description: 'To my campaign manager David Plouffe, my chief strategist David Axelrod, and the best campaign team ever assembled in the history of politics – you made this happen, and I am forever grateful for what you’ve sacrificed to get it done.',
        categories: ['Temporary', 'Finance'],
    },
    {
        name: 'Yeo Church',
        position: 'Donec Vitae Erat PC',
        office: 'Saudi Arabia',
        ext: { obj: '8262' },
        startDate: new Date('2017/06/07'),
        salary: 581193,
        status: 'New Lead',
        percent: 0.25,
        description: 'To my campaign manager David Plouffe, my chief strategist David Axelrod, and the best campaign team ever assembled in the history of politics – you made this happen, and I am forever grateful for what you’ve sacrificed to get it done.',
        categories: ['Temporary', 'Finance'],
    },
    {
        name: 'Kylie Barlow',
        position: 'Fermentum Risus Corporation',
        office: 'Papua New Guinea',
        ext: { obj: '8262' },
        startDate: new Date('2017/12/03'),
        salary: 418115,
        status: 'New Lead',
        percent: 0.25,
        description: 'And to all those watching tonight from beyond our shores, from parliaments and palaces to those who are huddled around radios in the forgotten corners of our world – our stories are singular, but our destiny is shared, and a new dawn of American leadership is at hand. To those who would tear this world down – we will defeat you. To those who seek peace and security – we support you. And to all those who have wondered if America’s beacon still burns as bright – tonight we proved once more that the true strength of our nation comes not from our the might of our arms or the scale of our wealth, but from the enduring power of our ideals: democracy, liberty, opportunity, and unyielding hope.',
        categories: ['Temporary', 'Finance'],
    },
    {
        name: 'Nell Leonard',
        position: 'Vestibulum Consulting',
        office: 'Saudi Arabia',
        ext: { obj: '8262' },
        startDate: new Date('2017/05/29'),
        salary: 466201,
        status: 'New Lead',
        percent: 0.25,
        description: 'And to all those watching tonight from beyond our shores, from parliaments and palaces to those who are huddled around radios in the forgotten corners of our world – our stories are singular, but our destiny is shared, and a new dawn of American leadership is at hand. To those who would tear this world down – we will defeat you. To those who seek peace and security – we support you. And to all those who have wondered if America’s beacon still burns as bright – tonight we proved once more that the true strength of our nation comes not from our the might of our arms or the scale of our wealth, but from the enduring power of our ideals: democracy, liberty, opportunity, and unyielding hope.',
        categories: ['Temporary', 'Finance'],
    },
    {
        name: 'Brandon Fleming',
        position: 'Donec Egestas Associates',
        office: 'Poland',
        ext: { obj: '8262' },
        startDate: new Date('2017/01/22'),
        salary: 800011,
        status: 'New Lead',
        percent: 0.25,
        description: 'And to all those watching tonight from beyond our shores, from parliaments and palaces to those who are huddled around radios in the forgotten corners of our world – our stories are singular, but our destiny is shared, and a new dawn of American leadership is at hand. To those who would tear this world down – we will defeat you. To those who seek peace and security – we support you. And to all those who have wondered if America’s beacon still burns as bright – tonight we proved once more that the true strength of our nation comes not from our the might of our arms or the scale of our wealth, but from the enduring power of our ideals: democracy, liberty, opportunity, and unyielding hope.',
        categories: ['Temporary', 'Finance'],
    },
    {
        name: 'Inga Pena',
        position: 'Et Magnis Dis Limited',
        office: 'Belgium',
        ext: { obj: '8262' },
        startDate: new Date('2017/05/18'),
        salary: 564245,
        status: 'New Lead',
        percent: 0.25,
        description: 'And to all those watching tonight from beyond our shores, from parliaments and palaces to those who are huddled around radios in the forgotten corners of our world – our stories are singular, but our destiny is shared, and a new dawn of American leadership is at hand. To those who would tear this world down – we will defeat you. To those who seek peace and security – we support you. And to all those who have wondered if America’s beacon still burns as bright – tonight we proved once more that the true strength of our nation comes not from our the might of our arms or the scale of our wealth, but from the enduring power of our ideals: democracy, liberty, opportunity, and unyielding hope.',
        categories: ['Permenant', 'Finance'],
    },
    {
        name: 'Arden Russo',
        position: 'Est Tempor Bibendum Corp.',
        office: 'Dominican Republic',
        ext: { obj: '8262' },
        startDate: new Date('2017/07/23'),
        salary: 357222,
        status: 'New Lead',
        percent: 0.25,
        description: 'And to all those watching tonight from beyond our shores, from parliaments and palaces to those who are huddled around radios in the forgotten corners of our world – our stories are singular, but our destiny is shared, and a new dawn of American leadership is at hand. To those who would tear this world down – we will defeat you. To those who seek peace and security – we support you. And to all those who have wondered if America’s beacon still burns as bright – tonight we proved once more that the true strength of our nation comes not from our the might of our arms or the scale of our wealth, but from the enduring power of our ideals: democracy, liberty, opportunity, and unyielding hope.',
        categories: ['Permenant', 'Finance'],
    },
    {
        name: 'Liberty Gallegos',
        position: 'Nec Diam LLC',
        office: 'Ghana',
        ext: { obj: '8262' },
        startDate: new Date('2017/06/18'),
        salary: 554375,
        status: 'New Lead',
        percent: 0.25,
        description: 'And to all those watching tonight from beyond our shores, from parliaments and palaces to those who are huddled around radios in the forgotten corners of our world – our stories are singular, but our destiny is shared, and a new dawn of American leadership is at hand. To those who would tear this world down – we will defeat you. To those who seek peace and security – we support you. And to all those who have wondered if America’s beacon still burns as bright – tonight we proved once more that the true strength of our nation comes not from our the might of our arms or the scale of our wealth, but from the enduring power of our ideals: democracy, liberty, opportunity, and unyielding hope.',
        categories: ['Permenant', 'Developer'],
    },
    {
        name: 'Dennis York',
        position: 'Nullam Suscipit Foundation',
        office: 'Namibia',
        ext: { obj: '8262' },
        startDate: new Date('2017/03/20'),
        salary: 90417,
        status: 'New Lead',
        percent: 0.25,
        description: 'And to all those watching tonight from beyond our shores, from parliaments and palaces to those who are huddled around radios in the forgotten corners of our world – our stories are singular, but our destiny is shared, and a new dawn of American leadership is at hand. To those who would tear this world down – we will defeat you. To those who seek peace and security – we support you. And to all those who have wondered if America’s beacon still burns as bright – tonight we proved once more that the true strength of our nation comes not from our the might of our arms or the scale of our wealth, but from the enduring power of our ideals: democracy, liberty, opportunity, and unyielding hope.',
        categories: ['Permenant', 'Developer'],
    },
    {
        name: 'Petra Chandler',
        position: 'Pede Nonummy Inc.',
        office: 'Namibia',
        ext: { obj: '8262' },
        startDate: new Date('2017/03/26'),
        salary: 598915,
        status: 'New Lead',
        percent: 0.25,
        description: 'And to all those watching tonight from beyond our shores, from parliaments and palaces to those who are huddled around radios in the forgotten corners of our world – our stories are singular, but our destiny is shared, and a new dawn of American leadership is at hand. To those who would tear this world down – we will defeat you. To those who seek peace and security – we support you. And to all those who have wondered if America’s beacon still burns as bright – tonight we proved once more that the true strength of our nation comes not from our the might of our arms or the scale of our wealth, but from the enduring power of our ideals: democracy, liberty, opportunity, and unyielding hope.',
        categories: ['Permenant', 'Developer'],
    },
    {
        name: 'Aurelia Marshall',
        position: 'Donec Consulting',
        office: 'Nicaragua',
        ext: { obj: '8262' },
        startDate: new Date('2017/08/18'),
        salary: 201780,
        status: 'New Lead',
        percent: 0.25,
        description: 'And to all those watching tonight from beyond our shores, from parliaments and palaces to those who are huddled around radios in the forgotten corners of our world – our stories are singular, but our destiny is shared, and a new dawn of American leadership is at hand. To those who would tear this world down – we will defeat you. To those who seek peace and security – we support you. And to all those who have wondered if America’s beacon still burns as bright – tonight we proved once more that the true strength of our nation comes not from our the might of our arms or the scale of our wealth, but from the enduring power of our ideals: democracy, liberty, opportunity, and unyielding hope.',
        categories: ['Permenant', 'Developer'],
    },
    {
        name: 'Rose Carter',
        position: 'Enim Consequat Purus Industries',
        office: 'Morocco',
        ext: { obj: '8262' },
        startDate: new Date('2017/03/06'),
        salary: 220187,
        status: 'New Lead',
        percent: 0.25,
        description: 'When there was despair in the dust bowl and depression across the land, she saw a nation conquer fear itself with a New Deal, new jobs and a new sense of common purpose. Yes we can.',
        categories: ['Permenant', 'Developer'],
    },
    {
        name: 'Denton Atkins',
        position: 'Non Vestibulum PC',
        office: 'Mali',
        ext: { obj: '8262' },
        startDate: new Date('2017/04/19'),
        salary: 324588,
        status: 'New Lead',
        percent: 0.25,
        description: 'When there was despair in the dust bowl and depression across the land, she saw a nation conquer fear itself with a New Deal, new jobs and a new sense of common purpose. Yes we can.',
        categories: ['Permenant', 'Developer'],
    },
    {
        name: 'Germaine Osborn',
        position: 'Tristique Aliquet PC',
        office: 'Lesotho',
        ext: { obj: '8262' },
        startDate: new Date('2017/01/19'),
        salary: 351108,
        status: 'New Lead',
        percent: 0.25,
        description: 'When there was despair in the dust bowl and depression across the land, she saw a nation conquer fear itself with a New Deal, new jobs and a new sense of common purpose. Yes we can.',
        categories: ['Temporary', 'Developer'],
    },
    {
        name: 'Nell Butler',
        position: 'Sit Amet Dapibus Industries',
        office: 'Cuba',
        ext: { obj: '8262' },
        startDate: new Date('2017/01/06'),
        salary: 230072,
        status: 'New Lead',
        percent: 0.25,
        description: 'When there was despair in the dust bowl and depression across the land, she saw a nation conquer fear itself with a New Deal, new jobs and a new sense of common purpose. Yes we can.',
        categories: ['Temporary', 'Marketing'],
    },
    {
        name: 'Brent Stein',
        position: 'Eu Augue Porttitor LLP',
        office: 'Cyprus',
        ext: { obj: '8262' },
        startDate: new Date('2017/11/02'),
        salary: 853413,
        status: 'New Lead',
        percent: 0.25,
        description: 'When there was despair in the dust bowl and depression across the land, she saw a nation conquer fear itself with a New Deal, new jobs and a new sense of common purpose. Yes we can.',
        categories: ['Temporary', 'Marketing'],
    },
    {
        name: 'Alexandra Shaw',
        position: 'Aenean Gravida Limited',
        office: 'Uruguay',
        ext: { obj: '8262' },
        startDate: new Date('2017/05/16'),
        salary: 401970,
        status: 'New Lead',
        percent: 0.25,
        description: 'When there was despair in the dust bowl and depression across the land, she saw a nation conquer fear itself with a New Deal, new jobs and a new sense of common purpose. Yes we can.',
        categories: ['Temporary', 'Marketing'],
    },
    {
        name: 'Veronica Allison',
        position: 'Aliquet Diam Sed Institute',
        office: 'Samoa',
        ext: { obj: '8262' },
        startDate: new Date('2017/05/17'),
        salary: 79193,
        status: 'New Lead',
        percent: 0.25,
        description: 'When there was despair in the dust bowl and depression across the land, she saw a nation conquer fear itself with a New Deal, new jobs and a new sense of common purpose. Yes we can.',
        categories: ['Temporary', 'Marketing'],
    },
    {
        name: 'Katelyn Gamble',
        position: 'Sed Associates',
        office: 'Mauritius',
        ext: { obj: '8262' },
        startDate: new Date('2017/03/20'),
        salary: 484299,
        status: 'New Lead',
        percent: 0.25,
        description: 'When there was despair in the dust bowl and depression across the land, she saw a nation conquer fear itself with a New Deal, new jobs and a new sense of common purpose. Yes we can.',
        categories: ['Temporary', 'Marketing'],
    },
    {
        name: 'James Greer',
        position: 'A Dui Incorporated',
        office: 'Norway',
        ext: { obj: '8262' },
        startDate: new Date('2017/02/21'),
        salary: 333518,
        status: 'New Lead',
        percent: 0.25,
        description: 'When there was despair in the dust bowl and depression across the land, she saw a nation conquer fear itself with a New Deal, new jobs and a new sense of common purpose. Yes we can.',
        categories: ['Contractor', 'Marketing'],
    },
    {
        name: 'Cain Vasquez',
        position: 'Nulla Facilisis Suspendisse Institute',
        office: 'China',
        ext: { obj: '8262' },
        startDate: new Date('2017/05/27'),
        salary: 651761,
        status: 'New Lead',
        percent: 0.25,
        description: 'When there was despair in the dust bowl and depression across the land, she saw a nation conquer fear itself with a New Deal, new jobs and a new sense of common purpose. Yes we can.',
        categories: ['Contractor', 'Marketing'],
    },
    {
        name: 'Shaeleigh Barr',
        position: 'Eleifend Cras Institute',
        office: 'Ghana',
        ext: { obj: '8262' },
        startDate: new Date('2017/04/01'),
        salary: 627095,
        status: 'New Lead',
        percent: 0.25,
        description: 'When there was despair in the dust bowl and depression across the land, she saw a nation conquer fear itself with a New Deal, new jobs and a new sense of common purpose. Yes we can.',
        categories: ['Contractor', 'Developer'],
    },
    {
        name: 'Baker Mckay',
        position: 'Ut Sagittis Associates',
        office: 'Isle of Man',
        ext: { obj: '8262' },
        startDate: new Date('2017/01/12'),
        salary: 742247,
        status: 'New Lead',
        percent: 0.25,
        description: 'When there was despair in the dust bowl and depression across the land, she saw a nation conquer fear itself with a New Deal, new jobs and a new sense of common purpose. Yes we can.',
        categories: ['Contractor', 'Developer'],
    },
    {
        name: 'Jayme Pace',
        position: 'Cras Eu Tellus Associates',
        office: 'Bouvet Island',
        ext: { obj: '8262' },
        startDate: new Date('2017/08/12'),
        salary: 591588,
        status: 'New Lead',
        percent: 0.25,
        description: 'When there was despair in the dust bowl and depression across the land, she saw a nation conquer fear itself with a New Deal, new jobs and a new sense of common purpose. Yes we can.',
        categories: ['Contractor', 'Developer'],
    },
    {
        name: 'Reuben Albert',
        position: 'Lobortis Institute',
        office: 'Zambia',
        ext: { obj: '8262' },
        startDate: new Date('2017/04/04'),
        salary: 791408,
        status: 'New Lead',
        percent: 0.25,
        description: 'When there was despair in the dust bowl and depression across the land, she saw a nation conquer fear itself with a New Deal, new jobs and a new sense of common purpose. Yes we can.',
        categories: ['Contractor', 'Developer'],
    },
    {
        name: 'Idola Burns',
        position: 'Non Industries',
        office: 'Myanmar',
        ext: { obj: '8262' },
        startDate: new Date('2017/06/24'),
        salary: 142906,
        status: 'New Lead',
        percent: 0.25,
        description: 'When there was despair in the dust bowl and depression across the land, she saw a nation conquer fear itself with a New Deal, new jobs and a new sense of common purpose. Yes we can.',
        categories: ['Contractor', 'Developer'],
    },
    {
        name: 'Laura Macias',
        position: 'Phasellus Inc.',
        office: 'Mauritania',
        ext: { obj: '8262' },
        startDate: new Date('2017/11/21'),
        salary: 226591,
        status: 'New Lead',
        percent: 0.25,
        description: 'When there was despair in the dust bowl and depression across the land, she saw a nation conquer fear itself with a New Deal, new jobs and a new sense of common purpose. Yes we can.',
        categories: ['Temporary', 'Developer'],
    },
    {
        name: 'Nichole Salas',
        position: 'Duis PC',
        office: 'Madagascar',
        ext: { obj: '8262' },
        startDate: new Date('2017/01/18'),
        salary: 234196,
        status: 'New Lead',
        percent: 0.25,
        description: 'I want to thank my partner in this journey, a man who campaigned from his heart and spoke for the men and women he grew up with on the streets of Scranton and rode with on that train home to Delaware, the Vice President-elect of the United States, Joe Biden.',
        categories: ['Temporary', 'Developer'],
    },
    {
        name: 'Hunter Walter',
        position: 'Ullamcorper Duis Cursus Foundation',
        office: 'Brazil',
        ext: { obj: '8262' },
        startDate: new Date('2017/02/28'),
        salary: 655052,
        status: 'New Lead',
        percent: 0.25,
        description: 'I want to thank my partner in this journey, a man who campaigned from his heart and spoke for the men and women he grew up with on the streets of Scranton and rode with on that train home to Delaware, the Vice President-elect of the United States, Joe Biden.',
        categories: ['Temporary', 'Developer'],
    },
    {
        name: 'Asher Rich',
        position: 'Mauris Ipsum LLP',
        office: 'Paraguay',
        ext: { obj: '8262' },
        startDate: new Date('2017/08/08'),
        salary: 222946,
        status: 'New Lead',
        percent: 0.25,
        description: 'I want to thank my partner in this journey, a man who campaigned from his heart and spoke for the men and women he grew up with on the streets of Scranton and rode with on that train home to Delaware, the Vice President-elect of the United States, Joe Biden.',
        categories: ['Temporary', 'Developer'],
    },
    {
        name: 'Angela Carlson',
        position: 'Donec Tempor Institute',
        office: 'Papua New Guinea',
        ext: { obj: '8262' },
        startDate: new Date('2017/02/12'),
        salary: 562194,
        status: 'New Lead',
        percent: 0.25,
        description: 'I want to thank my partner in this journey, a man who campaigned from his heart and spoke for the men and women he grew up with on the streets of Scranton and rode with on that train home to Delaware, the Vice President-elect of the United States, Joe Biden.',
        categories: ['Temporary', 'Developer'],
    },
    {
        name: 'James Dorsey',
        position: 'Ipsum Leo Associates',
        office: 'Congo (Brazzaville)',
        ext: { obj: '8262' },
        startDate: new Date('2017/01/10'),
        salary: 629925,
        status: 'New Lead',
        percent: 0.25,
        description: 'I want to thank my partner in this journey, a man who campaigned from his heart and spoke for the men and women he grew up with on the streets of Scranton and rode with on that train home to Delaware, the Vice President-elect of the United States, Joe Biden.',
        categories: ['Temporary', 'Developer'],
    },
    {
        name: 'Wesley Cobb',
        position: 'Nunc Est Incorporated',
        office: 'Australia',
        ext: { obj: '8262' },
        startDate: new Date('2017/01/30'),
        salary: 343476,
        status: 'New Lead',
        percent: 0.25,
        description: 'I want to thank my partner in this journey, a man who campaigned from his heart and spoke for the men and women he grew up with on the streets of Scranton and rode with on that train home to Delaware, the Vice President-elect of the United States, Joe Biden.',
        categories: ['Communications', 'Developer'],
    },
    {
        name: 'Meghan Stephens',
        position: 'Interdum PC',
        office: 'Turkey',
        ext: { obj: '8262' },
        startDate: new Date('2017/10/11'),
        salary: 469305,
        status: 'New Lead',
        percent: 0.25,
        description: 'I want to thank my partner in this journey, a man who campaigned from his heart and spoke for the men and women he grew up with on the streets of Scranton and rode with on that train home to Delaware, the Vice President-elect of the United States, Joe Biden.',
        categories: ['Communications', 'Developer'],
    },
    {
        name: 'Bertha Herrera',
        position: 'Amet Limited',
        office: 'Kenya',
        ext: { obj: '8262' },
        startDate: new Date('2018/11/22'),
        salary: 56606,
        status: 'New Lead',
        percent: 0.25,
        description: 'I want to thank my partner in this journey, a man who campaigned from his heart and spoke for the men and women he grew up with on the streets of Scranton and rode with on that train home to Delaware, the Vice President-elect of the United States, Joe Biden.',
        categories: ['Communications', 'Developer'],
    },
    {
        name: 'Karina Key',
        position: 'Quisque Varius Nam Company',
        office: 'France',
        ext: { obj: '8262' },
        startDate: new Date('2018/03/26'),
        salary: 314260,
        status: 'New Lead',
        percent: 0.25,
        description: 'I want to thank my partner in this journey, a man who campaigned from his heart and spoke for the men and women he grew up with on the streets of Scranton and rode with on that train home to Delaware, the Vice President-elect of the United States, Joe Biden.',
        categories: ['Communications', 'Developer'],
    },
    {
        name: 'Uriel Carson',
        position: 'Penatibus PC',
        office: 'Venezuela',
        ext: { obj: '8262' },
        startDate: new Date('2018/01/07'),
        salary: 106335,
        status: 'New Lead',
        percent: 0.25,
        description: 'When there was despair in the dust bowl and depression across the land, she saw a nation conquer fear itself with a New Deal, new jobs and a new sense of common purpose. Yes we can.',
        categories: ['Communications', 'Developer'],
    },
    {
        name: 'Mira Baird',
        position: 'Felis Orci PC',
        office: 'Niue',
        ext: { obj: '8262' },
        startDate: new Date('2018/08/25'),
        salary: 515671,
        status: 'New Lead',
        percent: 0.25,
        description: 'When there was despair in the dust bowl and depression across the land, she saw a nation conquer fear itself with a New Deal, new jobs and a new sense of common purpose. Yes we can.',
        categories: ['Communications', 'Developer'],
    },
    {
        name: 'Ursula Parrish',
        position: 'Ac Corporation',
        office: 'Macao',
        ext: { obj: '8262' },
        startDate: new Date('2018/06/30'),
        salary: 72295,
        status: 'New Lead',
        percent: 0.25,
        description: 'When there was despair in the dust bowl and depression across the land, she saw a nation conquer fear itself with a New Deal, new jobs and a new sense of common purpose. Yes we can.',
        categories: ['Communications', 'Developer'],
    },
    {
        name: 'Josephine Sykes',
        position: 'Blandit Congue Limited',
        office: 'Holy See (Vatican City State)',
        ext: { obj: '8262' },
        startDate: new Date('2018/12/22'),
        salary: 694656,
        status: 'New Lead',
        percent: 0.25,
        description: 'When there was despair in the dust bowl and depression across the land, she saw a nation conquer fear itself with a New Deal, new jobs and a new sense of common purpose. Yes we can.',
        categories: ['Communications', 'Developer'],
    },
    {
        name: 'Maggie Sims',
        position: 'Vulputate Posuere Industries',
        office: 'Sudan',
        ext: { obj: '8262' },
        startDate: new Date('2018/11/22'),
        salary: 363743,
        status: 'New Lead',
        percent: 0.25,
        description: 'When there was despair in the dust bowl and depression across the land, she saw a nation conquer fear itself with a New Deal, new jobs and a new sense of common purpose. Yes we can.',
        categories: ['Communications', 'Developer'],
    },
    {
        name: 'Rogan Fuentes',
        position: 'Vestibulum Accumsan Neque Company',
        office: 'Jersey',
        ext: { obj: '8262' },
        startDate: new Date('2018/07/29'),
        salary: 606004,
        status: 'New Lead',
        percent: 0.25,
        description: 'When there was despair in the dust bowl and depression across the land, she saw a nation conquer fear itself with a New Deal, new jobs and a new sense of common purpose. Yes we can.',
        categories: ['Communications', 'Developer'],
    },
    {
        name: 'Maya Haney',
        position: 'Ac Foundation',
        office: 'Falkland Islands',
        ext: { obj: '8262' },
        startDate: new Date('2016/09/03'),
        salary: 745500,
        status: 'New Lead',
        percent: 0.25,
        description: 'When there was despair in the dust bowl and depression across the land, she saw a nation conquer fear itself with a New Deal, new jobs and a new sense of common purpose. Yes we can.',
        categories: ['Communications', 'Developer'],
    },
    {
        name: 'Aquila Battle',
        position: 'Sociis Natoque Penatibus Foundation',
        office: 'Azerbaijan',
        ext: { obj: '8262' },
        startDate: new Date('2016/03/06'),
        salary: 582265,
        status: 'New Lead',
        percent: 0.25,
        description: 'When there was despair in the dust bowl and depression across the land, she saw a nation conquer fear itself with a New Deal, new jobs and a new sense of common purpose. Yes we can.',
        categories: ['Communications', 'Developer'],
    },
    {
        name: 'Connor Coleman',
        position: 'Orci Lacus Vestibulum Foundation',
        office: 'Croatia',
        ext: { obj: '8262' },
        startDate: new Date('2016/10/21'),
        salary: 416958,
        status: 'New Lead',
        percent: 0.25,
        description: 'When there was despair in the dust bowl and depression across the land, she saw a nation conquer fear itself with a New Deal, new jobs and a new sense of common purpose. Yes we can.',
        categories: ['Communications', 'Developer'],
    },
    {
        name: 'Charity Thomas',
        position: 'Convallis Ligula Donec Inc.',
        office: 'Benin',
        ext: { obj: '8262' },
        startDate: new Date('2016/07/12'),
        salary: 540999,
        status: 'New Lead',
        percent: 0.25,
        description: 'When there was despair in the dust bowl and depression across the land, she saw a nation conquer fear itself with a New Deal, new jobs and a new sense of common purpose. Yes we can.',
        categories: ['Communications', 'Developer'],
    },
    {
        name: 'Blythe Powers',
        position: 'Amet Orci Limited',
        office: 'Falkland Islands',
        ext: { obj: '8262' },
        startDate: new Date('2016/01/23'),
        salary: 480067,
        status: 'New Lead',
        percent: 0.25,
        description: 'When there was despair in the dust bowl and depression across the land, she saw a nation conquer fear itself with a New Deal, new jobs and a new sense of common purpose. Yes we can.',
        categories: ['Communications', 'Human Resources'],
    },
    {
        name: 'Adria Battle',
        position: 'Ornare Lectus Incorporated',
        office: 'British Indian Ocean Territory',
        ext: { obj: '8262' },
        startDate: new Date('2016/05/28'),
        salary: 257937,
        status: 'New Lead',
        percent: 0.25,
        description: 'When there was despair in the dust bowl and depression across the land, she saw a nation conquer fear itself with a New Deal, new jobs and a new sense of common purpose. Yes we can.',
        categories: ['Communications', 'Human Resources'],
    },
    {
        name: 'Melanie Mcintyre',
        position: 'Nunc Corp.',
        office: 'Mongolia',
        ext: { obj: '8262' },
        startDate: new Date('2016/01/06'),
        salary: 359737,
        status: 'New Lead',
        percent: 0.25,
        description: 'When there was despair in the dust bowl and depression across the land, she saw a nation conquer fear itself with a New Deal, new jobs and a new sense of common purpose. Yes we can.',
        categories: ['Communications', 'Human Resources'],
    },
    {
        name: 'Keely Bauer',
        position: 'Nec Tempus Institute',
        office: 'Somalia',
        ext: { obj: '8262' },
        startDate: new Date('2016/03/09'),
        salary: 99718,
        status: 'New Lead',
        percent: 0.25,
        description: 'When there was despair in the dust bowl and depression across the land, she saw a nation conquer fear itself with a New Deal, new jobs and a new sense of common purpose. Yes we can.',
        categories: ['Communications', 'Human Resources'],
    },
    {
        name: 'Noelani Strong',
        position: 'Nec LLP',
        office: 'Iran',
        ext: { obj: '8262' },
        startDate: new Date('2016/08/24'),
        salary: 480718,
        status: 'New Lead',
        percent: 0.25,
        description: 'When there was despair in the dust bowl and depression across the land, she saw a nation conquer fear itself with a New Deal, new jobs and a new sense of common purpose. Yes we can.',
        categories: ['Communications', 'Human Resources'],
    },
    {
        name: 'Jeanette Henderson',
        position: 'Eu Elit Nulla Corporation',
        office: 'Italy',
        ext: { obj: '8262' },
        startDate: new Date('2016/06/19'),
        salary: 253772,
        status: 'New Lead',
        percent: 0.25,
        description: 'When there was despair in the dust bowl and depression across the land, she saw a nation conquer fear itself with a New Deal, new jobs and a new sense of common purpose. Yes we can.',
        categories: ['Temporary', 'Developer'],
    },
    {
        name: 'Candace Huber',
        position: 'Sed Institute',
        office: 'Uganda',
        ext: { obj: '8262' },
        startDate: new Date('2016/06/16'),
        salary: 388879,
        status: 'New Lead',
        percent: 0.25,
        description: 'When there was despair in the dust bowl and depression across the land, she saw a nation conquer fear itself with a New Deal, new jobs and a new sense of common purpose. Yes we can.',
        categories: ['Temporary', 'Developer'],
    },
    {
        name: 'Bethany Potter',
        position: 'Vivamus Nibh Dolor Incorporated',
        office: 'Puerto Rico',
        ext: { obj: '8262' },
        startDate: new Date('2016/11/12'),
        salary: 747310,
        status: 'New Lead',
        percent: 0.25,
        description: 'When there was despair in the dust bowl and depression across the land, she saw a nation conquer fear itself with a New Deal, new jobs and a new sense of common purpose. Yes we can.',
        categories: ['Temporary', 'Developer'],
    },
    {
        name: 'Whoopi Burks',
        position: 'Justo Inc.',
        office: 'Fiji',
        ext: { obj: '8262' },
        startDate: new Date('2016/09/24'),
        salary: 803037,
        status: 'New Lead',
        percent: 0.25,
        description: 'There was despair in the dust bowl and depression across the land, she saw a nation conquer fear itself with a New Deal, new jobs and a new sense of common purpose. Yes we can.',
        categories: ['Temporary', 'Developer'],
    },
    {
        name: 'Sheila Long',
        position: 'Diam Associates',
        office: 'Sao Tome and Principe',
        ext: { obj: '8262' },
        startDate: new Date('2016/12/21'),
        salary: 674379,
        status: 'New Lead',
        percent: 0.25,
        description: 'There was despair in the dust bowl and depression across the land, she saw a nation conquer fear itself with a New Deal, new jobs and a new sense of common purpose. Yes we can.',
        categories: ['Temporary', 'Developer'],
    },
    {
        name: 'Sonya Church',
        position: 'Laoreet Institute',
        office: 'Grenada',
        ext: { obj: '8262' },
        startDate: new Date('2016/06/03'),
        salary: 625147,
        status: 'New Lead',
        percent: 0.25,
        description: 'There was despair in the dust bowl and depression across the land, she saw a nation conquer fear itself with a New Deal, new jobs and a new sense of common purpose. Yes we can.',
        categories: ['Temporary', 'Developer'],
    },
    {
        name: 'Shaine Forbes',
        position: 'Eu Arcu LLP',
        office: 'Cyprus',
        ext: { obj: '8262' },
        startDate: new Date('2016/01/18'),
        salary: 208100,
        status: 'New Lead',
        percent: 0.25,
        description: 'There was despair in the dust bowl and depression across the land, she saw a nation conquer fear itself with a New Deal, new jobs and a new sense of common purpose. Yes we can.',
        categories: ['Temporary', 'Developer'],
    },
    {
        name: 'Alexandra Patrick',
        position: 'Ligula Donec Inc.',
        office: 'Viet Nam',
        ext: { obj: '8262' },
        startDate: new Date('2016/04/09'),
        salary: 104063,
        status: 'New Lead',
        percent: 0.25,
        description: 'There was despair in the dust bowl and depression across the land, she saw a nation conquer fear itself with a New Deal, new jobs and a new sense of common purpose. Yes we can.',
        categories: ['Temporary', 'Developer'],
    },
    {
        name: 'Patience Vincent',
        position: 'Sem Molestie Associates',
        office: 'Philippines',
        ext: { obj: '8262' },
        startDate: new Date('2016/07/04'),
        salary: 673556,
        status: 'New Lead',
        percent: 0.25,
        description: 'There was despair in the dust bowl and depression across the land, she saw a nation conquer fear itself with a New Deal, new jobs and a new sense of common purpose. Yes we can.',
        categories: ['Temporary', 'Developer'],
    },
    {
        name: 'Evelyn Smith',
        position: 'Fusce Industries',
        office: 'Togo',
        ext: { obj: '8262' },
        startDate: new Date('2016/08/15'),
        salary: 737284,
        status: 'New Lead',
        percent: 0.25,
        description: 'There was despair in the dust bowl and depression across the land, she saw a nation conquer fear itself with a New Deal, new jobs and a new sense of common purpose. Yes we can.',
        categories: ['Temporary', 'Developer'],
    },
    {
        name: 'Kieran Gonzalez',
        position: 'Non Corp.',
        office: 'Equatorial Guinea',
        ext: { obj: '8262' },
        startDate: new Date('2016/08/24'),
        salary: 90195,
        status: 'New Lead',
        percent: 0.25,
        description: 'There was despair in the dust bowl and depression across the land, she saw a nation conquer fear itself with a New Deal, new jobs and a new sense of common purpose. Yes we can.',
        categories: ['Temporary', 'Developer'],
    },
    {
        name: 'Molly Oneil',
        position: 'Non Dui Consulting',
        office: 'Belize',
        ext: { obj: '8262' },
        startDate: new Date('2016/10/28'),
        salary: 140767,
        status: 'New Lead',
        percent: 0.25,
        description: 'There was despair in the dust bowl and depression across the land, she saw a nation conquer fear itself with a New Deal, new jobs and a new sense of common purpose. Yes we can.',
        categories: ['Temporary', 'Developer'],
    },
    {
        name: 'Nigel Davenport',
        position: 'Ullamcorper Velit In Industries',
        office: 'Vanuatu',
        ext: { obj: '8262' },
        startDate: new Date('2016/03/16'),
        salary: 70536,
        status: 'New Lead',
        percent: 0.25,
        description: 'There was despair in the dust bowl and depression across the land, she saw a nation conquer fear itself with a New Deal, new jobs and a new sense of common purpose. Yes we can.',
        categories: ['Temporary', 'Developer'],
    },
    {
        name: 'Thor Young',
        position: 'Malesuada Consulting',
        office: 'French Southern Territories',
        ext: { obj: '8262' },
        startDate: new Date('2016/01/28'),
        salary: 75501,
        status: 'New Lead',
        percent: 0.25,
        description: 'There was despair in the dust bowl and depression across the land, she saw a nation conquer fear itself with a New Deal, new jobs and a new sense of common purpose. Yes we can.',
        categories: ['Temporary', 'Developer'],
    },
    {
        name: 'Finn Delacruz',
        position: 'Lorem Industries',
        office: 'Cocos (Keeling) Islands',
        ext: { obj: '8262' },
        startDate: new Date('2016/12/11'),
        salary: 754967,
        status: 'New Lead',
        percent: 0.25,
        description: 'There was despair in the dust bowl and depression across the land, she saw a nation conquer fear itself with a New Deal, new jobs and a new sense of common purpose. Yes we can.',
        categories: ['Temporary', 'Developer'],
    },
    {
        name: 'Lane Henderson',
        position: 'Pede Foundation',
        office: 'Kazakhstan',
        ext: { obj: '8262' },
        startDate: new Date('2016/07/02'),
        salary: 842050,
        status: 'New Lead',
        percent: 0.25,
        description: 'There was despair in the dust bowl and depression across the land, she saw a nation conquer fear itself with a New Deal, new jobs and a new sense of common purpose. Yes we can.',
        categories: ['Temporary', 'Developer'],
    },
    {
        name: 'Shea Potter',
        position: 'Curabitur Limited',
        office: 'Timor-Leste',
        ext: { obj: '8262' },
        startDate: new Date('2016/05/07'),
        salary: 263629,
        status: 'New Lead',
        percent: 0.25,
        description: 'Labore sit nulla amet enim reprehenderit esse laborum Lorem quis in eu.',
        categories: ['Temporary', 'Developer'],
    },
    {
        name: 'Brynn Yang',
        position: 'Ut Limited',
        office: 'Mayotte',
        ext: { obj: '8262' },
        startDate: new Date('2016/01/17'),
        salary: 74292,
        status: 'New Lead',
        percent: 0.25,
        description: 'Labore sit nulla amet enim reprehenderit esse laborum Lorem quis in eu.',
        categories: ['Temporary', 'Developer'],
    },
    {
        name: 'Kylan Fuentes',
        position: 'Sapien Aenean Associates',
        office: 'Brazil',
        ext: { obj: '8262' },
        startDate: new Date('2016/12/28'),
        salary: 108632,
        status: 'New Lead',
        percent: 0.25,
        description: 'Labore sit nulla amet enim reprehenderit esse laborum Lorem quis in eu.',
        categories: ['Temporary', 'Developer'],
    },
    {
        name: 'Lionel Mcbride',
        position: 'Ipsum PC',
        office: 'Portugal',
        ext: { obj: '8262' },
        startDate: new Date('2016/07/11'),
        salary: 34244,
        status: 'New Lead',
        percent: 0.25,
        description: 'Labore sit nulla amet enim reprehenderit esse laborum Lorem quis in eu.',
        categories: ['Temporary', 'Developer'],
    },
    {
        name: 'Paul Lucas',
        position: 'Eget LLP',
        office: 'Nicaragua',
        ext: { obj: '8262' },
        startDate: new Date('2016/09/30'),
        salary: 690834,
        status: 'New Lead',
        percent: 0.25,
        description: 'Labore sit nulla amet enim reprehenderit esse laborum Lorem quis in eu.',
        categories: ['Temporary', 'Developer'],
    },
    {
        name: 'Lareina Williamson',
        position: 'Imperdiet Ullamcorper Ltd',
        office: 'Cocos (Keeling) Islands',
        ext: { obj: '8262' },
        startDate: new Date('2016/12/01'),
        salary: 603498,
        status: 'New Lead',
        percent: 0.25,
        description: 'Labore sit nulla amet enim reprehenderit esse laborum Lorem quis in eu.',
        categories: ['Temporary', 'Developer'],
    },
    {
        name: 'Amy Acevedo',
        position: 'Id Institute',
        office: 'Cook Islands',
        ext: { obj: '8262' },
        startDate: new Date('2016/02/04'),
        salary: 125165,
        status: 'New Lead',
        percent: 0.25,
        description: 'Labore sit nulla amet enim reprehenderit esse laborum Lorem quis in eu.',
        categories: ['Temporary', 'Developer'],
    },
    {
        name: 'Nomlanga Silva',
        position: 'Eget LLC',
        office: 'Belize',
        ext: { obj: '8262' },
        startDate: new Date('2016/01/31'),
        salary: 268509,
        status: 'New Lead',
        percent: 0.25,
        description: 'Labore sit nulla amet enim reprehenderit esse laborum Lorem quis in eu.',
        categories: ['Temporary', 'Developer'],
    },
    {
        name: 'Amena Stone',
        position: 'Enim Incorporated',
        office: 'Guinea',
        ext: { obj: '8262' },
        startDate: new Date('2016/09/23'),
        salary: 214381,
        status: 'New Lead',
        percent: 0.25,
        description: 'There was despair in the dust bowl and depression across the land, she saw a nation conquer fear itself with a New Deal, new jobs and a new sense of common purpose. Yes we can.',
        categories: ['Temporary', 'Developer'],
    },
    {
        name: 'Danielle Coffey',
        position: 'Feugiat Placerat Corp.',
        office: 'Sao Tome and Principe',
        ext: { obj: '8262' },
        startDate: new Date('2016/06/17'),
        salary: 137423,
        status: 'New Lead',
        percent: 0.25,
        description: 'When there was despair in the dust bowl and depression across the land, she saw a nation conquer fear itself with a New Deal, new jobs and a new sense of common purpose. Yes we can.',
        categories: ['Temporary', 'Developer'],
    },
    {
        name: 'Buffy Russell',
        position: 'Lacus Quisque Ltd',
        office: 'Ecuador',
        ext: { obj: '8262' },
        startDate: new Date('2016/10/17'),
        salary: 612184,
        status: 'New Lead',
        percent: 0.25,
        description: 'When there was despair in the dust bowl and depression across the land, she saw a nation conquer fear itself with a New Deal, new jobs and a new sense of common purpose. Yes we can.',
        categories: ['Office Skills'],
    },
    {
        name: 'Kaitlin Lamb',
        position: 'Malesuada Fringilla Est Associates',
        office: 'Algeria',
        ext: { obj: '8262' },
        startDate: new Date('2016/10/18'),
        salary: 327367,
        status: 'New Lead',
        percent: 0.25,
        description: 'When there was despair in the dust bowl and depression across the land, she saw a nation conquer fear itself with a New Deal, new jobs and a new sense of common purpose. Yes we can.',
        categories: ['Office Skills'],
    },
    {
        name: 'Leilani Yates',
        position: 'Mus Proin LLC',
        office: 'South Sudan',
        ext: { obj: '8262' },
        startDate: new Date('2016/05/27'),
        salary: 743493,
        status: 'New Lead',
        percent: 0.25,
        description: 'When there was despair in the dust bowl and depression across the land, she saw a nation conquer fear itself with a New Deal, new jobs and a new sense of common purpose. Yes we can.',
        categories: ['Office Skills'],
    },
    {
        name: 'Jemima Moon',
        position: 'Phasellus Corp.',
        office: 'South Georgia and The South Sandwich Islands',
        ext: { obj: '8262' },
        startDate: new Date('2016/05/21'),
        salary: 496067,
        status: 'New Lead',
        percent: 0.25,
        description: 'When there was despair in the dust bowl and depression across the land, she saw a nation conquer fear itself with a New Deal, new jobs and a new sense of common purpose. Yes we can.',
        categories: ['Office Skills'],
    },
    {
        name: 'Hiroko Schwartz',
        position: 'Neque Institute',
        office: 'Saint Vincent and The Grenadines',
        ext: { obj: '8262' },
        startDate: new Date('2016/03/13'),
        salary: 178782,
        status: 'New Lead',
        percent: 0.25,
        description: 'When there was despair in the dust bowl and depression across the land, she saw a nation conquer fear itself with a New Deal, new jobs and a new sense of common purpose. Yes we can.',
        categories: ['Office Skills'],
    },
    {
        name: 'Nathaniel Jensen',
        position: 'Mi Tempor Limited',
        office: 'Dominica',
        ext: { obj: '8262' },
        startDate: new Date('2018/12/05'),
        salary: 37441,
        status: 'New Lead',
        percent: 0.25,
        description: 'When there was despair in the dust bowl and depression across the land, she saw a nation conquer fear itself with a New Deal, new jobs and a new sense of common purpose. Yes we can.',
        categories: ['Office Skills'],
    },
    {
        name: 'Silas Sweeney',
        position: 'Ultrices Institute',
        office: 'Turkmenistan',
        ext: { obj: '8262' },
        startDate: new Date('2018/11/13'),
        salary: 152980,
        status: 'New Lead',
        percent: 0.25,
        description: 'When there was despair in the dust bowl and depression across the land, she saw a nation conquer fear itself with a New Deal, new jobs and a new sense of common purpose. Yes we can.',
        categories: ['Office Skills'],
    },
    {
        name: 'Jermaine Barry',
        position: 'Dapibus Corporation',
        office: 'Uzbekistan',
        ext: { obj: '8262' },
        startDate: new Date('2018/03/06'),
        salary: 409463,
        status: 'New Lead',
        percent: 0.25,
        description: 'When there was despair in the dust bowl and depression across the land, she saw a nation conquer fear itself with a New Deal, new jobs and a new sense of common purpose. Yes we can.',
        categories: ['Office Skills'],
    },
    {
        name: 'Tatiana Nichols',
        position: 'Nec Diam Industries',
        office: 'Cook Islands',
        ext: { obj: '8262' },
        startDate: new Date('2018/05/22'),
        salary: 51155,
        status: 'New Lead',
        percent: 0.25,
        description: 'When there was despair in the dust bowl and depression across the land, she saw a nation conquer fear itself with a New Deal, new jobs and a new sense of common purpose. Yes we can.',
        categories: ['Office Skills'],
    },
    {
        name: 'Rama Waller',
        position: 'Sem Pellentesque LLC',
        office: 'Andorra',
        ext: { obj: '8262' },
        startDate: new Date('2018/12/01'),
        salary: 223227,
        status: 'New Lead',
        percent: 0.25,
        description: 'When there was despair in the dust bowl and depression across the land, she saw a nation conquer fear itself with a New Deal, new jobs and a new sense of common purpose. Yes we can.',
        categories: ['Office Skills'],
    },
];

/**
 * @fileoverview added by tsickle
 * Generated from: components/table/details-table/details-table-example.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ExtraDetails extends novo_elements__WEBPACK_IMPORTED_MODULE_3__["BaseRenderer"] {
}
ExtraDetails.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'extra-details',
                template: `
    <div class="extra-data">
      <label><i class="bhi-info"></i>Description</label>
      <p>{{ data.description }}</p>
      <label><i class="bhi-info"></i>Categories</label>
      <p>{{ data.categories }}</p>
    </div>
  `
            }] }
];
/**
 * \@title Details Table Example
 */
class DetailsTableExample {
    constructor() {
        this.theme = HEADER_COLORS[0];
        this.configuration = {
            columns: TableColumns.slice(),
            rows: TableData.slice(),
            config: {
                paging: {
                    current: 1,
                    itemsPerPage: 10,
                    onPageChange: (/**
                     * @param {?} event
                     * @return {?}
                     */
                    (event) => {
                        this.configuration.config.paging.current = event.page;
                        this.configuration.config.paging.itemsPerPage = event.itemsPerPage;
                    }),
                },
                sorting: true,
                filtering: true,
                ordering: true,
                resizing: true,
                hasDetails: true,
                detailsRenderer: ExtraDetails,
            },
        };
    }
}
DetailsTableExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'details-table-example',
                template: "<novo-table class=\"table-condensed\"\n            [rows]=\"configuration.rows\"\n            [columns]=\"configuration.columns\"\n            [config]=\"configuration.config\"\n            rowIdentifier=\"name\"></novo-table>\n",
                styles: [""]
            }] }
];
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: components/table/editable-table/editable-table-example.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@title Editable Table Example
 */
class EditableTableExample {
    constructor() {
        this.configuration = {
            columns: [
                {
                    title: 'Name',
                    name: 'name',
                    ordering: true,
                    filtering: true,
                    editorType: 'TablePickerControl',
                    editorConfig: {
                        key: 'name',
                        config: {
                            options: [
                                'Joshua Godi',
                                'Kameron Sween',
                                'Brian Kimball',
                                'Sweeney Todd',
                                'Tom Cruise',
                                'Ed Bailey',
                                'Bo Jackson',
                                'Ernie McDudson',
                            ],
                        },
                    },
                },
                {
                    title: 'Job Type',
                    name: 'jobType',
                    ordering: true,
                    filtering: true,
                    options: ['Freelance', 'Contact', 'Billable'],
                    multiple: true,
                    editorType: 'SelectControl',
                    editorConfig: {
                        key: 'jobType',
                        options: [
                            { value: 'Freelance', label: 'Freelance' },
                            { value: 'Contract', label: 'Contract' },
                            { value: 'Billable', label: 'Billable' },
                        ],
                    },
                },
                {
                    title: 'Rate',
                    name: 'rate',
                    ordering: true,
                    filtering: true,
                    renderer: novo_elements__WEBPACK_IMPORTED_MODULE_3__["PercentageCell"],
                    editorType: 'TextBoxControl',
                    editorConfig: {
                        key: 'rate',
                        type: 'percentage',
                        required: true,
                        interactions: [
                            {
                                event: 'change',
                                script: (/**
                                 * @param {?} form
                                 * @return {?}
                                 */
                                (form) => {
                                    console.log('Form Interaction Called!', form); // tslint:disable-line
                                    if (form.value.rate) {
                                        if (Number(form.value.rate) >= 0.75) {
                                            form.controls.rating.setValue('High');
                                        }
                                        else if (Number(form.value.rate) >= 0.5) {
                                            form.controls.rating.setValue('Medium');
                                        }
                                        else {
                                            form.controls.rating.setValue('Low');
                                        }
                                    }
                                }),
                            },
                        ],
                    },
                },
                { title: 'Rating', name: 'rating' },
            ],
            rows: new novo_elements__WEBPACK_IMPORTED_MODULE_3__["ArrayCollection"]([
                { id: 1, name: 'Joshua Godi', jobType: 'Freelance', rate: null, rating: 'Low' },
                { id: 2, name: 'Brian Kimball', jobType: 'Contact', rate: 0.5, rating: 'Medium' },
                { id: 3, name: 'Kameron Sween', jobType: 'Billable', rate: 1.0, rating: 'High' },
            ]),
            config: {
                paging: {
                    current: 1,
                    itemsPerPage: 10,
                    onPageChange: (/**
                     * @param {?} event
                     * @return {?}
                     */
                    (event) => {
                        this.configuration.config.paging.current = event.page;
                        this.configuration.config.paging.itemsPerPage = event.itemsPerPage;
                    }),
                },
                filtering: true,
                sorting: true,
                ordering: true,
                resizing: true,
            },
        };
        this.editableNewRowDefault = { name: 'Default', jobType: 'Contract' };
    }
}
EditableTableExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'editable-table-example',
                template: "<novo-table [theme]=\"'sunflower'\" [dataProvider]=\"configuration.rows\" [columns]=\"configuration.columns\" [config]=\"configuration.config\" editable=\"true\" #table>\n    <novo-table-header class=\"demo-custom-header\">\n        <h4>Editable Table</h4>\n        <div>\n            <input type=\"text\" placeholder=\"row\" #row/>\n            <input type=\"text\" placeholder=\"column\" #column/>\n            <button theme=\"secondary\" (click)=\"table.setTableEdit(row.value, column.value)\" *ngIf=\"!table.editing\">Add/Edit</button>\n            <button theme=\"secondary\" (click)=\"table.cancelEditing()\" *ngIf=\"table.editing\">Cancel</button>\n            <button theme=\"primary\" (click)=\"table.cancelEditing()\" *ngIf=\"table.editing\">Save</button>\n        </div>\n    </novo-table-header>\n    <novo-table-footer class=\"demo-custom-footer\" [class.editing]=\"table.editing\">\n        <button theme=\"dialogue\" icon=\"addcard\" side=\"left\" *ngIf=\"table.editing\" (click)=\"table.addEditableRow(editableNewRowDefault)\">Add Row</button>\n    </novo-table-footer>\n    <div classs=\"table-message\" table-empty-message><i class=\"bhi-search-question\"></i> Custom Empty State Template! Click RELOAD to get Data!</div>\n    <div classs=\"table-message\" table-no-matching-records-message><i class=\"bhi-search-question\"></i> Custom No Matched Records</div>\n</novo-table>\n<div class=\"final-value\">Table Value: {{table.formValue | json}}</div>\n",
                styles: [""]
            }] }
];
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: components/table/select-all-table/select-all-table-example.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@title Select All Table Example
 */
class SelectAllTableExample {
    constructor() {
        this.theme = HEADER_COLORS[0];
        this.configuration = {
            columns: TableColumns.slice(),
            rows: TableData.slice(),
            config: {
                paging: {
                    current: 1,
                    itemsPerPage: 10,
                    onPageChange: (/**
                     * @param {?} event
                     * @return {?}
                     */
                    (event) => {
                        this.configuration.config.paging.current = event.page;
                        this.configuration.config.paging.itemsPerPage = event.itemsPerPage;
                    }),
                },
                sorting: true,
                filtering: true,
                ordering: true,
                resizing: true,
                selectAllEnabled: true,
                rowSelectionStyle: 'checkbox',
            },
        };
    }
    /**
     * @return {?}
     */
    singleAction() {
        window.alert('Action!');
    }
    /**
     * @param {?} action
     * @return {?}
     */
    selectedAction(action) {
        window.alert(`You clicked ${action}!`);
    }
}
SelectAllTableExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'select-all-table-example',
                template: "<novo-table [rows]=\"configuration.rows\" [columns]=\"configuration.columns\" [config]=\"configuration.config\" #table>\n    <novo-table-actions>\n        <button theme=\"secondary\" (click)=\"singleAction()\">Click Me!</button>\n        <novo-dropdown side=\"right\" *ngIf=\"table.selected.length\">\n            <button theme=\"primary\" icon=\"collapse\" inverse>{{table.selected.length}} Selected</button>\n            <list>\n                <item (action)=\"selectedAction('action 1')\">Action 1</item>\n                <item (action)=\"selectedAction('action 2')\">Action 2</item>\n                <item (action)=\"selectedAction('action 3')\" disabled=\"true\">Action 3</item>\n            </list>\n        </novo-dropdown>\n    </novo-table-actions>\n</novo-table>\n",
                styles: [""]
            }] }
];
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: components/table/table/table-example.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@title Table Example
 */
class TableExample {
    constructor() {
        this.theme = HEADER_COLORS[0];
        this.configuration = {
            columns: TableColumns.slice(),
            rows: [],
            config: {
                paging: {
                    current: 1,
                    itemsPerPage: 10,
                    onPageChange: (/**
                     * @param {?} event
                     * @return {?}
                     */
                    (event) => {
                        this.configuration.config.paging.current = event.page;
                        this.configuration.config.paging.itemsPerPage = event.itemsPerPage;
                    }),
                },
                filtering: true,
                sorting: true,
                ordering: true,
                resizing: true,
            },
        };
    }
    /**
     * @return {?}
     */
    reload() {
        this.configuration.rows = TableData.slice();
    }
    /**
     * @return {?}
     */
    changeTheme() {
        /** @type {?} */
        let idx = HEADER_COLORS.indexOf(this.theme);
        if (idx === HEADER_COLORS.length - 1) {
            idx = -1;
        }
        this.theme = HEADER_COLORS[idx + 1];
    }
}
TableExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'table-example',
                template: "<novo-table [theme]=\"theme\"\n            [dataProvider]=\"configuration.rows\"\n            [columns]=\"configuration.columns\"\n            [config]=\"configuration.config\"\n            rowIdentifier=\"name\">\n    <novo-table-header class=\"demo-custom-header\">\n        TEST :)\n        <div>\n            <button theme=\"secondary\"\n                    (click)=\"reload()\">Reload Data</button>\n            <button theme=\"secondary\"\n                    (click)=\"changeTheme()\">Change Theme!</button>\n        </div>\n    </novo-table-header>\n    <div classs=\"table-message\"\n         table-empty-message>\n        <i class=\"bhi-search-question\"></i> Custom Empty State Template! Click RELOAD to get Data!</div>\n    <div classs=\"table-message\"\n         table-no-matching-records-message>\n        <i class=\"bhi-search-question\"></i> Custom No Matched Records</div>\n</novo-table>\n",
                styles: [""]
            }] }
];
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: components/table/total-footer-table/total-footer-table-example.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@title Total Footer Table Example
 */
class TotalFooterTableExample {
    constructor() {
        this.theme = HEADER_COLORS[0];
        this.configuration = {
            columns: [
                { title: 'Name', name: 'name', ordering: true, filtering: true },
                { title: 'Count 1', name: 'count1', ordering: true, filtering: true },
                { title: 'Count 2', name: 'count2', ordering: true, filtering: true },
                { title: 'Count 3', name: 'count3', ordering: true, filtering: true },
            ],
            rows: [
                { id: 1, name: 'Name 1', count1: 1, count2: 2, count3: 3 },
                { id: 2, name: 'Name 2', count1: 1, count2: 2, count3: 3 },
                { id: 3, name: 'Name 3', count1: 1, count2: 2, count3: 3 },
                { id: 4, name: 'Name 4', count1: 1, count2: 2, count3: 3 },
                { id: 5, name: 'Name 5', count1: 1, count2: 2, count3: 3 },
            ],
            config: {
                paging: {
                    current: 1,
                    itemsPerPage: 10,
                    onPageChange: (/**
                     * @param {?} event
                     * @return {?}
                     */
                    (event) => {
                        this.configuration.config.paging.current = event.page;
                        this.configuration.config.paging.itemsPerPage = event.itemsPerPage;
                    }),
                },
                footers: [
                    {
                        columns: ['count1', 'count2', 'count3'],
                        method: 'SUM',
                        labelColumn: 'name',
                        label: 'Mega Total',
                    },
                    {
                        columns: ['count1', 'count2', 'count3'],
                        method: 'AVG',
                        labelColumn: 'name',
                        label: 'Yep, Average!',
                    },
                ],
                filtering: true,
                sorting: true,
                ordering: true,
                resizing: true,
            },
        };
    }
}
TotalFooterTableExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'total-footer-table-example',
                template: "<novo-table [theme]=\"'grass'\" [dataProvider]=\"configuration.rows\" [columns]=\"configuration.columns\" [config]=\"configuration.config\">\n    <novo-table-header class=\"demo-custom-header\">\n        <h4>Total Footer</h4>\n    </novo-table-header>\n</novo-table>\n",
                styles: [""]
            }] }
];
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: design/colors/analytics-colors/analytics-colors-example.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@title Analytics Colors
 */
class AnalyticsColorsExample {
    /**
     * @param {?} toaster
     */
    constructor(toaster) {
        this.toaster = toaster;
        this.analyticsColors = [
            {
                name: 'grapefruit',
                variables: ['grapefruit'],
                hex: 'DA4453',
            },
            {
                name: 'bittersweet',
                variables: ['bittersweet'],
                hex: 'EB6845',
            },
            {
                name: 'sunflower',
                variables: ['sunflower'],
                hex: 'F6B042',
            },
            {
                name: 'grass',
                variables: ['grass'],
                hex: '8CC152',
            },
            {
                name: 'mint',
                variables: ['mint'],
                hex: '37BC9B',
            },
            {
                name: 'aqua',
                variables: ['aqua'],
                hex: '3BAFDA',
            },
            {
                name: 'ocean',
                variables: ['ocean'],
                hex: '4A89DC',
            },
            {
                name: 'carnation',
                variables: ['carnation'],
                hex: 'D770AD',
            },
            {
                name: 'lavender',
                variables: ['lavender'],
                hex: '967ADC',
            },
            {
                name: 'mountain',
                variables: ['mountain'],
                hex: '9678B6',
            },
        ];
    }
    /**
     * @param {?} color
     * @return {?}
     */
    copyLink(color) {
        // Create dom element to copy from
        /** @type {?} */
        const copyFrom = document.createElement('textarea');
        copyFrom.textContent = `#${color.hex}`;
        /** @type {?} */
        const body = document.getElementsByTagName('body')[0];
        body.appendChild(copyFrom);
        copyFrom.select();
        // Copy text
        document.execCommand('copy');
        // Delete element
        body.removeChild(copyFrom);
        // Set toast options
        this.options = {
            title: `#${color.hex}`,
            message: 'Copied to your clipboard',
            theme: color.variables[0],
            icon: 'clipboard',
            position: 'growlTopRight',
        };
        if (color.name === 'action') {
            this.options.theme = 'ocean';
        }
        // Fire toast
        this.toaster.alert(this.options);
    }
}
AnalyticsColorsExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'analytics-colors-example',
                template: "<article class=\"color-blocks analytics-colors\">\n  <div *ngFor=\"let color of analyticsColors\" class=\"block\">\n      <div class=\"color-square bgc-{{color.variables[0]}}\" (click)=\"copyLink(color)\">\n        <h3 class=\"color-text\"><span>#</span>{{color.hex}}</h3>\n      </div>\n      <h6>{{color.name}}</h6>\n      <span class=\"vars\" *ngFor=\"let variable of color.variables\">${{variable}}</span>\n  </div>\n</article>\n",
                styles: [":host .color-blocks{display:flex;flex-direction:row;justify-content:flex-start;flex-wrap:wrap;align-items:flex-end;width:100%}:host .color-blocks .block{display:inline-block;text-align:center;width:25%;min-width:200px;position:relative;padding:20px}:host .color-blocks .block:active .color-square,:host .color-blocks .block:focus .color-square,:host .color-blocks .block:hover .color-square{transform:scale(1.125)}:host .color-blocks .block .color-square{border-radius:4px;height:150px;justify-content:center;align-items:center;display:flex;position:relative}:host .color-blocks .color-text:after{content:\"Click to copy\";position:absolute;color:rgba(255,255,255,.6);left:50%;bottom:40px;font-size:10px;text-transform:uppercase;transform:translateX(-50%);width:100%}"]
            }] }
];
/** @nocollapse */
AnalyticsColorsExample.ctorParameters = () => [
    { type: novo_elements__WEBPACK_IMPORTED_MODULE_3__["NovoToastService"] }
];
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: design/colors/entity-colors/entity-colors-example.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@title Entity Colors
 */
class EntityColorsExample {
    /**
     * @param {?} toaster
     */
    constructor(toaster) {
        this.toaster = toaster;
        this.entityColors = [
            {
                name: 'lead',
                variables: ['lead'],
                hex: 'AA6699',
            },
            {
                name: 'contact',
                variables: ['contact'],
                hex: 'FFAA44',
            },
            {
                name: 'company',
                variables: ['company'],
                hex: '3399DD',
            },
            {
                name: 'candidate',
                variables: ['candidate'],
                hex: '44BB77',
            },
            {
                name: 'opportunity',
                variables: ['opportunity'],
                hex: '662255',
            },
            {
                name: 'job',
                variables: ['job'],
                hex: 'BB5566',
            },
            {
                name: 'job code',
                variables: ['jobCode'],
                hex: '696D79',
            },
            {
                name: 'earn code',
                variables: ['earnCode'],
                hex: '696D79',
            },
            {
                name: 'submission',
                variables: ['submission'],
                hex: 'A9ADBB',
            },
            {
                name: 'placement',
                variables: ['placement'],
                hex: '0B344F',
            },
            {
                name: 'sendout',
                variables: ['sendout'],
                hex: '747884',
            },
            {
                name: 'note',
                variables: ['note'],
                hex: '747884',
            },
            {
                name: 'contract',
                variables: ['contract'],
                hex: '454EA0',
            },
            {
                name: 'invoice statement',
                variables: ['invoiceStatement'],
                hex: '696D79',
            },
            {
                name: 'billable charge',
                variables: ['billableCharge'],
                hex: '696D79',
            },
            {
                name: 'payable charge',
                variables: ['payableCharge'],
                hex: '696D79',
            },
        ];
    }
    /**
     * @param {?} color
     * @return {?}
     */
    copyLink(color) {
        // Create dom element to copy from
        /** @type {?} */
        const copyFrom = document.createElement('textarea');
        copyFrom.textContent = `#${color.hex}`;
        /** @type {?} */
        const body = document.getElementsByTagName('body')[0];
        body.appendChild(copyFrom);
        copyFrom.select();
        // Copy text
        document.execCommand('copy');
        // Delete element
        body.removeChild(copyFrom);
        // Set toast options
        this.options = {
            title: `#${color.hex}`,
            message: 'Copied to your clipboard',
            theme: color.variables[0],
            icon: 'clipboard',
            position: 'growlTopRight',
        };
        if (color.name === 'action') {
            this.options.theme = 'ocean';
        }
        // Fire toast
        this.toaster.alert(this.options);
    }
}
EntityColorsExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'entity-colors-example',
                template: "<article class=\"color-blocks entity-colors\">\n  <div *ngFor=\"let color of entityColors\" class=\"block\">\n      <div class=\"color-square bgc-{{color.variables[0]}}\" (click)=\"copyLink(color)\">\n        <h3 class=\"color-text\"><span>#</span>{{color.hex}}</h3>\n      </div>\n      <h6>{{color.name}}</h6>\n      <span class=\"vars\" *ngFor=\"let variable of color.variables\">${{variable}}</span>\n  </div>\n</article>\n",
                styles: [":host .color-blocks{display:flex;flex-direction:row;justify-content:flex-start;flex-wrap:wrap;align-items:flex-end;width:100%}:host .color-blocks .block{display:inline-block;text-align:center;width:25%;min-width:200px;position:relative;padding:20px}:host .color-blocks .block:active .color-square,:host .color-blocks .block:focus .color-square,:host .color-blocks .block:hover .color-square{transform:scale(1.125)}:host .color-blocks .block .color-square{border-radius:4px;height:150px;justify-content:center;align-items:center;display:flex;position:relative}:host .color-blocks .color-text:after{content:\"Click to copy\";position:absolute;color:rgba(255,255,255,.6);left:50%;bottom:40px;font-size:10px;text-transform:uppercase;transform:translateX(-50%);width:100%}"]
            }] }
];
/** @nocollapse */
EntityColorsExample.ctorParameters = () => [
    { type: novo_elements__WEBPACK_IMPORTED_MODULE_3__["NovoToastService"] }
];
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: design/colors/primary-colors/primary-colors-example.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@title Primary Colors
 */
class PrimaryColorsExample {
    /**
     * @param {?} toaster
     */
    constructor(toaster) {
        this.toaster = toaster;
        this.primaryColors = [
            {
                name: 'navigation',
                variables: ['navigation'],
                hex: '2F384F',
            },
            {
                name: 'positive',
                variables: ['positive'],
                hex: '4A89DC',
            },
            {
                name: 'dark',
                variables: ['dark'],
                hex: '3D464D',
            },
            {
                name: 'background',
                variables: ['background'],
                hex: 'F4F4F4',
            },
            {
                name: 'background dark',
                variables: ['background-dark'],
                hex: 'E2E2E2',
            },
            {
                name: 'neutral',
                variables: ['neutral'],
                hex: '4F5361',
            },
            {
                name: 'success',
                variables: ['success'],
                hex: '8CC152',
            },
            {
                name: 'negative',
                variables: ['negative'],
                hex: 'DA4453',
            },
            {
                name: 'warning',
                variables: ['warning'],
                hex: 'F6B042',
            },
            {
                name: 'empty',
                variables: ['empty'],
                hex: 'CCCDCC',
            },
            {
                name: 'sand',
                variables: ['sand'],
                hex: 'F4F4F4',
            },
            {
                name: 'silver',
                variables: ['silver'],
                hex: 'E2E2E2',
            },
            {
                name: 'stone',
                variables: ['stone'],
                hex: 'BEBEBE',
            },
            {
                name: 'ash',
                variables: ['ash'],
                hex: 'A0A0A0',
            },
            {
                name: 'slate',
                variables: ['slate'],
                hex: '707070',
            },
            {
                name: 'charcoal',
                variables: ['charcoal'],
                hex: '282828',
            },
        ];
    }
    /**
     * @param {?} color
     * @return {?}
     */
    copyLink(color) {
        // Create dom element to copy from
        /** @type {?} */
        const copyFrom = document.createElement('textarea');
        copyFrom.textContent = `#${color.hex}`;
        /** @type {?} */
        const body = document.getElementsByTagName('body')[0];
        body.appendChild(copyFrom);
        copyFrom.select();
        // Copy text
        document.execCommand('copy');
        // Delete element
        body.removeChild(copyFrom);
        // Set toast options
        this.options = {
            title: `#${color.hex}`,
            message: 'Copied to your clipboard',
            theme: color.variables[0],
            icon: 'clipboard',
            position: 'growlTopRight',
        };
        if (color.name === 'action') {
            this.options.theme = 'ocean';
        }
        // Fire toast
        this.toaster.alert(this.options);
    }
}
PrimaryColorsExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'primary-colors-example',
                template: "<article class=\"color-blocks primary-colors\">\n  <div *ngFor=\"let color of primaryColors\" class=\"block\">\n      <div class=\"color-square bgc-{{color.variables[0]}}\" (click)=\"copyLink(color)\">\n        <h3 class=\"color-text\"><span>#</span>{{color.hex}}</h3>\n      </div>\n      <h6>{{color.name}}</h6>\n      <span class=\"vars\" *ngFor=\"let variable of color.variables\">${{variable}}</span>\n  </div>\n</article>\n",
                styles: [":host .color-blocks{display:flex;flex-direction:row;justify-content:flex-start;flex-wrap:wrap;align-items:flex-end;width:100%}:host .color-blocks .block{display:inline-block;text-align:center;width:25%;min-width:200px;position:relative;padding:20px}:host .color-blocks .block:active .color-square,:host .color-blocks .block:focus .color-square,:host .color-blocks .block:hover .color-square{transform:scale(1.125)}:host .color-blocks .block .color-square{border-radius:4px;height:150px;justify-content:center;align-items:center;display:flex;position:relative}:host .color-blocks .block .color-square.bgc-background .color-text:after,:host .color-blocks .block .color-square.bgc-background-dark .color-text:after,:host .color-blocks .block .color-square.bgc-empty .color-text:after,:host .color-blocks .block .color-square.bgc-sand .color-text:after,:host .color-blocks .block .color-square.bgc-silver .color-text:after,:host .color-blocks .block .color-square.bgc-stone .color-text:after{content:\"Click to copy\";position:absolute;color:rgba(0,0,0,.6);left:50%;bottom:40px;font-size:10px;text-transform:uppercase;transform:translateX(-50%);width:100%}:host .color-blocks .color-text:after{content:\"Click to copy\";position:absolute;color:rgba(255,255,255,.6);left:50%;bottom:40px;font-size:10px;text-transform:uppercase;transform:translateX(-50%);width:100%}"]
            }] }
];
/** @nocollapse */
PrimaryColorsExample.ctorParameters = () => [
    { type: novo_elements__WEBPACK_IMPORTED_MODULE_3__["NovoToastService"] }
];
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: form-controls/chips/async-chips/async-chips-example.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@title Async Chips Example
 */
class AsyncChipsExample {
    constructor() {
        this.placeholder = 'Select...';
        /** @type {?} */
        const states = [
            'Alabama',
            'Alaska',
            'Arizona',
            'Arkansas',
            'California',
            'Colorado',
            'Connecticut',
            'Delaware',
            'Florida',
            'Georgia',
            'Hawaii',
            'Idaho',
            'Illinois',
            'Indiana',
            'Iowa',
            'Kansas',
            'Kentucky',
            'Louisiana',
            'Maine',
            'Maryland',
            'Massachusetts',
            'Michigan',
            'Minnesota',
            'Mississippi',
            'Missouri',
            'Montana',
            'Nebraska',
            'Nevada',
            'New Hampshire',
            'New Jersey',
            'New Mexico',
            'New York',
            'North Dakota',
            'North Carolina',
            'Ohio',
            'Oklahoma',
            'Oregon',
            'Pennsylvania',
            'Rhode Island',
            'South Carolina',
            'South Dakota',
            'Tennessee',
            'Texas',
            'Utah',
            'Vermont',
            'Virginia',
            'Washington',
            'West Virginia',
            'Wisconsin',
            'Wyoming',
        ];
        /** @type {?} */
        const abbrieviated = [
            {
                value: 'USA',
                label: 'United States',
            },
            {
                value: 'GB',
                label: 'Great Britain',
            },
            {
                value: 'CA',
                label: 'Canada',
            },
            {
                value: 'AU',
                label: 'Austrailia',
            },
        ];
        this.async = {
            options: (/**
             * @return {?}
             */
            () => {
                return new Promise((/**
                 * @param {?} resolve
                 * @return {?}
                 */
                (resolve) => {
                    setTimeout((/**
                     * @return {?}
                     */
                    () => {
                        resolve(abbrieviated);
                    }), 300);
                }));
            }),
            getLabels: (/**
             * @param {?} data
             * @return {?}
             */
            (data) => {
                return new Promise((/**
                 * @param {?} resolve
                 * @return {?}
                 */
                (resolve) => {
                    setTimeout((/**
                     * @return {?}
                     */
                    () => {
                        /** @type {?} */
                        const values = data.map((/**
                         * @param {?} item
                         * @return {?}
                         */
                        (item) => item.value));
                        /** @type {?} */
                        const results = abbrieviated.filter((/**
                         * @param {?} item
                         * @return {?}
                         */
                        (item) => values.includes(item.value)));
                        resolve(results);
                    }), 300);
                }));
            }),
        };
        this.value = [
            {
                value: 'USA',
            },
            {
                value: 'GB',
            },
        ];
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onChanged(event) {
        console.log('EVENT', event); // tslint:disable-line
    }
}
AsyncChipsExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'async-chips-example',
                template: "<div class=\"selected-value\">Selected Value: {{value}}</div>\n<novo-chips [source]=\"async\" [placeholder]=\"placeholder\" [(ngModel)]=\"value\" (changed)=\"onChanged($event)\"></novo-chips>\n",
                styles: [""]
            }] }
];
/** @nocollapse */
AsyncChipsExample.ctorParameters = () => [];
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: form-controls/chips/basic-chips/basic-chips-example.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@title Basic Chips Example
 */
class BasicChipsExample {
    constructor() {
        this.staticDemo = {
            options: [
                'Alabama',
                'Alaska',
                'Arizona',
                'Arkansas',
                'California',
                'Colorado',
                'Connecticut',
                'Delaware',
                'Florida',
                'Georgia',
                'Hawaii',
                'Idaho',
                'Illinois',
                'Indiana',
                'Iowa',
                'Kansas',
                'Kentucky',
                'Louisiana',
                'Maine',
                'Maryland',
                'Massachusetts',
                'Michigan',
                'Minnesota',
                'Mississippi',
                'Missouri',
                'Montana',
                'Nebraska',
                'Nevada',
                'New Hampshire',
                'New Jersey',
                'New Mexico',
                'New York',
                'North Dakota',
                'North Carolina',
                'Ohio',
                'Oklahoma',
                'Oregon',
                'Pennsylvania',
                'Rhode Island',
                'South Carolina',
                'South Dakota',
                'Tennessee',
                'Texas',
                'Utah',
                'Vermont',
                'Virginia',
                'Washington',
                'West Virginia',
                'Wisconsin',
                'Wyoming',
            ],
        };
        this.placeholder = 'Select...';
        this.value = ['Alabama'];
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onChanged(event) {
        console.log('EVENT', event); // tslint:disable-line
    }
}
BasicChipsExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'basic-chips-example',
                template: "<div class=\"selected-value\">Selected Value: {{value}}</div>\n<novo-chips [source]=\"staticDemo\" [placeholder]=\"placeholder\" [(ngModel)]=\"value\" (changed)=\"onChanged($event)\"></novo-chips>\n",
                styles: [""]
            }] }
];
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: form-controls/chips/close-on-select-chips/close-on-select-chips-example.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@title Close On Select Chips Example
 */
class CloseOnSelectChipsExample {
    constructor() {
        this.placeholder = 'Select...';
        /** @type {?} */
        const collaborators = [
            {
                id: 1,
                firstName: 'Brian',
                lastName: 'Kimball',
            },
            {
                id: 2,
                firstName: 'Josh',
                lastName: 'Godi',
            },
            {
                id: 3,
                firstName: 'Alec',
                lastName: 'Sibilia',
            },
            {
                id: 4,
                firstName: 'Kameron',
                lastName: 'Sween',
            },
        ];
        this.formatted = {
            format: '$firstName $lastName',
            options: collaborators,
        };
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onChanged(event) {
        console.log('EVENT', event); // tslint:disable-line
    }
}
CloseOnSelectChipsExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'close-on-select-chips-example',
                template: "<div class=\"selected-value\">Selected Value: {{value}}</div>\n<novo-chips [closeOnSelect]=\"true\" [source]=\"formatted\" [placeholder]=\"placeholder\" [(ngModel)]=\"value\" (changed)=\"onChanged($event)\"></novo-chips>\n",
                styles: [""]
            }] }
];
/** @nocollapse */
CloseOnSelectChipsExample.ctorParameters = () => [];
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: form-controls/chips/formatted-chips/formatted-chips-example.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@title Formatted Chips Example
 */
class FormattedChipsExample {
    constructor() {
        this.placeholder = 'Select...';
        /** @type {?} */
        const collaborators = [
            {
                id: 1,
                firstName: 'Brian',
                lastName: 'Kimball',
            },
            {
                id: 2,
                firstName: 'Josh',
                lastName: 'Godi',
            },
            {
                id: 3,
                firstName: 'Alec',
                lastName: 'Sibilia',
            },
            {
                id: 4,
                firstName: 'Kameron',
                lastName: 'Sween',
            },
        ];
        this.formatted = {
            format: '$firstName $lastName',
            options: collaborators,
        };
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onChanged(event) {
        console.log('EVENT', event); // tslint:disable-line
    }
}
FormattedChipsExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'formatted-chips-example',
                template: "<div class=\"selected-value\">Selected Value: {{value}}</div>\n<novo-chips [source]=\"formatted\" [placeholder]=\"placeholder\" [(ngModel)]=\"value\" (changed)=\"onChanged($event)\"></novo-chips>\n",
                styles: [""]
            }] }
];
/** @nocollapse */
FormattedChipsExample.ctorParameters = () => [];
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: form-controls/chips/grouped-multi-picker/grouped-multi-picker-example.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@title Grouped Multi Picker Example
 */
class GroupedMultiPickerExample {
    constructor() {
        this.placeholder = 'Select...';
        this.setupGroupedMultiPickerDemo();
    }
    /**
     * @return {?}
     */
    setupGroupedMultiPickerDemo() {
        /** @type {?} */
        const categoryMap = new Map();
        for (let i = 0; i < 10; i++) {
            /** @type {?} */
            const items = [];
            for (let j = 0; j < 10; j++) {
                items.push({ value: `${i}-${j}`, label: `Category ${i} - Item ${j}` });
            }
            categoryMap.set(`${i}`, { value: `${i}`, label: `Category ${i}`, items });
        }
        this.groupedMultiPicker1 = {
            categoryMap,
            resultsTemplate: novo_elements__WEBPACK_IMPORTED_MODULE_3__["GroupedMultiPickerResults"],
            displayAll: true,
        };
        this.groupedMultiPicker2 = {
            categoryMap,
            resultsTemplate: novo_elements__WEBPACK_IMPORTED_MODULE_3__["GroupedMultiPickerResults"],
        };
        this.groupedMultiPicker3 = {
            categories: [
                { value: 'C1', label: 'Category 1' },
                { value: 'C2', label: 'Category 2' },
                { value: 'C3', label: 'Category 3' },
                { value: 'C4', label: 'Category 4' },
                { value: 'C5', label: 'Category 5' },
            ],
            getItemsForCategoryAsync: (/**
             * @param {?} category
             * @return {?}
             */
            (category) => {
                return new Promise((/**
                 * @param {?} resolve
                 * @return {?}
                 */
                (resolve) => {
                    setTimeout((/**
                     * @return {?}
                     */
                    () => {
                        resolve([
                            { value: 'A1', label: 'Async 1' },
                            { value: 'A2', label: 'Async 2' },
                            { value: 'A3', label: 'Async 3' },
                            { value: 'A4', label: 'Async 4' },
                            { value: 'A5', label: 'Async 5' },
                        ]);
                    }), 1000);
                }));
            }),
            resultsTemplate: novo_elements__WEBPACK_IMPORTED_MODULE_3__["GroupedMultiPickerResults"],
        };
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onChanged(event) {
        console.log('EVENT', event); // tslint:disable-line
    }
}
GroupedMultiPickerExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'grouped-multi-picker-example',
                template: "<h6>Basic Static Example</h6>\n<p>Fully static data, optional \"all\" category</p>\n<div class=\"selected-value\">Selected Value: {{ groupedMultiPicker1Value }}</div>\n<novo-chips [source]=\"groupedMultiPicker1\" [placeholder]=\"placeholder\" [(ngModel)]=\"groupedMultiPicker1Value\" (changed)=\"onChanged($event)\"></novo-chips>\n\n<br/>\n<br/>\n\n<h6>Custom Static Example</h6>\n<p>Fully static data, all category turned off</p>\n<div class=\"selected-value\">Selected Value: {{ groupedMultiPicker2Value }}</div>\n<novo-chips [source]=\"groupedMultiPicker2\" [placeholder]=\"placeholder\" [(ngModel)]=\"groupedMultiPicker2Value\" (changed)=\"onChanged($event)\"></novo-chips>\n\n<br/>\n<br/>\n\n<h6>Basic Async Example</h6>\n<p>Category list is static (always has to be) with the items fetched via async call</p>\n<div class=\"selected-value\">Selected Value: {{ groupedMultiPicker3Value }}</div>\n<novo-chips [source]=\"groupedMultiPicker3\" [placeholder]=\"placeholder\" [(ngModel)]=\"groupedMultiPicker3Value\" (changed)=\"onChanged($event)\"></novo-chips>\n",
                styles: [""]
            }] }
];
/** @nocollapse */
GroupedMultiPickerExample.ctorParameters = () => [];
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: form-controls/chips/row-chips/row-chips-example.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@title Row Chips Example
 */
class RowChipsExample {
    constructor() {
        this.placeholder = 'Select...';
        /** @type {?} */
        const collaborators = [
            {
                id: 1,
                firstName: 'Brian',
                lastName: 'Kimball',
            },
            {
                id: 2,
                firstName: 'Josh',
                lastName: 'Godi',
            },
            {
                id: 3,
                firstName: 'Alec',
                lastName: 'Sibilia',
            },
            {
                id: 4,
                firstName: 'Kameron',
                lastName: 'Sween',
            },
        ];
        this.rowValue = [
            {
                id: 1,
                firstName: 'Brian',
                lastName: 'Kimball',
            },
        ];
        this.rowDemo = {
            format: '$firstName $lastName',
            options: collaborators,
            columns: [
                {
                    label: 'Name',
                    data: (/**
                     * @param {?} item
                     * @return {?}
                     */
                    (item) => {
                        return item['label'];
                    }),
                },
                {
                    label: 'Id',
                    data: (/**
                     * @param {?} item
                     * @return {?}
                     */
                    (item) => {
                        return item.value['id'];
                    }),
                },
            ],
        };
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onChanged(event) {
        console.log('EVENT', event); // tslint:disable-line
    }
}
RowChipsExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'row-chips-example',
                template: "<div class=\"selected-value\">Selected Value: {{rowValue | json}}</div>\n<novo-row-chips [source]=\"rowDemo\" [placeholder]=\"placeholder\" [(ngModel)]=\"rowValue\" (changed)=\"onChanged($event)\"></novo-row-chips>\n",
                styles: [""]
            }] }
];
/** @nocollapse */
RowChipsExample.ctorParameters = () => [];
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: form-controls/date-picker/date-picker/date-picker-example.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ExtendedLabelService extends novo_elements__WEBPACK_IMPORTED_MODULE_3__["NovoLabelService"] {
    constructor() {
        super(...arguments);
        this.dateFormat = 'dd/mm/yyyy';
        this.dateFormatPlaceholder = 'DD/MM/YYYY';
    }
}
if (false) {}
/**
 * \@title Date Example
 */
class DatePickerExample {
    constructor() {
        this.dateOne = new Date();
        this.dateTwo = new Date();
    }
}
DatePickerExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'date-picker-example',
                template: "<div class=\"date-picker-demo-side-by-side\">\n    <p>\n        <label>Value One</label> {{(dateOne | date) || 'N/A'}}\n        <label>Value Two</label> {{(dateTwo | date) || 'N/A'}}\n    </p>\n    <novo-date-picker [(ngModel)]=\"dateOne\"></novo-date-picker>\n    <div>\n        <novo-date-picker-input [(ngModel)]=\"dateTwo\" format=\"mm/dd/yyyy\"></novo-date-picker-input>\n        <novo-date-picker-input [(ngModel)]=\"dateTwo\" format=\"dd/mm/yyyy\"></novo-date-picker-input>\n    </div>\n</div>\n",
                styles: [""]
            }] }
];
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: form-controls/date-picker/date-range/date-range-example.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@title Date Range Example
 */
class DateRangeExample {
    constructor() {
        this.rangeOne = {
            startDate: null,
            endDate: null,
        };
        this.rangeTwo = {
            startDate: null,
            endDate: null,
        };
    }
}
DateRangeExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'date-range-example',
                template: "<div class=\"date-picker-demo-side-by-side\">\n    <p>\n        <label>Start date</label>\n        {{(rangeOne?.startDate | date) || 'N/A'}}\n        <br/> {{(rangeTwo?.startDate | date) || 'N/A'}}\n\n        <label>End date</label>\n        {{(rangeOne?.endDate | date) || 'N/A'}}\n        <br/> {{(rangeTwo?.endDate | date) || 'N/A'}}\n    </p>\n    <novo-date-picker [(ngModel)]=\"rangeOne\" range=\"true\"></novo-date-picker>\n    <novo-date-picker [(ngModel)]=\"rangeTwo\" range=\"true\" weekRangeSelect=\"true\" weekStart=\"1\"></novo-date-picker>\n</div>\n",
                styles: [""]
            }] }
];
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: form-controls/date-picker/date-time-input/date-time-input-example.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@title Date Time Input Example
 */
class DateTimeInputExample {
    constructor() {
        this.dateTimeInput = new Date('08/01/1983 12:57 PM');
        this.dateTimeInput2 = new Date('08/02/1984 12:57 PM');
        this.dateTimeInput3 = new Date('08/03/1985 12:57 PM');
    }
}
DateTimeInputExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'date-time-input-example',
                template: "<div class=\"date-picker-demo-side-by-side\">\n    <p>\n        <label>Date-Time</label> {{(dateTimeInput | date:'medium') || 'N/A'}}\n        <label>Date-Time 2</label> {{(dateTimeInput2 | date:'medium') || 'N/A'}}\n    </p>\n    <div>\n        <novo-date-time-picker-input [(ngModel)]=\"dateTimeInput\"></novo-date-time-picker-input>\n        <novo-date-time-picker-input [(ngModel)]=\"dateTimeInput2\" [military]=\"true\"></novo-date-time-picker-input>\n    </div>\n    <novo-date-time-picker [(ngModel)]=\"dateTimeInput3\"></novo-date-time-picker> \n</div>\n",
                styles: [""]
            }] }
];
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: form-controls/date-picker/date-time/date-time-example.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@title Date Time Example
 */
class DateTimeExample {
    constructor() {
        this.dateTime = new Date('12/04/1987');
    }
}
DateTimeExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'date-time-example',
                template: "<div class=\"date-picker-demo-side-by-side\">\n    <p>\n        <label>Date-Time</label> {{(dateTime | date:'medium') || 'N/A'}}\n    </p>\n    <novo-date-time-picker [(ngModel)]=\"dateTime\"></novo-date-time-picker>\n    <novo-date-time-picker [(ngModel)]=\"dateTime\" military=\"true\"></novo-date-time-picker>\n</div>\n",
                styles: [""]
            }] }
];
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: form-controls/date-picker/time-picker/time-picker-example.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@title Time Picker Example
 */
class TimePickerExample {
    constructor() {
        this.time = new Date();
    }
}
TimePickerExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'time-picker-example',
                template: "<div class=\"date-picker-demo-side-by-side\">\n    <p>\n        <label>Value</label>\n        {{(time | date:'mediumTime') || 'N/A'}}\n        <novo-time-picker-input [(ngModel)]=\"time\"></novo-time-picker-input>\n    </p>\n    <novo-time-picker [(ngModel)]=\"time\" analog=\"true\"></novo-time-picker>\n    <novo-time-picker [(ngModel)]=\"time\" military=\"true\" analog=\"true\"></novo-time-picker>\n</div>\n",
                styles: [""]
            }] }
];
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: form-controls/date-picker/week-start/week-start-example.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@title Week Start Example
 */
class WeekStartExample {
    constructor() {
        this.weekStartDate = new Date();
        this.weekStart = 0;
    }
    /**
     * @param {?} num
     * @return {?}
     */
    setWeekStart(num) {
        this.weekStart = num;
    }
}
WeekStartExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'week-start-example',
                template: "<button [theme]=\"weekStart === 0 ? 'primary' : 'secondary'\" (click)=\"setWeekStart(0)\">Sunday</button>\n<button [theme]=\"weekStart === 1 ? 'primary' : 'secondary'\" (click)=\"setWeekStart(1)\">Monday</button>\n<button [theme]=\"weekStart === 2 ? 'primary' : 'secondary'\" (click)=\"setWeekStart(2)\">Tuesday</button>\n<button [theme]=\"weekStart === 3 ? 'primary' : 'secondary'\" (click)=\"setWeekStart(3)\">Wednesday</button>\n<button [theme]=\"weekStart === 4 ? 'primary' : 'secondary'\" (click)=\"setWeekStart(4)\">Thursday</button>\n<button [theme]=\"weekStart === 5 ? 'primary' : 'secondary'\" (click)=\"setWeekStart(5)\">Friday</button>\n<button [theme]=\"weekStart === 6 ? 'primary' : 'secondary'\" (click)=\"setWeekStart(6)\">Saturday</button>\n<br/>\n<br/>\n<div class=\"date-picker-demo-side-by-side\">\n    <p>\n        <label>Value</label> {{(weekStartDate | date) || 'N/A'}}\n    </p>\n    <novo-date-picker [(ngModel)]=\"weekStartDate\" [weekStart]=\"weekStart\"></novo-date-picker>\n</div>\n",
                styles: [""]
            }] }
];
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: form-controls/editor/basic-editor/basic-editor-example.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@title Basic Editor Example
 */
class BasicEditorExample {
    constructor() {
        this.editorValue = '<p>I AM A PRE-RENDERED VALUE</p><h1>TEST</h1>';
    }
    /**
     * @param {?} editor
     * @return {?}
     */
    insertText(editor) {
        editor.insertText('Hello World');
    }
}
BasicEditorExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'basic-editor-example',
                template: "<novo-editor [name]=\"'demoEditor'\" [(ngModel)]=\"editorValue\" #editor></novo-editor>\n\n<button theme=\"primary\" (click)=\"insertText(editor)\">Insert \"Hello World\" at Cursor</button>\n\n<p>Value:</p>\n<p [innerHtml]=\"editorValue\"></p>\n\n<p>HTML:</p>\n<pre><code>{{editorValue}}</code></pre>\n",
                styles: [""]
            }] }
];
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: form-controls/editor/minimal-editor/minimal-editor-example.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@title Minimal Editor Example
 */
class MinimalEditorExample {
    constructor() {
        this.editorValue = '<p>I AM A PRE-RENDERED VALUE</p><h1>TEST</h1>';
    }
    /**
     * @param {?} editor
     * @return {?}
     */
    insertText(editor) {
        editor.insertText('Hello World');
    }
}
MinimalEditorExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'minimal-editor-example',
                template: "<novo-editor [name]=\"'demoEditor'\" [(ngModel)]=\"editorValue\" [minimal]=\"true\" #editor></novo-editor>\n\n<button theme=\"primary\" (click)=\"insertText(editor)\">Insert \"Hello World\" at Cursor</button>\n\n<p>Value:</p>\n<p [innerHtml]=\"editorValue\"></p>\n\n<p>HTML:</p>\n<pre><code>{{editorValue}}</code></pre>\n",
                styles: [""]
            }] }
];
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: form-controls/form-groups/custom-template/custom-template-example.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@title Custom Template Example
 */
class CustomTemplateExample {
    /**
     * @param {?} formUtils
     */
    constructor(formUtils) {
        this.formUtils = formUtils;
        this.controls = [];
        this.initialValue = [];
        this.initValue = [{ text: 'TEXT', percentage: 12, checkbox: true, test4: 'TEST' }];
        this.simpleAddConfig = {
            label: 'Add',
        };
        this.anotherAddConfig = {
            label: 'Add a new fancy thing!',
        };
        this.emptyMessage = 'There are no items...';
        // Grouped form demo
        this.setupGroupedFormDemo();
        // Setup function
        this.canEditFunction = this.canEdit.bind(this);
        this.canRemoveFunction = this.canRemove.bind(this);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    onRemove(value) {
        console.log('REMOVING', value); // tslint:disable-line
    }
    /**
     * @param {?} value
     * @return {?}
     */
    onEdit(value) {
        console.log('EDITING', value); // tslint:disable-line
    }
    /**
     * @param {?} value
     * @param {?} index
     * @return {?}
     */
    canEdit(value, index) {
        console.log('canEdit', value, index); // tslint:disable-line
        return index > 0;
    }
    /**
     * @param {?} value
     * @param {?} index
     * @return {?}
     */
    canRemove(value, index) {
        console.log('canRemove', value, index); // tslint:disable-line
        return index === 0;
    }
    /**
     * @return {?}
     */
    updateInitialValue() {
        this.initValue = [
            { text: 'TEXT 111', percentage: 100, checkbox: false, test4: 'TEST 111' },
            { text: 'TEXT 222', percentage: 5, checkbox: false, test4: 'TEST 222' },
            { text: 'TEXT 333', percentage: 60, checkbox: true, test4: 'TEST 333' },
        ];
    }
    /**
     * @param {?} form
     * @param {?} key
     * @param {?} index
     * @return {?}
     */
    customDelete(form, key, index) {
        console.log('DELETE', form, key, index); // tslint:disable-line
        // tslint:disable-line
        /** @type {?} */
        const control = (/** @type {?} */ (form.controls[key]));
        control.removeAt(index);
    }
    /**
     * @param {?} form
     * @param {?} key
     * @param {?} index
     * @return {?}
     */
    customEdit(form, key, index) {
        console.log('EDIT', form, key, index); // tslint:disable-line
    }
    /**
     * @private
     * @return {?}
     */
    setupGroupedFormDemo() {
        this.formGroup = this.formUtils.emptyFormGroup();
        /** @type {?} */
        const label = new novo_elements__WEBPACK_IMPORTED_MODULE_3__["ReadOnlyControl"]({ key: 'label', value: 'Label :)' });
        /** @type {?} */
        const c1 = new novo_elements__WEBPACK_IMPORTED_MODULE_3__["SelectControl"]({ key: 'text', label: 'Text Box', options: [{ value: 'hello', label: 'Hello' }] });
        /** @type {?} */
        const c2 = new novo_elements__WEBPACK_IMPORTED_MODULE_3__["TextBoxControl"]({ type: 'percentage', key: 'percentage', label: 'Percent', required: true });
        /** @type {?} */
        const c3 = new novo_elements__WEBPACK_IMPORTED_MODULE_3__["CheckboxControl"]({ key: 'checkbox', label: 'Check Me!', width: 100 });
        /** @type {?} */
        const c4 = new novo_elements__WEBPACK_IMPORTED_MODULE_3__["TextBoxControl"]({ key: 'test4', label: 'TEST4' });
        this.controls.push(label);
        this.controls.push(c1);
        this.controls.push(c2);
        this.controls.push(c3);
        this.controls.push(c4);
    }
}
CustomTemplateExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'custom-template-example',
                template: "<ng-template #customRowTemplate let-form=\"form\" let-index=\"index\" let-key=\"key\" let-controls=\"controls\">\n    <div class=\"novo-control-group-control\">\n        <div *ngFor=\"let c of controls\" class=\"novo-control-container\" [class.is-label]=\"c.controlType === 'read-only'\" [style.max-width.px]=\"c.width\">\n            <novo-control [form]=\"form?.controls[key]['controls'][index]\" [control]=\"c\" [condensed]=\"true\"></novo-control>\n        </div>\n        <div class=\"novo-control-container last\">\n            <button tooltip=\"HI\" type=\"button\" (click)=\"customEdit(form, key, index)\" theme=\"icon\" icon=\"edit\" [attr.data-automation-id]=\"'novo-control-group-edit-' + key\" index=\"-1\"></button>\n        </div>\n        <div class=\"novo-control-container last\">\n            <button type=\"button\" (click)=\"customDelete(form, key, index)\" theme=\"icon\" icon=\"delete-o\" [attr.data-automation-id]=\"'novo-control-group-delete-' + key\" index=\"-1\"></button>\n        </div>\n    </div>\n</ng-template>\n\n<novo-form [form]=\"formGroup\">\n    <novo-control-group remove=\"true\" edit=\"true\" [initialValue]=\"initValue\" [controls]=\"controls\" [rowTemplate]=\"customRowTemplate\" [add]=\"simpleAddConfig\" label=\"Custom Template\" key=\"custom\" [form]=\"formGroup\" [emptyMessage]=\"emptyMessage\"></novo-control-group>\n</novo-form>\n\n<div class=\"final-value\">Initial Value: {{ initValue | json }}</div>\n<div class=\"final-value\">Value: {{ formGroup.value | json }}</div>\n",
                styles: [""]
            }] }
];
/** @nocollapse */
CustomTemplateExample.ctorParameters = () => [
    { type: novo_elements__WEBPACK_IMPORTED_MODULE_3__["FormUtils"] }
];
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: form-controls/form-groups/horizontal-options/horizontal-options-example.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@title Horizontal Options Example
 */
class HorizontalOptionsExample {
    /**
     * @param {?} formUtils
     */
    constructor(formUtils) {
        this.formUtils = formUtils;
        this.controls = [];
        this.initialValue = [];
        this.initValue = [{ text: 'TEXT', percentage: 12, checkbox: true, test4: 'TEST' }];
        this.simpleAddConfig = {
            label: 'Add',
        };
        this.anotherAddConfig = {
            label: 'Add a new fancy thing!',
        };
        this.emptyMessage = 'There are no items...';
        // Grouped form demo
        this.setupGroupedFormDemo();
        // Setup function
        this.canEditFunction = this.canEdit.bind(this);
        this.canRemoveFunction = this.canRemove.bind(this);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    onRemove(value) {
        console.log('REMOVING', value); // tslint:disable-line
    }
    /**
     * @param {?} value
     * @return {?}
     */
    onEdit(value) {
        console.log('EDITING', value); // tslint:disable-line
    }
    /**
     * @param {?} value
     * @param {?} index
     * @return {?}
     */
    canEdit(value, index) {
        console.log('canEdit', value, index); // tslint:disable-line
        return index > 0;
    }
    /**
     * @param {?} value
     * @param {?} index
     * @return {?}
     */
    canRemove(value, index) {
        console.log('canRemove', value, index); // tslint:disable-line
        return index === 0;
    }
    /**
     * @return {?}
     */
    updateInitialValue() {
        this.initValue = [
            { text: 'TEXT 111', percentage: 100, checkbox: false, test4: 'TEST 111' },
            { text: 'TEXT 222', percentage: 5, checkbox: false, test4: 'TEST 222' },
            { text: 'TEXT 333', percentage: 60, checkbox: true, test4: 'TEST 333' },
        ];
    }
    /**
     * @param {?} form
     * @param {?} key
     * @param {?} index
     * @return {?}
     */
    customDelete(form, key, index) {
        console.log('DELETE', form, key, index); // tslint:disable-line
        // tslint:disable-line
        /** @type {?} */
        const control = (/** @type {?} */ (form.controls[key]));
        control.removeAt(index);
    }
    /**
     * @param {?} form
     * @param {?} key
     * @param {?} index
     * @return {?}
     */
    customEdit(form, key, index) {
        console.log('EDIT', form, key, index); // tslint:disable-line
    }
    /**
     * @private
     * @return {?}
     */
    setupGroupedFormDemo() {
        this.formGroup = this.formUtils.emptyFormGroup();
        /** @type {?} */
        const label = new novo_elements__WEBPACK_IMPORTED_MODULE_3__["ReadOnlyControl"]({ key: 'label', value: 'Label :)' });
        /** @type {?} */
        const c1 = new novo_elements__WEBPACK_IMPORTED_MODULE_3__["SelectControl"]({ key: 'text', label: 'Text Box', options: [{ value: 'hello', label: 'Hello' }] });
        /** @type {?} */
        const c2 = new novo_elements__WEBPACK_IMPORTED_MODULE_3__["TextBoxControl"]({ type: 'percentage', key: 'percentage', label: 'Percent', required: true });
        /** @type {?} */
        const c3 = new novo_elements__WEBPACK_IMPORTED_MODULE_3__["CheckboxControl"]({ key: 'checkbox', label: 'Check Me!', width: 100 });
        /** @type {?} */
        const c4 = new novo_elements__WEBPACK_IMPORTED_MODULE_3__["TextBoxControl"]({ key: 'test4', label: 'TEST4' });
        this.controls.push(label);
        this.controls.push(c1);
        this.controls.push(c2);
        this.controls.push(c3);
        this.controls.push(c4);
    }
}
HorizontalOptionsExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'horizontal-options-example',
                template: "<novo-form [form]=\"formGroup\">\n    <novo-control-group [initialValue]=\"initialValue\" collapsible=\"true\" [add]=\"anotherAddConfig\" remove=\"true\" label=\"Horizontal\" key=\"horizontal\" description=\"Test Description\" [form]=\"formGroup\" [controls]=\"controls\" [emptyMessage]=\"emptyMessage\"></novo-control-group>\n</novo-form>\n<div class=\"final-value\">Initial Value: {{ initialValue | json }}</div>\n<div class=\"final-value\">Value: {{ formGroup.value | json }}</div>\n",
                styles: [""]
            }] }
];
/** @nocollapse */
HorizontalOptionsExample.ctorParameters = () => [
    { type: novo_elements__WEBPACK_IMPORTED_MODULE_3__["FormUtils"] }
];
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: form-controls/form-groups/horizontal/horizontal-example.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@title Horizontal Example
 */
class HorizontalExample {
    /**
     * @param {?} formUtils
     */
    constructor(formUtils) {
        this.formUtils = formUtils;
        this.controls = [];
        this.initialValue = [];
        this.initValue = [{ text: 'TEXT', percentage: 12, checkbox: true, test4: 'TEST' }];
        this.simpleAddConfig = {
            label: 'Add',
        };
        this.anotherAddConfig = {
            label: 'Add a new fancy thing!',
        };
        this.emptyMessage = 'There are no items...';
        // Grouped form demo
        this.setupGroupedFormDemo();
        // Setup function
        this.canEditFunction = this.canEdit.bind(this);
        this.canRemoveFunction = this.canRemove.bind(this);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    onRemove(value) {
        console.log('REMOVING', value); // tslint:disable-line
    }
    /**
     * @param {?} value
     * @return {?}
     */
    onEdit(value) {
        console.log('EDITING', value); // tslint:disable-line
    }
    /**
     * @param {?} value
     * @param {?} index
     * @return {?}
     */
    canEdit(value, index) {
        console.log('canEdit', value, index); // tslint:disable-line
        return index > 0;
    }
    /**
     * @param {?} value
     * @param {?} index
     * @return {?}
     */
    canRemove(value, index) {
        console.log('canRemove', value, index); // tslint:disable-line
        return index === 0;
    }
    /**
     * @return {?}
     */
    updateInitialValue() {
        this.initValue = [
            { text: 'TEXT 111', percentage: 100, checkbox: false, test4: 'TEST 111' },
            { text: 'TEXT 222', percentage: 5, checkbox: false, test4: 'TEST 222' },
            { text: 'TEXT 333', percentage: 60, checkbox: true, test4: 'TEST 333' },
        ];
    }
    /**
     * @param {?} form
     * @param {?} key
     * @param {?} index
     * @return {?}
     */
    customDelete(form, key, index) {
        console.log('DELETE', form, key, index); // tslint:disable-line
        // tslint:disable-line
        /** @type {?} */
        const control = (/** @type {?} */ (form.controls[key]));
        control.removeAt(index);
    }
    /**
     * @param {?} form
     * @param {?} key
     * @param {?} index
     * @return {?}
     */
    customEdit(form, key, index) {
        console.log('EDIT', form, key, index); // tslint:disable-line
    }
    /**
     * @private
     * @return {?}
     */
    setupGroupedFormDemo() {
        this.formGroup = this.formUtils.emptyFormGroup();
        /** @type {?} */
        const label = new novo_elements__WEBPACK_IMPORTED_MODULE_3__["ReadOnlyControl"]({ key: 'label', value: 'Label :)' });
        /** @type {?} */
        const c1 = new novo_elements__WEBPACK_IMPORTED_MODULE_3__["SelectControl"]({ key: 'text', label: 'Text Box', options: [{ value: 'hello', label: 'Hello' }] });
        /** @type {?} */
        const c2 = new novo_elements__WEBPACK_IMPORTED_MODULE_3__["TextBoxControl"]({ type: 'percentage', key: 'percentage', label: 'Percent', required: true });
        /** @type {?} */
        const c3 = new novo_elements__WEBPACK_IMPORTED_MODULE_3__["CheckboxControl"]({ key: 'checkbox', label: 'Check Me!', width: 100 });
        /** @type {?} */
        const c4 = new novo_elements__WEBPACK_IMPORTED_MODULE_3__["TextBoxControl"]({ key: 'test4', label: 'TEST4' });
        this.controls.push(label);
        this.controls.push(c1);
        this.controls.push(c2);
        this.controls.push(c3);
        this.controls.push(c4);
    }
}
HorizontalExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'horizontal-example',
                template: "<button theme=\"primary\" (click)=\"updateInitialValue()\">Update Initial Value</button>\n<br/>\n<br/>\n<novo-form [form]=\"formGroup\">\n    <novo-control-group [canEdit]=\"canEditFunction\" [canRemove]=\"canRemoveFunction\" (onRemove)=\"onRemove($event)\" (onEdit)=\"onEdit($event)\" [initialValue]=\"initValue\" [add]=\"simpleAddConfig\" remove=\"true\" edit=\"true\" label=\"Horizontal\" key=\"horizontal\" [form]=\"formGroup\" [controls]=\"controls\" [emptyMessage]=\"emptyMessage\"></novo-control-group>\n</novo-form>\n<div class=\"final-value\">Initial Value: {{ initValue | json }}</div>\n<div class=\"final-value\">Value: {{ formGroup.value | json }}</div>\n",
                styles: [""]
            }] }
];
/** @nocollapse */
HorizontalExample.ctorParameters = () => [
    { type: novo_elements__WEBPACK_IMPORTED_MODULE_3__["FormUtils"] }
];
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: form-controls/form-groups/vertical-options/vertical-options-example.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@title Vertical Options Example
 */
class VerticalOptionsExample {
    /**
     * @param {?} formUtils
     */
    constructor(formUtils) {
        this.formUtils = formUtils;
        this.controls = [];
        this.initialValue = [];
        this.initValue = [{ text: 'TEXT', percentage: 12, checkbox: true, test4: 'TEST' }];
        this.simpleAddConfig = {
            label: 'Add',
        };
        this.anotherAddConfig = {
            label: 'Add a new fancy thing!',
        };
        this.emptyMessage = 'There are no items...';
        // Grouped form demo
        this.setupGroupedFormDemo();
        // Setup function
        this.canEditFunction = this.canEdit.bind(this);
        this.canRemoveFunction = this.canRemove.bind(this);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    onRemove(value) {
        console.log('REMOVING', value); // tslint:disable-line
    }
    /**
     * @param {?} value
     * @return {?}
     */
    onEdit(value) {
        console.log('EDITING', value); // tslint:disable-line
    }
    /**
     * @param {?} value
     * @param {?} index
     * @return {?}
     */
    canEdit(value, index) {
        console.log('canEdit', value, index); // tslint:disable-line
        return index > 0;
    }
    /**
     * @param {?} value
     * @param {?} index
     * @return {?}
     */
    canRemove(value, index) {
        console.log('canRemove', value, index); // tslint:disable-line
        return index === 0;
    }
    /**
     * @return {?}
     */
    updateInitialValue() {
        this.initValue = [
            { text: 'TEXT 111', percentage: 100, checkbox: false, test4: 'TEST 111' },
            { text: 'TEXT 222', percentage: 5, checkbox: false, test4: 'TEST 222' },
            { text: 'TEXT 333', percentage: 60, checkbox: true, test4: 'TEST 333' },
        ];
    }
    /**
     * @param {?} form
     * @param {?} key
     * @param {?} index
     * @return {?}
     */
    customDelete(form, key, index) {
        console.log('DELETE', form, key, index); // tslint:disable-line
        // tslint:disable-line
        /** @type {?} */
        const control = (/** @type {?} */ (form.controls[key]));
        control.removeAt(index);
    }
    /**
     * @param {?} form
     * @param {?} key
     * @param {?} index
     * @return {?}
     */
    customEdit(form, key, index) {
        console.log('EDIT', form, key, index); // tslint:disable-line
    }
    /**
     * @private
     * @return {?}
     */
    setupGroupedFormDemo() {
        this.formGroup = this.formUtils.emptyFormGroup();
        /** @type {?} */
        const label = new novo_elements__WEBPACK_IMPORTED_MODULE_3__["ReadOnlyControl"]({ key: 'label', value: 'Label :)' });
        /** @type {?} */
        const c1 = new novo_elements__WEBPACK_IMPORTED_MODULE_3__["SelectControl"]({ key: 'text', label: 'Text Box', options: [{ value: 'hello', label: 'Hello' }] });
        /** @type {?} */
        const c2 = new novo_elements__WEBPACK_IMPORTED_MODULE_3__["TextBoxControl"]({ type: 'percentage', key: 'percentage', label: 'Percent', required: true });
        /** @type {?} */
        const c3 = new novo_elements__WEBPACK_IMPORTED_MODULE_3__["CheckboxControl"]({ key: 'checkbox', label: 'Check Me!', width: 100 });
        /** @type {?} */
        const c4 = new novo_elements__WEBPACK_IMPORTED_MODULE_3__["TextBoxControl"]({ key: 'test4', label: 'TEST4' });
        this.controls.push(label);
        this.controls.push(c1);
        this.controls.push(c2);
        this.controls.push(c3);
        this.controls.push(c4);
    }
}
VerticalOptionsExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'vertical-options-example',
                template: "<novo-form [form]=\"formGroup\">\n    <novo-control-group [initialValue]=\"initialValue\" collapsible=\"true\" [add]=\"anotherAddConfig\" remove=\"true\" icon=\"idea\" label=\"Vertical\" key=\"vertical\" vertical=\"true\" description=\"Test Description\" [form]=\"formGroup\" [controls]=\"controls\" [emptyMessage]=\"emptyMessage\"></novo-control-group>\n</novo-form>\n<div class=\"final-value\">Initial Value: {{ initialValue | json }}</div>\n<div class=\"final-value\">Value: {{ formGroup.value | json }}</div>\n",
                styles: [""]
            }] }
];
/** @nocollapse */
VerticalOptionsExample.ctorParameters = () => [
    { type: novo_elements__WEBPACK_IMPORTED_MODULE_3__["FormUtils"] }
];
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: form-controls/form-groups/vertical/vertical-example.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@title Vertical Example
 */
class VerticalExample {
    /**
     * @param {?} formUtils
     */
    constructor(formUtils) {
        this.formUtils = formUtils;
        this.controls = [];
        this.initialValue = [];
        this.initValue = [{ text: 'TEXT', percentage: 12, checkbox: true, test4: 'TEST' }];
        this.simpleAddConfig = {
            label: 'Add',
        };
        this.anotherAddConfig = {
            label: 'Add a new fancy thing!',
        };
        this.emptyMessage = 'There are no items...';
        // Grouped form demo
        this.setupGroupedFormDemo();
        // Setup function
        this.canEditFunction = this.canEdit.bind(this);
        this.canRemoveFunction = this.canRemove.bind(this);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    onRemove(value) {
        console.log('REMOVING', value); // tslint:disable-line
    }
    /**
     * @param {?} value
     * @return {?}
     */
    onEdit(value) {
        console.log('EDITING', value); // tslint:disable-line
    }
    /**
     * @param {?} value
     * @param {?} index
     * @return {?}
     */
    canEdit(value, index) {
        console.log('canEdit', value, index); // tslint:disable-line
        return index > 0;
    }
    /**
     * @param {?} value
     * @param {?} index
     * @return {?}
     */
    canRemove(value, index) {
        console.log('canRemove', value, index); // tslint:disable-line
        return index === 0;
    }
    /**
     * @return {?}
     */
    updateInitialValue() {
        this.initValue = [
            { text: 'TEXT 111', percentage: 100, checkbox: false, test4: 'TEST 111' },
            { text: 'TEXT 222', percentage: 5, checkbox: false, test4: 'TEST 222' },
            { text: 'TEXT 333', percentage: 60, checkbox: true, test4: 'TEST 333' },
        ];
    }
    /**
     * @param {?} form
     * @param {?} key
     * @param {?} index
     * @return {?}
     */
    customDelete(form, key, index) {
        console.log('DELETE', form, key, index); // tslint:disable-line
        // tslint:disable-line
        /** @type {?} */
        const control = (/** @type {?} */ (form.controls[key]));
        control.removeAt(index);
    }
    /**
     * @param {?} form
     * @param {?} key
     * @param {?} index
     * @return {?}
     */
    customEdit(form, key, index) {
        console.log('EDIT', form, key, index); // tslint:disable-line
    }
    /**
     * @private
     * @return {?}
     */
    setupGroupedFormDemo() {
        this.formGroup = this.formUtils.emptyFormGroup();
        /** @type {?} */
        const label = new novo_elements__WEBPACK_IMPORTED_MODULE_3__["ReadOnlyControl"]({ key: 'label', value: 'Label :)' });
        /** @type {?} */
        const c1 = new novo_elements__WEBPACK_IMPORTED_MODULE_3__["SelectControl"]({ key: 'text', label: 'Text Box', options: [{ value: 'hello', label: 'Hello' }] });
        /** @type {?} */
        const c2 = new novo_elements__WEBPACK_IMPORTED_MODULE_3__["TextBoxControl"]({ type: 'percentage', key: 'percentage', label: 'Percent', required: true });
        /** @type {?} */
        const c3 = new novo_elements__WEBPACK_IMPORTED_MODULE_3__["CheckboxControl"]({ key: 'checkbox', label: 'Check Me!', width: 100 });
        /** @type {?} */
        const c4 = new novo_elements__WEBPACK_IMPORTED_MODULE_3__["TextBoxControl"]({ key: 'test4', label: 'TEST4' });
        this.controls.push(label);
        this.controls.push(c1);
        this.controls.push(c2);
        this.controls.push(c3);
        this.controls.push(c4);
    }
}
VerticalExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'vertical-example',
                template: "<novo-form [form]=\"formGroup\">\n    <novo-control-group [initialValue]=\"initialValue\" [add]=\"simpleAddConfig\" remove=\"true\" icon=\"idea\" label=\"Vertical\" key=\"vertical\" vertical=\"true\" [form]=\"formGroup\" [controls]=\"controls\" [emptyMessage]=\"emptyMessage\"></novo-control-group>\n</novo-form>\n<div class=\"final-value\">Initial Value: {{ initialValue | json }}</div>\n<div class=\"final-value\">Value: {{ formGroup.value | json }}</div>\n",
                styles: [""]
            }] }
];
/** @nocollapse */
VerticalExample.ctorParameters = () => [
    { type: novo_elements__WEBPACK_IMPORTED_MODULE_3__["FormUtils"] }
];
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: form-controls/form/address-control/address-control-example.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@title Address Control Example
 */
class AddressControlExample {
    /**
     * @param {?} formUtils
     */
    constructor(formUtils) {
        this.formUtils = formUtils;
        this.states = [
            {
                value: 'MA',
                label: 'Massachusetts',
                countryId: 1,
            },
            {
                value: 'NY',
                label: 'New York',
                countryId: 1,
            },
            {
                value: 'AB',
                label: 'Alberta',
                countryId: 2216,
            },
            {
                value: 'BC',
                label: 'British Columbia',
                countryId: 2216,
            },
            {
                value: 'MB',
                label: 'Manitoba',
                countryId: 2216,
            },
        ];
        // Address control
        this.addressControl = new novo_elements__WEBPACK_IMPORTED_MODULE_3__["AddressControl"]({
            key: 'address',
            name: 'address',
            label: 'Address',
            tooltip: 'Address',
            config: {
                address1: {
                    label: 'Address Line 1',
                    required: true,
                    maxlength: 20,
                },
                address2: {
                    label: 'Address Line 2',
                    required: true,
                    maxlength: 15,
                },
                state: {
                    label: 'State',
                    required: true,
                },
                countryID: {
                    label: 'Country',
                    required: true,
                },
                city: {
                    label: 'City',
                    required: true,
                },
                zip: {
                    label: 'Zipcode',
                    required: true,
                },
            },
            value: {
                address1: '321 Summer Street',
                address2: '11 Washington Street',
                city: 'Chicago',
                state: 'California',
                zip: 95133,
                countryID: 1,
            },
        });
        this.secondaryAddressControl = new novo_elements__WEBPACK_IMPORTED_MODULE_3__["AddressControl"]({
            key: 'secondaryAddress',
            name: 'secondaryAddress',
            label: 'Secondary Address',
            tooltip: 'Secondary Address',
            config: {
                address1: {
                    label: 'Address Line 1',
                    maxlength: 20,
                },
                address2: {
                    label: 'Address Line 2',
                    maxlength: 15,
                },
                state: {
                    label: 'State',
                    pickerConfig: {
                        field: 'value',
                        format: '$label',
                        options: (/**
                         * @param {?} query
                         * @param {?} countryID
                         * @return {?}
                         */
                        (query, countryID) => {
                            return Promise.resolve(this.getStateOptions(query, countryID));
                        }),
                        getLabels: (/**
                         * @param {?} value
                         * @return {?}
                         */
                        (value) => {
                            return Promise.resolve(this.getStateLabel(value));
                        }),
                    },
                },
                countryID: {
                    label: 'Country',
                    pickerConfig: {
                        field: 'value',
                        format: '$label',
                        options: (/**
                         * @param {?} query
                         * @return {?}
                         */
                        (query) => {
                            return Promise.resolve(this.getCountryOptions(query));
                        }),
                        getLabels: (/**
                         * @param {?} value
                         * @return {?}
                         */
                        (value) => {
                            return new Promise((/**
                             * @param {?} resolve
                             * @return {?}
                             */
                            (resolve) => {
                                /** @type {?} */
                                const country = Object(novo_elements__WEBPACK_IMPORTED_MODULE_3__["findByCountryId"])(value);
                                if (country) {
                                    resolve({ value: country.id, label: country.name });
                                }
                                else {
                                    resolve('');
                                }
                            }));
                        }),
                    },
                },
                city: {
                    label: 'City',
                },
                zip: {
                    label: 'Zipcode',
                },
            },
            value: {
                address1: '123 Summer Street',
                address2: '10 Washington Street and stuff',
                countryID: 2359,
            },
        });
        this.addressFormControls = [this.addressControl, this.secondaryAddressControl];
        this.addressForm = formUtils.toFormGroup(this.addressFormControls);
    }
    /**
     * @param {?=} filter
     * @param {?=} countryID
     * @return {?}
     */
    getStateOptions(filter = '', countryID) {
        /** @type {?} */
        let states = this.states;
        if (countryID) {
            states = states.filter((/**
             * @param {?} state
             * @return {?}
             */
            (state) => state.countryId === countryID));
        }
        if (filter && filter.length) {
            states = states.filter((/**
             * @param {?} state
             * @return {?}
             */
            (state) => new RegExp(`${filter}`, 'gi').test(state.label)));
        }
        return states;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    getStateLabel(value) {
        /** @type {?} */
        const state = this.states.find((/**
         * @param {?} s
         * @return {?}
         */
        (s) => {
            return s.value === value;
        }));
        if (state && state.label) {
            return state.label;
        }
        return '';
    }
    /**
     * @param {?=} filter
     * @return {?}
     */
    getCountryOptions(filter) {
        /** @type {?} */
        let countries = [
            {
                value: 2356,
                label: 'Uganda',
            },
            {
                value: 2357,
                label: 'Ukraine',
            },
            {
                value: 2358,
                label: 'United Arab Emirates',
            },
            {
                value: 2359,
                label: 'United Kingdom',
            },
            {
                value: 1,
                label: 'United States',
            },
            {
                value: 2443,
                label: 'United States Minor Outlying Islands',
            },
            {
                value: 2360,
                label: 'Uruguay',
            },
            {
                value: 2361,
                label: 'Uzbekistan',
            },
        ];
        if (filter && filter.length) {
            countries = countries.filter((/**
             * @param {?} country
             * @return {?}
             */
            (country) => new RegExp(`${filter}`, 'gi').test(country.label)));
        }
        return countries;
    }
}
AddressControlExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'address-control-example',
                template: "<novo-form [form]=\"addressForm\">\n  <div class=\"novo-form-row\">\n    <novo-control [form]=\"addressForm\" [control]=\"addressControl\"></novo-control>\n  </div>\n  <div class=\"novo-form-row\">\n    <novo-control [form]=\"addressForm\" [control]=\"secondaryAddressControl\"></novo-control>\n  </div>\n</novo-form>\n\n<div class=\"final-value\">Value: {{addressForm.value | json}}</div>\n",
                styles: [""]
            }] }
];
/** @nocollapse */
AddressControlExample.ctorParameters = () => [
    { type: novo_elements__WEBPACK_IMPORTED_MODULE_3__["FormUtils"] }
];
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: form-controls/form/calendar-input-controls/calendar-input-controls-example.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// import { MockMeta, MockMetaHeaders } from './MockMeta';
/**
 * \@title Calendar Input Controls Example
 */
class CalendarInputControlsExample {
    /**
     * @param {?} formUtils
     */
    constructor(formUtils) {
        this.formUtils = formUtils;
        // Calendar input controls
        this.dateControl = new novo_elements__WEBPACK_IMPORTED_MODULE_3__["DateControl"]({
            key: 'date',
            label: 'Date',
            tooltip: 'Date',
            startDate: new Date().setMonth(new Date().getMonth() - 1),
        });
        this.userDefinedDateControl = new novo_elements__WEBPACK_IMPORTED_MODULE_3__["DateControl"]({
            key: 'userDefinedFormat',
            label: 'User Defined Format',
            tooltip: 'Date',
            dateFormat: 'MMM Do YYYY (dd)',
            textMaskEnabled: false,
        });
        this.timeControl = new novo_elements__WEBPACK_IMPORTED_MODULE_3__["TimeControl"]({ key: 'time', label: 'Time', tooltip: 'Time' });
        this.dateTimeControl = new novo_elements__WEBPACK_IMPORTED_MODULE_3__["DateTimeControl"]({ key: 'dateTime', tooltip: 'Date Time', label: 'Date Time', military: true });
        this.calendarForm = formUtils.toFormGroup([this.dateControl, this.userDefinedDateControl, this.timeControl, this.dateTimeControl]);
    }
}
CalendarInputControlsExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'calendar-input-controls-example',
                template: "<!--Check out the FormDemo.js for more information!-->\n<novo-form [form]=\"calendarForm\" layout=\"vertical\">\n    <div class=\"novo-form-row\">\n        <novo-control [form]=\"calendarForm\" [control]=\"dateControl\"></novo-control>\n    </div>\n    <div class=\"novo-form-row\">\n        <novo-control [form]=\"calendarForm\" [control]=\"userDefinedDateControl\"></novo-control>\n    </div>\n    <div class=\"novo-form-row\">\n        <novo-control [form]=\"calendarForm\" [control]=\"timeControl\"></novo-control>\n    </div>\n    <div class=\"novo-form-row\">\n        <novo-control [form]=\"calendarForm\" [control]=\"dateTimeControl\"></novo-control>\n    </div>\n</novo-form>\n<div class=\"final-value\">Value: {{calendarForm.value | json}}</div>\n",
                styles: [""]
            }] }
];
/** @nocollapse */
CalendarInputControlsExample.ctorParameters = () => [
    { type: novo_elements__WEBPACK_IMPORTED_MODULE_3__["FormUtils"] }
];
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: form-controls/form/check-box-controls/check-box-controls-example.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// import { MockMeta, MockMetaHeaders } from './MockMeta';
/**
 * \@title Check Box Controls Example
 */
class CheckBoxControlsExample {
    /**
     * @param {?} formUtils
     */
    constructor(formUtils) {
        this.formUtils = formUtils;
        // Check box controls
        this.checkControl = new novo_elements__WEBPACK_IMPORTED_MODULE_3__["CheckboxControl"]({ key: 'check', tooltip: 'Checkbox', label: 'Checkbox', checkboxLabel: 'Checkbox' });
        this.checkListControl = new novo_elements__WEBPACK_IMPORTED_MODULE_3__["CheckListControl"]({
            key: 'checklist',
            label: 'Check List',
            options: ['One', 'Two', 'Three'],
            tooltip: 'CheckList',
            tooltipPosition: 'Top',
        });
        this.tilesControl = new novo_elements__WEBPACK_IMPORTED_MODULE_3__["TilesControl"]({
            key: 'tiles',
            label: 'Tiles',
            options: [{ value: 'one', label: 'One' }, { value: 'two', label: 'Two' }, { value: 'disabled', label: 'Disabled', disabled: true }],
            tooltip: 'Tiles',
        });
        this.disabledTilesControl = new novo_elements__WEBPACK_IMPORTED_MODULE_3__["TilesControl"]({
            key: 'disabledTiles',
            label: 'Disabled Tiles',
            readOnly: true,
            options: [{ value: 'one', label: 'One' }, { value: 'two', label: 'Two' }],
            tooltip: 'Tiles',
        });
        this.checkForm = formUtils.toFormGroup([this.checkControl, this.checkListControl, this.tilesControl, this.disabledTilesControl]);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    onChange(value) {
        console.log('I changed!', value); // tslint:disable-line
    }
}
CheckBoxControlsExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'check-box-controls-example',
                template: "<!--Check out the FormDemo.js for more information!-->\n<novo-form [form]=\"checkForm\">\n    <div class=\"novo-form-row\">\n        <novo-control [form]=\"checkForm\" [control]=\"checkControl\"></novo-control>\n    </div>\n    <div class=\"novo-form-row\">\n        <novo-control [form]=\"checkForm\" [control]=\"checkListControl\"></novo-control>\n    </div>\n    <div class=\"novo-form-row\">\n        <novo-control [form]=\"checkForm\" [control]=\"tilesControl\" (change)=\"onChange($event)\"></novo-control>\n    </div>\n    <div class=\"novo-form-row\">\n        <novo-control [form]=\"checkForm\" [control]=\"disabledTilesControl\" (change)=\"onChange($event)\"></novo-control>\n    </div>\n</novo-form>\n<div class=\"final-value\">Value: {{checkForm.value | json}}</div>\n",
                styles: [""]
            }] }
];
/** @nocollapse */
CheckBoxControlsExample.ctorParameters = () => [
    { type: novo_elements__WEBPACK_IMPORTED_MODULE_3__["FormUtils"] }
];
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: form-controls/form/custom-demo-control/custom-demo-control-example.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@title Custom Demo Control
 */
class CustomDemoControlExample {
}
CustomDemoControlExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'custom-demo-control-example',
                template: `<div [formGroup]="form">
        My Custom Input <input [formControlName]="control.key" [id]="control.key" [type]="control.type" [placeholder]="control.placeholder">
    </div>`
            }] }
];
CustomDemoControlExample.propDecorators = {
    control: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    form: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    edit: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    save: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    delete: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    upload: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }]
};
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: form-controls/form/MockMeta.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const MockMeta = {
    entity: 'ENTITY_NAME',
    entityMetaUrl: '',
    label: 'ENTITY_LABEL',
    fields: [
        {
            name: 'firstName',
            type: 'text',
            label: 'First Name',
            required: true,
            sortOrder: 10,
            maxLength: 10,
            description: 'First Name, Yo!',
        },
        {
            name: 'groupedItems',
            type: 'group',
            label: 'Groupd Items',
            sortOrder: 11,
            icon: 'section',
            fields: [
                {
                    name: 'label',
                    type: 'text',
                    label: 'Label',
                    sortOrder: 10,
                    maxLength: 10,
                },
                {
                    name: 'description',
                    type: 'text',
                    label: 'Description',
                    sortOrder: 20,
                },
            ],
        },
        {
            name: 'lastName',
            type: 'text',
            label: 'Last Name',
            hint: 'Last Name, Yo!',
            description: 'Last Name, Yo!',
            sortOrder: 20,
        },
        {
            name: 'number',
            type: 'number',
            label: 'Number',
            required: true,
            disabled: true,
            sortOrder: 40,
        },
        {
            name: 'dateFounded',
            type: 'number',
            label: 'Date Founded',
            dataSpecialization: 'YEAR',
            sortOrder: 40,
            description: 'Year when this company was founded',
        },
        {
            name: 'float',
            type: 'float',
            label: 'Float',
            required: true,
            sortOrder: 50,
        },
        {
            name: 'currency',
            type: 'money',
            label: 'Cost',
            currencyFormat: 'USD',
            sortOrder: 60,
        },
        {
            name: 'percent',
            type: 'percentage',
            label: 'Percentage',
            required: true,
            sortOrder: 70,
        },
        {
            name: 'date',
            type: 'date',
            label: 'Date',
            required: true,
            sortOrder: 90,
            defaultValue: new Date(2016, 1, 1),
        },
        {
            name: 'time',
            type: 'time',
            label: 'Time',
            required: true,
            sortOrder: 100,
        },
        {
            name: 'datetime',
            type: 'date-time',
            label: 'DateTime',
            dataSpecialization: 'DATETIME',
            required: true,
            sortOrder: 110,
        },
        {
            name: 'status',
            type: 'select',
            dataType: 'String',
            maxLength: 200,
            confidential: false,
            label: 'Status',
            options: [
                {
                    value: 'Open',
                    label: 'Open',
                },
                {
                    value: 'Qualifying',
                    label: 'Qualifying',
                },
                {
                    value: 'Negotiating',
                    label: 'Negotiating',
                },
                {
                    value: 'TRIGGER',
                    label: 'TRIGGER',
                },
            ],
            sortOrder: 120,
        },
        {
            name: 'nextAction',
            type: 'tiles',
            dataType: 'String',
            label: 'Next Action',
            required: true,
            options: [
                {
                    value: 'none',
                    label: 'None',
                },
                {
                    value: 'task',
                    label: 'Task',
                },
                {
                    value: 'appointment',
                    label: 'Appointment',
                },
            ],
            sortOrder: 130,
        },
        {
            name: 'state',
            type: 'picker',
            dataType: 'String',
            maxLength: 200,
            confidential: false,
            label: 'State',
            required: true,
            // TODO: Align picker with META by passing META obj into picker
            // options: [ /* flat array of states */ ]
            options: {
                options: [
                    'Alabama',
                    'Alaska',
                    'Arizona',
                    'Arkansas',
                    'California',
                    'Colorado',
                    'Connecticut',
                    'Delaware',
                    'Florida',
                    'Georgia',
                    'Hawaii',
                    'Idaho',
                    'Illinois',
                    'Indiana',
                    'Iowa',
                    'Kansas',
                    'Kentucky',
                    'Louisiana',
                    'Maine',
                    'Maryland',
                    'Massachusetts',
                    'Michigan',
                    'Minnesota',
                    'Mississippi',
                    'Missouri',
                    'Montana',
                    'Nebraska',
                    'Nevada',
                    'New Hampshire',
                    'New Jersey',
                    'New Mexico',
                    'New York',
                    'North Dakota',
                    'North Carolina',
                    'Ohio',
                    'Oklahoma',
                    'Oregon',
                    'Pennsylvania',
                    'Rhode Island',
                    'South Carolina',
                    'South Dakota',
                    'Tennessee',
                    'Texas',
                    'Utah',
                    'Vermont',
                    'Virginia',
                    'Washington',
                    'West Virginia',
                    'Wisconsin',
                    'Wyoming',
                ],
            },
            sortOrder: 530,
        },
        {
            name: 'startDate',
            type: 'datetime',
            dataType: 'Timestamp',
            label: 'Start Date',
            disabled: true,
            required: true,
            sortOrder: 540,
        },
        {
            name: 'quota',
            type: 'number',
            dataType: 'Integer',
            label: 'Quota',
            required: true,
            sortOrder: 550,
        },
        {
            name: 'secret',
            type: 'hidden',
            dataType: 'String',
            label: 'Top Secret',
            required: true,
            defaultValue: 'The secret code is: 08322',
            sortOrder: 560,
        },
        {
            name: 'categories',
            type: 'picker',
            confidential: false,
            optional: false,
            label: 'Categories',
            required: true,
            readOnly: false,
            multiValue: true,
            inputType: 'SELECT',
            options: [
                {
                    value: 'Open',
                    label: 'Open',
                },
                {
                    value: 'Qualifying',
                    label: 'Qualifying',
                },
                {
                    value: 'Negotiating',
                    label: 'Negotiating',
                },
                {
                    value: 'TRIGGER',
                    label: 'TRIGGER',
                },
            ],
            sortOrder: 570,
        },
        {
            name: 'owner',
            type: 'entity',
            confidential: false,
            optional: false,
            label: 'Owner',
            required: false,
            readOnly: true,
            multiValue: false,
            inputType: 'SELECT',
            optionsType: 'CorporateUser',
            optionsUrl: '/options/CorporateUser',
            hideFromSearch: false,
            associatedEntity: {
                entity: 'CorporateUser',
                label: 'Corporate User',
            },
            sortOrder: 580,
        },
        {
            name: 'address',
            type: 'address',
            dataType: 'Address',
            dataSpecialization: 'SYSTEM',
            confidential: false,
            optional: true,
            label: 'Address',
            required: false,
            readOnly: false,
            multiValue: false,
            hideFromSearch: true,
            tooltip: 'Address Block',
            fields: [
                {
                    name: 'address1',
                    type: 'SCALAR',
                    dataType: 'String',
                    maxLength: 40,
                    confidential: false,
                    optional: true,
                    label: 'Addressxxx',
                    required: true,
                    readOnly: false,
                    multiValue: false,
                    hideFromSearch: false,
                    defaultValue: '100 Summer St',
                },
                {
                    name: 'address2',
                    type: 'SCALAR',
                    dataType: 'String',
                    maxLength: 40,
                    confidential: false,
                    optional: true,
                    label: 'Address 2',
                    required: false,
                    readOnly: false,
                    multiValue: false,
                    hideFromSearch: false,
                    defaultValue: 'apt 25',
                },
                {
                    name: 'city',
                    type: 'SCALAR',
                    dataType: 'String',
                    maxLength: 40,
                    confidential: false,
                    optional: true,
                    label: 'City',
                    required: false,
                    readOnly: false,
                    multiValue: false,
                    hideFromSearch: false,
                },
                {
                    name: 'state',
                    type: 'SCALAR',
                    dataType: 'String',
                    maxLength: 30,
                    confidential: false,
                    optional: true,
                    label: 'State',
                    required: true,
                    readOnly: false,
                    multiValue: false,
                    inputType: 'SELECT',
                    hideFromSearch: false,
                },
                {
                    name: 'zip',
                    type: 'SCALAR',
                    dataType: 'String',
                    maxLength: 15,
                    confidential: false,
                    optional: true,
                    label: 'Zip',
                    required: false,
                    readOnly: false,
                    multiValue: false,
                    hideFromSearch: false,
                },
                {
                    name: 'countryID',
                    type: 'SCALAR',
                    dataType: 'Integer',
                    confidential: false,
                    optional: false,
                    label: 'Country',
                    required: false,
                    readOnly: false,
                    multiValue: false,
                    inputType: 'SELECT',
                    defaultValue: 2260,
                    hideFromSearch: false,
                },
                {
                    name: 'countryCode',
                    type: 'SCALAR',
                    dataType: 'String',
                    maxLength: 0,
                    optional: true,
                },
                {
                    name: 'countryName',
                    type: 'SCALAR',
                    dataType: 'String',
                    maxLength: 0,
                    optional: true,
                },
            ],
            sortOrder: 590,
        },
        {
            name: 'checkbox',
            type: 'checkbox',
            label: 'Checkbox',
            sortOrder: 600,
        },
        {
            name: 'checklist',
            type: 'checklist',
            label: 'CheckList',
            options: ['Morning', 'Day', 'Night', 'Overnight'],
            required: true,
            sortOrder: 610,
        },
        {
            name: 'attachments',
            type: 'file',
            label: 'Attachments',
            multiValue: true,
            required: true,
            sortOrder: 630,
        },
        {
            name: 'attachments',
            type: 'file',
            label: 'Attachments',
            multiValue: true,
            required: true,
            sortOrder: 630,
        },
        {
            defaultValue: 'Cold',
            inputType: 'RADIO',
            label: 'Types/Ratings',
            maxLength: 100,
            multiValue: false,
            name: 'type',
            optional: true,
            options: [
                {
                    value: 'Hot',
                    label: 'Hot',
                },
                {
                    value: 'Cold',
                    label: 'Cold',
                },
                {
                    value: 'Eh...',
                    label: 'Eh...',
                },
            ],
            required: true,
            sortOrder: 9000,
        },
        {
            inputType: 'RADIO',
            label: 'Like?',
            maxLength: 100,
            multiValue: false,
            name: 'like',
            optional: true,
            options: [
                {
                    value: 'Yes',
                    label: 'Yes',
                    icon: 'check',
                },
                {
                    value: 'No',
                    label: 'No',
                    icon: 'times',
                },
            ],
            required: true,
            sortOrder: 9000,
        },
        {
            name: 'comments',
            type: 'textarea',
            label: 'Comments',
            required: true,
            sortOrder: 9010,
            maxLength: 150,
            description: 'Comments, Please',
        },
        {
            name: 'address',
            type: 'address',
            label: 'Address',
            required: true,
            sortOrder: 620,
        },
        {
            name: 'customfield',
            label: 'Custom Component',
            required: true,
            description: 'This is a custom component you can use instead',
        },
        {
            name: 'htmlFieldFullEditor',
            label: 'CK Editor - Full',
            required: true,
            sortOrder: 9011,
            dataSpecialization: 'HTML',
            type: 'SCALAR',
            dataType: 'String',
        },
        {
            name: 'htmlFieldMinimalEditor',
            label: 'CK Editor - Minimal',
            required: true,
            sortOrder: 9012,
            dataSpecialization: 'HTML-MINIMAL',
            type: 'SCALAR',
            dataType: 'String',
        },
    ],
};
/** @type {?} */
const MockMetaHeaders = {
    sectionHeaders: [
        {
            label: 'Section With Custom Icon',
            name: 'sectionHeader3',
            sortOrder: 600,
            enabled: true,
            icon: 'bhi-certification',
        },
        {
            label: 'Section 2',
            name: 'sectionHeader2',
            sortOrder: 500,
            enabled: true,
        },
        {
            label: 'Section 1',
            name: 'sectionHeader1',
            sortOrder: 45,
            enabled: true,
        },
    ],
};
Object.assign(MockMetaHeaders, MockMeta);
/** @type {?} */
const MockMetaForDisabledForm = {
    entity: 'ENTITY_NAME',
    entityMetaUrl: '',
    label: 'ENTITY_LABEL',
    fields: [
        {
            name: 'textbox',
            type: 'text',
            label: 'TextBox',
            required: true,
            sortOrder: 120,
            maxLength: 10,
        },
        {
            name: 'textarea',
            type: 'textarea',
            label: 'TextArea',
            required: true,
            sortOrder: 120,
            maxLength: 10,
        },
        {
            name: 'date',
            type: 'date',
            label: 'Date',
            required: true,
            sortOrder: 40,
            defaultValue: new Date(2016, 1, 1),
        },
        {
            name: 'time',
            type: 'time',
            label: 'Time',
            required: true,
            sortOrder: 140,
            defaultValue: new Date(2016, 1, 1, 9, 0, 0, 0),
        },
        {
            name: 'datetime',
            type: 'date-time',
            label: 'DateTime',
            dataSpecialization: 'DATETIME',
            required: true,
            sortOrder: 50,
            defaultValue: new Date(2016, 1, 1, 9, 0, 0, 0),
        },
        {
            name: 'select',
            type: 'select',
            dataType: 'String',
            maxLength: 200,
            confidential: false,
            label: 'Select',
            options: [
                {
                    value: 'Open',
                    label: 'Open',
                },
                {
                    value: 'disabledValue',
                    label: 'Disabled Value',
                },
            ],
            sortOrder: 100,
        },
        {
            name: 'tiles',
            type: 'tiles',
            dataType: 'String',
            label: 'Tiles',
            required: true,
            options: [
                {
                    value: 'None',
                    label: 'None',
                },
                {
                    value: 'Disabled',
                    label: 'Disabled',
                },
                {
                    value: 'Enabled',
                    label: 'Enabled',
                },
            ],
            sortOrder: 130,
        },
        {
            name: 'picker',
            type: 'picker',
            dataType: 'String',
            maxLength: 200,
            confidential: false,
            label: 'Picker',
            required: true,
            options: {
                options: ['Alabama', 'Alaska', 'Disabled Picker'],
            },
            sortOrder: 80,
        },
        {
            name: 'chips',
            type: 'picker',
            confidential: false,
            optional: false,
            label: 'Chips',
            required: true,
            readOnly: false,
            multiValue: true,
            inputType: 'SELECT',
            options: [
                {
                    value: 'Open',
                    label: 'Open',
                },
                {
                    value: 'Disabled',
                    label: 'Disabled',
                },
                {
                    value: 'Chip',
                    label: 'Chip',
                },
                {
                    value: 'TRIGGER',
                    label: 'TRIGGER',
                },
            ],
            sortOrder: 150,
        },
        {
            name: 'rowChips',
            type: 'TO_MANY',
            confidential: false,
            optional: false,
            label: 'Row Chips',
            required: true,
            readOnly: false,
            multiValue: false,
            options: [
                {
                    id: 1,
                    value: 'Disabled Row Chip',
                    description: 'This is a disabled Row Chip',
                },
            ],
            hideFromSearch: false,
            sortOrder: 160,
        },
        {
            name: 'address',
            type: 'COMPOSITE',
            dataType: 'Address',
            dataSpecialization: 'SYSTEM',
            confidential: false,
            optional: false,
            label: 'Address',
            required: true,
            readOnly: false,
            multiValue: false,
            hideFromSearch: true,
            tooltip: 'Address Block',
            fields: [
                {
                    name: 'address1',
                    type: 'SCALAR',
                    dataType: 'String',
                    maxLength: 40,
                    confidential: false,
                    optional: true,
                    label: 'Address 1',
                    required: true,
                    readOnly: false,
                    multiValue: false,
                    hideFromSearch: false,
                },
                {
                    name: 'address2',
                    type: 'SCALAR',
                    dataType: 'String',
                    maxLength: 40,
                    confidential: false,
                    optional: true,
                    label: 'Address 2',
                    required: false,
                    readOnly: false,
                    multiValue: false,
                    hideFromSearch: false,
                },
                {
                    name: 'city',
                    type: 'SCALAR',
                    dataType: 'String',
                    maxLength: 40,
                    confidential: false,
                    optional: true,
                    label: 'City',
                    required: false,
                    readOnly: false,
                    multiValue: false,
                    hideFromSearch: false,
                },
                {
                    name: 'state',
                    type: 'SCALAR',
                    dataType: 'String',
                    maxLength: 30,
                    confidential: false,
                    optional: true,
                    label: 'State',
                    required: true,
                    readOnly: false,
                    multiValue: false,
                    inputType: 'SELECT',
                    hideFromSearch: false,
                },
                {
                    name: 'zip',
                    type: 'SCALAR',
                    dataType: 'String',
                    maxLength: 15,
                    confidential: false,
                    optional: true,
                    label: 'Zip',
                    required: false,
                    readOnly: false,
                    multiValue: false,
                    hideFromSearch: false,
                },
                {
                    name: 'countryID',
                    type: 'SCALAR',
                    dataType: 'Integer',
                    confidential: false,
                    optional: false,
                    label: 'Country',
                    required: false,
                    readOnly: false,
                    multiValue: false,
                    inputType: 'SELECT',
                    defaultValue: 2260,
                    hideFromSearch: false,
                },
                {
                    name: 'countryCode',
                    type: 'SCALAR',
                    dataType: 'String',
                    maxLength: 0,
                    optional: true,
                },
                {
                    name: 'countryName',
                    type: 'SCALAR',
                    dataType: 'String',
                    maxLength: 0,
                    optional: true,
                },
            ],
            sortOrder: 10,
        },
        {
            name: 'checkbox',
            type: 'checkbox',
            label: 'Checkbox',
            defaultValue: true,
            sortOrder: 20,
        },
        {
            name: 'checklist',
            type: 'checklist',
            label: 'CheckList',
            options: [
                {
                    value: 'None',
                    label: 'None',
                },
                {
                    value: 'Disabled',
                    label: 'Disabled',
                },
                {
                    value: 'Enabled',
                    label: 'Enabled',
                },
            ],
            required: true,
            sortOrder: 30,
        },
        {
            name: 'file',
            type: 'file',
            label: 'File',
            multiValue: true,
            required: true,
            sortOrder: 70,
        },
        {
            defaultValue: 'disabled',
            inputType: 'RADIO',
            label: 'Radio',
            maxLength: 100,
            multiValue: false,
            name: 'type',
            optional: true,
            options: [
                {
                    value: 'none',
                    label: 'None',
                },
                {
                    value: 'disabled',
                    label: 'Disabled',
                },
                {
                    value: 'enabled',
                    label: 'Enabled',
                },
            ],
            required: true,
            sortOrder: 9000,
        },
        {
            inputType: 'RADIO',
            label: 'Radio',
            maxLength: 100,
            multiValue: false,
            name: 'radio',
            optional: true,
            options: [
                {
                    value: 'Yes',
                    label: 'Yes',
                    icon: 'check',
                },
                {
                    value: 'No',
                    label: 'No',
                    icon: 'times',
                },
            ],
            required: true,
            sortOrder: 9000,
        },
        {
            name: 'htmlFieldFullEditor',
            key: 'htmlFieldFullEditor',
            label: 'Editor',
            required: true,
            sortOrder: 60,
            dataSpecialization: 'HTML',
            type: 'SCALAR',
            dataType: 'String',
        },
    ],
};
/** @type {?} */
const MockMetaForForm = {
    entity: 'ENTITY_NAME',
    entityMetaUrl: '',
    label: 'ENTITY_LABEL',
    fields: [
        {
            name: 'textbox1',
            type: 'text',
            label: 'TextBox 1',
            required: true,
            sortOrder: 110,
            maxLength: 10,
        },
        {
            name: 'textbox2',
            type: 'text',
            label: 'TextBox 2',
            required: true,
            sortOrder: 120,
            maxLength: 10,
        },
        {
            name: 'textbox3',
            type: 'text',
            label: 'TextBox 3',
            required: true,
            sortOrder: 130,
            maxLength: 10,
        },
    ],
};

/**
 * @fileoverview added by tsickle
 * Generated from: form-controls/form/disabled-form/disabled-form-example.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@title Disabled Form Example
 */
class DisabledFormExample {
    /**
     * @param {?} formUtils
     */
    constructor(formUtils) {
        this.formUtils = formUtils;
        this.required = false;
        this.disabled = true;
        this.placeholder = 'Placeholder';
        this.note = '';
        // Disabled Form
        /** @type {?} */
        const disabledOverrides = {
            address: {
                readOnly: true,
            },
            textbox: {
                readOnly: true,
            },
            textarea: {
                readOnly: true,
            },
            date: {
                readOnly: true,
            },
            time: {
                readOnly: true,
            },
            datetime: {
                readOnly: true,
            },
            select: {
                readOnly: true,
            },
            tiles: {
                readOnly: true,
            },
            picker: {
                readOnly: true,
            },
            chips: {
                readOnly: true,
            },
            checkbox: {
                readOnly: true,
            },
            checklist: {
                readOnly: true,
            },
            file: {
                readOnly: true,
            },
            type: {
                readOnly: true,
            },
            radio: {
                readOnly: true,
            },
            htmlFieldFullEditor: {
                readOnly: true,
            },
            rowChips: {
                readOnly: true,
                label: 'Row Chips',
                columns: [
                    {
                        label: 'Value',
                        data: (/**
                         * @param {?} item
                         * @return {?}
                         */
                        (item) => {
                            return item.value['value'];
                        }),
                    },
                    {
                        label: 'Description',
                        data: (/**
                         * @param {?} item
                         * @return {?}
                         */
                        (item) => {
                            return item.value['description'];
                        }),
                    },
                ],
            },
        };
        // Updating form
        this.disabledControls = formUtils.toFieldSets(MockMetaForDisabledForm, '$ USD', {}, { token: 'TOKEN', military: true }, disabledOverrides);
        formUtils.setInitialValuesFieldsets(this.disabledControls, {
            textbox: 'Disabled TextBox',
            textarea: 'Disabled TextArea Disabled TextArea Disabled TextArea Disabled TextArea Disabled TextArea Disabled TextArea Disabled TextArea ',
            select: 'disabledValue',
            checklist: 'Disabled',
            tiles: 'Disabled',
            radio: 'Yes',
            chips: ['Disabled', 'Chip'],
            address: {
                address1: '100 Summer St',
                address2: 'apt 25',
                countryID: 1,
                state: 'Georgia',
                city: 'Atlanta',
                zip: '30312',
                countryName: 'United States',
                countryCode: 'US',
            },
            file: [{ name: 'yourFile.pdf', loaded: true, link: 'www.google.com', description: 'file description' }],
            htmlFieldFullEditor: `<h1>Disabled Editor</h1><br><ui><li>Disabled</li><li>Editor</li></ui>`,
            picker: 'Disabled Picker',
            rowChips: [{ id: 1, value: 'Disabled Row Chip', description: 'This is a disabled Row Chip' }],
        });
        this.disabledForm = formUtils.toFormGroupFromFieldset(this.disabledControls);
        this.disabledNote = 'Disabled QuickNote';
        this.disabledQuickNote = {
            triggers: {
                tags: '@',
                references: '#',
                boos: '^',
            },
            options: {
                tags: ['First', 'Second', 'Space Between'],
                references: ['Third', 'Fourth'],
                boos: ['Test'],
            },
            readOnly: true,
            renderer: {
                tags: (/**
                 * @param {?} symbol
                 * @param {?} item
                 * @return {?}
                 */
                (symbol, item) => {
                    return `<a href="https://www.google.com/search?q=bullhorn&oq=bullhorn">${symbol}${item.label}</a>`;
                }),
                references: (/**
                 * @param {?} symbol
                 * @param {?} item
                 * @return {?}
                 */
                (symbol, item) => {
                    return `<a href="https://www.google.com/search?q=bullhorn&oq=bullhorn">${symbol}${item.label}</a>`;
                }),
                boos: (/**
                 * @param {?} symbol
                 * @param {?} item
                 * @return {?}
                 */
                (symbol, item) => {
                    return `<strong>${symbol}${item.label}</strong>`;
                }),
            },
        };
    }
}
DisabledFormExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'disabled-form-example',
                template: "<novo-dynamic-form [autoFocusFirstField]=\"true\" class=\"dynamic\" [fieldsets]=\"disabledControls\" [(form)]=\"disabledForm\" #myform></novo-dynamic-form>\n<div class=\"final-value\">Values: {{myform.values | json}}</div>\n<br>\n<h5>QUICK NOTE</h5>\n<br>\n<novo-quick-note [(ngModel)]=\"disabledNote\" [placeholder]=\"placeholder\" [config]=\"disabledQuickNote\"></novo-quick-note>\n<div class=\"data\">\n  <p>Note: {{note | json}}</p>\n</div>\n\n",
                styles: [""]
            }] }
];
/** @nocollapse */
DisabledFormExample.ctorParameters = () => [
    { type: novo_elements__WEBPACK_IMPORTED_MODULE_3__["FormUtils"] }
];
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: form-controls/form/dynamic-form-field-sets/dynamic-form-field-sets-example.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@title Dynamic Form Field Sets Example
 */
class DynamicFormFieldSetsExample {
    /**
     * @param {?} formUtils
     */
    constructor(formUtils) {
        this.formUtils = formUtils;
        // Dynamic
        this.dynamic = formUtils.toFieldSets(MockMeta, '$ USD', {}, { token: 'TOKEN', military: true }, {
            customfield: {
                template: 'custom-demo-component',
            },
        });
        formUtils.setInitialValuesFieldsets(this.dynamic, { firstName: 'Initial F Name', number: 12 });
        this.dynamicForm = formUtils.toFormGroupFromFieldset(this.dynamic);
        // Dynamic + Fieldsets
        this.fieldsets = formUtils.toFieldSets(MockMetaHeaders, '$ USD', {}, { token: 'TOKEN' }, {
            customfield: {
                template: 'custom-demo-component',
            },
        });
        formUtils.setInitialValuesFieldsets(this.fieldsets, { firstName: 'Initial F Name', number: 12 });
        this.fieldsetsForm = formUtils.toFormGroupFromFieldset(this.fieldsets);
    }
    /**
     * @param {?} form
     * @return {?}
     */
    save(form) {
        if (!form.isValid) {
            form.showOnlyRequired(true);
        }
        else {
            alert('SAVING');
        }
    }
    /**
     * @return {?}
     */
    clear() {
        this.dynamic.forEach((/**
         * @param {?} control
         * @return {?}
         */
        (control) => {
            control.forceClear.emit();
        }));
    }
    /**
     * @param {?} value
     * @return {?}
     */
    onChange(value) {
        console.log('I changed!', value); // tslint:disable-line
    }
}
DynamicFormFieldSetsExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'dynamic-form-field-sets-example',
                template: "<button theme=\"secondary\" *ngIf=\"!myFieldsetsForm.showingAllFields && !(myFieldsetsForm.allFieldsRequired || myFieldsetsForm.allFieldsNotRequired)\" (click)=\"myFieldsetsForm.showAllFields()\">Show All Fields</button>\n<button theme=\"secondary\" *ngIf=\"!myFieldsetsForm.showingRequiredFields && !(myFieldsetsForm.allFieldsRequired || myFieldsetsForm.allFieldsNotRequired)\" (click)=\"myFieldsetsForm.showOnlyRequired(false)\">Show Required Fields</button>\n<novo-dynamic-form class=\"dynamic\" layout=\"vertical\" [fieldsets]=\"fieldsets\" [(form)]=\"fieldsetsForm\" #myFieldsetsForm>\n  <ng-template novoTemplate=\"custom-demo-component\" let-control let-form=\"form\">\n    <custom-demo-control-example [control]=\"control\" [form]=\"form\"></custom-demo-control-example>\n  </ng-template>\n</novo-dynamic-form>\n<footer class=\"dynamic-demo-footer\">\n  <button (click)=\"save(myFieldsetsForm)\" theme=\"primary\" icon=\"check\">Save</button>\n  <button (click)=\"clear()\" theme=\"secondary\" icon=\"check\">Clear</button>\n</footer>\n<div class=\"final-value\">Valid: {{myFieldsetsForm.isValid | json}}</div>\n<div class=\"final-value\">Values: {{myFieldsetsForm.values | json}}</div>\n<div class=\"final-value\">Updated Values: {{myFieldsetsForm.updatedValues() | json}}</div>\n",
                styles: [""]
            }] }
];
/** @nocollapse */
DynamicFormFieldSetsExample.ctorParameters = () => [
    { type: novo_elements__WEBPACK_IMPORTED_MODULE_3__["FormUtils"] }
];
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: form-controls/form/dynamic-form/dynamic-form-example.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@title Dynamic Form Example
 */
class DynamicFormExample {
    /**
     * @param {?} formUtils
     */
    constructor(formUtils) {
        this.formUtils = formUtils;
        // Dynamic
        this.dynamic = formUtils.toFieldSets(MockMeta, '$ USD', {}, { token: 'TOKEN', military: true }, {
            customfield: {
                template: 'custom-demo-component',
            },
        });
        formUtils.setInitialValuesFieldsets(this.dynamic, { firstName: 'Initial F Name', number: 12 });
        this.dynamicForm = formUtils.toFormGroupFromFieldset(this.dynamic);
    }
    /**
     * @param {?} form
     * @return {?}
     */
    save(form) {
        if (!form.isValid) {
            form.showOnlyRequired(true);
        }
        else {
            alert('SAVING');
        }
    }
    /**
     * @return {?}
     */
    clear() {
        this.dynamic.forEach((/**
         * @param {?} control
         * @return {?}
         */
        (control) => {
            control.forceClear.emit();
        }));
    }
    /**
     * @param {?} value
     * @return {?}
     */
    onChange(value) {
        console.log('I changed!', value); // tslint:disable-line
    }
}
DynamicFormExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'dynamic-form-example',
                template: "<button theme=\"secondary\" *ngIf=\"!myform.showingAllFields && !(myform.allFieldsRequired || myform.allFieldsNotRequired)\" (click)=\"myform.showAllFields()\">Show All Fields</button>\n<button theme=\"secondary\" *ngIf=\"!myform.showingRequiredFields && !(myform.allFieldsRequired || myform.allFieldsNotRequired)\" (click)=\"myform.showOnlyRequired(false)\">Show Required Fields</button>\n<novo-dynamic-form [autoFocusFirstField]=\"true\" class=\"dynamic\" [fieldsets]=\"dynamic\" [(form)]=\"dynamicForm\" #myform></novo-dynamic-form>\n<footer class=\"dynamic-demo-footer\">\n    <button (click)=\"save(myform)\" theme=\"primary\" icon=\"check\">Save</button>\n    <button (click)=\"clear()\" theme=\"secondary\" icon=\"check\">Clear</button>\n</footer>\n<div class=\"final-value\">Valid: {{myform.isValid | json}}</div>\n<div class=\"final-value\">Values: {{myform.values | json}}</div>\n<div class=\"final-value\">Updated Values: {{myform.updatedValues() | json}}</div>\n",
                styles: [""]
            }] }
];
/** @nocollapse */
DynamicFormExample.ctorParameters = () => [
    { type: novo_elements__WEBPACK_IMPORTED_MODULE_3__["FormUtils"] }
];
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: form-controls/form/enable-disable-all-fields-in-form/enable-disable-all-fields-in-form-example.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@title Enable/Disable all Fields in Form Example
 */
class EnableDisableAllFieldsInFormExample {
    /**
     * @param {?} formUtils
     */
    constructor(formUtils) {
        this.formUtils = formUtils;
        this.disabled = false;
        // Updating form
        this.controls = formUtils.toFieldSets(MockMetaForForm, '$ USD', {}, { token: 'TOKEN', military: true }, {});
        formUtils.setInitialValuesFieldsets(this.controls, {
            select: 'disabledValue',
        });
        this.form = formUtils.toFormGroupFromFieldset(this.controls);
    }
    /**
     * @return {?}
     */
    toggleEnableDisableAllFields() {
        this.disabled = !this.disabled;
        if (this.disabled) {
            this.form.enableAllControls();
        }
        else {
            this.form.disableAllControls();
        }
    }
}
EnableDisableAllFieldsInFormExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'enable-disable-all-fields-in-form-example',
                template: "<novo-dynamic-form class=\"dynamic\" [fieldsets]=\"controls\" [(form)]=\"form\" #myform></novo-dynamic-form>\n<button theme=\"primary\" (click)=\"toggleEnableDisableAllFields()\">Toggle fields</button>\n",
                styles: [""]
            }] }
];
/** @nocollapse */
EnableDisableAllFieldsInFormExample.ctorParameters = () => [
    { type: novo_elements__WEBPACK_IMPORTED_MODULE_3__["FormUtils"] }
];
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: form-controls/form/file-input-controls/file-input-controls-example.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@title File Input Controls Example
 */
class FileInputControlsExample {
    /**
     * @param {?} formUtils
     */
    constructor(formUtils) {
        this.formUtils = formUtils;
        // custom upload validation
        this.message = '';
        // File input controls
        this.fileControl = new novo_elements__WEBPACK_IMPORTED_MODULE_3__["FileControl"]({ key: 'file', name: 'myfile', label: 'File', tooltip: 'Files Control' });
        this.multiFileControl = new novo_elements__WEBPACK_IMPORTED_MODULE_3__["FileControl"]({
            key: 'files',
            name: 'myfiles',
            label: 'Multiple Files',
            tooltip: 'Multiple Files',
            multiple: true,
            layoutOptions: { order: 'displayFilesBelow', download: true, edit: true, customActions: true, labelStyle: 'no-box' },
            value: [{ name: 'yourFile.pdf', loaded: true, link: 'www.google.com', description: 'file description' }],
        });
        this.fileForm = formUtils.toFormGroup([this.fileControl, this.multiFileControl]);
        this.customValidationFileControl = new novo_elements__WEBPACK_IMPORTED_MODULE_3__["FileControl"]({
            key: 'customValidationFiles',
            name: 'customValidationFiles',
            label: 'Custom Validation',
            tooltip: 'Custom Validation Multiple Files',
            multiple: true,
            layoutOptions: {
                order: 'displayFilesBelow',
                download: true,
                edit: true,
                customActions: false,
                customValidation: [{ action: 'upload', fn: this.checkFileSize.bind(this) }],
            },
        });
        this.customValidationFileForm = formUtils.toFormGroup([this.customValidationFileControl]);
        this.multiFileControlMixRemove = new novo_elements__WEBPACK_IMPORTED_MODULE_3__["FileControl"]({
            key: 'mixDeleteFiles',
            name: 'mymixDeleteFiles',
            label: 'Multiple Files - Delete New Only',
            tooltip: 'Multiple Files - Delete New Only',
            multiple: true,
            layoutOptions: {
                order: 'displayFilesBelow',
                labelStyle: 'no-box',
                download: true,
                edit: false,
                removable: false,
                removableWhenNew: true,
            },
            value: [{ name: 'yourFile.pdf', loaded: true, link: 'www.google.com', description: 'file description' }],
        });
        this.fileForm = formUtils.toFormGroup([this.fileControl, this.multiFileControl, this.multiFileControlMixRemove]);
    }
    /**
     * @param {?} file
     * @return {?}
     */
    handleEdit(file) {
        console.log('This is an Edit Action!', file); // tslint:disable-line
    }
    /**
     * @param {?} file
     * @return {?}
     */
    handleSave(file) {
        console.log('This is a Save Action!', file); // tslint:disable-line
    }
    /**
     * @param {?} file
     * @return {?}
     */
    handleDelete(file) {
        console.log('This is a Delete Action!', file); // tslint:disable-line
    }
    /**
     * @param {?} files
     * @return {?}
     */
    handleUpload(files) {
        console.log('This is an upload Action!', files); // tslint:disable-line
    }
    /**
     * @param {?} fileList
     * @return {?}
     */
    checkFileSize(fileList) {
        /** @type {?} */
        const maxSizeKb = 5120;
        for (const file of fileList) {
            if (file.size > maxSizeKb * 1024) {
                this.message = 'File is bigger than the allowed 5MB';
                return false;
            }
        }
        return true;
    }
}
FileInputControlsExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'file-input-controls-example',
                template: "<!--Check out the FormDemo.js for more information!-->\n<novo-form [form]=\"fileForm\" layout=\"vertical\">\n    <div class=\"novo-form-row\">\n        <novo-control [form]=\"fileForm\" [control]=\"fileControl\"></novo-control>\n    </div>\n    <div class=\"novo-form-row\">\n        <novo-control [form]=\"fileForm\" [control]=\"multiFileControl\" (edit)=\"handleEdit($event)\" (save)=\"handleSave($event)\" (delete)=\"handleDelete($event)\" (upload)=\"handleUpload($event)\"></novo-control>\n    </div>\n    <div class=\"novo-form-row\">\n        <novo-control [form]=\"fileForm\" [control]=\"multiFileControlMixRemove\"></novo-control>\n    </div>\n</novo-form>\n<div class=\"final-value\">Value: {{fileForm.value | json}}</div>\n<br />\n<br />\n<novo-form layout=\"vertical\" [form]=\"customValidationFileForm\">\n    <div class=\"novo-form-row\">\n        <novo-control [form]=\"customValidationFileForm\" [control]=\"customValidationFileControl\"></novo-control>\n    </div>\n</novo-form>\n<div>{{ message }}</div>\n",
                styles: [""]
            }] }
];
/** @nocollapse */
FileInputControlsExample.ctorParameters = () => [
    { type: novo_elements__WEBPACK_IMPORTED_MODULE_3__["FormUtils"] }
];
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: form-controls/form/picker-controls/picker-controls-example.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// import { MockMeta, MockMetaHeaders } from './MockMeta';
/**
 * \@title Picker Controls Example
 */
class PickerControlsExample {
    /**
     * @param {?} formUtils
     */
    constructor(formUtils) {
        this.formUtils = formUtils;
        /** @type {?} */
        const fruits = ['Apples', 'Oranges', 'Bananas', 'Grapes'];
        /** @type {?} */
        const cities = [
            {
                id: 1,
                name: 'Boston',
            },
            {
                id: 2,
                name: 'New York',
            },
            {
                id: 3,
                name: 'Washington D.C.',
            },
            {
                id: 4,
                name: 'Orlando',
            },
            {
                id: 5,
                name: 'Houston',
            },
            {
                id: 6,
                name: 'Chicago',
            },
        ];
        /** @type {?} */
        const states = [
            {
                value: 'ME',
                label: 'Maine',
            },
            {
                value: 'MD',
                label: 'Maryland',
            },
            {
                value: 'MA',
                label: 'Massachusetts',
            },
            {
                value: 'MI',
                label: 'Michigan',
            },
            {
                value: 'MN',
                label: 'Minnesota',
            },
            {
                value: 'MS',
                label: 'Mississippi',
            },
            {
                value: 'MO',
                label: 'Missouri',
            },
            {
                value: 'MT',
                label: 'Montana',
            },
        ];
        // Picker controls
        this.singlePickerControl = new novo_elements__WEBPACK_IMPORTED_MODULE_3__["PickerControl"]({
            key: 'singlePicker',
            tooltip: 'Single',
            label: 'Single',
            config: { options: ['One', 'Two', 'Three'] },
        });
        this.multiPickerControl = new novo_elements__WEBPACK_IMPORTED_MODULE_3__["PickerControl"]({
            key: 'multiPicker',
            tooltip: 'Multiple',
            label: 'Multiple',
            multiple: true,
            config: { options: ['One', 'Two', 'Three'], type: 'candidate' },
        });
        this.multiPickerControlWithMaxlength = new novo_elements__WEBPACK_IMPORTED_MODULE_3__["PickerControl"]({
            key: 'multiPickerWithMaxlength',
            tooltip: 'Multiple With Maxlength',
            label: 'Multiple With Maxlength',
            multiple: true,
            maxlength: 2,
            config: {
                options: fruits,
                type: 'candidate',
            },
        });
        this.multiPickerControlWithMaxlengthAndPreselects = new novo_elements__WEBPACK_IMPORTED_MODULE_3__["PickerControl"]({
            key: 'multiPickerControlWithMaxlengthAndPreselects',
            tooltip: 'Multiple With Maxlength and Preselects',
            label: 'Multiple With Maxlength & Preselects',
            multiple: true,
            maxlength: 2,
            config: {
                options: fruits,
                type: 'candidate',
            },
        });
        this.entityMultiPickerControl = new novo_elements__WEBPACK_IMPORTED_MODULE_3__["PickerControl"]({
            key: 'entityMultiPicker',
            label: 'Entities',
            required: true,
            readOnly: false,
            multiple: true,
            tooltip: 'Entities',
            config: {
                resultsTemplate: novo_elements__WEBPACK_IMPORTED_MODULE_3__["EntityPickerResults"],
                previewTemplate: novo_elements__WEBPACK_IMPORTED_MODULE_3__["EntityPickerResult"],
                format: '$title',
                options: [
                    {
                        title: 'Central Bank',
                        name: 'Central Bank',
                        email: 'new-bank-inquiries@centralbank.com',
                        phone: '(651) 555-1234',
                        address: { city: 'Washington', state: 'DC' },
                        searchEntity: 'ClientCorporation',
                    },
                    {
                        title: 'Federal Bank',
                        name: 'Federal Bank',
                        email: 'info@federalbank.com',
                        phone: '(545) 555-1212',
                        address: { city: 'Arlington', state: 'VA' },
                        searchEntity: 'ClientCorporation',
                    },
                    {
                        title: 'Aaron Burr',
                        firstName: 'Aaron',
                        lastName: 'Burr',
                        name: 'Aaron Burr',
                        companyName: 'Central Bank',
                        email: 'aburr@centralbank.com',
                        phone: '(333) 555-3434',
                        address: { city: 'Washington', state: 'DC' },
                        status: 'Hold',
                        searchEntity: 'ClientContact',
                    },
                    {
                        title: 'Alexander Hamilton',
                        firstName: 'Alexander',
                        lastName: 'Hamilton',
                        name: 'Alexander Hamilton',
                        companyName: 'Federal Bank',
                        email: 'ahamilton@federalbank.com',
                        phone: '(333) 555-2222',
                        address: { city: 'Arlington', state: 'VA' },
                        status: 'Active',
                        searchEntity: 'ClientContact',
                    },
                    {
                        title: 'Ben Franklin',
                        firstName: 'Ben',
                        lastName: 'Franklin',
                        name: 'Ben Franklin',
                        email: 'bfranklin@gmail.com',
                        phone: '(654) 525-2222',
                        address: { city: 'Boston', state: 'MA' },
                        status: 'Interviewing',
                        searchEntity: 'Candidate',
                    },
                    {
                        title: 'Thomas Jefferson',
                        firstName: 'Thomas',
                        lastName: 'Jefferson',
                        name: 'Thomas Jefferson',
                        email: 'tjefferson@usa.com',
                        phone: '(123) 542-1234',
                        address: { city: 'Arlington', state: 'VA' },
                        status: 'New Lead',
                        searchEntity: 'Candidate',
                    },
                ],
            },
        });
        this.rowMultiPickerControl = new novo_elements__WEBPACK_IMPORTED_MODULE_3__["PickerControl"]({
            key: 'rowMultiPickerControl',
            tooltip: 'Multiple Rows',
            label: 'Multiple Rows',
            multiple: true,
            config: {
                format: '$name',
                options: cities,
                type: 'candidate',
                columns: [
                    {
                        label: 'Name',
                        data: (/**
                         * @param {?} item
                         * @return {?}
                         */
                        (item) => {
                            return item['label'];
                        }),
                    },
                    {
                        label: 'Id',
                        data: (/**
                         * @param {?} item
                         * @return {?}
                         */
                        (item) => {
                            return item.value['id'];
                        }),
                    },
                ],
            },
        });
        this.rowMultiPickerControlWithMaxlength = new novo_elements__WEBPACK_IMPORTED_MODULE_3__["PickerControl"]({
            key: 'rowMultiPickerControlWithMaxlength',
            tooltip: 'Multiple Rows With Maxlength',
            label: 'Multiple Rows With Maxlength',
            multiple: true,
            maxlength: 4,
            config: {
                format: '$name',
                options: cities,
                type: 'candidate',
                columns: [
                    {
                        label: 'Name',
                        data: (/**
                         * @param {?} item
                         * @return {?}
                         */
                        (item) => {
                            return item['label'];
                        }),
                    },
                    {
                        label: 'Id',
                        data: (/**
                         * @param {?} item
                         * @return {?}
                         */
                        (item) => {
                            return item.value['id'];
                        }),
                    },
                ],
            },
        });
        this.textPickerWithGetLabels = new novo_elements__WEBPACK_IMPORTED_MODULE_3__["PickerControl"]({
            key: 'textPickerWithGetLabels',
            tooltip: 'Text Value Picker with getLabels()',
            label: 'Text Value Picker with getLabels()',
            multiple: false,
            config: {
                field: 'value',
                format: '$label',
                options: states,
                useGetLabels: true,
                getLabels: (/**
                 * @param {?} value
                 * @return {?}
                 */
                (value) => {
                    return new Promise((/**
                     * @param {?} resolve
                     * @return {?}
                     */
                    (resolve) => {
                        states.forEach((/**
                         * @param {?} state
                         * @return {?}
                         */
                        (state) => {
                            if (state.value === value) {
                                resolve(state);
                            }
                        }));
                    }));
                }),
            },
        });
        /** @type {?} */
        const controls = [
            this.singlePickerControl,
            this.multiPickerControl,
            this.entityMultiPickerControl,
            this.multiPickerControlWithMaxlength,
            this.multiPickerControlWithMaxlengthAndPreselects,
            this.rowMultiPickerControl,
            // this.rowMultiPickerControlWithMaxlength,
            this.textPickerWithGetLabels,
        ];
        formUtils.setInitialValues(controls, {
            entityMultiPicker: [
                {
                    title: 'Federal Bank',
                    name: 'Federal Bank',
                    email: 'info@federalbank.com',
                    phone: '(545) 555-1212',
                    address: { city: 'Arlington', state: 'VA' },
                    searchEntity: 'ClientCorporation',
                },
            ],
            multiPickerControlWithMaxlengthAndPreselects: ['Oranges', 'Bananas'],
            rowMultiPickerControlWithMaxlength: [
                {
                    id: 1,
                    name: 'Boston',
                },
                {
                    id: 5,
                    name: 'Houston',
                },
                {
                    id: 6,
                    name: 'Chicago',
                },
            ],
            textPickerWithGetLabels: 'MD',
        });
        this.pickerForm = formUtils.toFormGroup(controls);
    }
}
PickerControlsExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'picker-controls-example',
                template: "<!--Check out the FormDemo.js for more information!-->\n<novo-form [form]=\"pickerForm\">\n    <div class=\"novo-form-row\">\n        <novo-control [form]=\"pickerForm\" [control]=\"singlePickerControl\"></novo-control>\n    </div>\n    <div class=\"novo-form-row\">\n        <novo-control [form]=\"pickerForm\" [control]=\"multiPickerControl\"></novo-control>\n    </div>\n    <div class=\"novo-form-row\">\n        <novo-control [form]=\"pickerForm\" [control]=\"entityMultiPickerControl\"></novo-control>\n    </div>\n    <div class=\"novo-form-row\">\n      <novo-control [form]=\"pickerForm\" [control]=\"rowMultiPickerControl\"></novo-control>\n    </div>\n    <div class=\"novo-form-row\">\n      <novo-control [form]=\"pickerForm\" [control]=\"multiPickerControlWithMaxlength\"></novo-control>\n    </div>\n    <div class=\"novo-form-row\">\n      <novo-control [form]=\"pickerForm\" [control]=\"multiPickerControlWithMaxlengthAndPreselects\"></novo-control>\n    </div>\n    <!-- Row picker with maxlength is implemented but currently turned off because it is not being used and there was no UI created for it.\n         To turn it back on, add '[maxlength]=\"control?.maxlength\"' to ControlTemplate.ts\n    <div class=\"novo-form-row\">\n      <novo-control [form]=\"pickerForm\" [control]=\"rowMultiPickerControlWithMaxlength\"></novo-control>\n    </div-->\n    <div class=\"novo-form-row\">\n      <novo-control [form]=\"pickerForm\" [control]=\"textPickerWithGetLabels\"></novo-control>\n    </div>\n</novo-form>\n<div class=\"final-value\">Value: {{pickerForm.value | json}}</div>\n",
                styles: [""]
            }] }
];
/** @nocollapse */
PickerControlsExample.ctorParameters = () => [
    { type: novo_elements__WEBPACK_IMPORTED_MODULE_3__["FormUtils"] }
];
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: form-controls/form/text-based-controls/text-based-controls-example.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// import { MockMeta, MockMetaHeaders } from './MockMeta';
/**
 * \@title Text Based Controls Example
 */
class TextBasedControlsExample {
    /**
     * @param {?} formUtils
     */
    constructor(formUtils) {
        this.formUtils = formUtils;
        // Quick note config;
        this.quickNoteConfig = {
            triggers: {
                tags: '@',
                references: '#',
                boos: '^',
            },
            options: {
                tags: ['First', 'Second'],
                references: ['Third', 'Fourth'],
                boos: ['Test'],
            },
            renderer: {
                tags: (/**
                 * @param {?} symbol
                 * @param {?} item
                 * @return {?}
                 */
                (symbol, item) => {
                    return `<a class="tag">${symbol}${item.label}</a>`;
                }),
                references: (/**
                 * @param {?} symbol
                 * @param {?} item
                 * @return {?}
                 */
                (symbol, item) => {
                    return `<a class="tag">${symbol}${item.label}</a>`;
                }),
                boos: (/**
                 * @param {?} symbol
                 * @param {?} item
                 * @return {?}
                 */
                (symbol, item) => {
                    return `<strong>${symbol}${item.label}</strong>`;
                }),
            },
        };
        // Text-based Controls
        this.textControl = new novo_elements__WEBPACK_IMPORTED_MODULE_3__["TextBoxControl"]({
            key: 'text',
            label: 'Text Box',
            tooltip: 'Textbox',
            readOnly: true,
            value: 'HI',
            required: true,
        });
        this.textAreaControl = new novo_elements__WEBPACK_IMPORTED_MODULE_3__["TextAreaControl"]({
            key: 'textarea',
            label: 'Text Area',
            tooltip: 'Text Area',
            value: 'Bro ipsum dolor sit amet yard sale saddle pipe, poaching cork 360 punter ACL back country cornice Whistler.  Avie Ski taco mitt, manny first tracks yard sale caballerial heli fatty.  Epic dope grab, brain bucket japan air wack bowl  mute heli corn Snowboard Whistler giblets table top.  Crunchy Snowboard washboard line grab reverse camber.  Bump epic granny gear heli sketching wheelie huckfest face plant crank pow pow chain ring  dirtbag washboard.  Flow endo ski bum sucker hole, death cookies manny schwag pipe.  Dope heli stomp yard sale, saddle shreddin booter gear jammer grom bonk OTB brain bucket bonk japan air Whistler.Clipless pow pow pow, core shot corn butter bomb hole glades face plant dust on crust.  Poaching park face shots bump, Bike cornice death cookies.  Avie cruiser sucker hole face plant switch.  ACL snake bite bonk, twin tip euro rig nose press McTwist.  Ripping skinny trucks shreddin.  Apres pow line euro sharkbite gapers lid.Snake bite derailleur wheels bomb hole.  Huck apres steeps BB first tracks bowl  daffy park euro park rat euro.  North shore death cookies snake bite carve, freshies dirtbag huck reverse camber hellflip frozen chicken heads apres taco glove gnar face shots bro.  Ride flow twister cornice afterbang saddle first tracks rig berm bro face shots.  Ride stoked wack park twin tip trucks chillax shuttle Whistler gondy laps.  Grind berm schwag, table top face shots steed liftie afterbang taco glove frozen chicken heads free ride clean huck.  Rock-ectomy white room nose press avie.Frozen chicken heads gondy bail travel huckfest big ring phat clean.  Taco couloir piste derailleur wack scream backside steeps groomer glades pipe gondy switch skid lid.  Brain bucket betty bowl, moguls gondy Whistler air hardtail.  Flow euro granny gear, McTwist cruiser bonk grom chain suck.  Trucks line huck, stomp ripper washboard euro corduroy death cookies yard sale dope face plant shreddin chain suck.ACL T-bar hellflip, first tracks gondy hardtail rip wack dust on crust schwag frontside couloir laps presta backside.  Road rash Ski ski bum gnar wack flow carve lid.  Nose white room ollie rail table top grom back country washboard dust on crust chillax gear jammer bro stomp stoked.  Lid wheels nose press frontside, park ACL dirtbag huck epic bowl  taco glove OTB.  Fatty mute whip stunt, Whistler McTwist stoked Bike.  Endo brain bucket crank dust on crust back country line ollie gapers afterbang bump stoked taco road rash granny gear.  Deck dirtbag 360 gnar snake bite couloir Bike corduroy frontside crank lid bro.Air tele schwag ollie, hardtail betty crunchy epic  face shots.  Travel flowy misty huck Bike 180 schwag drop hellflip ripping bunny slope carbon roadie tele bail.  Cornice sharkbite 360 frozen chicken heads dope hellflip clipless.  Switch sketching grind brain bucket stunt taco daffy OTB ride liftie brain bucket air huckfest park 360.',
        });
        this.emailControl = new novo_elements__WEBPACK_IMPORTED_MODULE_3__["TextBoxControl"]({ type: 'email', key: 'email', label: 'Email', tooltip: 'Email' });
        this.numberControl = new novo_elements__WEBPACK_IMPORTED_MODULE_3__["TextBoxControl"]({ type: 'number', key: 'number', tooltip: 'Number', label: 'Number' });
        this.currencyControl = new novo_elements__WEBPACK_IMPORTED_MODULE_3__["TextBoxControl"]({
            type: 'currency',
            key: 'currency',
            tooltip: 'Currency',
            label: 'Currency',
            currencyFormat: '$ USD',
        });
        this.floatControl = new novo_elements__WEBPACK_IMPORTED_MODULE_3__["TextBoxControl"]({ type: 'float', key: 'float', tooltip: 'Float', label: 'Float' });
        this.percentageControl = new novo_elements__WEBPACK_IMPORTED_MODULE_3__["TextBoxControl"]({
            type: 'percentage',
            key: 'percentage',
            tooltip: 'Percent',
            label: 'Percent',
            required: true,
        });
        this.quickNoteControl = new novo_elements__WEBPACK_IMPORTED_MODULE_3__["QuickNoteControl"]({
            key: 'note',
            label: 'Note',
            config: this.quickNoteConfig,
            required: true,
            tooltip: 'Quicknote',
        });
        this.aceEditorControl = new novo_elements__WEBPACK_IMPORTED_MODULE_3__["AceEditorControl"]({ key: 'ace', label: 'CODE', tooltip: 'CODE', value: 'var i = 0;' });
        this.textForm = formUtils.toFormGroup([
            this.textControl,
            this.emailControl,
            this.textAreaControl,
            this.numberControl,
            this.currencyControl,
            this.floatControl,
            this.percentageControl,
            this.quickNoteControl,
            this.aceEditorControl,
        ]);
    }
}
TextBasedControlsExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'text-based-controls-example',
                template: "<!--Check out the FormDemo.js for more information!-->\n<button theme=\"secondary\" (click)=\"form.showAllFields()\">Show All Fields</button>\n<button theme=\"secondary\" (click)=\"form.showOnlyRequired(false)\">Show Required Fields</button>\n<br/>\n<br/>\n<novo-form [form]=\"textForm\" #form>\n    <div class=\"novo-form-row\">\n        <novo-control [form]=\"textForm\" [control]=\"textControl\"></novo-control>\n    </div>\n    <div class=\"novo-form-row\">\n        <novo-control [autoFocus]=\"true\" [form]=\"textForm\" [control]=\"emailControl\"></novo-control>\n    </div>\n    <div class=\"novo-form-row\">\n        <novo-control [form]=\"textForm\" [control]=\"numberControl\"></novo-control>\n    </div>\n    <div class=\"novo-form-row\">\n        <novo-control [form]=\"textForm\" [control]=\"currencyControl\"></novo-control>\n    </div>\n    <div class=\"novo-form-row\">\n        <novo-control [form]=\"textForm\" [control]=\"floatControl\"></novo-control>\n    </div>\n    <div class=\"novo-form-row\">\n        <novo-control [form]=\"textForm\" [control]=\"percentageControl\"></novo-control>\n    </div>\n    <div class=\"novo-form-row\">\n        <novo-control [form]=\"textForm\" [control]=\"textAreaControl\"></novo-control>\n    </div>\n    <div class=\"novo-form-row\">\n        <novo-control [form]=\"textForm\" [control]=\"quickNoteControl\"></novo-control>\n    </div>\n    <div class=\"novo-form-row\">\n        <novo-control [form]=\"textForm\" [control]=\"aceEditorControl\"></novo-control>\n    </div>\n</novo-form>\n<div class=\"final-value\">Value: {{textForm.value | json}}</div>\n",
                styles: [""]
            }] }
];
/** @nocollapse */
TextBasedControlsExample.ctorParameters = () => [
    { type: novo_elements__WEBPACK_IMPORTED_MODULE_3__["FormUtils"] }
];
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: form-controls/form/updating-form/updating-form-example.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@title Updating Form Example
 */
class UpdatingFormExample {
    /**
     * @param {?} formUtils
     */
    constructor(formUtils) {
        this.formUtils = formUtils;
        this.required = false;
        this.disabled = true;
        // Text-based Controls
        this.textControl = new novo_elements__WEBPACK_IMPORTED_MODULE_3__["TextBoxControl"]({
            key: 'text',
            label: 'Text Box',
            tooltip: 'Textbox',
            readOnly: true,
            value: 'HI',
            required: true,
        });
        this.percentageControl = new novo_elements__WEBPACK_IMPORTED_MODULE_3__["TextBoxControl"]({
            type: 'percentage',
            key: 'percentage',
            tooltip: 'Percent',
            label: 'Percent',
            required: true,
        });
        // Check box controls
        this.checkControl = new novo_elements__WEBPACK_IMPORTED_MODULE_3__["CheckboxControl"]({ key: 'check', tooltip: 'Checkbox', label: 'Checkbox', checkboxLabel: 'Checkbox' });
        // Picker controls
        this.singlePickerControl = new novo_elements__WEBPACK_IMPORTED_MODULE_3__["PickerControl"]({
            key: 'singlePicker',
            tooltip: 'Single',
            label: 'Single',
            config: { options: ['One', 'Two', 'Three'] },
        });
        // File input controls
        this.fileControl = new novo_elements__WEBPACK_IMPORTED_MODULE_3__["FileControl"]({ key: 'file', name: 'myfile', label: 'File', tooltip: 'Files Control' });
        // Updating form
        this.updatingFormControls = [this.textControl, this.percentageControl, this.checkControl, this.singlePickerControl, this.fileControl];
        this.updatingForm = formUtils.toFormGroup(this.updatingFormControls);
    }
    /**
     * @return {?}
     */
    toggleEnabled() {
        this.disabled = !this.disabled;
        Object.keys(this.updatingForm.controls).forEach((/**
         * @param {?} key
         * @return {?}
         */
        (key) => {
            if (this.disabled) {
                this.updatingForm.controls[key].enable();
            }
            else {
                this.updatingForm.controls[key].disable();
            }
        }));
    }
    /**
     * @return {?}
     */
    toggleRequired() {
        this.required = !this.required;
        Object.keys(this.updatingForm.controls).forEach((/**
         * @param {?} key
         * @return {?}
         */
        (key) => {
            this.updatingForm.controls[key].setRequired(this.required);
        }));
    }
    /**
     * @return {?}
     */
    markAsInvalid() {
        Object.keys(this.updatingForm.controls).forEach((/**
         * @param {?} key
         * @return {?}
         */
        (key) => {
            this.updatingForm.controls[key].markAsInvalid('Custom Error!');
        }));
    }
}
UpdatingFormExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'updating-form-example',
                template: "<button theme=\"secondary\" (click)=\"toggleEnabled()\">Toggle Enabled</button>\n<button theme=\"secondary\" (click)=\"toggleRequired()\">Toggle Required</button>\n<button theme=\"secondary\" (click)=\"markAsInvalid()\">Mark As Invalid</button>\n<br/><br/>\n<novo-dynamic-form layout=\"vertical\" [controls]=\"updatingFormControls\" [(form)]=\"updatingForm\" #updatingFormRef></novo-dynamic-form>\n<div class=\"final-value\">Valid: {{updatingFormRef.isValid | json}}</div>\n<div class=\"final-value\">Values: {{updatingFormRef.values | json}}</div>\n<div class=\"final-value\">Updated Values: {{updatingFormRef.updatedValues() | json}}</div>\n",
                styles: [""]
            }] }
];
/** @nocollapse */
UpdatingFormExample.ctorParameters = () => [
    { type: novo_elements__WEBPACK_IMPORTED_MODULE_3__["FormUtils"] }
];
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: form-controls/form/vertical-dynamic-form/vertical-dynamic-form-example.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@title Vertical Dynamic Form Example
 */
class VerticalDynamicFormExample {
    /**
     * @param {?} formUtils
     */
    constructor(formUtils) {
        this.formUtils = formUtils;
        // Dynamic
        this.dynamicVertical = formUtils.toControls(MockMeta, '$ USD', {}, { token: 'TOKEN', military: true });
        formUtils.setInitialValues(this.dynamicVertical, { number: 0, firstName: 'Bobby Flay' });
        this.dynamicVerticalForm = formUtils.toFormGroup(this.dynamicVertical);
    }
    /**
     * @param {?} form
     * @return {?}
     */
    save(form) {
        if (!form.isValid) {
            form.showOnlyRequired(true);
        }
        else {
            alert('SAVING');
        }
    }
}
VerticalDynamicFormExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'vertical-dynamic-form-example',
                template: "<button theme=\"secondary\" (click)=\"nomyform.showAllFields()\">Show All Fields</button>\n<button theme=\"secondary\" (click)=\"nomyform.showOnlyRequired(false)\">Show Required Fields</button>\n<novo-dynamic-form layout=\"vertical\" class=\"dynamic\" [controls]=\"dynamicVertical\" [(form)]=\"dynamicVerticalForm\" #nomyform>\n  <ng-template novoTemplate=\"custom-demo-component\" let-control let-form=\"form\">\n    <custom-demo-control-example [control]=\"control\" [form]=\"form\"></custom-demo-control-example>\n  </ng-template>\n</novo-dynamic-form>\n<div class=\"final-value\">Valid: {{nomyform.isValid | json}}</div>\n<div class=\"final-value\">Values: {{nomyform.values | json}}</div>\n<div class=\"final-value\">Updated Values: {{nomyform.updatedValues() | json}}</div>\n",
                styles: [""]
            }] }
];
/** @nocollapse */
VerticalDynamicFormExample.ctorParameters = () => [
    { type: novo_elements__WEBPACK_IMPORTED_MODULE_3__["FormUtils"] }
];
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: form-controls/multi-picker/basic-multi-picker/basic-multi-picker-example.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@title Basic Multi Picker Example
 */
class BasicMultiPickerExample {
    constructor() {
        this.placeholder = 'Select...';
        this.value = { states: ['Alabama'], collaborators: [1, 2, 3, 4] };
        this.types = [{ value: 'states', singular: 'state' }, { value: 'collaborators', singular: 'collaborator' }];
        /** @type {?} */
        const states = [
            'Alabama',
            'Alaska',
            'Arizona',
            'Arkansas',
            'California',
            'Colorado',
            'Connecticut',
            'Delaware',
            'Florida',
            'Georgia',
            'Hawaii',
            'Idaho',
            'Illinois',
            'Indiana',
            'Iowa',
            'Kansas',
            'Kentucky',
            'Louisiana',
            'Maine',
            'Maryland',
            'Massachusetts',
            'Michigan',
            'Minnesota',
            'Mississippi',
            'Missouri',
            'Montana',
            'Nebraska',
            'Nevada',
            'New Hampshire',
            'New Jersey',
            'New Mexico',
            'New York',
            'North Dakota',
            'North Carolina',
            'Ohio',
            'Oklahoma',
            'Oregon',
            'Pennsylvania',
            'Rhode Island',
            'South Carolina',
            'South Dakota',
            'Tennessee',
            'Texas',
            'Utah',
            'Vermont',
            'Virginia',
            'Washington',
            'West Virginia',
            'Wisconsin',
            'Wyoming',
        ];
        /** @type {?} */
        const collaborators = [
            {
                id: 1,
                firstName: 'Brian',
                lastName: 'Kimball',
            },
            {
                id: 2,
                firstName: 'Josh',
                lastName: 'Godi',
            },
            {
                id: 3,
                firstName: 'Alec',
                lastName: 'Sibilia',
            },
            {
                id: 4,
                firstName: 'Kameron',
                lastName: 'Sween',
            },
        ];
        this.staticDemo = {
            options: [
                { type: 'collaborators', data: collaborators, format: '$firstName $lastName', field: 'id' },
                { type: 'states', data: states },
            ],
            resultsTemplate: novo_elements__WEBPACK_IMPORTED_MODULE_3__["ChecklistPickerResults"],
            selectAllOption: true,
        };
    }
    /**
     * @param {?=} $event
     * @return {?}
     */
    onChanged($event) { }
}
BasicMultiPickerExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'basic-multi-picker-example',
                template: "<div class=\"selected-value\">Selected States: <span *ngFor=\"let item of value.states\">{{item}} </span>\n    Selected Collaborators: <span *ngFor=\"let item of value.collaborators\">{{item}} </span></div>\n<multi-picker\n    [source]=\"staticDemo\"\n    [placeholder]=\"placeholder\"\n    [types]=\"types\"\n    [(ngModel)]=\"value\"\n    (changed)=\"onChanged($event)\">\n</multi-picker>\n",
                styles: [""]
            }] }
];
/** @nocollapse */
BasicMultiPickerExample.ctorParameters = () => [];
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: form-controls/multi-picker/nested-multi-picker/nested-multi-picker-example.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@title Nested Multi Picker Example
 */
class NestedMultiPickerExample {
    constructor() {
        this.placeholder = 'Select...';
        /** @type {?} */
        const departments = [
            {
                id: 1,
                name: 'Sales',
            },
            {
                id: 2,
                name: 'Engineering',
            },
            {
                id: 3,
                name: 'Marketing',
            },
            {
                id: 4,
                name: 'Finance',
            },
            {
                id: 5,
                name: 'Nobody Works Here',
            },
        ];
        /** @type {?} */
        const users = [
            {
                id: 1,
                departments: [1, 2, 4],
                name: 'Bob Sales/Engineering/Fin',
            },
            {
                id: 2,
                departments: [4],
                name: 'Beth Fin',
            },
            {
                id: 3,
                departments: [2],
                name: 'Artemis Eng',
            },
            {
                id: 4,
                departments: [1],
                name: 'Andy Sales',
            },
            {
                id: 5,
                departments: [3],
                name: 'Zoe Marketing',
            },
            {
                id: 6,
                departments: [4, 2],
                name: 'Ziva Eng Fin',
            },
        ];
        this.parentChild = {
            options: [
                { type: 'departments', data: departments, format: '$name', field: 'id', isParentOf: 'users' },
                { type: 'users', data: users, format: '$name', field: 'id', isChildOf: 'departments' },
            ],
            resultsTemplate: novo_elements__WEBPACK_IMPORTED_MODULE_3__["ChecklistPickerResults"],
            selectAllOption: false,
            strictRelationship: false,
            chipsCount: 6,
        };
        this.parentChildTypes = [
            { value: 'departments', isParentOf: true, singular: 'department' },
            { value: 'users', isChildOf: true, singular: 'user' },
        ];
        this.parentChildValue = { departments: [2, 3, 4], users: [4, 5] };
    }
    /**
     * @param {?=} event
     * @return {?}
     */
    onChanged(event) { }
}
NestedMultiPickerExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'nested-multi-picker-example',
                template: "<div class=\"selected-value\">Selected Departments: <span *ngFor=\"let item of parentChildValue.departments\">{{item}} </span>\n    Selected Users: <span *ngFor=\"let item of parentChildValue.users\">{{item}} </span></div>\n<multi-picker\n    [source]=\"parentChild\"\n    [placeholder]=\"placeholder\"\n    [types]=\"parentChildTypes\"\n    [(ngModel)]=\"parentChildValue\"\n    (changed)=\"onChanged($event)\">\n</multi-picker>\n",
                styles: [""]
            }] }
];
/** @nocollapse */
NestedMultiPickerExample.ctorParameters = () => [];
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: form-controls/picker/async-picker/async-picker-example.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@title Async Picker Example
 */
class AsyncPickerExample {
    constructor() {
        this.placeholder = 'Select...';
        this.value = null;
        this.async = {
            enableInfiniteScroll: true,
            options: (/**
             * @param {?} term
             * @param {?} page
             * @return {?}
             */
            (term, page) => {
                return new Promise((/**
                 * @param {?} resolve
                 * @return {?}
                 */
                (resolve) => {
                    setTimeout((/**
                     * @return {?}
                     */
                    () => {
                        /** @type {?} */
                        const arr = [];
                        for (let i = 0; i < 20; i++) {
                            arr.push({ value: `Page: ${page} - Item: ${i + 1}`, label: `Page: ${page} - Item: ${i + 1}` });
                        }
                        resolve(arr);
                    }), 1000);
                }));
            }),
        };
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onChanged(event) {
        console.log('EVENT', event); // tslint:disable-line
    }
}
AsyncPickerExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'async-picker-example',
                template: "<div class=\"selected-value\">Selected Value: {{value}}</div>\n<novo-picker [config]=\"async\" [placeholder]=\"placeholder\" [(ngModel)]=\"value\"></novo-picker>\n",
                styles: [""]
            }] }
];
/** @nocollapse */
AsyncPickerExample.ctorParameters = () => [];
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: form-controls/picker/basic-picker/basic-picker-example.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@title Basic Picker Example
 */
class BasicPickerExample {
    constructor() {
        this.placeholder = 'Select...';
        this.staticDemo = {
            options: [
                'Alabama',
                'Alaska',
                'Arizona',
                'Arkansas',
                'California',
                'Colorado',
                'Connecticut',
                'Delaware',
                'Florida',
                'Georgia',
                'Hawaii',
                'Idaho',
                'Illinois',
                'Indiana',
                'Iowa',
                'Kansas',
                'Kentucky',
                'Louisiana',
                'Maine',
                'Maryland',
                'Massachusetts',
                'Michigan',
                'Minnesota',
                'Mississippi',
                'Missouri',
                'Montana',
                'Nebraska',
                'Nevada',
                'New Hampshire',
                'New Jersey',
                'New Mexico',
                'New York',
                'North Dakota',
                'North Carolina',
                'Ohio',
                'Oklahoma',
                'Oregon',
                'Pennsylvania',
                'Rhode Island',
                'South Carolina',
                'South Dakota',
                'Tennessee',
                'Texas',
                'Utah',
                'Vermont',
                'Virginia',
                'Washington',
                'West Virginia',
                'Wisconsin',
                'Wyoming',
            ],
        };
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onChanged(event) {
        console.log('EVENT', event); // tslint:disable-line
    }
}
BasicPickerExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'basic-picker-example',
                template: "<div class=\"selected-value\">Selected Value: {{value}}</div>\n<novo-picker [config]=\"staticDemo\" [placeholder]=\"placeholder\" [(ngModel)]=\"value\"></novo-picker>\n",
                styles: [""]
            }] }
];
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: form-controls/picker/custom-picker-results/custom-picker-results-example.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class CustomPickerResults extends novo_elements__WEBPACK_IMPORTED_MODULE_3__["PickerResults"] {
}
CustomPickerResults.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'custom-picker-results',
                host: {
                    class: 'active picker-results',
                },
                template: `
    <novo-loading theme="line" *ngIf="isLoading && !matches.length"></novo-loading>
    <novo-list *ngIf="matches.length > 0" direction="vertical">
      <novo-list-item
        *ngFor="let match of matches"
        (click)="selectMatch($event)"
        [class.active]="match === activeMatch"
        (mouseenter)="selectActive(match)">
        <item-content>
          **CUSTOM** <b [innerHtml]="highlight(match.label, term)"></b>
        </item-content>
      </novo-list-item>
    </novo-list>
    <p class="picker-error" *ngIf="hasError">Oops! An error occured.</p>
    <p class="picker-null" *ngIf="!isLoading && !matches.length && !hasError">No results to display...</p>
  `
            }] }
];
/**
 * \@title Custom Picker Results Example
 */
class CustomPickerResultsExample {
    constructor() {
        this.placeholder = 'Select...';
        /** @type {?} */
        const collaborators = [
            {
                id: 1,
                firstName: 'Brian',
                lastName: 'Kimball',
            },
            {
                id: 2,
                firstName: 'Josh',
                lastName: 'Godi',
            },
            {
                id: 3,
                firstName: 'Alec',
                lastName: 'Sibilia',
            },
            {
                id: 4,
                firstName: 'Kameron',
                lastName: 'Sween',
            },
        ];
        this.custom = {
            resultsTemplate: CustomPickerResults,
            format: '$firstName $lastName',
            options: collaborators,
        };
        this.value = null;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onChanged(event) {
        console.log('EVENT', event); // tslint:disable-line
    }
}
CustomPickerResultsExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'custom-picker-results-example',
                template: "<div class=\"selected-value\">Selected Value: {{value}}</div>\n<novo-picker [config]=\"custom\" [placeholder]=\"placeholder\" [(ngModel)]=\"value\"></novo-picker>\n",
                styles: [""]
            }] }
];
/** @nocollapse */
CustomPickerResultsExample.ctorParameters = () => [];
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: form-controls/picker/default-options-picker/default-options-picker-example.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@title Default Options Picker Example
 */
class DefaultOptionsPickerExample {
    constructor() {
        this.placeholder = 'Select...';
        /** @type {?} */
        const states = [
            'Alabama',
            'Alaska',
            'Arizona',
            'Arkansas',
            'California',
            'Colorado',
            'Connecticut',
            'Delaware',
            'Florida',
            'Georgia',
            'Hawaii',
            'Idaho',
            'Illinois',
            'Indiana',
            'Iowa',
            'Kansas',
            'Kentucky',
            'Louisiana',
            'Maine',
            'Maryland',
            'Massachusetts',
            'Michigan',
            'Minnesota',
            'Mississippi',
            'Missouri',
            'Montana',
            'Nebraska',
            'Nevada',
            'New Hampshire',
            'New Jersey',
            'New Mexico',
            'New York',
            'North Dakota',
            'North Carolina',
            'Ohio',
            'Oklahoma',
            'Oregon',
            'Pennsylvania',
            'Rhode Island',
            'South Carolina',
            'South Dakota',
            'Tennessee',
            'Texas',
            'Utah',
            'Vermont',
            'Virginia',
            'Washington',
            'West Virginia',
            'Wisconsin',
            'Wyoming',
        ];
        this.defaultArrayConfig = {
            defaultOptions: [states[0], states[1]],
            minSearchLength: 2,
            options: (/**
             * @return {?}
             */
            () => {
                return new Promise((/**
                 * @param {?} resolve
                 * @return {?}
                 */
                (resolve) => {
                    setTimeout((/**
                     * @return {?}
                     */
                    () => {
                        resolve(states);
                    }), 300);
                }));
            }),
        };
        this.defaultFunctionConfig = {
            minSearchLength: 2,
            defaultOptions: (/**
             * @return {?}
             */
            () => {
                return [states[2], states[3]];
            }),
            options: (/**
             * @return {?}
             */
            () => {
                return new Promise((/**
                 * @param {?} resolve
                 * @return {?}
                 */
                (resolve) => {
                    setTimeout((/**
                     * @return {?}
                     */
                    () => {
                        resolve(states);
                    }), 300);
                }));
            }),
        };
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onChanged(event) {
        console.log('EVENT', event); // tslint:disable-line
    }
}
DefaultOptionsPickerExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'default-options-picker-example',
                template: "<div class=\"selected-value\">Selected Value: {{defaultArrayValue}}</div>\n<novo-picker [config]=\"defaultArrayConfig\" [placeholder]=\"placeholder\" [(ngModel)]=\"defaultArrayValue\"></novo-picker>\n<br/><br/>\n<div class=\"selected-value\">Selected Value: {{defaultFunctionValue}}</div>\n<novo-picker [config]=\"defaultFunctionConfig\" [placeholder]=\"placeholder\" [(ngModel)]=\"defaultFunctionValue\"></novo-picker>\n",
                styles: [""]
            }] }
];
/** @nocollapse */
DefaultOptionsPickerExample.ctorParameters = () => [];
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: form-controls/picker/entity-picker/entity-picker-example.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@title Entity Picker Example
 */
class EntityPickerExample {
    constructor() {
        this.placeholder = 'Select...';
        /** @type {?} */
        const collaborators = [
            {
                id: 1,
                firstName: 'Brian',
                lastName: 'Kimball',
            },
            {
                id: 2,
                firstName: 'Josh',
                lastName: 'Godi',
            },
            {
                id: 3,
                firstName: 'Alec',
                lastName: 'Sibilia',
            },
            {
                id: 4,
                firstName: 'Kameron',
                lastName: 'Sween',
            },
        ];
        this.entityDemo = {
            options: collaborators,
            format: '$firstName $lastName',
            entityIcon: 'person',
        };
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onChanged(event) {
        console.log('EVENT', event); // tslint:disable-line
    }
}
EntityPickerExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'entity-picker-example',
                template: "<div class=\"selected-value\">Selected Value: {{entity}}</div>\n<novo-picker [config]=\"entityDemo\" [placeholder]=\"placeholder\" [(ngModel)]=\"entity\"></novo-picker>\n",
                styles: [""]
            }] }
];
/** @nocollapse */
EntityPickerExample.ctorParameters = () => [];
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: form-controls/picker/formatted-picker/formatted-picker-example.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@title Formatted Picker Example
 */
class FormattedPickerExample {
    constructor() {
        this.placeholder = 'Select...';
        /** @type {?} */
        const collaborators = [
            {
                id: 1,
                firstName: 'Brian',
                lastName: 'Kimball',
            },
            {
                id: 2,
                firstName: 'Josh',
                lastName: 'Godi',
            },
            {
                id: 3,
                firstName: 'Alec',
                lastName: 'Sibilia',
            },
            {
                id: 4,
                firstName: 'Kameron',
                lastName: 'Sween',
            },
        ];
        this.formatted = {
            field: 'id',
            format: `$firstName $lastName`,
            options: collaborators,
        };
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onChanged(event) {
        console.log('EVENT', event); // tslint:disable-line
    }
}
FormattedPickerExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'formatted-picker-example',
                template: "<div class=\"selected-value\">Selected Value: {{value}}</div>\n<novo-picker [config]=\"formatted\" [placeholder]=\"placeholder\" [(ngModel)]=\"value\"></novo-picker>\n",
                styles: [""]
            }] }
];
/** @nocollapse */
FormattedPickerExample.ctorParameters = () => [];
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: form-controls/picker/grouped-picker/grouped-picker-example.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@title Grouped Picker Example
 */
class GroupedPickerExample {
    constructor() {
        this.placeholder = 'Select...';
        this.setupGroupedPickerDemo();
    }
    /**
     * @return {?}
     */
    setupGroupedPickerDemo() {
        /** @type {?} */
        const categoryMap = new Map();
        for (let i = 0; i < 10; i++) {
            /** @type {?} */
            const items = [];
            for (let j = 0; j < 10; j++) {
                items.push({ value: `${i}-${j}`, label: `Category ${i} - Item ${j}` });
            }
            categoryMap.set(`${i}`, { value: `${i}`, label: `Category ${i}`, items });
        }
        /** @type {?} */
        const filterCategoryMap = new Map();
        for (let i = 0; i < 10; i++) {
            /** @type {?} */
            const items = [];
            for (let j = 0; j < 10; j++) {
                /** @type {?} */
                const filter = Math.random() >= 0.5;
                items.push({ value: `${i}-${j}`, label: `Category ${i} - Item ${j} - Data - ${filter}`, data: { filter } });
            }
            filterCategoryMap.set(`${i}`, { value: `${i}`, label: `Category ${i}`, items });
        }
        this.groupedPicker1 = {
            categoryMap,
            resultsTemplate: novo_elements__WEBPACK_IMPORTED_MODULE_3__["GroupedMultiPickerResults"],
            displayAll: true,
        };
        this.groupedPicker2 = {
            categoryMap,
            resultsTemplate: novo_elements__WEBPACK_IMPORTED_MODULE_3__["GroupedMultiPickerResults"],
        };
        this.groupedPicker3 = {
            categories: [
                { value: 'C1', label: 'Category 1' },
                { value: 'C2', label: 'Category 2' },
                { value: 'C3', label: 'Category 3' },
                { value: 'C4', label: 'Category 4' },
                { value: 'C5', label: 'Category 5' },
            ],
            getItemsForCategoryAsync: (/**
             * @param {?} category
             * @param {?} customFilter
             * @return {?}
             */
            (category, customFilter) => {
                return new Promise((/**
                 * @param {?} resolve
                 * @return {?}
                 */
                (resolve) => {
                    setTimeout((/**
                     * @return {?}
                     */
                    () => {
                        resolve([
                            { value: 'A1', label: 'Async 1' },
                            { value: 'A2', label: 'Async 2' },
                            { value: 'A3', label: 'Async 3' },
                            { value: 'A4', label: 'Async 4' },
                            { value: 'A5', label: 'Async 5' },
                        ]);
                    }), 1000);
                }));
            }),
            resultsTemplate: novo_elements__WEBPACK_IMPORTED_MODULE_3__["GroupedMultiPickerResults"],
        };
        this.groupedPicker4 = {
            entityIcon: 'company',
            categoryMap: filterCategoryMap,
            displayAll: true,
            placeholder: 'Filter things...',
            customFilter: {
                matchFunction: (/**
                 * @param {?} item
                 * @param {?} value
                 * @return {?}
                 */
                (item, value) => {
                    if (value) {
                        return item.data.filter === value;
                    }
                    return true;
                }),
                defaultFilterValue: false,
                label: 'Custom Filter!',
            },
            resultsTemplate: novo_elements__WEBPACK_IMPORTED_MODULE_3__["GroupedMultiPickerResults"],
        };
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onChanged(event) {
        console.log('EVENT', event); // tslint:disable-line
    }
}
GroupedPickerExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'grouped-picker-example',
                template: "<h6>Basic Static Example</h6>\n<p>Fully static data, optional \"all\" category</p>\n<div class=\"selected-value\">Selected Value: {{ groupedPicker1Value | json }}</div>\n<novo-picker [config]=\"groupedPicker1\" [placeholder]=\"placeholder\" [(ngModel)]=\"groupedPicker1Value\" (changed)=\"onChanged($event)\"></novo-picker>\n\n<br/>\n<br/>\n\n<h6>Custom Static Example</h6>\n<p>Fully static data, all category turned off</p>\n<div class=\"selected-value\">Selected Value: {{ groupedPicker2Value | json }}</div>\n<novo-picker [config]=\"groupedPicker2\" [placeholder]=\"placeholder\" [(ngModel)]=\"groupedPicker2Value\" (changed)=\"onChanged($event)\"></novo-picker>\n\n<br/>\n<br/>\n\n<h6>Basic Async Example</h6>\n<p>Category list is static (always has to be) with the items fetched via async call</p>\n<div class=\"selected-value\">Selected Value: {{ groupedPicker3Value | json }}</div>\n<novo-picker [config]=\"groupedPicker3\" [placeholder]=\"placeholder\" [(ngModel)]=\"groupedPicker3Value\" (changed)=\"onChanged($event)\"></novo-picker>\n<br/>\n<br/>\n\n<h6>Async Example w/ Custom Filter</h6>\n<p>You can also have a custom filter, limited to just a switch</p>\n<div class=\"selected-value\">Selected Value: {{ groupedPicker4Value | json }}</div>\n<novo-picker [config]=\"groupedPicker4\" [placeholder]=\"placeholder\" [(ngModel)]=\"groupedPicker4Value\" (changed)=\"onChanged($event)\"></novo-picker>\n",
                styles: [""]
            }] }
];
/** @nocollapse */
GroupedPickerExample.ctorParameters = () => [];
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: form-controls/picker/override-template/override-template-example.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@title Override Template Example
 */
class OverrideTemplateExample {
    constructor() {
        this.placeholder = 'Select...';
        /** @type {?} */
        const states = [
            'Alabama',
            'Alaska',
            'Arizona',
            'Arkansas',
            'California',
            'Colorado',
            'Connecticut',
            'Delaware',
            'Florida',
            'Georgia',
            'Hawaii',
            'Idaho',
            'Illinois',
            'Indiana',
            'Iowa',
            'Kansas',
            'Kentucky',
            'Louisiana',
            'Maine',
            'Maryland',
            'Massachusetts',
            'Michigan',
            'Minnesota',
            'Mississippi',
            'Missouri',
            'Montana',
            'Nebraska',
            'Nevada',
            'New Hampshire',
            'New Jersey',
            'New Mexico',
            'New York',
            'North Dakota',
            'North Carolina',
            'Ohio',
            'Oklahoma',
            'Oregon',
            'Pennsylvania',
            'Rhode Island',
            'South Carolina',
            'South Dakota',
            'Tennessee',
            'Texas',
            'Utah',
            'Vermont',
            'Virginia',
            'Washington',
            'West Virginia',
            'Wisconsin',
            'Wyoming',
        ];
        this.overrideDemo = {
            options: states,
            overrideTemplate: '<h1>{{ match | json }}</h1>',
        };
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onChanged(event) {
        console.log('EVENT', event); // tslint:disable-line
    }
}
OverrideTemplateExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'override-template-example',
                template: "<div class=\"selected-value\">Selected Value: {{ overrideValue }}</div>\n<novo-picker [config]=\"overrideDemo\" [placeholder]=\"placeholder\" [(ngModel)]=\"overrideValue\"></novo-picker>\n",
                styles: [""]
            }] }
];
/** @nocollapse */
OverrideTemplateExample.ctorParameters = () => [];
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: form-controls/radio-buttons/basic-radio/basic-radio-example.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@title Basic Radio Button Usage
 */
class BasicRadioExample {
    /**
     * @param {?} change
     * @return {?}
     */
    onChange(change) {
        console.log('Radio Change:', change); // tslint:disable-line
    }
}
BasicRadioExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'basic-radio-example',
                template: "<novo-radio [checked]=\"false\" name=\"basic\" value=\"one\" (change)=\"onChange($event)\">Make me anything!</novo-radio>\n<novo-radio [checked]=\"true\" name=\"basic\" value=\"two\" (change)=\"onChange($event)\">I get transcluded in!</novo-radio>\n<novo-radio [checked]=\"false\" name=\"basic\" value=\"three\" (change)=\"onChange($event)\">REALLY!</novo-radio>\n",
                styles: [""]
            }] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: form-controls/radio-buttons/button-radio/button-radio-example.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@title Radio Button with Buttons
 */
class ButtonRadioExample {
    /**
     * @param {?} change
     * @return {?}
     */
    onChange(change) {
        console.log('Radio Change:', change); // tslint:disable-line
    }
}
ButtonRadioExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'button-radio-example',
                template: "<novo-radio-group>\n    <novo-radio button=\"true\" [checked]=\"false\" name=\"button\" value=\"one\" (change)=\"onChange($event)\" label=\"One\"></novo-radio>\n    <novo-radio button=\"true\" [checked]=\"true\" name=\"button\" value=\"two\" (change)=\"onChange($event)\" label=\"Two\"></novo-radio>\n    <novo-radio button=\"true\" [checked]=\"false\" name=\"button\" value=\"three\" (change)=\"onChange($event)\" label=\"Three\"></novo-radio>\n</novo-radio-group>\n",
                styles: [""]
            }] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: form-controls/radio-buttons/icon-radio/icon-radio-example.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@title Radio Buttons with Icons
 */
class IconRadioExample {
    /**
     * @param {?} change
     * @return {?}
     */
    onChange(change) {
        console.log('Radio Change:', change); // tslint:disable-line
    }
}
IconRadioExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'icon-radio-example',
                template: "<novo-radio-group>\n    <novo-radio button=\"true\" theme=\"icon\" icon=\"checkbox-filled\" name=\"icon\" value=\"one\" (change)=\"onChange($event)\"></novo-radio>\n    <novo-radio button=\"true\" theme=\"icon\" icon=\"checkbox-indeterminate\" name=\"icon\" value=\"two\" (change)=\"onChange($event)\"></novo-radio>\n    <novo-radio button=\"true\" theme=\"icon\" icon=\"checkbox-add\" name=\"icon\" value=\"three\" (change)=\"onChange($event)\"></novo-radio>\n</novo-radio-group>\n",
                styles: [""]
            }] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: form-controls/radio-buttons/vertical-radio/vertical-radio-example.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@title Vertical Radio Buttons
 */
class VerticalRadioExample {
    /**
     * @param {?} change
     * @return {?}
     */
    onChange(change) {
        console.log('Radio Change:', change); // tslint:disable-line
    }
}
VerticalRadioExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'vertical-radio-example',
                template: "<novo-radio vertical=\"true\" [checked]=\"false\" name=\"vertical\" value=\"one\" (change)=\"onChange($event)\">Make me anything!</novo-radio>\n<novo-radio vertical=\"true\" [checked]=\"true\" name=\"vertical\" value=\"two\" (change)=\"onChange($event)\">I get transcluded in!</novo-radio>\n<novo-radio vertical=\"true\" [checked]=\"false\" name=\"vertical\" value=\"three\" (change)=\"onChange($event)\">REALLY!</novo-radio>\n",
                styles: [""]
            }] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: form-controls/select/basic-select/basic-select-example.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@title Basic Select Example
 */
class BasicSelectExample {
    constructor() {
        this.placeholder = 'Select...';
        this.options = ['Alpha', 'Bravo', 'Charlie'];
        this.withNumbers = [
            { label: 'One', value: 1 },
            { label: 'Two', value: 2 },
            { label: 'Zero', value: 0 },
            { label: 'Four', value: 4, readOnly: true },
        ];
        this.withNumbersValue = 4;
        this.value = 'Bravo';
        this.headerConfig = {
            label: 'Add New Item',
            placeholder: 'Enter item here',
            onSave: this.create.bind(this),
        };
    }
    /**
     * @param {?} opt
     * @return {?}
     */
    create(opt) {
        this.options = [...this.options, opt];
    }
}
BasicSelectExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'basic-select-example',
                template: "<div>\n    <label>\n        <span class=\"caption\">Selected Value:</span> {{value}}\n    </label>\n    <novo-select [options]=\"options\" [placeholder]=\"placeholder\" [(ngModel)]=\"value\"></novo-select>\n</div>\n<div>\n    <label>\n        <span class=\"caption\">Selected Value:</span> {{withNumbersValue}}\n    </label>\n    <novo-select [options]=\"withNumbers\" [(ngModel)]=\"withNumbersValue\"></novo-select>\n</div>\n<div>\n    <label>\n        <span class=\"caption\">Disabled State</span>\n    </label>\n    <novo-select [options]=\"options\" [placeholder]=\"placeholder\" [(ngModel)]=\"value\" disabled></novo-select>\n</div>\n<div>\n    <label>\n        <span class=\"caption\">No Model With Header</span>\n    </label>\n    <novo-select [options]=\"options\" [placeholder]=\"placeholder\" [headerConfig]=\"headerConfig\"></novo-select>\n</div>\n",
                styles: [":host{padding:20px 30px;border-top-right-radius:3px;border-top-left-radius:3px;display:flex;flex-direction:row;flex-shrink:0;flex-grow:0;align-items:flex-start;flex-wrap:wrap;transition:background 460ms ease-in-out}:host label{margin-bottom:10px;display:block}:host .caption{font-size:.9em;margin-right:5px}"]
            }] }
];
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: form-controls/select/long-select/long-select-example.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@title Long Select Example
 */
class LongSelectExample {
    constructor() {
        this.placeholder = 'Select...';
        this.states = [
            'Alabama',
            'Alaska',
            'Arizona',
            'Arkansas',
            'California',
            'Colorado',
            'Connecticut',
            'Delaware',
            'Florida',
            'Georgia',
            'Hawaii',
            'Idaho',
            'Illinois',
            'Indiana',
            'Iowa',
            'Kansas',
            'Kentucky',
            'Louisiana',
            'Maine',
            'Maryland',
            'Massachusetts',
            'Michigan',
            'Minnesota',
            'Mississippi',
            'Missouri',
            'Montana',
            'Nebraska',
            'Nevada',
            'New Hampshire',
            'New Jersey',
            'New Mexico',
            'New York',
            'North Dakota',
            'North Carolina',
            'Ohio',
            'Oklahoma',
            'Oregon',
            'Pennsylvania',
            'Rhode Island',
            'South Carolina',
            'South Dakota',
            'Tennessee',
            'Texas',
            'Utah',
            'Vermont',
            'Virginia',
            'Washington',
            'West Virginia',
            'Wisconsin',
            'Wyoming',
        ];
        this.state = 'Missouri';
    }
}
LongSelectExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'long-select-example',
                template: "<div>\n    <label><span class=\"caption\">Selected Value:</span>{{state}}</label>\n    <novo-select [options]=\"states\" [placeholder]=\"placeholder\" [(ngModel)]=\"state\"></novo-select>\n</div>\n",
                styles: [""]
            }] }
];
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: form-controls/tiles/tiles-usage/tiles-usage-example.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@title Tiles Usage Example
 */
class TilesUsageExample {
    constructor() {
        this.shown = false;
        this.demoTiles = [
            {
                label: 'Red',
                value: 'red',
            },
            {
                label: 'Green',
                value: 'green',
            },
            {
                label: 'Disabled',
                value: 'disabled',
                disabled: true,
            },
        ];
        this.value = 'red';
    }
    /**
     * @param {?} newColorValue
     * @return {?}
     */
    colorSelect(newColorValue) {
        this.currentColor = newColorValue;
    }
    /**
     * @param {?} tile
     * @return {?}
     */
    disabledClicked(tile) {
        console.log('Disabled tile clicked: ', tile); // tslint:disable-line
    }
    /**
     * @param {?} tile
     * @return {?}
     */
    selectedClicked(tile) {
        console.log('Selected tile clicked: ', tile); // tslint:disable-line
    }
    /**
     * @return {?}
     */
    toggleShown() {
        this.shown = !this.shown;
    }
    /**
     * @return {?}
     */
    addTile() {
        this.demoTiles.push({
            label: 'Blue',
            value: 'blue',
        });
        this.demoTiles = [...this.demoTiles];
    }
}
TilesUsageExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'tiles-usage-example',
                template: "<novo-tiles [options]=\"demoTiles\" (onChange)=\"colorSelect($event)\" [(ngModel)]=\"value\"\n            (onDisabledOptionClick)=\"disabledClicked($event)\"\n            (onSelectedOptionClick)=\"selectedClicked($event)\"></novo-tiles>\n<hr>\n<button theme=\"primary\" type=\"button\" name=\"button\" (click)=\"toggleShown()\">Show Tiles</button>\n<button theme=\"primary\" type=\"button\" name=\"button\" (click)=\"addTile()\">Add Tile</button>\n<br/>\n<br/>\n<novo-tiles *ngIf=\"shown\" [options]=\"demoTiles\" (onChange)=\"colorSelect($event)\" [(ngModel)]=\"value\"></novo-tiles>\n\nYou have picked (output): <strong>{{ currentColor || 'No selection' }}</strong>\nYou have picked (ngModel): <strong>{{ value || 'No selection' }}</strong>\n",
                styles: [""]
            }] }
];
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: form-controls/value/address-value/address-value-example.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@title Address Value Example
 */
class AddressValueExample {
    constructor() {
        this.theme = novo_elements__WEBPACK_IMPORTED_MODULE_3__["NOVO_VALUE_THEME"].DEFAULT;
        this.data = {
            address1: '100 Summer Street',
            city: 'Boston',
            state: 'MA',
            zip: '02143',
            country: {
                name: 'United States',
            },
        };
        this.meta = {
            dataType: 'Address',
            type: 'Address',
            label: 'Address',
            name: 'address',
        };
    }
}
AddressValueExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'address-value-example',
                template: "<novo-value [data]=\"data\" [meta]=\"meta\" [theme]=\"theme\"></novo-value>\n",
                styles: [""]
            }] }
];
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: form-controls/value/associated-value/associated-value-example.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@title Associated Value Example
 */
class AssociatedValueExample {
    constructor() {
        this.theme = novo_elements__WEBPACK_IMPORTED_MODULE_3__["NOVO_VALUE_THEME"].DEFAULT;
        this.data = {
            id: 1,
            firstName: 'Alice',
            lastName: 'Wonderland',
        };
        this.meta = {
            type: 'TO_ONE',
            name: 'owner',
            label: 'Owner',
            associatedEntity: {
                entity: 'CorporateUser',
            },
        };
    }
}
AssociatedValueExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'associated-value-example',
                template: "<novo-value [data]=\"data\" [meta]=\"meta\" [theme]=\"theme\"></novo-value>\n",
                styles: [""]
            }] }
];
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: form-controls/value/basic-value/basic-value-example.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@title Basic Value Example
 */
class BasicValueExample {
    constructor() {
        this.theme = novo_elements__WEBPACK_IMPORTED_MODULE_3__["NOVO_VALUE_THEME"].MOBILE;
        this.data = 1234567890;
        this.meta = {
            type: 'SCALAR',
            name: 'phone1',
            label: 'PH #',
        };
    }
}
BasicValueExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'basic-value-example',
                template: "<novo-value [data]=\"data\" [meta]=\"meta\" [theme]=\"theme\"></novo-value>\n",
                styles: [""]
            }] }
];
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: form-controls/value/category-value/category-value-example.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@title Category Value Example
 */
class CategoryValueExample {
    constructor() {
        this.theme = novo_elements__WEBPACK_IMPORTED_MODULE_3__["NOVO_VALUE_THEME"].DEFAULT;
        this.data = {
            value: 'stuff',
            label: 'Stuff Category',
        };
        this.meta = {
            type: 'TO_ONE',
            name: 'category',
            label: 'Category',
            associatedEntity: {
                entity: 'Category',
            },
        };
    }
}
CategoryValueExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'category-value-example',
                template: "<novo-value [data]=\"data\" [meta]=\"meta\" [theme]=\"theme\"></novo-value>\n",
                styles: [""]
            }] }
];
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: form-controls/value/corporate-user-value/corporate-user-value-example.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@title Corporate User Value Example
 */
class CorporateUserValueExample {
    constructor() {
        this.theme = novo_elements__WEBPACK_IMPORTED_MODULE_3__["NOVO_VALUE_THEME"].DEFAULT;
        this.data = {
            id: 123,
            firstName: 'Jack',
            lastName: 'White',
        };
        this.meta = {
            type: 'TO_ONE',
            name: 'user',
            label: 'Internal User',
            associatedEntity: {
                entity: 'CorporateUser',
            },
        };
    }
}
CorporateUserValueExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'corporate-user-value-example',
                template: "<novo-value [data]=\"data\" [meta]=\"meta\" [theme]=\"theme\"></novo-value>\n",
                styles: [""]
            }] }
];
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: form-controls/value/date-time-value/date-time-value-example.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@title Date Time Value Example
 */
class DateTimeValueExample {
    constructor() {
        this.theme = novo_elements__WEBPACK_IMPORTED_MODULE_3__["NOVO_VALUE_THEME"].DEFAULT;
        this.data = new Date().getTime();
        this.meta = {
            type: 'SCALAR',
            dataSpecialization: 'DATETIME',
            label: 'Date',
        };
    }
}
DateTimeValueExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'date-time-value-example',
                template: "<novo-value [data]=\"data\" [meta]=\"meta\" [theme]=\"theme\"></novo-value>\n",
                styles: [""]
            }] }
];
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: form-controls/value/entity-list-value/entity-list-value-example.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@title Entity List Value Example
 */
class EntityListValueExample {
    constructor() {
        this.theme = novo_elements__WEBPACK_IMPORTED_MODULE_3__["NOVO_VALUE_THEME"].DEFAULT;
        this.data = {
            data: [
                {
                    id: 1,
                    firstName: 'George',
                    lastName: 'Washington',
                    personSubtype: 'Candidate',
                    openLink: (/**
                     * @param {?} data
                     * @return {?}
                     */
                    (data) => { }),
                },
                {
                    id: 2,
                    firstName: 'John',
                    lastName: 'Adams',
                    personSubtype: 'ClientContact',
                    openLink: (/**
                     * @param {?} data
                     * @return {?}
                     */
                    (data) => { }),
                },
                {
                    id: 3,
                    firstName: 'Abraham',
                    lastName: 'Lincoln',
                    personSubtype: 'Lead',
                    openLink: (/**
                     * @param {?} data
                     * @return {?}
                     */
                    (data) => { }),
                },
            ],
        };
        this.meta = {
            type: 'TO_MANY',
            name: 'guests',
            label: 'Attendees',
            associatedEntity: {
                entity: 'CorporateUser',
            },
        };
    }
}
EntityListValueExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'entity-list-value-example',
                template: "<novo-value [data]=\"data\" [meta]=\"meta\" [theme]=\"theme\"></novo-value>\n",
                styles: [""]
            }] }
];
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: form-controls/value/external-link-value/external-link-value-example.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@title Value with Extenal Links Example
 */
class ExternalLinkValueExample {
    constructor() {
        this.theme = novo_elements__WEBPACK_IMPORTED_MODULE_3__["NOVO_VALUE_THEME"].MOBILE;
        this.data = 'www.bullhorn.com';
        this.meta = {
            type: 'SCALAR',
            name: 'companyUrl',
            label: 'Company URL',
        };
    }
}
ExternalLinkValueExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'external-link-value-example',
                template: "<novo-value [data]=\"data\" [meta]=\"meta\" [theme]=\"theme\"></novo-value>\n",
                styles: [""]
            }] }
];
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: form-controls/value/formatter-value/formatter-value-example.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@title Formatter Value Example
 */
class FormatterValueExample {
    constructor() {
        this.theme = novo_elements__WEBPACK_IMPORTED_MODULE_3__["NOVO_VALUE_THEME"].DEFAULT;
        this.data = {
            id: 123,
        };
        this.meta = {
            type: 'SCALAR',
            name: 'Placement',
            label: 'Placement',
            associatedEntity: {
                entity: 'Placement',
            },
            showEntityIcon: true,
            entityIconClass: 'candidate',
            formatter: (/**
             * @param {?} value
             * @param {?} args
             * @return {?}
             */
            (value, args) => {
                return `${args.label} #${(value && value.id) || ''}`;
            }),
        };
    }
}
FormatterValueExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'formatter-value-example',
                template: "<novo-value [data]=\"data\" [meta]=\"meta\" [theme]=\"theme\"></novo-value>\n",
                styles: [""]
            }] }
];
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: form-controls/value/icon-value/icon-value-example.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@title Icon Value Example
 */
class IconValueExample {
    constructor() {
        this.theme = novo_elements__WEBPACK_IMPORTED_MODULE_3__["NOVO_VALUE_THEME"].DEFAULT;
        this.data = 'Approved';
        this.meta = {
            type: 'SCALAR',
            options: [
                {
                    value: 'Approved',
                    label: 'Approved',
                },
            ],
            name: 'status',
            label: 'Status',
            icons: [
                {
                    iconCls: 'next',
                    onIconClick: (/**
                     * @param {?} data
                     * @param {?} meta
                     * @return {?}
                     */
                    (data, meta) => window.alert('hey there')),
                },
                {
                    iconCls: 'close',
                    onIconClick: (/**
                     * @param {?} data
                     * @param {?} meta
                     * @return {?}
                     */
                    (data, meta) => window.alert('hey there')),
                },
            ],
        };
    }
}
IconValueExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'icon-value-example',
                template: "<novo-value [data]=\"data\" [meta]=\"meta\" [theme]=\"theme\"></novo-value>\n",
                styles: [""]
            }] }
];
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: form-controls/value/multi-option-value/multi-option-value-example.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@title Multi Option Value Example
 */
class MultiOptionValueExample {
    constructor() {
        this.theme = novo_elements__WEBPACK_IMPORTED_MODULE_3__["NOVO_VALUE_THEME"].DEFAULT;
        this.data = ['1', '3'];
        this.meta = {
            name: 'status',
            label: 'Status',
            inputType: 'SELECT',
            options: [
                { label: 'New Lead', value: '1' },
                { label: 'Old Lead', value: '2' },
                { label: 'Active', value: '3' },
                { label: 'Archived', value: '4' },
            ],
        };
    }
}
MultiOptionValueExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'multi-option-value-example',
                template: "<novo-value [data]=\"data\" [meta]=\"meta\" [theme]=\"theme\"></novo-value>\n",
                styles: [""]
            }] }
];
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: layouts/cards/basic-card/basic-card-example.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@title Basic Cards
 */
class BasicCardExample {
    /**
     * @param {?} toaster
     */
    constructor(toaster) {
        this.toaster = toaster;
        // Config for demos
        this.refresh = true;
        this.close = true;
        this.move = true;
        this.padding = true;
        this.loading = true;
        this.start = 2000;
        this.end = 2005;
        this.created = 1995;
        this.bestLabel = 'BEST TIME TO CONTACT';
        this.bestTime = '1-PM';
        this.bestDay = 'Friday';
        this.donutValue = 0.5;
        this.donutColor = '#662255';
        this.donutLabel = 'Probability of Win %';
    }
    /**
     * @return {?}
     */
    onClose() {
        this.toaster.alert({
            theme: 'info',
            title: 'Cards',
            message: 'Close Clicked!',
        });
    }
    /**
     * @return {?}
     */
    onRefresh() {
        this.toaster.alert({
            theme: 'success',
            title: 'Cards',
            message: 'Refresh Clicked!',
        });
    }
    /**
     * @return {?}
     */
    toggleLoading() {
        this.loading = !this.loading;
    }
    /**
     * @return {?}
     */
    toggleMessage() {
        if (!this.message) {
            this.message = 'NO DATA!';
            this.messageIcon = 'email';
        }
        else {
            this.message = undefined;
        }
    }
    /**
     * @return {?}
     */
    singleAction() {
        window.alert('HELLO!');
    }
}
BasicCardExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'basic-card-example',
                template: "<novo-card [title]=\"'All Attributes'\"\n           icon=\"activity\"\n           [loading]=\"loading\"\n           [message]=\"message\"\n           [messageIcon]=\"messageIcon\"\n           [refresh]=\"refresh\"\n           [move]=\"move\"\n           [close]=\"close\"\n           (onRefresh)=\"onRefresh()\"\n           (onClose)=\"onClose()\"\n           [padding]=\"padding\">\n    This is the ALL attribute card content!\n</novo-card>\n",
                styles: [""]
            }] }
];
/** @nocollapse */
BasicCardExample.ctorParameters = () => [
    { type: novo_elements__WEBPACK_IMPORTED_MODULE_3__["NovoToastService"] }
];
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: layouts/cards/card-config/card-config-example.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@title Full Configuration Cards
 */
class CardConfigExample {
    /**
     * @param {?} toaster
     */
    constructor(toaster) {
        this.toaster = toaster;
        // Config for demos
        this.refresh = true;
        this.close = true;
        this.move = true;
        this.padding = true;
        this.loading = true;
        this.fullConfig = {
            refresh: false,
            icon: 'email',
            messageIcon: 'email',
            close: false,
            move: true,
            onClose: this.onClose.bind(this),
            onRefresh: this.onRefresh.bind(this),
            title: 'Test',
            loading: false,
            padding: true,
        };
        this.start = 2000;
        this.end = 2005;
        this.created = 1995;
        this.bestLabel = 'BEST TIME TO CONTACT';
        this.bestTime = '1-PM';
        this.bestDay = 'Friday';
        this.donutValue = 0.5;
        this.donutColor = '#662255';
        this.donutLabel = 'Probability of Win %';
    }
    /**
     * @return {?}
     */
    onClose() {
        this.toaster.alert({
            theme: 'info',
            title: 'Cards',
            message: 'Close Clicked!',
        });
    }
    /**
     * @return {?}
     */
    onRefresh() {
        this.toaster.alert({
            theme: 'success',
            title: 'Cards',
            message: 'Refresh Clicked!',
        });
    }
    /**
     * @return {?}
     */
    toggleLoading() {
        this.loading = !this.loading;
    }
    /**
     * @return {?}
     */
    toggleMessage() {
        if (!this.message) {
            this.message = 'NO DATA!';
            this.messageIcon = 'email';
        }
        else {
            this.message = undefined;
        }
    }
    /**
     * @return {?}
     */
    toggleLoadingConfig() {
        this.fullConfig.loading = !this.fullConfig.loading;
    }
    /**
     * @return {?}
     */
    toggleMessageConfig() {
        if (!this.fullConfig.message) {
            this.fullConfig.message = 'NO DATA!';
        }
        else {
            this.fullConfig.message = undefined;
        }
    }
    /**
     * @return {?}
     */
    singleAction() {
        window.alert('HELLO!');
    }
}
CardConfigExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'card-config-example',
                template: "<novo-card [config]=\"fullConfig\">\n  <novo-card-actions>\n      <button theme=\"icon\" icon=\"info\" (click)=\"singleAction()\"></button>\n  </novo-card-actions>\n  DEMO :)\n</novo-card>\n",
                styles: [""]
            }] }
];
/** @nocollapse */
CardConfigExample.ctorParameters = () => [
    { type: novo_elements__WEBPACK_IMPORTED_MODULE_3__["NovoToastService"] }
];
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: layouts/expansion/accordion/accordion-example.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@title Accordion Example
 */
class AccordionExample {
}
AccordionExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'accordion-example',
                template: "<novo-accordion>\n  <novo-expansion-panel>\n    <novo-expansion-panel-header>\n      This is the expansion 1 title\n    </novo-expansion-panel-header>\n    <p>This the expansion 1 content</p>\n  </novo-expansion-panel>\n\n  <novo-expansion-panel>\n    <novo-expansion-panel-header>\n      This is the expansion 2 title\n    </novo-expansion-panel-header>\n    <p>This the expansion 2 content</p>\n  </novo-expansion-panel>\n</novo-accordion>\n",
                styles: [""]
            }] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: layouts/expansion/basic-expansion/basic-expansion-example.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@title Dialogue buttons
 */
class BasicExpansionExample {
    constructor() {
        this.isDisabled = false;
    }
}
BasicExpansionExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'basic-expansion-example',
                template: "<novo-expansion-panel [disabled]=\"isDisabled\">\n  <novo-expansion-panel-header>\n    <novo-panel-title>\n      This is the expansion title\n    </novo-panel-title>\n    <novo-panel-description>\n      This is a summary of the content\n    </novo-panel-description>\n  </novo-expansion-panel-header>\n  <p>This is the primary content of the panel.</p>\n</novo-expansion-panel>\n<div>\n  <span>Is Disabled?</span>\n  <novo-switch theme=\"grapefruit\" [(ngModel)]=\"isDisabled\"></novo-switch>\n</div>\n",
                styles: [""]
            }] }
];
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: layouts/expansion/lazy-expansion/lazy-expansion-example.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@title Lazy Instaniated Content with Expansion
 */
class LazyExpansionExample {
}
LazyExpansionExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'lazy-expansion-example',
                template: "<novo-expansion-panel>\n    <novo-expansion-panel-header>\n      This is the expansion title\n    </novo-expansion-panel-header>\n\n    <ng-template matExpansionPanelContent>\n      Some deferred content\n    </ng-template>\n</novo-expansion-panel>\n",
                styles: [""]
            }] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: layouts/header/basic-header/basic-header-example.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const HEADER_THEMES = ['company', 'job', 'candidate', 'contact', 'opportunity', 'lead', 'light', 'white'];
/** @type {?} */
const HEADER_ICONS = ['company', 'job', 'candidate', 'person', 'opportunity', 'lead', 'bolt', 'shield'];
/**
 * \@title Basic Header Example
 */
class BasicHeaderExample {
    /**
     * @param {?} toaster
     */
    constructor(toaster) {
        this.toaster = toaster;
        this.theme = 'company';
        this.icon = 'company';
        this.themeIndex = 0;
        this.toaster = toaster;
        this.options = {
            title: 'Title',
            message: 'Some Message...',
            theme: 'ocean',
            icon: 'clipboard',
            position: 'growlTopRight',
        };
    }
    /**
     * @return {?}
     */
    changeTheme() {
        this.themeIndex = this.themeIndex === HEADER_THEMES.length - 1 ? 0 : this.themeIndex + 1;
        this.theme = HEADER_THEMES[this.themeIndex];
        this.icon = HEADER_ICONS[this.themeIndex];
    }
    /**
     * @param {?} type
     * @param {?} ev
     * @return {?}
     */
    catchEv(type, ev) {
        // Set toast options
        this.options = {
            title: `${type}`,
            message: `${ev} fired...`,
            theme: 'ocean',
            icon: `${type}`,
            position: 'growlTopRight',
        };
        // Fire toast
        this.toaster.alert(this.options);
    }
}
BasicHeaderExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'basic-header-example',
                template: "<header title=\"John Deere\" [icon]=\"icon\" [theme]=\"theme\">\n  <utils>\n    <util-action icon=\"convert\" tooltip=\"Change Theme\" (click)=\"changeTheme()\"></util-action>\n    <util-action icon=\"refresh\" tooltip=\"Show Popup\" (click)=\"catchEv('refresh', $event)\"></util-action>\n    <util-action icon=\"times\" tooltip=\"Show Popup\" (click)=\"catchEv('close', $event)\"></util-action>\n  </utils>\n  <section>\n    Extra Info\n  </section>\n  <novo-nav theme=\"color\" direction=\"horizontal\">\n    <novo-tab>\n      <span>Overview</span>\n    </novo-tab>\n    <novo-tab>\n      <span>Activity</span>\n    </novo-tab>\n    <novo-tab>\n      <span>Email</span>\n    </novo-tab>\n  </novo-nav>\n</header>\n",
                styles: [""]
            }] }
];
/** @nocollapse */
BasicHeaderExample.ctorParameters = () => [
    { type: novo_elements__WEBPACK_IMPORTED_MODULE_3__["NovoToastService"] }
];
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: layouts/header/condensed-header/condensed-header-example.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const HEADER_THEMES$1 = ['company', 'job', 'candidate', 'contact', 'opportunity', 'lead', 'light', 'white'];
/** @type {?} */
const HEADER_ICONS$1 = ['company', 'job', 'candidate', 'person', 'opportunity', 'lead', 'bolt', 'shield'];
/**
 * \@title Condensed Header Example
 */
class CondensedHeaderExample {
    /**
     * @param {?} toaster
     */
    constructor(toaster) {
        this.toaster = toaster;
        this.theme = 'company';
        this.icon = 'company';
        this.themeIndex = 0;
        this.toaster = toaster;
        this.options = {
            title: 'Title',
            message: 'Some Message...',
            theme: 'ocean',
            icon: 'clipboard',
            position: 'growlTopRight',
        };
    }
    /**
     * @return {?}
     */
    changeTheme() {
        this.themeIndex = this.themeIndex === HEADER_THEMES$1.length - 1 ? 0 : this.themeIndex + 1;
        this.theme = HEADER_THEMES$1[this.themeIndex];
        this.icon = HEADER_ICONS$1[this.themeIndex];
    }
    /**
     * @param {?} type
     * @param {?} ev
     * @return {?}
     */
    catchEv(type, ev) {
        // Set toast options
        this.options = {
            title: `${type}`,
            message: `${ev} fired...`,
            theme: 'ocean',
            icon: `${type}`,
            position: 'growlTopRight',
        };
        // Fire toast
        this.toaster.alert(this.options);
    }
}
CondensedHeaderExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'condensed-header-example',
                template: "<header [theme]=\"theme\" [condensed]=\"true\">\n  <utils>\n    <util-action icon=\"convert\" tooltip=\"Change Theme\" (click)=\"changeTheme()\"></util-action>\n    <util-action icon=\"refresh\" tooltip=\"Show Popup\" (click)=\"catchEv('refresh', $event)\"></util-action>\n    <util-action icon=\"times\" tooltip=\"Show Popup\" (click)=\"catchEv('close', $event)\"></util-action>\n  </utils>\n  <novo-icon [theme]=\"theme\" [name]=\"icon\" [raised]=\"true\">{{icon}}</novo-icon>\n  <div class=\"entity-header\" novo-title>\n    <span class=\"id\">123456</span>\n    <header-spacer></header-spacer>\n    <span class=\"name\">Steve Jobs</span>\n    <header-spacer></header-spacer>\n    <span class=\"links\">\n            <button theme=\"icon\" [icon]=\"'google'\"></button>\n            <button theme=\"icon\" [icon]=\"'linkedin-f'\"></button>\n            <button theme=\"icon\" [icon]=\"'location'\"></button>\n        </span>\n  </div>\n  <novo-nav theme=\"white\" direction=\"horizontal\" [condensed]=\"true\">\n    <novo-tab>\n      <span>Overview</span>\n    </novo-tab>\n    <novo-tab>\n      <span>Activity</span>\n    </novo-tab>\n    <novo-tab>\n      <span>Email</span>\n    </novo-tab>\n  </novo-nav>\n</header>\n",
                styles: [""]
            }] }
];
/** @nocollapse */
CondensedHeaderExample.ctorParameters = () => [
    { type: novo_elements__WEBPACK_IMPORTED_MODULE_3__["NovoToastService"] }
];
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: layouts/header/header-searchbar/header-searchbar-example.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const HEADER_THEMES$2 = ['company', 'job', 'candidate', 'contact', 'opportunity', 'lead', 'light', 'white'];
/** @type {?} */
const HEADER_ICONS$2 = ['company', 'job', 'candidate', 'person', 'opportunity', 'lead', 'bolt', 'shield'];
/**
 * \@title Header with SearchBar Example
 */
class HeaderSearchbarExample {
    /**
     * @param {?} toaster
     */
    constructor(toaster) {
        this.toaster = toaster;
        this.theme = 'company';
        this.icon = 'company';
        this.themeIndex = 0;
        this.toaster = toaster;
        this.options = {
            title: 'Title',
            message: 'Some Message...',
            theme: 'ocean',
            icon: 'clipboard',
            position: 'growlTopRight',
        };
    }
    /**
     * @return {?}
     */
    changeTheme() {
        this.themeIndex = this.themeIndex === HEADER_THEMES$2.length - 1 ? 0 : this.themeIndex + 1;
        this.theme = HEADER_THEMES$2[this.themeIndex];
        this.icon = HEADER_ICONS$2[this.themeIndex];
    }
    /**
     * @param {?} type
     * @param {?} ev
     * @return {?}
     */
    catchEv(type, ev) {
        // Set toast options
        this.options = {
            title: `${type}`,
            message: `${ev} fired...`,
            theme: 'ocean',
            icon: `${type}`,
            position: 'growlTopRight',
        };
        // Fire toast
        this.toaster.alert(this.options);
    }
}
HeaderSearchbarExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'header-searchbar-example',
                template: "<header title=\"Header\" [icon]=\"icon\" [theme]=\"theme\">\n  <section class=\"header-content\">\n    <novo-search [alwaysOpen]=\"isChecked\" [theme]=\"theme\"></novo-search>\n  </section>\n  <utils>\n    <util-action icon=\"convert\" tooltip=\"Change Theme\" (click)=\"changeTheme()\"></util-action>\n    <util-action icon=\"refresh\" tooltip=\"Show Popup\" (click)=\"catchEv('refresh', $event)\"></util-action>\n    <util-action icon=\"times\" tooltip=\"Show Popup\" (click)=\"catchEv('close', $event)\"></util-action>\n  </utils>\n</header>\n<br/>\n<novo-checkbox label=\"Always Open?\" [(ngModel)]=\"isChecked\"></novo-checkbox>\n",
                styles: [""]
            }] }
];
/** @nocollapse */
HeaderSearchbarExample.ctorParameters = () => [
    { type: novo_elements__WEBPACK_IMPORTED_MODULE_3__["NovoToastService"] }
];
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: layouts/header/header-subtitle/header-subtitle-example.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const HEADER_THEMES$3 = ['company', 'job', 'candidate', 'contact', 'opportunity', 'lead', 'light', 'white'];
/** @type {?} */
const HEADER_ICONS$3 = ['company', 'job', 'candidate', 'person', 'opportunity', 'lead', 'bolt', 'shield'];
/**
 * \@title Header with Subtitle Example
 */
class HeaderSubtitleExample {
    /**
     * @param {?} toaster
     */
    constructor(toaster) {
        this.toaster = toaster;
        this.theme = 'company';
        this.icon = 'company';
        this.themeIndex = 0;
        this.toaster = toaster;
        this.options = {
            title: 'Title',
            message: 'Some Message...',
            theme: 'ocean',
            icon: 'clipboard',
            position: 'growlTopRight',
        };
    }
    /**
     * @return {?}
     */
    changeTheme() {
        this.themeIndex = this.themeIndex === HEADER_THEMES$3.length - 1 ? 0 : this.themeIndex + 1;
        this.theme = HEADER_THEMES$3[this.themeIndex];
        this.icon = HEADER_ICONS$3[this.themeIndex];
    }
    /**
     * @param {?} type
     * @param {?} ev
     * @return {?}
     */
    catchEv(type, ev) {
        // Set toast options
        this.options = {
            title: `${type}`,
            message: `${ev} fired...`,
            theme: 'ocean',
            icon: `${type}`,
            position: 'growlTopRight',
        };
        // Fire toast
        this.toaster.alert(this.options);
    }
}
HeaderSubtitleExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'header-subtitle-example',
                template: "<header title=\"Header\" subTitle=\"with subtitle\" [icon]=\"icon\" [theme]=\"theme\">\n  <utils>\n    <util-action icon=\"convert\" tooltip=\"Change Theme\" (click)=\"changeTheme()\"></util-action>\n    <util-action icon=\"refresh\" tooltip=\"Show Popup\" (click)=\"catchEv('refresh', $event)\"></util-action>\n    <util-action icon=\"times\" tooltip=\"Show Popup\" (click)=\"catchEv('close', $event)\"></util-action>\n  </utils>\n</header>\n",
                styles: [""]
            }] }
];
/** @nocollapse */
HeaderSubtitleExample.ctorParameters = () => [
    { type: novo_elements__WEBPACK_IMPORTED_MODULE_3__["NovoToastService"] }
];
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: layouts/list/basic-list/basic-list-example.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@title Basic List Layout
 */
class BasicListExample {
    constructor() {
        /** @type {?} */
        const ONE_HOUR = 60 * 60 * 1000;
        /* ms */
        /** @type {?} */
        const TWO_HOURS = ONE_HOUR * 2;
        /** @type {?} */
        const THREE_HOURS = ONE_HOUR * 3;
        /** @type {?} */
        const currentDate = new Date();
        /** @type {?} */
        const oneHourAgo = currentDate.getTime() - ONE_HOUR;
        /** @type {?} */
        const twoHoursAgo = currentDate.getTime() - TWO_HOURS;
        /** @type {?} */
        const threeHoursAgo = currentDate.getTime() - THREE_HOURS;
        /* "mockResponse[]" should represent a REST response with improperly formatted data.
            /  The "buildItems()" function is taking this data object and massaging it
            /  to build the list items appropriately via a new data object "pulseItems[]".
            /  In page1.html you can see how the new object builds a list of items.
            /  - @asibilia
            */
        /** @type {?} */
        const mockResponse = [
            {
                type: 'opportunity',
                dateCreated: oneHourAgo,
                sentiment: {
                    rating: 'negative',
                    type: 'engagement',
                    comment: 'No emails in last 10 days',
                },
                user: {
                    firstName: 'Steph',
                    lastName: 'Curry',
                    company: 'Wells Fargo',
                    location: 'Golden State, CA',
                },
            },
            {
                type: 'opportunity',
                dateCreated: twoHoursAgo,
                sentiment: {
                    rating: 'negative',
                    type: 'probability',
                    comment: 'Now has low probability to close',
                },
                user: {
                    firstName: 'Lebron',
                    lastName: 'James',
                    company: 'Amazon',
                    location: 'Cleveland, OH',
                },
            },
            {
                type: 'company',
                dateCreated: threeHoursAgo,
                sentiment: {
                    rating: 'positive',
                    type: 'connection',
                    comment: 'New connection',
                },
                user: {
                    firstName: 'Derrick',
                    lastName: 'Rose',
                    company: 'Walmart',
                    location: 'Chicago, IL',
                },
            },
        ];
        this.pulseItems = [];
        this.buildItems(mockResponse);
    }
    /**
     * @param {?} resp
     * @return {?}
     */
    buildItems(resp) {
        for (const obj of resp) {
            /** @type {?} */
            const item = {};
            /*
            ||| This is the item structure to be pushed to pulseItems[] and used
            ||| to build the list & items.
            |
            |   item = {
            |       "name": '',
            |       "type": '',
            |       "icon": {
            |           "name": '',
            |           "sentiment": ''
            |       },
            |       "comment": '',
            |       "timeAgo": ''
            |    }
            |
            */
            item.name = obj.user.company;
            item.type = obj.type;
            item.icon = {};
            if (obj.sentiment.type === 'connection') {
                item.icon.name = 'bhi-add-o';
            }
            if (obj.sentiment.type === 'engagement') {
                item.icon.name = obj.sentiment.rating === 'positive' ? 'bhi-trending-up' : 'bhi-trending-down';
            }
            item.icon.sentiment = obj.sentiment.rating;
            item.comment = obj.sentiment.comment;
            item.timeAgo = obj.dateCreated;
            this.pulseItems.push(item);
        }
    }
}
BasicListExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'basic-list-example',
                template: "<header>\n    <novo-list direction=\"vertical\">\n        <novo-list-item *ngFor=\"let item of pulseItems\">\n            <item-header>\n                <item-avatar [icon]=\"item.type\"></item-avatar>\n                <item-title>{{item.name}}</item-title>\n                <item-header-end>\n                    <span>\n                        <i class=\"bhi-clock\"></i>\n                        {{item.timeAgo | date: 'shortTime'}}\n                    </span>\n                </item-header-end>\n            </item-header>\n            <item-content direction=\"vertical\">\n                <p>\n                    <i *ngIf=\"item.icon.name\" class=\"{{item.icon.name}} {{item.icon.sentiment}}\"></i>\n                    {{item.comment}}\n                </p>\n            </item-content>\n        </novo-list-item>\n    </novo-list>\n</header>\n",
                styles: [""]
            }] }
];
/** @nocollapse */
BasicListExample.ctorParameters = () => [];
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: layouts/list/themed-list/themed-list-example.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@title Themed List Example
 */
class ThemedListExample {
    constructor() {
        /** @type {?} */
        const ONE_HOUR = 60 * 60 * 1000;
        /* ms */
        /** @type {?} */
        const TWO_HOURS = ONE_HOUR * 2;
        /** @type {?} */
        const THREE_HOURS = ONE_HOUR * 3;
        /** @type {?} */
        const currentDate = new Date();
        /** @type {?} */
        const oneHourAgo = currentDate.getTime() - ONE_HOUR;
        /** @type {?} */
        const twoHoursAgo = currentDate.getTime() - TWO_HOURS;
        /** @type {?} */
        const threeHoursAgo = currentDate.getTime() - THREE_HOURS;
        /* "mockResponse[]" should represent a REST response with improperly formatted data.
            /  The "buildItems()" function is taking this data object and massaging it
            /  to build the list items appropriately via a new data object "pulseItems[]".
            /  In page1.html you can see how the new object builds a list of items.
            /  - @asibilia
            */
        /** @type {?} */
        const mockResponse = [
            {
                type: 'opportunity',
                dateCreated: oneHourAgo,
                sentiment: {
                    rating: 'negative',
                    type: 'engagement',
                    comment: 'No emails in last 10 days',
                },
                user: {
                    firstName: 'Steph',
                    lastName: 'Curry',
                    company: 'Wells Fargo',
                    location: 'Golden State, CA',
                },
            },
            {
                type: 'opportunity',
                dateCreated: twoHoursAgo,
                sentiment: {
                    rating: 'negative',
                    type: 'probability',
                    comment: 'Now has low probability to close',
                },
                user: {
                    firstName: 'Lebron',
                    lastName: 'James',
                    company: 'Amazon',
                    location: 'Cleveland, OH',
                },
            },
            {
                type: 'company',
                dateCreated: threeHoursAgo,
                sentiment: {
                    rating: 'positive',
                    type: 'connection',
                    comment: 'New connection',
                },
                user: {
                    firstName: 'Derrick',
                    lastName: 'Rose',
                    company: 'Walmart',
                    location: 'Chicago, IL',
                },
            },
        ];
        this.pulseItems = [];
        this.buildItems(mockResponse);
    }
    /**
     * @param {?} resp
     * @return {?}
     */
    buildItems(resp) {
        for (const obj of resp) {
            /** @type {?} */
            const item = {};
            /*
            ||| This is the item structure to be pushed to pulseItems[] and used
            ||| to build the list & items.
            |
            |   item = {
            |       "name": '',
            |       "type": '',
            |       "icon": {
            |           "name": '',
            |           "sentiment": ''
            |       },
            |       "comment": '',
            |       "timeAgo": ''
            |    }
            |
            */
            item.name = obj.user.company;
            item.type = obj.type;
            item.icon = {};
            if (obj.sentiment.type === 'connection') {
                item.icon.name = 'bhi-add-o';
            }
            if (obj.sentiment.type === 'engagement') {
                item.icon.name = obj.sentiment.rating === 'positive' ? 'bhi-trending-up' : 'bhi-trending-down';
            }
            item.icon.sentiment = obj.sentiment.rating;
            item.comment = obj.sentiment.comment;
            item.timeAgo = obj.dateCreated;
            this.pulseItems.push(item);
        }
    }
}
ThemedListExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'themed-list-example',
                template: "<header>\n    <novo-list theme=\"navigation\" direction=\"vertical\">\n        <novo-list-item *ngFor=\"let item of pulseItems\">\n            <item-header>\n                <item-avatar [icon]=\"item.type\"></item-avatar>\n                <item-title>{{item.name}}</item-title>\n            </item-header>\n            <item-content direction=\"vertical\">\n                <p>\n                    <i *ngIf=\"item.icon.name\" class=\"{{item.icon.name}} {{item.icon.sentiment}}\"></i>\n                    {{item.comment}}\n                </p>\n                <span>\n                    <i class=\"bhi-clock\"></i>\n                    {{item.timeAgo | date: 'shortTime'}}\n                </span>\n            </item-content>\n            <item-end>\n                <i class=\"bhi-next\"></i>\n            </item-end>\n        </novo-list-item>\n    </novo-list>\n</header>\n",
                styles: [""]
            }] }
];
/** @nocollapse */
ThemedListExample.ctorParameters = () => [];
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: layouts/stepper/stepper-horizontal/stepper-horizontal-example.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@title Basic Stepper Component
 */
class StepperHorizontalExample {
    /**
     * @param {?} _formBuilder
     */
    constructor(_formBuilder) {
        this._formBuilder = _formBuilder;
        this.isLinear = true;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.firstFormGroup = this._formBuilder.group({
            firstCtrl: ['', _angular_forms__WEBPACK_IMPORTED_MODULE_1__["Validators"].required],
        });
        this.secondFormGroup = this._formBuilder.group({
            secondCtrl: ['', _angular_forms__WEBPACK_IMPORTED_MODULE_1__["Validators"].required],
        });
    }
    /**
     * @param {?} stepper
     * @param {?} step
     * @return {?}
     */
    next(stepper, step) {
        step.editable = false;
        stepper.next();
    }
}
StepperHorizontalExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'stepper-horizontal-example',
                template: "\n<novo-horizontal-stepper [linear]=\"isLinear\" #stepper>\n  <novo-step [stepControl]=\"firstFormGroup\" label=\"Fill out your name\" theme=\"candidate\" icon=\"candidate\" #step1>\n    <form [formGroup]=\"firstFormGroup\">\n      <input placeholder=\"Last name, First name\" formControlName=\"firstCtrl\" required>\n      <div>Form Valid? {{firstFormGroup?.valid}}</div>\n      <div>\n        <button (click)=\"next(stepper, step1)\">Next</button>\n      </div>\n    </form>\n  </novo-step>\n  <novo-step [stepControl]=\"secondFormGroup\" theme=\"contact\">\n    <form [formGroup]=\"secondFormGroup\">\n      <ng-template novoStepLabel>Fill out your address</ng-template>\n      <input placeholder=\"Address\" formControlName=\"secondCtrl\" required>\n      <div>\n        <button (click)=\"stepper.previous()\">Back</button>\n        <button (click)=\"stepper.next()\">Next</button>\n      </div>\n    </form>\n  </novo-step>\n  <novo-step>\n    <ng-template novoStepLabel>Done</ng-template>\n    You are now done.\n    <div>\n      <button novo-button (click)=\"stepper.previous()\">Back</button>\n      <button novo-button (click)=\"stepper.complete()\">Done</button>\n    </div>\n  </novo-step>\n</novo-horizontal-stepper>\n",
                styles: [""]
            }] }
];
/** @nocollapse */
StepperHorizontalExample.ctorParameters = () => [
    { type: _angular_forms__WEBPACK_IMPORTED_MODULE_1__["FormBuilder"] }
];
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: layouts/stepper/stepper-vertical/stepper-vertical-example.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@title Stepper w/ Vertical Layout
 */
class StepperVerticalExample {
    /**
     * @param {?} _formBuilder
     */
    constructor(_formBuilder) {
        this._formBuilder = _formBuilder;
        this.isLinear = true;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.firstFormGroup = this._formBuilder.group({
            firstCtrl: ['', _angular_forms__WEBPACK_IMPORTED_MODULE_1__["Validators"].required],
        });
        this.secondFormGroup = this._formBuilder.group({
            secondCtrl: ['', _angular_forms__WEBPACK_IMPORTED_MODULE_1__["Validators"].required],
        });
    }
    /**
     * @param {?} stepper
     * @param {?} step
     * @return {?}
     */
    next(stepper, step) {
        step.editable = false;
        stepper.next();
    }
}
StepperVerticalExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'stepper-vertical-example',
                template: "\n<novo-vertical-stepper [linear]=\"isLinear\" #stepper>\n  <novo-step [stepControl]=\"firstFormGroup\" theme=\"candidate\" icon=\"candidate\" #step1>\n    <form [formGroup]=\"firstFormGroup\">\n      <ng-template novoStepLabel>Fill out your name</ng-template>\n      <input placeholder=\"Last name, First name\" formControlName=\"firstCtrl\" required>\n      <div>\n        <!-- <button novo-button novoStepperNext>Next</button> -->\n        <button (click)=\"next(stepper, step1)\" [disabled]=\"!firstFormGroup?.valid\">Next</button>\n      </div>\n    </form>\n  </novo-step>\n  <novo-step [stepControl]=\"secondFormGroup\" theme=\"contact\" icon=\"person\">\n    <form [formGroup]=\"secondFormGroup\">\n      <ng-template novoStepLabel>Fill out your address</ng-template>\n      <input placeholder=\"Address\" formControlName=\"secondCtrl\" required>\n      <div>\n        <!-- <button novo-button novoStepperPrevious>Back</button>\n        <button novo-button novoStepperNext>Next</button> -->\n        <button (click)=\"stepper.previous()\">Back</button>\n        <button (click)=\"stepper.next()\">Next</button>\n      </div>\n    </form>\n  </novo-step>\n  <novo-step>\n    <ng-template novoStepLabel>Done</ng-template>\n    You are now done.\n    <div>\n      <button novo-button (click)=\"stepper.reset()\">Reset</button>\n    </div>\n  </novo-step>\n</novo-vertical-stepper>\n",
                styles: [""]
            }] }
];
/** @nocollapse */
StepperVerticalExample.ctorParameters = () => [
    { type: _angular_forms__WEBPACK_IMPORTED_MODULE_1__["FormBuilder"] }
];
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: layouts/tabs/tabs-basic/tabs-basic-example.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@title Basic Tabs
 */
class TabsBasicExample {
    /**
     * @return {?}
     */
    tabSelected() {
        console.log('TAB SELECTED'); // tslint:disable-line
    }
    /**
     * @return {?}
     */
    tabDeselected() {
        console.log('TAB DESELECTED'); // tslint:disable-line
    }
}
TabsBasicExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'tabs-basic-example',
                template: "",
                styles: [""]
            }] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: layouts/tabs/tabs-color/tabs-color-example.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@title Colorful Tabs
 */
class TabsColorExample {
    /**
     * @return {?}
     */
    tabSelected() {
        console.log('TAB SELECTED'); // tslint:disable-line
    }
    /**
     * @return {?}
     */
    tabDeselected() {
        console.log('TAB DESELECTED'); // tslint:disable-line
    }
}
TabsColorExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'tabs-color-example',
                template: "<header>\n  <novo-nav theme=\"color\" [outlet]=\"colornav\" direction=\"horizontal\">\n      <novo-tab>\n          <span>\n              <i class=\"bhi-person\"></i>Tab 1</span>\n      </novo-tab>\n      <novo-tab>\n          <span>\n              <i class=\"bhi-person\"></i>Tab 2</span>\n      </novo-tab>\n       <novo-tab [disabled]=\"true\">\n          <span>\n              <i class=\"bhi-person\"></i>Tab 3</span>\n      </novo-tab>\n  </novo-nav>\n</header>\n\n<novo-nav-outlet #colornav>\n  <novo-nav-content>\n      <h1>Tab 1 Content</h1>\n  </novo-nav-content>\n  <novo-nav-content>\n      <h1>Tab 2 Content</h1>\n  </novo-nav-content>\n</novo-nav-outlet>\n",
                styles: [""]
            }] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: layouts/tabs/tabs-condensed/tabs-condensed-example.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@title Condensed Tabs
 */
class TabsCondensedExample {
    /**
     * @return {?}
     */
    tabSelected() {
        console.log('TAB SELECTED'); // tslint:disable-line
    }
    /**
     * @return {?}
     */
    tabDeselected() {
        console.log('TAB DESELECTED'); // tslint:disable-line
    }
}
TabsCondensedExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'tabs-condensed-example',
                template: "<novo-nav theme=\"white\" [outlet]=\"condensed\" condensed=\"true\">\n  <novo-tab>\n      <span><i class=\"bhi-person\"></i>Tab 1</span>\n  </novo-tab>\n  <novo-tab>\n      <span><i class=\"bhi-person\"></i>Tab 2</span>\n  </novo-tab>\n  <novo-tab [disabled]=\"true\">\n      <span><i class=\"bhi-person\"></i>Tab 3</span>\n  </novo-tab>\n</novo-nav>\n\n\n<novo-nav-outlet #condensed>\n  <novo-nav-content>\n      <h1>Tab 1 Content</h1>\n  </novo-nav-content>\n  <novo-nav-content>\n      <h1>Tab 2 Content</h1>\n  </novo-nav-content>\n</novo-nav-outlet>\n",
                styles: [""]
            }] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: layouts/tabs/tabs-router/tabs-router-example.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@title Tabs for Navigation
 */
class TabsRouterExample {
    /**
     * @return {?}
     */
    tabSelected() {
        console.log('TAB SELECTED'); // tslint:disable-line
    }
    /**
     * @return {?}
     */
    tabDeselected() {
        console.log('TAB DESELECTED'); // tslint:disable-line
    }
}
TabsRouterExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'tabs-router-example',
                template: "<header>\n  <novo-nav theme=\"white\" router>\n      <novo-tab-link>\n          <span>\n              <i class=\"bhi-person\"></i>Tab 1</span>\n      </novo-tab-link>\n      <novo-tab-link>\n          <span>\n              <i class=\"bhi-person\"></i>Tab 2</span>\n      </novo-tab-link>\n       <novo-tab-link [disabled]=\"true\">\n          <span>\n              <i class=\"bhi-person\"></i>Tab 3</span>\n      </novo-tab-link>\n  </novo-nav>\n</header>\n",
                styles: [""]
            }] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: layouts/tabs/tabs-vertical/tabs-vertical-example.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@title Vertical Tabs
 */
class TabsVerticalExample {
    /**
     * @return {?}
     */
    tabSelected() {
        console.log('TAB SELECTED'); // tslint:disable-line
    }
    /**
     * @return {?}
     */
    tabDeselected() {
        console.log('TAB DESELECTED'); // tslint:disable-line
    }
}
TabsVerticalExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'tabs-vertical-example',
                template: "<novo-nav theme=\"white\" [outlet]=\"colorVert\" direction=\"vertical\">\n  <novo-tab>\n      <span>\n          <i class=\"bhi-person\"></i>Tab 1</span>\n  </novo-tab>\n  <novo-tab>\n      <span>\n          <i class=\"bhi-person\"></i>Tab 2</span>\n  </novo-tab>\n  <novo-tab [disabled]=\"true\">\n      <span>\n          <i class=\"bhi-person\"></i>Tab 3</span>\n  </novo-tab>\n</novo-nav>\n\n<novo-nav-outlet #colorVert>\n  <novo-nav-content>\n      <h1>Tab 1 Content</h1>\n\n      <p>\n          Synth polaroid bitters chillwave pickled. Vegan disrupt tousled,\n          Portland keffiyeh aesthetic food truck sriracha cornhole\n          single-origin coffee church-key roof party. Leggings\n          ethical McSweeney's, normcore you probably haven't\n          heard of them Marfa organic squid. Slow-carb 90's\n          ennui Godard pug asymmetrical, narwhal VHS Tonx High\n          Life. Retro dreamcatcher synth Godard pickled Etsy\n          jean shorts beard, pour-over fanny pack mumblecore.\n          Quinoa retro aesthetic polaroid, Williamsburg American\n          Apparel plaid small batch. Blue Bottle Vice fanny\n          pack, Williamsburg roof party Wes Anderson mlkshk\n          seitan brunch before they sold out lo-fi XOXO tofu\n          scenester small batch.\n      </p>\n  </novo-nav-content>\n  <novo-nav-content>\n      <h1>Tab 2 Content</h1>\n\n      <p>\n          Synth polaroid bitters chillwave pickled.\n      </p>\n  </novo-nav-content>\n</novo-nav-outlet>\n",
                styles: [""]
            }] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: patterns/activity-section/activity-section-example.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@title Activity Section
 */
class ActivitySectionExample {
    constructor() {
        this.isDisabled = true;
        /** @type {?} */
        const columns = [
            { title: 'Name', name: 'name', ordering: true, type: 'link', filtering: true },
            { title: 'Position', name: 'position', ordering: true, filtering: true },
            {
                title: 'Extn.',
                name: 'ext',
                ordering: true,
                renderer: (/**
                 * @param {?} object
                 * @return {?}
                 */
                (object) => {
                    return object.ext.obj;
                }),
                compare: (/**
                 * @param {?} sort
                 * @param {?} previous
                 * @param {?} current
                 * @return {?}
                 */
                (sort, previous, current) => {
                    /** @type {?} */
                    const first = previous.obj;
                    /** @type {?} */
                    const second = current.obj;
                    if (first > second) {
                        return sort === 'desc' ? -1 : 1;
                    }
                    if (first < second) {
                        return sort === 'asc' ? -1 : 1;
                    }
                    return 0;
                }),
            },
            {
                title: 'Start date',
                type: 'date',
                name: 'startDate',
                renderer: novo_elements__WEBPACK_IMPORTED_MODULE_3__["DateCell"],
                ordering: true,
                filtering: true,
                range: true,
            },
            {
                title: '%',
                name: 'percent',
                ordering: true,
                renderer: novo_elements__WEBPACK_IMPORTED_MODULE_3__["PercentageCell"],
            },
            {
                title: 'Salary',
                name: 'salary',
                ordering: true,
                renderer: (/**
                 * @param {?} object
                 * @return {?}
                 */
                (object) => {
                    return `$ ${Number(object.salary).toFixed(2)}`;
                }),
            },
            {
                title: 'Status',
                name: 'status',
            },
        ];
        this.details = {
            columns: columns.slice(),
            rows: TableData$1.slice(),
            config: {
                paging: {
                    current: 1,
                    itemsPerPage: 10,
                },
                sorting: true,
                filtering: true,
                ordering: true,
                resizing: true,
            },
        };
    }
}
ActivitySectionExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'activity-section-example',
                template: "<novo-expansion-panel theme=\"contact\" padding=\"false\">\n    <novo-expansion-panel-header>\n        <novo-panel-title>\n            <novo-icon>person</novo-icon>\n            <label>Contacts</label>\n        </novo-panel-title>\n    </novo-expansion-panel-header>\n\n    <novo-table class=\"table-condensed\"\n        [rows]=\"details.rows\"\n        [columns]=\"details.columns\"\n        [config]=\"details.config\"\n        rowIdentifier=\"name\"></novo-table>\n\n\n</novo-expansion-panel>\n<novo-expansion-panel theme=\"job\" [hideToggle]=\"jp.expanded\" #jp>\n    <novo-expansion-panel-header>\n        <novo-panel-title>\n            <novo-icon>job</novo-icon>\n            <label>Job Orders</label>\n        </novo-panel-title>\n        <button theme=\"primary\" icon=\"add-thin\" [hidden]=\"!jp.expanded\">Add Job Order</button>\n    </novo-expansion-panel-header>\n\n    <p>This is the primary content of the panel.</p>\n\n</novo-expansion-panel>\n",
                styles: [""]
            }] }
];
/** @nocollapse */
ActivitySectionExample.ctorParameters = () => [];
if (false) {}
/** @type {?} */
const TableData$1 = [
    {
        name: 'Victoria Cantrell',
        position: 'Integer Corporation',
        office: 'Croatia',
        ext: { obj: '8262' },
        startDate: new Date('2017/08/19'),
        salary: 208178,
        percent: 0.5,
        status: 'New Lead',
        description: 'When there was despair in the dust bowl and depression across the land, she saw a nation conquer fear itself with a New Deal, new jobs and a new sense of common purpose. Yes we can.',
        categories: ['Temporary', 'Developer'],
    },
    {
        name: 'Pearl Crosby',
        position: 'In PC',
        office: 'Cambodia',
        ext: { obj: '8262' },
        startDate: new Date('2017/10/08'),
        salary: 114367,
        percent: 0.5,
        status: 'New Lead',
        description: 'When there was despair in the dust bowl and depression across the land, she saw a nation conquer fear itself with a New Deal, new jobs and a new sense of common purpose. Yes we can.',
        categories: ['Temporary', 'Developer'],
    },
    {
        name: 'Colette Foley',
        position: 'Lorem Inc.',
        office: 'Korea, North',
        ext: { obj: '8262' },
        startDate: new Date('2017/07/19'),
        salary: 721473,
        status: 'New Lead',
        percent: 1,
        description: 'To my campaign manager David Plouffe, my chief strategist David Axelrod, and the best campaign team ever assembled in the history of politics – you made this happen, and I am forever grateful for what you’ve sacrificed to get it done.',
        categories: ['Temporary', 'Developer'],
    },
];

/**
 * @fileoverview added by tsickle
 * Generated from: patterns/record-header/record-header-example.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const HEADER_THEMES$4 = ['company', 'job', 'candidate', 'contact', 'opportunity', 'lead', 'light', 'white'];
/** @type {?} */
const HEADER_ICONS$4 = ['company', 'job', 'candidate', 'person', 'opportunity', 'lead', 'bolt', 'shield'];
/**
 * \@title Basic Header Example
 */
class RecordHeaderExample {
    /**
     * @param {?} toaster
     */
    constructor(toaster) {
        this.toaster = toaster;
        this.theme = 'company';
        this.icon = 'company';
        this.options = {
            title: 'Title',
            message: 'Some Message...',
            theme: 'ocean',
            icon: 'clipboard',
            position: 'growlTopRight',
        };
        this.themeIndex = 0;
        this.refresh();
    }
    /**
     * @return {?}
     */
    refresh() {
        this.values = undefined;
        this.tabs = undefined;
        this.record = undefined;
        setTimeout((/**
         * @return {?}
         */
        () => {
            this.values = [{ label: 'Status', data: 'Open' }, { label: 'Phone', data: '555-555-5555' }, { label: 'Address', data: 'Boston, MA' }];
            this.tabs = ['Overview', 'Edit', 'Activity'];
            this.record = {
                id: 101,
                name: 'Acme Corporation, LLC',
            };
        }), 5000);
    }
    /**
     * @return {?}
     */
    changeTheme() {
        this.themeIndex = this.themeIndex === HEADER_THEMES$4.length - 1 ? 0 : this.themeIndex + 1;
        this.theme = HEADER_THEMES$4[this.themeIndex];
        this.icon = HEADER_ICONS$4[this.themeIndex];
    }
    /**
     * @param {?} type
     * @param {?} ev
     * @return {?}
     */
    catchEv(type, ev) {
        // Set toast options
        this.options = {
            title: `${type}`,
            message: `${ev} fired...`,
            theme: 'ocean',
            icon: `${type}`,
            position: 'growlTopRight',
        };
        // Fire toast
        this.toaster.alert(this.options);
    }
}
RecordHeaderExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'record-header-example',
                template: "<header theme=\"company\">\n  <novo-icon>company</novo-icon>\n  <h1 novo-title [isLoading]=\"record\">\n    <span *skeleton></span>\n    <span *loaded>{{record.id}} | {{record.name}}</span>\n  </h1>\n  <novo-action icon=\"convert\" tooltip=\"Change Theme\" (click)=\"changeTheme()\"></novo-action>\n  <novo-action icon=\"refresh\" tooltip=\"Refresh\" (click)=\"refresh()\"></novo-action>\n  <novo-action icon=\"times\" tooltip=\"Show Popup\" (click)=\"catchEv('close', $event)\"></novo-action>\n  <section>\n    <button theme=\"icon\" icon=\"google\"></button>\n    <button theme=\"icon\" icon=\"linkedin-f\"></button>\n    <button theme=\"icon\" icon=\"location\"></button>\n  </section>\n  <novo-list class=\"bgc-off-white\" direction=\"horizontal\" [isLoading]=\"values\">\n    <novo-value *skeleton></novo-value>\n    <novo-value *skeleton></novo-value>\n    <novo-value *ngFor=\"let value of values\" [label]=\"value.label\" [data]=\"value.data\"></novo-value>\n  </novo-list>\n  <novo-nav theme=\"white\" direction=\"horizontal\" condensed=\"true\" [isLoading]=\"tabs\">\n    <novo-tab *skeleton></novo-tab>\n    <novo-tab *skeleton></novo-tab>\n    <novo-tab *skeleton></novo-tab>\n    <novo-tab *ngFor=\"let tab of tabs\">\n      <span>{{tab}}</span>\n    </novo-tab>\n  </novo-nav>\n</header>\n",
                styles: [""]
            }] }
];
/** @nocollapse */
RecordHeaderExample.ctorParameters = () => [
    { type: novo_elements__WEBPACK_IMPORTED_MODULE_3__["NovoToastService"] }
];
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: utils/chomsky/date-translations/date-translations-example.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@title Date Translations Example
 */
class DateTranslationsExample {
    constructor() {
        this.currentLocale = 'en-US';
        this.useMilitaryTime = false;
        this.locales = [
            {
                label: 'en-US',
                value: 'en-US',
            },
            {
                label: 'fr-FR',
                value: 'fr-FR',
            },
            {
                label: 'ru-RU',
                value: 'ru-RU',
            },
        ];
        this.militaryTime = [
            {
                label: '12 Hour',
                value: false,
            },
            {
                label: '24 Hour',
                value: true,
            },
        ];
        this.greeting = 'greeting';
        this.demoVariables = {
            today: new Date(),
            name: 'Jane',
            balance: 9874.34,
            count: 1,
            timestamp: 1506470400000,
        };
        this.translateService = chomsky__WEBPACK_IMPORTED_MODULE_4__["TranslateService"];
        chomsky__WEBPACK_IMPORTED_MODULE_4__["TranslateService"].setLocation('assets/i18n/');
        chomsky__WEBPACK_IMPORTED_MODULE_4__["TranslateService"].onLocaleChange.subscribe((/**
         * @param {?} locale
         * @return {?}
         */
        (locale) => {
            this.currentLocale = locale;
        }));
        // Use en-US
        this.changeLanguage('en-US');
    }
    /**
     * @param {?} locale
     * @return {?}
     */
    changeLanguage(locale) {
        this.currentLocale = locale;
        chomsky__WEBPACK_IMPORTED_MODULE_4__["TranslateService"].use(locale);
    }
    /**
     * @param {?} useMilitaryTime
     * @return {?}
     */
    changeMilitaryTime(useMilitaryTime) {
        this.useMilitaryTime = useMilitaryTime;
        chomsky__WEBPACK_IMPORTED_MODULE_4__["TranslateService"].forceDisplayTo24HourTime(useMilitaryTime);
        this.changeLanguage(this.currentLocale);
    }
}
DateTranslationsExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'date-translations-example',
                template: "\n<novo-tiles [options]=\"locales\" [(ngModel)]=\"currentLocale\" (onChange)=\"changeLanguage($event)\"></novo-tiles>\n<span class=\"spacer\"></span>\n<novo-tiles [options]=\"militaryTime\" [(ngModel)]=\"useMilitaryTime\" (onChange)=\"changeMilitaryTime($event)\"></novo-tiles>\n\n<h4>Pipe</h4>\n<div class=\"panel panel-default\">\n    <div class=\"panel-body\">\n        <p>{{ 'today' | translate: { today: demoVariables.today } }}</p>\n        <p>{{ 'formatToday' | translate: { today: demoVariables.today } }}</p>\n        <p>{{ 'long' | translate: { today: demoVariables.today } }}</p>\n        <p>{{ 'timeLong' | translate: { today: demoVariables.today } }}</p>\n        <p>{{ 'militaryFormat' | translate: { today: demoVariables.timestamp } }}</p>\n    </div>\n</div>\n\n<h4>Directive</h4>\n<div class=\"panel panel-default\">\n    <div class=\"panel-body\">\n        <p [translate]=\"'today'\" [dynamicValues]=\"{ today: demoVariables.today }\"></p>\n        <p [translate]=\"'formatToday'\" [dynamicValues]=\"{ today: demoVariables.today }\"></p>\n        <p [translate]=\"'long'\" [dynamicValues]=\"{ today: demoVariables.today }\"></p>\n        <p [translate]=\"'timeLong'\" [dynamicValues]=\"{ today: demoVariables.today }\"></p>\n        <p [translate]=\"'militaryFormat'\" [dynamicValues]=\"{ today: demoVariables.timestamp }\"></p>\n    </div>\n</div>\n",
                styles: [".spacer{width:8em;display:inline-block}"]
            }] }
];
/** @nocollapse */
DateTranslationsExample.ctorParameters = () => [];
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: utils/chomsky/number-translations/number-translations-example.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@title Number & Currency Translations Example
 */
class NumberTranslationsExample {
    constructor() {
        this.currentLocale = 'en-US';
        this.locales = [
            {
                label: 'en-US',
                value: 'en-US',
            },
            {
                label: 'fr-FR',
                value: 'fr-FR',
            },
            {
                label: 'ru-RU',
                value: 'ru-RU',
            },
        ];
        this.greeting = 'greeting';
        this.demoVariables = {
            today: new Date(),
            name: 'Jane',
            balance: 9874.34,
            count: 1,
        };
        this.translateService = chomsky__WEBPACK_IMPORTED_MODULE_4__["TranslateService"];
        chomsky__WEBPACK_IMPORTED_MODULE_4__["TranslateService"].setLocation('assets/i18n/');
        chomsky__WEBPACK_IMPORTED_MODULE_4__["TranslateService"].onLocaleChange.subscribe((/**
         * @param {?} locale
         * @return {?}
         */
        (locale) => {
            this.currentLocale = locale;
        }));
        // Use en-US
        this.changeLanguage('en-US');
    }
    /**
     * @param {?} locale
     * @return {?}
     */
    changeLanguage(locale) {
        this.currentLocale = locale;
        chomsky__WEBPACK_IMPORTED_MODULE_4__["TranslateService"].use(locale);
    }
}
NumberTranslationsExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'number-translations-example',
                template: "\n<novo-tiles [options]=\"locales\" [(ngModel)]=\"currentLocale\" (onChange)=\"changeLanguage($event)\"></novo-tiles>\n\n<h4>Pipe</h4>\n<div class=\"panel panel-default\">\n    <div class=\"panel-body\">\n        <p>{{ 'alert' | translate: { count: demoVariables.count } }}</p>\n        <p>{{ 'debt' | translate: { balance: demoVariables.balance } }}</p>\n    </div>\n</div>\n\n<h4>Directive</h4>\n<div class=\"panel panel-default\">\n    <div class=\"panel-body\">\n        <p [translate]=\"'alert'\" [dynamicValues]=\"{ count: demoVariables.count }\"></p>\n        <p [translate]=\"'debt'\" [dynamicValues]=\"{ balance: demoVariables.balance }\"></p>\n    </div>\n</div>\n",
                styles: [""]
            }] }
];
/** @nocollapse */
NumberTranslationsExample.ctorParameters = () => [];
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: utils/chomsky/plural-translations/plural-translations-example.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@title Plural Translations Example
 */
class PluralTranslationsExample {
    constructor() {
        this.currentLocale = 'en-US';
        this.locales = [
            {
                label: 'en-US',
                value: 'en-US',
            },
            {
                label: 'fr-FR',
                value: 'fr-FR',
            },
            {
                label: 'ru-RU',
                value: 'ru-RU',
            },
        ];
        this.greeting = 'greeting';
        this.demoVariables = {
            today: new Date(),
            name: 'Jane',
            balance: 9874.34,
            count: 1,
        };
        this.translateService = chomsky__WEBPACK_IMPORTED_MODULE_4__["TranslateService"];
        chomsky__WEBPACK_IMPORTED_MODULE_4__["TranslateService"].setLocation('assets/i18n/');
        chomsky__WEBPACK_IMPORTED_MODULE_4__["TranslateService"].onLocaleChange.subscribe((/**
         * @param {?} locale
         * @return {?}
         */
        (locale) => {
            this.currentLocale = locale;
        }));
        // Use en-US
        this.changeLanguage('en-US');
    }
    /**
     * @param {?} locale
     * @return {?}
     */
    changeLanguage(locale) {
        this.currentLocale = locale;
        chomsky__WEBPACK_IMPORTED_MODULE_4__["TranslateService"].use(locale);
    }
}
PluralTranslationsExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'plural-translations-example',
                template: "\n<novo-tiles [options]=\"locales\" [(ngModel)]=\"currentLocale\" (onChange)=\"changeLanguage($event)\"></novo-tiles>\n\n<h4>Pipe</h4>\n<div class=\"panel panel-default\">\n    <div class=\"panel-body\">\n        <p>{{ 'messages' | translate: { quantity: 0 } }}</p>\n        <p>{{ 'messages' | translate: { quantity: 1 } }}</p>\n        <p>{{ 'messages' | translate: { quantity: 20 } }}</p>\n        <p>{{ 'messages' | translate: { quantity: 50 } }}</p>\n        <p>{{ 'candidate' | translate:{ gender: 'female', quantity: 1, host: 'Jane', candidate: 'candidates' } }}</p>\n        <p>{{ 'candidate' | translate:{ gender: 'male', quantity: 0, host: 'John', candidate: 'candidates' } }}</p>\n        <p>{{ 'candidate' | translate:{ gender: 'other', quantity: 0, host: 'Les gens', candidate: 'candidates' } }}</p>\n    </div>\n</div>\n\n<h4>Directive</h4>\n<div class=\"panel panel-default\">\n    <div class=\"panel-body\">\n        <p [translate]=\"'messages'\" [dynamicValues]=\"{ quantity: 0 }\"></p>\n        <p [translate]=\"'messages'\" [dynamicValues]=\"{ quantity: 1 }\"></p>\n        <p [translate]=\"'messages'\" [dynamicValues]=\"{ quantity: 20 }\"></p>\n        <p [translate]=\"'messages'\" [dynamicValues]=\"{ quantity: 50 }\"></p>\n        <p [translate]=\"'candidate'\" [dynamicValues]=\"{ gender: 'female', quantity: 1, host: 'Jane', candidate: 'candidates' }\"></p>\n        <p [translate]=\"'candidate'\" [dynamicValues]=\"{ gender: 'male', quantity: 0, host: 'John', candidate: 'candidates' }\"></p>\n        <p [translate]=\"'candidate'\" [dynamicValues]=\"{ gender: 'other', quantity: 0, host: 'Les gens', candidate: 'candidates' }\"></p>\n    </div>\n</div>\n\n",
                styles: [""]
            }] }
];
/** @nocollapse */
PluralTranslationsExample.ctorParameters = () => [];
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: utils/chomsky/simple-translations/simple-translations-example.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@title Simple Translations Example
 */
class SimpleTranslationsExample {
    constructor() {
        this.currentLocale = 'en-US';
        this.locales = [
            {
                label: 'en-US',
                value: 'en-US',
            },
            {
                label: 'fr-FR',
                value: 'fr-FR',
            },
            {
                label: 'ru-RU',
                value: 'ru-RU',
            },
        ];
        this.greeting = 'greeting';
        this.demoVariables = {
            today: new Date(),
            name: 'Jane',
            balance: 9874.34,
            count: 1,
        };
        this.translateService = chomsky__WEBPACK_IMPORTED_MODULE_4__["TranslateService"];
        chomsky__WEBPACK_IMPORTED_MODULE_4__["TranslateService"].onLocaleChange.subscribe((/**
         * @param {?} locale
         * @return {?}
         */
        (locale) => {
            this.currentLocale = locale;
        }));
        // Use en-US
        this.changeLanguage('en-US');
    }
    /**
     * @param {?} locale
     * @return {?}
     */
    changeLanguage(locale) {
        this.currentLocale = locale;
        chomsky__WEBPACK_IMPORTED_MODULE_4__["TranslateService"].use(locale);
    }
}
SimpleTranslationsExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'simple-translations-example',
                template: "\n<novo-tiles [options]=\"locales\" [(ngModel)]=\"currentLocale\" (onChange)=\"changeLanguage($event)\"></novo-tiles>\n\n<h4>Pipe</h4>\n<div class=\"panel panel-default\">\n    <div class=\"panel-body\">\n        <p>{{ 'greeting' | translate }}</p>\n    </div>\n</div>\n\n<h4>Directive</h4>\n<div class=\"panel panel-default\">\n    <div class=\"panel-body\">\n        <p [translate]=\"'greeting'\"></p>\n    </div>\n</div>\n",
                styles: [""]
            }] }
];
/** @nocollapse */
SimpleTranslationsExample.ctorParameters = () => [];
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: utils/chomsky/translations-variables/translations-variables-example.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@title Translations with Variables Example
 */
class TranslationsVariablesExample {
    constructor() {
        this.currentLocale = 'en-US';
        this.locales = [
            {
                label: 'en-US',
                value: 'en-US',
            },
            {
                label: 'fr-FR',
                value: 'fr-FR',
            },
            {
                label: 'ru-RU',
                value: 'ru-RU',
            },
        ];
        this.greeting = 'greeting';
        this.demoVariables = {
            today: new Date(),
            name: 'Jane',
            balance: 9874.34,
            count: 1,
        };
        this.translateService = chomsky__WEBPACK_IMPORTED_MODULE_4__["TranslateService"];
        // Listen for changes
        chomsky__WEBPACK_IMPORTED_MODULE_4__["TranslateService"].onLocaleChange.subscribe((/**
         * @param {?} locale
         * @return {?}
         */
        (locale) => {
            this.currentLocale = locale;
        }));
        // Use en-US
        this.changeLanguage('en-US');
    }
    /**
     * @param {?} locale
     * @return {?}
     */
    changeLanguage(locale) {
        this.currentLocale = locale;
        chomsky__WEBPACK_IMPORTED_MODULE_4__["TranslateService"].use(locale);
    }
}
TranslationsVariablesExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'translations-variables-example',
                template: "\n<novo-tiles [options]=\"locales\" [(ngModel)]=\"currentLocale\" (onChange)=\"changeLanguage($event)\"></novo-tiles>\n\n<h4>Pipe</h4>\n<div class=\"panel panel-default\">\n    <div class=\"panel-body\">\n        <p>{{ 'farewell' | translate: { name: 'Jane' } }}</p>\n    </div>\n</div>\n\n<h4>Directive</h4>\n<div class=\"panel panel-default\">\n    <div class=\"panel-body\">\n        <p [translate]=\"'farewell'\" [dynamicValues]=\"{ name: 'Jane' }\"></p>\n    </div>\n</div>\n\n",
                styles: [""]
            }] }
];
/** @nocollapse */
TranslationsVariablesExample.ctorParameters = () => [];
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: utils/field-interactions/MockMeta.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const MockMeta$1 = {
    entity: 'ENTITY_NAME',
    entityMetaUrl: '',
    label: 'ENTIY_LABEL',
    fields: [
        {
            name: 'name',
            type: 'text',
            label: 'Name',
            sortOrder: 10,
        },
        {
            name: 'jersey-number',
            type: 'float',
            label: 'Jersey Number',
            description: 'There was a field below me!',
            sortOrder: 50,
        },
        {
            name: 'jersey-color',
            type: 'select',
            label: 'Jersey Color',
            options: ['Red', 'Blue', 'Green'],
            sortOrder: 51,
        },
        {
            name: 'cat',
            type: 'text',
            label: 'Favorite Cat',
            sortOrder: 550,
        },
        {
            name: 'remove-select',
            type: 'select',
            label: 'Remove the field below?',
            options: ['Yes', 'No'],
            sortOrder: 301,
        },
        {
            name: 'to-be-removed',
            type: 'text',
            label: 'This field will be removed',
            sortOrder: 302,
        },
    ],
};
/** @type {?} */
const MockMetaHeaders$1 = {
    sectionHeaders: [
        {
            label: 'Cat Related',
            name: 'sectionHeader1',
            sortOrder: 500,
            enabled: true,
        },
        {
            label: 'Important',
            name: 'sectionHeader2',
            sortOrder: 45,
            enabled: true,
        },
        {
            label: 'Remove field on change',
            name: 'sectionHeader3',
            sortOrder: 300,
            enabled: true,
        },
    ],
};
Object.assign(MockMetaHeaders$1, MockMeta$1);

/**
 * @fileoverview added by tsickle
 * Generated from: utils/field-interactions/fi-adding-removing/fi-adding-removing-example.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@title Fi Adding Removing Example
 */
class FiAddingRemovingExample {
    /**
     * @param {?} formUtils
     */
    constructor(formUtils) {
        this.formUtils = formUtils;
        this.controls = [];
        /** @type {?} */
        const addingRemovingFunction = (/**
         * @param {?} API
         * @return {?}
         */
        (API) => {
            console.log('[FieldInteractionDemo] - addingRemovingFunction'); // tslint:disable-line
            // Control above field
            API.addControl('cat', {
                key: 'fieldAbove',
                type: 'text',
                label: 'Added Above Cat',
            }, novo_elements__WEBPACK_IMPORTED_MODULE_3__["FieldInteractionApi"].FIELD_POSITIONS.ABOVE_FIELD, 'DEFAULT');
            // Control below field
            API.addControl('name', {
                key: 'fieldBelow',
                type: 'text',
                label: 'Added Below Name',
            }, novo_elements__WEBPACK_IMPORTED_MODULE_3__["FieldInteractionApi"].FIELD_POSITIONS.BELOW_FIELD, ':)');
            // Control at the top of the form
            API.addControl('name', {
                key: 'top',
                type: 'text',
                label: 'Added To The Very Top',
            }, novo_elements__WEBPACK_IMPORTED_MODULE_3__["FieldInteractionApi"].FIELD_POSITIONS.TOP_OF_FORM, 'HIGHEST');
            // Control at the bottom of the form
            API.addControl('name', {
                key: 'bottom',
                type: 'text',
                label: 'Added To The Very Bottom',
            }, novo_elements__WEBPACK_IMPORTED_MODULE_3__["FieldInteractionApi"].FIELD_POSITIONS.BOTTOM_OF_FORM, 'LOWEST');
            // Remove the jersey color field
            API.removeControl('jersey-color');
        });
        /** @type {?} */
        const removeAddOnChangeFunction = (/**
         * @param {?} API
         * @return {?}
         */
        (API) => {
            console.log('[FieldInteractionDemo] - removeAddOnChangeFunction'); // tslint:disable-line
            // tslint:disable-line
            // Select control with a field interaction on change event
            /** @type {?} */
            const currentValue = API.getActiveValue();
            if (currentValue === 'Yes') {
                API.removeControl('to-be-removed');
            }
            else {
                API.addControl('remove-select', {
                    key: 'to-be-removed',
                    name: 'to-be-removed',
                    type: 'text',
                    label: 'This field will be removed',
                }, novo_elements__WEBPACK_IMPORTED_MODULE_3__["FieldInteractionApi"].FIELD_POSITIONS.BELOW_FIELD);
            }
        });
        // Adding / Removing Interactions
        this.controls = formUtils.toFieldSets(MockMetaHeaders$1, '$ USD', {}, { token: 'TOKEN', military: true });
        this.controls[2].controls[0].interactions = [{ event: 'change', script: removeAddOnChangeFunction }];
        this.controls[0].controls[0].interactions = [{ event: 'init', script: addingRemovingFunction }];
        this.form = formUtils.toFormGroupFromFieldset(this.controls);
    }
}
FiAddingRemovingExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'fi-adding-removing-example',
                template: "<novo-dynamic-form [fieldsets]=\"controls\" [(form)]=\"form\" layout=\"vertical\"></novo-dynamic-form>\n<div class=\"final-value\">Form Value - {{ form.value | json }}</div>\n<div class=\"final-value\">Form Dirty - {{ form.dirty | json }}</div>\n<div class=\"final-value\">Is Form Valid? - {{ form.valid | json }}</div>\n",
                styles: [""]
            }] }
];
/** @nocollapse */
FiAddingRemovingExample.ctorParameters = () => [
    { type: novo_elements__WEBPACK_IMPORTED_MODULE_3__["FormUtils"] }
];
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: utils/field-interactions/fi-async/fi-async-example.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@title Fi Async Example
 */
class FiAsyncExample {
    /**
     * @param {?} formUtils
     */
    constructor(formUtils) {
        this.formUtils = formUtils;
        this.controls = {};
        /** @type {?} */
        const asyncFunction = (/**
         * @param {?} API
         * @return {?}
         */
        (API) => {
            console.log('[FieldInteractionDemo] - asyncFunction'); // tslint:disable-line
            if (API.getActiveKey() === 'async1') {
                API.setLoading(API.getActiveKey(), true);
                setTimeout((/**
                 * @return {?}
                 */
                function () {
                    API.setLoading(API.getActiveKey(), false);
                }), 3000);
            }
            else {
                API.setLoading(API.getActiveKey(), true);
                setTimeout((/**
                 * @return {?}
                 */
                function () {
                    API.setLoading(API.getActiveKey(), false);
                }), 15000);
            }
        });
        // Async Interactions
        this.controls.async1Control = new novo_elements__WEBPACK_IMPORTED_MODULE_3__["TextBoxControl"]({
            type: 'text',
            key: 'async1',
            value: 5,
            label: 'Async Validation',
            description: 'As you finish typing, the async check will mark the form as invalid',
            interactions: [{ event: 'change', script: asyncFunction }],
        });
        this.controls.async2Control = new novo_elements__WEBPACK_IMPORTED_MODULE_3__["TextBoxControl"]({
            type: 'text',
            key: 'async2',
            value: 5,
            label: 'Async Validation (takes too long)',
            description: 'This one will take too long and trigger the default timeout (10s)',
            interactions: [{ event: 'change', script: asyncFunction }],
        });
        this.form = formUtils.toFormGroup([this.controls.async1Control, this.controls.async2Control]);
    }
}
FiAsyncExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'fi-async-example',
                template: "<novo-form [form]=\"form\" layout=\"vertical\">\n    <div class=\"novo-form-row\">\n        <novo-control [form]=\"form\" [control]=\"controls.async1Control\"></novo-control>\n    </div>\n    <div class=\"novo-form-row\">\n        <novo-control [form]=\"form\" [control]=\"controls.async2Control\"></novo-control>\n    </div>\n</novo-form>\n<div class=\"final-value\">Form Value - {{ form.value | json }}</div>\n<div class=\"final-value\">Form Dirty - {{ form.dirty | json }}</div>\n<div class=\"final-value\">Is Form Valid? - {{ form.valid | json }}</div>\n",
                styles: [""]
            }] }
];
/** @nocollapse */
FiAsyncExample.ctorParameters = () => [
    { type: novo_elements__WEBPACK_IMPORTED_MODULE_3__["FormUtils"] }
];
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: utils/field-interactions/fi-calculation/fi-calculation-example.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@title Fi Calculation Example
 */
class FiCalculationExample {
    /**
     * @param {?} formUtils
     */
    constructor(formUtils) {
        this.formUtils = formUtils;
        this.controls = {};
        this.snippet = {};
        /** @type {?} */
        const calculationFunction = (/**
         * @param {?} API
         * @return {?}
         */
        (API) => {
            console.log('[FieldInteractionDemo] - calculationFunction'); // tslint:disable-line
            // tslint:disable-line
            /** @type {?} */
            const a = Number(API.getValue('a'));
            /** @type {?} */
            const b = Number(API.getValue('b'));
            API.setValue('sum', a + b);
            API.setValue('date', new Date());
        });
        // Calculation Field Interactions
        this.controls.aControl = new novo_elements__WEBPACK_IMPORTED_MODULE_3__["TextBoxControl"]({
            type: 'number',
            key: 'a',
            label: 'A',
            value: 1,
            interactions: [{ event: 'change', invokeOnInit: false, script: calculationFunction }],
        });
        this.controls.bControl = new novo_elements__WEBPACK_IMPORTED_MODULE_3__["TextBoxControl"]({
            type: 'number',
            key: 'b',
            label: 'B',
            value: 1,
            interactions: [{ event: 'change', invokeOnInit: false, script: calculationFunction }],
        });
        this.controls.sumControl = new novo_elements__WEBPACK_IMPORTED_MODULE_3__["TextBoxControl"]({
            type: 'number',
            key: 'sum',
            label: 'Sum',
            description: 'I am automatically set when you type in the boxes above me!',
            readOnly: true,
        });
        this.controls.dateModifiedControl = new novo_elements__WEBPACK_IMPORTED_MODULE_3__["DateTimeControl"]({
            key: 'date',
            label: 'Date Last Modified',
            value: new Date(),
        });
        this.form = formUtils.toFormGroup([
            this.controls.aControl,
            this.controls.bControl,
            this.controls.sumControl,
            this.controls.dateModifiedControl,
        ]);
    }
}
FiCalculationExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'fi-calculation-example',
                template: "<novo-form [form]=\"form\" layout=\"vertical\">\n    <div class=\"novo-form-row\">\n        <novo-control [form]=\"form\" [control]=\"controls.aControl\"></novo-control>\n    </div>\n    <div class=\"novo-form-row\">\n        <novo-control [form]=\"form\" [control]=\"controls.bControl\"></novo-control>\n    </div>\n    <div class=\"novo-form-row\">\n        <novo-control [form]=\"form\" [control]=\"controls.sumControl\"></novo-control>\n    </div>\n    <div class=\"novo-form-row\">\n        <novo-control [form]=\"form\" [control]=\"controls.dateModifiedControl\"></novo-control>\n    </div>\n</novo-form>\n<div class=\"final-value\">Form Value - {{ form.value | json }}</div>\n<div class=\"final-value\">\n    Form Dirty - {{ form.dirty | json }}</div>\n<div class=\"final-value\">Is Form Valid? - {{ form.valid | json }}</div>\n",
                styles: [""]
            }] }
];
/** @nocollapse */
FiCalculationExample.ctorParameters = () => [
    { type: novo_elements__WEBPACK_IMPORTED_MODULE_3__["FormUtils"] }
];
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: utils/field-interactions/fi-confirm/fi-confirm-example.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@title Fi Confirm Example
 */
class FiConfirmExample {
    /**
     * @param {?} formUtils
     */
    constructor(formUtils) {
        this.formUtils = formUtils;
        this.controls = {};
        /** @type {?} */
        const confirmFunction = (/**
         * @param {?} API
         * @return {?}
         */
        (API) => {
            console.log('[FieldInteractionDemo] - confirmFunction'); // tslint:disable-line
            if (API.getActiveKey() === 'confirm1') {
                API.confirmChanges(API.getActiveKey());
            }
            else {
                API.confirmChanges(API.getActiveKey(), 'This is VERY serious!');
            }
        });
        // Confirm Interactions
        this.controls.confirm1Control = new novo_elements__WEBPACK_IMPORTED_MODULE_3__["TextBoxControl"]({
            type: 'text',
            key: 'confirm1',
            value: 'Hello!',
            label: 'Prompt!',
            description: 'As you take focus out of this field you will be prompted for changes!',
            interactions: [{ event: 'change', script: confirmFunction }],
        });
        this.controls.confirm2Control = new novo_elements__WEBPACK_IMPORTED_MODULE_3__["TextBoxControl"]({
            type: 'text',
            key: 'confirm2',
            value: 'Another!',
            label: 'Custom Promp!',
            description: 'You can provide a custom message!',
            interactions: [{ event: 'change', script: confirmFunction }],
        });
        this.form = formUtils.toFormGroup([this.controls.confirm1Control, this.controls.confirm2Control]);
    }
}
FiConfirmExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'fi-confirm-example',
                template: "<novo-form [form]=\"form\" layout=\"vertical\">\n    <div class=\"novo-form-row\">\n        <novo-control [form]=\"form\" [control]=\"controls.confirm1Control\"></novo-control>\n    </div>\n    <div class=\"novo-form-row\">\n        <novo-control [form]=\"form\" [control]=\"controls.confirm2Control\"></novo-control>\n    </div>\n</novo-form>\n<div class=\"final-value\">Form Value - {{ form.value | json }}</div>\n<div class=\"final-value\">Form Dirty - {{ form.dirty | json }}</div>\n<div class=\"final-value\">Is Form Valid? - {{ form.valid | json }}</div>\n",
                styles: [""]
            }] }
];
/** @nocollapse */
FiConfirmExample.ctorParameters = () => [
    { type: novo_elements__WEBPACK_IMPORTED_MODULE_3__["FormUtils"] }
];
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: utils/field-interactions/fi-enable-disable/fi-enable-disable-example.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@title Fi Enable Disable Example
 */
class FiEnableDisableExample {
    /**
     * @param {?} formUtils
     */
    constructor(formUtils) {
        this.formUtils = formUtils;
        this.controls = {};
        /** @type {?} */
        const enableDisableFunction = (/**
         * @param {?} API
         * @return {?}
         */
        (API) => {
            console.log('[FieldInteractionDemo] - enableDisableFunction'); // tslint:disable-line
            // tslint:disable-line
            /** @type {?} */
            const currentValue = API.getActiveValue();
            if (!currentValue) {
                API.enable('text');
            }
            else {
                API.disable('text');
            }
        });
        // Enable/Disable Field Interactions
        this.controls.textControl = new novo_elements__WEBPACK_IMPORTED_MODULE_3__["TextBoxControl"]({
            type: 'text',
            key: 'text',
            label: 'MyField',
        });
        this.controls.toggleControl = new novo_elements__WEBPACK_IMPORTED_MODULE_3__["CheckboxControl"]({
            key: 'toggle',
            label: 'Disable?',
            description: 'I will disable the above field!',
            interactions: [{ event: 'change', script: enableDisableFunction }],
        });
        this.form = formUtils.toFormGroup([this.controls.textControl, this.controls.toggleControl]);
    }
}
FiEnableDisableExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'fi-enable-disable-example',
                template: "<novo-form [form]=\"form\" layout=\"vertical\">\n    <div class=\"novo-form-row\">\n        <novo-control [form]=\"form\" [control]=\"controls.textControl\"></novo-control>\n    </div>\n    <div class=\"novo-form-row\">\n        <novo-control [form]=\"form\" [control]=\"controls.toggleControl\"></novo-control>\n    </div>\n</novo-form>\n<div class=\"final-value\">Form Value - {{ form.value | json }}</div>\n<div class=\"final-value\">Form Dirty - {{ form.dirty | json }}</div>\n<div class=\"final-value\">Is Form Valid? - {{ form.valid | json }}</div>\n",
                styles: [""]
            }] }
];
/** @nocollapse */
FiEnableDisableExample.ctorParameters = () => [
    { type: novo_elements__WEBPACK_IMPORTED_MODULE_3__["FormUtils"] }
];
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: utils/field-interactions/fi-globals/fi-globals-example.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@title Fi Globals Example
 */
class FiGlobalsExample {
    /**
     * @param {?} formUtils
     */
    constructor(formUtils) {
        this.formUtils = formUtils;
        this.form = {};
        this.controls = {};
        /** @type {?} */
        const globalsFunction = (/**
         * @param {?} API
         * @return {?}
         */
        (API) => {
            console.log('[FieldInteractionDemo] - globalsFunction'); // tslint:disable-line
            API.setProperty(API.getActiveKey(), 'label', `${API.getProperty(API.getActiveKey(), 'label')} -- ${API.globals.TEST}`);
        });
        // Global Field Interactions
        this.controls.globalControl = new novo_elements__WEBPACK_IMPORTED_MODULE_3__["TextBoxControl"]({
            type: 'number',
            key: 'global',
            value: 5,
            label: 'Form Input',
            description: 'The label gets updated on load to use a global!',
            interactions: [{ event: 'init', script: globalsFunction, invokeOnInit: true }],
        });
        this.form = formUtils.toFormGroup([this.controls.globalControl]);
    }
}
FiGlobalsExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'fi-globals-example',
                template: "<novo-form [form]=\"form\" layout=\"vertical\">\n    <div class=\"novo-form-row\">\n        <novo-control [form]=\"form\" [control]=\"controls.globalControl\"></novo-control>\n    </div>\n</novo-form>\n<div class=\"final-value\">Form Value - {{ form.value | json }}</div>\n<div class=\"final-value\">Form Dirty - {{ form.dirty | json }}</div>\n<div class=\"final-value\">Is Form Valid? - {{ form.valid | json }}</div>\n",
                styles: [""]
            }] }
];
/** @nocollapse */
FiGlobalsExample.ctorParameters = () => [
    { type: novo_elements__WEBPACK_IMPORTED_MODULE_3__["FormUtils"] }
];
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: utils/field-interactions/fi-hide-show/fi-hide-show-example.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@title Fi Hide Show Example
 */
class FiHideShowExample {
    /**
     * @param {?} formUtils
     */
    constructor(formUtils) {
        this.formUtils = formUtils;
        this.form = {};
        this.controls = {};
        /** @type {?} */
        const hideShowFunction = (/**
         * @param {?} API
         * @return {?}
         */
        (API) => {
            console.log('[FieldInteractionDemo] - hideShowFunction'); // tslint:disable-line
            // tslint:disable-line
            /** @type {?} */
            const activeValue = API.getActiveValue();
            if (!activeValue) {
                API.show('text');
            }
            else {
                API.hide('text');
            }
        });
        // Hide/Show Field Interactions
        this.controls.textControl = new novo_elements__WEBPACK_IMPORTED_MODULE_3__["TextBoxControl"]({
            type: 'text',
            key: 'text',
            required: true,
            label: 'MyField',
        });
        this.controls.text2Control = new novo_elements__WEBPACK_IMPORTED_MODULE_3__["TextBoxControl"]({
            type: 'text',
            key: 'text2',
            label: 'MyField',
        });
        this.controls.toggleControl = new novo_elements__WEBPACK_IMPORTED_MODULE_3__["CheckboxControl"]({
            key: 'toggle',
            label: 'Hidden?',
            description: 'I will toggle the above field to display or not!',
            interactions: [{ event: 'change', script: hideShowFunction }],
        });
        this.form = formUtils.toFormGroup([this.controls.textControl, this.controls.text2Control, this.controls.toggleControl]);
    }
}
FiHideShowExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'fi-hide-show-example',
                template: "<novo-form [form]=\"form\" layout=\"vertical\">\n    <div class=\"novo-form-row\">\n        <novo-control [form]=\"form\" [control]=\"controls.textControl\"></novo-control>\n    </div>\n    <div class=\"novo-form-row\">\n        <novo-control [form]=\"form\" [control]=\"controls.text2Control\"></novo-control>\n    </div>\n    <div class=\"novo-form-row\">\n        <novo-control [form]=\"form\" [control]=\"controls.toggleControl\"></novo-control>\n    </div>\n</novo-form>\n<div class=\"final-value\">Form Value - {{ form.value | json }}</div>\n<div class=\"final-value\">Form Dirty - {{ form.dirty | json }}</div>\n<div class=\"final-value\">Is Form Valid? - {{ form.valid | json }}</div>\n",
                styles: [""]
            }] }
];
/** @nocollapse */
FiHideShowExample.ctorParameters = () => [
    { type: novo_elements__WEBPACK_IMPORTED_MODULE_3__["FormUtils"] }
];
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: utils/field-interactions/fi-messaging/fi-messaging-example.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@title Fi Messaging Example
 */
class FiMessagingExample {
    /**
     * @param {?} formUtils
     */
    constructor(formUtils) {
        this.formUtils = formUtils;
        this.form = {};
        this.controls = {};
        /** @type {?} */
        const messagingFunction = (/**
         * @param {?} API
         * @return {?}
         */
        (API) => {
            console.log('[FieldInteractionDemo] - messagingFunction'); // tslint:disable-line
            if (API.getActiveKey() === 'toast') {
                API.displayToast({
                    title: 'New Value',
                    message: API.getActiveValue(),
                });
            }
            else if (API.getActiveKey() === 'tip' || API.getActiveKey() === 'tipHtml') {
                /** @type {?} */
                const sanitize = !API.getValue('tipHtml');
                API.displayTip('tip', API.getValue('tip'), 'info', true, sanitize);
            }
            else if (API.getActiveKey() === 'prompt') {
                API.promptUser(API.getActiveKey(), ['Update Fee Arrangement from Selected Company', 'Update DateLastModified to right now!']).then((/**
                 * @param {?} result
                 * @return {?}
                 */
                function (result) {
                    if (result) {
                        console.log('PERFORM'); // tslint:disable-line
                    }
                    else {
                        console.log("DON'T PERFORM"); // tslint:disable-line
                    }
                }));
            }
        });
        // Messaging Field Interactions
        this.controls.toastControl = new novo_elements__WEBPACK_IMPORTED_MODULE_3__["TextBoxControl"]({
            type: 'text',
            key: 'toast',
            label: 'Toast',
            description: 'I will trigger a toast as you change the value!',
            interactions: [{ event: 'change', script: messagingFunction }],
        });
        this.controls.tipControl = new novo_elements__WEBPACK_IMPORTED_MODULE_3__["TextBoxControl"]({
            type: 'text',
            key: 'tip',
            label: 'Tip',
            description: 'I will trigger a tip well as you change the value!',
            interactions: [{ event: 'change', script: messagingFunction }],
        });
        this.controls.tipHtmlControl = new novo_elements__WEBPACK_IMPORTED_MODULE_3__["CheckboxControl"]({
            key: 'tipHtml',
            label: 'Display Tip as HTML',
            description: 'Sets the API.displayTip() sanitize parameter to false.',
            value: false,
            interactions: [{ event: 'change', script: messagingFunction }],
        });
        this.controls.promptControl = new novo_elements__WEBPACK_IMPORTED_MODULE_3__["TextBoxControl"]({
            type: 'text',
            key: 'prompt',
            label: 'Prompt User of Downstream Changes',
            interactions: [{ event: 'change', script: messagingFunction }],
        });
        this.form = formUtils.toFormGroup([
            this.controls.toastControl,
            this.controls.tipControl,
            this.controls.tipHtmlControl,
            this.controls.promptControl,
        ]);
    }
}
FiMessagingExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'fi-messaging-example',
                template: "<novo-form [form]=\"form\" layout=\"vertical\">\n    <div class=\"novo-form-row\">\n        <novo-control [form]=\"form\" [control]=\"controls.tipControl\"></novo-control>\n    </div>\n    <div class=\"novo-form-row\">\n        <novo-control [form]=\"form\" [control]=\"controls.tipHtmlControl\"></novo-control>\n    </div>\n    <div class=\"novo-form-row\">\n        <novo-control [form]=\"form\" [control]=\"controls.toastControl\"></novo-control>\n    </div>\n    <div class=\"novo-form-row\">\n        <novo-control [form]=\"form\" [control]=\"controls.promptControl\"></novo-control>\n    </div>\n</novo-form>\n<div class=\"final-value\">Form Value - {{ form.value | json }}</div>\n<div class=\"final-value\">Form Dirty - {{ form.dirty | json }}</div>\n<div class=\"final-value\">Is Form Valid? - {{ form.valid | json }}</div>\n",
                styles: [""]
            }] }
];
/** @nocollapse */
FiMessagingExample.ctorParameters = () => [
    { type: novo_elements__WEBPACK_IMPORTED_MODULE_3__["FormUtils"] }
];
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: utils/field-interactions/fi-modify-added-picker/fi-modify-added-picker-example.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@title Fi Modify Added Picker Example
 */
class FiModifyAddedPickerExample {
    /**
     * @param {?} formUtils
     */
    constructor(formUtils) {
        this.formUtils = formUtils;
        this.controls = {};
        // Adding / Removing Interactions
        /** @type {?} */
        let entityPickerFunction = (/**
         * @param {?} API
         * @return {?}
         */
        (API) => {
            console.log('[FieldInteractionDemo] - entityPickerFunction'); // tslint:disable-line
            API.modifyPickerConfig('custom-entity-picker', {
                optionsPromise: (/**
                 * @param {?} query
                 * @param {?} http
                 * @return {?}
                 */
                (query, http) => {
                    return new Promise((/**
                     * @param {?} resolve
                     * @param {?} reject
                     * @return {?}
                     */
                    function (resolve, reject) {
                        if (query && query.length) {
                            http
                                .get('http://novo-elements-mock.getsandbox.com/users')
                                .map((/**
                             * @param {?} results
                             * @return {?}
                             */
                            function (results) {
                                return results.map((/**
                                 * @param {?} result
                                 * @return {?}
                                 */
                                (result) => {
                                    // Setting the searchEntity on the item is important. We use it to format your display properly.
                                    // Valid options are: Candidate, ClientContact, ClientCorporation, CorporateUser, JobOrder, Lead, Opportunity, and Placement
                                    result.searchEntity = 'Candidate';
                                    return result;
                                }));
                            }))
                                .subscribe(resolve, reject);
                        }
                        else {
                            resolve(['DEFAULT']);
                        }
                    }));
                }),
                format: '$name',
                // This is how we set the picker to be of an entity type
                resultsTemplateType: 'entity-picker',
            });
        });
        this.controls.pickerControl = new novo_elements__WEBPACK_IMPORTED_MODULE_3__["PickerControl"]({
            key: 'custom-entity-picker',
            name: 'custom-entity-picker',
            config: {
                options: [],
            },
            label: 'Custom Entity Picker',
            interactions: [{ event: 'init', script: entityPickerFunction }],
        });
        this.form = this.formUtils.toFormGroup([this.controls.pickerControl]);
    }
}
FiModifyAddedPickerExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'fi-modify-added-picker-example',
                template: "<novo-form [form]=\"form\" layout=\"vertical\">\n  <div class=\"novo-form-row\">\n    <novo-control [form]=\"form\" [control]=\"controls.pickerControl\"></novo-control>\n  </div>\n</novo-form>\n",
                styles: [""]
            }] }
];
/** @nocollapse */
FiModifyAddedPickerExample.ctorParameters = () => [
    { type: novo_elements__WEBPACK_IMPORTED_MODULE_3__["FormUtils"] }
];
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: utils/field-interactions/fi-modify-options/fi-modify-options-example.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@title Fi Modify Options Example
 */
class FiModifyOptionsExample {
    /**
     * @param {?} formUtils
     */
    constructor(formUtils) {
        this.formUtils = formUtils;
        this.form = {};
        this.controls = {};
        /** @type {?} */
        const modifyOptionsAddFunction = (/**
         * @param {?} API
         * @return {?}
         */
        (API) => {
            console.log('[FieldInteractionDemo] - modifyOptionsAddFunction'); // tslint:disable-line
            // tslint:disable-line
            /** @type {?} */
            const currentValue = API.getActiveValue();
            if (!currentValue) {
                API.removeStaticOption('select', 'NEW');
                API.removeStaticOption('picker', 'NEW');
            }
            else {
                API.addStaticOption('select', 'NEW');
                API.addStaticOption('select', 'NEW'); // Duplicate options will be ignored
                API.addStaticOption('picker', 'NEW');
            }
        });
        /** @type {?} */
        const modifyOptionsAsyncFunction = (/**
         * @param {?} API
         * @return {?}
         */
        (API) => {
            console.log('[FieldInteractionDemo] - modifyOptionsAsyncFunction'); // tslint:disable-line
            // tslint:disable-line
            /** @type {?} */
            const currentValue = API.getActiveValue();
            switch (currentValue) {
                case 1:
                    // Static
                    API.setProperty('picker', 'label', 'Static Picker');
                    API.modifyPickerConfig('picker', {
                        options: ['A', 'B', 'C'],
                    });
                    break;
                case 2:
                    // Async with Options URL
                    API.setProperty('picker', 'label', 'Async Picker (with options url)');
                    API.modifyPickerConfig('picker', {
                        format: '$name $test',
                        optionsUrl: 'http://novo-elements-mock.getsandbox.com/users',
                    }, (/**
                     * @param {?} result
                     * @return {?}
                     */
                    function (result) {
                        result.test = 'Built with Options URL!';
                        return result;
                    }));
                    break;
                case 3:
                    // Async with Options URL Builder
                    API.setProperty('picker', 'label', 'Async Picker (with options url builder)');
                    API.modifyPickerConfig('picker', {
                        format: '$name $test',
                        optionsUrlBuilder: (/**
                         * @param {?} query
                         * @return {?}
                         */
                        (query) => {
                            return 'http://novo-elements-mock.getsandbox.com/users';
                        }),
                    }, (/**
                     * @param {?} result
                     * @return {?}
                     */
                    function (result) {
                        result.test = 'Built with Options URL Builder!';
                        return result;
                    }));
                    break;
                case 4:
                    // Async with Options Promise
                    API.setProperty('picker', 'label', 'Async Picker (with options promise)');
                    API.modifyPickerConfig('picker', {
                        format: '$name $test',
                        /**
                         * @param {?} query
                         * @param {?} http
                         * @return {?}
                         */
                        optionsPromise(query, http) {
                            return new Promise((/**
                             * @param {?} resolve
                             * @param {?} reject
                             * @return {?}
                             */
                            function (resolve, reject) {
                                if (query && query.length) {
                                    http
                                        .get('http://novo-elements-mock.getsandbox.com/users')
                                        .map((/**
                                     * @param {?} results
                                     * @return {?}
                                     */
                                    function (results) {
                                        return results.map((/**
                                         * @param {?} result
                                         * @return {?}
                                         */
                                        (result) => {
                                            result.test = 'Built with Options Promise';
                                            return result;
                                        }));
                                    }))
                                        .subscribe(resolve, reject);
                                }
                                else {
                                    resolve(['DEFAULT']);
                                }
                            }));
                        },
                    });
                    break;
                default:
                    break;
            }
        });
        // Modify Options Field Interactions
        this.controls.selectControl = new novo_elements__WEBPACK_IMPORTED_MODULE_3__["SelectControl"]({
            key: 'select',
            label: 'Select',
            options: ['A', 'B', 'C'],
        });
        this.controls.pickerControl = new novo_elements__WEBPACK_IMPORTED_MODULE_3__["PickerControl"]({
            key: 'picker',
            label: 'Static Picker',
            config: {
                options: ['A', 'B', 'C'],
            },
        });
        this.controls.toggleControl = new novo_elements__WEBPACK_IMPORTED_MODULE_3__["CheckboxControl"]({
            key: 'toggle',
            label: 'Add Option?',
            description: 'I will add options to the above field!',
            interactions: [{ event: 'change', script: modifyOptionsAddFunction }],
        });
        this.controls.makePickerAsyncControl = new novo_elements__WEBPACK_IMPORTED_MODULE_3__["SelectControl"]({
            key: 'async',
            label: 'Async Picker?',
            description: 'I will make the picker now hit a service!',
            value: 1,
            options: [
                { label: 'Not Async', value: 1 },
                { label: 'Async With Options URL', value: 2 },
                { label: 'Async With Options URL Builder', value: 3 },
                { label: 'Async With Options Promise', value: 4 },
            ],
            interactions: [{ event: 'change', script: modifyOptionsAsyncFunction }],
        });
        this.form = formUtils.toFormGroup([
            this.controls.selectControl,
            this.controls.pickerControl,
            this.controls.toggleControl,
            this.controls.makePickerAsyncControl,
        ]);
    }
}
FiModifyOptionsExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'fi-modify-options-example',
                template: "<novo-form [form]=\"form\" layout=\"vertical\">\n    <div class=\"novo-form-row\">\n        <novo-control [form]=\"form\" [control]=\"controls.selectControl\"></novo-control>\n    </div>\n    <div class=\"novo-form-row\">\n        <novo-control [form]=\"form\" [control]=\"controls.pickerControl\"></novo-control>\n    </div>\n    <div class=\"novo-form-row\">\n        <novo-control [form]=\"form\" [control]=\"controls.toggleControl\"></novo-control>\n    </div>\n    <div class=\"novo-form-row\">\n        <novo-control [form]=\"form\" [control]=\"controls.makePickerAsyncControl\"></novo-control>\n    </div>\n</novo-form>\n<div class=\"final-value\">Form Value - {{ form.value | json }}</div>\n<div class=\"final-value\">Form Dirty - {{ form.dirty | json }}</div>\n<div class=\"final-value\">Is Form Valid? - {{ form.valid | json }}</div>\n",
                styles: [""]
            }] }
];
/** @nocollapse */
FiModifyOptionsExample.ctorParameters = () => [
    { type: novo_elements__WEBPACK_IMPORTED_MODULE_3__["FormUtils"] }
];
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: utils/field-interactions/fi-required/fi-required-example.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@title Fi Required Example
 */
class FiRequiredExample {
    /**
     * @param {?} formUtils
     */
    constructor(formUtils) {
        this.form = {};
        this.controls = {};
        /** @type {?} */
        const requiredFunction = (/**
         * @param {?} API
         * @return {?}
         */
        (API) => {
            console.log('[FieldInteractionDemo] - requiredFunction'); // tslint:disable-line
            // tslint:disable-line
            /** @type {?} */
            const activeValue = API.getActiveValue();
            if (activeValue) {
                API.setRequired('required', true);
            }
            else {
                API.setRequired('required', false);
            }
        });
        // Required Field Interactions
        this.controls.requiredControl = new novo_elements__WEBPACK_IMPORTED_MODULE_3__["TextBoxControl"]({
            type: 'text',
            key: 'required',
            label: 'Test',
            description: 'I may or may not be required, play with the checkbox below!',
        });
        this.controls.toggleControl = new novo_elements__WEBPACK_IMPORTED_MODULE_3__["CheckboxControl"]({
            key: 'toggle',
            label: 'Required?',
            interactions: [{ event: 'change', script: requiredFunction }],
        });
        this.form = formUtils.toFormGroup([this.controls.requiredControl, this.controls.toggleControl]);
    }
}
FiRequiredExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'fi-required-example',
                template: "<novo-form [form]=\"form\" layout=\"vertical\">\n    <div class=\"novo-form-row\">\n        <novo-control [form]=\"form\" [control]=\"controls.requiredControl\"></novo-control>\n    </div>\n    <div class=\"novo-form-row\">\n        <novo-control [form]=\"form\" [control]=\"controls.toggleControl\"></novo-control>\n    </div>\n</novo-form>\n<div class=\"final-value\">Form Value - {{ form.value | json }}</div>\n<div class=\"final-value\">Form Dirty - {{ form.dirty | json }}</div>\n<div class=\"final-value\">Is Form Valid? - {{ form.valid | json }}</div>\n",
                styles: [""]
            }] }
];
/** @nocollapse */
FiRequiredExample.ctorParameters = () => [
    { type: novo_elements__WEBPACK_IMPORTED_MODULE_3__["FormUtils"] }
];
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: utils/field-interactions/fi-tooltip/fi-tooltip-example.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@title Fi Tooltip Example
 */
class FiTooltipExample {
    /**
     * @param {?} formUtils
     */
    constructor(formUtils) {
        this.formUtils = formUtils;
        this.form = {};
        this.controls = {};
        /** @type {?} */
        const tooltipFunction = (/**
         * @param {?} API
         * @return {?}
         */
        (API) => {
            console.log('[FieldInteractionDemo] - tooltipFunction'); // tslint:disable-line
            API.setTooltip(API.getActiveKey(), API.getActiveValue());
        });
        /** @type {?} */
        const tooltipUpdateFunction = (/**
         * @param {?} API
         * @return {?}
         */
        (API) => {
            console.log('[FieldInteractionDemo] - tooltipUpdateFunction'); // tslint:disable-line
            API.getControl(this.controls.tooltipControl.key).tooltipSize = API.getValue(this.controls.tooltipSizeControl.key);
            API.getControl(this.controls.tooltipControl.key).tooltipPreline = API.getValue(this.controls.tooltipPrelineControl.key);
        });
        // Tooltip Field Interactions
        this.controls.tooltipControl = new novo_elements__WEBPACK_IMPORTED_MODULE_3__["TextBoxControl"]({
            type: 'text',
            key: 'toolTipValue',
            label: 'Tooltip',
            description: 'I will add a tooltip to this control as a value is typed',
            interactions: [{ event: 'change', script: tooltipFunction }],
        });
        this.controls.tooltipSizeControl = new novo_elements__WEBPACK_IMPORTED_MODULE_3__["TilesControl"]({
            key: 'tooltipSize',
            label: 'Tooltip Size',
            description: 'Changing me will set a fixed width on the tooltip',
            options: [{ value: 'small', label: 'Small' }, { value: 'medium', label: 'Medium' }, { value: 'large', label: 'Large' }],
            interactions: [{ event: 'change', script: tooltipUpdateFunction }],
        });
        this.controls.tooltipPrelineControl = new novo_elements__WEBPACK_IMPORTED_MODULE_3__["TilesControl"]({
            key: 'tooltipPreline',
            label: 'Tooltip Multiline',
            description: 'Should the tooltip be multiple lines tall or all on one line?',
            options: [{ value: true, label: 'Yes' }, { value: false, label: 'No' }],
            interactions: [{ event: 'change', script: tooltipUpdateFunction }],
        });
        this.form = formUtils.toFormGroup([
            this.controls.tooltipControl,
            this.controls.tooltipSizeControl,
            this.controls.tooltipPrelineControl,
        ]);
    }
}
FiTooltipExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'fi-tooltip-example',
                template: "<novo-form [form]=\"form\" layout=\"vertical\">\n  <div class=\"novo-form-row\">\n      <novo-control [form]=\"form\" [control]=\"controls.tooltipControl\"></novo-control>\n  </div>\n  <div class=\"novo-form-row\">\n      <novo-control [form]=\"form\" [control]=\"controls.tooltipSizeControl\"></novo-control>\n  </div>\n  <div class=\"novo-form-row\">\n      <novo-control [form]=\"form\" [control]=\"controls.tooltipPrelineControl\"></novo-control>\n  </div>\n</novo-form>\n<div class=\"final-value\">Form Value - {{ form.value | json }}</div>\n<div class=\"final-value\">Form Dirty - {{ form.dirty | json }}</div>\n<div class=\"final-value\">Is Form Valid? - {{ form.valid | json }}</div>\n",
                styles: [""]
            }] }
];
/** @nocollapse */
FiTooltipExample.ctorParameters = () => [
    { type: novo_elements__WEBPACK_IMPORTED_MODULE_3__["FormUtils"] }
];
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: utils/field-interactions/fi-validation/fi-validation-example.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@title Fi Validation Example
 */
class FiValidationExample {
    /**
     * @param {?} formUtils
     */
    constructor(formUtils) {
        this.formUtils = formUtils;
        this.form = {};
        this.controls = {};
        /** @type {?} */
        const validationFunction = (/**
         * @param {?} API
         * @return {?}
         */
        (API) => {
            console.log('[FieldInteractionDemo] - validationFunction'); // tslint:disable-line
            // tslint:disable-line
            /** @type {?} */
            const activeValue = API.getActiveValue();
            if (activeValue > 10) {
                API.markAsInvalid(API.getActiveKey(), 'Too high! Make it a lot lower!!');
            }
        });
        // Validation Field Interactions
        this.controls.validationControl = new novo_elements__WEBPACK_IMPORTED_MODULE_3__["TextBoxControl"]({
            type: 'number',
            key: 'validation',
            value: 5,
            label: 'Validation Test',
            description: 'Try to input a number larger then 10!',
            interactions: [{ event: 'change', script: validationFunction, invokeOnInit: true }],
        });
        this.form = formUtils.toFormGroup([this.controls.validationControl]);
    }
}
FiValidationExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'fi-validation-example',
                template: "<novo-form [form]=\"form\" layout=\"vertical\">\n    <div class=\"novo-form-row\">\n        <novo-control [form]=\"form\" [control]=\"controls.validationControl\"></novo-control>\n    </div>\n</novo-form>\n<div class=\"final-value\">Form Value - {{ form.value | json }}</div>\n<div class=\"final-value\">Form Dirty - {{ form.dirty | json }}</div>\n<div class=\"final-value\">Is Form Valid? - {{ form.valid | json }}</div>\n",
                styles: [""]
            }] }
];
/** @nocollapse */
FiValidationExample.ctorParameters = () => [
    { type: novo_elements__WEBPACK_IMPORTED_MODULE_3__["FormUtils"] }
];
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: utils/modal/custom-modal/custom-modal-example.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ModalCustomDemo {
    /**
     * @param {?} modalRef
     */
    constructor(modalRef) {
        this.modalRef = modalRef;
    }
    /**
     * @return {?}
     */
    close() {
        this.modalRef.close();
    }
}
ModalCustomDemo.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'modal-custom-demo',
                template: `
  <novo-notification type="custom" icon="trending-up">
    <h1>I have a trending icon!</h1>
    <h2>This notification type allows for any Bullhorn Icon</h2>
    <button theme="primary" icon="check" (click)="close()">Sweet.</button>
  </novo-notification>
`
            }] }
];
/** @nocollapse */
ModalCustomDemo.ctorParameters = () => [
    { type: novo_elements__WEBPACK_IMPORTED_MODULE_3__["NovoModalRef"] }
];
if (false) {}
/**
 * \@title Custom Modal Example
 */
class CustomModalExample {
    /**
     * @param {?} modalService
     */
    constructor(modalService) {
        this.modalService = modalService;
    }
    /**
     * @return {?}
     */
    showModal() {
        this.modalService.open(ModalCustomDemo);
    }
}
CustomModalExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'custom-modal-example',
                template: "<button data-automation-id=\"modal-trigger\" theme=\"secondary\" (click)=\"showModal()\">Show Me :)</button>\n",
                styles: [":host{display:block;background:rgba(0,0,0,.55);padding:35px 0;position:relative;text-align:center}"]
            }] }
];
/** @nocollapse */
CustomModalExample.ctorParameters = () => [
    { type: novo_elements__WEBPACK_IMPORTED_MODULE_3__["NovoModalService"] }
];
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: utils/modal/error-modal/error-modal-example.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ModalErrorDemo {
    /**
     * @param {?} modalRef
     */
    constructor(modalRef) {
        this.modalRef = modalRef;
    }
    /**
     * @return {?}
     */
    close() {
        this.modalRef.close();
    }
}
ModalErrorDemo.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'modal-error-demo',
                template: `
  <novo-notification type="error">
    <h1>Sorry, something went wrong.</h1>
    <h2>You did not have 1.21 gigawatts of power.</h2>
    <button theme="primary" icon="refresh-o" (click)="close()">Refresh this page</button>
  </novo-notification>
`
            }] }
];
/** @nocollapse */
ModalErrorDemo.ctorParameters = () => [
    { type: novo_elements__WEBPACK_IMPORTED_MODULE_3__["NovoModalRef"] }
];
if (false) {}
/**
 * \@title Error Modal Example
 */
class ErrorModalExample {
    /**
     * @param {?} modalService
     */
    constructor(modalService) {
        this.modalService = modalService;
    }
    /**
     * @return {?}
     */
    showModal() {
        this.modalService.open(ModalErrorDemo);
    }
}
ErrorModalExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'error-modal-example',
                template: "<button data-automation-id=\"modal-trigger\" theme=\"secondary\" (click)=\"showModal()\">Show Me :)</button>\n",
                styles: [":host{display:block;background:rgba(0,0,0,.55);padding:35px 0;position:relative;text-align:center}"]
            }] }
];
/** @nocollapse */
ErrorModalExample.ctorParameters = () => [
    { type: novo_elements__WEBPACK_IMPORTED_MODULE_3__["NovoModalService"] }
];
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: utils/modal/modal-add-form/modal-add-form-example.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ModalAddFormDemo {
    /**
     * @param {?} modalRef
     * @param {?} formUtils
     */
    constructor(modalRef, formUtils) {
        this.modalRef = modalRef;
        this.formUtils = formUtils;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.textControl = new novo_elements__WEBPACK_IMPORTED_MODULE_3__["TextBoxControl"]({ key: 'text', label: 'Text Box' });
        this.emailControl = new novo_elements__WEBPACK_IMPORTED_MODULE_3__["TextBoxControl"]({ type: 'email', key: 'email', label: 'Email' });
        this.numberControl = new novo_elements__WEBPACK_IMPORTED_MODULE_3__["TextBoxControl"]({ type: 'number', key: 'number', label: 'Number' });
        this.pickerControl = new novo_elements__WEBPACK_IMPORTED_MODULE_3__["PickerControl"]({
            key: 'picker',
            multiple: false,
            label: 'Picker',
            required: true,
            config: {
                resultsTemplate: novo_elements__WEBPACK_IMPORTED_MODULE_3__["PickerResults"],
                options: ['Apple', 'Banana', 'Grapes', 'Orange', 'Pear'],
            },
        });
        this.textForm = this.formUtils.toFormGroup([this.textControl, this.emailControl, this.numberControl, this.pickerControl]);
    }
    /**
     * @return {?}
     */
    close() {
        this.modalRef.close();
    }
}
ModalAddFormDemo.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'modal-edit-form-demo',
                template: `
  <novo-modal>
    <header title="Add Contact" icon="person" theme="contact">
        <utils>
            <util-action icon="times" (click)="close()"></util-action>
        </utils>
    </header>
    <section>
        <novo-form [form]="textForm">
            <div class="novo-form-row">
                <novo-control [form]="textForm" [control]="textControl"></novo-control>
            </div>
            <div class="novo-form-row">
                <novo-control [form]="textForm" [control]="emailControl"></novo-control>
            </div>
            <div class="novo-form-row">
                <novo-control [form]="textForm" [control]="numberControl"></novo-control>
            </div>
            <div class="novo-form-row">
                <novo-control [form]="textForm" [control]="pickerControl"></novo-control>
            </div>
        </novo-form>
    </section>
    <button theme="standard" (click)="close()">Cancel</button>
    <button theme="primary" color="success" icon="check" (click)="close()">Save</button>
  </novo-modal>
`
            }] }
];
/** @nocollapse */
ModalAddFormDemo.ctorParameters = () => [
    { type: novo_elements__WEBPACK_IMPORTED_MODULE_3__["NovoModalRef"] },
    { type: novo_elements__WEBPACK_IMPORTED_MODULE_3__["FormUtils"] }
];
if (false) {}
/**
 * \@title Modal Add Form Example
 */
class ModalAddFormExample {
    /**
     * @param {?} modalService
     */
    constructor(modalService) {
        this.modalService = modalService;
    }
    /**
     * @return {?}
     */
    showModal() {
        this.modalService.open(ModalAddFormDemo);
    }
}
ModalAddFormExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'modal-add-form-example',
                template: "<button data-automation-id=\"modal-trigger\" theme=\"secondary\" (click)=\"showModal()\">Show Me :)</button>\n",
                styles: [":host{display:block;background:rgba(0,0,0,.55);padding:35px 0;position:relative;text-align:center}"]
            }] }
];
/** @nocollapse */
ModalAddFormExample.ctorParameters = () => [
    { type: novo_elements__WEBPACK_IMPORTED_MODULE_3__["NovoModalService"] }
];
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: utils/modal/modal-edit-form/modal-edit-form-example.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ModalEditFormDemo {
    /**
     * @param {?} modalRef
     * @param {?} formUtils
     */
    constructor(modalRef, formUtils) {
        this.modalRef = modalRef;
        this.formUtils = formUtils;
        this.formUtils = formUtils;
        this.modalRef = modalRef;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.textControl = new novo_elements__WEBPACK_IMPORTED_MODULE_3__["TextBoxControl"]({ key: 'text', label: 'Text Box' });
        this.emailControl = new novo_elements__WEBPACK_IMPORTED_MODULE_3__["TextBoxControl"]({ type: 'email', key: 'email', label: 'Email' });
        this.numberControl = new novo_elements__WEBPACK_IMPORTED_MODULE_3__["TextBoxControl"]({ type: 'number', key: 'number', label: 'Number' });
        this.pickerControl = new novo_elements__WEBPACK_IMPORTED_MODULE_3__["PickerControl"]({
            key: 'picker',
            multiple: true,
            label: 'Picker',
            required: true,
            config: {
                resultsTemplate: novo_elements__WEBPACK_IMPORTED_MODULE_3__["PickerResults"],
                options: ['Apple', 'Banana', 'Grapes', 'Orange', 'Pear'],
            },
        });
        this.textForm = this.formUtils.toFormGroup([this.textControl, this.emailControl, this.numberControl, this.pickerControl]);
    }
    /**
     * @return {?}
     */
    close() {
        this.modalRef.close();
    }
}
ModalEditFormDemo.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'modal-edit-form-demo',
                template: `
  <novo-modal>
    <header title="John Deere" icon="candidate" theme="candidate">
        <utils>
            <util-action icon="times" (click)="close()"></util-action>
        </utils>
    </header>
    <section>
        <novo-form [form]="textForm">
            <div class="novo-form-row">
                <novo-control [form]="textForm" [control]="textControl"></novo-control>
            </div>
            <div class="novo-form-row">
                <novo-control [form]="textForm" [control]="emailControl"></novo-control>
            </div>
            <div class="novo-form-row">
                <novo-control [form]="textForm" [control]="numberControl"></novo-control>
            </div>
            <div class="novo-form-row">
                <novo-control [form]="textForm" [control]="pickerControl"></novo-control>
            </div>
        </novo-form>
    </section>
    <button theme="standard" (click)="close()">Cancel</button>
    <button theme="primary" color="success" icon="check" (click)="close()">Save</button>
  </novo-modal>
`
            }] }
];
/** @nocollapse */
ModalEditFormDemo.ctorParameters = () => [
    { type: novo_elements__WEBPACK_IMPORTED_MODULE_3__["NovoModalRef"] },
    { type: novo_elements__WEBPACK_IMPORTED_MODULE_3__["FormUtils"] }
];
if (false) {}
/**
 * \@title Modal Edit Form Example
 */
class ModalEditFormExample {
    /**
     * @param {?} modalService
     */
    constructor(modalService) {
        this.modalService = modalService;
    }
    /**
     * @return {?}
     */
    showModal() {
        this.modalService.open(ModalEditFormDemo);
    }
}
ModalEditFormExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'modal-edit-form-example',
                template: "<button data-automation-id=\"modal-trigger\" theme=\"secondary\" (click)=\"showModal()\">Show Me :)</button>\n",
                styles: [":host{display:block;background:rgba(0,0,0,.55);padding:35px 0;position:relative;text-align:center}"]
            }] }
];
/** @nocollapse */
ModalEditFormExample.ctorParameters = () => [
    { type: novo_elements__WEBPACK_IMPORTED_MODULE_3__["NovoModalService"] }
];
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: utils/modal/success-modal/success-modal-example.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ModalSuccessDemo {
    /**
     * @param {?} modalRef
     */
    constructor(modalRef) {
        this.modalRef = modalRef;
    }
    /**
     * @return {?}
     */
    close() {
        this.modalRef.close();
    }
}
ModalSuccessDemo.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'modal-success-demo',
                template: `
  <novo-notification type="success">
    <h1>Woooo!</h1>
    <h2>You did something awesome!</h2>
    <button theme="primary" icon="check" (click)="close()">I'm awesome</button>
  </novo-notification>
`
            }] }
];
/** @nocollapse */
ModalSuccessDemo.ctorParameters = () => [
    { type: novo_elements__WEBPACK_IMPORTED_MODULE_3__["NovoModalRef"] }
];
if (false) {}
/**
 * \@title Success Modal Example
 */
class SuccessModalExample {
    /**
     * @param {?} modalService
     */
    constructor(modalService) {
        this.modalService = modalService;
    }
    /**
     * @return {?}
     */
    showModal() {
        this.modalService.open(ModalSuccessDemo);
    }
}
SuccessModalExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'success-modal-example',
                template: "<button data-automation-id=\"modal-trigger\" theme=\"secondary\" (click)=\"showModal()\">Show Me :)</button>\n",
                styles: [":host{display:block;background:rgba(0,0,0,.55);padding:35px 0;position:relative;text-align:center}"]
            }] }
];
/** @nocollapse */
SuccessModalExample.ctorParameters = () => [
    { type: novo_elements__WEBPACK_IMPORTED_MODULE_3__["NovoModalService"] }
];
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: utils/modal/warning-modal/warning-modal-example.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ModalWarningDemo {
    /**
     * @param {?} modalRef
     */
    constructor(modalRef) {
        this.modalRef = modalRef;
    }
    /**
     * @return {?}
     */
    close() {
        this.modalRef.close();
    }
}
ModalWarningDemo.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'modal-warning-demo',
                template: `
  <novo-notification type="warning">
    <h1>This action will delete 25 records.</h1>
    <h2>Are you sure you wish to continue?</h2>
    <button theme="standard" (click)="close()">Cancel</button>
    <button theme="primary" color="negative" icon="delete" (click)="close()">Delete</button>
  </novo-notification>
`
            }] }
];
/** @nocollapse */
ModalWarningDemo.ctorParameters = () => [
    { type: novo_elements__WEBPACK_IMPORTED_MODULE_3__["NovoModalRef"] }
];
if (false) {}
/**
 * \@title Warning Modal Example
 */
class WarningModalExample {
    /**
     * @param {?} modalService
     */
    constructor(modalService) {
        this.modalService = modalService;
    }
    /**
     * @return {?}
     */
    showModal() {
        this.modalService.open(ModalWarningDemo);
    }
}
WarningModalExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'warning-modal-example',
                template: "<button data-automation-id=\"modal-trigger\" theme=\"secondary\" (click)=\"showModal()\">Show Me :)</button>\n",
                styles: [":host{display:block;background:rgba(0,0,0,.55);padding:35px 0;position:relative;text-align:center}"]
            }] }
];
/** @nocollapse */
WarningModalExample.ctorParameters = () => [
    { type: novo_elements__WEBPACK_IMPORTED_MODULE_3__["NovoModalService"] }
];
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: utils/pipes/pluralize/pluralize-example.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@title Pluralize Example
 */
class PluralizeExample {
}
PluralizeExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'pluralize-example',
                template: "<p>{{'Kitty' | plural}}</p>\n<p>{{'Cat' | plural}}</p>\n",
                styles: [""]
            }] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: utils/pop-over/pop-over-auto-placement/pop-over-auto-placement-example.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@title PopOver with Automatic Positioning Example
 */
class PopOverAutoPlacementExample {
}
PopOverAutoPlacementExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'pop-over-auto-placement-example',
                template: "<span popover=\"If the placement of the PopOver will make it appear off-screen, then it will be automatically adjusted to appear on the opposite side. For example: this PopOver should appear below the element.&#13;&#10; &#13;&#10; &#13;&#10;Need to make extra space so this PopOver would actually appear below the screen.\"\n    popoverTitle=\"PopOver Moves to Top if near Bottom of Screen\"\n    popoverPlacement=\"bottom\"\n    [popoverOnHover]=\"true\">\n    Hover Me\n</span>\n<span popover=\"Too small to drop below screen.\"\n    popoverTitle=\"PopOver Won't Change\"\n    popoverPlacement=\"bottom\"\n    [popoverOnHover]=\"true\">\n    Hover Me Next\n</span>\n",
                styles: [":host{margin:auto;padding:20px 30px;position:relative;display:flex}:host>span{cursor:pointer;margin:auto}"]
            }] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: utils/pop-over/pop-over-behaviors/pop-over-behaviors-example.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@title PopOver Behaviors Example
 */
class PopOverBehaviorsExample {
}
PopOverBehaviorsExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'pop-over-behaviors-example',
                template: "<span class=\"popover-element\"\n    popover=\"PopOver appears when hovering over the element. When the mouse is no longer over the element or the PopOver, then it will be dismissed.\"\n    popoverTitle=\"ON HOVER\"\n    popoverPlacement=\"right\"\n    [popoverOnHover]=\"true\">\nON HOVER\n</span>\n\n<span class=\"popover-element\"\n    popover=\"PopOver appears when clicking on the element. Dismiss it by clicking the element again.\"\n    popoverTitle=\"ON CLICK\"\n    popoverPlacement=\"right\">\nON CLICK\n</span>\n\n<span class=\"popover-element\"\n    popover=\"This PopOver has a 2000 ms or 2 second timeout on it. Dismiss it by clicking on the element or waiting for the timeout.\"\n    popoverTitle=\"ON CLICK WITH TIMEOUT\"\n    popoverPlacement=\"right\"\n    [popoverDismissTimeout]=\"2000\">\nON CLICK WITH TIMEOUT\n</span>\n\n<span class=\"popover-element\"\n    popover=\"This PopOver will never appear when clicking on the element or when hovering over the element.\"\n    popoverTitle=\"popoverDisabled\"\n    popoverPlacement=\"right\"\n    [popoverDisabled]=\"true\">\nDISABLED POPOVER\n</span>\n",
                styles: [":host{margin:auto;padding:20px 30px;position:relative;display:flex}:host>span{cursor:pointer;margin:auto}"]
            }] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: utils/pop-over/pop-over-dynamic/pop-over-dynamic-example.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@title PopOver with Dynamic HTML Template Example
 */
class PopOverDynamicExample {
}
PopOverDynamicExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'pop-over-dynamic-example',
                template: "<popover-content\n    #dynamicHtmlPopOver\n    title=\"this header can be omitted\"\n    placement=\"right\">\n\n    <b>Very</b> <span style=\"color: #C21F39\">Dynamic</span> <span style=\"color: #00b3ee\">Reusable</span>\n    <b><i><span style=\"color: #ffc520\">Popover With</span></i></b> <small>Html support</small>. Click outside of this popover and it will be dismissed automatically.\n    <u (click)=\"dynamicHtmlPopOver.hide()\" style=\"cursor: pointer\">Or click here to close it</u> and can listen to the onHidden or onShown events to perform additional tasks.\n</popover-content>\n\n<span [popover]=\"dynamicHtmlPopOver\">Click to see a popover with dynamic html</span>\n",
                styles: [":host{margin:auto;padding:20px 30px;position:relative;display:flex}:host>span{cursor:pointer;margin:auto}"]
            }] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: utils/pop-over/pop-over-horizontal/pop-over-horizontal-example.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@title PopOvers with Horizontal Positioning
 */
class PopOverHorizontalExample {
}
PopOverHorizontalExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'pop-over-horizontal-example',
                template: "<span popover=\"Popover is on the top side and to the right of the element. Can also apply 'left' to 'top' placement PopOvers.\"\n    popoverTitle=\"Top-Right PopOver\"\n    popoverPlacement=\"top-right\"\n    [popoverOnHover]=\"true\">\n    TOP-RIGHT\n</span>\n<span popover=\"Popover is on the bottom side and to the left of the element. Can also apply 'right' to 'bottom' placement PopOvers.\"\n    popoverTitle=\"Bottom-Left PopOver\"\n    popoverPlacement=\"bottom-left\"\n    [popoverOnHover]=\"true\">\n    BOTTOM-LEFT\n</span>\n",
                styles: [":host{margin:auto;padding:20px 30px;position:relative;display:flex}:host>span{cursor:pointer;margin:auto}"]
            }] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: utils/pop-over/pop-over-placement/pop-over-placement-example.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@title PopOver Placement Example
 */
class PopOverPlacementExample {
}
PopOverPlacementExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'pop-over-placement-example',
                template: "<span popover=\"Popover is to left of element\" popoverTitle=\"Left PopOver\" popoverPlacement=\"left\" [popoverOnHover]=\"true\">LEFT</span>\n<span popover=\"Popover is to right of element\" popoverTitle=\"Right PopOver\" popoverPlacement=\"right\" [popoverOnHover]=\"true\">RIGHT</span>\n<span popover=\"Popover is above the element\" popoverTitle=\"Top PopOver\" popoverPlacement=\"top\" [popoverOnHover]=\"true\">TOP</span>\n<span popover=\"Popover is below the element\" popoverTitle=\"Bottom PopOver\" popoverPlacement=\"bottom\" [popoverOnHover]=\"true\">BOTTOM</span>\n",
                styles: [":host{margin:auto;padding:20px 30px;position:relative;display:flex}:host>span{cursor:pointer;margin:auto}"]
            }] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: utils/pop-over/pop-over-vertical/pop-over-vertical-example.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@title PopOvers with Vertical Positioning
 */
class PopOverVerticalExample {
}
PopOverVerticalExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'pop-over-vertical-example',
                template: "<span popover=\"Popover is on the right side and below the element. Can also apply 'top' to 'right' placement PopOvers.\"\n    popoverTitle=\"Right-Bottom PopOver\"\n    popoverPlacement=\"right-bottom\"\n    [popoverOnHover]=\"true\">\n    RIGHT-BOTTOM\n</span>\n<span popover=\"Popover is on the left side and above the element. Can also apply 'bottom' to 'left' placement PopOvers.\"\n    popoverTitle=\"Left-Top PopOver\"\n    popoverPlacement=\"left-top\"\n    [popoverOnHover]=\"true\">\n    LEFT-TOP\n</span>\n",
                styles: [":host{margin:auto;padding:20px 30px;position:relative;display:flex}:host>span{cursor:pointer;margin:auto}"]
            }] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: utils/security/security/security-example.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@title Security Example
 */
class SecurityExample {
    /**
     * @param {?} security
     */
    constructor(security) {
        this.security = security;
        this.perms = [];
    }
    /**
     * @return {?}
     */
    shufflePermissions() {
        /** @type {?} */
        const numOfPerms = Math.floor(Math.random() * 2) + 1;
        this.perms = this.shuffle(['A', 'B', 'C']).slice(0, numOfPerms);
        this.security.clear();
        this.security.grant(this.perms);
    }
    /**
     * @param {?} array
     * @return {?}
     */
    shuffle(array) {
        /** @type {?} */
        let currentIndex = array.length;
        /** @type {?} */
        let temporaryValue;
        /** @type {?} */
        let randomIndex;
        // While there remain elements to shuffle...
        while (currentIndex !== 0) {
            // Pick a remaining element...
            randomIndex = Math.floor(Math.random() * currentIndex);
            currentIndex -= 1;
            // And swap it with the current element.
            temporaryValue = array[currentIndex];
            array[currentIndex] = array[randomIndex];
            array[randomIndex] = temporaryValue;
        }
        return array;
    }
}
SecurityExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'security-example',
                template: "<div>\n    <p *bhUnless=\"'A'\">Shown if has permission <strong>A</strong></p>\n    <p *bhUnless=\"'B'\">Shown if has permission <strong>B</strong></p>\n    <p *bhUnless=\"'C'\">Shown if has permission <strong>C</strong></p>\n    <p *bhUnless=\"'A && B'\">Shown if has permissions <strong>A && B</strong></p>\n    <p *bhUnless=\"'A && C'\">Shown if has permissions <strong>A && C</strong></p>\n    <p *bhUnless=\"'A && B && C'\">Shown if has permissions <strong>A && B && C</strong></p>\n    <p *bhUnless=\"'A || B'\">Shown if has permissions <strong>A || B</strong></p>\n    <p> Permissions are : <strong>{{ perms | json }}</strong></p>\n    <button (click)=\"shufflePermissions()\">Shuffle</button>\n</div>\n",
                styles: [""]
            }] }
];
/** @nocollapse */
SecurityExample.ctorParameters = () => [
    { type: novo_elements__WEBPACK_IMPORTED_MODULE_3__["Security"] }
];
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: utils/tip-well/basic-tip-well/basic-tip-well-example.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@title Basic Tip Well Example
 */
class BasicTipWellExample {
    constructor() {
        this.demoTip = 'Sed sodales ligula et fermentum bibendum. Aliquam tincidunt sagittis leo eget auctor. Fusce eu sagittis metus, ut viverra magna. Mauris mollis nisl nec libero tincidunt posuere.';
    }
    /**
     * @return {?}
     */
    clearLocalStorage() {
        localStorage.removeItem('novo-tw_Demo');
        location.reload();
    }
}
BasicTipWellExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'basic-tip-well-example',
                template: "<novo-tip-well name=\"Demo\" [tip]=\"demoTip\"></novo-tip-well>\n\n<p>Did you hide the TipWell?</p>\n\n<button theme=\"secondary\" (click)=\"clearLocalStorage()\">Reset</button> localStorage and Reload\n",
                styles: [""]
            }] }
];
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: utils/tip-well/buttonless-tip-well/buttonless-tip-well-example.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@title Tip Well with No Button Example
 */
class ButtonlessTipWellExample {
    constructor() {
        this.demoTip = 'Sed sodales ligula et fermentum bibendum. Aliquam tincidunt sagittis leo eget auctor. Fusce eu sagittis metus, ut viverra magna. Mauris mollis nisl nec libero tincidunt posuere.';
    }
    /**
     * @return {?}
     */
    clearLocalStorage() {
        localStorage.removeItem('novo-tw_Demo');
        location.reload();
    }
}
ButtonlessTipWellExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'buttonless-tip-well-example',
                template: "<novo-tip-well name=\"Demo\" [tip]=\"demoTip\" [button]=\"false\"></novo-tip-well>\n\n<p>Did you hide the TipWell?</p>\n\n<button theme=\"secondary\" (click)=\"clearLocalStorage()\">Reset</button> localStorage and Reload\n",
                styles: [""]
            }] }
];
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: utils/tip-well/html-tip-well/html-tip-well-example.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@title Tip Well with HTML Example
 */
class HtmlTipWellExample {
    constructor() {
        this.demoHtmlTip = `
    <h2>Title</h2>
    <p>
      <div style="color:red">This text is RED</div>
      <div><b>This text is BOLD</b></div>
      <div><i>This text is ITALIC</i></div>
    </p>
    <table>
        <tr>
            <th width="305px">Firstname</th>
            <th width="305px">Lastname</th>
            <th>Age</th>
        </tr>
        <tr>
            <td>Jeff</td>
            <td>Smith</td>
            <td>20</td>
        </tr>
        <tr>
            <td>Steve</td>
            <td>White</td>
            <td>25</td>
        </tr>
    </table>`;
    }
    /**
     * @return {?}
     */
    clearLocalStorage() {
        localStorage.removeItem('novo-tw_Demo');
        location.reload();
    }
}
HtmlTipWellExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'html-tip-well-example',
                template: "<novo-tip-well name=\"Demo\" [sanitize]=\"false\" [tip]=\"demoHtmlTip\"></novo-tip-well>\n\n<p>Did you hide the TipWell?</p>\n\n<button theme=\"secondary\" (click)=\"clearLocalStorage()\">Reset</button> localStorage and Reload\n",
                styles: [""]
            }] }
];
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: utils/tip-well/icon-tip-well/icon-tip-well-example.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@title Tip Well with Icon Example
 */
class IconTipWellExample {
    constructor() {
        this.demoTip = 'Sed sodales ligula et fermentum bibendum. Aliquam tincidunt sagittis leo eget auctor. Fusce eu sagittis metus, ut viverra magna. Mauris mollis nisl nec libero tincidunt posuere.';
    }
    /**
     * @return {?}
     */
    clearLocalStorage() {
        localStorage.removeItem('novo-tw_Demo');
        location.reload();
    }
}
IconTipWellExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'icon-tip-well-example',
                template: "<novo-tip-well name=\"Demo\" [tip]=\"demoTip\" icon=\"info\" button=\"false\"></novo-tip-well>\n\n<p>Did you hide the TipWell?</p>\n\n<button theme=\"secondary\" (click)=\"clearLocalStorage()\">Reset</button> localStorage and Reload\n",
                styles: [""]
            }] }
];
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: utils/toaster/toast-service/toast-service-example.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@title Toaster Service Usage
 */
class ToastServiceExample {
    /**
     * @param {?} toaster
     */
    constructor(toaster) {
        this.toaster = toaster;
        this.options = {
            title: 'Title',
            message: 'Some Message...',
        };
    }
    /**
     * @param {?} arg
     * @return {?}
     */
    toastToggled(arg) {
        if (arg === 'top') {
            this.options = {
                title: 'Top',
                message: 'This positioning is fixedTop',
                icon: 'coffee',
                theme: 'success',
                position: 'fixedTop',
            };
        }
        else if (arg === 'bottom') {
            this.options = {
                title: 'Bottom',
                message: 'This positioning is fixedBottom',
                icon: 'check',
                theme: 'warning-outline',
                position: 'fixedBottom',
                hideDelay: 1000000,
            };
        }
        else if (arg === 'growlTopRight') {
            this.options = {
                title: 'Growl',
                message: 'This positioning is growlTopRight',
                icon: 'times',
                theme: 'danger',
                position: 'growlTopRight',
                hideDelay: 100000000,
            };
        }
        else if (arg === 'growlTopLeft') {
            this.options = {
                title: 'Growl',
                message: 'This positioning is growlTopLeft',
                icon: 'coffee',
                theme: 'ocean',
                position: 'growlTopLeft',
                hideDelay: 100000000,
            };
        }
        else if (arg === 'growlBottomRight') {
            this.options = {
                title: 'Growl',
                message: 'This positioning is growlTopRight',
                icon: 'times',
                theme: 'danger',
                position: 'growlBottomRight',
            };
        }
        else if (arg === 'growlBottomLeft') {
            this.options = {
                title: 'Growl',
                message: 'This positioning is growlTopLeft',
                icon: 'coffee',
                theme: 'ocean',
                position: 'growlBottomLeft',
            };
        }
        this.toaster.alert(this.options);
    }
}
ToastServiceExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'toast-service-example',
                template: "<button theme=\"dialogue\" color=\"success\" icon=\"coffee\" (click)=\"toastToggled('top')\" data-automation-id=\"toast-trigger\">Fixed Top</button>\n<button theme=\"dialogue\" color=\"primary\" icon=\"check\" (click)=\"toastToggled('bottom')\">Fixed Bottom</button>\n<button theme=\"dialogue\" color=\"negative\" icon=\"times\" (click)=\"toastToggled('growlTopRight')\">Growl: Top Right</button>\n<button theme=\"dialogue\" color=\"primary\" icon=\"coffee\" (click)=\"toastToggled('growlTopLeft')\">Growl: Top Left</button>\n<button theme=\"dialogue\" color=\"negative\" icon=\"times\" (click)=\"toastToggled('growlBottomRight')\">Growl: Bottom Right</button>\n<button theme=\"dialogue\" color=\"primary\" icon=\"coffee\" (click)=\"toastToggled('growlBottomLeft')\">Growl: Bottom Left</button>\n",
                styles: [""]
            }] }
];
/** @nocollapse */
ToastServiceExample.ctorParameters = () => [
    { type: novo_elements__WEBPACK_IMPORTED_MODULE_3__["NovoToastService"] }
];
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: utils/toaster/toast-usage/toast-usage-example.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@title Static Toast Usage
 */
class ToastUsageExample {
    constructor() {
        this.themes = ['default', 'success', 'info', 'warning', 'danger'];
        this.icons = ['add', 'check', 'clock', 'lock', 'caution'];
        this.toast = {
            theme: 'danger',
            icon: 'caution',
        };
    }
    /**
     * @return {?}
     */
    changeToast() {
        this.toast = {
            theme: this.themes[(this.themes.indexOf(this.toast.theme) + 1) % this.themes.length],
            icon: this.icons[(this.icons.indexOf(this.toast.icon) + 1) % this.icons.length],
        };
    }
}
ToastUsageExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'toast-usage-example',
                template: "<div class=\"fake-card\">\n    <header title=\"John Deere\" icon=\"person\" theme=\"contact\">\n        <utils>\n            <util-action icon=\"flag\"></util-action>\n            <util-action icon=\"refresh\"></util-action>\n            <util-action icon=\"times\"></util-action>\n        </utils>\n    </header>\n    <novo-toast [theme]=\"toast.theme\" [icon]=\"toast.icon\" title=\"Save Failed\" message=\"Oops! Looks like you're missing some required fields\"></novo-toast>\n    <div class=\"content\">\n        <p>\n            Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed\n            do eiusmod tempor incididunt ut labore et dolore\n            magna aliqua. Ut enim ad minim veniam, quis nostrud\n            exercitation ullamco laboris nisi ut aliquip ex ea\n            commodo consequat. Duis aute irure dolor in reprehenderit\n            in voluptate velit esse cillum dolore eu fugiat nulla\n            pariatur. Excepteur sint occaecat cupidatat non proident,\n            sunt in culpa qui officia deserunt mollit anim id\n            est laborum.\n        </p>\n        <button (click)=\"changeToast()\">Change toast!</button>\n    </div>\n</div>\n",
                styles: [""]
            }] }
];
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: utils/tooltip/tooltip-align/tooltip-align-example.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@title Tooltip Align Example
 */
class TooltipAlignExample {
}
TooltipAlignExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'tooltip-align-example',
                template: "<span tooltip=\"bottom-left\" tooltipPosition=\"bottom-left\">Bottom Left</span>\n<span tooltip=\"bottom-right\" tooltipPosition=\"bottom-right\">Bottom Right</span>\n<span tooltip=\"top-left\" tooltipPosition=\"top-left\">Top Left</span>\n<span tooltip=\"top-right\" tooltipPosition=\"top-right\">Top Right</span>\n",
                styles: [""]
            }] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: utils/tooltip/tooltip-options/tooltip-options-example.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@title Tooltip Options Example
 */
class TooltipOptionsExample {
}
TooltipOptionsExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'tooltip-options-example',
                template: "<span tooltip=\"ALWAYS\" tooltipAlways=\"true\">Always Shown</span>\n<span tooltip=\"ROUNDED\" tooltipRounded=\"true\">Rounded</span>\n<span tooltip=\"NO ANIMATE\" tooltipNoAnimate=\"true\">No Animation</span>\n<span tooltip=\"BOUNCE\" tooltipBounce=\"true\">Bounce</span>\n",
                styles: [""]
            }] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: utils/tooltip/tooltip-placement/tooltip-placement-example.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@title Tooltip Placement Example
 */
class TooltipPlacementExample {
}
TooltipPlacementExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'tooltip-placement-example',
                template: "<span tooltip=\"left\" tooltipPosition=\"left\">Left</span>\n<span tooltip=\"right\" tooltipPosition=\"right\">Right</span>\n<span tooltip=\"top\" tooltipPosition=\"top\">Top</span>\n<span tooltip=\"bottom\" tooltipPosition=\"bottom\">Bottom</span>\n",
                styles: [""]
            }] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: utils/tooltip/tooltip-sizes/tooltip-sizes-example.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@title Tooltip Sizes Example
 */
class TooltipSizesExample {
    constructor() {
        this.mediumTooltip = `Lorem Ipsum\n\n is simply dummy text of the printing and typesetting industry.`;
        this.largeTooltip = `Lorem Ipsum\n\n is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.`;
        this.extraLargeTooltip = `Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis placerat nisi at elit molestie, eget dapibus erat mattis. Sed nec est sit amet dolor hendrerit placerat quis vitae sapien. Nulla non consectetur lorem, nec ultricies lacus. Ut maximus eget tortor a bibendum. Vivamus vel mollis magna. Nullam sit amet urna a elit sollicitudin ultrices. Donec scelerisque dolor vel lacus blandit aliquam. Morbi tellus nunc, interdum eget laoreet vitae, tristique a odio. Maecenas ligula nisl, volutpat id augue vel, sollicitudin bibendum massa. Aenean dapibus quam nec ante volutpat, id tincidunt mauris malesuada. Aliquam vitae consectetur justo.

    Nunc vel felis in quam iaculis vulputate eu non erat. Phasellus vel purus eget est elementum tempus a non mauris. Mauris cursus convallis enim, non malesuada felis suscipit vel. Maecenas nec hendrerit erat. Morbi vehicula condimentum mi non gravida. Aenean varius risus arcu. Sed blandit ipsum sit amet tincidunt convallis. Praesent consectetur elementum nisi, sit amet placerat diam commodo at. Vivamus aliquet sagittis libero, id efficitur nisl varius eget. Aenean tempor augue a erat tincidunt hendrerit. Cras et dictum nisl. Sed pulvinar leo quis urna malesuada tincidunt. Sed enim tortor, semper egestas orci pellentesque, scelerisque egestas eros. Aliquam in ex sit amet tortor fringilla convallis.

    Nam ac nulla accumsan, tristique orci tincidunt, condimentum nunc. Fusce eget neque dolor. Vestibulum volutpat, libero non maximus maximus, libero ante semper tellus, et commodo lectus mi nec orci. Donec pretium pharetra cursus. Nam a egestas augue. Sed et condimentum lectus. Sed vel justo semper, convallis ante id, tincidunt nisi. Aliquam non lorem commodo, laoreet diam nec, feugiat dolor.

    Aliquam orci diam, vestibulum et odio id, molestie interdum diam. Donec et molestie mi. Suspendisse potenti. Nam sit amet faucibus nulla. In tincidunt pharetra turpis, fringilla convallis dui scelerisque vel. Orci varius natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Fusce eget tellus sem. Donec ac maximus massa.

    Aliquam vehicula ligula justo, faucibus semper lorem sodales eu. Fusce nec augue quis diam iaculis dapibus. Cras consectetur eros ut nunc cursus, non laoreet dolor rhoncus. In luctus risus sed nunc feugiat, in imperdiet velit euismod. Curabitur sed nunc dapibus, convallis tortor sit amet, interdum sapien. Donec auctor mauris est, ac molestie diam sagittis id. Curabitur pretium metus et ante tincidunt convallis. Aenean quis mollis nulla.`;
    }
}
TooltipSizesExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'tooltip-sizes-example',
                template: "<span tooltip=\"Small Tooltip\" tooltipSize=\"small\" tooltipPosition=\"bottom\" tooltipPreline=\"true\">Small Tooltip</span>\n<span [tooltip]=\"mediumTooltip\" tooltipSize=\"medium\" tooltipPosition=\"left\" tooltipPreline=\"true\">Medium Tooltip</span>\n<span [tooltip]=\"largeTooltip\" tooltipSize=\"large\" tooltipPosition=\"top\" tooltipPreline=\"true\">Large Tooltip</span>\n<span [tooltip]=\"extraLargeTooltip\" tooltipSize=\"extra-large\" tooltipPosition=\"top\" tooltipPreline=\"true\">Extra-Large Tooltip</span>\n",
                styles: [""]
            }] }
];
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: utils/tooltip/tooltip-toggle/tooltip-toggle-example.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@title Tooltip Toggle Example
 */
class TooltipToggleExample {
    /**
     * @return {?}
     */
    toggleTooltip() {
        this.tooltipActive = !this.tooltipActive;
    }
}
TooltipToggleExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'tooltip-toggle-example',
                template: "<span tooltip=\"I HAVE A TOOLTIP!\" [tooltipActive]=\"tooltipActive\">\n    <span *ngIf=\"tooltipActive\">My tooltip can display!</span>\n    <span *ngIf=\"!tooltipActive\">My tooltip is disabled!</span>\n</span>\n<button theme=\"secondary\" (click)=\"toggleTooltip()\">Toggle</button>\n",
                styles: [""]
            }] }
];
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: utils/tooltip/tooltip-types/tooltip-types-example.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@title Tooltip Types Example
 */
class TooltipTypesExample {
}
TooltipTypesExample.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'tooltip-types-example',
                template: "<span tooltip=\"ERROR\" tooltipType=\"error\">Error</span>\n<span tooltip=\"INFO\" tooltipType=\"info\">Info</span>\n<span tooltip=\"WARNING\" tooltipType=\"warning\">Warning</span>\n<span tooltip=\"SUCCESS\" tooltipType=\"success\">Success</span>\n",
                styles: [""]
            }] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: examples.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @record
 */
function LiveExample() { }
if (false) {}
/** @type {?} */
const EXAMPLE_COMPONENTS = {
    'basic-ace': {
        title: 'Basic Ace Editor Example',
        component: BasicAceExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Basic%20Ace%20Editor%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20selector%3A%20'basic-ace-example'%2C%0A%20%20templateUrl%3A%20'basic-ace-example.html'%2C%0A%20%20styleUrls%3A%20%5B'basic-ace-example.css'%5D%2C%0A%7D)%0Aexport%20class%20BasicAceExample%20%7B%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cnovo-ace-editor%3E%3C%2Fnovo-ace-editor%3E%0A`
    },
    'button-dialogue': {
        title: 'Dialogue buttons',
        component: ButtonDialogueExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Dialogue%20buttons%0A%20*%2F%0A%40Component(%7B%0A%20%20selector%3A%20'button-dialogue-example'%2C%0A%20%20templateUrl%3A%20'button-dialogue-example.html'%2C%0A%20%20styleUrls%3A%20%5B'button-dialogue-example.css'%5D%2C%0A%7D)%0Aexport%20class%20ButtonDialogueExample%20%7B%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cbutton%20theme%3D%22dialogue%22%20icon%3D%22addcard%22%3EAdd%20Card%3C%2Fbutton%3E%0A%3Cdiv%20class%3D%22inverse-color%22%3E%0A%20%20%20%20%3Cbutton%20theme%3D%22dialogue%22%20icon%3D%22list-o%22%20side%3D%22left%22%20color%3D%22white%22%20inverse%3EAdd%2FRemove%3C%2Fbutton%3E%0A%3C%2Fdiv%3E%0A%3Cbutton%20theme%3D%22dialogue%22%20icon%3D%22check%22%20color%3D%22success%22%3EDialogue%3C%2Fbutton%3E%0A%3Cbutton%20theme%3D%22dialogue%22%20disabled%3EDialogue%3C%2Fbutton%3E%0A`
    },
    'button-dynamic': {
        title: 'Dynamic buttons',
        component: ButtonDynamicExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Dynamic%20buttons%0A%20*%2F%0A%40Component(%7B%0A%20%20selector%3A%20'button-dynamic-example'%2C%0A%20%20templateUrl%3A%20'button-dynamic-example.html'%2C%0A%20%20styleUrls%3A%20%5B'button-dynamic-example.css'%5D%2C%0A%7D)%0Aexport%20class%20ButtonDynamicExample%20%7B%0A%20%20theme%3A%20string%20%3D%20'primary'%3B%0A%20%20isChecked%3A%20boolean%20%3D%20false%3B%0A%20%20negativeColor%3A%20string%20%3D%20'negative'%3B%0A%20%20color%3A%20string%20%3D%20'blue'%3B%0A%0A%20%20changeTheme()%20%7B%0A%20%20%20%20const%20i%20%3D%20Math.floor(Math.random()%20*%204)%3B%0A%20%20%20%20this.theme%20%3D%20%5B'primary'%2C%20'secondary'%2C%20'dialogue'%2C%20'standard'%2C%20'icon'%5D%5Bi%5D%3B%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cbutton%20%5Btheme%5D%3D%22theme%22%20%5Bicon%5D%3D%22isChecked%20%3F%20'check'%20%3A%20'times'%22%20(click)%3D%22changeTheme()%22%3EChange%20Theme%3C%2Fbutton%3E%0A%3Cnovo-checkbox%20label%3D%22Checked%3F%22%20%5B(ngModel)%5D%3D%22isChecked%22%3E%3C%2Fnovo-checkbox%3E%0A%3Cbutton%20%5Btheme%5D%3D%22theme%22%20%5Bicon%5D%3D%22isChecked%20%3F%20'check'%20%3A%20'times'%22%20(click)%3D%22changeTheme()%22%20%5Bdisabled%5D%3D%22isChecked%22%3EChange%20Theme%3C%2Fbutton%3E%0A`
    },
    'button-fab': {
        title: 'Basic buttons',
        component: ButtonFabExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Basic%20buttons%0A%20*%2F%0A%40Component(%7B%0A%20%20selector%3A%20'button-fab-example'%2C%0A%20%20templateUrl%3A%20'button-fab-example.html'%2C%0A%20%20styleUrls%3A%20%5B'button-fab-example.css'%5D%2C%0A%7D)%0Aexport%20class%20ButtonFabExample%20%7B%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cbutton%20theme%3D%22fab%22%20color%3D%22success%22%20icon%3D%22check%22%3E%3C%2Fbutton%3E%0A%3Cbutton%20theme%3D%22fab%22%20color%3D%22warning%22%20icon%3D%22caution-o%22%3E%3C%2Fbutton%3E%0A%3Cbutton%20theme%3D%22fab%22%20color%3D%22pulse%22%20icon%3D%22next%22%3E%3C%2Fbutton%3E%0A%3Cbutton%20theme%3D%22fab%22%20color%3D%22grapefruit%22%20icon%3D%22print%22%20inverse%3E%3C%2Fbutton%3E%0A%3Cbutton%20theme%3D%22fab%22%20icon%3D%22neutral%22%20inverse%20disabled%3E%3C%2Fbutton%3E%0A`
    },
    'button-icon': {
        title: 'Icon buttons',
        component: ButtonIconExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Icon%20buttons%0A%20*%2F%0A%40Component(%7B%0A%20%20selector%3A%20'button-icon-example'%2C%0A%20%20templateUrl%3A%20'button-icon-example.html'%2C%0A%20%20styleUrls%3A%20%5B'button-icon-example.css'%5D%2C%0A%7D)%0Aexport%20class%20ButtonIconExample%20%7B%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cbutton%20theme%3D%22icon%22%20icon%3D%22print%22%3E%3C%2Fbutton%3E%0A%3Cbutton%20theme%3D%22icon%22%20icon%3D%22print%22%3E%3C%2Fbutton%3E%0A`
    },
    'button-inverse': {
        title: 'Invers buttons',
        component: ButtonInverseExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Invers%20buttons%0A%20*%2F%0A%40Component(%7B%0A%20%20selector%3A%20'button-inverse-example'%2C%0A%20%20templateUrl%3A%20'button-inverse-example.html'%2C%0A%20%20styleUrls%3A%20%5B'button-inverse-example.css'%5D%2C%0A%7D)%0Aexport%20class%20ButtonInverseExample%20%7B%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cdiv%20class%3D%22background%20candidate%22%3E%0A%20%20%3Cbutton%20theme%3D%22secondary%22%20icon%3D%22collapse%22%20inverse%3EActions%3C%2Fbutton%3E%0A%20%20%3Cbutton%20theme%3D%22secondary%22%20icon%3D%22convert%22%20inverse%3EConvert%3C%2Fbutton%3E%0A%20%20%3Cbutton%20theme%3D%22secondary%22%20icon%3D%22convert%22%20inverse%20disabled%3EConvert%3C%2Fbutton%3E%0A%3C%2Fdiv%3E%0A`
    },
    'button-loading': {
        title: 'Loading buttons',
        component: ButtonLoadingExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Loading%20buttons%0A%20*%2F%0A%40Component(%7B%0A%20%20selector%3A%20'button-loading-example'%2C%0A%20%20templateUrl%3A%20'button-loading-example.html'%2C%0A%20%20styleUrls%3A%20%5B'button-loading-example.css'%5D%2C%0A%7D)%0Aexport%20class%20ButtonLoadingExample%20%7B%0A%20%20loading%3A%20boolean%20%3D%20false%3B%0A%20%20loadingButtonText%3A%20string%20%3D%20'Delete'%3B%0A%20%20fakeRequest()%20%7B%0A%20%20%20%20this.loading%20%3D%20true%3B%0A%20%20%20%20this.loadingButtonText%20%3D%20this.loading%20%3F%20'Removing...%20'%20%3A%20'Delete'%3B%0A%20%20%20%20setTimeout(()%20%3D%3E%20%7B%0A%20%20%20%20%20%20this.loading%20%3D%20false%3B%0A%20%20%20%20%20%20this.loadingButtonText%20%3D%20this.loading%20%3F%20'Removing...%20'%20%3A%20'Delete'%3B%0A%20%20%20%20%7D%2C%205000)%3B%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cbutton%20theme%3D%22primary%22%20icon%3D%22times%22%20%5Bloading%5D%3D%22loading%22%20(click)%3D%22fakeRequest()%22%3E%7B%7BloadingButtonText%7D%7D%3C%2Fbutton%3E%0A`
    },
    'button-overview': {
        title: 'Basic buttons',
        component: ButtonOverviewExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Basic%20buttons%0A%20*%2F%0A%40Component(%7B%0A%20%20selector%3A%20'button-overview-example'%2C%0A%20%20templateUrl%3A%20'button-overview-example.html'%2C%0A%20%20styleUrls%3A%20%5B'button-overview-example.css'%5D%2C%0A%7D)%0Aexport%20class%20ButtonOverviewExample%20%7B%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cbutton%20theme%3D%22primary%22%20icon%3D%22next%22%3EPrimary%3C%2Fbutton%3E%0A%3Cbutton%20theme%3D%22secondary%22%3ESecondary%3C%2Fbutton%3E%0A%3Cbutton%20theme%3D%22standard%22%20color%3D%22success%22%20icon%3D%22check%22%3EStandard%3C%2Fbutton%3E%0A%3Cbutton%20theme%3D%22dialogue%22%20color%3D%22pulse%22%20icon%3D%22send%22%3EDialogue%3C%2Fbutton%3E%0A%3Cbutton%20theme%3D%22icon%22%20color%3D%22warning%22%20icon%3D%22caution-o%22%3E%3C%2Fbutton%3E%0A%0A`
    },
    'button-primary': {
        title: 'Primary buttons',
        component: ButtonPrimaryExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Primary%20buttons%0A%20*%2F%0A%40Component(%7B%0A%20%20selector%3A%20'button-primary-example'%2C%0A%20%20templateUrl%3A%20'button-primary-example.html'%2C%0A%20%20styleUrls%3A%20%5B'button-primary-example.css'%5D%2C%0A%7D)%0Aexport%20class%20ButtonPrimaryExample%20%7B%0A%20%20negativeColor%3A%20string%20%3D%20'negative'%3B%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cbutton%20theme%3D%22primary%22%20icon%3D%22next%22%3ENext%3C%2Fbutton%3E%0A%3Cbutton%20theme%3D%22primary%22%20%5Bcolor%5D%3D%22negativeColor%22%20icon%3D%22times%22%3ECancel%3C%2Fbutton%3E%0A%3Cbutton%20theme%3D%22primary%22%20color%3D%22success%22%20icon%3D%22check%22%3ESave%3C%2Fbutton%3E%0A%3Cbutton%20theme%3D%22primary%22%20color%3D%22warning%22%20icon%3D%22caution-o%22%3ECaution%3C%2Fbutton%3E%0A%3Cbutton%20theme%3D%22primary%22%20color%3D%22pulse%22%20icon%3D%22send%22%20disabled%3ESubmit%3C%2Fbutton%3E%0A`
    },
    'button-secondary': {
        title: 'Basic buttons',
        component: ButtonSecondaryExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Basic%20buttons%0A%20*%2F%0A%40Component(%7B%0A%20%20selector%3A%20'button-secondary-example'%2C%0A%20%20templateUrl%3A%20'button-secondary-example.html'%2C%0A%20%20styleUrls%3A%20%5B'button-secondary-example.css'%5D%2C%0A%7D)%0Aexport%20class%20ButtonSecondaryExample%20%7B%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cbutton%20theme%3D%22secondary%22%3ESecondary%3C%2Fbutton%3E%0A%3Cbutton%20theme%3D%22secondary%22%20disabled%3ESecondary%3C%2Fbutton%3E%0A`
    },
    'button-standard': {
        title: 'Basic buttons',
        component: ButtonStandardExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Basic%20buttons%0A%20*%2F%0A%40Component(%7B%0A%20%20selector%3A%20'button-standard-example'%2C%0A%20%20templateUrl%3A%20'button-standard-example.html'%2C%0A%20%20styleUrls%3A%20%5B'button-standard-example.css'%5D%2C%0A%7D)%0Aexport%20class%20ButtonStandardExample%20%7B%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cbutton%20theme%3D%22standard%22%3EStandard%3C%2Fbutton%3E%0A%3Cbutton%20theme%3D%22standard%22%20color%3D%22light%22%3EStandard%3C%2Fbutton%3E%0A%3Cbutton%20theme%3D%22standard%22%20color%3D%22light%22%20disabled%3EStandard%3C%2Fbutton%3E%0A`
    },
    'big-calendar': {
        title: 'Big Calendar Example',
        component: BigCalendarExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0Aimport%20%7B%20CalendarEvent%2C%20CalendarEventResponse%20%7D%20from%20'novo-elements'%3B%0A%0Aconst%20colors%3A%20any%20%3D%20%7B%0A%20%20red%3A%20%7B%0A%20%20%20%20primary%3A%20'%23ad2121'%2C%0A%20%20%20%20secondary%3A%20'%23FAE3E3'%2C%0A%20%20%7D%2C%0A%20%20blue%3A%20%7B%0A%20%20%20%20primary%3A%20'%231e90ff'%2C%0A%20%20%20%20secondary%3A%20'%23D1E8FF'%2C%0A%20%20%7D%2C%0A%20%20yellow%3A%20%7B%0A%20%20%20%20primary%3A%20'%23e3bc08'%2C%0A%20%20%20%20secondary%3A%20'%23FDF1BA'%2C%0A%20%20%7D%2C%0A%20%20green%3A%20%7B%0A%20%20%20%20primary%3A%20'%238CC152'%2C%0A%20%20%20%20secondary%3A%20'%2337BC9B'%2C%0A%20%20%7D%2C%0A%7D%3B%0A%0A%2F**%0A%20*%20%40title%20Big%20Calendar%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20selector%3A%20'big-calendar-example'%2C%0A%20%20templateUrl%3A%20'big-calendar-example.html'%2C%0A%20%20styleUrls%3A%20%5B'big-calendar-example.css'%5D%2C%0A%7D)%0Aexport%20class%20BigCalendarExample%20%7B%0A%20%20public%20views%3A%20Array%3Cany%3E%20%3D%20%5B%0A%20%20%20%20%7B%0A%20%20%20%20%20%20label%3A%20'Month'%2C%0A%20%20%20%20%20%20value%3A%20'month'%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20label%3A%20'Week'%2C%0A%20%20%20%20%20%20value%3A%20'week'%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20label%3A%20'Day'%2C%0A%20%20%20%20%20%20value%3A%20'day'%2C%0A%20%20%20%20%7D%2C%0A%20%20%5D%3B%0A%20%20view%3A%20string%20%3D%20'month'%3B%0A%0A%20%20viewDate%3A%20Date%20%3D%20new%20Date()%3B%0A%20%20events%3A%20CalendarEvent%5B%5D%20%3D%20%5B%0A%20%20%20%20%7B%0A%20%20%20%20%20%20title%3A%20'Interview'%2C%0A%20%20%20%20%20%20description%3A%20'with%20%40bvkimball'%2C%0A%20%20%20%20%20%20color%3A%20colors.green%2C%0A%20%20%20%20%20%20start%3A%20new%20Date()%2C%0A%20%20%20%20%20%20response%3A%20CalendarEventResponse.Rejected%2C%0A%20%20%20%20%20%20type%3A%20'Interview'%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20title%3A%20'Client%20Visit'%2C%0A%20%20%20%20%20%20description%3A%20'with%20%40asibilia'%2C%0A%20%20%20%20%20%20color%3A%20colors.red%2C%0A%20%20%20%20%20%20start%3A%20new%20Date(Date.now()%20%2B%2060000%20*%2030)%2C%0A%20%20%20%20%20%20response%3A%20CalendarEventResponse.Accepted%2C%0A%20%20%20%20%20%20type%3A%20'Visit'%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20title%3A%20'Interview'%2C%0A%20%20%20%20%20%20description%3A%20'with%20%40johndoe'%2C%0A%20%20%20%20%20%20color%3A%20colors.green%2C%0A%20%20%20%20%20%20start%3A%20new%20Date(Date.now()%20%2B%2060000%20*%2090)%2C%0A%20%20%20%20%20%20response%3A%20CalendarEventResponse.Accepted%2C%0A%20%20%20%20%20%20type%3A%20'Interview'%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20title%3A%20'Phone%20Interview'%2C%0A%20%20%20%20%20%20description%3A%20'with%20%40johnsully83'%2C%0A%20%20%20%20%20%20color%3A%20colors.green%2C%0A%20%20%20%20%20%20start%3A%20new%20Date(Date.now()%20%2B%2060000%20*%2090)%2C%0A%20%20%20%20%20%20end%3A%20new%20Date(Date.now()%20%2B%2060000%20*%20180)%2C%0A%20%20%20%20%20%20response%3A%20CalendarEventResponse.Accepted%2C%0A%20%20%20%20%20%20type%3A%20'Interview'%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20title%3A%20'Interview'%2C%0A%20%20%20%20%20%20description%3A%20'with%20%40johnsully83'%2C%0A%20%20%20%20%20%20color%3A%20colors.green%2C%0A%20%20%20%20%20%20start%3A%20new%20Date(Date.now()%20%2B%2060000%20*%2090)%2C%0A%20%20%20%20%20%20end%3A%20new%20Date(Date.now()%20%2B%2060000%20*%20150)%2C%0A%20%20%20%20%20%20response%3A%20CalendarEventResponse.Accepted%2C%0A%20%20%20%20%20%20type%3A%20'Interview'%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20title%3A%20'Final%20Interview'%2C%0A%20%20%20%20%20%20description%3A%20'with%20%40johnsully83'%2C%0A%20%20%20%20%20%20color%3A%20colors.green%2C%0A%20%20%20%20%20%20start%3A%20new%20Date(Date.now()%20%2B%2060000%20*%2090)%2C%0A%20%20%20%20%20%20end%3A%20new%20Date(Date.now()%20%2B%2060000%20*%20120)%2C%0A%20%20%20%20%20%20response%3A%20CalendarEventResponse.Accepted%2C%0A%20%20%20%20%20%20type%3A%20'Interview'%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20title%3A%20'Phone%20Interview'%2C%0A%20%20%20%20%20%20description%3A%20'with%20%40johnsully83'%2C%0A%20%20%20%20%20%20color%3A%20colors.green%2C%0A%20%20%20%20%20%20start%3A%20new%20Date(Date.now()%20%2B%2060000%20*%2090)%2C%0A%20%20%20%20%20%20end%3A%20new%20Date(Date.now()%20%2B%2060000%20*%20180)%2C%0A%20%20%20%20%20%20response%3A%20CalendarEventResponse.Accepted%2C%0A%20%20%20%20%20%20type%3A%20'Interview'%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20title%3A%20'Interview'%2C%0A%20%20%20%20%20%20description%3A%20'with%20%40johnsully83'%2C%0A%20%20%20%20%20%20color%3A%20colors.green%2C%0A%20%20%20%20%20%20start%3A%20new%20Date(Date.now()%20%2B%2060000%20*%2090)%2C%0A%20%20%20%20%20%20end%3A%20new%20Date(Date.now()%20%2B%2060000%20*%20150)%2C%0A%20%20%20%20%20%20response%3A%20CalendarEventResponse.Accepted%2C%0A%20%20%20%20%20%20type%3A%20'Interview'%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20title%3A%20'Final%20Interview'%2C%0A%20%20%20%20%20%20description%3A%20'with%20%40johnsully83'%2C%0A%20%20%20%20%20%20color%3A%20colors.green%2C%0A%20%20%20%20%20%20start%3A%20new%20Date(Date.now()%20%2B%2060000%20*%2090)%2C%0A%20%20%20%20%20%20end%3A%20new%20Date(Date.now()%20%2B%2060000%20*%20120)%2C%0A%20%20%20%20%20%20response%3A%20CalendarEventResponse.Accepted%2C%0A%20%20%20%20%20%20type%3A%20'Interview'%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20title%3A%20'Phone%20Interview'%2C%0A%20%20%20%20%20%20description%3A%20'with%20%40johnsully83'%2C%0A%20%20%20%20%20%20color%3A%20colors.green%2C%0A%20%20%20%20%20%20start%3A%20new%20Date(Date.now()%20%2B%2060000%20*%2090)%2C%0A%20%20%20%20%20%20end%3A%20new%20Date(Date.now()%20%2B%2060000%20*%20180)%2C%0A%20%20%20%20%20%20response%3A%20CalendarEventResponse.Accepted%2C%0A%20%20%20%20%20%20type%3A%20'Interview'%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20title%3A%20'Interview'%2C%0A%20%20%20%20%20%20description%3A%20'with%20%40johnsully83'%2C%0A%20%20%20%20%20%20color%3A%20colors.green%2C%0A%20%20%20%20%20%20start%3A%20new%20Date(Date.now()%20%2B%2060000%20*%2090)%2C%0A%20%20%20%20%20%20end%3A%20new%20Date(Date.now()%20%2B%2060000%20*%20150)%2C%0A%20%20%20%20%20%20response%3A%20CalendarEventResponse.Accepted%2C%0A%20%20%20%20%20%20type%3A%20'Interview'%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20title%3A%20'Final%20Interview'%2C%0A%20%20%20%20%20%20description%3A%20'with%20%40johnsully83'%2C%0A%20%20%20%20%20%20color%3A%20colors.green%2C%0A%20%20%20%20%20%20start%3A%20new%20Date(Date.now()%20%2B%2060000%20*%2090)%2C%0A%20%20%20%20%20%20end%3A%20new%20Date(Date.now()%20%2B%2060000%20*%20120)%2C%0A%20%20%20%20%20%20response%3A%20CalendarEventResponse.Accepted%2C%0A%20%20%20%20%20%20type%3A%20'Interview'%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20title%3A%20'Phone%20Interview'%2C%0A%20%20%20%20%20%20description%3A%20'with%20%40johnsully83'%2C%0A%20%20%20%20%20%20color%3A%20colors.green%2C%0A%20%20%20%20%20%20start%3A%20new%20Date(Date.now()%20%2B%2060000%20*%2075)%2C%0A%20%20%20%20%20%20end%3A%20new%20Date(Date.now()%20%2B%2060000%20*%20120)%2C%0A%20%20%20%20%20%20response%3A%20CalendarEventResponse.Accepted%2C%0A%20%20%20%20%20%20type%3A%20'Interview'%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20title%3A%20'Phone%20Interview'%2C%0A%20%20%20%20%20%20description%3A%20'with%20%40johnsully83'%2C%0A%20%20%20%20%20%20color%3A%20colors.green%2C%0A%20%20%20%20%20%20start%3A%20new%20Date(Date.now()%20%2B%2060000%20*%2075)%2C%0A%20%20%20%20%20%20end%3A%20new%20Date(Date.now()%20%2B%2060000%20*%20150)%2C%0A%20%20%20%20%20%20response%3A%20CalendarEventResponse.Accepted%2C%0A%20%20%20%20%20%20type%3A%20'Interview'%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20title%3A%20'Interview'%2C%0A%20%20%20%20%20%20description%3A%20'with%20%40johnsully83'%2C%0A%20%20%20%20%20%20color%3A%20colors.green%2C%0A%20%20%20%20%20%20start%3A%20new%20Date(Date.now()%20%2B%2060000%20*%20270)%2C%0A%20%20%20%20%20%20end%3A%20new%20Date(Date.now()%20%2B%2060000%20*%20300)%2C%0A%20%20%20%20%20%20response%3A%20CalendarEventResponse.Accepted%2C%0A%20%20%20%20%20%20type%3A%20'Interview'%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20title%3A%20'Final%20Interview'%2C%0A%20%20%20%20%20%20description%3A%20'with%20%40johnsully83'%2C%0A%20%20%20%20%20%20color%3A%20colors.green%2C%0A%20%20%20%20%20%20start%3A%20new%20Date(Date.now()%20%2B%2060000%20*%20270)%2C%0A%20%20%20%20%20%20end%3A%20new%20Date(Date.now()%20%2B%2060000%20*%20360)%2C%0A%20%20%20%20%20%20response%3A%20CalendarEventResponse.Accepted%2C%0A%20%20%20%20%20%20type%3A%20'Interview'%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20title%3A%20'Final%20Interview'%2C%0A%20%20%20%20%20%20description%3A%20'with%20%40johnsully83'%2C%0A%20%20%20%20%20%20color%3A%20colors.green%2C%0A%20%20%20%20%20%20start%3A%20new%20Date(Date.now()%20%2B%2060000%20*%20270)%2C%0A%20%20%20%20%20%20end%3A%20new%20Date(Date.now()%20%2B%2060000%20*%202880000)%2C%0A%20%20%20%20%20%20response%3A%20CalendarEventResponse.Accepted%2C%0A%20%20%20%20%20%20type%3A%20'Interview'%2C%0A%20%20%20%20%7D%2C%0A%20%20%5D%3B%0A%0A%20%20getNewEvent(date%2C%20color%2C%20type)%3A%20CalendarEvent%20%7B%0A%20%20%20%20const%20evt%3A%20CalendarEvent%20%3D%20%7B%0A%20%20%20%20%20%20title%3A%20'Meeting'%2C%0A%20%20%20%20%20%20description%3A%20'with%20%40jgodi'%2C%0A%20%20%20%20%20%20color%2C%0A%20%20%20%20%20%20start%3A%20date%2C%0A%20%20%20%20%20%20response%3A%20type%2C%0A%20%20%20%20%20%20type%3A%20'Meeting'%2C%0A%20%20%20%20%7D%3B%0A%20%20%20%20return%20evt%3B%0A%20%20%7D%0A%0A%20%20dayClicked(date)%20%7B%0A%20%20%20%20const%20evt%3A%20CalendarEvent%20%3D%20this.getNewEvent(date%2C%20colors.blue%2C%20CalendarEventResponse.Maybe)%3B%0A%20%20%20%20this.events.push(evt)%3B%0A%20%20%20%20this.events%20%3D%20%5B...this.events%5D%3B%0A%20%20%7D%0A%0A%20%20addShift(event)%20%7B%0A%20%20%20%20const%20evt%3A%20CalendarEvent%20%3D%20this.getNewEvent(event.day.date%2C%20colors.blue%2C%20CalendarEventResponse.Maybe)%3B%0A%20%20%20%20this.events.push(evt)%3B%0A%20%20%20%20this.events%20%3D%20%5B...this.events%5D%3B%0A%20%20%7D%0A%0A%20%20removeShift(event)%20%7B%0A%20%20%20%20this.events.splice(event.day.events.indexOf(event.event)%2C%201)%3B%0A%20%20%7D%0A%0A%20%20toggleAvailable(event)%20%7B%0A%20%20%20%20let%20evt%3A%20CalendarEvent%3B%0A%20%20%20%20if%20(!event.day.events.length)%20%7B%0A%20%20%20%20%20%20evt%20%3D%20this.getNewEvent(event.day.date%2C%20colors.green%2C%20CalendarEventResponse.Accepted)%3B%0A%20%20%20%20%20%20this.events.push(evt)%3B%0A%20%20%20%20%20%20this.events%20%3D%20%5B...this.events%5D%3B%0A%20%20%20%20%7D%20else%20%7B%0A%20%20%20%20%20%20evt%20%3D%20event.day.events%5B0%5D%3B%0A%20%20%20%20%20%20switch%20(evt.response)%20%7B%0A%20%20%20%20%20%20%20%20case%20CalendarEventResponse.Accepted%3A%0A%20%20%20%20%20%20%20%20%20%20evt.response%20%3D%20CalendarEventResponse.Rejected%3B%0A%20%20%20%20%20%20%20%20%20%20break%3B%0A%20%20%20%20%20%20%20%20case%20CalendarEventResponse.Rejected%3A%0A%20%20%20%20%20%20%20%20%20%20event.day.events%20%3D%20%5B%5D%3B%0A%20%20%20%20%20%20%20%20%20%20break%3B%0A%20%20%20%20%20%20%20%20default%3A%0A%20%20%20%20%20%20%20%20%20%20break%3B%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cdiv%3E%0A%20%20%20%20%3Cnovo-calendar-date-change%20%5Bview%5D%3D%22view%22%20%5B(viewDate)%5D%3D%22viewDate%22%3E%0A%20%20%20%20%3C%2Fnovo-calendar-date-change%3E%0A%0A%20%20%20%20%3Cnovo-tiles%20%5Boptions%5D%3D%22views%22%20%5B(ngModel)%5D%3D%22view%22%3E%3C%2Fnovo-tiles%3E%0A%3C%2Fdiv%3E%0A%3Cdiv%20%5BngSwitch%5D%3D%22view%22%20class%3D%22cal-demo-content%22%3E%0A%20%20%20%20%3Cnovo-calendar-month%20*ngSwitchCase%3D%22'month'%22%20%5B(viewDate)%5D%3D%22viewDate%22%20%5Bevents%5D%3D%22events%22%20(dayClicked)%3D%22dayClicked(%24event.day.date)%22%3E%0A%20%20%20%20%3C%2Fnovo-calendar-month%3E%0A%0A%20%20%20%20%3Cnovo-calendar-week%20*ngSwitchCase%3D%22'week'%22%20%5B(viewDate)%5D%3D%22viewDate%22%20%5Bevents%5D%3D%22events%22%20(dayClicked)%3D%22dayClicked(%24event.date)%22%20%5BdayStartHour%5D%3D%220%22%20%5BdayEndHour%5D%3D%2223%22%3E%0A%20%20%20%20%3C%2Fnovo-calendar-week%3E%0A%0A%20%20%20%20%3Cnovo-calendar-day%20*ngSwitchCase%3D%22'day'%22%20%5B(viewDate)%5D%3D%22viewDate%22%20%5Bevents%5D%3D%22events%22%20%5BdayStartHour%5D%3D%220%22%20%5BdayEndHour%5D%3D%2223%22%3E%0A%20%20%20%20%3C%2Fnovo-calendar-day%3E%0A%3C%2Fdiv%3E%0A`
    },
    'calendar': {
        title: 'Calendar Example',
        component: CalendarExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Calendar%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20selector%3A%20'calendar-example'%2C%0A%20%20templateUrl%3A%20'calendar-example.html'%2C%0A%20%20styleUrls%3A%20%5B'calendar-example.css'%5D%2C%0A%7D)%0Aexport%20class%20CalendarExample%20%7B%0A%20%20public%20dateOne%3A%20Date%3B%0A%20%20public%20dateTwo%3A%20Date%3B%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cdiv%20class%3D%22calendar-demo-side-by-side%22%3E%0A%20%20%20%20%3Cp%3E%0A%20%20%20%20%20%20%20%20%3Clabel%3EValue%20One%3C%2Flabel%3E%20%7B%7B(dateOne%20%7C%20date)%20%7C%7C%20'N%2FA'%7D%7D%0A%0A%20%20%20%20%20%20%20%20%3Clabel%3EValue%20Two%3C%2Flabel%3E%20%7B%7B(dateTwo%20%7C%20date)%20%7C%7C%20'N%2FA'%7D%7D%0A%20%20%20%20%3C%2Fp%3E%0A%20%20%20%20%3Cnovo-date-picker%20%5B(ngModel)%5D%3D%22dateOne%22%20minYear%3D%222000%22%20maxYear%3D%222020%22%3E%3C%2Fnovo-date-picker%3E%0A%20%20%20%20%3Cnovo-date-picker%20%5B(ngModel)%5D%3D%22dateTwo%22%3E%3C%2Fnovo-date-picker%3E%0A%3C%2Fdiv%3E%0A`
    },
    'range': {
        title: 'Range Example',
        component: RangeExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Range%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20selector%3A%20'range-example'%2C%0A%20%20templateUrl%3A%20'range-example.html'%2C%0A%20%20styleUrls%3A%20%5B'range-example.css'%5D%2C%0A%7D)%0Aexport%20class%20RangeExample%20%7B%0A%20%20public%20value%3A%20any%20%3D%20%7B%20startDate%3A%20null%2C%20endDate%3A%20null%20%7D%3B%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cdiv%20class%3D%22calendar-demo-side-by-side%22%3E%0A%20%20%20%20%3Cp%3E%0A%20%20%20%20%20%20%20%20%3Clabel%3EStart%20date%3C%2Flabel%3E%20%7B%7B(value%3F.startDate%20%7C%20date)%20%7C%7C%20'N%2FA'%7D%7D%0A%0A%20%20%20%20%20%20%20%20%3Clabel%3EEnd%20date%3C%2Flabel%3E%20%7B%7B(value%3F.endDate%20%7C%20date)%20%7C%7C%20'N%2FA'%7D%7D%0A%20%20%20%20%3C%2Fp%3E%0A%20%20%20%20%3Cnovo-date-picker%20%5B(ngModel)%5D%3D%22value%22%20range%3D%22true%22%3E%3C%2Fnovo-date-picker%3E%0A%3C%2Fdiv%3E%0A`
    },
    'time': {
        title: 'Time Example',
        component: TimeExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Time%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20selector%3A%20'time-example'%2C%0A%20%20templateUrl%3A%20'time-example.html'%2C%0A%20%20styleUrls%3A%20%5B'time-example.css'%5D%2C%0A%7D)%0Aexport%20class%20TimeExample%20%7B%0A%20%20public%20time%3A%20Date%3B%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cdiv%20class%3D%22calendar-demo-side-by-side%22%3E%0A%20%20%20%20%3Cp%3E%0A%20%20%20%20%20%20%20%20%3Clabel%3EValue%3C%2Flabel%3E%20%7B%7B(time%20%7C%20date%3A'mediumTime')%20%7C%7C%20'N%2FA'%7D%7D%0A%20%20%20%20%3C%2Fp%3E%0A%20%20%20%20%3Cnovo-time-picker%20%5B(ngModel)%5D%3D%22time%22%3E%3C%2Fnovo-time-picker%3E%0A%20%20%20%20%3Cnovo-time-picker%20%5B(ngModel)%5D%3D%22time%22%20military%3D%22true%22%3E%3C%2Fnovo-time-picker%3E%0A%3C%2Fdiv%3E%0A`
    },
    'data-table-remote': {
        title: 'Remote Data Table Example',
        component: DataTableRemoteExample,
        tsSource: `import%20%7B%20Component%2C%20ChangeDetectionStrategy%2C%20ChangeDetectorRef%2C%20ViewChild%20%7D%20from%20'%40angular%2Fcore'%3B%0Aimport%20%7B%20delay%20%7D%20from%20'rxjs%2Foperators'%3B%0Aimport%20*%20as%20dateFns%20from%20'date-fns'%3B%0Aimport%20%7B%20Subject%2C%20Observable%2C%20of%20%7D%20from%20'rxjs'%3B%0A%0Aimport%20%7B%0A%20%20IDataTableColumn%2C%0A%20%20RemoteDataTableService%2C%0A%20%20IDataTablePaginationOptions%2C%0A%20%20IDataTableSearchOptions%2C%0A%20%20NovoModalService%2C%0A%20%20IDataTablePreferences%2C%0A%20%20IDataTableFilter%2C%0A%20%20Helpers%2C%0A%7D%20from%20'novo-elements'%3B%0A%0Aimport%20%7B%20ConfigureColumnsModal%2C%20MockData%20%7D%20from%20'..%2Fextras'%3B%0A%0A%2F**%0A%20*%20%40title%20Remote%20Data%20Table%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20selector%3A%20'data-table-remote-example'%2C%0A%20%20templateUrl%3A%20'data-table-remote-example.html'%2C%0A%20%20styleUrls%3A%20%5B'data-table-remote-example.css'%5D%2C%0A%20%20changeDetection%3A%20ChangeDetectionStrategy.OnPush%2C%0A%7D)%0Aexport%20class%20DataTableRemoteExample%20%7B%0A%20%20%2F%2F%20Table%20configuration%0A%20%20public%20dataSetOptions%3A%20any%5B%5D%20%3D%20%5B%7B%20label%3A%20'Dataset%20%231'%2C%20value%3A%201%20%7D%2C%20%7B%20label%3A%20'Dataset%20%232'%2C%20value%3A%202%20%7D%2C%20%7B%20label%3A%20'Dataset%20%233'%2C%20value%3A%203%20%7D%5D%3B%0A%20%20public%20loadedDataSet%3A%20number%20%3D%201%3B%0A%20%20public%20paginationTypeOptions%3A%20any%5B%5D%20%3D%20%5B%7B%20label%3A%20'Standard'%2C%20value%3A%20'standard'%20%7D%2C%20%7B%20label%3A%20'Basic'%2C%20value%3A%20'basic'%20%7D%5D%3B%0A%20%20public%20loadedPaginationType%3A%20string%20%3D%20'standard'%3B%0A%20%20public%20globalSearchOptions%3A%20any%5B%5D%20%3D%20%5B%7B%20label%3A%20'Show'%2C%20value%3A%20true%20%7D%2C%20%7B%20label%3A%20'Hide'%2C%20value%3A%20false%20%7D%5D%3B%0A%20%20public%20loadedGlobalSearch%3A%20boolean%20%3D%20false%3B%0A%0A%20%20%2F%2F%20Shared%20configuration%0A%20%20public%20sharedColumns%3A%20IDataTableColumn%3CMockData%3E%5B%5D%20%3D%20%5B%0A%20%20%20%20%7B%0A%20%20%20%20%20%20id%3A%20'preview'%2C%0A%20%20%20%20%20%20type%3A%20'action'%2C%0A%20%20%20%20%20%20enabled%3A%20true%2C%0A%20%20%20%20%20%20handlers%3A%20%7B%0A%20%20%20%20%20%20%20%20click%3A%20this.log.bind(this)%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20action%3A%20%7B%0A%20%20%20%20%20%20%20%20icon%3A%20'preview'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20id%3A%20'actions'%2C%0A%20%20%20%20%20%20type%3A%20'action'%2C%0A%20%20%20%20%20%20label%3A%20'Actions'%2C%0A%20%20%20%20%20%20enabled%3A%20true%2C%0A%20%20%20%20%20%20action%3A%20%7B%0A%20%20%20%20%20%20%20%20options%3A%20%5B%0A%20%20%20%20%20%20%20%20%20%20%7B%20label%3A%20'Action%201'%2C%20handlers%3A%20%7B%20click%3A%20this.log.bind(this)%20%7D%20%7D%2C%0A%20%20%20%20%20%20%20%20%20%20%7B%20label%3A%20'Action%202'%2C%20handlers%3A%20%7B%20click%3A%20this.log.bind(this)%20%7D%2C%20disabled%3A%20true%20%7D%2C%0A%20%20%20%20%20%20%20%20%20%20%7B%20label%3A%20'Action%203'%2C%20handlers%3A%20%7B%20click%3A%20this.log.bind(this)%20%7D%2C%20disabledFunc%3A%20this.checkDisabled.bind(this)%20%7D%2C%0A%20%20%20%20%20%20%20%20%5D%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20id%3A%20'id'%2C%0A%20%20%20%20%20%20label%3A%20'ID'%2C%0A%20%20%20%20%20%20enabled%3A%20true%2C%0A%20%20%20%20%20%20type%3A%20'text'%2C%0A%20%20%20%20%20%20filterable%3A%20%7B%0A%20%20%20%20%20%20%20%20type%3A%20'number'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20sortable%3A%20true%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20id%3A%20'telephone'%2C%0A%20%20%20%20%20%20label%3A%20'Phone'%2C%0A%20%20%20%20%20%20type%3A%20'link%3Atel'%2C%0A%20%20%20%20%20%20attributes%3A%20%7B%0A%20%20%20%20%20%20%20%20target%3A%20'_blank'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20id%3A%20'email'%2C%0A%20%20%20%20%20%20label%3A%20'Email'%2C%0A%20%20%20%20%20%20type%3A%20'link%3Amailto'%2C%0A%20%20%20%20%20%20attributes%3A%20%7B%0A%20%20%20%20%20%20%20%20target%3A%20'_blank'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20id%3A%20'address'%2C%0A%20%20%20%20%20%20label%3A%20'Address'%2C%0A%20%20%20%20%20%20type%3A%20'text'%2C%0A%20%20%20%20%20%20format%3A%20%5B'%24city%2C%20%24state'%2C%20'%24city'%2C%20'%24state'%5D%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20id%3A%20'embeddedObj'%2C%0A%20%20%20%20%20%20label%3A%20'Embedded%20(hard)'%2C%0A%20%20%20%20%20%20enabled%3A%20true%2C%0A%20%20%20%20%20%20format%3A%20%5B'%24another.id'%2C%20'%24firstName%20%24lastName'%5D%2C%0A%20%20%20%20%20%20type%3A%20'link'%2C%0A%20%20%20%20%20%20handlers%3A%20%7B%0A%20%20%20%20%20%20%20%20click%3A%20this.log.bind(this)%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20filterable%3A%20true%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20id%3A%20'simpleEmbeddedObj'%2C%0A%20%20%20%20%20%20label%3A%20'Embedded%20(simple)'%2C%0A%20%20%20%20%20%20enabled%3A%20true%2C%0A%20%20%20%20%20%20format%3A%20'%24id'%2C%0A%20%20%20%20%20%20type%3A%20'text'%2C%0A%20%20%20%20%20%20filterable%3A%20true%2C%0A%20%20%20%20%20%20sortable%3A%20true%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20id%3A%20'date'%2C%0A%20%20%20%20%20%20label%3A%20'Date'%2C%0A%20%20%20%20%20%20enabled%3A%20true%2C%0A%20%20%20%20%20%20type%3A%20'date'%2C%0A%20%20%20%20%20%20filterable%3A%20%7B%0A%20%20%20%20%20%20%20%20type%3A%20'date'%2C%0A%20%20%20%20%20%20%20%20allowCustomRange%3A%20true%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20sortable%3A%20true%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20id%3A%20'dateTime'%2C%0A%20%20%20%20%20%20label%3A%20'DateTime'%2C%0A%20%20%20%20%20%20enabled%3A%20false%2C%0A%20%20%20%20%20%20type%3A%20'datetime'%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20id%3A%20'time'%2C%0A%20%20%20%20%20%20label%3A%20'Time'%2C%0A%20%20%20%20%20%20enabled%3A%20false%2C%0A%20%20%20%20%20%20type%3A%20'time'%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20id%3A%20'money'%2C%0A%20%20%20%20%20%20label%3A%20'Money'%2C%0A%20%20%20%20%20%20enabled%3A%20false%2C%0A%20%20%20%20%20%20type%3A%20'currency'%2C%0A%20%20%20%20%20%20filterable%3A%20true%2C%0A%20%20%20%20%20%20sortable%3A%20true%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20id%3A%20'percent'%2C%0A%20%20%20%20%20%20label%3A%20'Percent'%2C%0A%20%20%20%20%20%20enabled%3A%20true%2C%0A%20%20%20%20%20%20type%3A%20'percent'%2C%0A%20%20%20%20%20%20filterable%3A%20true%2C%0A%20%20%20%20%20%20sortable%3A%20true%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20id%3A%20'name'%2C%0A%20%20%20%20%20%20label%3A%20'Name'%2C%0A%20%20%20%20%20%20labelIcon%3A%20'bull'%2C%0A%20%20%20%20%20%20enabled%3A%20true%2C%0A%20%20%20%20%20%20type%3A%20'text'%2C%0A%20%20%20%20%20%20template%3A%20'custom'%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20id%3A%20'status'%2C%0A%20%20%20%20%20%20label%3A%20'Status'%2C%0A%20%20%20%20%20%20enabled%3A%20true%2C%0A%20%20%20%20%20%20type%3A%20'text'%2C%0A%20%20%20%20%20%20filterable%3A%20true%2C%0A%20%20%20%20%20%20sortable%3A%20true%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20id%3A%20'priority'%2C%0A%20%20%20%20%20%20label%3A%20'Priority'%2C%0A%20%20%20%20%20%20enabled%3A%20true%2C%0A%20%20%20%20%20%20type%3A%20'text'%2C%0A%20%20%20%20%20%20filterable%3A%20%7B%0A%20%20%20%20%20%20%20%20type%3A%20'multi-select'%2C%0A%20%20%20%20%20%20%20%20options%3A%20this.getPriorityOptions()%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20sortable%3A%20true%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20id%3A%20'enabled'%2C%0A%20%20%20%20%20%20label%3A%20'Enabled'%2C%0A%20%20%20%20%20%20enabled%3A%20true%2C%0A%20%20%20%20%20%20type%3A%20'text'%2C%0A%20%20%20%20%20%20sortable%3A%20true%2C%0A%20%20%20%20%20%20filterable%3A%20%7B%0A%20%20%20%20%20%20%20%20type%3A%20'select'%2C%0A%20%20%20%20%20%20%20%20options%3A%20%5B%7B%20value%3A%20true%2C%20label%3A%20'True'%20%7D%2C%20%7B%20value%3A%20false%2C%20label%3A%20'False'%20%7D%5D%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20id%3A%20'edit'%2C%0A%20%20%20%20%20%20type%3A%20'action'%2C%0A%20%20%20%20%20%20enabled%3A%20true%2C%0A%20%20%20%20%20%20disabled%3A%20true%2C%0A%20%20%20%20%20%20handlers%3A%20%7B%0A%20%20%20%20%20%20%20%20click%3A%20this.log.bind(this)%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20action%3A%20%7B%0A%20%20%20%20%20%20%20%20icon%3A%20'edit'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%7D%2C%0A%20%20%5D%3B%0A%20%20public%20sharedDisplayColumns%20%3D%20%5B%0A%20%20%20%20'selection'%2C%0A%20%20%20%20'expand'%2C%0A%20%20%20%20'preview'%2C%0A%20%20%20%20'actions'%2C%0A%20%20%20%20'id'%2C%0A%20%20%20%20'date'%2C%0A%20%20%20%20'name'%2C%0A%20%20%20%20'telephone'%2C%0A%20%20%20%20'email'%2C%0A%20%20%20%20'simpleEmbeddedObj'%2C%0A%20%20%20%20'status'%2C%0A%20%20%20%20'priority'%2C%0A%20%20%20%20'percent'%2C%0A%20%20%20%20'embeddedObj'%2C%0A%20%20%20%20'edit'%2C%0A%20%20%5D%3B%0A%20%20public%20sharedPaginationOptions%3A%20IDataTablePaginationOptions%20%3D%20%7B%0A%20%20%20%20theme%3A%20'standard'%2C%0A%20%20%20%20pageSize%3A%2010%2C%0A%20%20%20%20pageSizeOptions%3A%20%5B10%2C%2050%2C%20100%2C%20250%2C%20500%5D%2C%0A%20%20%7D%3B%0A%20%20public%20widePaginationOptions%3A%20IDataTablePaginationOptions%20%3D%20%7B%0A%20%20%20%20theme%3A%20'basic-wide'%2C%0A%20%20%20%20pageSize%3A%2010%2C%0A%20%20%20%20pageSizeOptions%3A%20%5B10%2C%2050%2C%20100%2C%20250%2C%20500%5D%2C%0A%20%20%7D%3B%0A%20%20public%20sharedSearchOptions%3A%20IDataTableSearchOptions%20%3D%20%7B%0A%20%20%20%20placeholder%3A%20'Search%20for%20things...'%2C%0A%20%20%20%20tooltip%3A%20'HELLO'%2C%0A%20%20%7D%3B%0A%20%20public%20sharedDefaultSort%3A%20%7B%20id%3A%20string%3B%20value%3A%20string%20%7D%20%3D%20%7B%0A%20%20%20%20id%3A%20'id'%2C%0A%20%20%20%20value%3A%20'asc'%2C%0A%20%20%7D%3B%0A%20%20public%20globalSearchEnabled%3A%20boolean%20%3D%20false%3B%0A%20%20public%20refreshSubject%3A%20Subject%3Cboolean%3E%20%3D%20new%20Subject()%3B%0A%0A%20%20%2F%2F%20Remote%20configuration%0A%20%20public%20remoteService%3A%20RemoteDataTableService%3CMockData%3E%3B%0A%0A%20%20private%20staticDataSet1%3A%20MockData%5B%5D%20%3D%20%5B%5D%3B%0A%0A%20%20constructor(private%20ref%3A%20ChangeDetectorRef%2C%20private%20modalService%3A%20NovoModalService)%20%7B%0A%20%20%20%20for%20(let%20i%20%3D%200%3B%20i%20%3C%201000%3B%20i%2B%2B)%20%7B%0A%20%20%20%20%20%20const%20day%20%3D%20i%20%3C%20500%20%3F%20dateFns.subDays(new%20Date()%2C%20i)%20%3A%20dateFns.addDays(new%20Date()%2C%20i%20-%20500)%3B%0A%20%20%20%20%20%20this.staticDataSet1.push(%7B%0A%20%20%20%20%20%20%20%20id%3A%20i%2C%0A%20%20%20%20%20%20%20%20embeddedObj%3A%20%7B%20id%3A%20i%2C%20test%3A%20%60HMM%20%24%7Bi%7D%60%2C%20another%3A%20%7B%20id%3A%20777%20%7D%20%7D%2C%0A%20%20%20%20%20%20%20%20simpleEmbeddedObj%3A%20%7B%20id%3A%20i%20%7D%2C%0A%20%20%20%20%20%20%20%20name%3A%20%60(1)%20Name%20%24%7Bi%7D%60%2C%0A%20%20%20%20%20%20%20%20status%3A%20%60(1)%20Status%20%24%7Bi%7D%60%2C%0A%20%20%20%20%20%20%20%20priority%3A%20this.getPriority()%2C%0A%20%20%20%20%20%20%20%20enabled%3A%20i%20%25%202%20%3D%3D%3D%200%2C%0A%20%20%20%20%20%20%20%20date%3A%20day%2C%0A%20%20%20%20%20%20%20%20dateTime%3A%20day%2C%0A%20%20%20%20%20%20%20%20time%3A%20day%2C%0A%20%20%20%20%20%20%20%20money%3A%20i%20%2B%2010%2C%0A%20%20%20%20%20%20%20%20percent%3A%20i%20%2F%20100%2C%0A%20%20%20%20%20%20%20%20telephone%3A%20'555-555-5555'%2C%0A%20%20%20%20%20%20%20%20email%3A%20'test%40google.com'%2C%0A%20%20%20%20%20%20%20%20address%3A%20%7B%20city%3A%20'City'%2C%20state%3A%20null%20%7D%2C%0A%20%20%20%20%20%20%7D)%3B%0A%20%20%20%20%7D%0A%20%20%20%20this.remoteService%20%3D%20new%20RemoteMockDataService(%5B...this.staticDataSet1.slice(0%2C%2010)%5D)%3B%0A%20%20%7D%0A%0A%20%20public%20getPriority()%3A%20string%20%7B%0A%20%20%20%20const%20x%20%3D%20Math.round(Math.random()%20*%2050)%3B%0A%20%20%20%20return%20'test%20'%20%2B%20x.toString()%3B%0A%20%20%7D%0A%0A%20%20public%20getPriorityOptions()%20%7B%0A%20%20%20%20const%20options%20%3D%20new%20Array()%3B%0A%20%20%20%20let%20i%3B%0A%20%20%20%20for%20(i%20%3D%200%3B%20i%20%3C%2049%3B%20i%2B%2B)%20%7B%0A%20%20%20%20%20%20options.push('test%20'%20%2B%20i.toString())%3B%0A%20%20%20%20%7D%0A%20%20%20%20return%20options%3B%0A%20%20%7D%0A%0A%20%20public%20switchPaginationType(type%3A%20'basic'%20%7C%20'standard')%20%7B%0A%20%20%20%20this.sharedPaginationOptions%20%3D%20Object.assign(%7B%7D%2C%20this.sharedPaginationOptions%2C%20%7B%20theme%3A%20type%20%7D)%3B%0A%20%20%20%20this.ref.detectChanges()%3B%0A%20%20%7D%0A%0A%20%20public%20toggleGlobalSearch(toggle%3A%20boolean)%3A%20void%20%7B%0A%20%20%20%20this.globalSearchEnabled%20%3D%20toggle%3B%0A%20%20%20%20this.ref.detectChanges()%3B%0A%20%20%7D%0A%0A%20%20public%20log(event%3A%20%7B%20originalEvent%3A%20MouseEvent%3B%20row%3A%20MockData%20%7D)%3A%20void%20%7B%0A%20%20%20%20console.log('%5BDataTable%5D%20Event%20Triggered!'%2C%20event)%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%7D%0A%0A%20%20public%20checkDisabled(row%3A%20MockData)%3A%20boolean%20%7B%0A%20%20%20%20return%20true%3B%0A%20%20%7D%0A%0A%20%20public%20configureColumns()%3A%20void%20%7B%0A%20%20%20%20this.modalService%0A%20%20%20%20%20%20.open(ConfigureColumnsModal%2C%20%7B%20columns%3A%20this.sharedColumns%20%7D)%0A%20%20%20%20%20%20.onClosed.then((columns%3A%20IDataTableColumn%3CMockData%3E%5B%5D)%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20if%20(columns)%20%7B%0A%20%20%20%20%20%20%20%20%20%20const%20enabledColumns%20%3D%20columns.filter((column%3A%20IDataTableColumn%3CMockData%3E)%20%3D%3E%20column.enabled)%3B%0A%20%20%20%20%20%20%20%20%20%20this.sharedDisplayColumns%20%3D%20%5B'selection'%2C%20'expand'%2C%20...enabledColumns.map((column%3A%20IDataTableColumn%3CMockData%3E)%20%3D%3E%20column.id)%5D%3B%0A%20%20%20%20%20%20%20%20%20%20this.ref.markForCheck()%3B%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%7D)%3B%0A%20%20%7D%0A%0A%20%20public%20onPreferencesChanged(event%3A%20IDataTablePreferences)%3A%20void%20%7B%0A%20%20%20%20console.log('Preferences%20changed%20(persist%20manually)%3A'%2C%20event)%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%7D%0A%0A%20%20public%20refresh()%3A%20void%20%7B%0A%20%20%20%20this.refreshSubject.next()%3B%0A%20%20%7D%0A%7D%0A%0Aclass%20RemoteMockDataService%20extends%20RemoteDataTableService%3CMockData%3E%20%7B%0A%20%20public%20url%3A%20string%3B%0A%0A%20%20constructor(private%20data%3A%20MockData%5B%5D)%20%7B%0A%20%20%20%20super()%3B%0A%20%20%7D%0A%0A%20%20public%20getTableResults(%0A%20%20%20%20sort%3A%20%7B%20id%3A%20string%3B%20value%3A%20string%3B%20transform%3F%3A%20Function%20%7D%2C%0A%20%20%20%20filter%3A%20IDataTableFilter%20%7C%20IDataTableFilter%5B%5D%2C%0A%20%20%20%20page%3A%20number%2C%0A%20%20%20%20pageSize%3A%20number%2C%0A%20%20%20%20globalSearch%3F%3A%20string%2C%0A%20%20)%3A%20Observable%3C%7B%20results%3A%20MockData%5B%5D%3B%20total%3A%20number%20%7D%3E%20%7B%0A%20%20%20%20const%20whereQuery%3A%20string%20%3D%20this.buildWhereClause(filter)%3B%0A%20%20%20%20const%20sortQuery%3A%20string%20%3D%20this.buildSortColumn(sort)%3B%0A%20%20%20%20const%20pageQuery%3A%20number%20%3D%20this.buildStart(page%2C%20pageSize)%3B%0A%20%20%20%20this.url%20%3D%20%60http%3A%2F%2Fmock-api.com%3Fwhere%3D%24%7BwhereQuery%7D%26sort%3D%24%7BsortQuery%7D%26pageSize%3D%24%7BpageSize%7D%26page%3D%24%7BpageQuery%7D%60%3B%0A%20%20%20%20return%20of(%7B%20results%3A%20this.data%2C%20total%3A%20this.data.length%20%7D).pipe(delay(5000))%3B%0A%20%20%7D%0A%0A%20%20private%20buildWhereClause(filter%3A%20IDataTableFilter%20%7C%20IDataTableFilter%5B%5D)%3A%20string%20%7B%0A%20%20%20%20const%20query%3A%20any%20%3D%20%7B%7D%3B%0A%20%20%20%20if%20(filter)%20%7B%0A%20%20%20%20%20%20const%20filters%20%3D%20Helpers.convertToArray(filter)%3B%0A%20%20%20%20%20%20filters.forEach((aFilter)%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20query%5BaFilter.id%5D%20%3D%20aFilter.transform%20%3F%20aFilter.transform(aFilter.value)%20%3A%20aFilter.value%3B%0A%20%20%20%20%20%20%7D)%3B%0A%20%20%20%20%7D%0A%20%20%20%20return%20this.toQuerySyntax(query)%3B%0A%20%20%7D%0A%0A%20%20private%20buildSortColumn(sort%3A%20%7B%20id%3A%20string%3B%20value%3A%20string%3B%20transform%3F%3A%20Function%20%7D)%3A%20string%20%7B%0A%20%20%20%20if%20(sort)%20%7B%0A%20%20%20%20%20%20let%20value%20%3D%20sort.id%3B%0A%20%20%20%20%20%20if%20(sort.transform)%20%7B%0A%20%20%20%20%20%20%20%20value%20%3D%20sort.transform(value)%3B%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20return%20sort.value%20%3D%3D%3D%20'asc'%20%3F%20value%20%3A%20%60-%24%7Bvalue%7D%60%3B%0A%20%20%20%20%7D%0A%20%20%20%20return%20''%3B%0A%20%20%7D%0A%0A%20%20private%20buildStart(page%3A%20number%2C%20pageSize%3A%20number)%3A%20number%20%7B%0A%20%20%20%20return%20(page%20%7C%7C%200)%20*%20pageSize%3B%0A%20%20%7D%0A%0A%20%20private%20toQuerySyntax(data%3A%20any)%20%7B%0A%20%20%20%20const%20queries%3A%20Array%3Cstring%3E%20%3D%20%5B%5D%3B%0A%20%20%20%20for%20(const%20key%20in%20data)%20%7B%0A%20%20%20%20%20%20const%20value%20%3D%20data%5Bkey%5D%3B%0A%20%20%20%20%20%20if%20(key%20%3D%3D%3D%20'or')%20%7B%0A%20%20%20%20%20%20%20%20queries.push(%60(%24%7Bthis.toQuerySyntax(value).replace(%2F%20AND%20%2Fg%2C%20'%20OR%20')%7D)%60)%3B%0A%20%20%20%20%20%20%7D%20else%20%7B%0A%20%20%20%20%20%20%20%20queries.push(this.parseQueryValue(key%2C%20value))%3B%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A%0A%20%20%20%20return%20queries.join('%20AND%20')%3B%0A%20%20%7D%0A%0A%20%20private%20parseQueryValue(key%3A%20string%2C%20value%3A%20any%2C%20isNot%3A%20boolean%20%3D%20false)%20%7B%0A%20%20%20%20const%20clauses%3A%20Array%3Cstring%3E%20%3D%20%5B%5D%2C%0A%20%20%20%20%20%20IN%20%3D%20isNot%20%3F%20'%20NOT%20IN%20'%20%3A%20'%20IN%20'%2C%0A%20%20%20%20%20%20EQ%20%3D%20isNot%20%3F%20'%3C%3E'%20%3A%20'%3D'%2C%0A%20%20%20%20%20%20GT%20%3D%20isNot%20%3F%20'%3C'%20%3A%20'%3E%3D'%2C%0A%20%20%20%20%20%20LT%20%3D%20isNot%20%3F%20'%3E%3D'%20%3A%20'%3C'%3B%0A%20%20%20%20if%20(Array.isArray(value))%20%7B%0A%20%20%20%20%20%20clauses.push(%60%24%7Bkey%7D%24%7BIN%7D(%24%7Bthis.writeQueryValues(value)%7D)%60)%3B%0A%20%20%20%20%7D%20else%20if%20(value%20instanceof%20Object)%20%7B%0A%20%20%20%20%20%20if%20(typeof%20value.isNull%20%3D%3D%3D%20'boolean')%20%7B%0A%20%20%20%20%20%20%20%20const%20query%3A%20string%20%3D%20value.isNull%20%3F%20'IS%20NULL'%20%3A%20'IS%20NOT%20NULL'%3B%0A%20%20%20%20%20%20%20%20clauses.push(%60%24%7Bkey%7D%20%24%7Bquery%7D%60)%3B%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20if%20(value.min%20!%3D%3D%20null%20%26%26%20value.min%20!%3D%3D%20undefined)%20%7B%0A%20%20%20%20%20%20%20%20clauses.push(%60%24%7Bkey%7D%24%7BGT%7D%24%7Bthis.writeQueryValue(value.min)%7D%60)%3B%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20if%20(value.max%20!%3D%3D%20null%20%26%26%20value.max%20!%3D%3D%20undefined)%20%7B%0A%20%20%20%20%20%20%20%20clauses.push(%60%24%7Bkey%7D%24%7BLT%7D%24%7Bthis.writeQueryValue(value.max)%7D%60)%3B%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20if%20(value.any%20%26%26%20Array.isArray(value.any))%20%7B%0A%20%20%20%20%20%20%20%20clauses.push(%60%24%7Bkey%7D%24%7BIN%7D(%24%7Bthis.writeQueryValues(value.any)%7D)%60)%3B%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20if%20(value.all%20%26%26%20Array.isArray(value.all))%20%7B%0A%20%20%20%20%20%20%20%20clauses.push(%60%24%7Bkey%7D%24%7BIN%7D(%24%7Bthis.writeQueryValues(value.all)%7D)%60)%3B%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20if%20(value.not%20!%3D%3D%20null%20%26%26%20value.not%20!%3D%3D%20undefined)%20%7B%0A%20%20%20%20%20%20%20%20clauses.push(this.parseQueryValue(key%2C%20value.not%2C%20true))%3B%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20if%20(value.like%20!%3D%3D%20null%20%26%26%20value.like%20!%3D%3D%20undefined)%20%7B%0A%20%20%20%20%20%20%20%20clauses.push(%60%24%7Bkey%7D%20like%20'%25%24%7Bvalue.like%7D%25'%60)%3B%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20if%20(value.lookup%20!%3D%3D%20null%20%26%26%20value.lookup%20!%3D%3D%20undefined)%20%7B%0A%20%20%20%20%20%20%20%20const%20obj%20%3D%20%7B%7D%3B%0A%20%20%20%20%20%20%20%20obj%5Bkey%5D%20%3D%20value.lookup%3B%0A%20%20%20%20%20%20%20%20clauses.push(this.toQuerySyntax(obj))%3B%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20if%20(value.with%20!%3D%3D%20null%20%26%26%20value.with%20!%3D%3D%20undefined)%20%7B%0A%20%20%20%20%20%20%20%20clauses.push(%60%24%7Bkey%7D%20IS%20NOT%20EMPTY%60)%3B%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20if%20(value.without%20!%3D%3D%20null%20%26%26%20value.without%20!%3D%3D%20undefined)%20%7B%0A%20%20%20%20%20%20%20%20clauses.push(%60%24%7Bkey%7D%20IS%20EMPTY%60)%3B%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20if%20(value.or%20!%3D%3D%20null%20%26%26%20value.or%20!%3D%3D%20undefined)%20%7B%0A%20%20%20%20%20%20%20%20const%20obj%20%3D%20%7B%7D%3B%0A%20%20%20%20%20%20%20%20obj%5Bkey%5D%20%3D%20value.or%3B%0A%20%20%20%20%20%20%20%20clauses.push(this.toQuerySyntax(obj).replace('AND'%2C%20'OR'))%3B%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20for%20(const%20subkey%20in%20value)%20%7B%0A%20%20%20%20%20%20%20%20if%20(%5B'min'%2C%20'max'%2C%20'any'%2C%20'all'%2C%20'not'%2C%20'or'%2C%20'like'%2C%20'lookup'%2C%20'with'%2C%20'without'%2C%20'isNull'%5D.indexOf(subkey)%20%3C%200)%20%7B%0A%20%20%20%20%20%20%20%20%20%20const%20subvalue%20%3D%20value%5Bsubkey%5D%3B%0A%20%20%20%20%20%20%20%20%20%20clauses.push(this.parseQueryValue(%60%24%7Bkey%7D.%24%7Bsubkey%7D%60%2C%20subvalue))%3B%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%20else%20%7B%0A%20%20%20%20%20%20clauses.push(%60%24%7Bkey%7D%24%7BEQ%7D%24%7Bthis.writeQueryValue(value)%7D%60)%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20return%20clauses.join('%20AND%20')%3B%0A%20%20%7D%0A%0A%20%20private%20writeQueryValues(values)%20%7B%0A%20%20%20%20if%20(typeof%20values%5B0%5D%20%3D%3D%3D%20'number'%20%7C%7C%20typeof%20values%5B0%5D%20%3D%3D%3D%20'boolean')%20%7B%0A%20%20%20%20%20%20return%20%60%24%7Bvalues.join('%2C')%7D%60%3B%0A%20%20%20%20%7D%20else%20%7B%0A%20%20%20%20%20%20return%20%60'%24%7Bvalues.join(%60'%2C'%60)%7D'%60%3B%0A%20%20%20%20%7D%0A%20%20%7D%0A%0A%20%20private%20writeQueryValue(value)%20%7B%0A%20%20%20%20if%20(value%20instanceof%20Date)%20%7B%0A%20%20%20%20%20%20return%20value.getTime()%3B%0A%20%20%20%20%7D%20else%20if%20(typeof%20value%20%3D%3D%3D%20'number'%20%7C%7C%20typeof%20value%20%3D%3D%3D%20'boolean')%20%7B%0A%20%20%20%20%20%20return%20%60%24%7Bvalue%7D%60%3B%0A%20%20%20%20%7D%20else%20%7B%0A%20%20%20%20%20%20return%20%60'%24%7Bvalue.replace(%2F%5C*%2Fg%2C%20'')%7D'%60%3B%0A%20%20%20%20%7D%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cnovo-data-table%20%5BdataTableService%5D%3D%22remoteService%22%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%5Bcolumns%5D%3D%22sharedColumns%22%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%5BallowMultipleFilters%5D%3D%22true%22%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%5BhideGlobalSearch%5D%3D%22!globalSearchEnabled%22%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%5BdisplayedColumns%5D%3D%22sharedDisplayColumns%22%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%5BpaginationOptions%5D%3D%22widePaginationOptions%22%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%5BfixedHeader%5D%3D%22true%22%3E%0A%20%20%3C!--%20Custom%20Cell%20--%20passed%20with%20template%20property%20on%20Column%20--%3E%0A%20%20%3Cng-template%20novoTemplate%3D%22custom%22%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20let-row%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20let-col%3D%22col%22%3E%0A%20%20%20%20%3Cb%3ECUSTOM%3C%2Fb%3E%20%7B%7B%20row.name%20%7D%7D%0A%20%20%20%20%3Cb%3ECUSTOM%3C%2Fb%3E%0A%20%20%3C%2Fng-template%3E%0A%3C%2Fnovo-data-table%3E%0A`
    },
    'data-table-rows': {
        title: 'Rows Data Table Example',
        component: DataTableRowsExample,
        tsSource: `import%20%7B%20Component%2C%20ChangeDetectionStrategy%2C%20ChangeDetectorRef%2C%20ViewChild%20%7D%20from%20'%40angular%2Fcore'%3B%0Aimport%20*%20as%20dateFns%20from%20'date-fns'%3B%0Aimport%20%7B%20Subject%20%7D%20from%20'rxjs'%3B%0A%0Aimport%20%7B%0A%20%20IDataTableColumn%2C%0A%20%20IDataTablePaginationOptions%2C%0A%20%20IDataTableSearchOptions%2C%0A%20%20NovoModalService%2C%0A%20%20NovoDataTable%2C%0A%20%20IDataTablePreferences%2C%0A%7D%20from%20'novo-elements'%3B%0A%0Aimport%20%7B%20ConfigureColumnsModal%2C%20MockData%20%7D%20from%20'..%2Fextras'%3B%0A%0A%2F**%0A%20*%20%40title%20Rows%20Data%20Table%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20selector%3A%20'data-table-rows-example'%2C%0A%20%20templateUrl%3A%20'data-table-rows-example.html'%2C%0A%20%20styleUrls%3A%20%5B'data-table-rows-example.css'%5D%2C%0A%20%20changeDetection%3A%20ChangeDetectionStrategy.OnPush%2C%0A%7D)%0Aexport%20class%20DataTableRowsExample%20%7B%0A%20%20%40ViewChild('basic'%2C%20%7B%20static%3A%20false%20%7D)%0A%20%20table%3A%20NovoDataTable%3CMockData%3E%3B%0A%0A%20%20%2F%2F%20Table%20configuration%0A%20%20public%20dataSetOptions%3A%20any%5B%5D%20%3D%20%5B%7B%20label%3A%20'Dataset%20%231'%2C%20value%3A%201%20%7D%2C%20%7B%20label%3A%20'Dataset%20%232'%2C%20value%3A%202%20%7D%2C%20%7B%20label%3A%20'Dataset%20%233'%2C%20value%3A%203%20%7D%5D%3B%0A%20%20public%20loadedDataSet%3A%20number%20%3D%201%3B%0A%20%20public%20paginationTypeOptions%3A%20any%5B%5D%20%3D%20%5B%7B%20label%3A%20'Standard'%2C%20value%3A%20'standard'%20%7D%2C%20%7B%20label%3A%20'Basic'%2C%20value%3A%20'basic'%20%7D%5D%3B%0A%20%20public%20loadedPaginationType%3A%20string%20%3D%20'standard'%3B%0A%20%20public%20globalSearchOptions%3A%20any%5B%5D%20%3D%20%5B%7B%20label%3A%20'Show'%2C%20value%3A%20true%20%7D%2C%20%7B%20label%3A%20'Hide'%2C%20value%3A%20false%20%7D%5D%3B%0A%20%20public%20loadedGlobalSearch%3A%20boolean%20%3D%20false%3B%0A%20%20public%20customStatusColumnValue%3A%20string%20%3D%20''%3B%0A%20%20public%20customStatusColumnOptions%3A%20object%5B%5D%20%3D%20%5B%0A%20%20%20%20%7B%0A%20%20%20%20%20%20label%3A%20'Has%20A%205%20in%20status'%2C%0A%20%20%20%20%20%20value%3A%20'5'%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20label%3A%20'All'%2C%0A%20%20%20%20%20%20value%3A%20''%2C%0A%20%20%20%20%7D%2C%0A%20%20%5D%3B%0A%0A%20%20%2F%2F%20Shared%20configuration%0A%20%20public%20sharedColumns%3A%20IDataTableColumn%3CMockData%3E%5B%5D%20%3D%20%5B%0A%20%20%20%20%7B%0A%20%20%20%20%20%20id%3A%20'preview'%2C%0A%20%20%20%20%20%20type%3A%20'action'%2C%0A%20%20%20%20%20%20enabled%3A%20true%2C%0A%20%20%20%20%20%20handlers%3A%20%7B%0A%20%20%20%20%20%20%20%20click%3A%20this.preview.bind(this)%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20action%3A%20%7B%0A%20%20%20%20%20%20%20%20icon%3A%20'preview'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20id%3A%20'actions'%2C%0A%20%20%20%20%20%20type%3A%20'action'%2C%0A%20%20%20%20%20%20label%3A%20'Actions'%2C%0A%20%20%20%20%20%20enabled%3A%20true%2C%0A%20%20%20%20%20%20action%3A%20%7B%0A%20%20%20%20%20%20%20%20options%3A%20%5B%0A%20%20%20%20%20%20%20%20%20%20%7B%20label%3A%20'Action%201'%2C%20handlers%3A%20%7B%20click%3A%20this.log.bind(this)%20%7D%20%7D%2C%0A%20%20%20%20%20%20%20%20%20%20%7B%20label%3A%20'Action%202'%2C%20handlers%3A%20%7B%20click%3A%20this.log.bind(this)%20%7D%2C%20disabled%3A%20true%20%7D%2C%0A%20%20%20%20%20%20%20%20%20%20%7B%20label%3A%20'Action%203'%2C%20handlers%3A%20%7B%20click%3A%20this.log.bind(this)%20%7D%2C%20disabledFunc%3A%20this.checkDisabled.bind(this)%20%7D%2C%0A%20%20%20%20%20%20%20%20%5D%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20id%3A%20'id'%2C%0A%20%20%20%20%20%20label%3A%20'ID'%2C%0A%20%20%20%20%20%20enabled%3A%20true%2C%0A%20%20%20%20%20%20type%3A%20'text'%2C%0A%20%20%20%20%20%20filterable%3A%20%7B%0A%20%20%20%20%20%20%20%20type%3A%20'number'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20sortable%3A%20true%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20id%3A%20'telephone'%2C%0A%20%20%20%20%20%20label%3A%20'Phone'%2C%0A%20%20%20%20%20%20type%3A%20'link%3Atel'%2C%0A%20%20%20%20%20%20resizable%3A%20true%2C%0A%20%20%20%20%20%20attributes%3A%20%7B%0A%20%20%20%20%20%20%20%20target%3A%20'_blank'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20id%3A%20'email'%2C%0A%20%20%20%20%20%20label%3A%20'Email'%2C%0A%20%20%20%20%20%20type%3A%20'link%3Amailto'%2C%0A%20%20%20%20%20%20attributes%3A%20%7B%0A%20%20%20%20%20%20%20%20target%3A%20'_blank'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20id%3A%20'address'%2C%0A%20%20%20%20%20%20label%3A%20'Address'%2C%0A%20%20%20%20%20%20type%3A%20'text'%2C%0A%20%20%20%20%20%20format%3A%20%5B'%24city%2C%20%24state'%2C%20'%24city'%2C%20'%24state'%5D%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20id%3A%20'embeddedObj'%2C%0A%20%20%20%20%20%20label%3A%20'Embedded%20(hard)'%2C%0A%20%20%20%20%20%20enabled%3A%20true%2C%0A%20%20%20%20%20%20format%3A%20%5B'%24another.id'%2C%20'%24firstName%20%24lastName'%5D%2C%0A%20%20%20%20%20%20type%3A%20'link'%2C%0A%20%20%20%20%20%20handlers%3A%20%7B%0A%20%20%20%20%20%20%20%20click%3A%20this.log.bind(this)%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20filterable%3A%20true%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20id%3A%20'simpleEmbeddedObj'%2C%0A%20%20%20%20%20%20label%3A%20'Embedded%20(simple)'%2C%0A%20%20%20%20%20%20enabled%3A%20true%2C%0A%20%20%20%20%20%20format%3A%20'%24id'%2C%0A%20%20%20%20%20%20type%3A%20'text'%2C%0A%20%20%20%20%20%20filterable%3A%20true%2C%0A%20%20%20%20%20%20sortable%3A%20true%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20id%3A%20'date'%2C%0A%20%20%20%20%20%20label%3A%20'Date'%2C%0A%20%20%20%20%20%20enabled%3A%20true%2C%0A%20%20%20%20%20%20type%3A%20'date'%2C%0A%20%20%20%20%20%20filterable%3A%20%7B%0A%20%20%20%20%20%20%20%20type%3A%20'date'%2C%0A%20%20%20%20%20%20%20%20allowCustomRange%3A%20true%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20sortable%3A%20true%2C%0A%20%20%20%20%20%20format%3A%20'%24year-%24month-%24day%20%24hour%3A%24minute'%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20id%3A%20'dateTime'%2C%0A%20%20%20%20%20%20label%3A%20'DateTime'%2C%0A%20%20%20%20%20%20enabled%3A%20false%2C%0A%20%20%20%20%20%20type%3A%20'datetime'%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20id%3A%20'time'%2C%0A%20%20%20%20%20%20label%3A%20'Time'%2C%0A%20%20%20%20%20%20enabled%3A%20false%2C%0A%20%20%20%20%20%20type%3A%20'time'%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20id%3A%20'money'%2C%0A%20%20%20%20%20%20label%3A%20'Money'%2C%0A%20%20%20%20%20%20enabled%3A%20false%2C%0A%20%20%20%20%20%20type%3A%20'currency'%2C%0A%20%20%20%20%20%20filterable%3A%20true%2C%0A%20%20%20%20%20%20sortable%3A%20true%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20id%3A%20'percent'%2C%0A%20%20%20%20%20%20label%3A%20'Percent'%2C%0A%20%20%20%20%20%20enabled%3A%20true%2C%0A%20%20%20%20%20%20type%3A%20'percent'%2C%0A%20%20%20%20%20%20filterable%3A%20true%2C%0A%20%20%20%20%20%20sortable%3A%20true%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20id%3A%20'bigdecimal'%2C%0A%20%20%20%20%20%20label%3A%20'BigDecimal'%2C%0A%20%20%20%20%20%20enabled%3A%20true%2C%0A%20%20%20%20%20%20type%3A%20'bigdecimal'%2C%0A%20%20%20%20%20%20filterable%3A%20true%2C%0A%20%20%20%20%20%20sortable%3A%20true%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20id%3A%20'name'%2C%0A%20%20%20%20%20%20label%3A%20'Name'%2C%0A%20%20%20%20%20%20labelIcon%3A%20'bull'%2C%0A%20%20%20%20%20%20enabled%3A%20true%2C%0A%20%20%20%20%20%20type%3A%20'text'%2C%0A%20%20%20%20%20%20template%3A%20'custom'%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20id%3A%20'status'%2C%0A%20%20%20%20%20%20label%3A%20'Status'%2C%0A%20%20%20%20%20%20enabled%3A%20true%2C%0A%20%20%20%20%20%20type%3A%20'text'%2C%0A%20%20%20%20%20%20filterable%3A%20%7B%20type%3A%20'custom'%20%7D%2C%0A%20%20%20%20%20%20sortable%3A%20true%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20id%3A%20'priority'%2C%0A%20%20%20%20%20%20label%3A%20'Priority'%2C%0A%20%20%20%20%20%20enabled%3A%20true%2C%0A%20%20%20%20%20%20type%3A%20'text'%2C%0A%20%20%20%20%20%20filterable%3A%20%7B%0A%20%20%20%20%20%20%20%20type%3A%20'multi-select'%2C%0A%20%20%20%20%20%20%20%20options%3A%20this.getPriorityOptions()%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20sortable%3A%20true%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20id%3A%20'enabled'%2C%0A%20%20%20%20%20%20label%3A%20'Enabled'%2C%0A%20%20%20%20%20%20enabled%3A%20true%2C%0A%20%20%20%20%20%20type%3A%20'text'%2C%0A%20%20%20%20%20%20sortable%3A%20true%2C%0A%20%20%20%20%20%20filterable%3A%20%7B%0A%20%20%20%20%20%20%20%20type%3A%20'select'%2C%0A%20%20%20%20%20%20%20%20options%3A%20%5B%7B%20value%3A%20true%2C%20label%3A%20'True'%20%7D%2C%20%7B%20value%3A%20false%2C%20label%3A%20'False'%20%7D%5D%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20id%3A%20'edit'%2C%0A%20%20%20%20%20%20type%3A%20'action'%2C%0A%20%20%20%20%20%20enabled%3A%20true%2C%0A%20%20%20%20%20%20disabled%3A%20true%2C%0A%20%20%20%20%20%20handlers%3A%20%7B%0A%20%20%20%20%20%20%20%20click%3A%20this.log.bind(this)%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20action%3A%20%7B%0A%20%20%20%20%20%20%20%20icon%3A%20'edit'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%7D%2C%0A%20%20%5D%3B%0A%20%20public%20sharedDisplayColumns%20%3D%20%5B%0A%20%20%20%20'selection'%2C%0A%20%20%20%20'expand'%2C%0A%20%20%20%20'preview'%2C%0A%20%20%20%20'actions'%2C%0A%20%20%20%20'id'%2C%0A%20%20%20%20'date'%2C%0A%20%20%20%20'name'%2C%0A%20%20%20%20'telephone'%2C%0A%20%20%20%20'email'%2C%0A%20%20%20%20'simpleEmbeddedObj'%2C%0A%20%20%20%20'status'%2C%0A%20%20%20%20'priority'%2C%0A%20%20%20%20'percent'%2C%0A%20%20%20%20'bigdecimal'%2C%0A%20%20%20%20'embeddedObj'%2C%0A%20%20%20%20'edit'%2C%0A%20%20%5D%3B%0A%20%20public%20sharedPaginationOptions%3A%20IDataTablePaginationOptions%20%3D%20%7B%0A%20%20%20%20theme%3A%20'standard'%2C%0A%20%20%20%20pageSize%3A%2010%2C%0A%20%20%20%20pageSizeOptions%3A%20%5B10%2C%2050%2C%20100%2C%20250%2C%20500%5D%2C%0A%20%20%7D%3B%0A%20%20public%20widePaginationOptions%3A%20IDataTablePaginationOptions%20%3D%20%7B%0A%20%20%20%20theme%3A%20'basic-wide'%2C%0A%20%20%20%20pageSize%3A%2010%2C%0A%20%20%20%20pageSizeOptions%3A%20%5B10%2C%2050%2C%20100%2C%20250%2C%20500%5D%2C%0A%20%20%7D%3B%0A%20%20public%20sharedSearchOptions%3A%20IDataTableSearchOptions%20%3D%20%7B%0A%20%20%20%20placeholder%3A%20'Search%20for%20things...'%2C%0A%20%20%20%20tooltip%3A%20'HELLO'%2C%0A%20%20%7D%3B%0A%20%20public%20sharedDefaultSort%3A%20%7B%20id%3A%20string%3B%20value%3A%20string%20%7D%20%3D%20%7B%0A%20%20%20%20id%3A%20'id'%2C%0A%20%20%20%20value%3A%20'asc'%2C%0A%20%20%7D%3B%0A%20%20public%20globalSearchEnabled%3A%20boolean%20%3D%20false%3B%0A%20%20public%20refreshSubject%3A%20Subject%3Cboolean%3E%20%3D%20new%20Subject()%3B%0A%0A%20%20%2F%2F%20Basic%20configuration%0A%20%20public%20basicRows%3A%20MockData%5B%5D%3B%0A%0A%20%20private%20staticDataSet1%3A%20MockData%5B%5D%20%3D%20%5B%5D%3B%0A%20%20private%20staticDataSet2%3A%20MockData%5B%5D%20%3D%20%5B%5D%3B%0A%20%20private%20staticDataSet3%3A%20MockData%5B%5D%20%3D%20%5B%5D%3B%0A%0A%20%20public%20selectedRecordId%3A%20string%20%3D%20''%3B%0A%0A%20%20constructor(private%20ref%3A%20ChangeDetectorRef%2C%20private%20modalService%3A%20NovoModalService)%20%7B%0A%20%20%20%20for%20(let%20i%20%3D%200%3B%20i%20%3C%201000%3B%20i%2B%2B)%20%7B%0A%20%20%20%20%20%20const%20day%20%3D%20i%20%3C%20500%20%3F%20dateFns.subDays(new%20Date()%2C%20i)%20%3A%20dateFns.addDays(new%20Date()%2C%20i%20-%20500)%3B%0A%20%20%20%20%20%20this.staticDataSet1.push(%7B%0A%20%20%20%20%20%20%20%20id%3A%20i%2C%0A%20%20%20%20%20%20%20%20embeddedObj%3A%20%7B%20id%3A%20i%2C%20test%3A%20%60HMM%20%24%7Bi%7D%60%2C%20another%3A%20%7B%20id%3A%20777%20%7D%20%7D%2C%0A%20%20%20%20%20%20%20%20simpleEmbeddedObj%3A%20%7B%20id%3A%20i%20%7D%2C%0A%20%20%20%20%20%20%20%20name%3A%20%60(1)%20Name%20%24%7Bi%7D%60%2C%0A%20%20%20%20%20%20%20%20status%3A%20%60(1)%20Status%20%24%7Bi%7D%60%2C%0A%20%20%20%20%20%20%20%20priority%3A%20this.getPriority()%2C%0A%20%20%20%20%20%20%20%20enabled%3A%20i%20%25%202%20%3D%3D%3D%200%2C%0A%20%20%20%20%20%20%20%20date%3A%20day%2C%0A%20%20%20%20%20%20%20%20dateTime%3A%20day%2C%0A%20%20%20%20%20%20%20%20time%3A%20day%2C%0A%20%20%20%20%20%20%20%20money%3A%20i%20%2B%2010%2C%0A%20%20%20%20%20%20%20%20percent%3A%20i%20%2F%20100%2C%0A%20%20%20%20%20%20%20%20telephone%3A%20'555-555-5555'%2C%0A%20%20%20%20%20%20%20%20email%3A%20'test%40google.com'%2C%0A%20%20%20%20%20%20%20%20address%3A%20%7B%20city%3A%20'City'%2C%20state%3A%20null%20%7D%2C%0A%20%20%20%20%20%20%20%20bigdecimal%3A%203.25%20*%20(i%20%2B%201)%20*%20(i%20%25%205%20%3D%3D%3D%201%20%3F%20-1%20%3A%201)%2C%0A%20%20%20%20%20%20%7D)%3B%0A%20%20%20%20%20%20this.staticDataSet2.push(%7B%0A%20%20%20%20%20%20%20%20id%3A%20i%20%2B%201001%2C%0A%20%20%20%20%20%20%20%20embeddedObj%3A%20%7B%20id%3A%20i%2C%20test%3A%20%60HMM%20%24%7Bi%7D%60%2C%20another%3A%20%7B%20id%3A%20777%20%7D%20%7D%2C%0A%20%20%20%20%20%20%20%20simpleEmbeddedObj%3A%20%7B%20id%3A%20i%20%7D%2C%0A%20%20%20%20%20%20%20%20name%3A%20%60(2)%20Name%20%24%7Bi%7D%60%2C%0A%20%20%20%20%20%20%20%20status%3A%20%60(2)%20Status%20%24%7Bi%7D%60%2C%0A%20%20%20%20%20%20%20%20priority%3A%20this.getPriority()%2C%0A%20%20%20%20%20%20%20%20enabled%3A%20i%20%25%202%20%3D%3D%3D%200%2C%0A%20%20%20%20%20%20%20%20date%3A%20day%2C%0A%20%20%20%20%20%20%20%20dateTime%3A%20day%2C%0A%20%20%20%20%20%20%20%20time%3A%20day%2C%0A%20%20%20%20%20%20%20%20money%3A%20i%20%2B%2010%2C%0A%20%20%20%20%20%20%20%20percent%3A%20i%20%2F%20100%2C%0A%20%20%20%20%20%20%20%20telephone%3A%20'555-555-5555'%2C%0A%20%20%20%20%20%20%20%20email%3A%20'test%40google.com'%2C%0A%20%20%20%20%20%20%20%20address%3A%20%7B%20city%3A%20'City'%2C%20state%3A%20'State'%20%7D%2C%0A%20%20%20%20%20%20%20%20bigdecimal%3A%20-75%2C%0A%20%20%20%20%20%20%7D)%3B%0A%20%20%20%20%7D%0A%20%20%20%20this.basicRows%20%3D%20%5B...this.staticDataSet1%5D%3B%0A%20%20%7D%0A%0A%20%20public%20getPriority()%3A%20string%20%7B%0A%20%20%20%20const%20x%20%3D%20Math.round(Math.random()%20*%2050)%3B%0A%20%20%20%20return%20'test%20'%20%2B%20x.toString()%3B%0A%20%20%7D%0A%0A%20%20public%20getPriorityOptions()%20%7B%0A%20%20%20%20const%20options%20%3D%20new%20Array()%3B%0A%20%20%20%20let%20i%3B%0A%20%20%20%20for%20(i%20%3D%200%3B%20i%20%3C%2049%3B%20i%2B%2B)%20%7B%0A%20%20%20%20%20%20options.push('test%20'%20%2B%20i.toString())%3B%0A%20%20%20%20%7D%0A%20%20%20%20return%20options%3B%0A%20%20%7D%0A%0A%20%20public%20switchPaginationType(type%3A%20'basic'%20%7C%20'standard')%20%7B%0A%20%20%20%20this.sharedPaginationOptions%20%3D%20Object.assign(%7B%7D%2C%20this.sharedPaginationOptions%2C%20%7B%20theme%3A%20type%20%7D)%3B%0A%20%20%20%20this.ref.detectChanges()%3B%0A%20%20%7D%0A%0A%20%20public%20loadDataset(setIndex%3A%20number)%20%7B%0A%20%20%20%20switch%20(setIndex)%20%7B%0A%20%20%20%20%20%20case%201%3A%0A%20%20%20%20%20%20%20%20this.basicRows%20%3D%20%5B...this.staticDataSet1%5D%3B%0A%20%20%20%20%20%20%20%20break%3B%0A%20%20%20%20%20%20case%202%3A%0A%20%20%20%20%20%20%20%20this.basicRows%20%3D%20%5B...this.staticDataSet2%5D%3B%0A%20%20%20%20%20%20%20%20break%3B%0A%20%20%20%20%20%20case%203%3A%0A%20%20%20%20%20%20%20%20this.basicRows%20%3D%20%5B...this.staticDataSet3%5D%3B%0A%20%20%20%20%20%20%20%20break%3B%0A%20%20%20%20%20%20default%3A%0A%20%20%20%20%20%20%20%20break%3B%0A%20%20%20%20%7D%0A%20%20%7D%0A%0A%20%20public%20toggleGlobalSearch(toggle%3A%20boolean)%3A%20void%20%7B%0A%20%20%20%20this.globalSearchEnabled%20%3D%20toggle%3B%0A%20%20%20%20this.ref.detectChanges()%3B%0A%20%20%7D%0A%0A%20%20public%20log(event%3A%20%7B%20originalEvent%3A%20MouseEvent%3B%20row%3A%20MockData%20%7D)%3A%20void%20%7B%0A%20%20%20%20console.log('%5BDataTable%5D%20Event%20Triggered!'%2C%20event)%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%7D%0A%0A%20%20public%20preview(event%3A%20%7B%20originalEvent%3A%20MouseEvent%3B%20row%3A%20MockData%20%7D)%3A%20void%20%7B%0A%20%20%20%20this.selectedRecordId%20%3D%20event.row.id.toString()%3B%0A%20%20%20%20this.log(event)%3B%0A%20%20%7D%0A%0A%20%20public%20checkDisabled()%3A%20boolean%20%7B%0A%20%20%20%20return%20true%3B%0A%20%20%7D%0A%0A%20%20public%20configureColumns()%3A%20void%20%7B%0A%20%20%20%20this.modalService%0A%20%20%20%20%20%20.open(ConfigureColumnsModal%2C%20%7B%20columns%3A%20this.sharedColumns%20%7D)%0A%20%20%20%20%20%20.onClosed.then((columns%3A%20IDataTableColumn%3CMockData%3E%5B%5D)%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20if%20(columns)%20%7B%0A%20%20%20%20%20%20%20%20%20%20const%20enabledColumns%20%3D%20columns.filter((column%3A%20IDataTableColumn%3CMockData%3E)%20%3D%3E%20column.enabled)%3B%0A%20%20%20%20%20%20%20%20%20%20this.sharedDisplayColumns%20%3D%20%5B'selection'%2C%20'expand'%2C%20...enabledColumns.map((column%3A%20IDataTableColumn%3CMockData%3E)%20%3D%3E%20column.id)%5D%3B%0A%20%20%20%20%20%20%20%20%20%20this.ref.markForCheck()%3B%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%7D)%3B%0A%20%20%7D%0A%0A%20%20public%20onPreferencesChanged(event%3A%20IDataTablePreferences)%3A%20void%20%7B%0A%20%20%20%20console.log('Preferences%20changed%20(persist%20manually)%3A'%2C%20event)%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%7D%0A%0A%20%20public%20resized(event)%3A%20void%20%7B%0A%20%20%20%20console.log('Column%20Width%20changed%20(persist%20manually)%3A%20'%2C%20event)%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%7D%0A%0A%20%20public%20refresh()%3A%20void%20%7B%0A%20%20%20%20this.refreshSubject.next()%3B%0A%20%20%7D%0A%0A%20%20public%20toggleRowDetails(expand%3A%20boolean)%3A%20void%20%7B%0A%20%20%20%20this.table.expandRows(expand)%3B%0A%20%20%7D%0A%0A%20%20public%20filterList(value%3A%20any)%3A%20void%20%7B%0A%20%20%20%20this.table.state.filter%20%3D%20%7B%20id%3A%20'status'%2C%20type%3A%20'text'%2C%20value%20%7D%3B%0A%20%20%20%20this.table.state.updates.next(%7B%0A%20%20%20%20%20%20globalSearch%3A%20this.table.state.globalSearch%2C%0A%20%20%20%20%20%20filter%3A%20this.table.state.filter%2C%0A%20%20%20%20%20%20sort%3A%20this.table.state.sort%2C%0A%20%20%20%20%7D)%3B%0A%20%20%20%20this.ref.markForCheck()%3B%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A.fixedWindowSize%20%7B%0A%20%20height%3A%20600px%3B%0A%7D%0A%0Anovo-data-table%20%7B%0A%20%20height%3A%20100%25%3B%0A%7D%0A`,
        htmlSource: `%3Ch6%3EChange%20Dataset%3C%2Fh6%3E%0A%20%20%20%20%3Cnovo-tiles%20%5Boptions%5D%3D%22dataSetOptions%22%20(onChange)%3D%22loadDataset(%24event)%22%20%5B(ngModel)%5D%3D%22loadedDataSet%22%3E%3C%2Fnovo-tiles%3E%0A%20%20%20%20%3Ch6%3EChange%20Pagination%20Style%3C%2Fh6%3E%0A%20%20%20%20%3Cnovo-tiles%20%5Boptions%5D%3D%22paginationTypeOptions%22%20(onChange)%3D%22switchPaginationType(%24event)%22%20%5B(ngModel)%5D%3D%22loadedPaginationType%22%3E%3C%2Fnovo-tiles%3E%0A%20%20%20%20%3Ch6%3EToggle%20Global%20Search%3C%2Fh6%3E%0A%20%20%20%20%3Cnovo-tiles%20%5Boptions%5D%3D%22globalSearchOptions%22%20(onChange)%3D%22toggleGlobalSearch(%24event)%22%20%5B(ngModel)%5D%3D%22loadedGlobalSearch%22%3E%3C%2Fnovo-tiles%3E%0A%20%20%20%20%3Ch6%3EConfigure%20Columns%3C%2Fh6%3E%0A%20%20%20%20%3Cbutton%20theme%3D%22primary%22%20(click)%3D%22configureColumns()%22%3EConfigure%20Columns%3C%2Fbutton%3E%0A%20%20%20%20%3Ch6%3EConfigure%20Columns%3C%2Fh6%3E%0A%20%20%20%20%3Cbutton%20theme%3D%22primary%22%20(click)%3D%22toggleRowDetails(true)%22%3EShow%20Row%20Details%20(first%20table)%3C%2Fbutton%3E%0A%20%20%20%20%3Cbutton%20theme%3D%22primary%22%20(click)%3D%22toggleRowDetails(false)%22%3EHide%20Row%20Details%20(first%20table)%3C%2Fbutton%3E%0A%0A%3Cdiv%20class%3D%22fixedWindowSize%22%3E%0A%3Cnovo-data-table%20%5Brows%5D%3D%22basicRows%22%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%5Bcolumns%5D%3D%22sharedColumns%22%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%5BallowMultipleFilters%5D%3D%22true%22%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%5BhideGlobalSearch%5D%3D%22!globalSearchEnabled%22%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%5BdisplayedColumns%5D%3D%22sharedDisplayColumns%22%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%5BpaginationOptions%5D%3D%22sharedPaginationOptions%22%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20name%3D%22demo-basic-rows%22%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%5BrefreshSubject%5D%3D%22refreshSubject%22%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20(preferencesChanged)%3D%22onPreferencesChanged(%24event)%22%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20(resized)%3D%22resized(%24event)%22%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%5BactiveRowIdentifier%5D%3D%22selectedRecordId%22%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%5BfixedHeader%5D%3D%22true%22%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23basic%3E%0A%20%20%3C!--%20Custom%20Actions%20--%3E%0A%20%20%3Cng-template%20novoTemplate%3D%22customActions%22%3E%0A%20%20%20%20%3Cspan%3ETotal%3A%20%7B%7B%20basic.dataSource.currentTotal%20%7D%7D%3C%2Fspan%3E%0A%20%20%20%20%3Cnovo-data-table-clear-button%20*ngIf%3D%22basic.state.userFiltered%22%3E%3C%2Fnovo-data-table-clear-button%3E%0A%20%20%20%20%3Cbutton%20theme%3D%22secondary%22%0A%20%20%20%20%20%20%20%20%20%20%20%20(click)%3D%22refresh()%22%3ERefresh%3C%2Fbutton%3E%0A%20%20%20%20%3Cnovo-dropdown%20side%3D%22right%22%3E%0A%20%20%20%20%20%20%3Cbutton%20theme%3D%22primary%22%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20icon%3D%22collapse%22%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20inverse%3E%0A%20%20%20%20%20%20%20%20%3Cspan%20*ngIf%3D%22basic.state.selected.length%20%3D%3D%3D%200%22%3EActions%3C%2Fspan%3E%0A%20%20%20%20%20%20%20%20%3Cspan%20*ngIf%3D%22basic.state.selected.length%20!%3D%3D%200%22%3E%7B%7B%20basic.state.selected.length%20%7D%7D!%3C%2Fspan%3E%0A%20%20%20%20%20%20%3C%2Fbutton%3E%0A%20%20%20%20%20%20%3Clist%3E%0A%20%20%20%20%20%20%20%20%3Citem%3EAction%201%3C%2Fitem%3E%0A%20%20%20%20%20%20%20%20%3Citem%3EAction%202%3C%2Fitem%3E%0A%20%20%20%20%20%20%20%20%3Citem%20%5Bdisabled%5D%3D%22basic.state.selected.length%20%3D%3D%3D%200%22%3EAction%203%3C%2Fitem%3E%0A%20%20%20%20%20%20%3C%2Flist%3E%0A%20%20%20%20%3C%2Fnovo-dropdown%3E%0A%20%20%3C%2Fng-template%3E%0A%20%20%3C!--%20Custom%20Empty%20Message%20--%3E%0A%20%20%3Cng-template%20novoTemplate%3D%22emptyMessage%22%3EYo!%20No%20Records!%3C%2Fng-template%3E%0A%20%20%3C!--%20Custom%20No%20Results%20Message%20--%3E%0A%20%20%3Cng-template%20novoTemplate%3D%22noResultsMessage%22%3EYo!%20That%20search%20is%20really%20complex%2C%20no%20data%20matches%20that!%3C%2Fng-template%3E%0A%20%20%3C!--%20Custom%20Cell%20for%20ID%20Column%20--%3E%0A%20%20%3Cng-template%20novoTemplate%3D%22id%22%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20let-row%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20let-col%3D%22col%22%3E%0A%20%20%20%20%3Ci%20class%3D%22bhi-bull%22%3E%3C%2Fi%3E%20%7B%7B%20row.id%20%7D%7D%0A%20%20%3C%2Fng-template%3E%0A%20%20%3C!--%20Custom%20Cell%20--%20passed%20with%20template%20property%20on%20Column%20--%3E%0A%20%20%3Cng-template%20novoTemplate%3D%22custom%22%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20let-row%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20let-col%3D%22col%22%3E%0A%20%20%20%20%3Cb%3ECUSTOM%3C%2Fb%3E%20%7B%7B%20row.name%20%7D%7D%0A%20%20%20%20%3Cb%3ECUSTOM%3C%2Fb%3E%0A%20%20%3C%2Fng-template%3E%0A%20%20%3C!--%20Row%20Details%20Template%20--%3E%0A%20%20%3Cng-template%20novoTemplate%3D%22expandedRow%22%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20let-row%3E%0A%20%20%20%20Why%20look%20at%20that%2C%20you%20clicked%20the%20details!%0A%20%20%3C%2Fng-template%3E%0A%20%20%3C!--%20Custom%20Status%20Filter%20--%3E%0A%20%20%3Cng-template%20novoTemplate%3D%22column-filter-status%22%3E%0A%20%20%20%20%3Cnovo-tiles%20%5Boptions%5D%3D%22customStatusColumnOptions%22%20(onChange)%3D%22filterList(%24event)%22%20%5B(ngModel)%5D%3D%22customStatusColumnValue%22%3E%3C%2Fnovo-tiles%3E%0A%20%20%3C%2Fng-template%3E%0A%3C%2Fnovo-data-table%3E%0A%3C%2Fdiv%3E%0A`
    },
    'data-table-service': {
        title: 'Data Table Service Example',
        component: DataTableServiceExample,
        tsSource: `import%20%7B%20Component%2C%20ChangeDetectionStrategy%2C%20ChangeDetectorRef%20%7D%20from%20'%40angular%2Fcore'%3B%0Aimport%20*%20as%20dateFns%20from%20'date-fns'%3B%0Aimport%20%7B%20Subject%20%7D%20from%20'rxjs'%3B%0A%0Aimport%20%7B%0A%20%20IDataTableColumn%2C%0A%20%20StaticDataTableService%2C%0A%20%20IDataTablePaginationOptions%2C%0A%20%20IDataTableSearchOptions%2C%0A%20%20IDataTableService%2C%0A%20%20NovoModalService%2C%0A%20%20IDataTablePreferences%2C%0A%7D%20from%20'novo-elements'%3B%0A%0Aimport%20%7B%20ConfigureColumnsModal%2C%20MockData%20%7D%20from%20'..%2Fextras'%3B%0A%0A%2F**%0A%20*%20%40title%20Data%20Table%20Service%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20selector%3A%20'data-table-service-example'%2C%0A%20%20templateUrl%3A%20'data-table-service-example.html'%2C%0A%20%20styleUrls%3A%20%5B'data-table-service-example.css'%5D%2C%0A%20%20changeDetection%3A%20ChangeDetectionStrategy.OnPush%2C%0A%7D)%0Aexport%20class%20DataTableServiceExample%20%7B%0A%20%20%2F%2F%20Table%20configuration%0A%20%20public%20dataSetOptions%3A%20any%5B%5D%20%3D%20%5B%7B%20label%3A%20'Dataset%20%231'%2C%20value%3A%201%20%7D%2C%20%7B%20label%3A%20'Dataset%20%232'%2C%20value%3A%202%20%7D%2C%20%7B%20label%3A%20'Dataset%20%233'%2C%20value%3A%203%20%7D%5D%3B%0A%20%20public%20loadedDataSet%3A%20number%20%3D%201%3B%0A%20%20public%20paginationTypeOptions%3A%20any%5B%5D%20%3D%20%5B%7B%20label%3A%20'Standard'%2C%20value%3A%20'standard'%20%7D%2C%20%7B%20label%3A%20'Basic'%2C%20value%3A%20'basic'%20%7D%5D%3B%0A%20%20public%20loadedPaginationType%3A%20string%20%3D%20'standard'%3B%0A%20%20public%20globalSearchOptions%3A%20any%5B%5D%20%3D%20%5B%7B%20label%3A%20'Show'%2C%20value%3A%20true%20%7D%2C%20%7B%20label%3A%20'Hide'%2C%20value%3A%20false%20%7D%5D%3B%0A%20%20public%20loadedGlobalSearch%3A%20boolean%20%3D%20false%3B%0A%0A%20%20%2F%2F%20Shared%20configuration%0A%20%20public%20sharedColumns%3A%20IDataTableColumn%3CMockData%3E%5B%5D%20%3D%20%5B%0A%20%20%20%20%7B%0A%20%20%20%20%20%20id%3A%20'preview'%2C%0A%20%20%20%20%20%20type%3A%20'action'%2C%0A%20%20%20%20%20%20enabled%3A%20true%2C%0A%20%20%20%20%20%20handlers%3A%20%7B%0A%20%20%20%20%20%20%20%20click%3A%20this.log.bind(this)%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20action%3A%20%7B%0A%20%20%20%20%20%20%20%20icon%3A%20'preview'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20id%3A%20'actions'%2C%0A%20%20%20%20%20%20type%3A%20'action'%2C%0A%20%20%20%20%20%20label%3A%20'Actions'%2C%0A%20%20%20%20%20%20enabled%3A%20true%2C%0A%20%20%20%20%20%20action%3A%20%7B%0A%20%20%20%20%20%20%20%20options%3A%20%5B%0A%20%20%20%20%20%20%20%20%20%20%7B%20label%3A%20'Action%201'%2C%20handlers%3A%20%7B%20click%3A%20this.log.bind(this)%20%7D%20%7D%2C%0A%20%20%20%20%20%20%20%20%20%20%7B%20label%3A%20'Action%202'%2C%20handlers%3A%20%7B%20click%3A%20this.log.bind(this)%20%7D%2C%20disabled%3A%20true%20%7D%2C%0A%20%20%20%20%20%20%20%20%20%20%7B%20label%3A%20'Action%203'%2C%20handlers%3A%20%7B%20click%3A%20this.log.bind(this)%20%7D%2C%20disabledFunc%3A%20this.checkDisabled.bind(this)%20%7D%2C%0A%20%20%20%20%20%20%20%20%5D%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20id%3A%20'id'%2C%0A%20%20%20%20%20%20label%3A%20'ID'%2C%0A%20%20%20%20%20%20enabled%3A%20true%2C%0A%20%20%20%20%20%20type%3A%20'text'%2C%0A%20%20%20%20%20%20filterable%3A%20%7B%0A%20%20%20%20%20%20%20%20type%3A%20'number'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20sortable%3A%20true%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20id%3A%20'telephone'%2C%0A%20%20%20%20%20%20label%3A%20'Phone'%2C%0A%20%20%20%20%20%20type%3A%20'link%3Atel'%2C%0A%20%20%20%20%20%20attributes%3A%20%7B%0A%20%20%20%20%20%20%20%20target%3A%20'_blank'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20id%3A%20'email'%2C%0A%20%20%20%20%20%20label%3A%20'Email'%2C%0A%20%20%20%20%20%20type%3A%20'link%3Amailto'%2C%0A%20%20%20%20%20%20attributes%3A%20%7B%0A%20%20%20%20%20%20%20%20target%3A%20'_blank'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20id%3A%20'address'%2C%0A%20%20%20%20%20%20label%3A%20'Address'%2C%0A%20%20%20%20%20%20type%3A%20'text'%2C%0A%20%20%20%20%20%20format%3A%20%5B'%24city%2C%20%24state'%2C%20'%24city'%2C%20'%24state'%5D%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20id%3A%20'embeddedObj'%2C%0A%20%20%20%20%20%20label%3A%20'Embedded%20(hard)'%2C%0A%20%20%20%20%20%20enabled%3A%20true%2C%0A%20%20%20%20%20%20format%3A%20%5B'%24another.id'%2C%20'%24firstName%20%24lastName'%5D%2C%0A%20%20%20%20%20%20type%3A%20'link'%2C%0A%20%20%20%20%20%20handlers%3A%20%7B%0A%20%20%20%20%20%20%20%20click%3A%20this.log.bind(this)%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20filterable%3A%20true%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20id%3A%20'simpleEmbeddedObj'%2C%0A%20%20%20%20%20%20label%3A%20'Embedded%20(simple)'%2C%0A%20%20%20%20%20%20enabled%3A%20true%2C%0A%20%20%20%20%20%20format%3A%20'%24id'%2C%0A%20%20%20%20%20%20type%3A%20'text'%2C%0A%20%20%20%20%20%20filterable%3A%20true%2C%0A%20%20%20%20%20%20sortable%3A%20true%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20id%3A%20'date'%2C%0A%20%20%20%20%20%20label%3A%20'Date'%2C%0A%20%20%20%20%20%20enabled%3A%20true%2C%0A%20%20%20%20%20%20type%3A%20'date'%2C%0A%20%20%20%20%20%20filterable%3A%20%7B%0A%20%20%20%20%20%20%20%20type%3A%20'date'%2C%0A%20%20%20%20%20%20%20%20allowCustomRange%3A%20true%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20sortable%3A%20true%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20id%3A%20'dateTime'%2C%0A%20%20%20%20%20%20label%3A%20'DateTime'%2C%0A%20%20%20%20%20%20enabled%3A%20false%2C%0A%20%20%20%20%20%20type%3A%20'datetime'%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20id%3A%20'time'%2C%0A%20%20%20%20%20%20label%3A%20'Time'%2C%0A%20%20%20%20%20%20enabled%3A%20false%2C%0A%20%20%20%20%20%20type%3A%20'time'%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20id%3A%20'money'%2C%0A%20%20%20%20%20%20label%3A%20'Money'%2C%0A%20%20%20%20%20%20enabled%3A%20false%2C%0A%20%20%20%20%20%20type%3A%20'currency'%2C%0A%20%20%20%20%20%20filterable%3A%20true%2C%0A%20%20%20%20%20%20sortable%3A%20true%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20id%3A%20'percent'%2C%0A%20%20%20%20%20%20label%3A%20'Percent'%2C%0A%20%20%20%20%20%20enabled%3A%20true%2C%0A%20%20%20%20%20%20type%3A%20'percent'%2C%0A%20%20%20%20%20%20filterable%3A%20true%2C%0A%20%20%20%20%20%20sortable%3A%20true%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20id%3A%20'name'%2C%0A%20%20%20%20%20%20label%3A%20'Name'%2C%0A%20%20%20%20%20%20labelIcon%3A%20'bull'%2C%0A%20%20%20%20%20%20enabled%3A%20true%2C%0A%20%20%20%20%20%20type%3A%20'text'%2C%0A%20%20%20%20%20%20template%3A%20'custom'%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20id%3A%20'status'%2C%0A%20%20%20%20%20%20label%3A%20'Status'%2C%0A%20%20%20%20%20%20enabled%3A%20true%2C%0A%20%20%20%20%20%20type%3A%20'text'%2C%0A%20%20%20%20%20%20filterable%3A%20true%2C%0A%20%20%20%20%20%20sortable%3A%20true%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20id%3A%20'priority'%2C%0A%20%20%20%20%20%20label%3A%20'Priority'%2C%0A%20%20%20%20%20%20enabled%3A%20true%2C%0A%20%20%20%20%20%20type%3A%20'text'%2C%0A%20%20%20%20%20%20filterable%3A%20%7B%0A%20%20%20%20%20%20%20%20type%3A%20'multi-select'%2C%0A%20%20%20%20%20%20%20%20options%3A%20this.getPriorityOptions()%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20sortable%3A%20true%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20id%3A%20'enabled'%2C%0A%20%20%20%20%20%20label%3A%20'Enabled'%2C%0A%20%20%20%20%20%20enabled%3A%20true%2C%0A%20%20%20%20%20%20type%3A%20'text'%2C%0A%20%20%20%20%20%20sortable%3A%20true%2C%0A%20%20%20%20%20%20filterable%3A%20%7B%0A%20%20%20%20%20%20%20%20type%3A%20'select'%2C%0A%20%20%20%20%20%20%20%20options%3A%20%5B%7B%20value%3A%20true%2C%20label%3A%20'True'%20%7D%2C%20%7B%20value%3A%20false%2C%20label%3A%20'False'%20%7D%5D%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20id%3A%20'edit'%2C%0A%20%20%20%20%20%20type%3A%20'action'%2C%0A%20%20%20%20%20%20enabled%3A%20true%2C%0A%20%20%20%20%20%20disabled%3A%20true%2C%0A%20%20%20%20%20%20handlers%3A%20%7B%0A%20%20%20%20%20%20%20%20click%3A%20this.log.bind(this)%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20action%3A%20%7B%0A%20%20%20%20%20%20%20%20icon%3A%20'edit'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%7D%2C%0A%20%20%5D%3B%0A%20%20public%20sharedDisplayColumns%20%3D%20%5B%0A%20%20%20%20'selection'%2C%0A%20%20%20%20'expand'%2C%0A%20%20%20%20'preview'%2C%0A%20%20%20%20'actions'%2C%0A%20%20%20%20'id'%2C%0A%20%20%20%20'date'%2C%0A%20%20%20%20'name'%2C%0A%20%20%20%20'telephone'%2C%0A%20%20%20%20'email'%2C%0A%20%20%20%20'simpleEmbeddedObj'%2C%0A%20%20%20%20'status'%2C%0A%20%20%20%20'priority'%2C%0A%20%20%20%20'percent'%2C%0A%20%20%20%20'embeddedObj'%2C%0A%20%20%20%20'edit'%2C%0A%20%20%5D%3B%0A%20%20public%20sharedPaginationOptions%3A%20IDataTablePaginationOptions%20%3D%20%7B%0A%20%20%20%20theme%3A%20'standard'%2C%0A%20%20%20%20pageSize%3A%2010%2C%0A%20%20%20%20pageSizeOptions%3A%20%5B10%2C%2050%2C%20100%2C%20250%2C%20500%5D%2C%0A%20%20%7D%3B%0A%20%20public%20widePaginationOptions%3A%20IDataTablePaginationOptions%20%3D%20%7B%0A%20%20%20%20theme%3A%20'basic-wide'%2C%0A%20%20%20%20pageSize%3A%2010%2C%0A%20%20%20%20pageSizeOptions%3A%20%5B10%2C%2050%2C%20100%2C%20250%2C%20500%5D%2C%0A%20%20%7D%3B%0A%20%20public%20sharedSearchOptions%3A%20IDataTableSearchOptions%20%3D%20%7B%0A%20%20%20%20placeholder%3A%20'Search%20for%20things...'%2C%0A%20%20%20%20tooltip%3A%20'HELLO'%2C%0A%20%20%7D%3B%0A%20%20public%20sharedDefaultSort%3A%20%7B%20id%3A%20string%3B%20value%3A%20string%20%7D%20%3D%20%7B%0A%20%20%20%20id%3A%20'id'%2C%0A%20%20%20%20value%3A%20'asc'%2C%0A%20%20%7D%3B%0A%20%20public%20globalSearchEnabled%3A%20boolean%20%3D%20false%3B%0A%20%20public%20refreshSubject%3A%20Subject%3Cboolean%3E%20%3D%20new%20Subject()%3B%0A%0A%20%20%2F%2F%20Basic%20configuration%0A%20%20public%20basicService%3A%20IDataTableService%3CMockData%3E%3B%0A%0A%20%20private%20staticDataSet1%3A%20MockData%5B%5D%20%3D%20%5B%5D%3B%0A%20%20private%20staticDataSet2%3A%20MockData%5B%5D%20%3D%20%5B%5D%3B%0A%20%20private%20staticDataSet3%3A%20MockData%5B%5D%20%3D%20%5B%5D%3B%0A%0A%20%20constructor(private%20ref%3A%20ChangeDetectorRef%2C%20private%20modalService%3A%20NovoModalService)%20%7B%0A%20%20%20%20for%20(let%20i%20%3D%200%3B%20i%20%3C%201000%3B%20i%2B%2B)%20%7B%0A%20%20%20%20%20%20const%20day%20%3D%20i%20%3C%20500%20%3F%20dateFns.subDays(new%20Date()%2C%20i)%20%3A%20dateFns.addDays(new%20Date()%2C%20i%20-%20500)%3B%0A%20%20%20%20%20%20this.staticDataSet1.push(%7B%0A%20%20%20%20%20%20%20%20id%3A%20i%2C%0A%20%20%20%20%20%20%20%20embeddedObj%3A%20%7B%20id%3A%20i%2C%20test%3A%20%60HMM%20%24%7Bi%7D%60%2C%20another%3A%20%7B%20id%3A%20777%20%7D%20%7D%2C%0A%20%20%20%20%20%20%20%20simpleEmbeddedObj%3A%20%7B%20id%3A%20i%20%7D%2C%0A%20%20%20%20%20%20%20%20name%3A%20%60(1)%20Name%20%24%7Bi%7D%60%2C%0A%20%20%20%20%20%20%20%20status%3A%20%60(1)%20Status%20%24%7Bi%7D%60%2C%0A%20%20%20%20%20%20%20%20priority%3A%20this.getPriority()%2C%0A%20%20%20%20%20%20%20%20enabled%3A%20i%20%25%202%20%3D%3D%3D%200%2C%0A%20%20%20%20%20%20%20%20date%3A%20day%2C%0A%20%20%20%20%20%20%20%20dateTime%3A%20day%2C%0A%20%20%20%20%20%20%20%20time%3A%20day%2C%0A%20%20%20%20%20%20%20%20money%3A%20i%20%2B%2010%2C%0A%20%20%20%20%20%20%20%20percent%3A%20i%20%2F%20100%2C%0A%20%20%20%20%20%20%20%20telephone%3A%20'555-555-5555'%2C%0A%20%20%20%20%20%20%20%20email%3A%20'test%40google.com'%2C%0A%20%20%20%20%20%20%20%20address%3A%20%7B%20city%3A%20'City'%2C%20state%3A%20null%20%7D%2C%0A%20%20%20%20%20%20%7D)%3B%0A%20%20%20%20%20%20this.staticDataSet2.push(%7B%0A%20%20%20%20%20%20%20%20id%3A%20i%20%2B%201001%2C%0A%20%20%20%20%20%20%20%20embeddedObj%3A%20%7B%20id%3A%20i%2C%20test%3A%20%60HMM%20%24%7Bi%7D%60%2C%20another%3A%20%7B%20id%3A%20777%20%7D%20%7D%2C%0A%20%20%20%20%20%20%20%20simpleEmbeddedObj%3A%20%7B%20id%3A%20i%20%7D%2C%0A%20%20%20%20%20%20%20%20name%3A%20%60(2)%20Name%20%24%7Bi%7D%60%2C%0A%20%20%20%20%20%20%20%20status%3A%20%60(2)%20Status%20%24%7Bi%7D%60%2C%0A%20%20%20%20%20%20%20%20priority%3A%20this.getPriority()%2C%0A%20%20%20%20%20%20%20%20enabled%3A%20i%20%25%202%20%3D%3D%3D%200%2C%0A%20%20%20%20%20%20%20%20date%3A%20day%2C%0A%20%20%20%20%20%20%20%20dateTime%3A%20day%2C%0A%20%20%20%20%20%20%20%20time%3A%20day%2C%0A%20%20%20%20%20%20%20%20money%3A%20i%20%2B%2010%2C%0A%20%20%20%20%20%20%20%20percent%3A%20i%20%2F%20100%2C%0A%20%20%20%20%20%20%20%20telephone%3A%20'555-555-5555'%2C%0A%20%20%20%20%20%20%20%20email%3A%20'test%40google.com'%2C%0A%20%20%20%20%20%20%20%20address%3A%20%7B%20city%3A%20'City'%2C%20state%3A%20'State'%20%7D%2C%0A%20%20%20%20%20%20%7D)%3B%0A%20%20%20%20%7D%0A%20%20%20%20this.basicService%20%3D%20new%20StaticDataTableService(%5B...this.staticDataSet1%5D)%3B%0A%20%20%7D%0A%0A%20%20public%20getPriority()%3A%20string%20%7B%0A%20%20%20%20const%20x%20%3D%20Math.round(Math.random()%20*%2050)%3B%0A%20%20%20%20return%20'test%20'%20%2B%20x.toString()%3B%0A%20%20%7D%0A%0A%20%20public%20getPriorityOptions()%20%7B%0A%20%20%20%20const%20options%20%3D%20new%20Array()%3B%0A%20%20%20%20let%20i%3B%0A%20%20%20%20for%20(i%20%3D%200%3B%20i%20%3C%2049%3B%20i%2B%2B)%20%7B%0A%20%20%20%20%20%20options.push('test%20'%20%2B%20i.toString())%3B%0A%20%20%20%20%7D%0A%20%20%20%20return%20options%3B%0A%20%20%7D%0A%20%20public%20switchPaginationType(type%3A%20'basic'%20%7C%20'standard')%20%7B%0A%20%20%20%20this.sharedPaginationOptions%20%3D%20Object.assign(%7B%7D%2C%20this.sharedPaginationOptions%2C%20%7B%20theme%3A%20type%20%7D)%3B%0A%20%20%20%20this.ref.detectChanges()%3B%0A%20%20%7D%0A%0A%20%20public%20loadDataset(setIndex%3A%20number)%20%7B%0A%20%20%20%20switch%20(setIndex)%20%7B%0A%20%20%20%20%20%20case%201%3A%0A%20%20%20%20%20%20%20%20this.basicService%20%3D%20new%20StaticDataTableService(%5B...this.staticDataSet1%5D)%3B%0A%20%20%20%20%20%20%20%20break%3B%0A%20%20%20%20%20%20case%202%3A%0A%20%20%20%20%20%20%20%20this.basicService%20%3D%20new%20StaticDataTableService(%5B...this.staticDataSet2%5D)%3B%0A%20%20%20%20%20%20%20%20break%3B%0A%20%20%20%20%20%20case%203%3A%0A%20%20%20%20%20%20%20%20this.basicService%20%3D%20new%20StaticDataTableService(%5B...this.staticDataSet3%5D)%3B%0A%20%20%20%20%20%20%20%20break%3B%0A%20%20%20%20%20%20default%3A%0A%20%20%20%20%20%20%20%20break%3B%0A%20%20%20%20%7D%0A%20%20%7D%0A%0A%20%20public%20toggleGlobalSearch(toggle%3A%20boolean)%3A%20void%20%7B%0A%20%20%20%20this.globalSearchEnabled%20%3D%20toggle%3B%0A%20%20%20%20this.ref.detectChanges()%3B%0A%20%20%7D%0A%0A%20%20public%20log(event%3A%20%7B%20originalEvent%3A%20MouseEvent%3B%20row%3A%20MockData%20%7D)%3A%20void%20%7B%0A%20%20%20%20console.log('%5BDataTable%5D%20Event%20Triggered!'%2C%20event)%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%7D%0A%0A%20%20public%20checkDisabled()%3A%20boolean%20%7B%0A%20%20%20%20return%20true%3B%0A%20%20%7D%0A%0A%20%20public%20configureColumns()%3A%20void%20%7B%0A%20%20%20%20this.modalService%0A%20%20%20%20%20%20.open(ConfigureColumnsModal%2C%20%7B%20columns%3A%20this.sharedColumns%20%7D)%0A%20%20%20%20%20%20.onClosed.then((columns%3A%20IDataTableColumn%3CMockData%3E%5B%5D)%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20if%20(columns)%20%7B%0A%20%20%20%20%20%20%20%20%20%20const%20enabledColumns%20%3D%20columns.filter((column%3A%20IDataTableColumn%3CMockData%3E)%20%3D%3E%20column.enabled)%3B%0A%20%20%20%20%20%20%20%20%20%20this.sharedDisplayColumns%20%3D%20%5B'selection'%2C%20'expand'%2C%20...enabledColumns.map((column%3A%20IDataTableColumn%3CMockData%3E)%20%3D%3E%20column.id)%5D%3B%0A%20%20%20%20%20%20%20%20%20%20this.ref.markForCheck()%3B%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%7D)%3B%0A%20%20%7D%0A%0A%20%20public%20onPreferencesChanged(event%3A%20IDataTablePreferences)%3A%20void%20%7B%0A%20%20%20%20console.log('Preferences%20changed%20(persist%20manually)%3A'%2C%20event)%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%7D%0A%0A%20%20public%20refresh()%3A%20void%20%7B%0A%20%20%20%20this.refreshSubject.next()%3B%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cnovo-data-table%20%5BdataTableService%5D%3D%22basicService%22%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%5Bcolumns%5D%3D%22sharedColumns%22%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%5BallowMultipleFilters%5D%3D%22true%22%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%5BhideGlobalSearch%5D%3D%22!globalSearchEnabled%22%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%5BdisplayedColumns%5D%3D%22sharedDisplayColumns%22%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%5BpaginationOptions%5D%3D%22sharedPaginationOptions%22%3E%0A%20%20%3C!--%20Custom%20Cell%20--%20passed%20with%20template%20property%20on%20Column%20--%3E%0A%20%20%3Cng-template%20novoTemplate%3D%22custom%22%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20let-row%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20let-col%3D%22col%22%3E%0A%20%20%20%20%3Cb%3ECUSTOM%3C%2Fb%3E%20%7B%7B%20row.name%20%7D%7D%0A%20%20%20%20%3Cb%3ECUSTOM%3C%2Fb%3E%0A%20%20%3C%2Fng-template%3E%0A%3C%2Fnovo-data-table%3E%0A`
    },
    'configure-columns-modal': {
        title: 'Configure Columns Modal Example',
        component: ConfigureColumnsModal,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0Aimport%20%7B%20IDataTableColumn%2C%20NovoModalRef%2C%20NovoModalParams%20%7D%20from%20'novo-elements'%3B%0Aimport%20%7B%20MockData%20%7D%20from%20'.%2Fmock-data'%3B%0A%0A%2F**%0A%20*%20%40title%20Configure%20Columns%20Modal%20Example%0A%20*%2F%0A%0A%40Component(%7B%0A%20%20selector%3A%20'configure-columns-modal-example'%2C%0A%20%20template%3A%20%60%0A%20%20%20%20%3Cnovo-modal%3E%0A%20%20%20%20%20%20%3Cheader%20title%3D%22Configure%20Columns%22%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20theme%3D%22contact%22%3E%0A%20%20%20%20%20%20%20%20%3Cutils%3E%0A%20%20%20%20%20%20%20%20%20%20%3Cutil-action%20icon%3D%22times%22%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20(click)%3D%22close()%22%3E%3C%2Futil-action%3E%0A%20%20%20%20%20%20%20%20%3C%2Futils%3E%0A%20%20%20%20%20%20%3C%2Fheader%3E%0A%20%20%20%20%20%20%3Csection%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-list%20direction%3D%22vertical%22%3E%0A%20%20%20%20%20%20%20%20%20%20%3Cnovo-list-item%20*ngFor%3D%22let%20column%20of%20columns%22%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%3Citem-header%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Citem-title%3E%7B%7B%20column.id%20%7D%7D%3C%2Fitem-title%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Citem-header-end%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Cnovo-checkbox%20%5B(ngModel)%5D%3D%22column.enabled%22%3E%3C%2Fnovo-checkbox%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3C%2Fitem-header-end%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3C%2Fitem-header%3E%0A%20%20%20%20%20%20%20%20%20%20%3C%2Fnovo-list-item%3E%0A%20%20%20%20%20%20%20%20%3C%2Fnovo-list%3E%0A%20%20%20%20%20%20%3C%2Fsection%3E%0A%20%20%20%20%20%20%3Cbutton%20theme%3D%22standard%22%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20(click)%3D%22close()%22%3ECancel%3C%2Fbutton%3E%0A%20%20%20%20%20%20%3Cbutton%20theme%3D%22primary%22%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20color%3D%22success%22%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20icon%3D%22check%22%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20(click)%3D%22save()%22%3ESave%3C%2Fbutton%3E%0A%20%20%20%20%3C%2Fnovo-modal%3E%0A%20%20%60%2C%0A%7D)%0Aexport%20class%20ConfigureColumnsModal%20%7B%0A%20%20public%20columns%3A%20IDataTableColumn%3CMockData%3E%3B%0A%0A%20%20constructor(private%20modalRef%3A%20NovoModalRef%2C%20private%20params%3A%20NovoModalParams)%20%7B%0A%20%20%20%20this.columns%20%3D%20params%5B'columns'%5D%3B%0A%20%20%7D%0A%0A%20%20public%20close()%3A%20void%20%7B%0A%20%20%20%20this.modalRef.close()%3B%0A%20%20%7D%0A%0A%20%20public%20save()%20%7B%0A%20%20%20%20this.modalRef.close(this.columns)%3B%0A%20%20%7D%0A%7D%0A`,
        cssSource: ``,
        htmlSource: ``
    },
    'basic-drop-down': {
        title: 'Basic Drop Down',
        component: BasicDropDownExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Basic%20Drop%20Down%0A%20*%2F%0A%40Component(%7B%0A%20%20selector%3A%20'basic-drop-down-example'%2C%0A%20%20templateUrl%3A%20'basic-drop-down-example.html'%2C%0A%20%20styleUrls%3A%20%5B'basic-drop-down-example.css'%5D%2C%0A%7D)%0Aexport%20class%20BasicDropDownExample%20%7B%0A%20%20public%20clickMe(event%3F%3A%20string)%20%7B%0A%20%20%20%20window.alert(event)%3B%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cnovo-dropdown%3E%0A%20%20%3Cbutton%20type%3D%22button%22%0A%20%20%20%20%20%20%20%20%20%20theme%3D%22secondary%22%0A%20%20%20%20%20%20%20%20%20%20icon%3D%22collapse%22%0A%20%20%20%20%20%20%20%20%20%20inverse%3EActions%3C%2Fbutton%3E%0A%20%20%3Clist%3E%0A%20%20%20%20%3Cdropdown-item-header%3ESection%201%3C%2Fdropdown-item-header%3E%0A%20%20%20%20%3Citem%20(action)%3D%22clickMe('Hello!')%22%3ETest%3C%2Fitem%3E%0A%20%20%20%20%3Citem%20(action)%3D%22clickMe('Another!')%22%3EJosh%3C%2Fitem%3E%0A%20%20%20%20%3Citem%20tooltip%3D%22Test%20tooltip%20%3A)%22%0A%20%20%20%20%20%20%20%20%20%20tooltipPosition%3D%22right%22%0A%20%20%20%20%20%20%20%20%20%20%5Bdisabled%5D%3D%22true%22%0A%20%20%20%20%20%20%20%20%20%20(action)%3D%22clickMe()%22%3EMenu%20Item%20With%20Lots%20of%20Text%20in%20it%20to%20Show%20Dynamic%20Width%3C%2Fitem%3E%0A%20%20%20%20%3Cdropdown-item-header%3ESection%202%3C%2Fdropdown-item-header%3E%0A%20%20%20%20%3Citem%20(action)%3D%22clickMe('Hello!')%22%3EGermany%3C%2Fitem%3E%0A%20%20%20%20%3Citem%20(action)%3D%22clickMe('Another!')%22%3EAlgebra%3C%2Fitem%3E%0A%20%20%20%20%3Citem%20tooltip%3D%22Test%20tooltip%20%3A)%22%0A%20%20%20%20%20%20%20%20%20%20tooltipPosition%3D%22right%22%0A%20%20%20%20%20%20%20%20%20%20%5Bdisabled%5D%3D%22true%22%0A%20%20%20%20%20%20%20%20%20%20(action)%3D%22clickMe()%22%3EBlah%3C%2Fitem%3E%0A%20%20%3C%2Flist%3E%0A%3C%2Fnovo-dropdown%3E%0A%3Cnovo-dropdown%20side%3D%22right%22%3E%0A%20%20%3Cbutton%20type%3D%22button%22%0A%20%20%20%20%20%20%20%20%20%20theme%3D%22icon%22%0A%20%20%20%20%20%20%20%20%20%20icon%3D%22menu%22%0A%20%20%20%20%20%20%20%20%20%20inverse%3E%3C%2Fbutton%3E%0A%20%20%3Clist%3E%0A%20%20%20%20%3Citem%3EAction%201%3C%2Fitem%3E%0A%20%20%20%20%3Citem%20tooltip%3D%22Test%20tooltip%20%3A)%22%0A%20%20%20%20%20%20%20%20%20%20tooltipPosition%3D%22left%22%3EAction%202%3C%2Fitem%3E%0A%20%20%20%20%3Citem%3EAction%203%3C%2Fitem%3E%0A%20%20%20%20%3Citem%3EAction%204%3C%2Fitem%3E%0A%20%20%20%20%3Citem%3EAction%205%3C%2Fitem%3E%0A%20%20%20%20%3Citem%3EAction%206%3C%2Fitem%3E%0A%20%20%20%20%3Citem%3EAction%207%3C%2Fitem%3E%0A%20%20%20%20%3Citem%3EAction%208%3C%2Fitem%3E%0A%20%20%20%20%3Citem%3EAction%209%3C%2Fitem%3E%0A%20%20%20%20%3Citem%3EAction%2010%3C%2Fitem%3E%0A%20%20%20%20%3Citem%3EMenu%20Item%20With%20Lots%20of%20Text%20in%20it%20to%20Show%20Dynamic%20Width%3C%2Fitem%3E%0A%20%20%3C%2Flist%3E%0A%3C%2Fnovo-dropdown%3E%0A`
    },
    'custom-drop-down': {
        title: 'Custom Drop Down',
        component: CustomDropDownExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Custom%20Drop%20Down%0A%20*%2F%0A%40Component(%7B%0A%20%20selector%3A%20'custom-drop-down-example'%2C%0A%20%20templateUrl%3A%20'custom-drop-down-example.html'%2C%0A%20%20styleUrls%3A%20%5B'custom-drop-down-example.css'%5D%2C%0A%7D)%0Aexport%20class%20CustomDropDownExample%20%7B%0A%20%20public%20clickMe(event%3F%3A%20string)%20%7B%0A%20%20%20%20window.alert(event)%3B%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cnovo-dropdown%20containerClass%3D%22custom-class%22%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20scrollStrategy%3D%22close%22%3E%0A%20%20%3Cbutton%20type%3D%22button%22%0A%20%20%20%20%20%20%20%20%20%20theme%3D%22secondary%22%0A%20%20%20%20%20%20%20%20%20%20icon%3D%22collapse%22%0A%20%20%20%20%20%20%20%20%20%20inverse%3EI%20Have%20A%20Custom%20Class!%3C%2Fbutton%3E%0A%20%20%3Clist%3E%0A%20%20%20%20%3Citem%20(action)%3D%22clickMe('Hello!')%22%3EAction%201%3C%2Fitem%3E%0A%20%20%20%20%3Citem%20(action)%3D%22clickMe('Another!')%22%3EAction%202%3C%2Fitem%3E%0A%20%20%3C%2Flist%3E%0A%3C%2Fnovo-dropdown%3E%0A`
    },
    'large-drop-down': {
        title: 'Large Drop Down',
        component: LargeDropDownExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Large%20Drop%20Down%0A%20*%2F%0A%40Component(%7B%0A%20%20selector%3A%20'large-drop-down-example'%2C%0A%20%20templateUrl%3A%20'large-drop-down-example.html'%2C%0A%20%20styleUrls%3A%20%5B'large-drop-down-example.css'%5D%2C%0A%7D)%0Aexport%20class%20LargeDropDownExample%20%7B%0A%20%20public%20MOCK_WORDS%3A%20string%5B%5D%20%3D%20%5B%0A%20%20%20%20'lorem'%2C%0A%20%20%20%20'ipsum'%2C%0A%20%20%20%20'dolor'%2C%0A%20%20%20%20'sit'%2C%0A%20%20%20%20'amet'%2C%0A%20%20%20%20'consectetur'%2C%0A%20%20%20%20'adipiscing'%2C%0A%20%20%20%20'elit'%2C%0A%20%20%20%20'curabitur'%2C%0A%20%20%20%20'vel'%2C%0A%20%20%20%20'hendrerit'%2C%0A%20%20%20%20'libero'%2C%0A%20%20%20%20'eleifend'%2C%0A%20%20%20%20'blandit'%2C%0A%20%20%20%20'nunc'%2C%0A%20%20%20%20'ornare'%2C%0A%20%20%20%20'odio'%2C%0A%20%20%20%20'ut'%2C%0A%20%20%20%20'orci'%2C%0A%20%20%20%20'gravida'%2C%0A%20%20%20%20'imperdiet'%2C%0A%20%20%20%20'nullam'%2C%0A%20%20%20%20'purus'%2C%0A%20%20%20%20'lacinia'%2C%0A%20%20%20%20'a'%2C%0A%20%20%20%20'pretium'%2C%0A%20%20%20%20'quis'%2C%0A%20%20%20%20'congue'%2C%0A%20%20%20%20'praesent'%2C%0A%20%20%20%20'sagittis'%2C%0A%20%20%20%20'laoreet'%2C%0A%20%20%20%20'auctor'%2C%0A%20%20%20%20'mauris'%2C%0A%20%20%20%20'non'%2C%0A%20%20%20%20'velit'%2C%0A%20%20%20%20'eros'%2C%0A%20%20%20%20'dictum'%2C%0A%20%20%20%20'proin'%2C%0A%20%20%20%20'accumsan'%2C%0A%20%20%20%20'sapien'%2C%0A%20%20%20%20'nec'%2C%0A%20%20%20%20'massa'%2C%0A%20%20%20%20'volutpat'%2C%0A%20%20%20%20'venenatis'%2C%0A%20%20%20%20'sed'%2C%0A%20%20%20%20'eu'%2C%0A%20%20%20%20'molestie'%2C%0A%20%20%20%20'lacus'%2C%0A%20%20%20%20'quisque'%2C%0A%20%20%20%20'porttitor'%2C%0A%20%20%20%20'ligula'%2C%0A%20%20%20%20'dui'%2C%0A%20%20%20%20'mollis'%2C%0A%20%20%20%20'tempus'%2C%0A%20%20%20%20'at'%2C%0A%20%20%20%20'magna'%2C%0A%20%20%20%20'vestibulum'%2C%0A%20%20%20%20'turpis'%2C%0A%20%20%20%20'ac'%2C%0A%20%20%20%20'diam'%2C%0A%20%20%20%20'tincidunt'%2C%0A%20%20%20%20'id'%2C%0A%20%20%20%20'condimentum'%2C%0A%20%20%20%20'enim'%2C%0A%20%20%20%20'sodales'%2C%0A%20%20%20%20'in'%2C%0A%20%20%20%20'hac'%2C%0A%20%20%20%20'habitasse'%2C%0A%20%20%20%20'platea'%2C%0A%20%20%20%20'dictumst'%2C%0A%20%20%20%20'aenean'%2C%0A%20%20%20%20'neque'%2C%0A%20%20%20%20'fusce'%2C%0A%20%20%20%20'augue'%2C%0A%20%20%20%20'leo'%2C%0A%20%20%20%20'eget'%2C%0A%20%20%20%20'semper'%2C%0A%20%20%20%20'mattis'%2C%0A%20%20%20%20'tortor'%2C%0A%20%20%20%20'scelerisque'%2C%0A%20%20%20%20'nulla'%2C%0A%20%20%20%20'interdum'%2C%0A%20%20%20%20'tellus'%2C%0A%20%20%20%20'malesuada'%2C%0A%20%20%20%20'rhoncus'%2C%0A%20%20%20%20'porta'%2C%0A%20%20%20%20'sem'%2C%0A%20%20%20%20'aliquet'%2C%0A%20%20%20%20'et'%2C%0A%20%20%20%20'nam'%2C%0A%20%20%20%20'suspendisse'%2C%0A%20%20%20%20'potenti'%2C%0A%20%20%20%20'vivamus'%2C%0A%20%20%20%20'luctus'%2C%0A%20%20%20%20'fringilla'%2C%0A%20%20%20%20'erat'%2C%0A%20%20%20%20'donec'%2C%0A%20%20%20%20'justo'%2C%0A%20%20%20%20'vehicula'%2C%0A%20%20%20%20'ultricies'%2C%0A%20%20%20%20'varius'%2C%0A%20%20%20%20'ante'%2C%0A%20%20%20%20'primis'%2C%0A%20%20%20%20'faucibus'%2C%0A%20%20%20%20'ultrices'%2C%0A%20%20%20%20'posuere'%2C%0A%20%20%20%20'cubilia'%2C%0A%20%20%20%20'curae'%2C%0A%20%20%20%20'etiam'%2C%0A%20%20%20%20'cursus'%2C%0A%20%20%20%20'aliquam'%2C%0A%20%20%20%20'quam'%2C%0A%20%20%20%20'dapibus'%2C%0A%20%20%20%20'nisl'%2C%0A%20%20%20%20'feugiat'%2C%0A%20%20%20%20'egestas'%2C%0A%20%20%20%20'class'%2C%0A%20%20%20%20'aptent'%2C%0A%20%20%20%20'taciti'%2C%0A%20%20%20%20'sociosqu'%2C%0A%20%20%20%20'ad'%2C%0A%20%20%20%20'litora'%2C%0A%20%20%20%20'torquent'%2C%0A%20%20%20%20'per'%2C%0A%20%20%20%20'conubia'%2C%0A%20%20%20%20'nostra'%2C%0A%20%20%20%20'inceptos'%2C%0A%20%20%20%20'himenaeos'%2C%0A%20%20%20%20'phasellus'%2C%0A%20%20%20%20'nibh'%2C%0A%20%20%20%20'pulvinar'%2C%0A%20%20%20%20'vitae'%2C%0A%20%20%20%20'urna'%2C%0A%20%20%20%20'iaculis'%2C%0A%20%20%20%20'lobortis'%2C%0A%20%20%20%20'nisi'%2C%0A%20%20%20%20'viverra'%2C%0A%20%20%20%20'arcu'%2C%0A%20%20%20%20'morbi'%2C%0A%20%20%20%20'pellentesque'%2C%0A%20%20%20%20'metus'%2C%0A%20%20%20%20'commodo'%2C%0A%20%20%20%20'ut'%2C%0A%20%20%20%20'facilisis'%2C%0A%20%20%20%20'felis'%2C%0A%20%20%20%20'tristique'%2C%0A%20%20%20%20'ullamcorper'%2C%0A%20%20%20%20'placerat'%2C%0A%20%20%20%20'aenean'%2C%0A%20%20%20%20'convallis'%2C%0A%20%20%20%20'sollicitudin'%2C%0A%20%20%20%20'integer'%2C%0A%20%20%20%20'rutrum'%2C%0A%20%20%20%20'duis'%2C%0A%20%20%20%20'est'%2C%0A%20%20%20%20'etiam'%2C%0A%20%20%20%20'bibendum'%2C%0A%20%20%20%20'donec'%2C%0A%20%20%20%20'pharetra'%2C%0A%20%20%20%20'vulputate'%2C%0A%20%20%20%20'maecenas'%2C%0A%20%20%20%20'mi'%2C%0A%20%20%20%20'fermentum'%2C%0A%20%20%20%20'consequat'%2C%0A%20%20%20%20'suscipit'%2C%0A%20%20%20%20'aliquam'%2C%0A%20%20%20%20'habitant'%2C%0A%20%20%20%20'senectus'%2C%0A%20%20%20%20'netus'%2C%0A%20%20%20%20'fames'%2C%0A%20%20%20%20'quisque'%2C%0A%20%20%20%20'euismod'%2C%0A%20%20%20%20'curabitur'%2C%0A%20%20%20%20'lectus'%2C%0A%20%20%20%20'elementum'%2C%0A%20%20%20%20'tempor'%2C%0A%20%20%20%20'risus'%2C%0A%20%20%20%20'cras'%2C%0A%20%20%5D%3B%0A%0A%20%20public%20clickMe(data%3A%20string)%3A%20void%20%7B%0A%20%20%20%20console.log('CLICKED!'%2C%20data)%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cnovo-dropdown%20height%3D%22250%22%3E%0A%20%20%20%20%3Cbutton%20type%3D%22button%22%0A%20%20%20%20%20%20%20%20%20%20%20%20theme%3D%22secondary%22%0A%20%20%20%20%20%20%20%20%20%20%20%20icon%3D%22collapse%22%0A%20%20%20%20%20%20%20%20%20%20%20%20inverse%3ELots%20of%20Data%20Points!%3C%2Fbutton%3E%0A%20%20%20%20%3Clist%3E%0A%20%20%20%20%20%20%3Citem%20*ngFor%3D%22let%20name%20of%20MOCK_WORDS%22%0A%20%20%20%20%20%20%20%20%20%20%20%20(action)%3D%22clickMe(name)%22%3E%7B%7B%20name%20%7D%7D%3C%2Fitem%3E%0A%20%20%20%20%3C%2Flist%3E%0A%20%20%3C%2Fnovo-dropdown%3E%0A`
    },
    'multi-drop-down': {
        title: 'Multi Drop Down',
        component: MultiDropDownExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Multi%20Drop%20Down%0A%20*%2F%0A%40Component(%7B%0A%20%20selector%3A%20'multi-drop-down-example'%2C%0A%20%20templateUrl%3A%20'multi-drop-down-example.html'%2C%0A%20%20styleUrls%3A%20%5B'multi-drop-down-example.css'%5D%2C%0A%7D)%0Aexport%20class%20MultiDropDownExample%20%7B%0A%20%20public%20clickMe(data%3A%20string)%3A%20void%20%7B%0A%20%20%20%20console.log('CLICKED!'%2C%20data)%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cnovo-dropdown%3E%0A%20%20%20%20%3Cbutton%20type%3D%22button%22%0A%20%20%20%20%20%20%20%20%20%20%20%20theme%3D%22secondary%22%0A%20%20%20%20%20%20%20%20%20%20%20%20icon%3D%22collapse%22%0A%20%20%20%20%20%20%20%20%20%20%20%20inverse%3EKeep%20Open%3C%2Fbutton%3E%0A%20%20%20%20%3Clist%3E%0A%20%20%20%20%20%20%3Citem%20(action)%3D%22clickMe('Hello!')%22%0A%20%20%20%20%20%20%20%20%20%20%20%20keepOpen%3D%22true%22%3EAction%201%3C%2Fitem%3E%0A%20%20%20%20%20%20%3Citem%20(action)%3D%22clickMe('Another!')%22%0A%20%20%20%20%20%20%20%20%20%20%20%20keepOpen%3D%22true%22%3EAction%202%3C%2Fitem%3E%0A%20%20%20%20%3C%2Flist%3E%0A%20%20%3C%2Fnovo-dropdown%3E%0A`
    },
    'position-drop-down': {
        title: 'Drop Down Positions',
        component: PositionDropDownExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Drop%20Down%20Positions%0A%20*%2F%0A%40Component(%7B%0A%20%20selector%3A%20'position-drop-down-example'%2C%0A%20%20templateUrl%3A%20'position-drop-down-example.html'%2C%0A%20%20styleUrls%3A%20%5B'position-drop-down-example.css'%5D%2C%0A%7D)%0Aexport%20class%20PositionDropDownExample%20%7B%0A%20%20public%20POSITION_OPTIONS%3A%20%7B%20name%3A%20string%3B%20description%3A%20string%20%7D%5B%5D%20%3D%20%5B%0A%20%20%20%20%7B%0A%20%20%20%20%20%20name%3A%20'default%20(left)'%2C%0A%20%20%20%20%20%20description%3A%20'Prefer%20bottom-left%2C%20with%20fallback%20positions%20(in%20order)%3A%20top-left%2C%20bottom-right%2C%20top-right%2C%20center-left%2C%20center-right'%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20name%3A%20'right'%2C%0A%20%20%20%20%20%20description%3A%20'Prefer%20bottom-right%2C%20with%20fallback%20positions%20(in%20order)%3A%20top-right%2C%20bottom-left%2C%20top-left%2C%20center-left%2C%20center-right'%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20name%3A%20'above-below'%2C%0A%20%20%20%20%20%20description%3A%20'Prefer%20bottom-left%2C%20with%20fallback%20positions%20(in%20order)%3A%20top-left%2C%20bottom-right%2C%20top-right%20(no%20center)'%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20name%3A%20'right-above-below'%2C%0A%20%20%20%20%20%20description%3A%20'Prefer%20bottom-left%2C%20with%20fallback%20positions%20(in%20order)%3A%20top-left%2C%20bottom-right%2C%20top-right%20(no%20center)'%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%20name%3A%20'center'%2C%20description%3A%20'Prefer%20center-left%2C%20with%20fallback%20positions%20above%20and%20below%2C%20but%20always%20covering%20the%20dropdown'%20%7D%2C%0A%20%20%20%20%7B%20name%3A%20'bottom'%2C%20description%3A%20'Prefer%20bottom-left%2C%20with%20fallback%20position%20of%20bottom-right'%20%7D%2C%0A%20%20%20%20%7B%20name%3A%20'bottom-left'%2C%20description%3A%20'Always%20popup%20to%20the%20bottom-left'%20%7D%2C%0A%20%20%20%20%7B%20name%3A%20'bottom-right'%2C%20description%3A%20'Always%20popup%20to%20the%20bottom-right'%20%7D%2C%0A%20%20%20%20%7B%20name%3A%20'top-left'%2C%20description%3A%20'Always%20popup%20to%20the%20top-left'%20%7D%2C%0A%20%20%20%20%7B%20name%3A%20'top-right'%2C%20description%3A%20'Always%20popup%20to%20the%20top-right'%20%7D%2C%0A%20%20%5D%3B%0A%0A%20%20public%20clickMe(data%3A%20string)%3A%20void%20%7B%0A%20%20%20%20console.log('CLICKED!'%2C%20data)%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20CSS%20for%20this%20example%20*%2F%0A%3Ahost%20%7B%0A%20%20background%3A%20%234a89dc%3B%0A%20%20padding%3A%201rem%3B%0A%20%20display%3A%20flex%3B%0A%20%20justify-content%3A%20space-between%3B%0A%20%20align-items%3A%20center%3B%0A%20%20flex-wrap%3A%20wrap%3B%0A%20%20padding%3A%200.5rem%3B%0A%7D%0A%0A%3Ahost%20novo-dropdown%20%7B%0A%20%20margin%3A%200.5rem%3B%0A%7D%0A`,
        htmlSource: `%3Cnovo-dropdown%20side%3D%22default%22%3E%0A%20%20%20%20%3Cbutton%20type%3D%22button%22%0A%20%20%20%20%20%20%20%20%20%20%20%20theme%3D%22secondary%22%0A%20%20%20%20%20%20%20%20%20%20%20%20icon%3D%22collapse%22%0A%20%20%20%20%20%20%20%20%20%20%20%20inverse%3EDefault%3C%2Fbutton%3E%0A%20%20%20%20%3Clist%3E%0A%20%20%20%20%20%20%3Citem%3EFive%3C%2Fitem%3E%0A%20%20%20%20%20%20%3Citem%3EItems%3C%2Fitem%3E%0A%20%20%20%20%20%20%3Citem%3EFor%3C%2Fitem%3E%0A%20%20%20%20%20%20%3Citem%3EPosition%3C%2Fitem%3E%0A%20%20%20%20%20%20%3Citem%3ETest%3C%2Fitem%3E%0A%20%20%20%20%3C%2Flist%3E%0A%20%20%3C%2Fnovo-dropdown%3E%0A%20%20%3Cnovo-dropdown%20side%3D%22right%22%3E%0A%20%20%20%20%3Cbutton%20type%3D%22button%22%0A%20%20%20%20%20%20%20%20%20%20%20%20theme%3D%22secondary%22%0A%20%20%20%20%20%20%20%20%20%20%20%20icon%3D%22collapse%22%0A%20%20%20%20%20%20%20%20%20%20%20%20inverse%3ERight%3C%2Fbutton%3E%0A%20%20%20%20%3Clist%3E%0A%20%20%20%20%20%20%3Citem%3EFive%3C%2Fitem%3E%0A%20%20%20%20%20%20%3Citem%3EItems%3C%2Fitem%3E%0A%20%20%20%20%20%20%3Citem%3EFor%3C%2Fitem%3E%0A%20%20%20%20%20%20%3Citem%3EPosition%3C%2Fitem%3E%0A%20%20%20%20%20%20%3Citem%3ETest%3C%2Fitem%3E%0A%20%20%20%20%3C%2Flist%3E%0A%20%20%3C%2Fnovo-dropdown%3E%0A%20%20%3Cnovo-dropdown%20side%3D%22above-below%22%3E%0A%20%20%20%20%3Cbutton%20type%3D%22button%22%0A%20%20%20%20%20%20%20%20%20%20%20%20theme%3D%22secondary%22%0A%20%20%20%20%20%20%20%20%20%20%20%20icon%3D%22collapse%22%0A%20%20%20%20%20%20%20%20%20%20%20%20inverse%3EAbove-below%3C%2Fbutton%3E%0A%20%20%20%20%3Clist%3E%0A%20%20%20%20%20%20%3Citem%3EFive%3C%2Fitem%3E%0A%20%20%20%20%20%20%3Citem%3EItems%3C%2Fitem%3E%0A%20%20%20%20%20%20%3Citem%3EFor%3C%2Fitem%3E%0A%20%20%20%20%20%20%3Citem%3EPosition%3C%2Fitem%3E%0A%20%20%20%20%20%20%3Citem%3ETest%3C%2Fitem%3E%0A%20%20%20%20%3C%2Flist%3E%0A%20%20%3C%2Fnovo-dropdown%3E%0A%20%20%3Cnovo-dropdown%20side%3D%22right-above-below%22%3E%0A%20%20%20%20%3Cbutton%20type%3D%22button%22%0A%20%20%20%20%20%20%20%20%20%20%20%20theme%3D%22secondary%22%0A%20%20%20%20%20%20%20%20%20%20%20%20icon%3D%22collapse%22%0A%20%20%20%20%20%20%20%20%20%20%20%20inverse%3ERight-Above-Below%3C%2Fbutton%3E%0A%20%20%20%20%3Clist%3E%0A%20%20%20%20%20%20%3Citem%3EFive%3C%2Fitem%3E%0A%20%20%20%20%20%20%3Citem%3EItems%3C%2Fitem%3E%0A%20%20%20%20%20%20%3Citem%3EFor%3C%2Fitem%3E%0A%20%20%20%20%20%20%3Citem%3EPosition%3C%2Fitem%3E%0A%20%20%20%20%20%20%3Citem%3ETest%3C%2Fitem%3E%0A%20%20%20%20%3C%2Flist%3E%0A%20%20%3C%2Fnovo-dropdown%3E%0A%20%20%3Cnovo-dropdown%20side%3D%22center%22%3E%0A%20%20%20%20%3Cbutton%20type%3D%22button%22%0A%20%20%20%20%20%20%20%20%20%20%20%20theme%3D%22secondary%22%0A%20%20%20%20%20%20%20%20%20%20%20%20icon%3D%22collapse%22%0A%20%20%20%20%20%20%20%20%20%20%20%20inverse%3ECenter%3C%2Fbutton%3E%0A%20%20%20%20%3Clist%3E%0A%20%20%20%20%20%20%3Citem%3EFive%3C%2Fitem%3E%0A%20%20%20%20%20%20%3Citem%3EItems%3C%2Fitem%3E%0A%20%20%20%20%20%20%3Citem%3EFor%3C%2Fitem%3E%0A%20%20%20%20%20%20%3Citem%3EPosition%3C%2Fitem%3E%0A%20%20%20%20%20%20%3Citem%3ETest%3C%2Fitem%3E%0A%20%20%20%20%3C%2Flist%3E%0A%20%20%3C%2Fnovo-dropdown%3E%0A%20%20%3Cnovo-dropdown%20side%3D%22bottom%22%3E%0A%20%20%20%20%3Cbutton%20type%3D%22button%22%0A%20%20%20%20%20%20%20%20%20%20%20%20theme%3D%22secondary%22%0A%20%20%20%20%20%20%20%20%20%20%20%20icon%3D%22collapse%22%0A%20%20%20%20%20%20%20%20%20%20%20%20inverse%3EBottom%3C%2Fbutton%3E%0A%20%20%20%20%3Clist%3E%0A%20%20%20%20%20%20%3Citem%3EFive%3C%2Fitem%3E%0A%20%20%20%20%20%20%3Citem%3EItems%3C%2Fitem%3E%0A%20%20%20%20%20%20%3Citem%3EFor%3C%2Fitem%3E%0A%20%20%20%20%20%20%3Citem%3EPosition%3C%2Fitem%3E%0A%20%20%20%20%20%20%3Citem%3ETest%3C%2Fitem%3E%0A%20%20%20%20%3C%2Flist%3E%0A%20%20%3C%2Fnovo-dropdown%3E%0A%20%20%3Cnovo-dropdown%20side%3D%22bottom-left%22%3E%0A%20%20%20%20%3Cbutton%20type%3D%22button%22%0A%20%20%20%20%20%20%20%20%20%20%20%20theme%3D%22secondary%22%0A%20%20%20%20%20%20%20%20%20%20%20%20icon%3D%22collapse%22%0A%20%20%20%20%20%20%20%20%20%20%20%20inverse%3EBottom-Left%3C%2Fbutton%3E%0A%20%20%20%20%3Clist%3E%0A%20%20%20%20%20%20%3Citem%3EFive%3C%2Fitem%3E%0A%20%20%20%20%20%20%3Citem%3EItems%3C%2Fitem%3E%0A%20%20%20%20%20%20%3Citem%3EFor%3C%2Fitem%3E%0A%20%20%20%20%20%20%3Citem%3EPosition%3C%2Fitem%3E%0A%20%20%20%20%20%20%3Citem%3ETest%3C%2Fitem%3E%0A%20%20%20%20%3C%2Flist%3E%0A%20%20%3C%2Fnovo-dropdown%3E%0A%20%20%3Cnovo-dropdown%20side%3D%22bottom-right%22%3E%0A%20%20%20%20%3Cbutton%20type%3D%22button%22%0A%20%20%20%20%20%20%20%20%20%20%20%20theme%3D%22secondary%22%0A%20%20%20%20%20%20%20%20%20%20%20%20icon%3D%22collapse%22%0A%20%20%20%20%20%20%20%20%20%20%20%20inverse%3EBottom-Right%3C%2Fbutton%3E%0A%20%20%20%20%3Clist%3E%0A%20%20%20%20%20%20%3Citem%3EFive%3C%2Fitem%3E%0A%20%20%20%20%20%20%3Citem%3EItems%3C%2Fitem%3E%0A%20%20%20%20%20%20%3Citem%3EFor%3C%2Fitem%3E%0A%20%20%20%20%20%20%3Citem%3EPosition%3C%2Fitem%3E%0A%20%20%20%20%20%20%3Citem%3ETest%3C%2Fitem%3E%0A%20%20%20%20%3C%2Flist%3E%0A%20%20%3C%2Fnovo-dropdown%3E%0A%20%20%3Cnovo-dropdown%20side%3D%22top-left%22%3E%0A%20%20%20%20%3Cbutton%20type%3D%22button%22%0A%20%20%20%20%20%20%20%20%20%20%20%20theme%3D%22secondary%22%0A%20%20%20%20%20%20%20%20%20%20%20%20icon%3D%22collapse%22%0A%20%20%20%20%20%20%20%20%20%20%20%20inverse%3ETop-Left%3C%2Fbutton%3E%0A%20%20%20%20%3Clist%3E%0A%20%20%20%20%20%20%3Citem%3EFive%3C%2Fitem%3E%0A%20%20%20%20%20%20%3Citem%3EItems%3C%2Fitem%3E%0A%20%20%20%20%20%20%3Citem%3EFor%3C%2Fitem%3E%0A%20%20%20%20%20%20%3Citem%3EPosition%3C%2Fitem%3E%0A%20%20%20%20%20%20%3Citem%3ETest%3C%2Fitem%3E%0A%20%20%20%20%3C%2Flist%3E%0A%20%20%3C%2Fnovo-dropdown%3E%0A%20%20%3Cnovo-dropdown%20side%3D%22top-right%22%3E%0A%20%20%20%20%3Cbutton%20type%3D%22button%22%0A%20%20%20%20%20%20%20%20%20%20%20%20theme%3D%22secondary%22%0A%20%20%20%20%20%20%20%20%20%20%20%20icon%3D%22collapse%22%0A%20%20%20%20%20%20%20%20%20%20%20%20inverse%3ETop-Right%3C%2Fbutton%3E%0A%20%20%20%20%3Clist%3E%0A%20%20%20%20%20%20%3Citem%3EFive%3C%2Fitem%3E%0A%20%20%20%20%20%20%3Citem%3EItems%3C%2Fitem%3E%0A%20%20%20%20%20%20%3Citem%3EFor%3C%2Fitem%3E%0A%20%20%20%20%20%20%3Citem%3EPosition%3C%2Fitem%3E%0A%20%20%20%20%20%20%3Citem%3ETest%3C%2Fitem%3E%0A%20%20%20%20%3C%2Flist%3E%0A%20%20%3C%2Fnovo-dropdown%3E%0A`
    },
    'scrollable-drop-down': {
        title: 'Scrollable Drop Down',
        component: ScrollableDropDownExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Scrollable%20Drop%20Down%0A%20*%2F%0A%40Component(%7B%0A%20%20selector%3A%20'scrollable-drop-down-example'%2C%0A%20%20templateUrl%3A%20'scrollable-drop-down-example.html'%2C%0A%20%20styleUrls%3A%20%5B'scrollable-drop-down-example.css'%5D%2C%0A%7D)%0Aexport%20class%20ScrollableDropDownExample%20%7B%0A%20%20public%20clickMe(event%3F%3A%20string)%20%7B%0A%20%20%20%20window.alert(event)%3B%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20CSS%20for%20this%20example%20*%2F%0A%3Ahost%20%7B%0A%20%20background%3A%20%234a89dc%3B%0A%20%20display%3A%20block%3B%0A%20%20justify-content%3A%20space-between%3B%0A%20%20align-items%3A%20center%3B%0A%20%20padding%3A%200.5rem%3B%0A%7D%0A%3Ahost%20.scrollable-container%20%7B%0A%20%20max-height%3A%2010rem%3B%0A%20%20overflow%3A%20scroll%3B%0A%7D%0A%3Ahost%20.scrollable-container%20.scrollable-content%20%7B%0A%20%20height%3A%2030em%3B%0A%7D%0A%3Ahost%20novo-dropdown%20%7B%0A%20%20margin%3A%205rem%3B%0A%7D%0A`,
        htmlSource: `%3Cdiv%20class%3D%22scrollable-container%22%20cdkScrollable%3E%0A%20%20%20%20%3Cdiv%20class%3D%22scrollable-content%22%3E%0A%20%20%20%20%20%20%3Cnovo-dropdown%3E%0A%20%20%20%20%20%20%20%20%3Cbutton%20type%3D%22button%22%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20theme%3D%22secondary%22%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20icon%3D%22collapse%22%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20inverse%3EInside%20a%20Scrollable%20Container%3C%2Fbutton%3E%0A%20%20%20%20%20%20%20%20%3Clist%3E%0A%20%20%20%20%20%20%20%20%20%20%3Citem%20(action)%3D%22clickMe('This')%22%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20keepOpen%3D%22true%22%3EThis%3C%2Fitem%3E%0A%20%20%20%20%20%20%20%20%20%20%3Citem%20(action)%3D%22clickMe('Scrolls!')%22%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20keepOpen%3D%22true%22%3EScrolls!%3C%2Fitem%3E%0A%20%20%20%20%20%20%20%20%3C%2Flist%3E%0A%20%20%20%20%20%20%3C%2Fnovo-dropdown%3E%0A%20%20%20%20%3C%2Fdiv%3E%0A%20%20%3C%2Fdiv%3E%0A`
    },
    'basic-icons': {
        title: 'Basic Icons',
        component: BasicIconsExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Basic%20Icons%0A%20*%2F%0A%40Component(%7B%0A%20%20selector%3A%20'basic-icons-example'%2C%0A%20%20templateUrl%3A%20'basic-icons-example.html'%2C%0A%20%20styleUrls%3A%20%5B'basic-icons-example.css'%5D%2C%0A%7D)%0Aexport%20class%20BasicIconsExample%20%7B%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%0A%3Cnovo-icon%3Ecandidate%3C%2Fnovo-icon%3E%0A%3Cnovo-icon%3Ejob%3C%2Fnovo-icon%3E%0A%3Cnovo-icon%3Ecompany%3C%2Fnovo-icon%3E%0A%3Cnovo-icon%3Elead%3C%2Fnovo-icon%3E%0A%3Cnovo-icon%3Eopportunity%3C%2Fnovo-icon%3E%0A%3Cbr%3E%0A%3Ci%20class%3D%22bhi-candidate%22%3E%3C%2Fi%3E%0A%3Ci%20class%3D%22bhi-person%22%3E%3C%2Fi%3E%0A%3Ci%20class%3D%22bhi-job%22%3E%3C%2Fi%3E%0A%3Ci%20class%3D%22bhi-company%22%3E%3C%2Fi%3E%0A%3Ci%20class%3D%22bhi-lead%22%3E%3C%2Fi%3E%0A%3Ci%20class%3D%22bhi-opportunity%22%3E%3C%2Fi%3E%0A`
    },
    'raised-icons': {
        title: 'Raised Icons',
        component: RaisedIconsExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Raised%20Icons%0A%20*%2F%0A%40Component(%7B%0A%20%20selector%3A%20'raised-icons-example'%2C%0A%20%20templateUrl%3A%20'raised-icons-example.html'%2C%0A%20%20styleUrls%3A%20%5B'raised-icons-example.css'%5D%2C%0A%7D)%0Aexport%20class%20RaisedIconsExample%20%7B%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cnovo-icon%20theme%3D%22candidate%22%20raised%3D%22true%22%3Ecandidate%3C%2Fnovo-icon%3E%0A%3Cnovo-icon%20theme%3D%22job%22%20raised%3D%22true%22%3Ejob%3C%2Fnovo-icon%3E%0A%3Cnovo-icon%20theme%3D%22company%22%20raised%3D%22true%22%3Ecompany%3C%2Fnovo-icon%3E%0A%3Cnovo-icon%20theme%3D%22submission%22%20raised%3D%22true%22%3Estar-o%3C%2Fnovo-icon%3E%0A%3Cnovo-icon%20theme%3D%22placement%22%20raised%3D%22true%22%3Estar%3C%2Fnovo-icon%3E%0A`
    },
    'themed-icons': {
        title: 'Themed Icons',
        component: ThemedIconsExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Themed%20Icons%0A%20*%2F%0A%40Component(%7B%0A%20%20selector%3A%20'themed-icons-example'%2C%0A%20%20templateUrl%3A%20'themed-icons-example.html'%2C%0A%20%20styleUrls%3A%20%5B'themed-icons-example.css'%5D%2C%0A%7D)%0Aexport%20class%20ThemedIconsExample%20%7B%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%0A%3Cnovo-icon%20color%3D%22candidate%22%3Ecandidate%3C%2Fnovo-icon%3E%0A%3Cnovo-icon%20color%3D%22job%22%3Ejob%3C%2Fnovo-icon%3E%0A%3Cnovo-icon%20color%3D%22company%22%3Ecompany%3C%2Fnovo-icon%3E%0A%3Cnovo-icon%20color%3D%22submission%22%3Estar-o%3C%2Fnovo-icon%3E%0A%3Cnovo-icon%20color%3D%22placement%22%3Estar%3C%2Fnovo-icon%3E%0A%3Cbr%3E%0A%3Cnovo-icon%20theme%3D%22candidate%22%3Ecandidate%3C%2Fnovo-icon%3E%0A%3Cnovo-icon%20theme%3D%22job%22%3Ejob%3C%2Fnovo-icon%3E%0A%3Cnovo-icon%20theme%3D%22company%22%3Ecompany%3C%2Fnovo-icon%3E%0A%3Cnovo-icon%20theme%3D%22submission%22%3Estar-o%3C%2Fnovo-icon%3E%0A%3Cnovo-icon%20theme%3D%22placement%22%3Estar%3C%2Fnovo-icon%3E%0A`
    },
    'loading-circle': {
        title: 'Circular Loading Symbol',
        component: LoadingCircleExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Circular%20Loading%20Symbol%0A%20*%2F%0A%40Component(%7B%0A%20%20selector%3A%20'loading-circle-example'%2C%0A%20%20templateUrl%3A%20'loading-circle-example.html'%2C%0A%20%20styleUrls%3A%20%5B'loading-circle-example.css'%5D%2C%0A%7D)%0Aexport%20class%20LoadingCircleExample%20%7B%7D%0A`,
        cssSource: `%2F**%20CSS%20for%20this%20example%20*%2F%0A.flex%20%7B%0A%20%20display%3A%20flex%3B%0A%20%20flex-flow%3A%20row%20nowrap%3B%0A%7D%0A`,
        htmlSource: `%3Csection%20class%3D%22flex%22%3E%0A%20%20%20%20%3Cdiv%20class%3D%22white%20background%22%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-spinner%20theme%3D%22multicolor%22%3E%3C%2Fnovo-spinner%3E%0A%20%20%20%20%3C%2Fdiv%3E%0A%20%20%20%20%3Cdiv%20class%3D%22light%20background%22%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-spinner%3E%3C%2Fnovo-spinner%3E%0A%20%20%20%20%3C%2Fdiv%3E%0A%20%20%20%20%3Cdiv%20class%3D%22ocean%20background%22%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-spinner%20inverse%3E%3C%2Fnovo-spinner%3E%0A%20%20%20%20%3C%2Fdiv%3E%0A%20%20%20%20%3Cdiv%20class%3D%22navy%20background%22%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-spinner%20theme%3D%22bittersweet%22%3E%3C%2Fnovo-spinner%3E%0A%20%20%20%20%3C%2Fdiv%3E%0A%3C%2Fsection%3E%0A`
    },
    'loading-line': {
        title: 'Linear Loading Symbol',
        component: LoadingLineExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Linear%20Loading%20Symbol%0A%20*%2F%0A%40Component(%7B%0A%20%20selector%3A%20'loading-line-example'%2C%0A%20%20templateUrl%3A%20'loading-line-example.html'%2C%0A%20%20styleUrls%3A%20%5B'loading-line-example.css'%5D%2C%0A%7D)%0Aexport%20class%20LoadingLineExample%20%7B%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cheader%3E%0A%20%20%20%20%3Cnovo-loading%3E%3C%2Fnovo-loading%3E%0A%3C%2Fheader%3E%0A%3Cheader%20class%3D%22color-container%22%3E%0A%20%20%20%20%3Cnovo-loading%20inverse%3E%3C%2Fnovo-loading%3E%0A%3C%2Fheader%3E%0A`
    },
    'basic-quick-note': {
        title: 'Basic Quick Note Example',
        component: BasicQuickNoteExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Basic%20Quick%20Note%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20selector%3A%20'basic-quick-note-example'%2C%0A%20%20templateUrl%3A%20'basic-quick-note-example.html'%2C%0A%20%20styleUrls%3A%20%5B'basic-quick-note-example.css'%5D%2C%0A%7D)%0Aexport%20class%20BasicQuickNoteExample%20%7B%0A%20%20public%20note%3A%20any%3B%0A%20%20public%20placeholder%3A%20string%20%3D%0A%20%20%20%20'Enter%20your%20note%20text%20here.%20Reference%20people%20and%20distribution%20lists%20using%20%40%20(eg.%20%40John%20Smith).%20Reference%20other%20records%20using%20%23%20(e.g.%20%23Project%20Manager)'%3B%0A%20%20public%20basic%3A%20any%20%3D%20%7B%0A%20%20%20%20triggers%3A%20%7B%0A%20%20%20%20%20%20tags%3A%20'%40'%2C%0A%20%20%20%20%20%20references%3A%20'%23'%2C%0A%20%20%20%20%20%20boos%3A%20'%5E'%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20options%3A%20%7B%0A%20%20%20%20%20%20tags%3A%20%5B'First'%2C%20'Second'%2C%20'Space%20Between'%5D%2C%0A%20%20%20%20%20%20references%3A%20%5B'Third'%2C%20'Fourth'%5D%2C%0A%20%20%20%20%20%20boos%3A%20%5B'Test'%5D%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20renderer%3A%20%7B%0A%20%20%20%20%20%20tags%3A%20(symbol%2C%20item)%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20return%20%60%3Ca%20href%3D%22https%3A%2F%2Fwww.google.com%2Fsearch%3Fq%3Dbullhorn%26oq%3Dbullhorn%22%3E%24%7Bsymbol%7D%24%7Bitem.label%7D%3C%2Fa%3E%60%3B%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20references%3A%20(symbol%2C%20item)%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20return%20%60%3Ca%20href%3D%22https%3A%2F%2Fwww.google.com%2Fsearch%3Fq%3Dbullhorn%26oq%3Dbullhorn%22%3E%24%7Bsymbol%7D%24%7Bitem.label%7D%3C%2Fa%3E%60%3B%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20boos%3A%20(symbol%2C%20item)%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20return%20%60%3Cstrong%3E%24%7Bsymbol%7D%24%7Bitem.label%7D%3C%2Fstrong%3E%60%3B%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%7D%2C%0A%20%20%7D%3B%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cnovo-quick-note%20%5B(ngModel)%5D%3D%22note%22%20%5Bplaceholder%5D%3D%22placeholder%22%20%5Bconfig%5D%3D%22basic%22%3E%3C%2Fnovo-quick-note%3E%0A%3Cdiv%20class%3D%22data%22%3E%0A%20%20%20%20%3Cp%3ENote%3A%20%7B%7Bnote%20%7C%20json%7D%7D%3C%2Fp%3E%0A%3C%2Fdiv%3E%0A`
    },
    'custom-quick-note-results': {
        title: 'Custom Quick Note Results Example',
        component: CustomQuickNoteResultsExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0Aimport%20%7B%20QuickNoteResults%20%7D%20from%20'novo-elements'%3B%0A%0Aconst%20DATA%20%3D%20%7B%0A%20%20tags%3A%20%5B%7B%20id%3A%201%2C%20name%3A%20'OH%20YA!'%2C%20test%3A%20'TWO'%20%7D%2C%20%7B%20id%3A%202%2C%20name%3A%20'TAGGING!'%2C%20test%3A%20'ONE'%20%7D%5D%2C%0A%20%20references%3A%20%5B%7B%20id%3A%201%2C%20title%3A%20'Awesome%20Reference'%20%7D%2C%20%7B%20id%3A%202%2C%20title%3A%20'Angular2'%20%7D%5D%2C%0A%7D%3B%0A%0A%40Component(%7B%0A%20%20selector%3A%20'custom-quick-note-results'%2C%0A%20%20host%3A%20%7B%0A%20%20%20%20class%3A%20'active%20quick-note-results'%2C%0A%20%20%7D%2C%0A%20%20template%3A%20%60%0A%20%20%20%20%20%20%20%20%3Cnovo-loading%20theme%3D%22line%22%20*ngIf%3D%22isLoading%20%26%26%20!matches.length%22%3E%3C%2Fnovo-loading%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-list%20*ngIf%3D%22matches.length%20%3E%200%22%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%3Cnovo-list-item%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20*ngFor%3D%22let%20match%20of%20matches%22%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20(click)%3D%22selectMatch(%24event)%22%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%5Bclass.active%5D%3D%22match%3D%3D%3DactiveMatch%22%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20(mouseenter)%3D%22selectActive(match)%22%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Citem-content%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20**CUSTOM**%20%3Cb%20%5BinnerHtml%5D%3D%22highlight(match.label%2C%20term)%22%3E%3C%2Fb%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3C%2Fitem-content%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%3C%2Fnovo-list-item%3E%0A%20%20%20%20%20%20%20%20%3C%2Fnovo-list%3E%0A%20%20%20%20%20%20%20%20%3Cp%20class%3D%22picker-error%22%20*ngIf%3D%22hasError%22%3EOops!%20An%20error%20occured.%3C%2Fp%3E%0A%20%20%20%20%20%20%20%20%3Cp%20class%3D%22picker-null%22%20*ngIf%3D%22!isLoading%20%26%26%20!matches.length%20%26%26%20!hasError%22%3ENo%20results%20to%20display...%3C%2Fp%3E%0A%20%20%20%20%60%2C%0A%7D)%0Aexport%20class%20CustomQuickNoteResults%20extends%20QuickNoteResults%20%7B%7D%0A%0A%2F**%0A%20*%20%40title%20Custom%20Quick%20Note%20Results%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20selector%3A%20'custom-quick-note-results-example'%2C%0A%20%20templateUrl%3A%20'custom-quick-note-results-example.html'%2C%0A%20%20styleUrls%3A%20%5B'custom-quick-note-results-example.css'%5D%2C%0A%7D)%0Aexport%20class%20CustomQuickNoteResultsExample%20%7B%0A%20%20public%20note%3A%20any%3B%0A%20%20public%20placeholder%3A%20string%20%3D%0A%20%20%20%20'Enter%20your%20note%20text%20here.%20Reference%20people%20and%20distribution%20lists%20using%20%40%20(eg.%20%40John%20Smith).%20Reference%20other%20records%20using%20%23%20(e.g.%20%23Project%20Manager)'%3B%0A%0A%20%20public%20customResults%3A%20any%20%3D%20%7B%0A%20%20%20%20resultsTemplate%3A%20CustomQuickNoteResults%2C%0A%20%20%20%20triggers%3A%20%7B%0A%20%20%20%20%20%20names%3A%20'%40'%2C%0A%20%20%20%20%20%20tags%3A%20'%23'%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20options%3A%20%7B%0A%20%20%20%20%20%20names%3A%20()%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20return%20new%20Promise((resolve)%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%20%20setTimeout(()%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20resolve(DATA.tags)%3B%0A%20%20%20%20%20%20%20%20%20%20%7D%2C%20300)%3B%0A%20%20%20%20%20%20%20%20%7D)%3B%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20tags%3A%20()%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20return%20new%20Promise((resolve)%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%20%20setTimeout(()%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20resolve(DATA.references)%3B%0A%20%20%20%20%20%20%20%20%20%20%7D%2C%20300)%3B%0A%20%20%20%20%20%20%20%20%7D)%3B%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20format%3A%20%7B%0A%20%20%20%20%20%20names%3A%20'%24name'%2C%0A%20%20%20%20%20%20tags%3A%20'%24title'%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20renderer%3A%20%7B%0A%20%20%20%20%20%20names%3A%20(symbol%2C%20item)%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20return%20%60%3Ca%20href%3D%22http%3A%2F%2Fwww.bullhorn.com%22%20class%3D%22names%22%3E%24%7Bsymbol%7D%24%7Bitem.label%7D%3C%2Fa%3E%60%3B%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20tags%3A%20(symbol%2C%20item)%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20return%20%60%3Ca%20href%3D%22http%3A%2F%2Fwww.bullhorn.com%22%20class%3D%22tags%22%3E%24%7Bsymbol%7D%24%7Bitem.label%7D%3C%2Fa%3E%60%3B%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%7D%2C%0A%20%20%7D%3B%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cnovo-quick-note%20%5B(ngModel)%5D%3D%22note%22%20%5Bplaceholder%5D%3D%22placeholder%22%20%5Bconfig%5D%3D%22customResults%22%3E%3C%2Fnovo-quick-note%3E%0A%3Cdiv%20class%3D%22data%22%3E%0A%20%20%20%20%3Cp%3ENote%3A%20%7B%7Bnote%20%7C%20json%7D%7D%3C%2Fp%3E%0A%3C%2Fdiv%3E%0A`,
        selectorName: 'CustomQuickNoteResultsExample, CustomQuickNoteResults'
    },
    'custom-quick-note': {
        title: 'Custom Quick Note Example',
        component: CustomQuickNoteExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0Aconst%20DATA%20%3D%20%7B%0A%20%20tags%3A%20%5B%7B%20id%3A%201%2C%20name%3A%20'OH%20YA!'%2C%20test%3A%20'TWO'%20%7D%2C%20%7B%20id%3A%202%2C%20name%3A%20'TAGGING!'%2C%20test%3A%20'ONE'%20%7D%5D%2C%0A%20%20references%3A%20%5B%7B%20id%3A%201%2C%20title%3A%20'Awesome%20Reference'%20%7D%2C%20%7B%20id%3A%202%2C%20title%3A%20'Angular2'%20%7D%5D%2C%0A%7D%3B%0A%0A%2F**%0A%20*%20%40title%20Custom%20Quick%20Note%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20selector%3A%20'custom-quick-note-example'%2C%0A%20%20templateUrl%3A%20'custom-quick-note-example.html'%2C%0A%20%20styleUrls%3A%20%5B'custom-quick-note-example.css'%5D%2C%0A%7D)%0Aexport%20class%20CustomQuickNoteExample%20%7B%0A%20%20public%20note%3A%20any%3B%0A%20%20public%20placeholder%3A%20string%20%3D%0A%20%20%20%20'Enter%20your%20note%20text%20here.%20Reference%20people%20and%20distribution%20lists%20using%20%40%20(eg.%20%40John%20Smith).%20Reference%20other%20records%20using%20%23%20(e.g.%20%23Project%20Manager)'%3B%0A%20%20public%20custom%3A%20any%20%3D%20%7B%0A%20%20%20%20triggers%3A%20%7B%0A%20%20%20%20%20%20whos%3A%20'%40'%2C%0A%20%20%20%20%20%20whats%3A%20'%23'%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20options%3A%20%7B%0A%20%20%20%20%20%20whos%3A%20()%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20return%20new%20Promise((resolve)%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%20%20setTimeout(()%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20resolve(DATA.tags)%3B%0A%20%20%20%20%20%20%20%20%20%20%7D%2C%20300)%3B%0A%20%20%20%20%20%20%20%20%7D)%3B%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20whats%3A%20()%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20return%20new%20Promise((resolve)%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%20%20setTimeout(()%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20resolve(DATA.references)%3B%0A%20%20%20%20%20%20%20%20%20%20%7D%2C%20300)%3B%0A%20%20%20%20%20%20%20%20%7D)%3B%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20format%3A%20%7B%0A%20%20%20%20%20%20whos%3A%20'%24name%20%24test'%2C%0A%20%20%20%20%20%20whats%3A%20'%24title'%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20renderer%3A%20%7B%0A%20%20%20%20%20%20whos%3A%20(symbol%2C%20item)%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20return%20%60%3Ca%20href%3D%22http%3A%2F%2Fwww.bullhorn.com%22%20class%3D%22WHOS%22%3E%24%7Bsymbol%7D%24%7Bitem.label%7D%3C%2Fa%3E%60%3B%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20whats%3A%20(symbol%2C%20item)%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20return%20%60%3Ca%20href%3D%22http%3A%2F%2Fwww.bullhorn.com%22%20class%3D%22tag%22%3E%24%7Bsymbol%7D%24%7Bitem.label%7D%3C%2Fa%3E%60%3B%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%7D%2C%0A%20%20%7D%3B%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cnovo-quick-note%20%5B(ngModel)%5D%3D%22note%22%20%5Bplaceholder%5D%3D%22placeholder%22%20%5Bconfig%5D%3D%22custom%22%3E%3C%2Fnovo-quick-note%3E%0A%3Cdiv%20class%3D%22data%22%3E%0A%20%20%20%20%3Cp%3ENote%3A%20%7B%7Bnote%20%7C%20json%7D%7D%3C%2Fp%3E%0A%3C%2Fdiv%3E%0A`
    },
    'search-usage': {
        title: 'Search Box Usage',
        component: SearchUsageExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0Aimport%20%7B%20Subject%20%7D%20from%20'rxjs'%3B%0A%0A%2F**%0A%20*%20%40title%20Search%20Box%20Usage%0A%20*%2F%0A%40Component(%7B%0A%20%20selector%3A%20'search-usage-example'%2C%0A%20%20templateUrl%3A%20'search-usage-example.html'%2C%0A%20%20styleUrls%3A%20%5B'search-usage-example.css'%5D%2C%0A%7D)%0Aexport%20class%20SearchUsageExample%20%7B%0A%20%20public%20test%3A%20string%20%3D%20'TEST'%3B%0A%20%20public%20geo%3A%20string%20%3D%20''%3B%0A%20%20public%20entity%3A%20string%20%3D%20''%3B%0A%20%20public%20searchResults%3A%20Subject%3Cany%5B%5D%3E%20%3D%20new%20Subject()%3B%0A%20%20public%20searchData%3A%20any%5B%5D%20%3D%20%5B%0A%20%20%20%20%7B%0A%20%20%20%20%20%20data%3A%20%7B%0A%20%20%20%20%20%20%20%20title%3A%20'Central%20Bank'%2C%0A%20%20%20%20%20%20%20%20name%3A%20'Central%20Bank'%2C%0A%20%20%20%20%20%20%20%20email%3A%20'new-bank-inquiries%40centralbank.com'%2C%0A%20%20%20%20%20%20%20%20phone%3A%20'(651)%20555-1234'%2C%0A%20%20%20%20%20%20%20%20address%3A%20%7B%20city%3A%20'Washington'%2C%20state%3A%20'DC'%20%7D%2C%0A%20%20%20%20%20%20%20%20searchEntity%3A%20'ClientCorporation'%2C%0A%20%20%20%20%20%20%20%20type%3A%20'company'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20data%3A%20%7B%0A%20%20%20%20%20%20%20%20title%3A%20'Federal%20Bank'%2C%0A%20%20%20%20%20%20%20%20name%3A%20'Federal%20Bank'%2C%0A%20%20%20%20%20%20%20%20email%3A%20'info%40federalbank.com'%2C%0A%20%20%20%20%20%20%20%20phone%3A%20'(545)%20555-1212'%2C%0A%20%20%20%20%20%20%20%20address%3A%20%7B%20city%3A%20'Arlington'%2C%20state%3A%20'VA'%20%7D%2C%0A%20%20%20%20%20%20%20%20searchEntity%3A%20'ClientCorporation'%2C%0A%20%20%20%20%20%20%20%20type%3A%20'company'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20data%3A%20%7B%0A%20%20%20%20%20%20%20%20title%3A%20'Aaron%20Burr'%2C%0A%20%20%20%20%20%20%20%20firstName%3A%20'Aaron'%2C%0A%20%20%20%20%20%20%20%20lastName%3A%20'Burr'%2C%0A%20%20%20%20%20%20%20%20name%3A%20'Aaron%20Burr'%2C%0A%20%20%20%20%20%20%20%20companyName%3A%20'Central%20Bank'%2C%0A%20%20%20%20%20%20%20%20email%3A%20'aburr%40centralbank.com'%2C%0A%20%20%20%20%20%20%20%20phone%3A%20'(333)%20555-3434'%2C%0A%20%20%20%20%20%20%20%20address%3A%20%7B%20city%3A%20'Washington'%2C%20state%3A%20'DC'%20%7D%2C%0A%20%20%20%20%20%20%20%20status%3A%20'Hold'%2C%0A%20%20%20%20%20%20%20%20searchEntity%3A%20'ClientContact'%2C%0A%20%20%20%20%20%20%20%20type%3A%20'person'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20data%3A%20%7B%0A%20%20%20%20%20%20%20%20title%3A%20'Alexander%20Hamilton'%2C%0A%20%20%20%20%20%20%20%20firstName%3A%20'Alexander'%2C%0A%20%20%20%20%20%20%20%20lastName%3A%20'Hamilton'%2C%0A%20%20%20%20%20%20%20%20name%3A%20'Alexander%20Hamilton'%2C%0A%20%20%20%20%20%20%20%20companyName%3A%20'Federal%20Bank'%2C%0A%20%20%20%20%20%20%20%20email%3A%20'ahamilton%40federalbank.com'%2C%0A%20%20%20%20%20%20%20%20phone%3A%20'(333)%20555-2222'%2C%0A%20%20%20%20%20%20%20%20address%3A%20%7B%20city%3A%20'Arlington'%2C%20state%3A%20'VA'%20%7D%2C%0A%20%20%20%20%20%20%20%20status%3A%20'Active'%2C%0A%20%20%20%20%20%20%20%20searchEntity%3A%20'ClientContact'%2C%0A%20%20%20%20%20%20%20%20type%3A%20'person'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20data%3A%20%7B%0A%20%20%20%20%20%20%20%20title%3A%20'Ben%20Franklin'%2C%0A%20%20%20%20%20%20%20%20firstName%3A%20'Ben'%2C%0A%20%20%20%20%20%20%20%20lastName%3A%20'Franklin'%2C%0A%20%20%20%20%20%20%20%20name%3A%20'Ben%20Franklin'%2C%0A%20%20%20%20%20%20%20%20email%3A%20'bfranklin%40gmail.com'%2C%0A%20%20%20%20%20%20%20%20phone%3A%20'(654)%20525-2222'%2C%0A%20%20%20%20%20%20%20%20address%3A%20%7B%20city%3A%20'Boston'%2C%20state%3A%20'MA'%20%7D%2C%0A%20%20%20%20%20%20%20%20status%3A%20'Interviewing'%2C%0A%20%20%20%20%20%20%20%20searchEntity%3A%20'Candidate'%2C%0A%20%20%20%20%20%20%20%20type%3A%20'candidate'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20data%3A%20%7B%0A%20%20%20%20%20%20%20%20title%3A%20'Thomas%20Jefferson'%2C%0A%20%20%20%20%20%20%20%20firstName%3A%20'Thomas'%2C%0A%20%20%20%20%20%20%20%20lastName%3A%20'Jefferson'%2C%0A%20%20%20%20%20%20%20%20name%3A%20'Thomas%20Jefferson'%2C%0A%20%20%20%20%20%20%20%20email%3A%20'tjefferson%40usa.com'%2C%0A%20%20%20%20%20%20%20%20phone%3A%20'(123)%20542-1234'%2C%0A%20%20%20%20%20%20%20%20address%3A%20%7B%20city%3A%20'Arlington'%2C%20state%3A%20'VA'%20%7D%2C%0A%20%20%20%20%20%20%20%20status%3A%20'New%20Lead'%2C%0A%20%20%20%20%20%20%20%20searchEntity%3A%20'Candidate'%2C%0A%20%20%20%20%20%20%20%20type%3A%20'candidate'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%7D%2C%0A%20%20%5D%3B%0A%0A%20%20public%20search(term%3A%20string)%3A%20void%20%7B%0A%20%20%20%20this.searchResults.next(this.searchData.map((x)%20%3D%3E%20x.data))%3B%0A%20%20%7D%0A%20%20public%20onSelectMatch(item)%20%7B%0A%20%20%20%20this.test%20%3D%20item.name%3B%0A%20%20%7D%0A%20%20public%20onSelectEntity(item)%20%7B%0A%20%20%20%20this.entity%20%3D%20item.data.name%3B%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%0A%3Cnovo-search%3E%3C%2Fnovo-search%3E%0A%0A%3Cbr%2F%3E%0A%0A%3Cnovo-search%20alwaysOpen%3D%22true%22%3E%3C%2Fnovo-search%3E%0A%0A%3Cbr%2F%3E%0A%0A%3Cnovo-search%20%5BngModel%5D%3D%22test%22%20(ngModelChange)%3D%22search(%24event)%22%3E%0A%20%20%20%20%3Cnovo-list%20direction%3D%22vertical%22%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-list-item%20*ngFor%3D%22let%20item%20of%20searchResults%20%7C%20async%22%20(click)%3D%22onSelectMatch(item)%22%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%3Citem-header%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Citem-avatar%20%5Bicon%5D%3D%22item.type%22%3E%3C%2Fitem-avatar%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Citem-title%3E%7B%7Bitem.name%7D%7D%3C%2Fitem-title%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%3C%2Fitem-header%3E%0A%20%20%20%20%20%20%20%20%3C%2Fnovo-list-item%3E%0A%20%20%20%20%3C%2Fnovo-list%3E%0A%3C%2Fnovo-search%3E%0A%0A%3Cbr%2F%3E%0A%0A%3Cnovo-search%20icon%3D%22location%22%20theme%3D%22grapefruit%22%20alwaysOpen%3D%22true%22%20%5B(ngModel)%5D%3D%22geo%22%20displayField%3D%22formatted_address%22%20%5BcloseOnSelect%5D%3D%22false%22%20hint%3D%22Search%20Google%20to%20find%20your%20address.%22%3E%0A%20%20%20%20%3Cgoogle-places-list%20%5B(term)%5D%3D%22geo%22%3E%3C%2Fgoogle-places-list%3E%0A%3C%2Fnovo-search%3E%0A%3Cdiv%3EValue%20is%3A%20%7B%7Bgeo%7D%7D%3C%2Fdiv%3E%0A%3Cbr%2F%3E%0A%0A%3Cnovo-search%20icon%3D%22candidate%22%20theme%3D%22candidate%22%20alwaysOpen%3D%22true%22%20%5B(ngModel)%5D%3D%22entity%22%3E%0A%20%20%20%20%3Centity-picker-results%20%5Bmatches%5D%3D%22searchData%22%20(select)%3D%22onSelectEntity(%24event)%22%3E%3C%2Fentity-picker-results%3E%0A%3C%2Fnovo-search%3E%0A`
    },
    'basic-slide': {
        title: 'Basic Slide Example',
        component: BasicSlideExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Basic%20Slide%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20selector%3A%20'basic-slide-example'%2C%0A%20%20templateUrl%3A%20'basic-slide-example.html'%2C%0A%20%20styleUrls%3A%20%5B'basic-slide-example.css'%5D%2C%0A%7D)%0Aexport%20class%20BasicSlideExample%20%7B%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cnovo-slider%20%5Bslides%5D%3D%222%22%3E%0A%20%20%20%20%3Cdiv%20slide%3D%221%22%3E%0A%20%20%20%20%20%20%20%20SLIDE%20%231%0A%20%20%20%20%3C%2Fdiv%3E%0A%20%20%20%20%3Cdiv%20slide%3D%222%22%3E%0A%20%20%20%20%20%20%20%20SLIDE%20%232%0A%20%20%20%20%3C%2Fdiv%3E%0A%3C%2Fnovo-slider%3E%0A`
    },
    'switch-usage': {
        title: 'Switch Usage Example',
        component: SwitchUsageExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Switch%20Usage%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20selector%3A%20'switch-usage-example'%2C%0A%20%20templateUrl%3A%20'switch-usage-example.html'%2C%0A%20%20styleUrls%3A%20%5B'switch-usage-example.css'%5D%2C%0A%7D)%0Aexport%20class%20SwitchUsageExample%20%7B%0A%20%20public%20toggleCount%3A%20number%20%3D%200%3B%0A%20%20public%20checked%3A%20boolean%20%3D%20true%3B%0A%0A%20%20public%20increment()%3A%20void%20%7B%0A%20%20%20%20this.toggleCount%2B%2B%3B%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Clabel%3E%0A%20%20Count%0A%20%20%3Cspan%3E%7B%7BtoggleCount%7D%7D%3C%2Fspan%3E%0A%3C%2Flabel%3E%0A%3Clabel%3E%0A%20%20Toggled%0A%20%20%3Cspan%3E%7B%7Bchecked%7D%7D%3C%2Fspan%3E%0A%3C%2Flabel%3E%0A%3Cnovo-switch%20%5B(ngModel)%5D%3D%22checked%22%20(onChange)%3D%22increment()%22%3E%3C%2Fnovo-switch%3E%0A%3Cnovo-switch%20theme%3D%22grapefruit%22%3E%3C%2Fnovo-switch%3E%0A%3Cnovo-switch%20disabled%3E%3C%2Fnovo-switch%3E%0A`
    },
    'tabbed-group-picker-basic': {
        title: 'Tabbed Group Picker - Basic Example',
        component: TabbedGroupPickerBasicExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0Aimport%20%7B%20TabbedGroupPickerTab%2C%20ChildTab%20%7D%20from%20'novo-elements'%3B%0A%0A%2F**%0A%20*%20%40title%20Tabbed%20Group%20Picker%20-%20Basic%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20selector%3A%20'tabbed-group-picker-basic-example'%2C%0A%20%20templateUrl%3A%20'tabbed-group-picker-basic-example.html'%2C%0A%20%20styleUrls%3A%20%5B'..%2Ftabbed-group-picker-example.scss'%5D%2C%0A%7D)%0Aexport%20class%20TabbedGroupPickerBasicExample%20%7B%0A%20%20getAnimals%20%3D%20()%3A%20%7B%20animalId%3A%20number%3B%20name%3A%20string%20%7D%5B%5D%20%3D%3E%0A%20%20%20%20%5B'Dog'%2C%20'Cat'%2C%20'Mouse'%2C%20'Horse'%2C%20'Cow'%2C%20'Chicken'%2C%20'Pig'%2C%20'Sheep'%2C%20'Goat'%2C%20'Goose'%5D.map((name%2C%20index)%20%3D%3E%20(%7B%0A%20%20%20%20%20%20name%2C%0A%20%20%20%20%20%20animalId%3A%20index%20%2B%201%2C%0A%20%20%20%20%7D))%3B%0A%0A%20%20getPlaces%20%3D%20()%3A%20%7B%20localName%3A%20string%3B%20englishName%3A%20string%20%7D%5B%5D%20%3D%3E%0A%20%20%20%20%5B%0A%20%20%20%20%20%20%5B'Roma'%2C%20'Rome'%5D%2C%0A%20%20%20%20%20%20%5B'Firenze'%2C%20'Florence'%5D%2C%0A%20%20%20%20%20%20%5B'Munchen'%2C%20'Munich'%5D%2C%0A%20%20%20%20%20%20%5B'Paris'%2C%20'Paris'%5D%2C%0A%20%20%20%20%20%20%5B'Sevilla'%2C%20'Seville'%5D%2C%0A%20%20%20%20%20%20%5B'Athinai'%2C%20'Athens'%5D%2C%0A%20%20%20%20%5D.map((%5BlocalName%2C%20englishName%5D)%20%3D%3E%20(%7B%20localName%2C%20englishName%20%7D))%3B%0A%20%20getColors%20%3D%20()%3A%20%7B%20rgb%3A%20string%3B%20colorName%3A%20string%20%7D%5B%5D%20%3D%3E%0A%20%20%20%20%5B%5B'255%2C0%2C0'%2C%20'Red'%5D%2C%20%5B'0%2C255%2C0'%2C%20'Green'%5D%2C%20%5B'0%2C0%2C255'%2C%20'Blue'%5D%2C%20%5B'0%2C0%2C0'%2C%20'Black'%5D%2C%20%5B'255%2C255%2C255'%2C%20'White'%5D%5D.map(%0A%20%20%20%20%20%20(%5Brgb%2C%20colorName%5D)%20%3D%3E%20(%7B%20rgb%2C%20colorName%20%7D)%2C%0A%20%20%20%20)%3B%0A%0A%20%20animalTab%20%3D%20%7B%0A%20%20%20%20typeName%3A%20'animals'%2C%0A%20%20%20%20typeLabel%3A%20'Animals'%2C%0A%20%20%20%20valueField%3A%20'animalId'%2C%0A%20%20%20%20labelField%3A%20'name'%2C%0A%20%20%20%20data%3A%20this.getAnimals()%2C%0A%20%20%7D%3B%0A%0A%20%20example_tab%20%3D%20%5B%0A%20%20%20%20this.animalTab%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20typeName%3A%20'places'%2C%0A%20%20%20%20%20%20typeLabel%3A%20'Places'%2C%0A%20%20%20%20%20%20valueField%3A%20'localName'%2C%0A%20%20%20%20%20%20labelField%3A%20'englishName'%2C%0A%20%20%20%20%20%20data%3A%20this.getPlaces()%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20typeName%3A%20'colors'%2C%0A%20%20%20%20%20%20typeLabel%3A%20'Colors'%2C%0A%20%20%20%20%20%20valueField%3A%20'rgb'%2C%0A%20%20%20%20%20%20labelField%3A%20'colorName'%2C%0A%20%20%20%20%20%20data%3A%20this.getColors()%2C%0A%20%20%20%20%7D%2C%0A%20%20%5D%3B%0A%0A%20%20public%20buttonLabel%3A%20string%20%3D%20'Nothing%20Selected'%3B%0A%20%20public%20example_buttonConfig%20%3D%20%7B%0A%20%20%20%20theme%3A%20'select'%2C%0A%20%20%20%20side%3A%20'right'%2C%0A%20%20%20%20icon%3A%20'collapse'%2C%0A%20%20%20%20label%3A%20this.buttonLabel%2C%0A%20%20%20%20selector%3A%20'buttonConfig'%2C%0A%20%20%7D%3B%0A%0A%20%20public%20selectedAnimals%3A%20string%5B%5D%20%3D%20%5B%5D%3B%0A%20%20public%20selectedPlaces%3A%20string%5B%5D%20%3D%20%5B%5D%3B%0A%20%20public%20selectedColors%3A%20string%5B%5D%20%3D%20%5B%5D%3B%0A%0A%20%20onSelectionChange(selectedData%3A%20TabbedGroupPickerTab%5B%5D)%20%7B%0A%20%20%20%20this.selectedAnimals%20%3D%20(selectedData.find((%7B%20typeName%20%7D)%20%3D%3E%20typeName%20%3D%3D%3D%20'animals')%20as%20ChildTab).data.map(%0A%20%20%20%20%20%20(%7B%20animalId%20%7D)%20%3D%3E%20animalId%2C%0A%20%20%20%20)%3B%0A%20%20%20%20this.selectedPlaces%20%3D%20(selectedData.find((%7B%20typeName%20%7D)%20%3D%3E%20typeName%20%3D%3D%3D%20'places')%20as%20ChildTab).data.map(%0A%20%20%20%20%20%20(%7B%20localName%20%7D)%20%3D%3E%20localName%2C%0A%20%20%20%20)%3B%0A%20%20%20%20this.selectedColors%20%3D%20(selectedData.find((%7B%20typeName%20%7D)%20%3D%3E%20typeName%20%3D%3D%3D%20'colors')%20as%20ChildTab).data.map((%7B%20rgb%20%7D)%20%3D%3E%20rgb)%3B%0A%20%20%20%20this.example_buttonConfig.label%20%3D%20this.buildButtonLabel()%3B%0A%20%20%7D%0A%0A%20%20buildButtonLabel()%3A%20string%20%7B%0A%20%20%20%20const%20labelParts%3A%20string%5B%5D%20%3D%20%5B%5D%3B%0A%20%20%20%20this.selectedAnimals.length%20%3F%20labelParts.push(%60Animals%20(%24%7Bthis.selectedAnimals.length%7D)%60)%20%3A%20''%3B%0A%20%20%20%20this.selectedPlaces.length%20%3F%20labelParts.push(%60Places%20(%24%7Bthis.selectedPlaces.length%7D)%60)%20%3A%20''%3B%0A%20%20%20%20this.selectedColors.length%20%3F%20labelParts.push(%60Colors%20(%24%7Bthis.selectedColors.length%7D)%60)%20%3A%20''%3B%0A%20%20%20%20return%20labelParts.join('%2C%20')%20%7C%7C%20'Nothing%20Selected'%3B%0A%20%20%7D%0A%7D%0A`,
        cssSource: ``,
        htmlSource: `%3Cdiv%20class%3D%22tabbed-group-picker-example%22%3E%0A%20%20%3Cnovo-tabbed-group-picker%0A%20%20%20%20%5Btabs%5D%3D%22example_tab%22%0A%20%20%20%20title%3D%22basic-example%22%0A%20%20%20%20%5BbuttonConfig%5D%3D%22example_buttonConfig%22%0A%20%20%20%20(selectionChange)%3D%22onSelectionChange(%24event)%22%0A%20%20%3E%3C%2Fnovo-tabbed-group-picker%3E%0A%20%20%3Cdiv%20class%3D%22selected-data-wrapper%22%3E%0A%20%20%20%20%3Ch6%3ESelected%20Animal%20IDs%3A%3C%2Fh6%3E%0A%20%20%20%20%3Cdiv%3E%7B%7B%20selectedAnimals.join('%2C%20')%20%7D%7D%3C%2Fdiv%3E%0A%20%20%20%20%3Ch6%3ESelected%20Local%20Place%20Names%3A%3C%2Fh6%3E%0A%20%20%20%20%3Cdiv%3E%7B%7B%20selectedPlaces.join('%2C%20')%20%7D%7D%3C%2Fdiv%3E%0A%20%20%20%20%3Ch6%3ESelected%20Colors%3A%3C%2Fh6%3E%0A%20%20%20%20%3Cdiv%3E%7B%7B%20selectedColors.join('%20%7C%20')%20%7D%7D%3C%2Fdiv%3E%0A%20%20%3C%2Fdiv%3E%0A%3C%2Fdiv%3E%0A`
    },
    'tabbed-group-picker-big-groups': {
        title: 'Tabbed Group Picker - Big Groups Example',
        component: TabbedGroupPickerBigGroupsExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0Aimport%20%7B%20TabbedGroupPickerTab%2C%20ChildTab%2C%20ParentTab%20%7D%20from%20'novo-elements'%3B%0A%0A%2F**%0A%20*%20%40title%20Tabbed%20Group%20Picker%20-%20Big%20Groups%20Example%0A%20*%2F%0A%0A%40Component(%7B%0A%20%20selector%3A%20'tabbed-group-picker-big-groups-example'%2C%0A%20%20templateUrl%3A%20'tabbed-group-picker-big-groups-example.html'%2C%0A%20%20styleUrls%3A%20%5B'..%2Ftabbed-group-picker-example.scss'%5D%2C%0A%7D)%0Aexport%20class%20TabbedGroupPickerBigGroupsExample%20%7B%0A%20%20isPrime(number)%3A%20boolean%20%7B%0A%20%20%20%20const%20squareRoot%20%3D%20Math.ceil(Math.sqrt(number))%3B%0A%20%20%20%20return%20!Array(squareRoot)%0A%20%20%20%20%20%20.fill(0)%0A%20%20%20%20%20%20.map((value%2C%20index)%20%3D%3E%20index%20%2B%202)%0A%20%20%20%20%20%20.some((divisor)%20%3D%3E%20number%20%25%20divisor%20%3D%3D%3D%200)%3B%0A%20%20%7D%0A%20%20example_tab%20%3D%20%5B%0A%20%20%20%20%7B%0A%20%20%20%20%20%20typeName%3A%20'integers'%2C%0A%20%20%20%20%20%20typeLabel%3A%20'Integers'%2C%0A%20%20%20%20%20%20valueField%3A%20'value'%2C%0A%20%20%20%20%20%20labelField%3A%20'label'%2C%0A%20%20%20%20%20%20data%3A%20Array(2000)%0A%20%20%20%20%20%20%20%20.fill(0)%0A%20%20%20%20%20%20%20%20.map((value%2C%20index)%20%3D%3E%20index%20%2B%201)%0A%20%20%20%20%20%20%20%20.map((value)%20%3D%3E%20(%7B%20value%2C%20label%3A%20String(value)%20%7D))%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20typeName%3A%20'divisibles'%2C%0A%20%20%20%20%20%20typeLabel%3A%20'Divisible%20By'%2C%0A%20%20%20%20%20%20valueField%3A%20'v'%2C%0A%20%20%20%20%20%20labelField%3A%20'l'%2C%0A%20%20%20%20%20%20childTypeName%3A%20'integers'%2C%0A%20%20%20%20%20%20data%3A%20Array(100)%0A%20%20%20%20%20%20%20%20.fill(0)%0A%20%20%20%20%20%20%20%20.map((v%2C%20i)%20%3D%3E%20i%20%2B%201)%0A%20%20%20%20%20%20%20%20.map((v)%20%3D%3E%20(%7B%0A%20%20%20%20%20%20%20%20%20%20v%2C%0A%20%20%20%20%20%20%20%20%20%20l%3A%20%60Divisible%20By%20%24%7Bv%7D%60%2C%0A%20%20%20%20%20%20%20%20%20%20children%3A%20Array(2000)%0A%20%20%20%20%20%20%20%20%20%20%20%20.fill(0)%0A%20%20%20%20%20%20%20%20%20%20%20%20.map((value%2C%20index)%20%3D%3E%20index%20%2B%201)%0A%20%20%20%20%20%20%20%20%20%20%20%20.filter((number)%20%3D%3E%20number%20%25%20v%20%3D%3D%3D%200)%0A%20%20%20%20%20%20%20%20%20%20%20%20.map((child)%20%3D%3E%20(%7B%20value%3A%20child%2C%20label%3A%20String(child)%20%7D))%2C%0A%20%20%20%20%20%20%20%20%7D))%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20typeName%3A%20'prime%20factorization'%2C%0A%20%20%20%20%20%20typeLabel%3A%20'Prime%20Factors'%2C%0A%20%20%20%20%20%20valueField%3A%20'v'%2C%0A%20%20%20%20%20%20labelField%3A%20'l'%2C%0A%20%20%20%20%20%20childTypeName%3A%20'integers'%2C%0A%20%20%20%20%20%20data%3A%20Array(100)%0A%20%20%20%20%20%20%20%20.fill(0)%0A%20%20%20%20%20%20%20%20.map((v%2C%20i)%20%3D%3E%20i%20%2B%201990)%0A%20%20%20%20%20%20%20%20.map((parent)%20%3D%3E%20(%7B%0A%20%20%20%20%20%20%20%20%20%20v%3A%20parent%2C%0A%20%20%20%20%20%20%20%20%20%20l%3A%20%60Prime%20Factors%20of%20%24%7Bparent%7D%60%2C%0A%20%20%20%20%20%20%20%20%20%20children%3A%20Array(2000)%0A%20%20%20%20%20%20%20%20%20%20%20%20.fill(0)%0A%20%20%20%20%20%20%20%20%20%20%20%20.map((value%2C%20index)%20%3D%3E%20index%20%2B%201)%0A%20%20%20%20%20%20%20%20%20%20%20%20.filter((child)%20%3D%3E%20parent%20%25%20child%20%3D%3D%3D%200%20%26%26%20this.isPrime(child))%0A%20%20%20%20%20%20%20%20%20%20%20%20.map((child)%20%3D%3E%20(%7B%20value%3A%20child%2C%20label%3A%20String(child)%20%7D))%2C%0A%20%20%20%20%20%20%20%20%7D))%2C%0A%20%20%20%20%7D%2C%0A%20%20%5D%3B%0A%0A%20%20public%20buttonLabel%3A%20string%20%3D%20'Nothing%20Selected'%3B%0A%20%20public%20example_buttonConfig%20%3D%20%7B%0A%20%20%20%20theme%3A%20'select'%2C%0A%20%20%20%20side%3A%20'right'%2C%0A%20%20%20%20icon%3A%20'collapse'%2C%0A%20%20%20%20label%3A%20this.buttonLabel%2C%0A%20%20%20%20selector%3A%20'buttonConfig'%2C%0A%20%20%7D%3B%0A%0A%20%20selectedPrimeFactorizations%3A%20string%5B%5D%20%3D%20%5B%5D%3B%0A%20%20selectedDivisibles%3A%20string%5B%5D%20%3D%20%5B%5D%3B%0A%0A%20%20selectedIntegers%3A%20string%5B%5D%20%3D%20%5B%5D%3B%0A%0A%20%20onSelectionChange(selectedData%3A%20TabbedGroupPickerTab%5B%5D)%20%7B%0A%20%20%20%20this.selectedIntegers%20%3D%20(selectedData.find((%7B%20typeName%20%7D)%20%3D%3E%20typeName%20%3D%3D%3D%20'integers')%20as%20ChildTab).data.map((%7B%20value%20%7D)%20%3D%3E%20value)%3B%0A%20%20%20%20this.selectedDivisibles%20%3D%20(selectedData.find((%7B%20typeName%20%7D)%20%3D%3E%20typeName%20%3D%3D%3D%20'divisibles')%20as%20ParentTab).data.map((%7B%20v%20%7D)%20%3D%3E%20v)%3B%0A%20%20%20%20this.selectedPrimeFactorizations%20%3D%20(selectedData.find((%7B%20typeName%20%7D)%20%3D%3E%20typeName%20%3D%3D%3D%20'prime%20factorization')%20as%20ParentTab).data.map(%0A%20%20%20%20%20%20(%7B%20v%20%7D)%20%3D%3E%20v%2C%0A%20%20%20%20)%3B%0A%20%20%20%20this.example_buttonConfig.label%20%3D%20this.buildButtonLabel()%3B%0A%20%20%7D%0A%0A%20%20buildButtonLabel()%3A%20string%20%7B%0A%20%20%20%20return%20this.selectedIntegers.length%20%3F%20%60Integers%20(%24%7Bthis.selectedIntegers.length%7D)%60%20%3A%20'Nothing%20Selected'%3B%0A%20%20%7D%0A%7D%0A`,
        cssSource: ``,
        htmlSource: `%3Cdiv%20class%3D%22tabbed-group-picker-example%22%3E%0A%20%20%3Cnovo-tabbed-group-picker%0A%20%20%20%20%5Btabs%5D%3D%22example_tab%22%0A%20%20%20%20title%3D%22big-groups-example%22%0A%20%20%20%20%5BbuttonConfig%5D%3D%22example_buttonConfig%22%0A%20%20%20%20(selectionChange)%3D%22onSelectionChange(%24event)%22%0A%20%20%3E%3C%2Fnovo-tabbed-group-picker%3E%0A%20%20%3Cdiv%20class%3D%22selected-data-wrapper%22%3E%0A%20%20%20%20%3Ch6%3ESelected%20Integers%3A%3C%2Fh6%3E%0A%20%20%20%20%3Cdiv%3E%7B%7B%20selectedIntegers.join('%2C%20')%20%7D%7D%3C%2Fdiv%3E%0A%20%20%20%20%3Ch6%3ESelected%20Divisibles%3A%3C%2Fh6%3E%0A%20%20%20%20%3Cdiv%3E%7B%7B%20selectedDivisibles.join('%2C%20')%20%7D%7D%3C%2Fdiv%3E%0A%20%20%20%20%3Ch6%3ESelected%20Prime%20Factorizations%3A%3C%2Fh6%3E%0A%20%20%20%20%3Cdiv%3E%7B%7B%20selectedPrimeFactorizations.join('%2C%20')%20%7D%7D%3C%2Fdiv%3E%0A%20%20%3C%2Fdiv%3E%0A%3C%2Fdiv%3E%0A`
    },
    'tabbed-group-picker-groups': {
        title: 'Tabbed Group Picker - Groups Example',
        component: TabbedGroupPickerGroupsExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0Aimport%20%7B%20TabbedGroupPickerTab%2C%20ChildTab%2C%20ParentTab%20%7D%20from%20'novo-elements'%3B%0A%0A%2F**%0A%20*%20%40title%20Tabbed%20Group%20Picker%20-%20Groups%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20selector%3A%20'tabbed-group-picker-groups-example'%2C%0A%20%20templateUrl%3A%20'tabbed-group-picker-groups-example.html'%2C%0A%20%20styleUrls%3A%20%5B'..%2Ftabbed-group-picker-example.scss'%5D%2C%0A%7D)%0Aexport%20class%20TabbedGroupPickerGroupsExample%20%7B%0A%20%20getAnimals%20%3D%20()%3A%20%7B%20animalId%3A%20number%3B%20name%3A%20string%20%7D%5B%5D%20%3D%3E%0A%20%20%20%20%5B'Dog'%2C%20'Cat'%2C%20'Mouse'%2C%20'Horse'%2C%20'Cow'%2C%20'Chicken'%2C%20'Pig'%2C%20'Sheep'%2C%20'Goat'%2C%20'Goose'%5D.map((name%2C%20index)%20%3D%3E%20(%7B%0A%20%20%20%20%20%20name%2C%0A%20%20%20%20%20%20animalId%3A%20index%20%2B%201%2C%0A%20%20%20%20%7D))%3B%0A%0A%20%20getAnimalCategories%20%3D%20()%3A%20%7B%20groupId%3A%20number%3B%20name%3A%20string%3B%20children%3F%3A%20%7B%20animalId%3A%20number%3B%20name%3A%20string%20%7D%5B%5D%20%7D%5B%5D%20%3D%3E%20%7B%0A%20%20%20%20const%20animals%20%3D%20this.getAnimals()%3B%0A%20%20%20%20const%20birds%20%3D%20%5B'Chicken'%2C%20'Goose'%5D.map((name)%20%3D%3E%20animals.find((animal)%20%3D%3E%20animal.name%20%3D%3D%3D%20name))%3B%0A%20%20%20%20const%20livestock%20%3D%20%5B'Cow'%2C%20'Pig'%2C%20'Sheep'%2C%20'Goat'%5D.map((name)%20%3D%3E%20animals.find((animal)%20%3D%3E%20animal.name%20%3D%3D%3D%20name))%3B%0A%20%20%20%20return%20%5B%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20name%3A%20'Birds'%2C%0A%20%20%20%20%20%20%20%20groupId%3A%201%2C%0A%20%20%20%20%20%20%20%20children%3A%20birds%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20name%3A%20'Livestock'%2C%0A%20%20%20%20%20%20%20%20groupId%3A%202%2C%0A%20%20%20%20%20%20%20%20children%3A%20livestock%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%5D%3B%0A%20%20%7D%3B%0A%20%20example_tab%20%3D%20%5B%0A%20%20%20%20%7B%0A%20%20%20%20%20%20typeName%3A%20'animals'%2C%0A%20%20%20%20%20%20typeLabel%3A%20'Animals'%2C%0A%20%20%20%20%20%20valueField%3A%20'animalId'%2C%0A%20%20%20%20%20%20labelField%3A%20'name'%2C%0A%20%20%20%20%20%20data%3A%20this.getAnimals()%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20typeName%3A%20'animalCategories'%2C%0A%20%20%20%20%20%20typeLabel%3A%20'Animal%20Categories'%2C%0A%20%20%20%20%20%20valueField%3A%20'groupId'%2C%0A%20%20%20%20%20%20labelField%3A%20'name'%2C%0A%20%20%20%20%20%20childTypeName%3A%20'animals'%2C%0A%20%20%20%20%20%20data%3A%20this.getAnimalCategories()%2C%0A%20%20%20%20%7D%2C%0A%20%20%5D%3B%0A%20%20public%20example_quickSelectConfig%20%3D%20%7B%0A%20%20%20%20label%3A%20'Quick%20Select'%2C%0A%20%20%20%20items%3A%20%5B%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20childTypeName%3A%20'animals'%2C%0A%20%20%20%20%20%20%20%20children%3A%20%5B2%5D%2C%0A%20%20%20%20%20%20%20%20label%3A%20'Pure%20Evil'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20childTypeName%3A%20'animals'%2C%0A%20%20%20%20%20%20%20%20children%3A%20%5B1%2C%206%2C%209%5D%2C%0A%20%20%20%20%20%20%20%20label%3A%20'My%20Pets'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20childTypeName%3A%20'animals'%2C%0A%20%20%20%20%20%20%20%20all%3A%20true%2C%0A%20%20%20%20%20%20%20%20label%3A%20'All%20Animals'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%5D%2C%0A%20%20%7D%3B%0A%0A%20%20public%20buttonLabel%3A%20string%20%3D%20'Nothing%20Selected'%3B%0A%20%20public%20example_buttonConfig%20%3D%20%7B%0A%20%20%20%20theme%3A%20'select'%2C%0A%20%20%20%20side%3A%20'right'%2C%0A%20%20%20%20icon%3A%20'collapse'%2C%0A%20%20%20%20label%3A%20this.buttonLabel%2C%0A%20%20%20%20selector%3A%20'buttonConfig'%2C%0A%20%20%7D%3B%0A%0A%20%20selectedAnimals%3A%20string%5B%5D%20%3D%20%5B%5D%3B%0A%20%20selectedAnimalCategories%3A%20string%5B%5D%20%3D%20%5B%5D%3B%0A%0A%20%20onSelectionChange(selectedData%3A%20TabbedGroupPickerTab%5B%5D)%20%7B%0A%20%20%20%20this.selectedAnimals%20%3D%20(selectedData.find((%7B%20typeName%20%7D)%20%3D%3E%20typeName%20%3D%3D%3D%20'animals')%20as%20ChildTab).data.map(%0A%20%20%20%20%20%20(%7B%20animalId%20%7D)%20%3D%3E%20animalId%2C%0A%20%20%20%20)%3B%0A%20%20%20%20this.selectedAnimalCategories%20%3D%20(selectedData.find((%7B%20typeName%20%7D)%20%3D%3E%20typeName%20%3D%3D%3D%20'animalCategories')%20as%20ParentTab).data.map(%0A%20%20%20%20%20%20(%7B%20groupId%20%7D)%20%3D%3E%20groupId%2C%0A%20%20%20%20)%3B%0A%20%20%20%20this.example_buttonConfig.label%20%3D%20this.buildButtonLabel()%3B%0A%20%20%7D%0A%0A%20%20buildButtonLabel()%3A%20string%20%7B%0A%20%20%20%20return%20this.selectedAnimals.length%20%3F%20%60Animals%20(%24%7Bthis.selectedAnimals.length%7D)%60%20%3A%20'Nothing%20Selected'%3B%0A%20%20%7D%0A%7D%0A`,
        cssSource: ``,
        htmlSource: `%3Cdiv%20class%3D%22tabbed-group-picker-example%22%3E%0A%20%20%3Cnovo-tabbed-group-picker%0A%20%20%20%20%5Btabs%5D%3D%22example_tab%22%0A%20%20%20%20title%3D%22groups-example%22%0A%20%20%20%20%5BquickSelectConfig%5D%3D%22example_quickSelectConfig%22%0A%20%20%20%20%5BbuttonConfig%5D%3D%22example_buttonConfig%22%0A%20%20%20%20(selectionChange)%3D%22onSelectionChange(%24event)%22%0A%20%20%3E%3C%2Fnovo-tabbed-group-picker%3E%0A%20%20%3Cdiv%20class%3D%22selected-data-wrapper%22%3E%0A%20%20%20%20%3Ch6%3ESelected%20Animal%20IDs%3A%3C%2Fh6%3E%0A%20%20%20%20%3Cdiv%3E%7B%7B%20selectedAnimals.join('%2C%20')%20%7D%7D%3C%2Fdiv%3E%0A%20%20%20%20%3Ch6%3ESelected%20Animal%20Category%20IDs%3A%3C%2Fh6%3E%0A%20%20%20%20%3Cdiv%3E%7B%7B%20selectedAnimalCategories.join('%2C%20')%20%7D%7D%3C%2Fdiv%3E%0A%20%20%3C%2Fdiv%3E%0A%3C%2Fdiv%3E%0A`
    },
    'tabbed-group-picker-quick-select': {
        title: 'Tabbed Group Picker - Quick Select Example',
        component: TabbedGroupPickerQuickSelectExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0Aimport%20%7B%20TabbedGroupPickerTab%2C%20ChildTab%20%7D%20from%20'novo-elements'%3B%0A%0A%2F**%0A%20*%20%40title%20Tabbed%20Group%20Picker%20-%20Quick%20Select%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20selector%3A%20'tabbed-group-picker-quick-select-example'%2C%0A%20%20templateUrl%3A%20'tabbed-group-picker-quick-select-example.html'%2C%0A%20%20styleUrls%3A%20%5B'..%2Ftabbed-group-picker-example.scss'%5D%2C%0A%7D)%0Aexport%20class%20TabbedGroupPickerQuickSelectExample%20%7B%0A%20%20getAnimals%20%3D%20()%3A%20%7B%20animalId%3A%20number%3B%20name%3A%20string%20%7D%5B%5D%20%3D%3E%0A%20%20%20%20%5B'Dog'%2C%20'Cat'%2C%20'Mouse'%2C%20'Horse'%2C%20'Cow'%2C%20'Chicken'%2C%20'Pig'%2C%20'Sheep'%2C%20'Goat'%2C%20'Goose'%5D.map((name%2C%20index)%20%3D%3E%20(%7B%0A%20%20%20%20%20%20name%2C%0A%20%20%20%20%20%20animalId%3A%20index%20%2B%201%2C%0A%20%20%20%20%7D))%3B%0A%20%20public%20example_tab%20%3D%20%5B%0A%20%20%20%20%7B%0A%20%20%20%20%20%20typeName%3A%20'animals'%2C%0A%20%20%20%20%20%20typeLabel%3A%20'Animals'%2C%0A%20%20%20%20%20%20valueField%3A%20'animalId'%2C%0A%20%20%20%20%20%20labelField%3A%20'name'%2C%0A%20%20%20%20%20%20data%3A%20this.getAnimals()%2C%0A%20%20%20%20%7D%2C%0A%20%20%5D%3B%0A%20%20public%20example_quickSelectConfig%20%3D%20%7B%0A%20%20%20%20label%3A%20'Quick%20Select'%2C%0A%20%20%20%20items%3A%20%5B%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20childTypeName%3A%20'animals'%2C%0A%20%20%20%20%20%20%20%20children%3A%20%5B2%5D%2C%0A%20%20%20%20%20%20%20%20label%3A%20'Pure%20Evil'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20childTypeName%3A%20'animals'%2C%0A%20%20%20%20%20%20%20%20children%3A%20%5B1%2C%206%2C%209%5D%2C%0A%20%20%20%20%20%20%20%20label%3A%20'My%20Pets'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20childTypeName%3A%20'animals'%2C%0A%20%20%20%20%20%20%20%20all%3A%20true%2C%0A%20%20%20%20%20%20%20%20label%3A%20'All%20Animals'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%5D%2C%0A%20%20%7D%3B%0A%0A%20%20public%20buttonLabel%3A%20string%20%3D%20'Nothing%20Selected'%3B%0A%20%20public%20example_buttonConfig%20%3D%20%7B%0A%20%20%20%20theme%3A%20'select'%2C%0A%20%20%20%20side%3A%20'right'%2C%0A%20%20%20%20icon%3A%20'collapse'%2C%0A%20%20%20%20label%3A%20this.buttonLabel%2C%0A%20%20%20%20selector%3A%20'buttonConfig'%2C%0A%20%20%7D%3B%0A%0A%20%20public%20selectedAnimals%3A%20string%5B%5D%20%3D%20%5B%5D%3B%0A%0A%20%20onSelectionChange(selectedData%3A%20TabbedGroupPickerTab%5B%5D)%20%7B%0A%20%20%20%20this.selectedAnimals%20%3D%20(selectedData.find((%7B%20typeName%20%7D)%20%3D%3E%20typeName%20%3D%3D%3D%20'animals')%20as%20ChildTab).data.map(%0A%20%20%20%20%20%20(%7B%20animalId%20%7D%3A%20%7B%20animalId%3A%20string%20%7D)%20%3D%3E%20animalId%2C%0A%20%20%20%20)%3B%0A%20%20%20%20this.example_buttonConfig.label%20%3D%20this.buildButtonLabel()%3B%0A%20%20%7D%0A%0A%20%20buildButtonLabel()%3A%20string%20%7B%0A%20%20%20%20return%20this.selectedAnimals.length%20%3F%20%60Animals%20(%24%7Bthis.selectedAnimals.length%7D)%60%20%3A%20'Nothing%20Selected'%3B%0A%20%20%7D%0A%7D%0A`,
        cssSource: ``,
        htmlSource: `%3Cdiv%20class%3D%22tabbed-group-picker-example%22%3E%0A%20%20%3Cnovo-tabbed-group-picker%0A%20%20%20%20%5Btabs%5D%3D%22example_tab%22%0A%20%20%20%20title%3D%22quick-select-example%22%0A%20%20%20%20%5BquickSelectConfig%5D%3D%22example_quickSelectConfig%22%0A%20%20%20%20%5BbuttonConfig%5D%3D%22example_buttonConfig%22%0A%20%20%20%20(selectionChange)%3D%22onSelectionChange(%24event)%22%0A%20%20%3E%3C%2Fnovo-tabbed-group-picker%3E%0A%20%20%3Cdiv%20class%3D%22selected-data-wrapper%22%3E%0A%20%20%20%20%3Ch6%3ESelected%20Animal%20IDs%3A%3C%2Fh6%3E%0A%20%20%20%20%3Cdiv%3E%7B%7B%20selectedAnimals.join('%2C%20')%20%7D%7D%3C%2Fdiv%3E%0A%20%20%3C%2Fdiv%3E%0A%3C%2Fdiv%3E%0A`
    },
    'actions-cell': {
        title: 'Actions Cell Example',
        component: ActionsCellExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0Aimport%20%7B%20BaseRenderer%20%7D%20from%20'novo-elements'%3B%0A%0A%2F**%0A%20*%20%40title%20Actions%20Cell%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20selector%3A%20'actions-cell-example'%2C%0A%20%20template%3A%20%60%0A%20%20%20%20%3Cnovo-dropdown%20parentScrollSelector%3D%22.table-container%22%3E%0A%20%20%20%20%20%20%3Cbutton%20type%3D%22button%22%20theme%3D%22dialogue%22%20icon%3D%22collapse%22%3EActions!%3C%2Fbutton%3E%0A%20%20%20%20%20%20%3Clist%3E%0A%20%20%20%20%20%20%20%20%3Citem%3EItem%201%3C%2Fitem%3E%0A%20%20%20%20%20%20%20%20%3Citem%3EItem%202%3C%2Fitem%3E%0A%20%20%20%20%20%20%20%20%3Citem%3EItem%203%3C%2Fitem%3E%0A%20%20%20%20%20%20%20%20%3Citem%3EItem%204%3C%2Fitem%3E%0A%20%20%20%20%20%20%20%20%3Citem%3EItem%205%3C%2Fitem%3E%0A%20%20%20%20%20%20%20%20%3Citem%3EItem%206%3C%2Fitem%3E%0A%20%20%20%20%20%20%20%20%3Citem%3EItem%207%3C%2Fitem%3E%0A%20%20%20%20%20%20%20%20%3Citem%3EItem%208%3C%2Fitem%3E%0A%20%20%20%20%20%20%20%20%3Citem%3EItem%209%3C%2Fitem%3E%0A%20%20%20%20%20%20%3C%2Flist%3E%0A%20%20%20%20%3C%2Fnovo-dropdown%3E%0A%20%20%60%2C%0A%7D)%0Aexport%20class%20ActionsCellExample%20extends%20BaseRenderer%20%7B%0A%20%20constructor()%20%7B%0A%20%20%20%20super()%3B%0A%20%20%7D%0A%0A%20%20getActionContext(data%2C%20meta)%20%7B%0A%20%20%20%20return%20%7B%20item%3A%20data%2C%20meta%20%7D%3B%0A%20%20%7D%0A%7D%0A`,
        cssSource: ``,
        htmlSource: ``
    },
    'details-table': {
        title: 'Details Table Example',
        component: DetailsTableExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0Aimport%20%7B%20NovoTableConfig%2C%20BaseRenderer%20%7D%20from%20'novo-elements'%3B%0Aimport%20%7B%20HEADER_COLORS%2C%20TableData%2C%20TableColumns%20%7D%20from%20'..%2Ftable-extras'%3B%0A%0A%40Component(%7B%0A%20%20selector%3A%20'extra-details'%2C%0A%20%20template%3A%20%60%0A%20%20%20%20%3Cdiv%20class%3D%22extra-data%22%3E%0A%20%20%20%20%20%20%3Clabel%3E%3Ci%20class%3D%22bhi-info%22%3E%3C%2Fi%3EDescription%3C%2Flabel%3E%0A%20%20%20%20%20%20%3Cp%3E%7B%7B%20data.description%20%7D%7D%3C%2Fp%3E%0A%20%20%20%20%20%20%3Clabel%3E%3Ci%20class%3D%22bhi-info%22%3E%3C%2Fi%3ECategories%3C%2Flabel%3E%0A%20%20%20%20%20%20%3Cp%3E%7B%7B%20data.categories%20%7D%7D%3C%2Fp%3E%0A%20%20%20%20%3C%2Fdiv%3E%0A%20%20%60%2C%0A%7D)%0Aexport%20class%20ExtraDetails%20extends%20BaseRenderer%20%7B%7D%0A%0A%2F**%0A%20*%20%40title%20Details%20Table%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20selector%3A%20'details-table-example'%2C%0A%20%20templateUrl%3A%20'details-table-example.html'%2C%0A%20%20styleUrls%3A%20%5B'details-table-example.css'%5D%2C%0A%7D)%0Aexport%20class%20DetailsTableExample%20%7B%0A%20%20public%20theme%3A%20string%20%3D%20HEADER_COLORS%5B0%5D%3B%0A%20%20public%20configuration%3A%20any%20%3D%20%7B%0A%20%20%20%20columns%3A%20TableColumns.slice()%2C%0A%20%20%20%20rows%3A%20TableData.slice()%2C%0A%20%20%20%20config%3A%20%7B%0A%20%20%20%20%20%20paging%3A%20%7B%0A%20%20%20%20%20%20%20%20current%3A%201%2C%0A%20%20%20%20%20%20%20%20itemsPerPage%3A%2010%2C%0A%20%20%20%20%20%20%20%20onPageChange%3A%20(event)%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%20%20this.configuration.config.paging.current%20%3D%20event.page%3B%0A%20%20%20%20%20%20%20%20%20%20this.configuration.config.paging.itemsPerPage%20%3D%20event.itemsPerPage%3B%0A%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20sorting%3A%20true%2C%0A%20%20%20%20%20%20filtering%3A%20true%2C%0A%20%20%20%20%20%20ordering%3A%20true%2C%0A%20%20%20%20%20%20resizing%3A%20true%2C%0A%20%20%20%20%20%20hasDetails%3A%20true%2C%0A%20%20%20%20%20%20detailsRenderer%3A%20ExtraDetails%2C%0A%20%20%20%20%7D%2C%0A%20%20%7D%3B%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cnovo-table%20class%3D%22table-condensed%22%0A%20%20%20%20%20%20%20%20%20%20%20%20%5Brows%5D%3D%22configuration.rows%22%0A%20%20%20%20%20%20%20%20%20%20%20%20%5Bcolumns%5D%3D%22configuration.columns%22%0A%20%20%20%20%20%20%20%20%20%20%20%20%5Bconfig%5D%3D%22configuration.config%22%0A%20%20%20%20%20%20%20%20%20%20%20%20rowIdentifier%3D%22name%22%3E%3C%2Fnovo-table%3E%0A`,
        selectorName: 'DetailsTableExample, ExtraDetails'
    },
    'editable-table': {
        title: 'Editable Table Example',
        component: EditableTableExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0Aimport%20%7B%20NovoTableConfig%2C%20ArrayCollection%2C%20PercentageCell%20%7D%20from%20'novo-elements'%3B%0A%0A%2F**%0A%20*%20%40title%20Editable%20Table%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20selector%3A%20'editable-table-example'%2C%0A%20%20templateUrl%3A%20'editable-table-example.html'%2C%0A%20%20styleUrls%3A%20%5B'editable-table-example.css'%5D%2C%0A%7D)%0Aexport%20class%20EditableTableExample%20%7B%0A%20%20public%20configuration%3A%20any%20%3D%20%7B%0A%20%20%20%20columns%3A%20%5B%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20title%3A%20'Name'%2C%0A%20%20%20%20%20%20%20%20name%3A%20'name'%2C%0A%20%20%20%20%20%20%20%20ordering%3A%20true%2C%0A%20%20%20%20%20%20%20%20filtering%3A%20true%2C%0A%20%20%20%20%20%20%20%20editorType%3A%20'TablePickerControl'%2C%0A%20%20%20%20%20%20%20%20editorConfig%3A%20%7B%0A%20%20%20%20%20%20%20%20%20%20key%3A%20'name'%2C%0A%20%20%20%20%20%20%20%20%20%20config%3A%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20options%3A%20%5B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20'Joshua%20Godi'%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20'Kameron%20Sween'%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20'Brian%20Kimball'%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20'Sweeney%20Todd'%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20'Tom%20Cruise'%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20'Ed%20Bailey'%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20'Bo%20Jackson'%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20'Ernie%20McDudson'%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%5D%2C%0A%20%20%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20title%3A%20'Job%20Type'%2C%0A%20%20%20%20%20%20%20%20name%3A%20'jobType'%2C%0A%20%20%20%20%20%20%20%20ordering%3A%20true%2C%0A%20%20%20%20%20%20%20%20filtering%3A%20true%2C%0A%20%20%20%20%20%20%20%20options%3A%20%5B'Freelance'%2C%20'Contact'%2C%20'Billable'%5D%2C%0A%20%20%20%20%20%20%20%20multiple%3A%20true%2C%0A%20%20%20%20%20%20%20%20editorType%3A%20'SelectControl'%2C%0A%20%20%20%20%20%20%20%20editorConfig%3A%20%7B%0A%20%20%20%20%20%20%20%20%20%20key%3A%20'jobType'%2C%0A%20%20%20%20%20%20%20%20%20%20options%3A%20%5B%0A%20%20%20%20%20%20%20%20%20%20%20%20%7B%20value%3A%20'Freelance'%2C%20label%3A%20'Freelance'%20%7D%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%7B%20value%3A%20'Contract'%2C%20label%3A%20'Contract'%20%7D%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%7B%20value%3A%20'Billable'%2C%20label%3A%20'Billable'%20%7D%2C%0A%20%20%20%20%20%20%20%20%20%20%5D%2C%0A%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20title%3A%20'Rate'%2C%0A%20%20%20%20%20%20%20%20name%3A%20'rate'%2C%0A%20%20%20%20%20%20%20%20ordering%3A%20true%2C%0A%20%20%20%20%20%20%20%20filtering%3A%20true%2C%0A%20%20%20%20%20%20%20%20renderer%3A%20PercentageCell%2C%0A%20%20%20%20%20%20%20%20editorType%3A%20'TextBoxControl'%2C%0A%20%20%20%20%20%20%20%20editorConfig%3A%20%7B%0A%20%20%20%20%20%20%20%20%20%20key%3A%20'rate'%2C%0A%20%20%20%20%20%20%20%20%20%20type%3A%20'percentage'%2C%0A%20%20%20%20%20%20%20%20%20%20required%3A%20true%2C%0A%20%20%20%20%20%20%20%20%20%20interactions%3A%20%5B%0A%20%20%20%20%20%20%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20event%3A%20'change'%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20script%3A%20(form)%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20console.log('Form%20Interaction%20Called!'%2C%20form)%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20if%20(form.value.rate)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20if%20(Number(form.value.rate)%20%3E%3D%200.75)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20form.controls.rating.setValue('High')%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%20else%20if%20(Number(form.value.rate)%20%3E%3D%200.5)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20form.controls.rating.setValue('Medium')%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%20else%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20form.controls.rating.setValue('Low')%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20%20%20%5D%2C%0A%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7B%20title%3A%20'Rating'%2C%20name%3A%20'rating'%20%7D%2C%0A%20%20%20%20%5D%2C%0A%20%20%20%20rows%3A%20new%20ArrayCollection(%5B%0A%20%20%20%20%20%20%7B%20id%3A%201%2C%20name%3A%20'Joshua%20Godi'%2C%20jobType%3A%20'Freelance'%2C%20rate%3A%20null%2C%20rating%3A%20'Low'%20%7D%2C%0A%20%20%20%20%20%20%7B%20id%3A%202%2C%20name%3A%20'Brian%20Kimball'%2C%20jobType%3A%20'Contact'%2C%20rate%3A%200.5%2C%20rating%3A%20'Medium'%20%7D%2C%0A%20%20%20%20%20%20%7B%20id%3A%203%2C%20name%3A%20'Kameron%20Sween'%2C%20jobType%3A%20'Billable'%2C%20rate%3A%201.0%2C%20rating%3A%20'High'%20%7D%2C%0A%20%20%20%20%5D)%2C%0A%20%20%20%20config%3A%20%7B%0A%20%20%20%20%20%20paging%3A%20%7B%0A%20%20%20%20%20%20%20%20current%3A%201%2C%0A%20%20%20%20%20%20%20%20itemsPerPage%3A%2010%2C%0A%20%20%20%20%20%20%20%20onPageChange%3A%20(event)%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%20%20this.configuration.config.paging.current%20%3D%20event.page%3B%0A%20%20%20%20%20%20%20%20%20%20this.configuration.config.paging.itemsPerPage%20%3D%20event.itemsPerPage%3B%0A%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20filtering%3A%20true%2C%0A%20%20%20%20%20%20sorting%3A%20true%2C%0A%20%20%20%20%20%20ordering%3A%20true%2C%0A%20%20%20%20%20%20resizing%3A%20true%2C%0A%20%20%20%20%7D%2C%0A%20%20%7D%3B%0A%20%20public%20editableNewRowDefault%3A%20any%20%3D%20%7B%20name%3A%20'Default'%2C%20jobType%3A%20'Contract'%20%7D%3B%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cnovo-table%20%5Btheme%5D%3D%22'sunflower'%22%20%5BdataProvider%5D%3D%22configuration.rows%22%20%5Bcolumns%5D%3D%22configuration.columns%22%20%5Bconfig%5D%3D%22configuration.config%22%20editable%3D%22true%22%20%23table%3E%0A%20%20%20%20%3Cnovo-table-header%20class%3D%22demo-custom-header%22%3E%0A%20%20%20%20%20%20%20%20%3Ch4%3EEditable%20Table%3C%2Fh4%3E%0A%20%20%20%20%20%20%20%20%3Cdiv%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%3Cinput%20type%3D%22text%22%20placeholder%3D%22row%22%20%23row%2F%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%3Cinput%20type%3D%22text%22%20placeholder%3D%22column%22%20%23column%2F%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%3Cbutton%20theme%3D%22secondary%22%20(click)%3D%22table.setTableEdit(row.value%2C%20column.value)%22%20*ngIf%3D%22!table.editing%22%3EAdd%2FEdit%3C%2Fbutton%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%3Cbutton%20theme%3D%22secondary%22%20(click)%3D%22table.cancelEditing()%22%20*ngIf%3D%22table.editing%22%3ECancel%3C%2Fbutton%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%3Cbutton%20theme%3D%22primary%22%20(click)%3D%22table.cancelEditing()%22%20*ngIf%3D%22table.editing%22%3ESave%3C%2Fbutton%3E%0A%20%20%20%20%20%20%20%20%3C%2Fdiv%3E%0A%20%20%20%20%3C%2Fnovo-table-header%3E%0A%20%20%20%20%3Cnovo-table-footer%20class%3D%22demo-custom-footer%22%20%5Bclass.editing%5D%3D%22table.editing%22%3E%0A%20%20%20%20%20%20%20%20%3Cbutton%20theme%3D%22dialogue%22%20icon%3D%22addcard%22%20side%3D%22left%22%20*ngIf%3D%22table.editing%22%20(click)%3D%22table.addEditableRow(editableNewRowDefault)%22%3EAdd%20Row%3C%2Fbutton%3E%0A%20%20%20%20%3C%2Fnovo-table-footer%3E%0A%20%20%20%20%3Cdiv%20classs%3D%22table-message%22%20table-empty-message%3E%3Ci%20class%3D%22bhi-search-question%22%3E%3C%2Fi%3E%20Custom%20Empty%20State%20Template!%20Click%20RELOAD%20to%20get%20Data!%3C%2Fdiv%3E%0A%20%20%20%20%3Cdiv%20classs%3D%22table-message%22%20table-no-matching-records-message%3E%3Ci%20class%3D%22bhi-search-question%22%3E%3C%2Fi%3E%20Custom%20No%20Matched%20Records%3C%2Fdiv%3E%0A%3C%2Fnovo-table%3E%0A%3Cdiv%20class%3D%22final-value%22%3ETable%20Value%3A%20%7B%7Btable.formValue%20%7C%20json%7D%7D%3C%2Fdiv%3E%0A`
    },
    'select-all-table': {
        title: 'Select All Table Example',
        component: SelectAllTableExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0Aimport%20%7B%20NovoTableConfig%20%7D%20from%20'novo-elements'%3B%0Aimport%20%7B%20HEADER_COLORS%2C%20TableData%2C%20TableColumns%20%7D%20from%20'..%2Ftable-extras'%3B%0A%0A%2F**%0A%20*%20%40title%20Select%20All%20Table%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20selector%3A%20'select-all-table-example'%2C%0A%20%20templateUrl%3A%20'select-all-table-example.html'%2C%0A%20%20styleUrls%3A%20%5B'select-all-table-example.css'%5D%2C%0A%7D)%0Aexport%20class%20SelectAllTableExample%20%7B%0A%20%20public%20theme%3A%20string%20%3D%20HEADER_COLORS%5B0%5D%3B%0A%20%20public%20configuration%3A%20any%20%3D%20%7B%0A%20%20%20%20columns%3A%20TableColumns.slice()%2C%0A%20%20%20%20rows%3A%20TableData.slice()%2C%0A%20%20%20%20config%3A%20%7B%0A%20%20%20%20%20%20paging%3A%20%7B%0A%20%20%20%20%20%20%20%20current%3A%201%2C%0A%20%20%20%20%20%20%20%20itemsPerPage%3A%2010%2C%0A%20%20%20%20%20%20%20%20onPageChange%3A%20(event)%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%20%20this.configuration.config.paging.current%20%3D%20event.page%3B%0A%20%20%20%20%20%20%20%20%20%20this.configuration.config.paging.itemsPerPage%20%3D%20event.itemsPerPage%3B%0A%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20sorting%3A%20true%2C%0A%20%20%20%20%20%20filtering%3A%20true%2C%0A%20%20%20%20%20%20ordering%3A%20true%2C%0A%20%20%20%20%20%20resizing%3A%20true%2C%0A%20%20%20%20%20%20selectAllEnabled%3A%20true%2C%0A%20%20%20%20%20%20rowSelectionStyle%3A%20'checkbox'%2C%0A%20%20%20%20%7D%2C%0A%20%20%7D%3B%0A%0A%20%20singleAction()%20%7B%0A%20%20%20%20window.alert('Action!')%3B%0A%20%20%7D%0A%0A%20%20selectedAction(action)%20%7B%0A%20%20%20%20window.alert(%60You%20clicked%20%24%7Baction%7D!%60)%3B%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cnovo-table%20%5Brows%5D%3D%22configuration.rows%22%20%5Bcolumns%5D%3D%22configuration.columns%22%20%5Bconfig%5D%3D%22configuration.config%22%20%23table%3E%0A%20%20%20%20%3Cnovo-table-actions%3E%0A%20%20%20%20%20%20%20%20%3Cbutton%20theme%3D%22secondary%22%20(click)%3D%22singleAction()%22%3EClick%20Me!%3C%2Fbutton%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-dropdown%20side%3D%22right%22%20*ngIf%3D%22table.selected.length%22%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%3Cbutton%20theme%3D%22primary%22%20icon%3D%22collapse%22%20inverse%3E%7B%7Btable.selected.length%7D%7D%20Selected%3C%2Fbutton%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%3Clist%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Citem%20(action)%3D%22selectedAction('action%201')%22%3EAction%201%3C%2Fitem%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Citem%20(action)%3D%22selectedAction('action%202')%22%3EAction%202%3C%2Fitem%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Citem%20(action)%3D%22selectedAction('action%203')%22%20disabled%3D%22true%22%3EAction%203%3C%2Fitem%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%3C%2Flist%3E%0A%20%20%20%20%20%20%20%20%3C%2Fnovo-dropdown%3E%0A%20%20%20%20%3C%2Fnovo-table-actions%3E%0A%3C%2Fnovo-table%3E%0A`
    },
    'table': {
        title: 'Table Example',
        component: TableExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%2F%2F%20Vendor%0Aimport%20%7B%20NovoTableConfig%20%7D%20from%20'novo-elements'%3B%0Aimport%20%7B%20HEADER_COLORS%2C%20TableData%2C%20TableColumns%20%7D%20from%20'..%2Ftable-extras'%3B%0A%0A%2F**%0A%20*%20%40title%20Table%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20selector%3A%20'table-example'%2C%0A%20%20templateUrl%3A%20'table-example.html'%2C%0A%20%20styleUrls%3A%20%5B'table-example.css'%5D%2C%0A%7D)%0Aexport%20class%20TableExample%20%7B%0A%20%20public%20theme%3A%20string%20%3D%20HEADER_COLORS%5B0%5D%3B%0A%20%20public%20configuration%3A%20any%20%3D%20%7B%0A%20%20%20%20columns%3A%20TableColumns.slice()%2C%0A%20%20%20%20rows%3A%20%5B%5D%2C%0A%20%20%20%20config%3A%20%7B%0A%20%20%20%20%20%20paging%3A%20%7B%0A%20%20%20%20%20%20%20%20current%3A%201%2C%0A%20%20%20%20%20%20%20%20itemsPerPage%3A%2010%2C%0A%20%20%20%20%20%20%20%20onPageChange%3A%20(event)%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%20%20this.configuration.config.paging.current%20%3D%20event.page%3B%0A%20%20%20%20%20%20%20%20%20%20this.configuration.config.paging.itemsPerPage%20%3D%20event.itemsPerPage%3B%0A%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20filtering%3A%20true%2C%0A%20%20%20%20%20%20sorting%3A%20true%2C%0A%20%20%20%20%20%20ordering%3A%20true%2C%0A%20%20%20%20%20%20resizing%3A%20true%2C%0A%20%20%20%20%7D%2C%0A%20%20%7D%3B%0A%0A%20%20reload()%20%7B%0A%20%20%20%20this.configuration.rows%20%3D%20TableData.slice()%3B%0A%20%20%7D%0A%0A%20%20changeTheme()%20%7B%0A%20%20%20%20let%20idx%20%3D%20HEADER_COLORS.indexOf(this.theme)%3B%0A%20%20%20%20if%20(idx%20%3D%3D%3D%20HEADER_COLORS.length%20-%201)%20%7B%0A%20%20%20%20%20%20idx%20%3D%20-1%3B%0A%20%20%20%20%7D%0A%20%20%20%20this.theme%20%3D%20HEADER_COLORS%5Bidx%20%2B%201%5D%3B%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cnovo-table%20%5Btheme%5D%3D%22theme%22%0A%20%20%20%20%20%20%20%20%20%20%20%20%5BdataProvider%5D%3D%22configuration.rows%22%0A%20%20%20%20%20%20%20%20%20%20%20%20%5Bcolumns%5D%3D%22configuration.columns%22%0A%20%20%20%20%20%20%20%20%20%20%20%20%5Bconfig%5D%3D%22configuration.config%22%0A%20%20%20%20%20%20%20%20%20%20%20%20rowIdentifier%3D%22name%22%3E%0A%20%20%20%20%3Cnovo-table-header%20class%3D%22demo-custom-header%22%3E%0A%20%20%20%20%20%20%20%20TEST%20%3A)%0A%20%20%20%20%20%20%20%20%3Cdiv%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%3Cbutton%20theme%3D%22secondary%22%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20(click)%3D%22reload()%22%3EReload%20Data%3C%2Fbutton%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%3Cbutton%20theme%3D%22secondary%22%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20(click)%3D%22changeTheme()%22%3EChange%20Theme!%3C%2Fbutton%3E%0A%20%20%20%20%20%20%20%20%3C%2Fdiv%3E%0A%20%20%20%20%3C%2Fnovo-table-header%3E%0A%20%20%20%20%3Cdiv%20classs%3D%22table-message%22%0A%20%20%20%20%20%20%20%20%20table-empty-message%3E%0A%20%20%20%20%20%20%20%20%3Ci%20class%3D%22bhi-search-question%22%3E%3C%2Fi%3E%20Custom%20Empty%20State%20Template!%20Click%20RELOAD%20to%20get%20Data!%3C%2Fdiv%3E%0A%20%20%20%20%3Cdiv%20classs%3D%22table-message%22%0A%20%20%20%20%20%20%20%20%20table-no-matching-records-message%3E%0A%20%20%20%20%20%20%20%20%3Ci%20class%3D%22bhi-search-question%22%3E%3C%2Fi%3E%20Custom%20No%20Matched%20Records%3C%2Fdiv%3E%0A%3C%2Fnovo-table%3E%0A`
    },
    'total-footer-table': {
        title: 'Total Footer Table Example',
        component: TotalFooterTableExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0Aimport%20%7B%20NovoTableConfig%20%7D%20from%20'novo-elements'%3B%0Aimport%20%7B%20HEADER_COLORS%20%7D%20from%20'..%2Ftable-extras'%3B%0A%0A%2F**%0A%20*%20%40title%20Total%20Footer%20Table%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20selector%3A%20'total-footer-table-example'%2C%0A%20%20templateUrl%3A%20'total-footer-table-example.html'%2C%0A%20%20styleUrls%3A%20%5B'total-footer-table-example.css'%5D%2C%0A%7D)%0Aexport%20class%20TotalFooterTableExample%20%7B%0A%20%20public%20theme%3A%20string%20%3D%20HEADER_COLORS%5B0%5D%3B%0A%20%20public%20configuration%3A%20any%20%3D%20%7B%0A%20%20%20%20columns%3A%20%5B%0A%20%20%20%20%20%20%7B%20title%3A%20'Name'%2C%20name%3A%20'name'%2C%20ordering%3A%20true%2C%20filtering%3A%20true%20%7D%2C%0A%20%20%20%20%20%20%7B%20title%3A%20'Count%201'%2C%20name%3A%20'count1'%2C%20ordering%3A%20true%2C%20filtering%3A%20true%20%7D%2C%0A%20%20%20%20%20%20%7B%20title%3A%20'Count%202'%2C%20name%3A%20'count2'%2C%20ordering%3A%20true%2C%20filtering%3A%20true%20%7D%2C%0A%20%20%20%20%20%20%7B%20title%3A%20'Count%203'%2C%20name%3A%20'count3'%2C%20ordering%3A%20true%2C%20filtering%3A%20true%20%7D%2C%0A%20%20%20%20%5D%2C%0A%20%20%20%20rows%3A%20%5B%0A%20%20%20%20%20%20%7B%20id%3A%201%2C%20name%3A%20'Name%201'%2C%20count1%3A%201%2C%20count2%3A%202%2C%20count3%3A%203%20%7D%2C%0A%20%20%20%20%20%20%7B%20id%3A%202%2C%20name%3A%20'Name%202'%2C%20count1%3A%201%2C%20count2%3A%202%2C%20count3%3A%203%20%7D%2C%0A%20%20%20%20%20%20%7B%20id%3A%203%2C%20name%3A%20'Name%203'%2C%20count1%3A%201%2C%20count2%3A%202%2C%20count3%3A%203%20%7D%2C%0A%20%20%20%20%20%20%7B%20id%3A%204%2C%20name%3A%20'Name%204'%2C%20count1%3A%201%2C%20count2%3A%202%2C%20count3%3A%203%20%7D%2C%0A%20%20%20%20%20%20%7B%20id%3A%205%2C%20name%3A%20'Name%205'%2C%20count1%3A%201%2C%20count2%3A%202%2C%20count3%3A%203%20%7D%2C%0A%20%20%20%20%5D%2C%0A%20%20%20%20config%3A%20%7B%0A%20%20%20%20%20%20paging%3A%20%7B%0A%20%20%20%20%20%20%20%20current%3A%201%2C%0A%20%20%20%20%20%20%20%20itemsPerPage%3A%2010%2C%0A%20%20%20%20%20%20%20%20onPageChange%3A%20(event)%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%20%20this.configuration.config.paging.current%20%3D%20event.page%3B%0A%20%20%20%20%20%20%20%20%20%20this.configuration.config.paging.itemsPerPage%20%3D%20event.itemsPerPage%3B%0A%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20footers%3A%20%5B%0A%20%20%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20columns%3A%20%5B'count1'%2C%20'count2'%2C%20'count3'%5D%2C%0A%20%20%20%20%20%20%20%20%20%20method%3A%20'SUM'%2C%0A%20%20%20%20%20%20%20%20%20%20labelColumn%3A%20'name'%2C%0A%20%20%20%20%20%20%20%20%20%20label%3A%20'Mega%20Total'%2C%0A%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20columns%3A%20%5B'count1'%2C%20'count2'%2C%20'count3'%5D%2C%0A%20%20%20%20%20%20%20%20%20%20method%3A%20'AVG'%2C%0A%20%20%20%20%20%20%20%20%20%20labelColumn%3A%20'name'%2C%0A%20%20%20%20%20%20%20%20%20%20label%3A%20'Yep%2C%20Average!'%2C%0A%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%5D%2C%0A%20%20%20%20%20%20filtering%3A%20true%2C%0A%20%20%20%20%20%20sorting%3A%20true%2C%0A%20%20%20%20%20%20ordering%3A%20true%2C%0A%20%20%20%20%20%20resizing%3A%20true%2C%0A%20%20%20%20%7D%2C%0A%20%20%7D%3B%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cnovo-table%20%5Btheme%5D%3D%22'grass'%22%20%5BdataProvider%5D%3D%22configuration.rows%22%20%5Bcolumns%5D%3D%22configuration.columns%22%20%5Bconfig%5D%3D%22configuration.config%22%3E%0A%20%20%20%20%3Cnovo-table-header%20class%3D%22demo-custom-header%22%3E%0A%20%20%20%20%20%20%20%20%3Ch4%3ETotal%20Footer%3C%2Fh4%3E%0A%20%20%20%20%3C%2Fnovo-table-header%3E%0A%3C%2Fnovo-table%3E%0A`
    },
    'analytics-colors': {
        title: 'Analytics Colors',
        component: AnalyticsColorsExample,
        tsSource: `%2F%2F%20NG2%0Aimport%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%2F%2F%20Vendor%0Aimport%20%7B%20NovoToastService%20%7D%20from%20'novo-elements'%3B%0A%0A%2F**%0A%20*%20%40title%20Analytics%20Colors%0A%20*%2F%0A%40Component(%7B%0A%20%20selector%3A%20'analytics-colors-example'%2C%0A%20%20templateUrl%3A%20'.%2Fanalytics-colors-example.html'%2C%0A%20%20styleUrls%3A%20%5B'.%2Fanalytics-colors-example.scss'%5D%2C%0A%7D)%0Aexport%20class%20AnalyticsColorsExample%20%7B%0A%20%20public%20analyticsColors%3A%20Array%3Cany%3E%20%3D%20%5B%0A%20%20%20%20%7B%0A%20%20%20%20%20%20name%3A%20'grapefruit'%2C%0A%20%20%20%20%20%20variables%3A%20%5B'grapefruit'%5D%2C%0A%20%20%20%20%20%20hex%3A%20'DA4453'%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20name%3A%20'bittersweet'%2C%0A%20%20%20%20%20%20variables%3A%20%5B'bittersweet'%5D%2C%0A%20%20%20%20%20%20hex%3A%20'EB6845'%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20name%3A%20'sunflower'%2C%0A%20%20%20%20%20%20variables%3A%20%5B'sunflower'%5D%2C%0A%20%20%20%20%20%20hex%3A%20'F6B042'%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20name%3A%20'grass'%2C%0A%20%20%20%20%20%20variables%3A%20%5B'grass'%5D%2C%0A%20%20%20%20%20%20hex%3A%20'8CC152'%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20name%3A%20'mint'%2C%0A%20%20%20%20%20%20variables%3A%20%5B'mint'%5D%2C%0A%20%20%20%20%20%20hex%3A%20'37BC9B'%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20name%3A%20'aqua'%2C%0A%20%20%20%20%20%20variables%3A%20%5B'aqua'%5D%2C%0A%20%20%20%20%20%20hex%3A%20'3BAFDA'%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20name%3A%20'ocean'%2C%0A%20%20%20%20%20%20variables%3A%20%5B'ocean'%5D%2C%0A%20%20%20%20%20%20hex%3A%20'4A89DC'%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20name%3A%20'carnation'%2C%0A%20%20%20%20%20%20variables%3A%20%5B'carnation'%5D%2C%0A%20%20%20%20%20%20hex%3A%20'D770AD'%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20name%3A%20'lavender'%2C%0A%20%20%20%20%20%20variables%3A%20%5B'lavender'%5D%2C%0A%20%20%20%20%20%20hex%3A%20'967ADC'%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20name%3A%20'mountain'%2C%0A%20%20%20%20%20%20variables%3A%20%5B'mountain'%5D%2C%0A%20%20%20%20%20%20hex%3A%20'9678B6'%2C%0A%20%20%20%20%7D%2C%0A%20%20%5D%3B%0A%0A%20%20options%3A%20any%3B%0A%0A%20%20constructor(private%20toaster%3A%20NovoToastService)%20%7B%7D%0A%0A%20%20copyLink(color)%20%7B%0A%20%20%20%20%2F%2F%20Create%20dom%20element%20to%20copy%20from%0A%20%20%20%20const%20copyFrom%20%3D%20document.createElement('textarea')%3B%0A%20%20%20%20copyFrom.textContent%20%3D%20%60%23%24%7Bcolor.hex%7D%60%3B%0A%20%20%20%20const%20body%20%3D%20document.getElementsByTagName('body')%5B0%5D%3B%0A%20%20%20%20body.appendChild(copyFrom)%3B%0A%20%20%20%20copyFrom.select()%3B%0A%20%20%20%20%2F%2F%20Copy%20text%0A%20%20%20%20document.execCommand('copy')%3B%0A%20%20%20%20%2F%2F%20Delete%20element%0A%20%20%20%20body.removeChild(copyFrom)%3B%0A%0A%20%20%20%20%2F%2F%20Set%20toast%20options%0A%20%20%20%20this.options%20%3D%20%7B%0A%20%20%20%20%20%20title%3A%20%60%23%24%7Bcolor.hex%7D%60%2C%0A%20%20%20%20%20%20message%3A%20'Copied%20to%20your%20clipboard'%2C%0A%20%20%20%20%20%20theme%3A%20color.variables%5B0%5D%2C%0A%20%20%20%20%20%20icon%3A%20'clipboard'%2C%0A%20%20%20%20%20%20position%3A%20'growlTopRight'%2C%0A%20%20%20%20%7D%3B%0A%0A%20%20%20%20if%20(color.name%20%3D%3D%3D%20'action')%20%7B%0A%20%20%20%20%20%20this.options.theme%20%3D%20'ocean'%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20%2F%2F%20Fire%20toast%0A%20%20%20%20this.toaster.alert(this.options)%3B%0A%20%20%7D%0A%7D%0A`,
        cssSource: ``,
        htmlSource: `%3Carticle%20class%3D%22color-blocks%20analytics-colors%22%3E%0A%20%20%3Cdiv%20*ngFor%3D%22let%20color%20of%20analyticsColors%22%20class%3D%22block%22%3E%0A%20%20%20%20%20%20%3Cdiv%20class%3D%22color-square%20bgc-%7B%7Bcolor.variables%5B0%5D%7D%7D%22%20(click)%3D%22copyLink(color)%22%3E%0A%20%20%20%20%20%20%20%20%3Ch3%20class%3D%22color-text%22%3E%3Cspan%3E%23%3C%2Fspan%3E%7B%7Bcolor.hex%7D%7D%3C%2Fh3%3E%0A%20%20%20%20%20%20%3C%2Fdiv%3E%0A%20%20%20%20%20%20%3Ch6%3E%7B%7Bcolor.name%7D%7D%3C%2Fh6%3E%0A%20%20%20%20%20%20%3Cspan%20class%3D%22vars%22%20*ngFor%3D%22let%20variable%20of%20color.variables%22%3E%24%7B%7Bvariable%7D%7D%3C%2Fspan%3E%0A%20%20%3C%2Fdiv%3E%0A%3C%2Farticle%3E%0A`
    },
    'entity-colors': {
        title: 'Entity Colors',
        component: EntityColorsExample,
        tsSource: `%2F%2F%20NG2%0Aimport%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%2F%2F%20Vendor%0Aimport%20%7B%20NovoToastService%20%7D%20from%20'novo-elements'%3B%0A%0A%2F**%0A%20*%20%40title%20Entity%20Colors%0A%20*%2F%0A%40Component(%7B%0A%20%20selector%3A%20'entity-colors-example'%2C%0A%20%20templateUrl%3A%20'.%2Fentity-colors-example.html'%2C%0A%20%20styleUrls%3A%20%5B'.%2Fentity-colors-example.scss'%5D%2C%0A%7D)%0Aexport%20class%20EntityColorsExample%20%7B%0A%20%20entityColors%3A%20Array%3Cany%3E%20%3D%20%5B%0A%20%20%20%20%7B%0A%20%20%20%20%20%20name%3A%20'lead'%2C%0A%20%20%20%20%20%20variables%3A%20%5B'lead'%5D%2C%0A%20%20%20%20%20%20hex%3A%20'AA6699'%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20name%3A%20'contact'%2C%0A%20%20%20%20%20%20variables%3A%20%5B'contact'%5D%2C%0A%20%20%20%20%20%20hex%3A%20'FFAA44'%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20name%3A%20'company'%2C%0A%20%20%20%20%20%20variables%3A%20%5B'company'%5D%2C%0A%20%20%20%20%20%20hex%3A%20'3399DD'%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20name%3A%20'candidate'%2C%0A%20%20%20%20%20%20variables%3A%20%5B'candidate'%5D%2C%0A%20%20%20%20%20%20hex%3A%20'44BB77'%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20name%3A%20'opportunity'%2C%0A%20%20%20%20%20%20variables%3A%20%5B'opportunity'%5D%2C%0A%20%20%20%20%20%20hex%3A%20'662255'%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20name%3A%20'job'%2C%0A%20%20%20%20%20%20variables%3A%20%5B'job'%5D%2C%0A%20%20%20%20%20%20hex%3A%20'BB5566'%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20name%3A%20'job%20code'%2C%0A%20%20%20%20%20%20variables%3A%20%5B'jobCode'%5D%2C%0A%20%20%20%20%20%20hex%3A%20'696D79'%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20name%3A%20'earn%20code'%2C%0A%20%20%20%20%20%20variables%3A%20%5B'earnCode'%5D%2C%0A%20%20%20%20%20%20hex%3A%20'696D79'%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20name%3A%20'submission'%2C%0A%20%20%20%20%20%20variables%3A%20%5B'submission'%5D%2C%0A%20%20%20%20%20%20hex%3A%20'A9ADBB'%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20name%3A%20'placement'%2C%0A%20%20%20%20%20%20variables%3A%20%5B'placement'%5D%2C%0A%20%20%20%20%20%20hex%3A%20'0B344F'%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20name%3A%20'sendout'%2C%0A%20%20%20%20%20%20variables%3A%20%5B'sendout'%5D%2C%0A%20%20%20%20%20%20hex%3A%20'747884'%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20name%3A%20'note'%2C%0A%20%20%20%20%20%20variables%3A%20%5B'note'%5D%2C%0A%20%20%20%20%20%20hex%3A%20'747884'%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20name%3A%20'contract'%2C%0A%20%20%20%20%20%20variables%3A%20%5B'contract'%5D%2C%0A%20%20%20%20%20%20hex%3A%20'454EA0'%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20name%3A%20'invoice%20statement'%2C%0A%20%20%20%20%20%20variables%3A%20%5B'invoiceStatement'%5D%2C%0A%20%20%20%20%20%20hex%3A%20'696D79'%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20name%3A%20'billable%20charge'%2C%0A%20%20%20%20%20%20variables%3A%20%5B'billableCharge'%5D%2C%0A%20%20%20%20%20%20hex%3A%20'696D79'%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20name%3A%20'payable%20charge'%2C%0A%20%20%20%20%20%20variables%3A%20%5B'payableCharge'%5D%2C%0A%20%20%20%20%20%20hex%3A%20'696D79'%2C%0A%20%20%20%20%7D%2C%0A%20%20%5D%3B%0A%0A%20%20options%3A%20any%3B%0A%0A%20%20constructor(private%20toaster%3A%20NovoToastService)%20%7B%7D%0A%0A%20%20copyLink(color)%20%7B%0A%20%20%20%20%2F%2F%20Create%20dom%20element%20to%20copy%20from%0A%20%20%20%20const%20copyFrom%20%3D%20document.createElement('textarea')%3B%0A%20%20%20%20copyFrom.textContent%20%3D%20%60%23%24%7Bcolor.hex%7D%60%3B%0A%20%20%20%20const%20body%20%3D%20document.getElementsByTagName('body')%5B0%5D%3B%0A%20%20%20%20body.appendChild(copyFrom)%3B%0A%20%20%20%20copyFrom.select()%3B%0A%20%20%20%20%2F%2F%20Copy%20text%0A%20%20%20%20document.execCommand('copy')%3B%0A%20%20%20%20%2F%2F%20Delete%20element%0A%20%20%20%20body.removeChild(copyFrom)%3B%0A%0A%20%20%20%20%2F%2F%20Set%20toast%20options%0A%20%20%20%20this.options%20%3D%20%7B%0A%20%20%20%20%20%20title%3A%20%60%23%24%7Bcolor.hex%7D%60%2C%0A%20%20%20%20%20%20message%3A%20'Copied%20to%20your%20clipboard'%2C%0A%20%20%20%20%20%20theme%3A%20color.variables%5B0%5D%2C%0A%20%20%20%20%20%20icon%3A%20'clipboard'%2C%0A%20%20%20%20%20%20position%3A%20'growlTopRight'%2C%0A%20%20%20%20%7D%3B%0A%0A%20%20%20%20if%20(color.name%20%3D%3D%3D%20'action')%20%7B%0A%20%20%20%20%20%20this.options.theme%20%3D%20'ocean'%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20%2F%2F%20Fire%20toast%0A%20%20%20%20this.toaster.alert(this.options)%3B%0A%20%20%7D%0A%7D%0A`,
        cssSource: ``,
        htmlSource: `%3Carticle%20class%3D%22color-blocks%20entity-colors%22%3E%0A%20%20%3Cdiv%20*ngFor%3D%22let%20color%20of%20entityColors%22%20class%3D%22block%22%3E%0A%20%20%20%20%20%20%3Cdiv%20class%3D%22color-square%20bgc-%7B%7Bcolor.variables%5B0%5D%7D%7D%22%20(click)%3D%22copyLink(color)%22%3E%0A%20%20%20%20%20%20%20%20%3Ch3%20class%3D%22color-text%22%3E%3Cspan%3E%23%3C%2Fspan%3E%7B%7Bcolor.hex%7D%7D%3C%2Fh3%3E%0A%20%20%20%20%20%20%3C%2Fdiv%3E%0A%20%20%20%20%20%20%3Ch6%3E%7B%7Bcolor.name%7D%7D%3C%2Fh6%3E%0A%20%20%20%20%20%20%3Cspan%20class%3D%22vars%22%20*ngFor%3D%22let%20variable%20of%20color.variables%22%3E%24%7B%7Bvariable%7D%7D%3C%2Fspan%3E%0A%20%20%3C%2Fdiv%3E%0A%3C%2Farticle%3E%0A`
    },
    'primary-colors': {
        title: 'Primary Colors',
        component: PrimaryColorsExample,
        tsSource: `%2F%2F%20NG2%0Aimport%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%2F%2F%20Vendor%0Aimport%20%7B%20NovoToastService%20%7D%20from%20'novo-elements'%3B%0A%0A%2F**%0A%20*%20%40title%20Primary%20Colors%0A%20*%2F%0A%40Component(%7B%0A%20%20selector%3A%20'primary-colors-example'%2C%0A%20%20templateUrl%3A%20'.%2Fprimary-colors-example.html'%2C%0A%20%20styleUrls%3A%20%5B'.%2Fprimary-colors-example.scss'%5D%2C%0A%7D)%0Aexport%20class%20PrimaryColorsExample%20%7B%0A%20%20primaryColors%3A%20Array%3Cany%3E%20%3D%20%5B%0A%20%20%20%20%7B%0A%20%20%20%20%20%20name%3A%20'navigation'%2C%0A%20%20%20%20%20%20variables%3A%20%5B'navigation'%5D%2C%0A%20%20%20%20%20%20hex%3A%20'2F384F'%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20name%3A%20'positive'%2C%0A%20%20%20%20%20%20variables%3A%20%5B'positive'%5D%2C%0A%20%20%20%20%20%20hex%3A%20'4A89DC'%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20name%3A%20'dark'%2C%0A%20%20%20%20%20%20variables%3A%20%5B'dark'%5D%2C%0A%20%20%20%20%20%20hex%3A%20'3D464D'%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20name%3A%20'background'%2C%0A%20%20%20%20%20%20variables%3A%20%5B'background'%5D%2C%0A%20%20%20%20%20%20hex%3A%20'F4F4F4'%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20name%3A%20'background%20dark'%2C%0A%20%20%20%20%20%20variables%3A%20%5B'background-dark'%5D%2C%0A%20%20%20%20%20%20hex%3A%20'E2E2E2'%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20name%3A%20'neutral'%2C%0A%20%20%20%20%20%20variables%3A%20%5B'neutral'%5D%2C%0A%20%20%20%20%20%20hex%3A%20'4F5361'%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20name%3A%20'success'%2C%0A%20%20%20%20%20%20variables%3A%20%5B'success'%5D%2C%0A%20%20%20%20%20%20hex%3A%20'8CC152'%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20name%3A%20'negative'%2C%0A%20%20%20%20%20%20variables%3A%20%5B'negative'%5D%2C%0A%20%20%20%20%20%20hex%3A%20'DA4453'%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20name%3A%20'warning'%2C%0A%20%20%20%20%20%20variables%3A%20%5B'warning'%5D%2C%0A%20%20%20%20%20%20hex%3A%20'F6B042'%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20name%3A%20'empty'%2C%0A%20%20%20%20%20%20variables%3A%20%5B'empty'%5D%2C%0A%20%20%20%20%20%20hex%3A%20'CCCDCC'%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20name%3A%20'sand'%2C%0A%20%20%20%20%20%20variables%3A%20%5B'sand'%5D%2C%0A%20%20%20%20%20%20hex%3A%20'F4F4F4'%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20name%3A%20'silver'%2C%0A%20%20%20%20%20%20variables%3A%20%5B'silver'%5D%2C%0A%20%20%20%20%20%20hex%3A%20'E2E2E2'%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20name%3A%20'stone'%2C%0A%20%20%20%20%20%20variables%3A%20%5B'stone'%5D%2C%0A%20%20%20%20%20%20hex%3A%20'BEBEBE'%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20name%3A%20'ash'%2C%0A%20%20%20%20%20%20variables%3A%20%5B'ash'%5D%2C%0A%20%20%20%20%20%20hex%3A%20'A0A0A0'%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20name%3A%20'slate'%2C%0A%20%20%20%20%20%20variables%3A%20%5B'slate'%5D%2C%0A%20%20%20%20%20%20hex%3A%20'707070'%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20name%3A%20'charcoal'%2C%0A%20%20%20%20%20%20variables%3A%20%5B'charcoal'%5D%2C%0A%20%20%20%20%20%20hex%3A%20'282828'%2C%0A%20%20%20%20%7D%2C%0A%20%20%5D%3B%0A%20%20options%3A%20any%3B%0A%0A%20%20constructor(private%20toaster%3A%20NovoToastService)%20%7B%7D%0A%0A%20%20copyLink(color)%20%7B%0A%20%20%20%20%2F%2F%20Create%20dom%20element%20to%20copy%20from%0A%20%20%20%20const%20copyFrom%20%3D%20document.createElement('textarea')%3B%0A%20%20%20%20copyFrom.textContent%20%3D%20%60%23%24%7Bcolor.hex%7D%60%3B%0A%20%20%20%20const%20body%20%3D%20document.getElementsByTagName('body')%5B0%5D%3B%0A%20%20%20%20body.appendChild(copyFrom)%3B%0A%20%20%20%20copyFrom.select()%3B%0A%20%20%20%20%2F%2F%20Copy%20text%0A%20%20%20%20document.execCommand('copy')%3B%0A%20%20%20%20%2F%2F%20Delete%20element%0A%20%20%20%20body.removeChild(copyFrom)%3B%0A%0A%20%20%20%20%2F%2F%20Set%20toast%20options%0A%20%20%20%20this.options%20%3D%20%7B%0A%20%20%20%20%20%20title%3A%20%60%23%24%7Bcolor.hex%7D%60%2C%0A%20%20%20%20%20%20message%3A%20'Copied%20to%20your%20clipboard'%2C%0A%20%20%20%20%20%20theme%3A%20color.variables%5B0%5D%2C%0A%20%20%20%20%20%20icon%3A%20'clipboard'%2C%0A%20%20%20%20%20%20position%3A%20'growlTopRight'%2C%0A%20%20%20%20%7D%3B%0A%0A%20%20%20%20if%20(color.name%20%3D%3D%3D%20'action')%20%7B%0A%20%20%20%20%20%20this.options.theme%20%3D%20'ocean'%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20%2F%2F%20Fire%20toast%0A%20%20%20%20this.toaster.alert(this.options)%3B%0A%20%20%7D%0A%7D%0A`,
        cssSource: ``,
        htmlSource: `%3Carticle%20class%3D%22color-blocks%20primary-colors%22%3E%0A%20%20%3Cdiv%20*ngFor%3D%22let%20color%20of%20primaryColors%22%20class%3D%22block%22%3E%0A%20%20%20%20%20%20%3Cdiv%20class%3D%22color-square%20bgc-%7B%7Bcolor.variables%5B0%5D%7D%7D%22%20(click)%3D%22copyLink(color)%22%3E%0A%20%20%20%20%20%20%20%20%3Ch3%20class%3D%22color-text%22%3E%3Cspan%3E%23%3C%2Fspan%3E%7B%7Bcolor.hex%7D%7D%3C%2Fh3%3E%0A%20%20%20%20%20%20%3C%2Fdiv%3E%0A%20%20%20%20%20%20%3Ch6%3E%7B%7Bcolor.name%7D%7D%3C%2Fh6%3E%0A%20%20%20%20%20%20%3Cspan%20class%3D%22vars%22%20*ngFor%3D%22let%20variable%20of%20color.variables%22%3E%24%7B%7Bvariable%7D%7D%3C%2Fspan%3E%0A%20%20%3C%2Fdiv%3E%0A%3C%2Farticle%3E%0A`
    },
    'async-chips': {
        title: 'Async Chips Example',
        component: AsyncChipsExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Async%20Chips%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20selector%3A%20'async-chips-example'%2C%0A%20%20templateUrl%3A%20'async-chips-example.html'%2C%0A%20%20styleUrls%3A%20%5B'async-chips-example.css'%5D%2C%0A%7D)%0Aexport%20class%20AsyncChipsExample%20%7B%0A%20%20public%20async%3A%20any%3B%0A%20%20public%20value%3A%20any%3B%0A%20%20public%20placeholder%3A%20string%20%3D%20'Select...'%3B%0A%0A%20%20constructor()%20%7B%0A%20%20%20%20const%20states%20%3D%20%5B%0A%20%20%20%20%20%20'Alabama'%2C%0A%20%20%20%20%20%20'Alaska'%2C%0A%20%20%20%20%20%20'Arizona'%2C%0A%20%20%20%20%20%20'Arkansas'%2C%0A%20%20%20%20%20%20'California'%2C%0A%20%20%20%20%20%20'Colorado'%2C%0A%20%20%20%20%20%20'Connecticut'%2C%0A%20%20%20%20%20%20'Delaware'%2C%0A%20%20%20%20%20%20'Florida'%2C%0A%20%20%20%20%20%20'Georgia'%2C%0A%20%20%20%20%20%20'Hawaii'%2C%0A%20%20%20%20%20%20'Idaho'%2C%0A%20%20%20%20%20%20'Illinois'%2C%0A%20%20%20%20%20%20'Indiana'%2C%0A%20%20%20%20%20%20'Iowa'%2C%0A%20%20%20%20%20%20'Kansas'%2C%0A%20%20%20%20%20%20'Kentucky'%2C%0A%20%20%20%20%20%20'Louisiana'%2C%0A%20%20%20%20%20%20'Maine'%2C%0A%20%20%20%20%20%20'Maryland'%2C%0A%20%20%20%20%20%20'Massachusetts'%2C%0A%20%20%20%20%20%20'Michigan'%2C%0A%20%20%20%20%20%20'Minnesota'%2C%0A%20%20%20%20%20%20'Mississippi'%2C%0A%20%20%20%20%20%20'Missouri'%2C%0A%20%20%20%20%20%20'Montana'%2C%0A%20%20%20%20%20%20'Nebraska'%2C%0A%20%20%20%20%20%20'Nevada'%2C%0A%20%20%20%20%20%20'New%20Hampshire'%2C%0A%20%20%20%20%20%20'New%20Jersey'%2C%0A%20%20%20%20%20%20'New%20Mexico'%2C%0A%20%20%20%20%20%20'New%20York'%2C%0A%20%20%20%20%20%20'North%20Dakota'%2C%0A%20%20%20%20%20%20'North%20Carolina'%2C%0A%20%20%20%20%20%20'Ohio'%2C%0A%20%20%20%20%20%20'Oklahoma'%2C%0A%20%20%20%20%20%20'Oregon'%2C%0A%20%20%20%20%20%20'Pennsylvania'%2C%0A%20%20%20%20%20%20'Rhode%20Island'%2C%0A%20%20%20%20%20%20'South%20Carolina'%2C%0A%20%20%20%20%20%20'South%20Dakota'%2C%0A%20%20%20%20%20%20'Tennessee'%2C%0A%20%20%20%20%20%20'Texas'%2C%0A%20%20%20%20%20%20'Utah'%2C%0A%20%20%20%20%20%20'Vermont'%2C%0A%20%20%20%20%20%20'Virginia'%2C%0A%20%20%20%20%20%20'Washington'%2C%0A%20%20%20%20%20%20'West%20Virginia'%2C%0A%20%20%20%20%20%20'Wisconsin'%2C%0A%20%20%20%20%20%20'Wyoming'%2C%0A%20%20%20%20%5D%3B%0A%20%20%20%20const%20abbrieviated%20%3D%20%5B%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20value%3A%20'USA'%2C%0A%20%20%20%20%20%20%20%20label%3A%20'United%20States'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20value%3A%20'GB'%2C%0A%20%20%20%20%20%20%20%20label%3A%20'Great%20Britain'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20value%3A%20'CA'%2C%0A%20%20%20%20%20%20%20%20label%3A%20'Canada'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20value%3A%20'AU'%2C%0A%20%20%20%20%20%20%20%20label%3A%20'Austrailia'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%5D%3B%0A%20%20%20%20this.async%20%3D%20%7B%0A%20%20%20%20%20%20options%3A%20()%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20return%20new%20Promise((resolve)%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%20%20setTimeout(()%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20resolve(abbrieviated)%3B%0A%20%20%20%20%20%20%20%20%20%20%7D%2C%20300)%3B%0A%20%20%20%20%20%20%20%20%7D)%3B%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20getLabels%3A%20(data)%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20return%20new%20Promise((resolve)%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%20%20setTimeout(()%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20const%20values%20%3D%20data.map((item)%20%3D%3E%20item.value)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20const%20results%20%3D%20abbrieviated.filter((item)%20%3D%3E%20values.includes(item.value))%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20resolve(results)%3B%0A%20%20%20%20%20%20%20%20%20%20%7D%2C%20300)%3B%0A%20%20%20%20%20%20%20%20%7D)%3B%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%7D%3B%0A%20%20%20%20this.value%20%3D%20%5B%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20value%3A%20'USA'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20value%3A%20'GB'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%5D%3B%0A%20%20%7D%0A%0A%20%20onChanged(event)%20%7B%0A%20%20%20%20console.log('EVENT'%2C%20event)%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cdiv%20class%3D%22selected-value%22%3ESelected%20Value%3A%20%7B%7Bvalue%7D%7D%3C%2Fdiv%3E%0A%3Cnovo-chips%20%5Bsource%5D%3D%22async%22%20%5Bplaceholder%5D%3D%22placeholder%22%20%5B(ngModel)%5D%3D%22value%22%20(changed)%3D%22onChanged(%24event)%22%3E%3C%2Fnovo-chips%3E%0A`
    },
    'basic-chips': {
        title: 'Basic Chips Example',
        component: BasicChipsExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Basic%20Chips%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20selector%3A%20'basic-chips-example'%2C%0A%20%20templateUrl%3A%20'basic-chips-example.html'%2C%0A%20%20styleUrls%3A%20%5B'basic-chips-example.css'%5D%2C%0A%7D)%0Aexport%20class%20BasicChipsExample%20%7B%0A%20%20staticDemo%20%3D%20%7B%0A%20%20%20%20options%3A%20%5B%0A%20%20%20%20%20%20'Alabama'%2C%0A%20%20%20%20%20%20'Alaska'%2C%0A%20%20%20%20%20%20'Arizona'%2C%0A%20%20%20%20%20%20'Arkansas'%2C%0A%20%20%20%20%20%20'California'%2C%0A%20%20%20%20%20%20'Colorado'%2C%0A%20%20%20%20%20%20'Connecticut'%2C%0A%20%20%20%20%20%20'Delaware'%2C%0A%20%20%20%20%20%20'Florida'%2C%0A%20%20%20%20%20%20'Georgia'%2C%0A%20%20%20%20%20%20'Hawaii'%2C%0A%20%20%20%20%20%20'Idaho'%2C%0A%20%20%20%20%20%20'Illinois'%2C%0A%20%20%20%20%20%20'Indiana'%2C%0A%20%20%20%20%20%20'Iowa'%2C%0A%20%20%20%20%20%20'Kansas'%2C%0A%20%20%20%20%20%20'Kentucky'%2C%0A%20%20%20%20%20%20'Louisiana'%2C%0A%20%20%20%20%20%20'Maine'%2C%0A%20%20%20%20%20%20'Maryland'%2C%0A%20%20%20%20%20%20'Massachusetts'%2C%0A%20%20%20%20%20%20'Michigan'%2C%0A%20%20%20%20%20%20'Minnesota'%2C%0A%20%20%20%20%20%20'Mississippi'%2C%0A%20%20%20%20%20%20'Missouri'%2C%0A%20%20%20%20%20%20'Montana'%2C%0A%20%20%20%20%20%20'Nebraska'%2C%0A%20%20%20%20%20%20'Nevada'%2C%0A%20%20%20%20%20%20'New%20Hampshire'%2C%0A%20%20%20%20%20%20'New%20Jersey'%2C%0A%20%20%20%20%20%20'New%20Mexico'%2C%0A%20%20%20%20%20%20'New%20York'%2C%0A%20%20%20%20%20%20'North%20Dakota'%2C%0A%20%20%20%20%20%20'North%20Carolina'%2C%0A%20%20%20%20%20%20'Ohio'%2C%0A%20%20%20%20%20%20'Oklahoma'%2C%0A%20%20%20%20%20%20'Oregon'%2C%0A%20%20%20%20%20%20'Pennsylvania'%2C%0A%20%20%20%20%20%20'Rhode%20Island'%2C%0A%20%20%20%20%20%20'South%20Carolina'%2C%0A%20%20%20%20%20%20'South%20Dakota'%2C%0A%20%20%20%20%20%20'Tennessee'%2C%0A%20%20%20%20%20%20'Texas'%2C%0A%20%20%20%20%20%20'Utah'%2C%0A%20%20%20%20%20%20'Vermont'%2C%0A%20%20%20%20%20%20'Virginia'%2C%0A%20%20%20%20%20%20'Washington'%2C%0A%20%20%20%20%20%20'West%20Virginia'%2C%0A%20%20%20%20%20%20'Wisconsin'%2C%0A%20%20%20%20%20%20'Wyoming'%2C%0A%20%20%20%20%5D%2C%0A%20%20%7D%3B%0A%20%20placeholder%20%3D%20'Select...'%3B%0A%20%20value%20%3D%20%5B'Alabama'%5D%3B%0A%0A%20%20onChanged(event)%20%7B%0A%20%20%20%20console.log('EVENT'%2C%20event)%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cdiv%20class%3D%22selected-value%22%3ESelected%20Value%3A%20%7B%7Bvalue%7D%7D%3C%2Fdiv%3E%0A%3Cnovo-chips%20%5Bsource%5D%3D%22staticDemo%22%20%5Bplaceholder%5D%3D%22placeholder%22%20%5B(ngModel)%5D%3D%22value%22%20(changed)%3D%22onChanged(%24event)%22%3E%3C%2Fnovo-chips%3E%0A`
    },
    'close-on-select-chips': {
        title: 'Close On Select Chips Example',
        component: CloseOnSelectChipsExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Close%20On%20Select%20Chips%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20selector%3A%20'close-on-select-chips-example'%2C%0A%20%20templateUrl%3A%20'close-on-select-chips-example.html'%2C%0A%20%20styleUrls%3A%20%5B'close-on-select-chips-example.css'%5D%2C%0A%7D)%0Aexport%20class%20CloseOnSelectChipsExample%20%7B%0A%20%20public%20formatted%3A%20any%3B%0A%20%20public%20placeholder%3A%20string%20%3D%20'Select...'%3B%0A%20%20public%20value%3A%20any%3B%0A%0A%20%20constructor()%20%7B%0A%20%20%20%20const%20collaborators%20%3D%20%5B%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20id%3A%201%2C%0A%20%20%20%20%20%20%20%20firstName%3A%20'Brian'%2C%0A%20%20%20%20%20%20%20%20lastName%3A%20'Kimball'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20id%3A%202%2C%0A%20%20%20%20%20%20%20%20firstName%3A%20'Josh'%2C%0A%20%20%20%20%20%20%20%20lastName%3A%20'Godi'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20id%3A%203%2C%0A%20%20%20%20%20%20%20%20firstName%3A%20'Alec'%2C%0A%20%20%20%20%20%20%20%20lastName%3A%20'Sibilia'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20id%3A%204%2C%0A%20%20%20%20%20%20%20%20firstName%3A%20'Kameron'%2C%0A%20%20%20%20%20%20%20%20lastName%3A%20'Sween'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%5D%3B%0A%20%20%20%20this.formatted%20%3D%20%7B%0A%20%20%20%20%20%20format%3A%20'%24firstName%20%24lastName'%2C%0A%20%20%20%20%20%20options%3A%20collaborators%2C%0A%20%20%20%20%7D%3B%0A%20%20%7D%0A%0A%20%20onChanged(event)%20%7B%0A%20%20%20%20console.log('EVENT'%2C%20event)%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cdiv%20class%3D%22selected-value%22%3ESelected%20Value%3A%20%7B%7Bvalue%7D%7D%3C%2Fdiv%3E%0A%3Cnovo-chips%20%5BcloseOnSelect%5D%3D%22true%22%20%5Bsource%5D%3D%22formatted%22%20%5Bplaceholder%5D%3D%22placeholder%22%20%5B(ngModel)%5D%3D%22value%22%20(changed)%3D%22onChanged(%24event)%22%3E%3C%2Fnovo-chips%3E%0A`
    },
    'formatted-chips': {
        title: 'Formatted Chips Example',
        component: FormattedChipsExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Formatted%20Chips%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20selector%3A%20'formatted-chips-example'%2C%0A%20%20templateUrl%3A%20'formatted-chips-example.html'%2C%0A%20%20styleUrls%3A%20%5B'formatted-chips-example.css'%5D%2C%0A%7D)%0Aexport%20class%20FormattedChipsExample%20%7B%0A%20%20public%20formatted%3A%20any%3B%0A%20%20public%20placeholder%3A%20string%20%3D%20'Select...'%3B%0A%20%20public%20value%3A%20any%3B%0A%0A%20%20constructor()%20%7B%0A%20%20%20%20const%20collaborators%20%3D%20%5B%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20id%3A%201%2C%0A%20%20%20%20%20%20%20%20firstName%3A%20'Brian'%2C%0A%20%20%20%20%20%20%20%20lastName%3A%20'Kimball'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20id%3A%202%2C%0A%20%20%20%20%20%20%20%20firstName%3A%20'Josh'%2C%0A%20%20%20%20%20%20%20%20lastName%3A%20'Godi'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20id%3A%203%2C%0A%20%20%20%20%20%20%20%20firstName%3A%20'Alec'%2C%0A%20%20%20%20%20%20%20%20lastName%3A%20'Sibilia'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20id%3A%204%2C%0A%20%20%20%20%20%20%20%20firstName%3A%20'Kameron'%2C%0A%20%20%20%20%20%20%20%20lastName%3A%20'Sween'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%5D%3B%0A%20%20%20%20this.formatted%20%3D%20%7B%0A%20%20%20%20%20%20format%3A%20'%24firstName%20%24lastName'%2C%0A%20%20%20%20%20%20options%3A%20collaborators%2C%0A%20%20%20%20%7D%3B%0A%20%20%7D%0A%0A%20%20onChanged(event)%20%7B%0A%20%20%20%20console.log('EVENT'%2C%20event)%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cdiv%20class%3D%22selected-value%22%3ESelected%20Value%3A%20%7B%7Bvalue%7D%7D%3C%2Fdiv%3E%0A%3Cnovo-chips%20%5Bsource%5D%3D%22formatted%22%20%5Bplaceholder%5D%3D%22placeholder%22%20%5B(ngModel)%5D%3D%22value%22%20(changed)%3D%22onChanged(%24event)%22%3E%3C%2Fnovo-chips%3E%0A`
    },
    'grouped-multi-picker': {
        title: 'Grouped Multi Picker Example',
        component: GroupedMultiPickerExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0Aimport%20%7B%20GroupedMultiPickerResults%20%7D%20from%20'novo-elements'%3B%0A%0A%2F**%0A%20*%20%40title%20Grouped%20Multi%20Picker%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20selector%3A%20'grouped-multi-picker-example'%2C%0A%20%20templateUrl%3A%20'grouped-multi-picker-example.html'%2C%0A%20%20styleUrls%3A%20%5B'grouped-multi-picker-example.css'%5D%2C%0A%7D)%0Aexport%20class%20GroupedMultiPickerExample%20%7B%0A%20%20public%20placeholder%3A%20string%20%3D%20'Select...'%3B%0A%20%20public%20groupedMultiPicker1%3A%20any%3B%0A%20%20public%20groupedMultiPicker2%3A%20any%3B%0A%20%20public%20groupedMultiPicker3%3A%20any%3B%0A%20%20public%20groupedMultiPicker1Value%3A%20any%3B%0A%20%20public%20groupedMultiPicker2Value%3A%20any%3B%0A%20%20public%20groupedMultiPicker3Value%3A%20any%3B%0A%0A%20%20constructor()%20%7B%0A%20%20%20%20this.setupGroupedMultiPickerDemo()%3B%0A%20%20%7D%0A%0A%20%20setupGroupedMultiPickerDemo()%20%7B%0A%20%20%20%20const%20categoryMap%20%3D%20new%20Map%3Cstring%2C%20%7B%20value%3A%20string%3B%20label%3A%20string%3B%20items%3A%20%7B%20value%3A%20string%3B%20label%3A%20string%20%7D%5B%5D%20%7D%3E()%3B%0A%20%20%20%20for%20(let%20i%20%3D%200%3B%20i%20%3C%2010%3B%20i%2B%2B)%20%7B%0A%20%20%20%20%20%20const%20items%20%3D%20%5B%5D%3B%0A%20%20%20%20%20%20for%20(let%20j%20%3D%200%3B%20j%20%3C%2010%3B%20j%2B%2B)%20%7B%0A%20%20%20%20%20%20%20%20items.push(%7B%20value%3A%20%60%24%7Bi%7D-%24%7Bj%7D%60%2C%20label%3A%20%60Category%20%24%7Bi%7D%20-%20Item%20%24%7Bj%7D%60%20%7D)%3B%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20categoryMap.set(%60%24%7Bi%7D%60%2C%20%7B%20value%3A%20%60%24%7Bi%7D%60%2C%20label%3A%20%60Category%20%24%7Bi%7D%60%2C%20items%20%7D)%3B%0A%20%20%20%20%7D%0A%20%20%20%20this.groupedMultiPicker1%20%3D%20%7B%0A%20%20%20%20%20%20categoryMap%2C%0A%20%20%20%20%20%20resultsTemplate%3A%20GroupedMultiPickerResults%2C%0A%20%20%20%20%20%20displayAll%3A%20true%2C%0A%20%20%20%20%7D%3B%0A%20%20%20%20this.groupedMultiPicker2%20%3D%20%7B%0A%20%20%20%20%20%20categoryMap%2C%0A%20%20%20%20%20%20resultsTemplate%3A%20GroupedMultiPickerResults%2C%0A%20%20%20%20%7D%3B%0A%20%20%20%20this.groupedMultiPicker3%20%3D%20%7B%0A%20%20%20%20%20%20categories%3A%20%5B%0A%20%20%20%20%20%20%20%20%7B%20value%3A%20'C1'%2C%20label%3A%20'Category%201'%20%7D%2C%0A%20%20%20%20%20%20%20%20%7B%20value%3A%20'C2'%2C%20label%3A%20'Category%202'%20%7D%2C%0A%20%20%20%20%20%20%20%20%7B%20value%3A%20'C3'%2C%20label%3A%20'Category%203'%20%7D%2C%0A%20%20%20%20%20%20%20%20%7B%20value%3A%20'C4'%2C%20label%3A%20'Category%204'%20%7D%2C%0A%20%20%20%20%20%20%20%20%7B%20value%3A%20'C5'%2C%20label%3A%20'Category%205'%20%7D%2C%0A%20%20%20%20%20%20%5D%2C%0A%20%20%20%20%20%20getItemsForCategoryAsync%3A%20(category)%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20return%20new%20Promise((resolve)%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%20%20setTimeout(()%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20resolve(%5B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7B%20value%3A%20'A1'%2C%20label%3A%20'Async%201'%20%7D%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7B%20value%3A%20'A2'%2C%20label%3A%20'Async%202'%20%7D%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7B%20value%3A%20'A3'%2C%20label%3A%20'Async%203'%20%7D%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7B%20value%3A%20'A4'%2C%20label%3A%20'Async%204'%20%7D%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7B%20value%3A%20'A5'%2C%20label%3A%20'Async%205'%20%7D%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%5D)%3B%0A%20%20%20%20%20%20%20%20%20%20%7D%2C%201000)%3B%0A%20%20%20%20%20%20%20%20%7D)%3B%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20resultsTemplate%3A%20GroupedMultiPickerResults%2C%0A%20%20%20%20%7D%3B%0A%20%20%7D%0A%0A%20%20onChanged(event)%20%7B%0A%20%20%20%20console.log('EVENT'%2C%20event)%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Ch6%3EBasic%20Static%20Example%3C%2Fh6%3E%0A%3Cp%3EFully%20static%20data%2C%20optional%20%22all%22%20category%3C%2Fp%3E%0A%3Cdiv%20class%3D%22selected-value%22%3ESelected%20Value%3A%20%7B%7B%20groupedMultiPicker1Value%20%7D%7D%3C%2Fdiv%3E%0A%3Cnovo-chips%20%5Bsource%5D%3D%22groupedMultiPicker1%22%20%5Bplaceholder%5D%3D%22placeholder%22%20%5B(ngModel)%5D%3D%22groupedMultiPicker1Value%22%20(changed)%3D%22onChanged(%24event)%22%3E%3C%2Fnovo-chips%3E%0A%0A%3Cbr%2F%3E%0A%3Cbr%2F%3E%0A%0A%3Ch6%3ECustom%20Static%20Example%3C%2Fh6%3E%0A%3Cp%3EFully%20static%20data%2C%20all%20category%20turned%20off%3C%2Fp%3E%0A%3Cdiv%20class%3D%22selected-value%22%3ESelected%20Value%3A%20%7B%7B%20groupedMultiPicker2Value%20%7D%7D%3C%2Fdiv%3E%0A%3Cnovo-chips%20%5Bsource%5D%3D%22groupedMultiPicker2%22%20%5Bplaceholder%5D%3D%22placeholder%22%20%5B(ngModel)%5D%3D%22groupedMultiPicker2Value%22%20(changed)%3D%22onChanged(%24event)%22%3E%3C%2Fnovo-chips%3E%0A%0A%3Cbr%2F%3E%0A%3Cbr%2F%3E%0A%0A%3Ch6%3EBasic%20Async%20Example%3C%2Fh6%3E%0A%3Cp%3ECategory%20list%20is%20static%20(always%20has%20to%20be)%20with%20the%20items%20fetched%20via%20async%20call%3C%2Fp%3E%0A%3Cdiv%20class%3D%22selected-value%22%3ESelected%20Value%3A%20%7B%7B%20groupedMultiPicker3Value%20%7D%7D%3C%2Fdiv%3E%0A%3Cnovo-chips%20%5Bsource%5D%3D%22groupedMultiPicker3%22%20%5Bplaceholder%5D%3D%22placeholder%22%20%5B(ngModel)%5D%3D%22groupedMultiPicker3Value%22%20(changed)%3D%22onChanged(%24event)%22%3E%3C%2Fnovo-chips%3E%0A`
    },
    'row-chips': {
        title: 'Row Chips Example',
        component: RowChipsExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Row%20Chips%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20selector%3A%20'row-chips-example'%2C%0A%20%20templateUrl%3A%20'row-chips-example.html'%2C%0A%20%20styleUrls%3A%20%5B'row-chips-example.css'%5D%2C%0A%7D)%0Aexport%20class%20RowChipsExample%20%7B%0A%20%20public%20placeholder%3A%20string%20%3D%20'Select...'%3B%0A%20%20public%20value%3A%20any%3B%0A%20%20public%20rowDemo%3A%20any%3B%0A%20%20public%20rowValue%3A%20any%3B%0A%0A%20%20constructor()%20%7B%0A%20%20%20%20const%20collaborators%20%3D%20%5B%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20id%3A%201%2C%0A%20%20%20%20%20%20%20%20firstName%3A%20'Brian'%2C%0A%20%20%20%20%20%20%20%20lastName%3A%20'Kimball'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20id%3A%202%2C%0A%20%20%20%20%20%20%20%20firstName%3A%20'Josh'%2C%0A%20%20%20%20%20%20%20%20lastName%3A%20'Godi'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20id%3A%203%2C%0A%20%20%20%20%20%20%20%20firstName%3A%20'Alec'%2C%0A%20%20%20%20%20%20%20%20lastName%3A%20'Sibilia'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20id%3A%204%2C%0A%20%20%20%20%20%20%20%20firstName%3A%20'Kameron'%2C%0A%20%20%20%20%20%20%20%20lastName%3A%20'Sween'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%5D%3B%0A%20%20%20%20this.rowValue%20%3D%20%5B%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20id%3A%201%2C%0A%20%20%20%20%20%20%20%20firstName%3A%20'Brian'%2C%0A%20%20%20%20%20%20%20%20lastName%3A%20'Kimball'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%5D%3B%0A%20%20%20%20this.rowDemo%20%3D%20%7B%0A%20%20%20%20%20%20format%3A%20'%24firstName%20%24lastName'%2C%0A%20%20%20%20%20%20options%3A%20collaborators%2C%0A%20%20%20%20%20%20columns%3A%20%5B%0A%20%20%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20label%3A%20'Name'%2C%0A%20%20%20%20%20%20%20%20%20%20data%3A%20(item%3A%20any)%3A%20string%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20item%5B'label'%5D%3B%0A%20%20%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20label%3A%20'Id'%2C%0A%20%20%20%20%20%20%20%20%20%20data%3A%20(item%3A%20any)%3A%20string%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20item.value%5B'id'%5D%3B%0A%20%20%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%5D%2C%0A%20%20%20%20%7D%3B%0A%20%20%7D%0A%0A%20%20onChanged(event)%20%7B%0A%20%20%20%20console.log('EVENT'%2C%20event)%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cdiv%20class%3D%22selected-value%22%3ESelected%20Value%3A%20%7B%7BrowValue%20%7C%20json%7D%7D%3C%2Fdiv%3E%0A%3Cnovo-row-chips%20%5Bsource%5D%3D%22rowDemo%22%20%5Bplaceholder%5D%3D%22placeholder%22%20%5B(ngModel)%5D%3D%22rowValue%22%20(changed)%3D%22onChanged(%24event)%22%3E%3C%2Fnovo-row-chips%3E%0A`
    },
    'date-picker': {
        title: 'Date Example',
        component: DatePickerExample,
        tsSource: `import%20%7B%20Component%2C%20LOCALE_ID%20%7D%20from%20'%40angular%2Fcore'%3B%0Aimport%20%7B%20NovoLabelService%20%7D%20from%20'novo-elements'%3B%0A%0Aexport%20class%20ExtendedLabelService%20extends%20NovoLabelService%20%7B%0A%20%20dateFormat%20%3D%20'dd%2Fmm%2Fyyyy'%3B%0A%20%20dateFormatPlaceholder%20%3D%20'DD%2FMM%2FYYYY'%3B%0A%7D%0A%0A%2F**%0A%20*%20%40title%20Date%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20selector%3A%20'date-picker-example'%2C%0A%20%20templateUrl%3A%20'date-picker-example.html'%2C%0A%20%20styleUrls%3A%20%5B'date-picker-example.css'%5D%2C%0A%7D)%0Aexport%20class%20DatePickerExample%20%7B%0A%20%20dateOne%3A%20Date%20%3D%20new%20Date()%3B%0A%20%20dateTwo%3A%20Date%20%3D%20new%20Date()%3B%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cdiv%20class%3D%22date-picker-demo-side-by-side%22%3E%0A%20%20%20%20%3Cp%3E%0A%20%20%20%20%20%20%20%20%3Clabel%3EValue%20One%3C%2Flabel%3E%20%7B%7B(dateOne%20%7C%20date)%20%7C%7C%20'N%2FA'%7D%7D%0A%20%20%20%20%20%20%20%20%3Clabel%3EValue%20Two%3C%2Flabel%3E%20%7B%7B(dateTwo%20%7C%20date)%20%7C%7C%20'N%2FA'%7D%7D%0A%20%20%20%20%3C%2Fp%3E%0A%20%20%20%20%3Cnovo-date-picker%20%5B(ngModel)%5D%3D%22dateOne%22%3E%3C%2Fnovo-date-picker%3E%0A%20%20%20%20%3Cdiv%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-date-picker-input%20%5B(ngModel)%5D%3D%22dateTwo%22%20format%3D%22mm%2Fdd%2Fyyyy%22%3E%3C%2Fnovo-date-picker-input%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-date-picker-input%20%5B(ngModel)%5D%3D%22dateTwo%22%20format%3D%22dd%2Fmm%2Fyyyy%22%3E%3C%2Fnovo-date-picker-input%3E%0A%20%20%20%20%3C%2Fdiv%3E%0A%3C%2Fdiv%3E%0A`
    },
    'date-range': {
        title: 'Date Range Example',
        component: DateRangeExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Date%20Range%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20selector%3A%20'date-range-example'%2C%0A%20%20templateUrl%3A%20'date-range-example.html'%2C%0A%20%20styleUrls%3A%20%5B'date-range-example.css'%5D%2C%0A%7D)%0Aexport%20class%20DateRangeExample%20%7B%0A%20%20rangeOne%3A%20any%20%3D%20%7B%0A%20%20%20%20startDate%3A%20null%2C%0A%20%20%20%20endDate%3A%20null%2C%0A%20%20%7D%3B%0A%20%20rangeTwo%3A%20any%20%3D%20%7B%0A%20%20%20%20startDate%3A%20null%2C%0A%20%20%20%20endDate%3A%20null%2C%0A%20%20%7D%3B%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cdiv%20class%3D%22date-picker-demo-side-by-side%22%3E%0A%20%20%20%20%3Cp%3E%0A%20%20%20%20%20%20%20%20%3Clabel%3EStart%20date%3C%2Flabel%3E%0A%20%20%20%20%20%20%20%20%7B%7B(rangeOne%3F.startDate%20%7C%20date)%20%7C%7C%20'N%2FA'%7D%7D%0A%20%20%20%20%20%20%20%20%3Cbr%2F%3E%20%7B%7B(rangeTwo%3F.startDate%20%7C%20date)%20%7C%7C%20'N%2FA'%7D%7D%0A%0A%20%20%20%20%20%20%20%20%3Clabel%3EEnd%20date%3C%2Flabel%3E%0A%20%20%20%20%20%20%20%20%7B%7B(rangeOne%3F.endDate%20%7C%20date)%20%7C%7C%20'N%2FA'%7D%7D%0A%20%20%20%20%20%20%20%20%3Cbr%2F%3E%20%7B%7B(rangeTwo%3F.endDate%20%7C%20date)%20%7C%7C%20'N%2FA'%7D%7D%0A%20%20%20%20%3C%2Fp%3E%0A%20%20%20%20%3Cnovo-date-picker%20%5B(ngModel)%5D%3D%22rangeOne%22%20range%3D%22true%22%3E%3C%2Fnovo-date-picker%3E%0A%20%20%20%20%3Cnovo-date-picker%20%5B(ngModel)%5D%3D%22rangeTwo%22%20range%3D%22true%22%20weekRangeSelect%3D%22true%22%20weekStart%3D%221%22%3E%3C%2Fnovo-date-picker%3E%0A%3C%2Fdiv%3E%0A`
    },
    'date-time-input': {
        title: 'Date Time Input Example',
        component: DateTimeInputExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Date%20Time%20Input%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20selector%3A%20'date-time-input-example'%2C%0A%20%20templateUrl%3A%20'date-time-input-example.html'%2C%0A%20%20styleUrls%3A%20%5B'date-time-input-example.css'%5D%2C%0A%7D)%0Aexport%20class%20DateTimeInputExample%20%7B%0A%20%20dateTimeInput%3A%20Date%20%3D%20new%20Date('08%2F01%2F1983%2012%3A57%20PM')%3B%0A%20%20dateTimeInput2%3A%20Date%20%3D%20new%20Date('08%2F02%2F1984%2012%3A57%20PM')%3B%0A%20%20dateTimeInput3%3A%20Date%20%3D%20new%20Date('08%2F03%2F1985%2012%3A57%20PM')%3B%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cdiv%20class%3D%22date-picker-demo-side-by-side%22%3E%0A%20%20%20%20%3Cp%3E%0A%20%20%20%20%20%20%20%20%3Clabel%3EDate-Time%3C%2Flabel%3E%20%7B%7B(dateTimeInput%20%7C%20date%3A'medium')%20%7C%7C%20'N%2FA'%7D%7D%0A%20%20%20%20%20%20%20%20%3Clabel%3EDate-Time%202%3C%2Flabel%3E%20%7B%7B(dateTimeInput2%20%7C%20date%3A'medium')%20%7C%7C%20'N%2FA'%7D%7D%0A%20%20%20%20%3C%2Fp%3E%0A%20%20%20%20%3Cdiv%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-date-time-picker-input%20%5B(ngModel)%5D%3D%22dateTimeInput%22%3E%3C%2Fnovo-date-time-picker-input%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-date-time-picker-input%20%5B(ngModel)%5D%3D%22dateTimeInput2%22%20%5Bmilitary%5D%3D%22true%22%3E%3C%2Fnovo-date-time-picker-input%3E%0A%20%20%20%20%3C%2Fdiv%3E%0A%20%20%20%20%3Cnovo-date-time-picker%20%5B(ngModel)%5D%3D%22dateTimeInput3%22%3E%3C%2Fnovo-date-time-picker%3E%20%0A%3C%2Fdiv%3E%0A`
    },
    'date-time': {
        title: 'Date Time Example',
        component: DateTimeExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Date%20Time%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20selector%3A%20'date-time-example'%2C%0A%20%20templateUrl%3A%20'date-time-example.html'%2C%0A%20%20styleUrls%3A%20%5B'date-time-example.css'%5D%2C%0A%7D)%0Aexport%20class%20DateTimeExample%20%7B%0A%20%20dateTime%3A%20Date%20%3D%20new%20Date('12%2F04%2F1987')%3B%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cdiv%20class%3D%22date-picker-demo-side-by-side%22%3E%0A%20%20%20%20%3Cp%3E%0A%20%20%20%20%20%20%20%20%3Clabel%3EDate-Time%3C%2Flabel%3E%20%7B%7B(dateTime%20%7C%20date%3A'medium')%20%7C%7C%20'N%2FA'%7D%7D%0A%20%20%20%20%3C%2Fp%3E%0A%20%20%20%20%3Cnovo-date-time-picker%20%5B(ngModel)%5D%3D%22dateTime%22%3E%3C%2Fnovo-date-time-picker%3E%0A%20%20%20%20%3Cnovo-date-time-picker%20%5B(ngModel)%5D%3D%22dateTime%22%20military%3D%22true%22%3E%3C%2Fnovo-date-time-picker%3E%0A%3C%2Fdiv%3E%0A`
    },
    'time-picker': {
        title: 'Time Picker Example',
        component: TimePickerExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Time%20Picker%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20selector%3A%20'time-picker-example'%2C%0A%20%20templateUrl%3A%20'time-picker-example.html'%2C%0A%20%20styleUrls%3A%20%5B'time-picker-example.css'%5D%2C%0A%7D)%0Aexport%20class%20TimePickerExample%20%7B%0A%20%20time%3A%20Date%20%3D%20new%20Date()%3B%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cdiv%20class%3D%22date-picker-demo-side-by-side%22%3E%0A%20%20%20%20%3Cp%3E%0A%20%20%20%20%20%20%20%20%3Clabel%3EValue%3C%2Flabel%3E%0A%20%20%20%20%20%20%20%20%7B%7B(time%20%7C%20date%3A'mediumTime')%20%7C%7C%20'N%2FA'%7D%7D%0A%20%20%20%20%20%20%20%20%3Cnovo-time-picker-input%20%5B(ngModel)%5D%3D%22time%22%3E%3C%2Fnovo-time-picker-input%3E%0A%20%20%20%20%3C%2Fp%3E%0A%20%20%20%20%3Cnovo-time-picker%20%5B(ngModel)%5D%3D%22time%22%20analog%3D%22true%22%3E%3C%2Fnovo-time-picker%3E%0A%20%20%20%20%3Cnovo-time-picker%20%5B(ngModel)%5D%3D%22time%22%20military%3D%22true%22%20analog%3D%22true%22%3E%3C%2Fnovo-time-picker%3E%0A%3C%2Fdiv%3E%0A`
    },
    'week-start': {
        title: 'Week Start Example',
        component: WeekStartExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Week%20Start%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20selector%3A%20'week-start-example'%2C%0A%20%20templateUrl%3A%20'week-start-example.html'%2C%0A%20%20styleUrls%3A%20%5B'week-start-example.css'%5D%2C%0A%7D)%0Aexport%20class%20WeekStartExample%20%7B%0A%20%20weekStartDate%3A%20Date%20%3D%20new%20Date()%3B%0A%20%20weekStart%3A%20number%20%3D%200%3B%0A%0A%20%20setWeekStart(num%3A%20number)%3A%20void%20%7B%0A%20%20%20%20this.weekStart%20%3D%20num%3B%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cbutton%20%5Btheme%5D%3D%22weekStart%20%3D%3D%3D%200%20%3F%20'primary'%20%3A%20'secondary'%22%20(click)%3D%22setWeekStart(0)%22%3ESunday%3C%2Fbutton%3E%0A%3Cbutton%20%5Btheme%5D%3D%22weekStart%20%3D%3D%3D%201%20%3F%20'primary'%20%3A%20'secondary'%22%20(click)%3D%22setWeekStart(1)%22%3EMonday%3C%2Fbutton%3E%0A%3Cbutton%20%5Btheme%5D%3D%22weekStart%20%3D%3D%3D%202%20%3F%20'primary'%20%3A%20'secondary'%22%20(click)%3D%22setWeekStart(2)%22%3ETuesday%3C%2Fbutton%3E%0A%3Cbutton%20%5Btheme%5D%3D%22weekStart%20%3D%3D%3D%203%20%3F%20'primary'%20%3A%20'secondary'%22%20(click)%3D%22setWeekStart(3)%22%3EWednesday%3C%2Fbutton%3E%0A%3Cbutton%20%5Btheme%5D%3D%22weekStart%20%3D%3D%3D%204%20%3F%20'primary'%20%3A%20'secondary'%22%20(click)%3D%22setWeekStart(4)%22%3EThursday%3C%2Fbutton%3E%0A%3Cbutton%20%5Btheme%5D%3D%22weekStart%20%3D%3D%3D%205%20%3F%20'primary'%20%3A%20'secondary'%22%20(click)%3D%22setWeekStart(5)%22%3EFriday%3C%2Fbutton%3E%0A%3Cbutton%20%5Btheme%5D%3D%22weekStart%20%3D%3D%3D%206%20%3F%20'primary'%20%3A%20'secondary'%22%20(click)%3D%22setWeekStart(6)%22%3ESaturday%3C%2Fbutton%3E%0A%3Cbr%2F%3E%0A%3Cbr%2F%3E%0A%3Cdiv%20class%3D%22date-picker-demo-side-by-side%22%3E%0A%20%20%20%20%3Cp%3E%0A%20%20%20%20%20%20%20%20%3Clabel%3EValue%3C%2Flabel%3E%20%7B%7B(weekStartDate%20%7C%20date)%20%7C%7C%20'N%2FA'%7D%7D%0A%20%20%20%20%3C%2Fp%3E%0A%20%20%20%20%3Cnovo-date-picker%20%5B(ngModel)%5D%3D%22weekStartDate%22%20%5BweekStart%5D%3D%22weekStart%22%3E%3C%2Fnovo-date-picker%3E%0A%3C%2Fdiv%3E%0A`
    },
    'basic-editor': {
        title: 'Basic Editor Example',
        component: BasicEditorExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Basic%20Editor%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20selector%3A%20'basic-editor-example'%2C%0A%20%20templateUrl%3A%20'basic-editor-example.html'%2C%0A%20%20styleUrls%3A%20%5B'basic-editor-example.css'%5D%2C%0A%7D)%0Aexport%20class%20BasicEditorExample%20%7B%0A%20%20public%20editorValue%3A%20string%20%3D%20'%3Cp%3EI%20AM%20A%20PRE-RENDERED%20VALUE%3C%2Fp%3E%3Ch1%3ETEST%3C%2Fh1%3E'%3B%0A%0A%20%20insertText(editor)%20%7B%0A%20%20%20%20editor.insertText('Hello%20World')%3B%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cnovo-editor%20%5Bname%5D%3D%22'demoEditor'%22%20%5B(ngModel)%5D%3D%22editorValue%22%20%23editor%3E%3C%2Fnovo-editor%3E%0A%0A%3Cbutton%20theme%3D%22primary%22%20(click)%3D%22insertText(editor)%22%3EInsert%20%22Hello%20World%22%20at%20Cursor%3C%2Fbutton%3E%0A%0A%3Cp%3EValue%3A%3C%2Fp%3E%0A%3Cp%20%5BinnerHtml%5D%3D%22editorValue%22%3E%3C%2Fp%3E%0A%0A%3Cp%3EHTML%3A%3C%2Fp%3E%0A%3Cpre%3E%3Ccode%3E%7B%7BeditorValue%7D%7D%3C%2Fcode%3E%3C%2Fpre%3E%0A`
    },
    'minimal-editor': {
        title: 'Minimal Editor Example',
        component: MinimalEditorExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Minimal%20Editor%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20selector%3A%20'minimal-editor-example'%2C%0A%20%20templateUrl%3A%20'minimal-editor-example.html'%2C%0A%20%20styleUrls%3A%20%5B'minimal-editor-example.css'%5D%2C%0A%7D)%0Aexport%20class%20MinimalEditorExample%20%7B%0A%20%20public%20editorValue%3A%20string%20%3D%20'%3Cp%3EI%20AM%20A%20PRE-RENDERED%20VALUE%3C%2Fp%3E%3Ch1%3ETEST%3C%2Fh1%3E'%3B%0A%0A%20%20insertText(editor)%20%7B%0A%20%20%20%20editor.insertText('Hello%20World')%3B%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cnovo-editor%20%5Bname%5D%3D%22'demoEditor'%22%20%5B(ngModel)%5D%3D%22editorValue%22%20%5Bminimal%5D%3D%22true%22%20%23editor%3E%3C%2Fnovo-editor%3E%0A%0A%3Cbutton%20theme%3D%22primary%22%20(click)%3D%22insertText(editor)%22%3EInsert%20%22Hello%20World%22%20at%20Cursor%3C%2Fbutton%3E%0A%0A%3Cp%3EValue%3A%3C%2Fp%3E%0A%3Cp%20%5BinnerHtml%5D%3D%22editorValue%22%3E%3C%2Fp%3E%0A%0A%3Cp%3EHTML%3A%3C%2Fp%3E%0A%3Cpre%3E%3Ccode%3E%7B%7BeditorValue%7D%7D%3C%2Fcode%3E%3C%2Fpre%3E%0A`
    },
    'custom-template': {
        title: 'Custom Template Example',
        component: CustomTemplateExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0Aimport%20%7B%20FormArray%20%7D%20from%20'%40angular%2Fforms'%3B%0Aimport%20%7B%0A%20%20FormUtils%2C%0A%20%20TextBoxControl%2C%0A%20%20CheckboxControl%2C%0A%20%20NovoFormGroup%2C%0A%20%20BaseControl%2C%0A%20%20NovoControlGroupAddConfig%2C%0A%20%20ReadOnlyControl%2C%0A%20%20SelectControl%2C%0A%7D%20from%20'novo-elements'%3B%0A%0A%2F**%0A%20*%20%40title%20Custom%20Template%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20selector%3A%20'custom-template-example'%2C%0A%20%20templateUrl%3A%20'custom-template-example.html'%2C%0A%20%20styleUrls%3A%20%5B'custom-template-example.css'%5D%2C%0A%7D)%0Aexport%20class%20CustomTemplateExample%20%7B%0A%20%20public%20formGroup%3A%20NovoFormGroup%3B%0A%20%20public%20controls%3A%20BaseControl%5B%5D%20%3D%20%5B%5D%3B%0A%20%20public%20initialValue%3A%20%7B%7D%5B%5D%20%3D%20%5B%5D%3B%0A%20%20public%20initValue%3A%20%7B%7D%5B%5D%20%3D%20%5B%7B%20text%3A%20'TEXT'%2C%20percentage%3A%2012%2C%20checkbox%3A%20true%2C%20test4%3A%20'TEST'%20%7D%5D%3B%0A%0A%20%20public%20simpleAddConfig%3A%20NovoControlGroupAddConfig%20%3D%20%7B%0A%20%20%20%20label%3A%20'Add'%2C%0A%20%20%7D%3B%0A%20%20public%20anotherAddConfig%3A%20NovoControlGroupAddConfig%20%3D%20%7B%0A%20%20%20%20label%3A%20'Add%20a%20new%20fancy%20thing!'%2C%0A%20%20%7D%3B%0A%0A%20%20public%20emptyMessage%3A%20string%20%3D%20'There%20are%20no%20items...'%3B%0A%20%20public%20canEditFunction%3A%20Function%3B%0A%20%20public%20canRemoveFunction%3A%20Function%3B%0A%0A%20%20constructor(private%20formUtils%3A%20FormUtils)%20%7B%0A%20%20%20%20%2F%2F%20Grouped%20form%20demo%0A%20%20%20%20this.setupGroupedFormDemo()%3B%0A%20%20%20%20%2F%2F%20Setup%20function%0A%20%20%20%20this.canEditFunction%20%3D%20this.canEdit.bind(this)%3B%0A%20%20%20%20this.canRemoveFunction%20%3D%20this.canRemove.bind(this)%3B%0A%20%20%7D%0A%0A%20%20public%20onRemove(value%3A%20any)%20%7B%0A%20%20%20%20console.log('REMOVING'%2C%20value)%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%7D%0A%0A%20%20public%20onEdit(value%3A%20any)%20%7B%0A%20%20%20%20console.log('EDITING'%2C%20value)%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%7D%0A%0A%20%20public%20canEdit(value%3A%20any%2C%20index%3A%20number)%20%7B%0A%20%20%20%20console.log('canEdit'%2C%20value%2C%20index)%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%20%20return%20index%20%3E%200%3B%0A%20%20%7D%0A%20%20public%20canRemove(value%3A%20any%2C%20index%3A%20number)%20%7B%0A%20%20%20%20console.log('canRemove'%2C%20value%2C%20index)%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%20%20return%20index%20%3D%3D%3D%200%3B%0A%20%20%7D%0A%0A%20%20public%20updateInitialValue()%20%7B%0A%20%20%20%20this.initValue%20%3D%20%5B%0A%20%20%20%20%20%20%7B%20text%3A%20'TEXT%20111'%2C%20percentage%3A%20100%2C%20checkbox%3A%20false%2C%20test4%3A%20'TEST%20111'%20%7D%2C%0A%20%20%20%20%20%20%7B%20text%3A%20'TEXT%20222'%2C%20percentage%3A%205%2C%20checkbox%3A%20false%2C%20test4%3A%20'TEST%20222'%20%7D%2C%0A%20%20%20%20%20%20%7B%20text%3A%20'TEXT%20333'%2C%20percentage%3A%2060%2C%20checkbox%3A%20true%2C%20test4%3A%20'TEST%20333'%20%7D%2C%0A%20%20%20%20%5D%3B%0A%20%20%7D%0A%0A%20%20public%20customDelete(form%3A%20NovoFormGroup%2C%20key%3A%20string%2C%20index%3A%20number)%20%7B%0A%20%20%20%20console.log('DELETE'%2C%20form%2C%20key%2C%20index)%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%20%20const%20control%3A%20FormArray%20%3D%20%3CFormArray%3Eform.controls%5Bkey%5D%3B%0A%20%20%20%20control.removeAt(index)%3B%0A%20%20%7D%0A%0A%20%20public%20customEdit(form%3A%20NovoFormGroup%2C%20key%3A%20string%2C%20index%3A%20number)%20%7B%0A%20%20%20%20console.log('EDIT'%2C%20form%2C%20key%2C%20index)%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%7D%0A%0A%20%20private%20setupGroupedFormDemo()%20%7B%0A%20%20%20%20this.formGroup%20%3D%20this.formUtils.emptyFormGroup()%3B%0A%20%20%20%20const%20label%20%3D%20new%20ReadOnlyControl(%7B%20key%3A%20'label'%2C%20value%3A%20'Label%20%3A)'%20%7D)%3B%0A%20%20%20%20const%20c1%20%3D%20new%20SelectControl(%7B%20key%3A%20'text'%2C%20label%3A%20'Text%20Box'%2C%20options%3A%20%5B%7B%20value%3A%20'hello'%2C%20label%3A%20'Hello'%20%7D%5D%20%7D)%3B%0A%20%20%20%20const%20c2%20%3D%20new%20TextBoxControl(%7B%20type%3A%20'percentage'%2C%20key%3A%20'percentage'%2C%20label%3A%20'Percent'%2C%20required%3A%20true%20%7D)%3B%0A%20%20%20%20const%20c3%20%3D%20new%20CheckboxControl(%7B%20key%3A%20'checkbox'%2C%20label%3A%20'Check%20Me!'%2C%20width%3A%20100%20%7D)%3B%0A%20%20%20%20const%20c4%20%3D%20new%20TextBoxControl(%7B%20key%3A%20'test4'%2C%20label%3A%20'TEST4'%20%7D)%3B%0A%20%20%20%20this.controls.push(label)%3B%0A%20%20%20%20this.controls.push(c1)%3B%0A%20%20%20%20this.controls.push(c2)%3B%0A%20%20%20%20this.controls.push(c3)%3B%0A%20%20%20%20this.controls.push(c4)%3B%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cng-template%20%23customRowTemplate%20let-form%3D%22form%22%20let-index%3D%22index%22%20let-key%3D%22key%22%20let-controls%3D%22controls%22%3E%0A%20%20%20%20%3Cdiv%20class%3D%22novo-control-group-control%22%3E%0A%20%20%20%20%20%20%20%20%3Cdiv%20*ngFor%3D%22let%20c%20of%20controls%22%20class%3D%22novo-control-container%22%20%5Bclass.is-label%5D%3D%22c.controlType%20%3D%3D%3D%20'read-only'%22%20%5Bstyle.max-width.px%5D%3D%22c.width%22%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%3Cnovo-control%20%5Bform%5D%3D%22form%3F.controls%5Bkey%5D%5B'controls'%5D%5Bindex%5D%22%20%5Bcontrol%5D%3D%22c%22%20%5Bcondensed%5D%3D%22true%22%3E%3C%2Fnovo-control%3E%0A%20%20%20%20%20%20%20%20%3C%2Fdiv%3E%0A%20%20%20%20%20%20%20%20%3Cdiv%20class%3D%22novo-control-container%20last%22%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%3Cbutton%20tooltip%3D%22HI%22%20type%3D%22button%22%20(click)%3D%22customEdit(form%2C%20key%2C%20index)%22%20theme%3D%22icon%22%20icon%3D%22edit%22%20%5Battr.data-automation-id%5D%3D%22'novo-control-group-edit-'%20%2B%20key%22%20index%3D%22-1%22%3E%3C%2Fbutton%3E%0A%20%20%20%20%20%20%20%20%3C%2Fdiv%3E%0A%20%20%20%20%20%20%20%20%3Cdiv%20class%3D%22novo-control-container%20last%22%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%3Cbutton%20type%3D%22button%22%20(click)%3D%22customDelete(form%2C%20key%2C%20index)%22%20theme%3D%22icon%22%20icon%3D%22delete-o%22%20%5Battr.data-automation-id%5D%3D%22'novo-control-group-delete-'%20%2B%20key%22%20index%3D%22-1%22%3E%3C%2Fbutton%3E%0A%20%20%20%20%20%20%20%20%3C%2Fdiv%3E%0A%20%20%20%20%3C%2Fdiv%3E%0A%3C%2Fng-template%3E%0A%0A%3Cnovo-form%20%5Bform%5D%3D%22formGroup%22%3E%0A%20%20%20%20%3Cnovo-control-group%20remove%3D%22true%22%20edit%3D%22true%22%20%5BinitialValue%5D%3D%22initValue%22%20%5Bcontrols%5D%3D%22controls%22%20%5BrowTemplate%5D%3D%22customRowTemplate%22%20%5Badd%5D%3D%22simpleAddConfig%22%20label%3D%22Custom%20Template%22%20key%3D%22custom%22%20%5Bform%5D%3D%22formGroup%22%20%5BemptyMessage%5D%3D%22emptyMessage%22%3E%3C%2Fnovo-control-group%3E%0A%3C%2Fnovo-form%3E%0A%0A%3Cdiv%20class%3D%22final-value%22%3EInitial%20Value%3A%20%7B%7B%20initValue%20%7C%20json%20%7D%7D%3C%2Fdiv%3E%0A%3Cdiv%20class%3D%22final-value%22%3EValue%3A%20%7B%7B%20formGroup.value%20%7C%20json%20%7D%7D%3C%2Fdiv%3E%0A`
    },
    'horizontal-options': {
        title: 'Horizontal Options Example',
        component: HorizontalOptionsExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0Aimport%20%7B%20FormArray%20%7D%20from%20'%40angular%2Fforms'%3B%0Aimport%20%7B%0A%20%20FormUtils%2C%0A%20%20TextBoxControl%2C%0A%20%20CheckboxControl%2C%0A%20%20NovoFormGroup%2C%0A%20%20BaseControl%2C%0A%20%20NovoControlGroupAddConfig%2C%0A%20%20ReadOnlyControl%2C%0A%20%20SelectControl%2C%0A%7D%20from%20'novo-elements'%3B%0A%0A%2F**%0A%20*%20%40title%20Horizontal%20Options%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20selector%3A%20'horizontal-options-example'%2C%0A%20%20templateUrl%3A%20'horizontal-options-example.html'%2C%0A%20%20styleUrls%3A%20%5B'horizontal-options-example.css'%5D%2C%0A%7D)%0Aexport%20class%20HorizontalOptionsExample%20%7B%0A%20%20public%20formGroup%3A%20NovoFormGroup%3B%0A%20%20public%20controls%3A%20BaseControl%5B%5D%20%3D%20%5B%5D%3B%0A%20%20public%20initialValue%3A%20%7B%7D%5B%5D%20%3D%20%5B%5D%3B%0A%20%20public%20initValue%3A%20%7B%7D%5B%5D%20%3D%20%5B%7B%20text%3A%20'TEXT'%2C%20percentage%3A%2012%2C%20checkbox%3A%20true%2C%20test4%3A%20'TEST'%20%7D%5D%3B%0A%0A%20%20public%20simpleAddConfig%3A%20NovoControlGroupAddConfig%20%3D%20%7B%0A%20%20%20%20label%3A%20'Add'%2C%0A%20%20%7D%3B%0A%20%20public%20anotherAddConfig%3A%20NovoControlGroupAddConfig%20%3D%20%7B%0A%20%20%20%20label%3A%20'Add%20a%20new%20fancy%20thing!'%2C%0A%20%20%7D%3B%0A%0A%20%20public%20emptyMessage%3A%20string%20%3D%20'There%20are%20no%20items...'%3B%0A%20%20public%20canEditFunction%3A%20Function%3B%0A%20%20public%20canRemoveFunction%3A%20Function%3B%0A%0A%20%20constructor(private%20formUtils%3A%20FormUtils)%20%7B%0A%20%20%20%20%2F%2F%20Grouped%20form%20demo%0A%20%20%20%20this.setupGroupedFormDemo()%3B%0A%20%20%20%20%2F%2F%20Setup%20function%0A%20%20%20%20this.canEditFunction%20%3D%20this.canEdit.bind(this)%3B%0A%20%20%20%20this.canRemoveFunction%20%3D%20this.canRemove.bind(this)%3B%0A%20%20%7D%0A%0A%20%20public%20onRemove(value%3A%20any)%20%7B%0A%20%20%20%20console.log('REMOVING'%2C%20value)%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%7D%0A%0A%20%20public%20onEdit(value%3A%20any)%20%7B%0A%20%20%20%20console.log('EDITING'%2C%20value)%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%7D%0A%0A%20%20public%20canEdit(value%3A%20any%2C%20index%3A%20number)%20%7B%0A%20%20%20%20console.log('canEdit'%2C%20value%2C%20index)%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%20%20return%20index%20%3E%200%3B%0A%20%20%7D%0A%20%20public%20canRemove(value%3A%20any%2C%20index%3A%20number)%20%7B%0A%20%20%20%20console.log('canRemove'%2C%20value%2C%20index)%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%20%20return%20index%20%3D%3D%3D%200%3B%0A%20%20%7D%0A%0A%20%20public%20updateInitialValue()%20%7B%0A%20%20%20%20this.initValue%20%3D%20%5B%0A%20%20%20%20%20%20%7B%20text%3A%20'TEXT%20111'%2C%20percentage%3A%20100%2C%20checkbox%3A%20false%2C%20test4%3A%20'TEST%20111'%20%7D%2C%0A%20%20%20%20%20%20%7B%20text%3A%20'TEXT%20222'%2C%20percentage%3A%205%2C%20checkbox%3A%20false%2C%20test4%3A%20'TEST%20222'%20%7D%2C%0A%20%20%20%20%20%20%7B%20text%3A%20'TEXT%20333'%2C%20percentage%3A%2060%2C%20checkbox%3A%20true%2C%20test4%3A%20'TEST%20333'%20%7D%2C%0A%20%20%20%20%5D%3B%0A%20%20%7D%0A%0A%20%20public%20customDelete(form%3A%20NovoFormGroup%2C%20key%3A%20string%2C%20index%3A%20number)%20%7B%0A%20%20%20%20console.log('DELETE'%2C%20form%2C%20key%2C%20index)%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%20%20const%20control%3A%20FormArray%20%3D%20%3CFormArray%3Eform.controls%5Bkey%5D%3B%0A%20%20%20%20control.removeAt(index)%3B%0A%20%20%7D%0A%0A%20%20public%20customEdit(form%3A%20NovoFormGroup%2C%20key%3A%20string%2C%20index%3A%20number)%20%7B%0A%20%20%20%20console.log('EDIT'%2C%20form%2C%20key%2C%20index)%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%7D%0A%0A%20%20private%20setupGroupedFormDemo()%20%7B%0A%20%20%20%20this.formGroup%20%3D%20this.formUtils.emptyFormGroup()%3B%0A%20%20%20%20const%20label%20%3D%20new%20ReadOnlyControl(%7B%20key%3A%20'label'%2C%20value%3A%20'Label%20%3A)'%20%7D)%3B%0A%20%20%20%20const%20c1%20%3D%20new%20SelectControl(%7B%20key%3A%20'text'%2C%20label%3A%20'Text%20Box'%2C%20options%3A%20%5B%7B%20value%3A%20'hello'%2C%20label%3A%20'Hello'%20%7D%5D%20%7D)%3B%0A%20%20%20%20const%20c2%20%3D%20new%20TextBoxControl(%7B%20type%3A%20'percentage'%2C%20key%3A%20'percentage'%2C%20label%3A%20'Percent'%2C%20required%3A%20true%20%7D)%3B%0A%20%20%20%20const%20c3%20%3D%20new%20CheckboxControl(%7B%20key%3A%20'checkbox'%2C%20label%3A%20'Check%20Me!'%2C%20width%3A%20100%20%7D)%3B%0A%20%20%20%20const%20c4%20%3D%20new%20TextBoxControl(%7B%20key%3A%20'test4'%2C%20label%3A%20'TEST4'%20%7D)%3B%0A%20%20%20%20this.controls.push(label)%3B%0A%20%20%20%20this.controls.push(c1)%3B%0A%20%20%20%20this.controls.push(c2)%3B%0A%20%20%20%20this.controls.push(c3)%3B%0A%20%20%20%20this.controls.push(c4)%3B%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cnovo-form%20%5Bform%5D%3D%22formGroup%22%3E%0A%20%20%20%20%3Cnovo-control-group%20%5BinitialValue%5D%3D%22initialValue%22%20collapsible%3D%22true%22%20%5Badd%5D%3D%22anotherAddConfig%22%20remove%3D%22true%22%20label%3D%22Horizontal%22%20key%3D%22horizontal%22%20description%3D%22Test%20Description%22%20%5Bform%5D%3D%22formGroup%22%20%5Bcontrols%5D%3D%22controls%22%20%5BemptyMessage%5D%3D%22emptyMessage%22%3E%3C%2Fnovo-control-group%3E%0A%3C%2Fnovo-form%3E%0A%3Cdiv%20class%3D%22final-value%22%3EInitial%20Value%3A%20%7B%7B%20initialValue%20%7C%20json%20%7D%7D%3C%2Fdiv%3E%0A%3Cdiv%20class%3D%22final-value%22%3EValue%3A%20%7B%7B%20formGroup.value%20%7C%20json%20%7D%7D%3C%2Fdiv%3E%0A`
    },
    'horizontal': {
        title: 'Horizontal Example',
        component: HorizontalExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0Aimport%20%7B%20FormArray%20%7D%20from%20'%40angular%2Fforms'%3B%0Aimport%20%7B%0A%20%20FormUtils%2C%0A%20%20TextBoxControl%2C%0A%20%20CheckboxControl%2C%0A%20%20NovoFormGroup%2C%0A%20%20BaseControl%2C%0A%20%20NovoControlGroupAddConfig%2C%0A%20%20ReadOnlyControl%2C%0A%20%20SelectControl%2C%0A%7D%20from%20'novo-elements'%3B%0A%0A%2F**%0A%20*%20%40title%20Horizontal%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20selector%3A%20'horizontal-example'%2C%0A%20%20templateUrl%3A%20'horizontal-example.html'%2C%0A%20%20styleUrls%3A%20%5B'horizontal-example.css'%5D%2C%0A%7D)%0Aexport%20class%20HorizontalExample%20%7B%0A%20%20public%20formGroup%3A%20NovoFormGroup%3B%0A%20%20public%20controls%3A%20BaseControl%5B%5D%20%3D%20%5B%5D%3B%0A%20%20public%20initialValue%3A%20%7B%7D%5B%5D%20%3D%20%5B%5D%3B%0A%20%20public%20initValue%3A%20%7B%7D%5B%5D%20%3D%20%5B%7B%20text%3A%20'TEXT'%2C%20percentage%3A%2012%2C%20checkbox%3A%20true%2C%20test4%3A%20'TEST'%20%7D%5D%3B%0A%0A%20%20public%20simpleAddConfig%3A%20NovoControlGroupAddConfig%20%3D%20%7B%0A%20%20%20%20label%3A%20'Add'%2C%0A%20%20%7D%3B%0A%20%20public%20anotherAddConfig%3A%20NovoControlGroupAddConfig%20%3D%20%7B%0A%20%20%20%20label%3A%20'Add%20a%20new%20fancy%20thing!'%2C%0A%20%20%7D%3B%0A%0A%20%20public%20emptyMessage%3A%20string%20%3D%20'There%20are%20no%20items...'%3B%0A%20%20public%20canEditFunction%3A%20Function%3B%0A%20%20public%20canRemoveFunction%3A%20Function%3B%0A%0A%20%20constructor(private%20formUtils%3A%20FormUtils)%20%7B%0A%20%20%20%20%2F%2F%20Grouped%20form%20demo%0A%20%20%20%20this.setupGroupedFormDemo()%3B%0A%20%20%20%20%2F%2F%20Setup%20function%0A%20%20%20%20this.canEditFunction%20%3D%20this.canEdit.bind(this)%3B%0A%20%20%20%20this.canRemoveFunction%20%3D%20this.canRemove.bind(this)%3B%0A%20%20%7D%0A%0A%20%20public%20onRemove(value%3A%20any)%20%7B%0A%20%20%20%20console.log('REMOVING'%2C%20value)%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%7D%0A%0A%20%20public%20onEdit(value%3A%20any)%20%7B%0A%20%20%20%20console.log('EDITING'%2C%20value)%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%7D%0A%0A%20%20public%20canEdit(value%3A%20any%2C%20index%3A%20number)%20%7B%0A%20%20%20%20console.log('canEdit'%2C%20value%2C%20index)%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%20%20return%20index%20%3E%200%3B%0A%20%20%7D%0A%20%20public%20canRemove(value%3A%20any%2C%20index%3A%20number)%20%7B%0A%20%20%20%20console.log('canRemove'%2C%20value%2C%20index)%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%20%20return%20index%20%3D%3D%3D%200%3B%0A%20%20%7D%0A%0A%20%20public%20updateInitialValue()%20%7B%0A%20%20%20%20this.initValue%20%3D%20%5B%0A%20%20%20%20%20%20%7B%20text%3A%20'TEXT%20111'%2C%20percentage%3A%20100%2C%20checkbox%3A%20false%2C%20test4%3A%20'TEST%20111'%20%7D%2C%0A%20%20%20%20%20%20%7B%20text%3A%20'TEXT%20222'%2C%20percentage%3A%205%2C%20checkbox%3A%20false%2C%20test4%3A%20'TEST%20222'%20%7D%2C%0A%20%20%20%20%20%20%7B%20text%3A%20'TEXT%20333'%2C%20percentage%3A%2060%2C%20checkbox%3A%20true%2C%20test4%3A%20'TEST%20333'%20%7D%2C%0A%20%20%20%20%5D%3B%0A%20%20%7D%0A%0A%20%20public%20customDelete(form%3A%20NovoFormGroup%2C%20key%3A%20string%2C%20index%3A%20number)%20%7B%0A%20%20%20%20console.log('DELETE'%2C%20form%2C%20key%2C%20index)%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%20%20const%20control%3A%20FormArray%20%3D%20%3CFormArray%3Eform.controls%5Bkey%5D%3B%0A%20%20%20%20control.removeAt(index)%3B%0A%20%20%7D%0A%0A%20%20public%20customEdit(form%3A%20NovoFormGroup%2C%20key%3A%20string%2C%20index%3A%20number)%20%7B%0A%20%20%20%20console.log('EDIT'%2C%20form%2C%20key%2C%20index)%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%7D%0A%0A%20%20private%20setupGroupedFormDemo()%20%7B%0A%20%20%20%20this.formGroup%20%3D%20this.formUtils.emptyFormGroup()%3B%0A%20%20%20%20const%20label%20%3D%20new%20ReadOnlyControl(%7B%20key%3A%20'label'%2C%20value%3A%20'Label%20%3A)'%20%7D)%3B%0A%20%20%20%20const%20c1%20%3D%20new%20SelectControl(%7B%20key%3A%20'text'%2C%20label%3A%20'Text%20Box'%2C%20options%3A%20%5B%7B%20value%3A%20'hello'%2C%20label%3A%20'Hello'%20%7D%5D%20%7D)%3B%0A%20%20%20%20const%20c2%20%3D%20new%20TextBoxControl(%7B%20type%3A%20'percentage'%2C%20key%3A%20'percentage'%2C%20label%3A%20'Percent'%2C%20required%3A%20true%20%7D)%3B%0A%20%20%20%20const%20c3%20%3D%20new%20CheckboxControl(%7B%20key%3A%20'checkbox'%2C%20label%3A%20'Check%20Me!'%2C%20width%3A%20100%20%7D)%3B%0A%20%20%20%20const%20c4%20%3D%20new%20TextBoxControl(%7B%20key%3A%20'test4'%2C%20label%3A%20'TEST4'%20%7D)%3B%0A%20%20%20%20this.controls.push(label)%3B%0A%20%20%20%20this.controls.push(c1)%3B%0A%20%20%20%20this.controls.push(c2)%3B%0A%20%20%20%20this.controls.push(c3)%3B%0A%20%20%20%20this.controls.push(c4)%3B%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cbutton%20theme%3D%22primary%22%20(click)%3D%22updateInitialValue()%22%3EUpdate%20Initial%20Value%3C%2Fbutton%3E%0A%3Cbr%2F%3E%0A%3Cbr%2F%3E%0A%3Cnovo-form%20%5Bform%5D%3D%22formGroup%22%3E%0A%20%20%20%20%3Cnovo-control-group%20%5BcanEdit%5D%3D%22canEditFunction%22%20%5BcanRemove%5D%3D%22canRemoveFunction%22%20(onRemove)%3D%22onRemove(%24event)%22%20(onEdit)%3D%22onEdit(%24event)%22%20%5BinitialValue%5D%3D%22initValue%22%20%5Badd%5D%3D%22simpleAddConfig%22%20remove%3D%22true%22%20edit%3D%22true%22%20label%3D%22Horizontal%22%20key%3D%22horizontal%22%20%5Bform%5D%3D%22formGroup%22%20%5Bcontrols%5D%3D%22controls%22%20%5BemptyMessage%5D%3D%22emptyMessage%22%3E%3C%2Fnovo-control-group%3E%0A%3C%2Fnovo-form%3E%0A%3Cdiv%20class%3D%22final-value%22%3EInitial%20Value%3A%20%7B%7B%20initValue%20%7C%20json%20%7D%7D%3C%2Fdiv%3E%0A%3Cdiv%20class%3D%22final-value%22%3EValue%3A%20%7B%7B%20formGroup.value%20%7C%20json%20%7D%7D%3C%2Fdiv%3E%0A`
    },
    'vertical-options': {
        title: 'Vertical Options Example',
        component: VerticalOptionsExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0Aimport%20%7B%20FormArray%20%7D%20from%20'%40angular%2Fforms'%3B%0Aimport%20%7B%0A%20%20FormUtils%2C%0A%20%20TextBoxControl%2C%0A%20%20CheckboxControl%2C%0A%20%20NovoFormGroup%2C%0A%20%20BaseControl%2C%0A%20%20NovoControlGroupAddConfig%2C%0A%20%20ReadOnlyControl%2C%0A%20%20SelectControl%2C%0A%7D%20from%20'novo-elements'%3B%0A%0A%2F**%0A%20*%20%40title%20Vertical%20Options%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20selector%3A%20'vertical-options-example'%2C%0A%20%20templateUrl%3A%20'vertical-options-example.html'%2C%0A%20%20styleUrls%3A%20%5B'vertical-options-example.css'%5D%2C%0A%7D)%0Aexport%20class%20VerticalOptionsExample%20%7B%0A%20%20public%20formGroup%3A%20NovoFormGroup%3B%0A%20%20public%20controls%3A%20BaseControl%5B%5D%20%3D%20%5B%5D%3B%0A%20%20public%20initialValue%3A%20%7B%7D%5B%5D%20%3D%20%5B%5D%3B%0A%20%20public%20initValue%3A%20%7B%7D%5B%5D%20%3D%20%5B%7B%20text%3A%20'TEXT'%2C%20percentage%3A%2012%2C%20checkbox%3A%20true%2C%20test4%3A%20'TEST'%20%7D%5D%3B%0A%0A%20%20public%20simpleAddConfig%3A%20NovoControlGroupAddConfig%20%3D%20%7B%0A%20%20%20%20label%3A%20'Add'%2C%0A%20%20%7D%3B%0A%20%20public%20anotherAddConfig%3A%20NovoControlGroupAddConfig%20%3D%20%7B%0A%20%20%20%20label%3A%20'Add%20a%20new%20fancy%20thing!'%2C%0A%20%20%7D%3B%0A%0A%20%20public%20emptyMessage%3A%20string%20%3D%20'There%20are%20no%20items...'%3B%0A%20%20public%20canEditFunction%3A%20Function%3B%0A%20%20public%20canRemoveFunction%3A%20Function%3B%0A%0A%20%20constructor(private%20formUtils%3A%20FormUtils)%20%7B%0A%20%20%20%20%2F%2F%20Grouped%20form%20demo%0A%20%20%20%20this.setupGroupedFormDemo()%3B%0A%20%20%20%20%2F%2F%20Setup%20function%0A%20%20%20%20this.canEditFunction%20%3D%20this.canEdit.bind(this)%3B%0A%20%20%20%20this.canRemoveFunction%20%3D%20this.canRemove.bind(this)%3B%0A%20%20%7D%0A%0A%20%20public%20onRemove(value%3A%20any)%20%7B%0A%20%20%20%20console.log('REMOVING'%2C%20value)%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%7D%0A%0A%20%20public%20onEdit(value%3A%20any)%20%7B%0A%20%20%20%20console.log('EDITING'%2C%20value)%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%7D%0A%0A%20%20public%20canEdit(value%3A%20any%2C%20index%3A%20number)%20%7B%0A%20%20%20%20console.log('canEdit'%2C%20value%2C%20index)%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%20%20return%20index%20%3E%200%3B%0A%20%20%7D%0A%20%20public%20canRemove(value%3A%20any%2C%20index%3A%20number)%20%7B%0A%20%20%20%20console.log('canRemove'%2C%20value%2C%20index)%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%20%20return%20index%20%3D%3D%3D%200%3B%0A%20%20%7D%0A%0A%20%20public%20updateInitialValue()%20%7B%0A%20%20%20%20this.initValue%20%3D%20%5B%0A%20%20%20%20%20%20%7B%20text%3A%20'TEXT%20111'%2C%20percentage%3A%20100%2C%20checkbox%3A%20false%2C%20test4%3A%20'TEST%20111'%20%7D%2C%0A%20%20%20%20%20%20%7B%20text%3A%20'TEXT%20222'%2C%20percentage%3A%205%2C%20checkbox%3A%20false%2C%20test4%3A%20'TEST%20222'%20%7D%2C%0A%20%20%20%20%20%20%7B%20text%3A%20'TEXT%20333'%2C%20percentage%3A%2060%2C%20checkbox%3A%20true%2C%20test4%3A%20'TEST%20333'%20%7D%2C%0A%20%20%20%20%5D%3B%0A%20%20%7D%0A%0A%20%20public%20customDelete(form%3A%20NovoFormGroup%2C%20key%3A%20string%2C%20index%3A%20number)%20%7B%0A%20%20%20%20console.log('DELETE'%2C%20form%2C%20key%2C%20index)%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%20%20const%20control%3A%20FormArray%20%3D%20%3CFormArray%3Eform.controls%5Bkey%5D%3B%0A%20%20%20%20control.removeAt(index)%3B%0A%20%20%7D%0A%0A%20%20public%20customEdit(form%3A%20NovoFormGroup%2C%20key%3A%20string%2C%20index%3A%20number)%20%7B%0A%20%20%20%20console.log('EDIT'%2C%20form%2C%20key%2C%20index)%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%7D%0A%0A%20%20private%20setupGroupedFormDemo()%20%7B%0A%20%20%20%20this.formGroup%20%3D%20this.formUtils.emptyFormGroup()%3B%0A%20%20%20%20const%20label%20%3D%20new%20ReadOnlyControl(%7B%20key%3A%20'label'%2C%20value%3A%20'Label%20%3A)'%20%7D)%3B%0A%20%20%20%20const%20c1%20%3D%20new%20SelectControl(%7B%20key%3A%20'text'%2C%20label%3A%20'Text%20Box'%2C%20options%3A%20%5B%7B%20value%3A%20'hello'%2C%20label%3A%20'Hello'%20%7D%5D%20%7D)%3B%0A%20%20%20%20const%20c2%20%3D%20new%20TextBoxControl(%7B%20type%3A%20'percentage'%2C%20key%3A%20'percentage'%2C%20label%3A%20'Percent'%2C%20required%3A%20true%20%7D)%3B%0A%20%20%20%20const%20c3%20%3D%20new%20CheckboxControl(%7B%20key%3A%20'checkbox'%2C%20label%3A%20'Check%20Me!'%2C%20width%3A%20100%20%7D)%3B%0A%20%20%20%20const%20c4%20%3D%20new%20TextBoxControl(%7B%20key%3A%20'test4'%2C%20label%3A%20'TEST4'%20%7D)%3B%0A%20%20%20%20this.controls.push(label)%3B%0A%20%20%20%20this.controls.push(c1)%3B%0A%20%20%20%20this.controls.push(c2)%3B%0A%20%20%20%20this.controls.push(c3)%3B%0A%20%20%20%20this.controls.push(c4)%3B%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cnovo-form%20%5Bform%5D%3D%22formGroup%22%3E%0A%20%20%20%20%3Cnovo-control-group%20%5BinitialValue%5D%3D%22initialValue%22%20collapsible%3D%22true%22%20%5Badd%5D%3D%22anotherAddConfig%22%20remove%3D%22true%22%20icon%3D%22idea%22%20label%3D%22Vertical%22%20key%3D%22vertical%22%20vertical%3D%22true%22%20description%3D%22Test%20Description%22%20%5Bform%5D%3D%22formGroup%22%20%5Bcontrols%5D%3D%22controls%22%20%5BemptyMessage%5D%3D%22emptyMessage%22%3E%3C%2Fnovo-control-group%3E%0A%3C%2Fnovo-form%3E%0A%3Cdiv%20class%3D%22final-value%22%3EInitial%20Value%3A%20%7B%7B%20initialValue%20%7C%20json%20%7D%7D%3C%2Fdiv%3E%0A%3Cdiv%20class%3D%22final-value%22%3EValue%3A%20%7B%7B%20formGroup.value%20%7C%20json%20%7D%7D%3C%2Fdiv%3E%0A`
    },
    'vertical': {
        title: 'Vertical Example',
        component: VerticalExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0Aimport%20%7B%20FormArray%20%7D%20from%20'%40angular%2Fforms'%3B%0Aimport%20%7B%0A%20%20FormUtils%2C%0A%20%20TextBoxControl%2C%0A%20%20CheckboxControl%2C%0A%20%20NovoFormGroup%2C%0A%20%20BaseControl%2C%0A%20%20NovoControlGroupAddConfig%2C%0A%20%20ReadOnlyControl%2C%0A%20%20SelectControl%2C%0A%7D%20from%20'novo-elements'%3B%0A%0A%2F**%0A%20*%20%40title%20Vertical%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20selector%3A%20'vertical-example'%2C%0A%20%20templateUrl%3A%20'vertical-example.html'%2C%0A%20%20styleUrls%3A%20%5B'vertical-example.css'%5D%2C%0A%7D)%0Aexport%20class%20VerticalExample%20%7B%0A%20%20public%20formGroup%3A%20NovoFormGroup%3B%0A%20%20public%20controls%3A%20BaseControl%5B%5D%20%3D%20%5B%5D%3B%0A%20%20public%20initialValue%3A%20%7B%7D%5B%5D%20%3D%20%5B%5D%3B%0A%20%20public%20initValue%3A%20%7B%7D%5B%5D%20%3D%20%5B%7B%20text%3A%20'TEXT'%2C%20percentage%3A%2012%2C%20checkbox%3A%20true%2C%20test4%3A%20'TEST'%20%7D%5D%3B%0A%0A%20%20public%20simpleAddConfig%3A%20NovoControlGroupAddConfig%20%3D%20%7B%0A%20%20%20%20label%3A%20'Add'%2C%0A%20%20%7D%3B%0A%20%20public%20anotherAddConfig%3A%20NovoControlGroupAddConfig%20%3D%20%7B%0A%20%20%20%20label%3A%20'Add%20a%20new%20fancy%20thing!'%2C%0A%20%20%7D%3B%0A%0A%20%20public%20emptyMessage%3A%20string%20%3D%20'There%20are%20no%20items...'%3B%0A%20%20public%20canEditFunction%3A%20Function%3B%0A%20%20public%20canRemoveFunction%3A%20Function%3B%0A%0A%20%20constructor(private%20formUtils%3A%20FormUtils)%20%7B%0A%20%20%20%20%2F%2F%20Grouped%20form%20demo%0A%20%20%20%20this.setupGroupedFormDemo()%3B%0A%20%20%20%20%2F%2F%20Setup%20function%0A%20%20%20%20this.canEditFunction%20%3D%20this.canEdit.bind(this)%3B%0A%20%20%20%20this.canRemoveFunction%20%3D%20this.canRemove.bind(this)%3B%0A%20%20%7D%0A%0A%20%20public%20onRemove(value%3A%20any)%20%7B%0A%20%20%20%20console.log('REMOVING'%2C%20value)%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%7D%0A%0A%20%20public%20onEdit(value%3A%20any)%20%7B%0A%20%20%20%20console.log('EDITING'%2C%20value)%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%7D%0A%0A%20%20public%20canEdit(value%3A%20any%2C%20index%3A%20number)%20%7B%0A%20%20%20%20console.log('canEdit'%2C%20value%2C%20index)%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%20%20return%20index%20%3E%200%3B%0A%20%20%7D%0A%20%20public%20canRemove(value%3A%20any%2C%20index%3A%20number)%20%7B%0A%20%20%20%20console.log('canRemove'%2C%20value%2C%20index)%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%20%20return%20index%20%3D%3D%3D%200%3B%0A%20%20%7D%0A%0A%20%20public%20updateInitialValue()%20%7B%0A%20%20%20%20this.initValue%20%3D%20%5B%0A%20%20%20%20%20%20%7B%20text%3A%20'TEXT%20111'%2C%20percentage%3A%20100%2C%20checkbox%3A%20false%2C%20test4%3A%20'TEST%20111'%20%7D%2C%0A%20%20%20%20%20%20%7B%20text%3A%20'TEXT%20222'%2C%20percentage%3A%205%2C%20checkbox%3A%20false%2C%20test4%3A%20'TEST%20222'%20%7D%2C%0A%20%20%20%20%20%20%7B%20text%3A%20'TEXT%20333'%2C%20percentage%3A%2060%2C%20checkbox%3A%20true%2C%20test4%3A%20'TEST%20333'%20%7D%2C%0A%20%20%20%20%5D%3B%0A%20%20%7D%0A%0A%20%20public%20customDelete(form%3A%20NovoFormGroup%2C%20key%3A%20string%2C%20index%3A%20number)%20%7B%0A%20%20%20%20console.log('DELETE'%2C%20form%2C%20key%2C%20index)%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%20%20const%20control%3A%20FormArray%20%3D%20%3CFormArray%3Eform.controls%5Bkey%5D%3B%0A%20%20%20%20control.removeAt(index)%3B%0A%20%20%7D%0A%0A%20%20public%20customEdit(form%3A%20NovoFormGroup%2C%20key%3A%20string%2C%20index%3A%20number)%20%7B%0A%20%20%20%20console.log('EDIT'%2C%20form%2C%20key%2C%20index)%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%7D%0A%0A%20%20private%20setupGroupedFormDemo()%20%7B%0A%20%20%20%20this.formGroup%20%3D%20this.formUtils.emptyFormGroup()%3B%0A%20%20%20%20const%20label%20%3D%20new%20ReadOnlyControl(%7B%20key%3A%20'label'%2C%20value%3A%20'Label%20%3A)'%20%7D)%3B%0A%20%20%20%20const%20c1%20%3D%20new%20SelectControl(%7B%20key%3A%20'text'%2C%20label%3A%20'Text%20Box'%2C%20options%3A%20%5B%7B%20value%3A%20'hello'%2C%20label%3A%20'Hello'%20%7D%5D%20%7D)%3B%0A%20%20%20%20const%20c2%20%3D%20new%20TextBoxControl(%7B%20type%3A%20'percentage'%2C%20key%3A%20'percentage'%2C%20label%3A%20'Percent'%2C%20required%3A%20true%20%7D)%3B%0A%20%20%20%20const%20c3%20%3D%20new%20CheckboxControl(%7B%20key%3A%20'checkbox'%2C%20label%3A%20'Check%20Me!'%2C%20width%3A%20100%20%7D)%3B%0A%20%20%20%20const%20c4%20%3D%20new%20TextBoxControl(%7B%20key%3A%20'test4'%2C%20label%3A%20'TEST4'%20%7D)%3B%0A%20%20%20%20this.controls.push(label)%3B%0A%20%20%20%20this.controls.push(c1)%3B%0A%20%20%20%20this.controls.push(c2)%3B%0A%20%20%20%20this.controls.push(c3)%3B%0A%20%20%20%20this.controls.push(c4)%3B%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cnovo-form%20%5Bform%5D%3D%22formGroup%22%3E%0A%20%20%20%20%3Cnovo-control-group%20%5BinitialValue%5D%3D%22initialValue%22%20%5Badd%5D%3D%22simpleAddConfig%22%20remove%3D%22true%22%20icon%3D%22idea%22%20label%3D%22Vertical%22%20key%3D%22vertical%22%20vertical%3D%22true%22%20%5Bform%5D%3D%22formGroup%22%20%5Bcontrols%5D%3D%22controls%22%20%5BemptyMessage%5D%3D%22emptyMessage%22%3E%3C%2Fnovo-control-group%3E%0A%3C%2Fnovo-form%3E%0A%3Cdiv%20class%3D%22final-value%22%3EInitial%20Value%3A%20%7B%7B%20initialValue%20%7C%20json%20%7D%7D%3C%2Fdiv%3E%0A%3Cdiv%20class%3D%22final-value%22%3EValue%3A%20%7B%7B%20formGroup.value%20%7C%20json%20%7D%7D%3C%2Fdiv%3E%0A`
    },
    'address-control': {
        title: 'Address Control Example',
        component: AddressControlExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F%2F%20Vendor%0Aimport%20%7B%20FormUtils%2C%20AddressControl%2C%20findByCountryId%20%7D%20from%20'novo-elements'%3B%0A%0A%2F**%0A%20*%20%40title%20Address%20Control%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20selector%3A%20'address-control-example'%2C%0A%20%20templateUrl%3A%20'address-control-example.html'%2C%0A%20%20styleUrls%3A%20%5B'address-control-example.css'%5D%2C%0A%7D)%0Aexport%20class%20AddressControlExample%20%7B%0A%20%20public%20addressControl%3A%20any%3B%0A%20%20public%20secondaryAddressControl%3A%20any%3B%0A%20%20public%20addressForm%3A%20any%3B%0A%20%20public%20addressFormControls%3A%20any%3B%0A%20%20public%20states%3A%20any%5B%5D%20%3D%20%5B%0A%20%20%20%20%7B%0A%20%20%20%20%20%20value%3A%20'MA'%2C%0A%20%20%20%20%20%20label%3A%20'Massachusetts'%2C%0A%20%20%20%20%20%20countryId%3A%201%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20value%3A%20'NY'%2C%0A%20%20%20%20%20%20label%3A%20'New%20York'%2C%0A%20%20%20%20%20%20countryId%3A%201%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20value%3A%20'AB'%2C%0A%20%20%20%20%20%20label%3A%20'Alberta'%2C%0A%20%20%20%20%20%20countryId%3A%202216%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20value%3A%20'BC'%2C%0A%20%20%20%20%20%20label%3A%20'British%20Columbia'%2C%0A%20%20%20%20%20%20countryId%3A%202216%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20value%3A%20'MB'%2C%0A%20%20%20%20%20%20label%3A%20'Manitoba'%2C%0A%20%20%20%20%20%20countryId%3A%202216%2C%0A%20%20%20%20%7D%2C%0A%20%20%5D%3B%0A%0A%20%20constructor(private%20formUtils%3A%20FormUtils)%20%7B%0A%20%20%20%20%2F%2F%20Address%20control%0A%20%20%20%20this.addressControl%20%3D%20new%20AddressControl(%7B%0A%20%20%20%20%20%20key%3A%20'address'%2C%0A%20%20%20%20%20%20name%3A%20'address'%2C%0A%20%20%20%20%20%20label%3A%20'Address'%2C%0A%20%20%20%20%20%20tooltip%3A%20'Address'%2C%0A%20%20%20%20%20%20config%3A%20%7B%0A%20%20%20%20%20%20%20%20address1%3A%20%7B%0A%20%20%20%20%20%20%20%20%20%20label%3A%20'Address%20Line%201'%2C%0A%20%20%20%20%20%20%20%20%20%20required%3A%20true%2C%0A%20%20%20%20%20%20%20%20%20%20maxlength%3A%2020%2C%0A%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20address2%3A%20%7B%0A%20%20%20%20%20%20%20%20%20%20label%3A%20'Address%20Line%202'%2C%0A%20%20%20%20%20%20%20%20%20%20required%3A%20true%2C%0A%20%20%20%20%20%20%20%20%20%20maxlength%3A%2015%2C%0A%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20state%3A%20%7B%0A%20%20%20%20%20%20%20%20%20%20label%3A%20'State'%2C%0A%20%20%20%20%20%20%20%20%20%20required%3A%20true%2C%0A%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20countryID%3A%20%7B%0A%20%20%20%20%20%20%20%20%20%20label%3A%20'Country'%2C%0A%20%20%20%20%20%20%20%20%20%20required%3A%20true%2C%0A%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20city%3A%20%7B%0A%20%20%20%20%20%20%20%20%20%20label%3A%20'City'%2C%0A%20%20%20%20%20%20%20%20%20%20required%3A%20true%2C%0A%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20zip%3A%20%7B%0A%20%20%20%20%20%20%20%20%20%20label%3A%20'Zipcode'%2C%0A%20%20%20%20%20%20%20%20%20%20required%3A%20true%2C%0A%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20value%3A%20%7B%0A%20%20%20%20%20%20%20%20address1%3A%20'321%20Summer%20Street'%2C%0A%20%20%20%20%20%20%20%20address2%3A%20'11%20Washington%20Street'%2C%0A%20%20%20%20%20%20%20%20city%3A%20'Chicago'%2C%0A%20%20%20%20%20%20%20%20state%3A%20'California'%2C%0A%20%20%20%20%20%20%20%20zip%3A%2095133%2C%0A%20%20%20%20%20%20%20%20countryID%3A%201%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%7D)%3B%0A%20%20%20%20this.secondaryAddressControl%20%3D%20new%20AddressControl(%7B%0A%20%20%20%20%20%20key%3A%20'secondaryAddress'%2C%0A%20%20%20%20%20%20name%3A%20'secondaryAddress'%2C%0A%20%20%20%20%20%20label%3A%20'Secondary%20Address'%2C%0A%20%20%20%20%20%20tooltip%3A%20'Secondary%20Address'%2C%0A%20%20%20%20%20%20config%3A%20%7B%0A%20%20%20%20%20%20%20%20address1%3A%20%7B%0A%20%20%20%20%20%20%20%20%20%20label%3A%20'Address%20Line%201'%2C%0A%20%20%20%20%20%20%20%20%20%20maxlength%3A%2020%2C%0A%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20address2%3A%20%7B%0A%20%20%20%20%20%20%20%20%20%20label%3A%20'Address%20Line%202'%2C%0A%20%20%20%20%20%20%20%20%20%20maxlength%3A%2015%2C%0A%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20state%3A%20%7B%0A%20%20%20%20%20%20%20%20%20%20label%3A%20'State'%2C%0A%20%20%20%20%20%20%20%20%20%20pickerConfig%3A%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20field%3A%20'value'%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20format%3A%20'%24label'%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20options%3A%20(query%2C%20countryID)%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20return%20Promise.resolve(this.getStateOptions(query%2C%20countryID))%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20getLabels%3A%20(value%3A%20number)%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20return%20Promise.resolve(this.getStateLabel(value))%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20countryID%3A%20%7B%0A%20%20%20%20%20%20%20%20%20%20label%3A%20'Country'%2C%0A%20%20%20%20%20%20%20%20%20%20pickerConfig%3A%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20field%3A%20'value'%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20format%3A%20'%24label'%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20options%3A%20(query)%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20return%20Promise.resolve(this.getCountryOptions(query))%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20getLabels%3A%20(value%3A%20number)%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20return%20new%20Promise((resolve%3A%20any)%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20const%20country%3A%20any%20%3D%20findByCountryId(value)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20if%20(country)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20resolve(%7B%20value%3A%20country.id%2C%20label%3A%20country.name%20%7D)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%20else%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20resolve('')%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20city%3A%20%7B%0A%20%20%20%20%20%20%20%20%20%20label%3A%20'City'%2C%0A%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20zip%3A%20%7B%0A%20%20%20%20%20%20%20%20%20%20label%3A%20'Zipcode'%2C%0A%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20value%3A%20%7B%0A%20%20%20%20%20%20%20%20address1%3A%20'123%20Summer%20Street'%2C%0A%20%20%20%20%20%20%20%20address2%3A%20'10%20Washington%20Street%20and%20stuff'%2C%0A%20%20%20%20%20%20%20%20countryID%3A%202359%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%7D)%3B%0A%20%20%20%20this.addressFormControls%20%3D%20%5Bthis.addressControl%2C%20this.secondaryAddressControl%5D%3B%0A%20%20%20%20this.addressForm%20%3D%20formUtils.toFormGroup(this.addressFormControls)%3B%0A%20%20%7D%0A%0A%20%20getStateOptions(filter%3A%20string%20%3D%20''%2C%20countryID%3A%20number)%20%7B%0A%20%20%20%20let%20states%3A%20any%5B%5D%20%3D%20this.states%3B%0A%20%20%20%20if%20(countryID)%20%7B%0A%20%20%20%20%20%20states%20%3D%20states.filter((state%3A%20any)%20%3D%3E%20state.countryId%20%3D%3D%3D%20countryID)%3B%0A%20%20%20%20%7D%0A%20%20%20%20if%20(filter%20%26%26%20filter.length)%20%7B%0A%20%20%20%20%20%20states%20%3D%20states.filter((state)%20%3D%3E%20new%20RegExp(%60%24%7Bfilter%7D%60%2C%20'gi').test(state.label))%3B%0A%20%20%20%20%7D%0A%20%20%20%20return%20states%3B%0A%20%20%7D%0A%0A%20%20getStateLabel(value%3A%20number)%3A%20string%20%7B%0A%20%20%20%20const%20state%3A%20any%20%3D%20this.states.find((s%3A%20any)%20%3D%3E%20%7B%0A%20%20%20%20%20%20return%20s.value%20%3D%3D%3D%20value%3B%0A%20%20%20%20%7D)%3B%0A%20%20%20%20if%20(state%20%26%26%20state.label)%20%7B%0A%20%20%20%20%20%20return%20state.label%3B%0A%20%20%20%20%7D%0A%20%20%20%20return%20''%3B%0A%20%20%7D%0A%0A%20%20getCountryOptions(filter%3F%3A%20string)%20%7B%0A%20%20%20%20let%20countries%3A%20any%20%3D%20%5B%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20value%3A%202356%2C%0A%20%20%20%20%20%20%20%20label%3A%20'Uganda'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20value%3A%202357%2C%0A%20%20%20%20%20%20%20%20label%3A%20'Ukraine'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20value%3A%202358%2C%0A%20%20%20%20%20%20%20%20label%3A%20'United%20Arab%20Emirates'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20value%3A%202359%2C%0A%20%20%20%20%20%20%20%20label%3A%20'United%20Kingdom'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20value%3A%201%2C%0A%20%20%20%20%20%20%20%20label%3A%20'United%20States'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20value%3A%202443%2C%0A%20%20%20%20%20%20%20%20label%3A%20'United%20States%20Minor%20Outlying%20Islands'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20value%3A%202360%2C%0A%20%20%20%20%20%20%20%20label%3A%20'Uruguay'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20value%3A%202361%2C%0A%20%20%20%20%20%20%20%20label%3A%20'Uzbekistan'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%5D%3B%0A%20%20%20%20if%20(filter%20%26%26%20filter.length)%20%7B%0A%20%20%20%20%20%20countries%20%3D%20countries.filter((country)%20%3D%3E%20new%20RegExp(%60%24%7Bfilter%7D%60%2C%20'gi').test(country.label))%3B%0A%20%20%20%20%7D%0A%20%20%20%20return%20countries%3B%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cnovo-form%20%5Bform%5D%3D%22addressForm%22%3E%0A%20%20%3Cdiv%20class%3D%22novo-form-row%22%3E%0A%20%20%20%20%3Cnovo-control%20%5Bform%5D%3D%22addressForm%22%20%5Bcontrol%5D%3D%22addressControl%22%3E%3C%2Fnovo-control%3E%0A%20%20%3C%2Fdiv%3E%0A%20%20%3Cdiv%20class%3D%22novo-form-row%22%3E%0A%20%20%20%20%3Cnovo-control%20%5Bform%5D%3D%22addressForm%22%20%5Bcontrol%5D%3D%22secondaryAddressControl%22%3E%3C%2Fnovo-control%3E%0A%20%20%3C%2Fdiv%3E%0A%3C%2Fnovo-form%3E%0A%0A%3Cdiv%20class%3D%22final-value%22%3EValue%3A%20%7B%7BaddressForm.value%20%7C%20json%7D%7D%3C%2Fdiv%3E%0A`
    },
    'calendar-input-controls': {
        title: 'Calendar Input Controls Example',
        component: CalendarInputControlsExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F%2F%20Vendor%0Aimport%20%7B%20FormUtils%2C%20DateControl%2C%20TimeControl%2C%20DateTimeControl%20%7D%20from%20'novo-elements'%3B%0A%0A%2F%2F%20import%20%7B%20MockMeta%2C%20MockMetaHeaders%20%7D%20from%20'.%2FMockMeta'%3B%0A%0A%2F**%0A%20*%20%40title%20Calendar%20Input%20Controls%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20selector%3A%20'calendar-input-controls-example'%2C%0A%20%20templateUrl%3A%20'calendar-input-controls-example.html'%2C%0A%20%20styleUrls%3A%20%5B'calendar-input-controls-example.css'%5D%2C%0A%7D)%0Aexport%20class%20CalendarInputControlsExample%20%7B%0A%20%20public%20dateControl%3A%20any%3B%0A%20%20public%20userDefinedDateControl%3A%20DateControl%3B%0A%20%20public%20timeControl%3A%20any%3B%0A%20%20public%20dateTimeControl%3A%20any%3B%0A%20%20public%20calendarForm%3A%20any%3B%0A%0A%20%20constructor(private%20formUtils%3A%20FormUtils)%20%7B%0A%20%20%20%20%2F%2F%20Calendar%20input%20controls%0A%20%20%20%20this.dateControl%20%3D%20new%20DateControl(%7B%0A%20%20%20%20%20%20key%3A%20'date'%2C%0A%20%20%20%20%20%20label%3A%20'Date'%2C%0A%20%20%20%20%20%20tooltip%3A%20'Date'%2C%0A%20%20%20%20%20%20startDate%3A%20new%20Date().setMonth(new%20Date().getMonth()%20-%201)%2C%0A%20%20%20%20%7D)%3B%0A%20%20%20%20this.userDefinedDateControl%20%3D%20new%20DateControl(%7B%0A%20%20%20%20%20%20key%3A%20'userDefinedFormat'%2C%0A%20%20%20%20%20%20label%3A%20'User%20Defined%20Format'%2C%0A%20%20%20%20%20%20tooltip%3A%20'Date'%2C%0A%20%20%20%20%20%20dateFormat%3A%20'MMM%20Do%20YYYY%20(dd)'%2C%0A%20%20%20%20%20%20textMaskEnabled%3A%20false%2C%0A%20%20%20%20%7D)%3B%0A%20%20%20%20this.timeControl%20%3D%20new%20TimeControl(%7B%20key%3A%20'time'%2C%20label%3A%20'Time'%2C%20tooltip%3A%20'Time'%20%7D)%3B%0A%20%20%20%20this.dateTimeControl%20%3D%20new%20DateTimeControl(%7B%20key%3A%20'dateTime'%2C%20tooltip%3A%20'Date%20Time'%2C%20label%3A%20'Date%20Time'%2C%20military%3A%20true%20%7D)%3B%0A%20%20%20%20this.calendarForm%20%3D%20formUtils.toFormGroup(%5Bthis.dateControl%2C%20this.userDefinedDateControl%2C%20this.timeControl%2C%20this.dateTimeControl%5D)%3B%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3C!--Check%20out%20the%20FormDemo.js%20for%20more%20information!--%3E%0A%3Cnovo-form%20%5Bform%5D%3D%22calendarForm%22%20layout%3D%22vertical%22%3E%0A%20%20%20%20%3Cdiv%20class%3D%22novo-form-row%22%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-control%20%5Bform%5D%3D%22calendarForm%22%20%5Bcontrol%5D%3D%22dateControl%22%3E%3C%2Fnovo-control%3E%0A%20%20%20%20%3C%2Fdiv%3E%0A%20%20%20%20%3Cdiv%20class%3D%22novo-form-row%22%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-control%20%5Bform%5D%3D%22calendarForm%22%20%5Bcontrol%5D%3D%22userDefinedDateControl%22%3E%3C%2Fnovo-control%3E%0A%20%20%20%20%3C%2Fdiv%3E%0A%20%20%20%20%3Cdiv%20class%3D%22novo-form-row%22%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-control%20%5Bform%5D%3D%22calendarForm%22%20%5Bcontrol%5D%3D%22timeControl%22%3E%3C%2Fnovo-control%3E%0A%20%20%20%20%3C%2Fdiv%3E%0A%20%20%20%20%3Cdiv%20class%3D%22novo-form-row%22%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-control%20%5Bform%5D%3D%22calendarForm%22%20%5Bcontrol%5D%3D%22dateTimeControl%22%3E%3C%2Fnovo-control%3E%0A%20%20%20%20%3C%2Fdiv%3E%0A%3C%2Fnovo-form%3E%0A%3Cdiv%20class%3D%22final-value%22%3EValue%3A%20%7B%7BcalendarForm.value%20%7C%20json%7D%7D%3C%2Fdiv%3E%0A`
    },
    'check-box-controls': {
        title: 'Check Box Controls Example',
        component: CheckBoxControlsExample,
        tsSource: `import%20%7B%20Component%2C%20Input%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F%2F%20Vendor%0Aimport%20%7B%0A%20%20FormUtils%2C%0A%20%20TextBoxControl%2C%0A%20%20CheckboxControl%2C%0A%20%20CheckListControl%2C%0A%20%20FileControl%2C%0A%20%20QuickNoteControl%2C%0A%20%20TilesControl%2C%0A%20%20DateControl%2C%0A%20%20TimeControl%2C%0A%20%20DateTimeControl%2C%0A%20%20PickerControl%2C%0A%20%20EntityPickerResult%2C%0A%20%20EntityPickerResults%2C%0A%20%20TextAreaControl%2C%0A%20%20NovoFormGroup%2C%0A%20%20BaseControl%2C%0A%20%20AceEditorControl%2C%0A%20%20AddressControl%2C%0A%20%20FieldInteractionApi%2C%0A%20%20findByCountryId%2C%0A%7D%20from%20'novo-elements'%3B%0A%0A%2F%2F%20import%20%7B%20MockMeta%2C%20MockMetaHeaders%20%7D%20from%20'.%2FMockMeta'%3B%0A%0A%2F**%0A%20*%20%40title%20Check%20Box%20Controls%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20selector%3A%20'check-box-controls-example'%2C%0A%20%20templateUrl%3A%20'check-box-controls-example.html'%2C%0A%20%20styleUrls%3A%20%5B'check-box-controls-example.css'%5D%2C%0A%7D)%0Aexport%20class%20CheckBoxControlsExample%20%7B%0A%20%20public%20checkControl%3A%20any%3B%0A%20%20public%20checkListControl%3A%20any%3B%0A%20%20public%20tilesControl%3A%20any%3B%0A%20%20public%20disabledTilesControl%3A%20any%3B%0A%20%20public%20checkForm%3A%20any%3B%0A%0A%20%20constructor(private%20formUtils%3A%20FormUtils)%20%7B%0A%20%20%20%20%2F%2F%20Check%20box%20controls%0A%20%20%20%20this.checkControl%20%3D%20new%20CheckboxControl(%7B%20key%3A%20'check'%2C%20tooltip%3A%20'Checkbox'%2C%20label%3A%20'Checkbox'%2C%20checkboxLabel%3A%20'Checkbox'%20%7D)%3B%0A%20%20%20%20this.checkListControl%20%3D%20new%20CheckListControl(%7B%0A%20%20%20%20%20%20key%3A%20'checklist'%2C%0A%20%20%20%20%20%20label%3A%20'Check%20List'%2C%0A%20%20%20%20%20%20options%3A%20%5B'One'%2C%20'Two'%2C%20'Three'%5D%2C%0A%20%20%20%20%20%20tooltip%3A%20'CheckList'%2C%0A%20%20%20%20%20%20tooltipPosition%3A%20'Top'%2C%0A%20%20%20%20%7D)%3B%0A%20%20%20%20this.tilesControl%20%3D%20new%20TilesControl(%7B%0A%20%20%20%20%20%20key%3A%20'tiles'%2C%0A%20%20%20%20%20%20label%3A%20'Tiles'%2C%0A%20%20%20%20%20%20options%3A%20%5B%7B%20value%3A%20'one'%2C%20label%3A%20'One'%20%7D%2C%20%7B%20value%3A%20'two'%2C%20label%3A%20'Two'%20%7D%2C%20%7B%20value%3A%20'disabled'%2C%20label%3A%20'Disabled'%2C%20disabled%3A%20true%20%7D%5D%2C%0A%20%20%20%20%20%20tooltip%3A%20'Tiles'%2C%0A%20%20%20%20%7D)%3B%0A%20%20%20%20this.disabledTilesControl%20%3D%20new%20TilesControl(%7B%0A%20%20%20%20%20%20key%3A%20'disabledTiles'%2C%0A%20%20%20%20%20%20label%3A%20'Disabled%20Tiles'%2C%0A%20%20%20%20%20%20readOnly%3A%20true%2C%0A%20%20%20%20%20%20options%3A%20%5B%7B%20value%3A%20'one'%2C%20label%3A%20'One'%20%7D%2C%20%7B%20value%3A%20'two'%2C%20label%3A%20'Two'%20%7D%5D%2C%0A%20%20%20%20%20%20tooltip%3A%20'Tiles'%2C%0A%20%20%20%20%7D)%3B%0A%20%20%20%20this.checkForm%20%3D%20formUtils.toFormGroup(%5Bthis.checkControl%2C%20this.checkListControl%2C%20this.tilesControl%2C%20this.disabledTilesControl%5D)%3B%0A%20%20%7D%0A%0A%20%20onChange(value)%20%7B%0A%20%20%20%20console.log('I%20changed!'%2C%20value)%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3C!--Check%20out%20the%20FormDemo.js%20for%20more%20information!--%3E%0A%3Cnovo-form%20%5Bform%5D%3D%22checkForm%22%3E%0A%20%20%20%20%3Cdiv%20class%3D%22novo-form-row%22%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-control%20%5Bform%5D%3D%22checkForm%22%20%5Bcontrol%5D%3D%22checkControl%22%3E%3C%2Fnovo-control%3E%0A%20%20%20%20%3C%2Fdiv%3E%0A%20%20%20%20%3Cdiv%20class%3D%22novo-form-row%22%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-control%20%5Bform%5D%3D%22checkForm%22%20%5Bcontrol%5D%3D%22checkListControl%22%3E%3C%2Fnovo-control%3E%0A%20%20%20%20%3C%2Fdiv%3E%0A%20%20%20%20%3Cdiv%20class%3D%22novo-form-row%22%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-control%20%5Bform%5D%3D%22checkForm%22%20%5Bcontrol%5D%3D%22tilesControl%22%20(change)%3D%22onChange(%24event)%22%3E%3C%2Fnovo-control%3E%0A%20%20%20%20%3C%2Fdiv%3E%0A%20%20%20%20%3Cdiv%20class%3D%22novo-form-row%22%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-control%20%5Bform%5D%3D%22checkForm%22%20%5Bcontrol%5D%3D%22disabledTilesControl%22%20(change)%3D%22onChange(%24event)%22%3E%3C%2Fnovo-control%3E%0A%20%20%20%20%3C%2Fdiv%3E%0A%3C%2Fnovo-form%3E%0A%3Cdiv%20class%3D%22final-value%22%3EValue%3A%20%7B%7BcheckForm.value%20%7C%20json%7D%7D%3C%2Fdiv%3E%0A`
    },
    'custom-demo-control': {
        title: 'Custom Demo Control',
        component: CustomDemoControlExample,
        tsSource: `import%20%7B%20Component%2C%20Input%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Custom%20Demo%20Control%0A%20*%2F%0A%40Component(%7B%0A%20%20selector%3A%20'custom-demo-control-example'%2C%0A%20%20template%3A%20%60%3Cdiv%20%5BformGroup%5D%3D%22form%22%3E%0A%20%20%20%20%20%20%20%20My%20Custom%20Input%20%3Cinput%20%5BformControlName%5D%3D%22control.key%22%20%5Bid%5D%3D%22control.key%22%20%5Btype%5D%3D%22control.type%22%20%5Bplaceholder%5D%3D%22control.placeholder%22%3E%0A%20%20%20%20%3C%2Fdiv%3E%60%2C%0A%7D)%0Aexport%20class%20CustomDemoControlExample%20%7B%0A%20%20%40Input()%0A%20%20control%3B%0A%20%20%40Input()%0A%20%20form%3A%20any%3B%0A%20%20%40Input()%0A%20%20edit%3A%20any%3B%0A%20%20%40Input()%0A%20%20save%3A%20any%3B%0A%20%20%40Input()%0A%20%20delete%3A%20any%3B%0A%20%20%40Input()%0A%20%20upload%3A%20any%3B%0A%7D%0A`,
        cssSource: ``,
        htmlSource: ``
    },
    'disabled-form': {
        title: 'Disabled Form Example',
        component: DisabledFormExample,
        tsSource: `import%20%7B%20Component%2C%20Input%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F%2F%20Vendor%0Aimport%20%7B%20FormUtils%2C%20TextBoxControl%2C%20CheckboxControl%2C%20FileControl%2C%20PickerControl%20%7D%20from%20'novo-elements'%3B%0Aimport%20%7B%20MockMetaForDisabledForm%20%7D%20from%20'..%2FMockMeta'%3B%0A%0A%2F**%0A%20*%20%40title%20Disabled%20Form%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20selector%3A%20'disabled-form-example'%2C%0A%20%20templateUrl%3A%20'disabled-form-example.html'%2C%0A%20%20styleUrls%3A%20%5B'disabled-form-example.css'%5D%2C%0A%7D)%0Aexport%20class%20DisabledFormExample%20%7B%0A%20%20public%20disabledControls%3A%20any%3B%0A%20%20public%20disabledQuickNote%3A%20any%3B%0A%20%20public%20disabledForm%3A%20any%3B%0A%20%20public%20disabledNote%3A%20any%3B%0A%20%20public%20required%3A%20boolean%20%3D%20false%3B%0A%20%20public%20disabled%3A%20boolean%20%3D%20true%3B%0A%20%20public%20placeholder%3A%20string%20%3D%20'Placeholder'%3B%0A%20%20public%20note%3A%20string%20%3D%20''%3B%0A%0A%20%20constructor(private%20formUtils%3A%20FormUtils)%20%7B%0A%20%20%20%20%2F%2F%20Disabled%20Form%0A%20%20%20%20const%20disabledOverrides%3A%20any%20%3D%20%7B%0A%20%20%20%20%20%20address%3A%20%7B%0A%20%20%20%20%20%20%20%20readOnly%3A%20true%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20textbox%3A%20%7B%0A%20%20%20%20%20%20%20%20readOnly%3A%20true%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20textarea%3A%20%7B%0A%20%20%20%20%20%20%20%20readOnly%3A%20true%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20date%3A%20%7B%0A%20%20%20%20%20%20%20%20readOnly%3A%20true%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20time%3A%20%7B%0A%20%20%20%20%20%20%20%20readOnly%3A%20true%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20datetime%3A%20%7B%0A%20%20%20%20%20%20%20%20readOnly%3A%20true%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20select%3A%20%7B%0A%20%20%20%20%20%20%20%20readOnly%3A%20true%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20tiles%3A%20%7B%0A%20%20%20%20%20%20%20%20readOnly%3A%20true%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20picker%3A%20%7B%0A%20%20%20%20%20%20%20%20readOnly%3A%20true%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20chips%3A%20%7B%0A%20%20%20%20%20%20%20%20readOnly%3A%20true%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20checkbox%3A%20%7B%0A%20%20%20%20%20%20%20%20readOnly%3A%20true%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20checklist%3A%20%7B%0A%20%20%20%20%20%20%20%20readOnly%3A%20true%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20file%3A%20%7B%0A%20%20%20%20%20%20%20%20readOnly%3A%20true%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20type%3A%20%7B%0A%20%20%20%20%20%20%20%20readOnly%3A%20true%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20radio%3A%20%7B%0A%20%20%20%20%20%20%20%20readOnly%3A%20true%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20htmlFieldFullEditor%3A%20%7B%0A%20%20%20%20%20%20%20%20readOnly%3A%20true%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20rowChips%3A%20%7B%0A%20%20%20%20%20%20%20%20readOnly%3A%20true%2C%0A%20%20%20%20%20%20%20%20label%3A%20'Row%20Chips'%2C%0A%20%20%20%20%20%20%20%20columns%3A%20%5B%0A%20%20%20%20%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20label%3A%20'Value'%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20data%3A%20(item%3A%20any)%3A%20string%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20return%20item.value%5B'value'%5D%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20label%3A%20'Description'%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20data%3A%20(item%3A%20any)%3A%20string%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20return%20item.value%5B'description'%5D%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20%5D%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%7D%3B%0A%20%20%20%20%2F%2F%20Updating%20form%0A%20%20%20%20this.disabledControls%20%3D%20formUtils.toFieldSets(%0A%20%20%20%20%20%20MockMetaForDisabledForm%2C%0A%20%20%20%20%20%20'%24%20USD'%2C%0A%20%20%20%20%20%20%7B%7D%2C%0A%20%20%20%20%20%20%7B%20token%3A%20'TOKEN'%2C%20military%3A%20true%20%7D%2C%0A%20%20%20%20%20%20disabledOverrides%2C%0A%20%20%20%20)%3B%0A%20%20%20%20formUtils.setInitialValuesFieldsets(this.disabledControls%2C%20%7B%0A%20%20%20%20%20%20textbox%3A%20'Disabled%20TextBox'%2C%0A%20%20%20%20%20%20textarea%3A%0A%20%20%20%20%20%20%20%20'Disabled%20TextArea%20Disabled%20TextArea%20Disabled%20TextArea%20Disabled%20TextArea%20Disabled%20TextArea%20Disabled%20TextArea%20Disabled%20TextArea%20'%2C%0A%20%20%20%20%20%20select%3A%20'disabledValue'%2C%0A%20%20%20%20%20%20checklist%3A%20'Disabled'%2C%0A%20%20%20%20%20%20tiles%3A%20'Disabled'%2C%0A%20%20%20%20%20%20radio%3A%20'Yes'%2C%0A%20%20%20%20%20%20chips%3A%20%5B'Disabled'%2C%20'Chip'%5D%2C%0A%20%20%20%20%20%20address%3A%20%7B%0A%20%20%20%20%20%20%20%20address1%3A%20'100%20Summer%20St'%2C%0A%20%20%20%20%20%20%20%20address2%3A%20'apt%2025'%2C%0A%20%20%20%20%20%20%20%20countryID%3A%201%2C%0A%20%20%20%20%20%20%20%20state%3A%20'Georgia'%2C%0A%20%20%20%20%20%20%20%20city%3A%20'Atlanta'%2C%0A%20%20%20%20%20%20%20%20zip%3A%20'30312'%2C%0A%20%20%20%20%20%20%20%20countryName%3A%20'United%20States'%2C%0A%20%20%20%20%20%20%20%20countryCode%3A%20'US'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20file%3A%20%5B%7B%20name%3A%20'yourFile.pdf'%2C%20loaded%3A%20true%2C%20link%3A%20'www.google.com'%2C%20description%3A%20'file%20description'%20%7D%5D%2C%0A%20%20%20%20%20%20htmlFieldFullEditor%3A%20%60%3Ch1%3EDisabled%20Editor%3C%2Fh1%3E%3Cbr%3E%3Cui%3E%3Cli%3EDisabled%3C%2Fli%3E%3Cli%3EEditor%3C%2Fli%3E%3C%2Fui%3E%60%2C%0A%20%20%20%20%20%20picker%3A%20'Disabled%20Picker'%2C%0A%20%20%20%20%20%20rowChips%3A%20%5B%7B%20id%3A%201%2C%20value%3A%20'Disabled%20Row%20Chip'%2C%20description%3A%20'This%20is%20a%20disabled%20Row%20Chip'%20%7D%5D%2C%0A%20%20%20%20%7D)%3B%0A%20%20%20%20this.disabledForm%20%3D%20formUtils.toFormGroupFromFieldset(this.disabledControls)%3B%0A%20%20%20%20this.disabledNote%20%3D%20'Disabled%20QuickNote'%3B%0A%20%20%20%20this.disabledQuickNote%20%3D%20%7B%0A%20%20%20%20%20%20triggers%3A%20%7B%0A%20%20%20%20%20%20%20%20tags%3A%20'%40'%2C%0A%20%20%20%20%20%20%20%20references%3A%20'%23'%2C%0A%20%20%20%20%20%20%20%20boos%3A%20'%5E'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20options%3A%20%7B%0A%20%20%20%20%20%20%20%20tags%3A%20%5B'First'%2C%20'Second'%2C%20'Space%20Between'%5D%2C%0A%20%20%20%20%20%20%20%20references%3A%20%5B'Third'%2C%20'Fourth'%5D%2C%0A%20%20%20%20%20%20%20%20boos%3A%20%5B'Test'%5D%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20readOnly%3A%20true%2C%0A%20%20%20%20%20%20renderer%3A%20%7B%0A%20%20%20%20%20%20%20%20tags%3A%20(symbol%2C%20item)%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%20%20return%20%60%3Ca%20href%3D%22https%3A%2F%2Fwww.google.com%2Fsearch%3Fq%3Dbullhorn%26oq%3Dbullhorn%22%3E%24%7Bsymbol%7D%24%7Bitem.label%7D%3C%2Fa%3E%60%3B%0A%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20references%3A%20(symbol%2C%20item)%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%20%20return%20%60%3Ca%20href%3D%22https%3A%2F%2Fwww.google.com%2Fsearch%3Fq%3Dbullhorn%26oq%3Dbullhorn%22%3E%24%7Bsymbol%7D%24%7Bitem.label%7D%3C%2Fa%3E%60%3B%0A%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20boos%3A%20(symbol%2C%20item)%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%20%20return%20%60%3Cstrong%3E%24%7Bsymbol%7D%24%7Bitem.label%7D%3C%2Fstrong%3E%60%3B%0A%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%7D%3B%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cnovo-dynamic-form%20%5BautoFocusFirstField%5D%3D%22true%22%20class%3D%22dynamic%22%20%5Bfieldsets%5D%3D%22disabledControls%22%20%5B(form)%5D%3D%22disabledForm%22%20%23myform%3E%3C%2Fnovo-dynamic-form%3E%0A%3Cdiv%20class%3D%22final-value%22%3EValues%3A%20%7B%7Bmyform.values%20%7C%20json%7D%7D%3C%2Fdiv%3E%0A%3Cbr%3E%0A%3Ch5%3EQUICK%20NOTE%3C%2Fh5%3E%0A%3Cbr%3E%0A%3Cnovo-quick-note%20%5B(ngModel)%5D%3D%22disabledNote%22%20%5Bplaceholder%5D%3D%22placeholder%22%20%5Bconfig%5D%3D%22disabledQuickNote%22%3E%3C%2Fnovo-quick-note%3E%0A%3Cdiv%20class%3D%22data%22%3E%0A%20%20%3Cp%3ENote%3A%20%7B%7Bnote%20%7C%20json%7D%7D%3C%2Fp%3E%0A%3C%2Fdiv%3E%0A%0A`
    },
    'dynamic-form-field-sets': {
        title: 'Dynamic Form Field Sets Example',
        component: DynamicFormFieldSetsExample,
        tsSource: `import%20%7B%20Component%2C%20Input%20%7D%20from%20'%40angular%2Fcore'%3B%0Aimport%20%7B%20FormUtils%20%7D%20from%20'novo-elements'%3B%0Aimport%20%7B%20MockMeta%2C%20MockMetaHeaders%20%7D%20from%20'..%2FMockMeta'%3B%0A%0A%2F**%0A%20*%20%40title%20Dynamic%20Form%20Field%20Sets%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20selector%3A%20'dynamic-form-field-sets-example'%2C%0A%20%20templateUrl%3A%20'dynamic-form-field-sets-example.html'%2C%0A%20%20styleUrls%3A%20%5B'dynamic-form-field-sets-example.css'%5D%2C%0A%7D)%0Aexport%20class%20DynamicFormFieldSetsExample%20%7B%0A%20%20public%20dynamic%3A%20any%3B%0A%20%20public%20dynamicForm%3A%20any%3B%0A%20%20public%20fieldsets%3A%20Array%3Cany%3E%3B%0A%20%20public%20fieldsetsForm%3A%20any%3B%0A%0A%20%20constructor(private%20formUtils%3A%20FormUtils)%20%7B%0A%20%20%20%20%2F%2F%20Dynamic%0A%20%20%20%20this.dynamic%20%3D%20formUtils.toFieldSets(%0A%20%20%20%20%20%20MockMeta%2C%0A%20%20%20%20%20%20'%24%20USD'%2C%0A%20%20%20%20%20%20%7B%7D%2C%0A%20%20%20%20%20%20%7B%20token%3A%20'TOKEN'%2C%20military%3A%20true%20%7D%2C%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20customfield%3A%20%7B%0A%20%20%20%20%20%20%20%20%20%20template%3A%20'custom-demo-component'%2C%0A%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20)%3B%0A%20%20%20%20formUtils.setInitialValuesFieldsets(this.dynamic%2C%20%7B%20firstName%3A%20'Initial%20F%20Name'%2C%20number%3A%2012%20%7D)%3B%0A%20%20%20%20this.dynamicForm%20%3D%20formUtils.toFormGroupFromFieldset(this.dynamic)%3B%0A%0A%20%20%20%20%2F%2F%20Dynamic%20%2B%20Fieldsets%0A%20%20%20%20this.fieldsets%20%3D%20formUtils.toFieldSets(%0A%20%20%20%20%20%20MockMetaHeaders%2C%0A%20%20%20%20%20%20'%24%20USD'%2C%0A%20%20%20%20%20%20%7B%7D%2C%0A%20%20%20%20%20%20%7B%20token%3A%20'TOKEN'%20%7D%2C%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20customfield%3A%20%7B%0A%20%20%20%20%20%20%20%20%20%20template%3A%20'custom-demo-component'%2C%0A%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20)%3B%0A%20%20%20%20formUtils.setInitialValuesFieldsets(this.fieldsets%2C%20%7B%20firstName%3A%20'Initial%20F%20Name'%2C%20number%3A%2012%20%7D)%3B%0A%20%20%20%20this.fieldsetsForm%20%3D%20formUtils.toFormGroupFromFieldset(this.fieldsets)%3B%0A%20%20%7D%0A%0A%20%20save(form)%20%7B%0A%20%20%20%20if%20(!form.isValid)%20%7B%0A%20%20%20%20%20%20form.showOnlyRequired(true)%3B%0A%20%20%20%20%7D%20else%20%7B%0A%20%20%20%20%20%20alert('SAVING')%3B%0A%20%20%20%20%7D%0A%20%20%7D%0A%0A%20%20clear()%20%7B%0A%20%20%20%20this.dynamic.forEach((control)%20%3D%3E%20%7B%0A%20%20%20%20%20%20control.forceClear.emit()%3B%0A%20%20%20%20%7D)%3B%0A%20%20%7D%0A%0A%20%20onChange(value)%20%7B%0A%20%20%20%20console.log('I%20changed!'%2C%20value)%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cbutton%20theme%3D%22secondary%22%20*ngIf%3D%22!myFieldsetsForm.showingAllFields%20%26%26%20!(myFieldsetsForm.allFieldsRequired%20%7C%7C%20myFieldsetsForm.allFieldsNotRequired)%22%20(click)%3D%22myFieldsetsForm.showAllFields()%22%3EShow%20All%20Fields%3C%2Fbutton%3E%0A%3Cbutton%20theme%3D%22secondary%22%20*ngIf%3D%22!myFieldsetsForm.showingRequiredFields%20%26%26%20!(myFieldsetsForm.allFieldsRequired%20%7C%7C%20myFieldsetsForm.allFieldsNotRequired)%22%20(click)%3D%22myFieldsetsForm.showOnlyRequired(false)%22%3EShow%20Required%20Fields%3C%2Fbutton%3E%0A%3Cnovo-dynamic-form%20class%3D%22dynamic%22%20layout%3D%22vertical%22%20%5Bfieldsets%5D%3D%22fieldsets%22%20%5B(form)%5D%3D%22fieldsetsForm%22%20%23myFieldsetsForm%3E%0A%20%20%3Cng-template%20novoTemplate%3D%22custom-demo-component%22%20let-control%20let-form%3D%22form%22%3E%0A%20%20%20%20%3Ccustom-demo-control-example%20%5Bcontrol%5D%3D%22control%22%20%5Bform%5D%3D%22form%22%3E%3C%2Fcustom-demo-control-example%3E%0A%20%20%3C%2Fng-template%3E%0A%3C%2Fnovo-dynamic-form%3E%0A%3Cfooter%20class%3D%22dynamic-demo-footer%22%3E%0A%20%20%3Cbutton%20(click)%3D%22save(myFieldsetsForm)%22%20theme%3D%22primary%22%20icon%3D%22check%22%3ESave%3C%2Fbutton%3E%0A%20%20%3Cbutton%20(click)%3D%22clear()%22%20theme%3D%22secondary%22%20icon%3D%22check%22%3EClear%3C%2Fbutton%3E%0A%3C%2Ffooter%3E%0A%3Cdiv%20class%3D%22final-value%22%3EValid%3A%20%7B%7BmyFieldsetsForm.isValid%20%7C%20json%7D%7D%3C%2Fdiv%3E%0A%3Cdiv%20class%3D%22final-value%22%3EValues%3A%20%7B%7BmyFieldsetsForm.values%20%7C%20json%7D%7D%3C%2Fdiv%3E%0A%3Cdiv%20class%3D%22final-value%22%3EUpdated%20Values%3A%20%7B%7BmyFieldsetsForm.updatedValues()%20%7C%20json%7D%7D%3C%2Fdiv%3E%0A`
    },
    'dynamic-form': {
        title: 'Dynamic Form Example',
        component: DynamicFormExample,
        tsSource: `import%20%7B%20Component%2C%20Input%20%7D%20from%20'%40angular%2Fcore'%3B%0Aimport%20%7B%20FormUtils%20%7D%20from%20'novo-elements'%3B%0Aimport%20%7B%20MockMeta%2C%20MockMetaHeaders%20%7D%20from%20'..%2FMockMeta'%3B%0A%0A%2F**%0A%20*%20%40title%20Dynamic%20Form%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20selector%3A%20'dynamic-form-example'%2C%0A%20%20templateUrl%3A%20'dynamic-form-example.html'%2C%0A%20%20styleUrls%3A%20%5B'dynamic-form-example.css'%5D%2C%0A%7D)%0Aexport%20class%20DynamicFormExample%20%7B%0A%20%20public%20dynamic%3A%20any%3B%0A%20%20public%20dynamicForm%3A%20any%3B%0A%0A%20%20constructor(private%20formUtils%3A%20FormUtils)%20%7B%0A%20%20%20%20%2F%2F%20Dynamic%0A%20%20%20%20this.dynamic%20%3D%20formUtils.toFieldSets(%0A%20%20%20%20%20%20MockMeta%2C%0A%20%20%20%20%20%20'%24%20USD'%2C%0A%20%20%20%20%20%20%7B%7D%2C%0A%20%20%20%20%20%20%7B%20token%3A%20'TOKEN'%2C%20military%3A%20true%20%7D%2C%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20customfield%3A%20%7B%0A%20%20%20%20%20%20%20%20%20%20template%3A%20'custom-demo-component'%2C%0A%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20)%3B%0A%20%20%20%20formUtils.setInitialValuesFieldsets(this.dynamic%2C%20%7B%20firstName%3A%20'Initial%20F%20Name'%2C%20number%3A%2012%20%7D)%3B%0A%20%20%20%20this.dynamicForm%20%3D%20formUtils.toFormGroupFromFieldset(this.dynamic)%3B%0A%20%20%7D%0A%0A%20%20save(form)%20%7B%0A%20%20%20%20if%20(!form.isValid)%20%7B%0A%20%20%20%20%20%20form.showOnlyRequired(true)%3B%0A%20%20%20%20%7D%20else%20%7B%0A%20%20%20%20%20%20alert('SAVING')%3B%0A%20%20%20%20%7D%0A%20%20%7D%0A%0A%20%20clear()%20%7B%0A%20%20%20%20this.dynamic.forEach((control)%20%3D%3E%20%7B%0A%20%20%20%20%20%20control.forceClear.emit()%3B%0A%20%20%20%20%7D)%3B%0A%20%20%7D%0A%0A%20%20onChange(value)%20%7B%0A%20%20%20%20console.log('I%20changed!'%2C%20value)%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cbutton%20theme%3D%22secondary%22%20*ngIf%3D%22!myform.showingAllFields%20%26%26%20!(myform.allFieldsRequired%20%7C%7C%20myform.allFieldsNotRequired)%22%20(click)%3D%22myform.showAllFields()%22%3EShow%20All%20Fields%3C%2Fbutton%3E%0A%3Cbutton%20theme%3D%22secondary%22%20*ngIf%3D%22!myform.showingRequiredFields%20%26%26%20!(myform.allFieldsRequired%20%7C%7C%20myform.allFieldsNotRequired)%22%20(click)%3D%22myform.showOnlyRequired(false)%22%3EShow%20Required%20Fields%3C%2Fbutton%3E%0A%3Cnovo-dynamic-form%20%5BautoFocusFirstField%5D%3D%22true%22%20class%3D%22dynamic%22%20%5Bfieldsets%5D%3D%22dynamic%22%20%5B(form)%5D%3D%22dynamicForm%22%20%23myform%3E%3C%2Fnovo-dynamic-form%3E%0A%3Cfooter%20class%3D%22dynamic-demo-footer%22%3E%0A%20%20%20%20%3Cbutton%20(click)%3D%22save(myform)%22%20theme%3D%22primary%22%20icon%3D%22check%22%3ESave%3C%2Fbutton%3E%0A%20%20%20%20%3Cbutton%20(click)%3D%22clear()%22%20theme%3D%22secondary%22%20icon%3D%22check%22%3EClear%3C%2Fbutton%3E%0A%3C%2Ffooter%3E%0A%3Cdiv%20class%3D%22final-value%22%3EValid%3A%20%7B%7Bmyform.isValid%20%7C%20json%7D%7D%3C%2Fdiv%3E%0A%3Cdiv%20class%3D%22final-value%22%3EValues%3A%20%7B%7Bmyform.values%20%7C%20json%7D%7D%3C%2Fdiv%3E%0A%3Cdiv%20class%3D%22final-value%22%3EUpdated%20Values%3A%20%7B%7Bmyform.updatedValues()%20%7C%20json%7D%7D%3C%2Fdiv%3E%0A`
    },
    'enable-disable-all-fields-in-form': {
        title: 'Enable/Disable all Fields in Form Example',
        component: EnableDisableAllFieldsInFormExample,
        tsSource: `%2F%2F%20NG%0Aimport%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%2F%2F%20Vendor%0Aimport%20%7B%20FormUtils%20%7D%20from%20'novo-elements'%3B%0A%2F%2F%20App%0Aimport%20%7B%20MockMetaForForm%20%7D%20from%20'..%2FMockMeta'%3B%0A%0A%2F**%0A%20*%20%40title%20Enable%2FDisable%20all%20Fields%20in%20Form%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20selector%3A%20'enable-disable-all-fields-in-form-example'%2C%0A%20%20templateUrl%3A%20'enable-disable-all-fields-in-form-example.html'%2C%0A%20%20styleUrls%3A%20%5B'enable-disable-all-fields-in-form-example.css'%5D%2C%0A%7D)%0Aexport%20class%20EnableDisableAllFieldsInFormExample%20%7B%0A%20%20public%20controls%3A%20any%3B%0A%20%20public%20form%3A%20any%3B%0A%20%20public%20disabled%3A%20boolean%20%3D%20false%3B%0A%0A%20%20constructor(public%20formUtils%3A%20FormUtils)%20%7B%0A%20%20%20%20%2F%2F%20Updating%20form%0A%20%20%20%20this.controls%20%3D%20formUtils.toFieldSets(%0A%20%20%20%20%20%20MockMetaForForm%2C%0A%20%20%20%20%20%20'%24%20USD'%2C%0A%20%20%20%20%20%20%7B%7D%2C%0A%20%20%20%20%20%20%7B%20token%3A%20'TOKEN'%2C%20military%3A%20true%20%7D%2C%0A%20%20%20%20%20%20%7B%7D%2C%0A%20%20%20%20)%3B%0A%20%20%20%20formUtils.setInitialValuesFieldsets(this.controls%2C%20%7B%0A%20%20%20%20%20%20select%3A%20'disabledValue'%2C%0A%20%20%20%20%7D)%3B%0A%20%20%20%20this.form%20%3D%20formUtils.toFormGroupFromFieldset(this.controls)%3B%0A%20%20%7D%0A%0A%20%20public%20toggleEnableDisableAllFields()%3A%20void%20%7B%0A%20%20%20%20this.disabled%20%3D%20!this.disabled%3B%0A%20%20%20%20if%20(this.disabled)%20%7B%0A%20%20%20%20%20%20this.form.enableAllControls()%3B%0A%20%20%20%20%7D%20else%20%7B%0A%20%20%20%20%20%20this.form.disableAllControls()%3B%0A%20%20%20%20%7D%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cnovo-dynamic-form%20class%3D%22dynamic%22%20%5Bfieldsets%5D%3D%22controls%22%20%5B(form)%5D%3D%22form%22%20%23myform%3E%3C%2Fnovo-dynamic-form%3E%0A%3Cbutton%20theme%3D%22primary%22%20(click)%3D%22toggleEnableDisableAllFields()%22%3EToggle%20fields%3C%2Fbutton%3E%0A`
    },
    'file-input-controls': {
        title: 'File Input Controls Example',
        component: FileInputControlsExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F%2F%20Vendor%0Aimport%20%7B%20FormUtils%2C%20FileControl%2C%20NovoFormGroup%20%7D%20from%20'novo-elements'%3B%0A%0A%2F**%0A%20*%20%40title%20File%20Input%20Controls%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20selector%3A%20'file-input-controls-example'%2C%0A%20%20templateUrl%3A%20'file-input-controls-example.html'%2C%0A%20%20styleUrls%3A%20%5B'file-input-controls-example.css'%5D%2C%0A%7D)%0Aexport%20class%20FileInputControlsExample%20%7B%0A%20%20public%20fileControl%3A%20any%3B%0A%20%20public%20multiFileControl%3A%20any%3B%0A%20%20public%20multiFileControlMixRemove%3A%20FileControl%3B%0A%20%20public%20fileForm%3A%20any%3B%0A%0A%20%20%2F%2F%20custom%20upload%20validation%0A%20%20public%20message%3A%20string%20%3D%20''%3B%0A%20%20public%20customValidationFileControl%3A%20FileControl%3B%0A%20%20public%20customValidationFileForm%3A%20NovoFormGroup%3B%0A%0A%20%20constructor(private%20formUtils%3A%20FormUtils)%20%7B%0A%20%20%20%20%2F%2F%20File%20input%20controls%0A%20%20%20%20this.fileControl%20%3D%20new%20FileControl(%7B%20key%3A%20'file'%2C%20name%3A%20'myfile'%2C%20label%3A%20'File'%2C%20tooltip%3A%20'Files%20Control'%20%7D)%3B%0A%20%20%20%20this.multiFileControl%20%3D%20new%20FileControl(%7B%0A%20%20%20%20%20%20key%3A%20'files'%2C%0A%20%20%20%20%20%20name%3A%20'myfiles'%2C%0A%20%20%20%20%20%20label%3A%20'Multiple%20Files'%2C%0A%20%20%20%20%20%20tooltip%3A%20'Multiple%20Files'%2C%0A%20%20%20%20%20%20multiple%3A%20true%2C%0A%20%20%20%20%20%20layoutOptions%3A%20%7B%20order%3A%20'displayFilesBelow'%2C%20download%3A%20true%2C%20edit%3A%20true%2C%20customActions%3A%20true%2C%20labelStyle%3A%20'no-box'%20%7D%2C%0A%20%20%20%20%20%20value%3A%20%5B%7B%20name%3A%20'yourFile.pdf'%2C%20loaded%3A%20true%2C%20link%3A%20'www.google.com'%2C%20description%3A%20'file%20description'%20%7D%5D%2C%0A%20%20%20%20%7D)%3B%0A%20%20%20%20this.fileForm%20%3D%20formUtils.toFormGroup(%5Bthis.fileControl%2C%20this.multiFileControl%5D)%3B%0A%0A%20%20%20%20this.customValidationFileControl%20%3D%20new%20FileControl(%7B%0A%20%20%20%20%20%20key%3A%20'customValidationFiles'%2C%0A%20%20%20%20%20%20name%3A%20'customValidationFiles'%2C%0A%20%20%20%20%20%20label%3A%20'Custom%20Validation'%2C%0A%20%20%20%20%20%20tooltip%3A%20'Custom%20Validation%20Multiple%20Files'%2C%0A%20%20%20%20%20%20multiple%3A%20true%2C%0A%20%20%20%20%20%20layoutOptions%3A%20%7B%0A%20%20%20%20%20%20%20%20order%3A%20'displayFilesBelow'%2C%0A%20%20%20%20%20%20%20%20download%3A%20true%2C%0A%20%20%20%20%20%20%20%20edit%3A%20true%2C%0A%20%20%20%20%20%20%20%20customActions%3A%20false%2C%0A%20%20%20%20%20%20%20%20customValidation%3A%20%5B%7B%20action%3A%20'upload'%2C%20fn%3A%20this.checkFileSize.bind(this)%20%7D%5D%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%7D)%3B%0A%20%20%20%20this.customValidationFileForm%20%3D%20formUtils.toFormGroup(%5Bthis.customValidationFileControl%5D)%3B%0A%20%20%20%20this.multiFileControlMixRemove%20%3D%20new%20FileControl(%7B%0A%20%20%20%20%20%20key%3A%20'mixDeleteFiles'%2C%0A%20%20%20%20%20%20name%3A%20'mymixDeleteFiles'%2C%0A%20%20%20%20%20%20label%3A%20'Multiple%20Files%20-%20Delete%20New%20Only'%2C%0A%20%20%20%20%20%20tooltip%3A%20'Multiple%20Files%20-%20Delete%20New%20Only'%2C%0A%20%20%20%20%20%20multiple%3A%20true%2C%0A%20%20%20%20%20%20layoutOptions%3A%20%7B%0A%20%20%20%20%20%20%20%20order%3A%20'displayFilesBelow'%2C%0A%20%20%20%20%20%20%20%20labelStyle%3A%20'no-box'%2C%0A%20%20%20%20%20%20%20%20download%3A%20true%2C%0A%20%20%20%20%20%20%20%20edit%3A%20false%2C%0A%20%20%20%20%20%20%20%20removable%3A%20false%2C%0A%20%20%20%20%20%20%20%20removableWhenNew%3A%20true%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20value%3A%20%5B%7B%20name%3A%20'yourFile.pdf'%2C%20loaded%3A%20true%2C%20link%3A%20'www.google.com'%2C%20description%3A%20'file%20description'%20%7D%5D%2C%0A%20%20%20%20%7D)%3B%0A%20%20%20%20this.fileForm%20%3D%20formUtils.toFormGroup(%5Bthis.fileControl%2C%20this.multiFileControl%2C%20this.multiFileControlMixRemove%5D)%3B%0A%20%20%7D%0A%0A%20%20public%20handleEdit(file)%20%7B%0A%20%20%20%20console.log('This%20is%20an%20Edit%20Action!'%2C%20file)%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%7D%0A%0A%20%20public%20handleSave(file)%20%7B%0A%20%20%20%20console.log('This%20is%20a%20Save%20Action!'%2C%20file)%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%7D%0A%0A%20%20public%20handleDelete(file)%20%7B%0A%20%20%20%20console.log('This%20is%20a%20Delete%20Action!'%2C%20file)%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%7D%0A%0A%20%20public%20handleUpload(files)%20%7B%0A%20%20%20%20console.log('This%20is%20an%20upload%20Action!'%2C%20files)%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%7D%0A%0A%20%20public%20checkFileSize(fileList)%3A%20boolean%20%7B%0A%20%20%20%20const%20maxSizeKb%3A%20number%20%3D%205120%3B%20%2F%2F%20(5%20MB%20in%20KB)%0A%20%20%20%20for%20(const%20file%20of%20fileList)%20%7B%0A%20%20%20%20%20%20if%20(file.size%20%3E%20maxSizeKb%20*%201024)%20%7B%0A%20%20%20%20%20%20%20%20this.message%20%3D%20'File%20is%20bigger%20than%20the%20allowed%205MB'%3B%0A%20%20%20%20%20%20%20%20return%20false%3B%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A%20%20%20%20return%20true%3B%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3C!--Check%20out%20the%20FormDemo.js%20for%20more%20information!--%3E%0A%3Cnovo-form%20%5Bform%5D%3D%22fileForm%22%20layout%3D%22vertical%22%3E%0A%20%20%20%20%3Cdiv%20class%3D%22novo-form-row%22%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-control%20%5Bform%5D%3D%22fileForm%22%20%5Bcontrol%5D%3D%22fileControl%22%3E%3C%2Fnovo-control%3E%0A%20%20%20%20%3C%2Fdiv%3E%0A%20%20%20%20%3Cdiv%20class%3D%22novo-form-row%22%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-control%20%5Bform%5D%3D%22fileForm%22%20%5Bcontrol%5D%3D%22multiFileControl%22%20(edit)%3D%22handleEdit(%24event)%22%20(save)%3D%22handleSave(%24event)%22%20(delete)%3D%22handleDelete(%24event)%22%20(upload)%3D%22handleUpload(%24event)%22%3E%3C%2Fnovo-control%3E%0A%20%20%20%20%3C%2Fdiv%3E%0A%20%20%20%20%3Cdiv%20class%3D%22novo-form-row%22%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-control%20%5Bform%5D%3D%22fileForm%22%20%5Bcontrol%5D%3D%22multiFileControlMixRemove%22%3E%3C%2Fnovo-control%3E%0A%20%20%20%20%3C%2Fdiv%3E%0A%3C%2Fnovo-form%3E%0A%3Cdiv%20class%3D%22final-value%22%3EValue%3A%20%7B%7BfileForm.value%20%7C%20json%7D%7D%3C%2Fdiv%3E%0A%3Cbr%20%2F%3E%0A%3Cbr%20%2F%3E%0A%3Cnovo-form%20layout%3D%22vertical%22%20%5Bform%5D%3D%22customValidationFileForm%22%3E%0A%20%20%20%20%3Cdiv%20class%3D%22novo-form-row%22%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-control%20%5Bform%5D%3D%22customValidationFileForm%22%20%5Bcontrol%5D%3D%22customValidationFileControl%22%3E%3C%2Fnovo-control%3E%0A%20%20%20%20%3C%2Fdiv%3E%0A%3C%2Fnovo-form%3E%0A%3Cdiv%3E%7B%7B%20message%20%7D%7D%3C%2Fdiv%3E%0A`
    },
    'picker-controls': {
        title: 'Picker Controls Example',
        component: PickerControlsExample,
        tsSource: `import%20%7B%20Component%2C%20Input%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F%2F%20Vendor%0Aimport%20%7B%20FormUtils%2C%20PickerControl%2C%20EntityPickerResult%2C%20EntityPickerResults%20%7D%20from%20'novo-elements'%3B%0A%0A%2F%2F%20import%20%7B%20MockMeta%2C%20MockMetaHeaders%20%7D%20from%20'.%2FMockMeta'%3B%0A%0A%2F**%0A%20*%20%40title%20Picker%20Controls%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20selector%3A%20'picker-controls-example'%2C%0A%20%20templateUrl%3A%20'picker-controls-example.html'%2C%0A%20%20styleUrls%3A%20%5B'picker-controls-example.css'%5D%2C%0A%7D)%0Aexport%20class%20PickerControlsExample%20%7B%0A%20%20public%20singlePickerControl%3A%20any%3B%0A%20%20public%20multiPickerControl%3A%20any%3B%0A%20%20public%20multiPickerControlWithMaxlength%3A%20any%3B%0A%20%20public%20multiPickerControlWithMaxlengthAndPreselects%3A%20any%3B%0A%20%20public%20entityMultiPickerControl%3A%20any%3B%0A%20%20public%20rowMultiPickerControl%3A%20any%3B%0A%20%20public%20rowMultiPickerControlWithMaxlength%3A%20any%3B%0A%20%20public%20textPickerWithGetLabels%3A%20any%3B%0A%20%20public%20pickerForm%3A%20any%3B%0A%0A%20%20constructor(private%20formUtils%3A%20FormUtils)%20%7B%0A%20%20%20%20const%20fruits%20%3D%20%5B'Apples'%2C%20'Oranges'%2C%20'Bananas'%2C%20'Grapes'%5D%3B%0A%20%20%20%20const%20cities%20%3D%20%5B%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20id%3A%201%2C%0A%20%20%20%20%20%20%20%20name%3A%20'Boston'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20id%3A%202%2C%0A%20%20%20%20%20%20%20%20name%3A%20'New%20York'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20id%3A%203%2C%0A%20%20%20%20%20%20%20%20name%3A%20'Washington%20D.C.'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20id%3A%204%2C%0A%20%20%20%20%20%20%20%20name%3A%20'Orlando'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20id%3A%205%2C%0A%20%20%20%20%20%20%20%20name%3A%20'Houston'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20id%3A%206%2C%0A%20%20%20%20%20%20%20%20name%3A%20'Chicago'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%5D%3B%0A%20%20%20%20const%20states%20%3D%20%5B%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20value%3A%20'ME'%2C%0A%20%20%20%20%20%20%20%20label%3A%20'Maine'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20value%3A%20'MD'%2C%0A%20%20%20%20%20%20%20%20label%3A%20'Maryland'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20value%3A%20'MA'%2C%0A%20%20%20%20%20%20%20%20label%3A%20'Massachusetts'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20value%3A%20'MI'%2C%0A%20%20%20%20%20%20%20%20label%3A%20'Michigan'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20value%3A%20'MN'%2C%0A%20%20%20%20%20%20%20%20label%3A%20'Minnesota'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20value%3A%20'MS'%2C%0A%20%20%20%20%20%20%20%20label%3A%20'Mississippi'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20value%3A%20'MO'%2C%0A%20%20%20%20%20%20%20%20label%3A%20'Missouri'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20value%3A%20'MT'%2C%0A%20%20%20%20%20%20%20%20label%3A%20'Montana'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%5D%3B%0A%0A%20%20%20%20%2F%2F%20Picker%20controls%0A%20%20%20%20this.singlePickerControl%20%3D%20new%20PickerControl(%7B%0A%20%20%20%20%20%20key%3A%20'singlePicker'%2C%0A%20%20%20%20%20%20tooltip%3A%20'Single'%2C%0A%20%20%20%20%20%20label%3A%20'Single'%2C%0A%20%20%20%20%20%20config%3A%20%7B%20options%3A%20%5B'One'%2C%20'Two'%2C%20'Three'%5D%20%7D%2C%0A%20%20%20%20%7D)%3B%0A%20%20%20%20this.multiPickerControl%20%3D%20new%20PickerControl(%7B%0A%20%20%20%20%20%20key%3A%20'multiPicker'%2C%0A%20%20%20%20%20%20tooltip%3A%20'Multiple'%2C%0A%20%20%20%20%20%20label%3A%20'Multiple'%2C%0A%20%20%20%20%20%20multiple%3A%20true%2C%0A%20%20%20%20%20%20config%3A%20%7B%20options%3A%20%5B'One'%2C%20'Two'%2C%20'Three'%5D%2C%20type%3A%20'candidate'%20%7D%2C%0A%20%20%20%20%7D)%3B%0A%20%20%20%20this.multiPickerControlWithMaxlength%20%3D%20new%20PickerControl(%7B%0A%20%20%20%20%20%20key%3A%20'multiPickerWithMaxlength'%2C%0A%20%20%20%20%20%20tooltip%3A%20'Multiple%20With%20Maxlength'%2C%0A%20%20%20%20%20%20label%3A%20'Multiple%20With%20Maxlength'%2C%0A%20%20%20%20%20%20multiple%3A%20true%2C%0A%20%20%20%20%20%20maxlength%3A%202%2C%0A%20%20%20%20%20%20config%3A%20%7B%0A%20%20%20%20%20%20%20%20options%3A%20fruits%2C%0A%20%20%20%20%20%20%20%20type%3A%20'candidate'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%7D)%3B%0A%20%20%20%20this.multiPickerControlWithMaxlengthAndPreselects%20%3D%20new%20PickerControl(%7B%0A%20%20%20%20%20%20key%3A%20'multiPickerControlWithMaxlengthAndPreselects'%2C%0A%20%20%20%20%20%20tooltip%3A%20'Multiple%20With%20Maxlength%20and%20Preselects'%2C%0A%20%20%20%20%20%20label%3A%20'Multiple%20With%20Maxlength%20%26%20Preselects'%2C%0A%20%20%20%20%20%20multiple%3A%20true%2C%0A%20%20%20%20%20%20maxlength%3A%202%2C%0A%20%20%20%20%20%20config%3A%20%7B%0A%20%20%20%20%20%20%20%20options%3A%20fruits%2C%0A%20%20%20%20%20%20%20%20type%3A%20'candidate'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%7D)%3B%0A%20%20%20%20this.entityMultiPickerControl%20%3D%20new%20PickerControl(%7B%0A%20%20%20%20%20%20key%3A%20'entityMultiPicker'%2C%0A%20%20%20%20%20%20label%3A%20'Entities'%2C%0A%20%20%20%20%20%20required%3A%20true%2C%0A%20%20%20%20%20%20readOnly%3A%20false%2C%0A%20%20%20%20%20%20multiple%3A%20true%2C%0A%20%20%20%20%20%20tooltip%3A%20'Entities'%2C%0A%20%20%20%20%20%20config%3A%20%7B%0A%20%20%20%20%20%20%20%20resultsTemplate%3A%20EntityPickerResults%2C%0A%20%20%20%20%20%20%20%20previewTemplate%3A%20EntityPickerResult%2C%0A%20%20%20%20%20%20%20%20format%3A%20'%24title'%2C%0A%20%20%20%20%20%20%20%20options%3A%20%5B%0A%20%20%20%20%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20title%3A%20'Central%20Bank'%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20name%3A%20'Central%20Bank'%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20email%3A%20'new-bank-inquiries%40centralbank.com'%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20phone%3A%20'(651)%20555-1234'%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20address%3A%20%7B%20city%3A%20'Washington'%2C%20state%3A%20'DC'%20%7D%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20searchEntity%3A%20'ClientCorporation'%2C%0A%20%20%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20title%3A%20'Federal%20Bank'%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20name%3A%20'Federal%20Bank'%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20email%3A%20'info%40federalbank.com'%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20phone%3A%20'(545)%20555-1212'%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20address%3A%20%7B%20city%3A%20'Arlington'%2C%20state%3A%20'VA'%20%7D%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20searchEntity%3A%20'ClientCorporation'%2C%0A%20%20%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20title%3A%20'Aaron%20Burr'%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20firstName%3A%20'Aaron'%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20lastName%3A%20'Burr'%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20name%3A%20'Aaron%20Burr'%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20companyName%3A%20'Central%20Bank'%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20email%3A%20'aburr%40centralbank.com'%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20phone%3A%20'(333)%20555-3434'%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20address%3A%20%7B%20city%3A%20'Washington'%2C%20state%3A%20'DC'%20%7D%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20status%3A%20'Hold'%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20searchEntity%3A%20'ClientContact'%2C%0A%20%20%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20title%3A%20'Alexander%20Hamilton'%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20firstName%3A%20'Alexander'%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20lastName%3A%20'Hamilton'%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20name%3A%20'Alexander%20Hamilton'%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20companyName%3A%20'Federal%20Bank'%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20email%3A%20'ahamilton%40federalbank.com'%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20phone%3A%20'(333)%20555-2222'%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20address%3A%20%7B%20city%3A%20'Arlington'%2C%20state%3A%20'VA'%20%7D%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20status%3A%20'Active'%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20searchEntity%3A%20'ClientContact'%2C%0A%20%20%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20title%3A%20'Ben%20Franklin'%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20firstName%3A%20'Ben'%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20lastName%3A%20'Franklin'%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20name%3A%20'Ben%20Franklin'%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20email%3A%20'bfranklin%40gmail.com'%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20phone%3A%20'(654)%20525-2222'%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20address%3A%20%7B%20city%3A%20'Boston'%2C%20state%3A%20'MA'%20%7D%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20status%3A%20'Interviewing'%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20searchEntity%3A%20'Candidate'%2C%0A%20%20%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20title%3A%20'Thomas%20Jefferson'%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20firstName%3A%20'Thomas'%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20lastName%3A%20'Jefferson'%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20name%3A%20'Thomas%20Jefferson'%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20email%3A%20'tjefferson%40usa.com'%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20phone%3A%20'(123)%20542-1234'%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20address%3A%20%7B%20city%3A%20'Arlington'%2C%20state%3A%20'VA'%20%7D%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20status%3A%20'New%20Lead'%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20searchEntity%3A%20'Candidate'%2C%0A%20%20%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20%5D%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%7D)%3B%0A%20%20%20%20this.rowMultiPickerControl%20%3D%20new%20PickerControl(%7B%0A%20%20%20%20%20%20key%3A%20'rowMultiPickerControl'%2C%0A%20%20%20%20%20%20tooltip%3A%20'Multiple%20Rows'%2C%0A%20%20%20%20%20%20label%3A%20'Multiple%20Rows'%2C%0A%20%20%20%20%20%20multiple%3A%20true%2C%0A%20%20%20%20%20%20config%3A%20%7B%0A%20%20%20%20%20%20%20%20format%3A%20'%24name'%2C%0A%20%20%20%20%20%20%20%20options%3A%20cities%2C%0A%20%20%20%20%20%20%20%20type%3A%20'candidate'%2C%0A%20%20%20%20%20%20%20%20columns%3A%20%5B%0A%20%20%20%20%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20label%3A%20'Name'%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20data%3A%20(item%3A%20any)%3A%20string%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20return%20item%5B'label'%5D%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20label%3A%20'Id'%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20data%3A%20(item%3A%20any)%3A%20string%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20return%20item.value%5B'id'%5D%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20%5D%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%7D)%3B%0A%20%20%20%20this.rowMultiPickerControlWithMaxlength%20%3D%20new%20PickerControl(%7B%0A%20%20%20%20%20%20key%3A%20'rowMultiPickerControlWithMaxlength'%2C%0A%20%20%20%20%20%20tooltip%3A%20'Multiple%20Rows%20With%20Maxlength'%2C%0A%20%20%20%20%20%20label%3A%20'Multiple%20Rows%20With%20Maxlength'%2C%0A%20%20%20%20%20%20multiple%3A%20true%2C%0A%20%20%20%20%20%20maxlength%3A%204%2C%0A%20%20%20%20%20%20config%3A%20%7B%0A%20%20%20%20%20%20%20%20format%3A%20'%24name'%2C%0A%20%20%20%20%20%20%20%20options%3A%20cities%2C%0A%20%20%20%20%20%20%20%20type%3A%20'candidate'%2C%0A%20%20%20%20%20%20%20%20columns%3A%20%5B%0A%20%20%20%20%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20label%3A%20'Name'%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20data%3A%20(item%3A%20any)%3A%20string%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20return%20item%5B'label'%5D%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20label%3A%20'Id'%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20data%3A%20(item%3A%20any)%3A%20string%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20return%20item.value%5B'id'%5D%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20%5D%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%7D)%3B%0A%20%20%20%20this.textPickerWithGetLabels%20%3D%20new%20PickerControl(%7B%0A%20%20%20%20%20%20key%3A%20'textPickerWithGetLabels'%2C%0A%20%20%20%20%20%20tooltip%3A%20'Text%20Value%20Picker%20with%20getLabels()'%2C%0A%20%20%20%20%20%20label%3A%20'Text%20Value%20Picker%20with%20getLabels()'%2C%0A%20%20%20%20%20%20multiple%3A%20false%2C%0A%20%20%20%20%20%20config%3A%20%7B%0A%20%20%20%20%20%20%20%20field%3A%20'value'%2C%0A%20%20%20%20%20%20%20%20format%3A%20'%24label'%2C%0A%20%20%20%20%20%20%20%20options%3A%20states%2C%0A%20%20%20%20%20%20%20%20useGetLabels%3A%20true%2C%0A%20%20%20%20%20%20%20%20getLabels%3A%20(value)%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%20%20return%20new%20Promise((resolve)%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20states.forEach((state)%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20if%20(state.value%20%3D%3D%3D%20value)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20resolve(state)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D)%3B%0A%20%20%20%20%20%20%20%20%20%20%7D)%3B%0A%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%7D)%3B%0A%20%20%20%20const%20controls%20%3D%20%5B%0A%20%20%20%20%20%20this.singlePickerControl%2C%0A%20%20%20%20%20%20this.multiPickerControl%2C%0A%20%20%20%20%20%20this.entityMultiPickerControl%2C%0A%20%20%20%20%20%20this.multiPickerControlWithMaxlength%2C%0A%20%20%20%20%20%20this.multiPickerControlWithMaxlengthAndPreselects%2C%0A%20%20%20%20%20%20this.rowMultiPickerControl%2C%0A%20%20%20%20%20%20%2F%2F%20this.rowMultiPickerControlWithMaxlength%2C%0A%20%20%20%20%20%20this.textPickerWithGetLabels%2C%0A%20%20%20%20%5D%3B%0A%20%20%20%20formUtils.setInitialValues(controls%2C%20%7B%0A%20%20%20%20%20%20entityMultiPicker%3A%20%5B%0A%20%20%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20title%3A%20'Federal%20Bank'%2C%0A%20%20%20%20%20%20%20%20%20%20name%3A%20'Federal%20Bank'%2C%0A%20%20%20%20%20%20%20%20%20%20email%3A%20'info%40federalbank.com'%2C%0A%20%20%20%20%20%20%20%20%20%20phone%3A%20'(545)%20555-1212'%2C%0A%20%20%20%20%20%20%20%20%20%20address%3A%20%7B%20city%3A%20'Arlington'%2C%20state%3A%20'VA'%20%7D%2C%0A%20%20%20%20%20%20%20%20%20%20searchEntity%3A%20'ClientCorporation'%2C%0A%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%5D%2C%0A%20%20%20%20%20%20multiPickerControlWithMaxlengthAndPreselects%3A%20%5B'Oranges'%2C%20'Bananas'%5D%2C%0A%20%20%20%20%20%20rowMultiPickerControlWithMaxlength%3A%20%5B%0A%20%20%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20id%3A%201%2C%0A%20%20%20%20%20%20%20%20%20%20name%3A%20'Boston'%2C%0A%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20id%3A%205%2C%0A%20%20%20%20%20%20%20%20%20%20name%3A%20'Houston'%2C%0A%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20id%3A%206%2C%0A%20%20%20%20%20%20%20%20%20%20name%3A%20'Chicago'%2C%0A%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%5D%2C%0A%20%20%20%20%20%20textPickerWithGetLabels%3A%20'MD'%2C%0A%20%20%20%20%7D)%3B%0A%20%20%20%20this.pickerForm%20%3D%20formUtils.toFormGroup(controls)%3B%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3C!--Check%20out%20the%20FormDemo.js%20for%20more%20information!--%3E%0A%3Cnovo-form%20%5Bform%5D%3D%22pickerForm%22%3E%0A%20%20%20%20%3Cdiv%20class%3D%22novo-form-row%22%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-control%20%5Bform%5D%3D%22pickerForm%22%20%5Bcontrol%5D%3D%22singlePickerControl%22%3E%3C%2Fnovo-control%3E%0A%20%20%20%20%3C%2Fdiv%3E%0A%20%20%20%20%3Cdiv%20class%3D%22novo-form-row%22%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-control%20%5Bform%5D%3D%22pickerForm%22%20%5Bcontrol%5D%3D%22multiPickerControl%22%3E%3C%2Fnovo-control%3E%0A%20%20%20%20%3C%2Fdiv%3E%0A%20%20%20%20%3Cdiv%20class%3D%22novo-form-row%22%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-control%20%5Bform%5D%3D%22pickerForm%22%20%5Bcontrol%5D%3D%22entityMultiPickerControl%22%3E%3C%2Fnovo-control%3E%0A%20%20%20%20%3C%2Fdiv%3E%0A%20%20%20%20%3Cdiv%20class%3D%22novo-form-row%22%3E%0A%20%20%20%20%20%20%3Cnovo-control%20%5Bform%5D%3D%22pickerForm%22%20%5Bcontrol%5D%3D%22rowMultiPickerControl%22%3E%3C%2Fnovo-control%3E%0A%20%20%20%20%3C%2Fdiv%3E%0A%20%20%20%20%3Cdiv%20class%3D%22novo-form-row%22%3E%0A%20%20%20%20%20%20%3Cnovo-control%20%5Bform%5D%3D%22pickerForm%22%20%5Bcontrol%5D%3D%22multiPickerControlWithMaxlength%22%3E%3C%2Fnovo-control%3E%0A%20%20%20%20%3C%2Fdiv%3E%0A%20%20%20%20%3Cdiv%20class%3D%22novo-form-row%22%3E%0A%20%20%20%20%20%20%3Cnovo-control%20%5Bform%5D%3D%22pickerForm%22%20%5Bcontrol%5D%3D%22multiPickerControlWithMaxlengthAndPreselects%22%3E%3C%2Fnovo-control%3E%0A%20%20%20%20%3C%2Fdiv%3E%0A%20%20%20%20%3C!--%20Row%20picker%20with%20maxlength%20is%20implemented%20but%20currently%20turned%20off%20because%20it%20is%20not%20being%20used%20and%20there%20was%20no%20UI%20created%20for%20it.%0A%20%20%20%20%20%20%20%20%20To%20turn%20it%20back%20on%2C%20add%20'%5Bmaxlength%5D%3D%22control%3F.maxlength%22'%20to%20ControlTemplate.ts%0A%20%20%20%20%3Cdiv%20class%3D%22novo-form-row%22%3E%0A%20%20%20%20%20%20%3Cnovo-control%20%5Bform%5D%3D%22pickerForm%22%20%5Bcontrol%5D%3D%22rowMultiPickerControlWithMaxlength%22%3E%3C%2Fnovo-control%3E%0A%20%20%20%20%3C%2Fdiv--%3E%0A%20%20%20%20%3Cdiv%20class%3D%22novo-form-row%22%3E%0A%20%20%20%20%20%20%3Cnovo-control%20%5Bform%5D%3D%22pickerForm%22%20%5Bcontrol%5D%3D%22textPickerWithGetLabels%22%3E%3C%2Fnovo-control%3E%0A%20%20%20%20%3C%2Fdiv%3E%0A%3C%2Fnovo-form%3E%0A%3Cdiv%20class%3D%22final-value%22%3EValue%3A%20%7B%7BpickerForm.value%20%7C%20json%7D%7D%3C%2Fdiv%3E%0A`
    },
    'text-based-controls': {
        title: 'Text Based Controls Example',
        component: TextBasedControlsExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F%2F%20Vendor%0Aimport%20%7B%20FormUtils%2C%20TextBoxControl%2C%20QuickNoteControl%2C%20TextAreaControl%2C%20AceEditorControl%20%7D%20from%20'novo-elements'%3B%0A%0A%2F%2F%20import%20%7B%20MockMeta%2C%20MockMetaHeaders%20%7D%20from%20'.%2FMockMeta'%3B%0A%0A%2F**%0A%20*%20%40title%20Text%20Based%20Controls%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20selector%3A%20'text-based-controls-example'%2C%0A%20%20templateUrl%3A%20'text-based-controls-example.html'%2C%0A%20%20styleUrls%3A%20%5B'text-based-controls-example.css'%5D%2C%0A%7D)%0Aexport%20class%20TextBasedControlsExample%20%7B%0A%20%20public%20quickNoteConfig%3A%20any%3B%0A%20%20public%20textControl%3A%20any%3B%0A%20%20public%20emailControl%3A%20any%3B%0A%20%20public%20numberControl%3A%20any%3B%0A%20%20public%20currencyControl%3A%20any%3B%0A%20%20public%20aceEditorControl%3A%20any%3B%0A%20%20public%20floatControl%3A%20any%3B%0A%20%20public%20percentageControl%3A%20any%3B%0A%20%20public%20quickNoteControl%3A%20any%3B%0A%20%20public%20textAreaControl%3A%20any%3B%0A%20%20public%20textForm%3A%20any%3B%0A%0A%20%20constructor(private%20formUtils%3A%20FormUtils)%20%7B%0A%20%20%20%20%2F%2F%20Quick%20note%20config%3B%0A%20%20%20%20this.quickNoteConfig%20%3D%20%7B%0A%20%20%20%20%20%20triggers%3A%20%7B%0A%20%20%20%20%20%20%20%20tags%3A%20'%40'%2C%0A%20%20%20%20%20%20%20%20references%3A%20'%23'%2C%0A%20%20%20%20%20%20%20%20boos%3A%20'%5E'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20options%3A%20%7B%0A%20%20%20%20%20%20%20%20tags%3A%20%5B'First'%2C%20'Second'%5D%2C%0A%20%20%20%20%20%20%20%20references%3A%20%5B'Third'%2C%20'Fourth'%5D%2C%0A%20%20%20%20%20%20%20%20boos%3A%20%5B'Test'%5D%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20renderer%3A%20%7B%0A%20%20%20%20%20%20%20%20tags%3A%20(symbol%2C%20item)%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%20%20return%20%60%3Ca%20class%3D%22tag%22%3E%24%7Bsymbol%7D%24%7Bitem.label%7D%3C%2Fa%3E%60%3B%0A%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20references%3A%20(symbol%2C%20item)%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%20%20return%20%60%3Ca%20class%3D%22tag%22%3E%24%7Bsymbol%7D%24%7Bitem.label%7D%3C%2Fa%3E%60%3B%0A%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20boos%3A%20(symbol%2C%20item)%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%20%20return%20%60%3Cstrong%3E%24%7Bsymbol%7D%24%7Bitem.label%7D%3C%2Fstrong%3E%60%3B%0A%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%7D%3B%0A%20%20%20%20%2F%2F%20Text-based%20Controls%0A%20%20%20%20this.textControl%20%3D%20new%20TextBoxControl(%7B%0A%20%20%20%20%20%20key%3A%20'text'%2C%0A%20%20%20%20%20%20label%3A%20'Text%20Box'%2C%0A%20%20%20%20%20%20tooltip%3A%20'Textbox'%2C%0A%20%20%20%20%20%20readOnly%3A%20true%2C%0A%20%20%20%20%20%20value%3A%20'HI'%2C%0A%20%20%20%20%20%20required%3A%20true%2C%0A%20%20%20%20%7D)%3B%0A%20%20%20%20this.textAreaControl%20%3D%20new%20TextAreaControl(%7B%0A%20%20%20%20%20%20key%3A%20'textarea'%2C%0A%20%20%20%20%20%20label%3A%20'Text%20Area'%2C%0A%20%20%20%20%20%20tooltip%3A%20'Text%20Area'%2C%0A%20%20%20%20%20%20value%3A%0A%20%20%20%20%20%20%20%20'Bro%20ipsum%20dolor%20sit%20amet%20yard%20sale%20saddle%20pipe%2C%20poaching%20cork%20360%20punter%20ACL%20back%20country%20cornice%20Whistler.%20%20Avie%20Ski%20taco%20mitt%2C%20manny%20first%20tracks%20yard%20sale%20caballerial%20heli%20fatty.%20%20Epic%20dope%20grab%2C%20brain%20bucket%20japan%20air%20wack%20bowl%20%20mute%20heli%20corn%20Snowboard%20Whistler%20giblets%20table%20top.%20%20Crunchy%20Snowboard%20washboard%20line%20grab%20reverse%20camber.%20%20Bump%20epic%20granny%20gear%20heli%20sketching%20wheelie%20huckfest%20face%20plant%20crank%20pow%20pow%20chain%20ring%20%20dirtbag%20washboard.%20%20Flow%20endo%20ski%20bum%20sucker%20hole%2C%20death%20cookies%20manny%20schwag%20pipe.%20%20Dope%20heli%20stomp%20yard%20sale%2C%20saddle%20shreddin%20booter%20gear%20jammer%20grom%20bonk%20OTB%20brain%20bucket%20bonk%20japan%20air%20Whistler.Clipless%20pow%20pow%20pow%2C%20core%20shot%20corn%20butter%20bomb%20hole%20glades%20face%20plant%20dust%20on%20crust.%20%20Poaching%20park%20face%20shots%20bump%2C%20Bike%20cornice%20death%20cookies.%20%20Avie%20cruiser%20sucker%20hole%20face%20plant%20switch.%20%20ACL%20snake%20bite%20bonk%2C%20twin%20tip%20euro%20rig%20nose%20press%20McTwist.%20%20Ripping%20skinny%20trucks%20shreddin.%20%20Apres%20pow%20line%20euro%20sharkbite%20gapers%20lid.Snake%20bite%20derailleur%20wheels%20bomb%20hole.%20%20Huck%20apres%20steeps%20BB%20first%20tracks%20bowl%20%20daffy%20park%20euro%20park%20rat%20euro.%20%20North%20shore%20death%20cookies%20snake%20bite%20carve%2C%20freshies%20dirtbag%20huck%20reverse%20camber%20hellflip%20frozen%20chicken%20heads%20apres%20taco%20glove%20gnar%20face%20shots%20bro.%20%20Ride%20flow%20twister%20cornice%20afterbang%20saddle%20first%20tracks%20rig%20berm%20bro%20face%20shots.%20%20Ride%20stoked%20wack%20park%20twin%20tip%20trucks%20chillax%20shuttle%20Whistler%20gondy%20laps.%20%20Grind%20berm%20schwag%2C%20table%20top%20face%20shots%20steed%20liftie%20afterbang%20taco%20glove%20frozen%20chicken%20heads%20free%20ride%20clean%20huck.%20%20Rock-ectomy%20white%20room%20nose%20press%20avie.Frozen%20chicken%20heads%20gondy%20bail%20travel%20huckfest%20big%20ring%20phat%20clean.%20%20Taco%20couloir%20piste%20derailleur%20wack%20scream%20backside%20steeps%20groomer%20glades%20pipe%20gondy%20switch%20skid%20lid.%20%20Brain%20bucket%20betty%20bowl%2C%20moguls%20gondy%20Whistler%20air%20hardtail.%20%20Flow%20euro%20granny%20gear%2C%20McTwist%20cruiser%20bonk%20grom%20chain%20suck.%20%20Trucks%20line%20huck%2C%20stomp%20ripper%20washboard%20euro%20corduroy%20death%20cookies%20yard%20sale%20dope%20face%20plant%20shreddin%20chain%20suck.ACL%20T-bar%20hellflip%2C%20first%20tracks%20gondy%20hardtail%20rip%20wack%20dust%20on%20crust%20schwag%20frontside%20couloir%20laps%20presta%20backside.%20%20Road%20rash%20Ski%20ski%20bum%20gnar%20wack%20flow%20carve%20lid.%20%20Nose%20white%20room%20ollie%20rail%20table%20top%20grom%20back%20country%20washboard%20dust%20on%20crust%20chillax%20gear%20jammer%20bro%20stomp%20stoked.%20%20Lid%20wheels%20nose%20press%20frontside%2C%20park%20ACL%20dirtbag%20huck%20epic%20bowl%20%20taco%20glove%20OTB.%20%20Fatty%20mute%20whip%20stunt%2C%20Whistler%20McTwist%20stoked%20Bike.%20%20Endo%20brain%20bucket%20crank%20dust%20on%20crust%20back%20country%20line%20ollie%20gapers%20afterbang%20bump%20stoked%20taco%20road%20rash%20granny%20gear.%20%20Deck%20dirtbag%20360%20gnar%20snake%20bite%20couloir%20Bike%20corduroy%20frontside%20crank%20lid%20bro.Air%20tele%20schwag%20ollie%2C%20hardtail%20betty%20crunchy%20epic%20%20face%20shots.%20%20Travel%20flowy%20misty%20huck%20Bike%20180%20schwag%20drop%20hellflip%20ripping%20bunny%20slope%20carbon%20roadie%20tele%20bail.%20%20Cornice%20sharkbite%20360%20frozen%20chicken%20heads%20dope%20hellflip%20clipless.%20%20Switch%20sketching%20grind%20brain%20bucket%20stunt%20taco%20daffy%20OTB%20ride%20liftie%20brain%20bucket%20air%20huckfest%20park%20360.'%2C%0A%20%20%20%20%7D)%3B%0A%20%20%20%20this.emailControl%20%3D%20new%20TextBoxControl(%7B%20type%3A%20'email'%2C%20key%3A%20'email'%2C%20label%3A%20'Email'%2C%20tooltip%3A%20'Email'%20%7D)%3B%0A%20%20%20%20this.numberControl%20%3D%20new%20TextBoxControl(%7B%20type%3A%20'number'%2C%20key%3A%20'number'%2C%20tooltip%3A%20'Number'%2C%20label%3A%20'Number'%20%7D)%3B%0A%20%20%20%20this.currencyControl%20%3D%20new%20TextBoxControl(%7B%0A%20%20%20%20%20%20type%3A%20'currency'%2C%0A%20%20%20%20%20%20key%3A%20'currency'%2C%0A%20%20%20%20%20%20tooltip%3A%20'Currency'%2C%0A%20%20%20%20%20%20label%3A%20'Currency'%2C%0A%20%20%20%20%20%20currencyFormat%3A%20'%24%20USD'%2C%0A%20%20%20%20%7D)%3B%0A%20%20%20%20this.floatControl%20%3D%20new%20TextBoxControl(%7B%20type%3A%20'float'%2C%20key%3A%20'float'%2C%20tooltip%3A%20'Float'%2C%20label%3A%20'Float'%20%7D)%3B%0A%20%20%20%20this.percentageControl%20%3D%20new%20TextBoxControl(%7B%0A%20%20%20%20%20%20type%3A%20'percentage'%2C%0A%20%20%20%20%20%20key%3A%20'percentage'%2C%0A%20%20%20%20%20%20tooltip%3A%20'Percent'%2C%0A%20%20%20%20%20%20label%3A%20'Percent'%2C%0A%20%20%20%20%20%20required%3A%20true%2C%0A%20%20%20%20%7D)%3B%0A%20%20%20%20this.quickNoteControl%20%3D%20new%20QuickNoteControl(%7B%0A%20%20%20%20%20%20key%3A%20'note'%2C%0A%20%20%20%20%20%20label%3A%20'Note'%2C%0A%20%20%20%20%20%20config%3A%20this.quickNoteConfig%2C%0A%20%20%20%20%20%20required%3A%20true%2C%0A%20%20%20%20%20%20tooltip%3A%20'Quicknote'%2C%0A%20%20%20%20%7D)%3B%0A%20%20%20%20this.aceEditorControl%20%3D%20new%20AceEditorControl(%7B%20key%3A%20'ace'%2C%20label%3A%20'CODE'%2C%20tooltip%3A%20'CODE'%2C%20value%3A%20'var%20i%20%3D%200%3B'%20%7D)%3B%0A%20%20%20%20this.textForm%20%3D%20formUtils.toFormGroup(%5B%0A%20%20%20%20%20%20this.textControl%2C%0A%20%20%20%20%20%20this.emailControl%2C%0A%20%20%20%20%20%20this.textAreaControl%2C%0A%20%20%20%20%20%20this.numberControl%2C%0A%20%20%20%20%20%20this.currencyControl%2C%0A%20%20%20%20%20%20this.floatControl%2C%0A%20%20%20%20%20%20this.percentageControl%2C%0A%20%20%20%20%20%20this.quickNoteControl%2C%0A%20%20%20%20%20%20this.aceEditorControl%2C%0A%20%20%20%20%5D)%3B%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3C!--Check%20out%20the%20FormDemo.js%20for%20more%20information!--%3E%0A%3Cbutton%20theme%3D%22secondary%22%20(click)%3D%22form.showAllFields()%22%3EShow%20All%20Fields%3C%2Fbutton%3E%0A%3Cbutton%20theme%3D%22secondary%22%20(click)%3D%22form.showOnlyRequired(false)%22%3EShow%20Required%20Fields%3C%2Fbutton%3E%0A%3Cbr%2F%3E%0A%3Cbr%2F%3E%0A%3Cnovo-form%20%5Bform%5D%3D%22textForm%22%20%23form%3E%0A%20%20%20%20%3Cdiv%20class%3D%22novo-form-row%22%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-control%20%5Bform%5D%3D%22textForm%22%20%5Bcontrol%5D%3D%22textControl%22%3E%3C%2Fnovo-control%3E%0A%20%20%20%20%3C%2Fdiv%3E%0A%20%20%20%20%3Cdiv%20class%3D%22novo-form-row%22%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-control%20%5BautoFocus%5D%3D%22true%22%20%5Bform%5D%3D%22textForm%22%20%5Bcontrol%5D%3D%22emailControl%22%3E%3C%2Fnovo-control%3E%0A%20%20%20%20%3C%2Fdiv%3E%0A%20%20%20%20%3Cdiv%20class%3D%22novo-form-row%22%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-control%20%5Bform%5D%3D%22textForm%22%20%5Bcontrol%5D%3D%22numberControl%22%3E%3C%2Fnovo-control%3E%0A%20%20%20%20%3C%2Fdiv%3E%0A%20%20%20%20%3Cdiv%20class%3D%22novo-form-row%22%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-control%20%5Bform%5D%3D%22textForm%22%20%5Bcontrol%5D%3D%22currencyControl%22%3E%3C%2Fnovo-control%3E%0A%20%20%20%20%3C%2Fdiv%3E%0A%20%20%20%20%3Cdiv%20class%3D%22novo-form-row%22%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-control%20%5Bform%5D%3D%22textForm%22%20%5Bcontrol%5D%3D%22floatControl%22%3E%3C%2Fnovo-control%3E%0A%20%20%20%20%3C%2Fdiv%3E%0A%20%20%20%20%3Cdiv%20class%3D%22novo-form-row%22%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-control%20%5Bform%5D%3D%22textForm%22%20%5Bcontrol%5D%3D%22percentageControl%22%3E%3C%2Fnovo-control%3E%0A%20%20%20%20%3C%2Fdiv%3E%0A%20%20%20%20%3Cdiv%20class%3D%22novo-form-row%22%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-control%20%5Bform%5D%3D%22textForm%22%20%5Bcontrol%5D%3D%22textAreaControl%22%3E%3C%2Fnovo-control%3E%0A%20%20%20%20%3C%2Fdiv%3E%0A%20%20%20%20%3Cdiv%20class%3D%22novo-form-row%22%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-control%20%5Bform%5D%3D%22textForm%22%20%5Bcontrol%5D%3D%22quickNoteControl%22%3E%3C%2Fnovo-control%3E%0A%20%20%20%20%3C%2Fdiv%3E%0A%20%20%20%20%3Cdiv%20class%3D%22novo-form-row%22%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-control%20%5Bform%5D%3D%22textForm%22%20%5Bcontrol%5D%3D%22aceEditorControl%22%3E%3C%2Fnovo-control%3E%0A%20%20%20%20%3C%2Fdiv%3E%0A%3C%2Fnovo-form%3E%0A%3Cdiv%20class%3D%22final-value%22%3EValue%3A%20%7B%7BtextForm.value%20%7C%20json%7D%7D%3C%2Fdiv%3E%0A`
    },
    'updating-form': {
        title: 'Updating Form Example',
        component: UpdatingFormExample,
        tsSource: `import%20%7B%20Component%2C%20Input%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F%2F%20Vendor%0Aimport%20%7B%20FormUtils%2C%20TextBoxControl%2C%20CheckboxControl%2C%20FileControl%2C%20PickerControl%20%7D%20from%20'novo-elements'%3B%0A%0A%2F**%0A%20*%20%40title%20Updating%20Form%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20selector%3A%20'updating-form-example'%2C%0A%20%20templateUrl%3A%20'updating-form-example.html'%2C%0A%20%20styleUrls%3A%20%5B'updating-form-example.css'%5D%2C%0A%7D)%0Aexport%20class%20UpdatingFormExample%20%7B%0A%20%20public%20textControl%3A%20any%3B%0A%20%20public%20percentageControl%3A%20any%3B%0A%20%20public%20checkControl%3A%20any%3B%0A%20%20public%20fileControl%3A%20any%3B%0A%20%20public%20singlePickerControl%3A%20any%3B%0A%20%20public%20updatingForm%3A%20any%3B%0A%20%20public%20updatingFormControls%3A%20any%5B%5D%3B%0A%20%20public%20required%3A%20boolean%20%3D%20false%3B%0A%20%20public%20disabled%3A%20boolean%20%3D%20true%3B%0A%0A%20%20constructor(private%20formUtils%3A%20FormUtils)%20%7B%0A%20%20%20%20%2F%2F%20Text-based%20Controls%0A%20%20%20%20this.textControl%20%3D%20new%20TextBoxControl(%7B%0A%20%20%20%20%20%20key%3A%20'text'%2C%0A%20%20%20%20%20%20label%3A%20'Text%20Box'%2C%0A%20%20%20%20%20%20tooltip%3A%20'Textbox'%2C%0A%20%20%20%20%20%20readOnly%3A%20true%2C%0A%20%20%20%20%20%20value%3A%20'HI'%2C%0A%20%20%20%20%20%20required%3A%20true%2C%0A%20%20%20%20%7D)%3B%0A%20%20%20%20this.percentageControl%20%3D%20new%20TextBoxControl(%7B%0A%20%20%20%20%20%20type%3A%20'percentage'%2C%0A%20%20%20%20%20%20key%3A%20'percentage'%2C%0A%20%20%20%20%20%20tooltip%3A%20'Percent'%2C%0A%20%20%20%20%20%20label%3A%20'Percent'%2C%0A%20%20%20%20%20%20required%3A%20true%2C%0A%20%20%20%20%7D)%3B%0A%0A%20%20%20%20%2F%2F%20Check%20box%20controls%0A%20%20%20%20this.checkControl%20%3D%20new%20CheckboxControl(%7B%20key%3A%20'check'%2C%20tooltip%3A%20'Checkbox'%2C%20label%3A%20'Checkbox'%2C%20checkboxLabel%3A%20'Checkbox'%20%7D)%3B%0A%0A%20%20%20%20%2F%2F%20Picker%20controls%0A%20%20%20%20this.singlePickerControl%20%3D%20new%20PickerControl(%7B%0A%20%20%20%20%20%20key%3A%20'singlePicker'%2C%0A%20%20%20%20%20%20tooltip%3A%20'Single'%2C%0A%20%20%20%20%20%20label%3A%20'Single'%2C%0A%20%20%20%20%20%20config%3A%20%7B%20options%3A%20%5B'One'%2C%20'Two'%2C%20'Three'%5D%20%7D%2C%0A%20%20%20%20%7D)%3B%0A%20%20%20%20%2F%2F%20File%20input%20controls%0A%20%20%20%20this.fileControl%20%3D%20new%20FileControl(%7B%20key%3A%20'file'%2C%20name%3A%20'myfile'%2C%20label%3A%20'File'%2C%20tooltip%3A%20'Files%20Control'%20%7D)%3B%0A%0A%20%20%20%20%2F%2F%20Updating%20form%0A%20%20%20%20this.updatingFormControls%20%3D%20%5Bthis.textControl%2C%20this.percentageControl%2C%20this.checkControl%2C%20this.singlePickerControl%2C%20this.fileControl%5D%3B%0A%20%20%20%20this.updatingForm%20%3D%20formUtils.toFormGroup(this.updatingFormControls)%3B%0A%20%20%7D%0A%0A%20%20toggleEnabled()%20%7B%0A%20%20%20%20this.disabled%20%3D%20!this.disabled%3B%0A%20%20%20%20Object.keys(this.updatingForm.controls).forEach((key)%20%3D%3E%20%7B%0A%20%20%20%20%20%20if%20(this.disabled)%20%7B%0A%20%20%20%20%20%20%20%20this.updatingForm.controls%5Bkey%5D.enable()%3B%0A%20%20%20%20%20%20%7D%20else%20%7B%0A%20%20%20%20%20%20%20%20this.updatingForm.controls%5Bkey%5D.disable()%3B%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%7D)%3B%0A%20%20%7D%0A%0A%20%20toggleRequired()%20%7B%0A%20%20%20%20this.required%20%3D%20!this.required%3B%0A%20%20%20%20Object.keys(this.updatingForm.controls).forEach((key)%20%3D%3E%20%7B%0A%20%20%20%20%20%20this.updatingForm.controls%5Bkey%5D.setRequired(this.required)%3B%0A%20%20%20%20%7D)%3B%0A%20%20%7D%0A%0A%20%20markAsInvalid()%20%7B%0A%20%20%20%20Object.keys(this.updatingForm.controls).forEach((key)%20%3D%3E%20%7B%0A%20%20%20%20%20%20this.updatingForm.controls%5Bkey%5D.markAsInvalid('Custom%20Error!')%3B%0A%20%20%20%20%7D)%3B%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cbutton%20theme%3D%22secondary%22%20(click)%3D%22toggleEnabled()%22%3EToggle%20Enabled%3C%2Fbutton%3E%0A%3Cbutton%20theme%3D%22secondary%22%20(click)%3D%22toggleRequired()%22%3EToggle%20Required%3C%2Fbutton%3E%0A%3Cbutton%20theme%3D%22secondary%22%20(click)%3D%22markAsInvalid()%22%3EMark%20As%20Invalid%3C%2Fbutton%3E%0A%3Cbr%2F%3E%3Cbr%2F%3E%0A%3Cnovo-dynamic-form%20layout%3D%22vertical%22%20%5Bcontrols%5D%3D%22updatingFormControls%22%20%5B(form)%5D%3D%22updatingForm%22%20%23updatingFormRef%3E%3C%2Fnovo-dynamic-form%3E%0A%3Cdiv%20class%3D%22final-value%22%3EValid%3A%20%7B%7BupdatingFormRef.isValid%20%7C%20json%7D%7D%3C%2Fdiv%3E%0A%3Cdiv%20class%3D%22final-value%22%3EValues%3A%20%7B%7BupdatingFormRef.values%20%7C%20json%7D%7D%3C%2Fdiv%3E%0A%3Cdiv%20class%3D%22final-value%22%3EUpdated%20Values%3A%20%7B%7BupdatingFormRef.updatedValues()%20%7C%20json%7D%7D%3C%2Fdiv%3E%0A`
    },
    'vertical-dynamic-form': {
        title: 'Vertical Dynamic Form Example',
        component: VerticalDynamicFormExample,
        tsSource: `import%20%7B%20Component%2C%20Input%20%7D%20from%20'%40angular%2Fcore'%3B%0Aimport%20%7B%20FormUtils%20%7D%20from%20'novo-elements'%3B%0Aimport%20%7B%20MockMeta%2C%20MockMetaHeaders%20%7D%20from%20'..%2FMockMeta'%3B%0A%0A%2F**%0A%20*%20%40title%20Vertical%20Dynamic%20Form%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20selector%3A%20'vertical-dynamic-form-example'%2C%0A%20%20templateUrl%3A%20'vertical-dynamic-form-example.html'%2C%0A%20%20styleUrls%3A%20%5B'vertical-dynamic-form-example.css'%5D%2C%0A%7D)%0Aexport%20class%20VerticalDynamicFormExample%20%7B%0A%20%20public%20dynamicVertical%3A%20any%3B%0A%20%20public%20dynamicVerticalForm%3A%20any%3B%0A%20%20public%20fieldsets%3A%20Array%3Cany%3E%3B%0A%20%20public%20fieldsetsForm%3A%20any%3B%0A%0A%20%20constructor(private%20formUtils%3A%20FormUtils)%20%7B%0A%20%20%20%20%2F%2F%20Dynamic%0A%20%20%20%20this.dynamicVertical%20%3D%20formUtils.toControls(MockMeta%2C%20'%24%20USD'%2C%20%7B%7D%2C%20%7B%20token%3A%20'TOKEN'%2C%20military%3A%20true%20%7D)%3B%0A%20%20%20%20formUtils.setInitialValues(this.dynamicVertical%2C%20%7B%20number%3A%200%2C%20firstName%3A%20'Bobby%20Flay'%20%7D)%3B%0A%20%20%20%20this.dynamicVerticalForm%20%3D%20formUtils.toFormGroup(this.dynamicVertical)%3B%0A%20%20%7D%0A%0A%20%20save(form)%20%7B%0A%20%20%20%20if%20(!form.isValid)%20%7B%0A%20%20%20%20%20%20form.showOnlyRequired(true)%3B%0A%20%20%20%20%7D%20else%20%7B%0A%20%20%20%20%20%20alert('SAVING')%3B%0A%20%20%20%20%7D%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cbutton%20theme%3D%22secondary%22%20(click)%3D%22nomyform.showAllFields()%22%3EShow%20All%20Fields%3C%2Fbutton%3E%0A%3Cbutton%20theme%3D%22secondary%22%20(click)%3D%22nomyform.showOnlyRequired(false)%22%3EShow%20Required%20Fields%3C%2Fbutton%3E%0A%3Cnovo-dynamic-form%20layout%3D%22vertical%22%20class%3D%22dynamic%22%20%5Bcontrols%5D%3D%22dynamicVertical%22%20%5B(form)%5D%3D%22dynamicVerticalForm%22%20%23nomyform%3E%0A%20%20%3Cng-template%20novoTemplate%3D%22custom-demo-component%22%20let-control%20let-form%3D%22form%22%3E%0A%20%20%20%20%3Ccustom-demo-control-example%20%5Bcontrol%5D%3D%22control%22%20%5Bform%5D%3D%22form%22%3E%3C%2Fcustom-demo-control-example%3E%0A%20%20%3C%2Fng-template%3E%0A%3C%2Fnovo-dynamic-form%3E%0A%3Cdiv%20class%3D%22final-value%22%3EValid%3A%20%7B%7Bnomyform.isValid%20%7C%20json%7D%7D%3C%2Fdiv%3E%0A%3Cdiv%20class%3D%22final-value%22%3EValues%3A%20%7B%7Bnomyform.values%20%7C%20json%7D%7D%3C%2Fdiv%3E%0A%3Cdiv%20class%3D%22final-value%22%3EUpdated%20Values%3A%20%7B%7Bnomyform.updatedValues()%20%7C%20json%7D%7D%3C%2Fdiv%3E%0A`
    },
    'basic-multi-picker': {
        title: 'Basic Multi Picker Example',
        component: BasicMultiPickerExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0Aimport%20%7B%20ChecklistPickerResults%20%7D%20from%20'novo-elements'%3B%0A%0A%2F**%0A%20*%20%40title%20Basic%20Multi%20Picker%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20selector%3A%20'basic-multi-picker-example'%2C%0A%20%20templateUrl%3A%20'basic-multi-picker-example.html'%2C%0A%20%20styleUrls%3A%20%5B'basic-multi-picker-example.css'%5D%2C%0A%7D)%0Aexport%20class%20BasicMultiPickerExample%20%7B%0A%20%20placeholder%3A%20string%20%3D%20'Select...'%3B%0A%20%20value%3A%20any%20%3D%20%7B%20states%3A%20%5B'Alabama'%5D%2C%20collaborators%3A%20%5B1%2C%202%2C%203%2C%204%5D%20%7D%3B%0A%20%20types%3A%20any%20%3D%20%5B%7B%20value%3A%20'states'%2C%20singular%3A%20'state'%20%7D%2C%20%7B%20value%3A%20'collaborators'%2C%20singular%3A%20'collaborator'%20%7D%5D%3B%0A%20%20staticDemo%3A%20any%3B%0A%0A%20%20constructor()%20%7B%0A%20%20%20%20const%20states%20%3D%20%5B%0A%20%20%20%20%20%20'Alabama'%2C%0A%20%20%20%20%20%20'Alaska'%2C%0A%20%20%20%20%20%20'Arizona'%2C%0A%20%20%20%20%20%20'Arkansas'%2C%0A%20%20%20%20%20%20'California'%2C%0A%20%20%20%20%20%20'Colorado'%2C%0A%20%20%20%20%20%20'Connecticut'%2C%0A%20%20%20%20%20%20'Delaware'%2C%0A%20%20%20%20%20%20'Florida'%2C%0A%20%20%20%20%20%20'Georgia'%2C%0A%20%20%20%20%20%20'Hawaii'%2C%0A%20%20%20%20%20%20'Idaho'%2C%0A%20%20%20%20%20%20'Illinois'%2C%0A%20%20%20%20%20%20'Indiana'%2C%0A%20%20%20%20%20%20'Iowa'%2C%0A%20%20%20%20%20%20'Kansas'%2C%0A%20%20%20%20%20%20'Kentucky'%2C%0A%20%20%20%20%20%20'Louisiana'%2C%0A%20%20%20%20%20%20'Maine'%2C%0A%20%20%20%20%20%20'Maryland'%2C%0A%20%20%20%20%20%20'Massachusetts'%2C%0A%20%20%20%20%20%20'Michigan'%2C%0A%20%20%20%20%20%20'Minnesota'%2C%0A%20%20%20%20%20%20'Mississippi'%2C%0A%20%20%20%20%20%20'Missouri'%2C%0A%20%20%20%20%20%20'Montana'%2C%0A%20%20%20%20%20%20'Nebraska'%2C%0A%20%20%20%20%20%20'Nevada'%2C%0A%20%20%20%20%20%20'New%20Hampshire'%2C%0A%20%20%20%20%20%20'New%20Jersey'%2C%0A%20%20%20%20%20%20'New%20Mexico'%2C%0A%20%20%20%20%20%20'New%20York'%2C%0A%20%20%20%20%20%20'North%20Dakota'%2C%0A%20%20%20%20%20%20'North%20Carolina'%2C%0A%20%20%20%20%20%20'Ohio'%2C%0A%20%20%20%20%20%20'Oklahoma'%2C%0A%20%20%20%20%20%20'Oregon'%2C%0A%20%20%20%20%20%20'Pennsylvania'%2C%0A%20%20%20%20%20%20'Rhode%20Island'%2C%0A%20%20%20%20%20%20'South%20Carolina'%2C%0A%20%20%20%20%20%20'South%20Dakota'%2C%0A%20%20%20%20%20%20'Tennessee'%2C%0A%20%20%20%20%20%20'Texas'%2C%0A%20%20%20%20%20%20'Utah'%2C%0A%20%20%20%20%20%20'Vermont'%2C%0A%20%20%20%20%20%20'Virginia'%2C%0A%20%20%20%20%20%20'Washington'%2C%0A%20%20%20%20%20%20'West%20Virginia'%2C%0A%20%20%20%20%20%20'Wisconsin'%2C%0A%20%20%20%20%20%20'Wyoming'%2C%0A%20%20%20%20%5D%3B%0A%20%20%20%20const%20collaborators%20%3D%20%5B%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20id%3A%201%2C%0A%20%20%20%20%20%20%20%20firstName%3A%20'Brian'%2C%0A%20%20%20%20%20%20%20%20lastName%3A%20'Kimball'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20id%3A%202%2C%0A%20%20%20%20%20%20%20%20firstName%3A%20'Josh'%2C%0A%20%20%20%20%20%20%20%20lastName%3A%20'Godi'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20id%3A%203%2C%0A%20%20%20%20%20%20%20%20firstName%3A%20'Alec'%2C%0A%20%20%20%20%20%20%20%20lastName%3A%20'Sibilia'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20id%3A%204%2C%0A%20%20%20%20%20%20%20%20firstName%3A%20'Kameron'%2C%0A%20%20%20%20%20%20%20%20lastName%3A%20'Sween'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%5D%3B%0A%20%20%20%20this.staticDemo%20%3D%20%7B%0A%20%20%20%20%20%20options%3A%20%5B%0A%20%20%20%20%20%20%20%20%7B%20type%3A%20'collaborators'%2C%20data%3A%20collaborators%2C%20format%3A%20'%24firstName%20%24lastName'%2C%20field%3A%20'id'%20%7D%2C%0A%20%20%20%20%20%20%20%20%7B%20type%3A%20'states'%2C%20data%3A%20states%20%7D%2C%0A%20%20%20%20%20%20%5D%2C%0A%20%20%20%20%20%20resultsTemplate%3A%20ChecklistPickerResults%2C%0A%20%20%20%20%20%20selectAllOption%3A%20true%2C%0A%20%20%20%20%7D%3B%0A%20%20%7D%0A%0A%20%20onChanged(%24event%3F%3A%20Event)%20%7B%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cdiv%20class%3D%22selected-value%22%3ESelected%20States%3A%20%3Cspan%20*ngFor%3D%22let%20item%20of%20value.states%22%3E%7B%7Bitem%7D%7D%20%3C%2Fspan%3E%0A%20%20%20%20Selected%20Collaborators%3A%20%3Cspan%20*ngFor%3D%22let%20item%20of%20value.collaborators%22%3E%7B%7Bitem%7D%7D%20%3C%2Fspan%3E%3C%2Fdiv%3E%0A%3Cmulti-picker%0A%20%20%20%20%5Bsource%5D%3D%22staticDemo%22%0A%20%20%20%20%5Bplaceholder%5D%3D%22placeholder%22%0A%20%20%20%20%5Btypes%5D%3D%22types%22%0A%20%20%20%20%5B(ngModel)%5D%3D%22value%22%0A%20%20%20%20(changed)%3D%22onChanged(%24event)%22%3E%0A%3C%2Fmulti-picker%3E%0A`
    },
    'nested-multi-picker': {
        title: 'Nested Multi Picker Example',
        component: NestedMultiPickerExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0Aimport%20%7B%20ChecklistPickerResults%20%7D%20from%20'novo-elements'%3B%0A%0A%2F**%0A%20*%20%40title%20Nested%20Multi%20Picker%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20selector%3A%20'nested-multi-picker-example'%2C%0A%20%20templateUrl%3A%20'nested-multi-picker-example.html'%2C%0A%20%20styleUrls%3A%20%5B'nested-multi-picker-example.css'%5D%2C%0A%7D)%0Aexport%20class%20NestedMultiPickerExample%20%7B%0A%20%20placeholder%3A%20string%20%3D%20'Select...'%3B%0A%20%20parentChild%3A%20any%3B%0A%20%20parentChildTypes%3A%20any%3B%0A%20%20formatted%3A%20any%3B%0A%20%20parentChildValue%3A%20any%3B%0A%0A%20%20constructor()%20%7B%0A%20%20%20%20const%20departments%20%3D%20%5B%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20id%3A%201%2C%0A%20%20%20%20%20%20%20%20name%3A%20'Sales'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20id%3A%202%2C%0A%20%20%20%20%20%20%20%20name%3A%20'Engineering'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20id%3A%203%2C%0A%20%20%20%20%20%20%20%20name%3A%20'Marketing'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20id%3A%204%2C%0A%20%20%20%20%20%20%20%20name%3A%20'Finance'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20id%3A%205%2C%0A%20%20%20%20%20%20%20%20name%3A%20'Nobody%20Works%20Here'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%5D%3B%0A%20%20%20%20const%20users%20%3D%20%5B%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20id%3A%201%2C%0A%20%20%20%20%20%20%20%20departments%3A%20%5B1%2C%202%2C%204%5D%2C%0A%20%20%20%20%20%20%20%20name%3A%20'Bob%20Sales%2FEngineering%2FFin'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20id%3A%202%2C%0A%20%20%20%20%20%20%20%20departments%3A%20%5B4%5D%2C%0A%20%20%20%20%20%20%20%20name%3A%20'Beth%20Fin'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20id%3A%203%2C%0A%20%20%20%20%20%20%20%20departments%3A%20%5B2%5D%2C%0A%20%20%20%20%20%20%20%20name%3A%20'Artemis%20Eng'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20id%3A%204%2C%0A%20%20%20%20%20%20%20%20departments%3A%20%5B1%5D%2C%0A%20%20%20%20%20%20%20%20name%3A%20'Andy%20Sales'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20id%3A%205%2C%0A%20%20%20%20%20%20%20%20departments%3A%20%5B3%5D%2C%0A%20%20%20%20%20%20%20%20name%3A%20'Zoe%20Marketing'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20id%3A%206%2C%0A%20%20%20%20%20%20%20%20departments%3A%20%5B4%2C%202%5D%2C%0A%20%20%20%20%20%20%20%20name%3A%20'Ziva%20Eng%20Fin'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%5D%3B%0A%20%20%20%20this.parentChild%20%3D%20%7B%0A%20%20%20%20%20%20options%3A%20%5B%0A%20%20%20%20%20%20%20%20%7B%20type%3A%20'departments'%2C%20data%3A%20departments%2C%20format%3A%20'%24name'%2C%20field%3A%20'id'%2C%20isParentOf%3A%20'users'%20%7D%2C%0A%20%20%20%20%20%20%20%20%7B%20type%3A%20'users'%2C%20data%3A%20users%2C%20format%3A%20'%24name'%2C%20field%3A%20'id'%2C%20isChildOf%3A%20'departments'%20%7D%2C%0A%20%20%20%20%20%20%5D%2C%0A%20%20%20%20%20%20resultsTemplate%3A%20ChecklistPickerResults%2C%0A%20%20%20%20%20%20selectAllOption%3A%20false%2C%0A%20%20%20%20%20%20strictRelationship%3A%20false%2C%0A%20%20%20%20%20%20chipsCount%3A%206%2C%0A%20%20%20%20%7D%3B%0A%20%20%20%20this.parentChildTypes%20%3D%20%5B%0A%20%20%20%20%20%20%7B%20value%3A%20'departments'%2C%20isParentOf%3A%20true%2C%20singular%3A%20'department'%20%7D%2C%0A%20%20%20%20%20%20%7B%20value%3A%20'users'%2C%20isChildOf%3A%20true%2C%20singular%3A%20'user'%20%7D%2C%0A%20%20%20%20%5D%3B%0A%20%20%20%20this.parentChildValue%20%3D%20%7B%20departments%3A%20%5B2%2C%203%2C%204%5D%2C%20users%3A%20%5B4%2C%205%5D%20%7D%3B%0A%20%20%7D%0A%0A%20%20onChanged(event%3F%3A%20Event)%20%7B%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cdiv%20class%3D%22selected-value%22%3ESelected%20Departments%3A%20%3Cspan%20*ngFor%3D%22let%20item%20of%20parentChildValue.departments%22%3E%7B%7Bitem%7D%7D%20%3C%2Fspan%3E%0A%20%20%20%20Selected%20Users%3A%20%3Cspan%20*ngFor%3D%22let%20item%20of%20parentChildValue.users%22%3E%7B%7Bitem%7D%7D%20%3C%2Fspan%3E%3C%2Fdiv%3E%0A%3Cmulti-picker%0A%20%20%20%20%5Bsource%5D%3D%22parentChild%22%0A%20%20%20%20%5Bplaceholder%5D%3D%22placeholder%22%0A%20%20%20%20%5Btypes%5D%3D%22parentChildTypes%22%0A%20%20%20%20%5B(ngModel)%5D%3D%22parentChildValue%22%0A%20%20%20%20(changed)%3D%22onChanged(%24event)%22%3E%0A%3C%2Fmulti-picker%3E%0A`
    },
    'async-picker': {
        title: 'Async Picker Example',
        component: AsyncPickerExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Async%20Picker%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20selector%3A%20'async-picker-example'%2C%0A%20%20templateUrl%3A%20'async-picker-example.html'%2C%0A%20%20styleUrls%3A%20%5B'async-picker-example.css'%5D%2C%0A%7D)%0Aexport%20class%20AsyncPickerExample%20%7B%0A%20%20public%20placeholder%3A%20string%20%3D%20'Select...'%3B%0A%20%20public%20value%3A%20string%3B%0A%20%20public%20async%3A%20any%3B%0A%0A%20%20constructor()%20%7B%0A%20%20%20%20this.value%20%3D%20null%3B%0A%20%20%20%20this.async%20%3D%20%7B%0A%20%20%20%20%20%20enableInfiniteScroll%3A%20true%2C%0A%20%20%20%20%20%20options%3A%20(term%2C%20page)%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20return%20new%20Promise((resolve)%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%20%20setTimeout(()%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20const%20arr%20%3D%20%5B%5D%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20for%20(let%20i%20%3D%200%3B%20i%20%3C%2020%3B%20i%2B%2B)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20arr.push(%7B%20value%3A%20%60Page%3A%20%24%7Bpage%7D%20-%20Item%3A%20%24%7Bi%20%2B%201%7D%60%2C%20label%3A%20%60Page%3A%20%24%7Bpage%7D%20-%20Item%3A%20%24%7Bi%20%2B%201%7D%60%20%7D)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20resolve(arr)%3B%0A%20%20%20%20%20%20%20%20%20%20%7D%2C%201000)%3B%0A%20%20%20%20%20%20%20%20%7D)%3B%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%7D%3B%0A%20%20%7D%0A%0A%20%20onChanged(event)%20%7B%0A%20%20%20%20console.log('EVENT'%2C%20event)%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cdiv%20class%3D%22selected-value%22%3ESelected%20Value%3A%20%7B%7Bvalue%7D%7D%3C%2Fdiv%3E%0A%3Cnovo-picker%20%5Bconfig%5D%3D%22async%22%20%5Bplaceholder%5D%3D%22placeholder%22%20%5B(ngModel)%5D%3D%22value%22%3E%3C%2Fnovo-picker%3E%0A`
    },
    'basic-picker': {
        title: 'Basic Picker Example',
        component: BasicPickerExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Basic%20Picker%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20selector%3A%20'basic-picker-example'%2C%0A%20%20templateUrl%3A%20'basic-picker-example.html'%2C%0A%20%20styleUrls%3A%20%5B'basic-picker-example.css'%5D%2C%0A%7D)%0Aexport%20class%20BasicPickerExample%20%7B%0A%20%20public%20placeholder%3A%20string%20%3D%20'Select...'%3B%0A%20%20public%20staticDemo%3A%20any%20%3D%20%7B%0A%20%20%20%20options%3A%20%5B%0A%20%20%20%20%20%20'Alabama'%2C%0A%20%20%20%20%20%20'Alaska'%2C%0A%20%20%20%20%20%20'Arizona'%2C%0A%20%20%20%20%20%20'Arkansas'%2C%0A%20%20%20%20%20%20'California'%2C%0A%20%20%20%20%20%20'Colorado'%2C%0A%20%20%20%20%20%20'Connecticut'%2C%0A%20%20%20%20%20%20'Delaware'%2C%0A%20%20%20%20%20%20'Florida'%2C%0A%20%20%20%20%20%20'Georgia'%2C%0A%20%20%20%20%20%20'Hawaii'%2C%0A%20%20%20%20%20%20'Idaho'%2C%0A%20%20%20%20%20%20'Illinois'%2C%0A%20%20%20%20%20%20'Indiana'%2C%0A%20%20%20%20%20%20'Iowa'%2C%0A%20%20%20%20%20%20'Kansas'%2C%0A%20%20%20%20%20%20'Kentucky'%2C%0A%20%20%20%20%20%20'Louisiana'%2C%0A%20%20%20%20%20%20'Maine'%2C%0A%20%20%20%20%20%20'Maryland'%2C%0A%20%20%20%20%20%20'Massachusetts'%2C%0A%20%20%20%20%20%20'Michigan'%2C%0A%20%20%20%20%20%20'Minnesota'%2C%0A%20%20%20%20%20%20'Mississippi'%2C%0A%20%20%20%20%20%20'Missouri'%2C%0A%20%20%20%20%20%20'Montana'%2C%0A%20%20%20%20%20%20'Nebraska'%2C%0A%20%20%20%20%20%20'Nevada'%2C%0A%20%20%20%20%20%20'New%20Hampshire'%2C%0A%20%20%20%20%20%20'New%20Jersey'%2C%0A%20%20%20%20%20%20'New%20Mexico'%2C%0A%20%20%20%20%20%20'New%20York'%2C%0A%20%20%20%20%20%20'North%20Dakota'%2C%0A%20%20%20%20%20%20'North%20Carolina'%2C%0A%20%20%20%20%20%20'Ohio'%2C%0A%20%20%20%20%20%20'Oklahoma'%2C%0A%20%20%20%20%20%20'Oregon'%2C%0A%20%20%20%20%20%20'Pennsylvania'%2C%0A%20%20%20%20%20%20'Rhode%20Island'%2C%0A%20%20%20%20%20%20'South%20Carolina'%2C%0A%20%20%20%20%20%20'South%20Dakota'%2C%0A%20%20%20%20%20%20'Tennessee'%2C%0A%20%20%20%20%20%20'Texas'%2C%0A%20%20%20%20%20%20'Utah'%2C%0A%20%20%20%20%20%20'Vermont'%2C%0A%20%20%20%20%20%20'Virginia'%2C%0A%20%20%20%20%20%20'Washington'%2C%0A%20%20%20%20%20%20'West%20Virginia'%2C%0A%20%20%20%20%20%20'Wisconsin'%2C%0A%20%20%20%20%20%20'Wyoming'%2C%0A%20%20%20%20%5D%2C%0A%20%20%7D%3B%0A%20%20public%20value%3A%20string%3B%0A%0A%20%20onChanged(event)%20%7B%0A%20%20%20%20console.log('EVENT'%2C%20event)%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cdiv%20class%3D%22selected-value%22%3ESelected%20Value%3A%20%7B%7Bvalue%7D%7D%3C%2Fdiv%3E%0A%3Cnovo-picker%20%5Bconfig%5D%3D%22staticDemo%22%20%5Bplaceholder%5D%3D%22placeholder%22%20%5B(ngModel)%5D%3D%22value%22%3E%3C%2Fnovo-picker%3E%0A`
    },
    'custom-picker-results': {
        title: 'Custom Picker Results Example',
        component: CustomPickerResultsExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0Aimport%20%7B%20PickerResults%20%7D%20from%20'novo-elements'%3B%0A%0A%40Component(%7B%0A%20%20selector%3A%20'custom-picker-results'%2C%0A%20%20host%3A%20%7B%0A%20%20%20%20class%3A%20'active%20picker-results'%2C%0A%20%20%7D%2C%0A%20%20template%3A%20%60%0A%20%20%20%20%3Cnovo-loading%20theme%3D%22line%22%20*ngIf%3D%22isLoading%20%26%26%20!matches.length%22%3E%3C%2Fnovo-loading%3E%0A%20%20%20%20%3Cnovo-list%20*ngIf%3D%22matches.length%20%3E%200%22%20direction%3D%22vertical%22%3E%0A%20%20%20%20%20%20%3Cnovo-list-item%0A%20%20%20%20%20%20%20%20*ngFor%3D%22let%20match%20of%20matches%22%0A%20%20%20%20%20%20%20%20(click)%3D%22selectMatch(%24event)%22%0A%20%20%20%20%20%20%20%20%5Bclass.active%5D%3D%22match%20%3D%3D%3D%20activeMatch%22%0A%20%20%20%20%20%20%20%20(mouseenter)%3D%22selectActive(match)%22%3E%0A%20%20%20%20%20%20%20%20%3Citem-content%3E%0A%20%20%20%20%20%20%20%20%20%20**CUSTOM**%20%3Cb%20%5BinnerHtml%5D%3D%22highlight(match.label%2C%20term)%22%3E%3C%2Fb%3E%0A%20%20%20%20%20%20%20%20%3C%2Fitem-content%3E%0A%20%20%20%20%20%20%3C%2Fnovo-list-item%3E%0A%20%20%20%20%3C%2Fnovo-list%3E%0A%20%20%20%20%3Cp%20class%3D%22picker-error%22%20*ngIf%3D%22hasError%22%3EOops!%20An%20error%20occured.%3C%2Fp%3E%0A%20%20%20%20%3Cp%20class%3D%22picker-null%22%20*ngIf%3D%22!isLoading%20%26%26%20!matches.length%20%26%26%20!hasError%22%3ENo%20results%20to%20display...%3C%2Fp%3E%0A%20%20%60%2C%0A%7D)%0Aexport%20class%20CustomPickerResults%20extends%20PickerResults%20%7B%7D%0A%0A%2F**%0A%20*%20%40title%20Custom%20Picker%20Results%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20selector%3A%20'custom-picker-results-example'%2C%0A%20%20templateUrl%3A%20'custom-picker-results-example.html'%2C%0A%20%20styleUrls%3A%20%5B'custom-picker-results-example.css'%5D%2C%0A%7D)%0Aexport%20class%20CustomPickerResultsExample%20%7B%0A%20%20public%20placeholder%3A%20string%20%3D%20'Select...'%3B%0A%20%20public%20custom%3A%20any%3B%0A%20%20public%20value%3A%20string%3B%0A%0A%20%20constructor()%20%7B%0A%20%20%20%20const%20collaborators%20%3D%20%5B%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20id%3A%201%2C%0A%20%20%20%20%20%20%20%20firstName%3A%20'Brian'%2C%0A%20%20%20%20%20%20%20%20lastName%3A%20'Kimball'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20id%3A%202%2C%0A%20%20%20%20%20%20%20%20firstName%3A%20'Josh'%2C%0A%20%20%20%20%20%20%20%20lastName%3A%20'Godi'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20id%3A%203%2C%0A%20%20%20%20%20%20%20%20firstName%3A%20'Alec'%2C%0A%20%20%20%20%20%20%20%20lastName%3A%20'Sibilia'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20id%3A%204%2C%0A%20%20%20%20%20%20%20%20firstName%3A%20'Kameron'%2C%0A%20%20%20%20%20%20%20%20lastName%3A%20'Sween'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%5D%3B%0A%0A%20%20%20%20this.custom%20%3D%20%7B%0A%20%20%20%20%20%20resultsTemplate%3A%20CustomPickerResults%2C%0A%20%20%20%20%20%20format%3A%20'%24firstName%20%24lastName'%2C%0A%20%20%20%20%20%20options%3A%20collaborators%2C%0A%20%20%20%20%7D%3B%0A%0A%20%20%20%20this.value%20%3D%20null%3B%0A%20%20%7D%0A%0A%20%20onChanged(event)%20%7B%0A%20%20%20%20console.log('EVENT'%2C%20event)%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cdiv%20class%3D%22selected-value%22%3ESelected%20Value%3A%20%7B%7Bvalue%7D%7D%3C%2Fdiv%3E%0A%3Cnovo-picker%20%5Bconfig%5D%3D%22custom%22%20%5Bplaceholder%5D%3D%22placeholder%22%20%5B(ngModel)%5D%3D%22value%22%3E%3C%2Fnovo-picker%3E%0A`,
        selectorName: 'CustomPickerResultsExample, CustomPickerResults'
    },
    'default-options-picker': {
        title: 'Default Options Picker Example',
        component: DefaultOptionsPickerExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Default%20Options%20Picker%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20selector%3A%20'default-options-picker-example'%2C%0A%20%20templateUrl%3A%20'default-options-picker-example.html'%2C%0A%20%20styleUrls%3A%20%5B'default-options-picker-example.css'%5D%2C%0A%7D)%0Aexport%20class%20DefaultOptionsPickerExample%20%7B%0A%20%20public%20placeholder%3A%20string%20%3D%20'Select...'%3B%0A%20%20public%20defaultArrayConfig%3A%20any%3B%0A%20%20public%20defaultFunctionConfig%3A%20any%3B%0A%20%20public%20defaultArrayValue%3A%20string%3B%0A%20%20public%20defaultFunctionValue%3A%20string%3B%0A%20%20public%20value%3A%20string%3B%0A%0A%20%20constructor()%20%7B%0A%20%20%20%20const%20states%20%3D%20%5B%0A%20%20%20%20%20%20'Alabama'%2C%0A%20%20%20%20%20%20'Alaska'%2C%0A%20%20%20%20%20%20'Arizona'%2C%0A%20%20%20%20%20%20'Arkansas'%2C%0A%20%20%20%20%20%20'California'%2C%0A%20%20%20%20%20%20'Colorado'%2C%0A%20%20%20%20%20%20'Connecticut'%2C%0A%20%20%20%20%20%20'Delaware'%2C%0A%20%20%20%20%20%20'Florida'%2C%0A%20%20%20%20%20%20'Georgia'%2C%0A%20%20%20%20%20%20'Hawaii'%2C%0A%20%20%20%20%20%20'Idaho'%2C%0A%20%20%20%20%20%20'Illinois'%2C%0A%20%20%20%20%20%20'Indiana'%2C%0A%20%20%20%20%20%20'Iowa'%2C%0A%20%20%20%20%20%20'Kansas'%2C%0A%20%20%20%20%20%20'Kentucky'%2C%0A%20%20%20%20%20%20'Louisiana'%2C%0A%20%20%20%20%20%20'Maine'%2C%0A%20%20%20%20%20%20'Maryland'%2C%0A%20%20%20%20%20%20'Massachusetts'%2C%0A%20%20%20%20%20%20'Michigan'%2C%0A%20%20%20%20%20%20'Minnesota'%2C%0A%20%20%20%20%20%20'Mississippi'%2C%0A%20%20%20%20%20%20'Missouri'%2C%0A%20%20%20%20%20%20'Montana'%2C%0A%20%20%20%20%20%20'Nebraska'%2C%0A%20%20%20%20%20%20'Nevada'%2C%0A%20%20%20%20%20%20'New%20Hampshire'%2C%0A%20%20%20%20%20%20'New%20Jersey'%2C%0A%20%20%20%20%20%20'New%20Mexico'%2C%0A%20%20%20%20%20%20'New%20York'%2C%0A%20%20%20%20%20%20'North%20Dakota'%2C%0A%20%20%20%20%20%20'North%20Carolina'%2C%0A%20%20%20%20%20%20'Ohio'%2C%0A%20%20%20%20%20%20'Oklahoma'%2C%0A%20%20%20%20%20%20'Oregon'%2C%0A%20%20%20%20%20%20'Pennsylvania'%2C%0A%20%20%20%20%20%20'Rhode%20Island'%2C%0A%20%20%20%20%20%20'South%20Carolina'%2C%0A%20%20%20%20%20%20'South%20Dakota'%2C%0A%20%20%20%20%20%20'Tennessee'%2C%0A%20%20%20%20%20%20'Texas'%2C%0A%20%20%20%20%20%20'Utah'%2C%0A%20%20%20%20%20%20'Vermont'%2C%0A%20%20%20%20%20%20'Virginia'%2C%0A%20%20%20%20%20%20'Washington'%2C%0A%20%20%20%20%20%20'West%20Virginia'%2C%0A%20%20%20%20%20%20'Wisconsin'%2C%0A%20%20%20%20%20%20'Wyoming'%2C%0A%20%20%20%20%5D%3B%0A%0A%20%20%20%20this.defaultArrayConfig%20%3D%20%7B%0A%20%20%20%20%20%20defaultOptions%3A%20%5Bstates%5B0%5D%2C%20states%5B1%5D%5D%2C%0A%20%20%20%20%20%20minSearchLength%3A%202%2C%0A%20%20%20%20%20%20options%3A%20()%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20return%20new%20Promise((resolve)%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%20%20setTimeout(()%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20resolve(states)%3B%0A%20%20%20%20%20%20%20%20%20%20%7D%2C%20300)%3B%0A%20%20%20%20%20%20%20%20%7D)%3B%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%7D%3B%0A%20%20%20%20this.defaultFunctionConfig%20%3D%20%7B%0A%20%20%20%20%20%20minSearchLength%3A%202%2C%0A%20%20%20%20%20%20defaultOptions%3A%20()%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20return%20%5Bstates%5B2%5D%2C%20states%5B3%5D%5D%3B%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20options%3A%20()%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20return%20new%20Promise((resolve)%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%20%20setTimeout(()%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20resolve(states)%3B%0A%20%20%20%20%20%20%20%20%20%20%7D%2C%20300)%3B%0A%20%20%20%20%20%20%20%20%7D)%3B%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%7D%3B%0A%20%20%7D%0A%0A%20%20onChanged(event)%20%7B%0A%20%20%20%20console.log('EVENT'%2C%20event)%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cdiv%20class%3D%22selected-value%22%3ESelected%20Value%3A%20%7B%7BdefaultArrayValue%7D%7D%3C%2Fdiv%3E%0A%3Cnovo-picker%20%5Bconfig%5D%3D%22defaultArrayConfig%22%20%5Bplaceholder%5D%3D%22placeholder%22%20%5B(ngModel)%5D%3D%22defaultArrayValue%22%3E%3C%2Fnovo-picker%3E%0A%3Cbr%2F%3E%3Cbr%2F%3E%0A%3Cdiv%20class%3D%22selected-value%22%3ESelected%20Value%3A%20%7B%7BdefaultFunctionValue%7D%7D%3C%2Fdiv%3E%0A%3Cnovo-picker%20%5Bconfig%5D%3D%22defaultFunctionConfig%22%20%5Bplaceholder%5D%3D%22placeholder%22%20%5B(ngModel)%5D%3D%22defaultFunctionValue%22%3E%3C%2Fnovo-picker%3E%0A`
    },
    'entity-picker': {
        title: 'Entity Picker Example',
        component: EntityPickerExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Entity%20Picker%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20selector%3A%20'entity-picker-example'%2C%0A%20%20templateUrl%3A%20'entity-picker-example.html'%2C%0A%20%20styleUrls%3A%20%5B'entity-picker-example.css'%5D%2C%0A%7D)%0Aexport%20class%20EntityPickerExample%20%7B%0A%20%20public%20placeholder%3A%20string%20%3D%20'Select...'%3B%0A%20%20public%20entityDemo%3A%20any%3B%0A%20%20public%20entity%3A%20any%3B%0A%0A%20%20constructor()%20%7B%0A%20%20%20%20const%20collaborators%20%3D%20%5B%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20id%3A%201%2C%0A%20%20%20%20%20%20%20%20firstName%3A%20'Brian'%2C%0A%20%20%20%20%20%20%20%20lastName%3A%20'Kimball'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20id%3A%202%2C%0A%20%20%20%20%20%20%20%20firstName%3A%20'Josh'%2C%0A%20%20%20%20%20%20%20%20lastName%3A%20'Godi'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20id%3A%203%2C%0A%20%20%20%20%20%20%20%20firstName%3A%20'Alec'%2C%0A%20%20%20%20%20%20%20%20lastName%3A%20'Sibilia'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20id%3A%204%2C%0A%20%20%20%20%20%20%20%20firstName%3A%20'Kameron'%2C%0A%20%20%20%20%20%20%20%20lastName%3A%20'Sween'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%5D%3B%0A%0A%20%20%20%20this.entityDemo%20%3D%20%7B%0A%20%20%20%20%20%20options%3A%20collaborators%2C%0A%20%20%20%20%20%20format%3A%20'%24firstName%20%24lastName'%2C%0A%20%20%20%20%20%20entityIcon%3A%20'person'%2C%0A%20%20%20%20%7D%3B%0A%20%20%7D%0A%0A%20%20onChanged(event)%20%7B%0A%20%20%20%20console.log('EVENT'%2C%20event)%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cdiv%20class%3D%22selected-value%22%3ESelected%20Value%3A%20%7B%7Bentity%7D%7D%3C%2Fdiv%3E%0A%3Cnovo-picker%20%5Bconfig%5D%3D%22entityDemo%22%20%5Bplaceholder%5D%3D%22placeholder%22%20%5B(ngModel)%5D%3D%22entity%22%3E%3C%2Fnovo-picker%3E%0A`
    },
    'formatted-picker': {
        title: 'Formatted Picker Example',
        component: FormattedPickerExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Formatted%20Picker%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20selector%3A%20'formatted-picker-example'%2C%0A%20%20templateUrl%3A%20'formatted-picker-example.html'%2C%0A%20%20styleUrls%3A%20%5B'formatted-picker-example.css'%5D%2C%0A%7D)%0Aexport%20class%20FormattedPickerExample%20%7B%0A%20%20public%20placeholder%3A%20string%20%3D%20'Select...'%3B%0A%20%20public%20formatted%3A%20any%3B%0A%20%20public%20value%3A%20string%3B%0A%0A%20%20constructor()%20%7B%0A%20%20%20%20const%20collaborators%20%3D%20%5B%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20id%3A%201%2C%0A%20%20%20%20%20%20%20%20firstName%3A%20'Brian'%2C%0A%20%20%20%20%20%20%20%20lastName%3A%20'Kimball'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20id%3A%202%2C%0A%20%20%20%20%20%20%20%20firstName%3A%20'Josh'%2C%0A%20%20%20%20%20%20%20%20lastName%3A%20'Godi'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20id%3A%203%2C%0A%20%20%20%20%20%20%20%20firstName%3A%20'Alec'%2C%0A%20%20%20%20%20%20%20%20lastName%3A%20'Sibilia'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20id%3A%204%2C%0A%20%20%20%20%20%20%20%20firstName%3A%20'Kameron'%2C%0A%20%20%20%20%20%20%20%20lastName%3A%20'Sween'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%5D%3B%0A%0A%20%20%20%20this.formatted%20%3D%20%7B%0A%20%20%20%20%20%20field%3A%20'id'%2C%0A%20%20%20%20%20%20format%3A%20%60%24firstName%20%24lastName%60%2C%0A%20%20%20%20%20%20options%3A%20collaborators%2C%0A%20%20%20%20%7D%3B%0A%20%20%7D%0A%0A%20%20onChanged(event)%20%7B%0A%20%20%20%20console.log('EVENT'%2C%20event)%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cdiv%20class%3D%22selected-value%22%3ESelected%20Value%3A%20%7B%7Bvalue%7D%7D%3C%2Fdiv%3E%0A%3Cnovo-picker%20%5Bconfig%5D%3D%22formatted%22%20%5Bplaceholder%5D%3D%22placeholder%22%20%5B(ngModel)%5D%3D%22value%22%3E%3C%2Fnovo-picker%3E%0A`
    },
    'grouped-picker': {
        title: 'Grouped Picker Example',
        component: GroupedPickerExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0Aimport%20%7B%20GroupedMultiPickerResults%20%7D%20from%20'novo-elements'%3B%0A%0A%2F**%0A%20*%20%40title%20Grouped%20Picker%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20selector%3A%20'grouped-picker-example'%2C%0A%20%20templateUrl%3A%20'grouped-picker-example.html'%2C%0A%20%20styleUrls%3A%20%5B'grouped-picker-example.css'%5D%2C%0A%7D)%0Aexport%20class%20GroupedPickerExample%20%7B%0A%20%20public%20placeholder%3A%20string%20%3D%20'Select...'%3B%0A%20%20public%20groupedPicker1%3A%20any%3B%0A%20%20public%20groupedPicker2%3A%20any%3B%0A%20%20public%20groupedPicker3%3A%20any%3B%0A%20%20public%20groupedPicker4%3A%20any%3B%0A%20%20public%20groupedPicker1Value%3A%20any%3B%0A%20%20public%20groupedPicker2Value%3A%20any%3B%0A%20%20public%20groupedPicker3Value%3A%20any%3B%0A%20%20public%20groupedPicker4Value%3A%20any%3B%0A%0A%20%20constructor()%20%7B%0A%20%20%20%20this.setupGroupedPickerDemo()%3B%0A%20%20%7D%0A%0A%20%20setupGroupedPickerDemo()%20%7B%0A%20%20%20%20const%20categoryMap%20%3D%20new%20Map%3Cstring%2C%20%7B%20value%3A%20string%3B%20label%3A%20string%3B%20items%3A%20%7B%20value%3A%20string%3B%20label%3A%20string%20%7D%5B%5D%20%7D%3E()%3B%0A%20%20%20%20for%20(let%20i%20%3D%200%3B%20i%20%3C%2010%3B%20i%2B%2B)%20%7B%0A%20%20%20%20%20%20const%20items%20%3D%20%5B%5D%3B%0A%20%20%20%20%20%20for%20(let%20j%20%3D%200%3B%20j%20%3C%2010%3B%20j%2B%2B)%20%7B%0A%20%20%20%20%20%20%20%20items.push(%7B%20value%3A%20%60%24%7Bi%7D-%24%7Bj%7D%60%2C%20label%3A%20%60Category%20%24%7Bi%7D%20-%20Item%20%24%7Bj%7D%60%20%7D)%3B%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20categoryMap.set(%60%24%7Bi%7D%60%2C%20%7B%20value%3A%20%60%24%7Bi%7D%60%2C%20label%3A%20%60Category%20%24%7Bi%7D%60%2C%20items%20%7D)%3B%0A%20%20%20%20%7D%0A%20%20%20%20const%20filterCategoryMap%20%3D%20new%20Map%3Cstring%2C%20%7B%20value%3A%20string%3B%20label%3A%20string%3B%20items%3A%20%7B%20value%3A%20string%3B%20label%3A%20string%3B%20data%3A%20any%20%7D%5B%5D%20%7D%3E()%3B%0A%20%20%20%20for%20(let%20i%20%3D%200%3B%20i%20%3C%2010%3B%20i%2B%2B)%20%7B%0A%20%20%20%20%20%20const%20items%20%3D%20%5B%5D%3B%0A%20%20%20%20%20%20for%20(let%20j%20%3D%200%3B%20j%20%3C%2010%3B%20j%2B%2B)%20%7B%0A%20%20%20%20%20%20%20%20const%20filter%20%3D%20Math.random()%20%3E%3D%200.5%3B%0A%20%20%20%20%20%20%20%20items.push(%7B%20value%3A%20%60%24%7Bi%7D-%24%7Bj%7D%60%2C%20label%3A%20%60Category%20%24%7Bi%7D%20-%20Item%20%24%7Bj%7D%20-%20Data%20-%20%24%7Bfilter%7D%60%2C%20data%3A%20%7B%20filter%20%7D%20%7D)%3B%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20filterCategoryMap.set(%60%24%7Bi%7D%60%2C%20%7B%20value%3A%20%60%24%7Bi%7D%60%2C%20label%3A%20%60Category%20%24%7Bi%7D%60%2C%20items%20%7D)%3B%0A%20%20%20%20%7D%0A%20%20%20%20this.groupedPicker1%20%3D%20%7B%0A%20%20%20%20%20%20categoryMap%2C%0A%20%20%20%20%20%20resultsTemplate%3A%20GroupedMultiPickerResults%2C%0A%20%20%20%20%20%20displayAll%3A%20true%2C%0A%20%20%20%20%7D%3B%0A%20%20%20%20this.groupedPicker2%20%3D%20%7B%0A%20%20%20%20%20%20categoryMap%2C%0A%20%20%20%20%20%20resultsTemplate%3A%20GroupedMultiPickerResults%2C%0A%20%20%20%20%7D%3B%0A%20%20%20%20this.groupedPicker3%20%3D%20%7B%0A%20%20%20%20%20%20categories%3A%20%5B%0A%20%20%20%20%20%20%20%20%7B%20value%3A%20'C1'%2C%20label%3A%20'Category%201'%20%7D%2C%0A%20%20%20%20%20%20%20%20%7B%20value%3A%20'C2'%2C%20label%3A%20'Category%202'%20%7D%2C%0A%20%20%20%20%20%20%20%20%7B%20value%3A%20'C3'%2C%20label%3A%20'Category%203'%20%7D%2C%0A%20%20%20%20%20%20%20%20%7B%20value%3A%20'C4'%2C%20label%3A%20'Category%204'%20%7D%2C%0A%20%20%20%20%20%20%20%20%7B%20value%3A%20'C5'%2C%20label%3A%20'Category%205'%20%7D%2C%0A%20%20%20%20%20%20%5D%2C%0A%20%20%20%20%20%20getItemsForCategoryAsync%3A%20(category%2C%20customFilter)%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20return%20new%20Promise((resolve)%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%20%20setTimeout(()%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20resolve(%5B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7B%20value%3A%20'A1'%2C%20label%3A%20'Async%201'%20%7D%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7B%20value%3A%20'A2'%2C%20label%3A%20'Async%202'%20%7D%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7B%20value%3A%20'A3'%2C%20label%3A%20'Async%203'%20%7D%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7B%20value%3A%20'A4'%2C%20label%3A%20'Async%204'%20%7D%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7B%20value%3A%20'A5'%2C%20label%3A%20'Async%205'%20%7D%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%5D)%3B%0A%20%20%20%20%20%20%20%20%20%20%7D%2C%201000)%3B%0A%20%20%20%20%20%20%20%20%7D)%3B%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20resultsTemplate%3A%20GroupedMultiPickerResults%2C%0A%20%20%20%20%7D%3B%0A%20%20%20%20this.groupedPicker4%20%3D%20%7B%0A%20%20%20%20%20%20entityIcon%3A%20'company'%2C%0A%20%20%20%20%20%20categoryMap%3A%20filterCategoryMap%2C%0A%20%20%20%20%20%20displayAll%3A%20true%2C%0A%20%20%20%20%20%20placeholder%3A%20'Filter%20things...'%2C%0A%20%20%20%20%20%20customFilter%3A%20%7B%0A%20%20%20%20%20%20%20%20matchFunction%3A%20(item%2C%20value)%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%20%20if%20(value)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20item.data.filter%20%3D%3D%3D%20value%3B%0A%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%20%20return%20true%3B%0A%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20defaultFilterValue%3A%20false%2C%0A%20%20%20%20%20%20%20%20label%3A%20'Custom%20Filter!'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20resultsTemplate%3A%20GroupedMultiPickerResults%2C%0A%20%20%20%20%7D%3B%0A%20%20%7D%0A%0A%20%20onChanged(event)%20%7B%0A%20%20%20%20console.log('EVENT'%2C%20event)%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Ch6%3EBasic%20Static%20Example%3C%2Fh6%3E%0A%3Cp%3EFully%20static%20data%2C%20optional%20%22all%22%20category%3C%2Fp%3E%0A%3Cdiv%20class%3D%22selected-value%22%3ESelected%20Value%3A%20%7B%7B%20groupedPicker1Value%20%7C%20json%20%7D%7D%3C%2Fdiv%3E%0A%3Cnovo-picker%20%5Bconfig%5D%3D%22groupedPicker1%22%20%5Bplaceholder%5D%3D%22placeholder%22%20%5B(ngModel)%5D%3D%22groupedPicker1Value%22%20(changed)%3D%22onChanged(%24event)%22%3E%3C%2Fnovo-picker%3E%0A%0A%3Cbr%2F%3E%0A%3Cbr%2F%3E%0A%0A%3Ch6%3ECustom%20Static%20Example%3C%2Fh6%3E%0A%3Cp%3EFully%20static%20data%2C%20all%20category%20turned%20off%3C%2Fp%3E%0A%3Cdiv%20class%3D%22selected-value%22%3ESelected%20Value%3A%20%7B%7B%20groupedPicker2Value%20%7C%20json%20%7D%7D%3C%2Fdiv%3E%0A%3Cnovo-picker%20%5Bconfig%5D%3D%22groupedPicker2%22%20%5Bplaceholder%5D%3D%22placeholder%22%20%5B(ngModel)%5D%3D%22groupedPicker2Value%22%20(changed)%3D%22onChanged(%24event)%22%3E%3C%2Fnovo-picker%3E%0A%0A%3Cbr%2F%3E%0A%3Cbr%2F%3E%0A%0A%3Ch6%3EBasic%20Async%20Example%3C%2Fh6%3E%0A%3Cp%3ECategory%20list%20is%20static%20(always%20has%20to%20be)%20with%20the%20items%20fetched%20via%20async%20call%3C%2Fp%3E%0A%3Cdiv%20class%3D%22selected-value%22%3ESelected%20Value%3A%20%7B%7B%20groupedPicker3Value%20%7C%20json%20%7D%7D%3C%2Fdiv%3E%0A%3Cnovo-picker%20%5Bconfig%5D%3D%22groupedPicker3%22%20%5Bplaceholder%5D%3D%22placeholder%22%20%5B(ngModel)%5D%3D%22groupedPicker3Value%22%20(changed)%3D%22onChanged(%24event)%22%3E%3C%2Fnovo-picker%3E%0A%3Cbr%2F%3E%0A%3Cbr%2F%3E%0A%0A%3Ch6%3EAsync%20Example%20w%2F%20Custom%20Filter%3C%2Fh6%3E%0A%3Cp%3EYou%20can%20also%20have%20a%20custom%20filter%2C%20limited%20to%20just%20a%20switch%3C%2Fp%3E%0A%3Cdiv%20class%3D%22selected-value%22%3ESelected%20Value%3A%20%7B%7B%20groupedPicker4Value%20%7C%20json%20%7D%7D%3C%2Fdiv%3E%0A%3Cnovo-picker%20%5Bconfig%5D%3D%22groupedPicker4%22%20%5Bplaceholder%5D%3D%22placeholder%22%20%5B(ngModel)%5D%3D%22groupedPicker4Value%22%20(changed)%3D%22onChanged(%24event)%22%3E%3C%2Fnovo-picker%3E%0A`
    },
    'override-template': {
        title: 'Override Template Example',
        component: OverrideTemplateExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Override%20Template%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20selector%3A%20'override-template-example'%2C%0A%20%20templateUrl%3A%20'override-template-example.html'%2C%0A%20%20styleUrls%3A%20%5B'override-template-example.css'%5D%2C%0A%7D)%0Aexport%20class%20OverrideTemplateExample%20%7B%0A%20%20public%20placeholder%3A%20string%20%3D%20'Select...'%3B%0A%20%20public%20overrideValue%3A%20any%3B%0A%20%20public%20overrideDemo%3A%20any%3B%0A%0A%20%20constructor()%20%7B%0A%20%20%20%20const%20states%20%3D%20%5B%0A%20%20%20%20%20%20'Alabama'%2C%0A%20%20%20%20%20%20'Alaska'%2C%0A%20%20%20%20%20%20'Arizona'%2C%0A%20%20%20%20%20%20'Arkansas'%2C%0A%20%20%20%20%20%20'California'%2C%0A%20%20%20%20%20%20'Colorado'%2C%0A%20%20%20%20%20%20'Connecticut'%2C%0A%20%20%20%20%20%20'Delaware'%2C%0A%20%20%20%20%20%20'Florida'%2C%0A%20%20%20%20%20%20'Georgia'%2C%0A%20%20%20%20%20%20'Hawaii'%2C%0A%20%20%20%20%20%20'Idaho'%2C%0A%20%20%20%20%20%20'Illinois'%2C%0A%20%20%20%20%20%20'Indiana'%2C%0A%20%20%20%20%20%20'Iowa'%2C%0A%20%20%20%20%20%20'Kansas'%2C%0A%20%20%20%20%20%20'Kentucky'%2C%0A%20%20%20%20%20%20'Louisiana'%2C%0A%20%20%20%20%20%20'Maine'%2C%0A%20%20%20%20%20%20'Maryland'%2C%0A%20%20%20%20%20%20'Massachusetts'%2C%0A%20%20%20%20%20%20'Michigan'%2C%0A%20%20%20%20%20%20'Minnesota'%2C%0A%20%20%20%20%20%20'Mississippi'%2C%0A%20%20%20%20%20%20'Missouri'%2C%0A%20%20%20%20%20%20'Montana'%2C%0A%20%20%20%20%20%20'Nebraska'%2C%0A%20%20%20%20%20%20'Nevada'%2C%0A%20%20%20%20%20%20'New%20Hampshire'%2C%0A%20%20%20%20%20%20'New%20Jersey'%2C%0A%20%20%20%20%20%20'New%20Mexico'%2C%0A%20%20%20%20%20%20'New%20York'%2C%0A%20%20%20%20%20%20'North%20Dakota'%2C%0A%20%20%20%20%20%20'North%20Carolina'%2C%0A%20%20%20%20%20%20'Ohio'%2C%0A%20%20%20%20%20%20'Oklahoma'%2C%0A%20%20%20%20%20%20'Oregon'%2C%0A%20%20%20%20%20%20'Pennsylvania'%2C%0A%20%20%20%20%20%20'Rhode%20Island'%2C%0A%20%20%20%20%20%20'South%20Carolina'%2C%0A%20%20%20%20%20%20'South%20Dakota'%2C%0A%20%20%20%20%20%20'Tennessee'%2C%0A%20%20%20%20%20%20'Texas'%2C%0A%20%20%20%20%20%20'Utah'%2C%0A%20%20%20%20%20%20'Vermont'%2C%0A%20%20%20%20%20%20'Virginia'%2C%0A%20%20%20%20%20%20'Washington'%2C%0A%20%20%20%20%20%20'West%20Virginia'%2C%0A%20%20%20%20%20%20'Wisconsin'%2C%0A%20%20%20%20%20%20'Wyoming'%2C%0A%20%20%20%20%5D%3B%0A%0A%20%20%20%20this.overrideDemo%20%3D%20%7B%0A%20%20%20%20%20%20options%3A%20states%2C%0A%20%20%20%20%20%20overrideTemplate%3A%20'%3Ch1%3E%7B%7B%20match%20%7C%20json%20%7D%7D%3C%2Fh1%3E'%2C%0A%20%20%20%20%7D%3B%0A%20%20%7D%0A%0A%20%20onChanged(event)%20%7B%0A%20%20%20%20console.log('EVENT'%2C%20event)%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cdiv%20class%3D%22selected-value%22%3ESelected%20Value%3A%20%7B%7B%20overrideValue%20%7D%7D%3C%2Fdiv%3E%0A%3Cnovo-picker%20%5Bconfig%5D%3D%22overrideDemo%22%20%5Bplaceholder%5D%3D%22placeholder%22%20%5B(ngModel)%5D%3D%22overrideValue%22%3E%3C%2Fnovo-picker%3E%0A`
    },
    'basic-radio': {
        title: 'Basic Radio Button Usage',
        component: BasicRadioExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Basic%20Radio%20Button%20Usage%0A%20*%2F%0A%40Component(%7B%0A%20%20selector%3A%20'basic-radio-example'%2C%0A%20%20templateUrl%3A%20'basic-radio-example.html'%2C%0A%20%20styleUrls%3A%20%5B'basic-radio-example.css'%5D%2C%0A%7D)%0Aexport%20class%20BasicRadioExample%20%7B%0A%20%20onChange(change%3A%20Event)%3A%20void%20%7B%0A%20%20%20%20console.log('Radio%20Change%3A'%2C%20change)%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cnovo-radio%20%5Bchecked%5D%3D%22false%22%20name%3D%22basic%22%20value%3D%22one%22%20(change)%3D%22onChange(%24event)%22%3EMake%20me%20anything!%3C%2Fnovo-radio%3E%0A%3Cnovo-radio%20%5Bchecked%5D%3D%22true%22%20name%3D%22basic%22%20value%3D%22two%22%20(change)%3D%22onChange(%24event)%22%3EI%20get%20transcluded%20in!%3C%2Fnovo-radio%3E%0A%3Cnovo-radio%20%5Bchecked%5D%3D%22false%22%20name%3D%22basic%22%20value%3D%22three%22%20(change)%3D%22onChange(%24event)%22%3EREALLY!%3C%2Fnovo-radio%3E%0A`
    },
    'button-radio': {
        title: 'Radio Button with Buttons',
        component: ButtonRadioExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Radio%20Button%20with%20Buttons%0A%20*%2F%0A%40Component(%7B%0A%20%20selector%3A%20'button-radio-example'%2C%0A%20%20templateUrl%3A%20'button-radio-example.html'%2C%0A%20%20styleUrls%3A%20%5B'button-radio-example.css'%5D%2C%0A%7D)%0Aexport%20class%20ButtonRadioExample%20%7B%0A%20%20onChange(change%3A%20Event)%3A%20void%20%7B%0A%20%20%20%20console.log('Radio%20Change%3A'%2C%20change)%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cnovo-radio-group%3E%0A%20%20%20%20%3Cnovo-radio%20button%3D%22true%22%20%5Bchecked%5D%3D%22false%22%20name%3D%22button%22%20value%3D%22one%22%20(change)%3D%22onChange(%24event)%22%20label%3D%22One%22%3E%3C%2Fnovo-radio%3E%0A%20%20%20%20%3Cnovo-radio%20button%3D%22true%22%20%5Bchecked%5D%3D%22true%22%20name%3D%22button%22%20value%3D%22two%22%20(change)%3D%22onChange(%24event)%22%20label%3D%22Two%22%3E%3C%2Fnovo-radio%3E%0A%20%20%20%20%3Cnovo-radio%20button%3D%22true%22%20%5Bchecked%5D%3D%22false%22%20name%3D%22button%22%20value%3D%22three%22%20(change)%3D%22onChange(%24event)%22%20label%3D%22Three%22%3E%3C%2Fnovo-radio%3E%0A%3C%2Fnovo-radio-group%3E%0A`
    },
    'icon-radio': {
        title: 'Radio Buttons with Icons',
        component: IconRadioExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Radio%20Buttons%20with%20Icons%0A%20*%2F%0A%40Component(%7B%0A%20%20selector%3A%20'icon-radio-example'%2C%0A%20%20templateUrl%3A%20'icon-radio-example.html'%2C%0A%20%20styleUrls%3A%20%5B'icon-radio-example.css'%5D%2C%0A%7D)%0Aexport%20class%20IconRadioExample%20%7B%0A%20%20onChange(change%3A%20Event)%3A%20void%20%7B%0A%20%20%20%20console.log('Radio%20Change%3A'%2C%20change)%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cnovo-radio-group%3E%0A%20%20%20%20%3Cnovo-radio%20button%3D%22true%22%20theme%3D%22icon%22%20icon%3D%22checkbox-filled%22%20name%3D%22icon%22%20value%3D%22one%22%20(change)%3D%22onChange(%24event)%22%3E%3C%2Fnovo-radio%3E%0A%20%20%20%20%3Cnovo-radio%20button%3D%22true%22%20theme%3D%22icon%22%20icon%3D%22checkbox-indeterminate%22%20name%3D%22icon%22%20value%3D%22two%22%20(change)%3D%22onChange(%24event)%22%3E%3C%2Fnovo-radio%3E%0A%20%20%20%20%3Cnovo-radio%20button%3D%22true%22%20theme%3D%22icon%22%20icon%3D%22checkbox-add%22%20name%3D%22icon%22%20value%3D%22three%22%20(change)%3D%22onChange(%24event)%22%3E%3C%2Fnovo-radio%3E%0A%3C%2Fnovo-radio-group%3E%0A`
    },
    'vertical-radio': {
        title: 'Vertical Radio Buttons',
        component: VerticalRadioExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Vertical%20Radio%20Buttons%0A%20*%2F%0A%40Component(%7B%0A%20%20selector%3A%20'vertical-radio-example'%2C%0A%20%20templateUrl%3A%20'vertical-radio-example.html'%2C%0A%20%20styleUrls%3A%20%5B'vertical-radio-example.css'%5D%2C%0A%7D)%0Aexport%20class%20VerticalRadioExample%20%7B%0A%20%20onChange(change%3A%20Event)%3A%20void%20%7B%0A%20%20%20%20console.log('Radio%20Change%3A'%2C%20change)%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cnovo-radio%20vertical%3D%22true%22%20%5Bchecked%5D%3D%22false%22%20name%3D%22vertical%22%20value%3D%22one%22%20(change)%3D%22onChange(%24event)%22%3EMake%20me%20anything!%3C%2Fnovo-radio%3E%0A%3Cnovo-radio%20vertical%3D%22true%22%20%5Bchecked%5D%3D%22true%22%20name%3D%22vertical%22%20value%3D%22two%22%20(change)%3D%22onChange(%24event)%22%3EI%20get%20transcluded%20in!%3C%2Fnovo-radio%3E%0A%3Cnovo-radio%20vertical%3D%22true%22%20%5Bchecked%5D%3D%22false%22%20name%3D%22vertical%22%20value%3D%22three%22%20(change)%3D%22onChange(%24event)%22%3EREALLY!%3C%2Fnovo-radio%3E%0A`
    },
    'basic-select': {
        title: 'Basic Select Example',
        component: BasicSelectExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Basic%20Select%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20selector%3A%20'basic-select-example'%2C%0A%20%20templateUrl%3A%20'basic-select-example.html'%2C%0A%20%20styleUrls%3A%20%5B'basic-select-example.css'%5D%2C%0A%7D)%0Aexport%20class%20BasicSelectExample%20%7B%0A%20%20public%20placeholder%3A%20string%20%3D%20'Select...'%3B%0A%20%20public%20options%3A%20Array%3Cstring%3E%20%3D%20%5B'Alpha'%2C%20'Bravo'%2C%20'Charlie'%5D%3B%0A%20%20public%20withNumbers%3A%20Array%3Cany%3E%20%3D%20%5B%0A%20%20%20%20%7B%20label%3A%20'One'%2C%20value%3A%201%20%7D%2C%0A%20%20%20%20%7B%20label%3A%20'Two'%2C%20value%3A%202%20%7D%2C%0A%20%20%20%20%7B%20label%3A%20'Zero'%2C%20value%3A%200%20%7D%2C%0A%20%20%20%20%7B%20label%3A%20'Four'%2C%20value%3A%204%2C%20readOnly%3A%20true%20%7D%2C%0A%20%20%5D%3B%0A%20%20public%20withNumbersValue%3A%20number%20%3D%204%3B%0A%20%20public%20value%3A%20string%20%3D%20'Bravo'%3B%0A%20%20public%20headerConfig%3A%20any%20%3D%20%7B%0A%20%20%20%20label%3A%20'Add%20New%20Item'%2C%0A%20%20%20%20placeholder%3A%20'Enter%20item%20here'%2C%0A%20%20%20%20onSave%3A%20this.create.bind(this)%2C%0A%20%20%7D%3B%0A%0A%20%20public%20create(opt)%3A%20void%20%7B%0A%20%20%20%20this.options%20%3D%20%5B...this.options%2C%20opt%5D%3B%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A%3Ahost%20%7B%0A%20%20padding%3A%2020px%2030px%3B%0A%20%20border-top-right-radius%3A%203px%3B%0A%20%20border-top-left-radius%3A%203px%3B%0A%20%20display%3A%20flex%3B%0A%20%20flex-direction%3A%20row%3B%0A%20%20flex-shrink%3A%200%3B%0A%20%20flex-grow%3A%200%3B%0A%20%20align-items%3A%20flex-start%3B%0A%20%20flex-wrap%3A%20wrap%3B%0A%20%20transition%3A%20background%20460ms%20ease-in-out%3B%0A%7D%0A%0A%3Ahost%20label%20%7B%0A%20%20margin-bottom%3A%2010px%3B%0A%20%20display%3A%20block%3B%0A%7D%0A%0A%3Ahost%20.caption%20%7B%0A%20%20font-size%3A%200.9em%3B%0A%20%20margin-right%3A%205px%3B%0A%7D%0A`,
        htmlSource: `%3Cdiv%3E%0A%20%20%20%20%3Clabel%3E%0A%20%20%20%20%20%20%20%20%3Cspan%20class%3D%22caption%22%3ESelected%20Value%3A%3C%2Fspan%3E%20%7B%7Bvalue%7D%7D%0A%20%20%20%20%3C%2Flabel%3E%0A%20%20%20%20%3Cnovo-select%20%5Boptions%5D%3D%22options%22%20%5Bplaceholder%5D%3D%22placeholder%22%20%5B(ngModel)%5D%3D%22value%22%3E%3C%2Fnovo-select%3E%0A%3C%2Fdiv%3E%0A%3Cdiv%3E%0A%20%20%20%20%3Clabel%3E%0A%20%20%20%20%20%20%20%20%3Cspan%20class%3D%22caption%22%3ESelected%20Value%3A%3C%2Fspan%3E%20%7B%7BwithNumbersValue%7D%7D%0A%20%20%20%20%3C%2Flabel%3E%0A%20%20%20%20%3Cnovo-select%20%5Boptions%5D%3D%22withNumbers%22%20%5B(ngModel)%5D%3D%22withNumbersValue%22%3E%3C%2Fnovo-select%3E%0A%3C%2Fdiv%3E%0A%3Cdiv%3E%0A%20%20%20%20%3Clabel%3E%0A%20%20%20%20%20%20%20%20%3Cspan%20class%3D%22caption%22%3EDisabled%20State%3C%2Fspan%3E%0A%20%20%20%20%3C%2Flabel%3E%0A%20%20%20%20%3Cnovo-select%20%5Boptions%5D%3D%22options%22%20%5Bplaceholder%5D%3D%22placeholder%22%20%5B(ngModel)%5D%3D%22value%22%20disabled%3E%3C%2Fnovo-select%3E%0A%3C%2Fdiv%3E%0A%3Cdiv%3E%0A%20%20%20%20%3Clabel%3E%0A%20%20%20%20%20%20%20%20%3Cspan%20class%3D%22caption%22%3ENo%20Model%20With%20Header%3C%2Fspan%3E%0A%20%20%20%20%3C%2Flabel%3E%0A%20%20%20%20%3Cnovo-select%20%5Boptions%5D%3D%22options%22%20%5Bplaceholder%5D%3D%22placeholder%22%20%5BheaderConfig%5D%3D%22headerConfig%22%3E%3C%2Fnovo-select%3E%0A%3C%2Fdiv%3E%0A`
    },
    'long-select': {
        title: 'Long Select Example',
        component: LongSelectExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Long%20Select%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20selector%3A%20'long-select-example'%2C%0A%20%20templateUrl%3A%20'long-select-example.html'%2C%0A%20%20styleUrls%3A%20%5B'long-select-example.css'%5D%2C%0A%7D)%0Aexport%20class%20LongSelectExample%20%7B%0A%20%20public%20placeholder%3A%20string%20%3D%20'Select...'%3B%0A%20%20public%20states%3A%20Array%3Cstring%3E%20%3D%20%5B%0A%20%20%20%20'Alabama'%2C%0A%20%20%20%20'Alaska'%2C%0A%20%20%20%20'Arizona'%2C%0A%20%20%20%20'Arkansas'%2C%0A%20%20%20%20'California'%2C%0A%20%20%20%20'Colorado'%2C%0A%20%20%20%20'Connecticut'%2C%0A%20%20%20%20'Delaware'%2C%0A%20%20%20%20'Florida'%2C%0A%20%20%20%20'Georgia'%2C%0A%20%20%20%20'Hawaii'%2C%0A%20%20%20%20'Idaho'%2C%0A%20%20%20%20'Illinois'%2C%0A%20%20%20%20'Indiana'%2C%0A%20%20%20%20'Iowa'%2C%0A%20%20%20%20'Kansas'%2C%0A%20%20%20%20'Kentucky'%2C%0A%20%20%20%20'Louisiana'%2C%0A%20%20%20%20'Maine'%2C%0A%20%20%20%20'Maryland'%2C%0A%20%20%20%20'Massachusetts'%2C%0A%20%20%20%20'Michigan'%2C%0A%20%20%20%20'Minnesota'%2C%0A%20%20%20%20'Mississippi'%2C%0A%20%20%20%20'Missouri'%2C%0A%20%20%20%20'Montana'%2C%0A%20%20%20%20'Nebraska'%2C%0A%20%20%20%20'Nevada'%2C%0A%20%20%20%20'New%20Hampshire'%2C%0A%20%20%20%20'New%20Jersey'%2C%0A%20%20%20%20'New%20Mexico'%2C%0A%20%20%20%20'New%20York'%2C%0A%20%20%20%20'North%20Dakota'%2C%0A%20%20%20%20'North%20Carolina'%2C%0A%20%20%20%20'Ohio'%2C%0A%20%20%20%20'Oklahoma'%2C%0A%20%20%20%20'Oregon'%2C%0A%20%20%20%20'Pennsylvania'%2C%0A%20%20%20%20'Rhode%20Island'%2C%0A%20%20%20%20'South%20Carolina'%2C%0A%20%20%20%20'South%20Dakota'%2C%0A%20%20%20%20'Tennessee'%2C%0A%20%20%20%20'Texas'%2C%0A%20%20%20%20'Utah'%2C%0A%20%20%20%20'Vermont'%2C%0A%20%20%20%20'Virginia'%2C%0A%20%20%20%20'Washington'%2C%0A%20%20%20%20'West%20Virginia'%2C%0A%20%20%20%20'Wisconsin'%2C%0A%20%20%20%20'Wyoming'%2C%0A%20%20%5D%3B%0A%20%20public%20state%3A%20any%20%3D%20'Missouri'%3B%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cdiv%3E%0A%20%20%20%20%3Clabel%3E%3Cspan%20class%3D%22caption%22%3ESelected%20Value%3A%3C%2Fspan%3E%7B%7Bstate%7D%7D%3C%2Flabel%3E%0A%20%20%20%20%3Cnovo-select%20%5Boptions%5D%3D%22states%22%20%5Bplaceholder%5D%3D%22placeholder%22%20%5B(ngModel)%5D%3D%22state%22%3E%3C%2Fnovo-select%3E%0A%3C%2Fdiv%3E%0A`
    },
    'tiles-usage': {
        title: 'Tiles Usage Example',
        component: TilesUsageExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Tiles%20Usage%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20selector%3A%20'tiles-usage-example'%2C%0A%20%20templateUrl%3A%20'tiles-usage-example.html'%2C%0A%20%20styleUrls%3A%20%5B'tiles-usage-example.css'%5D%2C%0A%7D)%0Aexport%20class%20TilesUsageExample%20%7B%0A%20%20public%20shown%3A%20boolean%20%3D%20false%3B%0A%20%20public%20demoTiles%3A%20Array%3Cany%3E%20%3D%20%5B%0A%20%20%20%20%7B%0A%20%20%20%20%20%20label%3A%20'Red'%2C%0A%20%20%20%20%20%20value%3A%20'red'%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20label%3A%20'Green'%2C%0A%20%20%20%20%20%20value%3A%20'green'%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20label%3A%20'Disabled'%2C%0A%20%20%20%20%20%20value%3A%20'disabled'%2C%0A%20%20%20%20%20%20disabled%3A%20true%2C%0A%20%20%20%20%7D%2C%0A%20%20%5D%3B%0A%20%20public%20currentColor%3A%20string%3B%0A%20%20public%20value%3A%20string%20%3D%20'red'%3B%0A%0A%20%20colorSelect(newColorValue)%20%7B%0A%20%20%20%20this.currentColor%20%3D%20newColorValue%3B%0A%20%20%7D%0A%0A%20%20disabledClicked(tile)%20%7B%0A%20%20%20%20console.log('Disabled%20tile%20clicked%3A%20'%2C%20tile)%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%7D%0A%0A%20%20selectedClicked(tile)%20%7B%0A%20%20%20%20console.log('Selected%20tile%20clicked%3A%20'%2C%20tile)%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%7D%0A%0A%20%20toggleShown()%20%7B%0A%20%20%20%20this.shown%20%3D%20!this.shown%3B%0A%20%20%7D%0A%0A%20%20addTile()%20%7B%0A%20%20%20%20this.demoTiles.push(%7B%0A%20%20%20%20%20%20label%3A%20'Blue'%2C%0A%20%20%20%20%20%20value%3A%20'blue'%2C%0A%20%20%20%20%7D)%3B%0A%20%20%20%20this.demoTiles%20%3D%20%5B...this.demoTiles%5D%3B%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cnovo-tiles%20%5Boptions%5D%3D%22demoTiles%22%20(onChange)%3D%22colorSelect(%24event)%22%20%5B(ngModel)%5D%3D%22value%22%0A%20%20%20%20%20%20%20%20%20%20%20%20(onDisabledOptionClick)%3D%22disabledClicked(%24event)%22%0A%20%20%20%20%20%20%20%20%20%20%20%20(onSelectedOptionClick)%3D%22selectedClicked(%24event)%22%3E%3C%2Fnovo-tiles%3E%0A%3Chr%3E%0A%3Cbutton%20theme%3D%22primary%22%20type%3D%22button%22%20name%3D%22button%22%20(click)%3D%22toggleShown()%22%3EShow%20Tiles%3C%2Fbutton%3E%0A%3Cbutton%20theme%3D%22primary%22%20type%3D%22button%22%20name%3D%22button%22%20(click)%3D%22addTile()%22%3EAdd%20Tile%3C%2Fbutton%3E%0A%3Cbr%2F%3E%0A%3Cbr%2F%3E%0A%3Cnovo-tiles%20*ngIf%3D%22shown%22%20%5Boptions%5D%3D%22demoTiles%22%20(onChange)%3D%22colorSelect(%24event)%22%20%5B(ngModel)%5D%3D%22value%22%3E%3C%2Fnovo-tiles%3E%0A%0AYou%20have%20picked%20(output)%3A%20%3Cstrong%3E%7B%7B%20currentColor%20%7C%7C%20'No%20selection'%20%7D%7D%3C%2Fstrong%3E%0AYou%20have%20picked%20(ngModel)%3A%20%3Cstrong%3E%7B%7B%20value%20%7C%7C%20'No%20selection'%20%7D%7D%3C%2Fstrong%3E%0A`
    },
    'address-value': {
        title: 'Address Value Example',
        component: AddressValueExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0Aimport%20%7B%20NOVO_VALUE_TYPE%2C%20NOVO_VALUE_THEME%20%7D%20from%20'novo-elements'%3B%0A%0A%2F**%0A%20*%20%40title%20Address%20Value%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20selector%3A%20'address-value-example'%2C%0A%20%20templateUrl%3A%20'address-value-example.html'%2C%0A%20%20styleUrls%3A%20%5B'address-value-example.css'%5D%2C%0A%7D)%0Aexport%20class%20AddressValueExample%20%7B%0A%20%20public%20theme%20%3D%20NOVO_VALUE_THEME.DEFAULT%3B%0A%20%20public%20data%3A%20any%20%3D%20%7B%0A%20%20%20%20address1%3A%20'100%20Summer%20Street'%2C%0A%20%20%20%20city%3A%20'Boston'%2C%0A%20%20%20%20state%3A%20'MA'%2C%0A%20%20%20%20zip%3A%20'02143'%2C%0A%20%20%20%20country%3A%20%7B%0A%20%20%20%20%20%20name%3A%20'United%20States'%2C%0A%20%20%20%20%7D%2C%0A%20%20%7D%3B%0A%20%20public%20meta%3A%20any%20%3D%20%7B%0A%20%20%20%20dataType%3A%20'Address'%2C%0A%20%20%20%20type%3A%20'Address'%2C%0A%20%20%20%20label%3A%20'Address'%2C%0A%20%20%20%20name%3A%20'address'%2C%0A%20%20%7D%3B%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cnovo-value%20%5Bdata%5D%3D%22data%22%20%5Bmeta%5D%3D%22meta%22%20%5Btheme%5D%3D%22theme%22%3E%3C%2Fnovo-value%3E%0A`
    },
    'associated-value': {
        title: 'Associated Value Example',
        component: AssociatedValueExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0Aimport%20%7B%20NOVO_VALUE_TYPE%2C%20NOVO_VALUE_THEME%20%7D%20from%20'novo-elements'%3B%0A%0A%2F**%0A%20*%20%40title%20Associated%20Value%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20selector%3A%20'associated-value-example'%2C%0A%20%20templateUrl%3A%20'associated-value-example.html'%2C%0A%20%20styleUrls%3A%20%5B'associated-value-example.css'%5D%2C%0A%7D)%0Aexport%20class%20AssociatedValueExample%20%7B%0A%20%20public%20theme%20%3D%20NOVO_VALUE_THEME.DEFAULT%3B%0A%20%20public%20data%3A%20any%20%3D%20%7B%0A%20%20%20%20id%3A%201%2C%0A%20%20%20%20firstName%3A%20'Alice'%2C%0A%20%20%20%20lastName%3A%20'Wonderland'%2C%0A%20%20%7D%3B%0A%20%20public%20meta%3A%20any%20%3D%20%7B%0A%20%20%20%20type%3A%20'TO_ONE'%2C%0A%20%20%20%20name%3A%20'owner'%2C%0A%20%20%20%20label%3A%20'Owner'%2C%0A%20%20%20%20associatedEntity%3A%20%7B%0A%20%20%20%20%20%20entity%3A%20'CorporateUser'%2C%0A%20%20%20%20%7D%2C%0A%20%20%7D%3B%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cnovo-value%20%5Bdata%5D%3D%22data%22%20%5Bmeta%5D%3D%22meta%22%20%5Btheme%5D%3D%22theme%22%3E%3C%2Fnovo-value%3E%0A`
    },
    'basic-value': {
        title: 'Basic Value Example',
        component: BasicValueExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0Aimport%20%7B%20NOVO_VALUE_TYPE%2C%20NOVO_VALUE_THEME%20%7D%20from%20'novo-elements'%3B%0A%0A%2F**%0A%20*%20%40title%20Basic%20Value%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20selector%3A%20'basic-value-example'%2C%0A%20%20templateUrl%3A%20'basic-value-example.html'%2C%0A%20%20styleUrls%3A%20%5B'basic-value-example.css'%5D%2C%0A%7D)%0Aexport%20class%20BasicValueExample%20%7B%0A%20%20public%20theme%20%3D%20NOVO_VALUE_THEME.MOBILE%3B%0A%20%20public%20data%3A%20any%20%3D%201234567890%3B%0A%20%20public%20meta%3A%20any%20%3D%20%7B%0A%20%20%20%20type%3A%20'SCALAR'%2C%0A%20%20%20%20name%3A%20'phone1'%2C%0A%20%20%20%20label%3A%20'PH%20%23'%2C%0A%20%20%7D%3B%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cnovo-value%20%5Bdata%5D%3D%22data%22%20%5Bmeta%5D%3D%22meta%22%20%5Btheme%5D%3D%22theme%22%3E%3C%2Fnovo-value%3E%0A`
    },
    'category-value': {
        title: 'Category Value Example',
        component: CategoryValueExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0Aimport%20%7B%20NOVO_VALUE_TYPE%2C%20NOVO_VALUE_THEME%20%7D%20from%20'novo-elements'%3B%0A%0A%2F**%0A%20*%20%40title%20Category%20Value%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20selector%3A%20'category-value-example'%2C%0A%20%20templateUrl%3A%20'category-value-example.html'%2C%0A%20%20styleUrls%3A%20%5B'category-value-example.css'%5D%2C%0A%7D)%0Aexport%20class%20CategoryValueExample%20%7B%0A%20%20public%20theme%20%3D%20NOVO_VALUE_THEME.DEFAULT%3B%0A%20%20public%20data%3A%20any%20%3D%20%7B%0A%20%20%20%20value%3A%20'stuff'%2C%0A%20%20%20%20label%3A%20'Stuff%20Category'%2C%0A%20%20%7D%3B%0A%20%20public%20meta%3A%20any%20%3D%20%7B%0A%20%20%20%20type%3A%20'TO_ONE'%2C%0A%20%20%20%20name%3A%20'category'%2C%0A%20%20%20%20label%3A%20'Category'%2C%0A%20%20%20%20associatedEntity%3A%20%7B%0A%20%20%20%20%20%20entity%3A%20'Category'%2C%0A%20%20%20%20%7D%2C%0A%20%20%7D%3B%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cnovo-value%20%5Bdata%5D%3D%22data%22%20%5Bmeta%5D%3D%22meta%22%20%5Btheme%5D%3D%22theme%22%3E%3C%2Fnovo-value%3E%0A`
    },
    'corporate-user-value': {
        title: 'Corporate User Value Example',
        component: CorporateUserValueExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0Aimport%20%7B%20NOVO_VALUE_TYPE%2C%20NOVO_VALUE_THEME%20%7D%20from%20'novo-elements'%3B%0A%0A%2F**%0A%20*%20%40title%20Corporate%20User%20Value%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20selector%3A%20'corporate-user-value-example'%2C%0A%20%20templateUrl%3A%20'corporate-user-value-example.html'%2C%0A%20%20styleUrls%3A%20%5B'corporate-user-value-example.css'%5D%2C%0A%7D)%0Aexport%20class%20CorporateUserValueExample%20%7B%0A%20%20public%20theme%20%3D%20NOVO_VALUE_THEME.DEFAULT%3B%0A%20%20public%20data%3A%20any%20%3D%20%7B%0A%20%20%20%20id%3A%20123%2C%0A%20%20%20%20firstName%3A%20'Jack'%2C%0A%20%20%20%20lastName%3A%20'White'%2C%0A%20%20%7D%3B%0A%20%20public%20meta%3A%20any%20%3D%20%7B%0A%20%20%20%20type%3A%20'TO_ONE'%2C%0A%20%20%20%20name%3A%20'user'%2C%0A%20%20%20%20label%3A%20'Internal%20User'%2C%0A%20%20%20%20associatedEntity%3A%20%7B%0A%20%20%20%20%20%20entity%3A%20'CorporateUser'%2C%0A%20%20%20%20%7D%2C%0A%20%20%7D%3B%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cnovo-value%20%5Bdata%5D%3D%22data%22%20%5Bmeta%5D%3D%22meta%22%20%5Btheme%5D%3D%22theme%22%3E%3C%2Fnovo-value%3E%0A`
    },
    'date-time-value': {
        title: 'Date Time Value Example',
        component: DateTimeValueExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0Aimport%20%7B%20NOVO_VALUE_TYPE%2C%20NOVO_VALUE_THEME%20%7D%20from%20'novo-elements'%3B%0A%0A%2F**%0A%20*%20%40title%20Date%20Time%20Value%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20selector%3A%20'date-time-value-example'%2C%0A%20%20templateUrl%3A%20'date-time-value-example.html'%2C%0A%20%20styleUrls%3A%20%5B'date-time-value-example.css'%5D%2C%0A%7D)%0Aexport%20class%20DateTimeValueExample%20%7B%0A%20%20public%20theme%20%3D%20NOVO_VALUE_THEME.DEFAULT%3B%0A%20%20public%20data%3A%20any%20%3D%20new%20Date().getTime()%3B%0A%20%20public%20meta%3A%20any%20%3D%20%7B%0A%20%20%20%20type%3A%20'SCALAR'%2C%0A%20%20%20%20dataSpecialization%3A%20'DATETIME'%2C%0A%20%20%20%20label%3A%20'Date'%2C%0A%20%20%7D%3B%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cnovo-value%20%5Bdata%5D%3D%22data%22%20%5Bmeta%5D%3D%22meta%22%20%5Btheme%5D%3D%22theme%22%3E%3C%2Fnovo-value%3E%0A`
    },
    'entity-list-value': {
        title: 'Entity List Value Example',
        component: EntityListValueExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0Aimport%20%7B%20NOVO_VALUE_TYPE%2C%20NOVO_VALUE_THEME%20%7D%20from%20'novo-elements'%3B%0A%0A%2F**%0A%20*%20%40title%20Entity%20List%20Value%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20selector%3A%20'entity-list-value-example'%2C%0A%20%20templateUrl%3A%20'entity-list-value-example.html'%2C%0A%20%20styleUrls%3A%20%5B'entity-list-value-example.css'%5D%2C%0A%7D)%0Aexport%20class%20EntityListValueExample%20%7B%0A%20%20public%20theme%20%3D%20NOVO_VALUE_THEME.DEFAULT%3B%0A%20%20public%20data%3A%20any%20%3D%20%7B%0A%20%20%20%20data%3A%20%5B%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20id%3A%201%2C%0A%20%20%20%20%20%20%20%20firstName%3A%20'George'%2C%0A%20%20%20%20%20%20%20%20lastName%3A%20'Washington'%2C%0A%20%20%20%20%20%20%20%20personSubtype%3A%20'Candidate'%2C%0A%20%20%20%20%20%20%20%20openLink%3A%20(data)%20%3D%3E%20%7B%7D%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20id%3A%202%2C%0A%20%20%20%20%20%20%20%20firstName%3A%20'John'%2C%0A%20%20%20%20%20%20%20%20lastName%3A%20'Adams'%2C%0A%20%20%20%20%20%20%20%20personSubtype%3A%20'ClientContact'%2C%0A%20%20%20%20%20%20%20%20openLink%3A%20(data)%20%3D%3E%20%7B%7D%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20id%3A%203%2C%0A%20%20%20%20%20%20%20%20firstName%3A%20'Abraham'%2C%0A%20%20%20%20%20%20%20%20lastName%3A%20'Lincoln'%2C%0A%20%20%20%20%20%20%20%20personSubtype%3A%20'Lead'%2C%0A%20%20%20%20%20%20%20%20openLink%3A%20(data)%20%3D%3E%20%7B%7D%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%5D%2C%0A%20%20%7D%3B%0A%20%20public%20meta%3A%20any%20%3D%20%7B%0A%20%20%20%20type%3A%20'TO_MANY'%2C%0A%20%20%20%20name%3A%20'guests'%2C%0A%20%20%20%20label%3A%20'Attendees'%2C%0A%20%20%20%20associatedEntity%3A%20%7B%0A%20%20%20%20%20%20entity%3A%20'CorporateUser'%2C%0A%20%20%20%20%7D%2C%0A%20%20%7D%3B%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cnovo-value%20%5Bdata%5D%3D%22data%22%20%5Bmeta%5D%3D%22meta%22%20%5Btheme%5D%3D%22theme%22%3E%3C%2Fnovo-value%3E%0A`
    },
    'external-link-value': {
        title: 'Value with Extenal Links Example',
        component: ExternalLinkValueExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0Aimport%20%7B%20NOVO_VALUE_TYPE%2C%20NOVO_VALUE_THEME%20%7D%20from%20'novo-elements'%3B%0A%0A%2F**%0A%20*%20%40title%20Value%20with%20Extenal%20Links%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20selector%3A%20'external-link-value-example'%2C%0A%20%20templateUrl%3A%20'external-link-value-example.html'%2C%0A%20%20styleUrls%3A%20%5B'external-link-value-example.css'%5D%2C%0A%7D)%0Aexport%20class%20ExternalLinkValueExample%20%7B%0A%20%20public%20theme%20%3D%20NOVO_VALUE_THEME.MOBILE%3B%0A%20%20public%20data%3A%20any%20%3D%20'www.bullhorn.com'%3B%0A%20%20public%20meta%3A%20any%20%3D%20%7B%0A%20%20%20%20type%3A%20'SCALAR'%2C%0A%20%20%20%20name%3A%20'companyUrl'%2C%0A%20%20%20%20label%3A%20'Company%20URL'%2C%0A%20%20%7D%3B%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cnovo-value%20%5Bdata%5D%3D%22data%22%20%5Bmeta%5D%3D%22meta%22%20%5Btheme%5D%3D%22theme%22%3E%3C%2Fnovo-value%3E%0A`
    },
    'formatter-value': {
        title: 'Formatter Value Example',
        component: FormatterValueExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0Aimport%20%7B%20NOVO_VALUE_TYPE%2C%20NOVO_VALUE_THEME%20%7D%20from%20'novo-elements'%3B%0A%0A%2F**%0A%20*%20%40title%20Formatter%20Value%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20selector%3A%20'formatter-value-example'%2C%0A%20%20templateUrl%3A%20'formatter-value-example.html'%2C%0A%20%20styleUrls%3A%20%5B'formatter-value-example.css'%5D%2C%0A%7D)%0Aexport%20class%20FormatterValueExample%20%7B%0A%20%20public%20theme%20%3D%20NOVO_VALUE_THEME.DEFAULT%3B%0A%20%20public%20data%3A%20any%20%3D%20%7B%0A%20%20%20%20id%3A%20123%2C%0A%20%20%7D%3B%0A%20%20public%20meta%3A%20any%20%3D%20%7B%0A%20%20%20%20type%3A%20'SCALAR'%2C%0A%20%20%20%20name%3A%20'Placement'%2C%0A%20%20%20%20label%3A%20'Placement'%2C%0A%20%20%20%20associatedEntity%3A%20%7B%0A%20%20%20%20%20%20entity%3A%20'Placement'%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20showEntityIcon%3A%20true%2C%0A%20%20%20%20entityIconClass%3A%20'candidate'%2C%0A%20%20%20%20formatter%3A%20(value%2C%20args)%20%3D%3E%20%7B%0A%20%20%20%20%20%20return%20%60%24%7Bargs.label%7D%20%23%24%7B(value%20%26%26%20value.id)%20%7C%7C%20''%7D%60%3B%0A%20%20%20%20%7D%2C%0A%20%20%7D%3B%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cnovo-value%20%5Bdata%5D%3D%22data%22%20%5Bmeta%5D%3D%22meta%22%20%5Btheme%5D%3D%22theme%22%3E%3C%2Fnovo-value%3E%0A`
    },
    'icon-value': {
        title: 'Icon Value Example',
        component: IconValueExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0Aimport%20%7B%20NOVO_VALUE_TYPE%2C%20NOVO_VALUE_THEME%20%7D%20from%20'novo-elements'%3B%0A%0A%2F**%0A%20*%20%40title%20Icon%20Value%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20selector%3A%20'icon-value-example'%2C%0A%20%20templateUrl%3A%20'icon-value-example.html'%2C%0A%20%20styleUrls%3A%20%5B'icon-value-example.css'%5D%2C%0A%7D)%0Aexport%20class%20IconValueExample%20%7B%0A%20%20public%20theme%20%3D%20NOVO_VALUE_THEME.DEFAULT%3B%0A%20%20public%20data%3A%20any%20%3D%20'Approved'%3B%0A%20%20public%20meta%3A%20any%20%3D%20%7B%0A%20%20%20%20type%3A%20'SCALAR'%2C%0A%20%20%20%20options%3A%20%5B%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20value%3A%20'Approved'%2C%0A%20%20%20%20%20%20%20%20label%3A%20'Approved'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%5D%2C%0A%20%20%20%20name%3A%20'status'%2C%0A%20%20%20%20label%3A%20'Status'%2C%0A%20%20%20%20icons%3A%20%5B%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20iconCls%3A%20'next'%2C%0A%20%20%20%20%20%20%20%20onIconClick%3A%20(data%2C%20meta)%20%3D%3E%20window.alert('hey%20there')%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20iconCls%3A%20'close'%2C%0A%20%20%20%20%20%20%20%20onIconClick%3A%20(data%2C%20meta)%20%3D%3E%20window.alert('hey%20there')%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%5D%2C%0A%20%20%7D%3B%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cnovo-value%20%5Bdata%5D%3D%22data%22%20%5Bmeta%5D%3D%22meta%22%20%5Btheme%5D%3D%22theme%22%3E%3C%2Fnovo-value%3E%0A`
    },
    'multi-option-value': {
        title: 'Multi Option Value Example',
        component: MultiOptionValueExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0Aimport%20%7B%20NOVO_VALUE_TYPE%2C%20NOVO_VALUE_THEME%20%7D%20from%20'novo-elements'%3B%0A%0A%2F**%0A%20*%20%40title%20Multi%20Option%20Value%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20selector%3A%20'multi-option-value-example'%2C%0A%20%20templateUrl%3A%20'multi-option-value-example.html'%2C%0A%20%20styleUrls%3A%20%5B'multi-option-value-example.css'%5D%2C%0A%7D)%0Aexport%20class%20MultiOptionValueExample%20%7B%0A%20%20public%20theme%20%3D%20NOVO_VALUE_THEME.DEFAULT%3B%0A%20%20public%20data%3A%20any%20%3D%20%5B'1'%2C%20'3'%5D%3B%0A%20%20public%20meta%3A%20any%20%3D%20%7B%0A%20%20%20%20name%3A%20'status'%2C%0A%20%20%20%20label%3A%20'Status'%2C%0A%20%20%20%20inputType%3A%20'SELECT'%2C%0A%20%20%20%20options%3A%20%5B%0A%20%20%20%20%20%20%7B%20label%3A%20'New%20Lead'%2C%20value%3A%20'1'%20%7D%2C%0A%20%20%20%20%20%20%7B%20label%3A%20'Old%20Lead'%2C%20value%3A%20'2'%20%7D%2C%0A%20%20%20%20%20%20%7B%20label%3A%20'Active'%2C%20value%3A%20'3'%20%7D%2C%0A%20%20%20%20%20%20%7B%20label%3A%20'Archived'%2C%20value%3A%20'4'%20%7D%2C%0A%20%20%20%20%5D%2C%0A%20%20%7D%3B%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cnovo-value%20%5Bdata%5D%3D%22data%22%20%5Bmeta%5D%3D%22meta%22%20%5Btheme%5D%3D%22theme%22%3E%3C%2Fnovo-value%3E%0A`
    },
    'basic-card': {
        title: 'Basic Cards',
        component: BasicCardExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0Aimport%20%7B%20NovoToastService%20%7D%20from%20'novo-elements'%3B%0A%0A%2F**%0A%20*%20%40title%20Basic%20Cards%0A%20*%2F%0A%40Component(%7B%0A%20%20selector%3A%20'basic-card-example'%2C%0A%20%20templateUrl%3A%20'basic-card-example.html'%2C%0A%20%20styleUrls%3A%20%5B'basic-card-example.css'%5D%2C%0A%7D)%0Aexport%20class%20BasicCardExample%20%7B%0A%20%20%2F%2F%20Config%20for%20demos%0A%20%20refresh%3A%20boolean%20%3D%20true%3B%0A%20%20close%3A%20boolean%20%3D%20true%3B%0A%20%20move%3A%20boolean%20%3D%20true%3B%0A%20%20padding%3A%20boolean%20%3D%20true%3B%0A%20%20loading%3A%20boolean%20%3D%20true%3B%0A%0A%20%20start%3A%20number%20%3D%202000%3B%0A%20%20end%3A%20number%20%3D%202005%3B%0A%20%20created%3A%20number%20%3D%201995%3B%0A%0A%20%20bestLabel%3A%20string%20%3D%20'BEST%20TIME%20TO%20CONTACT'%3B%0A%20%20bestTime%3A%20string%20%3D%20'1-PM'%3B%0A%20%20bestDay%3A%20string%20%3D%20'Friday'%3B%0A%20%20message%3A%20string%3B%0A%20%20messageIcon%3A%20string%3B%0A%0A%20%20donutValue%3A%20number%20%3D%200.5%3B%0A%20%20donutColor%3A%20string%20%3D%20'%23662255'%3B%0A%20%20donutLabel%3A%20string%20%3D%20'Probability%20of%20Win%20%25'%3B%0A%0A%20%20constructor(private%20toaster%3A%20NovoToastService)%20%7B%7D%0A%0A%20%20onClose()%20%7B%0A%20%20%20%20this.toaster.alert(%7B%0A%20%20%20%20%20%20theme%3A%20'info'%2C%0A%20%20%20%20%20%20title%3A%20'Cards'%2C%0A%20%20%20%20%20%20message%3A%20'Close%20Clicked!'%2C%0A%20%20%20%20%7D)%3B%0A%20%20%7D%0A%0A%20%20onRefresh()%20%7B%0A%20%20%20%20this.toaster.alert(%7B%0A%20%20%20%20%20%20theme%3A%20'success'%2C%0A%20%20%20%20%20%20title%3A%20'Cards'%2C%0A%20%20%20%20%20%20message%3A%20'Refresh%20Clicked!'%2C%0A%20%20%20%20%7D)%3B%0A%20%20%7D%0A%0A%20%20toggleLoading()%20%7B%0A%20%20%20%20this.loading%20%3D%20!this.loading%3B%0A%20%20%7D%0A%0A%20%20toggleMessage()%20%7B%0A%20%20%20%20if%20(!this.message)%20%7B%0A%20%20%20%20%20%20this.message%20%3D%20'NO%20DATA!'%3B%0A%20%20%20%20%20%20this.messageIcon%20%3D%20'email'%3B%0A%20%20%20%20%7D%20else%20%7B%0A%20%20%20%20%20%20this.message%20%3D%20undefined%3B%0A%20%20%20%20%7D%0A%20%20%7D%0A%0A%20%20singleAction()%20%7B%0A%20%20%20%20window.alert('HELLO!')%3B%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cnovo-card%20%5Btitle%5D%3D%22'All%20Attributes'%22%0A%20%20%20%20%20%20%20%20%20%20%20icon%3D%22activity%22%0A%20%20%20%20%20%20%20%20%20%20%20%5Bloading%5D%3D%22loading%22%0A%20%20%20%20%20%20%20%20%20%20%20%5Bmessage%5D%3D%22message%22%0A%20%20%20%20%20%20%20%20%20%20%20%5BmessageIcon%5D%3D%22messageIcon%22%0A%20%20%20%20%20%20%20%20%20%20%20%5Brefresh%5D%3D%22refresh%22%0A%20%20%20%20%20%20%20%20%20%20%20%5Bmove%5D%3D%22move%22%0A%20%20%20%20%20%20%20%20%20%20%20%5Bclose%5D%3D%22close%22%0A%20%20%20%20%20%20%20%20%20%20%20(onRefresh)%3D%22onRefresh()%22%0A%20%20%20%20%20%20%20%20%20%20%20(onClose)%3D%22onClose()%22%0A%20%20%20%20%20%20%20%20%20%20%20%5Bpadding%5D%3D%22padding%22%3E%0A%20%20%20%20This%20is%20the%20ALL%20attribute%20card%20content!%0A%3C%2Fnovo-card%3E%0A`
    },
    'card-config': {
        title: 'Full Configuration Cards',
        component: CardConfigExample,
        tsSource: `%2F%2F%20NG2%0Aimport%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%2F%2F%20Vendor%0Aimport%20%7B%20NovoToastService%20%7D%20from%20'novo-elements'%3B%0A%0A%2F**%0A%20*%20%40title%20Full%20Configuration%20Cards%0A%20*%2F%0A%40Component(%7B%0A%20%20selector%3A%20'card-config-example'%2C%0A%20%20templateUrl%3A%20'card-config-example.html'%2C%0A%20%20styleUrls%3A%20%5B'card-config-example.css'%5D%2C%0A%7D)%0Aexport%20class%20CardConfigExample%20%7B%0A%20%20%2F%2F%20Config%20for%20demos%0A%20%20refresh%3A%20boolean%20%3D%20true%3B%0A%20%20close%3A%20boolean%20%3D%20true%3B%0A%20%20move%3A%20boolean%20%3D%20true%3B%0A%20%20padding%3A%20boolean%20%3D%20true%3B%0A%20%20loading%3A%20boolean%20%3D%20true%3B%0A%0A%20%20fullConfig%3A%20any%20%3D%20%7B%0A%20%20%20%20refresh%3A%20false%2C%0A%20%20%20%20icon%3A%20'email'%2C%0A%20%20%20%20messageIcon%3A%20'email'%2C%0A%20%20%20%20close%3A%20false%2C%0A%20%20%20%20move%3A%20true%2C%0A%20%20%20%20onClose%3A%20this.onClose.bind(this)%2C%0A%20%20%20%20onRefresh%3A%20this.onRefresh.bind(this)%2C%0A%20%20%20%20title%3A%20'Test'%2C%0A%20%20%20%20loading%3A%20false%2C%0A%20%20%20%20padding%3A%20true%2C%0A%20%20%7D%3B%0A%0A%20%20start%3A%20number%20%3D%202000%3B%0A%20%20end%3A%20number%20%3D%202005%3B%0A%20%20created%3A%20number%20%3D%201995%3B%0A%0A%20%20bestLabel%3A%20string%20%3D%20'BEST%20TIME%20TO%20CONTACT'%3B%0A%20%20bestTime%3A%20string%20%3D%20'1-PM'%3B%0A%20%20bestDay%3A%20string%20%3D%20'Friday'%3B%0A%20%20message%3A%20string%3B%0A%20%20messageIcon%3A%20string%3B%0A%0A%20%20donutValue%3A%20number%20%3D%200.5%3B%0A%20%20donutColor%3A%20string%20%3D%20'%23662255'%3B%0A%20%20donutLabel%3A%20string%20%3D%20'Probability%20of%20Win%20%25'%3B%0A%0A%20%20constructor(private%20toaster%3A%20NovoToastService)%20%7B%7D%0A%0A%20%20onClose()%20%7B%0A%20%20%20%20this.toaster.alert(%7B%0A%20%20%20%20%20%20theme%3A%20'info'%2C%0A%20%20%20%20%20%20title%3A%20'Cards'%2C%0A%20%20%20%20%20%20message%3A%20'Close%20Clicked!'%2C%0A%20%20%20%20%7D)%3B%0A%20%20%7D%0A%0A%20%20onRefresh()%20%7B%0A%20%20%20%20this.toaster.alert(%7B%0A%20%20%20%20%20%20theme%3A%20'success'%2C%0A%20%20%20%20%20%20title%3A%20'Cards'%2C%0A%20%20%20%20%20%20message%3A%20'Refresh%20Clicked!'%2C%0A%20%20%20%20%7D)%3B%0A%20%20%7D%0A%0A%20%20toggleLoading()%20%7B%0A%20%20%20%20this.loading%20%3D%20!this.loading%3B%0A%20%20%7D%0A%0A%20%20toggleMessage()%20%7B%0A%20%20%20%20if%20(!this.message)%20%7B%0A%20%20%20%20%20%20this.message%20%3D%20'NO%20DATA!'%3B%0A%20%20%20%20%20%20this.messageIcon%20%3D%20'email'%3B%0A%20%20%20%20%7D%20else%20%7B%0A%20%20%20%20%20%20this.message%20%3D%20undefined%3B%0A%20%20%20%20%7D%0A%20%20%7D%0A%0A%20%20toggleLoadingConfig()%20%7B%0A%20%20%20%20this.fullConfig.loading%20%3D%20!this.fullConfig.loading%3B%0A%20%20%7D%0A%0A%20%20toggleMessageConfig()%20%7B%0A%20%20%20%20if%20(!this.fullConfig.message)%20%7B%0A%20%20%20%20%20%20this.fullConfig.message%20%3D%20'NO%20DATA!'%3B%0A%20%20%20%20%7D%20else%20%7B%0A%20%20%20%20%20%20this.fullConfig.message%20%3D%20undefined%3B%0A%20%20%20%20%7D%0A%20%20%7D%0A%0A%20%20singleAction()%20%7B%0A%20%20%20%20window.alert('HELLO!')%3B%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cnovo-card%20%5Bconfig%5D%3D%22fullConfig%22%3E%0A%20%20%3Cnovo-card-actions%3E%0A%20%20%20%20%20%20%3Cbutton%20theme%3D%22icon%22%20icon%3D%22info%22%20(click)%3D%22singleAction()%22%3E%3C%2Fbutton%3E%0A%20%20%3C%2Fnovo-card-actions%3E%0A%20%20DEMO%20%3A)%0A%3C%2Fnovo-card%3E%0A`
    },
    'accordion': {
        title: 'Accordion Example',
        component: AccordionExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Accordion%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20selector%3A%20'accordion-example'%2C%0A%20%20templateUrl%3A%20'accordion-example.html'%2C%0A%20%20styleUrls%3A%20%5B'accordion-example.css'%5D%2C%0A%7D)%0Aexport%20class%20AccordionExample%20%7B%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cnovo-accordion%3E%0A%20%20%3Cnovo-expansion-panel%3E%0A%20%20%20%20%3Cnovo-expansion-panel-header%3E%0A%20%20%20%20%20%20This%20is%20the%20expansion%201%20title%0A%20%20%20%20%3C%2Fnovo-expansion-panel-header%3E%0A%20%20%20%20%3Cp%3EThis%20the%20expansion%201%20content%3C%2Fp%3E%0A%20%20%3C%2Fnovo-expansion-panel%3E%0A%0A%20%20%3Cnovo-expansion-panel%3E%0A%20%20%20%20%3Cnovo-expansion-panel-header%3E%0A%20%20%20%20%20%20This%20is%20the%20expansion%202%20title%0A%20%20%20%20%3C%2Fnovo-expansion-panel-header%3E%0A%20%20%20%20%3Cp%3EThis%20the%20expansion%202%20content%3C%2Fp%3E%0A%20%20%3C%2Fnovo-expansion-panel%3E%0A%3C%2Fnovo-accordion%3E%0A`
    },
    'basic-expansion': {
        title: 'Dialogue buttons',
        component: BasicExpansionExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Dialogue%20buttons%0A%20*%2F%0A%40Component(%7B%0A%20%20selector%3A%20'basic-expansion-example'%2C%0A%20%20templateUrl%3A%20'basic-expansion-example.html'%2C%0A%20%20styleUrls%3A%20%5B'basic-expansion-example.css'%5D%2C%0A%7D)%0Aexport%20class%20BasicExpansionExample%20%7B%0A%20%20public%20isDisabled%3A%20boolean%20%3D%20false%3B%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cnovo-expansion-panel%20%5Bdisabled%5D%3D%22isDisabled%22%3E%0A%20%20%3Cnovo-expansion-panel-header%3E%0A%20%20%20%20%3Cnovo-panel-title%3E%0A%20%20%20%20%20%20This%20is%20the%20expansion%20title%0A%20%20%20%20%3C%2Fnovo-panel-title%3E%0A%20%20%20%20%3Cnovo-panel-description%3E%0A%20%20%20%20%20%20This%20is%20a%20summary%20of%20the%20content%0A%20%20%20%20%3C%2Fnovo-panel-description%3E%0A%20%20%3C%2Fnovo-expansion-panel-header%3E%0A%20%20%3Cp%3EThis%20is%20the%20primary%20content%20of%20the%20panel.%3C%2Fp%3E%0A%3C%2Fnovo-expansion-panel%3E%0A%3Cdiv%3E%0A%20%20%3Cspan%3EIs%20Disabled%3F%3C%2Fspan%3E%0A%20%20%3Cnovo-switch%20theme%3D%22grapefruit%22%20%5B(ngModel)%5D%3D%22isDisabled%22%3E%3C%2Fnovo-switch%3E%0A%3C%2Fdiv%3E%0A`
    },
    'lazy-expansion': {
        title: 'Lazy Instaniated Content with Expansion',
        component: LazyExpansionExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Lazy%20Instaniated%20Content%20with%20Expansion%0A%20*%2F%0A%40Component(%7B%0A%20%20selector%3A%20'lazy-expansion-example'%2C%0A%20%20templateUrl%3A%20'lazy-expansion-example.html'%2C%0A%20%20styleUrls%3A%20%5B'lazy-expansion-example.css'%5D%2C%0A%7D)%0Aexport%20class%20LazyExpansionExample%20%7B%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cnovo-expansion-panel%3E%0A%20%20%20%20%3Cnovo-expansion-panel-header%3E%0A%20%20%20%20%20%20This%20is%20the%20expansion%20title%0A%20%20%20%20%3C%2Fnovo-expansion-panel-header%3E%0A%0A%20%20%20%20%3Cng-template%20matExpansionPanelContent%3E%0A%20%20%20%20%20%20Some%20deferred%20content%0A%20%20%20%20%3C%2Fng-template%3E%0A%3C%2Fnovo-expansion-panel%3E%0A`
    },
    'basic-header': {
        title: 'Basic Header Example',
        component: BasicHeaderExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0Aimport%20%7B%20NovoToastService%20%7D%20from%20'novo-elements'%3B%0A%0Aconst%20HEADER_THEMES%20%3D%20%5B'company'%2C%20'job'%2C%20'candidate'%2C%20'contact'%2C%20'opportunity'%2C%20'lead'%2C%20'light'%2C%20'white'%5D%3B%0Aconst%20HEADER_ICONS%20%3D%20%5B'company'%2C%20'job'%2C%20'candidate'%2C%20'person'%2C%20'opportunity'%2C%20'lead'%2C%20'bolt'%2C%20'shield'%5D%3B%0A%0A%2F**%0A%20*%20%40title%20Basic%20Header%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20selector%3A%20'basic-header-example'%2C%0A%20%20templateUrl%3A%20'basic-header-example.html'%2C%0A%20%20styleUrls%3A%20%5B'basic-header-example.css'%5D%2C%0A%7D)%0Aexport%20class%20BasicHeaderExample%20%7B%0A%20%20public%20theme%3A%20string%20%3D%20'company'%3B%0A%20%20public%20icon%3A%20string%20%3D%20'company'%3B%0A%20%20private%20options%3A%20any%3B%0A%20%20private%20themeIndex%3A%20number%20%3D%200%3B%0A%0A%20%20constructor(private%20toaster%3A%20NovoToastService)%20%7B%0A%20%20%20%20this.toaster%20%3D%20toaster%3B%0A%20%20%20%20this.options%20%3D%20%7B%0A%20%20%20%20%20%20title%3A%20'Title'%2C%0A%20%20%20%20%20%20message%3A%20'Some%20Message...'%2C%0A%20%20%20%20%20%20theme%3A%20'ocean'%2C%0A%20%20%20%20%20%20icon%3A%20'clipboard'%2C%0A%20%20%20%20%20%20position%3A%20'growlTopRight'%2C%0A%20%20%20%20%7D%3B%0A%20%20%7D%0A%0A%20%20changeTheme()%20%7B%0A%20%20%20%20this.themeIndex%20%3D%20this.themeIndex%20%3D%3D%3D%20HEADER_THEMES.length%20-%201%20%3F%200%20%3A%20this.themeIndex%20%2B%201%3B%0A%20%20%20%20this.theme%20%3D%20HEADER_THEMES%5Bthis.themeIndex%5D%3B%0A%20%20%20%20this.icon%20%3D%20HEADER_ICONS%5Bthis.themeIndex%5D%3B%0A%20%20%7D%0A%0A%20%20catchEv(type%2C%20ev)%20%7B%0A%20%20%20%20%2F%2F%20Set%20toast%20options%0A%20%20%20%20this.options%20%3D%20%7B%0A%20%20%20%20%20%20title%3A%20%60%24%7Btype%7D%60%2C%0A%20%20%20%20%20%20message%3A%20%60%24%7Bev%7D%20fired...%60%2C%0A%20%20%20%20%20%20theme%3A%20'ocean'%2C%0A%20%20%20%20%20%20icon%3A%20%60%24%7Btype%7D%60%2C%0A%20%20%20%20%20%20position%3A%20'growlTopRight'%2C%0A%20%20%20%20%7D%3B%0A%0A%20%20%20%20%2F%2F%20Fire%20toast%0A%20%20%20%20this.toaster.alert(this.options)%3B%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cheader%20title%3D%22John%20Deere%22%20%5Bicon%5D%3D%22icon%22%20%5Btheme%5D%3D%22theme%22%3E%0A%20%20%3Cutils%3E%0A%20%20%20%20%3Cutil-action%20icon%3D%22convert%22%20tooltip%3D%22Change%20Theme%22%20(click)%3D%22changeTheme()%22%3E%3C%2Futil-action%3E%0A%20%20%20%20%3Cutil-action%20icon%3D%22refresh%22%20tooltip%3D%22Show%20Popup%22%20(click)%3D%22catchEv('refresh'%2C%20%24event)%22%3E%3C%2Futil-action%3E%0A%20%20%20%20%3Cutil-action%20icon%3D%22times%22%20tooltip%3D%22Show%20Popup%22%20(click)%3D%22catchEv('close'%2C%20%24event)%22%3E%3C%2Futil-action%3E%0A%20%20%3C%2Futils%3E%0A%20%20%3Csection%3E%0A%20%20%20%20Extra%20Info%0A%20%20%3C%2Fsection%3E%0A%20%20%3Cnovo-nav%20theme%3D%22color%22%20direction%3D%22horizontal%22%3E%0A%20%20%20%20%3Cnovo-tab%3E%0A%20%20%20%20%20%20%3Cspan%3EOverview%3C%2Fspan%3E%0A%20%20%20%20%3C%2Fnovo-tab%3E%0A%20%20%20%20%3Cnovo-tab%3E%0A%20%20%20%20%20%20%3Cspan%3EActivity%3C%2Fspan%3E%0A%20%20%20%20%3C%2Fnovo-tab%3E%0A%20%20%20%20%3Cnovo-tab%3E%0A%20%20%20%20%20%20%3Cspan%3EEmail%3C%2Fspan%3E%0A%20%20%20%20%3C%2Fnovo-tab%3E%0A%20%20%3C%2Fnovo-nav%3E%0A%3C%2Fheader%3E%0A`
    },
    'condensed-header': {
        title: 'Condensed Header Example',
        component: CondensedHeaderExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0Aimport%20%7B%20NovoToastService%20%7D%20from%20'novo-elements'%3B%0A%0Aconst%20HEADER_THEMES%20%3D%20%5B'company'%2C%20'job'%2C%20'candidate'%2C%20'contact'%2C%20'opportunity'%2C%20'lead'%2C%20'light'%2C%20'white'%5D%3B%0Aconst%20HEADER_ICONS%20%3D%20%5B'company'%2C%20'job'%2C%20'candidate'%2C%20'person'%2C%20'opportunity'%2C%20'lead'%2C%20'bolt'%2C%20'shield'%5D%3B%0A%0A%2F**%0A%20*%20%40title%20Condensed%20Header%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20selector%3A%20'condensed-header-example'%2C%0A%20%20templateUrl%3A%20'condensed-header-example.html'%2C%0A%20%20styleUrls%3A%20%5B'condensed-header-example.css'%5D%2C%0A%7D)%0Aexport%20class%20CondensedHeaderExample%20%7B%0A%20%20public%20theme%3A%20string%20%3D%20'company'%3B%0A%20%20public%20icon%3A%20string%20%3D%20'company'%3B%0A%20%20public%20options%3A%20any%3B%0A%20%20public%20themeIndex%3A%20number%20%3D%200%3B%0A%0A%20%20constructor(private%20toaster%3A%20NovoToastService)%20%7B%0A%20%20%20%20this.toaster%20%3D%20toaster%3B%0A%20%20%20%20this.options%20%3D%20%7B%0A%20%20%20%20%20%20title%3A%20'Title'%2C%0A%20%20%20%20%20%20message%3A%20'Some%20Message...'%2C%0A%20%20%20%20%20%20theme%3A%20'ocean'%2C%0A%20%20%20%20%20%20icon%3A%20'clipboard'%2C%0A%20%20%20%20%20%20position%3A%20'growlTopRight'%2C%0A%20%20%20%20%7D%3B%0A%20%20%7D%0A%0A%20%20changeTheme()%20%7B%0A%20%20%20%20this.themeIndex%20%3D%20this.themeIndex%20%3D%3D%3D%20HEADER_THEMES.length%20-%201%20%3F%200%20%3A%20this.themeIndex%20%2B%201%3B%0A%20%20%20%20this.theme%20%3D%20HEADER_THEMES%5Bthis.themeIndex%5D%3B%0A%20%20%20%20this.icon%20%3D%20HEADER_ICONS%5Bthis.themeIndex%5D%3B%0A%20%20%7D%0A%0A%20%20catchEv(type%2C%20ev)%20%7B%0A%20%20%20%20%2F%2F%20Set%20toast%20options%0A%20%20%20%20this.options%20%3D%20%7B%0A%20%20%20%20%20%20title%3A%20%60%24%7Btype%7D%60%2C%0A%20%20%20%20%20%20message%3A%20%60%24%7Bev%7D%20fired...%60%2C%0A%20%20%20%20%20%20theme%3A%20'ocean'%2C%0A%20%20%20%20%20%20icon%3A%20%60%24%7Btype%7D%60%2C%0A%20%20%20%20%20%20position%3A%20'growlTopRight'%2C%0A%20%20%20%20%7D%3B%0A%0A%20%20%20%20%2F%2F%20Fire%20toast%0A%20%20%20%20this.toaster.alert(this.options)%3B%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cheader%20%5Btheme%5D%3D%22theme%22%20%5Bcondensed%5D%3D%22true%22%3E%0A%20%20%3Cutils%3E%0A%20%20%20%20%3Cutil-action%20icon%3D%22convert%22%20tooltip%3D%22Change%20Theme%22%20(click)%3D%22changeTheme()%22%3E%3C%2Futil-action%3E%0A%20%20%20%20%3Cutil-action%20icon%3D%22refresh%22%20tooltip%3D%22Show%20Popup%22%20(click)%3D%22catchEv('refresh'%2C%20%24event)%22%3E%3C%2Futil-action%3E%0A%20%20%20%20%3Cutil-action%20icon%3D%22times%22%20tooltip%3D%22Show%20Popup%22%20(click)%3D%22catchEv('close'%2C%20%24event)%22%3E%3C%2Futil-action%3E%0A%20%20%3C%2Futils%3E%0A%20%20%3Cnovo-icon%20%5Btheme%5D%3D%22theme%22%20%5Bname%5D%3D%22icon%22%20%5Braised%5D%3D%22true%22%3E%7B%7Bicon%7D%7D%3C%2Fnovo-icon%3E%0A%20%20%3Cdiv%20class%3D%22entity-header%22%20novo-title%3E%0A%20%20%20%20%3Cspan%20class%3D%22id%22%3E123456%3C%2Fspan%3E%0A%20%20%20%20%3Cheader-spacer%3E%3C%2Fheader-spacer%3E%0A%20%20%20%20%3Cspan%20class%3D%22name%22%3ESteve%20Jobs%3C%2Fspan%3E%0A%20%20%20%20%3Cheader-spacer%3E%3C%2Fheader-spacer%3E%0A%20%20%20%20%3Cspan%20class%3D%22links%22%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%3Cbutton%20theme%3D%22icon%22%20%5Bicon%5D%3D%22'google'%22%3E%3C%2Fbutton%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%3Cbutton%20theme%3D%22icon%22%20%5Bicon%5D%3D%22'linkedin-f'%22%3E%3C%2Fbutton%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%3Cbutton%20theme%3D%22icon%22%20%5Bicon%5D%3D%22'location'%22%3E%3C%2Fbutton%3E%0A%20%20%20%20%20%20%20%20%3C%2Fspan%3E%0A%20%20%3C%2Fdiv%3E%0A%20%20%3Cnovo-nav%20theme%3D%22white%22%20direction%3D%22horizontal%22%20%5Bcondensed%5D%3D%22true%22%3E%0A%20%20%20%20%3Cnovo-tab%3E%0A%20%20%20%20%20%20%3Cspan%3EOverview%3C%2Fspan%3E%0A%20%20%20%20%3C%2Fnovo-tab%3E%0A%20%20%20%20%3Cnovo-tab%3E%0A%20%20%20%20%20%20%3Cspan%3EActivity%3C%2Fspan%3E%0A%20%20%20%20%3C%2Fnovo-tab%3E%0A%20%20%20%20%3Cnovo-tab%3E%0A%20%20%20%20%20%20%3Cspan%3EEmail%3C%2Fspan%3E%0A%20%20%20%20%3C%2Fnovo-tab%3E%0A%20%20%3C%2Fnovo-nav%3E%0A%3C%2Fheader%3E%0A`
    },
    'header-searchbar': {
        title: 'Header with SearchBar Example',
        component: HeaderSearchbarExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0Aimport%20%7B%20NovoToastService%20%7D%20from%20'novo-elements'%3B%0A%0Aconst%20HEADER_THEMES%20%3D%20%5B'company'%2C%20'job'%2C%20'candidate'%2C%20'contact'%2C%20'opportunity'%2C%20'lead'%2C%20'light'%2C%20'white'%5D%3B%0Aconst%20HEADER_ICONS%20%3D%20%5B'company'%2C%20'job'%2C%20'candidate'%2C%20'person'%2C%20'opportunity'%2C%20'lead'%2C%20'bolt'%2C%20'shield'%5D%3B%0A%0A%2F**%0A%20*%20%40title%20Header%20with%20SearchBar%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20selector%3A%20'header-searchbar-example'%2C%0A%20%20templateUrl%3A%20'header-searchbar-example.html'%2C%0A%20%20styleUrls%3A%20%5B'header-searchbar-example.css'%5D%2C%0A%7D)%0Aexport%20class%20HeaderSearchbarExample%20%7B%0A%20%20public%20theme%3A%20string%20%3D%20'company'%3B%0A%20%20public%20icon%3A%20string%20%3D%20'company'%3B%0A%20%20private%20options%3A%20any%3B%0A%20%20public%20isChecked%3A%20boolean%3B%0A%20%20private%20themeIndex%3A%20number%20%3D%200%3B%0A%0A%20%20constructor(private%20toaster%3A%20NovoToastService)%20%7B%0A%20%20%20%20this.toaster%20%3D%20toaster%3B%0A%20%20%20%20this.options%20%3D%20%7B%0A%20%20%20%20%20%20title%3A%20'Title'%2C%0A%20%20%20%20%20%20message%3A%20'Some%20Message...'%2C%0A%20%20%20%20%20%20theme%3A%20'ocean'%2C%0A%20%20%20%20%20%20icon%3A%20'clipboard'%2C%0A%20%20%20%20%20%20position%3A%20'growlTopRight'%2C%0A%20%20%20%20%7D%3B%0A%20%20%7D%0A%0A%20%20changeTheme()%20%7B%0A%20%20%20%20this.themeIndex%20%3D%20this.themeIndex%20%3D%3D%3D%20HEADER_THEMES.length%20-%201%20%3F%200%20%3A%20this.themeIndex%20%2B%201%3B%0A%20%20%20%20this.theme%20%3D%20HEADER_THEMES%5Bthis.themeIndex%5D%3B%0A%20%20%20%20this.icon%20%3D%20HEADER_ICONS%5Bthis.themeIndex%5D%3B%0A%20%20%7D%0A%0A%20%20catchEv(type%2C%20ev)%20%7B%0A%20%20%20%20%2F%2F%20Set%20toast%20options%0A%20%20%20%20this.options%20%3D%20%7B%0A%20%20%20%20%20%20title%3A%20%60%24%7Btype%7D%60%2C%0A%20%20%20%20%20%20message%3A%20%60%24%7Bev%7D%20fired...%60%2C%0A%20%20%20%20%20%20theme%3A%20'ocean'%2C%0A%20%20%20%20%20%20icon%3A%20%60%24%7Btype%7D%60%2C%0A%20%20%20%20%20%20position%3A%20'growlTopRight'%2C%0A%20%20%20%20%7D%3B%0A%0A%20%20%20%20%2F%2F%20Fire%20toast%0A%20%20%20%20this.toaster.alert(this.options)%3B%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cheader%20title%3D%22Header%22%20%5Bicon%5D%3D%22icon%22%20%5Btheme%5D%3D%22theme%22%3E%0A%20%20%3Csection%20class%3D%22header-content%22%3E%0A%20%20%20%20%3Cnovo-search%20%5BalwaysOpen%5D%3D%22isChecked%22%20%5Btheme%5D%3D%22theme%22%3E%3C%2Fnovo-search%3E%0A%20%20%3C%2Fsection%3E%0A%20%20%3Cutils%3E%0A%20%20%20%20%3Cutil-action%20icon%3D%22convert%22%20tooltip%3D%22Change%20Theme%22%20(click)%3D%22changeTheme()%22%3E%3C%2Futil-action%3E%0A%20%20%20%20%3Cutil-action%20icon%3D%22refresh%22%20tooltip%3D%22Show%20Popup%22%20(click)%3D%22catchEv('refresh'%2C%20%24event)%22%3E%3C%2Futil-action%3E%0A%20%20%20%20%3Cutil-action%20icon%3D%22times%22%20tooltip%3D%22Show%20Popup%22%20(click)%3D%22catchEv('close'%2C%20%24event)%22%3E%3C%2Futil-action%3E%0A%20%20%3C%2Futils%3E%0A%3C%2Fheader%3E%0A%3Cbr%2F%3E%0A%3Cnovo-checkbox%20label%3D%22Always%20Open%3F%22%20%5B(ngModel)%5D%3D%22isChecked%22%3E%3C%2Fnovo-checkbox%3E%0A`
    },
    'header-subtitle': {
        title: 'Header with Subtitle Example',
        component: HeaderSubtitleExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0Aimport%20%7B%20NovoToastService%20%7D%20from%20'novo-elements'%3B%0A%0Aconst%20HEADER_THEMES%20%3D%20%5B'company'%2C%20'job'%2C%20'candidate'%2C%20'contact'%2C%20'opportunity'%2C%20'lead'%2C%20'light'%2C%20'white'%5D%3B%0Aconst%20HEADER_ICONS%20%3D%20%5B'company'%2C%20'job'%2C%20'candidate'%2C%20'person'%2C%20'opportunity'%2C%20'lead'%2C%20'bolt'%2C%20'shield'%5D%3B%0A%0A%2F**%0A%20*%20%40title%20Header%20with%20Subtitle%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20selector%3A%20'header-subtitle-example'%2C%0A%20%20templateUrl%3A%20'header-subtitle-example.html'%2C%0A%20%20styleUrls%3A%20%5B'header-subtitle-example.css'%5D%2C%0A%7D)%0Aexport%20class%20HeaderSubtitleExample%20%7B%0A%20%20public%20theme%3A%20string%20%3D%20'company'%3B%0A%20%20public%20icon%3A%20string%20%3D%20'company'%3B%0A%20%20private%20options%3A%20any%3B%0A%20%20private%20themeIndex%3A%20number%20%3D%200%3B%0A%0A%20%20constructor(private%20toaster%3A%20NovoToastService)%20%7B%0A%20%20%20%20this.toaster%20%3D%20toaster%3B%0A%20%20%20%20this.options%20%3D%20%7B%0A%20%20%20%20%20%20title%3A%20'Title'%2C%0A%20%20%20%20%20%20message%3A%20'Some%20Message...'%2C%0A%20%20%20%20%20%20theme%3A%20'ocean'%2C%0A%20%20%20%20%20%20icon%3A%20'clipboard'%2C%0A%20%20%20%20%20%20position%3A%20'growlTopRight'%2C%0A%20%20%20%20%7D%3B%0A%20%20%7D%0A%0A%20%20changeTheme()%20%7B%0A%20%20%20%20this.themeIndex%20%3D%20this.themeIndex%20%3D%3D%3D%20HEADER_THEMES.length%20-%201%20%3F%200%20%3A%20this.themeIndex%20%2B%201%3B%0A%20%20%20%20this.theme%20%3D%20HEADER_THEMES%5Bthis.themeIndex%5D%3B%0A%20%20%20%20this.icon%20%3D%20HEADER_ICONS%5Bthis.themeIndex%5D%3B%0A%20%20%7D%0A%0A%20%20catchEv(type%2C%20ev)%20%7B%0A%20%20%20%20%2F%2F%20Set%20toast%20options%0A%20%20%20%20this.options%20%3D%20%7B%0A%20%20%20%20%20%20title%3A%20%60%24%7Btype%7D%60%2C%0A%20%20%20%20%20%20message%3A%20%60%24%7Bev%7D%20fired...%60%2C%0A%20%20%20%20%20%20theme%3A%20'ocean'%2C%0A%20%20%20%20%20%20icon%3A%20%60%24%7Btype%7D%60%2C%0A%20%20%20%20%20%20position%3A%20'growlTopRight'%2C%0A%20%20%20%20%7D%3B%0A%0A%20%20%20%20%2F%2F%20Fire%20toast%0A%20%20%20%20this.toaster.alert(this.options)%3B%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cheader%20title%3D%22Header%22%20subTitle%3D%22with%20subtitle%22%20%5Bicon%5D%3D%22icon%22%20%5Btheme%5D%3D%22theme%22%3E%0A%20%20%3Cutils%3E%0A%20%20%20%20%3Cutil-action%20icon%3D%22convert%22%20tooltip%3D%22Change%20Theme%22%20(click)%3D%22changeTheme()%22%3E%3C%2Futil-action%3E%0A%20%20%20%20%3Cutil-action%20icon%3D%22refresh%22%20tooltip%3D%22Show%20Popup%22%20(click)%3D%22catchEv('refresh'%2C%20%24event)%22%3E%3C%2Futil-action%3E%0A%20%20%20%20%3Cutil-action%20icon%3D%22times%22%20tooltip%3D%22Show%20Popup%22%20(click)%3D%22catchEv('close'%2C%20%24event)%22%3E%3C%2Futil-action%3E%0A%20%20%3C%2Futils%3E%0A%3C%2Fheader%3E%0A`
    },
    'basic-list': {
        title: 'Basic List Layout',
        component: BasicListExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Basic%20List%20Layout%0A%20*%2F%0A%40Component(%7B%0A%20%20selector%3A%20'basic-list-example'%2C%0A%20%20templateUrl%3A%20'basic-list-example.html'%2C%0A%20%20styleUrls%3A%20%5B'basic-list-example.css'%5D%2C%0A%7D)%0Aexport%20class%20BasicListExample%20%7B%0A%20%20public%20pulseItems%3A%20any%3B%0A%0A%20%20constructor()%20%7B%0A%20%20%20%20const%20ONE_HOUR%20%3D%2060%20*%2060%20*%201000%3B%0A%20%20%20%20%2F*%20ms%20*%2F%0A%20%20%20%20const%20TWO_HOURS%20%3D%20ONE_HOUR%20*%202%3B%0A%20%20%20%20const%20THREE_HOURS%20%3D%20ONE_HOUR%20*%203%3B%0A%20%20%20%20const%20currentDate%20%3D%20new%20Date()%3B%0A%0A%20%20%20%20const%20oneHourAgo%20%3D%20currentDate.getTime()%20-%20ONE_HOUR%3B%0A%20%20%20%20const%20twoHoursAgo%20%3D%20currentDate.getTime()%20-%20TWO_HOURS%3B%0A%20%20%20%20const%20threeHoursAgo%20%3D%20currentDate.getTime()%20-%20THREE_HOURS%3B%0A%0A%20%20%20%20%2F*%20%22mockResponse%5B%5D%22%20should%20represent%20a%20REST%20response%20with%20improperly%20formatted%20data.%0A%20%20%20%20%2F%20%20The%20%22buildItems()%22%20function%20is%20taking%20this%20data%20object%20and%20massaging%20it%0A%20%20%20%20%2F%20%20to%20build%20the%20list%20items%20appropriately%20via%20a%20new%20data%20object%20%22pulseItems%5B%5D%22.%0A%20%20%20%20%2F%20%20In%20page1.html%20you%20can%20see%20how%20the%20new%20object%20builds%20a%20list%20of%20items.%0A%20%20%20%20%2F%20%20-%20%40asibilia%0A%20%20%20%20*%2F%0A%0A%20%20%20%20const%20mockResponse%20%3D%20%5B%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20type%3A%20'opportunity'%2C%0A%20%20%20%20%20%20%20%20dateCreated%3A%20oneHourAgo%2C%0A%20%20%20%20%20%20%20%20sentiment%3A%20%7B%0A%20%20%20%20%20%20%20%20%20%20rating%3A%20'negative'%2C%0A%20%20%20%20%20%20%20%20%20%20type%3A%20'engagement'%2C%0A%20%20%20%20%20%20%20%20%20%20comment%3A%20'No%20emails%20in%20last%2010%20days'%2C%0A%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20user%3A%20%7B%0A%20%20%20%20%20%20%20%20%20%20firstName%3A%20'Steph'%2C%0A%20%20%20%20%20%20%20%20%20%20lastName%3A%20'Curry'%2C%0A%20%20%20%20%20%20%20%20%20%20company%3A%20'Wells%20Fargo'%2C%0A%20%20%20%20%20%20%20%20%20%20location%3A%20'Golden%20State%2C%20CA'%2C%0A%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20type%3A%20'opportunity'%2C%0A%20%20%20%20%20%20%20%20dateCreated%3A%20twoHoursAgo%2C%0A%20%20%20%20%20%20%20%20sentiment%3A%20%7B%0A%20%20%20%20%20%20%20%20%20%20rating%3A%20'negative'%2C%0A%20%20%20%20%20%20%20%20%20%20type%3A%20'probability'%2C%0A%20%20%20%20%20%20%20%20%20%20comment%3A%20'Now%20has%20low%20probability%20to%20close'%2C%0A%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20user%3A%20%7B%0A%20%20%20%20%20%20%20%20%20%20firstName%3A%20'Lebron'%2C%0A%20%20%20%20%20%20%20%20%20%20lastName%3A%20'James'%2C%0A%20%20%20%20%20%20%20%20%20%20company%3A%20'Amazon'%2C%0A%20%20%20%20%20%20%20%20%20%20location%3A%20'Cleveland%2C%20OH'%2C%0A%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20type%3A%20'company'%2C%0A%20%20%20%20%20%20%20%20dateCreated%3A%20threeHoursAgo%2C%0A%20%20%20%20%20%20%20%20sentiment%3A%20%7B%0A%20%20%20%20%20%20%20%20%20%20rating%3A%20'positive'%2C%0A%20%20%20%20%20%20%20%20%20%20type%3A%20'connection'%2C%0A%20%20%20%20%20%20%20%20%20%20comment%3A%20'New%20connection'%2C%0A%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20user%3A%20%7B%0A%20%20%20%20%20%20%20%20%20%20firstName%3A%20'Derrick'%2C%0A%20%20%20%20%20%20%20%20%20%20lastName%3A%20'Rose'%2C%0A%20%20%20%20%20%20%20%20%20%20company%3A%20'Walmart'%2C%0A%20%20%20%20%20%20%20%20%20%20location%3A%20'Chicago%2C%20IL'%2C%0A%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%5D%3B%0A%0A%20%20%20%20this.pulseItems%20%3D%20%5B%5D%3B%0A%0A%20%20%20%20this.buildItems(mockResponse)%3B%0A%20%20%7D%0A%0A%20%20buildItems(resp)%20%7B%0A%20%20%20%20for%20(const%20obj%20of%20resp)%20%7B%0A%20%20%20%20%20%20const%20item%3A%20any%20%3D%20%7B%7D%3B%0A%0A%20%20%20%20%20%20%2F*%0A%20%20%20%20%20%20%7C%7C%7C%20This%20is%20the%20item%20structure%20to%20be%20pushed%20to%20pulseItems%5B%5D%20and%20used%0A%20%20%20%20%20%20%7C%7C%7C%20to%20build%20the%20list%20%26%20items.%0A%20%20%20%20%20%20%7C%0A%20%20%20%20%20%20%7C%20%20%20item%20%3D%20%7B%0A%20%20%20%20%20%20%7C%20%20%20%20%20%20%20%22name%22%3A%20''%2C%0A%20%20%20%20%20%20%7C%20%20%20%20%20%20%20%22type%22%3A%20''%2C%0A%20%20%20%20%20%20%7C%20%20%20%20%20%20%20%22icon%22%3A%20%7B%0A%20%20%20%20%20%20%7C%20%20%20%20%20%20%20%20%20%20%20%22name%22%3A%20''%2C%0A%20%20%20%20%20%20%7C%20%20%20%20%20%20%20%20%20%20%20%22sentiment%22%3A%20''%0A%20%20%20%20%20%20%7C%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7C%20%20%20%20%20%20%20%22comment%22%3A%20''%2C%0A%20%20%20%20%20%20%7C%20%20%20%20%20%20%20%22timeAgo%22%3A%20''%0A%20%20%20%20%20%20%7C%20%20%20%20%7D%0A%20%20%20%20%20%20%7C%0A%20%20%20%20%20%20*%2F%0A%0A%20%20%20%20%20%20item.name%20%3D%20obj.user.company%3B%0A%20%20%20%20%20%20item.type%20%3D%20obj.type%3B%0A%20%20%20%20%20%20item.icon%20%3D%20%7B%7D%3B%0A%0A%20%20%20%20%20%20if%20(obj.sentiment.type%20%3D%3D%3D%20'connection')%20%7B%0A%20%20%20%20%20%20%20%20item.icon.name%20%3D%20'bhi-add-o'%3B%0A%20%20%20%20%20%20%7D%0A%0A%20%20%20%20%20%20if%20(obj.sentiment.type%20%3D%3D%3D%20'engagement')%20%7B%0A%20%20%20%20%20%20%20%20item.icon.name%20%3D%20obj.sentiment.rating%20%3D%3D%3D%20'positive'%20%3F%20'bhi-trending-up'%20%3A%20'bhi-trending-down'%3B%0A%20%20%20%20%20%20%7D%0A%0A%20%20%20%20%20%20item.icon.sentiment%20%3D%20obj.sentiment.rating%3B%0A%20%20%20%20%20%20item.comment%20%3D%20obj.sentiment.comment%3B%0A%20%20%20%20%20%20item.timeAgo%20%3D%20obj.dateCreated%3B%0A%0A%20%20%20%20%20%20this.pulseItems.push(item)%3B%0A%20%20%20%20%7D%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cheader%3E%0A%20%20%20%20%3Cnovo-list%20direction%3D%22vertical%22%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-list-item%20*ngFor%3D%22let%20item%20of%20pulseItems%22%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%3Citem-header%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Citem-avatar%20%5Bicon%5D%3D%22item.type%22%3E%3C%2Fitem-avatar%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Citem-title%3E%7B%7Bitem.name%7D%7D%3C%2Fitem-title%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Citem-header-end%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Cspan%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Ci%20class%3D%22bhi-clock%22%3E%3C%2Fi%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7B%7Bitem.timeAgo%20%7C%20date%3A%20'shortTime'%7D%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3C%2Fspan%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3C%2Fitem-header-end%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%3C%2Fitem-header%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%3Citem-content%20direction%3D%22vertical%22%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Cp%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Ci%20*ngIf%3D%22item.icon.name%22%20class%3D%22%7B%7Bitem.icon.name%7D%7D%20%7B%7Bitem.icon.sentiment%7D%7D%22%3E%3C%2Fi%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7B%7Bitem.comment%7D%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3C%2Fp%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%3C%2Fitem-content%3E%0A%20%20%20%20%20%20%20%20%3C%2Fnovo-list-item%3E%0A%20%20%20%20%3C%2Fnovo-list%3E%0A%3C%2Fheader%3E%0A`
    },
    'themed-list': {
        title: 'Themed List Example',
        component: ThemedListExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Themed%20List%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20selector%3A%20'themed-list-example'%2C%0A%20%20templateUrl%3A%20'themed-list-example.html'%2C%0A%20%20styleUrls%3A%20%5B'themed-list-example.css'%5D%2C%0A%7D)%0Aexport%20class%20ThemedListExample%20%7B%0A%20%20public%20pulseItems%3A%20any%3B%0A%0A%20%20constructor()%20%7B%0A%20%20%20%20const%20ONE_HOUR%20%3D%2060%20*%2060%20*%201000%3B%0A%20%20%20%20%2F*%20ms%20*%2F%0A%20%20%20%20const%20TWO_HOURS%20%3D%20ONE_HOUR%20*%202%3B%0A%20%20%20%20const%20THREE_HOURS%20%3D%20ONE_HOUR%20*%203%3B%0A%20%20%20%20const%20currentDate%20%3D%20new%20Date()%3B%0A%0A%20%20%20%20const%20oneHourAgo%20%3D%20currentDate.getTime()%20-%20ONE_HOUR%3B%0A%20%20%20%20const%20twoHoursAgo%20%3D%20currentDate.getTime()%20-%20TWO_HOURS%3B%0A%20%20%20%20const%20threeHoursAgo%20%3D%20currentDate.getTime()%20-%20THREE_HOURS%3B%0A%0A%20%20%20%20%2F*%20%22mockResponse%5B%5D%22%20should%20represent%20a%20REST%20response%20with%20improperly%20formatted%20data.%0A%20%20%20%20%2F%20%20The%20%22buildItems()%22%20function%20is%20taking%20this%20data%20object%20and%20massaging%20it%0A%20%20%20%20%2F%20%20to%20build%20the%20list%20items%20appropriately%20via%20a%20new%20data%20object%20%22pulseItems%5B%5D%22.%0A%20%20%20%20%2F%20%20In%20page1.html%20you%20can%20see%20how%20the%20new%20object%20builds%20a%20list%20of%20items.%0A%20%20%20%20%2F%20%20-%20%40asibilia%0A%20%20%20%20*%2F%0A%0A%20%20%20%20const%20mockResponse%20%3D%20%5B%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20type%3A%20'opportunity'%2C%0A%20%20%20%20%20%20%20%20dateCreated%3A%20oneHourAgo%2C%0A%20%20%20%20%20%20%20%20sentiment%3A%20%7B%0A%20%20%20%20%20%20%20%20%20%20rating%3A%20'negative'%2C%0A%20%20%20%20%20%20%20%20%20%20type%3A%20'engagement'%2C%0A%20%20%20%20%20%20%20%20%20%20comment%3A%20'No%20emails%20in%20last%2010%20days'%2C%0A%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20user%3A%20%7B%0A%20%20%20%20%20%20%20%20%20%20firstName%3A%20'Steph'%2C%0A%20%20%20%20%20%20%20%20%20%20lastName%3A%20'Curry'%2C%0A%20%20%20%20%20%20%20%20%20%20company%3A%20'Wells%20Fargo'%2C%0A%20%20%20%20%20%20%20%20%20%20location%3A%20'Golden%20State%2C%20CA'%2C%0A%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20type%3A%20'opportunity'%2C%0A%20%20%20%20%20%20%20%20dateCreated%3A%20twoHoursAgo%2C%0A%20%20%20%20%20%20%20%20sentiment%3A%20%7B%0A%20%20%20%20%20%20%20%20%20%20rating%3A%20'negative'%2C%0A%20%20%20%20%20%20%20%20%20%20type%3A%20'probability'%2C%0A%20%20%20%20%20%20%20%20%20%20comment%3A%20'Now%20has%20low%20probability%20to%20close'%2C%0A%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20user%3A%20%7B%0A%20%20%20%20%20%20%20%20%20%20firstName%3A%20'Lebron'%2C%0A%20%20%20%20%20%20%20%20%20%20lastName%3A%20'James'%2C%0A%20%20%20%20%20%20%20%20%20%20company%3A%20'Amazon'%2C%0A%20%20%20%20%20%20%20%20%20%20location%3A%20'Cleveland%2C%20OH'%2C%0A%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20type%3A%20'company'%2C%0A%20%20%20%20%20%20%20%20dateCreated%3A%20threeHoursAgo%2C%0A%20%20%20%20%20%20%20%20sentiment%3A%20%7B%0A%20%20%20%20%20%20%20%20%20%20rating%3A%20'positive'%2C%0A%20%20%20%20%20%20%20%20%20%20type%3A%20'connection'%2C%0A%20%20%20%20%20%20%20%20%20%20comment%3A%20'New%20connection'%2C%0A%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20user%3A%20%7B%0A%20%20%20%20%20%20%20%20%20%20firstName%3A%20'Derrick'%2C%0A%20%20%20%20%20%20%20%20%20%20lastName%3A%20'Rose'%2C%0A%20%20%20%20%20%20%20%20%20%20company%3A%20'Walmart'%2C%0A%20%20%20%20%20%20%20%20%20%20location%3A%20'Chicago%2C%20IL'%2C%0A%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%5D%3B%0A%0A%20%20%20%20this.pulseItems%20%3D%20%5B%5D%3B%0A%0A%20%20%20%20this.buildItems(mockResponse)%3B%0A%20%20%7D%0A%0A%20%20buildItems(resp)%20%7B%0A%20%20%20%20for%20(const%20obj%20of%20resp)%20%7B%0A%20%20%20%20%20%20const%20item%3A%20any%20%3D%20%7B%7D%3B%0A%0A%20%20%20%20%20%20%2F*%0A%20%20%20%20%20%20%7C%7C%7C%20This%20is%20the%20item%20structure%20to%20be%20pushed%20to%20pulseItems%5B%5D%20and%20used%0A%20%20%20%20%20%20%7C%7C%7C%20to%20build%20the%20list%20%26%20items.%0A%20%20%20%20%20%20%7C%0A%20%20%20%20%20%20%7C%20%20%20item%20%3D%20%7B%0A%20%20%20%20%20%20%7C%20%20%20%20%20%20%20%22name%22%3A%20''%2C%0A%20%20%20%20%20%20%7C%20%20%20%20%20%20%20%22type%22%3A%20''%2C%0A%20%20%20%20%20%20%7C%20%20%20%20%20%20%20%22icon%22%3A%20%7B%0A%20%20%20%20%20%20%7C%20%20%20%20%20%20%20%20%20%20%20%22name%22%3A%20''%2C%0A%20%20%20%20%20%20%7C%20%20%20%20%20%20%20%20%20%20%20%22sentiment%22%3A%20''%0A%20%20%20%20%20%20%7C%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7C%20%20%20%20%20%20%20%22comment%22%3A%20''%2C%0A%20%20%20%20%20%20%7C%20%20%20%20%20%20%20%22timeAgo%22%3A%20''%0A%20%20%20%20%20%20%7C%20%20%20%20%7D%0A%20%20%20%20%20%20%7C%0A%20%20%20%20%20%20*%2F%0A%0A%20%20%20%20%20%20item.name%20%3D%20obj.user.company%3B%0A%20%20%20%20%20%20item.type%20%3D%20obj.type%3B%0A%20%20%20%20%20%20item.icon%20%3D%20%7B%7D%3B%0A%0A%20%20%20%20%20%20if%20(obj.sentiment.type%20%3D%3D%3D%20'connection')%20%7B%0A%20%20%20%20%20%20%20%20item.icon.name%20%3D%20'bhi-add-o'%3B%0A%20%20%20%20%20%20%7D%0A%0A%20%20%20%20%20%20if%20(obj.sentiment.type%20%3D%3D%3D%20'engagement')%20%7B%0A%20%20%20%20%20%20%20%20item.icon.name%20%3D%20obj.sentiment.rating%20%3D%3D%3D%20'positive'%20%3F%20'bhi-trending-up'%20%3A%20'bhi-trending-down'%3B%0A%20%20%20%20%20%20%7D%0A%0A%20%20%20%20%20%20item.icon.sentiment%20%3D%20obj.sentiment.rating%3B%0A%20%20%20%20%20%20item.comment%20%3D%20obj.sentiment.comment%3B%0A%20%20%20%20%20%20item.timeAgo%20%3D%20obj.dateCreated%3B%0A%0A%20%20%20%20%20%20this.pulseItems.push(item)%3B%0A%20%20%20%20%7D%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cheader%3E%0A%20%20%20%20%3Cnovo-list%20theme%3D%22navigation%22%20direction%3D%22vertical%22%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-list-item%20*ngFor%3D%22let%20item%20of%20pulseItems%22%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%3Citem-header%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Citem-avatar%20%5Bicon%5D%3D%22item.type%22%3E%3C%2Fitem-avatar%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Citem-title%3E%7B%7Bitem.name%7D%7D%3C%2Fitem-title%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%3C%2Fitem-header%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%3Citem-content%20direction%3D%22vertical%22%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Cp%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Ci%20*ngIf%3D%22item.icon.name%22%20class%3D%22%7B%7Bitem.icon.name%7D%7D%20%7B%7Bitem.icon.sentiment%7D%7D%22%3E%3C%2Fi%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7B%7Bitem.comment%7D%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3C%2Fp%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Cspan%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Ci%20class%3D%22bhi-clock%22%3E%3C%2Fi%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7B%7Bitem.timeAgo%20%7C%20date%3A%20'shortTime'%7D%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3C%2Fspan%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%3C%2Fitem-content%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%3Citem-end%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Ci%20class%3D%22bhi-next%22%3E%3C%2Fi%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%3C%2Fitem-end%3E%0A%20%20%20%20%20%20%20%20%3C%2Fnovo-list-item%3E%0A%20%20%20%20%3C%2Fnovo-list%3E%0A%3C%2Fheader%3E%0A`
    },
    'stepper-horizontal': {
        title: 'Basic Stepper Component',
        component: StepperHorizontalExample,
        tsSource: `import%20%7B%20Component%2C%20OnInit%20%7D%20from%20'%40angular%2Fcore'%3B%0Aimport%20%7B%20FormBuilder%2C%20FormGroup%2C%20Validators%20%7D%20from%20'%40angular%2Fforms'%3B%0Aimport%20%7B%20NovoHorizontalStepper%2C%20NovoStep%20%7D%20from%20'novo-elements'%3B%0A%0A%2F**%0A%20*%20%40title%20Basic%20Stepper%20Component%0A%20*%2F%0A%40Component(%7B%0A%20%20selector%3A%20'stepper-horizontal-example'%2C%0A%20%20templateUrl%3A%20'stepper-horizontal-example.html'%2C%0A%20%20styleUrls%3A%20%5B'stepper-horizontal-example.css'%5D%2C%0A%7D)%0Aexport%20class%20StepperHorizontalExample%20implements%20OnInit%20%7B%0A%20%20isLinear%20%3D%20true%3B%0A%20%20firstFormGroup%3A%20FormGroup%3B%0A%20%20secondFormGroup%3A%20FormGroup%3B%0A%0A%20%20constructor(private%20_formBuilder%3A%20FormBuilder)%20%7B%7D%0A%0A%20%20ngOnInit()%20%7B%0A%20%20%20%20this.firstFormGroup%20%3D%20this._formBuilder.group(%7B%0A%20%20%20%20%20%20firstCtrl%3A%20%5B''%2C%20Validators.required%5D%2C%0A%20%20%20%20%7D)%3B%0A%20%20%20%20this.secondFormGroup%20%3D%20this._formBuilder.group(%7B%0A%20%20%20%20%20%20secondCtrl%3A%20%5B''%2C%20Validators.required%5D%2C%0A%20%20%20%20%7D)%3B%0A%20%20%7D%0A%0A%20%20next(stepper%3A%20NovoHorizontalStepper%2C%20step%3A%20NovoStep)%20%7B%0A%20%20%20%20step.editable%20%3D%20false%3B%0A%20%20%20%20stepper.next()%3B%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%0A%3Cnovo-horizontal-stepper%20%5Blinear%5D%3D%22isLinear%22%20%23stepper%3E%0A%20%20%3Cnovo-step%20%5BstepControl%5D%3D%22firstFormGroup%22%20label%3D%22Fill%20out%20your%20name%22%20theme%3D%22candidate%22%20icon%3D%22candidate%22%20%23step1%3E%0A%20%20%20%20%3Cform%20%5BformGroup%5D%3D%22firstFormGroup%22%3E%0A%20%20%20%20%20%20%3Cinput%20placeholder%3D%22Last%20name%2C%20First%20name%22%20formControlName%3D%22firstCtrl%22%20required%3E%0A%20%20%20%20%20%20%3Cdiv%3EForm%20Valid%3F%20%7B%7BfirstFormGroup%3F.valid%7D%7D%3C%2Fdiv%3E%0A%20%20%20%20%20%20%3Cdiv%3E%0A%20%20%20%20%20%20%20%20%3Cbutton%20(click)%3D%22next(stepper%2C%20step1)%22%3ENext%3C%2Fbutton%3E%0A%20%20%20%20%20%20%3C%2Fdiv%3E%0A%20%20%20%20%3C%2Fform%3E%0A%20%20%3C%2Fnovo-step%3E%0A%20%20%3Cnovo-step%20%5BstepControl%5D%3D%22secondFormGroup%22%20theme%3D%22contact%22%3E%0A%20%20%20%20%3Cform%20%5BformGroup%5D%3D%22secondFormGroup%22%3E%0A%20%20%20%20%20%20%3Cng-template%20novoStepLabel%3EFill%20out%20your%20address%3C%2Fng-template%3E%0A%20%20%20%20%20%20%3Cinput%20placeholder%3D%22Address%22%20formControlName%3D%22secondCtrl%22%20required%3E%0A%20%20%20%20%20%20%3Cdiv%3E%0A%20%20%20%20%20%20%20%20%3Cbutton%20(click)%3D%22stepper.previous()%22%3EBack%3C%2Fbutton%3E%0A%20%20%20%20%20%20%20%20%3Cbutton%20(click)%3D%22stepper.next()%22%3ENext%3C%2Fbutton%3E%0A%20%20%20%20%20%20%3C%2Fdiv%3E%0A%20%20%20%20%3C%2Fform%3E%0A%20%20%3C%2Fnovo-step%3E%0A%20%20%3Cnovo-step%3E%0A%20%20%20%20%3Cng-template%20novoStepLabel%3EDone%3C%2Fng-template%3E%0A%20%20%20%20You%20are%20now%20done.%0A%20%20%20%20%3Cdiv%3E%0A%20%20%20%20%20%20%3Cbutton%20novo-button%20(click)%3D%22stepper.previous()%22%3EBack%3C%2Fbutton%3E%0A%20%20%20%20%20%20%3Cbutton%20novo-button%20(click)%3D%22stepper.complete()%22%3EDone%3C%2Fbutton%3E%0A%20%20%20%20%3C%2Fdiv%3E%0A%20%20%3C%2Fnovo-step%3E%0A%3C%2Fnovo-horizontal-stepper%3E%0A`
    },
    'stepper-vertical': {
        title: 'Stepper w/ Vertical Layout',
        component: StepperVerticalExample,
        tsSource: `import%20%7B%20Component%2C%20OnInit%20%7D%20from%20'%40angular%2Fcore'%3B%0Aimport%20%7B%20FormBuilder%2C%20FormGroup%2C%20Validators%20%7D%20from%20'%40angular%2Fforms'%3B%0Aimport%20%7B%20NovoVerticalStepper%2C%20NovoStep%20%7D%20from%20'novo-elements'%3B%0A%0A%2F**%0A%20*%20%40title%20Stepper%20w%2F%20Vertical%20Layout%0A%20*%2F%0A%40Component(%7B%0A%20%20selector%3A%20'stepper-vertical-example'%2C%0A%20%20templateUrl%3A%20'stepper-vertical-example.html'%2C%0A%20%20styleUrls%3A%20%5B'stepper-vertical-example.css'%5D%2C%0A%7D)%0Aexport%20class%20StepperVerticalExample%20implements%20OnInit%20%7B%0A%20%20isLinear%20%3D%20true%3B%0A%20%20firstFormGroup%3A%20FormGroup%3B%0A%20%20secondFormGroup%3A%20FormGroup%3B%0A%0A%20%20constructor(private%20_formBuilder%3A%20FormBuilder)%20%7B%7D%0A%0A%20%20ngOnInit()%20%7B%0A%20%20%20%20this.firstFormGroup%20%3D%20this._formBuilder.group(%7B%0A%20%20%20%20%20%20firstCtrl%3A%20%5B''%2C%20Validators.required%5D%2C%0A%20%20%20%20%7D)%3B%0A%20%20%20%20this.secondFormGroup%20%3D%20this._formBuilder.group(%7B%0A%20%20%20%20%20%20secondCtrl%3A%20%5B''%2C%20Validators.required%5D%2C%0A%20%20%20%20%7D)%3B%0A%20%20%7D%0A%0A%20%20next(stepper%3A%20NovoVerticalStepper%2C%20step%3A%20NovoStep)%20%7B%0A%20%20%20%20step.editable%20%3D%20false%3B%0A%20%20%20%20stepper.next()%3B%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%0A%3Cnovo-vertical-stepper%20%5Blinear%5D%3D%22isLinear%22%20%23stepper%3E%0A%20%20%3Cnovo-step%20%5BstepControl%5D%3D%22firstFormGroup%22%20theme%3D%22candidate%22%20icon%3D%22candidate%22%20%23step1%3E%0A%20%20%20%20%3Cform%20%5BformGroup%5D%3D%22firstFormGroup%22%3E%0A%20%20%20%20%20%20%3Cng-template%20novoStepLabel%3EFill%20out%20your%20name%3C%2Fng-template%3E%0A%20%20%20%20%20%20%3Cinput%20placeholder%3D%22Last%20name%2C%20First%20name%22%20formControlName%3D%22firstCtrl%22%20required%3E%0A%20%20%20%20%20%20%3Cdiv%3E%0A%20%20%20%20%20%20%20%20%3C!--%20%3Cbutton%20novo-button%20novoStepperNext%3ENext%3C%2Fbutton%3E%20--%3E%0A%20%20%20%20%20%20%20%20%3Cbutton%20(click)%3D%22next(stepper%2C%20step1)%22%20%5Bdisabled%5D%3D%22!firstFormGroup%3F.valid%22%3ENext%3C%2Fbutton%3E%0A%20%20%20%20%20%20%3C%2Fdiv%3E%0A%20%20%20%20%3C%2Fform%3E%0A%20%20%3C%2Fnovo-step%3E%0A%20%20%3Cnovo-step%20%5BstepControl%5D%3D%22secondFormGroup%22%20theme%3D%22contact%22%20icon%3D%22person%22%3E%0A%20%20%20%20%3Cform%20%5BformGroup%5D%3D%22secondFormGroup%22%3E%0A%20%20%20%20%20%20%3Cng-template%20novoStepLabel%3EFill%20out%20your%20address%3C%2Fng-template%3E%0A%20%20%20%20%20%20%3Cinput%20placeholder%3D%22Address%22%20formControlName%3D%22secondCtrl%22%20required%3E%0A%20%20%20%20%20%20%3Cdiv%3E%0A%20%20%20%20%20%20%20%20%3C!--%20%3Cbutton%20novo-button%20novoStepperPrevious%3EBack%3C%2Fbutton%3E%0A%20%20%20%20%20%20%20%20%3Cbutton%20novo-button%20novoStepperNext%3ENext%3C%2Fbutton%3E%20--%3E%0A%20%20%20%20%20%20%20%20%3Cbutton%20(click)%3D%22stepper.previous()%22%3EBack%3C%2Fbutton%3E%0A%20%20%20%20%20%20%20%20%3Cbutton%20(click)%3D%22stepper.next()%22%3ENext%3C%2Fbutton%3E%0A%20%20%20%20%20%20%3C%2Fdiv%3E%0A%20%20%20%20%3C%2Fform%3E%0A%20%20%3C%2Fnovo-step%3E%0A%20%20%3Cnovo-step%3E%0A%20%20%20%20%3Cng-template%20novoStepLabel%3EDone%3C%2Fng-template%3E%0A%20%20%20%20You%20are%20now%20done.%0A%20%20%20%20%3Cdiv%3E%0A%20%20%20%20%20%20%3Cbutton%20novo-button%20(click)%3D%22stepper.reset()%22%3EReset%3C%2Fbutton%3E%0A%20%20%20%20%3C%2Fdiv%3E%0A%20%20%3C%2Fnovo-step%3E%0A%3C%2Fnovo-vertical-stepper%3E%0A`
    },
    'tabs-basic': {
        title: 'Basic Tabs',
        component: TabsBasicExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Basic%20Tabs%0A%20*%2F%0A%40Component(%7B%0A%20%20selector%3A%20'tabs-basic-example'%2C%0A%20%20templateUrl%3A%20'tabs-basic-example.html'%2C%0A%20%20styleUrls%3A%20%5B'tabs-basic-example.css'%5D%2C%0A%7D)%0Aexport%20class%20TabsBasicExample%20%7B%0A%20%20tabSelected()%20%7B%0A%20%20%20%20console.log('TAB%20SELECTED')%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%7D%0A%0A%20%20tabDeselected()%20%7B%0A%20%20%20%20console.log('TAB%20DESELECTED')%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: ``
    },
    'tabs-color': {
        title: 'Colorful Tabs',
        component: TabsColorExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Colorful%20Tabs%0A%20*%2F%0A%40Component(%7B%0A%20%20selector%3A%20'tabs-color-example'%2C%0A%20%20templateUrl%3A%20'tabs-color-example.html'%2C%0A%20%20styleUrls%3A%20%5B'tabs-color-example.css'%5D%2C%0A%7D)%0Aexport%20class%20TabsColorExample%20%7B%0A%20%20tabSelected()%20%7B%0A%20%20%20%20console.log('TAB%20SELECTED')%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%7D%0A%0A%20%20tabDeselected()%20%7B%0A%20%20%20%20console.log('TAB%20DESELECTED')%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cheader%3E%0A%20%20%3Cnovo-nav%20theme%3D%22color%22%20%5Boutlet%5D%3D%22colornav%22%20direction%3D%22horizontal%22%3E%0A%20%20%20%20%20%20%3Cnovo-tab%3E%0A%20%20%20%20%20%20%20%20%20%20%3Cspan%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Ci%20class%3D%22bhi-person%22%3E%3C%2Fi%3ETab%201%3C%2Fspan%3E%0A%20%20%20%20%20%20%3C%2Fnovo-tab%3E%0A%20%20%20%20%20%20%3Cnovo-tab%3E%0A%20%20%20%20%20%20%20%20%20%20%3Cspan%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Ci%20class%3D%22bhi-person%22%3E%3C%2Fi%3ETab%202%3C%2Fspan%3E%0A%20%20%20%20%20%20%3C%2Fnovo-tab%3E%0A%20%20%20%20%20%20%20%3Cnovo-tab%20%5Bdisabled%5D%3D%22true%22%3E%0A%20%20%20%20%20%20%20%20%20%20%3Cspan%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Ci%20class%3D%22bhi-person%22%3E%3C%2Fi%3ETab%203%3C%2Fspan%3E%0A%20%20%20%20%20%20%3C%2Fnovo-tab%3E%0A%20%20%3C%2Fnovo-nav%3E%0A%3C%2Fheader%3E%0A%0A%3Cnovo-nav-outlet%20%23colornav%3E%0A%20%20%3Cnovo-nav-content%3E%0A%20%20%20%20%20%20%3Ch1%3ETab%201%20Content%3C%2Fh1%3E%0A%20%20%3C%2Fnovo-nav-content%3E%0A%20%20%3Cnovo-nav-content%3E%0A%20%20%20%20%20%20%3Ch1%3ETab%202%20Content%3C%2Fh1%3E%0A%20%20%3C%2Fnovo-nav-content%3E%0A%3C%2Fnovo-nav-outlet%3E%0A`
    },
    'tabs-condensed': {
        title: 'Condensed Tabs',
        component: TabsCondensedExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Condensed%20Tabs%0A%20*%2F%0A%40Component(%7B%0A%20%20selector%3A%20'tabs-condensed-example'%2C%0A%20%20templateUrl%3A%20'tabs-condensed-example.html'%2C%0A%20%20styleUrls%3A%20%5B'tabs-condensed-example.css'%5D%2C%0A%7D)%0Aexport%20class%20TabsCondensedExample%20%7B%0A%20%20tabSelected()%20%7B%0A%20%20%20%20console.log('TAB%20SELECTED')%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%7D%0A%0A%20%20tabDeselected()%20%7B%0A%20%20%20%20console.log('TAB%20DESELECTED')%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cnovo-nav%20theme%3D%22white%22%20%5Boutlet%5D%3D%22condensed%22%20condensed%3D%22true%22%3E%0A%20%20%3Cnovo-tab%3E%0A%20%20%20%20%20%20%3Cspan%3E%3Ci%20class%3D%22bhi-person%22%3E%3C%2Fi%3ETab%201%3C%2Fspan%3E%0A%20%20%3C%2Fnovo-tab%3E%0A%20%20%3Cnovo-tab%3E%0A%20%20%20%20%20%20%3Cspan%3E%3Ci%20class%3D%22bhi-person%22%3E%3C%2Fi%3ETab%202%3C%2Fspan%3E%0A%20%20%3C%2Fnovo-tab%3E%0A%20%20%3Cnovo-tab%20%5Bdisabled%5D%3D%22true%22%3E%0A%20%20%20%20%20%20%3Cspan%3E%3Ci%20class%3D%22bhi-person%22%3E%3C%2Fi%3ETab%203%3C%2Fspan%3E%0A%20%20%3C%2Fnovo-tab%3E%0A%3C%2Fnovo-nav%3E%0A%0A%0A%3Cnovo-nav-outlet%20%23condensed%3E%0A%20%20%3Cnovo-nav-content%3E%0A%20%20%20%20%20%20%3Ch1%3ETab%201%20Content%3C%2Fh1%3E%0A%20%20%3C%2Fnovo-nav-content%3E%0A%20%20%3Cnovo-nav-content%3E%0A%20%20%20%20%20%20%3Ch1%3ETab%202%20Content%3C%2Fh1%3E%0A%20%20%3C%2Fnovo-nav-content%3E%0A%3C%2Fnovo-nav-outlet%3E%0A`
    },
    'tabs-router': {
        title: 'Tabs for Navigation',
        component: TabsRouterExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Tabs%20for%20Navigation%0A%20*%2F%0A%40Component(%7B%0A%20%20selector%3A%20'tabs-router-example'%2C%0A%20%20templateUrl%3A%20'tabs-router-example.html'%2C%0A%20%20styleUrls%3A%20%5B'tabs-router-example.css'%5D%2C%0A%7D)%0Aexport%20class%20TabsRouterExample%20%7B%0A%20%20tabSelected()%20%7B%0A%20%20%20%20console.log('TAB%20SELECTED')%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%7D%0A%0A%20%20tabDeselected()%20%7B%0A%20%20%20%20console.log('TAB%20DESELECTED')%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cheader%3E%0A%20%20%3Cnovo-nav%20theme%3D%22white%22%20router%3E%0A%20%20%20%20%20%20%3Cnovo-tab-link%3E%0A%20%20%20%20%20%20%20%20%20%20%3Cspan%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Ci%20class%3D%22bhi-person%22%3E%3C%2Fi%3ETab%201%3C%2Fspan%3E%0A%20%20%20%20%20%20%3C%2Fnovo-tab-link%3E%0A%20%20%20%20%20%20%3Cnovo-tab-link%3E%0A%20%20%20%20%20%20%20%20%20%20%3Cspan%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Ci%20class%3D%22bhi-person%22%3E%3C%2Fi%3ETab%202%3C%2Fspan%3E%0A%20%20%20%20%20%20%3C%2Fnovo-tab-link%3E%0A%20%20%20%20%20%20%20%3Cnovo-tab-link%20%5Bdisabled%5D%3D%22true%22%3E%0A%20%20%20%20%20%20%20%20%20%20%3Cspan%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Ci%20class%3D%22bhi-person%22%3E%3C%2Fi%3ETab%203%3C%2Fspan%3E%0A%20%20%20%20%20%20%3C%2Fnovo-tab-link%3E%0A%20%20%3C%2Fnovo-nav%3E%0A%3C%2Fheader%3E%0A`
    },
    'tabs-vertical': {
        title: 'Vertical Tabs',
        component: TabsVerticalExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Vertical%20Tabs%0A%20*%2F%0A%40Component(%7B%0A%20%20selector%3A%20'tabs-vertical-example'%2C%0A%20%20templateUrl%3A%20'tabs-vertical-example.html'%2C%0A%20%20styleUrls%3A%20%5B'tabs-vertical-example.css'%5D%2C%0A%7D)%0Aexport%20class%20TabsVerticalExample%20%7B%0A%20%20tabSelected()%20%7B%0A%20%20%20%20console.log('TAB%20SELECTED')%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%7D%0A%0A%20%20tabDeselected()%20%7B%0A%20%20%20%20console.log('TAB%20DESELECTED')%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cnovo-nav%20theme%3D%22white%22%20%5Boutlet%5D%3D%22colorVert%22%20direction%3D%22vertical%22%3E%0A%20%20%3Cnovo-tab%3E%0A%20%20%20%20%20%20%3Cspan%3E%0A%20%20%20%20%20%20%20%20%20%20%3Ci%20class%3D%22bhi-person%22%3E%3C%2Fi%3ETab%201%3C%2Fspan%3E%0A%20%20%3C%2Fnovo-tab%3E%0A%20%20%3Cnovo-tab%3E%0A%20%20%20%20%20%20%3Cspan%3E%0A%20%20%20%20%20%20%20%20%20%20%3Ci%20class%3D%22bhi-person%22%3E%3C%2Fi%3ETab%202%3C%2Fspan%3E%0A%20%20%3C%2Fnovo-tab%3E%0A%20%20%3Cnovo-tab%20%5Bdisabled%5D%3D%22true%22%3E%0A%20%20%20%20%20%20%3Cspan%3E%0A%20%20%20%20%20%20%20%20%20%20%3Ci%20class%3D%22bhi-person%22%3E%3C%2Fi%3ETab%203%3C%2Fspan%3E%0A%20%20%3C%2Fnovo-tab%3E%0A%3C%2Fnovo-nav%3E%0A%0A%3Cnovo-nav-outlet%20%23colorVert%3E%0A%20%20%3Cnovo-nav-content%3E%0A%20%20%20%20%20%20%3Ch1%3ETab%201%20Content%3C%2Fh1%3E%0A%0A%20%20%20%20%20%20%3Cp%3E%0A%20%20%20%20%20%20%20%20%20%20Synth%20polaroid%20bitters%20chillwave%20pickled.%20Vegan%20disrupt%20tousled%2C%0A%20%20%20%20%20%20%20%20%20%20Portland%20keffiyeh%20aesthetic%20food%20truck%20sriracha%20cornhole%0A%20%20%20%20%20%20%20%20%20%20single-origin%20coffee%20church-key%20roof%20party.%20Leggings%0A%20%20%20%20%20%20%20%20%20%20ethical%20McSweeney's%2C%20normcore%20you%20probably%20haven't%0A%20%20%20%20%20%20%20%20%20%20heard%20of%20them%20Marfa%20organic%20squid.%20Slow-carb%2090's%0A%20%20%20%20%20%20%20%20%20%20ennui%20Godard%20pug%20asymmetrical%2C%20narwhal%20VHS%20Tonx%20High%0A%20%20%20%20%20%20%20%20%20%20Life.%20Retro%20dreamcatcher%20synth%20Godard%20pickled%20Etsy%0A%20%20%20%20%20%20%20%20%20%20jean%20shorts%20beard%2C%20pour-over%20fanny%20pack%20mumblecore.%0A%20%20%20%20%20%20%20%20%20%20Quinoa%20retro%20aesthetic%20polaroid%2C%20Williamsburg%20American%0A%20%20%20%20%20%20%20%20%20%20Apparel%20plaid%20small%20batch.%20Blue%20Bottle%20Vice%20fanny%0A%20%20%20%20%20%20%20%20%20%20pack%2C%20Williamsburg%20roof%20party%20Wes%20Anderson%20mlkshk%0A%20%20%20%20%20%20%20%20%20%20seitan%20brunch%20before%20they%20sold%20out%20lo-fi%20XOXO%20tofu%0A%20%20%20%20%20%20%20%20%20%20scenester%20small%20batch.%0A%20%20%20%20%20%20%3C%2Fp%3E%0A%20%20%3C%2Fnovo-nav-content%3E%0A%20%20%3Cnovo-nav-content%3E%0A%20%20%20%20%20%20%3Ch1%3ETab%202%20Content%3C%2Fh1%3E%0A%0A%20%20%20%20%20%20%3Cp%3E%0A%20%20%20%20%20%20%20%20%20%20Synth%20polaroid%20bitters%20chillwave%20pickled.%0A%20%20%20%20%20%20%3C%2Fp%3E%0A%20%20%3C%2Fnovo-nav-content%3E%0A%3C%2Fnovo-nav-outlet%3E%0A`
    },
    'activity-section': {
        title: 'Activity Section',
        component: ActivitySectionExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0Aimport%20%7B%20DateCell%2C%20PercentageCell%2C%20NovoTableConfig%2C%20NovoDropdownCell%20%7D%20from%20'novo-elements'%3B%0A%0A%2F**%0A%20*%20%40title%20Activity%20Section%0A%20*%2F%0A%40Component(%7B%0A%20%20selector%3A%20'activity-section-example'%2C%0A%20%20templateUrl%3A%20'activity-section-example.html'%2C%0A%20%20styleUrls%3A%20%5B'activity-section-example.css'%5D%2C%0A%7D)%0Aexport%20class%20ActivitySectionExample%20%7B%0A%20%20public%20isDisabled%3A%20boolean%20%3D%20true%3B%0A%20%20public%20details%3A%20any%3B%0A%0A%20%20constructor()%20%7B%0A%20%20%20%20const%20columns%20%3D%20%5B%0A%20%20%20%20%20%20%7B%20title%3A%20'Name'%2C%20name%3A%20'name'%2C%20ordering%3A%20true%2C%20type%3A%20'link'%2C%20filtering%3A%20true%20%7D%2C%0A%20%20%20%20%20%20%7B%20title%3A%20'Position'%2C%20name%3A%20'position'%2C%20ordering%3A%20true%2C%20filtering%3A%20true%20%7D%2C%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20title%3A%20'Extn.'%2C%0A%20%20%20%20%20%20%20%20name%3A%20'ext'%2C%0A%20%20%20%20%20%20%20%20ordering%3A%20true%2C%0A%20%20%20%20%20%20%20%20renderer%3A%20(object)%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%20%20return%20object.ext.obj%3B%0A%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20compare%3A%20(sort%2C%20previous%2C%20current)%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%20%20const%20first%20%3D%20previous.obj%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20second%20%3D%20current.obj%3B%0A%0A%20%20%20%20%20%20%20%20%20%20if%20(first%20%3E%20second)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20sort%20%3D%3D%3D%20'desc'%20%3F%20-1%20%3A%201%3B%0A%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%20%20if%20(first%20%3C%20second)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20sort%20%3D%3D%3D%20'asc'%20%3F%20-1%20%3A%201%3B%0A%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%20%20return%200%3B%0A%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20title%3A%20'Start%20date'%2C%0A%20%20%20%20%20%20%20%20type%3A%20'date'%2C%0A%20%20%20%20%20%20%20%20name%3A%20'startDate'%2C%0A%20%20%20%20%20%20%20%20renderer%3A%20DateCell%2C%0A%20%20%20%20%20%20%20%20ordering%3A%20true%2C%0A%20%20%20%20%20%20%20%20filtering%3A%20true%2C%0A%20%20%20%20%20%20%20%20range%3A%20true%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20title%3A%20'%25'%2C%0A%20%20%20%20%20%20%20%20name%3A%20'percent'%2C%0A%20%20%20%20%20%20%20%20ordering%3A%20true%2C%0A%20%20%20%20%20%20%20%20renderer%3A%20PercentageCell%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20title%3A%20'Salary'%2C%0A%20%20%20%20%20%20%20%20name%3A%20'salary'%2C%0A%20%20%20%20%20%20%20%20ordering%3A%20true%2C%0A%20%20%20%20%20%20%20%20renderer%3A%20(object)%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%20%20return%20%60%24%20%24%7BNumber(object.salary).toFixed(2)%7D%60%3B%0A%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20title%3A%20'Status'%2C%0A%20%20%20%20%20%20%20%20name%3A%20'status'%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%5D%3B%0A%20%20%20%20this.details%20%3D%20%7B%0A%20%20%20%20%20%20columns%3A%20columns.slice()%2C%0A%20%20%20%20%20%20rows%3A%20TableData.slice()%2C%0A%20%20%20%20%20%20config%3A%20%7B%0A%20%20%20%20%20%20%20%20paging%3A%20%7B%0A%20%20%20%20%20%20%20%20%20%20current%3A%201%2C%0A%20%20%20%20%20%20%20%20%20%20itemsPerPage%3A%2010%2C%0A%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20sorting%3A%20true%2C%0A%20%20%20%20%20%20%20%20filtering%3A%20true%2C%0A%20%20%20%20%20%20%20%20ordering%3A%20true%2C%0A%20%20%20%20%20%20%20%20resizing%3A%20true%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%7D%3B%0A%20%20%7D%0A%7D%0A%0Aexport%20const%20TableData%20%3D%20%5B%0A%20%20%7B%0A%20%20%20%20name%3A%20'Victoria%20Cantrell'%2C%0A%20%20%20%20position%3A%20'Integer%20Corporation'%2C%0A%20%20%20%20office%3A%20'Croatia'%2C%0A%20%20%20%20ext%3A%20%7B%20obj%3A%20'8262'%20%7D%2C%0A%20%20%20%20startDate%3A%20new%20Date('2017%2F08%2F19')%2C%0A%20%20%20%20salary%3A%20208178%2C%0A%20%20%20%20percent%3A%200.5%2C%0A%20%20%20%20status%3A%20'New%20Lead'%2C%0A%20%20%20%20description%3A%0A%20%20%20%20%20%20'When%20there%20was%20despair%20in%20the%20dust%20bowl%20and%20depression%20across%20the%20land%2C%20she%20saw%20a%20nation%20conquer%20fear%20itself%20with%20a%20New%20Deal%2C%20new%20jobs%20and%20a%20new%20sense%20of%20common%20purpose.%20Yes%20we%20can.'%2C%0A%20%20%20%20categories%3A%20%5B'Temporary'%2C%20'Developer'%5D%2C%0A%20%20%7D%2C%0A%20%20%7B%0A%20%20%20%20name%3A%20'Pearl%20Crosby'%2C%0A%20%20%20%20position%3A%20'In%20PC'%2C%0A%20%20%20%20office%3A%20'Cambodia'%2C%0A%20%20%20%20ext%3A%20%7B%20obj%3A%20'8262'%20%7D%2C%0A%20%20%20%20startDate%3A%20new%20Date('2017%2F10%2F08')%2C%0A%20%20%20%20salary%3A%20114367%2C%0A%20%20%20%20percent%3A%200.5%2C%0A%20%20%20%20status%3A%20'New%20Lead'%2C%0A%20%20%20%20description%3A%0A%20%20%20%20%20%20'When%20there%20was%20despair%20in%20the%20dust%20bowl%20and%20depression%20across%20the%20land%2C%20she%20saw%20a%20nation%20conquer%20fear%20itself%20with%20a%20New%20Deal%2C%20new%20jobs%20and%20a%20new%20sense%20of%20common%20purpose.%20Yes%20we%20can.'%2C%0A%20%20%20%20categories%3A%20%5B'Temporary'%2C%20'Developer'%5D%2C%0A%20%20%7D%2C%0A%20%20%7B%0A%20%20%20%20name%3A%20'Colette%20Foley'%2C%0A%20%20%20%20position%3A%20'Lorem%20Inc.'%2C%0A%20%20%20%20office%3A%20'Korea%2C%20North'%2C%0A%20%20%20%20ext%3A%20%7B%20obj%3A%20'8262'%20%7D%2C%0A%20%20%20%20startDate%3A%20new%20Date('2017%2F07%2F19')%2C%0A%20%20%20%20salary%3A%20721473%2C%0A%20%20%20%20status%3A%20'New%20Lead'%2C%0A%20%20%20%20percent%3A%201%2C%0A%20%20%20%20description%3A%0A%20%20%20%20%20%20'To%20my%20campaign%20manager%20David%20Plouffe%2C%20my%20chief%20strategist%20David%20Axelrod%2C%20and%20the%20best%20campaign%20team%20ever%20assembled%20in%20the%20history%20of%20politics%20%E2%80%93%20you%20made%20this%20happen%2C%20and%20I%20am%20forever%20grateful%20for%20what%20you%E2%80%99ve%20sacrificed%20to%20get%20it%20done.'%2C%0A%20%20%20%20categories%3A%20%5B'Temporary'%2C%20'Developer'%5D%2C%0A%20%20%7D%2C%0A%5D%3B%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cnovo-expansion-panel%20theme%3D%22contact%22%20padding%3D%22false%22%3E%0A%20%20%20%20%3Cnovo-expansion-panel-header%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-panel-title%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%3Cnovo-icon%3Eperson%3C%2Fnovo-icon%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%3Clabel%3EContacts%3C%2Flabel%3E%0A%20%20%20%20%20%20%20%20%3C%2Fnovo-panel-title%3E%0A%20%20%20%20%3C%2Fnovo-expansion-panel-header%3E%0A%0A%20%20%20%20%3Cnovo-table%20class%3D%22table-condensed%22%0A%20%20%20%20%20%20%20%20%5Brows%5D%3D%22details.rows%22%0A%20%20%20%20%20%20%20%20%5Bcolumns%5D%3D%22details.columns%22%0A%20%20%20%20%20%20%20%20%5Bconfig%5D%3D%22details.config%22%0A%20%20%20%20%20%20%20%20rowIdentifier%3D%22name%22%3E%3C%2Fnovo-table%3E%0A%0A%0A%3C%2Fnovo-expansion-panel%3E%0A%3Cnovo-expansion-panel%20theme%3D%22job%22%20%5BhideToggle%5D%3D%22jp.expanded%22%20%23jp%3E%0A%20%20%20%20%3Cnovo-expansion-panel-header%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-panel-title%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%3Cnovo-icon%3Ejob%3C%2Fnovo-icon%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%3Clabel%3EJob%20Orders%3C%2Flabel%3E%0A%20%20%20%20%20%20%20%20%3C%2Fnovo-panel-title%3E%0A%20%20%20%20%20%20%20%20%3Cbutton%20theme%3D%22primary%22%20icon%3D%22add-thin%22%20%5Bhidden%5D%3D%22!jp.expanded%22%3EAdd%20Job%20Order%3C%2Fbutton%3E%0A%20%20%20%20%3C%2Fnovo-expansion-panel-header%3E%0A%0A%20%20%20%20%3Cp%3EThis%20is%20the%20primary%20content%20of%20the%20panel.%3C%2Fp%3E%0A%0A%3C%2Fnovo-expansion-panel%3E%0A`
    },
    'record-header': {
        title: 'Basic Header Example',
        component: RecordHeaderExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0Aimport%20%7B%20NovoToastService%20%7D%20from%20'novo-elements'%3B%0A%0Aconst%20HEADER_THEMES%20%3D%20%5B'company'%2C%20'job'%2C%20'candidate'%2C%20'contact'%2C%20'opportunity'%2C%20'lead'%2C%20'light'%2C%20'white'%5D%3B%0Aconst%20HEADER_ICONS%20%3D%20%5B'company'%2C%20'job'%2C%20'candidate'%2C%20'person'%2C%20'opportunity'%2C%20'lead'%2C%20'bolt'%2C%20'shield'%5D%3B%0A%0A%2F**%0A%20*%20%40title%20Basic%20Header%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20selector%3A%20'record-header-example'%2C%0A%20%20templateUrl%3A%20'record-header-example.html'%2C%0A%20%20styleUrls%3A%20%5B'record-header-example.css'%5D%2C%0A%7D)%0Aexport%20class%20RecordHeaderExample%20%7B%0A%20%20public%20theme%3A%20string%20%3D%20'company'%3B%0A%20%20public%20icon%3A%20string%20%3D%20'company'%3B%0A%20%20public%20record%3A%20any%3B%0A%20%20public%20values%3A%20any%5B%5D%3B%0A%20%20public%20tabs%3A%20string%5B%5D%3B%0A%20%20private%20options%3A%20any%20%3D%20%7B%0A%20%20%20%20title%3A%20'Title'%2C%0A%20%20%20%20message%3A%20'Some%20Message...'%2C%0A%20%20%20%20theme%3A%20'ocean'%2C%0A%20%20%20%20icon%3A%20'clipboard'%2C%0A%20%20%20%20position%3A%20'growlTopRight'%2C%0A%20%20%7D%3B%0A%20%20private%20themeIndex%3A%20number%20%3D%200%3B%0A%0A%20%20constructor(private%20toaster%3A%20NovoToastService)%20%7B%0A%20%20%20%20this.refresh()%3B%0A%20%20%7D%0A%0A%20%20refresh()%20%7B%0A%20%20%20%20this.values%20%3D%20undefined%3B%0A%20%20%20%20this.tabs%20%3D%20undefined%3B%0A%20%20%20%20this.record%20%3D%20undefined%3B%0A%0A%20%20%20%20setTimeout(()%20%3D%3E%20%7B%0A%20%20%20%20%20%20this.values%20%3D%20%5B%7B%20label%3A%20'Status'%2C%20data%3A%20'Open'%20%7D%2C%20%7B%20label%3A%20'Phone'%2C%20data%3A%20'555-555-5555'%20%7D%2C%20%7B%20label%3A%20'Address'%2C%20data%3A%20'Boston%2C%20MA'%20%7D%5D%3B%0A%20%20%20%20%20%20this.tabs%20%3D%20%5B'Overview'%2C%20'Edit'%2C%20'Activity'%5D%3B%0A%20%20%20%20%20%20this.record%20%3D%20%7B%0A%20%20%20%20%20%20%20%20id%3A%20101%2C%0A%20%20%20%20%20%20%20%20name%3A%20'Acme%20Corporation%2C%20LLC'%2C%0A%20%20%20%20%20%20%7D%3B%0A%20%20%20%20%7D%2C%205000)%3B%0A%20%20%7D%0A%0A%20%20changeTheme()%20%7B%0A%20%20%20%20this.themeIndex%20%3D%20this.themeIndex%20%3D%3D%3D%20HEADER_THEMES.length%20-%201%20%3F%200%20%3A%20this.themeIndex%20%2B%201%3B%0A%20%20%20%20this.theme%20%3D%20HEADER_THEMES%5Bthis.themeIndex%5D%3B%0A%20%20%20%20this.icon%20%3D%20HEADER_ICONS%5Bthis.themeIndex%5D%3B%0A%20%20%7D%0A%0A%20%20catchEv(type%2C%20ev)%20%7B%0A%20%20%20%20%2F%2F%20Set%20toast%20options%0A%20%20%20%20this.options%20%3D%20%7B%0A%20%20%20%20%20%20title%3A%20%60%24%7Btype%7D%60%2C%0A%20%20%20%20%20%20message%3A%20%60%24%7Bev%7D%20fired...%60%2C%0A%20%20%20%20%20%20theme%3A%20'ocean'%2C%0A%20%20%20%20%20%20icon%3A%20%60%24%7Btype%7D%60%2C%0A%20%20%20%20%20%20position%3A%20'growlTopRight'%2C%0A%20%20%20%20%7D%3B%0A%0A%20%20%20%20%2F%2F%20Fire%20toast%0A%20%20%20%20this.toaster.alert(this.options)%3B%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cheader%20theme%3D%22company%22%3E%0A%20%20%3Cnovo-icon%3Ecompany%3C%2Fnovo-icon%3E%0A%20%20%3Ch1%20novo-title%20%5BisLoading%5D%3D%22record%22%3E%0A%20%20%20%20%3Cspan%20*skeleton%3E%3C%2Fspan%3E%0A%20%20%20%20%3Cspan%20*loaded%3E%7B%7Brecord.id%7D%7D%20%7C%20%7B%7Brecord.name%7D%7D%3C%2Fspan%3E%0A%20%20%3C%2Fh1%3E%0A%20%20%3Cnovo-action%20icon%3D%22convert%22%20tooltip%3D%22Change%20Theme%22%20(click)%3D%22changeTheme()%22%3E%3C%2Fnovo-action%3E%0A%20%20%3Cnovo-action%20icon%3D%22refresh%22%20tooltip%3D%22Refresh%22%20(click)%3D%22refresh()%22%3E%3C%2Fnovo-action%3E%0A%20%20%3Cnovo-action%20icon%3D%22times%22%20tooltip%3D%22Show%20Popup%22%20(click)%3D%22catchEv('close'%2C%20%24event)%22%3E%3C%2Fnovo-action%3E%0A%20%20%3Csection%3E%0A%20%20%20%20%3Cbutton%20theme%3D%22icon%22%20icon%3D%22google%22%3E%3C%2Fbutton%3E%0A%20%20%20%20%3Cbutton%20theme%3D%22icon%22%20icon%3D%22linkedin-f%22%3E%3C%2Fbutton%3E%0A%20%20%20%20%3Cbutton%20theme%3D%22icon%22%20icon%3D%22location%22%3E%3C%2Fbutton%3E%0A%20%20%3C%2Fsection%3E%0A%20%20%3Cnovo-list%20class%3D%22bgc-off-white%22%20direction%3D%22horizontal%22%20%5BisLoading%5D%3D%22values%22%3E%0A%20%20%20%20%3Cnovo-value%20*skeleton%3E%3C%2Fnovo-value%3E%0A%20%20%20%20%3Cnovo-value%20*skeleton%3E%3C%2Fnovo-value%3E%0A%20%20%20%20%3Cnovo-value%20*ngFor%3D%22let%20value%20of%20values%22%20%5Blabel%5D%3D%22value.label%22%20%5Bdata%5D%3D%22value.data%22%3E%3C%2Fnovo-value%3E%0A%20%20%3C%2Fnovo-list%3E%0A%20%20%3Cnovo-nav%20theme%3D%22white%22%20direction%3D%22horizontal%22%20condensed%3D%22true%22%20%5BisLoading%5D%3D%22tabs%22%3E%0A%20%20%20%20%3Cnovo-tab%20*skeleton%3E%3C%2Fnovo-tab%3E%0A%20%20%20%20%3Cnovo-tab%20*skeleton%3E%3C%2Fnovo-tab%3E%0A%20%20%20%20%3Cnovo-tab%20*skeleton%3E%3C%2Fnovo-tab%3E%0A%20%20%20%20%3Cnovo-tab%20*ngFor%3D%22let%20tab%20of%20tabs%22%3E%0A%20%20%20%20%20%20%3Cspan%3E%7B%7Btab%7D%7D%3C%2Fspan%3E%0A%20%20%20%20%3C%2Fnovo-tab%3E%0A%20%20%3C%2Fnovo-nav%3E%0A%3C%2Fheader%3E%0A`
    },
    'date-translations': {
        title: 'Date Translations Example',
        component: DateTranslationsExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0Aimport%20%7B%20TranslateService%20%7D%20from%20'chomsky'%3B%0A%0A%2F**%0A%20*%20%40title%20Date%20Translations%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20selector%3A%20'date-translations-example'%2C%0A%20%20templateUrl%3A%20'date-translations-example.html'%2C%0A%20%20styleUrls%3A%20%5B'date-translations-example.css'%5D%2C%0A%7D)%0Aexport%20class%20DateTranslationsExample%20%7B%0A%20%20public%20currentLocale%3A%20string%20%3D%20'en-US'%3B%0A%20%20public%20useMilitaryTime%3A%20boolean%20%3D%20false%3B%0A%20%20public%20locales%3A%20Array%3Cany%3E%20%3D%20%5B%0A%20%20%20%20%7B%0A%20%20%20%20%20%20label%3A%20'en-US'%2C%0A%20%20%20%20%20%20value%3A%20'en-US'%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20label%3A%20'fr-FR'%2C%0A%20%20%20%20%20%20value%3A%20'fr-FR'%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20label%3A%20'ru-RU'%2C%0A%20%20%20%20%20%20value%3A%20'ru-RU'%2C%0A%20%20%20%20%7D%2C%0A%20%20%5D%3B%0A%20%20public%20militaryTime%3A%20Array%3Cany%3E%20%3D%20%5B%0A%20%20%20%20%7B%0A%20%20%20%20%20%20label%3A%20'12%20Hour'%2C%0A%20%20%20%20%20%20value%3A%20false%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20label%3A%20'24%20Hour'%2C%0A%20%20%20%20%20%20value%3A%20true%2C%0A%20%20%20%20%7D%2C%0A%20%20%5D%3B%0A%20%20public%20greeting%3A%20string%20%3D%20'greeting'%3B%0A%20%20public%20demoVariables%3A%20any%20%3D%20%7B%0A%20%20%20%20today%3A%20new%20Date()%2C%0A%20%20%20%20name%3A%20'Jane'%2C%0A%20%20%20%20balance%3A%209874.34%2C%0A%20%20%20%20count%3A%201%2C%0A%20%20%20%20timestamp%3A%201506470400000%2C%0A%20%20%7D%3B%0A%0A%20%20public%20translateService%3A%20any%20%3D%20TranslateService%3B%0A%0A%20%20constructor()%20%7B%0A%20%20%20%20TranslateService.setLocation('assets%2Fi18n%2F')%3B%0A%20%20%20%20TranslateService.onLocaleChange.subscribe((locale)%20%3D%3E%20%7B%0A%20%20%20%20%20%20this.currentLocale%20%3D%20locale%3B%0A%20%20%20%20%7D)%3B%0A%20%20%20%20%2F%2F%20Use%20en-US%0A%20%20%20%20this.changeLanguage('en-US')%3B%0A%20%20%7D%0A%0A%20%20changeLanguage(locale)%20%7B%0A%20%20%20%20this.currentLocale%20%3D%20locale%3B%0A%20%20%20%20TranslateService.use(locale)%3B%0A%20%20%7D%0A%0A%20%20changeMilitaryTime(useMilitaryTime)%20%7B%0A%20%20%20%20this.useMilitaryTime%20%3D%20useMilitaryTime%3B%0A%20%20%20%20TranslateService.forceDisplayTo24HourTime(useMilitaryTime)%3B%0A%20%20%20%20this.changeLanguage(this.currentLocale)%3B%0A%20%20%7D%0A%7D%0A`,
        cssSource: `.spacer%20%7B%0A%20%20width%3A%208em%3B%0A%20%20display%3A%20inline-block%3B%0A%7D%0A`,
        htmlSource: `%0A%3Cnovo-tiles%20%5Boptions%5D%3D%22locales%22%20%5B(ngModel)%5D%3D%22currentLocale%22%20(onChange)%3D%22changeLanguage(%24event)%22%3E%3C%2Fnovo-tiles%3E%0A%3Cspan%20class%3D%22spacer%22%3E%3C%2Fspan%3E%0A%3Cnovo-tiles%20%5Boptions%5D%3D%22militaryTime%22%20%5B(ngModel)%5D%3D%22useMilitaryTime%22%20(onChange)%3D%22changeMilitaryTime(%24event)%22%3E%3C%2Fnovo-tiles%3E%0A%0A%3Ch4%3EPipe%3C%2Fh4%3E%0A%3Cdiv%20class%3D%22panel%20panel-default%22%3E%0A%20%20%20%20%3Cdiv%20class%3D%22panel-body%22%3E%0A%20%20%20%20%20%20%20%20%3Cp%3E%7B%7B%20'today'%20%7C%20translate%3A%20%7B%20today%3A%20demoVariables.today%20%7D%20%7D%7D%3C%2Fp%3E%0A%20%20%20%20%20%20%20%20%3Cp%3E%7B%7B%20'formatToday'%20%7C%20translate%3A%20%7B%20today%3A%20demoVariables.today%20%7D%20%7D%7D%3C%2Fp%3E%0A%20%20%20%20%20%20%20%20%3Cp%3E%7B%7B%20'long'%20%7C%20translate%3A%20%7B%20today%3A%20demoVariables.today%20%7D%20%7D%7D%3C%2Fp%3E%0A%20%20%20%20%20%20%20%20%3Cp%3E%7B%7B%20'timeLong'%20%7C%20translate%3A%20%7B%20today%3A%20demoVariables.today%20%7D%20%7D%7D%3C%2Fp%3E%0A%20%20%20%20%20%20%20%20%3Cp%3E%7B%7B%20'militaryFormat'%20%7C%20translate%3A%20%7B%20today%3A%20demoVariables.timestamp%20%7D%20%7D%7D%3C%2Fp%3E%0A%20%20%20%20%3C%2Fdiv%3E%0A%3C%2Fdiv%3E%0A%0A%3Ch4%3EDirective%3C%2Fh4%3E%0A%3Cdiv%20class%3D%22panel%20panel-default%22%3E%0A%20%20%20%20%3Cdiv%20class%3D%22panel-body%22%3E%0A%20%20%20%20%20%20%20%20%3Cp%20%5Btranslate%5D%3D%22'today'%22%20%5BdynamicValues%5D%3D%22%7B%20today%3A%20demoVariables.today%20%7D%22%3E%3C%2Fp%3E%0A%20%20%20%20%20%20%20%20%3Cp%20%5Btranslate%5D%3D%22'formatToday'%22%20%5BdynamicValues%5D%3D%22%7B%20today%3A%20demoVariables.today%20%7D%22%3E%3C%2Fp%3E%0A%20%20%20%20%20%20%20%20%3Cp%20%5Btranslate%5D%3D%22'long'%22%20%5BdynamicValues%5D%3D%22%7B%20today%3A%20demoVariables.today%20%7D%22%3E%3C%2Fp%3E%0A%20%20%20%20%20%20%20%20%3Cp%20%5Btranslate%5D%3D%22'timeLong'%22%20%5BdynamicValues%5D%3D%22%7B%20today%3A%20demoVariables.today%20%7D%22%3E%3C%2Fp%3E%0A%20%20%20%20%20%20%20%20%3Cp%20%5Btranslate%5D%3D%22'militaryFormat'%22%20%5BdynamicValues%5D%3D%22%7B%20today%3A%20demoVariables.timestamp%20%7D%22%3E%3C%2Fp%3E%0A%20%20%20%20%3C%2Fdiv%3E%0A%3C%2Fdiv%3E%0A`
    },
    'number-translations': {
        title: 'Number & Currency Translations Example',
        component: NumberTranslationsExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0Aimport%20%7B%20TranslateService%20%7D%20from%20'chomsky'%3B%0A%0A%2F**%0A%20*%20%40title%20Number%20%26%20Currency%20Translations%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20selector%3A%20'number-translations-example'%2C%0A%20%20templateUrl%3A%20'number-translations-example.html'%2C%0A%20%20styleUrls%3A%20%5B'number-translations-example.css'%5D%2C%0A%7D)%0Aexport%20class%20NumberTranslationsExample%20%7B%0A%20%20public%20currentLocale%3A%20string%20%3D%20'en-US'%3B%0A%20%20public%20locales%3A%20Array%3Cany%3E%20%3D%20%5B%0A%20%20%20%20%7B%0A%20%20%20%20%20%20label%3A%20'en-US'%2C%0A%20%20%20%20%20%20value%3A%20'en-US'%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20label%3A%20'fr-FR'%2C%0A%20%20%20%20%20%20value%3A%20'fr-FR'%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20label%3A%20'ru-RU'%2C%0A%20%20%20%20%20%20value%3A%20'ru-RU'%2C%0A%20%20%20%20%7D%2C%0A%20%20%5D%3B%0A%20%20public%20greeting%3A%20string%20%3D%20'greeting'%3B%0A%20%20public%20demoVariables%3A%20any%20%3D%20%7B%0A%20%20%20%20today%3A%20new%20Date()%2C%0A%20%20%20%20name%3A%20'Jane'%2C%0A%20%20%20%20balance%3A%209874.34%2C%0A%20%20%20%20count%3A%201%2C%0A%20%20%7D%3B%0A%0A%20%20public%20translateService%3A%20any%20%3D%20TranslateService%3B%0A%0A%20%20constructor()%20%7B%0A%20%20%20%20TranslateService.setLocation('assets%2Fi18n%2F')%3B%0A%20%20%20%20TranslateService.onLocaleChange.subscribe((locale)%20%3D%3E%20%7B%0A%20%20%20%20%20%20this.currentLocale%20%3D%20locale%3B%0A%20%20%20%20%7D)%3B%0A%20%20%20%20%2F%2F%20Use%20en-US%0A%20%20%20%20this.changeLanguage('en-US')%3B%0A%20%20%7D%0A%0A%20%20changeLanguage(locale)%20%7B%0A%20%20%20%20this.currentLocale%20%3D%20locale%3B%0A%20%20%20%20TranslateService.use(locale)%3B%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%0A%3Cnovo-tiles%20%5Boptions%5D%3D%22locales%22%20%5B(ngModel)%5D%3D%22currentLocale%22%20(onChange)%3D%22changeLanguage(%24event)%22%3E%3C%2Fnovo-tiles%3E%0A%0A%3Ch4%3EPipe%3C%2Fh4%3E%0A%3Cdiv%20class%3D%22panel%20panel-default%22%3E%0A%20%20%20%20%3Cdiv%20class%3D%22panel-body%22%3E%0A%20%20%20%20%20%20%20%20%3Cp%3E%7B%7B%20'alert'%20%7C%20translate%3A%20%7B%20count%3A%20demoVariables.count%20%7D%20%7D%7D%3C%2Fp%3E%0A%20%20%20%20%20%20%20%20%3Cp%3E%7B%7B%20'debt'%20%7C%20translate%3A%20%7B%20balance%3A%20demoVariables.balance%20%7D%20%7D%7D%3C%2Fp%3E%0A%20%20%20%20%3C%2Fdiv%3E%0A%3C%2Fdiv%3E%0A%0A%3Ch4%3EDirective%3C%2Fh4%3E%0A%3Cdiv%20class%3D%22panel%20panel-default%22%3E%0A%20%20%20%20%3Cdiv%20class%3D%22panel-body%22%3E%0A%20%20%20%20%20%20%20%20%3Cp%20%5Btranslate%5D%3D%22'alert'%22%20%5BdynamicValues%5D%3D%22%7B%20count%3A%20demoVariables.count%20%7D%22%3E%3C%2Fp%3E%0A%20%20%20%20%20%20%20%20%3Cp%20%5Btranslate%5D%3D%22'debt'%22%20%5BdynamicValues%5D%3D%22%7B%20balance%3A%20demoVariables.balance%20%7D%22%3E%3C%2Fp%3E%0A%20%20%20%20%3C%2Fdiv%3E%0A%3C%2Fdiv%3E%0A`
    },
    'plural-translations': {
        title: 'Plural Translations Example',
        component: PluralTranslationsExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0Aimport%20%7B%20TranslateService%20%7D%20from%20'chomsky'%3B%0A%0A%2F**%0A%20*%20%40title%20Plural%20Translations%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20selector%3A%20'plural-translations-example'%2C%0A%20%20templateUrl%3A%20'plural-translations-example.html'%2C%0A%20%20styleUrls%3A%20%5B'plural-translations-example.css'%5D%2C%0A%7D)%0Aexport%20class%20PluralTranslationsExample%20%7B%0A%20%20public%20currentLocale%3A%20string%20%3D%20'en-US'%3B%0A%20%20public%20locales%3A%20Array%3Cany%3E%20%3D%20%5B%0A%20%20%20%20%7B%0A%20%20%20%20%20%20label%3A%20'en-US'%2C%0A%20%20%20%20%20%20value%3A%20'en-US'%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20label%3A%20'fr-FR'%2C%0A%20%20%20%20%20%20value%3A%20'fr-FR'%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20label%3A%20'ru-RU'%2C%0A%20%20%20%20%20%20value%3A%20'ru-RU'%2C%0A%20%20%20%20%7D%2C%0A%20%20%5D%3B%0A%20%20public%20greeting%3A%20string%20%3D%20'greeting'%3B%0A%20%20public%20demoVariables%3A%20any%20%3D%20%7B%0A%20%20%20%20today%3A%20new%20Date()%2C%0A%20%20%20%20name%3A%20'Jane'%2C%0A%20%20%20%20balance%3A%209874.34%2C%0A%20%20%20%20count%3A%201%2C%0A%20%20%7D%3B%0A%0A%20%20public%20translateService%3A%20any%20%3D%20TranslateService%3B%0A%0A%20%20constructor()%20%7B%0A%20%20%20%20TranslateService.setLocation('assets%2Fi18n%2F')%3B%0A%20%20%20%20TranslateService.onLocaleChange.subscribe((locale)%20%3D%3E%20%7B%0A%20%20%20%20%20%20this.currentLocale%20%3D%20locale%3B%0A%20%20%20%20%7D)%3B%0A%20%20%20%20%2F%2F%20Use%20en-US%0A%20%20%20%20this.changeLanguage('en-US')%3B%0A%20%20%7D%0A%0A%20%20changeLanguage(locale)%20%7B%0A%20%20%20%20this.currentLocale%20%3D%20locale%3B%0A%20%20%20%20TranslateService.use(locale)%3B%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%0A%3Cnovo-tiles%20%5Boptions%5D%3D%22locales%22%20%5B(ngModel)%5D%3D%22currentLocale%22%20(onChange)%3D%22changeLanguage(%24event)%22%3E%3C%2Fnovo-tiles%3E%0A%0A%3Ch4%3EPipe%3C%2Fh4%3E%0A%3Cdiv%20class%3D%22panel%20panel-default%22%3E%0A%20%20%20%20%3Cdiv%20class%3D%22panel-body%22%3E%0A%20%20%20%20%20%20%20%20%3Cp%3E%7B%7B%20'messages'%20%7C%20translate%3A%20%7B%20quantity%3A%200%20%7D%20%7D%7D%3C%2Fp%3E%0A%20%20%20%20%20%20%20%20%3Cp%3E%7B%7B%20'messages'%20%7C%20translate%3A%20%7B%20quantity%3A%201%20%7D%20%7D%7D%3C%2Fp%3E%0A%20%20%20%20%20%20%20%20%3Cp%3E%7B%7B%20'messages'%20%7C%20translate%3A%20%7B%20quantity%3A%2020%20%7D%20%7D%7D%3C%2Fp%3E%0A%20%20%20%20%20%20%20%20%3Cp%3E%7B%7B%20'messages'%20%7C%20translate%3A%20%7B%20quantity%3A%2050%20%7D%20%7D%7D%3C%2Fp%3E%0A%20%20%20%20%20%20%20%20%3Cp%3E%7B%7B%20'candidate'%20%7C%20translate%3A%7B%20gender%3A%20'female'%2C%20quantity%3A%201%2C%20host%3A%20'Jane'%2C%20candidate%3A%20'candidates'%20%7D%20%7D%7D%3C%2Fp%3E%0A%20%20%20%20%20%20%20%20%3Cp%3E%7B%7B%20'candidate'%20%7C%20translate%3A%7B%20gender%3A%20'male'%2C%20quantity%3A%200%2C%20host%3A%20'John'%2C%20candidate%3A%20'candidates'%20%7D%20%7D%7D%3C%2Fp%3E%0A%20%20%20%20%20%20%20%20%3Cp%3E%7B%7B%20'candidate'%20%7C%20translate%3A%7B%20gender%3A%20'other'%2C%20quantity%3A%200%2C%20host%3A%20'Les%20gens'%2C%20candidate%3A%20'candidates'%20%7D%20%7D%7D%3C%2Fp%3E%0A%20%20%20%20%3C%2Fdiv%3E%0A%3C%2Fdiv%3E%0A%0A%3Ch4%3EDirective%3C%2Fh4%3E%0A%3Cdiv%20class%3D%22panel%20panel-default%22%3E%0A%20%20%20%20%3Cdiv%20class%3D%22panel-body%22%3E%0A%20%20%20%20%20%20%20%20%3Cp%20%5Btranslate%5D%3D%22'messages'%22%20%5BdynamicValues%5D%3D%22%7B%20quantity%3A%200%20%7D%22%3E%3C%2Fp%3E%0A%20%20%20%20%20%20%20%20%3Cp%20%5Btranslate%5D%3D%22'messages'%22%20%5BdynamicValues%5D%3D%22%7B%20quantity%3A%201%20%7D%22%3E%3C%2Fp%3E%0A%20%20%20%20%20%20%20%20%3Cp%20%5Btranslate%5D%3D%22'messages'%22%20%5BdynamicValues%5D%3D%22%7B%20quantity%3A%2020%20%7D%22%3E%3C%2Fp%3E%0A%20%20%20%20%20%20%20%20%3Cp%20%5Btranslate%5D%3D%22'messages'%22%20%5BdynamicValues%5D%3D%22%7B%20quantity%3A%2050%20%7D%22%3E%3C%2Fp%3E%0A%20%20%20%20%20%20%20%20%3Cp%20%5Btranslate%5D%3D%22'candidate'%22%20%5BdynamicValues%5D%3D%22%7B%20gender%3A%20'female'%2C%20quantity%3A%201%2C%20host%3A%20'Jane'%2C%20candidate%3A%20'candidates'%20%7D%22%3E%3C%2Fp%3E%0A%20%20%20%20%20%20%20%20%3Cp%20%5Btranslate%5D%3D%22'candidate'%22%20%5BdynamicValues%5D%3D%22%7B%20gender%3A%20'male'%2C%20quantity%3A%200%2C%20host%3A%20'John'%2C%20candidate%3A%20'candidates'%20%7D%22%3E%3C%2Fp%3E%0A%20%20%20%20%20%20%20%20%3Cp%20%5Btranslate%5D%3D%22'candidate'%22%20%5BdynamicValues%5D%3D%22%7B%20gender%3A%20'other'%2C%20quantity%3A%200%2C%20host%3A%20'Les%20gens'%2C%20candidate%3A%20'candidates'%20%7D%22%3E%3C%2Fp%3E%0A%20%20%20%20%3C%2Fdiv%3E%0A%3C%2Fdiv%3E%0A%0A`
    },
    'simple-translations': {
        title: 'Simple Translations Example',
        component: SimpleTranslationsExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0Aimport%20%7B%20TranslateService%20%7D%20from%20'chomsky'%3B%0A%0A%2F**%0A%20*%20%40title%20Simple%20Translations%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20selector%3A%20'simple-translations-example'%2C%0A%20%20templateUrl%3A%20'simple-translations-example.html'%2C%0A%20%20styleUrls%3A%20%5B'simple-translations-example.css'%5D%2C%0A%7D)%0Aexport%20class%20SimpleTranslationsExample%20%7B%0A%20%20public%20currentLocale%3A%20string%20%3D%20'en-US'%3B%0A%20%20public%20locales%3A%20Array%3Cany%3E%20%3D%20%5B%0A%20%20%20%20%7B%0A%20%20%20%20%20%20label%3A%20'en-US'%2C%0A%20%20%20%20%20%20value%3A%20'en-US'%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20label%3A%20'fr-FR'%2C%0A%20%20%20%20%20%20value%3A%20'fr-FR'%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20label%3A%20'ru-RU'%2C%0A%20%20%20%20%20%20value%3A%20'ru-RU'%2C%0A%20%20%20%20%7D%2C%0A%20%20%5D%3B%0A%20%20public%20greeting%3A%20string%20%3D%20'greeting'%3B%0A%20%20public%20demoVariables%3A%20any%20%3D%20%7B%0A%20%20%20%20today%3A%20new%20Date()%2C%0A%20%20%20%20name%3A%20'Jane'%2C%0A%20%20%20%20balance%3A%209874.34%2C%0A%20%20%20%20count%3A%201%2C%0A%20%20%7D%3B%0A%0A%20%20public%20translateService%3A%20any%20%3D%20TranslateService%3B%0A%0A%20%20constructor()%20%7B%0A%20%20%20%20TranslateService.onLocaleChange.subscribe((locale)%20%3D%3E%20%7B%0A%20%20%20%20%20%20this.currentLocale%20%3D%20locale%3B%0A%20%20%20%20%7D)%3B%0A%20%20%20%20%2F%2F%20Use%20en-US%0A%20%20%20%20this.changeLanguage('en-US')%3B%0A%20%20%7D%0A%0A%20%20changeLanguage(locale)%20%7B%0A%20%20%20%20this.currentLocale%20%3D%20locale%3B%0A%20%20%20%20TranslateService.use(locale)%3B%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%0A%3Cnovo-tiles%20%5Boptions%5D%3D%22locales%22%20%5B(ngModel)%5D%3D%22currentLocale%22%20(onChange)%3D%22changeLanguage(%24event)%22%3E%3C%2Fnovo-tiles%3E%0A%0A%3Ch4%3EPipe%3C%2Fh4%3E%0A%3Cdiv%20class%3D%22panel%20panel-default%22%3E%0A%20%20%20%20%3Cdiv%20class%3D%22panel-body%22%3E%0A%20%20%20%20%20%20%20%20%3Cp%3E%7B%7B%20'greeting'%20%7C%20translate%20%7D%7D%3C%2Fp%3E%0A%20%20%20%20%3C%2Fdiv%3E%0A%3C%2Fdiv%3E%0A%0A%3Ch4%3EDirective%3C%2Fh4%3E%0A%3Cdiv%20class%3D%22panel%20panel-default%22%3E%0A%20%20%20%20%3Cdiv%20class%3D%22panel-body%22%3E%0A%20%20%20%20%20%20%20%20%3Cp%20%5Btranslate%5D%3D%22'greeting'%22%3E%3C%2Fp%3E%0A%20%20%20%20%3C%2Fdiv%3E%0A%3C%2Fdiv%3E%0A`
    },
    'translations-variables': {
        title: 'Translations with Variables Example',
        component: TranslationsVariablesExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0Aimport%20%7B%20TranslateService%20%7D%20from%20'chomsky'%3B%0A%0A%2F**%0A%20*%20%40title%20Translations%20with%20Variables%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20selector%3A%20'translations-variables-example'%2C%0A%20%20templateUrl%3A%20'translations-variables-example.html'%2C%0A%20%20styleUrls%3A%20%5B'translations-variables-example.css'%5D%2C%0A%7D)%0Aexport%20class%20TranslationsVariablesExample%20%7B%0A%20%20public%20currentLocale%3A%20string%20%3D%20'en-US'%3B%0A%20%20public%20locales%3A%20Array%3Cany%3E%20%3D%20%5B%0A%20%20%20%20%7B%0A%20%20%20%20%20%20label%3A%20'en-US'%2C%0A%20%20%20%20%20%20value%3A%20'en-US'%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20label%3A%20'fr-FR'%2C%0A%20%20%20%20%20%20value%3A%20'fr-FR'%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20label%3A%20'ru-RU'%2C%0A%20%20%20%20%20%20value%3A%20'ru-RU'%2C%0A%20%20%20%20%7D%2C%0A%20%20%5D%3B%0A%20%20public%20greeting%3A%20string%20%3D%20'greeting'%3B%0A%20%20public%20demoVariables%3A%20any%20%3D%20%7B%0A%20%20%20%20today%3A%20new%20Date()%2C%0A%20%20%20%20name%3A%20'Jane'%2C%0A%20%20%20%20balance%3A%209874.34%2C%0A%20%20%20%20count%3A%201%2C%0A%20%20%7D%3B%0A%0A%20%20public%20translateService%3A%20any%20%3D%20TranslateService%3B%0A%0A%20%20constructor()%20%7B%0A%20%20%20%20%2F%2F%20Listen%20for%20changes%0A%20%20%20%20TranslateService.onLocaleChange.subscribe((locale)%20%3D%3E%20%7B%0A%20%20%20%20%20%20this.currentLocale%20%3D%20locale%3B%0A%20%20%20%20%7D)%3B%0A%20%20%20%20%2F%2F%20Use%20en-US%0A%20%20%20%20this.changeLanguage('en-US')%3B%0A%20%20%7D%0A%0A%20%20changeLanguage(locale)%20%7B%0A%20%20%20%20this.currentLocale%20%3D%20locale%3B%0A%20%20%20%20TranslateService.use(locale)%3B%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%0A%3Cnovo-tiles%20%5Boptions%5D%3D%22locales%22%20%5B(ngModel)%5D%3D%22currentLocale%22%20(onChange)%3D%22changeLanguage(%24event)%22%3E%3C%2Fnovo-tiles%3E%0A%0A%3Ch4%3EPipe%3C%2Fh4%3E%0A%3Cdiv%20class%3D%22panel%20panel-default%22%3E%0A%20%20%20%20%3Cdiv%20class%3D%22panel-body%22%3E%0A%20%20%20%20%20%20%20%20%3Cp%3E%7B%7B%20'farewell'%20%7C%20translate%3A%20%7B%20name%3A%20'Jane'%20%7D%20%7D%7D%3C%2Fp%3E%0A%20%20%20%20%3C%2Fdiv%3E%0A%3C%2Fdiv%3E%0A%0A%3Ch4%3EDirective%3C%2Fh4%3E%0A%3Cdiv%20class%3D%22panel%20panel-default%22%3E%0A%20%20%20%20%3Cdiv%20class%3D%22panel-body%22%3E%0A%20%20%20%20%20%20%20%20%3Cp%20%5Btranslate%5D%3D%22'farewell'%22%20%5BdynamicValues%5D%3D%22%7B%20name%3A%20'Jane'%20%7D%22%3E%3C%2Fp%3E%0A%20%20%20%20%3C%2Fdiv%3E%0A%3C%2Fdiv%3E%0A%0A`
    },
    'fi-adding-removing': {
        title: 'Fi Adding Removing Example',
        component: FiAddingRemovingExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%2F%2F%20Vendor%0Aimport%20%7B%20FormUtils%2C%20FieldInteractionApi%20%7D%20from%20'novo-elements'%3B%0Aimport%20%7B%20MockMetaHeaders%20%7D%20from%20'..%2FMockMeta'%3B%0A%0A%2F**%0A%20*%20%40title%20Fi%20Adding%20Removing%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20selector%3A%20'fi-adding-removing-example'%2C%0A%20%20templateUrl%3A%20'fi-adding-removing-example.html'%2C%0A%20%20styleUrls%3A%20%5B'fi-adding-removing-example.css'%5D%2C%0A%7D)%0Aexport%20class%20FiAddingRemovingExample%20%7B%0A%20%20public%20form%3A%20any%3B%0A%20%20public%20controls%3A%20any%20%3D%20%5B%5D%3B%0A%0A%20%20constructor(private%20formUtils%3A%20FormUtils)%20%7B%0A%20%20%20%20const%20addingRemovingFunction%20%3D%20(API%3A%20FieldInteractionApi)%20%3D%3E%20%7B%0A%20%20%20%20%20%20console.log('%5BFieldInteractionDemo%5D%20-%20addingRemovingFunction')%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%20%20%20%20%2F%2F%20Control%20above%20field%0A%20%20%20%20%20%20API.addControl(%0A%20%20%20%20%20%20%20%20'cat'%2C%0A%20%20%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20key%3A%20'fieldAbove'%2C%0A%20%20%20%20%20%20%20%20%20%20type%3A%20'text'%2C%0A%20%20%20%20%20%20%20%20%20%20label%3A%20'Added%20Above%20Cat'%2C%0A%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20FieldInteractionApi.FIELD_POSITIONS.ABOVE_FIELD%2C%0A%20%20%20%20%20%20%20%20'DEFAULT'%2C%0A%20%20%20%20%20%20)%3B%0A%20%20%20%20%20%20%2F%2F%20Control%20below%20field%0A%20%20%20%20%20%20API.addControl(%0A%20%20%20%20%20%20%20%20'name'%2C%0A%20%20%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20key%3A%20'fieldBelow'%2C%0A%20%20%20%20%20%20%20%20%20%20type%3A%20'text'%2C%0A%20%20%20%20%20%20%20%20%20%20label%3A%20'Added%20Below%20Name'%2C%0A%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20FieldInteractionApi.FIELD_POSITIONS.BELOW_FIELD%2C%0A%20%20%20%20%20%20%20%20'%3A)'%2C%0A%20%20%20%20%20%20)%3B%0A%20%20%20%20%20%20%2F%2F%20Control%20at%20the%20top%20of%20the%20form%0A%20%20%20%20%20%20API.addControl(%0A%20%20%20%20%20%20%20%20'name'%2C%0A%20%20%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20key%3A%20'top'%2C%0A%20%20%20%20%20%20%20%20%20%20type%3A%20'text'%2C%0A%20%20%20%20%20%20%20%20%20%20label%3A%20'Added%20To%20The%20Very%20Top'%2C%0A%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20FieldInteractionApi.FIELD_POSITIONS.TOP_OF_FORM%2C%0A%20%20%20%20%20%20%20%20'HIGHEST'%2C%0A%20%20%20%20%20%20)%3B%0A%20%20%20%20%20%20%2F%2F%20Control%20at%20the%20bottom%20of%20the%20form%0A%20%20%20%20%20%20API.addControl(%0A%20%20%20%20%20%20%20%20'name'%2C%0A%20%20%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20key%3A%20'bottom'%2C%0A%20%20%20%20%20%20%20%20%20%20type%3A%20'text'%2C%0A%20%20%20%20%20%20%20%20%20%20label%3A%20'Added%20To%20The%20Very%20Bottom'%2C%0A%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20FieldInteractionApi.FIELD_POSITIONS.BOTTOM_OF_FORM%2C%0A%20%20%20%20%20%20%20%20'LOWEST'%2C%0A%20%20%20%20%20%20)%3B%0A%20%20%20%20%20%20%2F%2F%20Remove%20the%20jersey%20color%20field%0A%20%20%20%20%20%20API.removeControl('jersey-color')%3B%0A%20%20%20%20%7D%3B%0A%0A%20%20%20%20const%20removeAddOnChangeFunction%20%3D%20(API%3A%20FieldInteractionApi)%20%3D%3E%20%7B%0A%20%20%20%20%20%20console.log('%5BFieldInteractionDemo%5D%20-%20removeAddOnChangeFunction')%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%20%20%20%20%2F%2F%20Select%20control%20with%20a%20field%20interaction%20on%20change%20event%0A%20%20%20%20%20%20const%20currentValue%20%3D%20API.getActiveValue()%3B%0A%20%20%20%20%20%20if%20(currentValue%20%3D%3D%3D%20'Yes')%20%7B%0A%20%20%20%20%20%20%20%20API.removeControl('to-be-removed')%3B%0A%20%20%20%20%20%20%7D%20else%20%7B%0A%20%20%20%20%20%20%20%20API.addControl(%0A%20%20%20%20%20%20%20%20%20%20'remove-select'%2C%0A%20%20%20%20%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20key%3A%20'to-be-removed'%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20name%3A%20'to-be-removed'%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20type%3A%20'text'%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20label%3A%20'This%20field%20will%20be%20removed'%2C%0A%20%20%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20%20%20FieldInteractionApi.FIELD_POSITIONS.BELOW_FIELD%2C%0A%20%20%20%20%20%20%20%20)%3B%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%3B%0A%0A%20%20%20%20%2F%2F%20Adding%20%2F%20Removing%20Interactions%0A%20%20%20%20this.controls%20%3D%20formUtils.toFieldSets(MockMetaHeaders%2C%20'%24%20USD'%2C%20%7B%7D%2C%20%7B%20token%3A%20'TOKEN'%2C%20military%3A%20true%20%7D)%3B%0A%20%20%20%20this.controls%5B2%5D.controls%5B0%5D.interactions%20%3D%20%5B%7B%20event%3A%20'change'%2C%20script%3A%20removeAddOnChangeFunction%20%7D%5D%3B%0A%20%20%20%20this.controls%5B0%5D.controls%5B0%5D.interactions%20%3D%20%5B%7B%20event%3A%20'init'%2C%20script%3A%20addingRemovingFunction%20%7D%5D%3B%0A%20%20%20%20this.form%20%3D%20formUtils.toFormGroupFromFieldset(this.controls)%3B%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cnovo-dynamic-form%20%5Bfieldsets%5D%3D%22controls%22%20%5B(form)%5D%3D%22form%22%20layout%3D%22vertical%22%3E%3C%2Fnovo-dynamic-form%3E%0A%3Cdiv%20class%3D%22final-value%22%3EForm%20Value%20-%20%7B%7B%20form.value%20%7C%20json%20%7D%7D%3C%2Fdiv%3E%0A%3Cdiv%20class%3D%22final-value%22%3EForm%20Dirty%20-%20%7B%7B%20form.dirty%20%7C%20json%20%7D%7D%3C%2Fdiv%3E%0A%3Cdiv%20class%3D%22final-value%22%3EIs%20Form%20Valid%3F%20-%20%7B%7B%20form.valid%20%7C%20json%20%7D%7D%3C%2Fdiv%3E%0A`
    },
    'fi-async': {
        title: 'Fi Async Example',
        component: FiAsyncExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0Aimport%20%7B%20FormUtils%2C%20TextBoxControl%2C%20FieldInteractionApi%20%7D%20from%20'novo-elements'%3B%0Aimport%20%7B%20map%20%7D%20from%20'rxjs%2Foperators'%3B%0Aimport%20%7B%20MockMetaHeaders%20%7D%20from%20'..%2FMockMeta'%3B%0A%0A%2F**%0A%20*%20%40title%20Fi%20Async%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20selector%3A%20'fi-async-example'%2C%0A%20%20templateUrl%3A%20'fi-async-example.html'%2C%0A%20%20styleUrls%3A%20%5B'fi-async-example.css'%5D%2C%0A%7D)%0Aexport%20class%20FiAsyncExample%20%7B%0A%20%20public%20form%3A%20any%3B%0A%20%20public%20controls%3A%20any%20%3D%20%7B%7D%3B%0A%0A%20%20constructor(private%20formUtils%3A%20FormUtils)%20%7B%0A%20%20%20%20const%20asyncFunction%20%3D%20(API%3A%20FieldInteractionApi)%20%3D%3E%20%7B%0A%20%20%20%20%20%20console.log('%5BFieldInteractionDemo%5D%20-%20asyncFunction')%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%20%20%20%20if%20(API.getActiveKey()%20%3D%3D%3D%20'async1')%20%7B%0A%20%20%20%20%20%20%20%20API.setLoading(API.getActiveKey()%2C%20true)%3B%0A%20%20%20%20%20%20%20%20setTimeout(function()%20%7B%0A%20%20%20%20%20%20%20%20%20%20API.setLoading(API.getActiveKey()%2C%20false)%3B%0A%20%20%20%20%20%20%20%20%7D%2C%203000)%3B%0A%20%20%20%20%20%20%7D%20else%20%7B%0A%20%20%20%20%20%20%20%20API.setLoading(API.getActiveKey()%2C%20true)%3B%0A%20%20%20%20%20%20%20%20setTimeout(function()%20%7B%0A%20%20%20%20%20%20%20%20%20%20API.setLoading(API.getActiveKey()%2C%20false)%3B%0A%20%20%20%20%20%20%20%20%7D%2C%2015000)%3B%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%3B%0A%0A%20%20%20%20%2F%2F%20Async%20Interactions%0A%20%20%20%20this.controls.async1Control%20%3D%20new%20TextBoxControl(%7B%0A%20%20%20%20%20%20type%3A%20'text'%2C%0A%20%20%20%20%20%20key%3A%20'async1'%2C%0A%20%20%20%20%20%20value%3A%205%2C%0A%20%20%20%20%20%20label%3A%20'Async%20Validation'%2C%0A%20%20%20%20%20%20description%3A%20'As%20you%20finish%20typing%2C%20the%20async%20check%20will%20mark%20the%20form%20as%20invalid'%2C%0A%20%20%20%20%20%20interactions%3A%20%5B%7B%20event%3A%20'change'%2C%20script%3A%20asyncFunction%20%7D%5D%2C%0A%20%20%20%20%7D)%3B%0A%20%20%20%20this.controls.async2Control%20%3D%20new%20TextBoxControl(%7B%0A%20%20%20%20%20%20type%3A%20'text'%2C%0A%20%20%20%20%20%20key%3A%20'async2'%2C%0A%20%20%20%20%20%20value%3A%205%2C%0A%20%20%20%20%20%20label%3A%20'Async%20Validation%20(takes%20too%20long)'%2C%0A%20%20%20%20%20%20description%3A%20'This%20one%20will%20take%20too%20long%20and%20trigger%20the%20default%20timeout%20(10s)'%2C%0A%20%20%20%20%20%20interactions%3A%20%5B%7B%20event%3A%20'change'%2C%20script%3A%20asyncFunction%20%7D%5D%2C%0A%20%20%20%20%7D)%3B%0A%20%20%20%20this.form%20%3D%20formUtils.toFormGroup(%5Bthis.controls.async1Control%2C%20this.controls.async2Control%5D)%3B%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cnovo-form%20%5Bform%5D%3D%22form%22%20layout%3D%22vertical%22%3E%0A%20%20%20%20%3Cdiv%20class%3D%22novo-form-row%22%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-control%20%5Bform%5D%3D%22form%22%20%5Bcontrol%5D%3D%22controls.async1Control%22%3E%3C%2Fnovo-control%3E%0A%20%20%20%20%3C%2Fdiv%3E%0A%20%20%20%20%3Cdiv%20class%3D%22novo-form-row%22%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-control%20%5Bform%5D%3D%22form%22%20%5Bcontrol%5D%3D%22controls.async2Control%22%3E%3C%2Fnovo-control%3E%0A%20%20%20%20%3C%2Fdiv%3E%0A%3C%2Fnovo-form%3E%0A%3Cdiv%20class%3D%22final-value%22%3EForm%20Value%20-%20%7B%7B%20form.value%20%7C%20json%20%7D%7D%3C%2Fdiv%3E%0A%3Cdiv%20class%3D%22final-value%22%3EForm%20Dirty%20-%20%7B%7B%20form.dirty%20%7C%20json%20%7D%7D%3C%2Fdiv%3E%0A%3Cdiv%20class%3D%22final-value%22%3EIs%20Form%20Valid%3F%20-%20%7B%7B%20form.valid%20%7C%20json%20%7D%7D%3C%2Fdiv%3E%0A`
    },
    'fi-calculation': {
        title: 'Fi Calculation Example',
        component: FiCalculationExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%2F%2F%20Vendor%0Aimport%20%7B%20FormUtils%2C%20TextBoxControl%2C%20FieldInteractionApi%2C%20DateTimeControl%20%7D%20from%20'novo-elements'%3B%0A%0A%2F**%0A%20*%20%40title%20Fi%20Calculation%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20selector%3A%20'fi-calculation-example'%2C%0A%20%20templateUrl%3A%20'fi-calculation-example.html'%2C%0A%20%20styleUrls%3A%20%5B'fi-calculation-example.css'%5D%2C%0A%7D)%0Aexport%20class%20FiCalculationExample%20%7B%0A%20%20public%20form%3A%20any%3B%0A%20%20public%20controls%3A%20any%20%3D%20%7B%7D%3B%0A%20%20public%20snippet%3A%20any%20%3D%20%7B%7D%3B%0A%0A%20%20constructor(private%20formUtils%3A%20FormUtils)%20%7B%0A%20%20%20%20const%20calculationFunction%20%3D%20(API%3A%20FieldInteractionApi)%20%3D%3E%20%7B%0A%20%20%20%20%20%20console.log('%5BFieldInteractionDemo%5D%20-%20calculationFunction')%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%20%20%20%20const%20a%20%3D%20Number(API.getValue('a'))%3B%0A%20%20%20%20%20%20const%20b%20%3D%20Number(API.getValue('b'))%3B%0A%20%20%20%20%20%20API.setValue('sum'%2C%20a%20%2B%20b)%3B%0A%20%20%20%20%20%20API.setValue('date'%2C%20new%20Date())%3B%0A%20%20%20%20%7D%3B%0A%0A%20%20%20%20%2F%2F%20Calculation%20Field%20Interactions%0A%20%20%20%20this.controls.aControl%20%3D%20new%20TextBoxControl(%7B%0A%20%20%20%20%20%20type%3A%20'number'%2C%0A%20%20%20%20%20%20key%3A%20'a'%2C%0A%20%20%20%20%20%20label%3A%20'A'%2C%0A%20%20%20%20%20%20value%3A%201%2C%0A%20%20%20%20%20%20interactions%3A%20%5B%7B%20event%3A%20'change'%2C%20invokeOnInit%3A%20false%2C%20script%3A%20calculationFunction%20%7D%5D%2C%0A%20%20%20%20%7D)%3B%0A%20%20%20%20this.controls.bControl%20%3D%20new%20TextBoxControl(%7B%0A%20%20%20%20%20%20type%3A%20'number'%2C%0A%20%20%20%20%20%20key%3A%20'b'%2C%0A%20%20%20%20%20%20label%3A%20'B'%2C%0A%20%20%20%20%20%20value%3A%201%2C%0A%20%20%20%20%20%20interactions%3A%20%5B%7B%20event%3A%20'change'%2C%20invokeOnInit%3A%20false%2C%20script%3A%20calculationFunction%20%7D%5D%2C%0A%20%20%20%20%7D)%3B%0A%20%20%20%20this.controls.sumControl%20%3D%20new%20TextBoxControl(%7B%0A%20%20%20%20%20%20type%3A%20'number'%2C%0A%20%20%20%20%20%20key%3A%20'sum'%2C%0A%20%20%20%20%20%20label%3A%20'Sum'%2C%0A%20%20%20%20%20%20description%3A%20'I%20am%20automatically%20set%20when%20you%20type%20in%20the%20boxes%20above%20me!'%2C%0A%20%20%20%20%20%20readOnly%3A%20true%2C%0A%20%20%20%20%7D)%3B%0A%20%20%20%20this.controls.dateModifiedControl%20%3D%20new%20DateTimeControl(%7B%0A%20%20%20%20%20%20key%3A%20'date'%2C%0A%20%20%20%20%20%20label%3A%20'Date%20Last%20Modified'%2C%0A%20%20%20%20%20%20value%3A%20new%20Date()%2C%0A%20%20%20%20%7D)%3B%0A%20%20%20%20this.form%20%3D%20formUtils.toFormGroup(%5B%0A%20%20%20%20%20%20this.controls.aControl%2C%0A%20%20%20%20%20%20this.controls.bControl%2C%0A%20%20%20%20%20%20this.controls.sumControl%2C%0A%20%20%20%20%20%20this.controls.dateModifiedControl%2C%0A%20%20%20%20%5D)%3B%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cnovo-form%20%5Bform%5D%3D%22form%22%20layout%3D%22vertical%22%3E%0A%20%20%20%20%3Cdiv%20class%3D%22novo-form-row%22%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-control%20%5Bform%5D%3D%22form%22%20%5Bcontrol%5D%3D%22controls.aControl%22%3E%3C%2Fnovo-control%3E%0A%20%20%20%20%3C%2Fdiv%3E%0A%20%20%20%20%3Cdiv%20class%3D%22novo-form-row%22%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-control%20%5Bform%5D%3D%22form%22%20%5Bcontrol%5D%3D%22controls.bControl%22%3E%3C%2Fnovo-control%3E%0A%20%20%20%20%3C%2Fdiv%3E%0A%20%20%20%20%3Cdiv%20class%3D%22novo-form-row%22%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-control%20%5Bform%5D%3D%22form%22%20%5Bcontrol%5D%3D%22controls.sumControl%22%3E%3C%2Fnovo-control%3E%0A%20%20%20%20%3C%2Fdiv%3E%0A%20%20%20%20%3Cdiv%20class%3D%22novo-form-row%22%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-control%20%5Bform%5D%3D%22form%22%20%5Bcontrol%5D%3D%22controls.dateModifiedControl%22%3E%3C%2Fnovo-control%3E%0A%20%20%20%20%3C%2Fdiv%3E%0A%3C%2Fnovo-form%3E%0A%3Cdiv%20class%3D%22final-value%22%3EForm%20Value%20-%20%7B%7B%20form.value%20%7C%20json%20%7D%7D%3C%2Fdiv%3E%0A%3Cdiv%20class%3D%22final-value%22%3E%0A%20%20%20%20Form%20Dirty%20-%20%7B%7B%20form.dirty%20%7C%20json%20%7D%7D%3C%2Fdiv%3E%0A%3Cdiv%20class%3D%22final-value%22%3EIs%20Form%20Valid%3F%20-%20%7B%7B%20form.valid%20%7C%20json%20%7D%7D%3C%2Fdiv%3E%0A`
    },
    'fi-confirm': {
        title: 'Fi Confirm Example',
        component: FiConfirmExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%2F%2F%20Vendor%0Aimport%20%7B%20FormUtils%2C%20TextBoxControl%2C%20FieldInteractionApi%20%7D%20from%20'novo-elements'%3B%0A%0A%2F**%0A%20*%20%40title%20Fi%20Confirm%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20selector%3A%20'fi-confirm-example'%2C%0A%20%20templateUrl%3A%20'fi-confirm-example.html'%2C%0A%20%20styleUrls%3A%20%5B'fi-confirm-example.css'%5D%2C%0A%7D)%0Aexport%20class%20FiConfirmExample%20%7B%0A%20%20public%20form%3A%20any%3B%0A%20%20public%20controls%3A%20any%20%3D%20%7B%7D%3B%0A%0A%20%20constructor(private%20formUtils%3A%20FormUtils)%20%7B%0A%20%20%20%20const%20confirmFunction%20%3D%20(API%3A%20FieldInteractionApi)%20%3D%3E%20%7B%0A%20%20%20%20%20%20console.log('%5BFieldInteractionDemo%5D%20-%20confirmFunction')%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%20%20%20%20if%20(API.getActiveKey()%20%3D%3D%3D%20'confirm1')%20%7B%0A%20%20%20%20%20%20%20%20API.confirmChanges(API.getActiveKey())%3B%0A%20%20%20%20%20%20%7D%20else%20%7B%0A%20%20%20%20%20%20%20%20API.confirmChanges(API.getActiveKey()%2C%20'This%20is%20VERY%20serious!')%3B%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%3B%0A%0A%20%20%20%20%2F%2F%20Confirm%20Interactions%0A%20%20%20%20this.controls.confirm1Control%20%3D%20new%20TextBoxControl(%7B%0A%20%20%20%20%20%20type%3A%20'text'%2C%0A%20%20%20%20%20%20key%3A%20'confirm1'%2C%0A%20%20%20%20%20%20value%3A%20'Hello!'%2C%0A%20%20%20%20%20%20label%3A%20'Prompt!'%2C%0A%20%20%20%20%20%20description%3A%20'As%20you%20take%20focus%20out%20of%20this%20field%20you%20will%20be%20prompted%20for%20changes!'%2C%0A%20%20%20%20%20%20interactions%3A%20%5B%7B%20event%3A%20'change'%2C%20script%3A%20confirmFunction%20%7D%5D%2C%0A%20%20%20%20%7D)%3B%0A%20%20%20%20this.controls.confirm2Control%20%3D%20new%20TextBoxControl(%7B%0A%20%20%20%20%20%20type%3A%20'text'%2C%0A%20%20%20%20%20%20key%3A%20'confirm2'%2C%0A%20%20%20%20%20%20value%3A%20'Another!'%2C%0A%20%20%20%20%20%20label%3A%20'Custom%20Promp!'%2C%0A%20%20%20%20%20%20description%3A%20'You%20can%20provide%20a%20custom%20message!'%2C%0A%20%20%20%20%20%20interactions%3A%20%5B%7B%20event%3A%20'change'%2C%20script%3A%20confirmFunction%20%7D%5D%2C%0A%20%20%20%20%7D)%3B%0A%20%20%20%20this.form%20%3D%20formUtils.toFormGroup(%5Bthis.controls.confirm1Control%2C%20this.controls.confirm2Control%5D)%3B%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cnovo-form%20%5Bform%5D%3D%22form%22%20layout%3D%22vertical%22%3E%0A%20%20%20%20%3Cdiv%20class%3D%22novo-form-row%22%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-control%20%5Bform%5D%3D%22form%22%20%5Bcontrol%5D%3D%22controls.confirm1Control%22%3E%3C%2Fnovo-control%3E%0A%20%20%20%20%3C%2Fdiv%3E%0A%20%20%20%20%3Cdiv%20class%3D%22novo-form-row%22%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-control%20%5Bform%5D%3D%22form%22%20%5Bcontrol%5D%3D%22controls.confirm2Control%22%3E%3C%2Fnovo-control%3E%0A%20%20%20%20%3C%2Fdiv%3E%0A%3C%2Fnovo-form%3E%0A%3Cdiv%20class%3D%22final-value%22%3EForm%20Value%20-%20%7B%7B%20form.value%20%7C%20json%20%7D%7D%3C%2Fdiv%3E%0A%3Cdiv%20class%3D%22final-value%22%3EForm%20Dirty%20-%20%7B%7B%20form.dirty%20%7C%20json%20%7D%7D%3C%2Fdiv%3E%0A%3Cdiv%20class%3D%22final-value%22%3EIs%20Form%20Valid%3F%20-%20%7B%7B%20form.valid%20%7C%20json%20%7D%7D%3C%2Fdiv%3E%0A`
    },
    'fi-enable-disable': {
        title: 'Fi Enable Disable Example',
        component: FiEnableDisableExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%2F%2F%20Vendor%0Aimport%20%7B%20FormUtils%2C%20TextBoxControl%2C%20CheckboxControl%2C%20FieldInteractionApi%20%7D%20from%20'novo-elements'%3B%0A%0A%2F**%0A%20*%20%40title%20Fi%20Enable%20Disable%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20selector%3A%20'fi-enable-disable-example'%2C%0A%20%20templateUrl%3A%20'fi-enable-disable-example.html'%2C%0A%20%20styleUrls%3A%20%5B'fi-enable-disable-example.css'%5D%2C%0A%7D)%0Aexport%20class%20FiEnableDisableExample%20%7B%0A%20%20public%20form%3A%20any%3B%0A%20%20public%20controls%3A%20any%20%3D%20%7B%7D%3B%0A%0A%20%20constructor(private%20formUtils%3A%20FormUtils)%20%7B%0A%20%20%20%20const%20enableDisableFunction%20%3D%20(API%3A%20FieldInteractionApi)%20%3D%3E%20%7B%0A%20%20%20%20%20%20console.log('%5BFieldInteractionDemo%5D%20-%20enableDisableFunction')%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%20%20%20%20const%20currentValue%20%3D%20API.getActiveValue()%3B%0A%20%20%20%20%20%20if%20(!currentValue)%20%7B%0A%20%20%20%20%20%20%20%20API.enable('text')%3B%0A%20%20%20%20%20%20%7D%20else%20%7B%0A%20%20%20%20%20%20%20%20API.disable('text')%3B%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%3B%0A%0A%20%20%20%20%2F%2F%20Enable%2FDisable%20Field%20Interactions%0A%20%20%20%20this.controls.textControl%20%3D%20new%20TextBoxControl(%7B%0A%20%20%20%20%20%20type%3A%20'text'%2C%0A%20%20%20%20%20%20key%3A%20'text'%2C%0A%20%20%20%20%20%20label%3A%20'MyField'%2C%0A%20%20%20%20%7D)%3B%0A%20%20%20%20this.controls.toggleControl%20%3D%20new%20CheckboxControl(%7B%0A%20%20%20%20%20%20key%3A%20'toggle'%2C%0A%20%20%20%20%20%20label%3A%20'Disable%3F'%2C%0A%20%20%20%20%20%20description%3A%20'I%20will%20disable%20the%20above%20field!'%2C%0A%20%20%20%20%20%20interactions%3A%20%5B%7B%20event%3A%20'change'%2C%20script%3A%20enableDisableFunction%20%7D%5D%2C%0A%20%20%20%20%7D)%3B%0A%20%20%20%20this.form%20%3D%20formUtils.toFormGroup(%5Bthis.controls.textControl%2C%20this.controls.toggleControl%5D)%3B%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cnovo-form%20%5Bform%5D%3D%22form%22%20layout%3D%22vertical%22%3E%0A%20%20%20%20%3Cdiv%20class%3D%22novo-form-row%22%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-control%20%5Bform%5D%3D%22form%22%20%5Bcontrol%5D%3D%22controls.textControl%22%3E%3C%2Fnovo-control%3E%0A%20%20%20%20%3C%2Fdiv%3E%0A%20%20%20%20%3Cdiv%20class%3D%22novo-form-row%22%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-control%20%5Bform%5D%3D%22form%22%20%5Bcontrol%5D%3D%22controls.toggleControl%22%3E%3C%2Fnovo-control%3E%0A%20%20%20%20%3C%2Fdiv%3E%0A%3C%2Fnovo-form%3E%0A%3Cdiv%20class%3D%22final-value%22%3EForm%20Value%20-%20%7B%7B%20form.value%20%7C%20json%20%7D%7D%3C%2Fdiv%3E%0A%3Cdiv%20class%3D%22final-value%22%3EForm%20Dirty%20-%20%7B%7B%20form.dirty%20%7C%20json%20%7D%7D%3C%2Fdiv%3E%0A%3Cdiv%20class%3D%22final-value%22%3EIs%20Form%20Valid%3F%20-%20%7B%7B%20form.valid%20%7C%20json%20%7D%7D%3C%2Fdiv%3E%0A`
    },
    'fi-globals': {
        title: 'Fi Globals Example',
        component: FiGlobalsExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%2F%2F%20Vendor%0Aimport%20%7B%20FormUtils%2C%20TextBoxControl%2C%20FieldInteractionApi%20%7D%20from%20'novo-elements'%3B%0A%0A%2F**%0A%20*%20%40title%20Fi%20Globals%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20selector%3A%20'fi-globals-example'%2C%0A%20%20templateUrl%3A%20'fi-globals-example.html'%2C%0A%20%20styleUrls%3A%20%5B'fi-globals-example.css'%5D%2C%0A%7D)%0Aexport%20class%20FiGlobalsExample%20%7B%0A%20%20public%20form%3A%20any%20%3D%20%7B%7D%3B%0A%20%20public%20controls%3A%20any%20%3D%20%7B%7D%3B%0A%0A%20%20constructor(private%20formUtils%3A%20FormUtils)%20%7B%0A%20%20%20%20const%20globalsFunction%20%3D%20(API%3A%20FieldInteractionApi)%20%3D%3E%20%7B%0A%20%20%20%20%20%20console.log('%5BFieldInteractionDemo%5D%20-%20globalsFunction')%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%20%20%20%20API.setProperty(API.getActiveKey()%2C%20'label'%2C%20%60%24%7BAPI.getProperty(API.getActiveKey()%2C%20'label')%7D%20--%20%24%7BAPI.globals.TEST%7D%60)%3B%0A%20%20%20%20%7D%3B%0A%0A%20%20%20%20%2F%2F%20Global%20Field%20Interactions%0A%20%20%20%20this.controls.globalControl%20%3D%20new%20TextBoxControl(%7B%0A%20%20%20%20%20%20type%3A%20'number'%2C%0A%20%20%20%20%20%20key%3A%20'global'%2C%0A%20%20%20%20%20%20value%3A%205%2C%0A%20%20%20%20%20%20label%3A%20'Form%20Input'%2C%0A%20%20%20%20%20%20description%3A%20'The%20label%20gets%20updated%20on%20load%20to%20use%20a%20global!'%2C%0A%20%20%20%20%20%20interactions%3A%20%5B%7B%20event%3A%20'init'%2C%20script%3A%20globalsFunction%2C%20invokeOnInit%3A%20true%20%7D%5D%2C%0A%20%20%20%20%7D)%3B%0A%20%20%20%20this.form%20%3D%20formUtils.toFormGroup(%5Bthis.controls.globalControl%5D)%3B%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cnovo-form%20%5Bform%5D%3D%22form%22%20layout%3D%22vertical%22%3E%0A%20%20%20%20%3Cdiv%20class%3D%22novo-form-row%22%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-control%20%5Bform%5D%3D%22form%22%20%5Bcontrol%5D%3D%22controls.globalControl%22%3E%3C%2Fnovo-control%3E%0A%20%20%20%20%3C%2Fdiv%3E%0A%3C%2Fnovo-form%3E%0A%3Cdiv%20class%3D%22final-value%22%3EForm%20Value%20-%20%7B%7B%20form.value%20%7C%20json%20%7D%7D%3C%2Fdiv%3E%0A%3Cdiv%20class%3D%22final-value%22%3EForm%20Dirty%20-%20%7B%7B%20form.dirty%20%7C%20json%20%7D%7D%3C%2Fdiv%3E%0A%3Cdiv%20class%3D%22final-value%22%3EIs%20Form%20Valid%3F%20-%20%7B%7B%20form.valid%20%7C%20json%20%7D%7D%3C%2Fdiv%3E%0A`
    },
    'fi-hide-show': {
        title: 'Fi Hide Show Example',
        component: FiHideShowExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%2F%2F%20Vendor%0Aimport%20%7B%20FormUtils%2C%20TextBoxControl%2C%20CheckboxControl%2C%20FieldInteractionApi%20%7D%20from%20'novo-elements'%3B%0A%0A%2F**%0A%20*%20%40title%20Fi%20Hide%20Show%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20selector%3A%20'fi-hide-show-example'%2C%0A%20%20templateUrl%3A%20'fi-hide-show-example.html'%2C%0A%20%20styleUrls%3A%20%5B'fi-hide-show-example.css'%5D%2C%0A%7D)%0Aexport%20class%20FiHideShowExample%20%7B%0A%20%20public%20form%3A%20any%20%3D%20%7B%7D%3B%0A%20%20public%20controls%3A%20any%20%3D%20%7B%7D%3B%0A%0A%20%20constructor(private%20formUtils%3A%20FormUtils)%20%7B%0A%20%20%20%20const%20hideShowFunction%20%3D%20(API%3A%20FieldInteractionApi)%20%3D%3E%20%7B%0A%20%20%20%20%20%20console.log('%5BFieldInteractionDemo%5D%20-%20hideShowFunction')%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%20%20%20%20const%20activeValue%20%3D%20API.getActiveValue()%3B%0A%20%20%20%20%20%20if%20(!activeValue)%20%7B%0A%20%20%20%20%20%20%20%20API.show('text')%3B%0A%20%20%20%20%20%20%7D%20else%20%7B%0A%20%20%20%20%20%20%20%20API.hide('text')%3B%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%3B%0A%0A%20%20%20%20%2F%2F%20Hide%2FShow%20Field%20Interactions%0A%20%20%20%20this.controls.textControl%20%3D%20new%20TextBoxControl(%7B%0A%20%20%20%20%20%20type%3A%20'text'%2C%0A%20%20%20%20%20%20key%3A%20'text'%2C%0A%20%20%20%20%20%20required%3A%20true%2C%0A%20%20%20%20%20%20label%3A%20'MyField'%2C%0A%20%20%20%20%7D)%3B%0A%20%20%20%20this.controls.text2Control%20%3D%20new%20TextBoxControl(%7B%0A%20%20%20%20%20%20type%3A%20'text'%2C%0A%20%20%20%20%20%20key%3A%20'text2'%2C%0A%20%20%20%20%20%20label%3A%20'MyField'%2C%0A%20%20%20%20%7D)%3B%0A%20%20%20%20this.controls.toggleControl%20%3D%20new%20CheckboxControl(%7B%0A%20%20%20%20%20%20key%3A%20'toggle'%2C%0A%20%20%20%20%20%20label%3A%20'Hidden%3F'%2C%0A%20%20%20%20%20%20description%3A%20'I%20will%20toggle%20the%20above%20field%20to%20display%20or%20not!'%2C%0A%20%20%20%20%20%20interactions%3A%20%5B%7B%20event%3A%20'change'%2C%20script%3A%20hideShowFunction%20%7D%5D%2C%0A%20%20%20%20%7D)%3B%0A%20%20%20%20this.form%20%3D%20formUtils.toFormGroup(%5Bthis.controls.textControl%2C%20this.controls.text2Control%2C%20this.controls.toggleControl%5D)%3B%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cnovo-form%20%5Bform%5D%3D%22form%22%20layout%3D%22vertical%22%3E%0A%20%20%20%20%3Cdiv%20class%3D%22novo-form-row%22%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-control%20%5Bform%5D%3D%22form%22%20%5Bcontrol%5D%3D%22controls.textControl%22%3E%3C%2Fnovo-control%3E%0A%20%20%20%20%3C%2Fdiv%3E%0A%20%20%20%20%3Cdiv%20class%3D%22novo-form-row%22%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-control%20%5Bform%5D%3D%22form%22%20%5Bcontrol%5D%3D%22controls.text2Control%22%3E%3C%2Fnovo-control%3E%0A%20%20%20%20%3C%2Fdiv%3E%0A%20%20%20%20%3Cdiv%20class%3D%22novo-form-row%22%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-control%20%5Bform%5D%3D%22form%22%20%5Bcontrol%5D%3D%22controls.toggleControl%22%3E%3C%2Fnovo-control%3E%0A%20%20%20%20%3C%2Fdiv%3E%0A%3C%2Fnovo-form%3E%0A%3Cdiv%20class%3D%22final-value%22%3EForm%20Value%20-%20%7B%7B%20form.value%20%7C%20json%20%7D%7D%3C%2Fdiv%3E%0A%3Cdiv%20class%3D%22final-value%22%3EForm%20Dirty%20-%20%7B%7B%20form.dirty%20%7C%20json%20%7D%7D%3C%2Fdiv%3E%0A%3Cdiv%20class%3D%22final-value%22%3EIs%20Form%20Valid%3F%20-%20%7B%7B%20form.valid%20%7C%20json%20%7D%7D%3C%2Fdiv%3E%0A`
    },
    'fi-messaging': {
        title: 'Fi Messaging Example',
        component: FiMessagingExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%2F%2F%20Vendor%0Aimport%20%7B%0A%20%20FormUtils%2C%0A%20%20NovoFormGroup%2C%0A%20%20TextBoxControl%2C%0A%20%20CheckboxControl%2C%0A%20%20FieldInteractionApi%2C%0A%20%20SelectControl%2C%0A%20%20PickerControl%2C%0A%20%20DateTimeControl%2C%0A%20%20TilesControl%2C%0A%7D%20from%20'novo-elements'%3B%0Aimport%20%7B%20map%20%7D%20from%20'rxjs%2Foperators'%3B%0Aimport%20%7B%20MockMetaHeaders%20%7D%20from%20'..%2FMockMeta'%3B%0A%0A%2F**%0A%20*%20%40title%20Fi%20Messaging%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20selector%3A%20'fi-messaging-example'%2C%0A%20%20templateUrl%3A%20'fi-messaging-example.html'%2C%0A%20%20styleUrls%3A%20%5B'fi-messaging-example.css'%5D%2C%0A%7D)%0Aexport%20class%20FiMessagingExample%20%7B%0A%20%20public%20form%3A%20any%20%3D%20%7B%7D%3B%0A%20%20public%20controls%3A%20any%20%3D%20%7B%7D%3B%0A%0A%20%20constructor(private%20formUtils%3A%20FormUtils)%20%7B%0A%20%20%20%20const%20messagingFunction%20%3D%20(API%3A%20FieldInteractionApi)%20%3D%3E%20%7B%0A%20%20%20%20%20%20console.log('%5BFieldInteractionDemo%5D%20-%20messagingFunction')%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%20%20%20%20if%20(API.getActiveKey()%20%3D%3D%3D%20'toast')%20%7B%0A%20%20%20%20%20%20%20%20API.displayToast(%7B%0A%20%20%20%20%20%20%20%20%20%20title%3A%20'New%20Value'%2C%0A%20%20%20%20%20%20%20%20%20%20message%3A%20API.getActiveValue()%2C%0A%20%20%20%20%20%20%20%20%7D)%3B%0A%20%20%20%20%20%20%7D%20else%20if%20(API.getActiveKey()%20%3D%3D%3D%20'tip'%20%7C%7C%20API.getActiveKey()%20%3D%3D%3D%20'tipHtml')%20%7B%0A%20%20%20%20%20%20%20%20const%20sanitize%20%3D%20!API.getValue('tipHtml')%3B%0A%20%20%20%20%20%20%20%20API.displayTip('tip'%2C%20API.getValue('tip')%2C%20'info'%2C%20true%2C%20sanitize)%3B%0A%20%20%20%20%20%20%7D%20else%20if%20(API.getActiveKey()%20%3D%3D%3D%20'prompt')%20%7B%0A%20%20%20%20%20%20%20%20API.promptUser(API.getActiveKey()%2C%20%5B'Update%20Fee%20Arrangement%20from%20Selected%20Company'%2C%20'Update%20DateLastModified%20to%20right%20now!'%5D).then(%0A%20%20%20%20%20%20%20%20%20%20function(result)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20if%20(result)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20console.log('PERFORM')%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%20else%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20console.log(%22DON'T%20PERFORM%22)%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20)%3B%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%3B%0A%0A%20%20%20%20%2F%2F%20Messaging%20Field%20Interactions%0A%20%20%20%20this.controls.toastControl%20%3D%20new%20TextBoxControl(%7B%0A%20%20%20%20%20%20type%3A%20'text'%2C%0A%20%20%20%20%20%20key%3A%20'toast'%2C%0A%20%20%20%20%20%20label%3A%20'Toast'%2C%0A%20%20%20%20%20%20description%3A%20'I%20will%20trigger%20a%20toast%20as%20you%20change%20the%20value!'%2C%0A%20%20%20%20%20%20interactions%3A%20%5B%7B%20event%3A%20'change'%2C%20script%3A%20messagingFunction%20%7D%5D%2C%0A%20%20%20%20%7D)%3B%0A%20%20%20%20this.controls.tipControl%20%3D%20new%20TextBoxControl(%7B%0A%20%20%20%20%20%20type%3A%20'text'%2C%0A%20%20%20%20%20%20key%3A%20'tip'%2C%0A%20%20%20%20%20%20label%3A%20'Tip'%2C%0A%20%20%20%20%20%20description%3A%20'I%20will%20trigger%20a%20tip%20well%20as%20you%20change%20the%20value!'%2C%0A%20%20%20%20%20%20interactions%3A%20%5B%7B%20event%3A%20'change'%2C%20script%3A%20messagingFunction%20%7D%5D%2C%0A%20%20%20%20%7D)%3B%0A%20%20%20%20this.controls.tipHtmlControl%20%3D%20new%20CheckboxControl(%7B%0A%20%20%20%20%20%20key%3A%20'tipHtml'%2C%0A%20%20%20%20%20%20label%3A%20'Display%20Tip%20as%20HTML'%2C%0A%20%20%20%20%20%20description%3A%20'Sets%20the%20API.displayTip()%20sanitize%20parameter%20to%20false.'%2C%0A%20%20%20%20%20%20value%3A%20false%2C%0A%20%20%20%20%20%20interactions%3A%20%5B%7B%20event%3A%20'change'%2C%20script%3A%20messagingFunction%20%7D%5D%2C%0A%20%20%20%20%7D)%3B%0A%20%20%20%20this.controls.promptControl%20%3D%20new%20TextBoxControl(%7B%0A%20%20%20%20%20%20type%3A%20'text'%2C%0A%20%20%20%20%20%20key%3A%20'prompt'%2C%0A%20%20%20%20%20%20label%3A%20'Prompt%20User%20of%20Downstream%20Changes'%2C%0A%20%20%20%20%20%20interactions%3A%20%5B%7B%20event%3A%20'change'%2C%20script%3A%20messagingFunction%20%7D%5D%2C%0A%20%20%20%20%7D)%3B%0A%20%20%20%20this.form%20%3D%20formUtils.toFormGroup(%5B%0A%20%20%20%20%20%20this.controls.toastControl%2C%0A%20%20%20%20%20%20this.controls.tipControl%2C%0A%20%20%20%20%20%20this.controls.tipHtmlControl%2C%0A%20%20%20%20%20%20this.controls.promptControl%2C%0A%20%20%20%20%5D)%3B%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cnovo-form%20%5Bform%5D%3D%22form%22%20layout%3D%22vertical%22%3E%0A%20%20%20%20%3Cdiv%20class%3D%22novo-form-row%22%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-control%20%5Bform%5D%3D%22form%22%20%5Bcontrol%5D%3D%22controls.tipControl%22%3E%3C%2Fnovo-control%3E%0A%20%20%20%20%3C%2Fdiv%3E%0A%20%20%20%20%3Cdiv%20class%3D%22novo-form-row%22%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-control%20%5Bform%5D%3D%22form%22%20%5Bcontrol%5D%3D%22controls.tipHtmlControl%22%3E%3C%2Fnovo-control%3E%0A%20%20%20%20%3C%2Fdiv%3E%0A%20%20%20%20%3Cdiv%20class%3D%22novo-form-row%22%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-control%20%5Bform%5D%3D%22form%22%20%5Bcontrol%5D%3D%22controls.toastControl%22%3E%3C%2Fnovo-control%3E%0A%20%20%20%20%3C%2Fdiv%3E%0A%20%20%20%20%3Cdiv%20class%3D%22novo-form-row%22%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-control%20%5Bform%5D%3D%22form%22%20%5Bcontrol%5D%3D%22controls.promptControl%22%3E%3C%2Fnovo-control%3E%0A%20%20%20%20%3C%2Fdiv%3E%0A%3C%2Fnovo-form%3E%0A%3Cdiv%20class%3D%22final-value%22%3EForm%20Value%20-%20%7B%7B%20form.value%20%7C%20json%20%7D%7D%3C%2Fdiv%3E%0A%3Cdiv%20class%3D%22final-value%22%3EForm%20Dirty%20-%20%7B%7B%20form.dirty%20%7C%20json%20%7D%7D%3C%2Fdiv%3E%0A%3Cdiv%20class%3D%22final-value%22%3EIs%20Form%20Valid%3F%20-%20%7B%7B%20form.valid%20%7C%20json%20%7D%7D%3C%2Fdiv%3E%0A`
    },
    'fi-modify-added-picker': {
        title: 'Fi Modify Added Picker Example',
        component: FiModifyAddedPickerExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%2F%2F%20Vendor%0Aimport%20%7B%20FormUtils%2C%20FieldInteractionApi%2C%20PickerControl%20%7D%20from%20'novo-elements'%3B%0A%0A%2F**%0A%20*%20%40title%20Fi%20Modify%20Added%20Picker%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20selector%3A%20'fi-modify-added-picker-example'%2C%0A%20%20templateUrl%3A%20'fi-modify-added-picker-example.html'%2C%0A%20%20styleUrls%3A%20%5B'fi-modify-added-picker-example.css'%5D%2C%0A%7D)%0Aexport%20class%20FiModifyAddedPickerExample%20%7B%0A%20%20public%20form%3A%20any%3B%0A%20%20public%20controls%3A%20any%20%3D%20%7B%7D%3B%0A%0A%20%20constructor(private%20formUtils%3A%20FormUtils)%20%7B%0A%20%20%20%20%2F%2F%20Adding%20%2F%20Removing%20Interactions%0A%20%20%20%20let%20entityPickerFunction%20%3D%20(API%3A%20FieldInteractionApi)%20%3D%3E%20%7B%0A%20%20%20%20%20%20console.log('%5BFieldInteractionDemo%5D%20-%20entityPickerFunction')%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%20%20%20%20API.modifyPickerConfig('custom-entity-picker'%2C%20%7B%0A%20%20%20%20%20%20%20%20optionsPromise%3A%20(query%2C%20http)%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%20%20return%20new%20Promise(function(resolve%2C%20reject)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20if%20(query%20%26%26%20query.length)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20http%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20.get('http%3A%2F%2Fnovo-elements-mock.getsandbox.com%2Fusers')%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20.map(function(results%3A%20any%5B%5D)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20return%20results.map((result)%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20Setting%20the%20searchEntity%20on%20the%20item%20is%20important.%20We%20use%20it%20to%20format%20your%20display%20properly.%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20Valid%20options%20are%3A%20Candidate%2C%20ClientContact%2C%20ClientCorporation%2C%20CorporateUser%2C%20JobOrder%2C%20Lead%2C%20Opportunity%2C%20and%20Placement%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20result.searchEntity%20%3D%20'Candidate'%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20return%20result%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D)%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20.subscribe(resolve%2C%20reject)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%20else%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20resolve(%5B'DEFAULT'%5D)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%20%20%7D)%3B%0A%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20format%3A%20'%24name'%2C%0A%20%20%20%20%20%20%20%20%2F%2F%20This%20is%20how%20we%20set%20the%20picker%20to%20be%20of%20an%20entity%20type%0A%20%20%20%20%20%20%20%20resultsTemplateType%3A%20'entity-picker'%2C%0A%20%20%20%20%20%20%7D)%3B%0A%20%20%20%20%7D%3B%0A%0A%20%20%20%20this.controls.pickerControl%20%3D%20new%20PickerControl(%7B%0A%20%20%20%20%20%20key%3A%20'custom-entity-picker'%2C%0A%20%20%20%20%20%20name%3A%20'custom-entity-picker'%2C%0A%20%20%20%20%20%20config%3A%20%7B%0A%20%20%20%20%20%20%20%20options%3A%20%5B%5D%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20label%3A%20'Custom%20Entity%20Picker'%2C%0A%20%20%20%20%20%20interactions%3A%20%5B%7B%20event%3A%20'init'%2C%20script%3A%20entityPickerFunction%20%7D%5D%2C%0A%20%20%20%20%7D)%3B%0A%20%20%20%20this.form%20%3D%20this.formUtils.toFormGroup(%5Bthis.controls.pickerControl%5D)%3B%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cnovo-form%20%5Bform%5D%3D%22form%22%20layout%3D%22vertical%22%3E%0A%20%20%3Cdiv%20class%3D%22novo-form-row%22%3E%0A%20%20%20%20%3Cnovo-control%20%5Bform%5D%3D%22form%22%20%5Bcontrol%5D%3D%22controls.pickerControl%22%3E%3C%2Fnovo-control%3E%0A%20%20%3C%2Fdiv%3E%0A%3C%2Fnovo-form%3E%0A`
    },
    'fi-modify-options': {
        title: 'Fi Modify Options Example',
        component: FiModifyOptionsExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%2F%2F%20Vendor%0Aimport%20%7B%20FormUtils%2C%20CheckboxControl%2C%20FieldInteractionApi%2C%20SelectControl%2C%20PickerControl%20%7D%20from%20'novo-elements'%3B%0Aimport%20%7B%20map%20%7D%20from%20'rxjs%2Foperators'%3B%0A%0A%2F**%0A%20*%20%40title%20Fi%20Modify%20Options%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20selector%3A%20'fi-modify-options-example'%2C%0A%20%20templateUrl%3A%20'fi-modify-options-example.html'%2C%0A%20%20styleUrls%3A%20%5B'fi-modify-options-example.css'%5D%2C%0A%7D)%0Aexport%20class%20FiModifyOptionsExample%20%7B%0A%20%20public%20form%3A%20any%20%3D%20%7B%7D%3B%0A%20%20public%20controls%3A%20any%20%3D%20%7B%7D%3B%0A%0A%20%20constructor(private%20formUtils%3A%20FormUtils)%20%7B%0A%20%20%20%20const%20modifyOptionsAddFunction%20%3D%20(API%3A%20FieldInteractionApi)%20%3D%3E%20%7B%0A%20%20%20%20%20%20console.log('%5BFieldInteractionDemo%5D%20-%20modifyOptionsAddFunction')%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%20%20%20%20const%20currentValue%20%3D%20API.getActiveValue()%3B%0A%20%20%20%20%20%20if%20(!currentValue)%20%7B%0A%20%20%20%20%20%20%20%20API.removeStaticOption('select'%2C%20'NEW')%3B%0A%20%20%20%20%20%20%20%20API.removeStaticOption('picker'%2C%20'NEW')%3B%0A%20%20%20%20%20%20%7D%20else%20%7B%0A%20%20%20%20%20%20%20%20API.addStaticOption('select'%2C%20'NEW')%3B%0A%20%20%20%20%20%20%20%20API.addStaticOption('select'%2C%20'NEW')%3B%20%2F%2F%20Duplicate%20options%20will%20be%20ignored%0A%20%20%20%20%20%20%20%20API.addStaticOption('picker'%2C%20'NEW')%3B%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%3B%0A%20%20%20%20const%20modifyOptionsAsyncFunction%20%3D%20(API%3A%20FieldInteractionApi)%20%3D%3E%20%7B%0A%20%20%20%20%20%20console.log('%5BFieldInteractionDemo%5D%20-%20modifyOptionsAsyncFunction')%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%20%20%20%20const%20currentValue%20%3D%20API.getActiveValue()%3B%0A%20%20%20%20%20%20switch%20(currentValue)%20%7B%0A%20%20%20%20%20%20%20%20case%201%3A%0A%20%20%20%20%20%20%20%20%20%20%2F%2F%20Static%0A%20%20%20%20%20%20%20%20%20%20API.setProperty('picker'%2C%20'label'%2C%20'Static%20Picker')%3B%0A%20%20%20%20%20%20%20%20%20%20API.modifyPickerConfig('picker'%2C%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20options%3A%20%5B'A'%2C%20'B'%2C%20'C'%5D%2C%0A%20%20%20%20%20%20%20%20%20%20%7D)%3B%0A%20%20%20%20%20%20%20%20%20%20break%3B%0A%20%20%20%20%20%20%20%20case%202%3A%0A%20%20%20%20%20%20%20%20%20%20%2F%2F%20Async%20with%20Options%20URL%0A%20%20%20%20%20%20%20%20%20%20API.setProperty('picker'%2C%20'label'%2C%20'Async%20Picker%20(with%20options%20url)')%3B%0A%20%20%20%20%20%20%20%20%20%20API.modifyPickerConfig(%0A%20%20%20%20%20%20%20%20%20%20%20%20'picker'%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20format%3A%20'%24name%20%24test'%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20optionsUrl%3A%20'http%3A%2F%2Fnovo-elements-mock.getsandbox.com%2Fusers'%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20function(result)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20result.test%20%3D%20'Built%20with%20Options%20URL!'%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20return%20result%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20%20%20)%3B%0A%20%20%20%20%20%20%20%20%20%20break%3B%0A%20%20%20%20%20%20%20%20case%203%3A%0A%20%20%20%20%20%20%20%20%20%20%2F%2F%20Async%20with%20Options%20URL%20Builder%0A%20%20%20%20%20%20%20%20%20%20API.setProperty('picker'%2C%20'label'%2C%20'Async%20Picker%20(with%20options%20url%20builder)')%3B%0A%20%20%20%20%20%20%20%20%20%20API.modifyPickerConfig(%0A%20%20%20%20%20%20%20%20%20%20%20%20'picker'%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20format%3A%20'%24name%20%24test'%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20optionsUrlBuilder%3A%20(query)%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20return%20'http%3A%2F%2Fnovo-elements-mock.getsandbox.com%2Fusers'%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20function(result)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20result.test%20%3D%20'Built%20with%20Options%20URL%20Builder!'%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20return%20result%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20%20%20)%3B%0A%20%20%20%20%20%20%20%20%20%20break%3B%0A%20%20%20%20%20%20%20%20case%204%3A%0A%20%20%20%20%20%20%20%20%20%20%2F%2F%20Async%20with%20Options%20Promise%0A%20%20%20%20%20%20%20%20%20%20API.setProperty('picker'%2C%20'label'%2C%20'Async%20Picker%20(with%20options%20promise)')%3B%0A%20%20%20%20%20%20%20%20%20%20API.modifyPickerConfig('picker'%2C%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20format%3A%20'%24name%20%24test'%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20optionsPromise(query%2C%20http)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20return%20new%20Promise(function(resolve%2C%20reject)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20if%20(query%20%26%26%20query.length)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20http%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20.get('http%3A%2F%2Fnovo-elements-mock.getsandbox.com%2Fusers')%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20.map(function(results%3A%20any%5B%5D)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20return%20results.map((result)%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20result.test%20%3D%20'Built%20with%20Options%20Promise'%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20return%20result%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D)%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20.subscribe(resolve%2C%20reject)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%20else%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20resolve(%5B'DEFAULT'%5D)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20%20%20%7D)%3B%0A%20%20%20%20%20%20%20%20%20%20break%3B%0A%20%20%20%20%20%20%20%20default%3A%0A%20%20%20%20%20%20%20%20%20%20break%3B%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%3B%0A%0A%20%20%20%20%2F%2F%20Modify%20Options%20Field%20Interactions%0A%20%20%20%20this.controls.selectControl%20%3D%20new%20SelectControl(%7B%0A%20%20%20%20%20%20key%3A%20'select'%2C%0A%20%20%20%20%20%20label%3A%20'Select'%2C%0A%20%20%20%20%20%20options%3A%20%5B'A'%2C%20'B'%2C%20'C'%5D%2C%0A%20%20%20%20%7D)%3B%0A%20%20%20%20this.controls.pickerControl%20%3D%20new%20PickerControl(%7B%0A%20%20%20%20%20%20key%3A%20'picker'%2C%0A%20%20%20%20%20%20label%3A%20'Static%20Picker'%2C%0A%20%20%20%20%20%20config%3A%20%7B%0A%20%20%20%20%20%20%20%20options%3A%20%5B'A'%2C%20'B'%2C%20'C'%5D%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%7D)%3B%0A%20%20%20%20this.controls.toggleControl%20%3D%20new%20CheckboxControl(%7B%0A%20%20%20%20%20%20key%3A%20'toggle'%2C%0A%20%20%20%20%20%20label%3A%20'Add%20Option%3F'%2C%0A%20%20%20%20%20%20description%3A%20'I%20will%20add%20options%20to%20the%20above%20field!'%2C%0A%20%20%20%20%20%20interactions%3A%20%5B%7B%20event%3A%20'change'%2C%20script%3A%20modifyOptionsAddFunction%20%7D%5D%2C%0A%20%20%20%20%7D)%3B%0A%20%20%20%20this.controls.makePickerAsyncControl%20%3D%20new%20SelectControl(%7B%0A%20%20%20%20%20%20key%3A%20'async'%2C%0A%20%20%20%20%20%20label%3A%20'Async%20Picker%3F'%2C%0A%20%20%20%20%20%20description%3A%20'I%20will%20make%20the%20picker%20now%20hit%20a%20service!'%2C%0A%20%20%20%20%20%20value%3A%201%2C%0A%20%20%20%20%20%20options%3A%20%5B%0A%20%20%20%20%20%20%20%20%7B%20label%3A%20'Not%20Async'%2C%20value%3A%201%20%7D%2C%0A%20%20%20%20%20%20%20%20%7B%20label%3A%20'Async%20With%20Options%20URL'%2C%20value%3A%202%20%7D%2C%0A%20%20%20%20%20%20%20%20%7B%20label%3A%20'Async%20With%20Options%20URL%20Builder'%2C%20value%3A%203%20%7D%2C%0A%20%20%20%20%20%20%20%20%7B%20label%3A%20'Async%20With%20Options%20Promise'%2C%20value%3A%204%20%7D%2C%0A%20%20%20%20%20%20%5D%2C%0A%20%20%20%20%20%20interactions%3A%20%5B%7B%20event%3A%20'change'%2C%20script%3A%20modifyOptionsAsyncFunction%20%7D%5D%2C%0A%20%20%20%20%7D)%3B%0A%20%20%20%20this.form%20%3D%20formUtils.toFormGroup(%5B%0A%20%20%20%20%20%20this.controls.selectControl%2C%0A%20%20%20%20%20%20this.controls.pickerControl%2C%0A%20%20%20%20%20%20this.controls.toggleControl%2C%0A%20%20%20%20%20%20this.controls.makePickerAsyncControl%2C%0A%20%20%20%20%5D)%3B%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cnovo-form%20%5Bform%5D%3D%22form%22%20layout%3D%22vertical%22%3E%0A%20%20%20%20%3Cdiv%20class%3D%22novo-form-row%22%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-control%20%5Bform%5D%3D%22form%22%20%5Bcontrol%5D%3D%22controls.selectControl%22%3E%3C%2Fnovo-control%3E%0A%20%20%20%20%3C%2Fdiv%3E%0A%20%20%20%20%3Cdiv%20class%3D%22novo-form-row%22%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-control%20%5Bform%5D%3D%22form%22%20%5Bcontrol%5D%3D%22controls.pickerControl%22%3E%3C%2Fnovo-control%3E%0A%20%20%20%20%3C%2Fdiv%3E%0A%20%20%20%20%3Cdiv%20class%3D%22novo-form-row%22%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-control%20%5Bform%5D%3D%22form%22%20%5Bcontrol%5D%3D%22controls.toggleControl%22%3E%3C%2Fnovo-control%3E%0A%20%20%20%20%3C%2Fdiv%3E%0A%20%20%20%20%3Cdiv%20class%3D%22novo-form-row%22%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-control%20%5Bform%5D%3D%22form%22%20%5Bcontrol%5D%3D%22controls.makePickerAsyncControl%22%3E%3C%2Fnovo-control%3E%0A%20%20%20%20%3C%2Fdiv%3E%0A%3C%2Fnovo-form%3E%0A%3Cdiv%20class%3D%22final-value%22%3EForm%20Value%20-%20%7B%7B%20form.value%20%7C%20json%20%7D%7D%3C%2Fdiv%3E%0A%3Cdiv%20class%3D%22final-value%22%3EForm%20Dirty%20-%20%7B%7B%20form.dirty%20%7C%20json%20%7D%7D%3C%2Fdiv%3E%0A%3Cdiv%20class%3D%22final-value%22%3EIs%20Form%20Valid%3F%20-%20%7B%7B%20form.valid%20%7C%20json%20%7D%7D%3C%2Fdiv%3E%0A`
    },
    'fi-required': {
        title: 'Fi Required Example',
        component: FiRequiredExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%2F%2F%20Vendor%0Aimport%20%7B%20FormUtils%2C%20TextBoxControl%2C%20CheckboxControl%2C%20FieldInteractionApi%20%7D%20from%20'novo-elements'%3B%0A%0A%2F**%0A%20*%20%40title%20Fi%20Required%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20selector%3A%20'fi-required-example'%2C%0A%20%20templateUrl%3A%20'fi-required-example.html'%2C%0A%20%20styleUrls%3A%20%5B'fi-required-example.css'%5D%2C%0A%7D)%0Aexport%20class%20FiRequiredExample%20%7B%0A%20%20public%20form%3A%20any%20%3D%20%7B%7D%3B%0A%20%20public%20controls%3A%20any%20%3D%20%7B%7D%3B%0A%0A%20%20constructor(formUtils%3A%20FormUtils)%20%7B%0A%20%20%20%20const%20requiredFunction%20%3D%20(API%3A%20FieldInteractionApi)%20%3D%3E%20%7B%0A%20%20%20%20%20%20console.log('%5BFieldInteractionDemo%5D%20-%20requiredFunction')%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%20%20%20%20const%20activeValue%20%3D%20API.getActiveValue()%3B%0A%20%20%20%20%20%20if%20(activeValue)%20%7B%0A%20%20%20%20%20%20%20%20API.setRequired('required'%2C%20true)%3B%0A%20%20%20%20%20%20%7D%20else%20%7B%0A%20%20%20%20%20%20%20%20API.setRequired('required'%2C%20false)%3B%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%3B%0A%0A%20%20%20%20%2F%2F%20Required%20Field%20Interactions%0A%20%20%20%20this.controls.requiredControl%20%3D%20new%20TextBoxControl(%7B%0A%20%20%20%20%20%20type%3A%20'text'%2C%0A%20%20%20%20%20%20key%3A%20'required'%2C%0A%20%20%20%20%20%20label%3A%20'Test'%2C%0A%20%20%20%20%20%20description%3A%20'I%20may%20or%20may%20not%20be%20required%2C%20play%20with%20the%20checkbox%20below!'%2C%0A%20%20%20%20%7D)%3B%0A%20%20%20%20this.controls.toggleControl%20%3D%20new%20CheckboxControl(%7B%0A%20%20%20%20%20%20key%3A%20'toggle'%2C%0A%20%20%20%20%20%20label%3A%20'Required%3F'%2C%0A%20%20%20%20%20%20interactions%3A%20%5B%7B%20event%3A%20'change'%2C%20script%3A%20requiredFunction%20%7D%5D%2C%0A%20%20%20%20%7D)%3B%0A%20%20%20%20this.form%20%3D%20formUtils.toFormGroup(%5Bthis.controls.requiredControl%2C%20this.controls.toggleControl%5D)%3B%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cnovo-form%20%5Bform%5D%3D%22form%22%20layout%3D%22vertical%22%3E%0A%20%20%20%20%3Cdiv%20class%3D%22novo-form-row%22%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-control%20%5Bform%5D%3D%22form%22%20%5Bcontrol%5D%3D%22controls.requiredControl%22%3E%3C%2Fnovo-control%3E%0A%20%20%20%20%3C%2Fdiv%3E%0A%20%20%20%20%3Cdiv%20class%3D%22novo-form-row%22%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-control%20%5Bform%5D%3D%22form%22%20%5Bcontrol%5D%3D%22controls.toggleControl%22%3E%3C%2Fnovo-control%3E%0A%20%20%20%20%3C%2Fdiv%3E%0A%3C%2Fnovo-form%3E%0A%3Cdiv%20class%3D%22final-value%22%3EForm%20Value%20-%20%7B%7B%20form.value%20%7C%20json%20%7D%7D%3C%2Fdiv%3E%0A%3Cdiv%20class%3D%22final-value%22%3EForm%20Dirty%20-%20%7B%7B%20form.dirty%20%7C%20json%20%7D%7D%3C%2Fdiv%3E%0A%3Cdiv%20class%3D%22final-value%22%3EIs%20Form%20Valid%3F%20-%20%7B%7B%20form.valid%20%7C%20json%20%7D%7D%3C%2Fdiv%3E%0A`
    },
    'fi-tooltip': {
        title: 'Fi Tooltip Example',
        component: FiTooltipExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%2F%2F%20Vendor%0Aimport%20%7B%20FormUtils%2C%20TextBoxControl%2C%20FieldInteractionApi%2C%20TilesControl%20%7D%20from%20'novo-elements'%3B%0A%0A%2F**%0A%20*%20%40title%20Fi%20Tooltip%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20selector%3A%20'fi-tooltip-example'%2C%0A%20%20templateUrl%3A%20'fi-tooltip-example.html'%2C%0A%20%20styleUrls%3A%20%5B'fi-tooltip-example.css'%5D%2C%0A%7D)%0Aexport%20class%20FiTooltipExample%20%7B%0A%20%20public%20form%3A%20any%20%3D%20%7B%7D%3B%0A%20%20public%20controls%3A%20any%20%3D%20%7B%7D%3B%0A%0A%20%20constructor(private%20formUtils%3A%20FormUtils)%20%7B%0A%20%20%20%20const%20tooltipFunction%20%3D%20(API%3A%20FieldInteractionApi)%20%3D%3E%20%7B%0A%20%20%20%20%20%20console.log('%5BFieldInteractionDemo%5D%20-%20tooltipFunction')%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%20%20%20%20API.setTooltip(API.getActiveKey()%2C%20API.getActiveValue())%3B%0A%20%20%20%20%7D%3B%0A%0A%20%20%20%20const%20tooltipUpdateFunction%20%3D%20(API%3A%20FieldInteractionApi)%20%3D%3E%20%7B%0A%20%20%20%20%20%20console.log('%5BFieldInteractionDemo%5D%20-%20tooltipUpdateFunction')%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%20%20%20%20API.getControl(this.controls.tooltipControl.key).tooltipSize%20%3D%20API.getValue(this.controls.tooltipSizeControl.key)%3B%0A%20%20%20%20%20%20API.getControl(this.controls.tooltipControl.key).tooltipPreline%20%3D%20API.getValue(this.controls.tooltipPrelineControl.key)%3B%0A%20%20%20%20%7D%3B%0A%0A%20%20%20%20%2F%2F%20Tooltip%20Field%20Interactions%0A%20%20%20%20this.controls.tooltipControl%20%3D%20new%20TextBoxControl(%7B%0A%20%20%20%20%20%20type%3A%20'text'%2C%0A%20%20%20%20%20%20key%3A%20'toolTipValue'%2C%0A%20%20%20%20%20%20label%3A%20'Tooltip'%2C%0A%20%20%20%20%20%20description%3A%20'I%20will%20add%20a%20tooltip%20to%20this%20control%20as%20a%20value%20is%20typed'%2C%0A%20%20%20%20%20%20interactions%3A%20%5B%7B%20event%3A%20'change'%2C%20script%3A%20tooltipFunction%20%7D%5D%2C%0A%20%20%20%20%7D)%3B%0A%0A%20%20%20%20this.controls.tooltipSizeControl%20%3D%20new%20TilesControl(%7B%0A%20%20%20%20%20%20key%3A%20'tooltipSize'%2C%0A%20%20%20%20%20%20label%3A%20'Tooltip%20Size'%2C%0A%20%20%20%20%20%20description%3A%20'Changing%20me%20will%20set%20a%20fixed%20width%20on%20the%20tooltip'%2C%0A%20%20%20%20%20%20options%3A%20%5B%7B%20value%3A%20'small'%2C%20label%3A%20'Small'%20%7D%2C%20%7B%20value%3A%20'medium'%2C%20label%3A%20'Medium'%20%7D%2C%20%7B%20value%3A%20'large'%2C%20label%3A%20'Large'%20%7D%5D%2C%0A%20%20%20%20%20%20interactions%3A%20%5B%7B%20event%3A%20'change'%2C%20script%3A%20tooltipUpdateFunction%20%7D%5D%2C%0A%20%20%20%20%7D)%3B%0A%0A%20%20%20%20this.controls.tooltipPrelineControl%20%3D%20new%20TilesControl(%7B%0A%20%20%20%20%20%20key%3A%20'tooltipPreline'%2C%0A%20%20%20%20%20%20label%3A%20'Tooltip%20Multiline'%2C%0A%20%20%20%20%20%20description%3A%20'Should%20the%20tooltip%20be%20multiple%20lines%20tall%20or%20all%20on%20one%20line%3F'%2C%0A%20%20%20%20%20%20options%3A%20%5B%7B%20value%3A%20true%2C%20label%3A%20'Yes'%20%7D%2C%20%7B%20value%3A%20false%2C%20label%3A%20'No'%20%7D%5D%2C%0A%20%20%20%20%20%20interactions%3A%20%5B%7B%20event%3A%20'change'%2C%20script%3A%20tooltipUpdateFunction%20%7D%5D%2C%0A%20%20%20%20%7D)%3B%0A%0A%20%20%20%20this.form%20%3D%20formUtils.toFormGroup(%5B%0A%20%20%20%20%20%20this.controls.tooltipControl%2C%0A%20%20%20%20%20%20this.controls.tooltipSizeControl%2C%0A%20%20%20%20%20%20this.controls.tooltipPrelineControl%2C%0A%20%20%20%20%5D)%3B%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cnovo-form%20%5Bform%5D%3D%22form%22%20layout%3D%22vertical%22%3E%0A%20%20%3Cdiv%20class%3D%22novo-form-row%22%3E%0A%20%20%20%20%20%20%3Cnovo-control%20%5Bform%5D%3D%22form%22%20%5Bcontrol%5D%3D%22controls.tooltipControl%22%3E%3C%2Fnovo-control%3E%0A%20%20%3C%2Fdiv%3E%0A%20%20%3Cdiv%20class%3D%22novo-form-row%22%3E%0A%20%20%20%20%20%20%3Cnovo-control%20%5Bform%5D%3D%22form%22%20%5Bcontrol%5D%3D%22controls.tooltipSizeControl%22%3E%3C%2Fnovo-control%3E%0A%20%20%3C%2Fdiv%3E%0A%20%20%3Cdiv%20class%3D%22novo-form-row%22%3E%0A%20%20%20%20%20%20%3Cnovo-control%20%5Bform%5D%3D%22form%22%20%5Bcontrol%5D%3D%22controls.tooltipPrelineControl%22%3E%3C%2Fnovo-control%3E%0A%20%20%3C%2Fdiv%3E%0A%3C%2Fnovo-form%3E%0A%3Cdiv%20class%3D%22final-value%22%3EForm%20Value%20-%20%7B%7B%20form.value%20%7C%20json%20%7D%7D%3C%2Fdiv%3E%0A%3Cdiv%20class%3D%22final-value%22%3EForm%20Dirty%20-%20%7B%7B%20form.dirty%20%7C%20json%20%7D%7D%3C%2Fdiv%3E%0A%3Cdiv%20class%3D%22final-value%22%3EIs%20Form%20Valid%3F%20-%20%7B%7B%20form.valid%20%7C%20json%20%7D%7D%3C%2Fdiv%3E%0A`
    },
    'fi-validation': {
        title: 'Fi Validation Example',
        component: FiValidationExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%2F%2F%20Vendor%0Aimport%20%7B%20FormUtils%2C%20TextBoxControl%2C%20FieldInteractionApi%20%7D%20from%20'novo-elements'%3B%0A%0A%2F**%0A%20*%20%40title%20Fi%20Validation%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20selector%3A%20'fi-validation-example'%2C%0A%20%20templateUrl%3A%20'fi-validation-example.html'%2C%0A%20%20styleUrls%3A%20%5B'fi-validation-example.css'%5D%2C%0A%7D)%0Aexport%20class%20FiValidationExample%20%7B%0A%20%20public%20form%3A%20any%20%3D%20%7B%7D%3B%0A%20%20public%20controls%3A%20any%20%3D%20%7B%7D%3B%0A%0A%20%20constructor(private%20formUtils%3A%20FormUtils)%20%7B%0A%20%20%20%20const%20validationFunction%20%3D%20(API%3A%20FieldInteractionApi)%20%3D%3E%20%7B%0A%20%20%20%20%20%20console.log('%5BFieldInteractionDemo%5D%20-%20validationFunction')%3B%20%2F%2F%20tslint%3Adisable-line%0A%20%20%20%20%20%20const%20activeValue%20%3D%20API.getActiveValue()%3B%0A%20%20%20%20%20%20if%20(activeValue%20%3E%2010)%20%7B%0A%20%20%20%20%20%20%20%20API.markAsInvalid(API.getActiveKey()%2C%20'Too%20high!%20Make%20it%20a%20lot%20lower!!')%3B%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%3B%0A%0A%20%20%20%20%2F%2F%20Validation%20Field%20Interactions%0A%20%20%20%20this.controls.validationControl%20%3D%20new%20TextBoxControl(%7B%0A%20%20%20%20%20%20type%3A%20'number'%2C%0A%20%20%20%20%20%20key%3A%20'validation'%2C%0A%20%20%20%20%20%20value%3A%205%2C%0A%20%20%20%20%20%20label%3A%20'Validation%20Test'%2C%0A%20%20%20%20%20%20description%3A%20'Try%20to%20input%20a%20number%20larger%20then%2010!'%2C%0A%20%20%20%20%20%20interactions%3A%20%5B%7B%20event%3A%20'change'%2C%20script%3A%20validationFunction%2C%20invokeOnInit%3A%20true%20%7D%5D%2C%0A%20%20%20%20%7D)%3B%0A%20%20%20%20this.form%20%3D%20formUtils.toFormGroup(%5Bthis.controls.validationControl%5D)%3B%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cnovo-form%20%5Bform%5D%3D%22form%22%20layout%3D%22vertical%22%3E%0A%20%20%20%20%3Cdiv%20class%3D%22novo-form-row%22%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-control%20%5Bform%5D%3D%22form%22%20%5Bcontrol%5D%3D%22controls.validationControl%22%3E%3C%2Fnovo-control%3E%0A%20%20%20%20%3C%2Fdiv%3E%0A%3C%2Fnovo-form%3E%0A%3Cdiv%20class%3D%22final-value%22%3EForm%20Value%20-%20%7B%7B%20form.value%20%7C%20json%20%7D%7D%3C%2Fdiv%3E%0A%3Cdiv%20class%3D%22final-value%22%3EForm%20Dirty%20-%20%7B%7B%20form.dirty%20%7C%20json%20%7D%7D%3C%2Fdiv%3E%0A%3Cdiv%20class%3D%22final-value%22%3EIs%20Form%20Valid%3F%20-%20%7B%7B%20form.valid%20%7C%20json%20%7D%7D%3C%2Fdiv%3E%0A`
    },
    'custom-modal': {
        title: 'Custom Modal Example',
        component: CustomModalExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0Aimport%20%7B%20NovoModalService%2C%20NovoModalRef%20%7D%20from%20'novo-elements'%3B%0A%0A%40Component(%7B%0A%20%20selector%3A%20'modal-custom-demo'%2C%0A%20%20template%3A%20%60%0A%20%20%3Cnovo-notification%20type%3D%22custom%22%20icon%3D%22trending-up%22%3E%0A%20%20%20%20%3Ch1%3EI%20have%20a%20trending%20icon!%3C%2Fh1%3E%0A%20%20%20%20%3Ch2%3EThis%20notification%20type%20allows%20for%20any%20Bullhorn%20Icon%3C%2Fh2%3E%0A%20%20%20%20%3Cbutton%20theme%3D%22primary%22%20icon%3D%22check%22%20(click)%3D%22close()%22%3ESweet.%3C%2Fbutton%3E%0A%20%20%3C%2Fnovo-notification%3E%0A%60%2C%0A%7D)%0Aexport%20class%20ModalCustomDemo%20%7B%0A%20%20constructor(private%20modalRef%3A%20NovoModalRef)%20%7B%7D%0A%20%20close()%20%7B%0A%20%20%20%20this.modalRef.close()%3B%0A%20%20%7D%0A%7D%0A%0A%2F**%0A%20*%20%40title%20Custom%20Modal%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20selector%3A%20'custom-modal-example'%2C%0A%20%20templateUrl%3A%20'custom-modal-example.html'%2C%0A%20%20styleUrls%3A%20%5B'custom-modal-example.css'%5D%2C%0A%7D)%0Aexport%20class%20CustomModalExample%20%7B%0A%20%20constructor(private%20modalService%3A%20NovoModalService)%20%7B%7D%0A%20%20showModal()%20%7B%0A%20%20%20%20this.modalService.open(ModalCustomDemo)%3B%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20CSS%20for%20this%20example%20*%2F%0A%3Ahost%20%7B%0A%20%20display%3A%20block%3B%0A%20%20background%3A%20rgba(0%2C%200%2C%200%2C%200.55)%3B%0A%20%20padding%3A%2035px%200%3B%0A%20%20position%3A%20relative%3B%0A%20%20text-align%3A%20center%3B%0A%7D%0A`,
        htmlSource: `%3Cbutton%20data-automation-id%3D%22modal-trigger%22%20theme%3D%22secondary%22%20(click)%3D%22showModal()%22%3EShow%20Me%20%3A)%3C%2Fbutton%3E%0A`,
        selectorName: 'CustomModalExample, ModalCustomDemo'
    },
    'error-modal': {
        title: 'Error Modal Example',
        component: ErrorModalExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0Aimport%20%7B%20NovoModalService%2C%20NovoModalRef%20%7D%20from%20'novo-elements'%3B%0A%0A%40Component(%7B%0A%20%20selector%3A%20'modal-error-demo'%2C%0A%20%20template%3A%20%60%0A%20%20%3Cnovo-notification%20type%3D%22error%22%3E%0A%20%20%20%20%3Ch1%3ESorry%2C%20something%20went%20wrong.%3C%2Fh1%3E%0A%20%20%20%20%3Ch2%3EYou%20did%20not%20have%201.21%20gigawatts%20of%20power.%3C%2Fh2%3E%0A%20%20%20%20%3Cbutton%20theme%3D%22primary%22%20icon%3D%22refresh-o%22%20(click)%3D%22close()%22%3ERefresh%20this%20page%3C%2Fbutton%3E%0A%20%20%3C%2Fnovo-notification%3E%0A%60%2C%0A%7D)%0Aexport%20class%20ModalErrorDemo%20%7B%0A%20%20constructor(private%20modalRef%3A%20NovoModalRef)%20%7B%7D%0A%20%20close()%20%7B%0A%20%20%20%20this.modalRef.close()%3B%0A%20%20%7D%0A%7D%0A%0A%2F**%0A%20*%20%40title%20Error%20Modal%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20selector%3A%20'error-modal-example'%2C%0A%20%20templateUrl%3A%20'error-modal-example.html'%2C%0A%20%20styleUrls%3A%20%5B'error-modal-example.css'%5D%2C%0A%7D)%0Aexport%20class%20ErrorModalExample%20%7B%0A%20%20constructor(private%20modalService%3A%20NovoModalService)%20%7B%7D%0A%20%20showModal()%20%7B%0A%20%20%20%20this.modalService.open(ModalErrorDemo)%3B%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20CSS%20for%20this%20example%20*%2F%0A%3Ahost%20%7B%0A%20%20display%3A%20block%3B%0A%20%20background%3A%20rgba(0%2C%200%2C%200%2C%200.55)%3B%0A%20%20padding%3A%2035px%200%3B%0A%20%20position%3A%20relative%3B%0A%20%20text-align%3A%20center%3B%0A%7D%0A`,
        htmlSource: `%3Cbutton%20data-automation-id%3D%22modal-trigger%22%20theme%3D%22secondary%22%20(click)%3D%22showModal()%22%3EShow%20Me%20%3A)%3C%2Fbutton%3E%0A`,
        selectorName: 'ErrorModalExample, ModalErrorDemo'
    },
    'modal-add-form': {
        title: 'Modal Add Form Example',
        component: ModalAddFormExample,
        tsSource: `import%20%7B%20Component%2C%20OnInit%20%7D%20from%20'%40angular%2Fcore'%3B%0Aimport%20%7B%20NovoModalService%2C%20NovoModalRef%2C%20FormUtils%2C%20TextBoxControl%2C%20PickerControl%2C%20PickerResults%20%7D%20from%20'novo-elements'%3B%0A%0A%40Component(%7B%0A%20%20selector%3A%20'modal-edit-form-demo'%2C%0A%20%20template%3A%20%60%0A%20%20%3Cnovo-modal%3E%0A%20%20%20%20%3Cheader%20title%3D%22Add%20Contact%22%20icon%3D%22person%22%20theme%3D%22contact%22%3E%0A%20%20%20%20%20%20%20%20%3Cutils%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%3Cutil-action%20icon%3D%22times%22%20(click)%3D%22close()%22%3E%3C%2Futil-action%3E%0A%20%20%20%20%20%20%20%20%3C%2Futils%3E%0A%20%20%20%20%3C%2Fheader%3E%0A%20%20%20%20%3Csection%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-form%20%5Bform%5D%3D%22textForm%22%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%3Cdiv%20class%3D%22novo-form-row%22%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Cnovo-control%20%5Bform%5D%3D%22textForm%22%20%5Bcontrol%5D%3D%22textControl%22%3E%3C%2Fnovo-control%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%3C%2Fdiv%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%3Cdiv%20class%3D%22novo-form-row%22%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Cnovo-control%20%5Bform%5D%3D%22textForm%22%20%5Bcontrol%5D%3D%22emailControl%22%3E%3C%2Fnovo-control%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%3C%2Fdiv%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%3Cdiv%20class%3D%22novo-form-row%22%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Cnovo-control%20%5Bform%5D%3D%22textForm%22%20%5Bcontrol%5D%3D%22numberControl%22%3E%3C%2Fnovo-control%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%3C%2Fdiv%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%3Cdiv%20class%3D%22novo-form-row%22%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Cnovo-control%20%5Bform%5D%3D%22textForm%22%20%5Bcontrol%5D%3D%22pickerControl%22%3E%3C%2Fnovo-control%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%3C%2Fdiv%3E%0A%20%20%20%20%20%20%20%20%3C%2Fnovo-form%3E%0A%20%20%20%20%3C%2Fsection%3E%0A%20%20%20%20%3Cbutton%20theme%3D%22standard%22%20(click)%3D%22close()%22%3ECancel%3C%2Fbutton%3E%0A%20%20%20%20%3Cbutton%20theme%3D%22primary%22%20color%3D%22success%22%20icon%3D%22check%22%20(click)%3D%22close()%22%3ESave%3C%2Fbutton%3E%0A%20%20%3C%2Fnovo-modal%3E%0A%60%2C%0A%7D)%0Aexport%20class%20ModalAddFormDemo%20implements%20OnInit%20%7B%0A%20%20public%20textControl%3A%20any%3B%0A%20%20public%20emailControl%3A%20any%3B%0A%20%20public%20numberControl%3A%20any%3B%0A%20%20public%20pickerControl%3A%20any%3B%0A%20%20public%20textForm%3A%20any%3B%0A%0A%20%20constructor(private%20modalRef%3A%20NovoModalRef%2C%20private%20formUtils%3A%20FormUtils)%20%7B%7D%0A%0A%20%20ngOnInit()%20%7B%0A%20%20%20%20this.textControl%20%3D%20new%20TextBoxControl(%7B%20key%3A%20'text'%2C%20label%3A%20'Text%20Box'%20%7D)%3B%0A%20%20%20%20this.emailControl%20%3D%20new%20TextBoxControl(%7B%20type%3A%20'email'%2C%20key%3A%20'email'%2C%20label%3A%20'Email'%20%7D)%3B%0A%20%20%20%20this.numberControl%20%3D%20new%20TextBoxControl(%7B%20type%3A%20'number'%2C%20key%3A%20'number'%2C%20label%3A%20'Number'%20%7D)%3B%0A%20%20%20%20this.pickerControl%20%3D%20new%20PickerControl(%7B%0A%20%20%20%20%20%20key%3A%20'picker'%2C%0A%20%20%20%20%20%20multiple%3A%20false%2C%0A%20%20%20%20%20%20label%3A%20'Picker'%2C%0A%20%20%20%20%20%20required%3A%20true%2C%0A%20%20%20%20%20%20config%3A%20%7B%0A%20%20%20%20%20%20%20%20resultsTemplate%3A%20PickerResults%2C%0A%20%20%20%20%20%20%20%20options%3A%20%5B'Apple'%2C%20'Banana'%2C%20'Grapes'%2C%20'Orange'%2C%20'Pear'%5D%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%7D)%3B%0A%0A%20%20%20%20this.textForm%20%3D%20this.formUtils.toFormGroup(%5Bthis.textControl%2C%20this.emailControl%2C%20this.numberControl%2C%20this.pickerControl%5D)%3B%0A%20%20%7D%0A%0A%20%20close()%20%7B%0A%20%20%20%20this.modalRef.close()%3B%0A%20%20%7D%0A%7D%0A%0A%2F**%0A%20*%20%40title%20Modal%20Add%20Form%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20selector%3A%20'modal-add-form-example'%2C%0A%20%20templateUrl%3A%20'modal-add-form-example.html'%2C%0A%20%20styleUrls%3A%20%5B'modal-add-form-example.css'%5D%2C%0A%7D)%0Aexport%20class%20ModalAddFormExample%20%7B%0A%20%20constructor(private%20modalService%3A%20NovoModalService)%20%7B%7D%0A%20%20showModal()%20%7B%0A%20%20%20%20this.modalService.open(ModalAddFormDemo)%3B%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20CSS%20for%20this%20example%20*%2F%0A%3Ahost%20%7B%0A%20%20display%3A%20block%3B%0A%20%20background%3A%20rgba(0%2C%200%2C%200%2C%200.55)%3B%0A%20%20padding%3A%2035px%200%3B%0A%20%20position%3A%20relative%3B%0A%20%20text-align%3A%20center%3B%0A%7D%0A`,
        htmlSource: `%3Cbutton%20data-automation-id%3D%22modal-trigger%22%20theme%3D%22secondary%22%20(click)%3D%22showModal()%22%3EShow%20Me%20%3A)%3C%2Fbutton%3E%0A`,
        selectorName: 'ModalAddFormExample, ModalAddFormDemo'
    },
    'modal-edit-form': {
        title: 'Modal Edit Form Example',
        component: ModalEditFormExample,
        tsSource: `import%20%7B%20Component%2C%20OnInit%20%7D%20from%20'%40angular%2Fcore'%3B%0Aimport%20%7B%20NovoModalService%2C%20NovoModalRef%2C%20FormUtils%2C%20TextBoxControl%2C%20PickerControl%2C%20PickerResults%20%7D%20from%20'novo-elements'%3B%0A%0A%40Component(%7B%0A%20%20selector%3A%20'modal-edit-form-demo'%2C%0A%20%20template%3A%20%60%0A%20%20%3Cnovo-modal%3E%0A%20%20%20%20%3Cheader%20title%3D%22John%20Deere%22%20icon%3D%22candidate%22%20theme%3D%22candidate%22%3E%0A%20%20%20%20%20%20%20%20%3Cutils%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%3Cutil-action%20icon%3D%22times%22%20(click)%3D%22close()%22%3E%3C%2Futil-action%3E%0A%20%20%20%20%20%20%20%20%3C%2Futils%3E%0A%20%20%20%20%3C%2Fheader%3E%0A%20%20%20%20%3Csection%3E%0A%20%20%20%20%20%20%20%20%3Cnovo-form%20%5Bform%5D%3D%22textForm%22%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%3Cdiv%20class%3D%22novo-form-row%22%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Cnovo-control%20%5Bform%5D%3D%22textForm%22%20%5Bcontrol%5D%3D%22textControl%22%3E%3C%2Fnovo-control%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%3C%2Fdiv%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%3Cdiv%20class%3D%22novo-form-row%22%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Cnovo-control%20%5Bform%5D%3D%22textForm%22%20%5Bcontrol%5D%3D%22emailControl%22%3E%3C%2Fnovo-control%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%3C%2Fdiv%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%3Cdiv%20class%3D%22novo-form-row%22%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Cnovo-control%20%5Bform%5D%3D%22textForm%22%20%5Bcontrol%5D%3D%22numberControl%22%3E%3C%2Fnovo-control%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%3C%2Fdiv%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%3Cdiv%20class%3D%22novo-form-row%22%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Cnovo-control%20%5Bform%5D%3D%22textForm%22%20%5Bcontrol%5D%3D%22pickerControl%22%3E%3C%2Fnovo-control%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%3C%2Fdiv%3E%0A%20%20%20%20%20%20%20%20%3C%2Fnovo-form%3E%0A%20%20%20%20%3C%2Fsection%3E%0A%20%20%20%20%3Cbutton%20theme%3D%22standard%22%20(click)%3D%22close()%22%3ECancel%3C%2Fbutton%3E%0A%20%20%20%20%3Cbutton%20theme%3D%22primary%22%20color%3D%22success%22%20icon%3D%22check%22%20(click)%3D%22close()%22%3ESave%3C%2Fbutton%3E%0A%20%20%3C%2Fnovo-modal%3E%0A%60%2C%0A%7D)%0Aexport%20class%20ModalEditFormDemo%20implements%20OnInit%20%7B%0A%20%20public%20textControl%3A%20any%3B%0A%20%20public%20emailControl%3A%20any%3B%0A%20%20public%20numberControl%3A%20any%3B%0A%20%20public%20pickerControl%3A%20any%3B%0A%20%20public%20textForm%3A%20any%3B%0A%0A%20%20constructor(private%20modalRef%3A%20NovoModalRef%2C%20private%20formUtils%3A%20FormUtils)%20%7B%0A%20%20%20%20this.formUtils%20%3D%20formUtils%3B%0A%20%20%20%20this.modalRef%20%3D%20modalRef%3B%0A%20%20%7D%0A%0A%20%20ngOnInit()%20%7B%0A%20%20%20%20this.textControl%20%3D%20new%20TextBoxControl(%7B%20key%3A%20'text'%2C%20label%3A%20'Text%20Box'%20%7D)%3B%0A%20%20%20%20this.emailControl%20%3D%20new%20TextBoxControl(%7B%20type%3A%20'email'%2C%20key%3A%20'email'%2C%20label%3A%20'Email'%20%7D)%3B%0A%20%20%20%20this.numberControl%20%3D%20new%20TextBoxControl(%7B%20type%3A%20'number'%2C%20key%3A%20'number'%2C%20label%3A%20'Number'%20%7D)%3B%0A%20%20%20%20this.pickerControl%20%3D%20new%20PickerControl(%7B%0A%20%20%20%20%20%20key%3A%20'picker'%2C%0A%20%20%20%20%20%20multiple%3A%20true%2C%0A%20%20%20%20%20%20label%3A%20'Picker'%2C%0A%20%20%20%20%20%20required%3A%20true%2C%0A%20%20%20%20%20%20config%3A%20%7B%0A%20%20%20%20%20%20%20%20resultsTemplate%3A%20PickerResults%2C%0A%20%20%20%20%20%20%20%20options%3A%20%5B'Apple'%2C%20'Banana'%2C%20'Grapes'%2C%20'Orange'%2C%20'Pear'%5D%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%7D)%3B%0A%0A%20%20%20%20this.textForm%20%3D%20this.formUtils.toFormGroup(%5Bthis.textControl%2C%20this.emailControl%2C%20this.numberControl%2C%20this.pickerControl%5D)%3B%0A%20%20%7D%0A%20%20close()%20%7B%0A%20%20%20%20this.modalRef.close()%3B%0A%20%20%7D%0A%7D%0A%0A%2F**%0A%20*%20%40title%20Modal%20Edit%20Form%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20selector%3A%20'modal-edit-form-example'%2C%0A%20%20templateUrl%3A%20'modal-edit-form-example.html'%2C%0A%20%20styleUrls%3A%20%5B'modal-edit-form-example.css'%5D%2C%0A%7D)%0Aexport%20class%20ModalEditFormExample%20%7B%0A%20%20constructor(private%20modalService%3A%20NovoModalService)%20%7B%7D%0A%20%20showModal()%20%7B%0A%20%20%20%20this.modalService.open(ModalEditFormDemo)%3B%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20CSS%20for%20this%20example%20*%2F%0A%3Ahost%20%7B%0A%20%20display%3A%20block%3B%0A%20%20background%3A%20rgba(0%2C%200%2C%200%2C%200.55)%3B%0A%20%20padding%3A%2035px%200%3B%0A%20%20position%3A%20relative%3B%0A%20%20text-align%3A%20center%3B%0A%7D%0A`,
        htmlSource: `%3Cbutton%20data-automation-id%3D%22modal-trigger%22%20theme%3D%22secondary%22%20(click)%3D%22showModal()%22%3EShow%20Me%20%3A)%3C%2Fbutton%3E%0A`,
        selectorName: 'ModalEditFormExample, ModalEditFormDemo'
    },
    'success-modal': {
        title: 'Success Modal Example',
        component: SuccessModalExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0Aimport%20%7B%20NovoModalService%2C%20NovoModalRef%20%7D%20from%20'novo-elements'%3B%0A%0A%40Component(%7B%0A%20%20selector%3A%20'modal-success-demo'%2C%0A%20%20template%3A%20%60%0A%20%20%3Cnovo-notification%20type%3D%22success%22%3E%0A%20%20%20%20%3Ch1%3EWoooo!%3C%2Fh1%3E%0A%20%20%20%20%3Ch2%3EYou%20did%20something%20awesome!%3C%2Fh2%3E%0A%20%20%20%20%3Cbutton%20theme%3D%22primary%22%20icon%3D%22check%22%20(click)%3D%22close()%22%3EI'm%20awesome%3C%2Fbutton%3E%0A%20%20%3C%2Fnovo-notification%3E%0A%60%2C%0A%7D)%0Aexport%20class%20ModalSuccessDemo%20%7B%0A%20%20constructor(private%20modalRef%3A%20NovoModalRef)%20%7B%7D%0A%20%20close()%20%7B%0A%20%20%20%20this.modalRef.close()%3B%0A%20%20%7D%0A%7D%0A%0A%2F**%0A%20*%20%40title%20Success%20Modal%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20selector%3A%20'success-modal-example'%2C%0A%20%20templateUrl%3A%20'success-modal-example.html'%2C%0A%20%20styleUrls%3A%20%5B'success-modal-example.css'%5D%2C%0A%7D)%0Aexport%20class%20SuccessModalExample%20%7B%0A%20%20constructor(private%20modalService%3A%20NovoModalService)%20%7B%7D%0A%20%20showModal()%20%7B%0A%20%20%20%20this.modalService.open(ModalSuccessDemo)%3B%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20CSS%20for%20this%20example%20*%2F%0A%3Ahost%20%7B%0A%20%20display%3A%20block%3B%0A%20%20background%3A%20rgba(0%2C%200%2C%200%2C%200.55)%3B%0A%20%20padding%3A%2035px%200%3B%0A%20%20position%3A%20relative%3B%0A%20%20text-align%3A%20center%3B%0A%7D%0A`,
        htmlSource: `%3Cbutton%20data-automation-id%3D%22modal-trigger%22%20theme%3D%22secondary%22%20(click)%3D%22showModal()%22%3EShow%20Me%20%3A)%3C%2Fbutton%3E%0A`,
        selectorName: 'SuccessModalExample, ModalSuccessDemo'
    },
    'warning-modal': {
        title: 'Warning Modal Example',
        component: WarningModalExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0Aimport%20%7B%20NovoModalService%2C%20NovoModalRef%20%7D%20from%20'novo-elements'%3B%0A%0A%40Component(%7B%0A%20%20selector%3A%20'modal-warning-demo'%2C%0A%20%20template%3A%20%60%0A%20%20%3Cnovo-notification%20type%3D%22warning%22%3E%0A%20%20%20%20%3Ch1%3EThis%20action%20will%20delete%2025%20records.%3C%2Fh1%3E%0A%20%20%20%20%3Ch2%3EAre%20you%20sure%20you%20wish%20to%20continue%3F%3C%2Fh2%3E%0A%20%20%20%20%3Cbutton%20theme%3D%22standard%22%20(click)%3D%22close()%22%3ECancel%3C%2Fbutton%3E%0A%20%20%20%20%3Cbutton%20theme%3D%22primary%22%20color%3D%22negative%22%20icon%3D%22delete%22%20(click)%3D%22close()%22%3EDelete%3C%2Fbutton%3E%0A%20%20%3C%2Fnovo-notification%3E%0A%60%2C%0A%7D)%0Aexport%20class%20ModalWarningDemo%20%7B%0A%20%20constructor(private%20modalRef%3A%20NovoModalRef)%20%7B%7D%0A%20%20close()%20%7B%0A%20%20%20%20this.modalRef.close()%3B%0A%20%20%7D%0A%7D%0A%0A%2F**%0A%20*%20%40title%20Warning%20Modal%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20selector%3A%20'warning-modal-example'%2C%0A%20%20templateUrl%3A%20'warning-modal-example.html'%2C%0A%20%20styleUrls%3A%20%5B'warning-modal-example.css'%5D%2C%0A%7D)%0Aexport%20class%20WarningModalExample%20%7B%0A%20%20constructor(private%20modalService%3A%20NovoModalService)%20%7B%7D%0A%20%20showModal()%20%7B%0A%20%20%20%20this.modalService.open(ModalWarningDemo)%3B%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20CSS%20for%20this%20example%20*%2F%0A%3Ahost%20%7B%0A%20%20display%3A%20block%3B%0A%20%20background%3A%20rgba(0%2C%200%2C%200%2C%200.55)%3B%0A%20%20padding%3A%2035px%200%3B%0A%20%20position%3A%20relative%3B%0A%20%20text-align%3A%20center%3B%0A%7D%0A`,
        htmlSource: `%3Cbutton%20data-automation-id%3D%22modal-trigger%22%20theme%3D%22secondary%22%20(click)%3D%22showModal()%22%3EShow%20Me%20%3A)%3C%2Fbutton%3E%0A`,
        selectorName: 'WarningModalExample, ModalWarningDemo'
    },
    'pluralize': {
        title: 'Pluralize Example',
        component: PluralizeExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Pluralize%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20selector%3A%20'pluralize-example'%2C%0A%20%20templateUrl%3A%20'pluralize-example.html'%2C%0A%20%20styleUrls%3A%20%5B'pluralize-example.css'%5D%2C%0A%7D)%0Aexport%20class%20PluralizeExample%20%7B%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cp%3E%7B%7B'Kitty'%20%7C%20plural%7D%7D%3C%2Fp%3E%0A%3Cp%3E%7B%7B'Cat'%20%7C%20plural%7D%7D%3C%2Fp%3E%0A`
    },
    'pop-over-auto-placement': {
        title: 'PopOver with Automatic Positioning Example',
        component: PopOverAutoPlacementExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20PopOver%20with%20Automatic%20Positioning%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20selector%3A%20'pop-over-auto-placement-example'%2C%0A%20%20templateUrl%3A%20'pop-over-auto-placement-example.html'%2C%0A%20%20styleUrls%3A%20%5B'pop-over-auto-placement-example.css'%5D%2C%0A%7D)%0Aexport%20class%20PopOverAutoPlacementExample%20%7B%7D%0A`,
        cssSource: `%2F**%20CSS%20for%20this%20example%20*%2F%0A%3Ahost%20%7B%0A%20%20margin%3A%20auto%3B%0A%20%20padding%3A%2020px%2030px%3B%0A%20%20position%3A%20relative%3B%0A%20%20display%3A%20flex%3B%0A%7D%0A%0A%3Ahost%20%3E%20span%20%7B%0A%20%20cursor%3A%20pointer%3B%0A%20%20margin%3A%20auto%3B%0A%7D%0A`,
        htmlSource: `%3Cspan%20popover%3D%22If%20the%20placement%20of%20the%20PopOver%20will%20make%20it%20appear%20off-screen%2C%20then%20it%20will%20be%20automatically%20adjusted%20to%20appear%20on%20the%20opposite%20side.%20For%20example%3A%20this%20PopOver%20should%20appear%20below%20the%20element.%26%2313%3B%26%2310%3B%20%26%2313%3B%26%2310%3B%20%26%2313%3B%26%2310%3BNeed%20to%20make%20extra%20space%20so%20this%20PopOver%20would%20actually%20appear%20below%20the%20screen.%22%0A%20%20%20%20popoverTitle%3D%22PopOver%20Moves%20to%20Top%20if%20near%20Bottom%20of%20Screen%22%0A%20%20%20%20popoverPlacement%3D%22bottom%22%0A%20%20%20%20%5BpopoverOnHover%5D%3D%22true%22%3E%0A%20%20%20%20Hover%20Me%0A%3C%2Fspan%3E%0A%3Cspan%20popover%3D%22Too%20small%20to%20drop%20below%20screen.%22%0A%20%20%20%20popoverTitle%3D%22PopOver%20Won't%20Change%22%0A%20%20%20%20popoverPlacement%3D%22bottom%22%0A%20%20%20%20%5BpopoverOnHover%5D%3D%22true%22%3E%0A%20%20%20%20Hover%20Me%20Next%0A%3C%2Fspan%3E%0A`
    },
    'pop-over-behaviors': {
        title: 'PopOver Behaviors Example',
        component: PopOverBehaviorsExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20PopOver%20Behaviors%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20selector%3A%20'pop-over-behaviors-example'%2C%0A%20%20templateUrl%3A%20'pop-over-behaviors-example.html'%2C%0A%20%20styleUrls%3A%20%5B'pop-over-behaviors-example.css'%5D%2C%0A%7D)%0Aexport%20class%20PopOverBehaviorsExample%20%7B%7D%0A`,
        cssSource: `%2F**%20CSS%20for%20this%20example%20*%2F%0A%3Ahost%20%7B%0A%20%20margin%3A%20auto%3B%0A%20%20padding%3A%2020px%2030px%3B%0A%20%20position%3A%20relative%3B%0A%20%20display%3A%20flex%3B%0A%7D%0A%0A%3Ahost%20%3E%20span%20%7B%0A%20%20cursor%3A%20pointer%3B%0A%20%20margin%3A%20auto%3B%0A%7D%0A`,
        htmlSource: `%3Cspan%20class%3D%22popover-element%22%0A%20%20%20%20popover%3D%22PopOver%20appears%20when%20hovering%20over%20the%20element.%20When%20the%20mouse%20is%20no%20longer%20over%20the%20element%20or%20the%20PopOver%2C%20then%20it%20will%20be%20dismissed.%22%0A%20%20%20%20popoverTitle%3D%22ON%20HOVER%22%0A%20%20%20%20popoverPlacement%3D%22right%22%0A%20%20%20%20%5BpopoverOnHover%5D%3D%22true%22%3E%0AON%20HOVER%0A%3C%2Fspan%3E%0A%0A%3Cspan%20class%3D%22popover-element%22%0A%20%20%20%20popover%3D%22PopOver%20appears%20when%20clicking%20on%20the%20element.%20Dismiss%20it%20by%20clicking%20the%20element%20again.%22%0A%20%20%20%20popoverTitle%3D%22ON%20CLICK%22%0A%20%20%20%20popoverPlacement%3D%22right%22%3E%0AON%20CLICK%0A%3C%2Fspan%3E%0A%0A%3Cspan%20class%3D%22popover-element%22%0A%20%20%20%20popover%3D%22This%20PopOver%20has%20a%202000%20ms%20or%202%20second%20timeout%20on%20it.%20Dismiss%20it%20by%20clicking%20on%20the%20element%20or%20waiting%20for%20the%20timeout.%22%0A%20%20%20%20popoverTitle%3D%22ON%20CLICK%20WITH%20TIMEOUT%22%0A%20%20%20%20popoverPlacement%3D%22right%22%0A%20%20%20%20%5BpopoverDismissTimeout%5D%3D%222000%22%3E%0AON%20CLICK%20WITH%20TIMEOUT%0A%3C%2Fspan%3E%0A%0A%3Cspan%20class%3D%22popover-element%22%0A%20%20%20%20popover%3D%22This%20PopOver%20will%20never%20appear%20when%20clicking%20on%20the%20element%20or%20when%20hovering%20over%20the%20element.%22%0A%20%20%20%20popoverTitle%3D%22popoverDisabled%22%0A%20%20%20%20popoverPlacement%3D%22right%22%0A%20%20%20%20%5BpopoverDisabled%5D%3D%22true%22%3E%0ADISABLED%20POPOVER%0A%3C%2Fspan%3E%0A`
    },
    'pop-over-dynamic': {
        title: 'PopOver with Dynamic HTML Template Example',
        component: PopOverDynamicExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20PopOver%20with%20Dynamic%20HTML%20Template%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20selector%3A%20'pop-over-dynamic-example'%2C%0A%20%20templateUrl%3A%20'pop-over-dynamic-example.html'%2C%0A%20%20styleUrls%3A%20%5B'pop-over-dynamic-example.css'%5D%2C%0A%7D)%0Aexport%20class%20PopOverDynamicExample%20%7B%7D%0A`,
        cssSource: `%2F**%20CSS%20for%20this%20example%20*%2F%0A%3Ahost%20%7B%0A%20%20margin%3A%20auto%3B%0A%20%20padding%3A%2020px%2030px%3B%0A%20%20position%3A%20relative%3B%0A%20%20display%3A%20flex%3B%0A%7D%0A%0A%3Ahost%20%3E%20span%20%7B%0A%20%20cursor%3A%20pointer%3B%0A%20%20margin%3A%20auto%3B%0A%7D%0A`,
        htmlSource: `%3Cpopover-content%0A%20%20%20%20%23dynamicHtmlPopOver%0A%20%20%20%20title%3D%22this%20header%20can%20be%20omitted%22%0A%20%20%20%20placement%3D%22right%22%3E%0A%0A%20%20%20%20%3Cb%3EVery%3C%2Fb%3E%20%3Cspan%20style%3D%22color%3A%20%23C21F39%22%3EDynamic%3C%2Fspan%3E%20%3Cspan%20style%3D%22color%3A%20%2300b3ee%22%3EReusable%3C%2Fspan%3E%0A%20%20%20%20%3Cb%3E%3Ci%3E%3Cspan%20style%3D%22color%3A%20%23ffc520%22%3EPopover%20With%3C%2Fspan%3E%3C%2Fi%3E%3C%2Fb%3E%20%3Csmall%3EHtml%20support%3C%2Fsmall%3E.%20Click%20outside%20of%20this%20popover%20and%20it%20will%20be%20dismissed%20automatically.%0A%20%20%20%20%3Cu%20(click)%3D%22dynamicHtmlPopOver.hide()%22%20style%3D%22cursor%3A%20pointer%22%3EOr%20click%20here%20to%20close%20it%3C%2Fu%3E%20and%20can%20listen%20to%20the%20onHidden%20or%20onShown%20events%20to%20perform%20additional%20tasks.%0A%3C%2Fpopover-content%3E%0A%0A%3Cspan%20%5Bpopover%5D%3D%22dynamicHtmlPopOver%22%3EClick%20to%20see%20a%20popover%20with%20dynamic%20html%3C%2Fspan%3E%0A`
    },
    'pop-over-horizontal': {
        title: 'PopOvers with Horizontal Positioning',
        component: PopOverHorizontalExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20PopOvers%20with%20Horizontal%20Positioning%0A%20*%2F%0A%40Component(%7B%0A%20%20selector%3A%20'pop-over-horizontal-example'%2C%0A%20%20templateUrl%3A%20'pop-over-horizontal-example.html'%2C%0A%20%20styleUrls%3A%20%5B'pop-over-horizontal-example.css'%5D%2C%0A%7D)%0Aexport%20class%20PopOverHorizontalExample%20%7B%7D%0A`,
        cssSource: `%2F**%20CSS%20for%20this%20example%20*%2F%0A%3Ahost%20%7B%0A%20%20margin%3A%20auto%3B%0A%20%20padding%3A%2020px%2030px%3B%0A%20%20position%3A%20relative%3B%0A%20%20display%3A%20flex%3B%0A%7D%0A%0A%3Ahost%20%3E%20span%20%7B%0A%20%20cursor%3A%20pointer%3B%0A%20%20margin%3A%20auto%3B%0A%7D%0A`,
        htmlSource: `%3Cspan%20popover%3D%22Popover%20is%20on%20the%20top%20side%20and%20to%20the%20right%20of%20the%20element.%20Can%20also%20apply%20'left'%20to%20'top'%20placement%20PopOvers.%22%0A%20%20%20%20popoverTitle%3D%22Top-Right%20PopOver%22%0A%20%20%20%20popoverPlacement%3D%22top-right%22%0A%20%20%20%20%5BpopoverOnHover%5D%3D%22true%22%3E%0A%20%20%20%20TOP-RIGHT%0A%3C%2Fspan%3E%0A%3Cspan%20popover%3D%22Popover%20is%20on%20the%20bottom%20side%20and%20to%20the%20left%20of%20the%20element.%20Can%20also%20apply%20'right'%20to%20'bottom'%20placement%20PopOvers.%22%0A%20%20%20%20popoverTitle%3D%22Bottom-Left%20PopOver%22%0A%20%20%20%20popoverPlacement%3D%22bottom-left%22%0A%20%20%20%20%5BpopoverOnHover%5D%3D%22true%22%3E%0A%20%20%20%20BOTTOM-LEFT%0A%3C%2Fspan%3E%0A`
    },
    'pop-over-placement': {
        title: 'PopOver Placement Example',
        component: PopOverPlacementExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20PopOver%20Placement%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20selector%3A%20'pop-over-placement-example'%2C%0A%20%20templateUrl%3A%20'pop-over-placement-example.html'%2C%0A%20%20styleUrls%3A%20%5B'pop-over-placement-example.css'%5D%2C%0A%7D)%0Aexport%20class%20PopOverPlacementExample%20%7B%7D%0A`,
        cssSource: `%2F**%20CSS%20for%20this%20example%20*%2F%0A%3Ahost%20%7B%0A%20%20margin%3A%20auto%3B%0A%20%20padding%3A%2020px%2030px%3B%0A%20%20position%3A%20relative%3B%0A%20%20display%3A%20flex%3B%0A%7D%0A%0A%3Ahost%20%3E%20span%20%7B%0A%20%20cursor%3A%20pointer%3B%0A%20%20margin%3A%20auto%3B%0A%7D%0A`,
        htmlSource: `%3Cspan%20popover%3D%22Popover%20is%20to%20left%20of%20element%22%20popoverTitle%3D%22Left%20PopOver%22%20popoverPlacement%3D%22left%22%20%5BpopoverOnHover%5D%3D%22true%22%3ELEFT%3C%2Fspan%3E%0A%3Cspan%20popover%3D%22Popover%20is%20to%20right%20of%20element%22%20popoverTitle%3D%22Right%20PopOver%22%20popoverPlacement%3D%22right%22%20%5BpopoverOnHover%5D%3D%22true%22%3ERIGHT%3C%2Fspan%3E%0A%3Cspan%20popover%3D%22Popover%20is%20above%20the%20element%22%20popoverTitle%3D%22Top%20PopOver%22%20popoverPlacement%3D%22top%22%20%5BpopoverOnHover%5D%3D%22true%22%3ETOP%3C%2Fspan%3E%0A%3Cspan%20popover%3D%22Popover%20is%20below%20the%20element%22%20popoverTitle%3D%22Bottom%20PopOver%22%20popoverPlacement%3D%22bottom%22%20%5BpopoverOnHover%5D%3D%22true%22%3EBOTTOM%3C%2Fspan%3E%0A`
    },
    'pop-over-vertical': {
        title: 'PopOvers with Vertical Positioning',
        component: PopOverVerticalExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20PopOvers%20with%20Vertical%20Positioning%0A%20*%2F%0A%40Component(%7B%0A%20%20selector%3A%20'pop-over-vertical-example'%2C%0A%20%20templateUrl%3A%20'pop-over-vertical-example.html'%2C%0A%20%20styleUrls%3A%20%5B'pop-over-vertical-example.css'%5D%2C%0A%7D)%0Aexport%20class%20PopOverVerticalExample%20%7B%7D%0A`,
        cssSource: `%2F**%20CSS%20for%20this%20example%20*%2F%0A%3Ahost%20%7B%0A%20%20margin%3A%20auto%3B%0A%20%20padding%3A%2020px%2030px%3B%0A%20%20position%3A%20relative%3B%0A%20%20display%3A%20flex%3B%0A%7D%0A%0A%3Ahost%20%3E%20span%20%7B%0A%20%20cursor%3A%20pointer%3B%0A%20%20margin%3A%20auto%3B%0A%7D%0A`,
        htmlSource: `%3Cspan%20popover%3D%22Popover%20is%20on%20the%20right%20side%20and%20below%20the%20element.%20Can%20also%20apply%20'top'%20to%20'right'%20placement%20PopOvers.%22%0A%20%20%20%20popoverTitle%3D%22Right-Bottom%20PopOver%22%0A%20%20%20%20popoverPlacement%3D%22right-bottom%22%0A%20%20%20%20%5BpopoverOnHover%5D%3D%22true%22%3E%0A%20%20%20%20RIGHT-BOTTOM%0A%3C%2Fspan%3E%0A%3Cspan%20popover%3D%22Popover%20is%20on%20the%20left%20side%20and%20above%20the%20element.%20Can%20also%20apply%20'bottom'%20to%20'left'%20placement%20PopOvers.%22%0A%20%20%20%20popoverTitle%3D%22Left-Top%20PopOver%22%0A%20%20%20%20popoverPlacement%3D%22left-top%22%0A%20%20%20%20%5BpopoverOnHover%5D%3D%22true%22%3E%0A%20%20%20%20LEFT-TOP%0A%3C%2Fspan%3E%0A`
    },
    'security': {
        title: 'Security Example',
        component: SecurityExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0Aimport%20%7B%20Security%20%7D%20from%20'novo-elements'%3B%0A%0A%2F**%0A%20*%20%40title%20Security%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20selector%3A%20'security-example'%2C%0A%20%20templateUrl%3A%20'security-example.html'%2C%0A%20%20styleUrls%3A%20%5B'security-example.css'%5D%2C%0A%7D)%0Aexport%20class%20SecurityExample%20%7B%0A%20%20perms%20%3D%20%5B%5D%3B%0A%0A%20%20constructor(private%20security%3A%20Security)%20%7B%7D%0A%0A%20%20shufflePermissions()%3A%20void%20%7B%0A%20%20%20%20const%20numOfPerms%3A%20number%20%3D%20Math.floor(Math.random()%20*%202)%20%2B%201%3B%0A%20%20%20%20this.perms%20%3D%20this.shuffle(%5B'A'%2C%20'B'%2C%20'C'%5D).slice(0%2C%20numOfPerms)%3B%0A%20%20%20%20this.security.clear()%3B%0A%20%20%20%20this.security.grant(this.perms)%3B%0A%20%20%7D%0A%0A%20%20shuffle(array%3A%20string%5B%5D)%20%7B%0A%20%20%20%20let%20currentIndex%3A%20number%20%3D%20array.length%3B%0A%20%20%20%20let%20temporaryValue%3A%20string%3B%0A%20%20%20%20let%20randomIndex%3A%20number%3B%0A%0A%20%20%20%20%2F%2F%20While%20there%20remain%20elements%20to%20shuffle...%0A%20%20%20%20while%20(currentIndex%20!%3D%3D%200)%20%7B%0A%20%20%20%20%20%20%2F%2F%20Pick%20a%20remaining%20element...%0A%20%20%20%20%20%20randomIndex%20%3D%20Math.floor(Math.random()%20*%20currentIndex)%3B%0A%20%20%20%20%20%20currentIndex%20-%3D%201%3B%0A%20%20%20%20%20%20%2F%2F%20And%20swap%20it%20with%20the%20current%20element.%0A%20%20%20%20%20%20temporaryValue%20%3D%20array%5BcurrentIndex%5D%3B%0A%20%20%20%20%20%20array%5BcurrentIndex%5D%20%3D%20array%5BrandomIndex%5D%3B%0A%20%20%20%20%20%20array%5BrandomIndex%5D%20%3D%20temporaryValue%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20return%20array%3B%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cdiv%3E%0A%20%20%20%20%3Cp%20*bhUnless%3D%22'A'%22%3EShown%20if%20has%20permission%20%3Cstrong%3EA%3C%2Fstrong%3E%3C%2Fp%3E%0A%20%20%20%20%3Cp%20*bhUnless%3D%22'B'%22%3EShown%20if%20has%20permission%20%3Cstrong%3EB%3C%2Fstrong%3E%3C%2Fp%3E%0A%20%20%20%20%3Cp%20*bhUnless%3D%22'C'%22%3EShown%20if%20has%20permission%20%3Cstrong%3EC%3C%2Fstrong%3E%3C%2Fp%3E%0A%20%20%20%20%3Cp%20*bhUnless%3D%22'A%20%26%26%20B'%22%3EShown%20if%20has%20permissions%20%3Cstrong%3EA%20%26%26%20B%3C%2Fstrong%3E%3C%2Fp%3E%0A%20%20%20%20%3Cp%20*bhUnless%3D%22'A%20%26%26%20C'%22%3EShown%20if%20has%20permissions%20%3Cstrong%3EA%20%26%26%20C%3C%2Fstrong%3E%3C%2Fp%3E%0A%20%20%20%20%3Cp%20*bhUnless%3D%22'A%20%26%26%20B%20%26%26%20C'%22%3EShown%20if%20has%20permissions%20%3Cstrong%3EA%20%26%26%20B%20%26%26%20C%3C%2Fstrong%3E%3C%2Fp%3E%0A%20%20%20%20%3Cp%20*bhUnless%3D%22'A%20%7C%7C%20B'%22%3EShown%20if%20has%20permissions%20%3Cstrong%3EA%20%7C%7C%20B%3C%2Fstrong%3E%3C%2Fp%3E%0A%20%20%20%20%3Cp%3E%20Permissions%20are%20%3A%20%3Cstrong%3E%7B%7B%20perms%20%7C%20json%20%7D%7D%3C%2Fstrong%3E%3C%2Fp%3E%0A%20%20%20%20%3Cbutton%20(click)%3D%22shufflePermissions()%22%3EShuffle%3C%2Fbutton%3E%0A%3C%2Fdiv%3E%0A`
    },
    'basic-tip-well': {
        title: 'Basic Tip Well Example',
        component: BasicTipWellExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Basic%20Tip%20Well%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20selector%3A%20'basic-tip-well-example'%2C%0A%20%20templateUrl%3A%20'basic-tip-well-example.html'%2C%0A%20%20styleUrls%3A%20%5B'basic-tip-well-example.css'%5D%2C%0A%7D)%0Aexport%20class%20BasicTipWellExample%20%7B%0A%20%20public%20demoTip%3A%20string%20%3D%0A%20%20%20%20'Sed%20sodales%20ligula%20et%20fermentum%20bibendum.%20Aliquam%20tincidunt%20sagittis%20leo%20eget%20auctor.%20Fusce%20eu%20sagittis%20metus%2C%20ut%20viverra%20magna.%20Mauris%20mollis%20nisl%20nec%20libero%20tincidunt%20posuere.'%3B%0A%0A%20%20public%20clearLocalStorage()%20%7B%0A%20%20%20%20localStorage.removeItem('novo-tw_Demo')%3B%0A%20%20%20%20location.reload()%3B%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cnovo-tip-well%20name%3D%22Demo%22%20%5Btip%5D%3D%22demoTip%22%3E%3C%2Fnovo-tip-well%3E%0A%0A%3Cp%3EDid%20you%20hide%20the%20TipWell%3F%3C%2Fp%3E%0A%0A%3Cbutton%20theme%3D%22secondary%22%20(click)%3D%22clearLocalStorage()%22%3EReset%3C%2Fbutton%3E%20localStorage%20and%20Reload%0A`
    },
    'buttonless-tip-well': {
        title: 'Tip Well with No Button Example',
        component: ButtonlessTipWellExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Tip%20Well%20with%20No%20Button%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20selector%3A%20'buttonless-tip-well-example'%2C%0A%20%20templateUrl%3A%20'buttonless-tip-well-example.html'%2C%0A%20%20styleUrls%3A%20%5B'buttonless-tip-well-example.css'%5D%2C%0A%7D)%0Aexport%20class%20ButtonlessTipWellExample%20%7B%0A%20%20public%20demoTip%3A%20string%20%3D%0A%20%20%20%20'Sed%20sodales%20ligula%20et%20fermentum%20bibendum.%20Aliquam%20tincidunt%20sagittis%20leo%20eget%20auctor.%20Fusce%20eu%20sagittis%20metus%2C%20ut%20viverra%20magna.%20Mauris%20mollis%20nisl%20nec%20libero%20tincidunt%20posuere.'%3B%0A%0A%20%20clearLocalStorage()%20%7B%0A%20%20%20%20localStorage.removeItem('novo-tw_Demo')%3B%0A%20%20%20%20location.reload()%3B%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cnovo-tip-well%20name%3D%22Demo%22%20%5Btip%5D%3D%22demoTip%22%20%5Bbutton%5D%3D%22false%22%3E%3C%2Fnovo-tip-well%3E%0A%0A%3Cp%3EDid%20you%20hide%20the%20TipWell%3F%3C%2Fp%3E%0A%0A%3Cbutton%20theme%3D%22secondary%22%20(click)%3D%22clearLocalStorage()%22%3EReset%3C%2Fbutton%3E%20localStorage%20and%20Reload%0A`
    },
    'html-tip-well': {
        title: 'Tip Well with HTML Example',
        component: HtmlTipWellExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Tip%20Well%20with%20HTML%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20selector%3A%20'html-tip-well-example'%2C%0A%20%20templateUrl%3A%20'html-tip-well-example.html'%2C%0A%20%20styleUrls%3A%20%5B'html-tip-well-example.css'%5D%2C%0A%7D)%0Aexport%20class%20HtmlTipWellExample%20%7B%0A%20%20public%20demoHtmlTip%3A%20string%20%3D%20%60%0A%20%20%20%20%3Ch2%3ETitle%3C%2Fh2%3E%0A%20%20%20%20%3Cp%3E%0A%20%20%20%20%20%20%3Cdiv%20style%3D%22color%3Ared%22%3EThis%20text%20is%20RED%3C%2Fdiv%3E%0A%20%20%20%20%20%20%3Cdiv%3E%3Cb%3EThis%20text%20is%20BOLD%3C%2Fb%3E%3C%2Fdiv%3E%0A%20%20%20%20%20%20%3Cdiv%3E%3Ci%3EThis%20text%20is%20ITALIC%3C%2Fi%3E%3C%2Fdiv%3E%0A%20%20%20%20%3C%2Fp%3E%0A%20%20%20%20%3Ctable%3E%0A%20%20%20%20%20%20%20%20%3Ctr%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%3Cth%20width%3D%22305px%22%3EFirstname%3C%2Fth%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%3Cth%20width%3D%22305px%22%3ELastname%3C%2Fth%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%3Cth%3EAge%3C%2Fth%3E%0A%20%20%20%20%20%20%20%20%3C%2Ftr%3E%0A%20%20%20%20%20%20%20%20%3Ctr%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%3Ctd%3EJeff%3C%2Ftd%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%3Ctd%3ESmith%3C%2Ftd%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%3Ctd%3E20%3C%2Ftd%3E%0A%20%20%20%20%20%20%20%20%3C%2Ftr%3E%0A%20%20%20%20%20%20%20%20%3Ctr%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%3Ctd%3ESteve%3C%2Ftd%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%3Ctd%3EWhite%3C%2Ftd%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%3Ctd%3E25%3C%2Ftd%3E%0A%20%20%20%20%20%20%20%20%3C%2Ftr%3E%0A%20%20%20%20%3C%2Ftable%3E%60%3B%0A%0A%20%20clearLocalStorage()%20%7B%0A%20%20%20%20localStorage.removeItem('novo-tw_Demo')%3B%0A%20%20%20%20location.reload()%3B%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cnovo-tip-well%20name%3D%22Demo%22%20%5Bsanitize%5D%3D%22false%22%20%5Btip%5D%3D%22demoHtmlTip%22%3E%3C%2Fnovo-tip-well%3E%0A%0A%3Cp%3EDid%20you%20hide%20the%20TipWell%3F%3C%2Fp%3E%0A%0A%3Cbutton%20theme%3D%22secondary%22%20(click)%3D%22clearLocalStorage()%22%3EReset%3C%2Fbutton%3E%20localStorage%20and%20Reload%0A`
    },
    'icon-tip-well': {
        title: 'Tip Well with Icon Example',
        component: IconTipWellExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Tip%20Well%20with%20Icon%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20selector%3A%20'icon-tip-well-example'%2C%0A%20%20templateUrl%3A%20'icon-tip-well-example.html'%2C%0A%20%20styleUrls%3A%20%5B'icon-tip-well-example.css'%5D%2C%0A%7D)%0Aexport%20class%20IconTipWellExample%20%7B%0A%20%20public%20demoTip%3A%20string%20%3D%0A%20%20%20%20'Sed%20sodales%20ligula%20et%20fermentum%20bibendum.%20Aliquam%20tincidunt%20sagittis%20leo%20eget%20auctor.%20Fusce%20eu%20sagittis%20metus%2C%20ut%20viverra%20magna.%20Mauris%20mollis%20nisl%20nec%20libero%20tincidunt%20posuere.'%3B%0A%0A%20%20clearLocalStorage()%20%7B%0A%20%20%20%20localStorage.removeItem('novo-tw_Demo')%3B%0A%20%20%20%20location.reload()%3B%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cnovo-tip-well%20name%3D%22Demo%22%20%5Btip%5D%3D%22demoTip%22%20icon%3D%22info%22%20button%3D%22false%22%3E%3C%2Fnovo-tip-well%3E%0A%0A%3Cp%3EDid%20you%20hide%20the%20TipWell%3F%3C%2Fp%3E%0A%0A%3Cbutton%20theme%3D%22secondary%22%20(click)%3D%22clearLocalStorage()%22%3EReset%3C%2Fbutton%3E%20localStorage%20and%20Reload%0A`
    },
    'toast-service': {
        title: 'Toaster Service Usage',
        component: ToastServiceExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0Aimport%20%7B%20NovoToastService%20%7D%20from%20'novo-elements'%3B%0A%0A%2F**%0A%20*%20%40title%20Toaster%20Service%20Usage%0A%20*%2F%0A%40Component(%7B%0A%20%20selector%3A%20'toast-service-example'%2C%0A%20%20templateUrl%3A%20'toast-service-example.html'%2C%0A%20%20styleUrls%3A%20%5B'toast-service-example.css'%5D%2C%0A%7D)%0Aexport%20class%20ToastServiceExample%20%7B%0A%20%20public%20options%3A%20any%20%3D%20%7B%0A%20%20%20%20title%3A%20'Title'%2C%0A%20%20%20%20message%3A%20'Some%20Message...'%2C%0A%20%20%7D%3B%0A%0A%20%20constructor(private%20toaster%3A%20NovoToastService)%20%7B%7D%0A%0A%20%20toastToggled(arg)%20%7B%0A%20%20%20%20if%20(arg%20%3D%3D%3D%20'top')%20%7B%0A%20%20%20%20%20%20this.options%20%3D%20%7B%0A%20%20%20%20%20%20%20%20title%3A%20'Top'%2C%0A%20%20%20%20%20%20%20%20message%3A%20'This%20positioning%20is%20fixedTop'%2C%0A%20%20%20%20%20%20%20%20icon%3A%20'coffee'%2C%0A%20%20%20%20%20%20%20%20theme%3A%20'success'%2C%0A%20%20%20%20%20%20%20%20position%3A%20'fixedTop'%2C%0A%20%20%20%20%20%20%7D%3B%0A%20%20%20%20%7D%20else%20if%20(arg%20%3D%3D%3D%20'bottom')%20%7B%0A%20%20%20%20%20%20this.options%20%3D%20%7B%0A%20%20%20%20%20%20%20%20title%3A%20'Bottom'%2C%0A%20%20%20%20%20%20%20%20message%3A%20'This%20positioning%20is%20fixedBottom'%2C%0A%20%20%20%20%20%20%20%20icon%3A%20'check'%2C%0A%20%20%20%20%20%20%20%20theme%3A%20'warning-outline'%2C%0A%20%20%20%20%20%20%20%20position%3A%20'fixedBottom'%2C%0A%20%20%20%20%20%20%20%20hideDelay%3A%201000000%2C%0A%20%20%20%20%20%20%7D%3B%0A%20%20%20%20%7D%20else%20if%20(arg%20%3D%3D%3D%20'growlTopRight')%20%7B%0A%20%20%20%20%20%20this.options%20%3D%20%7B%0A%20%20%20%20%20%20%20%20title%3A%20'Growl'%2C%0A%20%20%20%20%20%20%20%20message%3A%20'This%20positioning%20is%20growlTopRight'%2C%0A%20%20%20%20%20%20%20%20icon%3A%20'times'%2C%0A%20%20%20%20%20%20%20%20theme%3A%20'danger'%2C%0A%20%20%20%20%20%20%20%20position%3A%20'growlTopRight'%2C%0A%20%20%20%20%20%20%20%20hideDelay%3A%20100000000%2C%0A%20%20%20%20%20%20%7D%3B%0A%20%20%20%20%7D%20else%20if%20(arg%20%3D%3D%3D%20'growlTopLeft')%20%7B%0A%20%20%20%20%20%20this.options%20%3D%20%7B%0A%20%20%20%20%20%20%20%20title%3A%20'Growl'%2C%0A%20%20%20%20%20%20%20%20message%3A%20'This%20positioning%20is%20growlTopLeft'%2C%0A%20%20%20%20%20%20%20%20icon%3A%20'coffee'%2C%0A%20%20%20%20%20%20%20%20theme%3A%20'ocean'%2C%0A%20%20%20%20%20%20%20%20position%3A%20'growlTopLeft'%2C%0A%20%20%20%20%20%20%20%20hideDelay%3A%20100000000%2C%0A%20%20%20%20%20%20%7D%3B%0A%20%20%20%20%7D%20else%20if%20(arg%20%3D%3D%3D%20'growlBottomRight')%20%7B%0A%20%20%20%20%20%20this.options%20%3D%20%7B%0A%20%20%20%20%20%20%20%20title%3A%20'Growl'%2C%0A%20%20%20%20%20%20%20%20message%3A%20'This%20positioning%20is%20growlTopRight'%2C%0A%20%20%20%20%20%20%20%20icon%3A%20'times'%2C%0A%20%20%20%20%20%20%20%20theme%3A%20'danger'%2C%0A%20%20%20%20%20%20%20%20position%3A%20'growlBottomRight'%2C%0A%20%20%20%20%20%20%7D%3B%0A%20%20%20%20%7D%20else%20if%20(arg%20%3D%3D%3D%20'growlBottomLeft')%20%7B%0A%20%20%20%20%20%20this.options%20%3D%20%7B%0A%20%20%20%20%20%20%20%20title%3A%20'Growl'%2C%0A%20%20%20%20%20%20%20%20message%3A%20'This%20positioning%20is%20growlTopLeft'%2C%0A%20%20%20%20%20%20%20%20icon%3A%20'coffee'%2C%0A%20%20%20%20%20%20%20%20theme%3A%20'ocean'%2C%0A%20%20%20%20%20%20%20%20position%3A%20'growlBottomLeft'%2C%0A%20%20%20%20%20%20%7D%3B%0A%20%20%20%20%7D%0A%20%20%20%20this.toaster.alert(this.options)%3B%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cbutton%20theme%3D%22dialogue%22%20color%3D%22success%22%20icon%3D%22coffee%22%20(click)%3D%22toastToggled('top')%22%20data-automation-id%3D%22toast-trigger%22%3EFixed%20Top%3C%2Fbutton%3E%0A%3Cbutton%20theme%3D%22dialogue%22%20color%3D%22primary%22%20icon%3D%22check%22%20(click)%3D%22toastToggled('bottom')%22%3EFixed%20Bottom%3C%2Fbutton%3E%0A%3Cbutton%20theme%3D%22dialogue%22%20color%3D%22negative%22%20icon%3D%22times%22%20(click)%3D%22toastToggled('growlTopRight')%22%3EGrowl%3A%20Top%20Right%3C%2Fbutton%3E%0A%3Cbutton%20theme%3D%22dialogue%22%20color%3D%22primary%22%20icon%3D%22coffee%22%20(click)%3D%22toastToggled('growlTopLeft')%22%3EGrowl%3A%20Top%20Left%3C%2Fbutton%3E%0A%3Cbutton%20theme%3D%22dialogue%22%20color%3D%22negative%22%20icon%3D%22times%22%20(click)%3D%22toastToggled('growlBottomRight')%22%3EGrowl%3A%20Bottom%20Right%3C%2Fbutton%3E%0A%3Cbutton%20theme%3D%22dialogue%22%20color%3D%22primary%22%20icon%3D%22coffee%22%20(click)%3D%22toastToggled('growlBottomLeft')%22%3EGrowl%3A%20Bottom%20Left%3C%2Fbutton%3E%0A`
    },
    'toast-usage': {
        title: 'Static Toast Usage',
        component: ToastUsageExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0Aimport%20%7B%20NovoToastService%20%7D%20from%20'novo-elements'%3B%0A%0A%2F**%0A%20*%20%40title%20Static%20Toast%20Usage%0A%20*%2F%0A%40Component(%7B%0A%20%20selector%3A%20'toast-usage-example'%2C%0A%20%20templateUrl%3A%20'toast-usage-example.html'%2C%0A%20%20styleUrls%3A%20%5B'toast-usage-example.css'%5D%2C%0A%7D)%0Aexport%20class%20ToastUsageExample%20%7B%0A%20%20public%20themes%3A%20Array%3Cstring%3E%20%3D%20%5B'default'%2C%20'success'%2C%20'info'%2C%20'warning'%2C%20'danger'%5D%3B%0A%20%20public%20icons%3A%20Array%3Cstring%3E%20%3D%20%5B'add'%2C%20'check'%2C%20'clock'%2C%20'lock'%2C%20'caution'%5D%3B%0A%20%20public%20toast%3A%20any%20%3D%20%7B%0A%20%20%20%20theme%3A%20'danger'%2C%0A%20%20%20%20icon%3A%20'caution'%2C%0A%20%20%7D%3B%0A%0A%20%20changeToast()%20%7B%0A%20%20%20%20this.toast%20%3D%20%7B%0A%20%20%20%20%20%20theme%3A%20this.themes%5B(this.themes.indexOf(this.toast.theme)%20%2B%201)%20%25%20this.themes.length%5D%2C%0A%20%20%20%20%20%20icon%3A%20this.icons%5B(this.icons.indexOf(this.toast.icon)%20%2B%201)%20%25%20this.icons.length%5D%2C%0A%20%20%20%20%7D%3B%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cdiv%20class%3D%22fake-card%22%3E%0A%20%20%20%20%3Cheader%20title%3D%22John%20Deere%22%20icon%3D%22person%22%20theme%3D%22contact%22%3E%0A%20%20%20%20%20%20%20%20%3Cutils%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%3Cutil-action%20icon%3D%22flag%22%3E%3C%2Futil-action%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%3Cutil-action%20icon%3D%22refresh%22%3E%3C%2Futil-action%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%3Cutil-action%20icon%3D%22times%22%3E%3C%2Futil-action%3E%0A%20%20%20%20%20%20%20%20%3C%2Futils%3E%0A%20%20%20%20%3C%2Fheader%3E%0A%20%20%20%20%3Cnovo-toast%20%5Btheme%5D%3D%22toast.theme%22%20%5Bicon%5D%3D%22toast.icon%22%20title%3D%22Save%20Failed%22%20message%3D%22Oops!%20Looks%20like%20you're%20missing%20some%20required%20fields%22%3E%3C%2Fnovo-toast%3E%0A%20%20%20%20%3Cdiv%20class%3D%22content%22%3E%0A%20%20%20%20%20%20%20%20%3Cp%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20Lorem%20ipsum%20dolor%20sit%20amet%2C%20consectetur%20adipiscing%20elit%2C%20sed%0A%20%20%20%20%20%20%20%20%20%20%20%20do%20eiusmod%20tempor%20incididunt%20ut%20labore%20et%20dolore%0A%20%20%20%20%20%20%20%20%20%20%20%20magna%20aliqua.%20Ut%20enim%20ad%20minim%20veniam%2C%20quis%20nostrud%0A%20%20%20%20%20%20%20%20%20%20%20%20exercitation%20ullamco%20laboris%20nisi%20ut%20aliquip%20ex%20ea%0A%20%20%20%20%20%20%20%20%20%20%20%20commodo%20consequat.%20Duis%20aute%20irure%20dolor%20in%20reprehenderit%0A%20%20%20%20%20%20%20%20%20%20%20%20in%20voluptate%20velit%20esse%20cillum%20dolore%20eu%20fugiat%20nulla%0A%20%20%20%20%20%20%20%20%20%20%20%20pariatur.%20Excepteur%20sint%20occaecat%20cupidatat%20non%20proident%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20sunt%20in%20culpa%20qui%20officia%20deserunt%20mollit%20anim%20id%0A%20%20%20%20%20%20%20%20%20%20%20%20est%20laborum.%0A%20%20%20%20%20%20%20%20%3C%2Fp%3E%0A%20%20%20%20%20%20%20%20%3Cbutton%20(click)%3D%22changeToast()%22%3EChange%20toast!%3C%2Fbutton%3E%0A%20%20%20%20%3C%2Fdiv%3E%0A%3C%2Fdiv%3E%0A`
    },
    'tooltip-align': {
        title: 'Tooltip Align Example',
        component: TooltipAlignExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Tooltip%20Align%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20selector%3A%20'tooltip-align-example'%2C%0A%20%20templateUrl%3A%20'tooltip-align-example.html'%2C%0A%20%20styleUrls%3A%20%5B'tooltip-align-example.css'%5D%2C%0A%7D)%0Aexport%20class%20TooltipAlignExample%20%7B%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cspan%20tooltip%3D%22bottom-left%22%20tooltipPosition%3D%22bottom-left%22%3EBottom%20Left%3C%2Fspan%3E%0A%3Cspan%20tooltip%3D%22bottom-right%22%20tooltipPosition%3D%22bottom-right%22%3EBottom%20Right%3C%2Fspan%3E%0A%3Cspan%20tooltip%3D%22top-left%22%20tooltipPosition%3D%22top-left%22%3ETop%20Left%3C%2Fspan%3E%0A%3Cspan%20tooltip%3D%22top-right%22%20tooltipPosition%3D%22top-right%22%3ETop%20Right%3C%2Fspan%3E%0A`
    },
    'tooltip-options': {
        title: 'Tooltip Options Example',
        component: TooltipOptionsExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Tooltip%20Options%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20selector%3A%20'tooltip-options-example'%2C%0A%20%20templateUrl%3A%20'tooltip-options-example.html'%2C%0A%20%20styleUrls%3A%20%5B'tooltip-options-example.css'%5D%2C%0A%7D)%0Aexport%20class%20TooltipOptionsExample%20%7B%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cspan%20tooltip%3D%22ALWAYS%22%20tooltipAlways%3D%22true%22%3EAlways%20Shown%3C%2Fspan%3E%0A%3Cspan%20tooltip%3D%22ROUNDED%22%20tooltipRounded%3D%22true%22%3ERounded%3C%2Fspan%3E%0A%3Cspan%20tooltip%3D%22NO%20ANIMATE%22%20tooltipNoAnimate%3D%22true%22%3ENo%20Animation%3C%2Fspan%3E%0A%3Cspan%20tooltip%3D%22BOUNCE%22%20tooltipBounce%3D%22true%22%3EBounce%3C%2Fspan%3E%0A`
    },
    'tooltip-placement': {
        title: 'Tooltip Placement Example',
        component: TooltipPlacementExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Tooltip%20Placement%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20selector%3A%20'tooltip-placement-example'%2C%0A%20%20templateUrl%3A%20'tooltip-placement-example.html'%2C%0A%20%20styleUrls%3A%20%5B'tooltip-placement-example.css'%5D%2C%0A%7D)%0Aexport%20class%20TooltipPlacementExample%20%7B%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cspan%20tooltip%3D%22left%22%20tooltipPosition%3D%22left%22%3ELeft%3C%2Fspan%3E%0A%3Cspan%20tooltip%3D%22right%22%20tooltipPosition%3D%22right%22%3ERight%3C%2Fspan%3E%0A%3Cspan%20tooltip%3D%22top%22%20tooltipPosition%3D%22top%22%3ETop%3C%2Fspan%3E%0A%3Cspan%20tooltip%3D%22bottom%22%20tooltipPosition%3D%22bottom%22%3EBottom%3C%2Fspan%3E%0A`
    },
    'tooltip-sizes': {
        title: 'Tooltip Sizes Example',
        component: TooltipSizesExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Tooltip%20Sizes%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20selector%3A%20'tooltip-sizes-example'%2C%0A%20%20templateUrl%3A%20'tooltip-sizes-example.html'%2C%0A%20%20styleUrls%3A%20%5B'tooltip-sizes-example.css'%5D%2C%0A%7D)%0Aexport%20class%20TooltipSizesExample%20%7B%0A%20%20public%20mediumTooltip%3A%20string%20%3D%20%60Lorem%20Ipsum%5Cn%5Cn%20is%20simply%20dummy%20text%20of%20the%20printing%20and%20typesetting%20industry.%60%3B%0A%20%20public%20largeTooltip%3A%20string%20%3D%20%60Lorem%20Ipsum%5Cn%5Cn%20is%20simply%20dummy%20text%20of%20the%20printing%20and%20typesetting%20industry.%20Lorem%20Ipsum%20has%20been%20the%20industry's%20standard%20dummy%20text%20ever%20since%20the%201500s%2C%20when%20an%20unknown%20printer%20took%20a%20galley%20of%20type%20and%20scrambled%20it%20to%20make%20a%20type%20specimen%20book.%20It%20has%20survived%20not%20only%20five%20centuries%2C%20but%20also%20the%20leap%20into%20electronic%20typesetting%2C%20remaining%20essentially%20unchanged.%20It%20was%20popularised%20in%20the%201960s%20with%20the%20release%20of%20Letraset%20sheets%20containing%20Lorem%20Ipsum%20passages%2C%20and%20more%20recently%20with%20desktop%20publishing%20software%20like%20Aldus%20PageMaker%20including%20versions%20of%20Lorem%20Ipsum.%60%3B%0A%20%20public%20extraLargeTooltip%3A%20string%20%3D%20%60Lorem%20ipsum%20dolor%20sit%20amet%2C%20consectetur%20adipiscing%20elit.%20Duis%20placerat%20nisi%20at%20elit%20molestie%2C%20eget%20dapibus%20erat%20mattis.%20Sed%20nec%20est%20sit%20amet%20dolor%20hendrerit%20placerat%20quis%20vitae%20sapien.%20Nulla%20non%20consectetur%20lorem%2C%20nec%20ultricies%20lacus.%20Ut%20maximus%20eget%20tortor%20a%20bibendum.%20Vivamus%20vel%20mollis%20magna.%20Nullam%20sit%20amet%20urna%20a%20elit%20sollicitudin%20ultrices.%20Donec%20scelerisque%20dolor%20vel%20lacus%20blandit%20aliquam.%20Morbi%20tellus%20nunc%2C%20interdum%20eget%20laoreet%20vitae%2C%20tristique%20a%20odio.%20Maecenas%20ligula%20nisl%2C%20volutpat%20id%20augue%20vel%2C%20sollicitudin%20bibendum%20massa.%20Aenean%20dapibus%20quam%20nec%20ante%20volutpat%2C%20id%20tincidunt%20mauris%20malesuada.%20Aliquam%20vitae%20consectetur%20justo.%0A%0A%20%20%20%20Nunc%20vel%20felis%20in%20quam%20iaculis%20vulputate%20eu%20non%20erat.%20Phasellus%20vel%20purus%20eget%20est%20elementum%20tempus%20a%20non%20mauris.%20Mauris%20cursus%20convallis%20enim%2C%20non%20malesuada%20felis%20suscipit%20vel.%20Maecenas%20nec%20hendrerit%20erat.%20Morbi%20vehicula%20condimentum%20mi%20non%20gravida.%20Aenean%20varius%20risus%20arcu.%20Sed%20blandit%20ipsum%20sit%20amet%20tincidunt%20convallis.%20Praesent%20consectetur%20elementum%20nisi%2C%20sit%20amet%20placerat%20diam%20commodo%20at.%20Vivamus%20aliquet%20sagittis%20libero%2C%20id%20efficitur%20nisl%20varius%20eget.%20Aenean%20tempor%20augue%20a%20erat%20tincidunt%20hendrerit.%20Cras%20et%20dictum%20nisl.%20Sed%20pulvinar%20leo%20quis%20urna%20malesuada%20tincidunt.%20Sed%20enim%20tortor%2C%20semper%20egestas%20orci%20pellentesque%2C%20scelerisque%20egestas%20eros.%20Aliquam%20in%20ex%20sit%20amet%20tortor%20fringilla%20convallis.%0A%0A%20%20%20%20Nam%20ac%20nulla%20accumsan%2C%20tristique%20orci%20tincidunt%2C%20condimentum%20nunc.%20Fusce%20eget%20neque%20dolor.%20Vestibulum%20volutpat%2C%20libero%20non%20maximus%20maximus%2C%20libero%20ante%20semper%20tellus%2C%20et%20commodo%20lectus%20mi%20nec%20orci.%20Donec%20pretium%20pharetra%20cursus.%20Nam%20a%20egestas%20augue.%20Sed%20et%20condimentum%20lectus.%20Sed%20vel%20justo%20semper%2C%20convallis%20ante%20id%2C%20tincidunt%20nisi.%20Aliquam%20non%20lorem%20commodo%2C%20laoreet%20diam%20nec%2C%20feugiat%20dolor.%0A%0A%20%20%20%20Aliquam%20orci%20diam%2C%20vestibulum%20et%20odio%20id%2C%20molestie%20interdum%20diam.%20Donec%20et%20molestie%20mi.%20Suspendisse%20potenti.%20Nam%20sit%20amet%20faucibus%20nulla.%20In%20tincidunt%20pharetra%20turpis%2C%20fringilla%20convallis%20dui%20scelerisque%20vel.%20Orci%20varius%20natoque%20penatibus%20et%20magnis%20dis%20parturient%20montes%2C%20nascetur%20ridiculus%20mus.%20Fusce%20eget%20tellus%20sem.%20Donec%20ac%20maximus%20massa.%0A%0A%20%20%20%20Aliquam%20vehicula%20ligula%20justo%2C%20faucibus%20semper%20lorem%20sodales%20eu.%20Fusce%20nec%20augue%20quis%20diam%20iaculis%20dapibus.%20Cras%20consectetur%20eros%20ut%20nunc%20cursus%2C%20non%20laoreet%20dolor%20rhoncus.%20In%20luctus%20risus%20sed%20nunc%20feugiat%2C%20in%20imperdiet%20velit%20euismod.%20Curabitur%20sed%20nunc%20dapibus%2C%20convallis%20tortor%20sit%20amet%2C%20interdum%20sapien.%20Donec%20auctor%20mauris%20est%2C%20ac%20molestie%20diam%20sagittis%20id.%20Curabitur%20pretium%20metus%20et%20ante%20tincidunt%20convallis.%20Aenean%20quis%20mollis%20nulla.%60%3B%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cspan%20tooltip%3D%22Small%20Tooltip%22%20tooltipSize%3D%22small%22%20tooltipPosition%3D%22bottom%22%20tooltipPreline%3D%22true%22%3ESmall%20Tooltip%3C%2Fspan%3E%0A%3Cspan%20%5Btooltip%5D%3D%22mediumTooltip%22%20tooltipSize%3D%22medium%22%20tooltipPosition%3D%22left%22%20tooltipPreline%3D%22true%22%3EMedium%20Tooltip%3C%2Fspan%3E%0A%3Cspan%20%5Btooltip%5D%3D%22largeTooltip%22%20tooltipSize%3D%22large%22%20tooltipPosition%3D%22top%22%20tooltipPreline%3D%22true%22%3ELarge%20Tooltip%3C%2Fspan%3E%0A%3Cspan%20%5Btooltip%5D%3D%22extraLargeTooltip%22%20tooltipSize%3D%22extra-large%22%20tooltipPosition%3D%22top%22%20tooltipPreline%3D%22true%22%3EExtra-Large%20Tooltip%3C%2Fspan%3E%0A`
    },
    'tooltip-toggle': {
        title: 'Tooltip Toggle Example',
        component: TooltipToggleExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Tooltip%20Toggle%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20selector%3A%20'tooltip-toggle-example'%2C%0A%20%20templateUrl%3A%20'tooltip-toggle-example.html'%2C%0A%20%20styleUrls%3A%20%5B'tooltip-toggle-example.css'%5D%2C%0A%7D)%0Aexport%20class%20TooltipToggleExample%20%7B%0A%20%20public%20tooltipActive%3A%20boolean%3B%0A%20%20public%20toggleTooltip()%20%7B%0A%20%20%20%20this.tooltipActive%20%3D%20!this.tooltipActive%3B%0A%20%20%7D%0A%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cspan%20tooltip%3D%22I%20HAVE%20A%20TOOLTIP!%22%20%5BtooltipActive%5D%3D%22tooltipActive%22%3E%0A%20%20%20%20%3Cspan%20*ngIf%3D%22tooltipActive%22%3EMy%20tooltip%20can%20display!%3C%2Fspan%3E%0A%20%20%20%20%3Cspan%20*ngIf%3D%22!tooltipActive%22%3EMy%20tooltip%20is%20disabled!%3C%2Fspan%3E%0A%3C%2Fspan%3E%0A%3Cbutton%20theme%3D%22secondary%22%20(click)%3D%22toggleTooltip()%22%3EToggle%3C%2Fbutton%3E%0A`
    },
    'tooltip-types': {
        title: 'Tooltip Types Example',
        component: TooltipTypesExample,
        tsSource: `import%20%7B%20Component%20%7D%20from%20'%40angular%2Fcore'%3B%0A%0A%2F**%0A%20*%20%40title%20Tooltip%20Types%20Example%0A%20*%2F%0A%40Component(%7B%0A%20%20selector%3A%20'tooltip-types-example'%2C%0A%20%20templateUrl%3A%20'tooltip-types-example.html'%2C%0A%20%20styleUrls%3A%20%5B'tooltip-types-example.css'%5D%2C%0A%7D)%0Aexport%20class%20TooltipTypesExample%20%7B%7D%0A`,
        cssSource: `%2F**%20No%20CSS%20for%20this%20example%20*%2F%0A`,
        htmlSource: `%3Cspan%20tooltip%3D%22ERROR%22%20tooltipType%3D%22error%22%3EError%3C%2Fspan%3E%0A%3Cspan%20tooltip%3D%22INFO%22%20tooltipType%3D%22info%22%3EInfo%3C%2Fspan%3E%0A%3Cspan%20tooltip%3D%22WARNING%22%20tooltipType%3D%22warning%22%3EWarning%3C%2Fspan%3E%0A%3Cspan%20tooltip%3D%22SUCCESS%22%20tooltipType%3D%22success%22%3ESuccess%3C%2Fspan%3E%0A`
    },
};
/** @type {?} */
const EXAMPLE_LIST = [
    BasicAceExample,
    ButtonDialogueExample,
    ButtonDynamicExample,
    ButtonFabExample,
    ButtonIconExample,
    ButtonInverseExample,
    ButtonLoadingExample,
    ButtonOverviewExample,
    ButtonPrimaryExample,
    ButtonSecondaryExample,
    ButtonStandardExample,
    BigCalendarExample,
    CalendarExample,
    RangeExample,
    TimeExample,
    DataTableRemoteExample,
    DataTableRowsExample,
    DataTableServiceExample,
    ConfigureColumnsModal,
    BasicDropDownExample,
    CustomDropDownExample,
    LargeDropDownExample,
    MultiDropDownExample,
    PositionDropDownExample,
    ScrollableDropDownExample,
    BasicIconsExample,
    RaisedIconsExample,
    ThemedIconsExample,
    LoadingCircleExample,
    LoadingLineExample,
    BasicQuickNoteExample,
    CustomQuickNoteResults, CustomQuickNoteResultsExample,
    CustomQuickNoteExample,
    SearchUsageExample,
    BasicSlideExample,
    SwitchUsageExample,
    TabbedGroupPickerBasicExample,
    TabbedGroupPickerBigGroupsExample,
    TabbedGroupPickerGroupsExample,
    TabbedGroupPickerQuickSelectExample,
    ActionsCellExample,
    ExtraDetails, DetailsTableExample,
    EditableTableExample,
    SelectAllTableExample,
    TableExample,
    TotalFooterTableExample,
    AnalyticsColorsExample,
    EntityColorsExample,
    PrimaryColorsExample,
    AsyncChipsExample,
    BasicChipsExample,
    CloseOnSelectChipsExample,
    FormattedChipsExample,
    GroupedMultiPickerExample,
    RowChipsExample,
    DatePickerExample,
    DateRangeExample,
    DateTimeInputExample,
    DateTimeExample,
    TimePickerExample,
    WeekStartExample,
    BasicEditorExample,
    MinimalEditorExample,
    CustomTemplateExample,
    HorizontalOptionsExample,
    HorizontalExample,
    VerticalOptionsExample,
    VerticalExample,
    AddressControlExample,
    CalendarInputControlsExample,
    CheckBoxControlsExample,
    CustomDemoControlExample,
    DisabledFormExample,
    DynamicFormFieldSetsExample,
    DynamicFormExample,
    EnableDisableAllFieldsInFormExample,
    FileInputControlsExample,
    PickerControlsExample,
    TextBasedControlsExample,
    UpdatingFormExample,
    VerticalDynamicFormExample,
    BasicMultiPickerExample,
    NestedMultiPickerExample,
    AsyncPickerExample,
    BasicPickerExample,
    CustomPickerResults, CustomPickerResultsExample,
    DefaultOptionsPickerExample,
    EntityPickerExample,
    FormattedPickerExample,
    GroupedPickerExample,
    OverrideTemplateExample,
    BasicRadioExample,
    ButtonRadioExample,
    IconRadioExample,
    VerticalRadioExample,
    BasicSelectExample,
    LongSelectExample,
    TilesUsageExample,
    AddressValueExample,
    AssociatedValueExample,
    BasicValueExample,
    CategoryValueExample,
    CorporateUserValueExample,
    DateTimeValueExample,
    EntityListValueExample,
    ExternalLinkValueExample,
    FormatterValueExample,
    IconValueExample,
    MultiOptionValueExample,
    BasicCardExample,
    CardConfigExample,
    AccordionExample,
    BasicExpansionExample,
    LazyExpansionExample,
    BasicHeaderExample,
    CondensedHeaderExample,
    HeaderSearchbarExample,
    HeaderSubtitleExample,
    BasicListExample,
    ThemedListExample,
    StepperHorizontalExample,
    StepperVerticalExample,
    TabsBasicExample,
    TabsColorExample,
    TabsCondensedExample,
    TabsRouterExample,
    TabsVerticalExample,
    ActivitySectionExample,
    RecordHeaderExample,
    DateTranslationsExample,
    NumberTranslationsExample,
    PluralTranslationsExample,
    SimpleTranslationsExample,
    TranslationsVariablesExample,
    FiAddingRemovingExample,
    FiAsyncExample,
    FiCalculationExample,
    FiConfirmExample,
    FiEnableDisableExample,
    FiGlobalsExample,
    FiHideShowExample,
    FiMessagingExample,
    FiModifyAddedPickerExample,
    FiModifyOptionsExample,
    FiRequiredExample,
    FiTooltipExample,
    FiValidationExample,
    ModalCustomDemo, CustomModalExample,
    ModalErrorDemo, ErrorModalExample,
    ModalAddFormDemo, ModalAddFormExample,
    ModalEditFormDemo, ModalEditFormExample,
    ModalSuccessDemo, SuccessModalExample,
    ModalWarningDemo, WarningModalExample,
    PluralizeExample,
    PopOverAutoPlacementExample,
    PopOverBehaviorsExample,
    PopOverDynamicExample,
    PopOverHorizontalExample,
    PopOverPlacementExample,
    PopOverVerticalExample,
    SecurityExample,
    BasicTipWellExample,
    ButtonlessTipWellExample,
    HtmlTipWellExample,
    IconTipWellExample,
    ToastServiceExample,
    ToastUsageExample,
    TooltipAlignExample,
    TooltipOptionsExample,
    TooltipPlacementExample,
    TooltipSizesExample,
    TooltipToggleExample,
    TooltipTypesExample,
];
class NovoExamplesModule {
}
NovoExamplesModule.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                declarations: EXAMPLE_LIST,
                entryComponents: EXAMPLE_LIST,
                exports: EXAMPLE_LIST,
                imports: [
                    _angular_forms__WEBPACK_IMPORTED_MODULE_1__["FormsModule"],
                    _angular_forms__WEBPACK_IMPORTED_MODULE_1__["ReactiveFormsModule"],
                    _angular_common__WEBPACK_IMPORTED_MODULE_2__["CommonModule"],
                    novo_elements__WEBPACK_IMPORTED_MODULE_3__["NovoElementsModule"],
                    chomsky__WEBPACK_IMPORTED_MODULE_4__["ChomskyModule"]
                ]
            },] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: examples.data.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Example data
 *   with information about Component name, selector, files used in example, and path to examples
 */
class ExampleData {
    /**
     * @param {?} example
     */
    constructor(example) {
        if (!example || !EXAMPLE_COMPONENTS.hasOwnProperty(example)) {
            return;
        }
        /** @type {?} */
        const exampleConfig = EXAMPLE_COMPONENTS[example];
        this.source = exampleConfig;
        // TODO(tinayuangao): Do not hard-code extensions
        this.exampleFiles = ['html', 'ts', 'css'].map((/**
         * @param {?} extension
         * @return {?}
         */
        (extension) => `${example}-example.${extension}`));
        this.examplePath = `/assets/stackblitz/examples/${example}/`;
        this.selectorName = this.indexFilename = `${example}-example`;
        if (exampleConfig.additionalFiles) {
            this.exampleFiles.push(...exampleConfig.additionalFiles);
        }
        /** @type {?} */
        const exampleName = example.replace(/(?:^\w|\b\w)/g, (/**
         * @param {?} letter
         * @return {?}
         */
        (letter) => letter.toUpperCase()));
        this.description = exampleConfig.title || exampleName.replace(/[\-]+/g, ' ') + ' Example';
        this.componentName = exampleConfig.selectorName || exampleName.replace(/[\-]+/g, '') + 'Example';
    }
}
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: _shared/highlight.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @record
 */
function HighlightOptions() { }
if (false) {}
/**
 * @record
 */
function HighlightConfig() { }
if (false) {}
/**
 * @record
 */
function HighlightResult() { }
if (false) {}
class HighlightJS {
    constructor() {
        this.options = {
            theme: 'github',
            path: 'assets/lib/hljs',
            auto: true,
        };
        this._isReady$ = new rxjs__WEBPACK_IMPORTED_MODULE_7__["BehaviorSubject"](false);
        this.options = Object.assign({}, this.options);
        if (typeof hljs !== 'undefined') {
            /** hljs is loaded by the user */
            hljs.configure(this.options.config);
            this._isReady$.next(true);
        }
        else {
            /** Load hljs script and style locally */
            this._loadScript();
            this._loadTheme();
        }
    }
    // Stream that emits when highlightjs is loaded
    /**
     * @return {?}
     */
    get isReady() {
        return this._isReady$.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_5__["filter"])((/**
         * @param {?} isReady
         * @return {?}
         */
        (isReady) => isReady)), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_5__["take"])(1));
    }
    /**
     * @param {?} name
     * @param {?} value
     * @param {?} ignore_illegals
     * @param {?=} continuation
     * @return {?}
     */
    highlight(name, value, ignore_illegals, continuation) {
        if (typeof hljs !== 'undefined') {
            return hljs.highlight(name, value, ignore_illegals, continuation);
        }
    }
    /**
     * @param {?} value
     * @param {?} languageSubset
     * @return {?}
     */
    highlightAuto(value, languageSubset) {
        if (typeof hljs !== 'undefined') {
            return hljs.highlightAuto(value, languageSubset);
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    fixMarkup(value) {
        if (typeof hljs !== 'undefined') {
            return hljs.fixMarkup(value);
        }
    }
    /**
     * @param {?} block
     * @return {?}
     */
    highlightBlock(block) {
        if (typeof hljs !== 'undefined') {
            hljs.highlightBlock(block);
        }
    }
    /**
     * @param {?} options
     * @return {?}
     */
    configure(options) {
        if (typeof hljs !== 'undefined') {
            hljs.configure(this.options.config);
        }
    }
    /**
     * @return {?}
     */
    initHighlighting() {
        if (typeof hljs !== 'undefined') {
            hljs.initHighlighting();
        }
    }
    /**
     * @return {?}
     */
    initHighlightingOnLoad() {
        if (typeof hljs !== 'undefined') {
            hljs.initHighlightingOnLoad();
        }
    }
    /**
     * @param {?} name
     * @param {?} language
     * @return {?}
     */
    registerLanguage(name, language) {
        if (typeof hljs !== 'undefined') {
            hljs.registerLanguage(name, language);
        }
    }
    /**
     * @return {?}
     */
    listLanguages() {
        if (typeof hljs !== 'undefined') {
            return hljs.listLanguages();
        }
    }
    /**
     * @param {?} name
     * @return {?}
     */
    getLanguage(name) {
        if (typeof hljs !== 'undefined') {
            return hljs.getLanguage(name);
        }
    }
    /**
     * @private
     * @return {?}
     */
    _loadScript() {
        /** @type {?} */
        const script = document.createElement('script');
        script.async = true;
        script.type = 'text/javascript';
        script.onload = (/**
         * @return {?}
         */
        () => {
            hljs.configure(this.options.config);
            this._isReady$.next(true);
        });
        script.src = `${this.options.path}/highlight.pack.js`;
        document.head.appendChild(script);
    }
    /**
     * @private
     * @return {?}
     */
    _loadTheme() {
        /** @type {?} */
        const style = document.createElement('link');
        style.rel = 'stylesheet';
        style.type = 'text/css';
        style.href = `${this.options.path}/styles/${this.options.theme}.css`;
        document.head.appendChild(style);
    }
}
HighlightJS.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"] }
];
/** @nocollapse */
HighlightJS.ctorParameters = () => [];
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: _shared/code-snippet.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class CodeSnippetComponent {
    /**
     * @param {?} sanitizer
     * @param {?} hljs
     * @param {?} cdr
     */
    constructor(sanitizer, hljs, cdr) {
        this.sanitizer = sanitizer;
        this.hljs = hljs;
        this.cdr = cdr;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.hljs.isReady.subscribe((/**
         * @return {?}
         */
        () => {
            /** @type {?} */
            const code = decodeURIComponent(EXAMPLE_COMPONENTS[this.example].tsSource);
            /** @type {?} */
            const markup = decodeURIComponent(EXAMPLE_COMPONENTS[this.example].htmlSource);
            /** @type {?} */
            const style = decodeURIComponent(EXAMPLE_COMPONENTS[this.example].cssSource);
            this.highlightTS = this.sanitizer.bypassSecurityTrustHtml(this.hljs.highlightAuto(code, ['typescript']).value.trim());
            this.highlightHTML = this.sanitizer.bypassSecurityTrustHtml(this.hljs.highlightAuto(markup, ['html']).value.trim());
            this.highlightCSS = this.sanitizer.bypassSecurityTrustHtml(this.hljs.highlightAuto(style, ['css']).value.trim());
            this.cdr.markForCheck();
        }));
    }
}
CodeSnippetComponent.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'code-snippet',
                template: `

    <novo-nav theme="white" [outlet]="snippets">
      <novo-tab><span>HTML</span></novo-tab>
      <novo-tab><span>TS</span></novo-tab>
      <novo-tab><span>CSS</span></novo-tab>
    </novo-nav>
    <novo-nav-outlet #snippets>
      <novo-nav-content>
          <pre><code [innerHtml]="highlightHTML"></code></pre>
      </novo-nav-content>
      <novo-nav-content>
          <pre><code [innerHtml]="highlightTS"></code></pre>
      </novo-nav-content>
      <novo-nav-content>
          <pre><code [innerHtml]="highlightCSS"></code></pre>
      </novo-nav-content>
    </novo-nav-outlet>
    `
            }] }
];
/** @nocollapse */
CodeSnippetComponent.ctorParameters = () => [
    { type: _angular_platform_browser__WEBPACK_IMPORTED_MODULE_10__["DomSanitizer"] },
    { type: HighlightJS },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectorRef"] }
];
CodeSnippetComponent.propDecorators = {
    example: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }]
};
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: _shared/code-example.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class CodeExampleComponent {
    constructor() {
        /**
         * Whether the source for the example is being displayed.
         */
        this.showSource = false;
    }
    /**
     * @return {?}
     */
    get example() {
        return this._example;
    }
    /**
     * @param {?} example
     * @return {?}
     */
    set example(example) {
        if (example && EXAMPLE_COMPONENTS[example]) {
            this._example = example;
            this.exampleData = EXAMPLE_COMPONENTS[example];
            this.selectedPortal = new _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_9__["ComponentPortal"](this.exampleData.component);
        }
        else {
            console.log('MISSING EXAMPLE: ', example);
        }
    }
    /**
     * @return {?}
     */
    toggleSourceView() {
        this.showSource = !this.showSource;
    }
}
CodeExampleComponent.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'code-example',
                template: `
      <div class="example">
        <header theme="white" [condensed]="true">
          <h4 novo-title>{{exampleData.title}}</h4>
          <utils>
            <button theme="icon" icon="book" (click)="toggleSourceView()"></button>
            <stackblitz-button [example]="example"></stackblitz-button>
          </utils>
        </header>
        <div class="example-container">
          <ng-template [cdkPortalOutlet]="selectedPortal"></ng-template>
        </div>
        <code-snippet [example]="example" *ngIf="showSource"></code-snippet>
      </div>
    `
            }] }
];
/** @nocollapse */
CodeExampleComponent.ctorParameters = () => [];
CodeExampleComponent.propDecorators = {
    example: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }]
};
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: _shared/stackblitz/stackblitz-writer.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const STACKBLITZ_URL = 'https://run.stackblitz.com/api/angular/v1';
/** @type {?} */
const COPYRIGHT = `Copyright 2018 Bullhorn Inc. All Rights Reserved.
    Use of this source code is governed by an MIT-style license that
    can be found in the LICENSE file at http://angular.io/license`;
/** @type {?} */
const TEMPLATE_PATH = './assets/stackblitz/';
/** @type {?} */
const TEMPLATE_FILES = ['index.html', 'styles.scss', 'polyfills.ts', 'main.ts'];
/** @type {?} */
const TAGS = ['angular', 'bullhon', 'novo-elements', 'example'];
/** @type {?} */
const angularVersion = '^7.2.0';
/** @type {?} */
const dependencies = {
    '@angular/cdk': angularVersion,
    '@angular/animations': angularVersion,
    '@angular/common': angularVersion,
    '@angular/compiler': angularVersion,
    '@angular/core': angularVersion,
    '@angular/forms': angularVersion,
    '@angular/http': angularVersion,
    '@angular/platform-browser': angularVersion,
    '@angular/platform-browser-dynamic': angularVersion,
    '@angular/router': angularVersion,
    'novo-elements': '3.6.0',
    'angular-in-memory-web-api': '~0.5.0',
    'core-js': '^2.6.2',
    rxjs: '^6.3.3',
    'rxjs-compat': '^6.3.3',
    '@bullhorn/dragula': '1.0.1',
    'ace-builds': '1.4.2',
    'angular2-text-mask': '9.0.0',
    brace: '0.11.1',
    'classlist.js': '^1.1.20150312',
    'date-fns': '1.30.1',
    'post-robot': '9.0.30',
    'web-animations-js': '^2.3.1',
    'text-mask-addons': '^3.8.0',
    'zone.js': '^0.8.14',
    hammerjs: '^2.0.8',
    moment: '^2.18.1',
};
/**
 * Stackblitz writer, write example files to stackblitz
 *
 * StackBlitz API
 * URL: https://run.stackblitz.com/api/aio/v1/
 * data: {
 *   // File name, directory and content of files
 *   files[file-name1]: file-content1,
 *   files[directory-name/file-name2]: file-content2,
 *   // Can add multiple tags
 *   tags[0]: tag-0,
 *   // Description of stackblitz
 *   description: description,
 *   // Private or not
 *   private: true
 *  // Dependencies
 *  dependencies: dependencies
 * }
 */
class StackblitzWriter {
    /**
     * @param {?} _http
     */
    constructor(_http) {
        this._http = _http;
    }
    /**
     * Returns an HTMLFormElement that will open a new stackblitz template with the example data when
     * called with submit().
     * @param {?} data
     * @return {?}
     */
    constructStackblitzForm(data) {
        /** @type {?} */
        const indexFile = `app%2F${data.indexFilename}.ts`;
        /** @type {?} */
        const form = this._createFormElement(indexFile);
        TAGS.forEach((/**
         * @param {?} tag
         * @param {?} i
         * @return {?}
         */
        (tag, i) => this._appendFormInput(form, `tags[${i}]`, tag)));
        this._appendFormInput(form, 'private', 'true');
        this._appendFormInput(form, 'description', data.description);
        this._appendFormInput(form, 'dependencies', JSON.stringify(dependencies));
        return new Promise((/**
         * @param {?} resolve
         * @return {?}
         */
        (resolve) => {
            /** @type {?} */
            const templateContents = TEMPLATE_FILES.map((/**
             * @param {?} file
             * @return {?}
             */
            (file) => this._readFile(form, data, file, TEMPLATE_PATH)));
            /** @type {?} */
            const exampleContents = [];
            exampleContents.push(Promise.resolve(this._addFileToForm(form, data, decodeURIComponent(data.source.tsSource), `app/${data.selectorName}.ts`, TEMPLATE_PATH)));
            exampleContents.push(Promise.resolve(this._addFileToForm(form, data, decodeURIComponent(data.source.htmlSource), `app/${data.selectorName}.html`, TEMPLATE_PATH)));
            exampleContents.push(Promise.resolve(this._addFileToForm(form, data, decodeURIComponent(data.source.cssSource), `app/${data.selectorName}.css`, TEMPLATE_PATH)));
            exampleContents.push(Promise.resolve(this._addFileToForm(form, data, JSON.stringify({ apps: [{ styles: ['styles.scss'] }] }), `.angular-cli.json`, TEMPLATE_PATH)));
            // // TODO(josephperrott): Prevent including assets to be manually checked.
            // if (data.selectorName === 'icon-svg-example') {
            //   this._readFile(form, data, 'assets/img/examples/thumbup-icon.svg', '', false);
            // }
            Promise.all(templateContents.concat(exampleContents)).then((/**
             * @return {?}
             */
            () => {
                resolve(form);
            }));
        }));
    }
    /**
     * Constructs a new form element that will navigate to the stackblitz url.
     * @param {?} indexFile
     * @return {?}
     */
    _createFormElement(indexFile) {
        /** @type {?} */
        const form = document.createElement('form');
        form.action = `${STACKBLITZ_URL}?file=${indexFile}`;
        form.method = 'post';
        form.target = '_blank';
        return form;
    }
    /**
     * Appends the name and value as an input to the form.
     * @param {?} form
     * @param {?} name
     * @param {?} value
     * @return {?}
     */
    _appendFormInput(form, name, value) {
        /** @type {?} */
        const input = document.createElement('input');
        input.type = 'hidden';
        input.name = name;
        input.value = value;
        form.appendChild(input);
    }
    /**
     * Reads the file and adds its text to the form
     * @param {?} form the html form you are appending to
     * @param {?} data example metadata about the example
     * @param {?} filename file name of the example
     * @param {?} path path to the src
     * @param {?=} prependApp whether to prepend the 'app' prefix to the path
     * @return {?}
     */
    _readFile(form, data, filename, path, prependApp = true) {
        this._http
            .get(path + filename, { responseType: 'text' })
            .subscribe((/**
         * @param {?} response
         * @return {?}
         */
        (response) => this._addFileToForm(form, data, response, filename, path, prependApp)), (/**
         * @param {?} error
         * @return {?}
         */
        (error) => console.log(error)));
    }
    /**
     * Adds the file text to the form.
     * @param {?} form the html form you are appending to
     * @param {?} data example metadata about the example
     * @param {?} content file contents
     * @param {?} filename file name of the example
     * @param {?} path path to the src
     * @param {?=} prependApp whether to prepend the 'app' prefix to the path
     * @return {?}
     */
    _addFileToForm(form, data, content, filename, path, prependApp = true) {
        if (path === TEMPLATE_PATH) {
            content = this._replaceExamplePlaceholderNames(data, filename, content);
        }
        else if (prependApp) {
            filename = 'app/' + filename;
        }
        this._appendFormInput(form, `files[${filename}]`, this._appendCopyright(filename, content));
    }
    /**
     * The stackblitz template assets contain placeholder names for the examples:
     * "<novo-docs-example>" and "NovoDocsExample".
     * This will replace those placeholders with the names from the example metadata,
     * e.g. "<basic-button-example>" and "BasicButtonExample"
     * @param {?} data
     * @param {?} fileName
     * @param {?} fileContent
     * @return {?}
     */
    _replaceExamplePlaceholderNames(data, fileName, fileContent) {
        if (fileName === 'index.html') {
            // Replace the component selector in `index,html`.
            // For example, <novo-docs-example></novo-docs-example> will be replaced as
            // <button-demo></button-demo>
            fileContent = fileContent.replace(/novo-docs-example/g, data.selectorName);
            fileContent = fileContent.replace(/{{version}}/g, 'latest');
        }
        else if (fileName === 'main.ts') {
            // Replace the component name in `main.ts`.
            // Replace `import {NovoDocsExample} from 'novo-docs-example'`
            // will be replaced as `import {ButtonDemo} from './button-demo'`
            fileContent = fileContent.replace(/{ NovoDocsExample }/g, `{ ${data.componentName} }`);
            // Replace `declarations: [NovoDocsExample]`
            // will be replaced as `declarations: [ButtonDemo]`
            fileContent = fileContent.replace(/declarations: \[NovoDocsExample\]/g, `declarations: [${data.componentName}]`);
            // Replace `entryComponents: [NovoDocsExample]`
            // will be replaced as `entryComponents: [DialogContent]`
            fileContent = fileContent.replace(/entryComponents: \[NovoDocsExample\]/g, `entryComponents: [${data.componentName}]`);
            // Replace `bootstrap: [NovoDocsExample]`
            // will be replaced as `bootstrap: [ButtonDemo]`
            // This assumes the first component listed in the main component
            /** @type {?} */
            const componentList = (data.componentName || '').split(',')[0];
            fileContent = fileContent.replace(/bootstrap: \[NovoDocsExample\]/g, `bootstrap: [${componentList}]`);
            fileContent = fileContent.replace(/novo-docs-example/g, data.indexFilename);
        }
        return fileContent;
    }
    /**
     * @param {?} filename
     * @param {?} content
     * @return {?}
     */
    _appendCopyright(filename, content) {
        if (filename.indexOf('.ts') > -1 || filename.indexOf('.scss') > -1) {
            content = `${content}\n\n/**  ${COPYRIGHT} */`;
        }
        else if (filename.indexOf('.html') > -1) {
            content = `${content}\n\n<!-- ${COPYRIGHT} -->`;
        }
        return content;
    }
}
StackblitzWriter.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"] }
];
/** @nocollapse */
StackblitzWriter.ctorParameters = () => [
    { type: _angular_common_http__WEBPACK_IMPORTED_MODULE_11__["HttpClient"] }
];
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: _shared/stackblitz/stackblitz-button.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class StackblitzButton {
    /**
     * @param {?} stackblitzWriter
     */
    constructor(stackblitzWriter) {
        this.stackblitzWriter = stackblitzWriter;
        /**
         * The button becomes disabled if the user hovers over the button before the stackblitz form
         * is created. After the form is created, the button becomes enabled again.
         * The form creation usually happens extremely quickly, but we handle the case of the
         * stackblitz not yet being ready for people will poor network connections or slow devices.
         */
        this.isDisabled = false;
    }
    /**
     * @param {?} example
     * @return {?}
     */
    set example(example) {
        /** @type {?} */
        const exampleData = new ExampleData(example);
        if (example) {
            this.stackblitzWriter.constructStackblitzForm(exampleData).then((/**
             * @param {?} stackblitzForm
             * @return {?}
             */
            (stackblitzForm) => {
                this.stackblitzForm = stackblitzForm;
                this.isDisabled = false;
            }));
        }
        else {
            this.isDisabled = true;
        }
    }
    /**
     * @return {?}
     */
    openStackblitz() {
        // When the form is submitted, it must be in the document body. The standard of forms is not
        // to submit if it is detached from the document. See the following chromium commit for
        // more details:
        // https://chromium.googlesource.com/chromium/src/+/962c2a22ddc474255c776aefc7abeba00edc7470%5E!
        document.body.appendChild(this.stackblitzForm);
        this.stackblitzForm.submit();
        document.body.removeChild(this.stackblitzForm);
    }
}
StackblitzButton.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'stackblitz-button',
                template: "<!-- TODO: change the template to be stackblitz icon -->\n<div>\n  <button theme=\"icon\" icon=\"sendout\" (click)=\"openStackblitz()\" [disabled]=\"isDisabled\"></button>\n</div>\n",
                providers: [StackblitzWriter],
                host: {
                    '(mouseover)': 'isDisabled = !stackblitzForm',
                }
            }] }
];
/** @nocollapse */
StackblitzButton.ctorParameters = () => [
    { type: StackblitzWriter }
];
StackblitzButton.propDecorators = {
    example: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }]
};
if (false) {}
class StackblitzButtonModule {
}
StackblitzButtonModule.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                imports: [novo_elements__WEBPACK_IMPORTED_MODULE_3__["NovoElementsModule"]],
                exports: [StackblitzButton],
                declarations: [StackblitzButton],
                providers: [StackblitzWriter],
            },] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: _shared/stackblitz/index.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: _shared/shared.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NovoExamplesSharedModule {
}
NovoExamplesSharedModule.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                declarations: [CodeSnippetComponent, CodeExampleComponent],
                exports: [CodeSnippetComponent, CodeExampleComponent],
                imports: [_angular_forms__WEBPACK_IMPORTED_MODULE_1__["FormsModule"], _angular_forms__WEBPACK_IMPORTED_MODULE_1__["ReactiveFormsModule"], _angular_common__WEBPACK_IMPORTED_MODULE_2__["CommonModule"], novo_elements__WEBPACK_IMPORTED_MODULE_3__["NovoElementsModule"], StackblitzButtonModule, _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_9__["PortalModule"]],
                providers: [HighlightJS],
            },] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: examples.routes.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class AceEditorPage {
}
AceEditorPage.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'ace-editor-page',
                template: `<h1>Ace Editor <a href="https://github.com/bullhorn/novo-elements/blob/master/projects/novo-elements/src/elements/ace-editor">(source)</a></h1><p>Basic code editor using Ace Editor.</p><h5>Basic Example</h5><p><code-example example="basic-ace"></code-example></p>`
            }] }
];
class ButtonsPage {
}
ButtonsPage.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'buttons-page',
                template: `<h1>Button <a href="https://github.com/bullhorn/novo-elements/blob/master/projects/novo-elements/src/elements/button">(source)</a></h1><p>A button clearly indicates a point of action for the user. Bullhorn buttons come in a variety of themes, custom tailored to fit your use-case.</p><h2>Themes</h2><p>Bullhorn button themes were hand crafted to make your life easier. Most buttons used in the Bullhorn platform should utilize a <code>theme</code> attribute. Theme attributes provide access to every variation of Bullhorn UX approved buttons. Depending on the theme, some buttons may also utilize <code>icon</code>, <code>side</code>, and <code>inverse</code> attributes. Button are divided by function into four main categories: Primary, Secondary, Neutralizing, Subtractive. There are also three other button types that are independent of function: Dialogue, Icon, and Header.</p><h2>Colors</h2><p>Acceptable colors include <code>Primary</code>, <code>Success</code>, <code>Warning</code>, <code>Negative</code>, and <strong>all analytics colors</strong> which can be found in the color section of the style guide.</p><p><code-example example="button-overview"></code-example></p><h2>Primary</h2><p>Primary buttons are used to as primary calls-to-action. They should <strong>always</strong> get an <code>icon</code> attribute. Primary buttons with a &quot;success&quot; color <code>color=&quot;success&quot;</code> are used for saving and will almost always contain a &quot;check&quot; icon. Negative color primary buttons <code>color=&quot;negative&quot;</code> are used to delete, clear, or otherwise remove an extant element. Primary buttons should never have a <code>side</code> attribute.</p><!-- Example: ButtonOverviewExample --><p><code-example example="button-primary"></code-example></p><h2>Secondary</h2><p>Secondary buttons are used as an alternative Primary button or when there is a second major action on a page. They usually appears only in Overview and Slideout headers. This theme with an <code>inverse</code> attribute is often used as the action button in dropdown menus.</p><p><code-example example="button-secondary"></code-example></p><p>Secondary buttons can also get an <code>inverse</code> attribute for use on a colored background.</p><p><code-example example="button-inverse"></code-example></p><h2>Dialogue</h2><p>Similar to icon buttons, dialogue buttons require less visual dominance but often need additional helper text. Dialogue buttons <em>may</em> contain <strong>any</strong> icon and a <code>side</code> may be specified eg:<code>side=&quot;right&quot;</code> to place the icon on the right or left side of the text. Dialogue buttons may also use an <code>inverse</code> attribute to change its text color to white.</p><p><code-example example="button-dialogue"></code-example></p><h2>Standard</h2><p>Standard buttons are the most generic button style. Standard buttons by default are styled identically to standard buttons with a <code>color=&quot;light&quot;</code> attribute. Typically, a standard button is used to cancel an action, or to cease any additional progress. Although standard buttons <em>can</em> get an <code>icon</code> attribute, they should almost never be used with an icon. If your proposed design calls for a standard button with an icon, consider using a different button theme, like dialogue.</p><p><code-example example="button-standard"></code-example></p><h2>Icon</h2><p>The <code>icon</code> theme is used to create <strong>icon-only</strong> buttons, which contain no text. They can occupy any of the four main functions but require far less visual dominance than normal buttons. Icon buttons <strong>always</strong> have an <code>icon</code> attribute and can use <strong>any</strong> icon. Icon buttons may also use an <code>inverse</code> attribute to change its icon color to white.</p><p><code-example example="button-icon"></code-example></p><h2>Fab</h2><p>Fab buttons are used to as primary calls-to-action. They should <strong>always</strong> get an <code>icon</code> attribute. Fab buttons with a &quot;success&quot; color <code>color=&quot;success&quot;</code> are used for saving and will almost always contain a &quot;check&quot; icon. Negative color primary buttons <code>color=&quot;negative&quot;</code> are used to delete, clear, or otherwise remove an extant element. Fab buttons should never have a <code>side</code> attribute.</p><p><code-example example="button-fab"></code-example></p><h2>Dynamic</h2><p>Button parameters can be dynamically set and change at runtime. The styles should change and be applied when the values change.</p><p><code-example example="button-dynamic"></code-example></p><h2>Loading</h2><p>Buttons can display a loading state when given the &quot;loading&quot; parameter. When loading is true the button will be disabled and get a loading spinner.</p><p><code-example example="button-loading"></code-example></p>`
            }] }
];
class CalendarPage {
}
CalendarPage.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'calendar-page',
                template: `<h1>Calendars &amp; Schedules</h1><p>These allow users to easily select a time and date. It comes in a handful of varieties based on the content of the field.</p><h2>Calendar Picker <a href="https://github.com/bullhorn/novo-elements/blob/master/projects/novo-elements/src/elements/date-picker">(source)</a></h2><p>The calendar picker is used to select a date. It appears in all date picker fields.</p><h5>Full Calendar Picker</h5><p><code-example example="calendar"></code-example></p><h2>Time Picker <a href="https://github.com/bullhorn/novo-elements/blob/master/projects/novo-elements/src/elements/time-picker">(source)</a></h2><p>Time pickers come in 12 hour or 24 hour style.</p><h5>Standalone Time Picker</h5><p><code-example example="time"></code-example></p><h5>Range Picker</h5><p><code-example example="range"></code-example></p><h5>Big Calendar Picker</h5><p><code-example example="big-calendar"></code-example></p>`
            }] }
];
class ComponentsPage {
}
ComponentsPage.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'components-page',
                template: `<h1>Components</h1><p>This is a landing page</p>`
            }] }
];
class DataTablePage {
}
DataTablePage.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'data-table-page',
                template: `<h1>Data Table <a href="https://github.com/bullhorn/novo-elements/blob/master/projects/novo-elements/src/elements/data-table">(source)</a></h1><h5>Working with static data</h5><h6>Change Dataset</h6><h6>Change Pagination Style</h6><h6>Toggle Global Search</h6><h6>Configure Columns</h6><p>Configure Columns</p><h6>Configure Columns</h6><p>Show Row Details (first table) Hide Row Details (first table)</p><h5>Passing an array of rows</h5><p><code-example example="data-table-rows"></code-example></p><h5>Using the static data service</h5><p><code-example example="data-table-service"></code-example></p><h5>Working with remote data</h5><h5>Using the remote data service</h5><p>Data won't actually change, the URL will update with the proper request it will make!</p><h6>URL</h6><p><code-example example="data-table-remote"></code-example></p>`
            }] }
];
class DropdownPage {
}
DropdownPage.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'dropdown-page',
                template: `<h1>Dropdown <a href="https://github.com/bullhorn/novo-elements/blob/master/projects/novo-elements/src/elements/dropdown">(source)</a></h1><p>Dropdown allow users to take an action by selecting from a list of choices revealed upon opening a temporary menu.</p><h2>Types</h2><h5>Dropdown Menu</h5><p>This is a simple dropdown menu.</p><p><code-example example="basic-drop-down"></code-example></p><h5>Dropdown Position Options</h5><p>This is an example of how dropdowns can be positioned. Use the [side] input to specify how the popup positions or re-positions itself on the page using a preferred location and one or more fallback locations:</p><p><code-example example="position-drop-down"></code-example></p><h5>Lots of data!</h5><p>Crazy large dropdown to demonstrate how the smart positioning works.</p><p><code-example example="large-drop-down"></code-example></p><h5>Scrollable Container Class</h5><p>This is an example of using a dropdown within a scrollable container. Simply place the directive cdkScrollable on the ancestor element that does the scrolling.</p><p><code-example example="scrollable-drop-down"></code-example></p><h5>Custom Class</h5><p>You can have custom classes on the dropdown container that opens up by using the &quot;containerClass&quot; property. Use scrollStrategy to close, block or reposition the dropdown when the parent scrolls. The default scrollStrategy is reposition.</p><p><code-example example="custom-drop-down"></code-example></p><h5>Keep Open</h5><p>You can set the &quot;keepOpen&quot; property on the &quot;item&quot; in order to keep it from closing the dropdown automatically.</p><p><code-example example="multi-drop-down"></code-example></p>`
            }] }
];
class IconPage {
}
IconPage.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'icon-page',
                template: `<h1>Icons <a href="https://github.com/bullhorn/novo-elements/blob/master/projects/novo-elements/src/elements/icon">(source)</a></h1><p>If you want to use bullhorn icons, it is easier to use the <code>novo-icon</code> element to style them.  You can always style them within the <code>i</code> tag too.</p><h5>Basic Usage</h5><p><code-example example="basic-icons"></code-example></p><h5>Themes &amp; Colors</h5><p><code-example example="themed-icons"></code-example></p><h5>Raised Icons</h5><p><code-example example="raised-icons"></code-example></p>`
            }] }
];
class LoadingPage {
}
LoadingPage.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'loading-page',
                template: `<h1>Loading Animations <a href="https://github.com/bullhorn/novo-elements/blob/master/projects/novo-elements/src/elements/loading">(source)</a></h1><p>Loading animations are used to help indicate to the user that some sort of progress is taking place. These are especially helpful for intensive operations that might take extra time.</p><h2>Themes</h2><h5>Line</h5><p>The Dot Line animation is indeterminate.</p><p><code-example example="loading-line"></code-example></p><h5>Spinner</h5><p>The Dot Spinner animation is used as an alternate to the loading line animation.</p><p><code-example example="loading-circle"></code-example></p>`
            }] }
];
class QuickNotePage {
}
QuickNotePage.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'quick-note-page',
                template: `<h1>Quick Note <a href="https://github.com/bullhorn/novo-elements/blob/master/projects/novo-elements/src/elements/quick-note">(source)</a></h1><p>Tag Autocomplete</p><h5>Basic Examples</h5><p><code-example example="basic-quick-note"></code-example></p><h5>Custom Triggers</h5><p><code-example example="custom-quick-note"></code-example></p><h5>Custom Results Template</h5><p><code-example example="custom-quick-note-results"></code-example></p>`
            }] }
];
class SearchPage {
}
SearchPage.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'search-page',
                template: `<h1>Search Input <a href="https://github.com/bullhorn/novo-elements/blob/master/projects/novo-elements/src/elements/switch">(source)</a></h1><p>Loading animations are used to help indicate to the user that some sort of progress is taking place. These are especially helpful for intensive operations that might take extra time.</p><h2>Types</h2><h5>Searches</h5><p>Searches are a binary toggle that allow the user to select one of two options. They are most frequently used for an on-off model.</p><p><code-example example="search-usage"></code-example></p>`
            }] }
];
class SlidesPage {
}
SlidesPage.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'slides-page',
                template: `<h1>slides</h1><h1>Slides <a href="https://github.com/bullhorn/novo-elements/blob/master/projects/novo-elements/src/elements/slides">(source)</a></h1><p>Slide element to toggle some information</p><h5>Basic</h5><p><code-example example="basic-slide"></code-example></p>`
            }] }
];
class SwitchPage {
}
SwitchPage.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'switch-page',
                template: `<h1>Switches &amp; Toggles <a href="https://github.com/bullhorn/novo-elements/blob/master/projects/novo-elements/src/elements/switch">(source)</a></h1><p>Loading animations are used to help indicate to the user that some sort of progress is taking place. These are especially helpful for intensive operations that might take extra time.</p><h2>Types</h2><h5>Tiles</h5><p>Similar to radio buttons, tiles are used to select a single item. Tiles have a higher visibility than radio buttons, and are used more frequently in data visualizations. Tiles stretch horizontally, so the list they pull from must be small.</p><h5>Switches</h5><p>Switches are a binary toggle that allow the user to select one of two options. They are most frequently used for an on-off model.</p><p><code-example example="switch-usage"></code-example></p>`
            }] }
];
class TabbedGroupPickerPage {
}
TabbedGroupPickerPage.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'tabbed-group-picker-page',
                template: `<h1>Tabbed Group Picker <a href="https://github.com/bullhorn/novo-elements/blob/master/projects/novo-elements/src/elements/tabbed-group-picker">(source)</a></h1><p>Tabbed Group Picker allows for nested selection of groups and members via a tabbed interface.</p><h2>Basic</h2><p>In its most basic usage, Tabbed Group Picker allows for selection of arbitrary sets of data that have no group/member relationship. Each data set appears on its own tab. The values returned must be javascript primitives (typically string or number).</p><p><code-example example="tabbed-group-picker-basic"></code-example></p><h2>Quick Select</h2><p>Tabbed Group Picker provides a configurable quick select interface. For each quick select item, the developer provides the data type, values (or the 'all' flag), and a label. Tabbed Group Picker builds the quick select menu and synchronizes the quick select checkboxes with the data checkboxes (in both directions).</p><p><code-example example="tabbed-group-picker-quick-select"></code-example></p><h2>Groups</h2><p><code-example example="tabbed-group-picker-groups"></code-example></p><h2>Big Groups</h2><p><code-example example="tabbed-group-picker-big-groups"></code-example></p>`
            }] }
];
class TablePage {
}
TablePage.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'table-page',
                template: `<h1>Table <a href="https://bullhorn.github.io/novo-elements/tree/master/projects/novo-examples/src/elements/table">(source)</a></h1><p>Tables allow users to view date in a tabular format and perform actions such as Sorting and Filtering. Different configuration are possible for pagination or infinite scroll. Feature to be added include: Custom Item Renderers, etc...</p><h2>Types</h2><h5>Basic Table</h5><p>This is the most basic table.</p><p><code-example example="table"></code-example></p><h5>Details Table</h5><p>This has a row renderer to show a new details row that is expanded when you click on the action column.</p><p><code-example example="details-table"></code-example></p><h5>Select All Table w/ Custom Actions</h5><p>This has checkboxes for selection with custom actions.</p><p><code-example example="select-all-table"></code-example></p><h5>Editable Table</h5><p>Can be put into edit mode and use editors that are set on the column to modify the data.</p><p><code-example example="editable-table"></code-example></p><h5>Total/Average Footer</h5><p>Easily configure a footer to sum or average up columns.</p><p><code-example example="total-footer-table"></code-example></p>`
            }] }
];
class ColorsPage {
}
ColorsPage.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'colors-page',
                template: `<h1>Color</h1><h2>Efficient and expressive</h2><p>Our colors are bold, fresh, and approachable. They are expressive and delightful, but selected with usability and accessibility in mind.</p><h2>Primary Colors</h2><p>These are the base colors of the application.</p><p><primary-colors-example></primary-colors-example></p><h2>Entity Colors</h2><p>This bold palette uses carefully balanced colors to distinguish entities from one another.</p><p><entity-colors-example></entity-colors-example></p><h2>Analyltics Colors</h2><p>This palette features vibrant, bold colors for use in data visualization.</p><p><analytics-colors-example></analytics-colors-example></p>`
            }] }
];
class CompositionPage {
}
CompositionPage.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'composition-page',
                template: `<h1>Composition</h1><h2>A universal language</h2><p>Comprehensive design principles and language helps maintain usability and a sense of harmony across a large family of products. Consistency and common elements greatly reduce the user effort requred to learn a new interface.</p><p><img src="assets/images/CompositionPageIcon.svg" alt=""></p><h2>Mainframe</h2><p>The Mainframe refers to the permanently fixed portions of the application that never change. It contains the primary navigation and core functions.</p><h6>Design Principles: Hierarchy &amp; Unity</h6><p>Unity implies relation through proximity, size, and color. Making elements clearly distinct or unified helps create a strong visual hierarchy. This is important because it helps to easily differentiate the level of importance between different elements, and controls a user's cognitive flow.</p><h5>Top Frame</h5><p>The top frame contains key functions (Find, Add) and navigation to the Resource Center and to User Profile options.</p><p><img src="assets/images/LayoutMainframeTopFrame.svg" alt="mainframe"></p><h5>Bowling Alley</h5><p>The bowling alley is where all active items are displayed, allowing users to easily shift between them.</p><img src="assets/images/LayoutMainframeBowlingAlley.svg" alt="bowling alley" width="300"/><h5>Menu</h5><p>The menu functions as the primary navigation for the application. It contains links to every list, the dashboard, admin functions, tools, and third-party applications. The items on the menu can be toggled, grouped, and organized however the user wishes.</p><p><img src="assets/images/LayoutMainframeMenu.svg" alt="menu"></p><h2>Headers</h2><p>Headers hold key information and controls for a page. They serve as a wayfinding marker to help the user understand context and easily access important actions.</p><h5>Overviews &amp; Slideouts</h5><p>Overview and Slideout headers are dominant features which focus the user's attention to the context of a particular record and contains key information on the left, and actions on the right. These headers inherit the color of the entity type.</p><p><img src="assets/images/LayoutMainframeHeaderOverview.svg" alt="overview header"></p><h5>List Headers</h5><p>List headers contain the filter and column controls for the list and the primary actions. They are fixed so that results can eaily be modified and actioned regardless of scrolling position.</p><p><img src="assets/images/LayoutMainframeHeaderList.svg" alt="list header"></p><h6>Design Principles: Navigation &amp; Consistency</h6><p>A consistent navigation structure allows users to master an interface much more quickly, as they know that certain functions are always in the same place. We use headers to provide quick access to key functions and aid findability of data in a complex system.</p><h5>Add &amp; Edit Pages</h5><p>The headers of Add and Edit pages generally serve as a simple visual element to help provide context.</p><p><img src="assets/images/LayoutMainframeHeaderEditPage.svg" alt="add page header"></p><h2>Cards</h2><p>Essential to our design paradigm, cards are independent blocks of information. They can contain text, tables, and data visualizations. They offer a curated view of data. Bringing the most pertinent information to the forefont, they allow users to scan large amounts of data quickly.</p><h5>Basic Structure</h5><p>Cards have a header which contains the card title and the card controls. The controls can vary depending on card type, gut generally include move, refresh, configure, and remove. The content area has padding by default but can also run edge-to-edge. Pulse cards have a special icon next to the title.</p><p><img src="assets/images/LayoutMainframeCardsNPSCard.svg" alt="card"></p><h6>Design Principle: Cards</h6><p>The card system scales easily, both in individual size and in groups. Because of this, cards are essential to our design language. Cards balance and align very easily, promoting findability. These handy little containers also provide a contextually relevant home for all content.</p><p><strong>Hint:</strong> This is a great place for third-party developers to fit into the Bullhorn system. <strong>Are you a developer?</strong> Check out card markup and documentation here</p><h5>Dashboard &amp; Overviews</h5><p>Dashboards and Records Overviews are the primary home for our cards. They offer a customizable workspace to arrange and configure to most appropriately fit the user's needs. Cards have a fixed height, but mildly flexible width. They can also be expanded to full-screen. The &quot;add card&quot; control is always located in the top right, to be consistent with the placement of action buttons on tables and lists.</p><p><img src="assets/images/LayoutMainframeCardsDashboard.svg" alt="dashboard cards"></p><h5>Slideouts and Mobile</h5><p>Cards are so flexible, they also work well in a mobile setting. They help users to easily scan chunks of information and find what they need.</p><p><img src="assets/images/LayoutMobileCard.svg" alt="mobile cards"></p>`
            }] }
];
class DesignPage {
}
DesignPage.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'design-page',
                template: `<h1>Design</h1><p>This is a landing page</p>`
            }] }
];
class IconographyPage {
}
IconographyPage.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'iconography-page',
                template: `<h1>Iconography</h1><h2>Certified Pixel-Perfect</h2><p>Icons are used to represent an action or concept through the most simplistic imagery possible. Icons give additional context to written material, allowing the user to quickly comprehend any given concept. The icons are designed on a highly specific grid to ensure maximum clarity even at a small size. Their design is friendly, human, and bold.</p><p><a href="http://bullhorn.github.io/bullhorn-icons/">Bullhorn's Icon Set</a></p><p><img src="assets/images/IconographyPageIcon.svg" alt=""></p><h2>Icons with Typography</h2><p>An icon will always have slightly larger dimensions than text when they are paired together. This ensures that the icon is visually the same size as the text and that it scales proportionally.</p><h5>Base sizing</h5><p>Icons placed next to typography should alays follow this convention.</p><p>Bullhorn Glyphicons <strong>Size:</strong> 1.29em <strong>Padding:</strong> .25em <strong>Border Radius:</strong> .625em</p><h1>Company Name</h1><h5>Padding</h5><p>Icons should have sufficient padding when followed by text.</p><div class="padding">    <div>        <h4><i class="bhi-circle"></i>Alice Hughes</h4>        <h6><i class="bhi-location"></i>Boston, MA</h6>        <span class="not-accepted"><i class="bhi-close-o"></i>I feel squished</span>    </div>    <div>        <h4><i class="bhi-circle"></i>Alice Hughes</h4>        <h6><i class="bhi-location"></i>Boston, MA</h6>        <span class="accepted"><i class="bhi-check"></i>Much better</span>    </div></div><h4>Alice Hughes</h4><h6>Boston, MA</h6><p>I feel squished</p><h4>Alice Hughes</h4><h6>Boston, MA</h6><p>Much better</p><h2>Entity Icons</h2><h5>Standard Entity Icons</h5><p>Used with corresponding entity color.</p><p>Lead</p><p>Contact</p><p>Company</p><p>Candidate</p><p>Opportunity</p><p>Job</p><p>Placement</p><pre><code>            &lt;i theme=&quot;entity&quot; class=&quot;bhi-lead lead&quot;&gt;&lt;/i&gt;            &lt;h6&gt;Lead&lt;/h6&gt;            &lt;i theme=&quot;entity&quot; class=&quot;bhi-person contact&quot;&gt;&lt;/i&gt;            &lt;h6&gt;Contact&lt;/h6&gt;            &lt;i theme=&quot;entity&quot; class=&quot;bhi-company company&quot;&gt;&lt;/i&gt;            &lt;h6&gt;Company&lt;/h6&gt;            &lt;i theme=&quot;entity&quot; class=&quot;bhi-candidate candidate&quot;&gt;&lt;/i&gt;            &lt;h6&gt;Candidate&lt;/h6&gt;            &lt;i theme=&quot;entity&quot; class=&quot;bhi-opportunity opportunity&quot;&gt;&lt;/i&gt;            &lt;h6&gt;Opportunity&lt;/h6&gt;            &lt;i theme=&quot;entity&quot; class=&quot;bhi-job job&quot;&gt;&lt;/i&gt;            &lt;h6&gt;Job&lt;/h6&gt;            &lt;i theme=&quot;entity&quot; class=&quot;bhi-star placement&quot;&gt;&lt;/i&gt;            &lt;h6&gt;Placement&lt;/h6&gt;</code></pre><h2>Contained Icons</h2><h5>Scaling</h5><p>Make sure to scale the corner radius appropriately when enlarging or decreasing the size of the icon.</p><p><img src="assets/images/IconographyScalingDont.svg" alt=""></p><p>That doesn't look like a rectangle</p><p><img src="assets/images/IconographyScalingDo.svg" alt=""></p><p>Always maintain the proportions</p><h5>Padding</h5><p>To preserve readability, icons should have sufficient padding from the edges of their containers. Additionally, the icons should be visually centered in their containers.</p><p><img src="assets/images/IconographyPaddingDont.svg" alt=""></p><p>It's getting crowded in here</p><p><img src="assets/images/IconographyPaddingDo.svg" alt=""></p><p>It's good to have some breathing room</p><h5>Examples</h5><h1>Heading One</h1><h2>Heading Two</h2><h3>Heading Three</h3><h4>Heading Four</h4><h5>Heading Five</h5><h6>Heading Six</h6><pre><code>            &lt;h1&gt;&lt;i theme=&quot;contained&quot; class=&quot;bhi-lead lead&quot;&gt;&lt;/i&gt;Heading One&lt;/h1&gt;            &lt;h2&gt;&lt;i theme=&quot;contained&quot; class=&quot;bhi-person contact&quot;&gt;&lt;/i&gt;Heading Two&lt;/h2&gt;            &lt;h3&gt;&lt;i theme=&quot;contained&quot; class=&quot;bhi-company company&quot;&gt;&lt;/i&gt;Heading Three&lt;/h3&gt;            &lt;h4&gt;&lt;i theme=&quot;contained&quot; class=&quot;bhi-candidate candidate&quot;&gt;&lt;/i&gt;Heading Four&lt;/h4&gt;            &lt;h5&gt;&lt;i theme=&quot;contained&quot; class=&quot;bhi-opportunity opportunity&quot;&gt;&lt;/i&gt;Heading Five&lt;/h5&gt;            &lt;h6&gt;&lt;i theme=&quot;contained&quot; class=&quot;bhi-job job&quot;&gt;&lt;/i&gt;Heading Six&lt;/h6&gt;</code></pre>`
            }] }
];
class TypographyPage {
}
TypographyPage.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'typography-page',
                template: `<h1>Typography</h1><h2>Roboto, not robotic.</h2><p>Roboto's refined letterforms combine geometry with open, rounded features to create a structured, yet friendly typeface. It maintains a human-like quality while expressing a clean and modern aesthetic.</p><p><a href="https://www.google.com/fonts/specimen/Roboto">Roboto Typeface on Google Fonts</a></p><p><img src="assets/images/TypographyPageIcon.svg" alt=""></p><h6>Design Principle: Clarity</h6><p>Proper line length, adequate white space, and appropriate line breaks are necessary to preserve readability, rhythm, and overall clarity.</p><h5>Line Height</h5><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco labor.</p><p>These lines are too close for comfort</p><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco labor.</p><p>Thumbs up for great readability</p><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco labor.</p><p>I'm losing focus with all this space</p><h6>Design Principle: Balance</h6><p>Typographic balance is critical to readability and understanding information hierarchy. The weight and size of the font helps determine which element on a page receives a user’s attention first.</p><h5>Line Length</h5><hr><p>30</p><p>Short lines interrupt the reader's rhythm</p><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco labor.</p><hr><p>55-75</p><p>Optimal line length for readability</p><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco labor.</p><hr><p>100</p><p>Difficult to jump to the next line</p><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco labor. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco labor.</p><h6>How does this work with responsive design?</h6><p>Line length is always relative to its font-size. This means that if a font scales up or down in sizing (relative to its device's screen size) the line length will automatically scale with it. Line length is about maintaining a comfortable reading flow and rhythm from line to line.</p><p><strong>When implementing</strong>, native line length will always be secondary to the width of the text's container. This means that if a screen's width is smaller than the text's native line length, the text will wrap early.</p><h2>Styles</h2><p>There a number of general styles that are present throughout the application. To maintain consistency, these styles should be adhered to as much as possible.</p><h1>Header 1</h1><p>Roboto <strong>Size:</strong> 2.5em (35px) <strong>Weight:</strong> 400 <strong>Margin:</strong> 0 <strong>Padding:</strong> 0.45em 0 0.35em</p><h2>Header 2</h2><p>Roboto <strong>Size:</strong> 2em (28px) <strong>Weight:</strong> 500 <strong>Margin:</strong> 0 <strong>Padding:</strong> 0.75em 0 0.3em</p><h3>Header 3</h3><p>Roboto <strong>Size:</strong> 1.75em (24px) <strong>Weight:</strong> 300 <strong>Margin:</strong> 0 <strong>Padding:</strong> 0.6em 0 0.4em</p><h4>Header 4</h4><p>Roboto <strong>Size:</strong> 1.375em (19.25px) <strong>Weight:</strong> 400 <strong>Margin:</strong> 0 <strong>Padding:</strong> 0.75em 0 0.5em</p><h5>Header 5</h5><p>Roboto <strong>Size:</strong> 1.125em (15.75px) <strong>Weight:</strong> 700 <strong>Margin:</strong> 0 <strong>Padding:</strong> 0.75em 0 0.25em <strong>Transform:</strong> UPPERCASE</p><h6>Header 6</h6><p>Roboto <strong>Size:</strong> 1.125em (15.75px) <strong>Weight:</strong> 500 <strong>Margin:</strong> 0 <strong>Padding:</strong> 0.75em 0 0.25em</p><p>Caption</p><h4>Section Header</h4><h2>Large Section Header with Icon</h2><h6>Small Section Header with Icon</h6><pre><code>        &lt;h1&gt;Heading 1&lt;/h1&gt;        &lt;h2&gt;Heading 2&lt;/h2&gt;        &lt;h3&gt;Heading 3&lt;/h3&gt;        &lt;h4&gt;Heading 4&lt;/h4&gt;        &lt;h5&gt;Heading 5&lt;/h5&gt;        &lt;h6&gt;Heading 6&lt;/h6&gt;        &lt;p&gt;        Body        &lt;/p&gt;        &lt;hr&gt;        &lt;span class=&quot;caption&quot;&gt;Caption&lt;/span&gt;        &lt;h4 class=&quot;novo-section-header&quot;&gt;Section Header&lt;/h4&gt;        &lt;h2 class=&quot;novo-section-header&quot;&gt;          &lt;i class=&quot;bhi-section&quot;&gt;          Large Section Header with Icon        &lt;/h2&gt;        &lt;h6 class=&quot;novo-section-header&quot;&gt;          &lt;i class=&quot;bhi-idea&quot;&gt;          Small Section Header with Icon        &lt;/h6&gt;</code></pre>`
            }] }
];
class ChipsPage {
}
ChipsPage.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'chips-page',
                template: `<h1>Chips <a href="https://github.com/bullhorn/novo-elements/blob/master/projects/novo-elements/src/elements/chips">(source)</a></h1><p>The chips element (<code>chips</code>) represents a control that presents a menu of options. The options within are set by the <code>source</code> attribute. Options can be pre-selected for the user using the <code>ngModel</code> attribute. Chips are the multi-select version of <code>pickers</code></p><h5>Basic Examples</h5><p>By clicking on the <code>chips</code> element, the options list will be displayed. Select any of the options by clicking on the item in the list. The value selected will be added to the list of selected values.</p><p><code-example example="basic-chips"></code-example></p><h5>Async Examples</h5><p>By clicking on the <code>chips</code> element, the options list will be displayed. Select any of the options by clicking on the item in the list. The value selected will be added to the list of selected values.</p><p><code-example example="async-chips"></code-example></p><h5>Formatted Examples</h5><p>By clicking on the <code>chips</code> element, the options list will be displayed. Select any of the options by clicking on the item in the list. The value selected will be added to the list of selected values.</p><p><code-example example="formatted-chips"></code-example></p><h5>Options Closing Example</h5><p>By clicking on the <code>chips</code> element, the options list will be displayed. Select any of the options by clicking on the item in the list. The value selected will be added to the list of selected values and the options list will be removed.</p><p><code-example example="close-on-select-chips"></code-example></p><h5>Grouped Multi Picker (categories) with Chips</h5><p>Having custom templates makes it easy to customize the functionality of the picker, here is an example of a category selector</p><p><code-example example="grouped-multi-picker"></code-example></p><h5>Row Chips Example</h5><p>By clicking on the <code>row-chips</code> element, the options list will be displayed.  Select any of the options by clicking on the item in the list.  The value selected will be added to the list of selected values as a new row. By clicking the delete icon at the end of the row, the row will be removed from the list of selected values.</p><p><code-example example="row-chips"></code-example></p>`
            }] }
];
class DatePickerPage {
}
DatePickerPage.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'date-picker-page',
                template: `<h1>Date and Time Pickers</h1><p>These allow users to easily select a time and date. It comes in a handful of varieties based on the content of the field.</p><h2>Date Picker <a href="https://github.com/bullhorn/novo-elements/blob/master/projects/novo-elements/src/elements/date-picker">(source)</a></h2><p>The calendar picker is used to select a date. It appears in all date picker fields.</p><h5>Full Date Picker</h5><p><code-example example="date-picker"></code-example></p><h2>Time Picker <a href="https://github.com/bullhorn/novo-elements/blob/master/projects/novo-elements/src/elements/time-picker">(source)</a></h2><p>Time pickers come in 12 hour or 24 hour style.</p><h5>Standalone Time Picker</h5><p><code-example example="time-picker"></code-example></p><h5>Range Picker</h5><p><code-example example="date-range"></code-example></p><h5>Date Time Picker</h5><p><code-example example="date-time"></code-example></p><h5>Date Time Input Picker</h5><p><code-example example="date-time-input"></code-example></p><h5>Customizing Week Start</h5><p><code-example example="week-start"></code-example></p><h5>Different Locale</h5><p>TBD</p>`
            }] }
];
class EditorPage {
}
EditorPage.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'editor-page',
                template: `<h1>CK Editor <a href="https://github.com/bullhorn/novo-elements/blob/master/projects/novo-elements/src/elements/ckeditor">(source)</a></h1><p>Basic HTML editor using CK Editor.</p><h5>Basic Example</h5><p><code-example example="basic-editor"></code-example></p><h5>Minimal Example</h5><p><code-example example="minimal-editor"></code-example></p>`
            }] }
];
class FormControlsPage {
}
FormControlsPage.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'form-controls-page',
                template: `<h1>Form Controls</h1><p>This is a landing page</p>`
            }] }
];
class FormGroupsPage {
}
FormGroupsPage.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'form-groups-page',
                template: `<h1>Grouped Forms / Form Controls <a href="https://github.com/bullhorn/novo-elements/blob/master/projects/novo-elements/src/elements/form">(source)</a></h1><p>Useful when needing to group smaller sections of forms, can be used in the larger form. Static or Dynamic too!</p><h5>Horizontal</h5><p><code-example example="horizontal"></code-example></p><h5>Horizontal (options)</h5><p><code-example example="horizontal-options"></code-example></p><h5>Vertical</h5><p><code-example example="vertical"></code-example></p><h5>Horizontal (options)</h5><p><code-example example="vertical-options"></code-example></p><h5>Custom Template (you control everything!)</h5><p><code-example example="custom-template"></code-example></p>`
            }] }
];
class FormPage {
}
FormPage.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'form-page',
                template: `<h1>Forms <a href="https://github.com/bullhorn/novo-elements/blob/master/projects/novo-elements/src/elements/form">(source)</a></h1><p>Forms use inputs and labels to submit user content. But you already knew that. What you may not know is that our forms come in two styles 'Static' and 'Dynamic'</p><h2>Static Form</h2><p>Static forms <code>&lt;novo-form /&gt;</code>.</p><h5>Textbox Based Controls</h5><p><code-example example="text-based-controls"></code-example></p><h5>Checkbox Controls</h5><p><code-example example="check-box-controls"></code-example></p><h5>File Input Controls</h5><p><code-example example="file-input-controls"></code-example></p><h5>Calendar Controls</h5><p><code-example example="calendar-input-controls"></code-example></p><h5>Picker Controls</h5><p><code-example example="picker-controls"></code-example></p><h5>Address Controls</h5><p><code-example example="address-control"></code-example></p><h2>Dynamic Form</h2><p>Dynamic forms are composed of one element, <code>&lt;novo-dynamic-form [controls]=&quot;controls&quot;/&gt;</code> and allow you to pass in the controls and form and it will create the form for you.</p><h5>Basic</h5><p><code-example example="dynamic-form"></code-example></p><h5>Vertical</h5><p><code-example example="vertical-dynamic-form"></code-example></p><h5>Fieldsets</h5><p><code-example example="dynamic-form-field-sets"></code-example></p><h5>Updating Fields/Status</h5><p><code-example example="updating-form"></code-example></p><h5>Disabled Field States</h5><p><code-example example="disabled-form"></code-example></p><h5>Enable/Disable All Fields in Form</h5><p><code-example example="enable-disable-all-fields-in-form"></code-example></p>`
            }] }
];
class MultiPickerPage {
}
MultiPickerPage.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'multi-picker-page',
                template: `<h1>MultiPicker <a href="https://github.com/bullhorn/novo-elements/blob/master/projects/novo-elements/src/elements/multi-picker">(source)</a></h1><p>The multipicker element (<code>multipicker</code>) represents a control that presents a menu of options of multiple types. The options within are set by the <code>source</code> attribute. Options can be pre-selected for the user using the <code>ngModel</code> attribute. Multipicker is the multi-category version of <code>chips</code></p><p>.</p><h5>Basic Example</h5><p>By clicking on the <code>multi-picker</code> element, the options list will be displayed. Select any of the options by clicking on the item in the list. The value selected will be added to the list of selected values.</p><p><code-example example="basic-multi-picker"></code-example></p><h5>Nested Example</h5><p>The multipicker can also support a parent-child relationship between the types, such as the relationship between a state with many cities or a department with users.</p><p><code-example example="nested-multi-picker"></code-example></p>`
            }] }
];
class PickerPage {
}
PickerPage.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'picker-page',
                template: `<h1>Picker <a href="https://github.com/bullhorn/novo-elements/blob/master/projects/novo-elements/src/elements/picker">(source)</a></h1><p>The picker element (<code>input[picker]</code>) represents a control that presents a menu of options. The options within are set by the <code>items</code> attribute. Options can be pre-pickered for the user using the <code>value</code> attribute.</p><h5>Basic Examples</h5><p>By clicking on the <code>input</code> element, the options list will be displayed. picker any of the options by clicking on the item in the list. The value pickered will be displayed and the options list will be removed.</p><p><code-example example="basic-picker"></code-example></p><h5>Async Examples (With Infinite Scroll)</h5><p>By clicking on the <code>input</code> element, the options list will be displayed. picker any of the options by clicking on the item in the list. The value pickered will be displayed and the options list will be removed.</p><p><code-example example="async-picker"></code-example></p><h5>Formatted Picker Examples</h5><p>By clicking on the <code>input</code> element, the options list will be displayed. picker any of the options by clicking on the item in the list. The value pickered will be displayed and the options list will be removed.</p><p><code-example example="formatted-picker"></code-example></p><h5>Custom Picker Examples</h5><p>By clicking on the <code>input</code> element, the options list will be displayed. picker any of the options by clicking on the item in the list. The value pickered will be displayed and the options list will be removed.</p><p><code-example example="custom-picker-results"></code-example></p><h5>Overriding the Result Template</h5><p>You can provide a string to override the base result template. You have access to <code>match</code> which is the data to be displayed.</p><p><code-example example="override-template"></code-example></p><h5>Default Options</h5><p>You can set a function or array for the default options on the config, for these options to appear when the user clicks in and doesn't have enough keys entered to perform a search</p><p><code-example example="default-options-picker"></code-example></p><h5>Entity Single Picker</h5><p>You can provide custom config to style the picker to select entities too!</p><p><code-example example="entity-picker"></code-example></p><h5>Grouped Multi Picker (categories) with Picker</h5><p>Having custom templates makes it easy to customize the functionality of the picker, here is an example of a category selector</p><p><code-example example="grouped-picker"></code-example></p>`
            }] }
];
class RadioButtonsPage {
}
RadioButtonsPage.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'radio-buttons-page',
                template: `<h1>Radio <a href="https://github.com/bullhorn/novo-elements/blob/master/projects/novo-elements/src/elements/radio">(source)</a></h1><p>A radio group</p><h5>Basic</h5><p><code-example example="basic-radio"></code-example></p><h5>Vertical</h5><p><code-example example="vertical-radio"></code-example></p><h5>Button Radio</h5><p><code-example example="button-radio"></code-example></p><h5>Icon Radio</h5><p><code-example example="icon-radio"></code-example></p>`
            }] }
];
class SelectPage {
}
SelectPage.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'select-page',
                template: `<h1>Select <a href="https://github.com/bullhorn/novo-elements/blob/master/projects/novo-elements/src/elements/select">(source)</a></h1><p>The select element (<code>novo-select</code>) represents a control that presents a menu of options. The options within are set by the <code>items</code> attribute. Options can be pre-selected for the user using the <code>value</code> attribute.</p><h5>Basic Examples</h5><p>By clicking on the <code>novo-select</code> element, the options list will be displayed. Select any of the options by clicking on the item in the list. The value selected will be displayed and the options list will be removed.</p><p><code-example example="basic-select"></code-example></p><h5>Lots of Options</h5><p>The most common need for the <code>select</code> component is when there are too many options that would fit on on the screen. The options list will display appropriately and scroll as needed.</p><p><code-example example="long-select"></code-example></p>`
            }] }
];
class TilesPage {
}
TilesPage.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'tiles-page',
                template: `<h1>Tiles <a href="https://github.com/bullhorn/novo-elements/blob/master/projects/novo-elements/src/elements/tiles">(source)</a></h1><p>This component is intended to behave akin to the radio button component.</p><h4>Demo</h4><p><code-example example="tiles-usage"></code-example></p><h4>Code</h4>`
            }] }
];
class ValuePage {
}
ValuePage.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'value-page',
                template: `<h1>Value/Details/Summary <a href="https://github.com/bullhorn/novo-elements/blob/master/projects/novo-elements/src/elements/value">(source)</a></h1><p>Used to render data based on its field type provided in meta. It has two themes, DEFAULT - horizontal view and MOBILE - vertical view</p><h2>Mobile Theme</h2><h5>Value/Details/Summary</h5><p>Render SCALAR fields</p><p><code-example example="basic-value"></code-example></p><h5>Category Value</h5><p>Render TO_ONE fields</p><p><code-example example="category-value"></code-example></p><h5>Using Icons w/Values</h5><p>Render fields with one or multiple icons on the right with an onclick event that calls a function on the meta object</p><p><code-example example="icon-value"></code-example></p><h5>CorporateUser</h5><p>Render TO_ONE fields with CorporateUser as an Associated Entity</p><p><code-example example="corporate-user-value"></code-example></p><h5>Custom Formatter</h5><p>Render Entity TO_ONE fields as links</p><p><code-example example="formatter-value"></code-example></p><h5>External Links</h5><p>Render external links</p><p><code-example example="external-link-value"></code-example></p><h5>DateTime</h5><p>Render DateTime and Timestamp fields in the localized Date format</p><p><code-example example="date-time-value"></code-example></p><h5>Address</h5><p>Render Address fields</p><p><code-example example="address-value"></code-example></p><h5>Associated Entities</h5><p>Render associated fields</p><p><code-example example="associated-value"></code-example></p><h5>Entity Lists</h5><p>Render entity lists</p><p><code-example example="entity-list-value"></code-example></p><h5>Multi Options</h5><p>Render multi option fields (Checkbox, radio, etc.)</p><p><code-example example="multi-option-value"></code-example></p>`
            }] }
];
class HomePage {
}
HomePage.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'home-page',
                template: `<h1>Introduction</h1><h2>Crafted amid Complexity</h2><p>Enterprise software is highly complex and demands a high level of flexibility. Design offers clarity and enables us to make deep, powerful connections.</p><img src="assets/images/IntroPageHeaderImage.svg" width="300"/><h5>A NEW STANDARD</h5><p>Elegance in utility helps to create a system for humans, not robots. We strive not just to empower users but to delight them in the process.</p><h5>INSIGHTS AT SCALE</h5><p>Vast data reservoirs need a finely tuned system to surface the critical information right when it is needed, no matter the scale or setting.</p><h5>POWER IN FLEXIBILITY</h5><p>Users have vastly differing needs and goals. By identifying key commonalities and themes, we provide a strong experience for all.</p><p>Are you a developer and what to skip right to the code?<br><a href="#">View Components here</a></p><p>Looking for the Bullhorn corporate brand guidelines?<br><a href="https://brandfolder.com/bullhorn">Bullhorn Brand Folder</a></p>`
            }] }
];
class CardsPage {
}
CardsPage.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'cards-page',
                template: `<h1>Cards <a href="https://github.com/bullhorn/novo-elements/blob/master/projects/novo-elements/src/elements/card">(source)</a></h1><p>Components and elements for cards to make sure the loading/empty/layout views are all consistent.</p><h5>Examples</h5><h2>Basic Card (using attributes)</h2><p><code-example example="basic-card"></code-example></p><h2>Card (using config object and card-actions)</h2><p><code-example example="card-config"></code-example></p>`
            }] }
];
class ExpansionPage {
}
ExpansionPage.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'expansion-page',
                template: `<h1>Expandable Containers<a href="https://github.com/bullhorn/novo-elements/blob/master/projects/novo-elements/src/elements/expansion">(source)</a></h1><p>Expansion Panel provides an expandable details-summary view. Each expansion-panel must include a header and may optionally include an action bar.</p><p>By default, the expansion-panel header includes a toggle icon at the end of the header to indicate the expansion state. This icon can be hidden via the hideToggle property.</p><h2>Basic Usage</h2><h5>Standard Expansion Panel</h5><p>This is an example of a standard list.</p><p><code-example example="basic-expansion"></code-example></p><h5>Accordion Expansion Panel</h5><p>This is an example of a Accordion.</p><p><code-example example="accordion"></code-example></p><h5>Lazy Expansion Panel</h5><p>This is an example of a Lazy loaded list.</p><p><code-example example="lazy-expansion"></code-example></p><h5>Patterns</h5><p>Check out the <a routerLink="/patterns">Activity Section</a> pattern</p>`
            }] }
];
class HeaderPage {
}
HeaderPage.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'header-page',
                template: `<h1>Headers <a href="https://github.com/bullhorn/novo-elements/blob/master/projects/novo-elements/src/elements/header">(source)</a></h1><p>Headers are used in Mainframe Record pages and some modals.</p><h2>Types</h2><h5>Record Header</h5><p>Record headers have details about the entity record and tabbed navigation.</p><p><code-example example="basic-header"></code-example></p><h5>Condensed</h5><p><code-example example="condensed-header"></code-example></p><h2>Options</h2><h5>SubTitle</h5><p><code-example example="header-subtitle"></code-example></p><h5>With Search</h5><p><code-example example="header-searchbar"></code-example></p>`
            }] }
];
class LayoutsPage {
}
LayoutsPage.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'layouts-page',
                template: `<h1>Layouts</h1><p>This is a landing page</p>`
            }] }
];
class ListPage {
}
ListPage.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'list-page',
                template: `<h1>List / Item <a href="https://github.com/bullhorn/novo-elements/blob/master/projects/novo-elements/src/elements/list">(source)</a></h1><p>Lists are used to display rows of information like entities or entity data and appear on cards, our mobile app, and several other places across the Bullhorn platform.</p><h2>Basic Usage</h2><h5>Standard List</h5><p>This is an example of a standard list.</p><p><code-example example="basic-list"></code-example></p><h5>Themed List</h5><p>This is an example of a themed list.</p><p><code-example example="themed-list"></code-example></p>`
            }] }
];
class StepperPage {
}
StepperPage.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'stepper-page',
                template: `<h1>Steppers <a href="https://github.com/bullhorn/novo-elements/blob/master/projects/novo-elements/src/elements/stepper">(source)</a></h1><p>Stepper component provides a wizard-like workflow by dividing content into logical steps.</p><p>Material stepper builds on the foundation of the CDK stepper that is responsible for the logic that drives a stepped workflow. Material stepper extends the CDK stepper and has Material Design styling.</p><h2>Stepper variants</h2><p>There are two stepper components: novo-horizontal-stepper and novo-vertical-stepper. They can be used the same way. The only difference is the orientation of stepper.</p><h5>Horizontal Stepper</h5><p>This is the default stepper great for many reasons.</p><p><code-example example="stepper-horizontal"></code-example></p><h5>Linear stepper</h5><p>The linear attribute can be set on novo-horizontal-stepper and novo-vertical-stepper to create a linear stepper that requires the user to complete previous steps before proceeding to following steps. For each novo-step, the stepControl attribute can be set to the top level AbstractControl that is used to check the validity of the step.</p><p>There are two possible approaches. One is using a single form for stepper, and the other is using a different form for each step.</p><p>Alternatively, if you don't want to use the Angular forms, you can pass in the completed property to each of the steps which won't allow the user to continue until it becomes true. Note that if both completed and stepControl are set, the stepControl will take precedence.</p><h5>Vertical Stepper</h5><p>This is an alternative stepper great for many other reasons.</p><p><code-example example="stepper-vertical"></code-example></p>`
            }] }
];
class TabsPage {
}
TabsPage.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'tabs-page',
                template: `<h1>Tabs <a href="https://github.com/bullhorn/novo-elements/blob/master/projects/novo-elements/src/elements/tabs">(source)</a></h1><p>Tabs make it easy to explore and switch between different views or functional aspects of an app or to browse categorized data sets. Tabs in Bullhorn have two different themes; A 'color' theme for tabbed navigation on a colored background, and a 'white' theme for tabs on a white background.</p><h2>Themes</h2><h5>Color</h5><p>Colored background tab navigation gets the theme <code>theme=&quot;color&quot;</code></p><p><code-example example="tabs-color"></code-example></p><h5>White</h5><p>White background tab navigation gets the theme <code>theme=&quot;white&quot;</code></p><p><code-example example="tabs-color"></code-example></p><h2>Styles</h2><p>Condensed tabs to help utilize more space with <code>condensed=&quot;true&quot;</code></p><p><code-example example="tabs-condensed"></code-example></p><h2>Types</h2><h5>Vertical</h5><p>Vertical tabs get a direction attribute <code>direction=&quot;vertical&quot;</code></p><p><code-example example="tabs-vertical"></code-example></p><h5>Button Tab Bars</h5><p>Tabbed Button Bars get a similar style treatment to the <code>&quot;header&quot;</code> theme button.</p><!-- <code-example example="tabs-condensed"></code-example> --><h2>As Application Routing Mechanism</h2><p>Follows the same color/white theme as above, but doesn't use the &quot;novo-tabs&quot; tag and you have to add the classes and html accordingly. The header will now control and route your application and put the content in the &quot;router-outlet&quot; and look/feel like our tabs component.</p><p><code-example example="tabs-router"></code-example></p>`
            }] }
];
class PatternsPage {
}
PatternsPage.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'patterns-page',
                template: `<h1>Design Patterns</h1><p>The following are examples of know composition patterns to create a common user experience.  The component library is design to be used in these patterns.</p><h2>Activity Sections</h2><p>Displaying a series of lists in expandable sections, like in the activity tab.</p><p><code-example example="activity-section"></code-example></p><h2>Record Headers</h2><p>Entity Record Headers Patterns.</p><p><code-example example="record-header"></code-example></p>`
            }] }
];
class TemplatesPage {
}
TemplatesPage.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'templates-page',
                template: `<h2>Bullhorn Application Templates</h2><p>Bullhorn provides customization of the user experience with custom tabs, custom cards, custom actions and more.</p><p>The <a href="https://github.com/bullhorn/extension-samples">Bullhorn Extension Samples</a> repoprovides several examples for getting started building custom apps using Novo Elements.</p>`
            }] }
];
class ChomskyPage {
}
ChomskyPage.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'chomsky-page',
                template: `<h1>Chomsky-NG2 Documentation</h1><p>A lightweight Angular 2 i18n wrapper.</p><ul><li>English</li><li>Russian</li><li>French</li></ul><h5>Simple Translation</h5><p><code-example example="simple-translations"></code-example></p><h5>Translation with Variables</h5><p><code-example example="translations-variables"></code-example></p><h5>Translation with Date Variables</h5><p>Other short formats include (bold is default):<br><em>short - 02/14/2017, 1:17 PM</em><br><em>medium - Feb 14, 2017, 1:17 PM</em><br><em>long - Febuary 14, 2017, 1:17 PM CST</em><br><strong><em>dateShort - 02/14/2017</em></strong><br><em>dateMedium - Feb 14, 2017</em><br><em>dateLong - Febuary 14, 2017</em><br><em>timeShort - 1:17 PM</em><br><em>timeLong - 1:17 PM CST</em></p><p><code-example example="date-translations"></code-example></p><h5>Translation with Number &amp; Currency Variables</h5><p>Can be used with syntax from <a href="//developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NumberFormat">Intl.NumberFormat</a>.</p><p><code-example example="number-translations"></code-example></p><h5>Translation with Pluralization and Gender</h5><p><code-example example="plural-translations"></code-example></p>`
            }] }
];
class FieldInteractionsPage {
}
FieldInteractionsPage.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'field-interactions-page',
                template: `<h1>Field Interactions</h1><p>Field Interactions is a simple API that allows you to modify NovoForms based on field changes.</p><p>The Field Interaction API gives you a simple to use API object when writing your field interaction functions.</p><p>Look below for samples of what you can do with this API...</p><h2>Configuration</h2><p>Inspect Form Configuration on Field Getting Current Context Write Field Interaction</p><h5>Inspect Form</h5><p>There is a special <code>data-control-key</code> property added to the <code>novo-control</code> element.</p><p>You can inspec the DOM at the input and see the property to know what 'key' to use in the API</p><p>By default, if you are writing a Field Interaction for the active field you can use <code>API.getActiveKey()</code></p><h5>Configuration on Field</h5><pre><code>event: 'change|focus|blur|init', script: Function, invokeOnInit?: boolean</code></pre><p>The Field Interactions are configured on a per control basis. There are three scenarios in which they will be fired: 'change', 'focus' and 'blur'.</p><p>init -- gets fired only when the form is initialized</p><p>change -- gets fired when the value of the form control changes</p><p>focus -- gets fired when the field gets focused</p><p>blur -- gets fired when the field loses focus</p><p>The script function represents the function that will be fired for the event, you can see examples of these below.</p><p>Lastly, 'invokeOnInit' will also trigger the Field Interaction when the form is created as well.</p><h5>Getting Current Context</h5><p>If you need to write Field Interaction based on if you are on an add or edit page, or you need to know the current entity type and ID then you can get those via:</p><p>edit: 'API.isEdit'</p><p>entity: 'API.currentEntity'</p><p>id: 'API.currentEntityId'</p><h5>Write Field Interaction</h5><p>Writing Field Interactions is very simple. You can refer to all the examples below. If you ever get stuck, you can always open a <a href="https://github.com/bullhorn/novo-elements/issues">Github Issue</a> as well!</p><p><strong>IMPORTANT</strong></p><p>When writing field interactions, you will be writing everything only the contents of the function. <strong>You do not</strong> write the surrounding function.</p><p><strong>All field interactions must be written in vanilla ES5 as well!</strong></p><h2>Basic API</h2><p>Validation Mark Fields as Required Field Calculations &amp; Modification Hide / Show Fields Enable / Disable Fields Messaging / Notifications Modifying Config on Static Pickers / Selects Using Globals Async Interactions Confirm Changes Adding / Removing Fields Add Tooltip</p><h5>Validation</h5><p>If you need to perform some custom validation on a field, you can use the API to quickly mark a field as invalid</p><p><code-example example="fi-validation"></code-example></p><h5>Mark Fields as Required</h5><p>If you need to mark fields as required or not based on some changes in the form, you can use the API to do that!</p><p><code-example example="fi-required"></code-example></p><h5>Field Calculations &amp; Modification</h5><p>If you need to do some custom calculations based off other form data, you can do that easily with the API</p><p><code-example example="fi-calculation"></code-example></p><h5>Hide / Show Fields</h5><p>You can also hide or show certain fields based on interaction with the form. Note that the value is still present in the form's value</p><p><code-example example="fi-hide-show"></code-example></p><h5>Enable / Disable Fields</h5><p>You can also enable or disable certain fields based on interaction with the form. Note that the value is still present in the form's value but does not respond to any interactions</p><p><code-example example="fi-enable-disable"></code-example></p><h5>Messaging / Notifications</h5><p>You can trigger messages to users in a few different ways using the API</p><p><code-example example="fi-messaging"></code-example></p><h5>Modifying Config on Static Pickers / Selects</h5><p>You have full control over the control, you can modify the options array of static pickers and select controls!</p><p><code-example example="fi-modify-options"></code-example></p><h5>Modifying Config on Static Pickers / Selects to mimic an Entity Picker</h5><p>You can modify a picker added to a form via field interactions to look like an entity picker!</p><p><code-example example="fi-modify-added-picker"></code-example></p><h5>Using Globals</h5><p>Using the config from above, you can figure the API to have a set of global variables that you can key off of inside your field interactions</p><p><code-example example="fi-globals"></code-example></p><h5>Async Interactions</h5><p>You can perform async interactions and keep the form from saving by setting a loading state</p><p><code-example example="fi-async"></code-example></p><h5>Confirm Changes</h5><p>You can prompt the user if they want to update the field or not too!</p><p><code-example example="fi-confirm"></code-example></p><h5>Adding / Removing Fields</h5><p>With the API you can quickly add and remove fields on the form.</p><p><strong>ONLY WORKS WITH DYNAMIC FORMS</strong></p><p><code-example example="fi-adding-removing"></code-example></p><h5>Add Tooltip</h5><p>You are able to dynamically change a field's tooltip.</p><p><code-example example="fi-tooltip"></code-example></p>`
            }] }
];
class ModalPage {
}
ModalPage.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'modal-page',
                template: `<h1>Modals <a href="https://github.com/bullhorn/novo-elements/blob/master/projects/novo-elements/src/elements/modal">(source)</a></h1><p>Modals are pop-up dialogues designed to grab attention and inform the user of something critical, force a decision, or extend a workflow. There are two categories of modals: notification and workflow. Regardless of type, a modal should have a maximum of two main buttons.</p><h2>Notification Modals</h2><h5>Success</h5><p>This modal uses only a primary action button. It is a confirmation that an action has been completed when the result is not immediately apparent. A workflow modal often transitions into a success modal.</p><p><code-example example="success-modal"></code-example></p><h5>Warning</h5><p>Warning modals ask for additional confirmation to complete an action because the action is either irreversible or there is an exception. The first line should always clarify the action or eventual result.</p><p><code-example example="warning-modal"></code-example></p><h5>Error</h5><p>Error modals indicate that an attempted action has failed. The first line should apologize and state the what happened. The second line should quickly attempt to explain to the user why this has happened, and instruct the user on the best course of action.</p><p><code-example example="error-modal"></code-example></p><h5>Custom</h5><p>In the case where &quot;Success&quot;, &quot;Warning&quot;, and &quot;Error&quot; notfications aren't enough, use the custom notification. Custom notifcations allow any of the Bullhorn Icons to be used in the notification.</p><p><code-example example="custom-modal"></code-example></p><h2>Workflow Modals</h2><h5>Add</h5><p>Add modals have a colored title bar based on the record type being created. Additionally, due to a greater than average amount of content, they have fixed footers.</p><p><code-example example="modal-add-form"></code-example></p><h5>Edit &amp; Send</h5><p>Edit, Send, and non-Add workflow modals possess a plain header to remind the user of the action they are taking. They generally have a neutralizing button, and a primary button.</p><p><code-example example="modal-edit-form"></code-example></p>`
            }] }
];
class PipesPage {
}
PipesPage.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'pipes-page',
                template: `<h1>Pipes</h1><p>Utility and helpful pipes.</p><h5>Pluralize <a href="https://github.com/bullhorn/novo-elements/blob/master/projects/novo-elements/src/pipes/plural">(source)</a></h5><p>Makes works plural or vice-versa</p><p><code-example example="pluralize"></code-example></p>`
            }] }
];
class PopOverPage {
}
PopOverPage.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'pop-over-page',
                template: `<h1>PopOvers <a href="https://github.com/bullhorn/novo-elements/blob/master/projects/novo-elements/src/elements/popover">(source)</a></h1><p>PopOvers are tooltips with dynamic html content. This component is used when you need help text that requires the user to perform an action before closing.</p><h5>Placement</h5><p><code-example example="pop-over-placement"></code-example></p><h5>Horizontal Alignment</h5><p><code-example example="pop-over-horizontal"></code-example></p><h5>Vertical Alignment</h5><p><code-example example="pop-over-vertical"></code-example></p><h5>Behavior</h5><p><code-example example="pop-over-behaviors"></code-example></p><h5>Dynamic HTML in PopOver</h5><p><code-example example="pop-over-dynamic"></code-example></p><h5>Automatic Placement of PopOver</h5><p><code-example example="pop-over-auto-placement"></code-example></p>`
            }] }
];
class SecurityPage {
}
SecurityPage.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'security-page',
                template: `<h1>Security</h1><p>The security component for this library a simple wrapper to implement ngIf functionality with a Security service.</p><h4>Configuration</h4><p>blah blah blah</p><p><code-example example="security"></code-example></p>`
            }] }
];
class TipWellPage {
}
TipWellPage.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'tip-well-page',
                template: `<h1>TipWell <a href="https://github.com/bullhorn/novo-elements/blob/master/projects/novo-elements/src/elements/tip-well">(source)</a></h1><p>This component is meant to be akin to Bootstrap's 'well'. It's a small container for help text.</p><h4>Demo</h4><p><code-example example="basic-tip-well"></code-example></p><h4>No Button Demo</h4><p><code-example example="buttonless-tip-well"></code-example></p><h4>Icon Demo</h4><p><code-example example="icon-tip-well"></code-example></p><h4>HTML Demo</h4><p><code-example example="html-tip-well"></code-example></p>`
            }] }
];
class ToasterPage {
}
ToasterPage.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'toaster-page',
                template: `<h1>Toast Notifications <a href="https://github.com/bullhorn/novo-elements/blob/master/projects/novo-elements/src/elements/toast">(source)</a></h1><p>Toasts are used as system notifications. They can contain custom text titles and messages, as well as any icons from bh-icons and any color from our color palletes.</p><h2>Types</h2><h5>Alert</h5><p>This type of toast notification takes a template, a style, and a location.</p><h2>Embedded Toast</h2><p><code-example example="toast-usage"></code-example></p><h2>Toaster Service</h2><p><code-example example="toast-service"></code-example></p>`
            }] }
];
class TooltipPage {
}
TooltipPage.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                selector: 'tooltip-page',
                template: `<h1>Tooltips <a href="https://github.com/bullhorn/novo-elements/blob/master/projects/novo-elements/src/elements/tooltip">(source)</a></h1><h2>Helper</h2><p>Helper tooltips contain basic text that provides some additional information about an element.</p><h5>Placement</h5><p><code-example example="tooltip-placement"></code-example></p><h5>Alignment</h5><p><code-example example="tooltip-align"></code-example></p><h5>Types</h5><p><code-example example="tooltip-types"></code-example></p><h5>Sizes</h5><p><code-example example="tooltip-sizes"></code-example></p><h5>Options</h5><p><code-example example="tooltip-options"></code-example></p><h5>Toggle Trigger</h5><p><code-example example="tooltip-toggle"></code-example></p>`
            }] }
];
const ɵ0$1 = { title: 'Ace Editor', section: 'components' }, ɵ1$1 = { title: 'Buttons', section: 'components' }, ɵ2$1 = { title: 'Calendar', section: 'components' }, ɵ3$1 = { title: 'Components', section: 'src' }, ɵ4$1 = { title: 'Data Table', section: 'components' }, ɵ5$1 = { title: 'Dropdown', section: 'components' }, ɵ6 = { title: 'Icon', section: 'components' }, ɵ7 = { title: 'Loading', section: 'components' }, ɵ8 = { title: 'Quick Note', section: 'components' }, ɵ9 = { title: 'Search', section: 'components' }, ɵ10 = { title: 'Slides', section: 'components' }, ɵ11 = { title: 'Switch', section: 'components' }, ɵ12 = { title: 'Tabbed Group Picker', section: 'components' }, ɵ13 = { title: 'Table', section: 'components' }, ɵ14 = { title: 'Colors', section: 'design' }, ɵ15 = { title: 'Composition', section: 'design' }, ɵ16 = { title: 'Design', section: 'src' }, ɵ17 = { title: 'Iconography', section: 'design' }, ɵ18 = { title: 'Typography', section: 'design' }, ɵ19 = { title: 'Chips', section: 'form-controls' }, ɵ20 = { title: 'Date Picker', section: 'form-controls' }, ɵ21 = { title: 'Editor', section: 'form-controls' }, ɵ22 = { title: 'Form Controls', section: 'src' }, ɵ23 = { title: 'Form Groups', section: 'form-controls' }, ɵ24 = { title: 'Form', section: 'form-controls' }, ɵ25 = { title: 'Multi Picker', section: 'form-controls' }, ɵ26 = { title: 'Picker', section: 'form-controls' }, ɵ27 = { title: 'Radio Buttons', section: 'form-controls' }, ɵ28 = { title: 'Select', section: 'form-controls' }, ɵ29 = { title: 'Tiles', section: 'form-controls' }, ɵ30 = { title: 'Value', section: 'form-controls' }, ɵ31 = { title: 'Home', section: 'src' }, ɵ32 = { title: 'Cards', section: 'layouts' }, ɵ33 = { title: 'Expansion', section: 'layouts' }, ɵ34 = { title: 'Header', section: 'layouts' }, ɵ35 = { title: 'Layouts', section: 'src' }, ɵ36 = { title: 'List', section: 'layouts' }, ɵ37 = { title: 'Stepper', section: 'layouts' }, ɵ38 = { title: 'Tabs', section: 'layouts' }, ɵ39 = { title: 'Patterns', section: 'src' }, ɵ40 = { title: 'Templates', section: 'src' }, ɵ41 = { title: 'Chomsky', section: 'utils' }, ɵ42 = { title: 'Field Interactions', section: 'utils' }, ɵ43 = { title: 'Modal', section: 'utils' }, ɵ44 = { title: 'Pipes', section: 'utils' }, ɵ45 = { title: 'Pop Over', section: 'utils' }, ɵ46 = { title: 'Security', section: 'utils' }, ɵ47 = { title: 'Tip Well', section: 'utils' }, ɵ48 = { title: 'Toaster', section: 'utils' }, ɵ49 = { title: 'Tooltip', section: 'utils' }, ɵ50 = {};
/** @type {?} */
const routes = [
    //{ path: '', component: Home, data: {} },
    { path: 'components/ace-editor', component: AceEditorPage, data: ɵ0$1 },
    { path: 'components/buttons', component: ButtonsPage, data: ɵ1$1 },
    { path: 'components/calendar', component: CalendarPage, data: ɵ2$1 },
    { path: 'components', component: ComponentsPage, data: ɵ3$1 },
    { path: 'components/data-table', component: DataTablePage, data: ɵ4$1 },
    { path: 'components/dropdown', component: DropdownPage, data: ɵ5$1 },
    { path: 'components/icon', component: IconPage, data: ɵ6 },
    { path: 'components/loading', component: LoadingPage, data: ɵ7 },
    { path: 'components/quick-note', component: QuickNotePage, data: ɵ8 },
    { path: 'components/search', component: SearchPage, data: ɵ9 },
    { path: 'components/slides', component: SlidesPage, data: ɵ10 },
    { path: 'components/switch', component: SwitchPage, data: ɵ11 },
    { path: 'components/tabbed-group-picker', component: TabbedGroupPickerPage, data: ɵ12 },
    { path: 'components/table', component: TablePage, data: ɵ13 },
    { path: 'design/colors', component: ColorsPage, data: ɵ14 },
    { path: 'design/composition', component: CompositionPage, data: ɵ15 },
    { path: 'design', component: DesignPage, data: ɵ16 },
    { path: 'design/iconography', component: IconographyPage, data: ɵ17 },
    { path: 'design/typography', component: TypographyPage, data: ɵ18 },
    { path: 'form-controls/chips', component: ChipsPage, data: ɵ19 },
    { path: 'form-controls/date-picker', component: DatePickerPage, data: ɵ20 },
    { path: 'form-controls/editor', component: EditorPage, data: ɵ21 },
    { path: 'form-controls', component: FormControlsPage, data: ɵ22 },
    { path: 'form-controls/form-groups', component: FormGroupsPage, data: ɵ23 },
    { path: 'form-controls/form', component: FormPage, data: ɵ24 },
    { path: 'form-controls/multi-picker', component: MultiPickerPage, data: ɵ25 },
    { path: 'form-controls/picker', component: PickerPage, data: ɵ26 },
    { path: 'form-controls/radio-buttons', component: RadioButtonsPage, data: ɵ27 },
    { path: 'form-controls/select', component: SelectPage, data: ɵ28 },
    { path: 'form-controls/tiles', component: TilesPage, data: ɵ29 },
    { path: 'form-controls/value', component: ValuePage, data: ɵ30 },
    { path: 'home', component: HomePage, data: ɵ31 },
    { path: 'layouts/cards', component: CardsPage, data: ɵ32 },
    { path: 'layouts/expansion', component: ExpansionPage, data: ɵ33 },
    { path: 'layouts/header', component: HeaderPage, data: ɵ34 },
    { path: 'layouts', component: LayoutsPage, data: ɵ35 },
    { path: 'layouts/list', component: ListPage, data: ɵ36 },
    { path: 'layouts/stepper', component: StepperPage, data: ɵ37 },
    { path: 'layouts/tabs', component: TabsPage, data: ɵ38 },
    { path: 'patterns', component: PatternsPage, data: ɵ39 },
    { path: 'templates', component: TemplatesPage, data: ɵ40 },
    { path: 'utils/chomsky', component: ChomskyPage, data: ɵ41 },
    { path: 'utils/field-interactions', component: FieldInteractionsPage, data: ɵ42 },
    { path: 'utils/modal', component: ModalPage, data: ɵ43 },
    { path: 'utils/pipes', component: PipesPage, data: ɵ44 },
    { path: 'utils/pop-over', component: PopOverPage, data: ɵ45 },
    { path: 'utils/security', component: SecurityPage, data: ɵ46 },
    { path: 'utils/tip-well', component: TipWellPage, data: ɵ47 },
    { path: 'utils/toaster', component: ToasterPage, data: ɵ48 },
    { path: 'utils/tooltip', component: TooltipPage, data: ɵ49 },
    // Catch All
    { path: '**', redirectTo: '/home', data: ɵ50 },
];
/** @type {?} */
const PAGE_LIST = [
    AceEditorPage, ButtonsPage, CalendarPage, ComponentsPage, DataTablePage, DropdownPage, IconPage, LoadingPage, QuickNotePage, SearchPage, SlidesPage, SwitchPage, TabbedGroupPickerPage, TablePage, ColorsPage, CompositionPage, DesignPage, IconographyPage, TypographyPage, ChipsPage, DatePickerPage, EditorPage, FormControlsPage, FormGroupsPage, FormPage, MultiPickerPage, PickerPage, RadioButtonsPage, SelectPage, TilesPage, ValuePage, HomePage, CardsPage, ExpansionPage, HeaderPage, LayoutsPage, ListPage, StepperPage, TabsPage, PatternsPage, TemplatesPage, ChomskyPage, FieldInteractionsPage, ModalPage, PipesPage, PopOverPage, SecurityPage, TipWellPage, ToasterPage, TooltipPage
];
class NovoExamplesRoutesModule {
}
NovoExamplesRoutesModule.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                declarations: PAGE_LIST,
                entryComponents: PAGE_LIST,
                imports: [_angular_router__WEBPACK_IMPORTED_MODULE_8__["RouterModule"].forRoot(routes, { useHash: true }), NovoExamplesModule, NovoExamplesSharedModule],
                exports: [_angular_router__WEBPACK_IMPORTED_MODULE_8__["RouterModule"]],
            },] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: index.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: novo-examples.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */


//# sourceMappingURL=novo-examples.js.map


/***/ }),

/***/ "./node_modules/raw-loader/dist/cjs.js!./demo/app/app.component.html":
/*!***************************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./demo/app/app.component.html ***!
  \***************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("<nav class=\"main-nav\"\n     [ngClass]=\"{open: menuOpen}\">\n    <span class=\"logo\">\n        <div class=\"title\">\n            <svg routerLink=\"Home\"\n                 data-name=\"bullhorn-text\"\n                 version=\"1.1\"\n                 xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n                 xmlns:a=\"http://ns.adobe.com/AdobeSVGViewerExtensions/3.0/\"\n                 x=\"0px\"\n                 y=\"0px\"\n                 xml:space=\"preserve\"\n                 id=\"Layer_1\"\n                 data-name=\"Layer 1\"\n                 xmlns=\"http://www.w3.org/2000/svg\"\n                 viewBox=\"0 0 989.95 383.98\">\n                <defs>\n                    <style>\n                        .cls-1 {\n                            fill: #fff;\n                        }\n\n                        .cls-2 {\n                            fill: #ff6b00;\n                        }\n                    </style>\n                </defs>\n                <title>Artboard 1</title>\n                <path class=\"cls-1\"\n                      d=\"M5.63,226.16A3.16,3.16,0,0,1,8.79,223H65.17q22.93,0,34.7,11.76a29.9,29.9,0,0,1,8.91,22v.38a32.88,32.88,0,0,1-1.61,10.61A30.12,30.12,0,0,1,103,276a30.64,30.64,0,0,1-6,6.17c-.61.47-1.23.92-1.85,1.36A3.16,3.16,0,0,0,95.6,289a44.53,44.53,0,0,1,13.28,9.08q7.29,7.41,7.3,20.86v.38a33.92,33.92,0,0,1-3.51,15.74,31.25,31.25,0,0,1-10,11.38,47.63,47.63,0,0,1-15.45,6.92,79.48,79.48,0,0,1-20.2,2.37H8.79a3.15,3.15,0,0,1-3.16-3.16Zm54.8,52.78q11.37,0,18.2-4.43T85.46,261v-.38a14.53,14.53,0,0,0-6-12.36q-6-4.42-17.36-4.43H31.73A3.17,3.17,0,0,0,28.57,247v28.77a3.16,3.16,0,0,0,3.16,3.15Zm6.82,55.94q12,0,18.78-4.53t6.82-13.58v-.37a15,15,0,0,0-6.73-13.11q-6.74-4.64-20.57-4.63H31.73a3.17,3.17,0,0,0-3.16,3.16v29.9a3.16,3.16,0,0,0,3.16,3.16Z\" />\n                <path class=\"cls-1\"\n                      d=\"M235.05,221.82h16.64a3.53,3.53,0,0,1,3.53,3.53V352.21a3.53,3.53,0,0,1-3.53,3.53H235.05a3.53,3.53,0,0,1-3.53-3.53V225.35a3.53,3.53,0,0,1,3.53-3.53\" />\n                <path class=\"cls-1\"\n                      d=\"M276.5,221.82h16.64a3.54,3.54,0,0,1,3.53,3.53V352.21a3.54,3.54,0,0,1-3.53,3.53H276.5a3.53,3.53,0,0,1-3.53-3.53V225.35a3.53,3.53,0,0,1,3.53-3.53\" />\n                <path class=\"cls-1\"\n                      d=\"M314.42,221.82h11.43a11.87,11.87,0,0,1,11.86,11.87v37.53a40.38,40.38,0,0,1,10.55-7.84q6.92-3.81,17.76-3.81a40.35,40.35,0,0,1,15.46,2.81,30.3,30.3,0,0,1,11.35,7.93,35.23,35.23,0,0,1,6.92,12.35,49.82,49.82,0,0,1,2.41,15.86v54a3.24,3.24,0,0,1-3.25,3.25H381.72a3.25,3.25,0,0,1-3.25-3.25V298.72q0-9-4.92-14a17.25,17.25,0,0,0-12.75-4.92,21.67,21.67,0,0,0-9,1.91,21.1,21.1,0,0,0-7.23,5.32,25.41,25.41,0,0,0-4.72,7.93,27.27,27.27,0,0,0-1.7,9.73v47.75a3.25,3.25,0,0,1-3.26,3.25H317.68a3.25,3.25,0,0,1-3.26-3.25V221.82Z\" />\n                <path class=\"cls-1\"\n                      d=\"M599.28,261.58h14.94a4,4,0,0,1,4,3.76l.39,6.88a51.56,51.56,0,0,1,4.32-4.22,32.65,32.65,0,0,1,6-4.11,37.24,37.24,0,0,1,7.93-3.12,38.33,38.33,0,0,1,10-1.2q17.65,0,26.9,10.54T683,298.52v53a4.21,4.21,0,0,1-4.22,4.21H663.56a4.2,4.2,0,0,1-4.21-4.21V298.72q0-9-4.92-14a17.25,17.25,0,0,0-12.75-4.92,21.72,21.72,0,0,0-9,1.91,21.1,21.1,0,0,0-7.23,5.32A25.39,25.39,0,0,0,620.7,295a27.27,27.27,0,0,0-1.71,9.73v46.79a4.21,4.21,0,0,1-4.21,4.21H599.51a4.2,4.2,0,0,1-4.21-4.21v-86a4,4,0,0,1,4-4\" />\n                <path class=\"cls-1\"\n                      d=\"M709.07,270.13a8.17,8.17,0,0,1-16.33,0,8.1,8.1,0,0,1,1.1-4.09,7.9,7.9,0,0,1,3-3,8.13,8.13,0,0,1,8.15,0,8.22,8.22,0,0,1,4.09,7.06m-1.12,0a6.87,6.87,0,0,0-1-3.52,7,7,0,0,0-2.57-2.58,6.84,6.84,0,0,0-3.5-.95,7,7,0,0,0-3.54.95,6.9,6.9,0,0,0-2.59,2.58,7,7,0,0,0-.94,3.54,6.89,6.89,0,0,0,.94,3.51,7.12,7.12,0,0,0,6.13,3.51,6.8,6.8,0,0,0,3.5-.95,7,7,0,0,0,2.58-2.57,6.88,6.88,0,0,0,.94-3.52m-10.46-4.75h3.93a5,5,0,0,1,2,.28,2.18,2.18,0,0,1,1,.89,2.93,2.93,0,0,1,.12,2.69,2.74,2.74,0,0,1-.9.84,1.81,1.81,0,0,1,.86.72,3.32,3.32,0,0,1,.21,1.4v1.06a2.18,2.18,0,0,0,.33,1.24l.16.25h-1.66a6.19,6.19,0,0,1-.23-1.37l-.08-1.15a2,2,0,0,0-.2-.89,1,1,0,0,0-.46-.37,3.85,3.85,0,0,0-1.2-.12H699v3.9h-1.48Zm1.48,1.36v2.78h2.33a3,3,0,0,0,1.44-.24,1.24,1.24,0,0,0,.56-1.16,1.26,1.26,0,0,0-.41-1,2.37,2.37,0,0,0-1.5-.34Z\" />\n                <path class=\"cls-1\"\n                      d=\"M526,261.29h14.81a4,4,0,0,1,4,3.84l.41,8a46.21,46.21,0,0,1,4.12-4.42,31.78,31.78,0,0,1,5.92-4.41,37.69,37.69,0,0,1,7.93-3.42,35.05,35.05,0,0,1,10.34-1.4,41.71,41.71,0,0,1,6.12.4c.78.11,1.55.27,2.34.45a3.38,3.38,0,0,1,2.53,4L581.18,280a3.37,3.37,0,0,1-4.1,2.54c-.53-.13-1.07-.24-1.6-.32a37.76,37.76,0,0,0-5.93-.41,26.8,26.8,0,0,0-9.23,1.61,21.9,21.9,0,0,0-7.63,4.62,22.36,22.36,0,0,0-7,16.66v46.83a4,4,0,0,1-4,4H525.94a4,4,0,0,1-4-4V265.33a4,4,0,0,1,4-4\" />\n                <path class=\"cls-1\"\n                      d=\"M195.61,263A3.66,3.66,0,0,0,192,266.7v45.76c0,12.53-8.95,21-19.88,21h-4.35c-10.93,0-19.88-8.42-19.88-21V266.7a3.66,3.66,0,0,0-3.66-3.66H129.65A3.65,3.65,0,0,0,126,266.7v50.77c0,22.07,20.19,37.4,41.53,37.6h5.09c21.21-.36,41.18-15.65,41.18-37.59V266.7a3.66,3.66,0,0,0-3.66-3.66Z\" />\n                <path class=\"cls-1\"\n                      d=\"M411.79,309a50.92,50.92,0,0,1,3.71-19.38,49.52,49.52,0,0,1,10.34-16,49,49,0,0,1,16-10.84,54.69,54.69,0,0,1,41.16,0,48.21,48.21,0,0,1,26.3,26.8,51.55,51.55,0,0,1-10.33,54.81,48,48,0,0,1-16,10.94,54.69,54.69,0,0,1-41.16,0,48,48,0,0,1-16-10.94,51,51,0,0,1-14-35.43m50.59,29.91a24.57,24.57,0,0,0,11.85-2.71,25.22,25.22,0,0,0,8.33-7.13,31.15,31.15,0,0,0,4.92-9.63A35.37,35.37,0,0,0,489.09,309a35.73,35.73,0,0,0-1.61-10.34,29.83,29.83,0,0,0-4.92-9.64,25.89,25.89,0,0,0-8.33-7,27.24,27.24,0,0,0-23.69,0,25.68,25.68,0,0,0-8.33,7,29.83,29.83,0,0,0-4.92,9.64,34.33,34.33,0,0,0,0,20.78,31.15,31.15,0,0,0,4.92,9.63,25,25,0,0,0,8.33,7.13,24.5,24.5,0,0,0,11.84,2.71\" />\n                <path class=\"cls-2\"\n                      d=\"M848.14,328.09c3.53,4.27,8.27,7.41,11.82,11.8,4.72,5.85,12.28,22.93,12.33,24.5,0,3.9-3.14,3.68-6.21,5.45-1.46.54-2.32,2.07-3.74-.31a2.42,2.42,0,0,0-2.54-.32c-.88.38-.8,1.72-.7,3a1.8,1.8,0,0,1-1.18,1.87,13.5,13.5,0,0,1-8.12.13c-2.27-.68-3.9-.76-4.58-4.31,0-.1-.05-.21-.08-.31-4.09-11,4.29-4.62-11.86-33.39-.2-.49-.4-1-.59-1.47a20.21,20.21,0,0,0-8.8-12.37,15.25,15.25,0,0,1-6.27-7.38,24.78,24.78,0,0,0-14.44-14.12c-4.25-1.7-8.6-3.21-12.85-5a65.24,65.24,0,0,1-29.48-24.06,16.27,16.27,0,0,1-1.12-1.74c-.7-1.38-6.74-8.63-5.36-8.13,12.69,5.29,42.08,10.48,58.86,12.3a6.85,6.85,0,0,1,5.68,4.17c.13.34,1.39,2.48,1.63,2.84,5.12,8.05,5.42,9.3,7.51,12.17,3.34,4.56,7.9,8.78,8.68,14.53,1.21,9,6.67,14.39,11.41,20.11M978.2,219.43c-.27-.36-1.07-.82-1-1.73.22-3.06-1.32-2.12-2.47-1.36-4,2.63-9.1,3.58-10.36,10.15-.27,1.46-1.65,2-2.74,2.63-10.25,6.09-21.55-1.15-24.31-15.92a101.4,101.4,0,0,0-6.38-22.12c-1.64-3.77-6.46-8.78-8.82-12.71a4.45,4.45,0,0,1-.64-2.15c-.12-4.06-1.84-13.38-12.87-19.8l-.25-.16c-13.52-9.83-42.61-20-58.22-24.7-6-1.64-7.56,2.19-7.7,4.61a3.91,3.91,0,0,0,.16,1.36c.3,1.09.95,3.32,1,3.38,3.7,14.11,8.45,33.66,5.73,32.9-2.92-.81-10.14-41.63-27.2-53.37l-.32-.27c-11.13-10.29-34.24-15.12-42-16.75a4.36,4.36,0,0,1-2.55-1.6c-4.58-6.1-11.74-8-22.87-9.77-4.62-.75-8.58-1.32-12-1.74a4.45,4.45,0,0,1-3.7-5.79l0,0c.35-1.11.36-3.36-.37-3.65s-3.43.83-5.63,1.08a6.46,6.46,0,0,1-3.24-.83c-.54-.32.76.79.19.26-6.42-6.09,9.6-11.71,6.07-12-1.24-.09-2.44-.12-3.63-.14a81,81,0,0,0-13.15.78,1.44,1.44,0,0,1-1.55-1.65,1.27,1.27,0,0,1,.67-1c21.07-11.45,29-24.53,29-24.53s6.41-10.41-8.47-17.3a52.65,52.65,0,0,0-11-3.48A176.71,176.71,0,0,1,694.13,11.2c-3.14-1.37-6-2.7-8.37-3.89a7.32,7.32,0,0,0-1.18-.49c-1.39-.53-2.61-.11-3.33,1.63-1.18,2.88,2.79,4.35,4.86,6,8.85,6.86,18.88,11.24,28,17.17,5.77,3.75,5.94,5.4.65,9-7.68,5.28-16.37,8.57-25.11,11.86a4.27,4.27,0,0,1-1.37.27,17.88,17.88,0,0,0-13.51-2.86,22.32,22.32,0,0,0-18.73,11.78,4.33,4.33,0,0,1-4.15,2.23c-.32,0-.63,0-.95,0a7.12,7.12,0,0,0-1.7-.07c-18.85,1.45-22.6,9.19-23.34,12.5a3,3,0,0,1-1.72,2.17c-40.56,17.11-69.12,4.29-78.69-1.35l-.21-.12a1.46,1.46,0,0,0-2.15,1.76c9,22.93,55.5,24.72,68.48,24.76h1.49a1.5,1.5,0,0,1,1.43,1.92,73.65,73.65,0,0,1-9.82,19.29,19.59,19.59,0,0,0-2.84,5.6l-.27.83a17.18,17.18,0,0,0,.13,10.84,4.52,4.52,0,0,1,.07,2.65,6.93,6.93,0,0,0-.24,1.19,7.16,7.16,0,0,0,0,1.91c2.43,14.84,10.53,18,10.53,18s1.36.83,6.69.57c12.66-.6,33.94-3.62,39.22-4a5.21,5.21,0,0,1,1.67.16l.34.09a5.38,5.38,0,0,1,1.12.42c18.3,9.49,45.57,39.06,55.34,56.15.55,1,1.12,2.06,1.69,3.07,4.59,8.74,9.43,15.27,17.27,21.07a71.52,71.52,0,0,0,7.38,4.79A98,98,0,0,0,755.34,254a158.11,158.11,0,0,0,21.58,6.79c2.31.59,3.82.92,4.78,1.13,4.13.87,7.88,1.38,12.58,2,17.71,2.32,25.92,1.39,29.15,7a21.87,21.87,0,0,1,1.05,3.18,2.41,2.41,0,0,1,.08.25c4.35,12.69,7.1,14.17,9.07,20,.93,2.73,2.37,4.26,4.86,5,3.92,1.17,7.41,3.34,9,7.58,3.66,9.79,10.73,17.36,19.87,19.9,10.08,2.81,14.7,1.92,20.75-6.47,2.26-3.14,2.4-6.06.55-9.33a19.53,19.53,0,0,0-15.56-10.26c-3.14-.39-6.14-2-6.57-5.21-.72-5.39-3.51-8.54-6.74-11.86a6.21,6.21,0,0,1,1.16-10c.94-.55,11.7-9.09,16.07-11.28,1.56-.81,10.85-4.06,11.15-10.58-1.35-15.58,1.19-26.68,2.36-26.58.68.06-.53,5.17,1.55,14.89a12.15,12.15,0,0,0,.41,1.41v0c1.92,11.21,15.27,28.81,21.84,36.28a4.21,4.21,0,0,1,.76,1.27,42.31,42.31,0,0,0,5.24,9.7,14,14,0,0,1,2,4.85c2.12,12.53,8.08,23.56,9.29,36.31.46,4.85,1.55,10.74.9,12.92a3.92,3.92,0,0,0-.21,1.51c.3,3.44,1.4,11.08,2.71,11.74s7.92,2,10.88-1.27a1.87,1.87,0,0,0,.39-1c.58-5.49,2.81-3.11,3.94-1.63a1.23,1.23,0,0,0,1.43.42,12,12,0,0,0,5.63-4.1,1.93,1.93,0,0,0,.4-.87c.89-4.7,1.1-9.32-1.09-13.68a67.21,67.21,0,0,0-6.89-10.75c-6.15-8-9.57-17.13-7.14-28.52a16.32,16.32,0,0,0-2.73-13.32c-1.91-2.64-2.13-5.09-1.44-8.64a111.32,111.32,0,0,0,1.65-32.69c-.17-1.68-1.11-3.55.38-4.88s2.91-.07,4.24.58c6.62,3.24,13,2.28,19.14-1.64,1.43-.91,2.79-1.83,4.51-1.83,7.1,0,10.41-4.66,10.9-7.73a7.87,7.87,0,0,0-1.07-5.19\" />\n            </svg>\n\n        </div>\n        <h5 routerLink=\"Home\">NOVO Design System</h5>\n        <a href=\"https://github.com/bullhorn/novo-elements\"\n           target=\"_blank\"\n           class=\"fork-me\">Fork Me On Github</a>\n    </span>\n    <ul class=\"menu-list\">\n        <li class=\"menu-section-header\"\n            routerLinkActive=\"current\"\n            [routerLinkActiveOptions]=\"{exact: true}\">\n            <a routerLink=\"/home\"\n               class=\"menu-item-header\">Introduction</a>\n        </li>\n\n        <li class=\"menu-section-header\">\n            <span class=\"menu-item-header\">Design</span>\n        </li>\n        <li class=\"menu-item\"\n            *ngFor=\"let route of designRoutes\"\n            routerLinkActive=\"current\"\n            [routerLinkActiveOptions]=\"{exact: true}\">\n            <a [routerLink]=\"route.path\"\n               class=\"menu-link\">{{route.data.title}}</a>\n        </li>\n        <li class=\"menu-section-header\">\n            <span class=\"menu-item-header\">Components</span>\n        </li>\n        <li class=\"menu-item\"\n            *ngFor=\"let route of componentRoutes\"\n            routerLinkActive=\"current\"\n            [routerLinkActiveOptions]=\"{exact: true}\">\n            <a [routerLink]=\"route.path\"\n               class=\"menu-link\">{{route.data.title}}</a>\n        </li>\n        <li class=\"menu-section-header\">\n            <span class=\"menu-item-header\">Form Controls</span>\n        </li>\n        <li class=\"menu-item\"\n            *ngFor=\"let route of formRoutes\"\n            routerLinkActive=\"current\"\n            [routerLinkActiveOptions]=\"{exact: true}\">\n            <a [routerLink]=\"route.path\"\n               class=\"menu-link\">{{route.data.title}}</a>\n        </li>\n        <li class=\"menu-section-header\">\n            <span class=\"menu-item-header\">Layout</span>\n        </li>\n        <li class=\"menu-item\"\n            *ngFor=\"let route of layoutRoutes\"\n            routerLinkActive=\"current\"\n            [routerLinkActiveOptions]=\"{exact: true}\">\n            <a [routerLink]=\"route.path\"\n               class=\"menu-link\">{{route.data.title}}</a>\n        </li>\n        <li class=\"menu-section-header\">\n            <span class=\"menu-item-header\">Utils</span>\n        </li>\n        <li class=\"menu-item\"\n            *ngFor=\"let route of utilRoutes\"\n            routerLinkActive=\"current\"\n            [routerLinkActiveOptions]=\"{exact: true}\">\n            <a [routerLink]=\"route.path\"\n               class=\"menu-link\">{{route.data.title}}</a>\n        </li>\n        <li class=\"menu-line\"></li>\n        <li class=\"menu-section-header\"\n            routerLinkActive=\"current\"\n            [routerLinkActiveOptions]=\"{exact: true}\">\n            <a routerLink=\"/patterns\"\n               class=\"menu-item-header menu-link\">Patterns</a>\n        </li>\n        <li class=\"menu-section-header\"\n            routerLinkActive=\"current\"\n            [routerLinkActiveOptions]=\"{exact: true}\">\n            <a routerLink=\"/templates\"\n               class=\"menu-item-header menu-link\">Templates</a>\n        </li>\n    </ul>\n</nav>\n<main class=\"main-content\"\n      [ngClass]=\"{open: menuOpen}\">\n    <nav class=\"responsive-nav\">\n        <button name=\"open-menu\"\n                (click)=\"toggleMenu()\">\n            <span>&#9776;</span>\n        </button>\n        <svg data-name=\"bullhorn-text\"\n             version=\"1.1\"\n             xmlns=\"http://www.w3.org/2000/svg\"\n             xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n             xmlns:a=\"http://ns.adobe.com/AdobeSVGViewerExtensions/3.0/\"\n             x=\"0px\"\n             y=\"0px\"\n             width=\"240.2px\"\n             height=\"48.8px\"\n             viewBox=\"0 0 240.2 48.8\"\n             style=\"enable-background:new 0 0 240.2 48.8;\"\n             xml:space=\"preserve\">\n            <g>\n                <path class=\"st0\"\n                      d=\"M0,1.5c0-0.6,0.5-1.1,1.1-1.1h20c5.4,0,9.5,1.4,12.3,4.2c2.1,2.1,3.2,4.7,3.2,7.8v0.1c0,1.4-0.2,2.6-0.6,3.8\n            c-0.4,1.1-0.9,2.1-1.5,2.9c-0.6,0.8-1.3,1.6-2.1,2.2c-0.2,0.2-0.4,0.3-0.7,0.5c-0.7,0.5-0.6,1.6,0.1,1.9c1.9,0.9,3.4,1.9,4.7,3.2\n            c1.7,1.7,2.6,4.2,2.6,7.4v0.1c0,2.1-0.4,4-1.2,5.6c-0.8,1.6-2,3-3.5,4c-1.5,1.1-3.4,1.9-5.5,2.5c-2.1,0.6-4.5,0.8-7.2,0.8H1.1\n            C0.5,47.5,0,47,0,46.4V1.5z M19.4,20.3c2.7,0,4.8-0.5,6.5-1.6c1.6-1,2.4-2.6,2.4-4.8v-0.1c0-1.9-0.7-3.3-2.1-4.4\n            c-1.4-1-3.5-1.6-6.2-1.6H9.3c-0.6,0-1.1,0.5-1.1,1.1v10.2c0,0.6,0.5,1.1,1.1,1.1H19.4z M21.8,40.1c2.8,0,5-0.5,6.7-1.6\n            c1.6-1.1,2.4-2.7,2.4-4.8v-0.1c0-2-0.8-3.6-2.4-4.6c-1.6-1.1-4-1.6-7.3-1.6h-12c-0.6,0-1.1,0.5-1.1,1.1V39c0,0.6,0.5,1.1,1.1,1.1\n            H21.8z\" />\n                <path class=\"st0\"\n                      d=\"M81.3,0h5.9c0.7,0,1.3,0.6,1.3,1.3v45c0,0.7-0.6,1.3-1.3,1.3h-5.9c-0.7,0-1.3-0.6-1.3-1.3v-45\n            C80.1,0.6,80.6,0,81.3,0z\" />\n                <path class=\"st0\"\n                      d=\"M96,0h5.9c0.7,0,1.3,0.6,1.3,1.3v45c0,0.7-0.6,1.3-1.3,1.3H96c-0.7,0-1.3-0.6-1.3-1.3v-45\n            C94.8,0.6,95.3,0,96,0z\" />\n                <path class=\"st0\"\n                      d=\"M109.5,0l4,0c2.3,0,4.2,1.9,4.2,4.2v13.3c0.9-0.9,2.1-1.9,3.7-2.8c1.6-0.9,3.7-1.4,6.3-1.4c2,0,3.9,0.3,5.5,1\n            c1.6,0.7,3,1.6,4,2.8c1.1,1.2,1.9,2.7,2.5,4.4c0.6,1.7,0.9,3.6,0.9,5.6v19.1c0,0.6-0.5,1.2-1.2,1.2h-6.1c-0.6,0-1.2-0.5-1.2-1.2\n            V27.3c0-2.1-0.6-3.8-1.7-4.9c-1.2-1.2-2.7-1.7-4.5-1.7c-1.1,0-2.2,0.2-3.2,0.7c-1,0.5-1.9,1.1-2.6,1.9c-0.7,0.8-1.3,1.7-1.7,2.8\n            c-0.4,1.1-0.6,2.2-0.6,3.5v16.9c0,0.6-0.5,1.2-1.2,1.2h-6.1c-0.6,0-1.2-0.5-1.2-1.2V5.8V0z\" />\n                <path class=\"st0\"\n                      d=\"M210.5,14.1h5.3c0.7,0,1.4,0.6,1.4,1.3l0.1,2.4c0.4-0.5,0.9-1,1.5-1.5c0.6-0.5,1.3-1,2.1-1.5\n            c0.8-0.5,1.8-0.8,2.8-1.1c1-0.3,2.2-0.4,3.6-0.4c4.2,0,7.4,1.2,9.5,3.7c2.2,2.5,3.3,5.8,3.3,10.1V46c0,0.8-0.7,1.5-1.5,1.5h-5.4\n            c-0.8,0-1.5-0.7-1.5-1.5V27.3c0-2.1-0.6-3.8-1.7-4.9c-1.2-1.2-2.7-1.7-4.5-1.7c-1.1,0-2.2,0.2-3.2,0.7c-1,0.5-1.9,1.1-2.6,1.9\n            c-0.7,0.8-1.3,1.7-1.7,2.8c-0.4,1.1-0.6,2.2-0.6,3.5V46c0,0.8-0.7,1.5-1.5,1.5h-5.4c-0.8,0-1.5-0.7-1.5-1.5V15.5\n            C209.1,14.7,209.7,14.1,210.5,14.1z\" />\n                <g>\n                    <path class=\"st0\"\n                          d=\"M184.5,14h5.3c0.8,0,1.4,0.6,1.4,1.4l0.1,2.8c0.4-0.5,0.9-1,1.5-1.6c0.6-0.6,1.3-1.1,2.1-1.6\n                c0.8-0.5,1.7-0.9,2.8-1.2c1.1-0.3,2.3-0.5,3.7-0.5c0.8,0,1.5,0,2.2,0.1c0.3,0,0.5,0.1,0.8,0.2c0.6,0.2,1,0.8,0.9,1.4l-1.2,5.5\n                c-0.1,0.7-0.8,1.1-1.5,0.9c-0.2,0-0.4-0.1-0.6-0.1c-0.6-0.1-1.3-0.1-2.1-0.1c-1.1,0-2.2,0.2-3.3,0.6c-1,0.4-1.9,0.9-2.7,1.6\n                c-0.8,0.7-1.4,1.6-1.8,2.6c-0.5,1-0.7,2.1-0.7,3.3V46c0,0.8-0.6,1.4-1.4,1.4h-5.6c-0.8,0-1.4-0.6-1.4-1.4V15.4\n                C183.1,14.6,183.7,14,184.5,14z\" />\n                </g>\n                <path id=\"u_1_\"\n                      class=\"st0\"\n                      d=\"M67.4,14.6c-0.7,0-1.3,0.6-1.3,1.3v16.2c0,4.4-3.2,7.4-7,7.4c-0.7,0-1.2,0-1.5,0c-3.9,0-7-3-7-7.4\n            V15.9c0-0.7-0.6-1.3-1.3-1.3H44c-0.7,0-1.3,0.6-1.3,1.3v18c0,7.8,7.2,13.3,14.7,13.3v0h0.1c0,0,0.1,0,0.1,0l0,0h1.4l0,0\n            c0,0,0.1,0,0.1,0h0.2v0c7.5-0.1,14.6-5.5,14.6-13.3v-18c0-0.7-0.6-1.3-1.3-1.3H67.4z\" />\n                <g>\n                    <g>\n                        <g>\n                            <path class=\"st0\"\n                                  d=\"M144,30.9c0-2.4,0.4-4.7,1.3-6.9c0.9-2.2,2.1-4,3.7-5.7c1.6-1.6,3.5-2.9,5.7-3.8c2.2-0.9,4.6-1.4,7.3-1.4\n                        c2.7,0,5.1,0.5,7.3,1.4c2.2,0.9,4.1,2.2,5.7,3.8c1.6,1.6,2.8,3.5,3.7,5.7c0.9,2.2,1.3,4.4,1.3,6.9s-0.4,4.7-1.3,6.9\n                        c-0.9,2.2-2.1,4.1-3.7,5.7c-1.6,1.6-3.5,2.9-5.7,3.9c-2.2,0.9-4.6,1.4-7.3,1.4c-2.7,0-5.1-0.5-7.3-1.4c-2.2-0.9-4.1-2.2-5.7-3.9\n                        c-1.6-1.6-2.8-3.5-3.7-5.7C144.4,35.6,144,33.3,144,30.9z M161.9,41.5c1.6,0,3-0.3,4.2-1c1.2-0.6,2.2-1.5,3-2.5\n                        c0.8-1,1.4-2.2,1.7-3.4c0.4-1.2,0.6-2.5,0.6-3.7c0-1.2-0.2-2.4-0.6-3.7c-0.4-1.3-1-2.4-1.7-3.4c-0.8-1-1.8-1.9-3-2.5\n                        c-1.2-0.6-2.6-1-4.2-1c-1.6,0-3,0.3-4.2,1c-1.2,0.6-2.2,1.5-3,2.5c-0.8,1-1.4,2.2-1.7,3.4c-0.4,1.3-0.6,2.5-0.6,3.7\n                        c0,1.2,0.2,2.5,0.6,3.7c0.4,1.2,1,2.4,1.7,3.4c0.8,1,1.8,1.9,3,2.5C158.9,41.2,160.3,41.5,161.9,41.5z\" />\n                        </g>\n                    </g>\n                </g>\n            </g>\n        </svg>\n        <strong>Design System</strong>\n    </nav>\n    <section class=\"container\">\n        <router-outlet></router-outlet>\n    </section>\n</main>\n");

/***/ }),

/***/ 0:
/*!****************************!*\
  !*** multi ./demo/main.ts ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! /home/travis/build/bullhorn/novo-elements/demo/main.ts */"./demo/main.ts");


/***/ })

},[[0,"runtime","vendor"]]]);
//# sourceMappingURL=main-es2015.js.map